
fan_control_samd21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00021e20  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003fc  20000000  00021e20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000280c  200003fc  0002221c  000403fc  2**2
                  ALLOC
  3 .stack        00002000  20002c08  00024a28  000403fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000403fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00040424  2**0
                  CONTENTS, READONLY
  6 .debug_info   000b9316  00000000  00000000  0004047d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000e86c  00000000  00000000  000f9793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f251  00000000  00000000  00107fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002ae0  00000000  00000000  00117250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002708  00000000  00000000  00119d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00033731  00000000  00000000  0011c438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0003e30c  00000000  00000000  0014fb69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a7e88  00000000  00000000  0018de75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000a70c  00000000  00000000  00235d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 4c 00 20 15 f4 00 00 0d f5 00 00 0d f5 00 00     .L. ............
	...
      2c:	0d f5 00 00 00 00 00 00 00 00 00 00 0d f5 00 00     ................
      3c:	0d f5 00 00 0d f5 00 00 0d f5 00 00 0d f5 00 00     ................
      4c:	0d f5 00 00 39 c4 00 00 0d f5 00 00 0d f5 00 00     ....9...........
      5c:	3d 4e 00 00 0d f5 00 00 05 cf 00 00 1d cf 00 00     =N..............
      6c:	35 cf 00 00 4d cf 00 00 65 cf 00 00 7d cf 00 00     5...M...e...}...
      7c:	0d f5 00 00 0d f5 00 00 0d f5 00 00 19 18 00 00     ................
      8c:	2d 18 00 00 41 18 00 00 55 18 00 00 69 18 00 00     -...A...U...i...
      9c:	0d f5 00 00 0d f5 00 00 0d f5 00 00 0d f5 00 00     ................
      ac:	0d f5 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003fc 	.word	0x200003fc
      d4:	00000000 	.word	0x00000000
      d8:	00021e20 	.word	0x00021e20

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000400 	.word	0x20000400
     108:	00021e20 	.word	0x00021e20
     10c:	00021e20 	.word	0x00021e20
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     122:	f3ef 8310 	mrs	r3, PRIMASK
     126:	607b      	str	r3, [r7, #4]
  return(result);
     128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     12e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
     136:	2200      	movs	r2, #0
     138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
     13c:	2201      	movs	r2, #1
     13e:	701a      	strb	r2, [r3, #0]
     140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
     144:	2200      	movs	r2, #0
     146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	1c5a      	adds	r2, r3, #1
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	20000418 	.word	0x20000418
     160:	20000000 	.word	0x20000000
     164:	2000041c 	.word	0x2000041c

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     168:	b580      	push	{r7, lr}
     16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	1e5a      	subs	r2, r3, #1
     172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
     174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
     180:	781b      	ldrb	r3, [r3, #0]
     182:	b2db      	uxtb	r3, r3
     184:	2b00      	cmp	r3, #0
     186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
     18e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     192:	b662      	cpsie	i
	}
}
     194:	46c0      	nop			; (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	20000418 	.word	0x20000418
     1a0:	2000041c 	.word	0x2000041c
     1a4:	20000000 	.word	0x20000000

000001a8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2280      	movs	r2, #128	; 0x80
     1b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	2200      	movs	r2, #0
     1ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2201      	movs	r2, #1
     1c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2200      	movs	r2, #0
     1c6:	70da      	strb	r2, [r3, #3]
}
     1c8:	46c0      	nop			; (mov r8, r8)
     1ca:	46bd      	mov	sp, r7
     1cc:	b002      	add	sp, #8
     1ce:	bd80      	pop	{r7, pc}

000001d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b084      	sub	sp, #16
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	6039      	str	r1, [r7, #0]
     1da:	1dfb      	adds	r3, r7, #7
     1dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     1de:	230c      	movs	r3, #12
     1e0:	18fb      	adds	r3, r7, r3
     1e2:	0018      	movs	r0, r3
     1e4:	4b10      	ldr	r3, [pc, #64]	; (228 <port_pin_set_config+0x58>)
     1e6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     1e8:	230c      	movs	r3, #12
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	2280      	movs	r2, #128	; 0x80
     1ee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1f0:	683b      	ldr	r3, [r7, #0]
     1f2:	781a      	ldrb	r2, [r3, #0]
     1f4:	230c      	movs	r3, #12
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1fa:	683b      	ldr	r3, [r7, #0]
     1fc:	785a      	ldrb	r2, [r3, #1]
     1fe:	230c      	movs	r3, #12
     200:	18fb      	adds	r3, r7, r3
     202:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     204:	683b      	ldr	r3, [r7, #0]
     206:	789a      	ldrb	r2, [r3, #2]
     208:	230c      	movs	r3, #12
     20a:	18fb      	adds	r3, r7, r3
     20c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     20e:	230c      	movs	r3, #12
     210:	18fa      	adds	r2, r7, r3
     212:	1dfb      	adds	r3, r7, #7
     214:	781b      	ldrb	r3, [r3, #0]
     216:	0011      	movs	r1, r2
     218:	0018      	movs	r0, r3
     21a:	4b04      	ldr	r3, [pc, #16]	; (22c <port_pin_set_config+0x5c>)
     21c:	4798      	blx	r3
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	b004      	add	sp, #16
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	000001a9 	.word	0x000001a9
     22c:	000003a1 	.word	0x000003a1

00000230 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     230:	b580      	push	{r7, lr}
     232:	b084      	sub	sp, #16
     234:	af00      	add	r7, sp, #0
     236:	0002      	movs	r2, r0
     238:	1dfb      	adds	r3, r7, #7
     23a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     23c:	230f      	movs	r3, #15
     23e:	18fb      	adds	r3, r7, r3
     240:	1dfa      	adds	r2, r7, #7
     242:	7812      	ldrb	r2, [r2, #0]
     244:	09d2      	lsrs	r2, r2, #7
     246:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     248:	230e      	movs	r3, #14
     24a:	18fb      	adds	r3, r7, r3
     24c:	1dfa      	adds	r2, r7, #7
     24e:	7812      	ldrb	r2, [r2, #0]
     250:	0952      	lsrs	r2, r2, #5
     252:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     254:	4b0d      	ldr	r3, [pc, #52]	; (28c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     256:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     258:	230f      	movs	r3, #15
     25a:	18fb      	adds	r3, r7, r3
     25c:	781b      	ldrb	r3, [r3, #0]
     25e:	2b00      	cmp	r3, #0
     260:	d10f      	bne.n	282 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     262:	230f      	movs	r3, #15
     264:	18fb      	adds	r3, r7, r3
     266:	781b      	ldrb	r3, [r3, #0]
     268:	009b      	lsls	r3, r3, #2
     26a:	2210      	movs	r2, #16
     26c:	4694      	mov	ip, r2
     26e:	44bc      	add	ip, r7
     270:	4463      	add	r3, ip
     272:	3b08      	subs	r3, #8
     274:	681a      	ldr	r2, [r3, #0]
     276:	230e      	movs	r3, #14
     278:	18fb      	adds	r3, r7, r3
     27a:	781b      	ldrb	r3, [r3, #0]
     27c:	01db      	lsls	r3, r3, #7
     27e:	18d3      	adds	r3, r2, r3
     280:	e000      	b.n	284 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     282:	2300      	movs	r3, #0
	}
}
     284:	0018      	movs	r0, r3
     286:	46bd      	mov	sp, r7
     288:	b004      	add	sp, #16
     28a:	bd80      	pop	{r7, pc}
     28c:	41004400 	.word	0x41004400

00000290 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     290:	b580      	push	{r7, lr}
     292:	b088      	sub	sp, #32
     294:	af00      	add	r7, sp, #0
     296:	60f8      	str	r0, [r7, #12]
     298:	60b9      	str	r1, [r7, #8]
     29a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     29c:	2300      	movs	r3, #0
     29e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	78db      	ldrb	r3, [r3, #3]
     2a4:	2201      	movs	r2, #1
     2a6:	4053      	eors	r3, r2
     2a8:	b2db      	uxtb	r3, r3
     2aa:	2b00      	cmp	r3, #0
     2ac:	d035      	beq.n	31a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	781b      	ldrb	r3, [r3, #0]
     2b2:	2b80      	cmp	r3, #128	; 0x80
     2b4:	d00b      	beq.n	2ce <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
     2b6:	69fb      	ldr	r3, [r7, #28]
     2b8:	2280      	movs	r2, #128	; 0x80
     2ba:	0252      	lsls	r2, r2, #9
     2bc:	4313      	orrs	r3, r2
     2be:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	061b      	lsls	r3, r3, #24
     2c6:	001a      	movs	r2, r3
     2c8:	69fb      	ldr	r3, [r7, #28]
     2ca:	4313      	orrs	r3, r2
     2cc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	785b      	ldrb	r3, [r3, #1]
     2d2:	2b00      	cmp	r3, #0
     2d4:	d003      	beq.n	2de <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     2da:	2b02      	cmp	r3, #2
     2dc:	d110      	bne.n	300 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     2de:	69fb      	ldr	r3, [r7, #28]
     2e0:	2280      	movs	r2, #128	; 0x80
     2e2:	0292      	lsls	r2, r2, #10
     2e4:	4313      	orrs	r3, r2
     2e6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	789b      	ldrb	r3, [r3, #2]
     2ec:	2b00      	cmp	r3, #0
     2ee:	d004      	beq.n	2fa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     2f0:	69fb      	ldr	r3, [r7, #28]
     2f2:	2280      	movs	r2, #128	; 0x80
     2f4:	02d2      	lsls	r2, r2, #11
     2f6:	4313      	orrs	r3, r2
     2f8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	68ba      	ldr	r2, [r7, #8]
     2fe:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     300:	687b      	ldr	r3, [r7, #4]
     302:	785b      	ldrb	r3, [r3, #1]
     304:	2b01      	cmp	r3, #1
     306:	d003      	beq.n	310 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     308:	687b      	ldr	r3, [r7, #4]
     30a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     30c:	2b02      	cmp	r3, #2
     30e:	d107      	bne.n	320 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     310:	69fb      	ldr	r3, [r7, #28]
     312:	4a22      	ldr	r2, [pc, #136]	; (39c <_system_pinmux_config+0x10c>)
     314:	4013      	ands	r3, r2
     316:	61fb      	str	r3, [r7, #28]
     318:	e002      	b.n	320 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     31a:	68fb      	ldr	r3, [r7, #12]
     31c:	68ba      	ldr	r2, [r7, #8]
     31e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     320:	68bb      	ldr	r3, [r7, #8]
     322:	041b      	lsls	r3, r3, #16
     324:	0c1b      	lsrs	r3, r3, #16
     326:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
     328:	68bb      	ldr	r3, [r7, #8]
     32a:	0c1b      	lsrs	r3, r3, #16
     32c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     32e:	69ba      	ldr	r2, [r7, #24]
     330:	69fb      	ldr	r3, [r7, #28]
     332:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     334:	22a0      	movs	r2, #160	; 0xa0
     336:	05d2      	lsls	r2, r2, #23
     338:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     33a:	68fb      	ldr	r3, [r7, #12]
     33c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     33e:	697a      	ldr	r2, [r7, #20]
     340:	69fb      	ldr	r3, [r7, #28]
     342:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     344:	22d0      	movs	r2, #208	; 0xd0
     346:	0612      	lsls	r2, r2, #24
     348:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     34a:	68fb      	ldr	r3, [r7, #12]
     34c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     34e:	687b      	ldr	r3, [r7, #4]
     350:	78db      	ldrb	r3, [r3, #3]
     352:	2201      	movs	r2, #1
     354:	4053      	eors	r3, r2
     356:	b2db      	uxtb	r3, r3
     358:	2b00      	cmp	r3, #0
     35a:	d01a      	beq.n	392 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     35c:	69fa      	ldr	r2, [r7, #28]
     35e:	2380      	movs	r3, #128	; 0x80
     360:	02db      	lsls	r3, r3, #11
     362:	4013      	ands	r3, r2
     364:	d00a      	beq.n	37c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     366:	687b      	ldr	r3, [r7, #4]
     368:	789b      	ldrb	r3, [r3, #2]
     36a:	2b01      	cmp	r3, #1
     36c:	d103      	bne.n	376 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	68ba      	ldr	r2, [r7, #8]
     372:	619a      	str	r2, [r3, #24]
     374:	e002      	b.n	37c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
     376:	68fb      	ldr	r3, [r7, #12]
     378:	68ba      	ldr	r2, [r7, #8]
     37a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	785b      	ldrb	r3, [r3, #1]
     380:	2b01      	cmp	r3, #1
     382:	d003      	beq.n	38c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     384:	687b      	ldr	r3, [r7, #4]
     386:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     388:	2b02      	cmp	r3, #2
     38a:	d102      	bne.n	392 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     38c:	68fb      	ldr	r3, [r7, #12]
     38e:	68ba      	ldr	r2, [r7, #8]
     390:	609a      	str	r2, [r3, #8]
		}
	}
}
     392:	46c0      	nop			; (mov r8, r8)
     394:	46bd      	mov	sp, r7
     396:	b008      	add	sp, #32
     398:	bd80      	pop	{r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	fffbffff 	.word	0xfffbffff

000003a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     3a0:	b580      	push	{r7, lr}
     3a2:	b084      	sub	sp, #16
     3a4:	af00      	add	r7, sp, #0
     3a6:	0002      	movs	r2, r0
     3a8:	6039      	str	r1, [r7, #0]
     3aa:	1dfb      	adds	r3, r7, #7
     3ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     3ae:	1dfb      	adds	r3, r7, #7
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	0018      	movs	r0, r3
     3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <system_pinmux_pin_set_config+0x40>)
     3b6:	4798      	blx	r3
     3b8:	0003      	movs	r3, r0
     3ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     3bc:	1dfb      	adds	r3, r7, #7
     3be:	781b      	ldrb	r3, [r3, #0]
     3c0:	221f      	movs	r2, #31
     3c2:	4013      	ands	r3, r2
     3c4:	2201      	movs	r2, #1
     3c6:	409a      	lsls	r2, r3
     3c8:	0013      	movs	r3, r2
     3ca:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
     3cc:	683a      	ldr	r2, [r7, #0]
     3ce:	68b9      	ldr	r1, [r7, #8]
     3d0:	68fb      	ldr	r3, [r7, #12]
     3d2:	0018      	movs	r0, r3
     3d4:	4b03      	ldr	r3, [pc, #12]	; (3e4 <system_pinmux_pin_set_config+0x44>)
     3d6:	4798      	blx	r3
}
     3d8:	46c0      	nop			; (mov r8, r8)
     3da:	46bd      	mov	sp, r7
     3dc:	b004      	add	sp, #16
     3de:	bd80      	pop	{r7, pc}
     3e0:	00000231 	.word	0x00000231
     3e4:	00000291 	.word	0x00000291

000003e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     3e8:	b580      	push	{r7, lr}
     3ea:	b084      	sub	sp, #16
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     3f0:	4b0a      	ldr	r3, [pc, #40]	; (41c <_sbrk+0x34>)
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	2b00      	cmp	r3, #0
     3f6:	d102      	bne.n	3fe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
     3f8:	4b08      	ldr	r3, [pc, #32]	; (41c <_sbrk+0x34>)
     3fa:	4a09      	ldr	r2, [pc, #36]	; (420 <_sbrk+0x38>)
     3fc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
     3fe:	4b07      	ldr	r3, [pc, #28]	; (41c <_sbrk+0x34>)
     400:	681b      	ldr	r3, [r3, #0]
     402:	60fb      	str	r3, [r7, #12]

	heap += incr;
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <_sbrk+0x34>)
     406:	681a      	ldr	r2, [r3, #0]
     408:	687b      	ldr	r3, [r7, #4]
     40a:	18d2      	adds	r2, r2, r3
     40c:	4b03      	ldr	r3, [pc, #12]	; (41c <_sbrk+0x34>)
     40e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
     410:	68fb      	ldr	r3, [r7, #12]
}
     412:	0018      	movs	r0, r3
     414:	46bd      	mov	sp, r7
     416:	b004      	add	sp, #16
     418:	bd80      	pop	{r7, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	20000420 	.word	0x20000420
     420:	20004c08 	.word	0x20004c08

00000424 <_close>:
{
	return -1;
}

extern int _close(int file)
{
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
	return -1;
     42c:	2301      	movs	r3, #1
     42e:	425b      	negs	r3, r3
}
     430:	0018      	movs	r0, r3
     432:	46bd      	mov	sp, r7
     434:	b002      	add	sp, #8
     436:	bd80      	pop	{r7, pc}

00000438 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
     43e:	6078      	str	r0, [r7, #4]
     440:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
     442:	683b      	ldr	r3, [r7, #0]
     444:	2280      	movs	r2, #128	; 0x80
     446:	0192      	lsls	r2, r2, #6
     448:	605a      	str	r2, [r3, #4]

	return 0;
     44a:	2300      	movs	r3, #0
}
     44c:	0018      	movs	r0, r3
     44e:	46bd      	mov	sp, r7
     450:	b002      	add	sp, #8
     452:	bd80      	pop	{r7, pc}

00000454 <_isatty>:

extern int _isatty(int file)
{
     454:	b580      	push	{r7, lr}
     456:	b082      	sub	sp, #8
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
	return 1;
     45c:	2301      	movs	r3, #1
}
     45e:	0018      	movs	r0, r3
     460:	46bd      	mov	sp, r7
     462:	b002      	add	sp, #8
     464:	bd80      	pop	{r7, pc}

00000466 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
     466:	b580      	push	{r7, lr}
     468:	b084      	sub	sp, #16
     46a:	af00      	add	r7, sp, #0
     46c:	60f8      	str	r0, [r7, #12]
     46e:	60b9      	str	r1, [r7, #8]
     470:	607a      	str	r2, [r7, #4]
	return 0;
     472:	2300      	movs	r3, #0
}
     474:	0018      	movs	r0, r3
     476:	46bd      	mov	sp, r7
     478:	b004      	add	sp, #16
     47a:	bd80      	pop	{r7, pc}

0000047c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     47c:	b580      	push	{r7, lr}
     47e:	b082      	sub	sp, #8
     480:	af00      	add	r7, sp, #0
     482:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     484:	687b      	ldr	r3, [r7, #4]
     486:	2b00      	cmp	r3, #0
     488:	d00c      	beq.n	4a4 <delay_cycles+0x28>
		SysTick->LOAD = n;
     48a:	4b08      	ldr	r3, [pc, #32]	; (4ac <delay_cycles+0x30>)
     48c:	687a      	ldr	r2, [r7, #4]
     48e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     490:	4b06      	ldr	r3, [pc, #24]	; (4ac <delay_cycles+0x30>)
     492:	2200      	movs	r2, #0
     494:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     496:	46c0      	nop			; (mov r8, r8)
     498:	4b04      	ldr	r3, [pc, #16]	; (4ac <delay_cycles+0x30>)
     49a:	681a      	ldr	r2, [r3, #0]
     49c:	2380      	movs	r3, #128	; 0x80
     49e:	025b      	lsls	r3, r3, #9
     4a0:	4013      	ands	r3, r2
     4a2:	d0f9      	beq.n	498 <delay_cycles+0x1c>
		};
	}
}
     4a4:	46c0      	nop			; (mov r8, r8)
     4a6:	46bd      	mov	sp, r7
     4a8:	b002      	add	sp, #8
     4aa:	bd80      	pop	{r7, pc}
     4ac:	e000e010 	.word	0xe000e010

000004b0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     4b0:	b580      	push	{r7, lr}
     4b2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     4b4:	2000      	movs	r0, #0
     4b6:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <delay_init+0x44>)
     4b8:	4798      	blx	r3
     4ba:	0002      	movs	r2, r0
     4bc:	4b0e      	ldr	r3, [pc, #56]	; (4f8 <delay_init+0x48>)
     4be:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     4c0:	4b0d      	ldr	r3, [pc, #52]	; (4f8 <delay_init+0x48>)
     4c2:	6818      	ldr	r0, [r3, #0]
     4c4:	4b0d      	ldr	r3, [pc, #52]	; (4fc <delay_init+0x4c>)
     4c6:	22fa      	movs	r2, #250	; 0xfa
     4c8:	0091      	lsls	r1, r2, #2
     4ca:	4798      	blx	r3
     4cc:	0003      	movs	r3, r0
     4ce:	001a      	movs	r2, r3
     4d0:	4b09      	ldr	r3, [pc, #36]	; (4f8 <delay_init+0x48>)
     4d2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     4d4:	4b08      	ldr	r3, [pc, #32]	; (4f8 <delay_init+0x48>)
     4d6:	6818      	ldr	r0, [r3, #0]
     4d8:	4b08      	ldr	r3, [pc, #32]	; (4fc <delay_init+0x4c>)
     4da:	22fa      	movs	r2, #250	; 0xfa
     4dc:	0091      	lsls	r1, r2, #2
     4de:	4798      	blx	r3
     4e0:	0003      	movs	r3, r0
     4e2:	001a      	movs	r2, r3
     4e4:	4b06      	ldr	r3, [pc, #24]	; (500 <delay_init+0x50>)
     4e6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     4e8:	4b06      	ldr	r3, [pc, #24]	; (504 <delay_init+0x54>)
     4ea:	2205      	movs	r2, #5
     4ec:	601a      	str	r2, [r3, #0]
}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	46bd      	mov	sp, r7
     4f2:	bd80      	pop	{r7, pc}
     4f4:	0000f181 	.word	0x0000f181
     4f8:	20000004 	.word	0x20000004
     4fc:	00019d81 	.word	0x00019d81
     500:	20000008 	.word	0x20000008
     504:	e000e010 	.word	0xe000e010

00000508 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     508:	b580      	push	{r7, lr}
     50a:	b082      	sub	sp, #8
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
	while (n--) {
     510:	e004      	b.n	51c <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     512:	4b07      	ldr	r3, [pc, #28]	; (530 <delay_cycles_us+0x28>)
     514:	681b      	ldr	r3, [r3, #0]
     516:	0018      	movs	r0, r3
     518:	4b06      	ldr	r3, [pc, #24]	; (534 <delay_cycles_us+0x2c>)
     51a:	4798      	blx	r3
	while (n--) {
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	1e5a      	subs	r2, r3, #1
     520:	607a      	str	r2, [r7, #4]
     522:	2b00      	cmp	r3, #0
     524:	d1f5      	bne.n	512 <delay_cycles_us+0xa>
	}
}
     526:	46c0      	nop			; (mov r8, r8)
     528:	46bd      	mov	sp, r7
     52a:	b002      	add	sp, #8
     52c:	bd80      	pop	{r7, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	20000008 	.word	0x20000008
     534:	0000047d 	.word	0x0000047d

00000538 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     538:	b580      	push	{r7, lr}
     53a:	b082      	sub	sp, #8
     53c:	af00      	add	r7, sp, #0
     53e:	6078      	str	r0, [r7, #4]
	while (n--) {
     540:	e004      	b.n	54c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     542:	4b07      	ldr	r3, [pc, #28]	; (560 <delay_cycles_ms+0x28>)
     544:	681b      	ldr	r3, [r3, #0]
     546:	0018      	movs	r0, r3
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <delay_cycles_ms+0x2c>)
     54a:	4798      	blx	r3
	while (n--) {
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	1e5a      	subs	r2, r3, #1
     550:	607a      	str	r2, [r7, #4]
     552:	2b00      	cmp	r3, #0
     554:	d1f5      	bne.n	542 <delay_cycles_ms+0xa>
	}
}
     556:	46c0      	nop			; (mov r8, r8)
     558:	46bd      	mov	sp, r7
     55a:	b002      	add	sp, #8
     55c:	bd80      	pop	{r7, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	20000004 	.word	0x20000004
     564:	0000047d 	.word	0x0000047d

00000568 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
     568:	b580      	push	{r7, lr}
     56a:	b082      	sub	sp, #8
     56c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     56e:	f3ef 8310 	mrs	r3, PRIMASK
     572:	607b      	str	r3, [r7, #4]
  return(result);
     574:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
     576:	425a      	negs	r2, r3
     578:	4153      	adcs	r3, r2
     57a:	b2db      	uxtb	r3, r3
     57c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     57e:	b672      	cpsid	i
     580:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     584:	4b03      	ldr	r3, [pc, #12]	; (594 <cpu_irq_save+0x2c>)
     586:	2200      	movs	r2, #0
     588:	701a      	strb	r2, [r3, #0]
	return flags;
     58a:	683b      	ldr	r3, [r7, #0]
}
     58c:	0018      	movs	r0, r3
     58e:	46bd      	mov	sp, r7
     590:	b002      	add	sp, #8
     592:	bd80      	pop	{r7, pc}
     594:	20000000 	.word	0x20000000

00000598 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	6078      	str	r0, [r7, #4]
	return (flags);
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	1e5a      	subs	r2, r3, #1
     5a4:	4193      	sbcs	r3, r2
     5a6:	b2db      	uxtb	r3, r3
}
     5a8:	0018      	movs	r0, r3
     5aa:	46bd      	mov	sp, r7
     5ac:	b002      	add	sp, #8
     5ae:	bd80      	pop	{r7, pc}

000005b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     5b0:	b580      	push	{r7, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	af00      	add	r7, sp, #0
     5b6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	0018      	movs	r0, r3
     5bc:	4b06      	ldr	r3, [pc, #24]	; (5d8 <cpu_irq_restore+0x28>)
     5be:	4798      	blx	r3
     5c0:	1e03      	subs	r3, r0, #0
     5c2:	d005      	beq.n	5d0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
     5c4:	4b05      	ldr	r3, [pc, #20]	; (5dc <cpu_irq_restore+0x2c>)
     5c6:	2201      	movs	r2, #1
     5c8:	701a      	strb	r2, [r3, #0]
     5ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     5ce:	b662      	cpsie	i
}
     5d0:	46c0      	nop			; (mov r8, r8)
     5d2:	46bd      	mov	sp, r7
     5d4:	b002      	add	sp, #8
     5d6:	bd80      	pop	{r7, pc}
     5d8:	00000599 	.word	0x00000599
     5dc:	20000000 	.word	0x20000000

000005e0 <udi_hid_generic_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_rate = 0;
     5e4:	4b0c      	ldr	r3, [pc, #48]	; (618 <udi_hid_generic_enable+0x38>)
     5e6:	2200      	movs	r2, #0
     5e8:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_protocol = 0;
     5ea:	4b0c      	ldr	r3, [pc, #48]	; (61c <udi_hid_generic_enable+0x3c>)
     5ec:	2200      	movs	r2, #0
     5ee:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_report_in_free = true;
     5f0:	4b0b      	ldr	r3, [pc, #44]	; (620 <udi_hid_generic_enable+0x40>)
     5f2:	2201      	movs	r2, #1
     5f4:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
     5f6:	4b0b      	ldr	r3, [pc, #44]	; (624 <udi_hid_generic_enable+0x44>)
     5f8:	4798      	blx	r3
     5fa:	0003      	movs	r3, r0
     5fc:	001a      	movs	r2, r3
     5fe:	2301      	movs	r3, #1
     600:	4053      	eors	r3, r2
     602:	b2db      	uxtb	r3, r3
     604:	2b00      	cmp	r3, #0
     606:	d001      	beq.n	60c <udi_hid_generic_enable+0x2c>
		return false;
     608:	2300      	movs	r3, #0
     60a:	e002      	b.n	612 <udi_hid_generic_enable+0x32>
	return UDI_HID_GENERIC_ENABLE_EXT();
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <udi_hid_generic_enable+0x48>)
     60e:	4798      	blx	r3
     610:	0003      	movs	r3, r0
}
     612:	0018      	movs	r0, r3
     614:	46bd      	mov	sp, r7
     616:	bd80      	pop	{r7, pc}
     618:	20000424 	.word	0x20000424
     61c:	20000428 	.word	0x20000428
     620:	20000429 	.word	0x20000429
     624:	000007e9 	.word	0x000007e9
     628:	00017b65 	.word	0x00017b65

0000062c <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
     62c:	b580      	push	{r7, lr}
     62e:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_DISABLE_EXT();
     630:	4b02      	ldr	r3, [pc, #8]	; (63c <udi_hid_generic_disable+0x10>)
     632:	4798      	blx	r3
}
     634:	46c0      	nop			; (mov r8, r8)
     636:	46bd      	mov	sp, r7
     638:	bd80      	pop	{r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	00017b71 	.word	0x00017b71

00000640 <udi_hid_generic_setup>:


bool udi_hid_generic_setup(void)
{
     640:	b5b0      	push	{r4, r5, r7, lr}
     642:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_rate,
     644:	4b04      	ldr	r3, [pc, #16]	; (658 <udi_hid_generic_setup+0x18>)
     646:	4a05      	ldr	r2, [pc, #20]	; (65c <udi_hid_generic_setup+0x1c>)
     648:	4905      	ldr	r1, [pc, #20]	; (660 <udi_hid_generic_setup+0x20>)
     64a:	4806      	ldr	r0, [pc, #24]	; (664 <udi_hid_generic_setup+0x24>)
     64c:	4c06      	ldr	r4, [pc, #24]	; (668 <udi_hid_generic_setup+0x28>)
     64e:	47a0      	blx	r4
     650:	0003      	movs	r3, r0
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     652:	0018      	movs	r0, r3
     654:	46bd      	mov	sp, r7
     656:	bdb0      	pop	{r4, r5, r7, pc}
     658:	00000679 	.word	0x00000679
     65c:	20000020 	.word	0x20000020
     660:	20000428 	.word	0x20000428
     664:	20000424 	.word	0x20000424
     668:	0000083d 	.word	0x0000083d

0000066c <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
     66c:	b580      	push	{r7, lr}
     66e:	af00      	add	r7, sp, #0
	return 0;
     670:	2300      	movs	r3, #0
}
     672:	0018      	movs	r0, r3
     674:	46bd      	mov	sp, r7
     676:	bd80      	pop	{r7, pc}

00000678 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
     678:	b580      	push	{r7, lr}
     67a:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     67c:	4b0f      	ldr	r3, [pc, #60]	; (6bc <udi_hid_generic_setreport+0x44>)
     67e:	885b      	ldrh	r3, [r3, #2]
     680:	0a1b      	lsrs	r3, r3, #8
     682:	b29b      	uxth	r3, r3
     684:	2b03      	cmp	r3, #3
     686:	d115      	bne.n	6b4 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     688:	4b0c      	ldr	r3, [pc, #48]	; (6bc <udi_hid_generic_setreport+0x44>)
     68a:	885b      	ldrh	r3, [r3, #2]
     68c:	22ff      	movs	r2, #255	; 0xff
     68e:	4013      	ands	r3, r2
     690:	b29b      	uxth	r3, r3
     692:	2b00      	cmp	r3, #0
     694:	d10e      	bne.n	6b4 <udi_hid_generic_setreport+0x3c>
			&& (sizeof(udi_hid_generic_report_feature) ==
					udd_g_ctrlreq.req.wLength)) {
     696:	4b09      	ldr	r3, [pc, #36]	; (6bc <udi_hid_generic_setreport+0x44>)
     698:	88db      	ldrh	r3, [r3, #6]
			&& (sizeof(udi_hid_generic_report_feature) ==
     69a:	2b04      	cmp	r3, #4
     69c:	d10a      	bne.n	6b4 <udi_hid_generic_setreport+0x3c>
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     69e:	4b07      	ldr	r3, [pc, #28]	; (6bc <udi_hid_generic_setreport+0x44>)
     6a0:	4a07      	ldr	r2, [pc, #28]	; (6c0 <udi_hid_generic_setreport+0x48>)
     6a2:	609a      	str	r2, [r3, #8]
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <udi_hid_generic_setreport+0x44>)
     6a6:	4a07      	ldr	r2, [pc, #28]	; (6c4 <udi_hid_generic_setreport+0x4c>)
     6a8:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     6aa:	4b04      	ldr	r3, [pc, #16]	; (6bc <udi_hid_generic_setreport+0x44>)
     6ac:	2204      	movs	r2, #4
     6ae:	819a      	strh	r2, [r3, #12]
				sizeof(udi_hid_generic_report_feature);
		return true;
     6b0:	2301      	movs	r3, #1
     6b2:	e000      	b.n	6b6 <udi_hid_generic_setreport+0x3e>
	}
	return false;
     6b4:	2300      	movs	r3, #0
}
     6b6:	0018      	movs	r0, r3
     6b8:	46bd      	mov	sp, r7
     6ba:	bd80      	pop	{r7, pc}
     6bc:	200028cc 	.word	0x200028cc
     6c0:	200004ac 	.word	0x200004ac
     6c4:	00000779 	.word	0x00000779

000006c8 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     6c8:	b590      	push	{r4, r7, lr}
     6ca:	b087      	sub	sp, #28
     6cc:	af02      	add	r7, sp, #8
     6ce:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_report_in_free)
     6d0:	4b21      	ldr	r3, [pc, #132]	; (758 <udi_hid_generic_send_report_in+0x90>)
     6d2:	781b      	ldrb	r3, [r3, #0]
     6d4:	2201      	movs	r2, #1
     6d6:	4053      	eors	r3, r2
     6d8:	b2db      	uxtb	r3, r3
     6da:	2b00      	cmp	r3, #0
     6dc:	d001      	beq.n	6e2 <udi_hid_generic_send_report_in+0x1a>
		return false;
     6de:	2300      	movs	r3, #0
     6e0:	e036      	b.n	750 <udi_hid_generic_send_report_in+0x88>
	irqflags_t flags = cpu_irq_save();
     6e2:	4b1e      	ldr	r3, [pc, #120]	; (75c <udi_hid_generic_send_report_in+0x94>)
     6e4:	4798      	blx	r3
     6e6:	0003      	movs	r3, r0
     6e8:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     6ea:	4b1d      	ldr	r3, [pc, #116]	; (760 <udi_hid_generic_send_report_in+0x98>)
     6ec:	2240      	movs	r2, #64	; 0x40
     6ee:	2100      	movs	r1, #0
     6f0:	0018      	movs	r0, r3
     6f2:	4b1c      	ldr	r3, [pc, #112]	; (764 <udi_hid_generic_send_report_in+0x9c>)
     6f4:	4798      	blx	r3
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     6f6:	4a1a      	ldr	r2, [pc, #104]	; (760 <udi_hid_generic_send_report_in+0x98>)
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	0010      	movs	r0, r2
     6fc:	0019      	movs	r1, r3
     6fe:	2340      	movs	r3, #64	; 0x40
     700:	001a      	movs	r2, r3
     702:	4b19      	ldr	r3, [pc, #100]	; (768 <udi_hid_generic_send_report_in+0xa0>)
     704:	4798      	blx	r3
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     706:	4a16      	ldr	r2, [pc, #88]	; (760 <udi_hid_generic_send_report_in+0x98>)
     708:	4b18      	ldr	r3, [pc, #96]	; (76c <udi_hid_generic_send_report_in+0xa4>)
     70a:	9300      	str	r3, [sp, #0]
     70c:	2340      	movs	r3, #64	; 0x40
     70e:	2100      	movs	r1, #0
     710:	2081      	movs	r0, #129	; 0x81
     712:	4c17      	ldr	r4, [pc, #92]	; (770 <udi_hid_generic_send_report_in+0xa8>)
     714:	47a0      	blx	r4
     716:	0003      	movs	r3, r0
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
     718:	1e5a      	subs	r2, r3, #1
     71a:	4193      	sbcs	r3, r2
     71c:	b2db      	uxtb	r3, r3
     71e:	2201      	movs	r2, #1
     720:	4053      	eors	r3, r2
     722:	b2db      	uxtb	r3, r3
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     724:	1c1a      	adds	r2, r3, #0
     726:	2301      	movs	r3, #1
     728:	4013      	ands	r3, r2
     72a:	b2da      	uxtb	r2, r3
	udi_hid_generic_b_report_in_free =
     72c:	4b0a      	ldr	r3, [pc, #40]	; (758 <udi_hid_generic_send_report_in+0x90>)
     72e:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
     730:	68fb      	ldr	r3, [r7, #12]
     732:	0018      	movs	r0, r3
     734:	4b0f      	ldr	r3, [pc, #60]	; (774 <udi_hid_generic_send_report_in+0xac>)
     736:	4798      	blx	r3
	return !udi_hid_generic_b_report_in_free;
     738:	4b07      	ldr	r3, [pc, #28]	; (758 <udi_hid_generic_send_report_in+0x90>)
     73a:	781b      	ldrb	r3, [r3, #0]
     73c:	1e5a      	subs	r2, r3, #1
     73e:	4193      	sbcs	r3, r2
     740:	b2db      	uxtb	r3, r3
     742:	2201      	movs	r2, #1
     744:	4053      	eors	r3, r2
     746:	b2db      	uxtb	r3, r3
     748:	1c1a      	adds	r2, r3, #0
     74a:	2301      	movs	r3, #1
     74c:	4013      	ands	r3, r2
     74e:	b2db      	uxtb	r3, r3

}
     750:	0018      	movs	r0, r3
     752:	46bd      	mov	sp, r7
     754:	b005      	add	sp, #20
     756:	bd90      	pop	{r4, r7, pc}
     758:	20000429 	.word	0x20000429
     75c:	00000569 	.word	0x00000569
     760:	2000042c 	.word	0x2000042c
     764:	0001c21b 	.word	0x0001c21b
     768:	0001c1e5 	.word	0x0001c1e5
     76c:	00000815 	.word	0x00000815
     770:	000028d9 	.word	0x000028d9
     774:	000005b1 	.word	0x000005b1

00000778 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     778:	b580      	push	{r7, lr}
     77a:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     77c:	4b05      	ldr	r3, [pc, #20]	; (794 <udi_hid_generic_setfeature_valid+0x1c>)
     77e:	899b      	ldrh	r3, [r3, #12]
     780:	2b04      	cmp	r3, #4
     782:	d104      	bne.n	78e <udi_hid_generic_setfeature_valid+0x16>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     784:	4b04      	ldr	r3, [pc, #16]	; (798 <udi_hid_generic_setfeature_valid+0x20>)
     786:	0018      	movs	r0, r3
     788:	4b04      	ldr	r3, [pc, #16]	; (79c <udi_hid_generic_setfeature_valid+0x24>)
     78a:	4798      	blx	r3
     78c:	e000      	b.n	790 <udi_hid_generic_setfeature_valid+0x18>
		return;	// Bad data
     78e:	46c0      	nop			; (mov r8, r8)
}
     790:	46bd      	mov	sp, r7
     792:	bd80      	pop	{r7, pc}
     794:	200028cc 	.word	0x200028cc
     798:	200004ac 	.word	0x200004ac
     79c:	00017c01 	.word	0x00017c01

000007a0 <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
     7a0:	b580      	push	{r7, lr}
     7a2:	b082      	sub	sp, #8
     7a4:	af00      	add	r7, sp, #0
     7a6:	6039      	str	r1, [r7, #0]
     7a8:	0011      	movs	r1, r2
     7aa:	1dfb      	adds	r3, r7, #7
     7ac:	1c02      	adds	r2, r0, #0
     7ae:	701a      	strb	r2, [r3, #0]
     7b0:	1dbb      	adds	r3, r7, #6
     7b2:	1c0a      	adds	r2, r1, #0
     7b4:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     7b6:	1dfb      	adds	r3, r7, #7
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d109      	bne.n	7d2 <udi_hid_generic_report_out_received+0x32>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     7be:	683b      	ldr	r3, [r7, #0]
     7c0:	2b40      	cmp	r3, #64	; 0x40
     7c2:	d103      	bne.n	7cc <udi_hid_generic_report_out_received+0x2c>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <udi_hid_generic_report_out_received+0x3c>)
     7c6:	0018      	movs	r0, r3
     7c8:	4b05      	ldr	r3, [pc, #20]	; (7e0 <udi_hid_generic_report_out_received+0x40>)
     7ca:	4798      	blx	r3
	}
	udi_hid_generic_report_out_enable();
     7cc:	4b05      	ldr	r3, [pc, #20]	; (7e4 <udi_hid_generic_report_out_received+0x44>)
     7ce:	4798      	blx	r3
     7d0:	e000      	b.n	7d4 <udi_hid_generic_report_out_received+0x34>
		return;	// Abort reception
     7d2:	46c0      	nop			; (mov r8, r8)
}
     7d4:	46bd      	mov	sp, r7
     7d6:	b002      	add	sp, #8
     7d8:	bd80      	pop	{r7, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	2000046c 	.word	0x2000046c
     7e0:	00017b85 	.word	0x00017b85
     7e4:	000007e9 	.word	0x000007e9

000007e8 <udi_hid_generic_report_out_enable>:


static bool udi_hid_generic_report_out_enable(void)
{
     7e8:	b590      	push	{r4, r7, lr}
     7ea:	b083      	sub	sp, #12
     7ec:	af02      	add	r7, sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     7ee:	4a06      	ldr	r2, [pc, #24]	; (808 <udi_hid_generic_report_out_enable+0x20>)
     7f0:	4b06      	ldr	r3, [pc, #24]	; (80c <udi_hid_generic_report_out_enable+0x24>)
     7f2:	9300      	str	r3, [sp, #0]
     7f4:	2340      	movs	r3, #64	; 0x40
     7f6:	2100      	movs	r1, #0
     7f8:	2002      	movs	r0, #2
     7fa:	4c05      	ldr	r4, [pc, #20]	; (810 <udi_hid_generic_report_out_enable+0x28>)
     7fc:	47a0      	blx	r4
     7fe:	0003      	movs	r3, r0
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     800:	0018      	movs	r0, r3
     802:	46bd      	mov	sp, r7
     804:	b001      	add	sp, #4
     806:	bd90      	pop	{r4, r7, pc}
     808:	2000046c 	.word	0x2000046c
     80c:	000007a1 	.word	0x000007a1
     810:	000028d9 	.word	0x000028d9

00000814 <udi_hid_generic_report_in_sent>:


static void udi_hid_generic_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     814:	b580      	push	{r7, lr}
     816:	b082      	sub	sp, #8
     818:	af00      	add	r7, sp, #0
     81a:	6039      	str	r1, [r7, #0]
     81c:	0011      	movs	r1, r2
     81e:	1dfb      	adds	r3, r7, #7
     820:	1c02      	adds	r2, r0, #0
     822:	701a      	strb	r2, [r3, #0]
     824:	1dbb      	adds	r3, r7, #6
     826:	1c0a      	adds	r2, r1, #0
     828:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     82a:	4b03      	ldr	r3, [pc, #12]	; (838 <udi_hid_generic_report_in_sent+0x24>)
     82c:	2201      	movs	r2, #1
     82e:	701a      	strb	r2, [r3, #0]
}
     830:	46c0      	nop			; (mov r8, r8)
     832:	46bd      	mov	sp, r7
     834:	b002      	add	sp, #8
     836:	bd80      	pop	{r7, pc}
     838:	20000429 	.word	0x20000429

0000083c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	60f8      	str	r0, [r7, #12]
     844:	60b9      	str	r1, [r7, #8]
     846:	607a      	str	r2, [r7, #4]
     848:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
     84a:	4b35      	ldr	r3, [pc, #212]	; (920 <udi_hid_setup+0xe4>)
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	b25b      	sxtb	r3, r3
     850:	2b00      	cmp	r3, #0
     852:	da32      	bge.n	8ba <udi_hid_setup+0x7e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     854:	4b32      	ldr	r3, [pc, #200]	; (920 <udi_hid_setup+0xe4>)
     856:	781b      	ldrb	r3, [r3, #0]
     858:	001a      	movs	r2, r3
     85a:	2360      	movs	r3, #96	; 0x60
     85c:	4013      	ands	r3, r2
     85e:	d109      	bne.n	874 <udi_hid_setup+0x38>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     860:	4b2f      	ldr	r3, [pc, #188]	; (920 <udi_hid_setup+0xe4>)
     862:	785b      	ldrb	r3, [r3, #1]
     864:	2b06      	cmp	r3, #6
     866:	d105      	bne.n	874 <udi_hid_setup+0x38>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
     868:	687b      	ldr	r3, [r7, #4]
     86a:	0018      	movs	r0, r3
     86c:	4b2d      	ldr	r3, [pc, #180]	; (924 <udi_hid_setup+0xe8>)
     86e:	4798      	blx	r3
     870:	0003      	movs	r3, r0
     872:	e051      	b.n	918 <udi_hid_setup+0xdc>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     874:	4b2a      	ldr	r3, [pc, #168]	; (920 <udi_hid_setup+0xe4>)
     876:	781b      	ldrb	r3, [r3, #0]
     878:	001a      	movs	r2, r3
     87a:	2360      	movs	r3, #96	; 0x60
     87c:	4013      	ands	r3, r2
     87e:	2b20      	cmp	r3, #32
     880:	d11b      	bne.n	8ba <udi_hid_setup+0x7e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     882:	4b27      	ldr	r3, [pc, #156]	; (920 <udi_hid_setup+0xe4>)
     884:	785b      	ldrb	r3, [r3, #1]
     886:	2b02      	cmp	r3, #2
     888:	d007      	beq.n	89a <udi_hid_setup+0x5e>
     88a:	2b03      	cmp	r3, #3
     88c:	d00d      	beq.n	8aa <udi_hid_setup+0x6e>
     88e:	2b01      	cmp	r3, #1
     890:	d113      	bne.n	8ba <udi_hid_setup+0x7e>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     892:	683b      	ldr	r3, [r7, #0]
     894:	4798      	blx	r3
     896:	0003      	movs	r3, r0
     898:	e03e      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     89a:	4b21      	ldr	r3, [pc, #132]	; (920 <udi_hid_setup+0xe4>)
     89c:	68fa      	ldr	r2, [r7, #12]
     89e:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     8a0:	4b1f      	ldr	r3, [pc, #124]	; (920 <udi_hid_setup+0xe4>)
     8a2:	2201      	movs	r2, #1
     8a4:	819a      	strh	r2, [r3, #12]
				return true;
     8a6:	2301      	movs	r3, #1
     8a8:	e036      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     8aa:	4b1d      	ldr	r3, [pc, #116]	; (920 <udi_hid_setup+0xe4>)
     8ac:	68ba      	ldr	r2, [r7, #8]
     8ae:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     8b0:	4b1b      	ldr	r3, [pc, #108]	; (920 <udi_hid_setup+0xe4>)
     8b2:	2201      	movs	r2, #1
     8b4:	819a      	strh	r2, [r3, #12]
				return true;
     8b6:	2301      	movs	r3, #1
     8b8:	e02e      	b.n	918 <udi_hid_setup+0xdc>
			}
		}
	}
	if (Udd_setup_is_out()) {
     8ba:	4b19      	ldr	r3, [pc, #100]	; (920 <udi_hid_setup+0xe4>)
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	b25b      	sxtb	r3, r3
     8c0:	2b00      	cmp	r3, #0
     8c2:	db28      	blt.n	916 <udi_hid_setup+0xda>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     8c4:	4b16      	ldr	r3, [pc, #88]	; (920 <udi_hid_setup+0xe4>)
     8c6:	781b      	ldrb	r3, [r3, #0]
     8c8:	001a      	movs	r2, r3
     8ca:	2360      	movs	r3, #96	; 0x60
     8cc:	4013      	ands	r3, r2
     8ce:	2b20      	cmp	r3, #32
     8d0:	d121      	bne.n	916 <udi_hid_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     8d2:	4b13      	ldr	r3, [pc, #76]	; (920 <udi_hid_setup+0xe4>)
     8d4:	785b      	ldrb	r3, [r3, #1]
     8d6:	2b0a      	cmp	r3, #10
     8d8:	d007      	beq.n	8ea <udi_hid_setup+0xae>
     8da:	2b0b      	cmp	r3, #11
     8dc:	d00e      	beq.n	8fc <udi_hid_setup+0xc0>
     8de:	2b09      	cmp	r3, #9
     8e0:	d119      	bne.n	916 <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     8e2:	683b      	ldr	r3, [r7, #0]
     8e4:	4798      	blx	r3
     8e6:	0003      	movs	r3, r0
     8e8:	e016      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     8ea:	4b0d      	ldr	r3, [pc, #52]	; (920 <udi_hid_setup+0xe4>)
     8ec:	885b      	ldrh	r3, [r3, #2]
     8ee:	0a1b      	lsrs	r3, r3, #8
     8f0:	b29b      	uxth	r3, r3
     8f2:	b2da      	uxtb	r2, r3
     8f4:	68fb      	ldr	r3, [r7, #12]
     8f6:	701a      	strb	r2, [r3, #0]
				return true;
     8f8:	2301      	movs	r3, #1
     8fa:	e00d      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     8fc:	4b08      	ldr	r3, [pc, #32]	; (920 <udi_hid_setup+0xe4>)
     8fe:	88db      	ldrh	r3, [r3, #6]
     900:	2b00      	cmp	r3, #0
     902:	d001      	beq.n	908 <udi_hid_setup+0xcc>
					return false;
     904:	2300      	movs	r3, #0
     906:	e007      	b.n	918 <udi_hid_setup+0xdc>
				*protocol = udd_g_ctrlreq.req.wValue;
     908:	4b05      	ldr	r3, [pc, #20]	; (920 <udi_hid_setup+0xe4>)
     90a:	885b      	ldrh	r3, [r3, #2]
     90c:	b2da      	uxtb	r2, r3
     90e:	68bb      	ldr	r3, [r7, #8]
     910:	701a      	strb	r2, [r3, #0]
				return true;
     912:	2301      	movs	r3, #1
     914:	e000      	b.n	918 <udi_hid_setup+0xdc>
			}
		}
	}
	return false;	// Request not supported
     916:	2300      	movs	r3, #0
}
     918:	0018      	movs	r0, r3
     91a:	46bd      	mov	sp, r7
     91c:	b004      	add	sp, #16
     91e:	bd80      	pop	{r7, pc}
     920:	200028cc 	.word	0x200028cc
     924:	00000929 	.word	0x00000929

00000928 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
     928:	b580      	push	{r7, lr}
     92a:	b084      	sub	sp, #16
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     930:	4b25      	ldr	r3, [pc, #148]	; (9c8 <udi_hid_reqstdifaceget_descriptor+0xa0>)
     932:	4798      	blx	r3
     934:	0003      	movs	r3, r0
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     936:	3309      	adds	r3, #9
     938:	60fb      	str	r3, [r7, #12]
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	785b      	ldrb	r3, [r3, #1]
     93e:	2b21      	cmp	r3, #33	; 0x21
     940:	d001      	beq.n	946 <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
     942:	2300      	movs	r3, #0
     944:	e03b      	b.n	9be <udi_hid_reqstdifaceget_descriptor+0x96>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     946:	4b21      	ldr	r3, [pc, #132]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     948:	885b      	ldrh	r3, [r3, #2]
     94a:	0a1b      	lsrs	r3, r3, #8
     94c:	b29b      	uxth	r3, r3
     94e:	b2db      	uxtb	r3, r3
     950:	2b21      	cmp	r3, #33	; 0x21
     952:	d113      	bne.n	97c <udi_hid_reqstdifaceget_descriptor+0x54>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     954:	4b1d      	ldr	r3, [pc, #116]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     956:	68fa      	ldr	r2, [r7, #12]
     958:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	b29a      	uxth	r2, r3
     960:	4b1a      	ldr	r3, [pc, #104]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     962:	88db      	ldrh	r3, [r3, #6]
     964:	1c18      	adds	r0, r3, #0
     966:	1c11      	adds	r1, r2, #0
     968:	b28a      	uxth	r2, r1
     96a:	b283      	uxth	r3, r0
     96c:	429a      	cmp	r2, r3
     96e:	d900      	bls.n	972 <udi_hid_reqstdifaceget_descriptor+0x4a>
     970:	1c01      	adds	r1, r0, #0
     972:	b28a      	uxth	r2, r1
		udd_g_ctrlreq.payload_size =
     974:	4b15      	ldr	r3, [pc, #84]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     976:	819a      	strh	r2, [r3, #12]
				ptr_hid_desc->bLength);
		return true;
     978:	2301      	movs	r3, #1
     97a:	e020      	b.n	9be <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     97c:	68fb      	ldr	r3, [r7, #12]
     97e:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     980:	4b12      	ldr	r3, [pc, #72]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     982:	885b      	ldrh	r3, [r3, #2]
     984:	0a1b      	lsrs	r3, r3, #8
     986:	b29b      	uxth	r3, r3
     988:	b2db      	uxtb	r3, r3
	if (ptr_hid_desc->bRDescriptorType ==
     98a:	429a      	cmp	r2, r3
     98c:	d116      	bne.n	9bc <udi_hid_reqstdifaceget_descriptor+0x94>
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     98e:	4b0f      	ldr	r3, [pc, #60]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     990:	687a      	ldr	r2, [r7, #4]
     992:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     994:	68fb      	ldr	r3, [r7, #12]
     996:	79da      	ldrb	r2, [r3, #7]
     998:	7a1b      	ldrb	r3, [r3, #8]
     99a:	021b      	lsls	r3, r3, #8
     99c:	4313      	orrs	r3, r2
     99e:	b29a      	uxth	r2, r3
     9a0:	4b0a      	ldr	r3, [pc, #40]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     9a2:	88db      	ldrh	r3, [r3, #6]
		udd_g_ctrlreq.payload_size =
     9a4:	1c18      	adds	r0, r3, #0
     9a6:	1c11      	adds	r1, r2, #0
     9a8:	b28a      	uxth	r2, r1
     9aa:	b283      	uxth	r3, r0
     9ac:	429a      	cmp	r2, r3
     9ae:	d900      	bls.n	9b2 <udi_hid_reqstdifaceget_descriptor+0x8a>
     9b0:	1c01      	adds	r1, r0, #0
     9b2:	b28a      	uxth	r2, r1
     9b4:	4b05      	ldr	r3, [pc, #20]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     9b6:	819a      	strh	r2, [r3, #12]
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     9b8:	2301      	movs	r3, #1
     9ba:	e000      	b.n	9be <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	return false;
     9bc:	2300      	movs	r3, #0
}
     9be:	0018      	movs	r0, r3
     9c0:	46bd      	mov	sp, r7
     9c2:	b004      	add	sp, #16
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	000009d1 	.word	0x000009d1
     9cc:	200028cc 	.word	0x200028cc

000009d0 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
     9d0:	b580      	push	{r7, lr}
     9d2:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
     9d4:	4b02      	ldr	r3, [pc, #8]	; (9e0 <udc_get_interface_desc+0x10>)
     9d6:	681b      	ldr	r3, [r3, #0]
}
     9d8:	0018      	movs	r0, r3
     9da:	46bd      	mov	sp, r7
     9dc:	bd80      	pop	{r7, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	200004c0 	.word	0x200004c0

000009e4 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
     9e4:	b580      	push	{r7, lr}
     9e6:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <udc_get_eof_conf+0x24>)
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <udc_get_eof_conf+0x24>)
     9f0:	681b      	ldr	r3, [r3, #0]
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	7899      	ldrb	r1, [r3, #2]
     9f6:	78db      	ldrb	r3, [r3, #3]
     9f8:	021b      	lsls	r3, r3, #8
     9fa:	430b      	orrs	r3, r1
     9fc:	b29b      	uxth	r3, r3
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     9fe:	18d3      	adds	r3, r2, r3
}
     a00:	0018      	movs	r0, r3
     a02:	46bd      	mov	sp, r7
     a04:	bd80      	pop	{r7, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	200004bc 	.word	0x200004bc

00000a0c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b084      	sub	sp, #16
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
     a14:	000a      	movs	r2, r1
     a16:	1cfb      	adds	r3, r7, #3
     a18:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
     a1a:	4b14      	ldr	r3, [pc, #80]	; (a6c <udc_next_desc_in_iface+0x60>)
     a1c:	4798      	blx	r3
     a1e:	0003      	movs	r3, r0
     a20:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     a22:	687b      	ldr	r3, [r7, #4]
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	001a      	movs	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	189b      	adds	r3, r3, r2
     a2c:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     a2e:	e011      	b.n	a54 <udc_next_desc_in_iface+0x48>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	785b      	ldrb	r3, [r3, #1]
     a34:	2b04      	cmp	r3, #4
     a36:	d012      	beq.n	a5e <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	785b      	ldrb	r3, [r3, #1]
     a3c:	1cfa      	adds	r2, r7, #3
     a3e:	7812      	ldrb	r2, [r2, #0]
     a40:	429a      	cmp	r2, r3
     a42:	d101      	bne.n	a48 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	e00c      	b.n	a62 <udc_next_desc_in_iface+0x56>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	781b      	ldrb	r3, [r3, #0]
     a4c:	001a      	movs	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	189b      	adds	r3, r3, r2
     a52:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
     a54:	68fa      	ldr	r2, [r7, #12]
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	429a      	cmp	r2, r3
     a5a:	d8e9      	bhi.n	a30 <udc_next_desc_in_iface+0x24>
     a5c:	e000      	b.n	a60 <udc_next_desc_in_iface+0x54>
			break; // End of global interface descriptor
     a5e:	46c0      	nop			; (mov r8, r8)
	}
	return NULL; // No specific descriptor found
     a60:	2300      	movs	r3, #0
}
     a62:	0018      	movs	r0, r3
     a64:	46bd      	mov	sp, r7
     a66:	b004      	add	sp, #16
     a68:	bd80      	pop	{r7, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	000009e5 	.word	0x000009e5

00000a70 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     a70:	b580      	push	{r7, lr}
     a72:	b084      	sub	sp, #16
     a74:	af00      	add	r7, sp, #0
     a76:	0002      	movs	r2, r0
     a78:	1dfb      	adds	r3, r7, #7
     a7a:	701a      	strb	r2, [r3, #0]
     a7c:	1dbb      	adds	r3, r7, #6
     a7e:	1c0a      	adds	r2, r1, #0
     a80:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     a82:	4b20      	ldr	r3, [pc, #128]	; (b04 <udc_update_iface_desc+0x94>)
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	2b00      	cmp	r3, #0
     a88:	d101      	bne.n	a8e <udc_update_iface_desc+0x1e>
		return false;
     a8a:	2300      	movs	r3, #0
     a8c:	e036      	b.n	afc <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a8e:	4b1e      	ldr	r3, [pc, #120]	; (b08 <udc_update_iface_desc+0x98>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	791b      	ldrb	r3, [r3, #4]
     a96:	1dfa      	adds	r2, r7, #7
     a98:	7812      	ldrb	r2, [r2, #0]
     a9a:	429a      	cmp	r2, r3
     a9c:	d301      	bcc.n	aa2 <udc_update_iface_desc+0x32>
		return false;
     a9e:	2300      	movs	r3, #0
     aa0:	e02c      	b.n	afc <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
     aa2:	4b19      	ldr	r3, [pc, #100]	; (b08 <udc_update_iface_desc+0x98>)
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	681a      	ldr	r2, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     aa8:	4b18      	ldr	r3, [pc, #96]	; (b0c <udc_update_iface_desc+0x9c>)
     aaa:	601a      	str	r2, [r3, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
     aac:	4b18      	ldr	r3, [pc, #96]	; (b10 <udc_update_iface_desc+0xa0>)
     aae:	4798      	blx	r3
     ab0:	0003      	movs	r3, r0
     ab2:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
     ab4:	e01c      	b.n	af0 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     ab6:	4b15      	ldr	r3, [pc, #84]	; (b0c <udc_update_iface_desc+0x9c>)
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	785b      	ldrb	r3, [r3, #1]
     abc:	2b04      	cmp	r3, #4
     abe:	d10f      	bne.n	ae0 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     ac0:	4b12      	ldr	r3, [pc, #72]	; (b0c <udc_update_iface_desc+0x9c>)
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	789b      	ldrb	r3, [r3, #2]
     ac6:	1dfa      	adds	r2, r7, #7
     ac8:	7812      	ldrb	r2, [r2, #0]
     aca:	429a      	cmp	r2, r3
     acc:	d108      	bne.n	ae0 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
     ace:	4b0f      	ldr	r3, [pc, #60]	; (b0c <udc_update_iface_desc+0x9c>)
     ad0:	681b      	ldr	r3, [r3, #0]
     ad2:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     ad4:	1dba      	adds	r2, r7, #6
     ad6:	7812      	ldrb	r2, [r2, #0]
     ad8:	429a      	cmp	r2, r3
     ada:	d101      	bne.n	ae0 <udc_update_iface_desc+0x70>
				return true; // Interface found
     adc:	2301      	movs	r3, #1
     ade:	e00d      	b.n	afc <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     ae0:	4b0a      	ldr	r3, [pc, #40]	; (b0c <udc_update_iface_desc+0x9c>)
     ae2:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
     ae4:	4b09      	ldr	r3, [pc, #36]	; (b0c <udc_update_iface_desc+0x9c>)
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	781b      	ldrb	r3, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     aea:	18d2      	adds	r2, r2, r3
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <udc_update_iface_desc+0x9c>)
     aee:	601a      	str	r2, [r3, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
     af0:	4b06      	ldr	r3, [pc, #24]	; (b0c <udc_update_iface_desc+0x9c>)
     af2:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
     af4:	68fa      	ldr	r2, [r7, #12]
     af6:	429a      	cmp	r2, r3
     af8:	d8dd      	bhi.n	ab6 <udc_update_iface_desc+0x46>
	}
	return false; // Interface not found
     afa:	2300      	movs	r3, #0
}
     afc:	0018      	movs	r0, r3
     afe:	46bd      	mov	sp, r7
     b00:	b004      	add	sp, #16
     b02:	bd80      	pop	{r7, pc}
     b04:	200004b8 	.word	0x200004b8
     b08:	200004bc 	.word	0x200004bc
     b0c:	200004c0 	.word	0x200004c0
     b10:	000009e5 	.word	0x000009e5

00000b14 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     b14:	b580      	push	{r7, lr}
     b16:	b084      	sub	sp, #16
     b18:	af00      	add	r7, sp, #0
     b1a:	0002      	movs	r2, r0
     b1c:	1dfb      	adds	r3, r7, #7
     b1e:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     b20:	1dfb      	adds	r3, r7, #7
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	2100      	movs	r1, #0
     b26:	0018      	movs	r0, r3
     b28:	4b21      	ldr	r3, [pc, #132]	; (bb0 <udc_iface_disable+0x9c>)
     b2a:	4798      	blx	r3
     b2c:	0003      	movs	r3, r0
     b2e:	001a      	movs	r2, r3
     b30:	2301      	movs	r3, #1
     b32:	4053      	eors	r3, r2
     b34:	b2db      	uxtb	r3, r3
     b36:	2b00      	cmp	r3, #0
     b38:	d001      	beq.n	b3e <udc_iface_disable+0x2a>
		return false;
     b3a:	2300      	movs	r3, #0
     b3c:	e034      	b.n	ba8 <udc_iface_disable+0x94>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b3e:	4b1d      	ldr	r3, [pc, #116]	; (bb4 <udc_iface_disable+0xa0>)
     b40:	681b      	ldr	r3, [r3, #0]
     b42:	685a      	ldr	r2, [r3, #4]
     b44:	1dfb      	adds	r3, r7, #7
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	009b      	lsls	r3, r3, #2
     b4a:	18d3      	adds	r3, r2, r3
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b50:	68bb      	ldr	r3, [r7, #8]
     b52:	68db      	ldr	r3, [r3, #12]
     b54:	4798      	blx	r3
     b56:	0003      	movs	r3, r0
     b58:	001a      	movs	r2, r3
     b5a:	1dfb      	adds	r3, r7, #7
     b5c:	781b      	ldrb	r3, [r3, #0]
     b5e:	0011      	movs	r1, r2
     b60:	0018      	movs	r0, r3
     b62:	4b13      	ldr	r3, [pc, #76]	; (bb0 <udc_iface_disable+0x9c>)
     b64:	4798      	blx	r3
     b66:	0003      	movs	r3, r0
     b68:	001a      	movs	r2, r3
     b6a:	2301      	movs	r3, #1
     b6c:	4053      	eors	r3, r2
     b6e:	b2db      	uxtb	r3, r3
     b70:	2b00      	cmp	r3, #0
     b72:	d001      	beq.n	b78 <udc_iface_disable+0x64>
		return false;
     b74:	2300      	movs	r3, #0
     b76:	e017      	b.n	ba8 <udc_iface_disable+0x94>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     b78:	4b0f      	ldr	r3, [pc, #60]	; (bb8 <udc_iface_disable+0xa4>)
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b7e:	68fb      	ldr	r3, [r7, #12]
     b80:	2105      	movs	r1, #5
     b82:	0018      	movs	r0, r3
     b84:	4b0d      	ldr	r3, [pc, #52]	; (bbc <udc_iface_disable+0xa8>)
     b86:	4798      	blx	r3
     b88:	0003      	movs	r3, r0
     b8a:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	2b00      	cmp	r3, #0
     b90:	d005      	beq.n	b9e <udc_iface_disable+0x8a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     b92:	68fb      	ldr	r3, [r7, #12]
     b94:	789b      	ldrb	r3, [r3, #2]
     b96:	0018      	movs	r0, r3
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <udc_iface_disable+0xac>)
     b9a:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b9c:	e7ef      	b.n	b7e <udc_iface_disable+0x6a>
				break;
     b9e:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
     ba0:	68bb      	ldr	r3, [r7, #8]
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	4798      	blx	r3
	return true;
     ba6:	2301      	movs	r3, #1
}
     ba8:	0018      	movs	r0, r3
     baa:	46bd      	mov	sp, r7
     bac:	b004      	add	sp, #16
     bae:	bd80      	pop	{r7, pc}
     bb0:	00000a71 	.word	0x00000a71
     bb4:	200004bc 	.word	0x200004bc
     bb8:	200004c0 	.word	0x200004c0
     bbc:	00000a0d 	.word	0x00000a0d
     bc0:	00002575 	.word	0x00002575

00000bc4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	b084      	sub	sp, #16
     bc8:	af00      	add	r7, sp, #0
     bca:	0002      	movs	r2, r0
     bcc:	1dfb      	adds	r3, r7, #7
     bce:	701a      	strb	r2, [r3, #0]
     bd0:	1dbb      	adds	r3, r7, #6
     bd2:	1c0a      	adds	r2, r1, #0
     bd4:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     bd6:	1dbb      	adds	r3, r7, #6
     bd8:	781a      	ldrb	r2, [r3, #0]
     bda:	1dfb      	adds	r3, r7, #7
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	0011      	movs	r1, r2
     be0:	0018      	movs	r0, r3
     be2:	4b1f      	ldr	r3, [pc, #124]	; (c60 <udc_iface_enable+0x9c>)
     be4:	4798      	blx	r3
     be6:	0003      	movs	r3, r0
     be8:	001a      	movs	r2, r3
     bea:	2301      	movs	r3, #1
     bec:	4053      	eors	r3, r2
     bee:	b2db      	uxtb	r3, r3
     bf0:	2b00      	cmp	r3, #0
     bf2:	d001      	beq.n	bf8 <udc_iface_enable+0x34>
		return false;
     bf4:	2300      	movs	r3, #0
     bf6:	e02e      	b.n	c56 <udc_iface_enable+0x92>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     bf8:	4b1a      	ldr	r3, [pc, #104]	; (c64 <udc_iface_enable+0xa0>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	2105      	movs	r1, #5
     c02:	0018      	movs	r0, r3
     c04:	4b18      	ldr	r3, [pc, #96]	; (c68 <udc_iface_enable+0xa4>)
     c06:	4798      	blx	r3
     c08:	0003      	movs	r3, r0
     c0a:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     c0c:	68fb      	ldr	r3, [r7, #12]
     c0e:	2b00      	cmp	r3, #0
     c10:	d015      	beq.n	c3e <udc_iface_enable+0x7a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c12:	68fb      	ldr	r3, [r7, #12]
     c14:	7898      	ldrb	r0, [r3, #2]
     c16:	68fb      	ldr	r3, [r7, #12]
     c18:	78d9      	ldrb	r1, [r3, #3]
     c1a:	68fb      	ldr	r3, [r7, #12]
     c1c:	791a      	ldrb	r2, [r3, #4]
     c1e:	795b      	ldrb	r3, [r3, #5]
     c20:	021b      	lsls	r3, r3, #8
     c22:	4313      	orrs	r3, r2
     c24:	b29b      	uxth	r3, r3
     c26:	001a      	movs	r2, r3
     c28:	4b10      	ldr	r3, [pc, #64]	; (c6c <udc_iface_enable+0xa8>)
     c2a:	4798      	blx	r3
     c2c:	0003      	movs	r3, r0
     c2e:	001a      	movs	r2, r3
     c30:	2301      	movs	r3, #1
     c32:	4053      	eors	r3, r2
     c34:	b2db      	uxtb	r3, r3
     c36:	2b00      	cmp	r3, #0
     c38:	d0e1      	beq.n	bfe <udc_iface_enable+0x3a>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
     c3a:	2300      	movs	r3, #0
     c3c:	e00b      	b.n	c56 <udc_iface_enable+0x92>
			break;
     c3e:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     c40:	4b0b      	ldr	r3, [pc, #44]	; (c70 <udc_iface_enable+0xac>)
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	685a      	ldr	r2, [r3, #4]
     c46:	1dfb      	adds	r3, r7, #7
     c48:	781b      	ldrb	r3, [r3, #0]
     c4a:	009b      	lsls	r3, r3, #2
     c4c:	18d3      	adds	r3, r2, r3
     c4e:	681b      	ldr	r3, [r3, #0]
     c50:	681b      	ldr	r3, [r3, #0]
     c52:	4798      	blx	r3
     c54:	0003      	movs	r3, r0
}
     c56:	0018      	movs	r0, r3
     c58:	46bd      	mov	sp, r7
     c5a:	b004      	add	sp, #16
     c5c:	bd80      	pop	{r7, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00000a71 	.word	0x00000a71
     c64:	200004c0 	.word	0x200004c0
     c68:	00000a0d 	.word	0x00000a0d
     c6c:	00002601 	.word	0x00002601
     c70:	200004bc 	.word	0x200004bc

00000c74 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
     c74:	b580      	push	{r7, lr}
     c76:	af00      	add	r7, sp, #0
	udd_enable();
     c78:	4b02      	ldr	r3, [pc, #8]	; (c84 <udc_start+0x10>)
     c7a:	4798      	blx	r3
}
     c7c:	46c0      	nop			; (mov r8, r8)
     c7e:	46bd      	mov	sp, r7
     c80:	bd80      	pop	{r7, pc}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	000033e5 	.word	0x000033e5

00000c88 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
     c8e:	4b16      	ldr	r3, [pc, #88]	; (ce8 <udc_reset+0x60>)
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2b00      	cmp	r3, #0
     c94:	d015      	beq.n	cc2 <udc_reset+0x3a>
		for (iface_num = 0;
     c96:	1dfb      	adds	r3, r7, #7
     c98:	2200      	movs	r2, #0
     c9a:	701a      	strb	r2, [r3, #0]
     c9c:	e009      	b.n	cb2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     c9e:	1dfb      	adds	r3, r7, #7
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	0018      	movs	r0, r3
     ca4:	4b11      	ldr	r3, [pc, #68]	; (cec <udc_reset+0x64>)
     ca6:	4798      	blx	r3
				iface_num++) {
     ca8:	1dfb      	adds	r3, r7, #7
     caa:	781a      	ldrb	r2, [r3, #0]
     cac:	1dfb      	adds	r3, r7, #7
     cae:	3201      	adds	r2, #1
     cb0:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cb2:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <udc_reset+0x68>)
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
     cba:	1dfa      	adds	r2, r7, #7
     cbc:	7812      	ldrb	r2, [r2, #0]
     cbe:	429a      	cmp	r2, r3
     cc0:	d3ed      	bcc.n	c9e <udc_reset+0x16>
		}
	}
	udc_num_configuration = 0;
     cc2:	4b09      	ldr	r3, [pc, #36]	; (ce8 <udc_reset+0x60>)
     cc4:	2200      	movs	r2, #0
     cc6:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     cc8:	4b0a      	ldr	r3, [pc, #40]	; (cf4 <udc_reset+0x6c>)
     cca:	881b      	ldrh	r3, [r3, #0]
     ccc:	2202      	movs	r2, #2
     cce:	4013      	ands	r3, r2
     cd0:	b29b      	uxth	r3, r3
     cd2:	2b00      	cmp	r3, #0
     cd4:	d001      	beq.n	cda <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
     cd6:	4b08      	ldr	r3, [pc, #32]	; (cf8 <udc_reset+0x70>)
     cd8:	4798      	blx	r3
	}
#endif
	udc_device_status =
     cda:	4b06      	ldr	r3, [pc, #24]	; (cf4 <udc_reset+0x6c>)
     cdc:	2200      	movs	r2, #0
     cde:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     ce0:	46c0      	nop			; (mov r8, r8)
     ce2:	46bd      	mov	sp, r7
     ce4:	b002      	add	sp, #8
     ce6:	bd80      	pop	{r7, pc}
     ce8:	200004b8 	.word	0x200004b8
     cec:	00000b15 	.word	0x00000b15
     cf0:	200004bc 	.word	0x200004bc
     cf4:	200004b0 	.word	0x200004b0
     cf8:	00017b71 	.word	0x00017b71

00000cfc <udc_sof_notify>:

void udc_sof_notify(void)
{
     cfc:	b580      	push	{r7, lr}
     cfe:	b082      	sub	sp, #8
     d00:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
     d02:	4b17      	ldr	r3, [pc, #92]	; (d60 <udc_sof_notify+0x64>)
     d04:	781b      	ldrb	r3, [r3, #0]
     d06:	2b00      	cmp	r3, #0
     d08:	d025      	beq.n	d56 <udc_sof_notify+0x5a>
		for (iface_num = 0;
     d0a:	1dfb      	adds	r3, r7, #7
     d0c:	2200      	movs	r2, #0
     d0e:	701a      	strb	r2, [r3, #0]
     d10:	e019      	b.n	d46 <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     d12:	4b14      	ldr	r3, [pc, #80]	; (d64 <udc_sof_notify+0x68>)
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	685a      	ldr	r2, [r3, #4]
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	781b      	ldrb	r3, [r3, #0]
     d1c:	009b      	lsls	r3, r3, #2
     d1e:	18d3      	adds	r3, r2, r3
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	691b      	ldr	r3, [r3, #16]
     d24:	2b00      	cmp	r3, #0
     d26:	d009      	beq.n	d3c <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     d28:	4b0e      	ldr	r3, [pc, #56]	; (d64 <udc_sof_notify+0x68>)
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	685a      	ldr	r2, [r3, #4]
     d2e:	1dfb      	adds	r3, r7, #7
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	009b      	lsls	r3, r3, #2
     d34:	18d3      	adds	r3, r2, r3
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	691b      	ldr	r3, [r3, #16]
     d3a:	4798      	blx	r3
				iface_num++) {
     d3c:	1dfb      	adds	r3, r7, #7
     d3e:	781a      	ldrb	r2, [r3, #0]
     d40:	1dfb      	adds	r3, r7, #7
     d42:	3201      	adds	r2, #1
     d44:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d46:	4b07      	ldr	r3, [pc, #28]	; (d64 <udc_sof_notify+0x68>)
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
     d4e:	1dfa      	adds	r2, r7, #7
     d50:	7812      	ldrb	r2, [r2, #0]
     d52:	429a      	cmp	r2, r3
     d54:	d3dd      	bcc.n	d12 <udc_sof_notify+0x16>
			}
		}
	}
}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	46bd      	mov	sp, r7
     d5a:	b002      	add	sp, #8
     d5c:	bd80      	pop	{r7, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	200004b8 	.word	0x200004b8
     d64:	200004bc 	.word	0x200004bc

00000d68 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
     d68:	b580      	push	{r7, lr}
     d6a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     d6c:	4b07      	ldr	r3, [pc, #28]	; (d8c <udc_req_std_dev_get_status+0x24>)
     d6e:	88db      	ldrh	r3, [r3, #6]
     d70:	2b02      	cmp	r3, #2
     d72:	d001      	beq.n	d78 <udc_req_std_dev_get_status+0x10>
		return false;
     d74:	2300      	movs	r3, #0
     d76:	e005      	b.n	d84 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     d78:	4b05      	ldr	r3, [pc, #20]	; (d90 <udc_req_std_dev_get_status+0x28>)
     d7a:	2102      	movs	r1, #2
     d7c:	0018      	movs	r0, r3
     d7e:	4b05      	ldr	r3, [pc, #20]	; (d94 <udc_req_std_dev_get_status+0x2c>)
     d80:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
     d82:	2301      	movs	r3, #1
}
     d84:	0018      	movs	r0, r3
     d86:	46bd      	mov	sp, r7
     d88:	bd80      	pop	{r7, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	200028cc 	.word	0x200028cc
     d90:	200004b0 	.word	0x200004b0
     d94:	00002c09 	.word	0x00002c09

00000d98 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
     d98:	b580      	push	{r7, lr}
     d9a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d9c:	4b0c      	ldr	r3, [pc, #48]	; (dd0 <udc_req_std_ep_get_status+0x38>)
     d9e:	88db      	ldrh	r3, [r3, #6]
     da0:	2b02      	cmp	r3, #2
     da2:	d001      	beq.n	da8 <udc_req_std_ep_get_status+0x10>
		return false;
     da4:	2300      	movs	r3, #0
     da6:	e00f      	b.n	dc8 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     da8:	4b09      	ldr	r3, [pc, #36]	; (dd0 <udc_req_std_ep_get_status+0x38>)
     daa:	889b      	ldrh	r3, [r3, #4]
     dac:	b2db      	uxtb	r3, r3
     dae:	0018      	movs	r0, r3
     db0:	4b08      	ldr	r3, [pc, #32]	; (dd4 <udc_req_std_ep_get_status+0x3c>)
     db2:	4798      	blx	r3
     db4:	0003      	movs	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     db6:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     db8:	4b07      	ldr	r3, [pc, #28]	; (dd8 <udc_req_std_ep_get_status+0x40>)
     dba:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <udc_req_std_ep_get_status+0x40>)
     dbe:	2102      	movs	r1, #2
     dc0:	0018      	movs	r0, r3
     dc2:	4b06      	ldr	r3, [pc, #24]	; (ddc <udc_req_std_ep_get_status+0x44>)
     dc4:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
     dc6:	2301      	movs	r3, #1
}
     dc8:	0018      	movs	r0, r3
     dca:	46bd      	mov	sp, r7
     dcc:	bd80      	pop	{r7, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	200028cc 	.word	0x200028cc
     dd4:	000027a9 	.word	0x000027a9
     dd8:	200004c4 	.word	0x200004c4
     ddc:	00002c09 	.word	0x00002c09

00000de0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
     de0:	b580      	push	{r7, lr}
     de2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     de4:	4b0c      	ldr	r3, [pc, #48]	; (e18 <udc_req_std_dev_clear_feature+0x38>)
     de6:	88db      	ldrh	r3, [r3, #6]
     de8:	2b00      	cmp	r3, #0
     dea:	d001      	beq.n	df0 <udc_req_std_dev_clear_feature+0x10>
		return false;
     dec:	2300      	movs	r3, #0
     dee:	e00f      	b.n	e10 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     df0:	4b09      	ldr	r3, [pc, #36]	; (e18 <udc_req_std_dev_clear_feature+0x38>)
     df2:	885b      	ldrh	r3, [r3, #2]
     df4:	2b01      	cmp	r3, #1
     df6:	d10a      	bne.n	e0e <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     df8:	4b08      	ldr	r3, [pc, #32]	; (e1c <udc_req_std_dev_clear_feature+0x3c>)
     dfa:	881b      	ldrh	r3, [r3, #0]
     dfc:	2202      	movs	r2, #2
     dfe:	4393      	bics	r3, r2
     e00:	b29a      	uxth	r2, r3
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <udc_req_std_dev_clear_feature+0x3c>)
     e04:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <udc_req_std_dev_clear_feature+0x40>)
     e08:	4798      	blx	r3
#endif
		return true;
     e0a:	2301      	movs	r3, #1
     e0c:	e000      	b.n	e10 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
     e0e:	2300      	movs	r3, #0
}
     e10:	0018      	movs	r0, r3
     e12:	46bd      	mov	sp, r7
     e14:	bd80      	pop	{r7, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	200028cc 	.word	0x200028cc
     e1c:	200004b0 	.word	0x200004b0
     e20:	00017b71 	.word	0x00017b71

00000e24 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
     e24:	b580      	push	{r7, lr}
     e26:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     e28:	4b0a      	ldr	r3, [pc, #40]	; (e54 <udc_req_std_ep_clear_feature+0x30>)
     e2a:	88db      	ldrh	r3, [r3, #6]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d001      	beq.n	e34 <udc_req_std_ep_clear_feature+0x10>
		return false;
     e30:	2300      	movs	r3, #0
     e32:	e00c      	b.n	e4e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <udc_req_std_ep_clear_feature+0x30>)
     e36:	885b      	ldrh	r3, [r3, #2]
     e38:	2b00      	cmp	r3, #0
     e3a:	d107      	bne.n	e4c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     e3c:	4b05      	ldr	r3, [pc, #20]	; (e54 <udc_req_std_ep_clear_feature+0x30>)
     e3e:	889b      	ldrh	r3, [r3, #4]
     e40:	b2db      	uxtb	r3, r3
     e42:	0018      	movs	r0, r3
     e44:	4b04      	ldr	r3, [pc, #16]	; (e58 <udc_req_std_ep_clear_feature+0x34>)
     e46:	4798      	blx	r3
     e48:	0003      	movs	r3, r0
     e4a:	e000      	b.n	e4e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
     e4c:	2300      	movs	r3, #0
}
     e4e:	0018      	movs	r0, r3
     e50:	46bd      	mov	sp, r7
     e52:	bd80      	pop	{r7, pc}
     e54:	200028cc 	.word	0x200028cc
     e58:	0000282d 	.word	0x0000282d

00000e5c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     e60:	4b0c      	ldr	r3, [pc, #48]	; (e94 <udc_req_std_dev_set_feature+0x38>)
     e62:	88db      	ldrh	r3, [r3, #6]
     e64:	2b00      	cmp	r3, #0
     e66:	d001      	beq.n	e6c <udc_req_std_dev_set_feature+0x10>
		return false;
     e68:	2300      	movs	r3, #0
     e6a:	e010      	b.n	e8e <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
     e6c:	4b09      	ldr	r3, [pc, #36]	; (e94 <udc_req_std_dev_set_feature+0x38>)
     e6e:	885b      	ldrh	r3, [r3, #2]
     e70:	2b01      	cmp	r3, #1
     e72:	d002      	beq.n	e7a <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
     e74:	46c0      	nop			; (mov r8, r8)
	}
	return false;
     e76:	2300      	movs	r3, #0
     e78:	e009      	b.n	e8e <udc_req_std_dev_set_feature+0x32>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     e7a:	4b07      	ldr	r3, [pc, #28]	; (e98 <udc_req_std_dev_set_feature+0x3c>)
     e7c:	881b      	ldrh	r3, [r3, #0]
     e7e:	2202      	movs	r2, #2
     e80:	4313      	orrs	r3, r2
     e82:	b29a      	uxth	r2, r3
     e84:	4b04      	ldr	r3, [pc, #16]	; (e98 <udc_req_std_dev_set_feature+0x3c>)
     e86:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
     e88:	4b04      	ldr	r3, [pc, #16]	; (e9c <udc_req_std_dev_set_feature+0x40>)
     e8a:	4798      	blx	r3
		return true;
     e8c:	2301      	movs	r3, #1
}
     e8e:	0018      	movs	r0, r3
     e90:	46bd      	mov	sp, r7
     e92:	bd80      	pop	{r7, pc}
     e94:	200028cc 	.word	0x200028cc
     e98:	200004b0 	.word	0x200004b0
     e9c:	00017b7b 	.word	0x00017b7b

00000ea0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
     ea0:	b580      	push	{r7, lr}
     ea2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     ea4:	4b0d      	ldr	r3, [pc, #52]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     ea6:	88db      	ldrh	r3, [r3, #6]
     ea8:	2b00      	cmp	r3, #0
     eaa:	d001      	beq.n	eb0 <udc_req_std_ep_set_feature+0x10>
		return false;
     eac:	2300      	movs	r3, #0
     eae:	e012      	b.n	ed6 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     eb0:	4b0a      	ldr	r3, [pc, #40]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     eb2:	885b      	ldrh	r3, [r3, #2]
     eb4:	2b00      	cmp	r3, #0
     eb6:	d10d      	bne.n	ed4 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     eb8:	4b08      	ldr	r3, [pc, #32]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     eba:	889b      	ldrh	r3, [r3, #4]
     ebc:	b2db      	uxtb	r3, r3
     ebe:	0018      	movs	r0, r3
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <udc_req_std_ep_set_feature+0x40>)
     ec2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ec4:	4b05      	ldr	r3, [pc, #20]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     ec6:	889b      	ldrh	r3, [r3, #4]
     ec8:	b2db      	uxtb	r3, r3
     eca:	0018      	movs	r0, r3
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <udc_req_std_ep_set_feature+0x44>)
     ece:	4798      	blx	r3
     ed0:	0003      	movs	r3, r0
     ed2:	e000      	b.n	ed6 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
     ed4:	2300      	movs	r3, #0
}
     ed6:	0018      	movs	r0, r3
     ed8:	46bd      	mov	sp, r7
     eda:	bd80      	pop	{r7, pc}
     edc:	200028cc 	.word	0x200028cc
     ee0:	00002505 	.word	0x00002505
     ee4:	000027d5 	.word	0x000027d5

00000ee8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     ee8:	b580      	push	{r7, lr}
     eea:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     eec:	4b05      	ldr	r3, [pc, #20]	; (f04 <udc_valid_address+0x1c>)
     eee:	885b      	ldrh	r3, [r3, #2]
     ef0:	b2db      	uxtb	r3, r3
     ef2:	227f      	movs	r2, #127	; 0x7f
     ef4:	4013      	ands	r3, r2
     ef6:	b2db      	uxtb	r3, r3
     ef8:	0018      	movs	r0, r3
     efa:	4b03      	ldr	r3, [pc, #12]	; (f08 <udc_valid_address+0x20>)
     efc:	4798      	blx	r3
}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	46bd      	mov	sp, r7
     f02:	bd80      	pop	{r7, pc}
     f04:	200028cc 	.word	0x200028cc
     f08:	00002bc1 	.word	0x00002bc1

00000f0c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     f10:	4b06      	ldr	r3, [pc, #24]	; (f2c <udc_req_std_dev_set_address+0x20>)
     f12:	88db      	ldrh	r3, [r3, #6]
     f14:	2b00      	cmp	r3, #0
     f16:	d001      	beq.n	f1c <udc_req_std_dev_set_address+0x10>
		return false;
     f18:	2300      	movs	r3, #0
     f1a:	e003      	b.n	f24 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     f1c:	4b03      	ldr	r3, [pc, #12]	; (f2c <udc_req_std_dev_set_address+0x20>)
     f1e:	4a04      	ldr	r2, [pc, #16]	; (f30 <udc_req_std_dev_set_address+0x24>)
     f20:	611a      	str	r2, [r3, #16]
	return true;
     f22:	2301      	movs	r3, #1
}
     f24:	0018      	movs	r0, r3
     f26:	46bd      	mov	sp, r7
     f28:	bd80      	pop	{r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	200028cc 	.word	0x200028cc
     f30:	00000ee9 	.word	0x00000ee9

00000f34 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
     f34:	b580      	push	{r7, lr}
     f36:	b084      	sub	sp, #16
     f38:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
     f3a:	1dfb      	adds	r3, r7, #7
     f3c:	2200      	movs	r2, #0
     f3e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     f40:	4b2d      	ldr	r3, [pc, #180]	; (ff8 <udc_req_std_dev_get_str_desc+0xc4>)
     f42:	885b      	ldrh	r3, [r3, #2]
     f44:	001a      	movs	r2, r3
     f46:	23ff      	movs	r3, #255	; 0xff
     f48:	4013      	ands	r3, r2
     f4a:	2b01      	cmp	r3, #1
     f4c:	d009      	beq.n	f62 <udc_req_std_dev_get_str_desc+0x2e>
     f4e:	2b02      	cmp	r3, #2
     f50:	d00d      	beq.n	f6e <udc_req_std_dev_get_str_desc+0x3a>
     f52:	2b00      	cmp	r3, #0
     f54:	d111      	bne.n	f7a <udc_req_std_dev_get_str_desc+0x46>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     f56:	4b29      	ldr	r3, [pc, #164]	; (ffc <udc_req_std_dev_get_str_desc+0xc8>)
     f58:	2104      	movs	r1, #4
     f5a:	0018      	movs	r0, r3
     f5c:	4b28      	ldr	r3, [pc, #160]	; (1000 <udc_req_std_dev_get_str_desc+0xcc>)
     f5e:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
     f60:	e00d      	b.n	f7e <udc_req_std_dev_get_str_desc+0x4a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     f62:	1dfb      	adds	r3, r7, #7
     f64:	2219      	movs	r2, #25
     f66:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
     f68:	4b26      	ldr	r3, [pc, #152]	; (1004 <udc_req_std_dev_get_str_desc+0xd0>)
     f6a:	60bb      	str	r3, [r7, #8]
		break;
     f6c:	e007      	b.n	f7e <udc_req_std_dev_get_str_desc+0x4a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     f6e:	1dfb      	adds	r3, r7, #7
     f70:	2217      	movs	r2, #23
     f72:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
     f74:	4b24      	ldr	r3, [pc, #144]	; (1008 <udc_req_std_dev_get_str_desc+0xd4>)
     f76:	60bb      	str	r3, [r7, #8]
		break;
     f78:	e001      	b.n	f7e <udc_req_std_dev_get_str_desc+0x4a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
     f7a:	2300      	movs	r3, #0
     f7c:	e037      	b.n	fee <udc_req_std_dev_get_str_desc+0xba>
	}

	if (str_length) {
     f7e:	1dfb      	adds	r3, r7, #7
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	2b00      	cmp	r3, #0
     f84:	d032      	beq.n	fec <udc_req_std_dev_get_str_desc+0xb8>
		for(i = 0; i < str_length; i++) {
     f86:	230f      	movs	r3, #15
     f88:	18fb      	adds	r3, r7, r3
     f8a:	2200      	movs	r2, #0
     f8c:	701a      	strb	r2, [r3, #0]
     f8e:	e016      	b.n	fbe <udc_req_std_dev_get_str_desc+0x8a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     f90:	230f      	movs	r3, #15
     f92:	18fb      	adds	r3, r7, r3
     f94:	781b      	ldrb	r3, [r3, #0]
     f96:	220f      	movs	r2, #15
     f98:	18ba      	adds	r2, r7, r2
     f9a:	7812      	ldrb	r2, [r2, #0]
     f9c:	68b9      	ldr	r1, [r7, #8]
     f9e:	188a      	adds	r2, r1, r2
     fa0:	7812      	ldrb	r2, [r2, #0]
     fa2:	b291      	uxth	r1, r2
     fa4:	4a19      	ldr	r2, [pc, #100]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fa6:	005b      	lsls	r3, r3, #1
     fa8:	18d3      	adds	r3, r2, r3
     faa:	3302      	adds	r3, #2
     fac:	1c0a      	adds	r2, r1, #0
     fae:	801a      	strh	r2, [r3, #0]
		for(i = 0; i < str_length; i++) {
     fb0:	230f      	movs	r3, #15
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	781a      	ldrb	r2, [r3, #0]
     fb6:	230f      	movs	r3, #15
     fb8:	18fb      	adds	r3, r7, r3
     fba:	3201      	adds	r2, #1
     fbc:	701a      	strb	r2, [r3, #0]
     fbe:	230f      	movs	r3, #15
     fc0:	18fa      	adds	r2, r7, r3
     fc2:	1dfb      	adds	r3, r7, #7
     fc4:	7812      	ldrb	r2, [r2, #0]
     fc6:	781b      	ldrb	r3, [r3, #0]
     fc8:	429a      	cmp	r2, r3
     fca:	d3e1      	bcc.n	f90 <udc_req_std_dev_get_str_desc+0x5c>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     fcc:	1dfb      	adds	r3, r7, #7
     fce:	781b      	ldrb	r3, [r3, #0]
     fd0:	3301      	adds	r3, #1
     fd2:	b2db      	uxtb	r3, r3
     fd4:	18db      	adds	r3, r3, r3
     fd6:	b2da      	uxtb	r2, r3
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fda:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
     fdc:	4b0b      	ldr	r3, [pc, #44]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fde:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
     fe0:	b29a      	uxth	r2, r3
     fe2:	4b0a      	ldr	r3, [pc, #40]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fe4:	0011      	movs	r1, r2
     fe6:	0018      	movs	r0, r3
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <udc_req_std_dev_get_str_desc+0xcc>)
     fea:	4798      	blx	r3
	}

	return true;
     fec:	2301      	movs	r3, #1
}
     fee:	0018      	movs	r0, r3
     ff0:	46bd      	mov	sp, r7
     ff2:	b004      	add	sp, #16
     ff4:	bd80      	pop	{r7, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	200028cc 	.word	0x200028cc
     ffc:	200000b0 	.word	0x200000b0
    1000:	00002c09 	.word	0x00002c09
    1004:	200000b4 	.word	0x200000b4
    1008:	200000d0 	.word	0x200000d0
    100c:	200000e8 	.word	0x200000e8

00001010 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    1010:	b580      	push	{r7, lr}
    1012:	b082      	sub	sp, #8
    1014:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    1018:	885a      	ldrh	r2, [r3, #2]
    101a:	1dfb      	adds	r3, r7, #7
    101c:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    101e:	4b37      	ldr	r3, [pc, #220]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    1020:	885b      	ldrh	r3, [r3, #2]
    1022:	0a1b      	lsrs	r3, r3, #8
    1024:	b29b      	uxth	r3, r3
    1026:	b2db      	uxtb	r3, r3
    1028:	2b02      	cmp	r3, #2
    102a:	d013      	beq.n	1054 <udc_req_std_dev_get_descriptor+0x44>
    102c:	dc02      	bgt.n	1034 <udc_req_std_dev_get_descriptor+0x24>
    102e:	2b01      	cmp	r3, #1
    1030:	d005      	beq.n	103e <udc_req_std_dev_get_descriptor+0x2e>
    1032:	e051      	b.n	10d8 <udc_req_std_dev_get_descriptor+0xc8>
    1034:	2b03      	cmp	r3, #3
    1036:	d044      	beq.n	10c2 <udc_req_std_dev_get_descriptor+0xb2>
    1038:	2b0f      	cmp	r3, #15
    103a:	d02f      	beq.n	109c <udc_req_std_dev_get_descriptor+0x8c>
    103c:	e04c      	b.n	10d8 <udc_req_std_dev_get_descriptor+0xc8>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    103e:	4b30      	ldr	r3, [pc, #192]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1040:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    1042:	4b2f      	ldr	r3, [pc, #188]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
    1048:	b29b      	uxth	r3, r3
    104a:	0019      	movs	r1, r3
    104c:	0010      	movs	r0, r2
    104e:	4b2d      	ldr	r3, [pc, #180]	; (1104 <udc_req_std_dev_get_descriptor+0xf4>)
    1050:	4798      	blx	r3
		}
		break;
    1052:	e044      	b.n	10de <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1054:	4b2a      	ldr	r3, [pc, #168]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	7c5b      	ldrb	r3, [r3, #17]
    105a:	1dfa      	adds	r2, r7, #7
    105c:	7812      	ldrb	r2, [r2, #0]
    105e:	429a      	cmp	r2, r3
    1060:	d301      	bcc.n	1066 <udc_req_std_dev_get_descriptor+0x56>
					bNumConfigurations) {
				return false;
    1062:	2300      	movs	r3, #0
    1064:	e046      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1066:	4b26      	ldr	r3, [pc, #152]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1068:	685a      	ldr	r2, [r3, #4]
    106a:	1dfb      	adds	r3, r7, #7
    106c:	781b      	ldrb	r3, [r3, #0]
    106e:	00db      	lsls	r3, r3, #3
    1070:	18d3      	adds	r3, r2, r3
    1072:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1074:	4b22      	ldr	r3, [pc, #136]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1076:	685a      	ldr	r2, [r3, #4]
    1078:	1dfb      	adds	r3, r7, #7
    107a:	781b      	ldrb	r3, [r3, #0]
    107c:	00db      	lsls	r3, r3, #3
    107e:	18d3      	adds	r3, r2, r3
    1080:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
    1082:	789a      	ldrb	r2, [r3, #2]
    1084:	78db      	ldrb	r3, [r3, #3]
    1086:	021b      	lsls	r3, r3, #8
    1088:	4313      	orrs	r3, r2
    108a:	b29b      	uxth	r3, r3
    108c:	0019      	movs	r1, r3
    108e:	4b1d      	ldr	r3, [pc, #116]	; (1104 <udc_req_std_dev_get_descriptor+0xf4>)
    1090:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1092:	4b1a      	ldr	r3, [pc, #104]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    1094:	689b      	ldr	r3, [r3, #8]
    1096:	2202      	movs	r2, #2
    1098:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    109a:	e020      	b.n	10de <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    109c:	4b18      	ldr	r3, [pc, #96]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    109e:	689b      	ldr	r3, [r3, #8]
    10a0:	2b00      	cmp	r3, #0
    10a2:	d101      	bne.n	10a8 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    10a4:	2300      	movs	r3, #0
    10a6:	e025      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    10a8:	4b15      	ldr	r3, [pc, #84]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    10aa:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    10ac:	4b14      	ldr	r3, [pc, #80]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    10ae:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    10b0:	789a      	ldrb	r2, [r3, #2]
    10b2:	78db      	ldrb	r3, [r3, #3]
    10b4:	021b      	lsls	r3, r3, #8
    10b6:	4313      	orrs	r3, r2
    10b8:	b29b      	uxth	r3, r3
    10ba:	0019      	movs	r1, r3
    10bc:	4b11      	ldr	r3, [pc, #68]	; (1104 <udc_req_std_dev_get_descriptor+0xf4>)
    10be:	4798      	blx	r3
		break;
    10c0:	e00d      	b.n	10de <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    10c2:	4b11      	ldr	r3, [pc, #68]	; (1108 <udc_req_std_dev_get_descriptor+0xf8>)
    10c4:	4798      	blx	r3
    10c6:	0003      	movs	r3, r0
    10c8:	001a      	movs	r2, r3
    10ca:	2301      	movs	r3, #1
    10cc:	4053      	eors	r3, r2
    10ce:	b2db      	uxtb	r3, r3
    10d0:	2b00      	cmp	r3, #0
    10d2:	d003      	beq.n	10dc <udc_req_std_dev_get_descriptor+0xcc>
			return false;
    10d4:	2300      	movs	r3, #0
    10d6:	e00d      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    10d8:	2300      	movs	r3, #0
    10da:	e00b      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
		break;
    10dc:	46c0      	nop			; (mov r8, r8)
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    10de:	4b07      	ldr	r3, [pc, #28]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10e0:	88da      	ldrh	r2, [r3, #6]
    10e2:	4b06      	ldr	r3, [pc, #24]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10e4:	899b      	ldrh	r3, [r3, #12]
    10e6:	429a      	cmp	r2, r3
    10e8:	d203      	bcs.n	10f2 <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    10ea:	4b04      	ldr	r3, [pc, #16]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10ec:	88da      	ldrh	r2, [r3, #6]
    10ee:	4b03      	ldr	r3, [pc, #12]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10f0:	819a      	strh	r2, [r3, #12]
	}
	return true;
    10f2:	2301      	movs	r3, #1
}
    10f4:	0018      	movs	r0, r3
    10f6:	46bd      	mov	sp, r7
    10f8:	b002      	add	sp, #8
    10fa:	bd80      	pop	{r7, pc}
    10fc:	200028cc 	.word	0x200028cc
    1100:	200000a4 	.word	0x200000a4
    1104:	00002c09 	.word	0x00002c09
    1108:	00000f35 	.word	0x00000f35

0000110c <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    110c:	b580      	push	{r7, lr}
    110e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    1110:	4b07      	ldr	r3, [pc, #28]	; (1130 <udc_req_std_dev_get_configuration+0x24>)
    1112:	88db      	ldrh	r3, [r3, #6]
    1114:	2b01      	cmp	r3, #1
    1116:	d001      	beq.n	111c <udc_req_std_dev_get_configuration+0x10>
		return false;
    1118:	2300      	movs	r3, #0
    111a:	e005      	b.n	1128 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <udc_req_std_dev_get_configuration+0x28>)
    111e:	2101      	movs	r1, #1
    1120:	0018      	movs	r0, r3
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <udc_req_std_dev_get_configuration+0x2c>)
    1124:	4798      	blx	r3
	return true;
    1126:	2301      	movs	r3, #1
}
    1128:	0018      	movs	r0, r3
    112a:	46bd      	mov	sp, r7
    112c:	bd80      	pop	{r7, pc}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	200028cc 	.word	0x200028cc
    1134:	200004b8 	.word	0x200004b8
    1138:	00002c09 	.word	0x00002c09

0000113c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	b082      	sub	sp, #8
    1140:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1142:	4b2a      	ldr	r3, [pc, #168]	; (11ec <udc_req_std_dev_set_configuration+0xb0>)
    1144:	88db      	ldrh	r3, [r3, #6]
    1146:	2b00      	cmp	r3, #0
    1148:	d001      	beq.n	114e <udc_req_std_dev_set_configuration+0x12>
		return false;
    114a:	2300      	movs	r3, #0
    114c:	e04a      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    114e:	4b28      	ldr	r3, [pc, #160]	; (11f0 <udc_req_std_dev_set_configuration+0xb4>)
    1150:	4798      	blx	r3
    1152:	1e03      	subs	r3, r0, #0
    1154:	d101      	bne.n	115a <udc_req_std_dev_set_configuration+0x1e>
		return false;
    1156:	2300      	movs	r3, #0
    1158:	e044      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    115a:	4b24      	ldr	r3, [pc, #144]	; (11ec <udc_req_std_dev_set_configuration+0xb0>)
    115c:	885b      	ldrh	r3, [r3, #2]
    115e:	001a      	movs	r2, r3
    1160:	23ff      	movs	r3, #255	; 0xff
    1162:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    1164:	4b23      	ldr	r3, [pc, #140]	; (11f4 <udc_req_std_dev_set_configuration+0xb8>)
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    116a:	429a      	cmp	r2, r3
    116c:	dd01      	ble.n	1172 <udc_req_std_dev_set_configuration+0x36>
			return false;
    116e:	2300      	movs	r3, #0
    1170:	e038      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    1172:	4b21      	ldr	r3, [pc, #132]	; (11f8 <udc_req_std_dev_set_configuration+0xbc>)
    1174:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1176:	4b1d      	ldr	r3, [pc, #116]	; (11ec <udc_req_std_dev_set_configuration+0xb0>)
    1178:	885b      	ldrh	r3, [r3, #2]
    117a:	b2da      	uxtb	r2, r3
    117c:	4b1f      	ldr	r3, [pc, #124]	; (11fc <udc_req_std_dev_set_configuration+0xc0>)
    117e:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    1180:	4b1e      	ldr	r3, [pc, #120]	; (11fc <udc_req_std_dev_set_configuration+0xc0>)
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	2b00      	cmp	r3, #0
    1186:	d101      	bne.n	118c <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    1188:	2301      	movs	r3, #1
    118a:	e02b      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    118c:	4b19      	ldr	r3, [pc, #100]	; (11f4 <udc_req_std_dev_set_configuration+0xb8>)
    118e:	685a      	ldr	r2, [r3, #4]
    1190:	4b1a      	ldr	r3, [pc, #104]	; (11fc <udc_req_std_dev_set_configuration+0xc0>)
    1192:	781b      	ldrb	r3, [r3, #0]
    1194:	491a      	ldr	r1, [pc, #104]	; (1200 <udc_req_std_dev_set_configuration+0xc4>)
    1196:	468c      	mov	ip, r1
    1198:	4463      	add	r3, ip
    119a:	00db      	lsls	r3, r3, #3
    119c:	18d2      	adds	r2, r2, r3
    119e:	4b19      	ldr	r3, [pc, #100]	; (1204 <udc_req_std_dev_set_configuration+0xc8>)
    11a0:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11a2:	1dfb      	adds	r3, r7, #7
    11a4:	2200      	movs	r2, #0
    11a6:	701a      	strb	r2, [r3, #0]
    11a8:	e013      	b.n	11d2 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    11aa:	1dfb      	adds	r3, r7, #7
    11ac:	781b      	ldrb	r3, [r3, #0]
    11ae:	2100      	movs	r1, #0
    11b0:	0018      	movs	r0, r3
    11b2:	4b15      	ldr	r3, [pc, #84]	; (1208 <udc_req_std_dev_set_configuration+0xcc>)
    11b4:	4798      	blx	r3
    11b6:	0003      	movs	r3, r0
    11b8:	001a      	movs	r2, r3
    11ba:	2301      	movs	r3, #1
    11bc:	4053      	eors	r3, r2
    11be:	b2db      	uxtb	r3, r3
    11c0:	2b00      	cmp	r3, #0
    11c2:	d001      	beq.n	11c8 <udc_req_std_dev_set_configuration+0x8c>
			return false;
    11c4:	2300      	movs	r3, #0
    11c6:	e00d      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
			iface_num++) {
    11c8:	1dfb      	adds	r3, r7, #7
    11ca:	781a      	ldrb	r2, [r3, #0]
    11cc:	1dfb      	adds	r3, r7, #7
    11ce:	3201      	adds	r2, #1
    11d0:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11d2:	4b0c      	ldr	r3, [pc, #48]	; (1204 <udc_req_std_dev_set_configuration+0xc8>)
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	681b      	ldr	r3, [r3, #0]
    11d8:	791b      	ldrb	r3, [r3, #4]
    11da:	1dfa      	adds	r2, r7, #7
    11dc:	7812      	ldrb	r2, [r2, #0]
    11de:	429a      	cmp	r2, r3
    11e0:	d3e3      	bcc.n	11aa <udc_req_std_dev_set_configuration+0x6e>
		}
	}
	return true;
    11e2:	2301      	movs	r3, #1
}
    11e4:	0018      	movs	r0, r3
    11e6:	46bd      	mov	sp, r7
    11e8:	b002      	add	sp, #8
    11ea:	bd80      	pop	{r7, pc}
    11ec:	200028cc 	.word	0x200028cc
    11f0:	00002bed 	.word	0x00002bed
    11f4:	200000a4 	.word	0x200000a4
    11f8:	00000c89 	.word	0x00000c89
    11fc:	200004b8 	.word	0x200004b8
    1200:	1fffffff 	.word	0x1fffffff
    1204:	200004bc 	.word	0x200004bc
    1208:	00000bc5 	.word	0x00000bc5

0000120c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    120c:	b580      	push	{r7, lr}
    120e:	b082      	sub	sp, #8
    1210:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1212:	4b21      	ldr	r3, [pc, #132]	; (1298 <udc_req_std_iface_get_setting+0x8c>)
    1214:	88db      	ldrh	r3, [r3, #6]
    1216:	2b01      	cmp	r3, #1
    1218:	d001      	beq.n	121e <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    121a:	2300      	movs	r3, #0
    121c:	e038      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    121e:	4b1f      	ldr	r3, [pc, #124]	; (129c <udc_req_std_iface_get_setting+0x90>)
    1220:	781b      	ldrb	r3, [r3, #0]
    1222:	2b00      	cmp	r3, #0
    1224:	d101      	bne.n	122a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    1226:	2300      	movs	r3, #0
    1228:	e032      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    122a:	4b1b      	ldr	r3, [pc, #108]	; (1298 <udc_req_std_iface_get_setting+0x8c>)
    122c:	889a      	ldrh	r2, [r3, #4]
    122e:	1dfb      	adds	r3, r7, #7
    1230:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1232:	4b1b      	ldr	r3, [pc, #108]	; (12a0 <udc_req_std_iface_get_setting+0x94>)
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	681b      	ldr	r3, [r3, #0]
    1238:	791b      	ldrb	r3, [r3, #4]
    123a:	1dfa      	adds	r2, r7, #7
    123c:	7812      	ldrb	r2, [r2, #0]
    123e:	429a      	cmp	r2, r3
    1240:	d301      	bcc.n	1246 <udc_req_std_iface_get_setting+0x3a>
		return false;
    1242:	2300      	movs	r3, #0
    1244:	e024      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1246:	1dfb      	adds	r3, r7, #7
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	2100      	movs	r1, #0
    124c:	0018      	movs	r0, r3
    124e:	4b15      	ldr	r3, [pc, #84]	; (12a4 <udc_req_std_iface_get_setting+0x98>)
    1250:	4798      	blx	r3
    1252:	0003      	movs	r3, r0
    1254:	001a      	movs	r2, r3
    1256:	2301      	movs	r3, #1
    1258:	4053      	eors	r3, r2
    125a:	b2db      	uxtb	r3, r3
    125c:	2b00      	cmp	r3, #0
    125e:	d001      	beq.n	1264 <udc_req_std_iface_get_setting+0x58>
		return false;
    1260:	2300      	movs	r3, #0
    1262:	e015      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1264:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <udc_req_std_iface_get_setting+0x94>)
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	685a      	ldr	r2, [r3, #4]
    126a:	1dfb      	adds	r3, r7, #7
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	009b      	lsls	r3, r3, #2
    1270:	18d3      	adds	r3, r2, r3
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    1276:	683b      	ldr	r3, [r7, #0]
    1278:	68db      	ldr	r3, [r3, #12]
    127a:	4798      	blx	r3
    127c:	0003      	movs	r3, r0
    127e:	001a      	movs	r2, r3
    1280:	4b09      	ldr	r3, [pc, #36]	; (12a8 <udc_req_std_iface_get_setting+0x9c>)
    1282:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <udc_req_std_iface_get_setting+0x9c>)
    1286:	2101      	movs	r1, #1
    1288:	0018      	movs	r0, r3
    128a:	4b08      	ldr	r3, [pc, #32]	; (12ac <udc_req_std_iface_get_setting+0xa0>)
    128c:	4798      	blx	r3
	return true;
    128e:	2301      	movs	r3, #1
}
    1290:	0018      	movs	r0, r3
    1292:	46bd      	mov	sp, r7
    1294:	b002      	add	sp, #8
    1296:	bd80      	pop	{r7, pc}
    1298:	200028cc 	.word	0x200028cc
    129c:	200004b8 	.word	0x200004b8
    12a0:	200004bc 	.word	0x200004bc
    12a4:	00000a71 	.word	0x00000a71
    12a8:	200004b4 	.word	0x200004b4
    12ac:	00002c09 	.word	0x00002c09

000012b0 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    12b0:	b580      	push	{r7, lr}
    12b2:	b082      	sub	sp, #8
    12b4:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    12b6:	4b17      	ldr	r3, [pc, #92]	; (1314 <udc_req_std_iface_set_setting+0x64>)
    12b8:	88db      	ldrh	r3, [r3, #6]
    12ba:	2b00      	cmp	r3, #0
    12bc:	d001      	beq.n	12c2 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    12be:	2300      	movs	r3, #0
    12c0:	e024      	b.n	130c <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    12c2:	4b15      	ldr	r3, [pc, #84]	; (1318 <udc_req_std_iface_set_setting+0x68>)
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d101      	bne.n	12ce <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    12ca:	2300      	movs	r3, #0
    12cc:	e01e      	b.n	130c <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    12ce:	4b11      	ldr	r3, [pc, #68]	; (1314 <udc_req_std_iface_set_setting+0x64>)
    12d0:	889a      	ldrh	r2, [r3, #4]
    12d2:	1dfb      	adds	r3, r7, #7
    12d4:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    12d6:	4b0f      	ldr	r3, [pc, #60]	; (1314 <udc_req_std_iface_set_setting+0x64>)
    12d8:	885a      	ldrh	r2, [r3, #2]
    12da:	1dbb      	adds	r3, r7, #6
    12dc:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    12de:	1dfb      	adds	r3, r7, #7
    12e0:	781b      	ldrb	r3, [r3, #0]
    12e2:	0018      	movs	r0, r3
    12e4:	4b0d      	ldr	r3, [pc, #52]	; (131c <udc_req_std_iface_set_setting+0x6c>)
    12e6:	4798      	blx	r3
    12e8:	0003      	movs	r3, r0
    12ea:	001a      	movs	r2, r3
    12ec:	2301      	movs	r3, #1
    12ee:	4053      	eors	r3, r2
    12f0:	b2db      	uxtb	r3, r3
    12f2:	2b00      	cmp	r3, #0
    12f4:	d001      	beq.n	12fa <udc_req_std_iface_set_setting+0x4a>
		return false;
    12f6:	2300      	movs	r3, #0
    12f8:	e008      	b.n	130c <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    12fa:	1dbb      	adds	r3, r7, #6
    12fc:	781a      	ldrb	r2, [r3, #0]
    12fe:	1dfb      	adds	r3, r7, #7
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	0011      	movs	r1, r2
    1304:	0018      	movs	r0, r3
    1306:	4b06      	ldr	r3, [pc, #24]	; (1320 <udc_req_std_iface_set_setting+0x70>)
    1308:	4798      	blx	r3
    130a:	0003      	movs	r3, r0
}
    130c:	0018      	movs	r0, r3
    130e:	46bd      	mov	sp, r7
    1310:	b002      	add	sp, #8
    1312:	bd80      	pop	{r7, pc}
    1314:	200028cc 	.word	0x200028cc
    1318:	200004b8 	.word	0x200004b8
    131c:	00000b15 	.word	0x00000b15
    1320:	00000bc5 	.word	0x00000bc5

00001324 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    1324:	b580      	push	{r7, lr}
    1326:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    1328:	4b47      	ldr	r3, [pc, #284]	; (1448 <udc_reqstd+0x124>)
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	b25b      	sxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	da40      	bge.n	13b4 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1332:	4b45      	ldr	r3, [pc, #276]	; (1448 <udc_reqstd+0x124>)
    1334:	88db      	ldrh	r3, [r3, #6]
    1336:	2b00      	cmp	r3, #0
    1338:	d101      	bne.n	133e <udc_reqstd+0x1a>
			return false; // Error for USB host
    133a:	2300      	movs	r3, #0
    133c:	e081      	b.n	1442 <udc_reqstd+0x11e>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    133e:	4b42      	ldr	r3, [pc, #264]	; (1448 <udc_reqstd+0x124>)
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	001a      	movs	r2, r3
    1344:	231f      	movs	r3, #31
    1346:	4013      	ands	r3, r2
    1348:	d114      	bne.n	1374 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    134a:	4b3f      	ldr	r3, [pc, #252]	; (1448 <udc_reqstd+0x124>)
    134c:	785b      	ldrb	r3, [r3, #1]
    134e:	2b06      	cmp	r3, #6
    1350:	d008      	beq.n	1364 <udc_reqstd+0x40>
    1352:	2b08      	cmp	r3, #8
    1354:	d00a      	beq.n	136c <udc_reqstd+0x48>
    1356:	2b00      	cmp	r3, #0
    1358:	d000      	beq.n	135c <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    135a:	e00b      	b.n	1374 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
    135c:	4b3b      	ldr	r3, [pc, #236]	; (144c <udc_reqstd+0x128>)
    135e:	4798      	blx	r3
    1360:	0003      	movs	r3, r0
    1362:	e06e      	b.n	1442 <udc_reqstd+0x11e>
				return udc_req_std_dev_get_descriptor();
    1364:	4b3a      	ldr	r3, [pc, #232]	; (1450 <udc_reqstd+0x12c>)
    1366:	4798      	blx	r3
    1368:	0003      	movs	r3, r0
    136a:	e06a      	b.n	1442 <udc_reqstd+0x11e>
				return udc_req_std_dev_get_configuration();
    136c:	4b39      	ldr	r3, [pc, #228]	; (1454 <udc_reqstd+0x130>)
    136e:	4798      	blx	r3
    1370:	0003      	movs	r3, r0
    1372:	e066      	b.n	1442 <udc_reqstd+0x11e>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1374:	4b34      	ldr	r3, [pc, #208]	; (1448 <udc_reqstd+0x124>)
    1376:	781b      	ldrb	r3, [r3, #0]
    1378:	001a      	movs	r2, r3
    137a:	231f      	movs	r3, #31
    137c:	4013      	ands	r3, r2
    137e:	2b01      	cmp	r3, #1
    1380:	d108      	bne.n	1394 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1382:	4b31      	ldr	r3, [pc, #196]	; (1448 <udc_reqstd+0x124>)
    1384:	785b      	ldrb	r3, [r3, #1]
    1386:	2b0a      	cmp	r3, #10
    1388:	d000      	beq.n	138c <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    138a:	e003      	b.n	1394 <udc_reqstd+0x70>
				return udc_req_std_iface_get_setting();
    138c:	4b32      	ldr	r3, [pc, #200]	; (1458 <udc_reqstd+0x134>)
    138e:	4798      	blx	r3
    1390:	0003      	movs	r3, r0
    1392:	e056      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1394:	4b2c      	ldr	r3, [pc, #176]	; (1448 <udc_reqstd+0x124>)
    1396:	781b      	ldrb	r3, [r3, #0]
    1398:	001a      	movs	r2, r3
    139a:	231f      	movs	r3, #31
    139c:	4013      	ands	r3, r2
    139e:	2b02      	cmp	r3, #2
    13a0:	d14e      	bne.n	1440 <udc_reqstd+0x11c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    13a2:	4b29      	ldr	r3, [pc, #164]	; (1448 <udc_reqstd+0x124>)
    13a4:	785b      	ldrb	r3, [r3, #1]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d000      	beq.n	13ac <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    13aa:	e049      	b.n	1440 <udc_reqstd+0x11c>
				return udc_req_std_ep_get_status();
    13ac:	4b2b      	ldr	r3, [pc, #172]	; (145c <udc_reqstd+0x138>)
    13ae:	4798      	blx	r3
    13b0:	0003      	movs	r3, r0
    13b2:	e046      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    13b4:	4b24      	ldr	r3, [pc, #144]	; (1448 <udc_reqstd+0x124>)
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	001a      	movs	r2, r3
    13ba:	231f      	movs	r3, #31
    13bc:	4013      	ands	r3, r2
    13be:	d119      	bne.n	13f4 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    13c0:	4b21      	ldr	r3, [pc, #132]	; (1448 <udc_reqstd+0x124>)
    13c2:	785b      	ldrb	r3, [r3, #1]
    13c4:	2b09      	cmp	r3, #9
    13c6:	d814      	bhi.n	13f2 <udc_reqstd+0xce>
    13c8:	009a      	lsls	r2, r3, #2
    13ca:	4b25      	ldr	r3, [pc, #148]	; (1460 <udc_reqstd+0x13c>)
    13cc:	18d3      	adds	r3, r2, r3
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    13d2:	4b24      	ldr	r3, [pc, #144]	; (1464 <udc_reqstd+0x140>)
    13d4:	4798      	blx	r3
    13d6:	0003      	movs	r3, r0
    13d8:	e033      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    13da:	4b23      	ldr	r3, [pc, #140]	; (1468 <udc_reqstd+0x144>)
    13dc:	4798      	blx	r3
    13de:	0003      	movs	r3, r0
    13e0:	e02f      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    13e2:	4b22      	ldr	r3, [pc, #136]	; (146c <udc_reqstd+0x148>)
    13e4:	4798      	blx	r3
    13e6:	0003      	movs	r3, r0
    13e8:	e02b      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    13ea:	4b21      	ldr	r3, [pc, #132]	; (1470 <udc_reqstd+0x14c>)
    13ec:	4798      	blx	r3
    13ee:	0003      	movs	r3, r0
    13f0:	e027      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    13f2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    13f4:	4b14      	ldr	r3, [pc, #80]	; (1448 <udc_reqstd+0x124>)
    13f6:	781b      	ldrb	r3, [r3, #0]
    13f8:	001a      	movs	r2, r3
    13fa:	231f      	movs	r3, #31
    13fc:	4013      	ands	r3, r2
    13fe:	2b01      	cmp	r3, #1
    1400:	d108      	bne.n	1414 <udc_reqstd+0xf0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1402:	4b11      	ldr	r3, [pc, #68]	; (1448 <udc_reqstd+0x124>)
    1404:	785b      	ldrb	r3, [r3, #1]
    1406:	2b0b      	cmp	r3, #11
    1408:	d000      	beq.n	140c <udc_reqstd+0xe8>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    140a:	e003      	b.n	1414 <udc_reqstd+0xf0>
				return udc_req_std_iface_set_setting();
    140c:	4b19      	ldr	r3, [pc, #100]	; (1474 <udc_reqstd+0x150>)
    140e:	4798      	blx	r3
    1410:	0003      	movs	r3, r0
    1412:	e016      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1414:	4b0c      	ldr	r3, [pc, #48]	; (1448 <udc_reqstd+0x124>)
    1416:	781b      	ldrb	r3, [r3, #0]
    1418:	001a      	movs	r2, r3
    141a:	231f      	movs	r3, #31
    141c:	4013      	ands	r3, r2
    141e:	2b02      	cmp	r3, #2
    1420:	d10e      	bne.n	1440 <udc_reqstd+0x11c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1422:	4b09      	ldr	r3, [pc, #36]	; (1448 <udc_reqstd+0x124>)
    1424:	785b      	ldrb	r3, [r3, #1]
    1426:	2b01      	cmp	r3, #1
    1428:	d002      	beq.n	1430 <udc_reqstd+0x10c>
    142a:	2b03      	cmp	r3, #3
    142c:	d004      	beq.n	1438 <udc_reqstd+0x114>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    142e:	e007      	b.n	1440 <udc_reqstd+0x11c>
				return udc_req_std_ep_clear_feature();
    1430:	4b11      	ldr	r3, [pc, #68]	; (1478 <udc_reqstd+0x154>)
    1432:	4798      	blx	r3
    1434:	0003      	movs	r3, r0
    1436:	e004      	b.n	1442 <udc_reqstd+0x11e>
				return udc_req_std_ep_set_feature();
    1438:	4b10      	ldr	r3, [pc, #64]	; (147c <udc_reqstd+0x158>)
    143a:	4798      	blx	r3
    143c:	0003      	movs	r3, r0
    143e:	e000      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#endif
	}
	return false;
    1440:	2300      	movs	r3, #0
}
    1442:	0018      	movs	r0, r3
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}
    1448:	200028cc 	.word	0x200028cc
    144c:	00000d69 	.word	0x00000d69
    1450:	00001011 	.word	0x00001011
    1454:	0000110d 	.word	0x0000110d
    1458:	0000120d 	.word	0x0000120d
    145c:	00000d99 	.word	0x00000d99
    1460:	0001f890 	.word	0x0001f890
    1464:	00000f0d 	.word	0x00000f0d
    1468:	00000de1 	.word	0x00000de1
    146c:	00000e5d 	.word	0x00000e5d
    1470:	0000113d 	.word	0x0000113d
    1474:	000012b1 	.word	0x000012b1
    1478:	00000e25 	.word	0x00000e25
    147c:	00000ea1 	.word	0x00000ea1

00001480 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    1480:	b580      	push	{r7, lr}
    1482:	b082      	sub	sp, #8
    1484:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1486:	4b24      	ldr	r3, [pc, #144]	; (1518 <udc_req_iface+0x98>)
    1488:	781b      	ldrb	r3, [r3, #0]
    148a:	2b00      	cmp	r3, #0
    148c:	d101      	bne.n	1492 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    148e:	2300      	movs	r3, #0
    1490:	e03d      	b.n	150e <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1492:	4b22      	ldr	r3, [pc, #136]	; (151c <udc_req_iface+0x9c>)
    1494:	889a      	ldrh	r2, [r3, #4]
    1496:	1dfb      	adds	r3, r7, #7
    1498:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    149a:	4b21      	ldr	r3, [pc, #132]	; (1520 <udc_req_iface+0xa0>)
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	791b      	ldrb	r3, [r3, #4]
    14a2:	1dfa      	adds	r2, r7, #7
    14a4:	7812      	ldrb	r2, [r2, #0]
    14a6:	429a      	cmp	r2, r3
    14a8:	d301      	bcc.n	14ae <udc_req_iface+0x2e>
		return false;
    14aa:	2300      	movs	r3, #0
    14ac:	e02f      	b.n	150e <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    14ae:	1dfb      	adds	r3, r7, #7
    14b0:	781b      	ldrb	r3, [r3, #0]
    14b2:	2100      	movs	r1, #0
    14b4:	0018      	movs	r0, r3
    14b6:	4b1b      	ldr	r3, [pc, #108]	; (1524 <udc_req_iface+0xa4>)
    14b8:	4798      	blx	r3
    14ba:	0003      	movs	r3, r0
    14bc:	001a      	movs	r2, r3
    14be:	2301      	movs	r3, #1
    14c0:	4053      	eors	r3, r2
    14c2:	b2db      	uxtb	r3, r3
    14c4:	2b00      	cmp	r3, #0
    14c6:	d001      	beq.n	14cc <udc_req_iface+0x4c>
		return false;
    14c8:	2300      	movs	r3, #0
    14ca:	e020      	b.n	150e <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    14cc:	4b14      	ldr	r3, [pc, #80]	; (1520 <udc_req_iface+0xa0>)
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	685a      	ldr	r2, [r3, #4]
    14d2:	1dfb      	adds	r3, r7, #7
    14d4:	781b      	ldrb	r3, [r3, #0]
    14d6:	009b      	lsls	r3, r3, #2
    14d8:	18d3      	adds	r3, r2, r3
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    14de:	683b      	ldr	r3, [r7, #0]
    14e0:	68db      	ldr	r3, [r3, #12]
    14e2:	4798      	blx	r3
    14e4:	0003      	movs	r3, r0
    14e6:	001a      	movs	r2, r3
    14e8:	1dfb      	adds	r3, r7, #7
    14ea:	781b      	ldrb	r3, [r3, #0]
    14ec:	0011      	movs	r1, r2
    14ee:	0018      	movs	r0, r3
    14f0:	4b0c      	ldr	r3, [pc, #48]	; (1524 <udc_req_iface+0xa4>)
    14f2:	4798      	blx	r3
    14f4:	0003      	movs	r3, r0
    14f6:	001a      	movs	r2, r3
    14f8:	2301      	movs	r3, #1
    14fa:	4053      	eors	r3, r2
    14fc:	b2db      	uxtb	r3, r3
    14fe:	2b00      	cmp	r3, #0
    1500:	d001      	beq.n	1506 <udc_req_iface+0x86>
		return false;
    1502:	2300      	movs	r3, #0
    1504:	e003      	b.n	150e <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1506:	683b      	ldr	r3, [r7, #0]
    1508:	689b      	ldr	r3, [r3, #8]
    150a:	4798      	blx	r3
    150c:	0003      	movs	r3, r0
}
    150e:	0018      	movs	r0, r3
    1510:	46bd      	mov	sp, r7
    1512:	b002      	add	sp, #8
    1514:	bd80      	pop	{r7, pc}
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	200004b8 	.word	0x200004b8
    151c:	200028cc 	.word	0x200028cc
    1520:	200004bc 	.word	0x200004bc
    1524:	00000a71 	.word	0x00000a71

00001528 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    1528:	b580      	push	{r7, lr}
    152a:	b082      	sub	sp, #8
    152c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    152e:	4b22      	ldr	r3, [pc, #136]	; (15b8 <udc_req_ep+0x90>)
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	2b00      	cmp	r3, #0
    1534:	d101      	bne.n	153a <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    1536:	2300      	movs	r3, #0
    1538:	e039      	b.n	15ae <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    153a:	4b20      	ldr	r3, [pc, #128]	; (15bc <udc_req_ep+0x94>)
    153c:	889a      	ldrh	r2, [r3, #4]
    153e:	1dfb      	adds	r3, r7, #7
    1540:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1542:	1dfb      	adds	r3, r7, #7
    1544:	2200      	movs	r2, #0
    1546:	701a      	strb	r2, [r3, #0]
    1548:	e028      	b.n	159c <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    154a:	4b1d      	ldr	r3, [pc, #116]	; (15c0 <udc_req_ep+0x98>)
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	685a      	ldr	r2, [r3, #4]
    1550:	1dfb      	adds	r3, r7, #7
    1552:	781b      	ldrb	r3, [r3, #0]
    1554:	009b      	lsls	r3, r3, #2
    1556:	18d3      	adds	r3, r2, r3
    1558:	681b      	ldr	r3, [r3, #0]
    155a:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    155c:	683b      	ldr	r3, [r7, #0]
    155e:	68db      	ldr	r3, [r3, #12]
    1560:	4798      	blx	r3
    1562:	0003      	movs	r3, r0
    1564:	001a      	movs	r2, r3
    1566:	1dfb      	adds	r3, r7, #7
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	0011      	movs	r1, r2
    156c:	0018      	movs	r0, r3
    156e:	4b15      	ldr	r3, [pc, #84]	; (15c4 <udc_req_ep+0x9c>)
    1570:	4798      	blx	r3
    1572:	0003      	movs	r3, r0
    1574:	001a      	movs	r2, r3
    1576:	2301      	movs	r3, #1
    1578:	4053      	eors	r3, r2
    157a:	b2db      	uxtb	r3, r3
    157c:	2b00      	cmp	r3, #0
    157e:	d001      	beq.n	1584 <udc_req_ep+0x5c>
			return false;
    1580:	2300      	movs	r3, #0
    1582:	e014      	b.n	15ae <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1584:	683b      	ldr	r3, [r7, #0]
    1586:	689b      	ldr	r3, [r3, #8]
    1588:	4798      	blx	r3
    158a:	1e03      	subs	r3, r0, #0
    158c:	d001      	beq.n	1592 <udc_req_ep+0x6a>
			return true;
    158e:	2301      	movs	r3, #1
    1590:	e00d      	b.n	15ae <udc_req_ep+0x86>
			iface_num++) {
    1592:	1dfb      	adds	r3, r7, #7
    1594:	781a      	ldrb	r2, [r3, #0]
    1596:	1dfb      	adds	r3, r7, #7
    1598:	3201      	adds	r2, #1
    159a:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    159c:	4b08      	ldr	r3, [pc, #32]	; (15c0 <udc_req_ep+0x98>)
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	681b      	ldr	r3, [r3, #0]
    15a2:	791b      	ldrb	r3, [r3, #4]
    15a4:	1dfa      	adds	r2, r7, #7
    15a6:	7812      	ldrb	r2, [r2, #0]
    15a8:	429a      	cmp	r2, r3
    15aa:	d3ce      	bcc.n	154a <udc_req_ep+0x22>
		}
	}
	return false;
    15ac:	2300      	movs	r3, #0
}
    15ae:	0018      	movs	r0, r3
    15b0:	46bd      	mov	sp, r7
    15b2:	b002      	add	sp, #8
    15b4:	bd80      	pop	{r7, pc}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	200004b8 	.word	0x200004b8
    15bc:	200028cc 	.word	0x200028cc
    15c0:	200004bc 	.word	0x200004bc
    15c4:	00000a71 	.word	0x00000a71

000015c8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    15cc:	4b1e      	ldr	r3, [pc, #120]	; (1648 <udc_process_setup+0x80>)
    15ce:	2200      	movs	r2, #0
    15d0:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    15d2:	4b1d      	ldr	r3, [pc, #116]	; (1648 <udc_process_setup+0x80>)
    15d4:	2200      	movs	r2, #0
    15d6:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    15d8:	4b1b      	ldr	r3, [pc, #108]	; (1648 <udc_process_setup+0x80>)
    15da:	2200      	movs	r2, #0
    15dc:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    15de:	4b1a      	ldr	r3, [pc, #104]	; (1648 <udc_process_setup+0x80>)
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	b25b      	sxtb	r3, r3
    15e4:	2b00      	cmp	r3, #0
    15e6:	da05      	bge.n	15f4 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    15e8:	4b17      	ldr	r3, [pc, #92]	; (1648 <udc_process_setup+0x80>)
    15ea:	88db      	ldrh	r3, [r3, #6]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d101      	bne.n	15f4 <udc_process_setup+0x2c>
			return false; // Error from USB host
    15f0:	2300      	movs	r3, #0
    15f2:	e026      	b.n	1642 <udc_process_setup+0x7a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    15f4:	4b14      	ldr	r3, [pc, #80]	; (1648 <udc_process_setup+0x80>)
    15f6:	781b      	ldrb	r3, [r3, #0]
    15f8:	001a      	movs	r2, r3
    15fa:	2360      	movs	r3, #96	; 0x60
    15fc:	4013      	ands	r3, r2
    15fe:	d105      	bne.n	160c <udc_process_setup+0x44>
		if (udc_reqstd()) {
    1600:	4b12      	ldr	r3, [pc, #72]	; (164c <udc_process_setup+0x84>)
    1602:	4798      	blx	r3
    1604:	1e03      	subs	r3, r0, #0
    1606:	d001      	beq.n	160c <udc_process_setup+0x44>
			return true;
    1608:	2301      	movs	r3, #1
    160a:	e01a      	b.n	1642 <udc_process_setup+0x7a>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    160c:	4b0e      	ldr	r3, [pc, #56]	; (1648 <udc_process_setup+0x80>)
    160e:	781b      	ldrb	r3, [r3, #0]
    1610:	001a      	movs	r2, r3
    1612:	231f      	movs	r3, #31
    1614:	4013      	ands	r3, r2
    1616:	2b01      	cmp	r3, #1
    1618:	d105      	bne.n	1626 <udc_process_setup+0x5e>
		if (udc_req_iface()) {
    161a:	4b0d      	ldr	r3, [pc, #52]	; (1650 <udc_process_setup+0x88>)
    161c:	4798      	blx	r3
    161e:	1e03      	subs	r3, r0, #0
    1620:	d001      	beq.n	1626 <udc_process_setup+0x5e>
			return true;
    1622:	2301      	movs	r3, #1
    1624:	e00d      	b.n	1642 <udc_process_setup+0x7a>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1626:	4b08      	ldr	r3, [pc, #32]	; (1648 <udc_process_setup+0x80>)
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	001a      	movs	r2, r3
    162c:	231f      	movs	r3, #31
    162e:	4013      	ands	r3, r2
    1630:	2b02      	cmp	r3, #2
    1632:	d105      	bne.n	1640 <udc_process_setup+0x78>
		if (udc_req_ep()) {
    1634:	4b07      	ldr	r3, [pc, #28]	; (1654 <udc_process_setup+0x8c>)
    1636:	4798      	blx	r3
    1638:	1e03      	subs	r3, r0, #0
    163a:	d001      	beq.n	1640 <udc_process_setup+0x78>
			return true;
    163c:	2301      	movs	r3, #1
    163e:	e000      	b.n	1642 <udc_process_setup+0x7a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1640:	2300      	movs	r3, #0
#endif
}
    1642:	0018      	movs	r0, r3
    1644:	46bd      	mov	sp, r7
    1646:	bd80      	pop	{r7, pc}
    1648:	200028cc 	.word	0x200028cc
    164c:	00001325 	.word	0x00001325
    1650:	00001481 	.word	0x00001481
    1654:	00001529 	.word	0x00001529

00001658 <system_pinmux_get_group_from_gpio_pin>:
{
    1658:	b580      	push	{r7, lr}
    165a:	b084      	sub	sp, #16
    165c:	af00      	add	r7, sp, #0
    165e:	0002      	movs	r2, r0
    1660:	1dfb      	adds	r3, r7, #7
    1662:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1664:	230f      	movs	r3, #15
    1666:	18fb      	adds	r3, r7, r3
    1668:	1dfa      	adds	r2, r7, #7
    166a:	7812      	ldrb	r2, [r2, #0]
    166c:	09d2      	lsrs	r2, r2, #7
    166e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1670:	230e      	movs	r3, #14
    1672:	18fb      	adds	r3, r7, r3
    1674:	1dfa      	adds	r2, r7, #7
    1676:	7812      	ldrb	r2, [r2, #0]
    1678:	0952      	lsrs	r2, r2, #5
    167a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    167c:	4b0d      	ldr	r3, [pc, #52]	; (16b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    167e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1680:	230f      	movs	r3, #15
    1682:	18fb      	adds	r3, r7, r3
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	2b00      	cmp	r3, #0
    1688:	d10f      	bne.n	16aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    168a:	230f      	movs	r3, #15
    168c:	18fb      	adds	r3, r7, r3
    168e:	781b      	ldrb	r3, [r3, #0]
    1690:	009b      	lsls	r3, r3, #2
    1692:	2210      	movs	r2, #16
    1694:	4694      	mov	ip, r2
    1696:	44bc      	add	ip, r7
    1698:	4463      	add	r3, ip
    169a:	3b08      	subs	r3, #8
    169c:	681a      	ldr	r2, [r3, #0]
    169e:	230e      	movs	r3, #14
    16a0:	18fb      	adds	r3, r7, r3
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	01db      	lsls	r3, r3, #7
    16a6:	18d3      	adds	r3, r2, r3
    16a8:	e000      	b.n	16ac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    16aa:	2300      	movs	r3, #0
}
    16ac:	0018      	movs	r0, r3
    16ae:	46bd      	mov	sp, r7
    16b0:	b004      	add	sp, #16
    16b2:	bd80      	pop	{r7, pc}
    16b4:	41004400 	.word	0x41004400

000016b8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b082      	sub	sp, #8
    16bc:	af00      	add	r7, sp, #0
    16be:	0002      	movs	r2, r0
    16c0:	1dfb      	adds	r3, r7, #7
    16c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    16c4:	1dfb      	adds	r3, r7, #7
    16c6:	781b      	ldrb	r3, [r3, #0]
    16c8:	0018      	movs	r0, r3
    16ca:	4b03      	ldr	r3, [pc, #12]	; (16d8 <port_get_group_from_gpio_pin+0x20>)
    16cc:	4798      	blx	r3
    16ce:	0003      	movs	r3, r0
}
    16d0:	0018      	movs	r0, r3
    16d2:	46bd      	mov	sp, r7
    16d4:	b002      	add	sp, #8
    16d6:	bd80      	pop	{r7, pc}
    16d8:	00001659 	.word	0x00001659

000016dc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    16dc:	b580      	push	{r7, lr}
    16de:	b082      	sub	sp, #8
    16e0:	af00      	add	r7, sp, #0
    16e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	2200      	movs	r2, #0
    16e8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	2201      	movs	r2, #1
    16ee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	2200      	movs	r2, #0
    16f4:	709a      	strb	r2, [r3, #2]
}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	46bd      	mov	sp, r7
    16fa:	b002      	add	sp, #8
    16fc:	bd80      	pop	{r7, pc}
	...

00001700 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1700:	b580      	push	{r7, lr}
    1702:	b084      	sub	sp, #16
    1704:	af00      	add	r7, sp, #0
    1706:	0002      	movs	r2, r0
    1708:	1dfb      	adds	r3, r7, #7
    170a:	701a      	strb	r2, [r3, #0]
    170c:	1dbb      	adds	r3, r7, #6
    170e:	1c0a      	adds	r2, r1, #0
    1710:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1712:	1dfb      	adds	r3, r7, #7
    1714:	781b      	ldrb	r3, [r3, #0]
    1716:	0018      	movs	r0, r3
    1718:	4b0d      	ldr	r3, [pc, #52]	; (1750 <port_pin_set_output_level+0x50>)
    171a:	4798      	blx	r3
    171c:	0003      	movs	r3, r0
    171e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1720:	1dfb      	adds	r3, r7, #7
    1722:	781b      	ldrb	r3, [r3, #0]
    1724:	221f      	movs	r2, #31
    1726:	4013      	ands	r3, r2
    1728:	2201      	movs	r2, #1
    172a:	409a      	lsls	r2, r3
    172c:	0013      	movs	r3, r2
    172e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1730:	1dbb      	adds	r3, r7, #6
    1732:	781b      	ldrb	r3, [r3, #0]
    1734:	2b00      	cmp	r3, #0
    1736:	d003      	beq.n	1740 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1738:	68fb      	ldr	r3, [r7, #12]
    173a:	68ba      	ldr	r2, [r7, #8]
    173c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    173e:	e002      	b.n	1746 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	68ba      	ldr	r2, [r7, #8]
    1744:	615a      	str	r2, [r3, #20]
}
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	46bd      	mov	sp, r7
    174a:	b004      	add	sp, #16
    174c:	bd80      	pop	{r7, pc}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	000016b9 	.word	0x000016b9

00001754 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	b082      	sub	sp, #8
    1758:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    175a:	1d3b      	adds	r3, r7, #4
    175c:	0018      	movs	r0, r3
    175e:	4b0e      	ldr	r3, [pc, #56]	; (1798 <system_board_init+0x44>)
    1760:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1762:	1d3b      	adds	r3, r7, #4
    1764:	2201      	movs	r2, #1
    1766:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1768:	1d3b      	adds	r3, r7, #4
    176a:	0019      	movs	r1, r3
    176c:	203e      	movs	r0, #62	; 0x3e
    176e:	4b0b      	ldr	r3, [pc, #44]	; (179c <system_board_init+0x48>)
    1770:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    1772:	2101      	movs	r1, #1
    1774:	203e      	movs	r0, #62	; 0x3e
    1776:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <system_board_init+0x4c>)
    1778:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    177a:	1d3b      	adds	r3, r7, #4
    177c:	2200      	movs	r2, #0
    177e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1780:	1d3b      	adds	r3, r7, #4
    1782:	2201      	movs	r2, #1
    1784:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1786:	1d3b      	adds	r3, r7, #4
    1788:	0019      	movs	r1, r3
    178a:	200f      	movs	r0, #15
    178c:	4b03      	ldr	r3, [pc, #12]	; (179c <system_board_init+0x48>)
    178e:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1790:	46c0      	nop			; (mov r8, r8)
    1792:	46bd      	mov	sp, r7
    1794:	b002      	add	sp, #8
    1796:	bd80      	pop	{r7, pc}
    1798:	000016dd 	.word	0x000016dd
    179c:	000001d1 	.word	0x000001d1
    17a0:	00001701 	.word	0x00001701

000017a4 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	b084      	sub	sp, #16
    17a8:	af00      	add	r7, sp, #0
    17aa:	60f8      	str	r0, [r7, #12]
    17ac:	60b9      	str	r1, [r7, #8]
    17ae:	1dfb      	adds	r3, r7, #7
    17b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    17b2:	1dfb      	adds	r3, r7, #7
    17b4:	781a      	ldrb	r2, [r3, #0]
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	3202      	adds	r2, #2
    17ba:	0092      	lsls	r2, r2, #2
    17bc:	68b9      	ldr	r1, [r7, #8]
    17be:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    17c0:	1dfb      	adds	r3, r7, #7
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	2b02      	cmp	r3, #2
    17c6:	d107      	bne.n	17d8 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    17c8:	68fb      	ldr	r3, [r7, #12]
    17ca:	7e1b      	ldrb	r3, [r3, #24]
    17cc:	2210      	movs	r2, #16
    17ce:	4313      	orrs	r3, r2
    17d0:	b2da      	uxtb	r2, r3
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	761a      	strb	r2, [r3, #24]
    17d6:	e019      	b.n	180c <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    17d8:	1dfb      	adds	r3, r7, #7
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	2b03      	cmp	r3, #3
    17de:	d107      	bne.n	17f0 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	7e1b      	ldrb	r3, [r3, #24]
    17e4:	2220      	movs	r2, #32
    17e6:	4313      	orrs	r3, r2
    17e8:	b2da      	uxtb	r2, r3
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	761a      	strb	r2, [r3, #24]
    17ee:	e00d      	b.n	180c <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	7e1b      	ldrb	r3, [r3, #24]
    17f4:	b25a      	sxtb	r2, r3
    17f6:	1dfb      	adds	r3, r7, #7
    17f8:	781b      	ldrb	r3, [r3, #0]
    17fa:	2101      	movs	r1, #1
    17fc:	4099      	lsls	r1, r3
    17fe:	000b      	movs	r3, r1
    1800:	b25b      	sxtb	r3, r3
    1802:	4313      	orrs	r3, r2
    1804:	b25b      	sxtb	r3, r3
    1806:	b2da      	uxtb	r2, r3
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    180c:	2300      	movs	r3, #0
}
    180e:	0018      	movs	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	b004      	add	sp, #16
    1814:	bd80      	pop	{r7, pc}
	...

00001818 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1818:	b580      	push	{r7, lr}
    181a:	af00      	add	r7, sp, #0
    181c:	2000      	movs	r0, #0
    181e:	4b02      	ldr	r3, [pc, #8]	; (1828 <TC3_Handler+0x10>)
    1820:	4798      	blx	r3
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	46bd      	mov	sp, r7
    1826:	bd80      	pop	{r7, pc}
    1828:	0000187d 	.word	0x0000187d

0000182c <TC4_Handler>:
    182c:	b580      	push	{r7, lr}
    182e:	af00      	add	r7, sp, #0
    1830:	2001      	movs	r0, #1
    1832:	4b02      	ldr	r3, [pc, #8]	; (183c <TC4_Handler+0x10>)
    1834:	4798      	blx	r3
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	46bd      	mov	sp, r7
    183a:	bd80      	pop	{r7, pc}
    183c:	0000187d 	.word	0x0000187d

00001840 <TC5_Handler>:
    1840:	b580      	push	{r7, lr}
    1842:	af00      	add	r7, sp, #0
    1844:	2002      	movs	r0, #2
    1846:	4b02      	ldr	r3, [pc, #8]	; (1850 <TC5_Handler+0x10>)
    1848:	4798      	blx	r3
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	46bd      	mov	sp, r7
    184e:	bd80      	pop	{r7, pc}
    1850:	0000187d 	.word	0x0000187d

00001854 <TC6_Handler>:
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0
    1858:	2003      	movs	r0, #3
    185a:	4b02      	ldr	r3, [pc, #8]	; (1864 <TC6_Handler+0x10>)
    185c:	4798      	blx	r3
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	46bd      	mov	sp, r7
    1862:	bd80      	pop	{r7, pc}
    1864:	0000187d 	.word	0x0000187d

00001868 <TC7_Handler>:
    1868:	b580      	push	{r7, lr}
    186a:	af00      	add	r7, sp, #0
    186c:	2004      	movs	r0, #4
    186e:	4b02      	ldr	r3, [pc, #8]	; (1878 <TC7_Handler+0x10>)
    1870:	4798      	blx	r3
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	46bd      	mov	sp, r7
    1876:	bd80      	pop	{r7, pc}
    1878:	0000187d 	.word	0x0000187d

0000187c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    187c:	b580      	push	{r7, lr}
    187e:	b084      	sub	sp, #16
    1880:	af00      	add	r7, sp, #0
    1882:	0002      	movs	r2, r0
    1884:	1dfb      	adds	r3, r7, #7
    1886:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1888:	1dfb      	adds	r3, r7, #7
    188a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    188c:	4b28      	ldr	r3, [pc, #160]	; (1930 <_tc_interrupt_handler+0xb4>)
    188e:	0092      	lsls	r2, r2, #2
    1890:	58d3      	ldr	r3, [r2, r3]
    1892:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1894:	68fb      	ldr	r3, [r7, #12]
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	7b9b      	ldrb	r3, [r3, #14]
    189a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    189c:	68fa      	ldr	r2, [r7, #12]
    189e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    18a0:	4013      	ands	r3, r2
    18a2:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    18a4:	68fb      	ldr	r3, [r7, #12]
    18a6:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    18a8:	230b      	movs	r3, #11
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	400a      	ands	r2, r1
    18ae:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    18b0:	230b      	movs	r3, #11
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	2201      	movs	r2, #1
    18b8:	4013      	ands	r3, r2
    18ba:	d008      	beq.n	18ce <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    18bc:	68fb      	ldr	r3, [r7, #12]
    18be:	689b      	ldr	r3, [r3, #8]
    18c0:	68fa      	ldr	r2, [r7, #12]
    18c2:	0010      	movs	r0, r2
    18c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    18c6:	68fb      	ldr	r3, [r7, #12]
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	2201      	movs	r2, #1
    18cc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    18ce:	230b      	movs	r3, #11
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	2202      	movs	r2, #2
    18d6:	4013      	ands	r3, r2
    18d8:	d008      	beq.n	18ec <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	68db      	ldr	r3, [r3, #12]
    18de:	68fa      	ldr	r2, [r7, #12]
    18e0:	0010      	movs	r0, r2
    18e2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	681b      	ldr	r3, [r3, #0]
    18e8:	2202      	movs	r2, #2
    18ea:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    18ec:	230b      	movs	r3, #11
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2210      	movs	r2, #16
    18f4:	4013      	ands	r3, r2
    18f6:	d008      	beq.n	190a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    18f8:	68fb      	ldr	r3, [r7, #12]
    18fa:	691b      	ldr	r3, [r3, #16]
    18fc:	68fa      	ldr	r2, [r7, #12]
    18fe:	0010      	movs	r0, r2
    1900:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1902:	68fb      	ldr	r3, [r7, #12]
    1904:	681b      	ldr	r3, [r3, #0]
    1906:	2210      	movs	r2, #16
    1908:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    190a:	230b      	movs	r3, #11
    190c:	18fb      	adds	r3, r7, r3
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	2220      	movs	r2, #32
    1912:	4013      	ands	r3, r2
    1914:	d008      	beq.n	1928 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1916:	68fb      	ldr	r3, [r7, #12]
    1918:	695b      	ldr	r3, [r3, #20]
    191a:	68fa      	ldr	r2, [r7, #12]
    191c:	0010      	movs	r0, r2
    191e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1920:	68fb      	ldr	r3, [r7, #12]
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	2220      	movs	r2, #32
    1926:	739a      	strb	r2, [r3, #14]
	}
}
    1928:	46c0      	nop			; (mov r8, r8)
    192a:	46bd      	mov	sp, r7
    192c:	b004      	add	sp, #16
    192e:	bd80      	pop	{r7, pc}
    1930:	200026d0 	.word	0x200026d0

00001934 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1934:	b580      	push	{r7, lr}
    1936:	b082      	sub	sp, #8
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	2200      	movs	r2, #0
    1940:	701a      	strb	r2, [r3, #0]
}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	46bd      	mov	sp, r7
    1946:	b002      	add	sp, #8
    1948:	bd80      	pop	{r7, pc}
	...

0000194c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    194c:	b580      	push	{r7, lr}
    194e:	b082      	sub	sp, #8
    1950:	af00      	add	r7, sp, #0
    1952:	0002      	movs	r2, r0
    1954:	6039      	str	r1, [r7, #0]
    1956:	1dfb      	adds	r3, r7, #7
    1958:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    195a:	1dfb      	adds	r3, r7, #7
    195c:	781b      	ldrb	r3, [r3, #0]
    195e:	2b01      	cmp	r3, #1
    1960:	d00a      	beq.n	1978 <system_apb_clock_set_mask+0x2c>
    1962:	2b02      	cmp	r3, #2
    1964:	d00f      	beq.n	1986 <system_apb_clock_set_mask+0x3a>
    1966:	2b00      	cmp	r3, #0
    1968:	d114      	bne.n	1994 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <system_apb_clock_set_mask+0x58>)
    196c:	4a0d      	ldr	r2, [pc, #52]	; (19a4 <system_apb_clock_set_mask+0x58>)
    196e:	6991      	ldr	r1, [r2, #24]
    1970:	683a      	ldr	r2, [r7, #0]
    1972:	430a      	orrs	r2, r1
    1974:	619a      	str	r2, [r3, #24]
			break;
    1976:	e00f      	b.n	1998 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1978:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <system_apb_clock_set_mask+0x58>)
    197a:	4a0a      	ldr	r2, [pc, #40]	; (19a4 <system_apb_clock_set_mask+0x58>)
    197c:	69d1      	ldr	r1, [r2, #28]
    197e:	683a      	ldr	r2, [r7, #0]
    1980:	430a      	orrs	r2, r1
    1982:	61da      	str	r2, [r3, #28]
			break;
    1984:	e008      	b.n	1998 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1986:	4b07      	ldr	r3, [pc, #28]	; (19a4 <system_apb_clock_set_mask+0x58>)
    1988:	4a06      	ldr	r2, [pc, #24]	; (19a4 <system_apb_clock_set_mask+0x58>)
    198a:	6a11      	ldr	r1, [r2, #32]
    198c:	683a      	ldr	r2, [r7, #0]
    198e:	430a      	orrs	r2, r1
    1990:	621a      	str	r2, [r3, #32]
			break;
    1992:	e001      	b.n	1998 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1994:	2317      	movs	r3, #23
    1996:	e000      	b.n	199a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1998:	2300      	movs	r3, #0
}
    199a:	0018      	movs	r0, r3
    199c:	46bd      	mov	sp, r7
    199e:	b002      	add	sp, #8
    19a0:	bd80      	pop	{r7, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	40000400 	.word	0x40000400

000019a8 <system_pinmux_get_config_defaults>:
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	2280      	movs	r2, #128	; 0x80
    19b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	2200      	movs	r2, #0
    19ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	2201      	movs	r2, #1
    19c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	2200      	movs	r2, #0
    19c6:	70da      	strb	r2, [r3, #3]
}
    19c8:	46c0      	nop			; (mov r8, r8)
    19ca:	46bd      	mov	sp, r7
    19cc:	b002      	add	sp, #8
    19ce:	bd80      	pop	{r7, pc}

000019d0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b084      	sub	sp, #16
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	7bdb      	ldrb	r3, [r3, #15]
    19e2:	b2db      	uxtb	r3, r3
    19e4:	001a      	movs	r2, r3
    19e6:	2380      	movs	r3, #128	; 0x80
    19e8:	4013      	ands	r3, r2
    19ea:	1e5a      	subs	r2, r3, #1
    19ec:	4193      	sbcs	r3, r2
    19ee:	b2db      	uxtb	r3, r3
#endif
}
    19f0:	0018      	movs	r0, r3
    19f2:	46bd      	mov	sp, r7
    19f4:	b004      	add	sp, #16
    19f6:	bd80      	pop	{r7, pc}

000019f8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    19f8:	b590      	push	{r4, r7, lr}
    19fa:	b089      	sub	sp, #36	; 0x24
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1a00:	2308      	movs	r3, #8
    1a02:	18fb      	adds	r3, r7, r3
    1a04:	4a0e      	ldr	r2, [pc, #56]	; (1a40 <_tc_get_inst_index+0x48>)
    1a06:	ca13      	ldmia	r2!, {r0, r1, r4}
    1a08:	c313      	stmia	r3!, {r0, r1, r4}
    1a0a:	ca03      	ldmia	r2!, {r0, r1}
    1a0c:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1a0e:	2300      	movs	r3, #0
    1a10:	61fb      	str	r3, [r7, #28]
    1a12:	e00d      	b.n	1a30 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
    1a14:	2308      	movs	r3, #8
    1a16:	18fb      	adds	r3, r7, r3
    1a18:	69fa      	ldr	r2, [r7, #28]
    1a1a:	0092      	lsls	r2, r2, #2
    1a1c:	58d2      	ldr	r2, [r2, r3]
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	429a      	cmp	r2, r3
    1a22:	d102      	bne.n	1a2a <_tc_get_inst_index+0x32>
			return i;
    1a24:	69fb      	ldr	r3, [r7, #28]
    1a26:	b2db      	uxtb	r3, r3
    1a28:	e006      	b.n	1a38 <_tc_get_inst_index+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1a2a:	69fb      	ldr	r3, [r7, #28]
    1a2c:	3301      	adds	r3, #1
    1a2e:	61fb      	str	r3, [r7, #28]
    1a30:	69fb      	ldr	r3, [r7, #28]
    1a32:	2b04      	cmp	r3, #4
    1a34:	d9ee      	bls.n	1a14 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1a36:	2300      	movs	r3, #0
}
    1a38:	0018      	movs	r0, r3
    1a3a:	46bd      	mov	sp, r7
    1a3c:	b009      	add	sp, #36	; 0x24
    1a3e:	bd90      	pop	{r4, r7, pc}
    1a40:	0001f8b8 	.word	0x0001f8b8

00001a44 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1a44:	b590      	push	{r4, r7, lr}
    1a46:	b08d      	sub	sp, #52	; 0x34
    1a48:	af00      	add	r7, sp, #0
    1a4a:	60f8      	str	r0, [r7, #12]
    1a4c:	60b9      	str	r1, [r7, #8]
    1a4e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    1a50:	232e      	movs	r3, #46	; 0x2e
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	2200      	movs	r2, #0
    1a56:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1a58:	232d      	movs	r3, #45	; 0x2d
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	2200      	movs	r2, #0
    1a5e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    1a60:	232c      	movs	r3, #44	; 0x2c
    1a62:	18fb      	adds	r3, r7, r3
    1a64:	2200      	movs	r2, #0
    1a66:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1a68:	2329      	movs	r3, #41	; 0x29
    1a6a:	18fc      	adds	r4, r7, r3
    1a6c:	68bb      	ldr	r3, [r7, #8]
    1a6e:	0018      	movs	r0, r3
    1a70:	4bbd      	ldr	r3, [pc, #756]	; (1d68 <tc_init+0x324>)
    1a72:	4798      	blx	r3
    1a74:	0003      	movs	r3, r0
    1a76:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1a78:	2324      	movs	r3, #36	; 0x24
    1a7a:	18fb      	adds	r3, r7, r3
    1a7c:	4abb      	ldr	r2, [pc, #748]	; (1d6c <tc_init+0x328>)
    1a7e:	6811      	ldr	r1, [r2, #0]
    1a80:	6019      	str	r1, [r3, #0]
    1a82:	7912      	ldrb	r2, [r2, #4]
    1a84:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1a86:	2318      	movs	r3, #24
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	4ab9      	ldr	r2, [pc, #740]	; (1d70 <tc_init+0x32c>)
    1a8c:	ca03      	ldmia	r2!, {r0, r1}
    1a8e:	c303      	stmia	r3!, {r0, r1}
    1a90:	8812      	ldrh	r2, [r2, #0]
    1a92:	801a      	strh	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    1a94:	232b      	movs	r3, #43	; 0x2b
    1a96:	18fb      	adds	r3, r7, r3
    1a98:	2200      	movs	r2, #0
    1a9a:	701a      	strb	r2, [r3, #0]
    1a9c:	e00e      	b.n	1abc <tc_init+0x78>
		module_inst->callback[i]        = NULL;
    1a9e:	232b      	movs	r3, #43	; 0x2b
    1aa0:	18fb      	adds	r3, r7, r3
    1aa2:	781a      	ldrb	r2, [r3, #0]
    1aa4:	68fb      	ldr	r3, [r7, #12]
    1aa6:	3202      	adds	r2, #2
    1aa8:	0092      	lsls	r2, r2, #2
    1aaa:	2100      	movs	r1, #0
    1aac:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    1aae:	232b      	movs	r3, #43	; 0x2b
    1ab0:	18fb      	adds	r3, r7, r3
    1ab2:	781a      	ldrb	r2, [r3, #0]
    1ab4:	232b      	movs	r3, #43	; 0x2b
    1ab6:	18fb      	adds	r3, r7, r3
    1ab8:	3201      	adds	r2, #1
    1aba:	701a      	strb	r2, [r3, #0]
    1abc:	232b      	movs	r3, #43	; 0x2b
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	2b03      	cmp	r3, #3
    1ac4:	d9eb      	bls.n	1a9e <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
    1ac6:	68fb      	ldr	r3, [r7, #12]
    1ac8:	2200      	movs	r2, #0
    1aca:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    1acc:	68fb      	ldr	r3, [r7, #12]
    1ace:	2200      	movs	r2, #0
    1ad0:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1ad2:	2329      	movs	r3, #41	; 0x29
    1ad4:	18fb      	adds	r3, r7, r3
    1ad6:	781a      	ldrb	r2, [r3, #0]
    1ad8:	4ba6      	ldr	r3, [pc, #664]	; (1d74 <tc_init+0x330>)
    1ada:	0092      	lsls	r2, r2, #2
    1adc:	68f9      	ldr	r1, [r7, #12]
    1ade:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1ae0:	68fb      	ldr	r3, [r7, #12]
    1ae2:	68ba      	ldr	r2, [r7, #8]
    1ae4:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	789b      	ldrb	r3, [r3, #2]
    1aea:	2b08      	cmp	r3, #8
    1aec:	d108      	bne.n	1b00 <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    1aee:	2329      	movs	r3, #41	; 0x29
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	3303      	adds	r3, #3
    1af6:	2201      	movs	r2, #1
    1af8:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1afa:	d001      	beq.n	1b00 <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1afc:	2317      	movs	r3, #23
    1afe:	e1c2      	b.n	1e86 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	789a      	ldrb	r2, [r3, #2]
    1b04:	68fb      	ldr	r3, [r7, #12]
    1b06:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1b08:	68bb      	ldr	r3, [r7, #8]
    1b0a:	881b      	ldrh	r3, [r3, #0]
    1b0c:	b29b      	uxth	r3, r3
    1b0e:	001a      	movs	r2, r3
    1b10:	2301      	movs	r3, #1
    1b12:	4013      	ands	r3, r2
    1b14:	d001      	beq.n	1b1a <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1b16:	2305      	movs	r3, #5
    1b18:	e1b5      	b.n	1e86 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1b1a:	68bb      	ldr	r3, [r7, #8]
    1b1c:	7bdb      	ldrb	r3, [r3, #15]
    1b1e:	b2db      	uxtb	r3, r3
    1b20:	001a      	movs	r2, r3
    1b22:	2310      	movs	r3, #16
    1b24:	4013      	ands	r3, r2
    1b26:	d001      	beq.n	1b2c <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1b28:	231c      	movs	r3, #28
    1b2a:	e1ac      	b.n	1e86 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1b2c:	68bb      	ldr	r3, [r7, #8]
    1b2e:	881b      	ldrh	r3, [r3, #0]
    1b30:	b29b      	uxth	r3, r3
    1b32:	001a      	movs	r2, r3
    1b34:	2302      	movs	r3, #2
    1b36:	4013      	ands	r3, r2
    1b38:	d001      	beq.n	1b3e <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    1b3a:	231c      	movs	r3, #28
    1b3c:	e1a3      	b.n	1e86 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	7c1b      	ldrb	r3, [r3, #16]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d017      	beq.n	1b76 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
    1b46:	2314      	movs	r3, #20
    1b48:	18fb      	adds	r3, r7, r3
    1b4a:	0018      	movs	r0, r3
    1b4c:	4b8a      	ldr	r3, [pc, #552]	; (1d78 <tc_init+0x334>)
    1b4e:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1b50:	687b      	ldr	r3, [r7, #4]
    1b52:	699b      	ldr	r3, [r3, #24]
    1b54:	b2da      	uxtb	r2, r3
    1b56:	2314      	movs	r3, #20
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b5c:	2314      	movs	r3, #20
    1b5e:	18fb      	adds	r3, r7, r3
    1b60:	2201      	movs	r2, #1
    1b62:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    1b68:	b2db      	uxtb	r3, r3
    1b6a:	2214      	movs	r2, #20
    1b6c:	18ba      	adds	r2, r7, r2
    1b6e:	0011      	movs	r1, r2
    1b70:	0018      	movs	r0, r3
    1b72:	4b82      	ldr	r3, [pc, #520]	; (1d7c <tc_init+0x338>)
    1b74:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	7f1b      	ldrb	r3, [r3, #28]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d017      	beq.n	1bae <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
    1b7e:	2314      	movs	r3, #20
    1b80:	18fb      	adds	r3, r7, r3
    1b82:	0018      	movs	r0, r3
    1b84:	4b7c      	ldr	r3, [pc, #496]	; (1d78 <tc_init+0x334>)
    1b86:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b8c:	b2da      	uxtb	r2, r3
    1b8e:	2314      	movs	r3, #20
    1b90:	18fb      	adds	r3, r7, r3
    1b92:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b94:	2314      	movs	r3, #20
    1b96:	18fb      	adds	r3, r7, r3
    1b98:	2201      	movs	r2, #1
    1b9a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    1ba0:	b2db      	uxtb	r3, r3
    1ba2:	2214      	movs	r2, #20
    1ba4:	18ba      	adds	r2, r7, r2
    1ba6:	0011      	movs	r1, r2
    1ba8:	0018      	movs	r0, r3
    1baa:	4b74      	ldr	r3, [pc, #464]	; (1d7c <tc_init+0x338>)
    1bac:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1bae:	2329      	movs	r3, #41	; 0x29
    1bb0:	18fb      	adds	r3, r7, r3
    1bb2:	781a      	ldrb	r2, [r3, #0]
    1bb4:	2318      	movs	r3, #24
    1bb6:	18fb      	adds	r3, r7, r3
    1bb8:	0052      	lsls	r2, r2, #1
    1bba:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1bbc:	0019      	movs	r1, r3
    1bbe:	2002      	movs	r0, #2
    1bc0:	4b6f      	ldr	r3, [pc, #444]	; (1d80 <tc_init+0x33c>)
    1bc2:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1bc4:	687b      	ldr	r3, [r7, #4]
    1bc6:	789b      	ldrb	r3, [r3, #2]
    1bc8:	2b08      	cmp	r3, #8
    1bca:	d10b      	bne.n	1be4 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1bcc:	2329      	movs	r3, #41	; 0x29
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	1c5a      	adds	r2, r3, #1
    1bd4:	2318      	movs	r3, #24
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	0052      	lsls	r2, r2, #1
    1bda:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1bdc:	0019      	movs	r1, r3
    1bde:	2002      	movs	r0, #2
    1be0:	4b67      	ldr	r3, [pc, #412]	; (1d80 <tc_init+0x33c>)
    1be2:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    1be4:	2310      	movs	r3, #16
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	0018      	movs	r0, r3
    1bea:	4b66      	ldr	r3, [pc, #408]	; (1d84 <tc_init+0x340>)
    1bec:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	781a      	ldrb	r2, [r3, #0]
    1bf2:	2310      	movs	r3, #16
    1bf4:	18fb      	adds	r3, r7, r3
    1bf6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1bf8:	2329      	movs	r3, #41	; 0x29
    1bfa:	18fb      	adds	r3, r7, r3
    1bfc:	781b      	ldrb	r3, [r3, #0]
    1bfe:	2224      	movs	r2, #36	; 0x24
    1c00:	18ba      	adds	r2, r7, r2
    1c02:	5cd3      	ldrb	r3, [r2, r3]
    1c04:	2210      	movs	r2, #16
    1c06:	18ba      	adds	r2, r7, r2
    1c08:	0011      	movs	r1, r2
    1c0a:	0018      	movs	r0, r3
    1c0c:	4b5e      	ldr	r3, [pc, #376]	; (1d88 <tc_init+0x344>)
    1c0e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1c10:	2329      	movs	r3, #41	; 0x29
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	2224      	movs	r2, #36	; 0x24
    1c18:	18ba      	adds	r2, r7, r2
    1c1a:	5cd3      	ldrb	r3, [r2, r3]
    1c1c:	0018      	movs	r0, r3
    1c1e:	4b5b      	ldr	r3, [pc, #364]	; (1d8c <tc_init+0x348>)
    1c20:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    1c22:	687b      	ldr	r3, [r7, #4]
    1c24:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	799b      	ldrb	r3, [r3, #6]
    1c2a:	4313      	orrs	r3, r2
    1c2c:	b2db      	uxtb	r3, r3
    1c2e:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    1c34:	4313      	orrs	r3, r2
    1c36:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    1c3c:	232e      	movs	r3, #46	; 0x2e
    1c3e:	18fb      	adds	r3, r7, r3
    1c40:	430a      	orrs	r2, r1
    1c42:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	785b      	ldrb	r3, [r3, #1]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d008      	beq.n	1c5e <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1c4c:	232e      	movs	r3, #46	; 0x2e
    1c4e:	18fb      	adds	r3, r7, r3
    1c50:	222e      	movs	r2, #46	; 0x2e
    1c52:	18ba      	adds	r2, r7, r2
    1c54:	8812      	ldrh	r2, [r2, #0]
    1c56:	2180      	movs	r1, #128	; 0x80
    1c58:	0109      	lsls	r1, r1, #4
    1c5a:	430a      	orrs	r2, r1
    1c5c:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	68fb      	ldr	r3, [r7, #12]
    1c62:	0018      	movs	r0, r3
    1c64:	4b4a      	ldr	r3, [pc, #296]	; (1d90 <tc_init+0x34c>)
    1c66:	4798      	blx	r3
    1c68:	1e03      	subs	r3, r0, #0
    1c6a:	d1f9      	bne.n	1c60 <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1c6c:	68bb      	ldr	r3, [r7, #8]
    1c6e:	222e      	movs	r2, #46	; 0x2e
    1c70:	18ba      	adds	r2, r7, r2
    1c72:	8812      	ldrh	r2, [r2, #0]
    1c74:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	7b5b      	ldrb	r3, [r3, #13]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d003      	beq.n	1c86 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1c7e:	232d      	movs	r3, #45	; 0x2d
    1c80:	18fb      	adds	r3, r7, r3
    1c82:	2204      	movs	r2, #4
    1c84:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	7b9b      	ldrb	r3, [r3, #14]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d007      	beq.n	1c9e <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1c8e:	232d      	movs	r3, #45	; 0x2d
    1c90:	18fb      	adds	r3, r7, r3
    1c92:	222d      	movs	r2, #45	; 0x2d
    1c94:	18ba      	adds	r2, r7, r2
    1c96:	7812      	ldrb	r2, [r2, #0]
    1c98:	2101      	movs	r1, #1
    1c9a:	430a      	orrs	r2, r1
    1c9c:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	68fb      	ldr	r3, [r7, #12]
    1ca2:	0018      	movs	r0, r3
    1ca4:	4b3a      	ldr	r3, [pc, #232]	; (1d90 <tc_init+0x34c>)
    1ca6:	4798      	blx	r3
    1ca8:	1e03      	subs	r3, r0, #0
    1caa:	d1f9      	bne.n	1ca0 <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1cac:	68bb      	ldr	r3, [r7, #8]
    1cae:	22ff      	movs	r2, #255	; 0xff
    1cb0:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1cb2:	232d      	movs	r3, #45	; 0x2d
    1cb4:	18fb      	adds	r3, r7, r3
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d00b      	beq.n	1cd4 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
    1cbc:	46c0      	nop			; (mov r8, r8)
    1cbe:	68fb      	ldr	r3, [r7, #12]
    1cc0:	0018      	movs	r0, r3
    1cc2:	4b33      	ldr	r3, [pc, #204]	; (1d90 <tc_init+0x34c>)
    1cc4:	4798      	blx	r3
    1cc6:	1e03      	subs	r3, r0, #0
    1cc8:	d1f9      	bne.n	1cbe <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1cca:	68bb      	ldr	r3, [r7, #8]
    1ccc:	222d      	movs	r2, #45	; 0x2d
    1cce:	18ba      	adds	r2, r7, r2
    1cd0:	7812      	ldrb	r2, [r2, #0]
    1cd2:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1cd4:	232c      	movs	r3, #44	; 0x2c
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	687a      	ldr	r2, [r7, #4]
    1cda:	7a92      	ldrb	r2, [r2, #10]
    1cdc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1cde:	232a      	movs	r3, #42	; 0x2a
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	2200      	movs	r2, #0
    1ce4:	701a      	strb	r2, [r3, #0]
    1ce6:	e01c      	b.n	1d22 <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
    1ce8:	232a      	movs	r3, #42	; 0x2a
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	781b      	ldrb	r3, [r3, #0]
    1cee:	687a      	ldr	r2, [r7, #4]
    1cf0:	18d3      	adds	r3, r2, r3
    1cf2:	7adb      	ldrb	r3, [r3, #11]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d00d      	beq.n	1d14 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1cf8:	232a      	movs	r3, #42	; 0x2a
    1cfa:	18fb      	adds	r3, r7, r3
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	2210      	movs	r2, #16
    1d00:	409a      	lsls	r2, r3
    1d02:	0013      	movs	r3, r2
    1d04:	b2d9      	uxtb	r1, r3
    1d06:	232c      	movs	r3, #44	; 0x2c
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	222c      	movs	r2, #44	; 0x2c
    1d0c:	18ba      	adds	r2, r7, r2
    1d0e:	7812      	ldrb	r2, [r2, #0]
    1d10:	430a      	orrs	r2, r1
    1d12:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1d14:	232a      	movs	r3, #42	; 0x2a
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	781a      	ldrb	r2, [r3, #0]
    1d1a:	232a      	movs	r3, #42	; 0x2a
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	3201      	adds	r2, #1
    1d20:	701a      	strb	r2, [r3, #0]
    1d22:	232a      	movs	r3, #42	; 0x2a
    1d24:	18fb      	adds	r3, r7, r3
    1d26:	781b      	ldrb	r3, [r3, #0]
    1d28:	2b01      	cmp	r3, #1
    1d2a:	d9dd      	bls.n	1ce8 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d2c:	46c0      	nop			; (mov r8, r8)
    1d2e:	68fb      	ldr	r3, [r7, #12]
    1d30:	0018      	movs	r0, r3
    1d32:	4b17      	ldr	r3, [pc, #92]	; (1d90 <tc_init+0x34c>)
    1d34:	4798      	blx	r3
    1d36:	1e03      	subs	r3, r0, #0
    1d38:	d1f9      	bne.n	1d2e <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1d3a:	68bb      	ldr	r3, [r7, #8]
    1d3c:	222c      	movs	r2, #44	; 0x2c
    1d3e:	18ba      	adds	r2, r7, r2
    1d40:	7812      	ldrb	r2, [r2, #0]
    1d42:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d44:	46c0      	nop			; (mov r8, r8)
    1d46:	68fb      	ldr	r3, [r7, #12]
    1d48:	0018      	movs	r0, r3
    1d4a:	4b11      	ldr	r3, [pc, #68]	; (1d90 <tc_init+0x34c>)
    1d4c:	4798      	blx	r3
    1d4e:	1e03      	subs	r3, r0, #0
    1d50:	d1f9      	bne.n	1d46 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1d52:	68fb      	ldr	r3, [r7, #12]
    1d54:	791b      	ldrb	r3, [r3, #4]
    1d56:	2b04      	cmp	r3, #4
    1d58:	d01c      	beq.n	1d94 <tc_init+0x350>
    1d5a:	2b08      	cmp	r3, #8
    1d5c:	d100      	bne.n	1d60 <tc_init+0x31c>
    1d5e:	e06e      	b.n	1e3e <tc_init+0x3fa>
    1d60:	2b00      	cmp	r3, #0
    1d62:	d049      	beq.n	1df8 <tc_init+0x3b4>
    1d64:	e08e      	b.n	1e84 <tc_init+0x440>
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	000019f9 	.word	0x000019f9
    1d6c:	0001f8cc 	.word	0x0001f8cc
    1d70:	0001f8d4 	.word	0x0001f8d4
    1d74:	200026d0 	.word	0x200026d0
    1d78:	000019a9 	.word	0x000019a9
    1d7c:	000003a1 	.word	0x000003a1
    1d80:	0000194d 	.word	0x0000194d
    1d84:	00001935 	.word	0x00001935
    1d88:	0000f259 	.word	0x0000f259
    1d8c:	0000f29d 	.word	0x0000f29d
    1d90:	000019d1 	.word	0x000019d1
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1d94:	46c0      	nop			; (mov r8, r8)
    1d96:	68fb      	ldr	r3, [r7, #12]
    1d98:	0018      	movs	r0, r3
    1d9a:	4b3d      	ldr	r3, [pc, #244]	; (1e90 <tc_init+0x44c>)
    1d9c:	4798      	blx	r3
    1d9e:	1e03      	subs	r3, r0, #0
    1da0:	d1f9      	bne.n	1d96 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	2228      	movs	r2, #40	; 0x28
    1da6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    1da8:	68bb      	ldr	r3, [r7, #8]
    1daa:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    1dac:	46c0      	nop			; (mov r8, r8)
    1dae:	68fb      	ldr	r3, [r7, #12]
    1db0:	0018      	movs	r0, r3
    1db2:	4b37      	ldr	r3, [pc, #220]	; (1e90 <tc_init+0x44c>)
    1db4:	4798      	blx	r3
    1db6:	1e03      	subs	r3, r0, #0
    1db8:	d1f9      	bne.n	1dae <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	2229      	movs	r2, #41	; 0x29
    1dbe:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    1dc0:	68bb      	ldr	r3, [r7, #8]
    1dc2:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    1dc4:	46c0      	nop			; (mov r8, r8)
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	0018      	movs	r0, r3
    1dca:	4b31      	ldr	r3, [pc, #196]	; (1e90 <tc_init+0x44c>)
    1dcc:	4798      	blx	r3
    1dce:	1e03      	subs	r3, r0, #0
    1dd0:	d1f9      	bne.n	1dc6 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	222a      	movs	r2, #42	; 0x2a
    1dd6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    1dd8:	68bb      	ldr	r3, [r7, #8]
    1dda:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1ddc:	46c0      	nop			; (mov r8, r8)
    1dde:	68fb      	ldr	r3, [r7, #12]
    1de0:	0018      	movs	r0, r3
    1de2:	4b2b      	ldr	r3, [pc, #172]	; (1e90 <tc_init+0x44c>)
    1de4:	4798      	blx	r3
    1de6:	1e03      	subs	r3, r0, #0
    1de8:	d1f9      	bne.n	1dde <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	222b      	movs	r2, #43	; 0x2b
    1dee:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    1df0:	68bb      	ldr	r3, [r7, #8]
    1df2:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    1df4:	2300      	movs	r3, #0
    1df6:	e046      	b.n	1e86 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1df8:	46c0      	nop			; (mov r8, r8)
    1dfa:	68fb      	ldr	r3, [r7, #12]
    1dfc:	0018      	movs	r0, r3
    1dfe:	4b24      	ldr	r3, [pc, #144]	; (1e90 <tc_init+0x44c>)
    1e00:	4798      	blx	r3
    1e02:	1e03      	subs	r3, r0, #0
    1e04:	d1f9      	bne.n	1dfa <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1e0a:	68bb      	ldr	r3, [r7, #8]
    1e0c:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	68fb      	ldr	r3, [r7, #12]
    1e12:	0018      	movs	r0, r3
    1e14:	4b1e      	ldr	r3, [pc, #120]	; (1e90 <tc_init+0x44c>)
    1e16:	4798      	blx	r3
    1e18:	1e03      	subs	r3, r0, #0
    1e1a:	d1f9      	bne.n	1e10 <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1e20:	68bb      	ldr	r3, [r7, #8]
    1e22:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1e24:	46c0      	nop			; (mov r8, r8)
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	0018      	movs	r0, r3
    1e2a:	4b19      	ldr	r3, [pc, #100]	; (1e90 <tc_init+0x44c>)
    1e2c:	4798      	blx	r3
    1e2e:	1e03      	subs	r3, r0, #0
    1e30:	d1f9      	bne.n	1e26 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1e36:	68bb      	ldr	r3, [r7, #8]
    1e38:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    1e3a:	2300      	movs	r3, #0
    1e3c:	e023      	b.n	1e86 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	68fb      	ldr	r3, [r7, #12]
    1e42:	0018      	movs	r0, r3
    1e44:	4b12      	ldr	r3, [pc, #72]	; (1e90 <tc_init+0x44c>)
    1e46:	4798      	blx	r3
    1e48:	1e03      	subs	r3, r0, #0
    1e4a:	d1f9      	bne.n	1e40 <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e50:	68bb      	ldr	r3, [r7, #8]
    1e52:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1e54:	46c0      	nop			; (mov r8, r8)
    1e56:	68fb      	ldr	r3, [r7, #12]
    1e58:	0018      	movs	r0, r3
    1e5a:	4b0d      	ldr	r3, [pc, #52]	; (1e90 <tc_init+0x44c>)
    1e5c:	4798      	blx	r3
    1e5e:	1e03      	subs	r3, r0, #0
    1e60:	d1f9      	bne.n	1e56 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    1e66:	68bb      	ldr	r3, [r7, #8]
    1e68:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	68fb      	ldr	r3, [r7, #12]
    1e6e:	0018      	movs	r0, r3
    1e70:	4b07      	ldr	r3, [pc, #28]	; (1e90 <tc_init+0x44c>)
    1e72:	4798      	blx	r3
    1e74:	1e03      	subs	r3, r0, #0
    1e76:	d1f9      	bne.n	1e6c <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1e7c:	68bb      	ldr	r3, [r7, #8]
    1e7e:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    1e80:	2300      	movs	r3, #0
    1e82:	e000      	b.n	1e86 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1e84:	2317      	movs	r3, #23
}
    1e86:	0018      	movs	r0, r3
    1e88:	46bd      	mov	sp, r7
    1e8a:	b00d      	add	sp, #52	; 0x34
    1e8c:	bd90      	pop	{r4, r7, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	000019d1 	.word	0x000019d1

00001e94 <cpu_irq_save>:
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b082      	sub	sp, #8
    1e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e9a:	f3ef 8310 	mrs	r3, PRIMASK
    1e9e:	607b      	str	r3, [r7, #4]
  return(result);
    1ea0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ea2:	425a      	negs	r2, r3
    1ea4:	4153      	adcs	r3, r2
    1ea6:	b2db      	uxtb	r3, r3
    1ea8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1eaa:	b672      	cpsid	i
    1eac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1eb0:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <cpu_irq_save+0x2c>)
    1eb2:	2200      	movs	r2, #0
    1eb4:	701a      	strb	r2, [r3, #0]
	return flags;
    1eb6:	683b      	ldr	r3, [r7, #0]
}
    1eb8:	0018      	movs	r0, r3
    1eba:	46bd      	mov	sp, r7
    1ebc:	b002      	add	sp, #8
    1ebe:	bd80      	pop	{r7, pc}
    1ec0:	20000000 	.word	0x20000000

00001ec4 <cpu_irq_is_enabled_flags>:
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b082      	sub	sp, #8
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
	return (flags);
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	1e5a      	subs	r2, r3, #1
    1ed0:	4193      	sbcs	r3, r2
    1ed2:	b2db      	uxtb	r3, r3
}
    1ed4:	0018      	movs	r0, r3
    1ed6:	46bd      	mov	sp, r7
    1ed8:	b002      	add	sp, #8
    1eda:	bd80      	pop	{r7, pc}

00001edc <cpu_irq_restore>:
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b082      	sub	sp, #8
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	0018      	movs	r0, r3
    1ee8:	4b06      	ldr	r3, [pc, #24]	; (1f04 <cpu_irq_restore+0x28>)
    1eea:	4798      	blx	r3
    1eec:	1e03      	subs	r3, r0, #0
    1eee:	d005      	beq.n	1efc <cpu_irq_restore+0x20>
		cpu_irq_enable();
    1ef0:	4b05      	ldr	r3, [pc, #20]	; (1f08 <cpu_irq_restore+0x2c>)
    1ef2:	2201      	movs	r2, #1
    1ef4:	701a      	strb	r2, [r3, #0]
    1ef6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1efa:	b662      	cpsie	i
}
    1efc:	46c0      	nop			; (mov r8, r8)
    1efe:	46bd      	mov	sp, r7
    1f00:	b002      	add	sp, #8
    1f02:	bd80      	pop	{r7, pc}
    1f04:	00001ec5 	.word	0x00001ec5
    1f08:	20000000 	.word	0x20000000

00001f0c <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	681a      	ldr	r2, [r3, #0]
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	891b      	ldrh	r3, [r3, #8]
    1f1e:	b29b      	uxth	r3, r3
    1f20:	2101      	movs	r1, #1
    1f22:	438b      	bics	r3, r1
    1f24:	b29b      	uxth	r3, r3
    1f26:	8113      	strh	r3, [r2, #8]
}
    1f28:	46c0      	nop			; (mov r8, r8)
    1f2a:	46bd      	mov	sp, r7
    1f2c:	b002      	add	sp, #8
    1f2e:	bd80      	pop	{r7, pc}

00001f30 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    1f30:	b580      	push	{r7, lr}
    1f32:	b082      	sub	sp, #8
    1f34:	af00      	add	r7, sp, #0
    1f36:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	7a9b      	ldrb	r3, [r3, #10]
    1f3e:	065b      	lsls	r3, r3, #25
    1f40:	0e5b      	lsrs	r3, r3, #25
    1f42:	b2db      	uxtb	r3, r3
}
    1f44:	0018      	movs	r0, r3
    1f46:	46bd      	mov	sp, r7
    1f48:	b002      	add	sp, #8
    1f4a:	bd80      	pop	{r7, pc}

00001f4c <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    1f4c:	b580      	push	{r7, lr}
    1f4e:	b082      	sub	sp, #8
    1f50:	af00      	add	r7, sp, #0
    1f52:	6078      	str	r0, [r7, #4]
    1f54:	000a      	movs	r2, r1
    1f56:	1cfb      	adds	r3, r7, #3
    1f58:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	681b      	ldr	r3, [r3, #0]
    1f5e:	1cfa      	adds	r2, r7, #3
    1f60:	7812      	ldrb	r2, [r2, #0]
    1f62:	2180      	movs	r1, #128	; 0x80
    1f64:	4249      	negs	r1, r1
    1f66:	430a      	orrs	r2, r1
    1f68:	b2d2      	uxtb	r2, r2
    1f6a:	729a      	strb	r2, [r3, #10]
}
    1f6c:	46c0      	nop			; (mov r8, r8)
    1f6e:	46bd      	mov	sp, r7
    1f70:	b002      	add	sp, #8
    1f72:	bd80      	pop	{r7, pc}

00001f74 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    1f74:	b580      	push	{r7, lr}
    1f76:	b082      	sub	sp, #8
    1f78:	af00      	add	r7, sp, #0
    1f7a:	6078      	str	r0, [r7, #4]
    1f7c:	000a      	movs	r2, r1
    1f7e:	1cfb      	adds	r3, r7, #3
    1f80:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	681a      	ldr	r2, [r3, #0]
    1f86:	1cfb      	adds	r3, r7, #3
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	2103      	movs	r1, #3
    1f8c:	400b      	ands	r3, r1
    1f8e:	b2d9      	uxtb	r1, r3
    1f90:	8913      	ldrh	r3, [r2, #8]
    1f92:	1c08      	adds	r0, r1, #0
    1f94:	2103      	movs	r1, #3
    1f96:	4001      	ands	r1, r0
    1f98:	0288      	lsls	r0, r1, #10
    1f9a:	4905      	ldr	r1, [pc, #20]	; (1fb0 <usb_device_set_lpm_mode+0x3c>)
    1f9c:	400b      	ands	r3, r1
    1f9e:	1c19      	adds	r1, r3, #0
    1fa0:	1c03      	adds	r3, r0, #0
    1fa2:	430b      	orrs	r3, r1
    1fa4:	8113      	strh	r3, [r2, #8]
}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	46bd      	mov	sp, r7
    1faa:	b002      	add	sp, #8
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	fffff3ff 	.word	0xfffff3ff

00001fb4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b084      	sub	sp, #16
    1fb8:	af00      	add	r7, sp, #0
    1fba:	0002      	movs	r2, r0
    1fbc:	1dfb      	adds	r3, r7, #7
    1fbe:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1fc0:	1dfb      	adds	r3, r7, #7
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	4a0c      	ldr	r2, [pc, #48]	; (1ff8 <sleepmgr_lock_mode+0x44>)
    1fc6:	5cd3      	ldrb	r3, [r2, r3]
    1fc8:	2bff      	cmp	r3, #255	; 0xff
    1fca:	d100      	bne.n	1fce <sleepmgr_lock_mode+0x1a>
		while (true) {
    1fcc:	e7fe      	b.n	1fcc <sleepmgr_lock_mode+0x18>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    1fce:	4b0b      	ldr	r3, [pc, #44]	; (1ffc <sleepmgr_lock_mode+0x48>)
    1fd0:	4798      	blx	r3
    1fd2:	0003      	movs	r3, r0
    1fd4:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    1fd6:	1dfb      	adds	r3, r7, #7
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	4a07      	ldr	r2, [pc, #28]	; (1ff8 <sleepmgr_lock_mode+0x44>)
    1fdc:	5cd2      	ldrb	r2, [r2, r3]
    1fde:	3201      	adds	r2, #1
    1fe0:	b2d1      	uxtb	r1, r2
    1fe2:	4a05      	ldr	r2, [pc, #20]	; (1ff8 <sleepmgr_lock_mode+0x44>)
    1fe4:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	0018      	movs	r0, r3
    1fea:	4b05      	ldr	r3, [pc, #20]	; (2000 <STACK_SIZE>)
    1fec:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	46bd      	mov	sp, r7
    1ff2:	b004      	add	sp, #16
    1ff4:	bd80      	pop	{r7, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	200026c8 	.word	0x200026c8
    1ffc:	00001e95 	.word	0x00001e95
    2000:	00001edd 	.word	0x00001edd

00002004 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    2004:	b580      	push	{r7, lr}
    2006:	b084      	sub	sp, #16
    2008:	af00      	add	r7, sp, #0
    200a:	0002      	movs	r2, r0
    200c:	1dfb      	adds	r3, r7, #7
    200e:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2010:	1dfb      	adds	r3, r7, #7
    2012:	781b      	ldrb	r3, [r3, #0]
    2014:	4a0c      	ldr	r2, [pc, #48]	; (2048 <sleepmgr_unlock_mode+0x44>)
    2016:	5cd3      	ldrb	r3, [r2, r3]
    2018:	2b00      	cmp	r3, #0
    201a:	d100      	bne.n	201e <sleepmgr_unlock_mode+0x1a>
		while (true) {
    201c:	e7fe      	b.n	201c <sleepmgr_unlock_mode+0x18>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    201e:	4b0b      	ldr	r3, [pc, #44]	; (204c <sleepmgr_unlock_mode+0x48>)
    2020:	4798      	blx	r3
    2022:	0003      	movs	r3, r0
    2024:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    2026:	1dfb      	adds	r3, r7, #7
    2028:	781b      	ldrb	r3, [r3, #0]
    202a:	4a07      	ldr	r2, [pc, #28]	; (2048 <sleepmgr_unlock_mode+0x44>)
    202c:	5cd2      	ldrb	r2, [r2, r3]
    202e:	3a01      	subs	r2, #1
    2030:	b2d1      	uxtb	r1, r2
    2032:	4a05      	ldr	r2, [pc, #20]	; (2048 <sleepmgr_unlock_mode+0x44>)
    2034:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    2036:	68fb      	ldr	r3, [r7, #12]
    2038:	0018      	movs	r0, r3
    203a:	4b05      	ldr	r3, [pc, #20]	; (2050 <sleepmgr_unlock_mode+0x4c>)
    203c:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	46bd      	mov	sp, r7
    2042:	b004      	add	sp, #16
    2044:	bd80      	pop	{r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	200026c8 	.word	0x200026c8
    204c:	00001e95 	.word	0x00001e95
    2050:	00001edd 	.word	0x00001edd

00002054 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    2054:	b580      	push	{r7, lr}
    2056:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2058:	4b0c      	ldr	r3, [pc, #48]	; (208c <udd_wait_clock_ready+0x38>)
    205a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    205c:	b29b      	uxth	r3, r3
    205e:	001a      	movs	r2, r3
    2060:	2320      	movs	r3, #32
    2062:	4013      	ands	r3, r2
    2064:	d107      	bne.n	2076 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	4b08      	ldr	r3, [pc, #32]	; (208c <udd_wait_clock_ready+0x38>)
    206a:	68db      	ldr	r3, [r3, #12]
    206c:	22d0      	movs	r2, #208	; 0xd0
    206e:	4013      	ands	r3, r2
    2070:	2bd0      	cmp	r3, #208	; 0xd0
    2072:	d1f9      	bne.n	2068 <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    2074:	e006      	b.n	2084 <udd_wait_clock_ready+0x30>
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	4b04      	ldr	r3, [pc, #16]	; (208c <udd_wait_clock_ready+0x38>)
    207a:	68db      	ldr	r3, [r3, #12]
    207c:	2210      	movs	r2, #16
    207e:	4013      	ands	r3, r2
    2080:	2b10      	cmp	r3, #16
    2082:	d1f9      	bne.n	2078 <udd_wait_clock_ready+0x24>
}
    2084:	46c0      	nop			; (mov r8, r8)
    2086:	46bd      	mov	sp, r7
    2088:	bd80      	pop	{r7, pc}
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	40000800 	.word	0x40000800

00002090 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2090:	b580      	push	{r7, lr}
    2092:	b084      	sub	sp, #16
    2094:	af00      	add	r7, sp, #0
    2096:	0002      	movs	r2, r0
    2098:	1dfb      	adds	r3, r7, #7
    209a:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    209c:	230c      	movs	r3, #12
    209e:	18fb      	adds	r3, r7, r3
    20a0:	4a15      	ldr	r2, [pc, #84]	; (20f8 <udd_sleep_mode+0x68>)
    20a2:	6812      	ldr	r2, [r2, #0]
    20a4:	601a      	str	r2, [r3, #0]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    20a6:	4b15      	ldr	r3, [pc, #84]	; (20fc <udd_sleep_mode+0x6c>)
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	1dfa      	adds	r2, r7, #7
    20ac:	7812      	ldrb	r2, [r2, #0]
    20ae:	429a      	cmp	r2, r3
    20b0:	d01d      	beq.n	20ee <udd_sleep_mode+0x5e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    20b2:	1dfb      	adds	r3, r7, #7
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d007      	beq.n	20ca <udd_sleep_mode+0x3a>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    20ba:	1dfb      	adds	r3, r7, #7
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	220c      	movs	r2, #12
    20c0:	18ba      	adds	r2, r7, r2
    20c2:	5cd3      	ldrb	r3, [r2, r3]
    20c4:	0018      	movs	r0, r3
    20c6:	4b0e      	ldr	r3, [pc, #56]	; (2100 <udd_sleep_mode+0x70>)
    20c8:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    20ca:	4b0c      	ldr	r3, [pc, #48]	; (20fc <udd_sleep_mode+0x6c>)
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	2b00      	cmp	r3, #0
    20d0:	d008      	beq.n	20e4 <udd_sleep_mode+0x54>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    20d2:	4b0a      	ldr	r3, [pc, #40]	; (20fc <udd_sleep_mode+0x6c>)
    20d4:	781b      	ldrb	r3, [r3, #0]
    20d6:	001a      	movs	r2, r3
    20d8:	230c      	movs	r3, #12
    20da:	18fb      	adds	r3, r7, r3
    20dc:	5c9b      	ldrb	r3, [r3, r2]
    20de:	0018      	movs	r0, r3
    20e0:	4b08      	ldr	r3, [pc, #32]	; (2104 <udd_sleep_mode+0x74>)
    20e2:	4798      	blx	r3
	}
	udd_state = new_state;
    20e4:	4b05      	ldr	r3, [pc, #20]	; (20fc <udd_sleep_mode+0x6c>)
    20e6:	1dfa      	adds	r2, r7, #7
    20e8:	7812      	ldrb	r2, [r2, #0]
    20ea:	701a      	strb	r2, [r3, #0]
    20ec:	e000      	b.n	20f0 <udd_sleep_mode+0x60>
		return; // No change
    20ee:	46c0      	nop			; (mov r8, r8)
}
    20f0:	46bd      	mov	sp, r7
    20f2:	b004      	add	sp, #16
    20f4:	bd80      	pop	{r7, pc}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	0001f8e0 	.word	0x0001f8e0
    20fc:	2000051c 	.word	0x2000051c
    2100:	00001fb5 	.word	0x00001fb5
    2104:	00002005 	.word	0x00002005

00002108 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    2108:	b580      	push	{r7, lr}
    210a:	b082      	sub	sp, #8
    210c:	af00      	add	r7, sp, #0
    210e:	0002      	movs	r2, r0
    2110:	1dfb      	adds	r3, r7, #7
    2112:	701a      	strb	r2, [r3, #0]
	if ((ep == 0) || (ep == 0x80)) {
    2114:	1dfb      	adds	r3, r7, #7
    2116:	781b      	ldrb	r3, [r3, #0]
    2118:	2b00      	cmp	r3, #0
    211a:	d003      	beq.n	2124 <udd_ep_get_job+0x1c>
    211c:	1dfb      	adds	r3, r7, #7
    211e:	781b      	ldrb	r3, [r3, #0]
    2120:	2b80      	cmp	r3, #128	; 0x80
    2122:	d101      	bne.n	2128 <udd_ep_get_job+0x20>
		return NULL;
    2124:	2300      	movs	r3, #0
    2126:	e012      	b.n	214e <udd_ep_get_job+0x46>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2128:	1dfb      	adds	r3, r7, #7
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	220f      	movs	r2, #15
    212e:	4013      	ands	r3, r2
    2130:	005b      	lsls	r3, r3, #1
    2132:	1dfa      	adds	r2, r7, #7
    2134:	7812      	ldrb	r2, [r2, #0]
    2136:	b252      	sxtb	r2, r2
    2138:	b2d2      	uxtb	r2, r2
    213a:	09d2      	lsrs	r2, r2, #7
    213c:	b2d2      	uxtb	r2, r2
    213e:	189b      	adds	r3, r3, r2
    2140:	1e9a      	subs	r2, r3, #2
    2142:	0013      	movs	r3, r2
    2144:	009b      	lsls	r3, r3, #2
    2146:	189b      	adds	r3, r3, r2
    2148:	009b      	lsls	r3, r3, #2
    214a:	4a03      	ldr	r2, [pc, #12]	; (2158 <udd_ep_get_job+0x50>)
    214c:	189b      	adds	r3, r3, r2
	}
}
    214e:	0018      	movs	r0, r3
    2150:	46bd      	mov	sp, r7
    2152:	b002      	add	sp, #8
    2154:	bd80      	pop	{r7, pc}
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	200004cc 	.word	0x200004cc

0000215c <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    215c:	b590      	push	{r4, r7, lr}
    215e:	b089      	sub	sp, #36	; 0x24
    2160:	af00      	add	r7, sp, #0
    2162:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2168:	2317      	movs	r3, #23
    216a:	18fb      	adds	r3, r7, r3
    216c:	69ba      	ldr	r2, [r7, #24]
    216e:	7992      	ldrb	r2, [r2, #6]
    2170:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    2172:	2317      	movs	r3, #23
    2174:	18fb      	adds	r3, r7, r3
    2176:	781b      	ldrb	r3, [r3, #0]
    2178:	0018      	movs	r0, r3
    217a:	4b54      	ldr	r3, [pc, #336]	; (22cc <udd_ep_trans_in_next+0x170>)
    217c:	4798      	blx	r3
    217e:	0003      	movs	r3, r0
    2180:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    2182:	230f      	movs	r3, #15
    2184:	18fb      	adds	r3, r7, r3
    2186:	2217      	movs	r2, #23
    2188:	18ba      	adds	r2, r7, r2
    218a:	7812      	ldrb	r2, [r2, #0]
    218c:	210f      	movs	r1, #15
    218e:	400a      	ands	r2, r1
    2190:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    2192:	230c      	movs	r3, #12
    2194:	18fb      	adds	r3, r7, r3
    2196:	693a      	ldr	r2, [r7, #16]
    2198:	8a12      	ldrh	r2, [r2, #16]
    219a:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    219c:	230a      	movs	r3, #10
    219e:	18fb      	adds	r3, r7, r3
    21a0:	69ba      	ldr	r2, [r7, #24]
    21a2:	8852      	ldrh	r2, [r2, #2]
    21a4:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    21a6:	693b      	ldr	r3, [r7, #16]
    21a8:	68da      	ldr	r2, [r3, #12]
    21aa:	230a      	movs	r3, #10
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	881b      	ldrh	r3, [r3, #0]
    21b0:	18d2      	adds	r2, r2, r3
    21b2:	693b      	ldr	r3, [r7, #16]
    21b4:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    21b6:	693b      	ldr	r3, [r7, #16]
    21b8:	68da      	ldr	r2, [r3, #12]
    21ba:	693b      	ldr	r3, [r7, #16]
    21bc:	689b      	ldr	r3, [r3, #8]
    21be:	429a      	cmp	r2, r3
    21c0:	d054      	beq.n	226c <udd_ep_trans_in_next+0x110>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    21c2:	693b      	ldr	r3, [r7, #16]
    21c4:	689b      	ldr	r3, [r3, #8]
    21c6:	b299      	uxth	r1, r3
    21c8:	693b      	ldr	r3, [r7, #16]
    21ca:	68db      	ldr	r3, [r3, #12]
    21cc:	b29a      	uxth	r2, r3
    21ce:	231e      	movs	r3, #30
    21d0:	18fb      	adds	r3, r7, r3
    21d2:	1a8a      	subs	r2, r1, r2
    21d4:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    21d6:	231e      	movs	r3, #30
    21d8:	18fb      	adds	r3, r7, r3
    21da:	881b      	ldrh	r3, [r3, #0]
    21dc:	4a3c      	ldr	r2, [pc, #240]	; (22d0 <udd_ep_trans_in_next+0x174>)
    21de:	4293      	cmp	r3, r2
    21e0:	d90d      	bls.n	21fe <udd_ep_trans_in_next+0xa2>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    21e2:	230c      	movs	r3, #12
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	881a      	ldrh	r2, [r3, #0]
    21e8:	4839      	ldr	r0, [pc, #228]	; (22d0 <udd_ep_trans_in_next+0x174>)
    21ea:	4b3a      	ldr	r3, [pc, #232]	; (22d4 <udd_ep_trans_in_next+0x178>)
    21ec:	0011      	movs	r1, r2
    21ee:	4798      	blx	r3
    21f0:	000b      	movs	r3, r1
    21f2:	b29a      	uxth	r2, r3
    21f4:	231e      	movs	r3, #30
    21f6:	18fb      	adds	r3, r7, r3
    21f8:	4935      	ldr	r1, [pc, #212]	; (22d0 <udd_ep_trans_in_next+0x174>)
    21fa:	1a8a      	subs	r2, r1, r2
    21fc:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    21fe:	693b      	ldr	r3, [r7, #16]
    2200:	7c9b      	ldrb	r3, [r3, #18]
    2202:	2202      	movs	r2, #2
    2204:	4013      	ands	r3, r2
    2206:	b2db      	uxtb	r3, r3
    2208:	2b00      	cmp	r3, #0
    220a:	d00e      	beq.n	222a <udd_ep_trans_in_next+0xce>
    220c:	231e      	movs	r3, #30
    220e:	18fa      	adds	r2, r7, r3
    2210:	230c      	movs	r3, #12
    2212:	18fb      	adds	r3, r7, r3
    2214:	8812      	ldrh	r2, [r2, #0]
    2216:	8819      	ldrh	r1, [r3, #0]
    2218:	4b2f      	ldr	r3, [pc, #188]	; (22d8 <udd_ep_trans_in_next+0x17c>)
    221a:	0010      	movs	r0, r2
    221c:	4798      	blx	r3
    221e:	000b      	movs	r3, r1
    2220:	b29b      	uxth	r3, r3
    2222:	2b00      	cmp	r3, #0
    2224:	d101      	bne.n	222a <udd_ep_trans_in_next+0xce>
    2226:	2301      	movs	r3, #1
    2228:	e000      	b.n	222c <udd_ep_trans_in_next+0xd0>
    222a:	2300      	movs	r3, #0
    222c:	b2db      	uxtb	r3, r3
    222e:	1c1a      	adds	r2, r3, #0
    2230:	2301      	movs	r3, #1
    2232:	4013      	ands	r3, r2
    2234:	b2da      	uxtb	r2, r3
    2236:	693b      	ldr	r3, [r7, #16]
    2238:	2101      	movs	r1, #1
    223a:	400a      	ands	r2, r1
    223c:	1890      	adds	r0, r2, r2
    223e:	7c9a      	ldrb	r2, [r3, #18]
    2240:	2102      	movs	r1, #2
    2242:	438a      	bics	r2, r1
    2244:	1c11      	adds	r1, r2, #0
    2246:	1c02      	adds	r2, r0, #0
    2248:	430a      	orrs	r2, r1
    224a:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    224c:	693b      	ldr	r3, [r7, #16]
    224e:	685a      	ldr	r2, [r3, #4]
    2250:	693b      	ldr	r3, [r7, #16]
    2252:	68db      	ldr	r3, [r3, #12]
    2254:	18d2      	adds	r2, r2, r3
    2256:	231e      	movs	r3, #30
    2258:	18fb      	adds	r3, r7, r3
    225a:	881c      	ldrh	r4, [r3, #0]
    225c:	230f      	movs	r3, #15
    225e:	18fb      	adds	r3, r7, r3
    2260:	7819      	ldrb	r1, [r3, #0]
    2262:	481e      	ldr	r0, [pc, #120]	; (22dc <udd_ep_trans_in_next+0x180>)
    2264:	0023      	movs	r3, r4
    2266:	4c1e      	ldr	r4, [pc, #120]	; (22e0 <udd_ep_trans_in_next+0x184>)
    2268:	47a0      	blx	r4
		return;
    226a:	e02b      	b.n	22c4 <udd_ep_trans_in_next+0x168>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    226c:	693b      	ldr	r3, [r7, #16]
    226e:	7c9b      	ldrb	r3, [r3, #18]
    2270:	2202      	movs	r2, #2
    2272:	4013      	ands	r3, r2
    2274:	b2db      	uxtb	r3, r3
    2276:	2b00      	cmp	r3, #0
    2278:	d011      	beq.n	229e <udd_ep_trans_in_next+0x142>
		ptr_job->b_shortpacket = false;
    227a:	693b      	ldr	r3, [r7, #16]
    227c:	7c9a      	ldrb	r2, [r3, #18]
    227e:	2102      	movs	r1, #2
    2280:	438a      	bics	r2, r1
    2282:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2284:	693b      	ldr	r3, [r7, #16]
    2286:	685a      	ldr	r2, [r3, #4]
    2288:	693b      	ldr	r3, [r7, #16]
    228a:	68db      	ldr	r3, [r3, #12]
    228c:	18d2      	adds	r2, r2, r3
    228e:	230f      	movs	r3, #15
    2290:	18fb      	adds	r3, r7, r3
    2292:	7819      	ldrb	r1, [r3, #0]
    2294:	4811      	ldr	r0, [pc, #68]	; (22dc <udd_ep_trans_in_next+0x180>)
    2296:	2300      	movs	r3, #0
    2298:	4c11      	ldr	r4, [pc, #68]	; (22e0 <udd_ep_trans_in_next+0x184>)
    229a:	47a0      	blx	r4
		return;
    229c:	e012      	b.n	22c4 <udd_ep_trans_in_next+0x168>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    229e:	693b      	ldr	r3, [r7, #16]
    22a0:	7c9a      	ldrb	r2, [r3, #18]
    22a2:	2101      	movs	r1, #1
    22a4:	438a      	bics	r2, r1
    22a6:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    22a8:	693b      	ldr	r3, [r7, #16]
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d009      	beq.n	22c4 <udd_ep_trans_in_next+0x168>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    22b0:	693b      	ldr	r3, [r7, #16]
    22b2:	681c      	ldr	r4, [r3, #0]
    22b4:	693b      	ldr	r3, [r7, #16]
    22b6:	68d9      	ldr	r1, [r3, #12]
    22b8:	2317      	movs	r3, #23
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	001a      	movs	r2, r3
    22c0:	2000      	movs	r0, #0
    22c2:	47a0      	blx	r4
	}
}
    22c4:	46bd      	mov	sp, r7
    22c6:	b009      	add	sp, #36	; 0x24
    22c8:	bd90      	pop	{r4, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00002109 	.word	0x00002109
    22d0:	00001fff 	.word	0x00001fff
    22d4:	0001a061 	.word	0x0001a061
    22d8:	00019e8d 	.word	0x00019e8d
    22dc:	20002764 	.word	0x20002764
    22e0:	000046dd 	.word	0x000046dd

000022e4 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    22e4:	b5b0      	push	{r4, r5, r7, lr}
    22e6:	b088      	sub	sp, #32
    22e8:	af00      	add	r7, sp, #0
    22ea:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    22f0:	2317      	movs	r3, #23
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	69ba      	ldr	r2, [r7, #24]
    22f6:	7992      	ldrb	r2, [r2, #6]
    22f8:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    22fa:	2317      	movs	r3, #23
    22fc:	18fb      	adds	r3, r7, r3
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	0018      	movs	r0, r3
    2302:	4b66      	ldr	r3, [pc, #408]	; (249c <udd_ep_trans_out_next+0x1b8>)
    2304:	4798      	blx	r3
    2306:	0003      	movs	r3, r0
    2308:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    230a:	230f      	movs	r3, #15
    230c:	18fb      	adds	r3, r7, r3
    230e:	2217      	movs	r2, #23
    2310:	18ba      	adds	r2, r7, r2
    2312:	7812      	ldrb	r2, [r2, #0]
    2314:	210f      	movs	r1, #15
    2316:	400a      	ands	r2, r1
    2318:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    231a:	230c      	movs	r3, #12
    231c:	18fb      	adds	r3, r7, r3
    231e:	693a      	ldr	r2, [r7, #16]
    2320:	8a12      	ldrh	r2, [r2, #16]
    2322:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    2324:	230a      	movs	r3, #10
    2326:	18fb      	adds	r3, r7, r3
    2328:	69ba      	ldr	r2, [r7, #24]
    232a:	8812      	ldrh	r2, [r2, #0]
    232c:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    232e:	693b      	ldr	r3, [r7, #16]
    2330:	7c9b      	ldrb	r3, [r3, #18]
    2332:	2204      	movs	r2, #4
    2334:	4013      	ands	r3, r2
    2336:	b2db      	uxtb	r3, r3
    2338:	2b00      	cmp	r3, #0
    233a:	d019      	beq.n	2370 <udd_ep_trans_out_next+0x8c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    233c:	693b      	ldr	r3, [r7, #16]
    233e:	685a      	ldr	r2, [r3, #4]
    2340:	693b      	ldr	r3, [r7, #16]
    2342:	68db      	ldr	r3, [r3, #12]
    2344:	18d4      	adds	r4, r2, r3
    2346:	230f      	movs	r3, #15
    2348:	18fb      	adds	r3, r7, r3
    234a:	781b      	ldrb	r3, [r3, #0]
    234c:	3b01      	subs	r3, #1
    234e:	019a      	lsls	r2, r3, #6
    2350:	4b53      	ldr	r3, [pc, #332]	; (24a0 <udd_ep_trans_out_next+0x1bc>)
    2352:	18d5      	adds	r5, r2, r3
    2354:	693b      	ldr	r3, [r7, #16]
    2356:	689a      	ldr	r2, [r3, #8]
    2358:	230c      	movs	r3, #12
    235a:	18fb      	adds	r3, r7, r3
    235c:	8819      	ldrh	r1, [r3, #0]
    235e:	4b51      	ldr	r3, [pc, #324]	; (24a4 <udd_ep_trans_out_next+0x1c0>)
    2360:	0010      	movs	r0, r2
    2362:	4798      	blx	r3
    2364:	000b      	movs	r3, r1
    2366:	001a      	movs	r2, r3
    2368:	0029      	movs	r1, r5
    236a:	0020      	movs	r0, r4
    236c:	4b4e      	ldr	r3, [pc, #312]	; (24a8 <udd_ep_trans_out_next+0x1c4>)
    236e:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    2370:	693b      	ldr	r3, [r7, #16]
    2372:	68da      	ldr	r2, [r3, #12]
    2374:	230a      	movs	r3, #10
    2376:	18fb      	adds	r3, r7, r3
    2378:	881b      	ldrh	r3, [r3, #0]
    237a:	18d2      	adds	r2, r2, r3
    237c:	693b      	ldr	r3, [r7, #16]
    237e:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2380:	693b      	ldr	r3, [r7, #16]
    2382:	68da      	ldr	r2, [r3, #12]
    2384:	693b      	ldr	r3, [r7, #16]
    2386:	689b      	ldr	r3, [r3, #8]
    2388:	429a      	cmp	r2, r3
    238a:	d903      	bls.n	2394 <udd_ep_trans_out_next+0xb0>
		ptr_job->nb_trans = ptr_job->buf_size;
    238c:	693b      	ldr	r3, [r7, #16]
    238e:	689a      	ldr	r2, [r3, #8]
    2390:	693b      	ldr	r3, [r7, #16]
    2392:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2394:	69bb      	ldr	r3, [r7, #24]
    2396:	889b      	ldrh	r3, [r3, #4]
    2398:	220a      	movs	r2, #10
    239a:	18ba      	adds	r2, r7, r2
    239c:	8812      	ldrh	r2, [r2, #0]
    239e:	429a      	cmp	r2, r3
    23a0:	d165      	bne.n	246e <udd_ep_trans_out_next+0x18a>
    23a2:	693b      	ldr	r3, [r7, #16]
    23a4:	68da      	ldr	r2, [r3, #12]
    23a6:	693b      	ldr	r3, [r7, #16]
    23a8:	689b      	ldr	r3, [r3, #8]
    23aa:	429a      	cmp	r2, r3
    23ac:	d05f      	beq.n	246e <udd_ep_trans_out_next+0x18a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    23ae:	693b      	ldr	r3, [r7, #16]
    23b0:	689b      	ldr	r3, [r3, #8]
    23b2:	b299      	uxth	r1, r3
    23b4:	693b      	ldr	r3, [r7, #16]
    23b6:	68db      	ldr	r3, [r3, #12]
    23b8:	b29a      	uxth	r2, r3
    23ba:	231e      	movs	r3, #30
    23bc:	18fb      	adds	r3, r7, r3
    23be:	1a8a      	subs	r2, r1, r2
    23c0:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    23c2:	231e      	movs	r3, #30
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	881b      	ldrh	r3, [r3, #0]
    23c8:	4a38      	ldr	r2, [pc, #224]	; (24ac <udd_ep_trans_out_next+0x1c8>)
    23ca:	4293      	cmp	r3, r2
    23cc:	d90e      	bls.n	23ec <udd_ep_trans_out_next+0x108>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    23ce:	230c      	movs	r3, #12
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	881a      	ldrh	r2, [r3, #0]
    23d4:	4835      	ldr	r0, [pc, #212]	; (24ac <udd_ep_trans_out_next+0x1c8>)
    23d6:	4b36      	ldr	r3, [pc, #216]	; (24b0 <udd_ep_trans_out_next+0x1cc>)
    23d8:	0011      	movs	r1, r2
    23da:	4798      	blx	r3
    23dc:	000b      	movs	r3, r1
    23de:	b29a      	uxth	r2, r3
    23e0:	231e      	movs	r3, #30
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	4931      	ldr	r1, [pc, #196]	; (24ac <udd_ep_trans_out_next+0x1c8>)
    23e6:	1a8a      	subs	r2, r1, r2
    23e8:	801a      	strh	r2, [r3, #0]
    23ea:	e011      	b.n	2410 <udd_ep_trans_out_next+0x12c>
		} else {
			next_trans -= next_trans % ep_size;
    23ec:	231e      	movs	r3, #30
    23ee:	18fa      	adds	r2, r7, r3
    23f0:	230c      	movs	r3, #12
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	8812      	ldrh	r2, [r2, #0]
    23f6:	8819      	ldrh	r1, [r3, #0]
    23f8:	4b2a      	ldr	r3, [pc, #168]	; (24a4 <udd_ep_trans_out_next+0x1c0>)
    23fa:	0010      	movs	r0, r2
    23fc:	4798      	blx	r3
    23fe:	000b      	movs	r3, r1
    2400:	b29a      	uxth	r2, r3
    2402:	231e      	movs	r3, #30
    2404:	18fb      	adds	r3, r7, r3
    2406:	211e      	movs	r1, #30
    2408:	1879      	adds	r1, r7, r1
    240a:	8809      	ldrh	r1, [r1, #0]
    240c:	1a8a      	subs	r2, r1, r2
    240e:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    2410:	231e      	movs	r3, #30
    2412:	18fa      	adds	r2, r7, r3
    2414:	230c      	movs	r3, #12
    2416:	18fb      	adds	r3, r7, r3
    2418:	8812      	ldrh	r2, [r2, #0]
    241a:	881b      	ldrh	r3, [r3, #0]
    241c:	429a      	cmp	r2, r3
    241e:	d216      	bcs.n	244e <udd_ep_trans_out_next+0x16a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    2420:	693b      	ldr	r3, [r7, #16]
    2422:	7c9a      	ldrb	r2, [r3, #18]
    2424:	2104      	movs	r1, #4
    2426:	430a      	orrs	r2, r1
    2428:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    242a:	230f      	movs	r3, #15
    242c:	18fb      	adds	r3, r7, r3
    242e:	781b      	ldrb	r3, [r3, #0]
    2430:	3b01      	subs	r3, #1
    2432:	019a      	lsls	r2, r3, #6
    2434:	4b1a      	ldr	r3, [pc, #104]	; (24a0 <udd_ep_trans_out_next+0x1bc>)
    2436:	18d2      	adds	r2, r2, r3
    2438:	230c      	movs	r3, #12
    243a:	18fb      	adds	r3, r7, r3
    243c:	881c      	ldrh	r4, [r3, #0]
    243e:	230f      	movs	r3, #15
    2440:	18fb      	adds	r3, r7, r3
    2442:	7819      	ldrb	r1, [r3, #0]
    2444:	481b      	ldr	r0, [pc, #108]	; (24b4 <udd_ep_trans_out_next+0x1d0>)
    2446:	0023      	movs	r3, r4
    2448:	4c1b      	ldr	r4, [pc, #108]	; (24b8 <udd_ep_trans_out_next+0x1d4>)
    244a:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    244c:	e022      	b.n	2494 <udd_ep_trans_out_next+0x1b0>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    244e:	693b      	ldr	r3, [r7, #16]
    2450:	685a      	ldr	r2, [r3, #4]
    2452:	693b      	ldr	r3, [r7, #16]
    2454:	68db      	ldr	r3, [r3, #12]
    2456:	18d2      	adds	r2, r2, r3
    2458:	231e      	movs	r3, #30
    245a:	18fb      	adds	r3, r7, r3
    245c:	881c      	ldrh	r4, [r3, #0]
    245e:	230f      	movs	r3, #15
    2460:	18fb      	adds	r3, r7, r3
    2462:	7819      	ldrb	r1, [r3, #0]
    2464:	4813      	ldr	r0, [pc, #76]	; (24b4 <udd_ep_trans_out_next+0x1d0>)
    2466:	0023      	movs	r3, r4
    2468:	4c13      	ldr	r4, [pc, #76]	; (24b8 <udd_ep_trans_out_next+0x1d4>)
    246a:	47a0      	blx	r4
		return;
    246c:	e012      	b.n	2494 <udd_ep_trans_out_next+0x1b0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    246e:	693b      	ldr	r3, [r7, #16]
    2470:	7c9a      	ldrb	r2, [r3, #18]
    2472:	2101      	movs	r1, #1
    2474:	438a      	bics	r2, r1
    2476:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    2478:	693b      	ldr	r3, [r7, #16]
    247a:	681b      	ldr	r3, [r3, #0]
    247c:	2b00      	cmp	r3, #0
    247e:	d009      	beq.n	2494 <udd_ep_trans_out_next+0x1b0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2480:	693b      	ldr	r3, [r7, #16]
    2482:	681c      	ldr	r4, [r3, #0]
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	68d9      	ldr	r1, [r3, #12]
    2488:	2317      	movs	r3, #23
    248a:	18fb      	adds	r3, r7, r3
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	001a      	movs	r2, r3
    2490:	2000      	movs	r0, #0
    2492:	47a0      	blx	r4
	}
}
    2494:	46bd      	mov	sp, r7
    2496:	b008      	add	sp, #32
    2498:	bdb0      	pop	{r4, r5, r7, pc}
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	00002109 	.word	0x00002109
    24a0:	200026e4 	.word	0x200026e4
    24a4:	00019e8d 	.word	0x00019e8d
    24a8:	0001c1e5 	.word	0x0001c1e5
    24ac:	00001fff 	.word	0x00001fff
    24b0:	0001a061 	.word	0x0001a061
    24b4:	20002764 	.word	0x20002764
    24b8:	00004791 	.word	0x00004791

000024bc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b084      	sub	sp, #16
    24c0:	af00      	add	r7, sp, #0
    24c2:	6078      	str	r0, [r7, #4]
    24c4:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    24c6:	683b      	ldr	r3, [r7, #0]
    24c8:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    24ca:	230b      	movs	r3, #11
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	68fa      	ldr	r2, [r7, #12]
    24d0:	7992      	ldrb	r2, [r2, #6]
    24d2:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    24d4:	230b      	movs	r3, #11
    24d6:	18fb      	adds	r3, r7, r3
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	b25b      	sxtb	r3, r3
    24dc:	2b00      	cmp	r3, #0
    24de:	da04      	bge.n	24ea <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    24e0:	683b      	ldr	r3, [r7, #0]
    24e2:	0018      	movs	r0, r3
    24e4:	4b05      	ldr	r3, [pc, #20]	; (24fc <udd_ep_transfer_process+0x40>)
    24e6:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    24e8:	e003      	b.n	24f2 <udd_ep_transfer_process+0x36>
		udd_ep_trans_out_next(pointer);
    24ea:	683b      	ldr	r3, [r7, #0]
    24ec:	0018      	movs	r0, r3
    24ee:	4b04      	ldr	r3, [pc, #16]	; (2500 <udd_ep_transfer_process+0x44>)
    24f0:	4798      	blx	r3
}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	46bd      	mov	sp, r7
    24f6:	b004      	add	sp, #16
    24f8:	bd80      	pop	{r7, pc}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	0000215d 	.word	0x0000215d
    2500:	000022e5 	.word	0x000022e5

00002504 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    2504:	b590      	push	{r4, r7, lr}
    2506:	b085      	sub	sp, #20
    2508:	af00      	add	r7, sp, #0
    250a:	0002      	movs	r2, r0
    250c:	1dfb      	adds	r3, r7, #7
    250e:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    2510:	1dfb      	adds	r3, r7, #7
    2512:	781a      	ldrb	r2, [r3, #0]
    2514:	4b14      	ldr	r3, [pc, #80]	; (2568 <udd_ep_abort+0x64>)
    2516:	0011      	movs	r1, r2
    2518:	0018      	movs	r0, r3
    251a:	4b14      	ldr	r3, [pc, #80]	; (256c <udd_ep_abort+0x68>)
    251c:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    251e:	1dfb      	adds	r3, r7, #7
    2520:	781b      	ldrb	r3, [r3, #0]
    2522:	0018      	movs	r0, r3
    2524:	4b12      	ldr	r3, [pc, #72]	; (2570 <udd_ep_abort+0x6c>)
    2526:	4798      	blx	r3
    2528:	0003      	movs	r3, r0
    252a:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    252c:	68fb      	ldr	r3, [r7, #12]
    252e:	7c9b      	ldrb	r3, [r3, #18]
    2530:	2201      	movs	r2, #1
    2532:	4013      	ands	r3, r2
    2534:	b2db      	uxtb	r3, r3
    2536:	2b00      	cmp	r3, #0
    2538:	d012      	beq.n	2560 <udd_ep_abort+0x5c>
		return;
	}
	ptr_job->busy = false;
    253a:	68fb      	ldr	r3, [r7, #12]
    253c:	7c9a      	ldrb	r2, [r3, #18]
    253e:	2101      	movs	r1, #1
    2540:	438a      	bics	r2, r1
    2542:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	681b      	ldr	r3, [r3, #0]
    2548:	2b00      	cmp	r3, #0
    254a:	d00a      	beq.n	2562 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    254c:	68fb      	ldr	r3, [r7, #12]
    254e:	681c      	ldr	r4, [r3, #0]
    2550:	68fb      	ldr	r3, [r7, #12]
    2552:	68d9      	ldr	r1, [r3, #12]
    2554:	1dfb      	adds	r3, r7, #7
    2556:	781b      	ldrb	r3, [r3, #0]
    2558:	001a      	movs	r2, r3
    255a:	2001      	movs	r0, #1
    255c:	47a0      	blx	r4
    255e:	e000      	b.n	2562 <udd_ep_abort+0x5e>
		return;
    2560:	46c0      	nop			; (mov r8, r8)
	}
}
    2562:	46bd      	mov	sp, r7
    2564:	b005      	add	sp, #20
    2566:	bd90      	pop	{r4, r7, pc}
    2568:	20002764 	.word	0x20002764
    256c:	00004459 	.word	0x00004459
    2570:	00002109 	.word	0x00002109

00002574 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    2574:	b580      	push	{r7, lr}
    2576:	b084      	sub	sp, #16
    2578:	af00      	add	r7, sp, #0
    257a:	0002      	movs	r2, r0
    257c:	1dfb      	adds	r3, r7, #7
    257e:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    2580:	2308      	movs	r3, #8
    2582:	18fb      	adds	r3, r7, r3
    2584:	0018      	movs	r0, r3
    2586:	4b18      	ldr	r3, [pc, #96]	; (25e8 <udd_ep_free+0x74>)
    2588:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    258a:	230f      	movs	r3, #15
    258c:	18fb      	adds	r3, r7, r3
    258e:	1dfa      	adds	r2, r7, #7
    2590:	7812      	ldrb	r2, [r2, #0]
    2592:	210f      	movs	r1, #15
    2594:	400a      	ands	r2, r1
    2596:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    2598:	1dfb      	adds	r3, r7, #7
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	0018      	movs	r0, r3
    259e:	4b13      	ldr	r3, [pc, #76]	; (25ec <udd_ep_free+0x78>)
    25a0:	4798      	blx	r3

	config_ep.ep_address = ep;
    25a2:	2308      	movs	r3, #8
    25a4:	18fb      	adds	r3, r7, r3
    25a6:	1dfa      	adds	r2, r7, #7
    25a8:	7812      	ldrb	r2, [r2, #0]
    25aa:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    25ac:	2308      	movs	r3, #8
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	2200      	movs	r2, #0
    25b2:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    25b4:	2308      	movs	r3, #8
    25b6:	18fa      	adds	r2, r7, r3
    25b8:	4b0d      	ldr	r3, [pc, #52]	; (25f0 <udd_ep_free+0x7c>)
    25ba:	0011      	movs	r1, r2
    25bc:	0018      	movs	r0, r3
    25be:	4b0d      	ldr	r3, [pc, #52]	; (25f4 <udd_ep_free+0x80>)
    25c0:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    25c2:	230f      	movs	r3, #15
    25c4:	18fb      	adds	r3, r7, r3
    25c6:	7819      	ldrb	r1, [r3, #0]
    25c8:	4b09      	ldr	r3, [pc, #36]	; (25f0 <udd_ep_free+0x7c>)
    25ca:	2200      	movs	r2, #0
    25cc:	0018      	movs	r0, r3
    25ce:	4b0a      	ldr	r3, [pc, #40]	; (25f8 <udd_ep_free+0x84>)
    25d0:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    25d2:	1dfb      	adds	r3, r7, #7
    25d4:	7819      	ldrb	r1, [r3, #0]
    25d6:	4b06      	ldr	r3, [pc, #24]	; (25f0 <udd_ep_free+0x7c>)
    25d8:	2200      	movs	r2, #0
    25da:	0018      	movs	r0, r3
    25dc:	4b07      	ldr	r3, [pc, #28]	; (25fc <udd_ep_free+0x88>)
    25de:	4798      	blx	r3
}
    25e0:	46c0      	nop			; (mov r8, r8)
    25e2:	46bd      	mov	sp, r7
    25e4:	b004      	add	sp, #16
    25e6:	bd80      	pop	{r7, pc}
    25e8:	00003f39 	.word	0x00003f39
    25ec:	00002505 	.word	0x00002505
    25f0:	20002764 	.word	0x20002764
    25f4:	00003f61 	.word	0x00003f61
    25f8:	00003b81 	.word	0x00003b81
    25fc:	00003d95 	.word	0x00003d95

00002600 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    2600:	b590      	push	{r4, r7, lr}
    2602:	b087      	sub	sp, #28
    2604:	af00      	add	r7, sp, #0
    2606:	0004      	movs	r4, r0
    2608:	0008      	movs	r0, r1
    260a:	0011      	movs	r1, r2
    260c:	1dfb      	adds	r3, r7, #7
    260e:	1c22      	adds	r2, r4, #0
    2610:	701a      	strb	r2, [r3, #0]
    2612:	1dbb      	adds	r3, r7, #6
    2614:	1c02      	adds	r2, r0, #0
    2616:	701a      	strb	r2, [r3, #0]
    2618:	1d3b      	adds	r3, r7, #4
    261a:	1c0a      	adds	r2, r1, #0
    261c:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    261e:	230c      	movs	r3, #12
    2620:	18fb      	adds	r3, r7, r3
    2622:	0018      	movs	r0, r3
    2624:	4b58      	ldr	r3, [pc, #352]	; (2788 <udd_ep_alloc+0x188>)
    2626:	4798      	blx	r3

	config_ep.ep_address = ep;
    2628:	230c      	movs	r3, #12
    262a:	18fb      	adds	r3, r7, r3
    262c:	1dfa      	adds	r2, r7, #7
    262e:	7812      	ldrb	r2, [r2, #0]
    2630:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    2632:	1d3b      	adds	r3, r7, #4
    2634:	881b      	ldrh	r3, [r3, #0]
    2636:	2b08      	cmp	r3, #8
    2638:	d804      	bhi.n	2644 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    263a:	230c      	movs	r3, #12
    263c:	18fb      	adds	r3, r7, r3
    263e:	2200      	movs	r2, #0
    2640:	705a      	strb	r2, [r3, #1]
    2642:	e045      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    2644:	1d3b      	adds	r3, r7, #4
    2646:	881b      	ldrh	r3, [r3, #0]
    2648:	2b10      	cmp	r3, #16
    264a:	d804      	bhi.n	2656 <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    264c:	230c      	movs	r3, #12
    264e:	18fb      	adds	r3, r7, r3
    2650:	2201      	movs	r2, #1
    2652:	705a      	strb	r2, [r3, #1]
    2654:	e03c      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    2656:	1d3b      	adds	r3, r7, #4
    2658:	881b      	ldrh	r3, [r3, #0]
    265a:	2b20      	cmp	r3, #32
    265c:	d804      	bhi.n	2668 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    265e:	230c      	movs	r3, #12
    2660:	18fb      	adds	r3, r7, r3
    2662:	2202      	movs	r2, #2
    2664:	705a      	strb	r2, [r3, #1]
    2666:	e033      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    2668:	1d3b      	adds	r3, r7, #4
    266a:	881b      	ldrh	r3, [r3, #0]
    266c:	2b40      	cmp	r3, #64	; 0x40
    266e:	d804      	bhi.n	267a <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2670:	230c      	movs	r3, #12
    2672:	18fb      	adds	r3, r7, r3
    2674:	2203      	movs	r2, #3
    2676:	705a      	strb	r2, [r3, #1]
    2678:	e02a      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    267a:	1d3b      	adds	r3, r7, #4
    267c:	881b      	ldrh	r3, [r3, #0]
    267e:	2b80      	cmp	r3, #128	; 0x80
    2680:	d804      	bhi.n	268c <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2682:	230c      	movs	r3, #12
    2684:	18fb      	adds	r3, r7, r3
    2686:	2204      	movs	r2, #4
    2688:	705a      	strb	r2, [r3, #1]
    268a:	e021      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    268c:	1d3b      	adds	r3, r7, #4
    268e:	881a      	ldrh	r2, [r3, #0]
    2690:	2380      	movs	r3, #128	; 0x80
    2692:	005b      	lsls	r3, r3, #1
    2694:	429a      	cmp	r2, r3
    2696:	d804      	bhi.n	26a2 <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2698:	230c      	movs	r3, #12
    269a:	18fb      	adds	r3, r7, r3
    269c:	2205      	movs	r2, #5
    269e:	705a      	strb	r2, [r3, #1]
    26a0:	e016      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    26a2:	1d3b      	adds	r3, r7, #4
    26a4:	881a      	ldrh	r2, [r3, #0]
    26a6:	2380      	movs	r3, #128	; 0x80
    26a8:	009b      	lsls	r3, r3, #2
    26aa:	429a      	cmp	r2, r3
    26ac:	d804      	bhi.n	26b8 <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    26ae:	230c      	movs	r3, #12
    26b0:	18fb      	adds	r3, r7, r3
    26b2:	2206      	movs	r2, #6
    26b4:	705a      	strb	r2, [r3, #1]
    26b6:	e00b      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    26b8:	1d3b      	adds	r3, r7, #4
    26ba:	881b      	ldrh	r3, [r3, #0]
    26bc:	4a33      	ldr	r2, [pc, #204]	; (278c <udd_ep_alloc+0x18c>)
    26be:	4293      	cmp	r3, r2
    26c0:	d804      	bhi.n	26cc <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    26c2:	230c      	movs	r3, #12
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	2207      	movs	r2, #7
    26c8:	705a      	strb	r2, [r3, #1]
    26ca:	e001      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else {
		return false;
    26cc:	2300      	movs	r3, #0
    26ce:	e057      	b.n	2780 <udd_ep_alloc+0x180>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    26d0:	1dfb      	adds	r3, r7, #7
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	0018      	movs	r0, r3
    26d6:	4b2e      	ldr	r3, [pc, #184]	; (2790 <udd_ep_alloc+0x190>)
    26d8:	4798      	blx	r3
    26da:	0003      	movs	r3, r0
    26dc:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    26de:	697b      	ldr	r3, [r7, #20]
    26e0:	1d3a      	adds	r2, r7, #4
    26e2:	8812      	ldrh	r2, [r2, #0]
    26e4:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    26e6:	1dbb      	adds	r3, r7, #6
    26e8:	1dba      	adds	r2, r7, #6
    26ea:	7812      	ldrb	r2, [r2, #0]
    26ec:	2103      	movs	r1, #3
    26ee:	400a      	ands	r2, r1
    26f0:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    26f2:	1dbb      	adds	r3, r7, #6
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	2b01      	cmp	r3, #1
    26f8:	d104      	bne.n	2704 <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    26fa:	230c      	movs	r3, #12
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	2202      	movs	r2, #2
    2700:	70da      	strb	r2, [r3, #3]
    2702:	e013      	b.n	272c <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2704:	1dbb      	adds	r3, r7, #6
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	2b02      	cmp	r3, #2
    270a:	d104      	bne.n	2716 <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    270c:	230c      	movs	r3, #12
    270e:	18fb      	adds	r3, r7, r3
    2710:	2203      	movs	r2, #3
    2712:	70da      	strb	r2, [r3, #3]
    2714:	e00a      	b.n	272c <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2716:	1dbb      	adds	r3, r7, #6
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	2b03      	cmp	r3, #3
    271c:	d104      	bne.n	2728 <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    271e:	230c      	movs	r3, #12
    2720:	18fb      	adds	r3, r7, r3
    2722:	2204      	movs	r2, #4
    2724:	70da      	strb	r2, [r3, #3]
    2726:	e001      	b.n	272c <udd_ep_alloc+0x12c>
	} else {
		return false;
    2728:	2300      	movs	r3, #0
    272a:	e029      	b.n	2780 <udd_ep_alloc+0x180>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    272c:	2313      	movs	r3, #19
    272e:	18fb      	adds	r3, r7, r3
    2730:	1dfa      	adds	r2, r7, #7
    2732:	7812      	ldrb	r2, [r2, #0]
    2734:	210f      	movs	r1, #15
    2736:	400a      	ands	r2, r1
    2738:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    273a:	230c      	movs	r3, #12
    273c:	18fa      	adds	r2, r7, r3
    273e:	4b15      	ldr	r3, [pc, #84]	; (2794 <udd_ep_alloc+0x194>)
    2740:	0011      	movs	r1, r2
    2742:	0018      	movs	r0, r3
    2744:	4b14      	ldr	r3, [pc, #80]	; (2798 <udd_ep_alloc+0x198>)
    2746:	4798      	blx	r3
    2748:	1e03      	subs	r3, r0, #0
    274a:	d001      	beq.n	2750 <udd_ep_alloc+0x150>
		return false;
    274c:	2300      	movs	r3, #0
    274e:	e017      	b.n	2780 <udd_ep_alloc+0x180>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2750:	4a12      	ldr	r2, [pc, #72]	; (279c <udd_ep_alloc+0x19c>)
    2752:	2313      	movs	r3, #19
    2754:	18fb      	adds	r3, r7, r3
    2756:	7819      	ldrb	r1, [r3, #0]
    2758:	480e      	ldr	r0, [pc, #56]	; (2794 <udd_ep_alloc+0x194>)
    275a:	0013      	movs	r3, r2
    275c:	2200      	movs	r2, #0
    275e:	4c10      	ldr	r4, [pc, #64]	; (27a0 <udd_ep_alloc+0x1a0>)
    2760:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2762:	1dfb      	adds	r3, r7, #7
    2764:	7819      	ldrb	r1, [r3, #0]
    2766:	4b0b      	ldr	r3, [pc, #44]	; (2794 <udd_ep_alloc+0x194>)
    2768:	2200      	movs	r2, #0
    276a:	0018      	movs	r0, r3
    276c:	4b0d      	ldr	r3, [pc, #52]	; (27a4 <udd_ep_alloc+0x1a4>)
    276e:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2770:	1dfb      	adds	r3, r7, #7
    2772:	7819      	ldrb	r1, [r3, #0]
    2774:	4b07      	ldr	r3, [pc, #28]	; (2794 <udd_ep_alloc+0x194>)
    2776:	2201      	movs	r2, #1
    2778:	0018      	movs	r0, r3
    277a:	4b0a      	ldr	r3, [pc, #40]	; (27a4 <udd_ep_alloc+0x1a4>)
    277c:	4798      	blx	r3

	return true;
    277e:	2301      	movs	r3, #1
}
    2780:	0018      	movs	r0, r3
    2782:	46bd      	mov	sp, r7
    2784:	b007      	add	sp, #28
    2786:	bd90      	pop	{r4, r7, pc}
    2788:	00003f39 	.word	0x00003f39
    278c:	000003ff 	.word	0x000003ff
    2790:	00002109 	.word	0x00002109
    2794:	20002764 	.word	0x20002764
    2798:	00003f61 	.word	0x00003f61
    279c:	000024bd 	.word	0x000024bd
    27a0:	00003b01 	.word	0x00003b01
    27a4:	00003bf9 	.word	0x00003bf9

000027a8 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    27a8:	b580      	push	{r7, lr}
    27aa:	b082      	sub	sp, #8
    27ac:	af00      	add	r7, sp, #0
    27ae:	0002      	movs	r2, r0
    27b0:	1dfb      	adds	r3, r7, #7
    27b2:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    27b4:	1dfb      	adds	r3, r7, #7
    27b6:	781a      	ldrb	r2, [r3, #0]
    27b8:	4b04      	ldr	r3, [pc, #16]	; (27cc <udd_ep_is_halted+0x24>)
    27ba:	0011      	movs	r1, r2
    27bc:	0018      	movs	r0, r3
    27be:	4b04      	ldr	r3, [pc, #16]	; (27d0 <udd_ep_is_halted+0x28>)
    27c0:	4798      	blx	r3
    27c2:	0003      	movs	r3, r0
}
    27c4:	0018      	movs	r0, r3
    27c6:	46bd      	mov	sp, r7
    27c8:	b002      	add	sp, #8
    27ca:	bd80      	pop	{r7, pc}
    27cc:	20002764 	.word	0x20002764
    27d0:	000044e1 	.word	0x000044e1

000027d4 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b084      	sub	sp, #16
    27d8:	af00      	add	r7, sp, #0
    27da:	0002      	movs	r2, r0
    27dc:	1dfb      	adds	r3, r7, #7
    27de:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    27e0:	230f      	movs	r3, #15
    27e2:	18fb      	adds	r3, r7, r3
    27e4:	1dfa      	adds	r2, r7, #7
    27e6:	7812      	ldrb	r2, [r2, #0]
    27e8:	210f      	movs	r1, #15
    27ea:	400a      	ands	r2, r1
    27ec:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    27ee:	230f      	movs	r3, #15
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	2b02      	cmp	r3, #2
    27f6:	d901      	bls.n	27fc <udd_ep_set_halt+0x28>
		return false;
    27f8:	2300      	movs	r3, #0
    27fa:	e00c      	b.n	2816 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    27fc:	1dfb      	adds	r3, r7, #7
    27fe:	781a      	ldrb	r2, [r3, #0]
    2800:	4b07      	ldr	r3, [pc, #28]	; (2820 <udd_ep_set_halt+0x4c>)
    2802:	0011      	movs	r1, r2
    2804:	0018      	movs	r0, r3
    2806:	4b07      	ldr	r3, [pc, #28]	; (2824 <udd_ep_set_halt+0x50>)
    2808:	4798      	blx	r3

	udd_ep_abort(ep);
    280a:	1dfb      	adds	r3, r7, #7
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	0018      	movs	r0, r3
    2810:	4b05      	ldr	r3, [pc, #20]	; (2828 <udd_ep_set_halt+0x54>)
    2812:	4798      	blx	r3
	return true;
    2814:	2301      	movs	r3, #1
}
    2816:	0018      	movs	r0, r3
    2818:	46bd      	mov	sp, r7
    281a:	b004      	add	sp, #16
    281c:	bd80      	pop	{r7, pc}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	20002764 	.word	0x20002764
    2824:	00004555 	.word	0x00004555
    2828:	00002505 	.word	0x00002505

0000282c <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    282c:	b580      	push	{r7, lr}
    282e:	b084      	sub	sp, #16
    2830:	af00      	add	r7, sp, #0
    2832:	0002      	movs	r2, r0
    2834:	1dfb      	adds	r3, r7, #7
    2836:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2838:	230f      	movs	r3, #15
    283a:	18fb      	adds	r3, r7, r3
    283c:	1dfa      	adds	r2, r7, #7
    283e:	7812      	ldrb	r2, [r2, #0]
    2840:	210f      	movs	r1, #15
    2842:	400a      	ands	r2, r1
    2844:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    2846:	230f      	movs	r3, #15
    2848:	18fb      	adds	r3, r7, r3
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	2b02      	cmp	r3, #2
    284e:	d901      	bls.n	2854 <udd_ep_clear_halt+0x28>
		return false;
    2850:	2300      	movs	r3, #0
    2852:	e01d      	b.n	2890 <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    2854:	1dfb      	adds	r3, r7, #7
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	0018      	movs	r0, r3
    285a:	4b0f      	ldr	r3, [pc, #60]	; (2898 <udd_ep_clear_halt+0x6c>)
    285c:	4798      	blx	r3
    285e:	0003      	movs	r3, r0
    2860:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    2862:	1dfb      	adds	r3, r7, #7
    2864:	781a      	ldrb	r2, [r3, #0]
    2866:	4b0d      	ldr	r3, [pc, #52]	; (289c <udd_ep_clear_halt+0x70>)
    2868:	0011      	movs	r1, r2
    286a:	0018      	movs	r0, r3
    286c:	4b0c      	ldr	r3, [pc, #48]	; (28a0 <udd_ep_clear_halt+0x74>)
    286e:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    2870:	68bb      	ldr	r3, [r7, #8]
    2872:	7c9b      	ldrb	r3, [r3, #18]
    2874:	2201      	movs	r2, #1
    2876:	4013      	ands	r3, r2
    2878:	b2db      	uxtb	r3, r3
    287a:	2b00      	cmp	r3, #0
    287c:	d007      	beq.n	288e <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    287e:	68bb      	ldr	r3, [r7, #8]
    2880:	7c9a      	ldrb	r2, [r3, #18]
    2882:	2101      	movs	r1, #1
    2884:	438a      	bics	r2, r1
    2886:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    2888:	68bb      	ldr	r3, [r7, #8]
    288a:	681b      	ldr	r3, [r3, #0]
    288c:	4798      	blx	r3
	}

	return true;
    288e:	2301      	movs	r3, #1
}
    2890:	0018      	movs	r0, r3
    2892:	46bd      	mov	sp, r7
    2894:	b004      	add	sp, #16
    2896:	bd80      	pop	{r7, pc}
    2898:	00002109 	.word	0x00002109
    289c:	20002764 	.word	0x20002764
    28a0:	000045b1 	.word	0x000045b1

000028a4 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    28a8:	4b07      	ldr	r3, [pc, #28]	; (28c8 <udd_ctrl_stall_data+0x24>)
    28aa:	2205      	movs	r2, #5
    28ac:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    28ae:	4b07      	ldr	r3, [pc, #28]	; (28cc <udd_ctrl_stall_data+0x28>)
    28b0:	2180      	movs	r1, #128	; 0x80
    28b2:	0018      	movs	r0, r3
    28b4:	4b06      	ldr	r3, [pc, #24]	; (28d0 <udd_ctrl_stall_data+0x2c>)
    28b6:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    28b8:	4b04      	ldr	r3, [pc, #16]	; (28cc <udd_ctrl_stall_data+0x28>)
    28ba:	2100      	movs	r1, #0
    28bc:	0018      	movs	r0, r3
    28be:	4b05      	ldr	r3, [pc, #20]	; (28d4 <udd_ctrl_stall_data+0x30>)
    28c0:	4798      	blx	r3
}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	46bd      	mov	sp, r7
    28c6:	bd80      	pop	{r7, pc}
    28c8:	200004c6 	.word	0x200004c6
    28cc:	20002764 	.word	0x20002764
    28d0:	00004555 	.word	0x00004555
    28d4:	000045b1 	.word	0x000045b1

000028d8 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    28d8:	b590      	push	{r4, r7, lr}
    28da:	b089      	sub	sp, #36	; 0x24
    28dc:	af00      	add	r7, sp, #0
    28de:	60ba      	str	r2, [r7, #8]
    28e0:	607b      	str	r3, [r7, #4]
    28e2:	230f      	movs	r3, #15
    28e4:	18fb      	adds	r3, r7, r3
    28e6:	1c02      	adds	r2, r0, #0
    28e8:	701a      	strb	r2, [r3, #0]
    28ea:	230e      	movs	r3, #14
    28ec:	18fb      	adds	r3, r7, r3
    28ee:	1c0a      	adds	r2, r1, #0
    28f0:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    28f2:	231d      	movs	r3, #29
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	220f      	movs	r2, #15
    28f8:	18ba      	adds	r2, r7, r2
    28fa:	7812      	ldrb	r2, [r2, #0]
    28fc:	210f      	movs	r1, #15
    28fe:	400a      	ands	r2, r1
    2900:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2902:	231d      	movs	r3, #29
    2904:	18fb      	adds	r3, r7, r3
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	2b02      	cmp	r3, #2
    290a:	d807      	bhi.n	291c <udd_ep_run+0x44>
    290c:	230f      	movs	r3, #15
    290e:	18fb      	adds	r3, r7, r3
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	0018      	movs	r0, r3
    2914:	4b9f      	ldr	r3, [pc, #636]	; (2b94 <udd_ep_run+0x2bc>)
    2916:	4798      	blx	r3
    2918:	1e03      	subs	r3, r0, #0
    291a:	d001      	beq.n	2920 <udd_ep_run+0x48>
		return false;
    291c:	2300      	movs	r3, #0
    291e:	e134      	b.n	2b8a <udd_ep_run+0x2b2>
	}

	ptr_job = udd_ep_get_job(ep);
    2920:	230f      	movs	r3, #15
    2922:	18fb      	adds	r3, r7, r3
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	0018      	movs	r0, r3
    2928:	4b9b      	ldr	r3, [pc, #620]	; (2b98 <udd_ep_run+0x2c0>)
    292a:	4798      	blx	r3
    292c:	0003      	movs	r3, r0
    292e:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    2930:	4b9a      	ldr	r3, [pc, #616]	; (2b9c <udd_ep_run+0x2c4>)
    2932:	4798      	blx	r3
    2934:	0003      	movs	r3, r0
    2936:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    2938:	69bb      	ldr	r3, [r7, #24]
    293a:	7c9b      	ldrb	r3, [r3, #18]
    293c:	2201      	movs	r2, #1
    293e:	4013      	ands	r3, r2
    2940:	b2db      	uxtb	r3, r3
    2942:	2b00      	cmp	r3, #0
    2944:	d005      	beq.n	2952 <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
    2946:	697b      	ldr	r3, [r7, #20]
    2948:	0018      	movs	r0, r3
    294a:	4b95      	ldr	r3, [pc, #596]	; (2ba0 <udd_ep_run+0x2c8>)
    294c:	4798      	blx	r3
		return false; /* Job already on going */
    294e:	2300      	movs	r3, #0
    2950:	e11b      	b.n	2b8a <udd_ep_run+0x2b2>
	}
	ptr_job->busy = true;
    2952:	69bb      	ldr	r3, [r7, #24]
    2954:	7c9a      	ldrb	r2, [r3, #18]
    2956:	2101      	movs	r1, #1
    2958:	430a      	orrs	r2, r1
    295a:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    295c:	697b      	ldr	r3, [r7, #20]
    295e:	0018      	movs	r0, r3
    2960:	4b8f      	ldr	r3, [pc, #572]	; (2ba0 <udd_ep_run+0x2c8>)
    2962:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    2964:	69bb      	ldr	r3, [r7, #24]
    2966:	68ba      	ldr	r2, [r7, #8]
    2968:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    296a:	69bb      	ldr	r3, [r7, #24]
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    2970:	69bb      	ldr	r3, [r7, #24]
    2972:	2200      	movs	r2, #0
    2974:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    2976:	69bb      	ldr	r3, [r7, #24]
    2978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    297a:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    297c:	69bb      	ldr	r3, [r7, #24]
    297e:	220e      	movs	r2, #14
    2980:	18ba      	adds	r2, r7, r2
    2982:	7812      	ldrb	r2, [r2, #0]
    2984:	2101      	movs	r1, #1
    2986:	400a      	ands	r2, r1
    2988:	1890      	adds	r0, r2, r2
    298a:	7c9a      	ldrb	r2, [r3, #18]
    298c:	2102      	movs	r1, #2
    298e:	438a      	bics	r2, r1
    2990:	1c11      	adds	r1, r2, #0
    2992:	1c02      	adds	r2, r0, #0
    2994:	430a      	orrs	r2, r1
    2996:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    2998:	69bb      	ldr	r3, [r7, #24]
    299a:	7c9a      	ldrb	r2, [r3, #18]
    299c:	2104      	movs	r1, #4
    299e:	438a      	bics	r2, r1
    29a0:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    29a2:	230f      	movs	r3, #15
    29a4:	18fb      	adds	r3, r7, r3
    29a6:	781b      	ldrb	r3, [r3, #0]
    29a8:	b25b      	sxtb	r3, r3
    29aa:	2b00      	cmp	r3, #0
    29ac:	db00      	blt.n	29b0 <udd_ep_run+0xd8>
    29ae:	e078      	b.n	2aa2 <udd_ep_run+0x1ca>
		if (0 != ptr_job->buf_size) {
    29b0:	69bb      	ldr	r3, [r7, #24]
    29b2:	689b      	ldr	r3, [r3, #8]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d03f      	beq.n	2a38 <udd_ep_run+0x160>
			next_trans = ptr_job->buf_size;
    29b8:	69bb      	ldr	r3, [r7, #24]
    29ba:	689a      	ldr	r2, [r3, #8]
    29bc:	231e      	movs	r3, #30
    29be:	18fb      	adds	r3, r7, r3
    29c0:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    29c2:	231e      	movs	r3, #30
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	881b      	ldrh	r3, [r3, #0]
    29c8:	4a76      	ldr	r2, [pc, #472]	; (2ba4 <udd_ep_run+0x2cc>)
    29ca:	4293      	cmp	r3, r2
    29cc:	d90d      	bls.n	29ea <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    29ce:	69bb      	ldr	r3, [r7, #24]
    29d0:	8a1b      	ldrh	r3, [r3, #16]
    29d2:	0019      	movs	r1, r3
    29d4:	4a73      	ldr	r2, [pc, #460]	; (2ba4 <udd_ep_run+0x2cc>)
    29d6:	4b74      	ldr	r3, [pc, #464]	; (2ba8 <udd_ep_run+0x2d0>)
    29d8:	0010      	movs	r0, r2
    29da:	4798      	blx	r3
    29dc:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    29de:	b29a      	uxth	r2, r3
    29e0:	231e      	movs	r3, #30
    29e2:	18fb      	adds	r3, r7, r3
    29e4:	496f      	ldr	r1, [pc, #444]	; (2ba4 <udd_ep_run+0x2cc>)
    29e6:	1a8a      	subs	r2, r1, r2
    29e8:	801a      	strh	r2, [r3, #0]
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    29ea:	69bb      	ldr	r3, [r7, #24]
    29ec:	7c9b      	ldrb	r3, [r3, #18]
    29ee:	2202      	movs	r2, #2
    29f0:	4013      	ands	r3, r2
    29f2:	b2db      	uxtb	r3, r3
    29f4:	2b00      	cmp	r3, #0
    29f6:	d00d      	beq.n	2a14 <udd_ep_run+0x13c>
					(0 == (next_trans % ptr_job->ep_size));
    29f8:	69bb      	ldr	r3, [r7, #24]
    29fa:	8a19      	ldrh	r1, [r3, #16]
    29fc:	231e      	movs	r3, #30
    29fe:	18fb      	adds	r3, r7, r3
    2a00:	881a      	ldrh	r2, [r3, #0]
    2a02:	4b6a      	ldr	r3, [pc, #424]	; (2bac <udd_ep_run+0x2d4>)
    2a04:	0010      	movs	r0, r2
    2a06:	4798      	blx	r3
    2a08:	000b      	movs	r3, r1
    2a0a:	b29b      	uxth	r3, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d101      	bne.n	2a14 <udd_ep_run+0x13c>
    2a10:	2301      	movs	r3, #1
    2a12:	e000      	b.n	2a16 <udd_ep_run+0x13e>
    2a14:	2300      	movs	r3, #0
    2a16:	b2db      	uxtb	r3, r3
    2a18:	1c1a      	adds	r2, r3, #0
    2a1a:	2301      	movs	r3, #1
    2a1c:	4013      	ands	r3, r2
    2a1e:	b2da      	uxtb	r2, r3
    2a20:	69bb      	ldr	r3, [r7, #24]
    2a22:	2101      	movs	r1, #1
    2a24:	400a      	ands	r2, r1
    2a26:	1890      	adds	r0, r2, r2
    2a28:	7c9a      	ldrb	r2, [r3, #18]
    2a2a:	2102      	movs	r1, #2
    2a2c:	438a      	bics	r2, r1
    2a2e:	1c11      	adds	r1, r2, #0
    2a30:	1c02      	adds	r2, r0, #0
    2a32:	430a      	orrs	r2, r1
    2a34:	749a      	strb	r2, [r3, #18]
    2a36:	e023      	b.n	2a80 <udd_ep_run+0x1a8>
		} else if (true == ptr_job->b_shortpacket) {
    2a38:	69bb      	ldr	r3, [r7, #24]
    2a3a:	7c9b      	ldrb	r3, [r3, #18]
    2a3c:	2202      	movs	r2, #2
    2a3e:	4013      	ands	r3, r2
    2a40:	b2db      	uxtb	r3, r3
    2a42:	2b00      	cmp	r3, #0
    2a44:	d009      	beq.n	2a5a <udd_ep_run+0x182>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2a46:	69bb      	ldr	r3, [r7, #24]
    2a48:	7c9a      	ldrb	r2, [r3, #18]
    2a4a:	2102      	movs	r1, #2
    2a4c:	438a      	bics	r2, r1
    2a4e:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    2a50:	231e      	movs	r3, #30
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	2200      	movs	r2, #0
    2a56:	801a      	strh	r2, [r3, #0]
    2a58:	e012      	b.n	2a80 <udd_ep_run+0x1a8>
		} else {
			ptr_job->busy = false;
    2a5a:	69bb      	ldr	r3, [r7, #24]
    2a5c:	7c9a      	ldrb	r2, [r3, #18]
    2a5e:	2101      	movs	r1, #1
    2a60:	438a      	bics	r2, r1
    2a62:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    2a64:	69bb      	ldr	r3, [r7, #24]
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d007      	beq.n	2a7c <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2a6c:	69bb      	ldr	r3, [r7, #24]
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	220f      	movs	r2, #15
    2a72:	18ba      	adds	r2, r7, r2
    2a74:	7812      	ldrb	r2, [r2, #0]
    2a76:	2100      	movs	r1, #0
    2a78:	2000      	movs	r0, #0
    2a7a:	4798      	blx	r3
			}
			return true;
    2a7c:	2301      	movs	r3, #1
    2a7e:	e084      	b.n	2b8a <udd_ep_run+0x2b2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    2a80:	69bb      	ldr	r3, [r7, #24]
    2a82:	685a      	ldr	r2, [r3, #4]
    2a84:	231e      	movs	r3, #30
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	881c      	ldrh	r4, [r3, #0]
    2a8a:	231d      	movs	r3, #29
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	7819      	ldrb	r1, [r3, #0]
    2a90:	4847      	ldr	r0, [pc, #284]	; (2bb0 <udd_ep_run+0x2d8>)
    2a92:	0023      	movs	r3, r4
    2a94:	4c47      	ldr	r4, [pc, #284]	; (2bb4 <udd_ep_run+0x2dc>)
    2a96:	47a0      	blx	r4
    2a98:	0003      	movs	r3, r0
		return (STATUS_OK ==
    2a9a:	425a      	negs	r2, r3
    2a9c:	4153      	adcs	r3, r2
    2a9e:	b2db      	uxtb	r3, r3
    2aa0:	e073      	b.n	2b8a <udd_ep_run+0x2b2>
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    2aa2:	69bb      	ldr	r3, [r7, #24]
    2aa4:	689b      	ldr	r3, [r3, #8]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d05d      	beq.n	2b66 <udd_ep_run+0x28e>
			next_trans = ptr_job->buf_size;
    2aaa:	69bb      	ldr	r3, [r7, #24]
    2aac:	689a      	ldr	r2, [r3, #8]
    2aae:	231e      	movs	r3, #30
    2ab0:	18fb      	adds	r3, r7, r3
    2ab2:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2ab4:	231e      	movs	r3, #30
    2ab6:	18fb      	adds	r3, r7, r3
    2ab8:	881b      	ldrh	r3, [r3, #0]
    2aba:	4a3a      	ldr	r2, [pc, #232]	; (2ba4 <udd_ep_run+0x2cc>)
    2abc:	4293      	cmp	r3, r2
    2abe:	d90e      	bls.n	2ade <udd_ep_run+0x206>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2ac0:	69bb      	ldr	r3, [r7, #24]
    2ac2:	8a1b      	ldrh	r3, [r3, #16]
    2ac4:	0019      	movs	r1, r3
    2ac6:	4a37      	ldr	r2, [pc, #220]	; (2ba4 <udd_ep_run+0x2cc>)
    2ac8:	4b37      	ldr	r3, [pc, #220]	; (2ba8 <udd_ep_run+0x2d0>)
    2aca:	0010      	movs	r0, r2
    2acc:	4798      	blx	r3
    2ace:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2ad0:	b29a      	uxth	r2, r3
    2ad2:	231e      	movs	r3, #30
    2ad4:	18fb      	adds	r3, r7, r3
    2ad6:	4933      	ldr	r1, [pc, #204]	; (2ba4 <udd_ep_run+0x2cc>)
    2ad8:	1a8a      	subs	r2, r1, r2
    2ada:	801a      	strh	r2, [r3, #0]
    2adc:	e010      	b.n	2b00 <udd_ep_run+0x228>
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    2ade:	69bb      	ldr	r3, [r7, #24]
    2ae0:	8a19      	ldrh	r1, [r3, #16]
    2ae2:	231e      	movs	r3, #30
    2ae4:	18fb      	adds	r3, r7, r3
    2ae6:	881a      	ldrh	r2, [r3, #0]
    2ae8:	4b30      	ldr	r3, [pc, #192]	; (2bac <udd_ep_run+0x2d4>)
    2aea:	0010      	movs	r0, r2
    2aec:	4798      	blx	r3
    2aee:	000b      	movs	r3, r1
    2af0:	b29a      	uxth	r2, r3
    2af2:	231e      	movs	r3, #30
    2af4:	18fb      	adds	r3, r7, r3
    2af6:	211e      	movs	r1, #30
    2af8:	1879      	adds	r1, r7, r1
    2afa:	8809      	ldrh	r1, [r1, #0]
    2afc:	1a8a      	subs	r2, r1, r2
    2afe:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    2b00:	69bb      	ldr	r3, [r7, #24]
    2b02:	8a1b      	ldrh	r3, [r3, #16]
    2b04:	221e      	movs	r2, #30
    2b06:	18ba      	adds	r2, r7, r2
    2b08:	8812      	ldrh	r2, [r2, #0]
    2b0a:	429a      	cmp	r2, r3
    2b0c:	d21a      	bcs.n	2b44 <udd_ep_run+0x26c>
				ptr_job->b_use_out_cache_buffer = true;
    2b0e:	69bb      	ldr	r3, [r7, #24]
    2b10:	7c9a      	ldrb	r2, [r3, #18]
    2b12:	2104      	movs	r1, #4
    2b14:	430a      	orrs	r2, r1
    2b16:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    2b18:	231d      	movs	r3, #29
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	781b      	ldrb	r3, [r3, #0]
    2b1e:	3b01      	subs	r3, #1
    2b20:	019a      	lsls	r2, r3, #6
    2b22:	4b25      	ldr	r3, [pc, #148]	; (2bb8 <udd_ep_run+0x2e0>)
    2b24:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    2b26:	69bb      	ldr	r3, [r7, #24]
    2b28:	8a1b      	ldrh	r3, [r3, #16]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2b2a:	001c      	movs	r4, r3
    2b2c:	231d      	movs	r3, #29
    2b2e:	18fb      	adds	r3, r7, r3
    2b30:	7819      	ldrb	r1, [r3, #0]
    2b32:	481f      	ldr	r0, [pc, #124]	; (2bb0 <udd_ep_run+0x2d8>)
    2b34:	0023      	movs	r3, r4
    2b36:	4c21      	ldr	r4, [pc, #132]	; (2bbc <udd_ep_run+0x2e4>)
    2b38:	47a0      	blx	r4
    2b3a:	0003      	movs	r3, r0
				return (STATUS_OK ==
    2b3c:	425a      	negs	r2, r3
    2b3e:	4153      	adcs	r3, r2
    2b40:	b2db      	uxtb	r3, r3
    2b42:	e022      	b.n	2b8a <udd_ep_run+0x2b2>
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2b44:	69bb      	ldr	r3, [r7, #24]
    2b46:	685a      	ldr	r2, [r3, #4]
    2b48:	231e      	movs	r3, #30
    2b4a:	18fb      	adds	r3, r7, r3
    2b4c:	881c      	ldrh	r4, [r3, #0]
    2b4e:	231d      	movs	r3, #29
    2b50:	18fb      	adds	r3, r7, r3
    2b52:	7819      	ldrb	r1, [r3, #0]
    2b54:	4816      	ldr	r0, [pc, #88]	; (2bb0 <udd_ep_run+0x2d8>)
    2b56:	0023      	movs	r3, r4
    2b58:	4c18      	ldr	r4, [pc, #96]	; (2bbc <udd_ep_run+0x2e4>)
    2b5a:	47a0      	blx	r4
    2b5c:	0003      	movs	r3, r0
				return (STATUS_OK ==
    2b5e:	425a      	negs	r2, r3
    2b60:	4153      	adcs	r3, r2
    2b62:	b2db      	uxtb	r3, r3
    2b64:	e011      	b.n	2b8a <udd_ep_run+0x2b2>
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    2b66:	69bb      	ldr	r3, [r7, #24]
    2b68:	7c9a      	ldrb	r2, [r3, #18]
    2b6a:	2101      	movs	r1, #1
    2b6c:	438a      	bics	r2, r1
    2b6e:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    2b70:	69bb      	ldr	r3, [r7, #24]
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	2b00      	cmp	r3, #0
    2b76:	d007      	beq.n	2b88 <udd_ep_run+0x2b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2b78:	69bb      	ldr	r3, [r7, #24]
    2b7a:	681b      	ldr	r3, [r3, #0]
    2b7c:	220f      	movs	r2, #15
    2b7e:	18ba      	adds	r2, r7, r2
    2b80:	7812      	ldrb	r2, [r2, #0]
    2b82:	2100      	movs	r1, #0
    2b84:	2000      	movs	r0, #0
    2b86:	4798      	blx	r3
			}
			return true;
    2b88:	2301      	movs	r3, #1
		}
	}
}
    2b8a:	0018      	movs	r0, r3
    2b8c:	46bd      	mov	sp, r7
    2b8e:	b009      	add	sp, #36	; 0x24
    2b90:	bd90      	pop	{r4, r7, pc}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	000027a9 	.word	0x000027a9
    2b98:	00002109 	.word	0x00002109
    2b9c:	00001e95 	.word	0x00001e95
    2ba0:	00001edd 	.word	0x00001edd
    2ba4:	00001fff 	.word	0x00001fff
    2ba8:	0001a061 	.word	0x0001a061
    2bac:	00019e8d 	.word	0x00019e8d
    2bb0:	20002764 	.word	0x20002764
    2bb4:	000046dd 	.word	0x000046dd
    2bb8:	200026e4 	.word	0x200026e4
    2bbc:	00004791 	.word	0x00004791

00002bc0 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    2bc0:	b580      	push	{r7, lr}
    2bc2:	b082      	sub	sp, #8
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	0002      	movs	r2, r0
    2bc8:	1dfb      	adds	r3, r7, #7
    2bca:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    2bcc:	1dfb      	adds	r3, r7, #7
    2bce:	781a      	ldrb	r2, [r3, #0]
    2bd0:	4b04      	ldr	r3, [pc, #16]	; (2be4 <udd_set_address+0x24>)
    2bd2:	0011      	movs	r1, r2
    2bd4:	0018      	movs	r0, r3
    2bd6:	4b04      	ldr	r3, [pc, #16]	; (2be8 <udd_set_address+0x28>)
    2bd8:	4798      	blx	r3
}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	46bd      	mov	sp, r7
    2bde:	b002      	add	sp, #8
    2be0:	bd80      	pop	{r7, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	20002764 	.word	0x20002764
    2be8:	00001f4d 	.word	0x00001f4d

00002bec <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    2bec:	b580      	push	{r7, lr}
    2bee:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    2bf0:	4b03      	ldr	r3, [pc, #12]	; (2c00 <udd_getaddress+0x14>)
    2bf2:	0018      	movs	r0, r3
    2bf4:	4b03      	ldr	r3, [pc, #12]	; (2c04 <udd_getaddress+0x18>)
    2bf6:	4798      	blx	r3
    2bf8:	0003      	movs	r3, r0
}
    2bfa:	0018      	movs	r0, r3
    2bfc:	46bd      	mov	sp, r7
    2bfe:	bd80      	pop	{r7, pc}
    2c00:	20002764 	.word	0x20002764
    2c04:	00001f31 	.word	0x00001f31

00002c08 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    2c08:	b580      	push	{r7, lr}
    2c0a:	b082      	sub	sp, #8
    2c0c:	af00      	add	r7, sp, #0
    2c0e:	6078      	str	r0, [r7, #4]
    2c10:	000a      	movs	r2, r1
    2c12:	1cbb      	adds	r3, r7, #2
    2c14:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    2c16:	4b05      	ldr	r3, [pc, #20]	; (2c2c <udd_set_setup_payload+0x24>)
    2c18:	687a      	ldr	r2, [r7, #4]
    2c1a:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2c1c:	4b03      	ldr	r3, [pc, #12]	; (2c2c <udd_set_setup_payload+0x24>)
    2c1e:	1cba      	adds	r2, r7, #2
    2c20:	8812      	ldrh	r2, [r2, #0]
    2c22:	819a      	strh	r2, [r3, #12]
}
    2c24:	46c0      	nop			; (mov r8, r8)
    2c26:	46bd      	mov	sp, r7
    2c28:	b002      	add	sp, #8
    2c2a:	bd80      	pop	{r7, pc}
    2c2c:	200028cc 	.word	0x200028cc

00002c30 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2c34:	4b17      	ldr	r3, [pc, #92]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c36:	781a      	ldrb	r2, [r3, #0]
    2c38:	4b17      	ldr	r3, [pc, #92]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c3a:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2c3c:	4b15      	ldr	r3, [pc, #84]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c3e:	785a      	ldrb	r2, [r3, #1]
    2c40:	4b15      	ldr	r3, [pc, #84]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c42:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2c44:	4b13      	ldr	r3, [pc, #76]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c46:	78db      	ldrb	r3, [r3, #3]
    2c48:	b29b      	uxth	r3, r3
    2c4a:	021b      	lsls	r3, r3, #8
    2c4c:	b29a      	uxth	r2, r3
    2c4e:	4b11      	ldr	r3, [pc, #68]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c50:	789b      	ldrb	r3, [r3, #2]
    2c52:	b29b      	uxth	r3, r3
    2c54:	18d3      	adds	r3, r2, r3
    2c56:	b29a      	uxth	r2, r3
    2c58:	4b0f      	ldr	r3, [pc, #60]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c5a:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2c5c:	4b0d      	ldr	r3, [pc, #52]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c5e:	795b      	ldrb	r3, [r3, #5]
    2c60:	b29b      	uxth	r3, r3
    2c62:	021b      	lsls	r3, r3, #8
    2c64:	b29a      	uxth	r2, r3
    2c66:	4b0b      	ldr	r3, [pc, #44]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c68:	791b      	ldrb	r3, [r3, #4]
    2c6a:	b29b      	uxth	r3, r3
    2c6c:	18d3      	adds	r3, r2, r3
    2c6e:	b29a      	uxth	r2, r3
    2c70:	4b09      	ldr	r3, [pc, #36]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c72:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2c74:	4b07      	ldr	r3, [pc, #28]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c76:	79db      	ldrb	r3, [r3, #7]
    2c78:	b29b      	uxth	r3, r3
    2c7a:	021b      	lsls	r3, r3, #8
    2c7c:	b29a      	uxth	r2, r3
    2c7e:	4b05      	ldr	r3, [pc, #20]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c80:	799b      	ldrb	r3, [r3, #6]
    2c82:	b29b      	uxth	r3, r3
    2c84:	18d3      	adds	r3, r2, r3
    2c86:	b29a      	uxth	r2, r3
    2c88:	4b03      	ldr	r3, [pc, #12]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c8a:	80da      	strh	r2, [r3, #6]
}
    2c8c:	46c0      	nop			; (mov r8, r8)
    2c8e:	46bd      	mov	sp, r7
    2c90:	bd80      	pop	{r7, pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	200028e4 	.word	0x200028e4
    2c98:	200028cc 	.word	0x200028cc

00002c9c <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    2c9c:	b5b0      	push	{r4, r5, r7, lr}
    2c9e:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2ca0:	4b09      	ldr	r3, [pc, #36]	; (2cc8 <udd_ctrl_send_zlp_in+0x2c>)
    2ca2:	2203      	movs	r2, #3
    2ca4:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2ca6:	4a09      	ldr	r2, [pc, #36]	; (2ccc <udd_ctrl_send_zlp_in+0x30>)
    2ca8:	4b09      	ldr	r3, [pc, #36]	; (2cd0 <udd_ctrl_send_zlp_in+0x34>)
    2caa:	0011      	movs	r1, r2
    2cac:	0018      	movs	r0, r3
    2cae:	4b09      	ldr	r3, [pc, #36]	; (2cd4 <udd_ctrl_send_zlp_in+0x38>)
    2cb0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2cb2:	4b09      	ldr	r3, [pc, #36]	; (2cd8 <udd_ctrl_send_zlp_in+0x3c>)
    2cb4:	689a      	ldr	r2, [r3, #8]
    2cb6:	4806      	ldr	r0, [pc, #24]	; (2cd0 <udd_ctrl_send_zlp_in+0x34>)
    2cb8:	2300      	movs	r3, #0
    2cba:	2100      	movs	r1, #0
    2cbc:	4c07      	ldr	r4, [pc, #28]	; (2cdc <udd_ctrl_send_zlp_in+0x40>)
    2cbe:	47a0      	blx	r4
}
    2cc0:	46c0      	nop			; (mov r8, r8)
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bdb0      	pop	{r4, r5, r7, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	200004c6 	.word	0x200004c6
    2ccc:	200028e4 	.word	0x200028e4
    2cd0:	20002764 	.word	0x20002764
    2cd4:	00004841 	.word	0x00004841
    2cd8:	200028cc 	.word	0x200028cc
    2cdc:	000046dd 	.word	0x000046dd

00002ce0 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    2ce0:	b590      	push	{r4, r7, lr}
    2ce2:	b083      	sub	sp, #12
    2ce4:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2ce6:	4b30      	ldr	r3, [pc, #192]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2ce8:	8999      	ldrh	r1, [r3, #12]
    2cea:	4b30      	ldr	r3, [pc, #192]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2cec:	881a      	ldrh	r2, [r3, #0]
    2cee:	1dbb      	adds	r3, r7, #6
    2cf0:	1a8a      	subs	r2, r1, r2
    2cf2:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    2cf4:	1dbb      	adds	r3, r7, #6
    2cf6:	881b      	ldrh	r3, [r3, #0]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d130      	bne.n	2d5e <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2cfc:	4b2c      	ldr	r3, [pc, #176]	; (2db0 <udd_ctrl_in_sent+0xd0>)
    2cfe:	881a      	ldrh	r2, [r3, #0]
    2d00:	4b2a      	ldr	r3, [pc, #168]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d02:	881b      	ldrh	r3, [r3, #0]
    2d04:	18d3      	adds	r3, r2, r3
    2d06:	b29a      	uxth	r2, r3
    2d08:	4b29      	ldr	r3, [pc, #164]	; (2db0 <udd_ctrl_in_sent+0xd0>)
    2d0a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2d0c:	4b26      	ldr	r3, [pc, #152]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d0e:	88da      	ldrh	r2, [r3, #6]
    2d10:	4b27      	ldr	r3, [pc, #156]	; (2db0 <udd_ctrl_in_sent+0xd0>)
    2d12:	881b      	ldrh	r3, [r3, #0]
    2d14:	429a      	cmp	r2, r3
    2d16:	d003      	beq.n	2d20 <udd_ctrl_in_sent+0x40>
    2d18:	4b26      	ldr	r3, [pc, #152]	; (2db4 <udd_ctrl_in_sent+0xd4>)
    2d1a:	781b      	ldrb	r3, [r3, #0]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d009      	beq.n	2d34 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d20:	4b25      	ldr	r3, [pc, #148]	; (2db8 <udd_ctrl_in_sent+0xd8>)
    2d22:	2204      	movs	r2, #4
    2d24:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2d26:	4a25      	ldr	r2, [pc, #148]	; (2dbc <udd_ctrl_in_sent+0xdc>)
    2d28:	4b25      	ldr	r3, [pc, #148]	; (2dc0 <udd_ctrl_in_sent+0xe0>)
    2d2a:	0011      	movs	r1, r2
    2d2c:	0018      	movs	r0, r3
    2d2e:	4b25      	ldr	r3, [pc, #148]	; (2dc4 <udd_ctrl_in_sent+0xe4>)
    2d30:	4798      	blx	r3
			return;
    2d32:	e035      	b.n	2da0 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2d34:	4b1c      	ldr	r3, [pc, #112]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d36:	695b      	ldr	r3, [r3, #20]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d010      	beq.n	2d5e <udd_ctrl_in_sent+0x7e>
    2d3c:	4b1a      	ldr	r3, [pc, #104]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d3e:	695b      	ldr	r3, [r3, #20]
    2d40:	4798      	blx	r3
    2d42:	0003      	movs	r3, r0
    2d44:	001a      	movs	r2, r3
    2d46:	2301      	movs	r3, #1
    2d48:	4053      	eors	r3, r2
    2d4a:	b2db      	uxtb	r3, r3
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d106      	bne.n	2d5e <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    2d50:	4b16      	ldr	r3, [pc, #88]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d52:	2200      	movs	r2, #0
    2d54:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2d56:	1dbb      	adds	r3, r7, #6
    2d58:	4a13      	ldr	r2, [pc, #76]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d5a:	8992      	ldrh	r2, [r2, #12]
    2d5c:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2d5e:	1dbb      	adds	r3, r7, #6
    2d60:	881b      	ldrh	r3, [r3, #0]
    2d62:	2b07      	cmp	r3, #7
    2d64:	d906      	bls.n	2d74 <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2d66:	1dbb      	adds	r3, r7, #6
    2d68:	2208      	movs	r2, #8
    2d6a:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    2d6c:	4b11      	ldr	r3, [pc, #68]	; (2db4 <udd_ctrl_in_sent+0xd4>)
    2d6e:	2200      	movs	r2, #0
    2d70:	701a      	strb	r2, [r3, #0]
    2d72:	e002      	b.n	2d7a <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    2d74:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <udd_ctrl_in_sent+0xd4>)
    2d76:	2201      	movs	r2, #1
    2d78:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2d7a:	4b0b      	ldr	r3, [pc, #44]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d7c:	689b      	ldr	r3, [r3, #8]
    2d7e:	4a0b      	ldr	r2, [pc, #44]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d80:	8812      	ldrh	r2, [r2, #0]
    2d82:	189a      	adds	r2, r3, r2
    2d84:	1dbb      	adds	r3, r7, #6
    2d86:	881b      	ldrh	r3, [r3, #0]
    2d88:	480d      	ldr	r0, [pc, #52]	; (2dc0 <udd_ctrl_in_sent+0xe0>)
    2d8a:	2100      	movs	r1, #0
    2d8c:	4c0e      	ldr	r4, [pc, #56]	; (2dc8 <udd_ctrl_in_sent+0xe8>)
    2d8e:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    2d90:	4b06      	ldr	r3, [pc, #24]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d92:	881a      	ldrh	r2, [r3, #0]
    2d94:	1dbb      	adds	r3, r7, #6
    2d96:	881b      	ldrh	r3, [r3, #0]
    2d98:	18d3      	adds	r3, r2, r3
    2d9a:	b29a      	uxth	r2, r3
    2d9c:	4b03      	ldr	r3, [pc, #12]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d9e:	801a      	strh	r2, [r3, #0]
}
    2da0:	46bd      	mov	sp, r7
    2da2:	b003      	add	sp, #12
    2da4:	bd90      	pop	{r4, r7, pc}
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	200028cc 	.word	0x200028cc
    2dac:	200004ca 	.word	0x200004ca
    2db0:	200004c8 	.word	0x200004c8
    2db4:	2000051d 	.word	0x2000051d
    2db8:	200004c6 	.word	0x200004c6
    2dbc:	200028e4 	.word	0x200028e4
    2dc0:	20002764 	.word	0x20002764
    2dc4:	00004841 	.word	0x00004841
    2dc8:	000046dd 	.word	0x000046dd

00002dcc <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    2dcc:	b590      	push	{r4, r7, lr}
    2dce:	b085      	sub	sp, #20
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2dd8:	230e      	movs	r3, #14
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	68ba      	ldr	r2, [r7, #8]
    2dde:	8812      	ldrh	r2, [r2, #0]
    2de0:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2de2:	4b45      	ldr	r3, [pc, #276]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2de4:	899b      	ldrh	r3, [r3, #12]
    2de6:	001a      	movs	r2, r3
    2de8:	4b44      	ldr	r3, [pc, #272]	; (2efc <udd_ctrl_out_received+0x130>)
    2dea:	881b      	ldrh	r3, [r3, #0]
    2dec:	0019      	movs	r1, r3
    2dee:	230e      	movs	r3, #14
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	881b      	ldrh	r3, [r3, #0]
    2df4:	18cb      	adds	r3, r1, r3
    2df6:	429a      	cmp	r2, r3
    2df8:	da07      	bge.n	2e0a <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2dfa:	4b3f      	ldr	r3, [pc, #252]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2dfc:	8999      	ldrh	r1, [r3, #12]
    2dfe:	4b3f      	ldr	r3, [pc, #252]	; (2efc <udd_ctrl_out_received+0x130>)
    2e00:	881a      	ldrh	r2, [r3, #0]
    2e02:	230e      	movs	r3, #14
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	1a8a      	subs	r2, r1, r2
    2e08:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2e0a:	4b3b      	ldr	r3, [pc, #236]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e0c:	689b      	ldr	r3, [r3, #8]
    2e0e:	4a3b      	ldr	r2, [pc, #236]	; (2efc <udd_ctrl_out_received+0x130>)
    2e10:	8812      	ldrh	r2, [r2, #0]
    2e12:	1898      	adds	r0, r3, r2
    2e14:	230e      	movs	r3, #14
    2e16:	18fb      	adds	r3, r7, r3
    2e18:	881a      	ldrh	r2, [r3, #0]
    2e1a:	4b39      	ldr	r3, [pc, #228]	; (2f00 <udd_ctrl_out_received+0x134>)
    2e1c:	0019      	movs	r1, r3
    2e1e:	4b39      	ldr	r3, [pc, #228]	; (2f04 <udd_ctrl_out_received+0x138>)
    2e20:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2e22:	4b36      	ldr	r3, [pc, #216]	; (2efc <udd_ctrl_out_received+0x130>)
    2e24:	881a      	ldrh	r2, [r3, #0]
    2e26:	230e      	movs	r3, #14
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	881b      	ldrh	r3, [r3, #0]
    2e2c:	18d3      	adds	r3, r2, r3
    2e2e:	b29a      	uxth	r2, r3
    2e30:	4b32      	ldr	r3, [pc, #200]	; (2efc <udd_ctrl_out_received+0x130>)
    2e32:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e34:	230e      	movs	r3, #14
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	881b      	ldrh	r3, [r3, #0]
    2e3a:	2b08      	cmp	r3, #8
    2e3c:	d10a      	bne.n	2e54 <udd_ctrl_out_received+0x88>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2e3e:	4b2e      	ldr	r3, [pc, #184]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e40:	88db      	ldrh	r3, [r3, #6]
    2e42:	001a      	movs	r2, r3
    2e44:	4b30      	ldr	r3, [pc, #192]	; (2f08 <udd_ctrl_out_received+0x13c>)
    2e46:	881b      	ldrh	r3, [r3, #0]
    2e48:	0019      	movs	r1, r3
    2e4a:	4b2c      	ldr	r3, [pc, #176]	; (2efc <udd_ctrl_out_received+0x130>)
    2e4c:	881b      	ldrh	r3, [r3, #0]
    2e4e:	18cb      	adds	r3, r1, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e50:	429a      	cmp	r2, r3
    2e52:	dc1b      	bgt.n	2e8c <udd_ctrl_out_received+0xc0>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e54:	4b29      	ldr	r3, [pc, #164]	; (2efc <udd_ctrl_out_received+0x130>)
    2e56:	881a      	ldrh	r2, [r3, #0]
    2e58:	4b27      	ldr	r3, [pc, #156]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e5a:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e5c:	4b26      	ldr	r3, [pc, #152]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e5e:	695b      	ldr	r3, [r3, #20]
    2e60:	2b00      	cmp	r3, #0
    2e62:	d010      	beq.n	2e86 <udd_ctrl_out_received+0xba>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e64:	4b24      	ldr	r3, [pc, #144]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e66:	695b      	ldr	r3, [r3, #20]
    2e68:	4798      	blx	r3
    2e6a:	0003      	movs	r3, r0
    2e6c:	001a      	movs	r2, r3
    2e6e:	2301      	movs	r3, #1
    2e70:	4053      	eors	r3, r2
    2e72:	b2db      	uxtb	r3, r3
    2e74:	2b00      	cmp	r3, #0
    2e76:	d006      	beq.n	2e86 <udd_ctrl_out_received+0xba>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2e78:	4b24      	ldr	r3, [pc, #144]	; (2f0c <udd_ctrl_out_received+0x140>)
    2e7a:	2205      	movs	r2, #5
    2e7c:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    2e7e:	2000      	movs	r0, #0
    2e80:	4b23      	ldr	r3, [pc, #140]	; (2f10 <udd_ctrl_out_received+0x144>)
    2e82:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    2e84:	e035      	b.n	2ef2 <udd_ctrl_out_received+0x126>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    2e86:	4b23      	ldr	r3, [pc, #140]	; (2f14 <udd_ctrl_out_received+0x148>)
    2e88:	4798      	blx	r3
		return;
    2e8a:	e032      	b.n	2ef2 <udd_ctrl_out_received+0x126>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e8c:	4b1a      	ldr	r3, [pc, #104]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e8e:	899a      	ldrh	r2, [r3, #12]
    2e90:	4b1a      	ldr	r3, [pc, #104]	; (2efc <udd_ctrl_out_received+0x130>)
    2e92:	881b      	ldrh	r3, [r3, #0]
    2e94:	429a      	cmp	r2, r3
    2e96:	d126      	bne.n	2ee6 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    2e98:	4b17      	ldr	r3, [pc, #92]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e9a:	695b      	ldr	r3, [r3, #20]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d106      	bne.n	2eae <udd_ctrl_out_received+0xe2>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2ea0:	4b1a      	ldr	r3, [pc, #104]	; (2f0c <udd_ctrl_out_received+0x140>)
    2ea2:	2205      	movs	r2, #5
    2ea4:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2ea6:	2000      	movs	r0, #0
    2ea8:	4b19      	ldr	r3, [pc, #100]	; (2f10 <udd_ctrl_out_received+0x144>)
    2eaa:	4798      	blx	r3
			return;
    2eac:	e021      	b.n	2ef2 <udd_ctrl_out_received+0x126>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2eae:	4b12      	ldr	r3, [pc, #72]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2eb0:	695b      	ldr	r3, [r3, #20]
    2eb2:	4798      	blx	r3
    2eb4:	0003      	movs	r3, r0
    2eb6:	001a      	movs	r2, r3
    2eb8:	2301      	movs	r3, #1
    2eba:	4053      	eors	r3, r2
    2ebc:	b2db      	uxtb	r3, r3
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d006      	beq.n	2ed0 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2ec2:	4b12      	ldr	r3, [pc, #72]	; (2f0c <udd_ctrl_out_received+0x140>)
    2ec4:	2205      	movs	r2, #5
    2ec6:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2ec8:	2000      	movs	r0, #0
    2eca:	4b11      	ldr	r3, [pc, #68]	; (2f10 <udd_ctrl_out_received+0x144>)
    2ecc:	4798      	blx	r3
			return;
    2ece:	e010      	b.n	2ef2 <udd_ctrl_out_received+0x126>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ed0:	4b0d      	ldr	r3, [pc, #52]	; (2f08 <udd_ctrl_out_received+0x13c>)
    2ed2:	881a      	ldrh	r2, [r3, #0]
    2ed4:	4b09      	ldr	r3, [pc, #36]	; (2efc <udd_ctrl_out_received+0x130>)
    2ed6:	881b      	ldrh	r3, [r3, #0]
    2ed8:	18d3      	adds	r3, r2, r3
    2eda:	b29a      	uxth	r2, r3
    2edc:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <udd_ctrl_out_received+0x13c>)
    2ede:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    2ee0:	4b06      	ldr	r3, [pc, #24]	; (2efc <udd_ctrl_out_received+0x130>)
    2ee2:	2200      	movs	r2, #0
    2ee4:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2ee6:	4a06      	ldr	r2, [pc, #24]	; (2f00 <udd_ctrl_out_received+0x134>)
    2ee8:	480b      	ldr	r0, [pc, #44]	; (2f18 <udd_ctrl_out_received+0x14c>)
    2eea:	2308      	movs	r3, #8
    2eec:	2100      	movs	r1, #0
    2eee:	4c0b      	ldr	r4, [pc, #44]	; (2f1c <udd_ctrl_out_received+0x150>)
    2ef0:	47a0      	blx	r4
}
    2ef2:	46bd      	mov	sp, r7
    2ef4:	b005      	add	sp, #20
    2ef6:	bd90      	pop	{r4, r7, pc}
    2ef8:	200028cc 	.word	0x200028cc
    2efc:	200004ca 	.word	0x200004ca
    2f00:	200028e4 	.word	0x200028e4
    2f04:	0001c1e5 	.word	0x0001c1e5
    2f08:	200004c8 	.word	0x200004c8
    2f0c:	200004c6 	.word	0x200004c6
    2f10:	000027d5 	.word	0x000027d5
    2f14:	00002c9d 	.word	0x00002c9d
    2f18:	20002764 	.word	0x20002764
    2f1c:	00004791 	.word	0x00004791

00002f20 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    2f20:	b590      	push	{r4, r7, lr}
    2f22:	b085      	sub	sp, #20
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
    2f28:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2f2e:	4b29      	ldr	r3, [pc, #164]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2f30:	781b      	ldrb	r3, [r3, #0]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d009      	beq.n	2f4a <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    2f36:	4b28      	ldr	r3, [pc, #160]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2f38:	691b      	ldr	r3, [r3, #16]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d002      	beq.n	2f44 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    2f3e:	4b26      	ldr	r3, [pc, #152]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2f40:	691b      	ldr	r3, [r3, #16]
    2f42:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2f44:	4b23      	ldr	r3, [pc, #140]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2f46:	2200      	movs	r2, #0
    2f48:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    2f4a:	68fb      	ldr	r3, [r7, #12]
    2f4c:	881b      	ldrh	r3, [r3, #0]
    2f4e:	2b08      	cmp	r3, #8
    2f50:	d002      	beq.n	2f58 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    2f52:	4b22      	ldr	r3, [pc, #136]	; (2fdc <_usb_ep0_on_setup+0xbc>)
    2f54:	4798      	blx	r3
		return;
    2f56:	e03a      	b.n	2fce <_usb_ep0_on_setup+0xae>
	} else {
		udd_ctrl_fetch_ram();
    2f58:	4b21      	ldr	r3, [pc, #132]	; (2fe0 <_usb_ep0_on_setup+0xc0>)
    2f5a:	4798      	blx	r3
		if (false == udc_process_setup()) {
    2f5c:	4b21      	ldr	r3, [pc, #132]	; (2fe4 <_usb_ep0_on_setup+0xc4>)
    2f5e:	4798      	blx	r3
    2f60:	0003      	movs	r3, r0
    2f62:	001a      	movs	r2, r3
    2f64:	2301      	movs	r3, #1
    2f66:	4053      	eors	r3, r2
    2f68:	b2db      	uxtb	r3, r3
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d002      	beq.n	2f74 <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    2f6e:	4b1b      	ldr	r3, [pc, #108]	; (2fdc <_usb_ep0_on_setup+0xbc>)
    2f70:	4798      	blx	r3
			return;
    2f72:	e02c      	b.n	2fce <_usb_ep0_on_setup+0xae>
		} else if (Udd_setup_is_in()) {
    2f74:	4b18      	ldr	r3, [pc, #96]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2f76:	781b      	ldrb	r3, [r3, #0]
    2f78:	b25b      	sxtb	r3, r3
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	da11      	bge.n	2fa2 <_usb_ep0_on_setup+0x82>
			udd_ctrl_prev_payload_nb_trans = 0;
    2f7e:	4b1a      	ldr	r3, [pc, #104]	; (2fe8 <_usb_ep0_on_setup+0xc8>)
    2f80:	2200      	movs	r2, #0
    2f82:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    2f84:	4b19      	ldr	r3, [pc, #100]	; (2fec <_usb_ep0_on_setup+0xcc>)
    2f86:	2200      	movs	r2, #0
    2f88:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2f8a:	4b12      	ldr	r3, [pc, #72]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2f8c:	2202      	movs	r2, #2
    2f8e:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2f90:	4a17      	ldr	r2, [pc, #92]	; (2ff0 <_usb_ep0_on_setup+0xd0>)
    2f92:	4818      	ldr	r0, [pc, #96]	; (2ff4 <_usb_ep0_on_setup+0xd4>)
    2f94:	2308      	movs	r3, #8
    2f96:	2100      	movs	r1, #0
    2f98:	4c17      	ldr	r4, [pc, #92]	; (2ff8 <_usb_ep0_on_setup+0xd8>)
    2f9a:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2f9c:	4b17      	ldr	r3, [pc, #92]	; (2ffc <_usb_ep0_on_setup+0xdc>)
    2f9e:	4798      	blx	r3
    2fa0:	e015      	b.n	2fce <_usb_ep0_on_setup+0xae>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    2fa2:	4b0d      	ldr	r3, [pc, #52]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2fa4:	88db      	ldrh	r3, [r3, #6]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d102      	bne.n	2fb0 <_usb_ep0_on_setup+0x90>
				udd_ctrl_send_zlp_in();
    2faa:	4b15      	ldr	r3, [pc, #84]	; (3000 <_usb_ep0_on_setup+0xe0>)
    2fac:	4798      	blx	r3
				return;
    2fae:	e00e      	b.n	2fce <_usb_ep0_on_setup+0xae>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    2fb0:	4b0d      	ldr	r3, [pc, #52]	; (2fe8 <_usb_ep0_on_setup+0xc8>)
    2fb2:	2200      	movs	r2, #0
    2fb4:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    2fb6:	4b0d      	ldr	r3, [pc, #52]	; (2fec <_usb_ep0_on_setup+0xcc>)
    2fb8:	2200      	movs	r2, #0
    2fba:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2fbc:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2fbe:	2201      	movs	r2, #1
    2fc0:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2fc2:	4a0b      	ldr	r2, [pc, #44]	; (2ff0 <_usb_ep0_on_setup+0xd0>)
    2fc4:	480b      	ldr	r0, [pc, #44]	; (2ff4 <_usb_ep0_on_setup+0xd4>)
    2fc6:	2308      	movs	r3, #8
    2fc8:	2100      	movs	r1, #0
    2fca:	4c0b      	ldr	r4, [pc, #44]	; (2ff8 <_usb_ep0_on_setup+0xd8>)
    2fcc:	47a0      	blx	r4
			}
		}
	}
}
    2fce:	46bd      	mov	sp, r7
    2fd0:	b005      	add	sp, #20
    2fd2:	bd90      	pop	{r4, r7, pc}
    2fd4:	200004c6 	.word	0x200004c6
    2fd8:	200028cc 	.word	0x200028cc
    2fdc:	000028a5 	.word	0x000028a5
    2fe0:	00002c31 	.word	0x00002c31
    2fe4:	000015c9 	.word	0x000015c9
    2fe8:	200004c8 	.word	0x200004c8
    2fec:	200004ca 	.word	0x200004ca
    2ff0:	200028e4 	.word	0x200028e4
    2ff4:	20002764 	.word	0x20002764
    2ff8:	00004791 	.word	0x00004791
    2ffc:	00002ce1 	.word	0x00002ce1
    3000:	00002c9d 	.word	0x00002c9d

00003004 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    3004:	b580      	push	{r7, lr}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3010:	4b0a      	ldr	r3, [pc, #40]	; (303c <udd_ctrl_underflow+0x38>)
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	2b01      	cmp	r3, #1
    3016:	d102      	bne.n	301e <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    3018:	4b09      	ldr	r3, [pc, #36]	; (3040 <udd_ctrl_underflow+0x3c>)
    301a:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    301c:	e00a      	b.n	3034 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    301e:	4b07      	ldr	r3, [pc, #28]	; (303c <udd_ctrl_underflow+0x38>)
    3020:	781b      	ldrb	r3, [r3, #0]
    3022:	2b04      	cmp	r3, #4
    3024:	d106      	bne.n	3034 <udd_ctrl_underflow+0x30>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3026:	68fb      	ldr	r3, [r7, #12]
    3028:	799a      	ldrb	r2, [r3, #6]
    302a:	4b06      	ldr	r3, [pc, #24]	; (3044 <udd_ctrl_underflow+0x40>)
    302c:	0011      	movs	r1, r2
    302e:	0018      	movs	r0, r3
    3030:	4b05      	ldr	r3, [pc, #20]	; (3048 <udd_ctrl_underflow+0x44>)
    3032:	4798      	blx	r3
}
    3034:	46c0      	nop			; (mov r8, r8)
    3036:	46bd      	mov	sp, r7
    3038:	b004      	add	sp, #16
    303a:	bd80      	pop	{r7, pc}
    303c:	200004c6 	.word	0x200004c6
    3040:	00002c9d 	.word	0x00002c9d
    3044:	20002764 	.word	0x20002764
    3048:	00004555 	.word	0x00004555

0000304c <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    304c:	b580      	push	{r7, lr}
    304e:	b084      	sub	sp, #16
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3058:	4b0b      	ldr	r3, [pc, #44]	; (3088 <udd_ctrl_overflow+0x3c>)
    305a:	781b      	ldrb	r3, [r3, #0]
    305c:	2b02      	cmp	r3, #2
    305e:	d103      	bne.n	3068 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3060:	4b09      	ldr	r3, [pc, #36]	; (3088 <udd_ctrl_overflow+0x3c>)
    3062:	2204      	movs	r2, #4
    3064:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    3066:	e00a      	b.n	307e <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3068:	4b07      	ldr	r3, [pc, #28]	; (3088 <udd_ctrl_overflow+0x3c>)
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	2b03      	cmp	r3, #3
    306e:	d106      	bne.n	307e <udd_ctrl_overflow+0x32>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3070:	68fb      	ldr	r3, [r7, #12]
    3072:	799a      	ldrb	r2, [r3, #6]
    3074:	4b05      	ldr	r3, [pc, #20]	; (308c <udd_ctrl_overflow+0x40>)
    3076:	0011      	movs	r1, r2
    3078:	0018      	movs	r0, r3
    307a:	4b05      	ldr	r3, [pc, #20]	; (3090 <udd_ctrl_overflow+0x44>)
    307c:	4798      	blx	r3
}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	46bd      	mov	sp, r7
    3082:	b004      	add	sp, #16
    3084:	bd80      	pop	{r7, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	200004c6 	.word	0x200004c6
    308c:	20002764 	.word	0x20002764
    3090:	00004555 	.word	0x00004555

00003094 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    3094:	b580      	push	{r7, lr}
    3096:	b084      	sub	sp, #16
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
    309c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    309e:	683b      	ldr	r3, [r7, #0]
    30a0:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    30a2:	68fb      	ldr	r3, [r7, #12]
    30a4:	799b      	ldrb	r3, [r3, #6]
    30a6:	b25b      	sxtb	r3, r3
    30a8:	2b00      	cmp	r3, #0
    30aa:	da04      	bge.n	30b6 <_usb_ep0_on_tansfer_fail+0x22>
		udd_ctrl_underflow(pointer);
    30ac:	683b      	ldr	r3, [r7, #0]
    30ae:	0018      	movs	r0, r3
    30b0:	4b05      	ldr	r3, [pc, #20]	; (30c8 <_usb_ep0_on_tansfer_fail+0x34>)
    30b2:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    30b4:	e003      	b.n	30be <_usb_ep0_on_tansfer_fail+0x2a>
		udd_ctrl_overflow(pointer);
    30b6:	683b      	ldr	r3, [r7, #0]
    30b8:	0018      	movs	r0, r3
    30ba:	4b04      	ldr	r3, [pc, #16]	; (30cc <_usb_ep0_on_tansfer_fail+0x38>)
    30bc:	4798      	blx	r3
}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	46bd      	mov	sp, r7
    30c2:	b004      	add	sp, #16
    30c4:	bd80      	pop	{r7, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	00003005 	.word	0x00003005
    30cc:	0000304d 	.word	0x0000304d

000030d0 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
    30d8:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    30da:	4b0f      	ldr	r3, [pc, #60]	; (3118 <_usb_ep0_on_tansfer_ok+0x48>)
    30dc:	781b      	ldrb	r3, [r3, #0]
    30de:	2b01      	cmp	r3, #1
    30e0:	d104      	bne.n	30ec <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    30e2:	683b      	ldr	r3, [r7, #0]
    30e4:	0018      	movs	r0, r3
    30e6:	4b0d      	ldr	r3, [pc, #52]	; (311c <_usb_ep0_on_tansfer_ok+0x4c>)
    30e8:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    30ea:	e010      	b.n	310e <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    30ec:	4b0a      	ldr	r3, [pc, #40]	; (3118 <_usb_ep0_on_tansfer_ok+0x48>)
    30ee:	781b      	ldrb	r3, [r3, #0]
    30f0:	2b02      	cmp	r3, #2
    30f2:	d102      	bne.n	30fa <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    30f4:	4b0a      	ldr	r3, [pc, #40]	; (3120 <_usb_ep0_on_tansfer_ok+0x50>)
    30f6:	4798      	blx	r3
}
    30f8:	e009      	b.n	310e <_usb_ep0_on_tansfer_ok+0x3e>
			if (NULL != udd_g_ctrlreq.callback) {
    30fa:	4b0a      	ldr	r3, [pc, #40]	; (3124 <_usb_ep0_on_tansfer_ok+0x54>)
    30fc:	691b      	ldr	r3, [r3, #16]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    3102:	4b08      	ldr	r3, [pc, #32]	; (3124 <_usb_ep0_on_tansfer_ok+0x54>)
    3104:	691b      	ldr	r3, [r3, #16]
    3106:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3108:	4b03      	ldr	r3, [pc, #12]	; (3118 <_usb_ep0_on_tansfer_ok+0x48>)
    310a:	2200      	movs	r2, #0
    310c:	701a      	strb	r2, [r3, #0]
}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	46bd      	mov	sp, r7
    3112:	b002      	add	sp, #8
    3114:	bd80      	pop	{r7, pc}
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	200004c6 	.word	0x200004c6
    311c:	00002dcd 	.word	0x00002dcd
    3120:	00002ce1 	.word	0x00002ce1
    3124:	200028cc 	.word	0x200028cc

00003128 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    3128:	b590      	push	{r4, r7, lr}
    312a:	b085      	sub	sp, #20
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    3130:	230c      	movs	r3, #12
    3132:	18fb      	adds	r3, r7, r3
    3134:	0018      	movs	r0, r3
    3136:	4b21      	ldr	r3, [pc, #132]	; (31bc <udd_ctrl_ep_enable+0x94>)
    3138:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    313a:	230c      	movs	r3, #12
    313c:	18fb      	adds	r3, r7, r3
    313e:	2200      	movs	r2, #0
    3140:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    3142:	230c      	movs	r3, #12
    3144:	18fa      	adds	r2, r7, r3
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	0011      	movs	r1, r2
    314a:	0018      	movs	r0, r3
    314c:	4b1c      	ldr	r3, [pc, #112]	; (31c0 <udd_ctrl_ep_enable+0x98>)
    314e:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3150:	4a1c      	ldr	r2, [pc, #112]	; (31c4 <udd_ctrl_ep_enable+0x9c>)
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	0011      	movs	r1, r2
    3156:	0018      	movs	r0, r3
    3158:	4b1b      	ldr	r3, [pc, #108]	; (31c8 <udd_ctrl_ep_enable+0xa0>)
    315a:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    315c:	4b1b      	ldr	r3, [pc, #108]	; (31cc <udd_ctrl_ep_enable+0xa4>)
    315e:	6878      	ldr	r0, [r7, #4]
    3160:	2202      	movs	r2, #2
    3162:	2100      	movs	r1, #0
    3164:	4c1a      	ldr	r4, [pc, #104]	; (31d0 <udd_ctrl_ep_enable+0xa8>)
    3166:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3168:	4b1a      	ldr	r3, [pc, #104]	; (31d4 <udd_ctrl_ep_enable+0xac>)
    316a:	6878      	ldr	r0, [r7, #4]
    316c:	2200      	movs	r2, #0
    316e:	2100      	movs	r1, #0
    3170:	4c17      	ldr	r4, [pc, #92]	; (31d0 <udd_ctrl_ep_enable+0xa8>)
    3172:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3174:	4b18      	ldr	r3, [pc, #96]	; (31d8 <udd_ctrl_ep_enable+0xb0>)
    3176:	6878      	ldr	r0, [r7, #4]
    3178:	2201      	movs	r2, #1
    317a:	2100      	movs	r1, #0
    317c:	4c14      	ldr	r4, [pc, #80]	; (31d0 <udd_ctrl_ep_enable+0xa8>)
    317e:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	2202      	movs	r2, #2
    3184:	2100      	movs	r1, #0
    3186:	0018      	movs	r0, r3
    3188:	4b14      	ldr	r3, [pc, #80]	; (31dc <udd_ctrl_ep_enable+0xb4>)
    318a:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	2200      	movs	r2, #0
    3190:	2100      	movs	r1, #0
    3192:	0018      	movs	r0, r3
    3194:	4b11      	ldr	r3, [pc, #68]	; (31dc <udd_ctrl_ep_enable+0xb4>)
    3196:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	2201      	movs	r2, #1
    319c:	2100      	movs	r1, #0
    319e:	0018      	movs	r0, r3
    31a0:	4b0e      	ldr	r3, [pc, #56]	; (31dc <udd_ctrl_ep_enable+0xb4>)
    31a2:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	2101      	movs	r1, #1
    31a8:	0018      	movs	r0, r3
    31aa:	4b0d      	ldr	r3, [pc, #52]	; (31e0 <udd_ctrl_ep_enable+0xb8>)
    31ac:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    31ae:	4b0d      	ldr	r3, [pc, #52]	; (31e4 <udd_ctrl_ep_enable+0xbc>)
    31b0:	2200      	movs	r2, #0
    31b2:	701a      	strb	r2, [r3, #0]
}
    31b4:	46c0      	nop			; (mov r8, r8)
    31b6:	46bd      	mov	sp, r7
    31b8:	b005      	add	sp, #20
    31ba:	bd90      	pop	{r4, r7, pc}
    31bc:	00003f39 	.word	0x00003f39
    31c0:	00003f61 	.word	0x00003f61
    31c4:	200028e4 	.word	0x200028e4
    31c8:	00004841 	.word	0x00004841
    31cc:	00002f21 	.word	0x00002f21
    31d0:	00003b01 	.word	0x00003b01
    31d4:	000030d1 	.word	0x000030d1
    31d8:	00003095 	.word	0x00003095
    31dc:	00003bf9 	.word	0x00003bf9
    31e0:	00001f75 	.word	0x00001f75
    31e4:	200004c6 	.word	0x200004c6

000031e8 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]
    31f0:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    31f2:	4b09      	ldr	r3, [pc, #36]	; (3218 <_usb_on_suspend+0x30>)
    31f4:	2104      	movs	r1, #4
    31f6:	0018      	movs	r0, r3
    31f8:	4b08      	ldr	r3, [pc, #32]	; (321c <_usb_on_suspend+0x34>)
    31fa:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    31fc:	4b06      	ldr	r3, [pc, #24]	; (3218 <_usb_on_suspend+0x30>)
    31fe:	2102      	movs	r1, #2
    3200:	0018      	movs	r0, r3
    3202:	4b07      	ldr	r3, [pc, #28]	; (3220 <_usb_on_suspend+0x38>)
    3204:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3206:	2001      	movs	r0, #1
    3208:	4b06      	ldr	r3, [pc, #24]	; (3224 <_usb_on_suspend+0x3c>)
    320a:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    320c:	4b06      	ldr	r3, [pc, #24]	; (3228 <_usb_on_suspend+0x40>)
    320e:	4798      	blx	r3
#endif
}
    3210:	46c0      	nop			; (mov r8, r8)
    3212:	46bd      	mov	sp, r7
    3214:	b002      	add	sp, #8
    3216:	bd80      	pop	{r7, pc}
    3218:	20002764 	.word	0x20002764
    321c:	00003aad 	.word	0x00003aad
    3220:	00003a51 	.word	0x00003a51
    3224:	00002091 	.word	0x00002091
    3228:	00017b71 	.word	0x00017b71

0000322c <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    322c:	b580      	push	{r7, lr}
    322e:	b084      	sub	sp, #16
    3230:	af00      	add	r7, sp, #0
    3232:	6078      	str	r0, [r7, #4]
    3234:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    3236:	683b      	ldr	r3, [r7, #0]
    3238:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    323a:	4b0b      	ldr	r3, [pc, #44]	; (3268 <_usb_device_lpm_suspend+0x3c>)
    323c:	2106      	movs	r1, #6
    323e:	0018      	movs	r0, r3
    3240:	4b0a      	ldr	r3, [pc, #40]	; (326c <_usb_device_lpm_suspend+0x40>)
    3242:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3244:	4b08      	ldr	r3, [pc, #32]	; (3268 <_usb_device_lpm_suspend+0x3c>)
    3246:	2104      	movs	r1, #4
    3248:	0018      	movs	r0, r3
    324a:	4b08      	ldr	r3, [pc, #32]	; (326c <_usb_device_lpm_suspend+0x40>)
    324c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    324e:	4b06      	ldr	r3, [pc, #24]	; (3268 <_usb_device_lpm_suspend+0x3c>)
    3250:	2102      	movs	r1, #2
    3252:	0018      	movs	r0, r3
    3254:	4b06      	ldr	r3, [pc, #24]	; (3270 <_usb_device_lpm_suspend+0x44>)
    3256:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3258:	2002      	movs	r0, #2
    325a:	4b06      	ldr	r3, [pc, #24]	; (3274 <_usb_device_lpm_suspend+0x48>)
    325c:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	46bd      	mov	sp, r7
    3262:	b004      	add	sp, #16
    3264:	bd80      	pop	{r7, pc}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	20002764 	.word	0x20002764
    326c:	00003aad 	.word	0x00003aad
    3270:	00003a51 	.word	0x00003a51
    3274:	00002091 	.word	0x00002091

00003278 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    3278:	b580      	push	{r7, lr}
    327a:	b082      	sub	sp, #8
    327c:	af00      	add	r7, sp, #0
    327e:	6078      	str	r0, [r7, #4]
    3280:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    3282:	4b03      	ldr	r3, [pc, #12]	; (3290 <_usb_on_sof_notify+0x18>)
    3284:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
#endif
}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	46bd      	mov	sp, r7
    328a:	b002      	add	sp, #8
    328c:	bd80      	pop	{r7, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	00000cfd 	.word	0x00000cfd

00003294 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
    329c:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    329e:	4b07      	ldr	r3, [pc, #28]	; (32bc <_usb_on_bus_reset+0x28>)
    32a0:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	2100      	movs	r1, #0
    32a6:	0018      	movs	r0, r3
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <_usb_on_bus_reset+0x2c>)
    32aa:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	0018      	movs	r0, r3
    32b0:	4b04      	ldr	r3, [pc, #16]	; (32c4 <_usb_on_bus_reset+0x30>)
    32b2:	4798      	blx	r3
}
    32b4:	46c0      	nop			; (mov r8, r8)
    32b6:	46bd      	mov	sp, r7
    32b8:	b002      	add	sp, #8
    32ba:	bd80      	pop	{r7, pc}
    32bc:	00000c89 	.word	0x00000c89
    32c0:	00001f4d 	.word	0x00001f4d
    32c4:	00003129 	.word	0x00003129

000032c8 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b082      	sub	sp, #8
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
    32d0:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    32d2:	4b10      	ldr	r3, [pc, #64]	; (3314 <_usb_on_wakeup+0x4c>)
    32d4:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    32d6:	4b10      	ldr	r3, [pc, #64]	; (3318 <_usb_on_wakeup+0x50>)
    32d8:	2102      	movs	r1, #2
    32da:	0018      	movs	r0, r3
    32dc:	4b0f      	ldr	r3, [pc, #60]	; (331c <_usb_on_wakeup+0x54>)
    32de:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    32e0:	4b0d      	ldr	r3, [pc, #52]	; (3318 <_usb_on_wakeup+0x50>)
    32e2:	2104      	movs	r1, #4
    32e4:	0018      	movs	r0, r3
    32e6:	4b0e      	ldr	r3, [pc, #56]	; (3320 <_usb_on_wakeup+0x58>)
    32e8:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    32ea:	4a0e      	ldr	r2, [pc, #56]	; (3324 <_usb_on_wakeup+0x5c>)
    32ec:	4b0a      	ldr	r3, [pc, #40]	; (3318 <_usb_on_wakeup+0x50>)
    32ee:	2106      	movs	r1, #6
    32f0:	0018      	movs	r0, r3
    32f2:	4b0d      	ldr	r3, [pc, #52]	; (3328 <_usb_on_wakeup+0x60>)
    32f4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    32f6:	4b08      	ldr	r3, [pc, #32]	; (3318 <_usb_on_wakeup+0x50>)
    32f8:	2106      	movs	r1, #6
    32fa:	0018      	movs	r0, r3
    32fc:	4b08      	ldr	r3, [pc, #32]	; (3320 <_usb_on_wakeup+0x58>)
    32fe:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3300:	2003      	movs	r0, #3
    3302:	4b0a      	ldr	r3, [pc, #40]	; (332c <_usb_on_wakeup+0x64>)
    3304:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3306:	4b0a      	ldr	r3, [pc, #40]	; (3330 <_usb_on_wakeup+0x68>)
    3308:	4798      	blx	r3
#endif
}
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	46bd      	mov	sp, r7
    330e:	b002      	add	sp, #8
    3310:	bd80      	pop	{r7, pc}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	00002055 	.word	0x00002055
    3318:	20002764 	.word	0x20002764
    331c:	00003aad 	.word	0x00003aad
    3320:	00003a51 	.word	0x00003a51
    3324:	0000322d 	.word	0x0000322d
    3328:	00003a01 	.word	0x00003a01
    332c:	00002091 	.word	0x00002091
    3330:	00017b7b 	.word	0x00017b7b

00003334 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    3334:	b580      	push	{r7, lr}
    3336:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    3338:	2003      	movs	r0, #3
    333a:	4b20      	ldr	r3, [pc, #128]	; (33bc <udd_attach+0x88>)
    333c:	4798      	blx	r3
	usb_device_attach(&usb_device);
    333e:	4b20      	ldr	r3, [pc, #128]	; (33c0 <udd_attach+0x8c>)
    3340:	0018      	movs	r0, r3
    3342:	4b20      	ldr	r3, [pc, #128]	; (33c4 <udd_attach+0x90>)
    3344:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3346:	4a20      	ldr	r2, [pc, #128]	; (33c8 <udd_attach+0x94>)
    3348:	4b1d      	ldr	r3, [pc, #116]	; (33c0 <udd_attach+0x8c>)
    334a:	2104      	movs	r1, #4
    334c:	0018      	movs	r0, r3
    334e:	4b1f      	ldr	r3, [pc, #124]	; (33cc <udd_attach+0x98>)
    3350:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3352:	4a1f      	ldr	r2, [pc, #124]	; (33d0 <udd_attach+0x9c>)
    3354:	4b1a      	ldr	r3, [pc, #104]	; (33c0 <udd_attach+0x8c>)
    3356:	2100      	movs	r1, #0
    3358:	0018      	movs	r0, r3
    335a:	4b1c      	ldr	r3, [pc, #112]	; (33cc <udd_attach+0x98>)
    335c:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    335e:	4a1d      	ldr	r2, [pc, #116]	; (33d4 <udd_attach+0xa0>)
    3360:	4b17      	ldr	r3, [pc, #92]	; (33c0 <udd_attach+0x8c>)
    3362:	2101      	movs	r1, #1
    3364:	0018      	movs	r0, r3
    3366:	4b19      	ldr	r3, [pc, #100]	; (33cc <udd_attach+0x98>)
    3368:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    336a:	4a1b      	ldr	r2, [pc, #108]	; (33d8 <udd_attach+0xa4>)
    336c:	4b14      	ldr	r3, [pc, #80]	; (33c0 <udd_attach+0x8c>)
    336e:	2102      	movs	r1, #2
    3370:	0018      	movs	r0, r3
    3372:	4b16      	ldr	r3, [pc, #88]	; (33cc <udd_attach+0x98>)
    3374:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3376:	4b12      	ldr	r3, [pc, #72]	; (33c0 <udd_attach+0x8c>)
    3378:	2104      	movs	r1, #4
    337a:	0018      	movs	r0, r3
    337c:	4b17      	ldr	r3, [pc, #92]	; (33dc <udd_attach+0xa8>)
    337e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3380:	4b0f      	ldr	r3, [pc, #60]	; (33c0 <udd_attach+0x8c>)
    3382:	2100      	movs	r1, #0
    3384:	0018      	movs	r0, r3
    3386:	4b15      	ldr	r3, [pc, #84]	; (33dc <udd_attach+0xa8>)
    3388:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    338a:	4b0d      	ldr	r3, [pc, #52]	; (33c0 <udd_attach+0x8c>)
    338c:	2101      	movs	r1, #1
    338e:	0018      	movs	r0, r3
    3390:	4b12      	ldr	r3, [pc, #72]	; (33dc <udd_attach+0xa8>)
    3392:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3394:	4b0a      	ldr	r3, [pc, #40]	; (33c0 <udd_attach+0x8c>)
    3396:	2102      	movs	r1, #2
    3398:	0018      	movs	r0, r3
    339a:	4b10      	ldr	r3, [pc, #64]	; (33dc <udd_attach+0xa8>)
    339c:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    339e:	4a10      	ldr	r2, [pc, #64]	; (33e0 <udd_attach+0xac>)
    33a0:	4b07      	ldr	r3, [pc, #28]	; (33c0 <udd_attach+0x8c>)
    33a2:	2106      	movs	r1, #6
    33a4:	0018      	movs	r0, r3
    33a6:	4b09      	ldr	r3, [pc, #36]	; (33cc <udd_attach+0x98>)
    33a8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    33aa:	4b05      	ldr	r3, [pc, #20]	; (33c0 <udd_attach+0x8c>)
    33ac:	2106      	movs	r1, #6
    33ae:	0018      	movs	r0, r3
    33b0:	4b0a      	ldr	r3, [pc, #40]	; (33dc <udd_attach+0xa8>)
    33b2:	4798      	blx	r3
#endif
}
    33b4:	46c0      	nop			; (mov r8, r8)
    33b6:	46bd      	mov	sp, r7
    33b8:	bd80      	pop	{r7, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	00002091 	.word	0x00002091
    33c0:	20002764 	.word	0x20002764
    33c4:	00001f0d 	.word	0x00001f0d
    33c8:	000031e9 	.word	0x000031e9
    33cc:	00003a01 	.word	0x00003a01
    33d0:	00003279 	.word	0x00003279
    33d4:	00003295 	.word	0x00003295
    33d8:	000032c9 	.word	0x000032c9
    33dc:	00003a51 	.word	0x00003a51
    33e0:	0000322d 	.word	0x0000322d

000033e4 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	b082      	sub	sp, #8
    33e8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    33ea:	4b12      	ldr	r3, [pc, #72]	; (3434 <udd_enable+0x50>)
    33ec:	4798      	blx	r3
    33ee:	0003      	movs	r3, r0
    33f0:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    33f2:	003b      	movs	r3, r7
    33f4:	0018      	movs	r0, r3
    33f6:	4b10      	ldr	r3, [pc, #64]	; (3438 <udd_enable+0x54>)
    33f8:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    33fa:	003b      	movs	r3, r7
    33fc:	2200      	movs	r2, #0
    33fe:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    3400:	003a      	movs	r2, r7
    3402:	490e      	ldr	r1, [pc, #56]	; (343c <udd_enable+0x58>)
    3404:	4b0e      	ldr	r3, [pc, #56]	; (3440 <udd_enable+0x5c>)
    3406:	0018      	movs	r0, r3
    3408:	4b0e      	ldr	r3, [pc, #56]	; (3444 <udd_enable+0x60>)
    340a:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    340c:	4b0c      	ldr	r3, [pc, #48]	; (3440 <udd_enable+0x5c>)
    340e:	0018      	movs	r0, r3
    3410:	4b0d      	ldr	r3, [pc, #52]	; (3448 <udd_enable+0x64>)
    3412:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    3414:	4b0d      	ldr	r3, [pc, #52]	; (344c <udd_enable+0x68>)
    3416:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3418:	2001      	movs	r0, #1
    341a:	4b0d      	ldr	r3, [pc, #52]	; (3450 <udd_enable+0x6c>)
    341c:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    341e:	4b0d      	ldr	r3, [pc, #52]	; (3454 <udd_enable+0x70>)
    3420:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
    3422:	687b      	ldr	r3, [r7, #4]
    3424:	0018      	movs	r0, r3
    3426:	4b0c      	ldr	r3, [pc, #48]	; (3458 <udd_enable+0x74>)
    3428:	4798      	blx	r3
}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	46bd      	mov	sp, r7
    342e:	b002      	add	sp, #8
    3430:	bd80      	pop	{r7, pc}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	00001e95 	.word	0x00001e95
    3438:	00004e71 	.word	0x00004e71
    343c:	41005000 	.word	0x41005000
    3440:	20002764 	.word	0x20002764
    3444:	00004e99 	.word	0x00004e99
    3448:	00004e09 	.word	0x00004e09
    344c:	00002055 	.word	0x00002055
    3450:	00002091 	.word	0x00002091
    3454:	00003335 	.word	0x00003335
    3458:	00001edd 	.word	0x00001edd

0000345c <system_gclk_chan_get_config_defaults>:
{
    345c:	b580      	push	{r7, lr}
    345e:	b082      	sub	sp, #8
    3460:	af00      	add	r7, sp, #0
    3462:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	2200      	movs	r2, #0
    3468:	701a      	strb	r2, [r3, #0]
}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	46bd      	mov	sp, r7
    346e:	b002      	add	sp, #8
    3470:	bd80      	pop	{r7, pc}
	...

00003474 <system_apb_clock_set_mask>:
{
    3474:	b580      	push	{r7, lr}
    3476:	b082      	sub	sp, #8
    3478:	af00      	add	r7, sp, #0
    347a:	0002      	movs	r2, r0
    347c:	6039      	str	r1, [r7, #0]
    347e:	1dfb      	adds	r3, r7, #7
    3480:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3482:	1dfb      	adds	r3, r7, #7
    3484:	781b      	ldrb	r3, [r3, #0]
    3486:	2b01      	cmp	r3, #1
    3488:	d00a      	beq.n	34a0 <system_apb_clock_set_mask+0x2c>
    348a:	2b02      	cmp	r3, #2
    348c:	d00f      	beq.n	34ae <system_apb_clock_set_mask+0x3a>
    348e:	2b00      	cmp	r3, #0
    3490:	d114      	bne.n	34bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3492:	4b0e      	ldr	r3, [pc, #56]	; (34cc <system_apb_clock_set_mask+0x58>)
    3494:	4a0d      	ldr	r2, [pc, #52]	; (34cc <system_apb_clock_set_mask+0x58>)
    3496:	6991      	ldr	r1, [r2, #24]
    3498:	683a      	ldr	r2, [r7, #0]
    349a:	430a      	orrs	r2, r1
    349c:	619a      	str	r2, [r3, #24]
			break;
    349e:	e00f      	b.n	34c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    34a0:	4b0a      	ldr	r3, [pc, #40]	; (34cc <system_apb_clock_set_mask+0x58>)
    34a2:	4a0a      	ldr	r2, [pc, #40]	; (34cc <system_apb_clock_set_mask+0x58>)
    34a4:	69d1      	ldr	r1, [r2, #28]
    34a6:	683a      	ldr	r2, [r7, #0]
    34a8:	430a      	orrs	r2, r1
    34aa:	61da      	str	r2, [r3, #28]
			break;
    34ac:	e008      	b.n	34c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    34ae:	4b07      	ldr	r3, [pc, #28]	; (34cc <system_apb_clock_set_mask+0x58>)
    34b0:	4a06      	ldr	r2, [pc, #24]	; (34cc <system_apb_clock_set_mask+0x58>)
    34b2:	6a11      	ldr	r1, [r2, #32]
    34b4:	683a      	ldr	r2, [r7, #0]
    34b6:	430a      	orrs	r2, r1
    34b8:	621a      	str	r2, [r3, #32]
			break;
    34ba:	e001      	b.n	34c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    34bc:	2317      	movs	r3, #23
    34be:	e000      	b.n	34c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    34c0:	2300      	movs	r3, #0
}
    34c2:	0018      	movs	r0, r3
    34c4:	46bd      	mov	sp, r7
    34c6:	b002      	add	sp, #8
    34c8:	bd80      	pop	{r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	40000400 	.word	0x40000400

000034d0 <system_pinmux_get_config_defaults>:
{
    34d0:	b580      	push	{r7, lr}
    34d2:	b082      	sub	sp, #8
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    34d8:	687b      	ldr	r3, [r7, #4]
    34da:	2280      	movs	r2, #128	; 0x80
    34dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	2200      	movs	r2, #0
    34e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	2201      	movs	r2, #1
    34e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	2200      	movs	r2, #0
    34ee:	70da      	strb	r2, [r3, #3]
}
    34f0:	46c0      	nop			; (mov r8, r8)
    34f2:	46bd      	mov	sp, r7
    34f4:	b002      	add	sp, #8
    34f6:	bd80      	pop	{r7, pc}

000034f8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	b082      	sub	sp, #8
    34fc:	af00      	add	r7, sp, #0
    34fe:	0002      	movs	r2, r0
    3500:	1dfb      	adds	r3, r7, #7
    3502:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3504:	4b06      	ldr	r3, [pc, #24]	; (3520 <system_interrupt_enable+0x28>)
    3506:	1dfa      	adds	r2, r7, #7
    3508:	7812      	ldrb	r2, [r2, #0]
    350a:	0011      	movs	r1, r2
    350c:	221f      	movs	r2, #31
    350e:	400a      	ands	r2, r1
    3510:	2101      	movs	r1, #1
    3512:	4091      	lsls	r1, r2
    3514:	000a      	movs	r2, r1
    3516:	601a      	str	r2, [r3, #0]
}
    3518:	46c0      	nop			; (mov r8, r8)
    351a:	46bd      	mov	sp, r7
    351c:	b002      	add	sp, #8
    351e:	bd80      	pop	{r7, pc}
    3520:	e000e100 	.word	0xe000e100

00003524 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    3524:	b580      	push	{r7, lr}
    3526:	b082      	sub	sp, #8
    3528:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    352a:	4bc0      	ldr	r3, [pc, #768]	; (382c <_usb_host_interrupt_handler+0x308>)
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	8c1b      	ldrh	r3, [r3, #32]
    3532:	b29b      	uxth	r3, r3
    3534:	2b00      	cmp	r3, #0
    3536:	d00a      	beq.n	354e <_usb_host_interrupt_handler+0x2a>
    3538:	4bbc      	ldr	r3, [pc, #752]	; (382c <_usb_host_interrupt_handler+0x308>)
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	8c1b      	ldrh	r3, [r3, #32]
    3540:	b29b      	uxth	r3, r3
    3542:	001a      	movs	r2, r3
    3544:	4bba      	ldr	r3, [pc, #744]	; (3830 <_usb_host_interrupt_handler+0x30c>)
    3546:	0010      	movs	r0, r2
    3548:	4798      	blx	r3
    354a:	0003      	movs	r3, r0
    354c:	e000      	b.n	3550 <_usb_host_interrupt_handler+0x2c>
    354e:	2320      	movs	r3, #32
    3550:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	2b1f      	cmp	r3, #31
    3556:	d900      	bls.n	355a <_usb_host_interrupt_handler+0x36>
    3558:	e174      	b.n	3844 <_usb_host_interrupt_handler+0x320>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    355a:	4bb4      	ldr	r3, [pc, #720]	; (382c <_usb_host_interrupt_handler+0x308>)
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	681a      	ldr	r2, [r3, #0]
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	3308      	adds	r3, #8
    3564:	015b      	lsls	r3, r3, #5
    3566:	18d3      	adds	r3, r2, r3
    3568:	3307      	adds	r3, #7
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	b2db      	uxtb	r3, r3
    356e:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3570:	683b      	ldr	r3, [r7, #0]
    3572:	2203      	movs	r2, #3
    3574:	4013      	ands	r3, r2
    3576:	d100      	bne.n	357a <_usb_host_interrupt_handler+0x56>
    3578:	e088      	b.n	368c <_usb_host_interrupt_handler+0x168>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    357a:	2201      	movs	r2, #1
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	409a      	lsls	r2, r3
    3580:	0013      	movs	r3, r2
    3582:	43db      	mvns	r3, r3
    3584:	001a      	movs	r2, r3
    3586:	4bab      	ldr	r3, [pc, #684]	; (3834 <_usb_host_interrupt_handler+0x310>)
    3588:	681b      	ldr	r3, [r3, #0]
    358a:	401a      	ands	r2, r3
    358c:	4ba9      	ldr	r3, [pc, #676]	; (3834 <_usb_host_interrupt_handler+0x310>)
    358e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3590:	4ba6      	ldr	r3, [pc, #664]	; (382c <_usb_host_interrupt_handler+0x308>)
    3592:	681b      	ldr	r3, [r3, #0]
    3594:	681a      	ldr	r2, [r3, #0]
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	3308      	adds	r3, #8
    359a:	015b      	lsls	r3, r3, #5
    359c:	18d3      	adds	r3, r2, r3
    359e:	3307      	adds	r3, #7
    35a0:	2203      	movs	r2, #3
    35a2:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    35a4:	4ba1      	ldr	r3, [pc, #644]	; (382c <_usb_host_interrupt_handler+0x308>)
    35a6:	681a      	ldr	r2, [r3, #0]
    35a8:	21ae      	movs	r1, #174	; 0xae
    35aa:	687b      	ldr	r3, [r7, #4]
    35ac:	18d3      	adds	r3, r2, r3
    35ae:	185b      	adds	r3, r3, r1
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	001a      	movs	r2, r3
    35b4:	2301      	movs	r3, #1
    35b6:	4013      	ands	r3, r2
    35b8:	d068      	beq.n	368c <_usb_host_interrupt_handler+0x168>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	b2da      	uxtb	r2, r3
    35be:	4b9e      	ldr	r3, [pc, #632]	; (3838 <_usb_host_interrupt_handler+0x314>)
    35c0:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35c2:	4b9a      	ldr	r3, [pc, #616]	; (382c <_usb_host_interrupt_handler+0x308>)
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	687a      	ldr	r2, [r7, #4]
    35ca:	3208      	adds	r2, #8
    35cc:	0152      	lsls	r2, r2, #5
    35ce:	5cd3      	ldrb	r3, [r2, r3]
    35d0:	079b      	lsls	r3, r3, #30
    35d2:	0f9b      	lsrs	r3, r3, #30
    35d4:	b2db      	uxtb	r3, r3
    35d6:	2b01      	cmp	r3, #1
    35d8:	d11e      	bne.n	3618 <_usb_host_interrupt_handler+0xf4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35da:	4a98      	ldr	r2, [pc, #608]	; (383c <_usb_host_interrupt_handler+0x318>)
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	015b      	lsls	r3, r3, #5
    35e0:	18d3      	adds	r3, r2, r3
    35e2:	685b      	ldr	r3, [r3, #4]
    35e4:	049b      	lsls	r3, r3, #18
    35e6:	0c9b      	lsrs	r3, r3, #18
    35e8:	b29b      	uxth	r3, r3
    35ea:	001a      	movs	r2, r3
    35ec:	4b92      	ldr	r3, [pc, #584]	; (3838 <_usb_host_interrupt_handler+0x314>)
    35ee:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    35f0:	4a92      	ldr	r2, [pc, #584]	; (383c <_usb_host_interrupt_handler+0x318>)
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	015b      	lsls	r3, r3, #5
    35f6:	18d3      	adds	r3, r2, r3
    35f8:	685b      	ldr	r3, [r3, #4]
    35fa:	011b      	lsls	r3, r3, #4
    35fc:	0c9b      	lsrs	r3, r3, #18
    35fe:	b29b      	uxth	r3, r3
    3600:	001a      	movs	r2, r3
    3602:	4b8d      	ldr	r3, [pc, #564]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3604:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3606:	4a8d      	ldr	r2, [pc, #564]	; (383c <_usb_host_interrupt_handler+0x318>)
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	015b      	lsls	r3, r3, #5
    360c:	18d3      	adds	r3, r2, r3
    360e:	685a      	ldr	r2, [r3, #4]
    3610:	0b92      	lsrs	r2, r2, #14
    3612:	0392      	lsls	r2, r2, #14
    3614:	605a      	str	r2, [r3, #4]
    3616:	e02c      	b.n	3672 <_usb_host_interrupt_handler+0x14e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3618:	4a88      	ldr	r2, [pc, #544]	; (383c <_usb_host_interrupt_handler+0x318>)
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	015b      	lsls	r3, r3, #5
    361e:	18d3      	adds	r3, r2, r3
    3620:	685b      	ldr	r3, [r3, #4]
    3622:	011b      	lsls	r3, r3, #4
    3624:	0c9b      	lsrs	r3, r3, #18
    3626:	b29b      	uxth	r3, r3
    3628:	001a      	movs	r2, r3
    362a:	4b83      	ldr	r3, [pc, #524]	; (3838 <_usb_host_interrupt_handler+0x314>)
    362c:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    362e:	4a83      	ldr	r2, [pc, #524]	; (383c <_usb_host_interrupt_handler+0x318>)
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	015b      	lsls	r3, r3, #5
    3634:	18d3      	adds	r3, r2, r3
    3636:	685b      	ldr	r3, [r3, #4]
    3638:	049b      	lsls	r3, r3, #18
    363a:	0c9b      	lsrs	r3, r3, #18
    363c:	b29b      	uxth	r3, r3
    363e:	001a      	movs	r2, r3
    3640:	4b7d      	ldr	r3, [pc, #500]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3642:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3644:	4a7d      	ldr	r2, [pc, #500]	; (383c <_usb_host_interrupt_handler+0x318>)
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	015b      	lsls	r3, r3, #5
    364a:	18d3      	adds	r3, r2, r3
    364c:	685a      	ldr	r2, [r3, #4]
    364e:	497c      	ldr	r1, [pc, #496]	; (3840 <_usb_host_interrupt_handler+0x31c>)
    3650:	400a      	ands	r2, r1
    3652:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3654:	4b78      	ldr	r3, [pc, #480]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3656:	885b      	ldrh	r3, [r3, #2]
    3658:	2b00      	cmp	r3, #0
    365a:	d10a      	bne.n	3672 <_usb_host_interrupt_handler+0x14e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    365c:	4a77      	ldr	r2, [pc, #476]	; (383c <_usb_host_interrupt_handler+0x318>)
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	015b      	lsls	r3, r3, #5
    3662:	18d3      	adds	r3, r2, r3
    3664:	685b      	ldr	r3, [r3, #4]
    3666:	049b      	lsls	r3, r3, #18
    3668:	0c9b      	lsrs	r3, r3, #18
    366a:	b29b      	uxth	r3, r3
    366c:	001a      	movs	r2, r3
    366e:	4b72      	ldr	r3, [pc, #456]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3670:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    3672:	4b6e      	ldr	r3, [pc, #440]	; (382c <_usb_host_interrupt_handler+0x308>)
    3674:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3676:	687b      	ldr	r3, [r7, #4]
    3678:	3302      	adds	r3, #2
    367a:	011b      	lsls	r3, r3, #4
    367c:	18d3      	adds	r3, r2, r3
    367e:	3304      	adds	r3, #4
    3680:	681a      	ldr	r2, [r3, #0]
    3682:	4b6a      	ldr	r3, [pc, #424]	; (382c <_usb_host_interrupt_handler+0x308>)
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	496c      	ldr	r1, [pc, #432]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3688:	0018      	movs	r0, r3
    368a:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    368c:	683b      	ldr	r3, [r7, #0]
    368e:	2204      	movs	r2, #4
    3690:	4013      	ands	r3, r2
    3692:	d014      	beq.n	36be <_usb_host_interrupt_handler+0x19a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3694:	2201      	movs	r2, #1
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	409a      	lsls	r2, r3
    369a:	0013      	movs	r3, r2
    369c:	43db      	mvns	r3, r3
    369e:	001a      	movs	r2, r3
    36a0:	4b64      	ldr	r3, [pc, #400]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36a2:	681b      	ldr	r3, [r3, #0]
    36a4:	401a      	ands	r2, r3
    36a6:	4b63      	ldr	r3, [pc, #396]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36a8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    36aa:	4b60      	ldr	r3, [pc, #384]	; (382c <_usb_host_interrupt_handler+0x308>)
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	681a      	ldr	r2, [r3, #0]
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	3308      	adds	r3, #8
    36b4:	015b      	lsls	r3, r3, #5
    36b6:	18d3      	adds	r3, r2, r3
    36b8:	3307      	adds	r3, #7
    36ba:	2204      	movs	r2, #4
    36bc:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	2208      	movs	r2, #8
    36c2:	4013      	ands	r3, r2
    36c4:	d03c      	beq.n	3740 <_usb_host_interrupt_handler+0x21c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    36c6:	2201      	movs	r2, #1
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	409a      	lsls	r2, r3
    36cc:	0013      	movs	r3, r2
    36ce:	43db      	mvns	r3, r3
    36d0:	001a      	movs	r2, r3
    36d2:	4b58      	ldr	r3, [pc, #352]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36d4:	681b      	ldr	r3, [r3, #0]
    36d6:	401a      	ands	r2, r3
    36d8:	4b56      	ldr	r3, [pc, #344]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36da:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    36dc:	4b53      	ldr	r3, [pc, #332]	; (382c <_usb_host_interrupt_handler+0x308>)
    36de:	681b      	ldr	r3, [r3, #0]
    36e0:	681a      	ldr	r2, [r3, #0]
    36e2:	687b      	ldr	r3, [r7, #4]
    36e4:	3308      	adds	r3, #8
    36e6:	015b      	lsls	r3, r3, #5
    36e8:	18d3      	adds	r3, r2, r3
    36ea:	3307      	adds	r3, #7
    36ec:	2208      	movs	r2, #8
    36ee:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    36f0:	4b4e      	ldr	r3, [pc, #312]	; (382c <_usb_host_interrupt_handler+0x308>)
    36f2:	681a      	ldr	r2, [r3, #0]
    36f4:	21ae      	movs	r1, #174	; 0xae
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	18d3      	adds	r3, r2, r3
    36fa:	185b      	adds	r3, r3, r1
    36fc:	781b      	ldrb	r3, [r3, #0]
    36fe:	001a      	movs	r2, r3
    3700:	2302      	movs	r3, #2
    3702:	4013      	ands	r3, r2
    3704:	d01c      	beq.n	3740 <_usb_host_interrupt_handler+0x21c>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    3706:	687b      	ldr	r3, [r7, #4]
    3708:	b2da      	uxtb	r2, r3
    370a:	4b4b      	ldr	r3, [pc, #300]	; (3838 <_usb_host_interrupt_handler+0x314>)
    370c:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    370e:	4a4b      	ldr	r2, [pc, #300]	; (383c <_usb_host_interrupt_handler+0x318>)
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	015b      	lsls	r3, r3, #5
    3714:	18d3      	adds	r3, r2, r3
    3716:	330e      	adds	r3, #14
    3718:	881b      	ldrh	r3, [r3, #0]
    371a:	b29b      	uxth	r3, r3
    371c:	b2db      	uxtb	r3, r3
    371e:	221f      	movs	r2, #31
    3720:	4013      	ands	r3, r2
    3722:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
    3724:	4b44      	ldr	r3, [pc, #272]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3726:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
    3728:	4b40      	ldr	r3, [pc, #256]	; (382c <_usb_host_interrupt_handler+0x308>)
    372a:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	011b      	lsls	r3, r3, #4
    3730:	18d3      	adds	r3, r2, r3
    3732:	3328      	adds	r3, #40	; 0x28
    3734:	681a      	ldr	r2, [r3, #0]
    3736:	4b3d      	ldr	r3, [pc, #244]	; (382c <_usb_host_interrupt_handler+0x308>)
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	493f      	ldr	r1, [pc, #252]	; (3838 <_usb_host_interrupt_handler+0x314>)
    373c:	0018      	movs	r0, r3
    373e:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3740:	683b      	ldr	r3, [r7, #0]
    3742:	2210      	movs	r2, #16
    3744:	4013      	ands	r3, r2
    3746:	d03a      	beq.n	37be <_usb_host_interrupt_handler+0x29a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3748:	2201      	movs	r2, #1
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	409a      	lsls	r2, r3
    374e:	0013      	movs	r3, r2
    3750:	43db      	mvns	r3, r3
    3752:	001a      	movs	r2, r3
    3754:	4b37      	ldr	r3, [pc, #220]	; (3834 <_usb_host_interrupt_handler+0x310>)
    3756:	681b      	ldr	r3, [r3, #0]
    3758:	401a      	ands	r2, r3
    375a:	4b36      	ldr	r3, [pc, #216]	; (3834 <_usb_host_interrupt_handler+0x310>)
    375c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    375e:	4b33      	ldr	r3, [pc, #204]	; (382c <_usb_host_interrupt_handler+0x308>)
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	681a      	ldr	r2, [r3, #0]
    3764:	687b      	ldr	r3, [r7, #4]
    3766:	3308      	adds	r3, #8
    3768:	015b      	lsls	r3, r3, #5
    376a:	18d3      	adds	r3, r2, r3
    376c:	3307      	adds	r3, #7
    376e:	2210      	movs	r2, #16
    3770:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3772:	4b2e      	ldr	r3, [pc, #184]	; (382c <_usb_host_interrupt_handler+0x308>)
    3774:	681a      	ldr	r2, [r3, #0]
    3776:	21ae      	movs	r1, #174	; 0xae
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	18d3      	adds	r3, r2, r3
    377c:	185b      	adds	r3, r3, r1
    377e:	781b      	ldrb	r3, [r3, #0]
    3780:	001a      	movs	r2, r3
    3782:	2304      	movs	r3, #4
    3784:	4013      	ands	r3, r2
    3786:	d01a      	beq.n	37be <_usb_host_interrupt_handler+0x29a>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	b2da      	uxtb	r2, r3
    378c:	4b2a      	ldr	r3, [pc, #168]	; (3838 <_usb_host_interrupt_handler+0x314>)
    378e:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3790:	4a2a      	ldr	r2, [pc, #168]	; (383c <_usb_host_interrupt_handler+0x318>)
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	015b      	lsls	r3, r3, #5
    3796:	18d3      	adds	r3, r2, r3
    3798:	685b      	ldr	r3, [r3, #4]
    379a:	011b      	lsls	r3, r3, #4
    379c:	0c9b      	lsrs	r3, r3, #18
    379e:	b29b      	uxth	r3, r3
    37a0:	001a      	movs	r2, r3
    37a2:	4b25      	ldr	r3, [pc, #148]	; (3838 <_usb_host_interrupt_handler+0x314>)
    37a4:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    37a6:	4b21      	ldr	r3, [pc, #132]	; (382c <_usb_host_interrupt_handler+0x308>)
    37a8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	011b      	lsls	r3, r3, #4
    37ae:	18d3      	adds	r3, r2, r3
    37b0:	332c      	adds	r3, #44	; 0x2c
    37b2:	681a      	ldr	r2, [r3, #0]
    37b4:	4b1d      	ldr	r3, [pc, #116]	; (382c <_usb_host_interrupt_handler+0x308>)
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	2100      	movs	r1, #0
    37ba:	0018      	movs	r0, r3
    37bc:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    37be:	683b      	ldr	r3, [r7, #0]
    37c0:	2220      	movs	r2, #32
    37c2:	4013      	ands	r3, r2
    37c4:	d100      	bne.n	37c8 <_usb_host_interrupt_handler+0x2a4>
    37c6:	e112      	b.n	39ee <_usb_host_interrupt_handler+0x4ca>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    37c8:	2201      	movs	r2, #1
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	409a      	lsls	r2, r3
    37ce:	0013      	movs	r3, r2
    37d0:	43db      	mvns	r3, r3
    37d2:	001a      	movs	r2, r3
    37d4:	4b17      	ldr	r3, [pc, #92]	; (3834 <_usb_host_interrupt_handler+0x310>)
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	401a      	ands	r2, r3
    37da:	4b16      	ldr	r3, [pc, #88]	; (3834 <_usb_host_interrupt_handler+0x310>)
    37dc:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    37de:	4b13      	ldr	r3, [pc, #76]	; (382c <_usb_host_interrupt_handler+0x308>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	681a      	ldr	r2, [r3, #0]
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	3308      	adds	r3, #8
    37e8:	015b      	lsls	r3, r3, #5
    37ea:	18d3      	adds	r3, r2, r3
    37ec:	3307      	adds	r3, #7
    37ee:	2220      	movs	r2, #32
    37f0:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    37f2:	4b0e      	ldr	r3, [pc, #56]	; (382c <_usb_host_interrupt_handler+0x308>)
    37f4:	681a      	ldr	r2, [r3, #0]
    37f6:	21ae      	movs	r1, #174	; 0xae
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	18d3      	adds	r3, r2, r3
    37fc:	185b      	adds	r3, r3, r1
    37fe:	781b      	ldrb	r3, [r3, #0]
    3800:	001a      	movs	r2, r3
    3802:	2308      	movs	r3, #8
    3804:	4013      	ands	r3, r2
    3806:	d100      	bne.n	380a <_usb_host_interrupt_handler+0x2e6>
    3808:	e0f1      	b.n	39ee <_usb_host_interrupt_handler+0x4ca>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	b2da      	uxtb	r2, r3
    380e:	4b0a      	ldr	r3, [pc, #40]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3810:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    3812:	4b06      	ldr	r3, [pc, #24]	; (382c <_usb_host_interrupt_handler+0x308>)
    3814:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	011b      	lsls	r3, r3, #4
    381a:	18d3      	adds	r3, r2, r3
    381c:	3330      	adds	r3, #48	; 0x30
    381e:	681a      	ldr	r2, [r3, #0]
    3820:	4b02      	ldr	r3, [pc, #8]	; (382c <_usb_host_interrupt_handler+0x308>)
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	4904      	ldr	r1, [pc, #16]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3826:	0018      	movs	r0, r3
    3828:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    382a:	e0e0      	b.n	39ee <_usb_host_interrupt_handler+0x4ca>
    382c:	20000520 	.word	0x20000520
    3830:	0001a125 	.word	0x0001a125
    3834:	20000538 	.word	0x20000538
    3838:	20000524 	.word	0x20000524
    383c:	200028ec 	.word	0x200028ec
    3840:	f0003fff 	.word	0xf0003fff
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3844:	4b6c      	ldr	r3, [pc, #432]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	681b      	ldr	r3, [r3, #0]
    384a:	8b9b      	ldrh	r3, [r3, #28]
    384c:	b29b      	uxth	r3, r3
    384e:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3850:	683b      	ldr	r3, [r7, #0]
    3852:	2204      	movs	r2, #4
    3854:	4013      	ands	r3, r2
    3856:	d013      	beq.n	3880 <_usb_host_interrupt_handler+0x35c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3858:	4b67      	ldr	r3, [pc, #412]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	2204      	movs	r2, #4
    3860:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3862:	4b65      	ldr	r3, [pc, #404]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	22a5      	movs	r2, #165	; 0xa5
    3868:	5c9b      	ldrb	r3, [r3, r2]
    386a:	001a      	movs	r2, r3
    386c:	2301      	movs	r3, #1
    386e:	4013      	ands	r3, r2
    3870:	d006      	beq.n	3880 <_usb_host_interrupt_handler+0x35c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3872:	4b61      	ldr	r3, [pc, #388]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	685a      	ldr	r2, [r3, #4]
    3878:	4b5f      	ldr	r3, [pc, #380]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	0018      	movs	r0, r3
    387e:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
    3880:	683b      	ldr	r3, [r7, #0]
    3882:	2208      	movs	r2, #8
    3884:	4013      	ands	r3, r2
    3886:	d016      	beq.n	38b6 <_usb_host_interrupt_handler+0x392>
			host_pipe_job_busy_status = 0;
    3888:	4b5c      	ldr	r3, [pc, #368]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    388a:	2200      	movs	r2, #0
    388c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    388e:	4b5a      	ldr	r3, [pc, #360]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	681b      	ldr	r3, [r3, #0]
    3894:	2208      	movs	r2, #8
    3896:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3898:	4b57      	ldr	r3, [pc, #348]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	22a5      	movs	r2, #165	; 0xa5
    389e:	5c9b      	ldrb	r3, [r3, r2]
    38a0:	001a      	movs	r2, r3
    38a2:	2302      	movs	r3, #2
    38a4:	4013      	ands	r3, r2
    38a6:	d006      	beq.n	38b6 <_usb_host_interrupt_handler+0x392>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    38a8:	4b53      	ldr	r3, [pc, #332]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38aa:	681b      	ldr	r3, [r3, #0]
    38ac:	689a      	ldr	r2, [r3, #8]
    38ae:	4b52      	ldr	r3, [pc, #328]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38b0:	681b      	ldr	r3, [r3, #0]
    38b2:	0018      	movs	r0, r3
    38b4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    38b6:	683b      	ldr	r3, [r7, #0]
    38b8:	2240      	movs	r2, #64	; 0x40
    38ba:	4013      	ands	r3, r2
    38bc:	d013      	beq.n	38e6 <_usb_host_interrupt_handler+0x3c2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    38be:	4b4e      	ldr	r3, [pc, #312]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38c0:	681b      	ldr	r3, [r3, #0]
    38c2:	681b      	ldr	r3, [r3, #0]
    38c4:	2240      	movs	r2, #64	; 0x40
    38c6:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    38c8:	4b4b      	ldr	r3, [pc, #300]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	22a5      	movs	r2, #165	; 0xa5
    38ce:	5c9b      	ldrb	r3, [r3, r2]
    38d0:	001a      	movs	r2, r3
    38d2:	2310      	movs	r3, #16
    38d4:	4013      	ands	r3, r2
    38d6:	d006      	beq.n	38e6 <_usb_host_interrupt_handler+0x3c2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    38d8:	4b47      	ldr	r3, [pc, #284]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38da:	681b      	ldr	r3, [r3, #0]
    38dc:	695a      	ldr	r2, [r3, #20]
    38de:	4b46      	ldr	r3, [pc, #280]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38e0:	681b      	ldr	r3, [r3, #0]
    38e2:	0018      	movs	r0, r3
    38e4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    38e6:	683b      	ldr	r3, [r7, #0]
    38e8:	2220      	movs	r2, #32
    38ea:	4013      	ands	r3, r2
    38ec:	d013      	beq.n	3916 <_usb_host_interrupt_handler+0x3f2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    38ee:	4b42      	ldr	r3, [pc, #264]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	681b      	ldr	r3, [r3, #0]
    38f4:	2220      	movs	r2, #32
    38f6:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    38f8:	4b3f      	ldr	r3, [pc, #252]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	22a5      	movs	r2, #165	; 0xa5
    38fe:	5c9b      	ldrb	r3, [r3, r2]
    3900:	001a      	movs	r2, r3
    3902:	2308      	movs	r3, #8
    3904:	4013      	ands	r3, r2
    3906:	d006      	beq.n	3916 <_usb_host_interrupt_handler+0x3f2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3908:	4b3b      	ldr	r3, [pc, #236]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	691a      	ldr	r2, [r3, #16]
    390e:	4b3a      	ldr	r3, [pc, #232]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	0018      	movs	r0, r3
    3914:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3916:	683b      	ldr	r3, [r7, #0]
    3918:	2210      	movs	r2, #16
    391a:	4013      	ands	r3, r2
    391c:	d013      	beq.n	3946 <_usb_host_interrupt_handler+0x422>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    391e:	4b36      	ldr	r3, [pc, #216]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3920:	681b      	ldr	r3, [r3, #0]
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	2210      	movs	r2, #16
    3926:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3928:	4b33      	ldr	r3, [pc, #204]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	22a5      	movs	r2, #165	; 0xa5
    392e:	5c9b      	ldrb	r3, [r3, r2]
    3930:	001a      	movs	r2, r3
    3932:	2304      	movs	r3, #4
    3934:	4013      	ands	r3, r2
    3936:	d006      	beq.n	3946 <_usb_host_interrupt_handler+0x422>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3938:	4b2f      	ldr	r3, [pc, #188]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    393a:	681b      	ldr	r3, [r3, #0]
    393c:	68da      	ldr	r2, [r3, #12]
    393e:	4b2e      	ldr	r3, [pc, #184]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3940:	681b      	ldr	r3, [r3, #0]
    3942:	0018      	movs	r0, r3
    3944:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3946:	683b      	ldr	r3, [r7, #0]
    3948:	2280      	movs	r2, #128	; 0x80
    394a:	4013      	ands	r3, r2
    394c:	d016      	beq.n	397c <_usb_host_interrupt_handler+0x458>
			host_pipe_job_busy_status = 0;
    394e:	4b2b      	ldr	r3, [pc, #172]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    3950:	2200      	movs	r2, #0
    3952:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3954:	4b28      	ldr	r3, [pc, #160]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3956:	681b      	ldr	r3, [r3, #0]
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	2280      	movs	r2, #128	; 0x80
    395c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    395e:	4b26      	ldr	r3, [pc, #152]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3960:	681b      	ldr	r3, [r3, #0]
    3962:	22a5      	movs	r2, #165	; 0xa5
    3964:	5c9b      	ldrb	r3, [r3, r2]
    3966:	001a      	movs	r2, r3
    3968:	2320      	movs	r3, #32
    396a:	4013      	ands	r3, r2
    396c:	d006      	beq.n	397c <_usb_host_interrupt_handler+0x458>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    396e:	4b22      	ldr	r3, [pc, #136]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3970:	681b      	ldr	r3, [r3, #0]
    3972:	699a      	ldr	r2, [r3, #24]
    3974:	4b20      	ldr	r3, [pc, #128]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	0018      	movs	r0, r3
    397a:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
    397c:	683a      	ldr	r2, [r7, #0]
    397e:	2380      	movs	r3, #128	; 0x80
    3980:	005b      	lsls	r3, r3, #1
    3982:	4013      	ands	r3, r2
    3984:	d017      	beq.n	39b6 <_usb_host_interrupt_handler+0x492>
			host_pipe_job_busy_status = 0;
    3986:	4b1d      	ldr	r3, [pc, #116]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    3988:	2200      	movs	r2, #0
    398a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    398c:	4b1a      	ldr	r3, [pc, #104]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    398e:	681b      	ldr	r3, [r3, #0]
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	2280      	movs	r2, #128	; 0x80
    3994:	0052      	lsls	r2, r2, #1
    3996:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3998:	4b17      	ldr	r3, [pc, #92]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    399a:	681b      	ldr	r3, [r3, #0]
    399c:	22a5      	movs	r2, #165	; 0xa5
    399e:	5c9b      	ldrb	r3, [r3, r2]
    39a0:	001a      	movs	r2, r3
    39a2:	2340      	movs	r3, #64	; 0x40
    39a4:	4013      	ands	r3, r2
    39a6:	d006      	beq.n	39b6 <_usb_host_interrupt_handler+0x492>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    39a8:	4b13      	ldr	r3, [pc, #76]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	69da      	ldr	r2, [r3, #28]
    39ae:	4b12      	ldr	r3, [pc, #72]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39b0:	681b      	ldr	r3, [r3, #0]
    39b2:	0018      	movs	r0, r3
    39b4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
    39b6:	683a      	ldr	r2, [r7, #0]
    39b8:	2380      	movs	r3, #128	; 0x80
    39ba:	009b      	lsls	r3, r3, #2
    39bc:	4013      	ands	r3, r2
    39be:	d016      	beq.n	39ee <_usb_host_interrupt_handler+0x4ca>
			host_pipe_job_busy_status = 0;
    39c0:	4b0e      	ldr	r3, [pc, #56]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    39c2:	2200      	movs	r2, #0
    39c4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    39c6:	4b0c      	ldr	r3, [pc, #48]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	2280      	movs	r2, #128	; 0x80
    39ce:	0092      	lsls	r2, r2, #2
    39d0:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    39d2:	4b09      	ldr	r3, [pc, #36]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	22a5      	movs	r2, #165	; 0xa5
    39d8:	5c9b      	ldrb	r3, [r3, r2]
    39da:	b25b      	sxtb	r3, r3
    39dc:	2b00      	cmp	r3, #0
    39de:	da06      	bge.n	39ee <_usb_host_interrupt_handler+0x4ca>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    39e0:	4b05      	ldr	r3, [pc, #20]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	6a1a      	ldr	r2, [r3, #32]
    39e6:	4b04      	ldr	r3, [pc, #16]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39e8:	681b      	ldr	r3, [r3, #0]
    39ea:	0018      	movs	r0, r3
    39ec:	4790      	blx	r2
}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	46bd      	mov	sp, r7
    39f2:	b002      	add	sp, #8
    39f4:	bd80      	pop	{r7, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	20000520 	.word	0x20000520
    39fc:	20000538 	.word	0x20000538

00003a00 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3a00:	b580      	push	{r7, lr}
    3a02:	b084      	sub	sp, #16
    3a04:	af00      	add	r7, sp, #0
    3a06:	60f8      	str	r0, [r7, #12]
    3a08:	607a      	str	r2, [r7, #4]
    3a0a:	230b      	movs	r3, #11
    3a0c:	18fb      	adds	r3, r7, r3
    3a0e:	1c0a      	adds	r2, r1, #0
    3a10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3a12:	230b      	movs	r3, #11
    3a14:	18fb      	adds	r3, r7, r3
    3a16:	781a      	ldrb	r2, [r3, #0]
    3a18:	68fb      	ldr	r3, [r7, #12]
    3a1a:	322e      	adds	r2, #46	; 0x2e
    3a1c:	0092      	lsls	r2, r2, #2
    3a1e:	6879      	ldr	r1, [r7, #4]
    3a20:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3a22:	68fa      	ldr	r2, [r7, #12]
    3a24:	23aa      	movs	r3, #170	; 0xaa
    3a26:	005b      	lsls	r3, r3, #1
    3a28:	5ad2      	ldrh	r2, [r2, r3]
    3a2a:	230b      	movs	r3, #11
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	7819      	ldrb	r1, [r3, #0]
    3a30:	4b06      	ldr	r3, [pc, #24]	; (3a4c <usb_device_register_callback+0x4c>)
    3a32:	0049      	lsls	r1, r1, #1
    3a34:	5acb      	ldrh	r3, [r1, r3]
    3a36:	4313      	orrs	r3, r2
    3a38:	b299      	uxth	r1, r3
    3a3a:	68fa      	ldr	r2, [r7, #12]
    3a3c:	23aa      	movs	r3, #170	; 0xaa
    3a3e:	005b      	lsls	r3, r3, #1
    3a40:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    3a42:	2300      	movs	r3, #0
}
    3a44:	0018      	movs	r0, r3
    3a46:	46bd      	mov	sp, r7
    3a48:	b004      	add	sp, #16
    3a4a:	bd80      	pop	{r7, pc}
    3a4c:	0001f8e4 	.word	0x0001f8e4

00003a50 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    3a50:	b580      	push	{r7, lr}
    3a52:	b082      	sub	sp, #8
    3a54:	af00      	add	r7, sp, #0
    3a56:	6078      	str	r0, [r7, #4]
    3a58:	000a      	movs	r2, r1
    3a5a:	1cfb      	adds	r3, r7, #3
    3a5c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	1cfa      	adds	r2, r7, #3
    3a64:	7811      	ldrb	r1, [r2, #0]
    3a66:	4a10      	ldr	r2, [pc, #64]	; (3aa8 <usb_device_enable_callback+0x58>)
    3a68:	0049      	lsls	r1, r1, #1
    3a6a:	5a8a      	ldrh	r2, [r1, r2]
    3a6c:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3a6e:	687a      	ldr	r2, [r7, #4]
    3a70:	23ab      	movs	r3, #171	; 0xab
    3a72:	005b      	lsls	r3, r3, #1
    3a74:	5ad2      	ldrh	r2, [r2, r3]
    3a76:	1cfb      	adds	r3, r7, #3
    3a78:	7819      	ldrb	r1, [r3, #0]
    3a7a:	4b0b      	ldr	r3, [pc, #44]	; (3aa8 <usb_device_enable_callback+0x58>)
    3a7c:	0049      	lsls	r1, r1, #1
    3a7e:	5acb      	ldrh	r3, [r1, r3]
    3a80:	4313      	orrs	r3, r2
    3a82:	b299      	uxth	r1, r3
    3a84:	687a      	ldr	r2, [r7, #4]
    3a86:	23ab      	movs	r3, #171	; 0xab
    3a88:	005b      	lsls	r3, r3, #1
    3a8a:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3a8c:	687b      	ldr	r3, [r7, #4]
    3a8e:	681b      	ldr	r3, [r3, #0]
    3a90:	1cfa      	adds	r2, r7, #3
    3a92:	7811      	ldrb	r1, [r2, #0]
    3a94:	4a04      	ldr	r2, [pc, #16]	; (3aa8 <usb_device_enable_callback+0x58>)
    3a96:	0049      	lsls	r1, r1, #1
    3a98:	5a8a      	ldrh	r2, [r1, r2]
    3a9a:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    3a9c:	2300      	movs	r3, #0
}
    3a9e:	0018      	movs	r0, r3
    3aa0:	46bd      	mov	sp, r7
    3aa2:	b002      	add	sp, #8
    3aa4:	bd80      	pop	{r7, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	0001f8e4 	.word	0x0001f8e4

00003aac <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    3aac:	b580      	push	{r7, lr}
    3aae:	b082      	sub	sp, #8
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
    3ab4:	000a      	movs	r2, r1
    3ab6:	1cfb      	adds	r3, r7, #3
    3ab8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3aba:	687a      	ldr	r2, [r7, #4]
    3abc:	23ab      	movs	r3, #171	; 0xab
    3abe:	005b      	lsls	r3, r3, #1
    3ac0:	5ad3      	ldrh	r3, [r2, r3]
    3ac2:	b21b      	sxth	r3, r3
    3ac4:	1cfa      	adds	r2, r7, #3
    3ac6:	7811      	ldrb	r1, [r2, #0]
    3ac8:	4a0c      	ldr	r2, [pc, #48]	; (3afc <usb_device_disable_callback+0x50>)
    3aca:	0049      	lsls	r1, r1, #1
    3acc:	5a8a      	ldrh	r2, [r1, r2]
    3ace:	b212      	sxth	r2, r2
    3ad0:	43d2      	mvns	r2, r2
    3ad2:	b212      	sxth	r2, r2
    3ad4:	4013      	ands	r3, r2
    3ad6:	b21b      	sxth	r3, r3
    3ad8:	b299      	uxth	r1, r3
    3ada:	687a      	ldr	r2, [r7, #4]
    3adc:	23ab      	movs	r3, #171	; 0xab
    3ade:	005b      	lsls	r3, r3, #1
    3ae0:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	1cfa      	adds	r2, r7, #3
    3ae8:	7811      	ldrb	r1, [r2, #0]
    3aea:	4a04      	ldr	r2, [pc, #16]	; (3afc <usb_device_disable_callback+0x50>)
    3aec:	0049      	lsls	r1, r1, #1
    3aee:	5a8a      	ldrh	r2, [r1, r2]
    3af0:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    3af2:	2300      	movs	r3, #0
}
    3af4:	0018      	movs	r0, r3
    3af6:	46bd      	mov	sp, r7
    3af8:	b002      	add	sp, #8
    3afa:	bd80      	pop	{r7, pc}
    3afc:	0001f8e4 	.word	0x0001f8e4

00003b00 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b084      	sub	sp, #16
    3b04:	af00      	add	r7, sp, #0
    3b06:	60f8      	str	r0, [r7, #12]
    3b08:	0008      	movs	r0, r1
    3b0a:	0011      	movs	r1, r2
    3b0c:	607b      	str	r3, [r7, #4]
    3b0e:	230b      	movs	r3, #11
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	1c02      	adds	r2, r0, #0
    3b14:	701a      	strb	r2, [r3, #0]
    3b16:	230a      	movs	r3, #10
    3b18:	18fb      	adds	r3, r7, r3
    3b1a:	1c0a      	adds	r2, r1, #0
    3b1c:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3b1e:	230b      	movs	r3, #11
    3b20:	18fb      	adds	r3, r7, r3
    3b22:	7819      	ldrb	r1, [r3, #0]
    3b24:	230a      	movs	r3, #10
    3b26:	18fb      	adds	r3, r7, r3
    3b28:	781b      	ldrb	r3, [r3, #0]
    3b2a:	68fa      	ldr	r2, [r7, #12]
    3b2c:	0089      	lsls	r1, r1, #2
    3b2e:	18cb      	adds	r3, r1, r3
    3b30:	3334      	adds	r3, #52	; 0x34
    3b32:	009b      	lsls	r3, r3, #2
    3b34:	18d3      	adds	r3, r2, r3
    3b36:	3304      	adds	r3, #4
    3b38:	687a      	ldr	r2, [r7, #4]
    3b3a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3b3c:	230b      	movs	r3, #11
    3b3e:	18fb      	adds	r3, r7, r3
    3b40:	781a      	ldrb	r2, [r3, #0]
    3b42:	230b      	movs	r3, #11
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	7819      	ldrb	r1, [r3, #0]
    3b48:	68f8      	ldr	r0, [r7, #12]
    3b4a:	23ac      	movs	r3, #172	; 0xac
    3b4c:	005b      	lsls	r3, r3, #1
    3b4e:	1841      	adds	r1, r0, r1
    3b50:	18cb      	adds	r3, r1, r3
    3b52:	7819      	ldrb	r1, [r3, #0]
    3b54:	230a      	movs	r3, #10
    3b56:	18fb      	adds	r3, r7, r3
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	4808      	ldr	r0, [pc, #32]	; (3b7c <usb_device_endpoint_register_callback+0x7c>)
    3b5c:	5cc3      	ldrb	r3, [r0, r3]
    3b5e:	430b      	orrs	r3, r1
    3b60:	b2d8      	uxtb	r0, r3
    3b62:	68f9      	ldr	r1, [r7, #12]
    3b64:	23ac      	movs	r3, #172	; 0xac
    3b66:	005b      	lsls	r3, r3, #1
    3b68:	188a      	adds	r2, r1, r2
    3b6a:	18d3      	adds	r3, r2, r3
    3b6c:	1c02      	adds	r2, r0, #0
    3b6e:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3b70:	2300      	movs	r3, #0
}
    3b72:	0018      	movs	r0, r3
    3b74:	46bd      	mov	sp, r7
    3b76:	b004      	add	sp, #16
    3b78:	bd80      	pop	{r7, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	0001f8f4 	.word	0x0001f8f4

00003b80 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b082      	sub	sp, #8
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
    3b88:	0008      	movs	r0, r1
    3b8a:	0011      	movs	r1, r2
    3b8c:	1cfb      	adds	r3, r7, #3
    3b8e:	1c02      	adds	r2, r0, #0
    3b90:	701a      	strb	r2, [r3, #0]
    3b92:	1cbb      	adds	r3, r7, #2
    3b94:	1c0a      	adds	r2, r1, #0
    3b96:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3b98:	1cfb      	adds	r3, r7, #3
    3b9a:	7819      	ldrb	r1, [r3, #0]
    3b9c:	1cbb      	adds	r3, r7, #2
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	687a      	ldr	r2, [r7, #4]
    3ba2:	0089      	lsls	r1, r1, #2
    3ba4:	18cb      	adds	r3, r1, r3
    3ba6:	3334      	adds	r3, #52	; 0x34
    3ba8:	009b      	lsls	r3, r3, #2
    3baa:	18d3      	adds	r3, r2, r3
    3bac:	3304      	adds	r3, #4
    3bae:	2200      	movs	r2, #0
    3bb0:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3bb2:	1cfb      	adds	r3, r7, #3
    3bb4:	781a      	ldrb	r2, [r3, #0]
    3bb6:	1cfb      	adds	r3, r7, #3
    3bb8:	7819      	ldrb	r1, [r3, #0]
    3bba:	6878      	ldr	r0, [r7, #4]
    3bbc:	23ac      	movs	r3, #172	; 0xac
    3bbe:	005b      	lsls	r3, r3, #1
    3bc0:	1841      	adds	r1, r0, r1
    3bc2:	18cb      	adds	r3, r1, r3
    3bc4:	781b      	ldrb	r3, [r3, #0]
    3bc6:	b25b      	sxtb	r3, r3
    3bc8:	1cb9      	adds	r1, r7, #2
    3bca:	7809      	ldrb	r1, [r1, #0]
    3bcc:	4809      	ldr	r0, [pc, #36]	; (3bf4 <usb_device_endpoint_unregister_callback+0x74>)
    3bce:	5c41      	ldrb	r1, [r0, r1]
    3bd0:	b249      	sxtb	r1, r1
    3bd2:	43c9      	mvns	r1, r1
    3bd4:	b249      	sxtb	r1, r1
    3bd6:	400b      	ands	r3, r1
    3bd8:	b25b      	sxtb	r3, r3
    3bda:	b2d8      	uxtb	r0, r3
    3bdc:	6879      	ldr	r1, [r7, #4]
    3bde:	23ac      	movs	r3, #172	; 0xac
    3be0:	005b      	lsls	r3, r3, #1
    3be2:	188a      	adds	r2, r1, r2
    3be4:	18d3      	adds	r3, r2, r3
    3be6:	1c02      	adds	r2, r0, #0
    3be8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3bea:	2300      	movs	r3, #0
}
    3bec:	0018      	movs	r0, r3
    3bee:	46bd      	mov	sp, r7
    3bf0:	b002      	add	sp, #8
    3bf2:	bd80      	pop	{r7, pc}
    3bf4:	0001f8f4 	.word	0x0001f8f4

00003bf8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b084      	sub	sp, #16
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	0008      	movs	r0, r1
    3c02:	0011      	movs	r1, r2
    3c04:	1cfb      	adds	r3, r7, #3
    3c06:	1c02      	adds	r2, r0, #0
    3c08:	701a      	strb	r2, [r3, #0]
    3c0a:	1cbb      	adds	r3, r7, #2
    3c0c:	1c0a      	adds	r2, r1, #0
    3c0e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c10:	230f      	movs	r3, #15
    3c12:	18fb      	adds	r3, r7, r3
    3c14:	1cfa      	adds	r2, r7, #3
    3c16:	7812      	ldrb	r2, [r2, #0]
    3c18:	210f      	movs	r1, #15
    3c1a:	400a      	ands	r2, r1
    3c1c:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3c1e:	230f      	movs	r3, #15
    3c20:	18fb      	adds	r3, r7, r3
    3c22:	781a      	ldrb	r2, [r3, #0]
    3c24:	230f      	movs	r3, #15
    3c26:	18fb      	adds	r3, r7, r3
    3c28:	7819      	ldrb	r1, [r3, #0]
    3c2a:	6878      	ldr	r0, [r7, #4]
    3c2c:	23b0      	movs	r3, #176	; 0xb0
    3c2e:	005b      	lsls	r3, r3, #1
    3c30:	1841      	adds	r1, r0, r1
    3c32:	18cb      	adds	r3, r1, r3
    3c34:	7819      	ldrb	r1, [r3, #0]
    3c36:	1cbb      	adds	r3, r7, #2
    3c38:	781b      	ldrb	r3, [r3, #0]
    3c3a:	4855      	ldr	r0, [pc, #340]	; (3d90 <usb_device_endpoint_enable_callback+0x198>)
    3c3c:	5cc3      	ldrb	r3, [r0, r3]
    3c3e:	430b      	orrs	r3, r1
    3c40:	b2d8      	uxtb	r0, r3
    3c42:	6879      	ldr	r1, [r7, #4]
    3c44:	23b0      	movs	r3, #176	; 0xb0
    3c46:	005b      	lsls	r3, r3, #1
    3c48:	188a      	adds	r2, r1, r2
    3c4a:	18d3      	adds	r3, r2, r3
    3c4c:	1c02      	adds	r2, r0, #0
    3c4e:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3c50:	1cbb      	adds	r3, r7, #2
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	2b00      	cmp	r3, #0
    3c56:	d12f      	bne.n	3cb8 <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    3c58:	230f      	movs	r3, #15
    3c5a:	18fb      	adds	r3, r7, r3
    3c5c:	781b      	ldrb	r3, [r3, #0]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d10c      	bne.n	3c7c <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	6819      	ldr	r1, [r3, #0]
    3c66:	230f      	movs	r3, #15
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	781a      	ldrb	r2, [r3, #0]
    3c6c:	230a      	movs	r3, #10
    3c6e:	33ff      	adds	r3, #255	; 0xff
    3c70:	0152      	lsls	r2, r2, #5
    3c72:	188a      	adds	r2, r1, r2
    3c74:	18d3      	adds	r3, r2, r3
    3c76:	2203      	movs	r2, #3
    3c78:	701a      	strb	r2, [r3, #0]
    3c7a:	e01d      	b.n	3cb8 <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    3c7c:	1cfb      	adds	r3, r7, #3
    3c7e:	781b      	ldrb	r3, [r3, #0]
    3c80:	b25b      	sxtb	r3, r3
    3c82:	2b00      	cmp	r3, #0
    3c84:	da0c      	bge.n	3ca0 <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	6819      	ldr	r1, [r3, #0]
    3c8a:	230f      	movs	r3, #15
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	781a      	ldrb	r2, [r3, #0]
    3c90:	230a      	movs	r3, #10
    3c92:	33ff      	adds	r3, #255	; 0xff
    3c94:	0152      	lsls	r2, r2, #5
    3c96:	188a      	adds	r2, r1, r2
    3c98:	18d3      	adds	r3, r2, r3
    3c9a:	2202      	movs	r2, #2
    3c9c:	701a      	strb	r2, [r3, #0]
    3c9e:	e00b      	b.n	3cb8 <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	6819      	ldr	r1, [r3, #0]
    3ca4:	230f      	movs	r3, #15
    3ca6:	18fb      	adds	r3, r7, r3
    3ca8:	781a      	ldrb	r2, [r3, #0]
    3caa:	230a      	movs	r3, #10
    3cac:	33ff      	adds	r3, #255	; 0xff
    3cae:	0152      	lsls	r2, r2, #5
    3cb0:	188a      	adds	r2, r1, r2
    3cb2:	18d3      	adds	r3, r2, r3
    3cb4:	2201      	movs	r2, #1
    3cb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3cb8:	1cbb      	adds	r3, r7, #2
    3cba:	781b      	ldrb	r3, [r3, #0]
    3cbc:	2b01      	cmp	r3, #1
    3cbe:	d12f      	bne.n	3d20 <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    3cc0:	230f      	movs	r3, #15
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d10c      	bne.n	3ce4 <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	6819      	ldr	r1, [r3, #0]
    3cce:	230f      	movs	r3, #15
    3cd0:	18fb      	adds	r3, r7, r3
    3cd2:	781a      	ldrb	r2, [r3, #0]
    3cd4:	230a      	movs	r3, #10
    3cd6:	33ff      	adds	r3, #255	; 0xff
    3cd8:	0152      	lsls	r2, r2, #5
    3cda:	188a      	adds	r2, r1, r2
    3cdc:	18d3      	adds	r3, r2, r3
    3cde:	220c      	movs	r2, #12
    3ce0:	701a      	strb	r2, [r3, #0]
    3ce2:	e01d      	b.n	3d20 <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    3ce4:	1cfb      	adds	r3, r7, #3
    3ce6:	781b      	ldrb	r3, [r3, #0]
    3ce8:	b25b      	sxtb	r3, r3
    3cea:	2b00      	cmp	r3, #0
    3cec:	da0c      	bge.n	3d08 <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	6819      	ldr	r1, [r3, #0]
    3cf2:	230f      	movs	r3, #15
    3cf4:	18fb      	adds	r3, r7, r3
    3cf6:	781a      	ldrb	r2, [r3, #0]
    3cf8:	230a      	movs	r3, #10
    3cfa:	33ff      	adds	r3, #255	; 0xff
    3cfc:	0152      	lsls	r2, r2, #5
    3cfe:	188a      	adds	r2, r1, r2
    3d00:	18d3      	adds	r3, r2, r3
    3d02:	2208      	movs	r2, #8
    3d04:	701a      	strb	r2, [r3, #0]
    3d06:	e00b      	b.n	3d20 <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	6819      	ldr	r1, [r3, #0]
    3d0c:	230f      	movs	r3, #15
    3d0e:	18fb      	adds	r3, r7, r3
    3d10:	781a      	ldrb	r2, [r3, #0]
    3d12:	230a      	movs	r3, #10
    3d14:	33ff      	adds	r3, #255	; 0xff
    3d16:	0152      	lsls	r2, r2, #5
    3d18:	188a      	adds	r2, r1, r2
    3d1a:	18d3      	adds	r3, r2, r3
    3d1c:	2204      	movs	r2, #4
    3d1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3d20:	1cbb      	adds	r3, r7, #2
    3d22:	781b      	ldrb	r3, [r3, #0]
    3d24:	2b02      	cmp	r3, #2
    3d26:	d10b      	bne.n	3d40 <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	6819      	ldr	r1, [r3, #0]
    3d2c:	230f      	movs	r3, #15
    3d2e:	18fb      	adds	r3, r7, r3
    3d30:	781a      	ldrb	r2, [r3, #0]
    3d32:	230a      	movs	r3, #10
    3d34:	33ff      	adds	r3, #255	; 0xff
    3d36:	0152      	lsls	r2, r2, #5
    3d38:	188a      	adds	r2, r1, r2
    3d3a:	18d3      	adds	r3, r2, r3
    3d3c:	2210      	movs	r2, #16
    3d3e:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3d40:	1cbb      	adds	r3, r7, #2
    3d42:	781b      	ldrb	r3, [r3, #0]
    3d44:	2b03      	cmp	r3, #3
    3d46:	d11d      	bne.n	3d84 <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    3d48:	1cfb      	adds	r3, r7, #3
    3d4a:	781b      	ldrb	r3, [r3, #0]
    3d4c:	b25b      	sxtb	r3, r3
    3d4e:	2b00      	cmp	r3, #0
    3d50:	da0c      	bge.n	3d6c <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	6819      	ldr	r1, [r3, #0]
    3d56:	230f      	movs	r3, #15
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	781a      	ldrb	r2, [r3, #0]
    3d5c:	230a      	movs	r3, #10
    3d5e:	33ff      	adds	r3, #255	; 0xff
    3d60:	0152      	lsls	r2, r2, #5
    3d62:	188a      	adds	r2, r1, r2
    3d64:	18d3      	adds	r3, r2, r3
    3d66:	2240      	movs	r2, #64	; 0x40
    3d68:	701a      	strb	r2, [r3, #0]
    3d6a:	e00b      	b.n	3d84 <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	6819      	ldr	r1, [r3, #0]
    3d70:	230f      	movs	r3, #15
    3d72:	18fb      	adds	r3, r7, r3
    3d74:	781a      	ldrb	r2, [r3, #0]
    3d76:	230a      	movs	r3, #10
    3d78:	33ff      	adds	r3, #255	; 0xff
    3d7a:	0152      	lsls	r2, r2, #5
    3d7c:	188a      	adds	r2, r1, r2
    3d7e:	18d3      	adds	r3, r2, r3
    3d80:	2220      	movs	r2, #32
    3d82:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    3d84:	2300      	movs	r3, #0
}
    3d86:	0018      	movs	r0, r3
    3d88:	46bd      	mov	sp, r7
    3d8a:	b004      	add	sp, #16
    3d8c:	bd80      	pop	{r7, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	0001f8f4 	.word	0x0001f8f4

00003d94 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
    3d9c:	0008      	movs	r0, r1
    3d9e:	0011      	movs	r1, r2
    3da0:	1cfb      	adds	r3, r7, #3
    3da2:	1c02      	adds	r2, r0, #0
    3da4:	701a      	strb	r2, [r3, #0]
    3da6:	1cbb      	adds	r3, r7, #2
    3da8:	1c0a      	adds	r2, r1, #0
    3daa:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3dac:	230f      	movs	r3, #15
    3dae:	18fb      	adds	r3, r7, r3
    3db0:	1cfa      	adds	r2, r7, #3
    3db2:	7812      	ldrb	r2, [r2, #0]
    3db4:	210f      	movs	r1, #15
    3db6:	400a      	ands	r2, r1
    3db8:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3dba:	230f      	movs	r3, #15
    3dbc:	18fb      	adds	r3, r7, r3
    3dbe:	781a      	ldrb	r2, [r3, #0]
    3dc0:	230f      	movs	r3, #15
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	7819      	ldrb	r1, [r3, #0]
    3dc6:	6878      	ldr	r0, [r7, #4]
    3dc8:	23b0      	movs	r3, #176	; 0xb0
    3dca:	005b      	lsls	r3, r3, #1
    3dcc:	1841      	adds	r1, r0, r1
    3dce:	18cb      	adds	r3, r1, r3
    3dd0:	781b      	ldrb	r3, [r3, #0]
    3dd2:	b25b      	sxtb	r3, r3
    3dd4:	1cb9      	adds	r1, r7, #2
    3dd6:	7809      	ldrb	r1, [r1, #0]
    3dd8:	4856      	ldr	r0, [pc, #344]	; (3f34 <usb_device_endpoint_disable_callback+0x1a0>)
    3dda:	5c41      	ldrb	r1, [r0, r1]
    3ddc:	b249      	sxtb	r1, r1
    3dde:	43c9      	mvns	r1, r1
    3de0:	b249      	sxtb	r1, r1
    3de2:	400b      	ands	r3, r1
    3de4:	b25b      	sxtb	r3, r3
    3de6:	b2d8      	uxtb	r0, r3
    3de8:	6879      	ldr	r1, [r7, #4]
    3dea:	23b0      	movs	r3, #176	; 0xb0
    3dec:	005b      	lsls	r3, r3, #1
    3dee:	188a      	adds	r2, r1, r2
    3df0:	18d3      	adds	r3, r2, r3
    3df2:	1c02      	adds	r2, r0, #0
    3df4:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3df6:	1cbb      	adds	r3, r7, #2
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d12f      	bne.n	3e5e <usb_device_endpoint_disable_callback+0xca>
		if (ep_num == 0) { // control endpoint
    3dfe:	230f      	movs	r3, #15
    3e00:	18fb      	adds	r3, r7, r3
    3e02:	781b      	ldrb	r3, [r3, #0]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d10c      	bne.n	3e22 <usb_device_endpoint_disable_callback+0x8e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	6819      	ldr	r1, [r3, #0]
    3e0c:	230f      	movs	r3, #15
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	781a      	ldrb	r2, [r3, #0]
    3e12:	2384      	movs	r3, #132	; 0x84
    3e14:	005b      	lsls	r3, r3, #1
    3e16:	0152      	lsls	r2, r2, #5
    3e18:	188a      	adds	r2, r1, r2
    3e1a:	18d3      	adds	r3, r2, r3
    3e1c:	2203      	movs	r2, #3
    3e1e:	701a      	strb	r2, [r3, #0]
    3e20:	e01d      	b.n	3e5e <usb_device_endpoint_disable_callback+0xca>
		} else if (ep & USB_EP_DIR_IN) {
    3e22:	1cfb      	adds	r3, r7, #3
    3e24:	781b      	ldrb	r3, [r3, #0]
    3e26:	b25b      	sxtb	r3, r3
    3e28:	2b00      	cmp	r3, #0
    3e2a:	da0c      	bge.n	3e46 <usb_device_endpoint_disable_callback+0xb2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	6819      	ldr	r1, [r3, #0]
    3e30:	230f      	movs	r3, #15
    3e32:	18fb      	adds	r3, r7, r3
    3e34:	781a      	ldrb	r2, [r3, #0]
    3e36:	2384      	movs	r3, #132	; 0x84
    3e38:	005b      	lsls	r3, r3, #1
    3e3a:	0152      	lsls	r2, r2, #5
    3e3c:	188a      	adds	r2, r1, r2
    3e3e:	18d3      	adds	r3, r2, r3
    3e40:	2202      	movs	r2, #2
    3e42:	701a      	strb	r2, [r3, #0]
    3e44:	e00b      	b.n	3e5e <usb_device_endpoint_disable_callback+0xca>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	6819      	ldr	r1, [r3, #0]
    3e4a:	230f      	movs	r3, #15
    3e4c:	18fb      	adds	r3, r7, r3
    3e4e:	781a      	ldrb	r2, [r3, #0]
    3e50:	2384      	movs	r3, #132	; 0x84
    3e52:	005b      	lsls	r3, r3, #1
    3e54:	0152      	lsls	r2, r2, #5
    3e56:	188a      	adds	r2, r1, r2
    3e58:	18d3      	adds	r3, r2, r3
    3e5a:	2201      	movs	r2, #1
    3e5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3e5e:	1cbb      	adds	r3, r7, #2
    3e60:	781b      	ldrb	r3, [r3, #0]
    3e62:	2b01      	cmp	r3, #1
    3e64:	d12f      	bne.n	3ec6 <usb_device_endpoint_disable_callback+0x132>
		if (ep_num == 0) { // control endpoint
    3e66:	230f      	movs	r3, #15
    3e68:	18fb      	adds	r3, r7, r3
    3e6a:	781b      	ldrb	r3, [r3, #0]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d10c      	bne.n	3e8a <usb_device_endpoint_disable_callback+0xf6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	6819      	ldr	r1, [r3, #0]
    3e74:	230f      	movs	r3, #15
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	781a      	ldrb	r2, [r3, #0]
    3e7a:	2384      	movs	r3, #132	; 0x84
    3e7c:	005b      	lsls	r3, r3, #1
    3e7e:	0152      	lsls	r2, r2, #5
    3e80:	188a      	adds	r2, r1, r2
    3e82:	18d3      	adds	r3, r2, r3
    3e84:	220c      	movs	r2, #12
    3e86:	701a      	strb	r2, [r3, #0]
    3e88:	e01d      	b.n	3ec6 <usb_device_endpoint_disable_callback+0x132>
		} else if (ep & USB_EP_DIR_IN) {
    3e8a:	1cfb      	adds	r3, r7, #3
    3e8c:	781b      	ldrb	r3, [r3, #0]
    3e8e:	b25b      	sxtb	r3, r3
    3e90:	2b00      	cmp	r3, #0
    3e92:	da0c      	bge.n	3eae <usb_device_endpoint_disable_callback+0x11a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	6819      	ldr	r1, [r3, #0]
    3e98:	230f      	movs	r3, #15
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	781a      	ldrb	r2, [r3, #0]
    3e9e:	2384      	movs	r3, #132	; 0x84
    3ea0:	005b      	lsls	r3, r3, #1
    3ea2:	0152      	lsls	r2, r2, #5
    3ea4:	188a      	adds	r2, r1, r2
    3ea6:	18d3      	adds	r3, r2, r3
    3ea8:	2208      	movs	r2, #8
    3eaa:	701a      	strb	r2, [r3, #0]
    3eac:	e00b      	b.n	3ec6 <usb_device_endpoint_disable_callback+0x132>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	6819      	ldr	r1, [r3, #0]
    3eb2:	230f      	movs	r3, #15
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	781a      	ldrb	r2, [r3, #0]
    3eb8:	2384      	movs	r3, #132	; 0x84
    3eba:	005b      	lsls	r3, r3, #1
    3ebc:	0152      	lsls	r2, r2, #5
    3ebe:	188a      	adds	r2, r1, r2
    3ec0:	18d3      	adds	r3, r2, r3
    3ec2:	2204      	movs	r2, #4
    3ec4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3ec6:	1cbb      	adds	r3, r7, #2
    3ec8:	781b      	ldrb	r3, [r3, #0]
    3eca:	2b02      	cmp	r3, #2
    3ecc:	d10b      	bne.n	3ee6 <usb_device_endpoint_disable_callback+0x152>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	6819      	ldr	r1, [r3, #0]
    3ed2:	230f      	movs	r3, #15
    3ed4:	18fb      	adds	r3, r7, r3
    3ed6:	781a      	ldrb	r2, [r3, #0]
    3ed8:	2384      	movs	r3, #132	; 0x84
    3eda:	005b      	lsls	r3, r3, #1
    3edc:	0152      	lsls	r2, r2, #5
    3ede:	188a      	adds	r2, r1, r2
    3ee0:	18d3      	adds	r3, r2, r3
    3ee2:	2210      	movs	r2, #16
    3ee4:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3ee6:	1cbb      	adds	r3, r7, #2
    3ee8:	781b      	ldrb	r3, [r3, #0]
    3eea:	2b03      	cmp	r3, #3
    3eec:	d11d      	bne.n	3f2a <usb_device_endpoint_disable_callback+0x196>
		if (ep & USB_EP_DIR_IN) {
    3eee:	1cfb      	adds	r3, r7, #3
    3ef0:	781b      	ldrb	r3, [r3, #0]
    3ef2:	b25b      	sxtb	r3, r3
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	da0c      	bge.n	3f12 <usb_device_endpoint_disable_callback+0x17e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	6819      	ldr	r1, [r3, #0]
    3efc:	230f      	movs	r3, #15
    3efe:	18fb      	adds	r3, r7, r3
    3f00:	781a      	ldrb	r2, [r3, #0]
    3f02:	2384      	movs	r3, #132	; 0x84
    3f04:	005b      	lsls	r3, r3, #1
    3f06:	0152      	lsls	r2, r2, #5
    3f08:	188a      	adds	r2, r1, r2
    3f0a:	18d3      	adds	r3, r2, r3
    3f0c:	2240      	movs	r2, #64	; 0x40
    3f0e:	701a      	strb	r2, [r3, #0]
    3f10:	e00b      	b.n	3f2a <usb_device_endpoint_disable_callback+0x196>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	6819      	ldr	r1, [r3, #0]
    3f16:	230f      	movs	r3, #15
    3f18:	18fb      	adds	r3, r7, r3
    3f1a:	781a      	ldrb	r2, [r3, #0]
    3f1c:	2384      	movs	r3, #132	; 0x84
    3f1e:	005b      	lsls	r3, r3, #1
    3f20:	0152      	lsls	r2, r2, #5
    3f22:	188a      	adds	r2, r1, r2
    3f24:	18d3      	adds	r3, r2, r3
    3f26:	2220      	movs	r2, #32
    3f28:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    3f2a:	2300      	movs	r3, #0
}
    3f2c:	0018      	movs	r0, r3
    3f2e:	46bd      	mov	sp, r7
    3f30:	b004      	add	sp, #16
    3f32:	bd80      	pop	{r7, pc}
    3f34:	0001f8f4 	.word	0x0001f8f4

00003f38 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	2200      	movs	r2, #0
    3f44:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	2200      	movs	r2, #0
    3f4a:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	2200      	movs	r2, #0
    3f50:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	2201      	movs	r2, #1
    3f56:	70da      	strb	r2, [r3, #3]
}
    3f58:	46c0      	nop			; (mov r8, r8)
    3f5a:	46bd      	mov	sp, r7
    3f5c:	b002      	add	sp, #8
    3f5e:	bd80      	pop	{r7, pc}

00003f60 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3f60:	b590      	push	{r4, r7, lr}
    3f62:	b085      	sub	sp, #20
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3f6a:	683b      	ldr	r3, [r7, #0]
    3f6c:	781a      	ldrb	r2, [r3, #0]
    3f6e:	230f      	movs	r3, #15
    3f70:	18fb      	adds	r3, r7, r3
    3f72:	210f      	movs	r1, #15
    3f74:	400a      	ands	r2, r1
    3f76:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3f78:	683b      	ldr	r3, [r7, #0]
    3f7a:	781b      	ldrb	r3, [r3, #0]
    3f7c:	b25b      	sxtb	r3, r3
    3f7e:	b2db      	uxtb	r3, r3
    3f80:	09db      	lsrs	r3, r3, #7
    3f82:	b2da      	uxtb	r2, r3
    3f84:	230e      	movs	r3, #14
    3f86:	18fb      	adds	r3, r7, r3
    3f88:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    3f8a:	683b      	ldr	r3, [r7, #0]
    3f8c:	78db      	ldrb	r3, [r3, #3]
    3f8e:	2b04      	cmp	r3, #4
    3f90:	d900      	bls.n	3f94 <usb_device_endpoint_set_config+0x34>
    3f92:	e200      	b.n	4396 <usb_device_endpoint_set_config+0x436>
    3f94:	009a      	lsls	r2, r3, #2
    3f96:	4be4      	ldr	r3, [pc, #912]	; (4328 <usb_device_endpoint_set_config+0x3c8>)
    3f98:	18d3      	adds	r3, r2, r3
    3f9a:	681b      	ldr	r3, [r3, #0]
    3f9c:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3f9e:	687b      	ldr	r3, [r7, #4]
    3fa0:	681b      	ldr	r3, [r3, #0]
    3fa2:	220f      	movs	r2, #15
    3fa4:	18ba      	adds	r2, r7, r2
    3fa6:	7812      	ldrb	r2, [r2, #0]
    3fa8:	3208      	adds	r2, #8
    3faa:	0152      	lsls	r2, r2, #5
    3fac:	2100      	movs	r1, #0
    3fae:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    3fb0:	2300      	movs	r3, #0
    3fb2:	e249      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	681b      	ldr	r3, [r3, #0]
    3fb8:	220f      	movs	r2, #15
    3fba:	18ba      	adds	r2, r7, r2
    3fbc:	7812      	ldrb	r2, [r2, #0]
    3fbe:	3208      	adds	r2, #8
    3fc0:	0152      	lsls	r2, r2, #5
    3fc2:	5cd3      	ldrb	r3, [r2, r3]
    3fc4:	b2db      	uxtb	r3, r3
    3fc6:	001a      	movs	r2, r3
    3fc8:	2307      	movs	r3, #7
    3fca:	4013      	ands	r3, r2
    3fcc:	d130      	bne.n	4030 <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	220f      	movs	r2, #15
    3fd4:	18ba      	adds	r2, r7, r2
    3fd6:	7812      	ldrb	r2, [r2, #0]
    3fd8:	3208      	adds	r2, #8
    3fda:	0152      	lsls	r2, r2, #5
    3fdc:	5cd3      	ldrb	r3, [r2, r3]
    3fde:	b2db      	uxtb	r3, r3
    3fe0:	001a      	movs	r2, r3
    3fe2:	2370      	movs	r3, #112	; 0x70
    3fe4:	4013      	ands	r3, r2
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fe6:	d123      	bne.n	4030 <usb_device_endpoint_set_config+0xd0>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	681b      	ldr	r3, [r3, #0]
    3fec:	220f      	movs	r2, #15
    3fee:	18ba      	adds	r2, r7, r2
    3ff0:	7812      	ldrb	r2, [r2, #0]
    3ff2:	3208      	adds	r2, #8
    3ff4:	0152      	lsls	r2, r2, #5
    3ff6:	2111      	movs	r1, #17
    3ff8:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	681a      	ldr	r2, [r3, #0]
    3ffe:	230f      	movs	r3, #15
    4000:	18fb      	adds	r3, r7, r3
    4002:	781b      	ldrb	r3, [r3, #0]
    4004:	3308      	adds	r3, #8
    4006:	015b      	lsls	r3, r3, #5
    4008:	18d3      	adds	r3, r2, r3
    400a:	3305      	adds	r3, #5
    400c:	2240      	movs	r2, #64	; 0x40
    400e:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	681a      	ldr	r2, [r3, #0]
    4014:	230f      	movs	r3, #15
    4016:	18fb      	adds	r3, r7, r3
    4018:	781b      	ldrb	r3, [r3, #0]
    401a:	3308      	adds	r3, #8
    401c:	015b      	lsls	r3, r3, #5
    401e:	18d3      	adds	r3, r2, r3
    4020:	3304      	adds	r3, #4
    4022:	2280      	movs	r2, #128	; 0x80
    4024:	701a      	strb	r2, [r3, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    4026:	683b      	ldr	r3, [r7, #0]
    4028:	789b      	ldrb	r3, [r3, #2]
    402a:	2b00      	cmp	r3, #0
    402c:	d102      	bne.n	4034 <usb_device_endpoint_set_config+0xd4>
    402e:	e028      	b.n	4082 <usb_device_endpoint_set_config+0x122>
				return STATUS_ERR_DENIED;
    4030:	231c      	movs	r3, #28
    4032:	e209      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4034:	230f      	movs	r3, #15
    4036:	18fb      	adds	r3, r7, r3
    4038:	7818      	ldrb	r0, [r3, #0]
    403a:	230f      	movs	r3, #15
    403c:	18fb      	adds	r3, r7, r3
    403e:	781b      	ldrb	r3, [r3, #0]
    4040:	4aba      	ldr	r2, [pc, #744]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4042:	015b      	lsls	r3, r3, #5
    4044:	18d3      	adds	r3, r2, r3
    4046:	3304      	adds	r3, #4
    4048:	681b      	ldr	r3, [r3, #0]
    404a:	2280      	movs	r2, #128	; 0x80
    404c:	0612      	lsls	r2, r2, #24
    404e:	431a      	orrs	r2, r3
    4050:	49b6      	ldr	r1, [pc, #728]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4052:	0143      	lsls	r3, r0, #5
    4054:	18cb      	adds	r3, r1, r3
    4056:	3304      	adds	r3, #4
    4058:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    405a:	230f      	movs	r3, #15
    405c:	18fb      	adds	r3, r7, r3
    405e:	7818      	ldrb	r0, [r3, #0]
    4060:	230f      	movs	r3, #15
    4062:	18fb      	adds	r3, r7, r3
    4064:	781b      	ldrb	r3, [r3, #0]
    4066:	4ab1      	ldr	r2, [pc, #708]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4068:	015b      	lsls	r3, r3, #5
    406a:	18d3      	adds	r3, r2, r3
    406c:	3314      	adds	r3, #20
    406e:	681b      	ldr	r3, [r3, #0]
    4070:	2280      	movs	r2, #128	; 0x80
    4072:	0612      	lsls	r2, r2, #24
    4074:	431a      	orrs	r2, r3
    4076:	49ad      	ldr	r1, [pc, #692]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4078:	0143      	lsls	r3, r0, #5
    407a:	18cb      	adds	r3, r1, r3
    407c:	3314      	adds	r3, #20
    407e:	601a      	str	r2, [r3, #0]
    4080:	e023      	b.n	40ca <usb_device_endpoint_set_config+0x16a>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4082:	230f      	movs	r3, #15
    4084:	18fb      	adds	r3, r7, r3
    4086:	7818      	ldrb	r0, [r3, #0]
    4088:	230f      	movs	r3, #15
    408a:	18fb      	adds	r3, r7, r3
    408c:	781b      	ldrb	r3, [r3, #0]
    408e:	4aa7      	ldr	r2, [pc, #668]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4090:	015b      	lsls	r3, r3, #5
    4092:	18d3      	adds	r3, r2, r3
    4094:	3304      	adds	r3, #4
    4096:	681b      	ldr	r3, [r3, #0]
    4098:	005b      	lsls	r3, r3, #1
    409a:	085a      	lsrs	r2, r3, #1
    409c:	49a3      	ldr	r1, [pc, #652]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    409e:	0143      	lsls	r3, r0, #5
    40a0:	18cb      	adds	r3, r1, r3
    40a2:	3304      	adds	r3, #4
    40a4:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    40a6:	230f      	movs	r3, #15
    40a8:	18fb      	adds	r3, r7, r3
    40aa:	7818      	ldrb	r0, [r3, #0]
    40ac:	230f      	movs	r3, #15
    40ae:	18fb      	adds	r3, r7, r3
    40b0:	781b      	ldrb	r3, [r3, #0]
    40b2:	4a9e      	ldr	r2, [pc, #632]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    40b4:	015b      	lsls	r3, r3, #5
    40b6:	18d3      	adds	r3, r2, r3
    40b8:	3314      	adds	r3, #20
    40ba:	681b      	ldr	r3, [r3, #0]
    40bc:	005b      	lsls	r3, r3, #1
    40be:	085a      	lsrs	r2, r3, #1
    40c0:	499a      	ldr	r1, [pc, #616]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    40c2:	0143      	lsls	r3, r0, #5
    40c4:	18cb      	adds	r3, r1, r3
    40c6:	3314      	adds	r3, #20
    40c8:	601a      	str	r2, [r3, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    40ca:	230f      	movs	r3, #15
    40cc:	18fb      	adds	r3, r7, r3
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	683a      	ldr	r2, [r7, #0]
    40d2:	7852      	ldrb	r2, [r2, #1]
    40d4:	1c11      	adds	r1, r2, #0
    40d6:	2207      	movs	r2, #7
    40d8:	400a      	ands	r2, r1
    40da:	b2d1      	uxtb	r1, r2
    40dc:	4a93      	ldr	r2, [pc, #588]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    40de:	015b      	lsls	r3, r3, #5
    40e0:	18d3      	adds	r3, r2, r3
    40e2:	685a      	ldr	r2, [r3, #4]
    40e4:	2007      	movs	r0, #7
    40e6:	4001      	ands	r1, r0
    40e8:	0709      	lsls	r1, r1, #28
    40ea:	4891      	ldr	r0, [pc, #580]	; (4330 <usb_device_endpoint_set_config+0x3d0>)
    40ec:	4002      	ands	r2, r0
    40ee:	430a      	orrs	r2, r1
    40f0:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    40f2:	230f      	movs	r3, #15
    40f4:	18fb      	adds	r3, r7, r3
    40f6:	781b      	ldrb	r3, [r3, #0]
    40f8:	683a      	ldr	r2, [r7, #0]
    40fa:	7852      	ldrb	r2, [r2, #1]
    40fc:	1c11      	adds	r1, r2, #0
    40fe:	2207      	movs	r2, #7
    4100:	400a      	ands	r2, r1
    4102:	b2d1      	uxtb	r1, r2
    4104:	4a89      	ldr	r2, [pc, #548]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4106:	015b      	lsls	r3, r3, #5
    4108:	18d3      	adds	r3, r2, r3
    410a:	3310      	adds	r3, #16
    410c:	685a      	ldr	r2, [r3, #4]
    410e:	2007      	movs	r0, #7
    4110:	4001      	ands	r1, r0
    4112:	0709      	lsls	r1, r1, #28
    4114:	4886      	ldr	r0, [pc, #536]	; (4330 <usb_device_endpoint_set_config+0x3d0>)
    4116:	4002      	ands	r2, r0
    4118:	430a      	orrs	r2, r1
    411a:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    411c:	2300      	movs	r3, #0
    411e:	e193      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    4120:	230e      	movs	r3, #14
    4122:	18fb      	adds	r3, r7, r3
    4124:	781b      	ldrb	r3, [r3, #0]
    4126:	2b00      	cmp	r3, #0
    4128:	d030      	beq.n	418c <usb_device_endpoint_set_config+0x22c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	220f      	movs	r2, #15
    4130:	18ba      	adds	r2, r7, r2
    4132:	7812      	ldrb	r2, [r2, #0]
    4134:	3208      	adds	r2, #8
    4136:	0152      	lsls	r2, r2, #5
    4138:	5cd3      	ldrb	r3, [r2, r3]
    413a:	b2db      	uxtb	r3, r3
    413c:	001a      	movs	r2, r3
    413e:	2370      	movs	r3, #112	; 0x70
    4140:	4013      	ands	r3, r2
    4142:	d121      	bne.n	4188 <usb_device_endpoint_set_config+0x228>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	681a      	ldr	r2, [r3, #0]
    4148:	230f      	movs	r3, #15
    414a:	18fb      	adds	r3, r7, r3
    414c:	7819      	ldrb	r1, [r3, #0]
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	681b      	ldr	r3, [r3, #0]
    4152:	200f      	movs	r0, #15
    4154:	1838      	adds	r0, r7, r0
    4156:	7800      	ldrb	r0, [r0, #0]
    4158:	3008      	adds	r0, #8
    415a:	0140      	lsls	r0, r0, #5
    415c:	5cc3      	ldrb	r3, [r0, r3]
    415e:	b2db      	uxtb	r3, r3
    4160:	2020      	movs	r0, #32
    4162:	4303      	orrs	r3, r0
    4164:	b2d8      	uxtb	r0, r3
    4166:	000b      	movs	r3, r1
    4168:	3308      	adds	r3, #8
    416a:	015b      	lsls	r3, r3, #5
    416c:	1c01      	adds	r1, r0, #0
    416e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	681a      	ldr	r2, [r3, #0]
    4174:	230f      	movs	r3, #15
    4176:	18fb      	adds	r3, r7, r3
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	3308      	adds	r3, #8
    417c:	015b      	lsls	r3, r3, #5
    417e:	18d3      	adds	r3, r2, r3
    4180:	3304      	adds	r3, #4
    4182:	2280      	movs	r2, #128	; 0x80
    4184:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    4186:	e107      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4188:	231c      	movs	r3, #28
    418a:	e15d      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    418c:	687b      	ldr	r3, [r7, #4]
    418e:	681b      	ldr	r3, [r3, #0]
    4190:	220f      	movs	r2, #15
    4192:	18ba      	adds	r2, r7, r2
    4194:	7812      	ldrb	r2, [r2, #0]
    4196:	3208      	adds	r2, #8
    4198:	0152      	lsls	r2, r2, #5
    419a:	5cd3      	ldrb	r3, [r2, r3]
    419c:	b2db      	uxtb	r3, r3
    419e:	001a      	movs	r2, r3
    41a0:	2307      	movs	r3, #7
    41a2:	4013      	ands	r3, r2
    41a4:	d121      	bne.n	41ea <usb_device_endpoint_set_config+0x28a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	681a      	ldr	r2, [r3, #0]
    41aa:	230f      	movs	r3, #15
    41ac:	18fb      	adds	r3, r7, r3
    41ae:	7819      	ldrb	r1, [r3, #0]
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	200f      	movs	r0, #15
    41b6:	1838      	adds	r0, r7, r0
    41b8:	7800      	ldrb	r0, [r0, #0]
    41ba:	3008      	adds	r0, #8
    41bc:	0140      	lsls	r0, r0, #5
    41be:	5cc3      	ldrb	r3, [r0, r3]
    41c0:	b2db      	uxtb	r3, r3
    41c2:	2002      	movs	r0, #2
    41c4:	4303      	orrs	r3, r0
    41c6:	b2d8      	uxtb	r0, r3
    41c8:	000b      	movs	r3, r1
    41ca:	3308      	adds	r3, #8
    41cc:	015b      	lsls	r3, r3, #5
    41ce:	1c01      	adds	r1, r0, #0
    41d0:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    41d2:	687b      	ldr	r3, [r7, #4]
    41d4:	681a      	ldr	r2, [r3, #0]
    41d6:	230f      	movs	r3, #15
    41d8:	18fb      	adds	r3, r7, r3
    41da:	781b      	ldrb	r3, [r3, #0]
    41dc:	3308      	adds	r3, #8
    41de:	015b      	lsls	r3, r3, #5
    41e0:	18d3      	adds	r3, r2, r3
    41e2:	3305      	adds	r3, #5
    41e4:	2240      	movs	r2, #64	; 0x40
    41e6:	701a      	strb	r2, [r3, #0]
			break;
    41e8:	e0d6      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    41ea:	231c      	movs	r3, #28
    41ec:	e12c      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    41ee:	230e      	movs	r3, #14
    41f0:	18fb      	adds	r3, r7, r3
    41f2:	781b      	ldrb	r3, [r3, #0]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d030      	beq.n	425a <usb_device_endpoint_set_config+0x2fa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	681b      	ldr	r3, [r3, #0]
    41fc:	220f      	movs	r2, #15
    41fe:	18ba      	adds	r2, r7, r2
    4200:	7812      	ldrb	r2, [r2, #0]
    4202:	3208      	adds	r2, #8
    4204:	0152      	lsls	r2, r2, #5
    4206:	5cd3      	ldrb	r3, [r2, r3]
    4208:	b2db      	uxtb	r3, r3
    420a:	001a      	movs	r2, r3
    420c:	2370      	movs	r3, #112	; 0x70
    420e:	4013      	ands	r3, r2
    4210:	d121      	bne.n	4256 <usb_device_endpoint_set_config+0x2f6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	681a      	ldr	r2, [r3, #0]
    4216:	230f      	movs	r3, #15
    4218:	18fb      	adds	r3, r7, r3
    421a:	7819      	ldrb	r1, [r3, #0]
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	681b      	ldr	r3, [r3, #0]
    4220:	200f      	movs	r0, #15
    4222:	1838      	adds	r0, r7, r0
    4224:	7800      	ldrb	r0, [r0, #0]
    4226:	3008      	adds	r0, #8
    4228:	0140      	lsls	r0, r0, #5
    422a:	5cc3      	ldrb	r3, [r0, r3]
    422c:	b2db      	uxtb	r3, r3
    422e:	2030      	movs	r0, #48	; 0x30
    4230:	4303      	orrs	r3, r0
    4232:	b2d8      	uxtb	r0, r3
    4234:	000b      	movs	r3, r1
    4236:	3308      	adds	r3, #8
    4238:	015b      	lsls	r3, r3, #5
    423a:	1c01      	adds	r1, r0, #0
    423c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	681a      	ldr	r2, [r3, #0]
    4242:	230f      	movs	r3, #15
    4244:	18fb      	adds	r3, r7, r3
    4246:	781b      	ldrb	r3, [r3, #0]
    4248:	3308      	adds	r3, #8
    424a:	015b      	lsls	r3, r3, #5
    424c:	18d3      	adds	r3, r2, r3
    424e:	3304      	adds	r3, #4
    4250:	2280      	movs	r2, #128	; 0x80
    4252:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    4254:	e0a0      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4256:	231c      	movs	r3, #28
    4258:	e0f6      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	681b      	ldr	r3, [r3, #0]
    425e:	220f      	movs	r2, #15
    4260:	18ba      	adds	r2, r7, r2
    4262:	7812      	ldrb	r2, [r2, #0]
    4264:	3208      	adds	r2, #8
    4266:	0152      	lsls	r2, r2, #5
    4268:	5cd3      	ldrb	r3, [r2, r3]
    426a:	b2db      	uxtb	r3, r3
    426c:	001a      	movs	r2, r3
    426e:	2307      	movs	r3, #7
    4270:	4013      	ands	r3, r2
    4272:	d121      	bne.n	42b8 <usb_device_endpoint_set_config+0x358>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	681a      	ldr	r2, [r3, #0]
    4278:	230f      	movs	r3, #15
    427a:	18fb      	adds	r3, r7, r3
    427c:	7819      	ldrb	r1, [r3, #0]
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	200f      	movs	r0, #15
    4284:	1838      	adds	r0, r7, r0
    4286:	7800      	ldrb	r0, [r0, #0]
    4288:	3008      	adds	r0, #8
    428a:	0140      	lsls	r0, r0, #5
    428c:	5cc3      	ldrb	r3, [r0, r3]
    428e:	b2db      	uxtb	r3, r3
    4290:	2003      	movs	r0, #3
    4292:	4303      	orrs	r3, r0
    4294:	b2d8      	uxtb	r0, r3
    4296:	000b      	movs	r3, r1
    4298:	3308      	adds	r3, #8
    429a:	015b      	lsls	r3, r3, #5
    429c:	1c01      	adds	r1, r0, #0
    429e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	681a      	ldr	r2, [r3, #0]
    42a4:	230f      	movs	r3, #15
    42a6:	18fb      	adds	r3, r7, r3
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	3308      	adds	r3, #8
    42ac:	015b      	lsls	r3, r3, #5
    42ae:	18d3      	adds	r3, r2, r3
    42b0:	3305      	adds	r3, #5
    42b2:	2240      	movs	r2, #64	; 0x40
    42b4:	701a      	strb	r2, [r3, #0]
			break;
    42b6:	e06f      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    42b8:	231c      	movs	r3, #28
    42ba:	e0c5      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    42bc:	230e      	movs	r3, #14
    42be:	18fb      	adds	r3, r7, r3
    42c0:	781b      	ldrb	r3, [r3, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d036      	beq.n	4334 <usb_device_endpoint_set_config+0x3d4>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	220f      	movs	r2, #15
    42cc:	18ba      	adds	r2, r7, r2
    42ce:	7812      	ldrb	r2, [r2, #0]
    42d0:	3208      	adds	r2, #8
    42d2:	0152      	lsls	r2, r2, #5
    42d4:	5cd3      	ldrb	r3, [r2, r3]
    42d6:	b2db      	uxtb	r3, r3
    42d8:	001a      	movs	r2, r3
    42da:	2370      	movs	r3, #112	; 0x70
    42dc:	4013      	ands	r3, r2
    42de:	d121      	bne.n	4324 <usb_device_endpoint_set_config+0x3c4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	681a      	ldr	r2, [r3, #0]
    42e4:	230f      	movs	r3, #15
    42e6:	18fb      	adds	r3, r7, r3
    42e8:	7819      	ldrb	r1, [r3, #0]
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	200f      	movs	r0, #15
    42f0:	1838      	adds	r0, r7, r0
    42f2:	7800      	ldrb	r0, [r0, #0]
    42f4:	3008      	adds	r0, #8
    42f6:	0140      	lsls	r0, r0, #5
    42f8:	5cc3      	ldrb	r3, [r0, r3]
    42fa:	b2db      	uxtb	r3, r3
    42fc:	2040      	movs	r0, #64	; 0x40
    42fe:	4303      	orrs	r3, r0
    4300:	b2d8      	uxtb	r0, r3
    4302:	000b      	movs	r3, r1
    4304:	3308      	adds	r3, #8
    4306:	015b      	lsls	r3, r3, #5
    4308:	1c01      	adds	r1, r0, #0
    430a:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	681a      	ldr	r2, [r3, #0]
    4310:	230f      	movs	r3, #15
    4312:	18fb      	adds	r3, r7, r3
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	3308      	adds	r3, #8
    4318:	015b      	lsls	r3, r3, #5
    431a:	18d3      	adds	r3, r2, r3
    431c:	3304      	adds	r3, #4
    431e:	2280      	movs	r2, #128	; 0x80
    4320:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    4322:	e039      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4324:	231c      	movs	r3, #28
    4326:	e08f      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
    4328:	0001f8f8 	.word	0x0001f8f8
    432c:	200028ec 	.word	0x200028ec
    4330:	8fffffff 	.word	0x8fffffff
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	681b      	ldr	r3, [r3, #0]
    4338:	220f      	movs	r2, #15
    433a:	18ba      	adds	r2, r7, r2
    433c:	7812      	ldrb	r2, [r2, #0]
    433e:	3208      	adds	r2, #8
    4340:	0152      	lsls	r2, r2, #5
    4342:	5cd3      	ldrb	r3, [r2, r3]
    4344:	b2db      	uxtb	r3, r3
    4346:	001a      	movs	r2, r3
    4348:	2307      	movs	r3, #7
    434a:	4013      	ands	r3, r2
    434c:	d121      	bne.n	4392 <usb_device_endpoint_set_config+0x432>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    434e:	687b      	ldr	r3, [r7, #4]
    4350:	681a      	ldr	r2, [r3, #0]
    4352:	230f      	movs	r3, #15
    4354:	18fb      	adds	r3, r7, r3
    4356:	7819      	ldrb	r1, [r3, #0]
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	200f      	movs	r0, #15
    435e:	1838      	adds	r0, r7, r0
    4360:	7800      	ldrb	r0, [r0, #0]
    4362:	3008      	adds	r0, #8
    4364:	0140      	lsls	r0, r0, #5
    4366:	5cc3      	ldrb	r3, [r0, r3]
    4368:	b2db      	uxtb	r3, r3
    436a:	2004      	movs	r0, #4
    436c:	4303      	orrs	r3, r0
    436e:	b2d8      	uxtb	r0, r3
    4370:	000b      	movs	r3, r1
    4372:	3308      	adds	r3, #8
    4374:	015b      	lsls	r3, r3, #5
    4376:	1c01      	adds	r1, r0, #0
    4378:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	681a      	ldr	r2, [r3, #0]
    437e:	230f      	movs	r3, #15
    4380:	18fb      	adds	r3, r7, r3
    4382:	781b      	ldrb	r3, [r3, #0]
    4384:	3308      	adds	r3, #8
    4386:	015b      	lsls	r3, r3, #5
    4388:	18d3      	adds	r3, r2, r3
    438a:	3305      	adds	r3, #5
    438c:	2240      	movs	r2, #64	; 0x40
    438e:	701a      	strb	r2, [r3, #0]
			break;
    4390:	e002      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4392:	231c      	movs	r3, #28
    4394:	e058      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		default:
			break;
    4396:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4398:	230f      	movs	r3, #15
    439a:	18fb      	adds	r3, r7, r3
    439c:	7818      	ldrb	r0, [r3, #0]
    439e:	230e      	movs	r3, #14
    43a0:	18fb      	adds	r3, r7, r3
    43a2:	781b      	ldrb	r3, [r3, #0]
    43a4:	683a      	ldr	r2, [r7, #0]
    43a6:	7852      	ldrb	r2, [r2, #1]
    43a8:	1c11      	adds	r1, r2, #0
    43aa:	2207      	movs	r2, #7
    43ac:	400a      	ands	r2, r1
    43ae:	b2d1      	uxtb	r1, r2
    43b0:	4a27      	ldr	r2, [pc, #156]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    43b2:	0040      	lsls	r0, r0, #1
    43b4:	18c3      	adds	r3, r0, r3
    43b6:	011b      	lsls	r3, r3, #4
    43b8:	18d3      	adds	r3, r2, r3
    43ba:	685a      	ldr	r2, [r3, #4]
    43bc:	2007      	movs	r0, #7
    43be:	4001      	ands	r1, r0
    43c0:	0709      	lsls	r1, r1, #28
    43c2:	4824      	ldr	r0, [pc, #144]	; (4454 <usb_device_endpoint_set_config+0x4f4>)
    43c4:	4002      	ands	r2, r0
    43c6:	430a      	orrs	r2, r1
    43c8:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    43ca:	683b      	ldr	r3, [r7, #0]
    43cc:	789b      	ldrb	r3, [r3, #2]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d01d      	beq.n	440e <usb_device_endpoint_set_config+0x4ae>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    43d2:	230f      	movs	r3, #15
    43d4:	18fb      	adds	r3, r7, r3
    43d6:	781c      	ldrb	r4, [r3, #0]
    43d8:	230e      	movs	r3, #14
    43da:	18fb      	adds	r3, r7, r3
    43dc:	7818      	ldrb	r0, [r3, #0]
    43de:	230f      	movs	r3, #15
    43e0:	18fb      	adds	r3, r7, r3
    43e2:	7819      	ldrb	r1, [r3, #0]
    43e4:	230e      	movs	r3, #14
    43e6:	18fb      	adds	r3, r7, r3
    43e8:	781b      	ldrb	r3, [r3, #0]
    43ea:	4a19      	ldr	r2, [pc, #100]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    43ec:	0049      	lsls	r1, r1, #1
    43ee:	18cb      	adds	r3, r1, r3
    43f0:	011b      	lsls	r3, r3, #4
    43f2:	18d3      	adds	r3, r2, r3
    43f4:	3304      	adds	r3, #4
    43f6:	681b      	ldr	r3, [r3, #0]
    43f8:	2280      	movs	r2, #128	; 0x80
    43fa:	0612      	lsls	r2, r2, #24
    43fc:	431a      	orrs	r2, r3
    43fe:	4914      	ldr	r1, [pc, #80]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    4400:	0063      	lsls	r3, r4, #1
    4402:	181b      	adds	r3, r3, r0
    4404:	011b      	lsls	r3, r3, #4
    4406:	18cb      	adds	r3, r1, r3
    4408:	3304      	adds	r3, #4
    440a:	601a      	str	r2, [r3, #0]
    440c:	e01b      	b.n	4446 <usb_device_endpoint_set_config+0x4e6>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    440e:	230f      	movs	r3, #15
    4410:	18fb      	adds	r3, r7, r3
    4412:	781c      	ldrb	r4, [r3, #0]
    4414:	230e      	movs	r3, #14
    4416:	18fb      	adds	r3, r7, r3
    4418:	7818      	ldrb	r0, [r3, #0]
    441a:	230f      	movs	r3, #15
    441c:	18fb      	adds	r3, r7, r3
    441e:	7819      	ldrb	r1, [r3, #0]
    4420:	230e      	movs	r3, #14
    4422:	18fb      	adds	r3, r7, r3
    4424:	781b      	ldrb	r3, [r3, #0]
    4426:	4a0a      	ldr	r2, [pc, #40]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    4428:	0049      	lsls	r1, r1, #1
    442a:	18cb      	adds	r3, r1, r3
    442c:	011b      	lsls	r3, r3, #4
    442e:	18d3      	adds	r3, r2, r3
    4430:	3304      	adds	r3, #4
    4432:	681b      	ldr	r3, [r3, #0]
    4434:	005b      	lsls	r3, r3, #1
    4436:	085a      	lsrs	r2, r3, #1
    4438:	4905      	ldr	r1, [pc, #20]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    443a:	0063      	lsls	r3, r4, #1
    443c:	181b      	adds	r3, r3, r0
    443e:	011b      	lsls	r3, r3, #4
    4440:	18cb      	adds	r3, r1, r3
    4442:	3304      	adds	r3, #4
    4444:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    4446:	2300      	movs	r3, #0
}
    4448:	0018      	movs	r0, r3
    444a:	46bd      	mov	sp, r7
    444c:	b005      	add	sp, #20
    444e:	bd90      	pop	{r4, r7, pc}
    4450:	200028ec 	.word	0x200028ec
    4454:	8fffffff 	.word	0x8fffffff

00004458 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    4458:	b580      	push	{r7, lr}
    445a:	b084      	sub	sp, #16
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
    4460:	000a      	movs	r2, r1
    4462:	1cfb      	adds	r3, r7, #3
    4464:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4466:	230f      	movs	r3, #15
    4468:	18fb      	adds	r3, r7, r3
    446a:	1cfa      	adds	r2, r7, #3
    446c:	7812      	ldrb	r2, [r2, #0]
    446e:	210f      	movs	r1, #15
    4470:	400a      	ands	r2, r1
    4472:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4474:	1cfb      	adds	r3, r7, #3
    4476:	781b      	ldrb	r3, [r3, #0]
    4478:	b25b      	sxtb	r3, r3
    447a:	2b00      	cmp	r3, #0
    447c:	da16      	bge.n	44ac <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	681a      	ldr	r2, [r3, #0]
    4482:	230f      	movs	r3, #15
    4484:	18fb      	adds	r3, r7, r3
    4486:	781b      	ldrb	r3, [r3, #0]
    4488:	3308      	adds	r3, #8
    448a:	015b      	lsls	r3, r3, #5
    448c:	18d3      	adds	r3, r2, r3
    448e:	3304      	adds	r3, #4
    4490:	2280      	movs	r2, #128	; 0x80
    4492:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	681a      	ldr	r2, [r3, #0]
    4498:	230f      	movs	r3, #15
    449a:	18fb      	adds	r3, r7, r3
    449c:	781b      	ldrb	r3, [r3, #0]
    449e:	3308      	adds	r3, #8
    44a0:	015b      	lsls	r3, r3, #5
    44a2:	18d3      	adds	r3, r2, r3
    44a4:	3307      	adds	r3, #7
    44a6:	2202      	movs	r2, #2
    44a8:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    44aa:	e015      	b.n	44d8 <usb_device_endpoint_abort_job+0x80>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	681a      	ldr	r2, [r3, #0]
    44b0:	230f      	movs	r3, #15
    44b2:	18fb      	adds	r3, r7, r3
    44b4:	781b      	ldrb	r3, [r3, #0]
    44b6:	3308      	adds	r3, #8
    44b8:	015b      	lsls	r3, r3, #5
    44ba:	18d3      	adds	r3, r2, r3
    44bc:	3305      	adds	r3, #5
    44be:	2240      	movs	r2, #64	; 0x40
    44c0:	701a      	strb	r2, [r3, #0]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	681a      	ldr	r2, [r3, #0]
    44c6:	230f      	movs	r3, #15
    44c8:	18fb      	adds	r3, r7, r3
    44ca:	781b      	ldrb	r3, [r3, #0]
    44cc:	3308      	adds	r3, #8
    44ce:	015b      	lsls	r3, r3, #5
    44d0:	18d3      	adds	r3, r2, r3
    44d2:	3307      	adds	r3, #7
    44d4:	2201      	movs	r2, #1
    44d6:	701a      	strb	r2, [r3, #0]
}
    44d8:	46c0      	nop			; (mov r8, r8)
    44da:	46bd      	mov	sp, r7
    44dc:	b004      	add	sp, #16
    44de:	bd80      	pop	{r7, pc}

000044e0 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b084      	sub	sp, #16
    44e4:	af00      	add	r7, sp, #0
    44e6:	6078      	str	r0, [r7, #4]
    44e8:	000a      	movs	r2, r1
    44ea:	1cfb      	adds	r3, r7, #3
    44ec:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    44ee:	230f      	movs	r3, #15
    44f0:	18fb      	adds	r3, r7, r3
    44f2:	1cfa      	adds	r2, r7, #3
    44f4:	7812      	ldrb	r2, [r2, #0]
    44f6:	210f      	movs	r1, #15
    44f8:	400a      	ands	r2, r1
    44fa:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    44fc:	1cfb      	adds	r3, r7, #3
    44fe:	781b      	ldrb	r3, [r3, #0]
    4500:	b25b      	sxtb	r3, r3
    4502:	2b00      	cmp	r3, #0
    4504:	da11      	bge.n	452a <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	681a      	ldr	r2, [r3, #0]
    450a:	230f      	movs	r3, #15
    450c:	18fb      	adds	r3, r7, r3
    450e:	781b      	ldrb	r3, [r3, #0]
    4510:	3308      	adds	r3, #8
    4512:	015b      	lsls	r3, r3, #5
    4514:	18d3      	adds	r3, r2, r3
    4516:	3306      	adds	r3, #6
    4518:	781b      	ldrb	r3, [r3, #0]
    451a:	b2db      	uxtb	r3, r3
    451c:	001a      	movs	r2, r3
    451e:	2320      	movs	r3, #32
    4520:	4013      	ands	r3, r2
    4522:	1e5a      	subs	r2, r3, #1
    4524:	4193      	sbcs	r3, r2
    4526:	b2db      	uxtb	r3, r3
    4528:	e010      	b.n	454c <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	681a      	ldr	r2, [r3, #0]
    452e:	230f      	movs	r3, #15
    4530:	18fb      	adds	r3, r7, r3
    4532:	781b      	ldrb	r3, [r3, #0]
    4534:	3308      	adds	r3, #8
    4536:	015b      	lsls	r3, r3, #5
    4538:	18d3      	adds	r3, r2, r3
    453a:	3306      	adds	r3, #6
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	b2db      	uxtb	r3, r3
    4540:	001a      	movs	r2, r3
    4542:	2310      	movs	r3, #16
    4544:	4013      	ands	r3, r2
    4546:	1e5a      	subs	r2, r3, #1
    4548:	4193      	sbcs	r3, r2
    454a:	b2db      	uxtb	r3, r3
	}
}
    454c:	0018      	movs	r0, r3
    454e:	46bd      	mov	sp, r7
    4550:	b004      	add	sp, #16
    4552:	bd80      	pop	{r7, pc}

00004554 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    4554:	b580      	push	{r7, lr}
    4556:	b084      	sub	sp, #16
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
    455c:	000a      	movs	r2, r1
    455e:	1cfb      	adds	r3, r7, #3
    4560:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4562:	230f      	movs	r3, #15
    4564:	18fb      	adds	r3, r7, r3
    4566:	1cfa      	adds	r2, r7, #3
    4568:	7812      	ldrb	r2, [r2, #0]
    456a:	210f      	movs	r1, #15
    456c:	400a      	ands	r2, r1
    456e:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4570:	1cfb      	adds	r3, r7, #3
    4572:	781b      	ldrb	r3, [r3, #0]
    4574:	b25b      	sxtb	r3, r3
    4576:	2b00      	cmp	r3, #0
    4578:	da0b      	bge.n	4592 <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	681a      	ldr	r2, [r3, #0]
    457e:	230f      	movs	r3, #15
    4580:	18fb      	adds	r3, r7, r3
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	3308      	adds	r3, #8
    4586:	015b      	lsls	r3, r3, #5
    4588:	18d3      	adds	r3, r2, r3
    458a:	3305      	adds	r3, #5
    458c:	2220      	movs	r2, #32
    458e:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    4590:	e00a      	b.n	45a8 <usb_device_endpoint_set_halt+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	681a      	ldr	r2, [r3, #0]
    4596:	230f      	movs	r3, #15
    4598:	18fb      	adds	r3, r7, r3
    459a:	781b      	ldrb	r3, [r3, #0]
    459c:	3308      	adds	r3, #8
    459e:	015b      	lsls	r3, r3, #5
    45a0:	18d3      	adds	r3, r2, r3
    45a2:	3305      	adds	r3, #5
    45a4:	2210      	movs	r2, #16
    45a6:	701a      	strb	r2, [r3, #0]
}
    45a8:	46c0      	nop			; (mov r8, r8)
    45aa:	46bd      	mov	sp, r7
    45ac:	b004      	add	sp, #16
    45ae:	bd80      	pop	{r7, pc}

000045b0 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    45b0:	b580      	push	{r7, lr}
    45b2:	b084      	sub	sp, #16
    45b4:	af00      	add	r7, sp, #0
    45b6:	6078      	str	r0, [r7, #4]
    45b8:	000a      	movs	r2, r1
    45ba:	1cfb      	adds	r3, r7, #3
    45bc:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    45be:	230f      	movs	r3, #15
    45c0:	18fb      	adds	r3, r7, r3
    45c2:	1cfa      	adds	r2, r7, #3
    45c4:	7812      	ldrb	r2, [r2, #0]
    45c6:	210f      	movs	r1, #15
    45c8:	400a      	ands	r2, r1
    45ca:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    45cc:	1cfb      	adds	r3, r7, #3
    45ce:	781b      	ldrb	r3, [r3, #0]
    45d0:	b25b      	sxtb	r3, r3
    45d2:	2b00      	cmp	r3, #0
    45d4:	da3f      	bge.n	4656 <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	681a      	ldr	r2, [r3, #0]
    45da:	230f      	movs	r3, #15
    45dc:	18fb      	adds	r3, r7, r3
    45de:	781b      	ldrb	r3, [r3, #0]
    45e0:	3308      	adds	r3, #8
    45e2:	015b      	lsls	r3, r3, #5
    45e4:	18d3      	adds	r3, r2, r3
    45e6:	3306      	adds	r3, #6
    45e8:	781b      	ldrb	r3, [r3, #0]
    45ea:	b2db      	uxtb	r3, r3
    45ec:	001a      	movs	r2, r3
    45ee:	2320      	movs	r3, #32
    45f0:	4013      	ands	r3, r2
    45f2:	d06f      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	681a      	ldr	r2, [r3, #0]
    45f8:	230f      	movs	r3, #15
    45fa:	18fb      	adds	r3, r7, r3
    45fc:	781b      	ldrb	r3, [r3, #0]
    45fe:	3308      	adds	r3, #8
    4600:	015b      	lsls	r3, r3, #5
    4602:	18d3      	adds	r3, r2, r3
    4604:	3304      	adds	r3, #4
    4606:	2220      	movs	r2, #32
    4608:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	681a      	ldr	r2, [r3, #0]
    460e:	230f      	movs	r3, #15
    4610:	18fb      	adds	r3, r7, r3
    4612:	781b      	ldrb	r3, [r3, #0]
    4614:	3308      	adds	r3, #8
    4616:	015b      	lsls	r3, r3, #5
    4618:	18d3      	adds	r3, r2, r3
    461a:	3307      	adds	r3, #7
    461c:	781b      	ldrb	r3, [r3, #0]
    461e:	b2db      	uxtb	r3, r3
    4620:	001a      	movs	r2, r3
    4622:	2340      	movs	r3, #64	; 0x40
    4624:	4013      	ands	r3, r2
    4626:	d055      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	681a      	ldr	r2, [r3, #0]
    462c:	230f      	movs	r3, #15
    462e:	18fb      	adds	r3, r7, r3
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	3308      	adds	r3, #8
    4634:	015b      	lsls	r3, r3, #5
    4636:	18d3      	adds	r3, r2, r3
    4638:	3307      	adds	r3, #7
    463a:	2240      	movs	r2, #64	; 0x40
    463c:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	681a      	ldr	r2, [r3, #0]
    4642:	230f      	movs	r3, #15
    4644:	18fb      	adds	r3, r7, r3
    4646:	781b      	ldrb	r3, [r3, #0]
    4648:	3308      	adds	r3, #8
    464a:	015b      	lsls	r3, r3, #5
    464c:	18d3      	adds	r3, r2, r3
    464e:	3304      	adds	r3, #4
    4650:	2202      	movs	r2, #2
    4652:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    4654:	e03e      	b.n	46d4 <usb_device_endpoint_clear_halt+0x124>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4656:	687b      	ldr	r3, [r7, #4]
    4658:	681a      	ldr	r2, [r3, #0]
    465a:	230f      	movs	r3, #15
    465c:	18fb      	adds	r3, r7, r3
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	3308      	adds	r3, #8
    4662:	015b      	lsls	r3, r3, #5
    4664:	18d3      	adds	r3, r2, r3
    4666:	3306      	adds	r3, #6
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	b2db      	uxtb	r3, r3
    466c:	001a      	movs	r2, r3
    466e:	2310      	movs	r3, #16
    4670:	4013      	ands	r3, r2
    4672:	d02f      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	681a      	ldr	r2, [r3, #0]
    4678:	230f      	movs	r3, #15
    467a:	18fb      	adds	r3, r7, r3
    467c:	781b      	ldrb	r3, [r3, #0]
    467e:	3308      	adds	r3, #8
    4680:	015b      	lsls	r3, r3, #5
    4682:	18d3      	adds	r3, r2, r3
    4684:	3304      	adds	r3, #4
    4686:	2210      	movs	r2, #16
    4688:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	681a      	ldr	r2, [r3, #0]
    468e:	230f      	movs	r3, #15
    4690:	18fb      	adds	r3, r7, r3
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	3308      	adds	r3, #8
    4696:	015b      	lsls	r3, r3, #5
    4698:	18d3      	adds	r3, r2, r3
    469a:	3307      	adds	r3, #7
    469c:	781b      	ldrb	r3, [r3, #0]
    469e:	b2db      	uxtb	r3, r3
    46a0:	001a      	movs	r2, r3
    46a2:	2320      	movs	r3, #32
    46a4:	4013      	ands	r3, r2
    46a6:	d015      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	681a      	ldr	r2, [r3, #0]
    46ac:	230f      	movs	r3, #15
    46ae:	18fb      	adds	r3, r7, r3
    46b0:	781b      	ldrb	r3, [r3, #0]
    46b2:	3308      	adds	r3, #8
    46b4:	015b      	lsls	r3, r3, #5
    46b6:	18d3      	adds	r3, r2, r3
    46b8:	3307      	adds	r3, #7
    46ba:	2220      	movs	r2, #32
    46bc:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	681a      	ldr	r2, [r3, #0]
    46c2:	230f      	movs	r3, #15
    46c4:	18fb      	adds	r3, r7, r3
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	3308      	adds	r3, #8
    46ca:	015b      	lsls	r3, r3, #5
    46cc:	18d3      	adds	r3, r2, r3
    46ce:	3304      	adds	r3, #4
    46d0:	2201      	movs	r2, #1
    46d2:	701a      	strb	r2, [r3, #0]
}
    46d4:	46c0      	nop			; (mov r8, r8)
    46d6:	46bd      	mov	sp, r7
    46d8:	b004      	add	sp, #16
    46da:	bd80      	pop	{r7, pc}

000046dc <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b086      	sub	sp, #24
    46e0:	af00      	add	r7, sp, #0
    46e2:	60f8      	str	r0, [r7, #12]
    46e4:	607a      	str	r2, [r7, #4]
    46e6:	603b      	str	r3, [r7, #0]
    46e8:	230b      	movs	r3, #11
    46ea:	18fb      	adds	r3, r7, r3
    46ec:	1c0a      	adds	r2, r1, #0
    46ee:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	220b      	movs	r2, #11
    46f6:	18ba      	adds	r2, r7, r2
    46f8:	7812      	ldrb	r2, [r2, #0]
    46fa:	3208      	adds	r2, #8
    46fc:	0152      	lsls	r2, r2, #5
    46fe:	5cd3      	ldrb	r3, [r2, r3]
    4700:	065b      	lsls	r3, r3, #25
    4702:	0f5b      	lsrs	r3, r3, #29
    4704:	b2da      	uxtb	r2, r3
    4706:	2317      	movs	r3, #23
    4708:	18fb      	adds	r3, r7, r3
    470a:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    470c:	2317      	movs	r3, #23
    470e:	18fb      	adds	r3, r7, r3
    4710:	781b      	ldrb	r3, [r3, #0]
    4712:	2b00      	cmp	r3, #0
    4714:	d101      	bne.n	471a <usb_device_endpoint_write_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    4716:	231c      	movs	r3, #28
    4718:	e032      	b.n	4780 <usb_device_endpoint_write_buffer_job+0xa4>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    471a:	230b      	movs	r3, #11
    471c:	18fb      	adds	r3, r7, r3
    471e:	781b      	ldrb	r3, [r3, #0]
    4720:	687a      	ldr	r2, [r7, #4]
    4722:	4919      	ldr	r1, [pc, #100]	; (4788 <usb_device_endpoint_write_buffer_job+0xac>)
    4724:	015b      	lsls	r3, r3, #5
    4726:	18cb      	adds	r3, r1, r3
    4728:	3310      	adds	r3, #16
    472a:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    472c:	230b      	movs	r3, #11
    472e:	18fb      	adds	r3, r7, r3
    4730:	781b      	ldrb	r3, [r3, #0]
    4732:	4a15      	ldr	r2, [pc, #84]	; (4788 <usb_device_endpoint_write_buffer_job+0xac>)
    4734:	015b      	lsls	r3, r3, #5
    4736:	18d3      	adds	r3, r2, r3
    4738:	3310      	adds	r3, #16
    473a:	685a      	ldr	r2, [r3, #4]
    473c:	4913      	ldr	r1, [pc, #76]	; (478c <usb_device_endpoint_write_buffer_job+0xb0>)
    473e:	400a      	ands	r2, r1
    4740:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4742:	230b      	movs	r3, #11
    4744:	18fb      	adds	r3, r7, r3
    4746:	781b      	ldrb	r3, [r3, #0]
    4748:	683a      	ldr	r2, [r7, #0]
    474a:	b292      	uxth	r2, r2
    474c:	0492      	lsls	r2, r2, #18
    474e:	0c92      	lsrs	r2, r2, #18
    4750:	b291      	uxth	r1, r2
    4752:	4a0d      	ldr	r2, [pc, #52]	; (4788 <usb_device_endpoint_write_buffer_job+0xac>)
    4754:	015b      	lsls	r3, r3, #5
    4756:	18d3      	adds	r3, r2, r3
    4758:	3310      	adds	r3, #16
    475a:	685a      	ldr	r2, [r3, #4]
    475c:	0489      	lsls	r1, r1, #18
    475e:	0c89      	lsrs	r1, r1, #18
    4760:	0b92      	lsrs	r2, r2, #14
    4762:	0392      	lsls	r2, r2, #14
    4764:	430a      	orrs	r2, r1
    4766:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	681a      	ldr	r2, [r3, #0]
    476c:	230b      	movs	r3, #11
    476e:	18fb      	adds	r3, r7, r3
    4770:	781b      	ldrb	r3, [r3, #0]
    4772:	3308      	adds	r3, #8
    4774:	015b      	lsls	r3, r3, #5
    4776:	18d3      	adds	r3, r2, r3
    4778:	3305      	adds	r3, #5
    477a:	2280      	movs	r2, #128	; 0x80
    477c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    477e:	2300      	movs	r3, #0
}
    4780:	0018      	movs	r0, r3
    4782:	46bd      	mov	sp, r7
    4784:	b006      	add	sp, #24
    4786:	bd80      	pop	{r7, pc}
    4788:	200028ec 	.word	0x200028ec
    478c:	f0003fff 	.word	0xf0003fff

00004790 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4790:	b580      	push	{r7, lr}
    4792:	b086      	sub	sp, #24
    4794:	af00      	add	r7, sp, #0
    4796:	60f8      	str	r0, [r7, #12]
    4798:	607a      	str	r2, [r7, #4]
    479a:	603b      	str	r3, [r7, #0]
    479c:	230b      	movs	r3, #11
    479e:	18fb      	adds	r3, r7, r3
    47a0:	1c0a      	adds	r2, r1, #0
    47a2:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	220b      	movs	r2, #11
    47aa:	18ba      	adds	r2, r7, r2
    47ac:	7812      	ldrb	r2, [r2, #0]
    47ae:	3208      	adds	r2, #8
    47b0:	0152      	lsls	r2, r2, #5
    47b2:	5cd3      	ldrb	r3, [r2, r3]
    47b4:	075b      	lsls	r3, r3, #29
    47b6:	0f5b      	lsrs	r3, r3, #29
    47b8:	b2da      	uxtb	r2, r3
    47ba:	2317      	movs	r3, #23
    47bc:	18fb      	adds	r3, r7, r3
    47be:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    47c0:	2317      	movs	r3, #23
    47c2:	18fb      	adds	r3, r7, r3
    47c4:	781b      	ldrb	r3, [r3, #0]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d101      	bne.n	47ce <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    47ca:	231c      	movs	r3, #28
    47cc:	e02f      	b.n	482e <usb_device_endpoint_read_buffer_job+0x9e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    47ce:	230b      	movs	r3, #11
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	781a      	ldrb	r2, [r3, #0]
    47d4:	6879      	ldr	r1, [r7, #4]
    47d6:	4b18      	ldr	r3, [pc, #96]	; (4838 <usb_device_endpoint_read_buffer_job+0xa8>)
    47d8:	0152      	lsls	r2, r2, #5
    47da:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    47dc:	230b      	movs	r3, #11
    47de:	18fb      	adds	r3, r7, r3
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	683a      	ldr	r2, [r7, #0]
    47e4:	b292      	uxth	r2, r2
    47e6:	0492      	lsls	r2, r2, #18
    47e8:	0c92      	lsrs	r2, r2, #18
    47ea:	b291      	uxth	r1, r2
    47ec:	4a12      	ldr	r2, [pc, #72]	; (4838 <usb_device_endpoint_read_buffer_job+0xa8>)
    47ee:	015b      	lsls	r3, r3, #5
    47f0:	18d3      	adds	r3, r2, r3
    47f2:	685a      	ldr	r2, [r3, #4]
    47f4:	0489      	lsls	r1, r1, #18
    47f6:	0c89      	lsrs	r1, r1, #18
    47f8:	0389      	lsls	r1, r1, #14
    47fa:	4810      	ldr	r0, [pc, #64]	; (483c <usb_device_endpoint_read_buffer_job+0xac>)
    47fc:	4002      	ands	r2, r0
    47fe:	430a      	orrs	r2, r1
    4800:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4802:	230b      	movs	r3, #11
    4804:	18fb      	adds	r3, r7, r3
    4806:	781b      	ldrb	r3, [r3, #0]
    4808:	4a0b      	ldr	r2, [pc, #44]	; (4838 <usb_device_endpoint_read_buffer_job+0xa8>)
    480a:	015b      	lsls	r3, r3, #5
    480c:	18d3      	adds	r3, r2, r3
    480e:	685a      	ldr	r2, [r3, #4]
    4810:	0b92      	lsrs	r2, r2, #14
    4812:	0392      	lsls	r2, r2, #14
    4814:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4816:	68fb      	ldr	r3, [r7, #12]
    4818:	681a      	ldr	r2, [r3, #0]
    481a:	230b      	movs	r3, #11
    481c:	18fb      	adds	r3, r7, r3
    481e:	781b      	ldrb	r3, [r3, #0]
    4820:	3308      	adds	r3, #8
    4822:	015b      	lsls	r3, r3, #5
    4824:	18d3      	adds	r3, r2, r3
    4826:	3304      	adds	r3, #4
    4828:	2240      	movs	r2, #64	; 0x40
    482a:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    482c:	2300      	movs	r3, #0
}
    482e:	0018      	movs	r0, r3
    4830:	46bd      	mov	sp, r7
    4832:	b006      	add	sp, #24
    4834:	bd80      	pop	{r7, pc}
    4836:	46c0      	nop			; (mov r8, r8)
    4838:	200028ec 	.word	0x200028ec
    483c:	f0003fff 	.word	0xf0003fff

00004840 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
    4848:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    484a:	683a      	ldr	r2, [r7, #0]
    484c:	4b0c      	ldr	r3, [pc, #48]	; (4880 <usb_device_endpoint_setup_buffer_job+0x40>)
    484e:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4850:	4b0b      	ldr	r3, [pc, #44]	; (4880 <usb_device_endpoint_setup_buffer_job+0x40>)
    4852:	685a      	ldr	r2, [r3, #4]
    4854:	490b      	ldr	r1, [pc, #44]	; (4884 <usb_device_endpoint_setup_buffer_job+0x44>)
    4856:	400a      	ands	r2, r1
    4858:	2180      	movs	r1, #128	; 0x80
    485a:	0289      	lsls	r1, r1, #10
    485c:	430a      	orrs	r2, r1
    485e:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4860:	4b07      	ldr	r3, [pc, #28]	; (4880 <usb_device_endpoint_setup_buffer_job+0x40>)
    4862:	685a      	ldr	r2, [r3, #4]
    4864:	0b92      	lsrs	r2, r2, #14
    4866:	0392      	lsls	r2, r2, #14
    4868:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	681a      	ldr	r2, [r3, #0]
    486e:	2382      	movs	r3, #130	; 0x82
    4870:	005b      	lsls	r3, r3, #1
    4872:	2140      	movs	r1, #64	; 0x40
    4874:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    4876:	2300      	movs	r3, #0
}
    4878:	0018      	movs	r0, r3
    487a:	46bd      	mov	sp, r7
    487c:	b002      	add	sp, #8
    487e:	bd80      	pop	{r7, pc}
    4880:	200028ec 	.word	0x200028ec
    4884:	f0003fff 	.word	0xf0003fff

00004888 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    4888:	b580      	push	{r7, lr}
    488a:	b084      	sub	sp, #16
    488c:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    488e:	4bbd      	ldr	r3, [pc, #756]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	2308      	movs	r3, #8
    4896:	18fb      	adds	r3, r7, r3
    4898:	8c12      	ldrh	r2, [r2, #32]
    489a:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    489c:	2308      	movs	r3, #8
    489e:	18fb      	adds	r3, r7, r3
    48a0:	881b      	ldrh	r3, [r3, #0]
    48a2:	2b00      	cmp	r3, #0
    48a4:	d155      	bne.n	4952 <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    48a6:	4bb7      	ldr	r3, [pc, #732]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48a8:	681b      	ldr	r3, [r3, #0]
    48aa:	681a      	ldr	r2, [r3, #0]
    48ac:	1dbb      	adds	r3, r7, #6
    48ae:	8b92      	ldrh	r2, [r2, #28]
    48b0:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    48b2:	4bb4      	ldr	r3, [pc, #720]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48b4:	681a      	ldr	r2, [r3, #0]
    48b6:	23ab      	movs	r3, #171	; 0xab
    48b8:	005b      	lsls	r3, r3, #1
    48ba:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
    48bc:	1dba      	adds	r2, r7, #6
    48be:	8812      	ldrh	r2, [r2, #0]
    48c0:	4013      	ands	r3, r2
    48c2:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
    48c4:	4baf      	ldr	r3, [pc, #700]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48c6:	6819      	ldr	r1, [r3, #0]
    48c8:	23aa      	movs	r3, #170	; 0xaa
    48ca:	005b      	lsls	r3, r3, #1
    48cc:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
    48ce:	1d3b      	adds	r3, r7, #4
    48d0:	400a      	ands	r2, r1
    48d2:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    48d4:	2300      	movs	r3, #0
    48d6:	60fb      	str	r3, [r7, #12]
    48d8:	e037      	b.n	494a <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    48da:	4bab      	ldr	r3, [pc, #684]	; (4b88 <_usb_device_interrupt_handler+0x300>)
    48dc:	68fa      	ldr	r2, [r7, #12]
    48de:	0052      	lsls	r2, r2, #1
    48e0:	5ad3      	ldrh	r3, [r2, r3]
    48e2:	1dba      	adds	r2, r7, #6
    48e4:	8812      	ldrh	r2, [r2, #0]
    48e6:	4013      	ands	r3, r2
    48e8:	b29b      	uxth	r3, r3
    48ea:	2b00      	cmp	r3, #0
    48ec:	d007      	beq.n	48fe <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    48ee:	4ba5      	ldr	r3, [pc, #660]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48f0:	681b      	ldr	r3, [r3, #0]
    48f2:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    48f4:	4aa4      	ldr	r2, [pc, #656]	; (4b88 <_usb_device_interrupt_handler+0x300>)
    48f6:	68f9      	ldr	r1, [r7, #12]
    48f8:	0049      	lsls	r1, r1, #1
    48fa:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    48fc:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    48fe:	4ba2      	ldr	r3, [pc, #648]	; (4b88 <_usb_device_interrupt_handler+0x300>)
    4900:	68fa      	ldr	r2, [r7, #12]
    4902:	0052      	lsls	r2, r2, #1
    4904:	5ad3      	ldrh	r3, [r2, r3]
    4906:	1d3a      	adds	r2, r7, #4
    4908:	8812      	ldrh	r2, [r2, #0]
    490a:	4013      	ands	r3, r2
    490c:	b29b      	uxth	r3, r3
    490e:	2b00      	cmp	r3, #0
    4910:	d018      	beq.n	4944 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4912:	68fb      	ldr	r3, [r7, #12]
    4914:	2b06      	cmp	r3, #6
    4916:	d10a      	bne.n	492e <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4918:	4b9c      	ldr	r3, [pc, #624]	; (4b8c <_usb_device_interrupt_handler+0x304>)
    491a:	891b      	ldrh	r3, [r3, #8]
    491c:	045b      	lsls	r3, r3, #17
    491e:	0d5b      	lsrs	r3, r3, #21
    4920:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4922:	001a      	movs	r2, r3
    4924:	2380      	movs	r3, #128	; 0x80
    4926:	005b      	lsls	r3, r3, #1
    4928:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
    492a:	4b99      	ldr	r3, [pc, #612]	; (4b90 <_usb_device_interrupt_handler+0x308>)
    492c:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    492e:	4b95      	ldr	r3, [pc, #596]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	68fa      	ldr	r2, [r7, #12]
    4934:	322e      	adds	r2, #46	; 0x2e
    4936:	0092      	lsls	r2, r2, #2
    4938:	58d2      	ldr	r2, [r2, r3]
    493a:	4b92      	ldr	r3, [pc, #584]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    493c:	681b      	ldr	r3, [r3, #0]
    493e:	4994      	ldr	r1, [pc, #592]	; (4b90 <_usb_device_interrupt_handler+0x308>)
    4940:	0018      	movs	r0, r3
    4942:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4944:	68fb      	ldr	r3, [r7, #12]
    4946:	3301      	adds	r3, #1
    4948:	60fb      	str	r3, [r7, #12]
    494a:	68fb      	ldr	r3, [r7, #12]
    494c:	2b06      	cmp	r3, #6
    494e:	ddc4      	ble.n	48da <_usb_device_interrupt_handler+0x52>
    4950:	e250      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4952:	230b      	movs	r3, #11
    4954:	18fb      	adds	r3, r7, r3
    4956:	2200      	movs	r2, #0
    4958:	701a      	strb	r2, [r3, #0]
    495a:	e23b      	b.n	4dd4 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    495c:	2308      	movs	r3, #8
    495e:	18fb      	adds	r3, r7, r3
    4960:	881a      	ldrh	r2, [r3, #0]
    4962:	230b      	movs	r3, #11
    4964:	18fb      	adds	r3, r7, r3
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	411a      	asrs	r2, r3
    496a:	0013      	movs	r3, r2
    496c:	2201      	movs	r2, #1
    496e:	4013      	ands	r3, r2
    4970:	d100      	bne.n	4974 <_usb_device_interrupt_handler+0xec>
    4972:	e228      	b.n	4dc6 <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4974:	4b83      	ldr	r3, [pc, #524]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	681a      	ldr	r2, [r3, #0]
    497a:	230b      	movs	r3, #11
    497c:	18fb      	adds	r3, r7, r3
    497e:	781b      	ldrb	r3, [r3, #0]
    4980:	3308      	adds	r3, #8
    4982:	015b      	lsls	r3, r3, #5
    4984:	18d3      	adds	r3, r2, r3
    4986:	3307      	adds	r3, #7
    4988:	781b      	ldrb	r3, [r3, #0]
    498a:	b2da      	uxtb	r2, r3
    498c:	1dbb      	adds	r3, r7, #6
    498e:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    4990:	4b7c      	ldr	r3, [pc, #496]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4992:	6819      	ldr	r1, [r3, #0]
    4994:	230b      	movs	r3, #11
    4996:	18fb      	adds	r3, r7, r3
    4998:	781a      	ldrb	r2, [r3, #0]
    499a:	23b0      	movs	r3, #176	; 0xb0
    499c:	005b      	lsls	r3, r3, #1
    499e:	188a      	adds	r2, r1, r2
    49a0:	18d3      	adds	r3, r2, r3
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	b29b      	uxth	r3, r3
				flags_run = flags &
    49a6:	1dba      	adds	r2, r7, #6
    49a8:	8812      	ldrh	r2, [r2, #0]
    49aa:	4013      	ands	r3, r2
    49ac:	b29b      	uxth	r3, r3
    49ae:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
    49b0:	4b74      	ldr	r3, [pc, #464]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    49b2:	6818      	ldr	r0, [r3, #0]
    49b4:	230b      	movs	r3, #11
    49b6:	18fb      	adds	r3, r7, r3
    49b8:	7819      	ldrb	r1, [r3, #0]
    49ba:	23ac      	movs	r3, #172	; 0xac
    49bc:	005b      	lsls	r3, r3, #1
    49be:	1841      	adds	r1, r0, r1
    49c0:	18cb      	adds	r3, r1, r3
    49c2:	781b      	ldrb	r3, [r3, #0]
    49c4:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    49c6:	4013      	ands	r3, r2
    49c8:	b21a      	sxth	r2, r3
				flags_run = flags &
    49ca:	1d3b      	adds	r3, r7, #4
    49cc:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    49ce:	1dbb      	adds	r3, r7, #6
    49d0:	881b      	ldrh	r3, [r3, #0]
    49d2:	2260      	movs	r2, #96	; 0x60
    49d4:	4013      	ands	r3, r2
    49d6:	d05c      	beq.n	4a92 <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    49d8:	4b6a      	ldr	r3, [pc, #424]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	681a      	ldr	r2, [r3, #0]
    49de:	230b      	movs	r3, #11
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	781b      	ldrb	r3, [r3, #0]
    49e4:	3308      	adds	r3, #8
    49e6:	015b      	lsls	r3, r3, #5
    49e8:	18d3      	adds	r3, r2, r3
    49ea:	3307      	adds	r3, #7
    49ec:	781b      	ldrb	r3, [r3, #0]
    49ee:	b2db      	uxtb	r3, r3
    49f0:	001a      	movs	r2, r3
    49f2:	2340      	movs	r3, #64	; 0x40
    49f4:	4013      	ands	r3, r2
    49f6:	d015      	beq.n	4a24 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    49f8:	4b62      	ldr	r3, [pc, #392]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    49fa:	681b      	ldr	r3, [r3, #0]
    49fc:	681a      	ldr	r2, [r3, #0]
    49fe:	230b      	movs	r3, #11
    4a00:	18fb      	adds	r3, r7, r3
    4a02:	781b      	ldrb	r3, [r3, #0]
    4a04:	3308      	adds	r3, #8
    4a06:	015b      	lsls	r3, r3, #5
    4a08:	18d3      	adds	r3, r2, r3
    4a0a:	3307      	adds	r3, #7
    4a0c:	2240      	movs	r2, #64	; 0x40
    4a0e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4a10:	230b      	movs	r3, #11
    4a12:	18fb      	adds	r3, r7, r3
    4a14:	781b      	ldrb	r3, [r3, #0]
    4a16:	2280      	movs	r2, #128	; 0x80
    4a18:	4252      	negs	r2, r2
    4a1a:	4313      	orrs	r3, r2
    4a1c:	b2da      	uxtb	r2, r3
    4a1e:	4b5d      	ldr	r3, [pc, #372]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4a20:	719a      	strb	r2, [r3, #6]
    4a22:	e020      	b.n	4a66 <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4a24:	4b57      	ldr	r3, [pc, #348]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	681a      	ldr	r2, [r3, #0]
    4a2a:	230b      	movs	r3, #11
    4a2c:	18fb      	adds	r3, r7, r3
    4a2e:	781b      	ldrb	r3, [r3, #0]
    4a30:	3308      	adds	r3, #8
    4a32:	015b      	lsls	r3, r3, #5
    4a34:	18d3      	adds	r3, r2, r3
    4a36:	3307      	adds	r3, #7
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	b2db      	uxtb	r3, r3
    4a3c:	001a      	movs	r2, r3
    4a3e:	2320      	movs	r3, #32
    4a40:	4013      	ands	r3, r2
    4a42:	d010      	beq.n	4a66 <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4a44:	4b4f      	ldr	r3, [pc, #316]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	681a      	ldr	r2, [r3, #0]
    4a4a:	230b      	movs	r3, #11
    4a4c:	18fb      	adds	r3, r7, r3
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	3308      	adds	r3, #8
    4a52:	015b      	lsls	r3, r3, #5
    4a54:	18d3      	adds	r3, r2, r3
    4a56:	3307      	adds	r3, #7
    4a58:	2220      	movs	r2, #32
    4a5a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4a5c:	4b4d      	ldr	r3, [pc, #308]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4a5e:	220b      	movs	r2, #11
    4a60:	18ba      	adds	r2, r7, r2
    4a62:	7812      	ldrb	r2, [r2, #0]
    4a64:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4a66:	1d3b      	adds	r3, r7, #4
    4a68:	881b      	ldrh	r3, [r3, #0]
    4a6a:	2260      	movs	r2, #96	; 0x60
    4a6c:	4013      	ands	r3, r2
    4a6e:	d100      	bne.n	4a72 <_usb_device_interrupt_handler+0x1ea>
    4a70:	e1b7      	b.n	4de2 <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4a72:	4b44      	ldr	r3, [pc, #272]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a74:	681a      	ldr	r2, [r3, #0]
    4a76:	230b      	movs	r3, #11
    4a78:	18fb      	adds	r3, r7, r3
    4a7a:	781b      	ldrb	r3, [r3, #0]
    4a7c:	21e0      	movs	r1, #224	; 0xe0
    4a7e:	011b      	lsls	r3, r3, #4
    4a80:	18d3      	adds	r3, r2, r3
    4a82:	185b      	adds	r3, r3, r1
    4a84:	681a      	ldr	r2, [r3, #0]
    4a86:	4b3f      	ldr	r3, [pc, #252]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a88:	681b      	ldr	r3, [r3, #0]
    4a8a:	4942      	ldr	r1, [pc, #264]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4a8c:	0018      	movs	r0, r3
    4a8e:	4790      	blx	r2
					}
					return;
    4a90:	e1a7      	b.n	4de2 <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4a92:	1dbb      	adds	r3, r7, #6
    4a94:	881b      	ldrh	r3, [r3, #0]
    4a96:	2210      	movs	r2, #16
    4a98:	4013      	ands	r3, r2
    4a9a:	d038      	beq.n	4b0e <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4a9c:	4b39      	ldr	r3, [pc, #228]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a9e:	681b      	ldr	r3, [r3, #0]
    4aa0:	681a      	ldr	r2, [r3, #0]
    4aa2:	230b      	movs	r3, #11
    4aa4:	18fb      	adds	r3, r7, r3
    4aa6:	781b      	ldrb	r3, [r3, #0]
    4aa8:	3308      	adds	r3, #8
    4aaa:	015b      	lsls	r3, r3, #5
    4aac:	18d3      	adds	r3, r2, r3
    4aae:	3307      	adds	r3, #7
    4ab0:	2210      	movs	r2, #16
    4ab2:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4ab4:	4b33      	ldr	r3, [pc, #204]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4ab6:	6819      	ldr	r1, [r3, #0]
    4ab8:	230b      	movs	r3, #11
    4aba:	18fb      	adds	r3, r7, r3
    4abc:	781a      	ldrb	r2, [r3, #0]
    4abe:	23b0      	movs	r3, #176	; 0xb0
    4ac0:	005b      	lsls	r3, r3, #1
    4ac2:	188a      	adds	r2, r1, r2
    4ac4:	18d3      	adds	r3, r2, r3
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	2210      	movs	r2, #16
    4aca:	4013      	ands	r3, r2
    4acc:	b2db      	uxtb	r3, r3
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d100      	bne.n	4ad4 <_usb_device_interrupt_handler+0x24c>
    4ad2:	e188      	b.n	4de6 <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4ad4:	230b      	movs	r3, #11
    4ad6:	18fb      	adds	r3, r7, r3
    4ad8:	781b      	ldrb	r3, [r3, #0]
    4ada:	4a2c      	ldr	r2, [pc, #176]	; (4b8c <_usb_device_interrupt_handler+0x304>)
    4adc:	015b      	lsls	r3, r3, #5
    4ade:	18d3      	adds	r3, r2, r3
    4ae0:	685b      	ldr	r3, [r3, #4]
    4ae2:	049b      	lsls	r3, r3, #18
    4ae4:	0c9b      	lsrs	r3, r3, #18
    4ae6:	b29b      	uxth	r3, r3
    4ae8:	001a      	movs	r2, r3
    4aea:	4b2a      	ldr	r3, [pc, #168]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4aec:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4aee:	4b25      	ldr	r3, [pc, #148]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4af0:	681a      	ldr	r2, [r3, #0]
    4af2:	230b      	movs	r3, #11
    4af4:	18fb      	adds	r3, r7, r3
    4af6:	781b      	ldrb	r3, [r3, #0]
    4af8:	21dc      	movs	r1, #220	; 0xdc
    4afa:	011b      	lsls	r3, r3, #4
    4afc:	18d3      	adds	r3, r2, r3
    4afe:	185b      	adds	r3, r3, r1
    4b00:	681a      	ldr	r2, [r3, #0]
    4b02:	4b20      	ldr	r3, [pc, #128]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	4923      	ldr	r1, [pc, #140]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4b08:	0018      	movs	r0, r3
    4b0a:	4790      	blx	r2
					}
					return;
    4b0c:	e16b      	b.n	4de6 <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4b0e:	1dbb      	adds	r3, r7, #6
    4b10:	881b      	ldrh	r3, [r3, #0]
    4b12:	2203      	movs	r2, #3
    4b14:	4013      	ands	r3, r2
    4b16:	d100      	bne.n	4b1a <_usb_device_interrupt_handler+0x292>
    4b18:	e08f      	b.n	4c3a <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4b1a:	4b1a      	ldr	r3, [pc, #104]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4b1c:	681b      	ldr	r3, [r3, #0]
    4b1e:	681a      	ldr	r2, [r3, #0]
    4b20:	230b      	movs	r3, #11
    4b22:	18fb      	adds	r3, r7, r3
    4b24:	781b      	ldrb	r3, [r3, #0]
    4b26:	3308      	adds	r3, #8
    4b28:	015b      	lsls	r3, r3, #5
    4b2a:	18d3      	adds	r3, r2, r3
    4b2c:	3307      	adds	r3, #7
    4b2e:	781b      	ldrb	r3, [r3, #0]
    4b30:	b2db      	uxtb	r3, r3
    4b32:	001a      	movs	r2, r3
    4b34:	2302      	movs	r3, #2
    4b36:	4013      	ands	r3, r2
    4b38:	d02e      	beq.n	4b98 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4b3a:	4b12      	ldr	r3, [pc, #72]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	681a      	ldr	r2, [r3, #0]
    4b40:	230b      	movs	r3, #11
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	781b      	ldrb	r3, [r3, #0]
    4b46:	3308      	adds	r3, #8
    4b48:	015b      	lsls	r3, r3, #5
    4b4a:	18d3      	adds	r3, r2, r3
    4b4c:	3307      	adds	r3, #7
    4b4e:	2202      	movs	r2, #2
    4b50:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4b52:	230b      	movs	r3, #11
    4b54:	18fb      	adds	r3, r7, r3
    4b56:	781b      	ldrb	r3, [r3, #0]
    4b58:	2280      	movs	r2, #128	; 0x80
    4b5a:	4252      	negs	r2, r2
    4b5c:	4313      	orrs	r3, r2
    4b5e:	b2da      	uxtb	r2, r3
    4b60:	4b0c      	ldr	r3, [pc, #48]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4b62:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4b64:	230b      	movs	r3, #11
    4b66:	18fb      	adds	r3, r7, r3
    4b68:	781b      	ldrb	r3, [r3, #0]
    4b6a:	4a08      	ldr	r2, [pc, #32]	; (4b8c <_usb_device_interrupt_handler+0x304>)
    4b6c:	015b      	lsls	r3, r3, #5
    4b6e:	18d3      	adds	r3, r2, r3
    4b70:	3310      	adds	r3, #16
    4b72:	685b      	ldr	r3, [r3, #4]
    4b74:	049b      	lsls	r3, r3, #18
    4b76:	0c9b      	lsrs	r3, r3, #18
    4b78:	b29b      	uxth	r3, r3
    4b7a:	001a      	movs	r2, r3
    4b7c:	4b05      	ldr	r3, [pc, #20]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4b7e:	805a      	strh	r2, [r3, #2]
    4b80:	e045      	b.n	4c0e <_usb_device_interrupt_handler+0x386>
    4b82:	46c0      	nop			; (mov r8, r8)
    4b84:	20000520 	.word	0x20000520
    4b88:	0001f8e4 	.word	0x0001f8e4
    4b8c:	200028ec 	.word	0x200028ec
    4b90:	2000052c 	.word	0x2000052c
    4b94:	20000530 	.word	0x20000530

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4b98:	4b98      	ldr	r3, [pc, #608]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	681a      	ldr	r2, [r3, #0]
    4b9e:	230b      	movs	r3, #11
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	781b      	ldrb	r3, [r3, #0]
    4ba4:	3308      	adds	r3, #8
    4ba6:	015b      	lsls	r3, r3, #5
    4ba8:	18d3      	adds	r3, r2, r3
    4baa:	3307      	adds	r3, #7
    4bac:	781b      	ldrb	r3, [r3, #0]
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	001a      	movs	r2, r3
    4bb2:	2301      	movs	r3, #1
    4bb4:	4013      	ands	r3, r2
    4bb6:	d02a      	beq.n	4c0e <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4bb8:	4b90      	ldr	r3, [pc, #576]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4bba:	681b      	ldr	r3, [r3, #0]
    4bbc:	681a      	ldr	r2, [r3, #0]
    4bbe:	230b      	movs	r3, #11
    4bc0:	18fb      	adds	r3, r7, r3
    4bc2:	781b      	ldrb	r3, [r3, #0]
    4bc4:	3308      	adds	r3, #8
    4bc6:	015b      	lsls	r3, r3, #5
    4bc8:	18d3      	adds	r3, r2, r3
    4bca:	3307      	adds	r3, #7
    4bcc:	2201      	movs	r2, #1
    4bce:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4bd0:	4b8b      	ldr	r3, [pc, #556]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4bd2:	220b      	movs	r2, #11
    4bd4:	18ba      	adds	r2, r7, r2
    4bd6:	7812      	ldrb	r2, [r2, #0]
    4bd8:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4bda:	230b      	movs	r3, #11
    4bdc:	18fb      	adds	r3, r7, r3
    4bde:	781b      	ldrb	r3, [r3, #0]
    4be0:	4a88      	ldr	r2, [pc, #544]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4be2:	015b      	lsls	r3, r3, #5
    4be4:	18d3      	adds	r3, r2, r3
    4be6:	685b      	ldr	r3, [r3, #4]
    4be8:	049b      	lsls	r3, r3, #18
    4bea:	0c9b      	lsrs	r3, r3, #18
    4bec:	b29b      	uxth	r3, r3
    4bee:	001a      	movs	r2, r3
    4bf0:	4b83      	ldr	r3, [pc, #524]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4bf2:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4bf4:	230b      	movs	r3, #11
    4bf6:	18fb      	adds	r3, r7, r3
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	4a82      	ldr	r2, [pc, #520]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4bfc:	015b      	lsls	r3, r3, #5
    4bfe:	18d3      	adds	r3, r2, r3
    4c00:	685b      	ldr	r3, [r3, #4]
    4c02:	011b      	lsls	r3, r3, #4
    4c04:	0c9b      	lsrs	r3, r3, #18
    4c06:	b29b      	uxth	r3, r3
    4c08:	001a      	movs	r2, r3
    4c0a:	4b7d      	ldr	r3, [pc, #500]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4c0c:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4c0e:	1d3b      	adds	r3, r7, #4
    4c10:	881b      	ldrh	r3, [r3, #0]
    4c12:	2203      	movs	r2, #3
    4c14:	4013      	ands	r3, r2
    4c16:	d100      	bne.n	4c1a <_usb_device_interrupt_handler+0x392>
    4c18:	e0e7      	b.n	4dea <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4c1a:	4b78      	ldr	r3, [pc, #480]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c1c:	681a      	ldr	r2, [r3, #0]
    4c1e:	230b      	movs	r3, #11
    4c20:	18fb      	adds	r3, r7, r3
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	330d      	adds	r3, #13
    4c26:	011b      	lsls	r3, r3, #4
    4c28:	18d3      	adds	r3, r2, r3
    4c2a:	3304      	adds	r3, #4
    4c2c:	681a      	ldr	r2, [r3, #0]
    4c2e:	4b73      	ldr	r3, [pc, #460]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	4973      	ldr	r1, [pc, #460]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4c34:	0018      	movs	r0, r3
    4c36:	4790      	blx	r2
					}
					return;
    4c38:	e0d7      	b.n	4dea <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4c3a:	1dbb      	adds	r3, r7, #6
    4c3c:	881b      	ldrh	r3, [r3, #0]
    4c3e:	220c      	movs	r2, #12
    4c40:	4013      	ands	r3, r2
    4c42:	d100      	bne.n	4c46 <_usb_device_interrupt_handler+0x3be>
    4c44:	e0bf      	b.n	4dc6 <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4c46:	4b6d      	ldr	r3, [pc, #436]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	681a      	ldr	r2, [r3, #0]
    4c4c:	230b      	movs	r3, #11
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	781b      	ldrb	r3, [r3, #0]
    4c52:	3308      	adds	r3, #8
    4c54:	015b      	lsls	r3, r3, #5
    4c56:	18d3      	adds	r3, r2, r3
    4c58:	3307      	adds	r3, #7
    4c5a:	781b      	ldrb	r3, [r3, #0]
    4c5c:	b2db      	uxtb	r3, r3
    4c5e:	001a      	movs	r2, r3
    4c60:	2308      	movs	r3, #8
    4c62:	4013      	ands	r3, r2
    4c64:	d047      	beq.n	4cf6 <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4c66:	4b65      	ldr	r3, [pc, #404]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c68:	681b      	ldr	r3, [r3, #0]
    4c6a:	681a      	ldr	r2, [r3, #0]
    4c6c:	230b      	movs	r3, #11
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	781b      	ldrb	r3, [r3, #0]
    4c72:	3308      	adds	r3, #8
    4c74:	015b      	lsls	r3, r3, #5
    4c76:	18d3      	adds	r3, r2, r3
    4c78:	3307      	adds	r3, #7
    4c7a:	2208      	movs	r2, #8
    4c7c:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4c7e:	230b      	movs	r3, #11
    4c80:	18fb      	adds	r3, r7, r3
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	4a5f      	ldr	r2, [pc, #380]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4c86:	015b      	lsls	r3, r3, #5
    4c88:	18d3      	adds	r3, r2, r3
    4c8a:	331a      	adds	r3, #26
    4c8c:	781b      	ldrb	r3, [r3, #0]
    4c8e:	b2db      	uxtb	r3, r3
    4c90:	001a      	movs	r2, r3
    4c92:	2302      	movs	r3, #2
    4c94:	4013      	ands	r3, r2
    4c96:	d014      	beq.n	4cc2 <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4c98:	230b      	movs	r3, #11
    4c9a:	18fb      	adds	r3, r7, r3
    4c9c:	781b      	ldrb	r3, [r3, #0]
    4c9e:	220b      	movs	r2, #11
    4ca0:	18ba      	adds	r2, r7, r2
    4ca2:	7812      	ldrb	r2, [r2, #0]
    4ca4:	4957      	ldr	r1, [pc, #348]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4ca6:	0152      	lsls	r2, r2, #5
    4ca8:	188a      	adds	r2, r1, r2
    4caa:	321a      	adds	r2, #26
    4cac:	7812      	ldrb	r2, [r2, #0]
    4cae:	b2d2      	uxtb	r2, r2
    4cb0:	2102      	movs	r1, #2
    4cb2:	438a      	bics	r2, r1
    4cb4:	b2d1      	uxtb	r1, r2
    4cb6:	4a53      	ldr	r2, [pc, #332]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4cb8:	015b      	lsls	r3, r3, #5
    4cba:	18d3      	adds	r3, r2, r3
    4cbc:	331a      	adds	r3, #26
    4cbe:	1c0a      	adds	r2, r1, #0
    4cc0:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4cc2:	230b      	movs	r3, #11
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	781b      	ldrb	r3, [r3, #0]
    4cc8:	2280      	movs	r2, #128	; 0x80
    4cca:	4252      	negs	r2, r2
    4ccc:	4313      	orrs	r3, r2
    4cce:	b2da      	uxtb	r2, r3
    4cd0:	4b4b      	ldr	r3, [pc, #300]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4cd2:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4cd4:	4b49      	ldr	r3, [pc, #292]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	681a      	ldr	r2, [r3, #0]
    4cda:	230b      	movs	r3, #11
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	781b      	ldrb	r3, [r3, #0]
    4ce0:	3308      	adds	r3, #8
    4ce2:	015b      	lsls	r3, r3, #5
    4ce4:	18d3      	adds	r3, r2, r3
    4ce6:	3307      	adds	r3, #7
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	b2db      	uxtb	r3, r3
    4cec:	001a      	movs	r2, r3
    4cee:	2302      	movs	r3, #2
    4cf0:	4013      	ands	r3, r2
    4cf2:	d053      	beq.n	4d9c <_usb_device_interrupt_handler+0x514>
							return;
    4cf4:	e07e      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4cf6:	4b41      	ldr	r3, [pc, #260]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4cf8:	681b      	ldr	r3, [r3, #0]
    4cfa:	681a      	ldr	r2, [r3, #0]
    4cfc:	230b      	movs	r3, #11
    4cfe:	18fb      	adds	r3, r7, r3
    4d00:	781b      	ldrb	r3, [r3, #0]
    4d02:	3308      	adds	r3, #8
    4d04:	015b      	lsls	r3, r3, #5
    4d06:	18d3      	adds	r3, r2, r3
    4d08:	3307      	adds	r3, #7
    4d0a:	781b      	ldrb	r3, [r3, #0]
    4d0c:	b2db      	uxtb	r3, r3
    4d0e:	001a      	movs	r2, r3
    4d10:	2304      	movs	r3, #4
    4d12:	4013      	ands	r3, r2
    4d14:	d042      	beq.n	4d9c <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4d16:	4b39      	ldr	r3, [pc, #228]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4d18:	681b      	ldr	r3, [r3, #0]
    4d1a:	681a      	ldr	r2, [r3, #0]
    4d1c:	230b      	movs	r3, #11
    4d1e:	18fb      	adds	r3, r7, r3
    4d20:	781b      	ldrb	r3, [r3, #0]
    4d22:	3308      	adds	r3, #8
    4d24:	015b      	lsls	r3, r3, #5
    4d26:	18d3      	adds	r3, r2, r3
    4d28:	3307      	adds	r3, #7
    4d2a:	2204      	movs	r2, #4
    4d2c:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4d2e:	230b      	movs	r3, #11
    4d30:	18fb      	adds	r3, r7, r3
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	4a33      	ldr	r2, [pc, #204]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4d36:	015b      	lsls	r3, r3, #5
    4d38:	18d3      	adds	r3, r2, r3
    4d3a:	330a      	adds	r3, #10
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	b2db      	uxtb	r3, r3
    4d40:	001a      	movs	r2, r3
    4d42:	2302      	movs	r3, #2
    4d44:	4013      	ands	r3, r2
    4d46:	d014      	beq.n	4d72 <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4d48:	230b      	movs	r3, #11
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	781b      	ldrb	r3, [r3, #0]
    4d4e:	220b      	movs	r2, #11
    4d50:	18ba      	adds	r2, r7, r2
    4d52:	7812      	ldrb	r2, [r2, #0]
    4d54:	492b      	ldr	r1, [pc, #172]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4d56:	0152      	lsls	r2, r2, #5
    4d58:	188a      	adds	r2, r1, r2
    4d5a:	320a      	adds	r2, #10
    4d5c:	7812      	ldrb	r2, [r2, #0]
    4d5e:	b2d2      	uxtb	r2, r2
    4d60:	2102      	movs	r1, #2
    4d62:	438a      	bics	r2, r1
    4d64:	b2d1      	uxtb	r1, r2
    4d66:	4a27      	ldr	r2, [pc, #156]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4d68:	015b      	lsls	r3, r3, #5
    4d6a:	18d3      	adds	r3, r2, r3
    4d6c:	330a      	adds	r3, #10
    4d6e:	1c0a      	adds	r2, r1, #0
    4d70:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4d72:	4b23      	ldr	r3, [pc, #140]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4d74:	220b      	movs	r2, #11
    4d76:	18ba      	adds	r2, r7, r2
    4d78:	7812      	ldrb	r2, [r2, #0]
    4d7a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4d7c:	4b1f      	ldr	r3, [pc, #124]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4d7e:	681b      	ldr	r3, [r3, #0]
    4d80:	681a      	ldr	r2, [r3, #0]
    4d82:	230b      	movs	r3, #11
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	781b      	ldrb	r3, [r3, #0]
    4d88:	3308      	adds	r3, #8
    4d8a:	015b      	lsls	r3, r3, #5
    4d8c:	18d3      	adds	r3, r2, r3
    4d8e:	3307      	adds	r3, #7
    4d90:	781b      	ldrb	r3, [r3, #0]
    4d92:	b2db      	uxtb	r3, r3
    4d94:	001a      	movs	r2, r3
    4d96:	2301      	movs	r3, #1
    4d98:	4013      	ands	r3, r2
    4d9a:	d128      	bne.n	4dee <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4d9c:	1d3b      	adds	r3, r7, #4
    4d9e:	881b      	ldrh	r3, [r3, #0]
    4da0:	220c      	movs	r2, #12
    4da2:	4013      	ands	r3, r2
    4da4:	d025      	beq.n	4df2 <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4da6:	4b15      	ldr	r3, [pc, #84]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4da8:	681a      	ldr	r2, [r3, #0]
    4daa:	230b      	movs	r3, #11
    4dac:	18fb      	adds	r3, r7, r3
    4dae:	781b      	ldrb	r3, [r3, #0]
    4db0:	21d8      	movs	r1, #216	; 0xd8
    4db2:	011b      	lsls	r3, r3, #4
    4db4:	18d3      	adds	r3, r2, r3
    4db6:	185b      	adds	r3, r3, r1
    4db8:	681a      	ldr	r2, [r3, #0]
    4dba:	4b10      	ldr	r3, [pc, #64]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	4910      	ldr	r1, [pc, #64]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4dc0:	0018      	movs	r0, r3
    4dc2:	4790      	blx	r2
					}
					return;
    4dc4:	e015      	b.n	4df2 <_usb_device_interrupt_handler+0x56a>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4dc6:	230b      	movs	r3, #11
    4dc8:	18fb      	adds	r3, r7, r3
    4dca:	781a      	ldrb	r2, [r3, #0]
    4dcc:	230b      	movs	r3, #11
    4dce:	18fb      	adds	r3, r7, r3
    4dd0:	3201      	adds	r2, #1
    4dd2:	701a      	strb	r2, [r3, #0]
    4dd4:	230b      	movs	r3, #11
    4dd6:	18fb      	adds	r3, r7, r3
    4dd8:	781b      	ldrb	r3, [r3, #0]
    4dda:	2b07      	cmp	r3, #7
    4ddc:	d800      	bhi.n	4de0 <_usb_device_interrupt_handler+0x558>
    4dde:	e5bd      	b.n	495c <_usb_device_interrupt_handler+0xd4>
    4de0:	e008      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4de2:	46c0      	nop			; (mov r8, r8)
    4de4:	e006      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4de6:	46c0      	nop			; (mov r8, r8)
    4de8:	e004      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4dea:	46c0      	nop			; (mov r8, r8)
    4dec:	e002      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
							return;
    4dee:	46c0      	nop			; (mov r8, r8)
    4df0:	e000      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4df2:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    4df4:	46bd      	mov	sp, r7
    4df6:	b004      	add	sp, #16
    4df8:	bd80      	pop	{r7, pc}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	20000520 	.word	0x20000520
    4e00:	20000530 	.word	0x20000530
    4e04:	200028ec 	.word	0x200028ec

00004e08 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    4e08:	b580      	push	{r7, lr}
    4e0a:	b082      	sub	sp, #8
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	681a      	ldr	r2, [r3, #0]
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	681b      	ldr	r3, [r3, #0]
    4e18:	781b      	ldrb	r3, [r3, #0]
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	2102      	movs	r1, #2
    4e1e:	430b      	orrs	r3, r1
    4e20:	b2db      	uxtb	r3, r3
    4e22:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    4e24:	46c0      	nop			; (mov r8, r8)
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	789b      	ldrb	r3, [r3, #2]
    4e2c:	b2db      	uxtb	r3, r3
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d0f9      	beq.n	4e26 <usb_enable+0x1e>
}
    4e32:	46c0      	nop			; (mov r8, r8)
    4e34:	46bd      	mov	sp, r7
    4e36:	b002      	add	sp, #8
    4e38:	bd80      	pop	{r7, pc}
	...

00004e3c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4e3c:	b580      	push	{r7, lr}
    4e3e:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4e40:	4b08      	ldr	r3, [pc, #32]	; (4e64 <USB_Handler+0x28>)
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	681b      	ldr	r3, [r3, #0]
    4e46:	781b      	ldrb	r3, [r3, #0]
    4e48:	061b      	lsls	r3, r3, #24
    4e4a:	0fdb      	lsrs	r3, r3, #31
    4e4c:	b2db      	uxtb	r3, r3
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d002      	beq.n	4e58 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    4e52:	4b05      	ldr	r3, [pc, #20]	; (4e68 <USB_Handler+0x2c>)
    4e54:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4e56:	e001      	b.n	4e5c <USB_Handler+0x20>
		_usb_device_interrupt_handler();
    4e58:	4b04      	ldr	r3, [pc, #16]	; (4e6c <USB_Handler+0x30>)
    4e5a:	4798      	blx	r3
}
    4e5c:	46c0      	nop			; (mov r8, r8)
    4e5e:	46bd      	mov	sp, r7
    4e60:	bd80      	pop	{r7, pc}
    4e62:	46c0      	nop			; (mov r8, r8)
    4e64:	20000520 	.word	0x20000520
    4e68:	00003525 	.word	0x00003525
    4e6c:	00004889 	.word	0x00004889

00004e70 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4e78:	687b      	ldr	r3, [r7, #4]
    4e7a:	2200      	movs	r2, #0
    4e7c:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	2201      	movs	r2, #1
    4e82:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	2200      	movs	r2, #0
    4e88:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	2201      	movs	r2, #1
    4e8e:	70da      	strb	r2, [r3, #3]
}
    4e90:	46c0      	nop			; (mov r8, r8)
    4e92:	46bd      	mov	sp, r7
    4e94:	b002      	add	sp, #8
    4e96:	bd80      	pop	{r7, pc}

00004e98 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4e98:	b580      	push	{r7, lr}
    4e9a:	b08c      	sub	sp, #48	; 0x30
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	60f8      	str	r0, [r7, #12]
    4ea0:	60b9      	str	r1, [r7, #8]
    4ea2:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4ea4:	4bc4      	ldr	r3, [pc, #784]	; (51b8 <usb_init+0x320>)
    4ea6:	2200      	movs	r2, #0
    4ea8:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    4eaa:	4bc4      	ldr	r3, [pc, #784]	; (51bc <usb_init+0x324>)
    4eac:	68fa      	ldr	r2, [r7, #12]
    4eae:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4eb0:	68fb      	ldr	r3, [r7, #12]
    4eb2:	68ba      	ldr	r2, [r7, #8]
    4eb4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    4eb6:	2120      	movs	r1, #32
    4eb8:	2001      	movs	r0, #1
    4eba:	4bc1      	ldr	r3, [pc, #772]	; (51c0 <usb_init+0x328>)
    4ebc:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    4ebe:	2318      	movs	r3, #24
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	0018      	movs	r0, r3
    4ec4:	4bbf      	ldr	r3, [pc, #764]	; (51c4 <usb_init+0x32c>)
    4ec6:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4ec8:	2318      	movs	r3, #24
    4eca:	18fb      	adds	r3, r7, r3
    4ecc:	2206      	movs	r2, #6
    4ece:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4ed0:	2318      	movs	r3, #24
    4ed2:	18fb      	adds	r3, r7, r3
    4ed4:	0019      	movs	r1, r3
    4ed6:	2018      	movs	r0, #24
    4ed8:	4bbb      	ldr	r3, [pc, #748]	; (51c8 <usb_init+0x330>)
    4eda:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4edc:	2318      	movs	r3, #24
    4ede:	18fb      	adds	r3, r7, r3
    4ee0:	2206      	movs	r2, #6
    4ee2:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4ee4:	2318      	movs	r3, #24
    4ee6:	18fb      	adds	r3, r7, r3
    4ee8:	0019      	movs	r1, r3
    4eea:	2019      	movs	r0, #25
    4eec:	4bb6      	ldr	r3, [pc, #728]	; (51c8 <usb_init+0x330>)
    4eee:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    4ef0:	2314      	movs	r3, #20
    4ef2:	18fb      	adds	r3, r7, r3
    4ef4:	0018      	movs	r0, r3
    4ef6:	4bb5      	ldr	r3, [pc, #724]	; (51cc <usb_init+0x334>)
    4ef8:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    4efa:	687b      	ldr	r3, [r7, #4]
    4efc:	789a      	ldrb	r2, [r3, #2]
    4efe:	2314      	movs	r3, #20
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4f04:	2314      	movs	r3, #20
    4f06:	18fb      	adds	r3, r7, r3
    4f08:	0019      	movs	r1, r3
    4f0a:	2006      	movs	r0, #6
    4f0c:	4bb0      	ldr	r3, [pc, #704]	; (51d0 <usb_init+0x338>)
    4f0e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4f10:	2006      	movs	r0, #6
    4f12:	4bb0      	ldr	r3, [pc, #704]	; (51d4 <usb_init+0x33c>)
    4f14:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4f16:	68ba      	ldr	r2, [r7, #8]
    4f18:	7813      	ldrb	r3, [r2, #0]
    4f1a:	2101      	movs	r1, #1
    4f1c:	430b      	orrs	r3, r1
    4f1e:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4f20:	46c0      	nop			; (mov r8, r8)
    4f22:	68bb      	ldr	r3, [r7, #8]
    4f24:	789b      	ldrb	r3, [r3, #2]
    4f26:	07db      	lsls	r3, r3, #31
    4f28:	0fdb      	lsrs	r3, r3, #31
    4f2a:	b2db      	uxtb	r3, r3
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d1f8      	bne.n	4f22 <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4f30:	4aa9      	ldr	r2, [pc, #676]	; (51d8 <usb_init+0x340>)
    4f32:	78d3      	ldrb	r3, [r2, #3]
    4f34:	2103      	movs	r1, #3
    4f36:	438b      	bics	r3, r1
    4f38:	1c19      	adds	r1, r3, #0
    4f3a:	2302      	movs	r3, #2
    4f3c:	430b      	orrs	r3, r1
    4f3e:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4f40:	4aa5      	ldr	r2, [pc, #660]	; (51d8 <usb_init+0x340>)
    4f42:	78d3      	ldrb	r3, [r2, #3]
    4f44:	210c      	movs	r1, #12
    4f46:	438b      	bics	r3, r1
    4f48:	1c19      	adds	r1, r3, #0
    4f4a:	2308      	movs	r3, #8
    4f4c:	430b      	orrs	r3, r1
    4f4e:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4f50:	4ba2      	ldr	r3, [pc, #648]	; (51dc <usb_init+0x344>)
    4f52:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4f54:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4f56:	221f      	movs	r2, #31
    4f58:	4013      	ands	r3, r2
    4f5a:	627b      	str	r3, [r7, #36]	; 0x24
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f5e:	2b1f      	cmp	r3, #31
    4f60:	d101      	bne.n	4f66 <usb_init+0xce>
		pad_transn = 5;
    4f62:	2305      	movs	r3, #5
    4f64:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f68:	b2db      	uxtb	r3, r3
    4f6a:	1c1a      	adds	r2, r3, #0
    4f6c:	231f      	movs	r3, #31
    4f6e:	4013      	ands	r3, r2
    4f70:	b2d9      	uxtb	r1, r3
    4f72:	68ba      	ldr	r2, [r7, #8]
    4f74:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4f76:	1c08      	adds	r0, r1, #0
    4f78:	211f      	movs	r1, #31
    4f7a:	4001      	ands	r1, r0
    4f7c:	0188      	lsls	r0, r1, #6
    4f7e:	4998      	ldr	r1, [pc, #608]	; (51e0 <usb_init+0x348>)
    4f80:	400b      	ands	r3, r1
    4f82:	1c19      	adds	r1, r3, #0
    4f84:	1c03      	adds	r3, r0, #0
    4f86:	430b      	orrs	r3, r1
    4f88:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4f8a:	4b94      	ldr	r3, [pc, #592]	; (51dc <usb_init+0x344>)
    4f8c:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4f8e:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4f90:	221f      	movs	r2, #31
    4f92:	4013      	ands	r3, r2
    4f94:	623b      	str	r3, [r7, #32]
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4f96:	6a3b      	ldr	r3, [r7, #32]
    4f98:	2b1f      	cmp	r3, #31
    4f9a:	d101      	bne.n	4fa0 <usb_init+0x108>
		pad_transp = 29;
    4f9c:	231d      	movs	r3, #29
    4f9e:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4fa0:	6a3b      	ldr	r3, [r7, #32]
    4fa2:	b2db      	uxtb	r3, r3
    4fa4:	1c1a      	adds	r2, r3, #0
    4fa6:	231f      	movs	r3, #31
    4fa8:	4013      	ands	r3, r2
    4faa:	b2d9      	uxtb	r1, r3
    4fac:	68ba      	ldr	r2, [r7, #8]
    4fae:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4fb0:	1c08      	adds	r0, r1, #0
    4fb2:	211f      	movs	r1, #31
    4fb4:	4008      	ands	r0, r1
    4fb6:	211f      	movs	r1, #31
    4fb8:	438b      	bics	r3, r1
    4fba:	1c19      	adds	r1, r3, #0
    4fbc:	1c03      	adds	r3, r0, #0
    4fbe:	430b      	orrs	r3, r1
    4fc0:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4fc2:	4b86      	ldr	r3, [pc, #536]	; (51dc <usb_init+0x344>)
    4fc4:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4fc6:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4fc8:	2207      	movs	r2, #7
    4fca:	4013      	ands	r3, r2
    4fcc:	61fb      	str	r3, [r7, #28]
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4fce:	69fb      	ldr	r3, [r7, #28]
    4fd0:	2b07      	cmp	r3, #7
    4fd2:	d101      	bne.n	4fd8 <usb_init+0x140>
		pad_trim = 3;
    4fd4:	2303      	movs	r3, #3
    4fd6:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4fd8:	69fb      	ldr	r3, [r7, #28]
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	1c1a      	adds	r2, r3, #0
    4fde:	2307      	movs	r3, #7
    4fe0:	4013      	ands	r3, r2
    4fe2:	b2d9      	uxtb	r1, r3
    4fe4:	68ba      	ldr	r2, [r7, #8]
    4fe6:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4fe8:	1c08      	adds	r0, r1, #0
    4fea:	2107      	movs	r1, #7
    4fec:	4001      	ands	r1, r0
    4fee:	0308      	lsls	r0, r1, #12
    4ff0:	497c      	ldr	r1, [pc, #496]	; (51e4 <usb_init+0x34c>)
    4ff2:	400b      	ands	r3, r1
    4ff4:	1c19      	adds	r1, r3, #0
    4ff6:	1c03      	adds	r3, r0, #0
    4ff8:	430b      	orrs	r3, r1
    4ffa:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	7819      	ldrb	r1, [r3, #0]
    5000:	68ba      	ldr	r2, [r7, #8]
    5002:	7813      	ldrb	r3, [r2, #0]
    5004:	01c8      	lsls	r0, r1, #7
    5006:	217f      	movs	r1, #127	; 0x7f
    5008:	400b      	ands	r3, r1
    500a:	1c19      	adds	r1, r3, #0
    500c:	1c03      	adds	r3, r0, #0
    500e:	430b      	orrs	r3, r1
    5010:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    5012:	687b      	ldr	r3, [r7, #4]
    5014:	7859      	ldrb	r1, [r3, #1]
    5016:	68ba      	ldr	r2, [r7, #8]
    5018:	7813      	ldrb	r3, [r2, #0]
    501a:	2001      	movs	r0, #1
    501c:	4001      	ands	r1, r0
    501e:	0088      	lsls	r0, r1, #2
    5020:	2104      	movs	r1, #4
    5022:	438b      	bics	r3, r1
    5024:	1c19      	adds	r1, r3, #0
    5026:	1c03      	adds	r3, r0, #0
    5028:	430b      	orrs	r3, r1
    502a:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    502c:	4a6e      	ldr	r2, [pc, #440]	; (51e8 <usb_init+0x350>)
    502e:	68bb      	ldr	r3, [r7, #8]
    5030:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    5032:	687b      	ldr	r3, [r7, #4]
    5034:	78db      	ldrb	r3, [r3, #3]
    5036:	2b01      	cmp	r3, #1
    5038:	d106      	bne.n	5048 <usb_init+0x1b0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    503a:	68fb      	ldr	r3, [r7, #12]
    503c:	681a      	ldr	r2, [r3, #0]
    503e:	8913      	ldrh	r3, [r2, #8]
    5040:	210c      	movs	r1, #12
    5042:	438b      	bics	r3, r1
    5044:	8113      	strh	r3, [r2, #8]
    5046:	e00c      	b.n	5062 <usb_init+0x1ca>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	78db      	ldrb	r3, [r3, #3]
    504c:	2b00      	cmp	r3, #0
    504e:	d108      	bne.n	5062 <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	681a      	ldr	r2, [r3, #0]
    5054:	8913      	ldrh	r3, [r2, #8]
    5056:	210c      	movs	r1, #12
    5058:	438b      	bics	r3, r1
    505a:	1c19      	adds	r1, r3, #0
    505c:	2304      	movs	r3, #4
    505e:	430b      	orrs	r3, r1
    5060:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    5062:	2380      	movs	r3, #128	; 0x80
    5064:	005a      	lsls	r2, r3, #1
    5066:	4b60      	ldr	r3, [pc, #384]	; (51e8 <usb_init+0x350>)
    5068:	2100      	movs	r1, #0
    506a:	0018      	movs	r0, r3
    506c:	4b5f      	ldr	r3, [pc, #380]	; (51ec <usb_init+0x354>)
    506e:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    5070:	2300      	movs	r3, #0
    5072:	62fb      	str	r3, [r7, #44]	; 0x2c
    5074:	e009      	b.n	508a <usb_init+0x1f2>
		module_inst->host_callback[i] = NULL;
    5076:	68fa      	ldr	r2, [r7, #12]
    5078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    507a:	009b      	lsls	r3, r3, #2
    507c:	18d3      	adds	r3, r2, r3
    507e:	3304      	adds	r3, #4
    5080:	2200      	movs	r2, #0
    5082:	601a      	str	r2, [r3, #0]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    5084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5086:	3301      	adds	r3, #1
    5088:	62fb      	str	r3, [r7, #44]	; 0x2c
    508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    508c:	2b07      	cmp	r3, #7
    508e:	d9f2      	bls.n	5076 <usb_init+0x1de>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5090:	2300      	movs	r3, #0
    5092:	62fb      	str	r3, [r7, #44]	; 0x2c
    5094:	e016      	b.n	50c4 <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    5096:	2300      	movs	r3, #0
    5098:	62bb      	str	r3, [r7, #40]	; 0x28
    509a:	e00d      	b.n	50b8 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    509c:	68fa      	ldr	r2, [r7, #12]
    509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50a0:	0099      	lsls	r1, r3, #2
    50a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50a4:	18cb      	adds	r3, r1, r3
    50a6:	3308      	adds	r3, #8
    50a8:	009b      	lsls	r3, r3, #2
    50aa:	18d3      	adds	r3, r2, r3
    50ac:	3304      	adds	r3, #4
    50ae:	2200      	movs	r2, #0
    50b0:	601a      	str	r2, [r3, #0]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    50b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50b4:	3301      	adds	r3, #1
    50b6:	62bb      	str	r3, [r7, #40]	; 0x28
    50b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50ba:	2b03      	cmp	r3, #3
    50bc:	d9ee      	bls.n	509c <usb_init+0x204>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50c0:	3301      	adds	r3, #1
    50c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    50c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50c6:	2b07      	cmp	r3, #7
    50c8:	d9e5      	bls.n	5096 <usb_init+0x1fe>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    50ca:	68fb      	ldr	r3, [r7, #12]
    50cc:	22a4      	movs	r2, #164	; 0xa4
    50ce:	2100      	movs	r1, #0
    50d0:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    50d2:	68fb      	ldr	r3, [r7, #12]
    50d4:	22a5      	movs	r2, #165	; 0xa5
    50d6:	2100      	movs	r1, #0
    50d8:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50da:	2300      	movs	r3, #0
    50dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    50de:	e010      	b.n	5102 <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    50e0:	68fa      	ldr	r2, [r7, #12]
    50e2:	21a6      	movs	r1, #166	; 0xa6
    50e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50e6:	18d3      	adds	r3, r2, r3
    50e8:	185b      	adds	r3, r3, r1
    50ea:	2200      	movs	r2, #0
    50ec:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    50ee:	68fa      	ldr	r2, [r7, #12]
    50f0:	21ae      	movs	r1, #174	; 0xae
    50f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50f4:	18d3      	adds	r3, r2, r3
    50f6:	185b      	adds	r3, r3, r1
    50f8:	2200      	movs	r2, #0
    50fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50fe:	3301      	adds	r3, #1
    5100:	62fb      	str	r3, [r7, #44]	; 0x2c
    5102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5104:	2b07      	cmp	r3, #7
    5106:	d9eb      	bls.n	50e0 <usb_init+0x248>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    5108:	2300      	movs	r3, #0
    510a:	62fb      	str	r3, [r7, #44]	; 0x2c
    510c:	e008      	b.n	5120 <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    510e:	68fb      	ldr	r3, [r7, #12]
    5110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5112:	322e      	adds	r2, #46	; 0x2e
    5114:	0092      	lsls	r2, r2, #2
    5116:	2100      	movs	r1, #0
    5118:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    511c:	3301      	adds	r3, #1
    511e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5122:	2b06      	cmp	r3, #6
    5124:	d9f3      	bls.n	510e <usb_init+0x276>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    5126:	2300      	movs	r3, #0
    5128:	62fb      	str	r3, [r7, #44]	; 0x2c
    512a:	e016      	b.n	515a <usb_init+0x2c2>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    512c:	2300      	movs	r3, #0
    512e:	62bb      	str	r3, [r7, #40]	; 0x28
    5130:	e00d      	b.n	514e <usb_init+0x2b6>
			module_inst->device_endpoint_callback[i][j] = NULL;
    5132:	68fa      	ldr	r2, [r7, #12]
    5134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5136:	0099      	lsls	r1, r3, #2
    5138:	6abb      	ldr	r3, [r7, #40]	; 0x28
    513a:	18cb      	adds	r3, r1, r3
    513c:	3334      	adds	r3, #52	; 0x34
    513e:	009b      	lsls	r3, r3, #2
    5140:	18d3      	adds	r3, r2, r3
    5142:	3304      	adds	r3, #4
    5144:	2200      	movs	r2, #0
    5146:	601a      	str	r2, [r3, #0]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    5148:	6abb      	ldr	r3, [r7, #40]	; 0x28
    514a:	3301      	adds	r3, #1
    514c:	62bb      	str	r3, [r7, #40]	; 0x28
    514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5150:	2b03      	cmp	r3, #3
    5152:	d9ee      	bls.n	5132 <usb_init+0x29a>
	for (i = 0; i < USB_EPT_NUM; i++) {
    5154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5156:	3301      	adds	r3, #1
    5158:	62fb      	str	r3, [r7, #44]	; 0x2c
    515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    515c:	2b07      	cmp	r3, #7
    515e:	d9e5      	bls.n	512c <usb_init+0x294>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    5160:	68fa      	ldr	r2, [r7, #12]
    5162:	23aa      	movs	r3, #170	; 0xaa
    5164:	005b      	lsls	r3, r3, #1
    5166:	2100      	movs	r1, #0
    5168:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    516a:	68fa      	ldr	r2, [r7, #12]
    516c:	23ab      	movs	r3, #171	; 0xab
    516e:	005b      	lsls	r3, r3, #1
    5170:	2100      	movs	r1, #0
    5172:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    5174:	2300      	movs	r3, #0
    5176:	62bb      	str	r3, [r7, #40]	; 0x28
    5178:	e012      	b.n	51a0 <usb_init+0x308>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    517a:	68f9      	ldr	r1, [r7, #12]
    517c:	23ac      	movs	r3, #172	; 0xac
    517e:	005b      	lsls	r3, r3, #1
    5180:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5182:	188a      	adds	r2, r1, r2
    5184:	18d3      	adds	r3, r2, r3
    5186:	2200      	movs	r2, #0
    5188:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    518a:	68f9      	ldr	r1, [r7, #12]
    518c:	23b0      	movs	r3, #176	; 0xb0
    518e:	005b      	lsls	r3, r3, #1
    5190:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5192:	188a      	adds	r2, r1, r2
    5194:	18d3      	adds	r3, r2, r3
    5196:	2200      	movs	r2, #0
    5198:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    519c:	3301      	adds	r3, #1
    519e:	62bb      	str	r3, [r7, #40]	; 0x28
    51a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    51a2:	2b07      	cmp	r3, #7
    51a4:	d9e9      	bls.n	517a <usb_init+0x2e2>
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    51a6:	2007      	movs	r0, #7
    51a8:	4b11      	ldr	r3, [pc, #68]	; (51f0 <usb_init+0x358>)
    51aa:	4798      	blx	r3

	return STATUS_OK;
    51ac:	2300      	movs	r3, #0
}
    51ae:	0018      	movs	r0, r3
    51b0:	46bd      	mov	sp, r7
    51b2:	b00c      	add	sp, #48	; 0x30
    51b4:	bd80      	pop	{r7, pc}
    51b6:	46c0      	nop			; (mov r8, r8)
    51b8:	20000538 	.word	0x20000538
    51bc:	20000520 	.word	0x20000520
    51c0:	00003475 	.word	0x00003475
    51c4:	000034d1 	.word	0x000034d1
    51c8:	000003a1 	.word	0x000003a1
    51cc:	0000345d 	.word	0x0000345d
    51d0:	0000f259 	.word	0x0000f259
    51d4:	0000f29d 	.word	0x0000f29d
    51d8:	41005000 	.word	0x41005000
    51dc:	00806024 	.word	0x00806024
    51e0:	fffff83f 	.word	0xfffff83f
    51e4:	ffff8fff 	.word	0xffff8fff
    51e8:	200028ec 	.word	0x200028ec
    51ec:	0001c21b 	.word	0x0001c21b
    51f0:	000034f9 	.word	0x000034f9

000051f4 <system_gclk_chan_get_config_defaults>:
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b082      	sub	sp, #8
    51f8:	af00      	add	r7, sp, #0
    51fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	2200      	movs	r2, #0
    5200:	701a      	strb	r2, [r3, #0]
}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	46bd      	mov	sp, r7
    5206:	b002      	add	sp, #8
    5208:	bd80      	pop	{r7, pc}
	...

0000520c <system_apb_clock_set_mask>:
{
    520c:	b580      	push	{r7, lr}
    520e:	b082      	sub	sp, #8
    5210:	af00      	add	r7, sp, #0
    5212:	0002      	movs	r2, r0
    5214:	6039      	str	r1, [r7, #0]
    5216:	1dfb      	adds	r3, r7, #7
    5218:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    521a:	1dfb      	adds	r3, r7, #7
    521c:	781b      	ldrb	r3, [r3, #0]
    521e:	2b01      	cmp	r3, #1
    5220:	d00a      	beq.n	5238 <system_apb_clock_set_mask+0x2c>
    5222:	2b02      	cmp	r3, #2
    5224:	d00f      	beq.n	5246 <system_apb_clock_set_mask+0x3a>
    5226:	2b00      	cmp	r3, #0
    5228:	d114      	bne.n	5254 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    522a:	4b0e      	ldr	r3, [pc, #56]	; (5264 <system_apb_clock_set_mask+0x58>)
    522c:	4a0d      	ldr	r2, [pc, #52]	; (5264 <system_apb_clock_set_mask+0x58>)
    522e:	6991      	ldr	r1, [r2, #24]
    5230:	683a      	ldr	r2, [r7, #0]
    5232:	430a      	orrs	r2, r1
    5234:	619a      	str	r2, [r3, #24]
			break;
    5236:	e00f      	b.n	5258 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5238:	4b0a      	ldr	r3, [pc, #40]	; (5264 <system_apb_clock_set_mask+0x58>)
    523a:	4a0a      	ldr	r2, [pc, #40]	; (5264 <system_apb_clock_set_mask+0x58>)
    523c:	69d1      	ldr	r1, [r2, #28]
    523e:	683a      	ldr	r2, [r7, #0]
    5240:	430a      	orrs	r2, r1
    5242:	61da      	str	r2, [r3, #28]
			break;
    5244:	e008      	b.n	5258 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5246:	4b07      	ldr	r3, [pc, #28]	; (5264 <system_apb_clock_set_mask+0x58>)
    5248:	4a06      	ldr	r2, [pc, #24]	; (5264 <system_apb_clock_set_mask+0x58>)
    524a:	6a11      	ldr	r1, [r2, #32]
    524c:	683a      	ldr	r2, [r7, #0]
    524e:	430a      	orrs	r2, r1
    5250:	621a      	str	r2, [r3, #32]
			break;
    5252:	e001      	b.n	5258 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5254:	2317      	movs	r3, #23
    5256:	e000      	b.n	525a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5258:	2300      	movs	r3, #0
}
    525a:	0018      	movs	r0, r3
    525c:	46bd      	mov	sp, r7
    525e:	b002      	add	sp, #8
    5260:	bd80      	pop	{r7, pc}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	40000400 	.word	0x40000400

00005268 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    5268:	b580      	push	{r7, lr}
    526a:	b084      	sub	sp, #16
    526c:	af00      	add	r7, sp, #0
    526e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	681b      	ldr	r3, [r3, #0]
    5274:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    5276:	68fb      	ldr	r3, [r7, #12]
    5278:	7a9b      	ldrb	r3, [r3, #10]
    527a:	b2db      	uxtb	r3, r3
    527c:	b25b      	sxtb	r3, r3
    527e:	2b00      	cmp	r3, #0
    5280:	da01      	bge.n	5286 <rtc_count_is_syncing+0x1e>
                return true;
    5282:	2301      	movs	r3, #1
    5284:	e000      	b.n	5288 <rtc_count_is_syncing+0x20>
        }

        return false;
    5286:	2300      	movs	r3, #0
}
    5288:	0018      	movs	r0, r3
    528a:	46bd      	mov	sp, r7
    528c:	b004      	add	sp, #16
    528e:	bd80      	pop	{r7, pc}

00005290 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    5290:	b580      	push	{r7, lr}
    5292:	b084      	sub	sp, #16
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	681b      	ldr	r3, [r3, #0]
    529c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    529e:	46c0      	nop			; (mov r8, r8)
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	0018      	movs	r0, r3
    52a4:	4b07      	ldr	r3, [pc, #28]	; (52c4 <rtc_count_enable+0x34>)
    52a6:	4798      	blx	r3
    52a8:	1e03      	subs	r3, r0, #0
    52aa:	d1f9      	bne.n	52a0 <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    52ac:	68fb      	ldr	r3, [r7, #12]
    52ae:	881b      	ldrh	r3, [r3, #0]
    52b0:	b29b      	uxth	r3, r3
    52b2:	2202      	movs	r2, #2
    52b4:	4313      	orrs	r3, r2
    52b6:	b29a      	uxth	r2, r3
    52b8:	68fb      	ldr	r3, [r7, #12]
    52ba:	801a      	strh	r2, [r3, #0]
}
    52bc:	46c0      	nop			; (mov r8, r8)
    52be:	46bd      	mov	sp, r7
    52c0:	b004      	add	sp, #16
    52c2:	bd80      	pop	{r7, pc}
    52c4:	00005269 	.word	0x00005269

000052c8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    52c8:	b580      	push	{r7, lr}
    52ca:	b084      	sub	sp, #16
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	0018      	movs	r0, r3
    52dc:	4b0a      	ldr	r3, [pc, #40]	; (5308 <rtc_count_disable+0x40>)
    52de:	4798      	blx	r3
    52e0:	1e03      	subs	r3, r0, #0
    52e2:	d1f9      	bne.n	52d8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    52e4:	68fb      	ldr	r3, [r7, #12]
    52e6:	22c1      	movs	r2, #193	; 0xc1
    52e8:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    52ea:	68fb      	ldr	r3, [r7, #12]
    52ec:	22c1      	movs	r2, #193	; 0xc1
    52ee:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    52f0:	68fb      	ldr	r3, [r7, #12]
    52f2:	881b      	ldrh	r3, [r3, #0]
    52f4:	b29b      	uxth	r3, r3
    52f6:	2202      	movs	r2, #2
    52f8:	4393      	bics	r3, r2
    52fa:	b29a      	uxth	r2, r3
    52fc:	68fb      	ldr	r3, [r7, #12]
    52fe:	801a      	strh	r2, [r3, #0]
}
    5300:	46c0      	nop			; (mov r8, r8)
    5302:	46bd      	mov	sp, r7
    5304:	b004      	add	sp, #16
    5306:	bd80      	pop	{r7, pc}
    5308:	00005269 	.word	0x00005269

0000530c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    530c:	b580      	push	{r7, lr}
    530e:	b084      	sub	sp, #16
    5310:	af00      	add	r7, sp, #0
    5312:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5314:	687b      	ldr	r3, [r7, #4]
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	0018      	movs	r0, r3
    531e:	4b0a      	ldr	r3, [pc, #40]	; (5348 <rtc_count_reset+0x3c>)
    5320:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	0018      	movs	r0, r3
    5328:	4b08      	ldr	r3, [pc, #32]	; (534c <rtc_count_reset+0x40>)
    532a:	4798      	blx	r3
    532c:	1e03      	subs	r3, r0, #0
    532e:	d1f9      	bne.n	5324 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    5330:	68fb      	ldr	r3, [r7, #12]
    5332:	881b      	ldrh	r3, [r3, #0]
    5334:	b29b      	uxth	r3, r3
    5336:	2201      	movs	r2, #1
    5338:	4313      	orrs	r3, r2
    533a:	b29a      	uxth	r2, r3
    533c:	68fb      	ldr	r3, [r7, #12]
    533e:	801a      	strh	r2, [r3, #0]
}
    5340:	46c0      	nop			; (mov r8, r8)
    5342:	46bd      	mov	sp, r7
    5344:	b004      	add	sp, #16
    5346:	bd80      	pop	{r7, pc}
    5348:	000052c9 	.word	0x000052c9
    534c:	00005269 	.word	0x00005269

00005350 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    5350:	b580      	push	{r7, lr}
    5352:	b084      	sub	sp, #16
    5354:	af00      	add	r7, sp, #0
    5356:	6078      	str	r0, [r7, #4]
    5358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    5360:	683b      	ldr	r3, [r7, #0]
    5362:	881a      	ldrh	r2, [r3, #0]
    5364:	68bb      	ldr	r3, [r7, #8]
    5366:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    5368:	683b      	ldr	r3, [r7, #0]
    536a:	789b      	ldrb	r3, [r3, #2]
    536c:	2b00      	cmp	r3, #0
    536e:	d03a      	beq.n	53e6 <_rtc_count_set_config+0x96>
    5370:	2b01      	cmp	r3, #1
    5372:	d000      	beq.n	5376 <_rtc_count_set_config+0x26>
    5374:	e06c      	b.n	5450 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    5376:	68bb      	ldr	r3, [r7, #8]
    5378:	881b      	ldrh	r3, [r3, #0]
    537a:	b29a      	uxth	r2, r3
    537c:	68bb      	ldr	r3, [r7, #8]
    537e:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    5380:	683b      	ldr	r3, [r7, #0]
    5382:	78db      	ldrb	r3, [r3, #3]
    5384:	2b00      	cmp	r3, #0
    5386:	d007      	beq.n	5398 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    5388:	68bb      	ldr	r3, [r7, #8]
    538a:	881b      	ldrh	r3, [r3, #0]
    538c:	b29b      	uxth	r3, r3
    538e:	2280      	movs	r2, #128	; 0x80
    5390:	4313      	orrs	r3, r2
    5392:	b29a      	uxth	r2, r3
    5394:	68bb      	ldr	r3, [r7, #8]
    5396:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    5398:	230f      	movs	r3, #15
    539a:	18fb      	adds	r3, r7, r3
    539c:	2200      	movs	r2, #0
    539e:	701a      	strb	r2, [r3, #0]
    53a0:	e01b      	b.n	53da <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
    53a2:	46c0      	nop			; (mov r8, r8)
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	0018      	movs	r0, r3
    53a8:	4b33      	ldr	r3, [pc, #204]	; (5478 <_rtc_count_set_config+0x128>)
    53aa:	4798      	blx	r3
    53ac:	1e03      	subs	r3, r0, #0
    53ae:	d1f9      	bne.n	53a4 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    53b0:	230f      	movs	r3, #15
    53b2:	18fb      	adds	r3, r7, r3
    53b4:	781a      	ldrb	r2, [r3, #0]
    53b6:	683b      	ldr	r3, [r7, #0]
    53b8:	3202      	adds	r2, #2
    53ba:	0092      	lsls	r2, r2, #2
    53bc:	58d1      	ldr	r1, [r2, r3]
    53be:	230f      	movs	r3, #15
    53c0:	18fb      	adds	r3, r7, r3
    53c2:	781a      	ldrb	r2, [r3, #0]
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	0018      	movs	r0, r3
    53c8:	4b2c      	ldr	r3, [pc, #176]	; (547c <_rtc_count_set_config+0x12c>)
    53ca:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    53cc:	230f      	movs	r3, #15
    53ce:	18fb      	adds	r3, r7, r3
    53d0:	781a      	ldrb	r2, [r3, #0]
    53d2:	230f      	movs	r3, #15
    53d4:	18fb      	adds	r3, r7, r3
    53d6:	3201      	adds	r2, #1
    53d8:	701a      	strb	r2, [r3, #0]
    53da:	230f      	movs	r3, #15
    53dc:	18fb      	adds	r3, r7, r3
    53de:	781b      	ldrb	r3, [r3, #0]
    53e0:	2b00      	cmp	r3, #0
    53e2:	d0de      	beq.n	53a2 <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
    53e4:	e036      	b.n	5454 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    53e6:	68bb      	ldr	r3, [r7, #8]
    53e8:	881b      	ldrh	r3, [r3, #0]
    53ea:	b29b      	uxth	r3, r3
    53ec:	2204      	movs	r2, #4
    53ee:	4313      	orrs	r3, r2
    53f0:	b29a      	uxth	r2, r3
    53f2:	68bb      	ldr	r3, [r7, #8]
    53f4:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    53f6:	683b      	ldr	r3, [r7, #0]
    53f8:	78db      	ldrb	r3, [r3, #3]
    53fa:	2b00      	cmp	r3, #0
    53fc:	d001      	beq.n	5402 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    53fe:	2317      	movs	r3, #23
    5400:	e036      	b.n	5470 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    5402:	230e      	movs	r3, #14
    5404:	18fb      	adds	r3, r7, r3
    5406:	2200      	movs	r2, #0
    5408:	701a      	strb	r2, [r3, #0]
    540a:	e01b      	b.n	5444 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
    540c:	46c0      	nop			; (mov r8, r8)
    540e:	687b      	ldr	r3, [r7, #4]
    5410:	0018      	movs	r0, r3
    5412:	4b19      	ldr	r3, [pc, #100]	; (5478 <_rtc_count_set_config+0x128>)
    5414:	4798      	blx	r3
    5416:	1e03      	subs	r3, r0, #0
    5418:	d1f9      	bne.n	540e <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    541a:	230e      	movs	r3, #14
    541c:	18fb      	adds	r3, r7, r3
    541e:	781a      	ldrb	r2, [r3, #0]
    5420:	683b      	ldr	r3, [r7, #0]
    5422:	3202      	adds	r2, #2
    5424:	0092      	lsls	r2, r2, #2
    5426:	58d1      	ldr	r1, [r2, r3]
    5428:	230e      	movs	r3, #14
    542a:	18fb      	adds	r3, r7, r3
    542c:	781a      	ldrb	r2, [r3, #0]
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	0018      	movs	r0, r3
    5432:	4b12      	ldr	r3, [pc, #72]	; (547c <_rtc_count_set_config+0x12c>)
    5434:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    5436:	230e      	movs	r3, #14
    5438:	18fb      	adds	r3, r7, r3
    543a:	781a      	ldrb	r2, [r3, #0]
    543c:	230e      	movs	r3, #14
    543e:	18fb      	adds	r3, r7, r3
    5440:	3201      	adds	r2, #1
    5442:	701a      	strb	r2, [r3, #0]
    5444:	230e      	movs	r3, #14
    5446:	18fb      	adds	r3, r7, r3
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	2b01      	cmp	r3, #1
    544c:	d9de      	bls.n	540c <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
    544e:	e001      	b.n	5454 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5450:	2317      	movs	r3, #23
    5452:	e00d      	b.n	5470 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    5454:	683b      	ldr	r3, [r7, #0]
    5456:	791b      	ldrb	r3, [r3, #4]
    5458:	2b00      	cmp	r3, #0
    545a:	d008      	beq.n	546e <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    545c:	68bb      	ldr	r3, [r7, #8]
    545e:	885b      	ldrh	r3, [r3, #2]
    5460:	b29b      	uxth	r3, r3
    5462:	2280      	movs	r2, #128	; 0x80
    5464:	01d2      	lsls	r2, r2, #7
    5466:	4313      	orrs	r3, r2
    5468:	b29a      	uxth	r2, r3
    546a:	68bb      	ldr	r3, [r7, #8]
    546c:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    546e:	2300      	movs	r3, #0
}
    5470:	0018      	movs	r0, r3
    5472:	46bd      	mov	sp, r7
    5474:	b004      	add	sp, #16
    5476:	bd80      	pop	{r7, pc}
    5478:	00005269 	.word	0x00005269
    547c:	0000560d 	.word	0x0000560d

00005480 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    5480:	b580      	push	{r7, lr}
    5482:	b086      	sub	sp, #24
    5484:	af00      	add	r7, sp, #0
    5486:	60f8      	str	r0, [r7, #12]
    5488:	60b9      	str	r1, [r7, #8]
    548a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	68ba      	ldr	r2, [r7, #8]
    5490:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    5492:	2120      	movs	r1, #32
    5494:	2000      	movs	r0, #0
    5496:	4b17      	ldr	r3, [pc, #92]	; (54f4 <rtc_count_init+0x74>)
    5498:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    549a:	2314      	movs	r3, #20
    549c:	18fb      	adds	r3, r7, r3
    549e:	0018      	movs	r0, r3
    54a0:	4b15      	ldr	r3, [pc, #84]	; (54f8 <rtc_count_init+0x78>)
    54a2:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    54a4:	2314      	movs	r3, #20
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	2202      	movs	r2, #2
    54aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    54ac:	2314      	movs	r3, #20
    54ae:	18fb      	adds	r3, r7, r3
    54b0:	0019      	movs	r1, r3
    54b2:	2004      	movs	r0, #4
    54b4:	4b11      	ldr	r3, [pc, #68]	; (54fc <rtc_count_init+0x7c>)
    54b6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    54b8:	2004      	movs	r0, #4
    54ba:	4b11      	ldr	r3, [pc, #68]	; (5500 <rtc_count_init+0x80>)
    54bc:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    54be:	68fb      	ldr	r3, [r7, #12]
    54c0:	0018      	movs	r0, r3
    54c2:	4b10      	ldr	r3, [pc, #64]	; (5504 <rtc_count_init+0x84>)
    54c4:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    54c6:	687b      	ldr	r3, [r7, #4]
    54c8:	789a      	ldrb	r2, [r3, #2]
    54ca:	68fb      	ldr	r3, [r7, #12]
    54cc:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	791a      	ldrb	r2, [r3, #4]
    54d2:	68fb      	ldr	r3, [r7, #12]
    54d4:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    54d6:	4b0c      	ldr	r3, [pc, #48]	; (5508 <rtc_count_init+0x88>)
    54d8:	68fa      	ldr	r2, [r7, #12]
    54da:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    54dc:	687a      	ldr	r2, [r7, #4]
    54de:	68fb      	ldr	r3, [r7, #12]
    54e0:	0011      	movs	r1, r2
    54e2:	0018      	movs	r0, r3
    54e4:	4b09      	ldr	r3, [pc, #36]	; (550c <rtc_count_init+0x8c>)
    54e6:	4798      	blx	r3
    54e8:	0003      	movs	r3, r0
}
    54ea:	0018      	movs	r0, r3
    54ec:	46bd      	mov	sp, r7
    54ee:	b006      	add	sp, #24
    54f0:	bd80      	pop	{r7, pc}
    54f2:	46c0      	nop			; (mov r8, r8)
    54f4:	0000520d 	.word	0x0000520d
    54f8:	000051f5 	.word	0x000051f5
    54fc:	0000f259 	.word	0x0000f259
    5500:	0000f29d 	.word	0x0000f29d
    5504:	0000530d 	.word	0x0000530d
    5508:	200029ec 	.word	0x200029ec
    550c:	00005351 	.word	0x00005351

00005510 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    5510:	b580      	push	{r7, lr}
    5512:	b084      	sub	sp, #16
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
    5518:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    551a:	687b      	ldr	r3, [r7, #4]
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
    5520:	46c0      	nop			; (mov r8, r8)
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	0018      	movs	r0, r3
    5526:	4b10      	ldr	r3, [pc, #64]	; (5568 <rtc_count_set_count+0x58>)
    5528:	4798      	blx	r3
    552a:	1e03      	subs	r3, r0, #0
    552c:	d1f9      	bne.n	5522 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	791b      	ldrb	r3, [r3, #4]
    5532:	2b00      	cmp	r3, #0
    5534:	d005      	beq.n	5542 <rtc_count_set_count+0x32>
    5536:	2b01      	cmp	r3, #1
    5538:	d10e      	bne.n	5558 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
    553a:	68fb      	ldr	r3, [r7, #12]
    553c:	683a      	ldr	r2, [r7, #0]
    553e:	611a      	str	r2, [r3, #16]

			break;
    5540:	e00c      	b.n	555c <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
    5542:	683b      	ldr	r3, [r7, #0]
    5544:	4a09      	ldr	r2, [pc, #36]	; (556c <rtc_count_set_count+0x5c>)
    5546:	4293      	cmp	r3, r2
    5548:	d901      	bls.n	554e <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
    554a:	2317      	movs	r3, #23
    554c:	e007      	b.n	555e <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    554e:	683b      	ldr	r3, [r7, #0]
    5550:	b29a      	uxth	r2, r3
    5552:	68fb      	ldr	r3, [r7, #12]
    5554:	821a      	strh	r2, [r3, #16]

			break;
    5556:	e001      	b.n	555c <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5558:	2317      	movs	r3, #23
    555a:	e000      	b.n	555e <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
    555c:	2300      	movs	r3, #0
}
    555e:	0018      	movs	r0, r3
    5560:	46bd      	mov	sp, r7
    5562:	b004      	add	sp, #16
    5564:	bd80      	pop	{r7, pc}
    5566:	46c0      	nop			; (mov r8, r8)
    5568:	00005269 	.word	0x00005269
    556c:	0000ffff 	.word	0x0000ffff

00005570 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5570:	b580      	push	{r7, lr}
    5572:	b084      	sub	sp, #16
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	795b      	ldrb	r3, [r3, #5]
    5582:	2201      	movs	r2, #1
    5584:	4053      	eors	r3, r2
    5586:	b2db      	uxtb	r3, r3
    5588:	2b00      	cmp	r3, #0
    558a:	d00a      	beq.n	55a2 <rtc_count_get_count+0x32>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
    558c:	68bb      	ldr	r3, [r7, #8]
    558e:	4a1c      	ldr	r2, [pc, #112]	; (5600 <rtc_count_get_count+0x90>)
    5590:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	0018      	movs	r0, r3
    5598:	4b1a      	ldr	r3, [pc, #104]	; (5604 <rtc_count_get_count+0x94>)
    559a:	4798      	blx	r3
    559c:	1e03      	subs	r3, r0, #0
    559e:	d1f9      	bne.n	5594 <rtc_count_get_count+0x24>
    55a0:	e016      	b.n	55d0 <rtc_count_get_count+0x60>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE0.READREQ.reg & RTC_READREQ_RCONT)){
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	885b      	ldrh	r3, [r3, #2]
    55a6:	b29b      	uxth	r3, r3
    55a8:	001a      	movs	r2, r3
    55aa:	2380      	movs	r3, #128	; 0x80
    55ac:	01db      	lsls	r3, r3, #7
    55ae:	4013      	ands	r3, r2
    55b0:	d10e      	bne.n	55d0 <rtc_count_get_count+0x60>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    55b2:	68bb      	ldr	r3, [r7, #8]
    55b4:	885b      	ldrh	r3, [r3, #2]
    55b6:	b29b      	uxth	r3, r3
    55b8:	4a13      	ldr	r2, [pc, #76]	; (5608 <rtc_count_get_count+0x98>)
    55ba:	4313      	orrs	r3, r2
    55bc:	b29a      	uxth	r2, r3
    55be:	68bb      	ldr	r3, [r7, #8]
    55c0:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_count_is_syncing(module)) {
    55c2:	46c0      	nop			; (mov r8, r8)
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	0018      	movs	r0, r3
    55c8:	4b0e      	ldr	r3, [pc, #56]	; (5604 <rtc_count_get_count+0x94>)
    55ca:	4798      	blx	r3
    55cc:	1e03      	subs	r3, r0, #0
    55ce:	d1f9      	bne.n	55c4 <rtc_count_get_count+0x54>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	791b      	ldrb	r3, [r3, #4]
    55d4:	2b00      	cmp	r3, #0
    55d6:	d005      	beq.n	55e4 <rtc_count_get_count+0x74>
    55d8:	2b01      	cmp	r3, #1
    55da:	d108      	bne.n	55ee <rtc_count_get_count+0x7e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
    55dc:	68bb      	ldr	r3, [r7, #8]
    55de:	691b      	ldr	r3, [r3, #16]
    55e0:	60fb      	str	r3, [r7, #12]

			break;
    55e2:	e007      	b.n	55f4 <rtc_count_get_count+0x84>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    55e4:	68bb      	ldr	r3, [r7, #8]
    55e6:	8a1b      	ldrh	r3, [r3, #16]
    55e8:	b29b      	uxth	r3, r3
    55ea:	60fb      	str	r3, [r7, #12]

			break;
    55ec:	e002      	b.n	55f4 <rtc_count_get_count+0x84>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    55ee:	2300      	movs	r3, #0
    55f0:	60fb      	str	r3, [r7, #12]
			break;
    55f2:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
    55f4:	68fb      	ldr	r3, [r7, #12]
}
    55f6:	0018      	movs	r0, r3
    55f8:	46bd      	mov	sp, r7
    55fa:	b004      	add	sp, #16
    55fc:	bd80      	pop	{r7, pc}
    55fe:	46c0      	nop			; (mov r8, r8)
    5600:	ffff8000 	.word	0xffff8000
    5604:	00005269 	.word	0x00005269
    5608:	ffffc000 	.word	0xffffc000

0000560c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    560c:	b580      	push	{r7, lr}
    560e:	b086      	sub	sp, #24
    5610:	af00      	add	r7, sp, #0
    5612:	60f8      	str	r0, [r7, #12]
    5614:	60b9      	str	r1, [r7, #8]
    5616:	1dfb      	adds	r3, r7, #7
    5618:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    561a:	68fb      	ldr	r3, [r7, #12]
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    5620:	46c0      	nop			; (mov r8, r8)
    5622:	68fb      	ldr	r3, [r7, #12]
    5624:	0018      	movs	r0, r3
    5626:	4b1a      	ldr	r3, [pc, #104]	; (5690 <rtc_count_set_compare+0x84>)
    5628:	4798      	blx	r3
    562a:	1e03      	subs	r3, r0, #0
    562c:	d1f9      	bne.n	5622 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    562e:	68fb      	ldr	r3, [r7, #12]
    5630:	791b      	ldrb	r3, [r3, #4]
    5632:	2b00      	cmp	r3, #0
    5634:	d00f      	beq.n	5656 <rtc_count_set_compare+0x4a>
    5636:	2b01      	cmp	r3, #1
    5638:	d122      	bne.n	5680 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    563a:	1dfb      	adds	r3, r7, #7
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b01      	cmp	r3, #1
    5640:	d901      	bls.n	5646 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    5642:	2317      	movs	r3, #23
    5644:	e01f      	b.n	5686 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    5646:	1dfb      	adds	r3, r7, #7
    5648:	781a      	ldrb	r2, [r3, #0]
    564a:	697b      	ldr	r3, [r7, #20]
    564c:	3206      	adds	r2, #6
    564e:	0092      	lsls	r2, r2, #2
    5650:	68b9      	ldr	r1, [r7, #8]
    5652:	50d1      	str	r1, [r2, r3]

			break;
    5654:	e016      	b.n	5684 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    5656:	1dfb      	adds	r3, r7, #7
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	2b02      	cmp	r3, #2
    565c:	d901      	bls.n	5662 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    565e:	2317      	movs	r3, #23
    5660:	e011      	b.n	5686 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    5662:	68bb      	ldr	r3, [r7, #8]
    5664:	4a0b      	ldr	r2, [pc, #44]	; (5694 <rtc_count_set_compare+0x88>)
    5666:	4293      	cmp	r3, r2
    5668:	d901      	bls.n	566e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    566a:	2317      	movs	r3, #23
    566c:	e00b      	b.n	5686 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    566e:	1dfb      	adds	r3, r7, #7
    5670:	781a      	ldrb	r2, [r3, #0]
    5672:	68bb      	ldr	r3, [r7, #8]
    5674:	b299      	uxth	r1, r3
    5676:	697b      	ldr	r3, [r7, #20]
    5678:	320c      	adds	r2, #12
    567a:	0052      	lsls	r2, r2, #1
    567c:	52d1      	strh	r1, [r2, r3]

			break;
    567e:	e001      	b.n	5684 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    5680:	231a      	movs	r3, #26
    5682:	e000      	b.n	5686 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    5684:	2300      	movs	r3, #0
}
    5686:	0018      	movs	r0, r3
    5688:	46bd      	mov	sp, r7
    568a:	b006      	add	sp, #24
    568c:	bd80      	pop	{r7, pc}
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	00005269 	.word	0x00005269
    5694:	0000ffff 	.word	0x0000ffff

00005698 <system_gclk_chan_get_config_defaults>:
{
    5698:	b580      	push	{r7, lr}
    569a:	b082      	sub	sp, #8
    569c:	af00      	add	r7, sp, #0
    569e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	2200      	movs	r2, #0
    56a4:	701a      	strb	r2, [r3, #0]
}
    56a6:	46c0      	nop			; (mov r8, r8)
    56a8:	46bd      	mov	sp, r7
    56aa:	b002      	add	sp, #8
    56ac:	bd80      	pop	{r7, pc}
	...

000056b0 <system_apb_clock_set_mask>:
{
    56b0:	b580      	push	{r7, lr}
    56b2:	b082      	sub	sp, #8
    56b4:	af00      	add	r7, sp, #0
    56b6:	0002      	movs	r2, r0
    56b8:	6039      	str	r1, [r7, #0]
    56ba:	1dfb      	adds	r3, r7, #7
    56bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    56be:	1dfb      	adds	r3, r7, #7
    56c0:	781b      	ldrb	r3, [r3, #0]
    56c2:	2b01      	cmp	r3, #1
    56c4:	d00a      	beq.n	56dc <system_apb_clock_set_mask+0x2c>
    56c6:	2b02      	cmp	r3, #2
    56c8:	d00f      	beq.n	56ea <system_apb_clock_set_mask+0x3a>
    56ca:	2b00      	cmp	r3, #0
    56cc:	d114      	bne.n	56f8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    56ce:	4b0e      	ldr	r3, [pc, #56]	; (5708 <system_apb_clock_set_mask+0x58>)
    56d0:	4a0d      	ldr	r2, [pc, #52]	; (5708 <system_apb_clock_set_mask+0x58>)
    56d2:	6991      	ldr	r1, [r2, #24]
    56d4:	683a      	ldr	r2, [r7, #0]
    56d6:	430a      	orrs	r2, r1
    56d8:	619a      	str	r2, [r3, #24]
			break;
    56da:	e00f      	b.n	56fc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    56dc:	4b0a      	ldr	r3, [pc, #40]	; (5708 <system_apb_clock_set_mask+0x58>)
    56de:	4a0a      	ldr	r2, [pc, #40]	; (5708 <system_apb_clock_set_mask+0x58>)
    56e0:	69d1      	ldr	r1, [r2, #28]
    56e2:	683a      	ldr	r2, [r7, #0]
    56e4:	430a      	orrs	r2, r1
    56e6:	61da      	str	r2, [r3, #28]
			break;
    56e8:	e008      	b.n	56fc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    56ea:	4b07      	ldr	r3, [pc, #28]	; (5708 <system_apb_clock_set_mask+0x58>)
    56ec:	4a06      	ldr	r2, [pc, #24]	; (5708 <system_apb_clock_set_mask+0x58>)
    56ee:	6a11      	ldr	r1, [r2, #32]
    56f0:	683a      	ldr	r2, [r7, #0]
    56f2:	430a      	orrs	r2, r1
    56f4:	621a      	str	r2, [r3, #32]
			break;
    56f6:	e001      	b.n	56fc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    56f8:	2317      	movs	r3, #23
    56fa:	e000      	b.n	56fe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    56fc:	2300      	movs	r3, #0
}
    56fe:	0018      	movs	r0, r3
    5700:	46bd      	mov	sp, r7
    5702:	b002      	add	sp, #8
    5704:	bd80      	pop	{r7, pc}
    5706:	46c0      	nop			; (mov r8, r8)
    5708:	40000400 	.word	0x40000400

0000570c <system_pinmux_get_config_defaults>:
{
    570c:	b580      	push	{r7, lr}
    570e:	b082      	sub	sp, #8
    5710:	af00      	add	r7, sp, #0
    5712:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5714:	687b      	ldr	r3, [r7, #4]
    5716:	2280      	movs	r2, #128	; 0x80
    5718:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    571a:	687b      	ldr	r3, [r7, #4]
    571c:	2200      	movs	r2, #0
    571e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	2201      	movs	r2, #1
    5724:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	2200      	movs	r2, #0
    572a:	70da      	strb	r2, [r3, #3]
}
    572c:	46c0      	nop			; (mov r8, r8)
    572e:	46bd      	mov	sp, r7
    5730:	b002      	add	sp, #8
    5732:	bd80      	pop	{r7, pc}

00005734 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5734:	b580      	push	{r7, lr}
    5736:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5738:	4b05      	ldr	r3, [pc, #20]	; (5750 <system_is_debugger_present+0x1c>)
    573a:	789b      	ldrb	r3, [r3, #2]
    573c:	b2db      	uxtb	r3, r3
    573e:	001a      	movs	r2, r3
    5740:	2302      	movs	r3, #2
    5742:	4013      	ands	r3, r2
    5744:	1e5a      	subs	r2, r3, #1
    5746:	4193      	sbcs	r3, r2
    5748:	b2db      	uxtb	r3, r3
}
    574a:	0018      	movs	r0, r3
    574c:	46bd      	mov	sp, r7
    574e:	bd80      	pop	{r7, pc}
    5750:	41002000 	.word	0x41002000

00005754 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    5754:	b580      	push	{r7, lr}
    5756:	b084      	sub	sp, #16
    5758:	af00      	add	r7, sp, #0
    575a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    575c:	687b      	ldr	r3, [r7, #4]
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5762:	68fb      	ldr	r3, [r7, #12]
    5764:	69db      	ldr	r3, [r3, #28]
    5766:	2207      	movs	r2, #7
    5768:	4013      	ands	r3, r2
    576a:	1e5a      	subs	r2, r3, #1
    576c:	4193      	sbcs	r3, r2
    576e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    5770:	0018      	movs	r0, r3
    5772:	46bd      	mov	sp, r7
    5774:	b004      	add	sp, #16
    5776:	bd80      	pop	{r7, pc}

00005778 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    5778:	b580      	push	{r7, lr}
    577a:	b082      	sub	sp, #8
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    5780:	46c0      	nop			; (mov r8, r8)
    5782:	687b      	ldr	r3, [r7, #4]
    5784:	0018      	movs	r0, r3
    5786:	4b04      	ldr	r3, [pc, #16]	; (5798 <_i2c_master_wait_for_sync+0x20>)
    5788:	4798      	blx	r3
    578a:	1e03      	subs	r3, r0, #0
    578c:	d1f9      	bne.n	5782 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    578e:	46c0      	nop			; (mov r8, r8)
    5790:	46bd      	mov	sp, r7
    5792:	b002      	add	sp, #8
    5794:	bd80      	pop	{r7, pc}
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	00005755 	.word	0x00005755

0000579c <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    579c:	b580      	push	{r7, lr}
    579e:	b084      	sub	sp, #16
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57a4:	687b      	ldr	r3, [r7, #4]
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	60fb      	str	r3, [r7, #12]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	0018      	movs	r0, r3
    57ae:	4b09      	ldr	r3, [pc, #36]	; (57d4 <i2c_master_disable+0x38>)
    57b0:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    57b2:	68fb      	ldr	r3, [r7, #12]
    57b4:	2283      	movs	r2, #131	; 0x83
    57b6:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    57b8:	68fb      	ldr	r3, [r7, #12]
    57ba:	2283      	movs	r2, #131	; 0x83
    57bc:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    57be:	68fb      	ldr	r3, [r7, #12]
    57c0:	681b      	ldr	r3, [r3, #0]
    57c2:	2202      	movs	r2, #2
    57c4:	4393      	bics	r3, r2
    57c6:	001a      	movs	r2, r3
    57c8:	68fb      	ldr	r3, [r7, #12]
    57ca:	601a      	str	r2, [r3, #0]

}
    57cc:	46c0      	nop			; (mov r8, r8)
    57ce:	46bd      	mov	sp, r7
    57d0:	b004      	add	sp, #16
    57d2:	bd80      	pop	{r7, pc}
    57d4:	00005779 	.word	0x00005779

000057d8 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    57d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57da:	b097      	sub	sp, #92	; 0x5c
    57dc:	af00      	add	r7, sp, #0
    57de:	6178      	str	r0, [r7, #20]
    57e0:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    57e2:	2300      	movs	r3, #0
    57e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    57e6:	2300      	movs	r3, #0
    57e8:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    57ea:	2300      	movs	r3, #0
    57ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    57ee:	233b      	movs	r3, #59	; 0x3b
    57f0:	2210      	movs	r2, #16
    57f2:	4694      	mov	ip, r2
    57f4:	44bc      	add	ip, r7
    57f6:	4463      	add	r3, ip
    57f8:	2200      	movs	r2, #0
    57fa:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57fc:	697b      	ldr	r3, [r7, #20]
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    5802:	697b      	ldr	r3, [r7, #20]
    5804:	681b      	ldr	r3, [r3, #0]
    5806:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    5808:	2323      	movs	r3, #35	; 0x23
    580a:	2210      	movs	r2, #16
    580c:	18ba      	adds	r2, r7, r2
    580e:	18d4      	adds	r4, r2, r3
    5810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5812:	0018      	movs	r0, r3
    5814:	4bc0      	ldr	r3, [pc, #768]	; (5b18 <_i2c_master_set_config+0x340>)
    5816:	4798      	blx	r3
    5818:	0003      	movs	r3, r0
    581a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    581c:	230c      	movs	r3, #12
    581e:	2210      	movs	r2, #16
    5820:	4694      	mov	ip, r2
    5822:	44bc      	add	ip, r7
    5824:	4463      	add	r3, ip
    5826:	0018      	movs	r0, r3
    5828:	4bbc      	ldr	r3, [pc, #752]	; (5b1c <_i2c_master_set_config+0x344>)
    582a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    582c:	693b      	ldr	r3, [r7, #16]
    582e:	69db      	ldr	r3, [r3, #28]
    5830:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    5832:	693b      	ldr	r3, [r7, #16]
    5834:	6a1b      	ldr	r3, [r3, #32]
    5836:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    5838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    583a:	2b00      	cmp	r3, #0
    583c:	d106      	bne.n	584c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5840:	2100      	movs	r1, #0
    5842:	0018      	movs	r0, r3
    5844:	4bb6      	ldr	r3, [pc, #728]	; (5b20 <_i2c_master_set_config+0x348>)
    5846:	4798      	blx	r3
    5848:	0003      	movs	r3, r0
    584a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    584c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    584e:	b2da      	uxtb	r2, r3
    5850:	230c      	movs	r3, #12
    5852:	2110      	movs	r1, #16
    5854:	468c      	mov	ip, r1
    5856:	44bc      	add	ip, r7
    5858:	4463      	add	r3, ip
    585a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    585c:	230c      	movs	r3, #12
    585e:	2210      	movs	r2, #16
    5860:	4694      	mov	ip, r2
    5862:	44bc      	add	ip, r7
    5864:	4463      	add	r3, ip
    5866:	2202      	movs	r2, #2
    5868:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    586a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    586c:	0c1b      	lsrs	r3, r3, #16
    586e:	b2db      	uxtb	r3, r3
    5870:	220c      	movs	r2, #12
    5872:	2110      	movs	r1, #16
    5874:	468c      	mov	ip, r1
    5876:	44bc      	add	ip, r7
    5878:	4462      	add	r2, ip
    587a:	0011      	movs	r1, r2
    587c:	0018      	movs	r0, r3
    587e:	4ba9      	ldr	r3, [pc, #676]	; (5b24 <_i2c_master_set_config+0x34c>)
    5880:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    5882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5884:	2b00      	cmp	r3, #0
    5886:	d106      	bne.n	5896 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    588a:	2101      	movs	r1, #1
    588c:	0018      	movs	r0, r3
    588e:	4ba4      	ldr	r3, [pc, #656]	; (5b20 <_i2c_master_set_config+0x348>)
    5890:	4798      	blx	r3
    5892:	0003      	movs	r3, r0
    5894:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    5896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5898:	b2da      	uxtb	r2, r3
    589a:	230c      	movs	r3, #12
    589c:	2110      	movs	r1, #16
    589e:	468c      	mov	ip, r1
    58a0:	44bc      	add	ip, r7
    58a2:	4463      	add	r3, ip
    58a4:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    58a6:	230c      	movs	r3, #12
    58a8:	2210      	movs	r2, #16
    58aa:	4694      	mov	ip, r2
    58ac:	44bc      	add	ip, r7
    58ae:	4463      	add	r3, ip
    58b0:	2202      	movs	r2, #2
    58b2:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    58b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    58b6:	0c1b      	lsrs	r3, r3, #16
    58b8:	b2db      	uxtb	r3, r3
    58ba:	220c      	movs	r2, #12
    58bc:	2110      	movs	r1, #16
    58be:	468c      	mov	ip, r1
    58c0:	44bc      	add	ip, r7
    58c2:	4462      	add	r2, ip
    58c4:	0011      	movs	r1, r2
    58c6:	0018      	movs	r0, r3
    58c8:	4b96      	ldr	r3, [pc, #600]	; (5b24 <_i2c_master_set_config+0x34c>)
    58ca:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    58cc:	693b      	ldr	r3, [r7, #16]
    58ce:	8a9a      	ldrh	r2, [r3, #20]
    58d0:	697b      	ldr	r3, [r7, #20]
    58d2:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    58d4:	693b      	ldr	r3, [r7, #16]
    58d6:	8ada      	ldrh	r2, [r3, #22]
    58d8:	697b      	ldr	r3, [r7, #20]
    58da:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    58dc:	693b      	ldr	r3, [r7, #16]
    58de:	7e1b      	ldrb	r3, [r3, #24]
    58e0:	2b00      	cmp	r3, #0
    58e2:	d103      	bne.n	58ec <_i2c_master_set_config+0x114>
    58e4:	4b90      	ldr	r3, [pc, #576]	; (5b28 <_i2c_master_set_config+0x350>)
    58e6:	4798      	blx	r3
    58e8:	1e03      	subs	r3, r0, #0
    58ea:	d002      	beq.n	58f2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    58ec:	2380      	movs	r3, #128	; 0x80
    58ee:	657b      	str	r3, [r7, #84]	; 0x54
    58f0:	e001      	b.n	58f6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    58f2:	2300      	movs	r3, #0
    58f4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    58f6:	693b      	ldr	r3, [r7, #16]
    58f8:	691b      	ldr	r3, [r3, #16]
    58fa:	2b00      	cmp	r3, #0
    58fc:	d004      	beq.n	5908 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    58fe:	693b      	ldr	r3, [r7, #16]
    5900:	691b      	ldr	r3, [r3, #16]
    5902:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5904:	4313      	orrs	r3, r2
    5906:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    5908:	693b      	ldr	r3, [r7, #16]
    590a:	689b      	ldr	r3, [r3, #8]
    590c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    590e:	4313      	orrs	r3, r2
    5910:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    5912:	693b      	ldr	r3, [r7, #16]
    5914:	2224      	movs	r2, #36	; 0x24
    5916:	5c9b      	ldrb	r3, [r3, r2]
    5918:	2b00      	cmp	r3, #0
    591a:	d004      	beq.n	5926 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    591c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    591e:	2280      	movs	r2, #128	; 0x80
    5920:	05d2      	lsls	r2, r2, #23
    5922:	4313      	orrs	r3, r2
    5924:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    5926:	693b      	ldr	r3, [r7, #16]
    5928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    592a:	2b00      	cmp	r3, #0
    592c:	d004      	beq.n	5938 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    592e:	693b      	ldr	r3, [r7, #16]
    5930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5934:	4313      	orrs	r3, r2
    5936:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    5938:	693b      	ldr	r3, [r7, #16]
    593a:	222c      	movs	r2, #44	; 0x2c
    593c:	5c9b      	ldrb	r3, [r3, r2]
    593e:	2b00      	cmp	r3, #0
    5940:	d105      	bne.n	594e <_i2c_master_set_config+0x176>
    5942:	693b      	ldr	r3, [r7, #16]
    5944:	689a      	ldr	r2, [r3, #8]
    5946:	2380      	movs	r3, #128	; 0x80
    5948:	049b      	lsls	r3, r3, #18
    594a:	429a      	cmp	r2, r3
    594c:	d104      	bne.n	5958 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    594e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5950:	2280      	movs	r2, #128	; 0x80
    5952:	0512      	lsls	r2, r2, #20
    5954:	4313      	orrs	r3, r2
    5956:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    5958:	693b      	ldr	r3, [r7, #16]
    595a:	222d      	movs	r2, #45	; 0x2d
    595c:	5c9b      	ldrb	r3, [r3, r2]
    595e:	2b00      	cmp	r3, #0
    5960:	d004      	beq.n	596c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    5962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5964:	2280      	movs	r2, #128	; 0x80
    5966:	0412      	lsls	r2, r2, #16
    5968:	4313      	orrs	r3, r2
    596a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    596c:	693b      	ldr	r3, [r7, #16]
    596e:	222e      	movs	r2, #46	; 0x2e
    5970:	5c9b      	ldrb	r3, [r3, r2]
    5972:	2b00      	cmp	r3, #0
    5974:	d004      	beq.n	5980 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    5976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5978:	2280      	movs	r2, #128	; 0x80
    597a:	03d2      	lsls	r2, r2, #15
    597c:	4313      	orrs	r3, r2
    597e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    5980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5982:	681a      	ldr	r2, [r3, #0]
    5984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5986:	431a      	orrs	r2, r3
    5988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    598a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    598e:	2280      	movs	r2, #128	; 0x80
    5990:	0052      	lsls	r2, r2, #1
    5992:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    5994:	2323      	movs	r3, #35	; 0x23
    5996:	2210      	movs	r2, #16
    5998:	4694      	mov	ip, r2
    599a:	44bc      	add	ip, r7
    599c:	4463      	add	r3, ip
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	3314      	adds	r3, #20
    59a2:	b2db      	uxtb	r3, r3
    59a4:	0018      	movs	r0, r3
    59a6:	4b61      	ldr	r3, [pc, #388]	; (5b2c <_i2c_master_set_config+0x354>)
    59a8:	4798      	blx	r3
    59aa:	0003      	movs	r3, r0
    59ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    59ae:	693b      	ldr	r3, [r7, #16]
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	22fa      	movs	r2, #250	; 0xfa
    59b4:	0092      	lsls	r2, r2, #2
    59b6:	4353      	muls	r3, r2
    59b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    59ba:	693b      	ldr	r3, [r7, #16]
    59bc:	685b      	ldr	r3, [r3, #4]
    59be:	22fa      	movs	r2, #250	; 0xfa
    59c0:	0092      	lsls	r2, r2, #2
    59c2:	4353      	muls	r3, r2
    59c4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    59c6:	693b      	ldr	r3, [r7, #16]
    59c8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    59ca:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    59cc:	4b58      	ldr	r3, [pc, #352]	; (5b30 <_i2c_master_set_config+0x358>)
    59ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    59d0:	4798      	blx	r3
    59d2:	0005      	movs	r5, r0
    59d4:	000e      	movs	r6, r1
    59d6:	4b56      	ldr	r3, [pc, #344]	; (5b30 <_i2c_master_set_config+0x358>)
    59d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    59da:	4798      	blx	r3
    59dc:	60b8      	str	r0, [r7, #8]
    59de:	60f9      	str	r1, [r7, #12]
    59e0:	4b53      	ldr	r3, [pc, #332]	; (5b30 <_i2c_master_set_config+0x358>)
    59e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    59e4:	4798      	blx	r3
    59e6:	4c53      	ldr	r4, [pc, #332]	; (5b34 <_i2c_master_set_config+0x35c>)
    59e8:	4a53      	ldr	r2, [pc, #332]	; (5b38 <_i2c_master_set_config+0x360>)
    59ea:	4b54      	ldr	r3, [pc, #336]	; (5b3c <_i2c_master_set_config+0x364>)
    59ec:	47a0      	blx	r4
    59ee:	0003      	movs	r3, r0
    59f0:	000c      	movs	r4, r1
    59f2:	603b      	str	r3, [r7, #0]
    59f4:	607c      	str	r4, [r7, #4]
    59f6:	4b4e      	ldr	r3, [pc, #312]	; (5b30 <_i2c_master_set_config+0x358>)
    59f8:	6a38      	ldr	r0, [r7, #32]
    59fa:	4798      	blx	r3
    59fc:	0002      	movs	r2, r0
    59fe:	000b      	movs	r3, r1
    5a00:	4c4c      	ldr	r4, [pc, #304]	; (5b34 <_i2c_master_set_config+0x35c>)
    5a02:	6838      	ldr	r0, [r7, #0]
    5a04:	6879      	ldr	r1, [r7, #4]
    5a06:	47a0      	blx	r4
    5a08:	0003      	movs	r3, r0
    5a0a:	000c      	movs	r4, r1
    5a0c:	0018      	movs	r0, r3
    5a0e:	0021      	movs	r1, r4
    5a10:	4c4b      	ldr	r4, [pc, #300]	; (5b40 <_i2c_master_set_config+0x368>)
    5a12:	2200      	movs	r2, #0
    5a14:	4b4b      	ldr	r3, [pc, #300]	; (5b44 <_i2c_master_set_config+0x36c>)
    5a16:	47a0      	blx	r4
    5a18:	0003      	movs	r3, r0
    5a1a:	000c      	movs	r4, r1
    5a1c:	001a      	movs	r2, r3
    5a1e:	0023      	movs	r3, r4
    5a20:	4c44      	ldr	r4, [pc, #272]	; (5b34 <_i2c_master_set_config+0x35c>)
    5a22:	68b8      	ldr	r0, [r7, #8]
    5a24:	68f9      	ldr	r1, [r7, #12]
    5a26:	47a0      	blx	r4
    5a28:	0003      	movs	r3, r0
    5a2a:	000c      	movs	r4, r1
    5a2c:	001a      	movs	r2, r3
    5a2e:	0023      	movs	r3, r4
    5a30:	4c45      	ldr	r4, [pc, #276]	; (5b48 <_i2c_master_set_config+0x370>)
    5a32:	0028      	movs	r0, r5
    5a34:	0031      	movs	r1, r6
    5a36:	47a0      	blx	r4
    5a38:	0003      	movs	r3, r0
    5a3a:	000c      	movs	r4, r1
    5a3c:	001d      	movs	r5, r3
    5a3e:	0026      	movs	r6, r4
    5a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a42:	005a      	lsls	r2, r3, #1
    5a44:	4b3a      	ldr	r3, [pc, #232]	; (5b30 <_i2c_master_set_config+0x358>)
    5a46:	0010      	movs	r0, r2
    5a48:	4798      	blx	r3
    5a4a:	0002      	movs	r2, r0
    5a4c:	000b      	movs	r3, r1
    5a4e:	4c3c      	ldr	r4, [pc, #240]	; (5b40 <_i2c_master_set_config+0x368>)
    5a50:	0028      	movs	r0, r5
    5a52:	0031      	movs	r1, r6
    5a54:	47a0      	blx	r4
    5a56:	0003      	movs	r3, r0
    5a58:	000c      	movs	r4, r1
    5a5a:	0018      	movs	r0, r3
    5a5c:	0021      	movs	r1, r4
    5a5e:	4c3a      	ldr	r4, [pc, #232]	; (5b48 <_i2c_master_set_config+0x370>)
    5a60:	2200      	movs	r2, #0
    5a62:	4b3a      	ldr	r3, [pc, #232]	; (5b4c <_i2c_master_set_config+0x374>)
    5a64:	47a0      	blx	r4
    5a66:	0003      	movs	r3, r0
    5a68:	000c      	movs	r4, r1
    5a6a:	001d      	movs	r5, r3
    5a6c:	0026      	movs	r6, r4
    5a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a70:	005a      	lsls	r2, r3, #1
    5a72:	4b2f      	ldr	r3, [pc, #188]	; (5b30 <_i2c_master_set_config+0x358>)
    5a74:	0010      	movs	r0, r2
    5a76:	4798      	blx	r3
    5a78:	0002      	movs	r2, r0
    5a7a:	000b      	movs	r3, r1
    5a7c:	4c34      	ldr	r4, [pc, #208]	; (5b50 <_i2c_master_set_config+0x378>)
    5a7e:	0028      	movs	r0, r5
    5a80:	0031      	movs	r1, r6
    5a82:	47a0      	blx	r4
    5a84:	0003      	movs	r3, r0
    5a86:	000c      	movs	r4, r1
    5a88:	0019      	movs	r1, r3
    5a8a:	0022      	movs	r2, r4
    5a8c:	4b31      	ldr	r3, [pc, #196]	; (5b54 <_i2c_master_set_config+0x37c>)
    5a8e:	0008      	movs	r0, r1
    5a90:	0011      	movs	r1, r2
    5a92:	4798      	blx	r3
    5a94:	0003      	movs	r3, r0
    5a96:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    5a98:	693b      	ldr	r3, [r7, #16]
    5a9a:	689a      	ldr	r2, [r3, #8]
    5a9c:	2380      	movs	r3, #128	; 0x80
    5a9e:	049b      	lsls	r3, r3, #18
    5aa0:	429a      	cmp	r2, r3
    5aa2:	d16a      	bne.n	5b7a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    5aa4:	4b22      	ldr	r3, [pc, #136]	; (5b30 <_i2c_master_set_config+0x358>)
    5aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5aa8:	4798      	blx	r3
    5aaa:	4c25      	ldr	r4, [pc, #148]	; (5b40 <_i2c_master_set_config+0x368>)
    5aac:	0002      	movs	r2, r0
    5aae:	000b      	movs	r3, r1
    5ab0:	47a0      	blx	r4
    5ab2:	0003      	movs	r3, r0
    5ab4:	000c      	movs	r4, r1
    5ab6:	001d      	movs	r5, r3
    5ab8:	0026      	movs	r6, r4
    5aba:	4b1d      	ldr	r3, [pc, #116]	; (5b30 <_i2c_master_set_config+0x358>)
    5abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5abe:	4798      	blx	r3
    5ac0:	4c1c      	ldr	r4, [pc, #112]	; (5b34 <_i2c_master_set_config+0x35c>)
    5ac2:	2200      	movs	r2, #0
    5ac4:	4b24      	ldr	r3, [pc, #144]	; (5b58 <_i2c_master_set_config+0x380>)
    5ac6:	47a0      	blx	r4
    5ac8:	0003      	movs	r3, r0
    5aca:	000c      	movs	r4, r1
    5acc:	001a      	movs	r2, r3
    5ace:	0023      	movs	r3, r4
    5ad0:	4c1f      	ldr	r4, [pc, #124]	; (5b50 <_i2c_master_set_config+0x378>)
    5ad2:	0028      	movs	r0, r5
    5ad4:	0031      	movs	r1, r6
    5ad6:	47a0      	blx	r4
    5ad8:	0003      	movs	r3, r0
    5ada:	000c      	movs	r4, r1
    5adc:	0018      	movs	r0, r3
    5ade:	0021      	movs	r1, r4
    5ae0:	4c19      	ldr	r4, [pc, #100]	; (5b48 <_i2c_master_set_config+0x370>)
    5ae2:	2200      	movs	r2, #0
    5ae4:	4b19      	ldr	r3, [pc, #100]	; (5b4c <_i2c_master_set_config+0x374>)
    5ae6:	47a0      	blx	r4
    5ae8:	0003      	movs	r3, r0
    5aea:	000c      	movs	r4, r1
    5aec:	0019      	movs	r1, r3
    5aee:	0022      	movs	r2, r4
    5af0:	4b18      	ldr	r3, [pc, #96]	; (5b54 <_i2c_master_set_config+0x37c>)
    5af2:	0008      	movs	r0, r1
    5af4:	0011      	movs	r1, r2
    5af6:	4798      	blx	r3
    5af8:	0003      	movs	r3, r0
    5afa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    5afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5afe:	2b00      	cmp	r3, #0
    5b00:	d02e      	beq.n	5b60 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5b02:	4b16      	ldr	r3, [pc, #88]	; (5b5c <_i2c_master_set_config+0x384>)
    5b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5b08:	4798      	blx	r3
    5b0a:	0003      	movs	r3, r0
    5b0c:	1e9a      	subs	r2, r3, #2
    5b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5b10:	1ad3      	subs	r3, r2, r3
    5b12:	653b      	str	r3, [r7, #80]	; 0x50
    5b14:	e031      	b.n	5b7a <_i2c_master_set_config+0x3a2>
    5b16:	46c0      	nop			; (mov r8, r8)
    5b18:	0000cdf1 	.word	0x0000cdf1
    5b1c:	0000570d 	.word	0x0000570d
    5b20:	0000cc35 	.word	0x0000cc35
    5b24:	000003a1 	.word	0x000003a1
    5b28:	00005735 	.word	0x00005735
    5b2c:	0000f37d 	.word	0x0000f37d
    5b30:	0001bc95 	.word	0x0001bc95
    5b34:	0001b07d 	.word	0x0001b07d
    5b38:	e826d695 	.word	0xe826d695
    5b3c:	3e112e0b 	.word	0x3e112e0b
    5b40:	0001a1f5 	.word	0x0001a1f5
    5b44:	40240000 	.word	0x40240000
    5b48:	0001b57d 	.word	0x0001b57d
    5b4c:	3ff00000 	.word	0x3ff00000
    5b50:	0001a815 	.word	0x0001a815
    5b54:	0001bba9 	.word	0x0001bba9
    5b58:	40080000 	.word	0x40080000
    5b5c:	00019d81 	.word	0x00019d81
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    5b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b62:	005a      	lsls	r2, r3, #1
    5b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b66:	18d3      	adds	r3, r2, r3
    5b68:	1e5a      	subs	r2, r3, #1
    5b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b6c:	0059      	lsls	r1, r3, #1
    5b6e:	4b1d      	ldr	r3, [pc, #116]	; (5be4 <_i2c_master_set_config+0x40c>)
    5b70:	0010      	movs	r0, r2
    5b72:	4798      	blx	r3
    5b74:	0003      	movs	r3, r0
    5b76:	3b01      	subs	r3, #1
    5b78:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5b7c:	2bff      	cmp	r3, #255	; 0xff
    5b7e:	dc08      	bgt.n	5b92 <_i2c_master_set_config+0x3ba>
    5b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5b82:	2b00      	cmp	r3, #0
    5b84:	db05      	blt.n	5b92 <_i2c_master_set_config+0x3ba>
    5b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5b88:	2bff      	cmp	r3, #255	; 0xff
    5b8a:	dc02      	bgt.n	5b92 <_i2c_master_set_config+0x3ba>
    5b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5b8e:	2b00      	cmp	r3, #0
    5b90:	da06      	bge.n	5ba0 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5b92:	233b      	movs	r3, #59	; 0x3b
    5b94:	2210      	movs	r2, #16
    5b96:	4694      	mov	ip, r2
    5b98:	44bc      	add	ip, r7
    5b9a:	4463      	add	r3, ip
    5b9c:	2240      	movs	r2, #64	; 0x40
    5b9e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    5ba0:	233b      	movs	r3, #59	; 0x3b
    5ba2:	2210      	movs	r2, #16
    5ba4:	4694      	mov	ip, r2
    5ba6:	44bc      	add	ip, r7
    5ba8:	4463      	add	r3, ip
    5baa:	781b      	ldrb	r3, [r3, #0]
    5bac:	2b40      	cmp	r3, #64	; 0x40
    5bae:	d00e      	beq.n	5bce <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5bb2:	22ff      	movs	r2, #255	; 0xff
    5bb4:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5bb8:	041b      	lsls	r3, r3, #16
    5bba:	0019      	movs	r1, r3
    5bbc:	23ff      	movs	r3, #255	; 0xff
    5bbe:	041b      	lsls	r3, r3, #16
    5bc0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5bc2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5bc6:	0612      	lsls	r2, r2, #24
    5bc8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5bcc:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    5bce:	233b      	movs	r3, #59	; 0x3b
    5bd0:	2210      	movs	r2, #16
    5bd2:	4694      	mov	ip, r2
    5bd4:	44bc      	add	ip, r7
    5bd6:	4463      	add	r3, ip
    5bd8:	781b      	ldrb	r3, [r3, #0]
}
    5bda:	0018      	movs	r0, r3
    5bdc:	46bd      	mov	sp, r7
    5bde:	b017      	add	sp, #92	; 0x5c
    5be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5be2:	46c0      	nop			; (mov r8, r8)
    5be4:	00019d81 	.word	0x00019d81

00005be8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	b08a      	sub	sp, #40	; 0x28
    5bec:	af00      	add	r7, sp, #0
    5bee:	60f8      	str	r0, [r7, #12]
    5bf0:	60b9      	str	r1, [r7, #8]
    5bf2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    5bf4:	68fb      	ldr	r3, [r7, #12]
    5bf6:	68ba      	ldr	r2, [r7, #8]
    5bf8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5bfa:	68fb      	ldr	r3, [r7, #12]
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5c00:	68fb      	ldr	r3, [r7, #12]
    5c02:	681b      	ldr	r3, [r3, #0]
    5c04:	0018      	movs	r0, r3
    5c06:	4b25      	ldr	r3, [pc, #148]	; (5c9c <i2c_master_init+0xb4>)
    5c08:	4798      	blx	r3
    5c0a:	0003      	movs	r3, r0
    5c0c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5c0e:	6a3b      	ldr	r3, [r7, #32]
    5c10:	3302      	adds	r3, #2
    5c12:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5c14:	6a3b      	ldr	r3, [r7, #32]
    5c16:	3314      	adds	r3, #20
    5c18:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5c1a:	2201      	movs	r2, #1
    5c1c:	69fb      	ldr	r3, [r7, #28]
    5c1e:	409a      	lsls	r2, r3
    5c20:	0013      	movs	r3, r2
    5c22:	0019      	movs	r1, r3
    5c24:	2002      	movs	r0, #2
    5c26:	4b1e      	ldr	r3, [pc, #120]	; (5ca0 <i2c_master_init+0xb8>)
    5c28:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5c2a:	2314      	movs	r3, #20
    5c2c:	18fb      	adds	r3, r7, r3
    5c2e:	0018      	movs	r0, r3
    5c30:	4b1c      	ldr	r3, [pc, #112]	; (5ca4 <i2c_master_init+0xbc>)
    5c32:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	7b1a      	ldrb	r2, [r3, #12]
    5c38:	2314      	movs	r3, #20
    5c3a:	18fb      	adds	r3, r7, r3
    5c3c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5c3e:	69bb      	ldr	r3, [r7, #24]
    5c40:	b2db      	uxtb	r3, r3
    5c42:	2214      	movs	r2, #20
    5c44:	18ba      	adds	r2, r7, r2
    5c46:	0011      	movs	r1, r2
    5c48:	0018      	movs	r0, r3
    5c4a:	4b17      	ldr	r3, [pc, #92]	; (5ca8 <i2c_master_init+0xc0>)
    5c4c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5c4e:	69bb      	ldr	r3, [r7, #24]
    5c50:	b2db      	uxtb	r3, r3
    5c52:	0018      	movs	r0, r3
    5c54:	4b15      	ldr	r3, [pc, #84]	; (5cac <i2c_master_init+0xc4>)
    5c56:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	7b1b      	ldrb	r3, [r3, #12]
    5c5c:	2100      	movs	r1, #0
    5c5e:	0018      	movs	r0, r3
    5c60:	4b13      	ldr	r3, [pc, #76]	; (5cb0 <i2c_master_init+0xc8>)
    5c62:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c66:	681b      	ldr	r3, [r3, #0]
    5c68:	2202      	movs	r2, #2
    5c6a:	4013      	ands	r3, r2
    5c6c:	d001      	beq.n	5c72 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    5c6e:	231c      	movs	r3, #28
    5c70:	e010      	b.n	5c94 <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	2201      	movs	r2, #1
    5c78:	4013      	ands	r3, r2
    5c7a:	d001      	beq.n	5c80 <i2c_master_init+0x98>
		return STATUS_BUSY;
    5c7c:	2305      	movs	r3, #5
    5c7e:	e009      	b.n	5c94 <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c82:	2214      	movs	r2, #20
    5c84:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    5c86:	687a      	ldr	r2, [r7, #4]
    5c88:	68fb      	ldr	r3, [r7, #12]
    5c8a:	0011      	movs	r1, r2
    5c8c:	0018      	movs	r0, r3
    5c8e:	4b09      	ldr	r3, [pc, #36]	; (5cb4 <i2c_master_init+0xcc>)
    5c90:	4798      	blx	r3
    5c92:	0003      	movs	r3, r0
}
    5c94:	0018      	movs	r0, r3
    5c96:	46bd      	mov	sp, r7
    5c98:	b00a      	add	sp, #40	; 0x28
    5c9a:	bd80      	pop	{r7, pc}
    5c9c:	0000cdf1 	.word	0x0000cdf1
    5ca0:	000056b1 	.word	0x000056b1
    5ca4:	00005699 	.word	0x00005699
    5ca8:	0000f259 	.word	0x0000f259
    5cac:	0000f29d 	.word	0x0000f29d
    5cb0:	0000cba9 	.word	0x0000cba9
    5cb4:	000057d9 	.word	0x000057d9

00005cb8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b084      	sub	sp, #16
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	681b      	ldr	r3, [r3, #0]
    5cc4:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	0018      	movs	r0, r3
    5cca:	4b08      	ldr	r3, [pc, #32]	; (5cec <i2c_master_reset+0x34>)
    5ccc:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	0018      	movs	r0, r3
    5cd2:	4b07      	ldr	r3, [pc, #28]	; (5cf0 <i2c_master_reset+0x38>)
    5cd4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	0018      	movs	r0, r3
    5cda:	4b04      	ldr	r3, [pc, #16]	; (5cec <i2c_master_reset+0x34>)
    5cdc:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    5cde:	68fb      	ldr	r3, [r7, #12]
    5ce0:	2201      	movs	r2, #1
    5ce2:	601a      	str	r2, [r3, #0]
}
    5ce4:	46c0      	nop			; (mov r8, r8)
    5ce6:	46bd      	mov	sp, r7
    5ce8:	b004      	add	sp, #16
    5cea:	bd80      	pop	{r7, pc}
    5cec:	00005779 	.word	0x00005779
    5cf0:	0000579d 	.word	0x0000579d

00005cf4 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	b084      	sub	sp, #16
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5d02:	68fb      	ldr	r3, [r7, #12]
    5d04:	7e1b      	ldrb	r3, [r3, #24]
    5d06:	b2db      	uxtb	r3, r3
    5d08:	001a      	movs	r2, r3
    5d0a:	2302      	movs	r3, #2
    5d0c:	4013      	ands	r3, r2
    5d0e:	d00b      	beq.n	5d28 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5d10:	68fb      	ldr	r3, [r7, #12]
    5d12:	2202      	movs	r2, #2
    5d14:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5d16:	68fb      	ldr	r3, [r7, #12]
    5d18:	8b5b      	ldrh	r3, [r3, #26]
    5d1a:	b29b      	uxth	r3, r3
    5d1c:	001a      	movs	r2, r3
    5d1e:	2302      	movs	r3, #2
    5d20:	4013      	ands	r3, r2
    5d22:	d011      	beq.n	5d48 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    5d24:	2341      	movs	r3, #65	; 0x41
    5d26:	e010      	b.n	5d4a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5d28:	68fb      	ldr	r3, [r7, #12]
    5d2a:	8b5b      	ldrh	r3, [r3, #26]
    5d2c:	b29b      	uxth	r3, r3
    5d2e:	001a      	movs	r2, r3
    5d30:	2304      	movs	r3, #4
    5d32:	4013      	ands	r3, r2
    5d34:	d008      	beq.n	5d48 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5d36:	68fb      	ldr	r3, [r7, #12]
    5d38:	685b      	ldr	r3, [r3, #4]
    5d3a:	22c0      	movs	r2, #192	; 0xc0
    5d3c:	0292      	lsls	r2, r2, #10
    5d3e:	431a      	orrs	r2, r3
    5d40:	68fb      	ldr	r3, [r7, #12]
    5d42:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    5d44:	2318      	movs	r3, #24
    5d46:	e000      	b.n	5d4a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    5d48:	2300      	movs	r3, #0
}
    5d4a:	0018      	movs	r0, r3
    5d4c:	46bd      	mov	sp, r7
    5d4e:	b004      	add	sp, #16
    5d50:	bd80      	pop	{r7, pc}

00005d52 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    5d52:	b580      	push	{r7, lr}
    5d54:	b084      	sub	sp, #16
    5d56:	af00      	add	r7, sp, #0
    5d58:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	681b      	ldr	r3, [r3, #0]
    5d5e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5d60:	230e      	movs	r3, #14
    5d62:	18fb      	adds	r3, r7, r3
    5d64:	2200      	movs	r2, #0
    5d66:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5d68:	e00f      	b.n	5d8a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    5d6a:	230e      	movs	r3, #14
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	220e      	movs	r2, #14
    5d70:	18ba      	adds	r2, r7, r2
    5d72:	8812      	ldrh	r2, [r2, #0]
    5d74:	3201      	adds	r2, #1
    5d76:	801a      	strh	r2, [r3, #0]
    5d78:	687b      	ldr	r3, [r7, #4]
    5d7a:	891b      	ldrh	r3, [r3, #8]
    5d7c:	220e      	movs	r2, #14
    5d7e:	18ba      	adds	r2, r7, r2
    5d80:	8812      	ldrh	r2, [r2, #0]
    5d82:	429a      	cmp	r2, r3
    5d84:	d301      	bcc.n	5d8a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    5d86:	2312      	movs	r3, #18
    5d88:	e00e      	b.n	5da8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5d8a:	68bb      	ldr	r3, [r7, #8]
    5d8c:	7e1b      	ldrb	r3, [r3, #24]
    5d8e:	b2db      	uxtb	r3, r3
    5d90:	001a      	movs	r2, r3
    5d92:	2301      	movs	r3, #1
    5d94:	4013      	ands	r3, r2
    5d96:	d106      	bne.n	5da6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5d98:	68bb      	ldr	r3, [r7, #8]
    5d9a:	7e1b      	ldrb	r3, [r3, #24]
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	001a      	movs	r2, r3
    5da0:	2302      	movs	r3, #2
    5da2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5da4:	d0e1      	beq.n	5d6a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    5da6:	2300      	movs	r3, #0
}
    5da8:	0018      	movs	r0, r3
    5daa:	46bd      	mov	sp, r7
    5dac:	b004      	add	sp, #16
    5dae:	bd80      	pop	{r7, pc}

00005db0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5db0:	b590      	push	{r4, r7, lr}
    5db2:	b085      	sub	sp, #20
    5db4:	af00      	add	r7, sp, #0
    5db6:	6078      	str	r0, [r7, #4]
    5db8:	000a      	movs	r2, r1
    5dba:	1cfb      	adds	r3, r7, #3
    5dbc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	681b      	ldr	r3, [r3, #0]
    5dc2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5dc4:	68fb      	ldr	r3, [r7, #12]
    5dc6:	685b      	ldr	r3, [r3, #4]
    5dc8:	2280      	movs	r2, #128	; 0x80
    5dca:	02d2      	lsls	r2, r2, #11
    5dcc:	431a      	orrs	r2, r3
    5dce:	68fb      	ldr	r3, [r7, #12]
    5dd0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    5dd2:	1cfb      	adds	r3, r7, #3
    5dd4:	781a      	ldrb	r2, [r3, #0]
    5dd6:	68fb      	ldr	r3, [r7, #12]
    5dd8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5dda:	230b      	movs	r3, #11
    5ddc:	18fc      	adds	r4, r7, r3
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	0018      	movs	r0, r3
    5de2:	4b07      	ldr	r3, [pc, #28]	; (5e00 <_i2c_master_send_hs_master_code+0x50>)
    5de4:	4798      	blx	r3
    5de6:	0003      	movs	r3, r0
    5de8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5dea:	68fb      	ldr	r3, [r7, #12]
    5dec:	2201      	movs	r2, #1
    5dee:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    5df0:	230b      	movs	r3, #11
    5df2:	18fb      	adds	r3, r7, r3
    5df4:	781b      	ldrb	r3, [r3, #0]
}
    5df6:	0018      	movs	r0, r3
    5df8:	46bd      	mov	sp, r7
    5dfa:	b005      	add	sp, #20
    5dfc:	bd90      	pop	{r4, r7, pc}
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	00005d53 	.word	0x00005d53

00005e04 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5e04:	b590      	push	{r4, r7, lr}
    5e06:	b087      	sub	sp, #28
    5e08:	af00      	add	r7, sp, #0
    5e0a:	6078      	str	r0, [r7, #4]
    5e0c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5e0e:	687b      	ldr	r3, [r7, #4]
    5e10:	681b      	ldr	r3, [r3, #0]
    5e12:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5e14:	2314      	movs	r3, #20
    5e16:	18fb      	adds	r3, r7, r3
    5e18:	683a      	ldr	r2, [r7, #0]
    5e1a:	8852      	ldrh	r2, [r2, #2]
    5e1c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    5e1e:	2312      	movs	r3, #18
    5e20:	18fb      	adds	r3, r7, r3
    5e22:	2200      	movs	r2, #0
    5e24:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5e26:	68fb      	ldr	r3, [r7, #12]
    5e28:	681b      	ldr	r3, [r3, #0]
    5e2a:	011b      	lsls	r3, r3, #4
    5e2c:	0fdb      	lsrs	r3, r3, #31
    5e2e:	b2db      	uxtb	r3, r3
    5e30:	001a      	movs	r2, r3
    5e32:	230b      	movs	r3, #11
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	1e51      	subs	r1, r2, #1
    5e38:	418a      	sbcs	r2, r1
    5e3a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5e3c:	683b      	ldr	r3, [r7, #0]
    5e3e:	7a5b      	ldrb	r3, [r3, #9]
    5e40:	2b00      	cmp	r3, #0
    5e42:	d006      	beq.n	5e52 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5e44:	683b      	ldr	r3, [r7, #0]
    5e46:	7a9a      	ldrb	r2, [r3, #10]
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	0011      	movs	r1, r2
    5e4c:	0018      	movs	r0, r3
    5e4e:	4b85      	ldr	r3, [pc, #532]	; (6064 <_i2c_master_read_packet+0x260>)
    5e50:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5e52:	68fb      	ldr	r3, [r7, #12]
    5e54:	685b      	ldr	r3, [r3, #4]
    5e56:	4a84      	ldr	r2, [pc, #528]	; (6068 <_i2c_master_read_packet+0x264>)
    5e58:	401a      	ands	r2, r3
    5e5a:	68fb      	ldr	r3, [r7, #12]
    5e5c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5e5e:	683b      	ldr	r3, [r7, #0]
    5e60:	7a1b      	ldrb	r3, [r3, #8]
    5e62:	2b00      	cmp	r3, #0
    5e64:	d042      	beq.n	5eec <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    5e66:	683b      	ldr	r3, [r7, #0]
    5e68:	881b      	ldrh	r3, [r3, #0]
    5e6a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5e6c:	683b      	ldr	r3, [r7, #0]
    5e6e:	7a5b      	ldrb	r3, [r3, #9]
    5e70:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5e72:	4313      	orrs	r3, r2
    5e74:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5e76:	2380      	movs	r3, #128	; 0x80
    5e78:	021b      	lsls	r3, r3, #8
    5e7a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    5e7c:	68fb      	ldr	r3, [r7, #12]
    5e7e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    5e80:	2317      	movs	r3, #23
    5e82:	18fc      	adds	r4, r7, r3
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	0018      	movs	r0, r3
    5e88:	4b78      	ldr	r3, [pc, #480]	; (606c <_i2c_master_read_packet+0x268>)
    5e8a:	4798      	blx	r3
    5e8c:	0003      	movs	r3, r0
    5e8e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5e90:	68fb      	ldr	r3, [r7, #12]
    5e92:	685b      	ldr	r3, [r3, #4]
    5e94:	4a74      	ldr	r2, [pc, #464]	; (6068 <_i2c_master_read_packet+0x264>)
    5e96:	401a      	ands	r2, r3
    5e98:	68fb      	ldr	r3, [r7, #12]
    5e9a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    5e9c:	2317      	movs	r3, #23
    5e9e:	18fb      	adds	r3, r7, r3
    5ea0:	781b      	ldrb	r3, [r3, #0]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d107      	bne.n	5eb6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    5ea6:	2317      	movs	r3, #23
    5ea8:	18fc      	adds	r4, r7, r3
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	0018      	movs	r0, r3
    5eae:	4b70      	ldr	r3, [pc, #448]	; (6070 <_i2c_master_read_packet+0x26c>)
    5eb0:	4798      	blx	r3
    5eb2:	0003      	movs	r3, r0
    5eb4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    5eb6:	2317      	movs	r3, #23
    5eb8:	18fb      	adds	r3, r7, r3
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d111      	bne.n	5ee4 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5ec0:	683b      	ldr	r3, [r7, #0]
    5ec2:	881b      	ldrh	r3, [r3, #0]
    5ec4:	0a1b      	lsrs	r3, r3, #8
    5ec6:	b29b      	uxth	r3, r3
    5ec8:	2278      	movs	r2, #120	; 0x78
    5eca:	4313      	orrs	r3, r2
    5ecc:	b29b      	uxth	r3, r3
    5ece:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5ed0:	683b      	ldr	r3, [r7, #0]
    5ed2:	7a5b      	ldrb	r3, [r3, #9]
    5ed4:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5ed6:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5ed8:	2201      	movs	r2, #1
    5eda:	4313      	orrs	r3, r2
    5edc:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5ede:	68fb      	ldr	r3, [r7, #12]
    5ee0:	625a      	str	r2, [r3, #36]	; 0x24
    5ee2:	e00f      	b.n	5f04 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    5ee4:	2317      	movs	r3, #23
    5ee6:	18fb      	adds	r3, r7, r3
    5ee8:	781b      	ldrb	r3, [r3, #0]
    5eea:	e0b6      	b.n	605a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5eec:	683b      	ldr	r3, [r7, #0]
    5eee:	881b      	ldrh	r3, [r3, #0]
    5ef0:	005b      	lsls	r3, r3, #1
    5ef2:	2201      	movs	r2, #1
    5ef4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    5ef6:	683b      	ldr	r3, [r7, #0]
    5ef8:	7a5b      	ldrb	r3, [r3, #9]
    5efa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5efc:	4313      	orrs	r3, r2
    5efe:	001a      	movs	r2, r3
    5f00:	68fb      	ldr	r3, [r7, #12]
    5f02:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5f04:	2317      	movs	r3, #23
    5f06:	18fc      	adds	r4, r7, r3
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	0018      	movs	r0, r3
    5f0c:	4b57      	ldr	r3, [pc, #348]	; (606c <_i2c_master_read_packet+0x268>)
    5f0e:	4798      	blx	r3
    5f10:	0003      	movs	r3, r0
    5f12:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5f14:	230b      	movs	r3, #11
    5f16:	18fb      	adds	r3, r7, r3
    5f18:	781b      	ldrb	r3, [r3, #0]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d00b      	beq.n	5f36 <_i2c_master_read_packet+0x132>
    5f1e:	683b      	ldr	r3, [r7, #0]
    5f20:	885b      	ldrh	r3, [r3, #2]
    5f22:	2b01      	cmp	r3, #1
    5f24:	d107      	bne.n	5f36 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5f26:	68fb      	ldr	r3, [r7, #12]
    5f28:	685b      	ldr	r3, [r3, #4]
    5f2a:	2280      	movs	r2, #128	; 0x80
    5f2c:	02d2      	lsls	r2, r2, #11
    5f2e:	431a      	orrs	r2, r3
    5f30:	68fb      	ldr	r3, [r7, #12]
    5f32:	605a      	str	r2, [r3, #4]
    5f34:	e005      	b.n	5f42 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    5f36:	68fb      	ldr	r3, [r7, #12]
    5f38:	685b      	ldr	r3, [r3, #4]
    5f3a:	4a4b      	ldr	r2, [pc, #300]	; (6068 <_i2c_master_read_packet+0x264>)
    5f3c:	401a      	ands	r2, r3
    5f3e:	68fb      	ldr	r3, [r7, #12]
    5f40:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5f42:	2317      	movs	r3, #23
    5f44:	18fb      	adds	r3, r7, r3
    5f46:	781b      	ldrb	r3, [r3, #0]
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d107      	bne.n	5f5c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    5f4c:	2317      	movs	r3, #23
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	0018      	movs	r0, r3
    5f54:	4b46      	ldr	r3, [pc, #280]	; (6070 <_i2c_master_read_packet+0x26c>)
    5f56:	4798      	blx	r3
    5f58:	0003      	movs	r3, r0
    5f5a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    5f5c:	2317      	movs	r3, #23
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	781b      	ldrb	r3, [r3, #0]
    5f62:	2b00      	cmp	r3, #0
    5f64:	d000      	beq.n	5f68 <_i2c_master_read_packet+0x164>
    5f66:	e075      	b.n	6054 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    5f68:	e04b      	b.n	6002 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5f6a:	68fb      	ldr	r3, [r7, #12]
    5f6c:	8b5b      	ldrh	r3, [r3, #26]
    5f6e:	b29b      	uxth	r3, r3
    5f70:	001a      	movs	r2, r3
    5f72:	2320      	movs	r3, #32
    5f74:	4013      	ands	r3, r2
    5f76:	d101      	bne.n	5f7c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    5f78:	2341      	movs	r3, #65	; 0x41
    5f7a:	e06e      	b.n	605a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5f7c:	687b      	ldr	r3, [r7, #4]
    5f7e:	7adb      	ldrb	r3, [r3, #11]
    5f80:	2b00      	cmp	r3, #0
    5f82:	d01e      	beq.n	5fc2 <_i2c_master_read_packet+0x1be>
    5f84:	230b      	movs	r3, #11
    5f86:	18fb      	adds	r3, r7, r3
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	2201      	movs	r2, #1
    5f8c:	4053      	eors	r3, r2
    5f8e:	b2db      	uxtb	r3, r3
    5f90:	2b00      	cmp	r3, #0
    5f92:	d004      	beq.n	5f9e <_i2c_master_read_packet+0x19a>
    5f94:	2314      	movs	r3, #20
    5f96:	18fb      	adds	r3, r7, r3
    5f98:	881b      	ldrh	r3, [r3, #0]
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d009      	beq.n	5fb2 <_i2c_master_read_packet+0x1ae>
    5f9e:	230b      	movs	r3, #11
    5fa0:	18fb      	adds	r3, r7, r3
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d00c      	beq.n	5fc2 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    5fa8:	2314      	movs	r3, #20
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	881b      	ldrh	r3, [r3, #0]
    5fae:	2b01      	cmp	r3, #1
    5fb0:	d107      	bne.n	5fc2 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5fb2:	68fb      	ldr	r3, [r7, #12]
    5fb4:	685b      	ldr	r3, [r3, #4]
    5fb6:	2280      	movs	r2, #128	; 0x80
    5fb8:	02d2      	lsls	r2, r2, #11
    5fba:	431a      	orrs	r2, r3
    5fbc:	68fb      	ldr	r3, [r7, #12]
    5fbe:	605a      	str	r2, [r3, #4]
    5fc0:	e01a      	b.n	5ff8 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    5fc2:	687b      	ldr	r3, [r7, #4]
    5fc4:	0018      	movs	r0, r3
    5fc6:	4b2b      	ldr	r3, [pc, #172]	; (6074 <_i2c_master_read_packet+0x270>)
    5fc8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5fca:	683b      	ldr	r3, [r7, #0]
    5fcc:	685a      	ldr	r2, [r3, #4]
    5fce:	2312      	movs	r3, #18
    5fd0:	18fb      	adds	r3, r7, r3
    5fd2:	881b      	ldrh	r3, [r3, #0]
    5fd4:	2112      	movs	r1, #18
    5fd6:	1879      	adds	r1, r7, r1
    5fd8:	1c58      	adds	r0, r3, #1
    5fda:	8008      	strh	r0, [r1, #0]
    5fdc:	18d3      	adds	r3, r2, r3
    5fde:	68fa      	ldr	r2, [r7, #12]
    5fe0:	2128      	movs	r1, #40	; 0x28
    5fe2:	5c52      	ldrb	r2, [r2, r1]
    5fe4:	b2d2      	uxtb	r2, r2
    5fe6:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    5fe8:	2317      	movs	r3, #23
    5fea:	18fc      	adds	r4, r7, r3
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	0018      	movs	r0, r3
    5ff0:	4b1e      	ldr	r3, [pc, #120]	; (606c <_i2c_master_read_packet+0x268>)
    5ff2:	4798      	blx	r3
    5ff4:	0003      	movs	r3, r0
    5ff6:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    5ff8:	2317      	movs	r3, #23
    5ffa:	18fb      	adds	r3, r7, r3
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	2b00      	cmp	r3, #0
    6000:	d109      	bne.n	6016 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    6002:	2314      	movs	r3, #20
    6004:	18fb      	adds	r3, r7, r3
    6006:	881b      	ldrh	r3, [r3, #0]
    6008:	2214      	movs	r2, #20
    600a:	18ba      	adds	r2, r7, r2
    600c:	1e59      	subs	r1, r3, #1
    600e:	8011      	strh	r1, [r2, #0]
    6010:	2b00      	cmp	r3, #0
    6012:	d1aa      	bne.n	5f6a <_i2c_master_read_packet+0x166>
    6014:	e000      	b.n	6018 <_i2c_master_read_packet+0x214>
				break;
    6016:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	7a9b      	ldrb	r3, [r3, #10]
    601c:	2b00      	cmp	r3, #0
    601e:	d00a      	beq.n	6036 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	0018      	movs	r0, r3
    6024:	4b13      	ldr	r3, [pc, #76]	; (6074 <_i2c_master_read_packet+0x270>)
    6026:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6028:	68fb      	ldr	r3, [r7, #12]
    602a:	685b      	ldr	r3, [r3, #4]
    602c:	22c0      	movs	r2, #192	; 0xc0
    602e:	0292      	lsls	r2, r2, #10
    6030:	431a      	orrs	r2, r3
    6032:	68fb      	ldr	r3, [r7, #12]
    6034:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    6036:	687b      	ldr	r3, [r7, #4]
    6038:	0018      	movs	r0, r3
    603a:	4b0e      	ldr	r3, [pc, #56]	; (6074 <_i2c_master_read_packet+0x270>)
    603c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    603e:	683b      	ldr	r3, [r7, #0]
    6040:	685a      	ldr	r2, [r3, #4]
    6042:	2312      	movs	r3, #18
    6044:	18fb      	adds	r3, r7, r3
    6046:	881b      	ldrh	r3, [r3, #0]
    6048:	18d3      	adds	r3, r2, r3
    604a:	68fa      	ldr	r2, [r7, #12]
    604c:	2128      	movs	r1, #40	; 0x28
    604e:	5c52      	ldrb	r2, [r2, r1]
    6050:	b2d2      	uxtb	r2, r2
    6052:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    6054:	2317      	movs	r3, #23
    6056:	18fb      	adds	r3, r7, r3
    6058:	781b      	ldrb	r3, [r3, #0]
}
    605a:	0018      	movs	r0, r3
    605c:	46bd      	mov	sp, r7
    605e:	b007      	add	sp, #28
    6060:	bd90      	pop	{r4, r7, pc}
    6062:	46c0      	nop			; (mov r8, r8)
    6064:	00005db1 	.word	0x00005db1
    6068:	fffbffff 	.word	0xfffbffff
    606c:	00005d53 	.word	0x00005d53
    6070:	00005cf5 	.word	0x00005cf5
    6074:	00005779 	.word	0x00005779

00006078 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6078:	b580      	push	{r7, lr}
    607a:	b082      	sub	sp, #8
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    6080:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	2201      	movs	r2, #1
    6086:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	2201      	movs	r2, #1
    608c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    608e:	683a      	ldr	r2, [r7, #0]
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	0011      	movs	r1, r2
    6094:	0018      	movs	r0, r3
    6096:	4b03      	ldr	r3, [pc, #12]	; (60a4 <i2c_master_read_packet_wait+0x2c>)
    6098:	4798      	blx	r3
    609a:	0003      	movs	r3, r0
}
    609c:	0018      	movs	r0, r3
    609e:	46bd      	mov	sp, r7
    60a0:	b002      	add	sp, #8
    60a2:	bd80      	pop	{r7, pc}
    60a4:	00005e05 	.word	0x00005e05

000060a8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    60a8:	b590      	push	{r4, r7, lr}
    60aa:	b087      	sub	sp, #28
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    60b8:	2314      	movs	r3, #20
    60ba:	18fb      	adds	r3, r7, r3
    60bc:	683a      	ldr	r2, [r7, #0]
    60be:	8852      	ldrh	r2, [r2, #2]
    60c0:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    60c2:	687b      	ldr	r3, [r7, #4]
    60c4:	0018      	movs	r0, r3
    60c6:	4b51      	ldr	r3, [pc, #324]	; (620c <_i2c_master_write_packet+0x164>)
    60c8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    60ca:	683b      	ldr	r3, [r7, #0]
    60cc:	7a5b      	ldrb	r3, [r3, #9]
    60ce:	2b00      	cmp	r3, #0
    60d0:	d006      	beq.n	60e0 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    60d2:	683b      	ldr	r3, [r7, #0]
    60d4:	7a9a      	ldrb	r2, [r3, #10]
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	0011      	movs	r1, r2
    60da:	0018      	movs	r0, r3
    60dc:	4b4c      	ldr	r3, [pc, #304]	; (6210 <_i2c_master_write_packet+0x168>)
    60de:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    60e0:	68fb      	ldr	r3, [r7, #12]
    60e2:	685b      	ldr	r3, [r3, #4]
    60e4:	4a4b      	ldr	r2, [pc, #300]	; (6214 <_i2c_master_write_packet+0x16c>)
    60e6:	401a      	ands	r2, r3
    60e8:	68fb      	ldr	r3, [r7, #12]
    60ea:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    60ec:	683b      	ldr	r3, [r7, #0]
    60ee:	7a1b      	ldrb	r3, [r3, #8]
    60f0:	2b00      	cmp	r3, #0
    60f2:	d00d      	beq.n	6110 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    60f4:	683b      	ldr	r3, [r7, #0]
    60f6:	881b      	ldrh	r3, [r3, #0]
    60f8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    60fa:	683b      	ldr	r3, [r7, #0]
    60fc:	7a5b      	ldrb	r3, [r3, #9]
    60fe:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6100:	4313      	orrs	r3, r2
    6102:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6104:	2380      	movs	r3, #128	; 0x80
    6106:	021b      	lsls	r3, r3, #8
    6108:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    610a:	68fb      	ldr	r3, [r7, #12]
    610c:	625a      	str	r2, [r3, #36]	; 0x24
    610e:	e009      	b.n	6124 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6110:	683b      	ldr	r3, [r7, #0]
    6112:	881b      	ldrh	r3, [r3, #0]
    6114:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6116:	683b      	ldr	r3, [r7, #0]
    6118:	7a5b      	ldrb	r3, [r3, #9]
    611a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    611c:	4313      	orrs	r3, r2
    611e:	001a      	movs	r2, r3
    6120:	68fb      	ldr	r3, [r7, #12]
    6122:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6124:	2317      	movs	r3, #23
    6126:	18fc      	adds	r4, r7, r3
    6128:	687b      	ldr	r3, [r7, #4]
    612a:	0018      	movs	r0, r3
    612c:	4b3a      	ldr	r3, [pc, #232]	; (6218 <_i2c_master_write_packet+0x170>)
    612e:	4798      	blx	r3
    6130:	0003      	movs	r3, r0
    6132:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6134:	2317      	movs	r3, #23
    6136:	18fb      	adds	r3, r7, r3
    6138:	781b      	ldrb	r3, [r3, #0]
    613a:	2b00      	cmp	r3, #0
    613c:	d107      	bne.n	614e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    613e:	2317      	movs	r3, #23
    6140:	18fc      	adds	r4, r7, r3
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	0018      	movs	r0, r3
    6146:	4b35      	ldr	r3, [pc, #212]	; (621c <_i2c_master_write_packet+0x174>)
    6148:	4798      	blx	r3
    614a:	0003      	movs	r3, r0
    614c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    614e:	2317      	movs	r3, #23
    6150:	18fb      	adds	r3, r7, r3
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	2b00      	cmp	r3, #0
    6156:	d152      	bne.n	61fe <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    6158:	2312      	movs	r3, #18
    615a:	18fb      	adds	r3, r7, r3
    615c:	2200      	movs	r2, #0
    615e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    6160:	e033      	b.n	61ca <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6162:	68fb      	ldr	r3, [r7, #12]
    6164:	8b5b      	ldrh	r3, [r3, #26]
    6166:	b29b      	uxth	r3, r3
    6168:	001a      	movs	r2, r3
    616a:	2320      	movs	r3, #32
    616c:	4013      	ands	r3, r2
    616e:	d101      	bne.n	6174 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    6170:	2341      	movs	r3, #65	; 0x41
    6172:	e047      	b.n	6204 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	0018      	movs	r0, r3
    6178:	4b24      	ldr	r3, [pc, #144]	; (620c <_i2c_master_write_packet+0x164>)
    617a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    617c:	683b      	ldr	r3, [r7, #0]
    617e:	685a      	ldr	r2, [r3, #4]
    6180:	2312      	movs	r3, #18
    6182:	18fb      	adds	r3, r7, r3
    6184:	881b      	ldrh	r3, [r3, #0]
    6186:	2112      	movs	r1, #18
    6188:	1879      	adds	r1, r7, r1
    618a:	1c58      	adds	r0, r3, #1
    618c:	8008      	strh	r0, [r1, #0]
    618e:	18d3      	adds	r3, r2, r3
    6190:	7819      	ldrb	r1, [r3, #0]
    6192:	68fb      	ldr	r3, [r7, #12]
    6194:	2228      	movs	r2, #40	; 0x28
    6196:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    6198:	2317      	movs	r3, #23
    619a:	18fc      	adds	r4, r7, r3
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	0018      	movs	r0, r3
    61a0:	4b1d      	ldr	r3, [pc, #116]	; (6218 <_i2c_master_write_packet+0x170>)
    61a2:	4798      	blx	r3
    61a4:	0003      	movs	r3, r0
    61a6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    61a8:	2317      	movs	r3, #23
    61aa:	18fb      	adds	r3, r7, r3
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d115      	bne.n	61de <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    61b2:	68fb      	ldr	r3, [r7, #12]
    61b4:	8b5b      	ldrh	r3, [r3, #26]
    61b6:	b29b      	uxth	r3, r3
    61b8:	001a      	movs	r2, r3
    61ba:	2304      	movs	r3, #4
    61bc:	4013      	ands	r3, r2
    61be:	d004      	beq.n	61ca <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    61c0:	2317      	movs	r3, #23
    61c2:	18fb      	adds	r3, r7, r3
    61c4:	221e      	movs	r2, #30
    61c6:	701a      	strb	r2, [r3, #0]
				break;
    61c8:	e00a      	b.n	61e0 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    61ca:	2314      	movs	r3, #20
    61cc:	18fb      	adds	r3, r7, r3
    61ce:	881b      	ldrh	r3, [r3, #0]
    61d0:	2214      	movs	r2, #20
    61d2:	18ba      	adds	r2, r7, r2
    61d4:	1e59      	subs	r1, r3, #1
    61d6:	8011      	strh	r1, [r2, #0]
    61d8:	2b00      	cmp	r3, #0
    61da:	d1c2      	bne.n	6162 <_i2c_master_write_packet+0xba>
    61dc:	e000      	b.n	61e0 <_i2c_master_write_packet+0x138>
				break;
    61de:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	7a9b      	ldrb	r3, [r3, #10]
    61e4:	2b00      	cmp	r3, #0
    61e6:	d00a      	beq.n	61fe <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	0018      	movs	r0, r3
    61ec:	4b07      	ldr	r3, [pc, #28]	; (620c <_i2c_master_write_packet+0x164>)
    61ee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    61f0:	68fb      	ldr	r3, [r7, #12]
    61f2:	685b      	ldr	r3, [r3, #4]
    61f4:	22c0      	movs	r2, #192	; 0xc0
    61f6:	0292      	lsls	r2, r2, #10
    61f8:	431a      	orrs	r2, r3
    61fa:	68fb      	ldr	r3, [r7, #12]
    61fc:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    61fe:	2317      	movs	r3, #23
    6200:	18fb      	adds	r3, r7, r3
    6202:	781b      	ldrb	r3, [r3, #0]
}
    6204:	0018      	movs	r0, r3
    6206:	46bd      	mov	sp, r7
    6208:	b007      	add	sp, #28
    620a:	bd90      	pop	{r4, r7, pc}
    620c:	00005779 	.word	0x00005779
    6210:	00005db1 	.word	0x00005db1
    6214:	fffbffff 	.word	0xfffbffff
    6218:	00005d53 	.word	0x00005d53
    621c:	00005cf5 	.word	0x00005cf5

00006220 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6220:	b580      	push	{r7, lr}
    6222:	b082      	sub	sp, #8
    6224:	af00      	add	r7, sp, #0
    6226:	6078      	str	r0, [r7, #4]
    6228:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	2201      	movs	r2, #1
    622e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	2201      	movs	r2, #1
    6234:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    6236:	683a      	ldr	r2, [r7, #0]
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	0011      	movs	r1, r2
    623c:	0018      	movs	r0, r3
    623e:	4b03      	ldr	r3, [pc, #12]	; (624c <i2c_master_write_packet_wait+0x2c>)
    6240:	4798      	blx	r3
    6242:	0003      	movs	r3, r0
}
    6244:	0018      	movs	r0, r3
    6246:	46bd      	mov	sp, r7
    6248:	b002      	add	sp, #8
    624a:	bd80      	pop	{r7, pc}
    624c:	000060a9 	.word	0x000060a9

00006250 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6250:	b580      	push	{r7, lr}
    6252:	b082      	sub	sp, #8
    6254:	af00      	add	r7, sp, #0
    6256:	6078      	str	r0, [r7, #4]
    6258:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    625a:	687b      	ldr	r3, [r7, #4]
    625c:	2200      	movs	r2, #0
    625e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	2201      	movs	r2, #1
    6264:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    6266:	683a      	ldr	r2, [r7, #0]
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	0011      	movs	r1, r2
    626c:	0018      	movs	r0, r3
    626e:	4b03      	ldr	r3, [pc, #12]	; (627c <i2c_master_write_packet_wait_no_stop+0x2c>)
    6270:	4798      	blx	r3
    6272:	0003      	movs	r3, r0
}
    6274:	0018      	movs	r0, r3
    6276:	46bd      	mov	sp, r7
    6278:	b002      	add	sp, #8
    627a:	bd80      	pop	{r7, pc}
    627c:	000060a9 	.word	0x000060a9

00006280 <system_pinmux_get_group_from_gpio_pin>:
{
    6280:	b580      	push	{r7, lr}
    6282:	b084      	sub	sp, #16
    6284:	af00      	add	r7, sp, #0
    6286:	0002      	movs	r2, r0
    6288:	1dfb      	adds	r3, r7, #7
    628a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    628c:	230f      	movs	r3, #15
    628e:	18fb      	adds	r3, r7, r3
    6290:	1dfa      	adds	r2, r7, #7
    6292:	7812      	ldrb	r2, [r2, #0]
    6294:	09d2      	lsrs	r2, r2, #7
    6296:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6298:	230e      	movs	r3, #14
    629a:	18fb      	adds	r3, r7, r3
    629c:	1dfa      	adds	r2, r7, #7
    629e:	7812      	ldrb	r2, [r2, #0]
    62a0:	0952      	lsrs	r2, r2, #5
    62a2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    62a4:	4b0d      	ldr	r3, [pc, #52]	; (62dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    62a6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    62a8:	230f      	movs	r3, #15
    62aa:	18fb      	adds	r3, r7, r3
    62ac:	781b      	ldrb	r3, [r3, #0]
    62ae:	2b00      	cmp	r3, #0
    62b0:	d10f      	bne.n	62d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    62b2:	230f      	movs	r3, #15
    62b4:	18fb      	adds	r3, r7, r3
    62b6:	781b      	ldrb	r3, [r3, #0]
    62b8:	009b      	lsls	r3, r3, #2
    62ba:	2210      	movs	r2, #16
    62bc:	4694      	mov	ip, r2
    62be:	44bc      	add	ip, r7
    62c0:	4463      	add	r3, ip
    62c2:	3b08      	subs	r3, #8
    62c4:	681a      	ldr	r2, [r3, #0]
    62c6:	230e      	movs	r3, #14
    62c8:	18fb      	adds	r3, r7, r3
    62ca:	781b      	ldrb	r3, [r3, #0]
    62cc:	01db      	lsls	r3, r3, #7
    62ce:	18d3      	adds	r3, r2, r3
    62d0:	e000      	b.n	62d4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    62d2:	2300      	movs	r3, #0
}
    62d4:	0018      	movs	r0, r3
    62d6:	46bd      	mov	sp, r7
    62d8:	b004      	add	sp, #16
    62da:	bd80      	pop	{r7, pc}
    62dc:	41004400 	.word	0x41004400

000062e0 <port_get_group_from_gpio_pin>:
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b082      	sub	sp, #8
    62e4:	af00      	add	r7, sp, #0
    62e6:	0002      	movs	r2, r0
    62e8:	1dfb      	adds	r3, r7, #7
    62ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    62ec:	1dfb      	adds	r3, r7, #7
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	0018      	movs	r0, r3
    62f2:	4b03      	ldr	r3, [pc, #12]	; (6300 <port_get_group_from_gpio_pin+0x20>)
    62f4:	4798      	blx	r3
    62f6:	0003      	movs	r3, r0
}
    62f8:	0018      	movs	r0, r3
    62fa:	46bd      	mov	sp, r7
    62fc:	b002      	add	sp, #8
    62fe:	bd80      	pop	{r7, pc}
    6300:	00006281 	.word	0x00006281

00006304 <port_get_config_defaults>:
{
    6304:	b580      	push	{r7, lr}
    6306:	b082      	sub	sp, #8
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	2200      	movs	r2, #0
    6310:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	2201      	movs	r2, #1
    6316:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	2200      	movs	r2, #0
    631c:	709a      	strb	r2, [r3, #2]
}
    631e:	46c0      	nop			; (mov r8, r8)
    6320:	46bd      	mov	sp, r7
    6322:	b002      	add	sp, #8
    6324:	bd80      	pop	{r7, pc}
	...

00006328 <port_pin_set_output_level>:
{
    6328:	b580      	push	{r7, lr}
    632a:	b084      	sub	sp, #16
    632c:	af00      	add	r7, sp, #0
    632e:	0002      	movs	r2, r0
    6330:	1dfb      	adds	r3, r7, #7
    6332:	701a      	strb	r2, [r3, #0]
    6334:	1dbb      	adds	r3, r7, #6
    6336:	1c0a      	adds	r2, r1, #0
    6338:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    633a:	1dfb      	adds	r3, r7, #7
    633c:	781b      	ldrb	r3, [r3, #0]
    633e:	0018      	movs	r0, r3
    6340:	4b0d      	ldr	r3, [pc, #52]	; (6378 <port_pin_set_output_level+0x50>)
    6342:	4798      	blx	r3
    6344:	0003      	movs	r3, r0
    6346:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6348:	1dfb      	adds	r3, r7, #7
    634a:	781b      	ldrb	r3, [r3, #0]
    634c:	221f      	movs	r2, #31
    634e:	4013      	ands	r3, r2
    6350:	2201      	movs	r2, #1
    6352:	409a      	lsls	r2, r3
    6354:	0013      	movs	r3, r2
    6356:	60bb      	str	r3, [r7, #8]
	if (level) {
    6358:	1dbb      	adds	r3, r7, #6
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	2b00      	cmp	r3, #0
    635e:	d003      	beq.n	6368 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6360:	68fb      	ldr	r3, [r7, #12]
    6362:	68ba      	ldr	r2, [r7, #8]
    6364:	619a      	str	r2, [r3, #24]
}
    6366:	e002      	b.n	636e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6368:	68fb      	ldr	r3, [r7, #12]
    636a:	68ba      	ldr	r2, [r7, #8]
    636c:	615a      	str	r2, [r3, #20]
}
    636e:	46c0      	nop			; (mov r8, r8)
    6370:	46bd      	mov	sp, r7
    6372:	b004      	add	sp, #16
    6374:	bd80      	pop	{r7, pc}
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	000062e1 	.word	0x000062e1

0000637c <system_interrupt_enable_global>:
{
    637c:	b580      	push	{r7, lr}
    637e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    6380:	4b04      	ldr	r3, [pc, #16]	; (6394 <system_interrupt_enable_global+0x18>)
    6382:	2201      	movs	r2, #1
    6384:	701a      	strb	r2, [r3, #0]
    6386:	f3bf 8f5f 	dmb	sy
    638a:	b662      	cpsie	i
}
    638c:	46c0      	nop			; (mov r8, r8)
    638e:	46bd      	mov	sp, r7
    6390:	bd80      	pop	{r7, pc}
    6392:	46c0      	nop			; (mov r8, r8)
    6394:	20000000 	.word	0x20000000

00006398 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    6398:	b580      	push	{r7, lr}
    639a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    639c:	4b04      	ldr	r3, [pc, #16]	; (63b0 <chip_isr+0x18>)
    639e:	681b      	ldr	r3, [r3, #0]
    63a0:	2b00      	cmp	r3, #0
    63a2:	d002      	beq.n	63aa <chip_isr+0x12>
		gpfIsr();
    63a4:	4b02      	ldr	r3, [pc, #8]	; (63b0 <chip_isr+0x18>)
    63a6:	681b      	ldr	r3, [r3, #0]
    63a8:	4798      	blx	r3
	}
}
    63aa:	46c0      	nop			; (mov r8, r8)
    63ac:	46bd      	mov	sp, r7
    63ae:	bd80      	pop	{r7, pc}
    63b0:	2000053c 	.word	0x2000053c

000063b4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    63b4:	b580      	push	{r7, lr}
    63b6:	b082      	sub	sp, #8
    63b8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    63ba:	1d3b      	adds	r3, r7, #4
    63bc:	0018      	movs	r0, r3
    63be:	4b10      	ldr	r3, [pc, #64]	; (6400 <init_chip_pins+0x4c>)
    63c0:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    63c2:	1d3b      	adds	r3, r7, #4
    63c4:	2201      	movs	r2, #1
    63c6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    63c8:	1d3b      	adds	r3, r7, #4
    63ca:	0019      	movs	r1, r3
    63cc:	2026      	movs	r0, #38	; 0x26
    63ce:	4b0d      	ldr	r3, [pc, #52]	; (6404 <init_chip_pins+0x50>)
    63d0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    63d2:	1d3b      	adds	r3, r7, #4
    63d4:	0019      	movs	r1, r3
    63d6:	2025      	movs	r0, #37	; 0x25
    63d8:	4b0a      	ldr	r3, [pc, #40]	; (6404 <init_chip_pins+0x50>)
    63da:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    63dc:	1d3b      	adds	r3, r7, #4
    63de:	0019      	movs	r1, r3
    63e0:	2027      	movs	r0, #39	; 0x27
    63e2:	4b08      	ldr	r3, [pc, #32]	; (6404 <init_chip_pins+0x50>)
    63e4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    63e6:	2100      	movs	r1, #0
    63e8:	2025      	movs	r0, #37	; 0x25
    63ea:	4b07      	ldr	r3, [pc, #28]	; (6408 <init_chip_pins+0x54>)
    63ec:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    63ee:	2100      	movs	r1, #0
    63f0:	2026      	movs	r0, #38	; 0x26
    63f2:	4b05      	ldr	r3, [pc, #20]	; (6408 <init_chip_pins+0x54>)
    63f4:	4798      	blx	r3
}
    63f6:	46c0      	nop			; (mov r8, r8)
    63f8:	46bd      	mov	sp, r7
    63fa:	b002      	add	sp, #8
    63fc:	bd80      	pop	{r7, pc}
    63fe:	46c0      	nop			; (mov r8, r8)
    6400:	00006305 	.word	0x00006305
    6404:	000001d1 	.word	0x000001d1
    6408:	00006329 	.word	0x00006329

0000640c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    640c:	b580      	push	{r7, lr}
    640e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    6410:	4b0c      	ldr	r3, [pc, #48]	; (6444 <nm_bsp_init+0x38>)
    6412:	2200      	movs	r2, #0
    6414:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    6416:	4b0c      	ldr	r3, [pc, #48]	; (6448 <nm_bsp_init+0x3c>)
    6418:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    641a:	4b0c      	ldr	r3, [pc, #48]	; (644c <nm_bsp_init+0x40>)
    641c:	681b      	ldr	r3, [r3, #0]
    641e:	2201      	movs	r2, #1
    6420:	4013      	ands	r3, r2
    6422:	d004      	beq.n	642e <nm_bsp_init+0x22>
    6424:	4b09      	ldr	r3, [pc, #36]	; (644c <nm_bsp_init+0x40>)
    6426:	681b      	ldr	r3, [r3, #0]
    6428:	2202      	movs	r2, #2
    642a:	4013      	ands	r3, r2
    642c:	d101      	bne.n	6432 <nm_bsp_init+0x26>
	    delay_init();
    642e:	4b08      	ldr	r3, [pc, #32]	; (6450 <nm_bsp_init+0x44>)
    6430:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    6432:	4b08      	ldr	r3, [pc, #32]	; (6454 <nm_bsp_init+0x48>)
    6434:	4798      	blx	r3

	system_interrupt_enable_global();
    6436:	4b08      	ldr	r3, [pc, #32]	; (6458 <nm_bsp_init+0x4c>)
    6438:	4798      	blx	r3

	return M2M_SUCCESS;
    643a:	2300      	movs	r3, #0
}
    643c:	0018      	movs	r0, r3
    643e:	46bd      	mov	sp, r7
    6440:	bd80      	pop	{r7, pc}
    6442:	46c0      	nop			; (mov r8, r8)
    6444:	2000053c 	.word	0x2000053c
    6448:	000063b5 	.word	0x000063b5
    644c:	e000e010 	.word	0xe000e010
    6450:	000004b1 	.word	0x000004b1
    6454:	0000645d 	.word	0x0000645d
    6458:	0000637d 	.word	0x0000637d

0000645c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    645c:	b580      	push	{r7, lr}
    645e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    6460:	2100      	movs	r1, #0
    6462:	2025      	movs	r0, #37	; 0x25
    6464:	4b0c      	ldr	r3, [pc, #48]	; (6498 <nm_bsp_reset+0x3c>)
    6466:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    6468:	2100      	movs	r1, #0
    646a:	2026      	movs	r0, #38	; 0x26
    646c:	4b0a      	ldr	r3, [pc, #40]	; (6498 <nm_bsp_reset+0x3c>)
    646e:	4798      	blx	r3
	nm_bsp_sleep(100);
    6470:	2064      	movs	r0, #100	; 0x64
    6472:	4b0a      	ldr	r3, [pc, #40]	; (649c <nm_bsp_reset+0x40>)
    6474:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    6476:	2101      	movs	r1, #1
    6478:	2025      	movs	r0, #37	; 0x25
    647a:	4b07      	ldr	r3, [pc, #28]	; (6498 <nm_bsp_reset+0x3c>)
    647c:	4798      	blx	r3
	nm_bsp_sleep(100);
    647e:	2064      	movs	r0, #100	; 0x64
    6480:	4b06      	ldr	r3, [pc, #24]	; (649c <nm_bsp_reset+0x40>)
    6482:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    6484:	2101      	movs	r1, #1
    6486:	2026      	movs	r0, #38	; 0x26
    6488:	4b03      	ldr	r3, [pc, #12]	; (6498 <nm_bsp_reset+0x3c>)
    648a:	4798      	blx	r3
	nm_bsp_sleep(100);
    648c:	2064      	movs	r0, #100	; 0x64
    648e:	4b03      	ldr	r3, [pc, #12]	; (649c <nm_bsp_reset+0x40>)
    6490:	4798      	blx	r3
}
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	46bd      	mov	sp, r7
    6496:	bd80      	pop	{r7, pc}
    6498:	00006329 	.word	0x00006329
    649c:	000064a1 	.word	0x000064a1

000064a0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    64a0:	b580      	push	{r7, lr}
    64a2:	b082      	sub	sp, #8
    64a4:	af00      	add	r7, sp, #0
    64a6:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    64a8:	e002      	b.n	64b0 <nm_bsp_sleep+0x10>
		delay_ms(1);
    64aa:	2001      	movs	r0, #1
    64ac:	4b05      	ldr	r3, [pc, #20]	; (64c4 <nm_bsp_sleep+0x24>)
    64ae:	4798      	blx	r3
	while (u32TimeMsec--) {
    64b0:	687b      	ldr	r3, [r7, #4]
    64b2:	1e5a      	subs	r2, r3, #1
    64b4:	607a      	str	r2, [r7, #4]
    64b6:	2b00      	cmp	r3, #0
    64b8:	d1f7      	bne.n	64aa <nm_bsp_sleep+0xa>
	}
}
    64ba:	46c0      	nop			; (mov r8, r8)
    64bc:	46bd      	mov	sp, r7
    64be:	b002      	add	sp, #8
    64c0:	bd80      	pop	{r7, pc}
    64c2:	46c0      	nop			; (mov r8, r8)
    64c4:	00000539 	.word	0x00000539

000064c8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    64c8:	b580      	push	{r7, lr}
    64ca:	b086      	sub	sp, #24
    64cc:	af00      	add	r7, sp, #0
    64ce:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    64d0:	4b15      	ldr	r3, [pc, #84]	; (6528 <nm_bsp_register_isr+0x60>)
    64d2:	687a      	ldr	r2, [r7, #4]
    64d4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    64d6:	230c      	movs	r3, #12
    64d8:	18fb      	adds	r3, r7, r3
    64da:	0018      	movs	r0, r3
    64dc:	4b13      	ldr	r3, [pc, #76]	; (652c <nm_bsp_register_isr+0x64>)
    64de:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    64e0:	230c      	movs	r3, #12
    64e2:	18fb      	adds	r3, r7, r3
    64e4:	2224      	movs	r2, #36	; 0x24
    64e6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    64e8:	230c      	movs	r3, #12
    64ea:	18fb      	adds	r3, r7, r3
    64ec:	2200      	movs	r2, #0
    64ee:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    64f0:	230c      	movs	r3, #12
    64f2:	18fb      	adds	r3, r7, r3
    64f4:	2201      	movs	r2, #1
    64f6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    64f8:	230c      	movs	r3, #12
    64fa:	18fb      	adds	r3, r7, r3
    64fc:	2202      	movs	r2, #2
    64fe:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    6500:	230c      	movs	r3, #12
    6502:	18fb      	adds	r3, r7, r3
    6504:	0019      	movs	r1, r3
    6506:	2004      	movs	r0, #4
    6508:	4b09      	ldr	r3, [pc, #36]	; (6530 <nm_bsp_register_isr+0x68>)
    650a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    650c:	4b09      	ldr	r3, [pc, #36]	; (6534 <nm_bsp_register_isr+0x6c>)
    650e:	2200      	movs	r2, #0
    6510:	2104      	movs	r1, #4
    6512:	0018      	movs	r0, r3
    6514:	4b08      	ldr	r3, [pc, #32]	; (6538 <nm_bsp_register_isr+0x70>)
    6516:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    6518:	2100      	movs	r1, #0
    651a:	2004      	movs	r0, #4
    651c:	4b07      	ldr	r3, [pc, #28]	; (653c <nm_bsp_register_isr+0x74>)
    651e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    6520:	46c0      	nop			; (mov r8, r8)
    6522:	46bd      	mov	sp, r7
    6524:	b006      	add	sp, #24
    6526:	bd80      	pop	{r7, pc}
    6528:	2000053c 	.word	0x2000053c
    652c:	0000c745 	.word	0x0000c745
    6530:	0000c779 	.word	0x0000c779
    6534:	00006399 	.word	0x00006399
    6538:	0000c345 	.word	0x0000c345
    653c:	0000c3a9 	.word	0x0000c3a9

00006540 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    6540:	b580      	push	{r7, lr}
    6542:	b082      	sub	sp, #8
    6544:	af00      	add	r7, sp, #0
    6546:	0002      	movs	r2, r0
    6548:	1dfb      	adds	r3, r7, #7
    654a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    654c:	1dfb      	adds	r3, r7, #7
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	2b00      	cmp	r3, #0
    6552:	d004      	beq.n	655e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    6554:	2100      	movs	r1, #0
    6556:	2004      	movs	r0, #4
    6558:	4b05      	ldr	r3, [pc, #20]	; (6570 <nm_bsp_interrupt_ctrl+0x30>)
    655a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    655c:	e003      	b.n	6566 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    655e:	2100      	movs	r1, #0
    6560:	2004      	movs	r0, #4
    6562:	4b04      	ldr	r3, [pc, #16]	; (6574 <nm_bsp_interrupt_ctrl+0x34>)
    6564:	4798      	blx	r3
}
    6566:	46c0      	nop			; (mov r8, r8)
    6568:	46bd      	mov	sp, r7
    656a:	b002      	add	sp, #8
    656c:	bd80      	pop	{r7, pc}
    656e:	46c0      	nop			; (mov r8, r8)
    6570:	0000c3a9 	.word	0x0000c3a9
    6574:	0000c3f1 	.word	0x0000c3f1

00006578 <system_pinmux_get_group_from_gpio_pin>:
{
    6578:	b580      	push	{r7, lr}
    657a:	b084      	sub	sp, #16
    657c:	af00      	add	r7, sp, #0
    657e:	0002      	movs	r2, r0
    6580:	1dfb      	adds	r3, r7, #7
    6582:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6584:	230f      	movs	r3, #15
    6586:	18fb      	adds	r3, r7, r3
    6588:	1dfa      	adds	r2, r7, #7
    658a:	7812      	ldrb	r2, [r2, #0]
    658c:	09d2      	lsrs	r2, r2, #7
    658e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6590:	230e      	movs	r3, #14
    6592:	18fb      	adds	r3, r7, r3
    6594:	1dfa      	adds	r2, r7, #7
    6596:	7812      	ldrb	r2, [r2, #0]
    6598:	0952      	lsrs	r2, r2, #5
    659a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    659c:	4b0d      	ldr	r3, [pc, #52]	; (65d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    659e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    65a0:	230f      	movs	r3, #15
    65a2:	18fb      	adds	r3, r7, r3
    65a4:	781b      	ldrb	r3, [r3, #0]
    65a6:	2b00      	cmp	r3, #0
    65a8:	d10f      	bne.n	65ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    65aa:	230f      	movs	r3, #15
    65ac:	18fb      	adds	r3, r7, r3
    65ae:	781b      	ldrb	r3, [r3, #0]
    65b0:	009b      	lsls	r3, r3, #2
    65b2:	2210      	movs	r2, #16
    65b4:	4694      	mov	ip, r2
    65b6:	44bc      	add	ip, r7
    65b8:	4463      	add	r3, ip
    65ba:	3b08      	subs	r3, #8
    65bc:	681a      	ldr	r2, [r3, #0]
    65be:	230e      	movs	r3, #14
    65c0:	18fb      	adds	r3, r7, r3
    65c2:	781b      	ldrb	r3, [r3, #0]
    65c4:	01db      	lsls	r3, r3, #7
    65c6:	18d3      	adds	r3, r2, r3
    65c8:	e000      	b.n	65cc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    65ca:	2300      	movs	r3, #0
}
    65cc:	0018      	movs	r0, r3
    65ce:	46bd      	mov	sp, r7
    65d0:	b004      	add	sp, #16
    65d2:	bd80      	pop	{r7, pc}
    65d4:	41004400 	.word	0x41004400

000065d8 <port_get_group_from_gpio_pin>:
{
    65d8:	b580      	push	{r7, lr}
    65da:	b082      	sub	sp, #8
    65dc:	af00      	add	r7, sp, #0
    65de:	0002      	movs	r2, r0
    65e0:	1dfb      	adds	r3, r7, #7
    65e2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    65e4:	1dfb      	adds	r3, r7, #7
    65e6:	781b      	ldrb	r3, [r3, #0]
    65e8:	0018      	movs	r0, r3
    65ea:	4b03      	ldr	r3, [pc, #12]	; (65f8 <port_get_group_from_gpio_pin+0x20>)
    65ec:	4798      	blx	r3
    65ee:	0003      	movs	r3, r0
}
    65f0:	0018      	movs	r0, r3
    65f2:	46bd      	mov	sp, r7
    65f4:	b002      	add	sp, #8
    65f6:	bd80      	pop	{r7, pc}
    65f8:	00006579 	.word	0x00006579

000065fc <port_get_config_defaults>:
{
    65fc:	b580      	push	{r7, lr}
    65fe:	b082      	sub	sp, #8
    6600:	af00      	add	r7, sp, #0
    6602:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    6604:	687b      	ldr	r3, [r7, #4]
    6606:	2200      	movs	r2, #0
    6608:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	2201      	movs	r2, #1
    660e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	2200      	movs	r2, #0
    6614:	709a      	strb	r2, [r3, #2]
}
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	46bd      	mov	sp, r7
    661a:	b002      	add	sp, #8
    661c:	bd80      	pop	{r7, pc}
	...

00006620 <port_pin_set_output_level>:
{
    6620:	b580      	push	{r7, lr}
    6622:	b084      	sub	sp, #16
    6624:	af00      	add	r7, sp, #0
    6626:	0002      	movs	r2, r0
    6628:	1dfb      	adds	r3, r7, #7
    662a:	701a      	strb	r2, [r3, #0]
    662c:	1dbb      	adds	r3, r7, #6
    662e:	1c0a      	adds	r2, r1, #0
    6630:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6632:	1dfb      	adds	r3, r7, #7
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	0018      	movs	r0, r3
    6638:	4b0d      	ldr	r3, [pc, #52]	; (6670 <port_pin_set_output_level+0x50>)
    663a:	4798      	blx	r3
    663c:	0003      	movs	r3, r0
    663e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6640:	1dfb      	adds	r3, r7, #7
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	221f      	movs	r2, #31
    6646:	4013      	ands	r3, r2
    6648:	2201      	movs	r2, #1
    664a:	409a      	lsls	r2, r3
    664c:	0013      	movs	r3, r2
    664e:	60bb      	str	r3, [r7, #8]
	if (level) {
    6650:	1dbb      	adds	r3, r7, #6
    6652:	781b      	ldrb	r3, [r3, #0]
    6654:	2b00      	cmp	r3, #0
    6656:	d003      	beq.n	6660 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6658:	68fb      	ldr	r3, [r7, #12]
    665a:	68ba      	ldr	r2, [r7, #8]
    665c:	619a      	str	r2, [r3, #24]
}
    665e:	e002      	b.n	6666 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6660:	68fb      	ldr	r3, [r7, #12]
    6662:	68ba      	ldr	r2, [r7, #8]
    6664:	615a      	str	r2, [r3, #20]
}
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	46bd      	mov	sp, r7
    666a:	b004      	add	sp, #16
    666c:	bd80      	pop	{r7, pc}
    666e:	46c0      	nop			; (mov r8, r8)
    6670:	000065d9 	.word	0x000065d9

00006674 <system_interrupt_enable>:
{
    6674:	b580      	push	{r7, lr}
    6676:	b082      	sub	sp, #8
    6678:	af00      	add	r7, sp, #0
    667a:	0002      	movs	r2, r0
    667c:	1dfb      	adds	r3, r7, #7
    667e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6680:	4b06      	ldr	r3, [pc, #24]	; (669c <system_interrupt_enable+0x28>)
    6682:	1dfa      	adds	r2, r7, #7
    6684:	7812      	ldrb	r2, [r2, #0]
    6686:	0011      	movs	r1, r2
    6688:	221f      	movs	r2, #31
    668a:	400a      	ands	r2, r1
    668c:	2101      	movs	r1, #1
    668e:	4091      	lsls	r1, r2
    6690:	000a      	movs	r2, r1
    6692:	601a      	str	r2, [r3, #0]
}
    6694:	46c0      	nop			; (mov r8, r8)
    6696:	46bd      	mov	sp, r7
    6698:	b002      	add	sp, #8
    669a:	bd80      	pop	{r7, pc}
    669c:	e000e100 	.word	0xe000e100

000066a0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    66a0:	b580      	push	{r7, lr}
    66a2:	b082      	sub	sp, #8
    66a4:	af00      	add	r7, sp, #0
    66a6:	0002      	movs	r2, r0
    66a8:	1dfb      	adds	r3, r7, #7
    66aa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    66ac:	4a07      	ldr	r2, [pc, #28]	; (66cc <system_interrupt_disable+0x2c>)
    66ae:	1dfb      	adds	r3, r7, #7
    66b0:	781b      	ldrb	r3, [r3, #0]
    66b2:	0019      	movs	r1, r3
    66b4:	231f      	movs	r3, #31
    66b6:	400b      	ands	r3, r1
    66b8:	2101      	movs	r1, #1
    66ba:	4099      	lsls	r1, r3
    66bc:	000b      	movs	r3, r1
    66be:	0019      	movs	r1, r3
    66c0:	2380      	movs	r3, #128	; 0x80
    66c2:	50d1      	str	r1, [r2, r3]
}
    66c4:	46c0      	nop			; (mov r8, r8)
    66c6:	46bd      	mov	sp, r7
    66c8:	b002      	add	sp, #8
    66ca:	bd80      	pop	{r7, pc}
    66cc:	e000e100 	.word	0xe000e100

000066d0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b084      	sub	sp, #16
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    66d8:	687b      	ldr	r3, [r7, #4]
    66da:	681b      	ldr	r3, [r3, #0]
    66dc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    66de:	68fb      	ldr	r3, [r7, #12]
    66e0:	69db      	ldr	r3, [r3, #28]
    66e2:	1e5a      	subs	r2, r3, #1
    66e4:	4193      	sbcs	r3, r2
    66e6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    66e8:	0018      	movs	r0, r3
    66ea:	46bd      	mov	sp, r7
    66ec:	b004      	add	sp, #16
    66ee:	bd80      	pop	{r7, pc}

000066f0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    66f0:	b580      	push	{r7, lr}
    66f2:	b082      	sub	sp, #8
    66f4:	af00      	add	r7, sp, #0
    66f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    66f8:	687b      	ldr	r3, [r7, #4]
    66fa:	2201      	movs	r2, #1
    66fc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	2200      	movs	r2, #0
    6702:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	2200      	movs	r2, #0
    6708:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	22c0      	movs	r2, #192	; 0xc0
    670e:	0392      	lsls	r2, r2, #14
    6710:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6712:	687b      	ldr	r3, [r7, #4]
    6714:	2200      	movs	r2, #0
    6716:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    6718:	687b      	ldr	r3, [r7, #4]
    671a:	2200      	movs	r2, #0
    671c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	2201      	movs	r2, #1
    6722:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    6724:	687b      	ldr	r3, [r7, #4]
    6726:	2201      	movs	r2, #1
    6728:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	2200      	movs	r2, #0
    672e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	2224      	movs	r2, #36	; 0x24
    6734:	2100      	movs	r1, #0
    6736:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	3318      	adds	r3, #24
    673c:	220c      	movs	r2, #12
    673e:	2100      	movs	r1, #0
    6740:	0018      	movs	r0, r3
    6742:	4b0a      	ldr	r3, [pc, #40]	; (676c <spi_get_config_defaults+0x7c>)
    6744:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    6746:	687b      	ldr	r3, [r7, #4]
    6748:	4a09      	ldr	r2, [pc, #36]	; (6770 <spi_get_config_defaults+0x80>)
    674a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	2200      	movs	r2, #0
    6750:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	2200      	movs	r2, #0
    6756:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	2200      	movs	r2, #0
    675c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    675e:	687b      	ldr	r3, [r7, #4]
    6760:	2200      	movs	r2, #0
    6762:	635a      	str	r2, [r3, #52]	; 0x34

};
    6764:	46c0      	nop			; (mov r8, r8)
    6766:	46bd      	mov	sp, r7
    6768:	b002      	add	sp, #8
    676a:	bd80      	pop	{r7, pc}
    676c:	0001c21b 	.word	0x0001c21b
    6770:	000186a0 	.word	0x000186a0

00006774 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    6774:	b580      	push	{r7, lr}
    6776:	b082      	sub	sp, #8
    6778:	af00      	add	r7, sp, #0
    677a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    677c:	687b      	ldr	r3, [r7, #4]
    677e:	220a      	movs	r2, #10
    6780:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	2200      	movs	r2, #0
    6786:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	2200      	movs	r2, #0
    678c:	709a      	strb	r2, [r3, #2]
}
    678e:	46c0      	nop			; (mov r8, r8)
    6790:	46bd      	mov	sp, r7
    6792:	b002      	add	sp, #8
    6794:	bd80      	pop	{r7, pc}
	...

00006798 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    6798:	b580      	push	{r7, lr}
    679a:	b084      	sub	sp, #16
    679c:	af00      	add	r7, sp, #0
    679e:	6078      	str	r0, [r7, #4]
    67a0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    67a2:	683b      	ldr	r3, [r7, #0]
    67a4:	781a      	ldrb	r2, [r3, #0]
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    67aa:	683b      	ldr	r3, [r7, #0]
    67ac:	785a      	ldrb	r2, [r3, #1]
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    67b2:	683b      	ldr	r3, [r7, #0]
    67b4:	789a      	ldrb	r2, [r3, #2]
    67b6:	687b      	ldr	r3, [r7, #4]
    67b8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    67ba:	230c      	movs	r3, #12
    67bc:	18fb      	adds	r3, r7, r3
    67be:	0018      	movs	r0, r3
    67c0:	4b0b      	ldr	r3, [pc, #44]	; (67f0 <spi_attach_slave+0x58>)
    67c2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    67c4:	230c      	movs	r3, #12
    67c6:	18fb      	adds	r3, r7, r3
    67c8:	2201      	movs	r2, #1
    67ca:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    67cc:	687b      	ldr	r3, [r7, #4]
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	220c      	movs	r2, #12
    67d2:	18ba      	adds	r2, r7, r2
    67d4:	0011      	movs	r1, r2
    67d6:	0018      	movs	r0, r3
    67d8:	4b06      	ldr	r3, [pc, #24]	; (67f4 <spi_attach_slave+0x5c>)
    67da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    67dc:	687b      	ldr	r3, [r7, #4]
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	2101      	movs	r1, #1
    67e2:	0018      	movs	r0, r3
    67e4:	4b04      	ldr	r3, [pc, #16]	; (67f8 <spi_attach_slave+0x60>)
    67e6:	4798      	blx	r3
}
    67e8:	46c0      	nop			; (mov r8, r8)
    67ea:	46bd      	mov	sp, r7
    67ec:	b004      	add	sp, #16
    67ee:	bd80      	pop	{r7, pc}
    67f0:	000065fd 	.word	0x000065fd
    67f4:	000001d1 	.word	0x000001d1
    67f8:	00006621 	.word	0x00006621

000067fc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    67fc:	b580      	push	{r7, lr}
    67fe:	b084      	sub	sp, #16
    6800:	af00      	add	r7, sp, #0
    6802:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	681b      	ldr	r3, [r3, #0]
    6808:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	681b      	ldr	r3, [r3, #0]
    680e:	0018      	movs	r0, r3
    6810:	4b0b      	ldr	r3, [pc, #44]	; (6840 <spi_enable+0x44>)
    6812:	4798      	blx	r3
    6814:	0003      	movs	r3, r0
    6816:	0018      	movs	r0, r3
    6818:	4b0a      	ldr	r3, [pc, #40]	; (6844 <spi_enable+0x48>)
    681a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    681c:	46c0      	nop			; (mov r8, r8)
    681e:	687b      	ldr	r3, [r7, #4]
    6820:	0018      	movs	r0, r3
    6822:	4b09      	ldr	r3, [pc, #36]	; (6848 <spi_enable+0x4c>)
    6824:	4798      	blx	r3
    6826:	1e03      	subs	r3, r0, #0
    6828:	d1f9      	bne.n	681e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    682a:	68fb      	ldr	r3, [r7, #12]
    682c:	681b      	ldr	r3, [r3, #0]
    682e:	2202      	movs	r2, #2
    6830:	431a      	orrs	r2, r3
    6832:	68fb      	ldr	r3, [r7, #12]
    6834:	601a      	str	r2, [r3, #0]
}
    6836:	46c0      	nop			; (mov r8, r8)
    6838:	46bd      	mov	sp, r7
    683a:	b004      	add	sp, #16
    683c:	bd80      	pop	{r7, pc}
    683e:	46c0      	nop			; (mov r8, r8)
    6840:	0000cec1 	.word	0x0000cec1
    6844:	00006675 	.word	0x00006675
    6848:	000066d1 	.word	0x000066d1

0000684c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    684c:	b580      	push	{r7, lr}
    684e:	b084      	sub	sp, #16
    6850:	af00      	add	r7, sp, #0
    6852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6854:	687b      	ldr	r3, [r7, #4]
    6856:	681b      	ldr	r3, [r3, #0]
    6858:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	681b      	ldr	r3, [r3, #0]
    685e:	0018      	movs	r0, r3
    6860:	4b0e      	ldr	r3, [pc, #56]	; (689c <spi_disable+0x50>)
    6862:	4798      	blx	r3
    6864:	0003      	movs	r3, r0
    6866:	0018      	movs	r0, r3
    6868:	4b0d      	ldr	r3, [pc, #52]	; (68a0 <spi_disable+0x54>)
    686a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    686c:	46c0      	nop			; (mov r8, r8)
    686e:	687b      	ldr	r3, [r7, #4]
    6870:	0018      	movs	r0, r3
    6872:	4b0c      	ldr	r3, [pc, #48]	; (68a4 <spi_disable+0x58>)
    6874:	4798      	blx	r3
    6876:	1e03      	subs	r3, r0, #0
    6878:	d1f9      	bne.n	686e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    687a:	68fb      	ldr	r3, [r7, #12]
    687c:	228f      	movs	r2, #143	; 0x8f
    687e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    6880:	68fb      	ldr	r3, [r7, #12]
    6882:	228f      	movs	r2, #143	; 0x8f
    6884:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6886:	68fb      	ldr	r3, [r7, #12]
    6888:	681b      	ldr	r3, [r3, #0]
    688a:	2202      	movs	r2, #2
    688c:	4393      	bics	r3, r2
    688e:	001a      	movs	r2, r3
    6890:	68fb      	ldr	r3, [r7, #12]
    6892:	601a      	str	r2, [r3, #0]
}
    6894:	46c0      	nop			; (mov r8, r8)
    6896:	46bd      	mov	sp, r7
    6898:	b004      	add	sp, #16
    689a:	bd80      	pop	{r7, pc}
    689c:	0000cec1 	.word	0x0000cec1
    68a0:	000066a1 	.word	0x000066a1
    68a4:	000066d1 	.word	0x000066d1

000068a8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    68a8:	b580      	push	{r7, lr}
    68aa:	b084      	sub	sp, #16
    68ac:	af00      	add	r7, sp, #0
    68ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    68b0:	687b      	ldr	r3, [r7, #4]
    68b2:	681b      	ldr	r3, [r3, #0]
    68b4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    68b6:	68fb      	ldr	r3, [r7, #12]
    68b8:	7e1b      	ldrb	r3, [r3, #24]
    68ba:	b2db      	uxtb	r3, r3
    68bc:	001a      	movs	r2, r3
    68be:	2302      	movs	r3, #2
    68c0:	4013      	ands	r3, r2
    68c2:	1e5a      	subs	r2, r3, #1
    68c4:	4193      	sbcs	r3, r2
    68c6:	b2db      	uxtb	r3, r3
}
    68c8:	0018      	movs	r0, r3
    68ca:	46bd      	mov	sp, r7
    68cc:	b004      	add	sp, #16
    68ce:	bd80      	pop	{r7, pc}

000068d0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    68d0:	b580      	push	{r7, lr}
    68d2:	b084      	sub	sp, #16
    68d4:	af00      	add	r7, sp, #0
    68d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	681b      	ldr	r3, [r3, #0]
    68dc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    68de:	68fb      	ldr	r3, [r7, #12]
    68e0:	7e1b      	ldrb	r3, [r3, #24]
    68e2:	b2db      	uxtb	r3, r3
    68e4:	001a      	movs	r2, r3
    68e6:	2301      	movs	r3, #1
    68e8:	4013      	ands	r3, r2
    68ea:	1e5a      	subs	r2, r3, #1
    68ec:	4193      	sbcs	r3, r2
    68ee:	b2db      	uxtb	r3, r3
}
    68f0:	0018      	movs	r0, r3
    68f2:	46bd      	mov	sp, r7
    68f4:	b004      	add	sp, #16
    68f6:	bd80      	pop	{r7, pc}

000068f8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    68f8:	b580      	push	{r7, lr}
    68fa:	b084      	sub	sp, #16
    68fc:	af00      	add	r7, sp, #0
    68fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	681b      	ldr	r3, [r3, #0]
    6904:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6906:	68fb      	ldr	r3, [r7, #12]
    6908:	7e1b      	ldrb	r3, [r3, #24]
    690a:	b2db      	uxtb	r3, r3
    690c:	001a      	movs	r2, r3
    690e:	2304      	movs	r3, #4
    6910:	4013      	ands	r3, r2
    6912:	1e5a      	subs	r2, r3, #1
    6914:	4193      	sbcs	r3, r2
    6916:	b2db      	uxtb	r3, r3
}
    6918:	0018      	movs	r0, r3
    691a:	46bd      	mov	sp, r7
    691c:	b004      	add	sp, #16
    691e:	bd80      	pop	{r7, pc}

00006920 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    6920:	b580      	push	{r7, lr}
    6922:	b084      	sub	sp, #16
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
    6928:	000a      	movs	r2, r1
    692a:	1cbb      	adds	r3, r7, #2
    692c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    692e:	687b      	ldr	r3, [r7, #4]
    6930:	681b      	ldr	r3, [r3, #0]
    6932:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    6934:	687b      	ldr	r3, [r7, #4]
    6936:	0018      	movs	r0, r3
    6938:	4b0a      	ldr	r3, [pc, #40]	; (6964 <spi_write+0x44>)
    693a:	4798      	blx	r3
    693c:	0003      	movs	r3, r0
    693e:	001a      	movs	r2, r3
    6940:	2301      	movs	r3, #1
    6942:	4053      	eors	r3, r2
    6944:	b2db      	uxtb	r3, r3
    6946:	2b00      	cmp	r3, #0
    6948:	d001      	beq.n	694e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    694a:	2305      	movs	r3, #5
    694c:	e006      	b.n	695c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    694e:	1cbb      	adds	r3, r7, #2
    6950:	881b      	ldrh	r3, [r3, #0]
    6952:	05db      	lsls	r3, r3, #23
    6954:	0dda      	lsrs	r2, r3, #23
    6956:	68fb      	ldr	r3, [r7, #12]
    6958:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    695a:	2300      	movs	r3, #0
}
    695c:	0018      	movs	r0, r3
    695e:	46bd      	mov	sp, r7
    6960:	b004      	add	sp, #16
    6962:	bd80      	pop	{r7, pc}
    6964:	000068d1 	.word	0x000068d1

00006968 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    6968:	b580      	push	{r7, lr}
    696a:	b084      	sub	sp, #16
    696c:	af00      	add	r7, sp, #0
    696e:	6078      	str	r0, [r7, #4]
    6970:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6972:	687b      	ldr	r3, [r7, #4]
    6974:	681b      	ldr	r3, [r3, #0]
    6976:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	0018      	movs	r0, r3
    697c:	4b1b      	ldr	r3, [pc, #108]	; (69ec <spi_read+0x84>)
    697e:	4798      	blx	r3
    6980:	0003      	movs	r3, r0
    6982:	001a      	movs	r2, r3
    6984:	2301      	movs	r3, #1
    6986:	4053      	eors	r3, r2
    6988:	b2db      	uxtb	r3, r3
    698a:	2b00      	cmp	r3, #0
    698c:	d001      	beq.n	6992 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    698e:	2310      	movs	r3, #16
    6990:	e027      	b.n	69e2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    6992:	230f      	movs	r3, #15
    6994:	18fb      	adds	r3, r7, r3
    6996:	2200      	movs	r2, #0
    6998:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    699a:	68bb      	ldr	r3, [r7, #8]
    699c:	8b5b      	ldrh	r3, [r3, #26]
    699e:	b29b      	uxth	r3, r3
    69a0:	001a      	movs	r2, r3
    69a2:	2304      	movs	r3, #4
    69a4:	4013      	ands	r3, r2
    69a6:	d006      	beq.n	69b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    69a8:	230f      	movs	r3, #15
    69aa:	18fb      	adds	r3, r7, r3
    69ac:	221e      	movs	r2, #30
    69ae:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    69b0:	68bb      	ldr	r3, [r7, #8]
    69b2:	2204      	movs	r2, #4
    69b4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    69b6:	687b      	ldr	r3, [r7, #4]
    69b8:	799b      	ldrb	r3, [r3, #6]
    69ba:	2b01      	cmp	r3, #1
    69bc:	d108      	bne.n	69d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    69be:	68bb      	ldr	r3, [r7, #8]
    69c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69c2:	b29b      	uxth	r3, r3
    69c4:	05db      	lsls	r3, r3, #23
    69c6:	0ddb      	lsrs	r3, r3, #23
    69c8:	b29a      	uxth	r2, r3
    69ca:	683b      	ldr	r3, [r7, #0]
    69cc:	801a      	strh	r2, [r3, #0]
    69ce:	e005      	b.n	69dc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    69d0:	68bb      	ldr	r3, [r7, #8]
    69d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69d4:	b2db      	uxtb	r3, r3
    69d6:	b29a      	uxth	r2, r3
    69d8:	683b      	ldr	r3, [r7, #0]
    69da:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    69dc:	230f      	movs	r3, #15
    69de:	18fb      	adds	r3, r7, r3
    69e0:	781b      	ldrb	r3, [r3, #0]
}
    69e2:	0018      	movs	r0, r3
    69e4:	46bd      	mov	sp, r7
    69e6:	b004      	add	sp, #16
    69e8:	bd80      	pop	{r7, pc}
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	000068f9 	.word	0x000068f9

000069f0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    69f0:	b580      	push	{r7, lr}
    69f2:	b086      	sub	sp, #24
    69f4:	af00      	add	r7, sp, #0
    69f6:	60f8      	str	r0, [r7, #12]
    69f8:	60b9      	str	r1, [r7, #8]
    69fa:	1dbb      	adds	r3, r7, #6
    69fc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    69fe:	2313      	movs	r3, #19
    6a00:	18fb      	adds	r3, r7, r3
    6a02:	2200      	movs	r2, #0
    6a04:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    6a06:	2317      	movs	r3, #23
    6a08:	18fb      	adds	r3, r7, r3
    6a0a:	2200      	movs	r2, #0
    6a0c:	701a      	strb	r2, [r3, #0]
    6a0e:	2316      	movs	r3, #22
    6a10:	18fb      	adds	r3, r7, r3
    6a12:	2200      	movs	r2, #0
    6a14:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    6a16:	2314      	movs	r3, #20
    6a18:	18fb      	adds	r3, r7, r3
    6a1a:	2200      	movs	r2, #0
    6a1c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    6a1e:	2310      	movs	r3, #16
    6a20:	18fb      	adds	r3, r7, r3
    6a22:	2200      	movs	r2, #0
    6a24:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    6a26:	68bb      	ldr	r3, [r7, #8]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d102      	bne.n	6a32 <spi_rw+0x42>
    6a2c:	68fb      	ldr	r3, [r7, #12]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d003      	beq.n	6a3a <spi_rw+0x4a>
    6a32:	1dbb      	adds	r3, r7, #6
    6a34:	881b      	ldrh	r3, [r3, #0]
    6a36:	2b00      	cmp	r3, #0
    6a38:	d102      	bne.n	6a40 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    6a3a:	230f      	movs	r3, #15
    6a3c:	425b      	negs	r3, r3
    6a3e:	e07e      	b.n	6b3e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    6a40:	68fb      	ldr	r3, [r7, #12]
    6a42:	2b00      	cmp	r3, #0
    6a44:	d106      	bne.n	6a54 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    6a46:	2313      	movs	r3, #19
    6a48:	18fb      	adds	r3, r7, r3
    6a4a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    6a4c:	2317      	movs	r3, #23
    6a4e:	18fb      	adds	r3, r7, r3
    6a50:	2201      	movs	r2, #1
    6a52:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    6a54:	68bb      	ldr	r3, [r7, #8]
    6a56:	2b00      	cmp	r3, #0
    6a58:	d106      	bne.n	6a68 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    6a5a:	2313      	movs	r3, #19
    6a5c:	18fb      	adds	r3, r7, r3
    6a5e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    6a60:	2316      	movs	r3, #22
    6a62:	18fb      	adds	r3, r7, r3
    6a64:	2201      	movs	r2, #1
    6a66:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    6a68:	4937      	ldr	r1, [pc, #220]	; (6b48 <spi_rw+0x158>)
    6a6a:	4b38      	ldr	r3, [pc, #224]	; (6b4c <spi_rw+0x15c>)
    6a6c:	2201      	movs	r2, #1
    6a6e:	0018      	movs	r0, r3
    6a70:	4b37      	ldr	r3, [pc, #220]	; (6b50 <spi_rw+0x160>)
    6a72:	4798      	blx	r3

	while (u16Sz) {
    6a74:	e04c      	b.n	6b10 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    6a76:	68fb      	ldr	r3, [r7, #12]
    6a78:	781a      	ldrb	r2, [r3, #0]
    6a7a:	2314      	movs	r3, #20
    6a7c:	18fb      	adds	r3, r7, r3
    6a7e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    6a80:	46c0      	nop			; (mov r8, r8)
    6a82:	4b32      	ldr	r3, [pc, #200]	; (6b4c <spi_rw+0x15c>)
    6a84:	0018      	movs	r0, r3
    6a86:	4b33      	ldr	r3, [pc, #204]	; (6b54 <spi_rw+0x164>)
    6a88:	4798      	blx	r3
    6a8a:	0003      	movs	r3, r0
    6a8c:	001a      	movs	r2, r3
    6a8e:	2301      	movs	r3, #1
    6a90:	4053      	eors	r3, r2
    6a92:	b2db      	uxtb	r3, r3
    6a94:	2b00      	cmp	r3, #0
    6a96:	d1f4      	bne.n	6a82 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    6a98:	46c0      	nop			; (mov r8, r8)
    6a9a:	2314      	movs	r3, #20
    6a9c:	18fb      	adds	r3, r7, r3
    6a9e:	881a      	ldrh	r2, [r3, #0]
    6aa0:	4b2a      	ldr	r3, [pc, #168]	; (6b4c <spi_rw+0x15c>)
    6aa2:	0011      	movs	r1, r2
    6aa4:	0018      	movs	r0, r3
    6aa6:	4b2c      	ldr	r3, [pc, #176]	; (6b58 <spi_rw+0x168>)
    6aa8:	4798      	blx	r3
    6aaa:	1e03      	subs	r3, r0, #0
    6aac:	d1f5      	bne.n	6a9a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	4b26      	ldr	r3, [pc, #152]	; (6b4c <spi_rw+0x15c>)
    6ab2:	0018      	movs	r0, r3
    6ab4:	4b29      	ldr	r3, [pc, #164]	; (6b5c <spi_rw+0x16c>)
    6ab6:	4798      	blx	r3
    6ab8:	0003      	movs	r3, r0
    6aba:	001a      	movs	r2, r3
    6abc:	2301      	movs	r3, #1
    6abe:	4053      	eors	r3, r2
    6ac0:	b2db      	uxtb	r3, r3
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d1f4      	bne.n	6ab0 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    6ac6:	46c0      	nop			; (mov r8, r8)
    6ac8:	2310      	movs	r3, #16
    6aca:	18fa      	adds	r2, r7, r3
    6acc:	4b1f      	ldr	r3, [pc, #124]	; (6b4c <spi_rw+0x15c>)
    6ace:	0011      	movs	r1, r2
    6ad0:	0018      	movs	r0, r3
    6ad2:	4b23      	ldr	r3, [pc, #140]	; (6b60 <spi_rw+0x170>)
    6ad4:	4798      	blx	r3
    6ad6:	1e03      	subs	r3, r0, #0
    6ad8:	d1f6      	bne.n	6ac8 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    6ada:	2310      	movs	r3, #16
    6adc:	18fb      	adds	r3, r7, r3
    6ade:	881b      	ldrh	r3, [r3, #0]
    6ae0:	b2da      	uxtb	r2, r3
    6ae2:	68bb      	ldr	r3, [r7, #8]
    6ae4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    6ae6:	1dbb      	adds	r3, r7, #6
    6ae8:	881a      	ldrh	r2, [r3, #0]
    6aea:	1dbb      	adds	r3, r7, #6
    6aec:	3a01      	subs	r2, #1
    6aee:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    6af0:	2316      	movs	r3, #22
    6af2:	18fb      	adds	r3, r7, r3
    6af4:	781b      	ldrb	r3, [r3, #0]
    6af6:	2b00      	cmp	r3, #0
    6af8:	d102      	bne.n	6b00 <spi_rw+0x110>
			pu8Miso++;
    6afa:	68bb      	ldr	r3, [r7, #8]
    6afc:	3301      	adds	r3, #1
    6afe:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    6b00:	2317      	movs	r3, #23
    6b02:	18fb      	adds	r3, r7, r3
    6b04:	781b      	ldrb	r3, [r3, #0]
    6b06:	2b00      	cmp	r3, #0
    6b08:	d102      	bne.n	6b10 <spi_rw+0x120>
			pu8Mosi++;
    6b0a:	68fb      	ldr	r3, [r7, #12]
    6b0c:	3301      	adds	r3, #1
    6b0e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    6b10:	1dbb      	adds	r3, r7, #6
    6b12:	881b      	ldrh	r3, [r3, #0]
    6b14:	2b00      	cmp	r3, #0
    6b16:	d1ae      	bne.n	6a76 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    6b18:	46c0      	nop			; (mov r8, r8)
    6b1a:	4b0c      	ldr	r3, [pc, #48]	; (6b4c <spi_rw+0x15c>)
    6b1c:	0018      	movs	r0, r3
    6b1e:	4b11      	ldr	r3, [pc, #68]	; (6b64 <spi_rw+0x174>)
    6b20:	4798      	blx	r3
    6b22:	0003      	movs	r3, r0
    6b24:	001a      	movs	r2, r3
    6b26:	2301      	movs	r3, #1
    6b28:	4053      	eors	r3, r2
    6b2a:	b2db      	uxtb	r3, r3
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d1f4      	bne.n	6b1a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    6b30:	4905      	ldr	r1, [pc, #20]	; (6b48 <spi_rw+0x158>)
    6b32:	4b06      	ldr	r3, [pc, #24]	; (6b4c <spi_rw+0x15c>)
    6b34:	2200      	movs	r2, #0
    6b36:	0018      	movs	r0, r3
    6b38:	4b05      	ldr	r3, [pc, #20]	; (6b50 <spi_rw+0x160>)
    6b3a:	4798      	blx	r3

	return M2M_SUCCESS;
    6b3c:	2300      	movs	r3, #0
}
    6b3e:	0018      	movs	r0, r3
    6b40:	46bd      	mov	sp, r7
    6b42:	b006      	add	sp, #24
    6b44:	bd80      	pop	{r7, pc}
    6b46:	46c0      	nop			; (mov r8, r8)
    6b48:	200029f0 	.word	0x200029f0
    6b4c:	200029f4 	.word	0x200029f4
    6b50:	0000d5e9 	.word	0x0000d5e9
    6b54:	000068d1 	.word	0x000068d1
    6b58:	00006921 	.word	0x00006921
    6b5c:	000068f9 	.word	0x000068f9
    6b60:	00006969 	.word	0x00006969
    6b64:	000068a9 	.word	0x000068a9

00006b68 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    6b68:	b580      	push	{r7, lr}
    6b6a:	b092      	sub	sp, #72	; 0x48
    6b6c:	af00      	add	r7, sp, #0
    6b6e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    6b70:	2347      	movs	r3, #71	; 0x47
    6b72:	18fb      	adds	r3, r7, r3
    6b74:	2200      	movs	r2, #0
    6b76:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    6b78:	2308      	movs	r3, #8
    6b7a:	18fb      	adds	r3, r7, r3
    6b7c:	0018      	movs	r0, r3
    6b7e:	4b26      	ldr	r3, [pc, #152]	; (6c18 <nm_bus_init+0xb0>)
    6b80:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    6b82:	2308      	movs	r3, #8
    6b84:	18fb      	adds	r3, r7, r3
    6b86:	2205      	movs	r2, #5
    6b88:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    6b8a:	2308      	movs	r3, #8
    6b8c:	18fa      	adds	r2, r7, r3
    6b8e:	4b23      	ldr	r3, [pc, #140]	; (6c1c <nm_bus_init+0xb4>)
    6b90:	0011      	movs	r1, r2
    6b92:	0018      	movs	r0, r3
    6b94:	4b22      	ldr	r3, [pc, #136]	; (6c20 <nm_bus_init+0xb8>)
    6b96:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    6b98:	230c      	movs	r3, #12
    6b9a:	18fb      	adds	r3, r7, r3
    6b9c:	0018      	movs	r0, r3
    6b9e:	4b21      	ldr	r3, [pc, #132]	; (6c24 <nm_bus_init+0xbc>)
    6ba0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    6ba2:	230c      	movs	r3, #12
    6ba4:	18fb      	adds	r3, r7, r3
    6ba6:	2280      	movs	r2, #128	; 0x80
    6ba8:	0252      	lsls	r2, r2, #9
    6baa:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    6bac:	230c      	movs	r3, #12
    6bae:	18fb      	adds	r3, r7, r3
    6bb0:	4a1d      	ldr	r2, [pc, #116]	; (6c28 <nm_bus_init+0xc0>)
    6bb2:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    6bb4:	230c      	movs	r3, #12
    6bb6:	18fb      	adds	r3, r7, r3
    6bb8:	2201      	movs	r2, #1
    6bba:	4252      	negs	r2, r2
    6bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    6bbe:	230c      	movs	r3, #12
    6bc0:	18fb      	adds	r3, r7, r3
    6bc2:	4a1a      	ldr	r2, [pc, #104]	; (6c2c <nm_bus_init+0xc4>)
    6bc4:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    6bc6:	230c      	movs	r3, #12
    6bc8:	18fb      	adds	r3, r7, r3
    6bca:	4a19      	ldr	r2, [pc, #100]	; (6c30 <nm_bus_init+0xc8>)
    6bcc:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    6bce:	230c      	movs	r3, #12
    6bd0:	18fb      	adds	r3, r7, r3
    6bd2:	2200      	movs	r2, #0
    6bd4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    6bd6:	230c      	movs	r3, #12
    6bd8:	18fb      	adds	r3, r7, r3
    6bda:	4a16      	ldr	r2, [pc, #88]	; (6c34 <nm_bus_init+0xcc>)
    6bdc:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    6bde:	230c      	movs	r3, #12
    6be0:	18fa      	adds	r2, r7, r3
    6be2:	4915      	ldr	r1, [pc, #84]	; (6c38 <nm_bus_init+0xd0>)
    6be4:	4b15      	ldr	r3, [pc, #84]	; (6c3c <nm_bus_init+0xd4>)
    6be6:	0018      	movs	r0, r3
    6be8:	4b15      	ldr	r3, [pc, #84]	; (6c40 <nm_bus_init+0xd8>)
    6bea:	4798      	blx	r3
    6bec:	1e03      	subs	r3, r0, #0
    6bee:	d002      	beq.n	6bf6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    6bf0:	2306      	movs	r3, #6
    6bf2:	425b      	negs	r3, r3
    6bf4:	e00c      	b.n	6c10 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    6bf6:	4b11      	ldr	r3, [pc, #68]	; (6c3c <nm_bus_init+0xd4>)
    6bf8:	0018      	movs	r0, r3
    6bfa:	4b12      	ldr	r3, [pc, #72]	; (6c44 <nm_bus_init+0xdc>)
    6bfc:	4798      	blx	r3

	nm_bsp_reset();
    6bfe:	4b12      	ldr	r3, [pc, #72]	; (6c48 <nm_bus_init+0xe0>)
    6c00:	4798      	blx	r3
	nm_bsp_sleep(1);
    6c02:	2001      	movs	r0, #1
    6c04:	4b11      	ldr	r3, [pc, #68]	; (6c4c <nm_bus_init+0xe4>)
    6c06:	4798      	blx	r3
#endif
	return result;
    6c08:	2347      	movs	r3, #71	; 0x47
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	b25b      	sxtb	r3, r3
}
    6c10:	0018      	movs	r0, r3
    6c12:	46bd      	mov	sp, r7
    6c14:	b012      	add	sp, #72	; 0x48
    6c16:	bd80      	pop	{r7, pc}
    6c18:	00006775 	.word	0x00006775
    6c1c:	200029f0 	.word	0x200029f0
    6c20:	00006799 	.word	0x00006799
    6c24:	000066f1 	.word	0x000066f1
    6c28:	00040003 	.word	0x00040003
    6c2c:	00060003 	.word	0x00060003
    6c30:	00070003 	.word	0x00070003
    6c34:	00b71b00 	.word	0x00b71b00
    6c38:	42000800 	.word	0x42000800
    6c3c:	200029f4 	.word	0x200029f4
    6c40:	0000d459 	.word	0x0000d459
    6c44:	000067fd 	.word	0x000067fd
    6c48:	0000645d 	.word	0x0000645d
    6c4c:	000064a1 	.word	0x000064a1

00006c50 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    6c50:	b590      	push	{r4, r7, lr}
    6c52:	b085      	sub	sp, #20
    6c54:	af00      	add	r7, sp, #0
    6c56:	0002      	movs	r2, r0
    6c58:	6039      	str	r1, [r7, #0]
    6c5a:	1dfb      	adds	r3, r7, #7
    6c5c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    6c5e:	230f      	movs	r3, #15
    6c60:	18fb      	adds	r3, r7, r3
    6c62:	2200      	movs	r2, #0
    6c64:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    6c66:	1dfb      	adds	r3, r7, #7
    6c68:	781b      	ldrb	r3, [r3, #0]
    6c6a:	2b03      	cmp	r3, #3
    6c6c:	d10f      	bne.n	6c8e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    6c6e:	683b      	ldr	r3, [r7, #0]
    6c70:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    6c72:	68bb      	ldr	r3, [r7, #8]
    6c74:	6818      	ldr	r0, [r3, #0]
    6c76:	68bb      	ldr	r3, [r7, #8]
    6c78:	6859      	ldr	r1, [r3, #4]
    6c7a:	68bb      	ldr	r3, [r7, #8]
    6c7c:	891b      	ldrh	r3, [r3, #8]
    6c7e:	220f      	movs	r2, #15
    6c80:	18bc      	adds	r4, r7, r2
    6c82:	001a      	movs	r2, r3
    6c84:	4b10      	ldr	r3, [pc, #64]	; (6cc8 <nm_bus_ioctl+0x78>)
    6c86:	4798      	blx	r3
    6c88:	0003      	movs	r3, r0
    6c8a:	7023      	strb	r3, [r4, #0]
		}
		break;
    6c8c:	e013      	b.n	6cb6 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    6c8e:	230f      	movs	r3, #15
    6c90:	18fb      	adds	r3, r7, r3
    6c92:	22ff      	movs	r2, #255	; 0xff
    6c94:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    6c96:	230e      	movs	r3, #14
    6c98:	33ff      	adds	r3, #255	; 0xff
    6c9a:	001a      	movs	r2, r3
    6c9c:	490b      	ldr	r1, [pc, #44]	; (6ccc <nm_bus_ioctl+0x7c>)
    6c9e:	4b0c      	ldr	r3, [pc, #48]	; (6cd0 <nm_bus_ioctl+0x80>)
    6ca0:	0018      	movs	r0, r3
    6ca2:	4b0c      	ldr	r3, [pc, #48]	; (6cd4 <nm_bus_ioctl+0x84>)
    6ca4:	4798      	blx	r3
    6ca6:	4b0c      	ldr	r3, [pc, #48]	; (6cd8 <nm_bus_ioctl+0x88>)
    6ca8:	0018      	movs	r0, r3
    6caa:	4b0c      	ldr	r3, [pc, #48]	; (6cdc <nm_bus_ioctl+0x8c>)
    6cac:	4798      	blx	r3
    6cae:	200d      	movs	r0, #13
    6cb0:	4b0b      	ldr	r3, [pc, #44]	; (6ce0 <nm_bus_ioctl+0x90>)
    6cb2:	4798      	blx	r3
			break;
    6cb4:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    6cb6:	230f      	movs	r3, #15
    6cb8:	18fb      	adds	r3, r7, r3
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	b25b      	sxtb	r3, r3
}
    6cbe:	0018      	movs	r0, r3
    6cc0:	46bd      	mov	sp, r7
    6cc2:	b005      	add	sp, #20
    6cc4:	bd90      	pop	{r4, r7, pc}
    6cc6:	46c0      	nop			; (mov r8, r8)
    6cc8:	000069f1 	.word	0x000069f1
    6ccc:	0001f934 	.word	0x0001f934
    6cd0:	0001f90c 	.word	0x0001f90c
    6cd4:	0001c37d 	.word	0x0001c37d
    6cd8:	0001f920 	.word	0x0001f920
    6cdc:	0001c499 	.word	0x0001c499
    6ce0:	0001c3b1 	.word	0x0001c3b1

00006ce4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    6ce4:	b580      	push	{r7, lr}
    6ce6:	b082      	sub	sp, #8
    6ce8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    6cea:	1dfb      	adds	r3, r7, #7
    6cec:	2200      	movs	r2, #0
    6cee:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    6cf0:	1d3b      	adds	r3, r7, #4
    6cf2:	0018      	movs	r0, r3
    6cf4:	4b13      	ldr	r3, [pc, #76]	; (6d44 <nm_bus_deinit+0x60>)
    6cf6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6cf8:	1d3b      	adds	r3, r7, #4
    6cfa:	2200      	movs	r2, #0
    6cfc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    6cfe:	1d3b      	adds	r3, r7, #4
    6d00:	2200      	movs	r2, #0
    6d02:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    6d04:	4b10      	ldr	r3, [pc, #64]	; (6d48 <nm_bus_deinit+0x64>)
    6d06:	0018      	movs	r0, r3
    6d08:	4b10      	ldr	r3, [pc, #64]	; (6d4c <nm_bus_deinit+0x68>)
    6d0a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    6d0c:	1d3b      	adds	r3, r7, #4
    6d0e:	0019      	movs	r1, r3
    6d10:	2006      	movs	r0, #6
    6d12:	4b0f      	ldr	r3, [pc, #60]	; (6d50 <nm_bus_deinit+0x6c>)
    6d14:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    6d16:	1d3b      	adds	r3, r7, #4
    6d18:	0019      	movs	r1, r3
    6d1a:	2004      	movs	r0, #4
    6d1c:	4b0c      	ldr	r3, [pc, #48]	; (6d50 <nm_bus_deinit+0x6c>)
    6d1e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    6d20:	1d3b      	adds	r3, r7, #4
    6d22:	0019      	movs	r1, r3
    6d24:	2007      	movs	r0, #7
    6d26:	4b0a      	ldr	r3, [pc, #40]	; (6d50 <nm_bus_deinit+0x6c>)
    6d28:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    6d2a:	1d3b      	adds	r3, r7, #4
    6d2c:	0019      	movs	r1, r3
    6d2e:	2005      	movs	r0, #5
    6d30:	4b07      	ldr	r3, [pc, #28]	; (6d50 <nm_bus_deinit+0x6c>)
    6d32:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    6d34:	1dfb      	adds	r3, r7, #7
    6d36:	781b      	ldrb	r3, [r3, #0]
    6d38:	b25b      	sxtb	r3, r3
}
    6d3a:	0018      	movs	r0, r3
    6d3c:	46bd      	mov	sp, r7
    6d3e:	b002      	add	sp, #8
    6d40:	bd80      	pop	{r7, pc}
    6d42:	46c0      	nop			; (mov r8, r8)
    6d44:	000065fd 	.word	0x000065fd
    6d48:	200029f4 	.word	0x200029f4
    6d4c:	0000684d 	.word	0x0000684d
    6d50:	000001d1 	.word	0x000001d1

00006d54 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    6d54:	b580      	push	{r7, lr}
    6d56:	b084      	sub	sp, #16
    6d58:	af00      	add	r7, sp, #0
    6d5a:	60f8      	str	r0, [r7, #12]
    6d5c:	60b9      	str	r1, [r7, #8]
    6d5e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	2b00      	cmp	r3, #0
    6d64:	d010      	beq.n	6d88 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    6d66:	68bb      	ldr	r3, [r7, #8]
    6d68:	781a      	ldrb	r2, [r3, #0]
    6d6a:	68fb      	ldr	r3, [r7, #12]
    6d6c:	701a      	strb	r2, [r3, #0]
		pDst++;
    6d6e:	68fb      	ldr	r3, [r7, #12]
    6d70:	3301      	adds	r3, #1
    6d72:	60fb      	str	r3, [r7, #12]
		pSrc++;
    6d74:	68bb      	ldr	r3, [r7, #8]
    6d76:	3301      	adds	r3, #1
    6d78:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	3b01      	subs	r3, #1
    6d7e:	607b      	str	r3, [r7, #4]
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	2b00      	cmp	r3, #0
    6d84:	d1ef      	bne.n	6d66 <m2m_memcpy+0x12>
    6d86:	e000      	b.n	6d8a <m2m_memcpy+0x36>
	if(sz == 0) return;
    6d88:	46c0      	nop			; (mov r8, r8)
}
    6d8a:	46bd      	mov	sp, r7
    6d8c:	b004      	add	sp, #16
    6d8e:	bd80      	pop	{r7, pc}

00006d90 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    6d90:	b580      	push	{r7, lr}
    6d92:	b084      	sub	sp, #16
    6d94:	af00      	add	r7, sp, #0
    6d96:	60f8      	str	r0, [r7, #12]
    6d98:	607a      	str	r2, [r7, #4]
    6d9a:	230b      	movs	r3, #11
    6d9c:	18fb      	adds	r3, r7, r3
    6d9e:	1c0a      	adds	r2, r1, #0
    6da0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	2b00      	cmp	r3, #0
    6da6:	d00e      	beq.n	6dc6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    6da8:	68fb      	ldr	r3, [r7, #12]
    6daa:	220b      	movs	r2, #11
    6dac:	18ba      	adds	r2, r7, r2
    6dae:	7812      	ldrb	r2, [r2, #0]
    6db0:	701a      	strb	r2, [r3, #0]
		pBuf++;
    6db2:	68fb      	ldr	r3, [r7, #12]
    6db4:	3301      	adds	r3, #1
    6db6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	3b01      	subs	r3, #1
    6dbc:	607b      	str	r3, [r7, #4]
    6dbe:	687b      	ldr	r3, [r7, #4]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d1f1      	bne.n	6da8 <m2m_memset+0x18>
    6dc4:	e000      	b.n	6dc8 <m2m_memset+0x38>
	if(sz == 0) return;
    6dc6:	46c0      	nop			; (mov r8, r8)
}
    6dc8:	46bd      	mov	sp, r7
    6dca:	b004      	add	sp, #16
    6dcc:	bd80      	pop	{r7, pc}

00006dce <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    6dce:	b580      	push	{r7, lr}
    6dd0:	b084      	sub	sp, #16
    6dd2:	af00      	add	r7, sp, #0
    6dd4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    6dd6:	230e      	movs	r3, #14
    6dd8:	18fb      	adds	r3, r7, r3
    6dda:	2200      	movs	r2, #0
    6ddc:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    6dde:	e009      	b.n	6df4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    6de0:	230e      	movs	r3, #14
    6de2:	18fb      	adds	r3, r7, r3
    6de4:	881a      	ldrh	r2, [r3, #0]
    6de6:	230e      	movs	r3, #14
    6de8:	18fb      	adds	r3, r7, r3
    6dea:	3201      	adds	r2, #1
    6dec:	801a      	strh	r2, [r3, #0]
		pcStr++;
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	3301      	adds	r3, #1
    6df2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    6df4:	687b      	ldr	r3, [r7, #4]
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	2b00      	cmp	r3, #0
    6dfa:	d1f1      	bne.n	6de0 <m2m_strlen+0x12>
	}
	return u16StrLen;
    6dfc:	230e      	movs	r3, #14
    6dfe:	18fb      	adds	r3, r7, r3
    6e00:	881b      	ldrh	r3, [r3, #0]
}
    6e02:	0018      	movs	r0, r3
    6e04:	46bd      	mov	sp, r7
    6e06:	b004      	add	sp, #16
    6e08:	bd80      	pop	{r7, pc}
	...

00006e0c <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    6e0c:	b580      	push	{r7, lr}
    6e0e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    6e10:	4b04      	ldr	r3, [pc, #16]	; (6e24 <isr+0x18>)
    6e12:	78db      	ldrb	r3, [r3, #3]
    6e14:	b2db      	uxtb	r3, r3
    6e16:	3301      	adds	r3, #1
    6e18:	b2da      	uxtb	r2, r3
    6e1a:	4b02      	ldr	r3, [pc, #8]	; (6e24 <isr+0x18>)
    6e1c:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    6e1e:	46c0      	nop			; (mov r8, r8)
    6e20:	46bd      	mov	sp, r7
    6e22:	bd80      	pop	{r7, pc}
    6e24:	20002a30 	.word	0x20002a30

00006e28 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    6e28:	b590      	push	{r4, r7, lr}
    6e2a:	b083      	sub	sp, #12
    6e2c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    6e2e:	1dfb      	adds	r3, r7, #7
    6e30:	2200      	movs	r2, #0
    6e32:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    6e34:	4b14      	ldr	r3, [pc, #80]	; (6e88 <hif_set_rx_done+0x60>)
    6e36:	2200      	movs	r2, #0
    6e38:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    6e3a:	2001      	movs	r0, #1
    6e3c:	4b13      	ldr	r3, [pc, #76]	; (6e8c <hif_set_rx_done+0x64>)
    6e3e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    6e40:	1dfc      	adds	r4, r7, #7
    6e42:	003b      	movs	r3, r7
    6e44:	4a12      	ldr	r2, [pc, #72]	; (6e90 <hif_set_rx_done+0x68>)
    6e46:	0019      	movs	r1, r3
    6e48:	0010      	movs	r0, r2
    6e4a:	4b12      	ldr	r3, [pc, #72]	; (6e94 <hif_set_rx_done+0x6c>)
    6e4c:	4798      	blx	r3
    6e4e:	0003      	movs	r3, r0
    6e50:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    6e52:	1dfb      	adds	r3, r7, #7
    6e54:	781b      	ldrb	r3, [r3, #0]
    6e56:	b25b      	sxtb	r3, r3
    6e58:	2b00      	cmp	r3, #0
    6e5a:	d10d      	bne.n	6e78 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    6e5c:	683b      	ldr	r3, [r7, #0]
    6e5e:	2202      	movs	r2, #2
    6e60:	4313      	orrs	r3, r2
    6e62:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    6e64:	683b      	ldr	r3, [r7, #0]
    6e66:	1dfc      	adds	r4, r7, #7
    6e68:	4a09      	ldr	r2, [pc, #36]	; (6e90 <hif_set_rx_done+0x68>)
    6e6a:	0019      	movs	r1, r3
    6e6c:	0010      	movs	r0, r2
    6e6e:	4b0a      	ldr	r3, [pc, #40]	; (6e98 <hif_set_rx_done+0x70>)
    6e70:	4798      	blx	r3
    6e72:	0003      	movs	r3, r0
    6e74:	7023      	strb	r3, [r4, #0]
    6e76:	e000      	b.n	6e7a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    6e78:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    6e7a:	1dfb      	adds	r3, r7, #7
    6e7c:	781b      	ldrb	r3, [r3, #0]
    6e7e:	b25b      	sxtb	r3, r3

}
    6e80:	0018      	movs	r0, r3
    6e82:	46bd      	mov	sp, r7
    6e84:	b003      	add	sp, #12
    6e86:	bd90      	pop	{r4, r7, pc}
    6e88:	20002a30 	.word	0x20002a30
    6e8c:	00006541 	.word	0x00006541
    6e90:	00001070 	.word	0x00001070
    6e94:	00009185 	.word	0x00009185
    6e98:	000091a9 	.word	0x000091a9

00006e9c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    6e9c:	b580      	push	{r7, lr}
    6e9e:	b082      	sub	sp, #8
    6ea0:	af00      	add	r7, sp, #0
    6ea2:	603a      	str	r2, [r7, #0]
    6ea4:	1dfb      	adds	r3, r7, #7
    6ea6:	1c02      	adds	r2, r0, #0
    6ea8:	701a      	strb	r2, [r3, #0]
    6eaa:	1d3b      	adds	r3, r7, #4
    6eac:	1c0a      	adds	r2, r1, #0
    6eae:	801a      	strh	r2, [r3, #0]


}
    6eb0:	46c0      	nop			; (mov r8, r8)
    6eb2:	46bd      	mov	sp, r7
    6eb4:	b002      	add	sp, #8
    6eb6:	bd80      	pop	{r7, pc}

00006eb8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    6eb8:	b590      	push	{r4, r7, lr}
    6eba:	b083      	sub	sp, #12
    6ebc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    6ebe:	1dfb      	adds	r3, r7, #7
    6ec0:	2200      	movs	r2, #0
    6ec2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    6ec4:	4b16      	ldr	r3, [pc, #88]	; (6f20 <hif_chip_wake+0x68>)
    6ec6:	789b      	ldrb	r3, [r3, #2]
    6ec8:	b2db      	uxtb	r3, r3
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d003      	beq.n	6ed6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    6ece:	1dfb      	adds	r3, r7, #7
    6ed0:	781b      	ldrb	r3, [r3, #0]
    6ed2:	b25b      	sxtb	r3, r3
    6ed4:	e01f      	b.n	6f16 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    6ed6:	4b12      	ldr	r3, [pc, #72]	; (6f20 <hif_chip_wake+0x68>)
    6ed8:	785b      	ldrb	r3, [r3, #1]
    6eda:	b2db      	uxtb	r3, r3
    6edc:	2b00      	cmp	r3, #0
    6ede:	d10e      	bne.n	6efe <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6ee0:	4b0f      	ldr	r3, [pc, #60]	; (6f20 <hif_chip_wake+0x68>)
    6ee2:	781b      	ldrb	r3, [r3, #0]
    6ee4:	b2db      	uxtb	r3, r3
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d009      	beq.n	6efe <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    6eea:	1dfc      	adds	r4, r7, #7
    6eec:	4b0d      	ldr	r3, [pc, #52]	; (6f24 <hif_chip_wake+0x6c>)
    6eee:	4798      	blx	r3
    6ef0:	0003      	movs	r3, r0
    6ef2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    6ef4:	1dfb      	adds	r3, r7, #7
    6ef6:	781b      	ldrb	r3, [r3, #0]
    6ef8:	b25b      	sxtb	r3, r3
    6efa:	2b00      	cmp	r3, #0
    6efc:	d107      	bne.n	6f0e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    6efe:	4b08      	ldr	r3, [pc, #32]	; (6f20 <hif_chip_wake+0x68>)
    6f00:	785b      	ldrb	r3, [r3, #1]
    6f02:	b2db      	uxtb	r3, r3
    6f04:	3301      	adds	r3, #1
    6f06:	b2da      	uxtb	r2, r3
    6f08:	4b05      	ldr	r3, [pc, #20]	; (6f20 <hif_chip_wake+0x68>)
    6f0a:	705a      	strb	r2, [r3, #1]
    6f0c:	e000      	b.n	6f10 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    6f0e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    6f10:	1dfb      	adds	r3, r7, #7
    6f12:	781b      	ldrb	r3, [r3, #0]
    6f14:	b25b      	sxtb	r3, r3
}
    6f16:	0018      	movs	r0, r3
    6f18:	46bd      	mov	sp, r7
    6f1a:	b003      	add	sp, #12
    6f1c:	bd90      	pop	{r4, r7, pc}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	20002a30 	.word	0x20002a30
    6f24:	00008b75 	.word	0x00008b75

00006f28 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    6f28:	b580      	push	{r7, lr}
    6f2a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    6f2c:	4b07      	ldr	r3, [pc, #28]	; (6f4c <hif_chip_sleep_sc+0x24>)
    6f2e:	785b      	ldrb	r3, [r3, #1]
    6f30:	b2db      	uxtb	r3, r3
    6f32:	2b00      	cmp	r3, #0
    6f34:	d006      	beq.n	6f44 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    6f36:	4b05      	ldr	r3, [pc, #20]	; (6f4c <hif_chip_sleep_sc+0x24>)
    6f38:	785b      	ldrb	r3, [r3, #1]
    6f3a:	b2db      	uxtb	r3, r3
    6f3c:	3b01      	subs	r3, #1
    6f3e:	b2da      	uxtb	r2, r3
    6f40:	4b02      	ldr	r3, [pc, #8]	; (6f4c <hif_chip_sleep_sc+0x24>)
    6f42:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    6f44:	2300      	movs	r3, #0
}
    6f46:	0018      	movs	r0, r3
    6f48:	46bd      	mov	sp, r7
    6f4a:	bd80      	pop	{r7, pc}
    6f4c:	20002a30 	.word	0x20002a30

00006f50 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    6f50:	b590      	push	{r4, r7, lr}
    6f52:	b083      	sub	sp, #12
    6f54:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    6f56:	1dfb      	adds	r3, r7, #7
    6f58:	2200      	movs	r2, #0
    6f5a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    6f5c:	4b10      	ldr	r3, [pc, #64]	; (6fa0 <hif_chip_sleep+0x50>)
    6f5e:	785b      	ldrb	r3, [r3, #1]
    6f60:	b2db      	uxtb	r3, r3
    6f62:	2b00      	cmp	r3, #0
    6f64:	d006      	beq.n	6f74 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    6f66:	4b0e      	ldr	r3, [pc, #56]	; (6fa0 <hif_chip_sleep+0x50>)
    6f68:	785b      	ldrb	r3, [r3, #1]
    6f6a:	b2db      	uxtb	r3, r3
    6f6c:	3b01      	subs	r3, #1
    6f6e:	b2da      	uxtb	r2, r3
    6f70:	4b0b      	ldr	r3, [pc, #44]	; (6fa0 <hif_chip_sleep+0x50>)
    6f72:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    6f74:	4b0a      	ldr	r3, [pc, #40]	; (6fa0 <hif_chip_sleep+0x50>)
    6f76:	785b      	ldrb	r3, [r3, #1]
    6f78:	b2db      	uxtb	r3, r3
    6f7a:	2b00      	cmp	r3, #0
    6f7c:	d109      	bne.n	6f92 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6f7e:	4b08      	ldr	r3, [pc, #32]	; (6fa0 <hif_chip_sleep+0x50>)
    6f80:	781b      	ldrb	r3, [r3, #0]
    6f82:	b2db      	uxtb	r3, r3
    6f84:	2b00      	cmp	r3, #0
    6f86:	d004      	beq.n	6f92 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    6f88:	1dfc      	adds	r4, r7, #7
    6f8a:	4b06      	ldr	r3, [pc, #24]	; (6fa4 <hif_chip_sleep+0x54>)
    6f8c:	4798      	blx	r3
    6f8e:	0003      	movs	r3, r0
    6f90:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    6f92:	1dfb      	adds	r3, r7, #7
    6f94:	781b      	ldrb	r3, [r3, #0]
    6f96:	b25b      	sxtb	r3, r3
}
    6f98:	0018      	movs	r0, r3
    6f9a:	46bd      	mov	sp, r7
    6f9c:	b003      	add	sp, #12
    6f9e:	bd90      	pop	{r4, r7, pc}
    6fa0:	20002a30 	.word	0x20002a30
    6fa4:	00008a9d 	.word	0x00008a9d

00006fa8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b082      	sub	sp, #8
    6fac:	af00      	add	r7, sp, #0
    6fae:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    6fb0:	4b09      	ldr	r3, [pc, #36]	; (6fd8 <hif_init+0x30>)
    6fb2:	2228      	movs	r2, #40	; 0x28
    6fb4:	2100      	movs	r1, #0
    6fb6:	0018      	movs	r0, r3
    6fb8:	4b08      	ldr	r3, [pc, #32]	; (6fdc <hif_init+0x34>)
    6fba:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    6fbc:	4b08      	ldr	r3, [pc, #32]	; (6fe0 <hif_init+0x38>)
    6fbe:	0018      	movs	r0, r3
    6fc0:	4b08      	ldr	r3, [pc, #32]	; (6fe4 <hif_init+0x3c>)
    6fc2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    6fc4:	4b08      	ldr	r3, [pc, #32]	; (6fe8 <hif_init+0x40>)
    6fc6:	0019      	movs	r1, r3
    6fc8:	2003      	movs	r0, #3
    6fca:	4b08      	ldr	r3, [pc, #32]	; (6fec <hif_init+0x44>)
    6fcc:	4798      	blx	r3
	return M2M_SUCCESS;
    6fce:	2300      	movs	r3, #0
}
    6fd0:	0018      	movs	r0, r3
    6fd2:	46bd      	mov	sp, r7
    6fd4:	b002      	add	sp, #8
    6fd6:	bd80      	pop	{r7, pc}
    6fd8:	20002a30 	.word	0x20002a30
    6fdc:	00006d91 	.word	0x00006d91
    6fe0:	00006e0d 	.word	0x00006e0d
    6fe4:	000064c9 	.word	0x000064c9
    6fe8:	00006e9d 	.word	0x00006e9d
    6fec:	00007a65 	.word	0x00007a65

00006ff0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    6ff0:	b590      	push	{r4, r7, lr}
    6ff2:	b089      	sub	sp, #36	; 0x24
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	0004      	movs	r4, r0
    6ff8:	0008      	movs	r0, r1
    6ffa:	603a      	str	r2, [r7, #0]
    6ffc:	0019      	movs	r1, r3
    6ffe:	1dfb      	adds	r3, r7, #7
    7000:	1c22      	adds	r2, r4, #0
    7002:	701a      	strb	r2, [r3, #0]
    7004:	1dbb      	adds	r3, r7, #6
    7006:	1c02      	adds	r2, r0, #0
    7008:	701a      	strb	r2, [r3, #0]
    700a:	1d3b      	adds	r3, r7, #4
    700c:	1c0a      	adds	r2, r1, #0
    700e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    7010:	231f      	movs	r3, #31
    7012:	18fb      	adds	r3, r7, r3
    7014:	22ff      	movs	r2, #255	; 0xff
    7016:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    7018:	1dbb      	adds	r3, r7, #6
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	227f      	movs	r2, #127	; 0x7f
    701e:	4013      	ands	r3, r2
    7020:	b2da      	uxtb	r2, r3
    7022:	2318      	movs	r3, #24
    7024:	18fb      	adds	r3, r7, r3
    7026:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    7028:	2318      	movs	r3, #24
    702a:	18fb      	adds	r3, r7, r3
    702c:	1dfa      	adds	r2, r7, #7
    702e:	7812      	ldrb	r2, [r2, #0]
    7030:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    7032:	2318      	movs	r3, #24
    7034:	18fb      	adds	r3, r7, r3
    7036:	2208      	movs	r2, #8
    7038:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    703c:	2b00      	cmp	r3, #0
    703e:	d011      	beq.n	7064 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    7040:	2318      	movs	r3, #24
    7042:	18fb      	adds	r3, r7, r3
    7044:	885b      	ldrh	r3, [r3, #2]
    7046:	b29a      	uxth	r2, r3
    7048:	2338      	movs	r3, #56	; 0x38
    704a:	18f9      	adds	r1, r7, r3
    704c:	2334      	movs	r3, #52	; 0x34
    704e:	18fb      	adds	r3, r7, r3
    7050:	8809      	ldrh	r1, [r1, #0]
    7052:	881b      	ldrh	r3, [r3, #0]
    7054:	18cb      	adds	r3, r1, r3
    7056:	b29b      	uxth	r3, r3
    7058:	18d3      	adds	r3, r2, r3
    705a:	b29a      	uxth	r2, r3
    705c:	2318      	movs	r3, #24
    705e:	18fb      	adds	r3, r7, r3
    7060:	805a      	strh	r2, [r3, #2]
    7062:	e00a      	b.n	707a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    7064:	2318      	movs	r3, #24
    7066:	18fb      	adds	r3, r7, r3
    7068:	885b      	ldrh	r3, [r3, #2]
    706a:	b29a      	uxth	r2, r3
    706c:	1d3b      	adds	r3, r7, #4
    706e:	881b      	ldrh	r3, [r3, #0]
    7070:	18d3      	adds	r3, r2, r3
    7072:	b29a      	uxth	r2, r3
    7074:	2318      	movs	r3, #24
    7076:	18fb      	adds	r3, r7, r3
    7078:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    707a:	231f      	movs	r3, #31
    707c:	18fc      	adds	r4, r7, r3
    707e:	4bb0      	ldr	r3, [pc, #704]	; (7340 <hif_send+0x350>)
    7080:	4798      	blx	r3
    7082:	0003      	movs	r3, r0
    7084:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    7086:	231f      	movs	r3, #31
    7088:	18fb      	adds	r3, r7, r3
    708a:	781b      	ldrb	r3, [r3, #0]
    708c:	b25b      	sxtb	r3, r3
    708e:	2b00      	cmp	r3, #0
    7090:	d000      	beq.n	7094 <hif_send+0xa4>
    7092:	e127      	b.n	72e4 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    7094:	2300      	movs	r3, #0
    7096:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    7098:	230e      	movs	r3, #14
    709a:	18fb      	adds	r3, r7, r3
    709c:	2200      	movs	r2, #0
    709e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    70a0:	2300      	movs	r3, #0
    70a2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    70a4:	1dfb      	adds	r3, r7, #7
    70a6:	781a      	ldrb	r2, [r3, #0]
    70a8:	697b      	ldr	r3, [r7, #20]
    70aa:	4313      	orrs	r3, r2
    70ac:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    70ae:	1dbb      	adds	r3, r7, #6
    70b0:	781b      	ldrb	r3, [r3, #0]
    70b2:	021a      	lsls	r2, r3, #8
    70b4:	697b      	ldr	r3, [r7, #20]
    70b6:	4313      	orrs	r3, r2
    70b8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    70ba:	2318      	movs	r3, #24
    70bc:	18fb      	adds	r3, r7, r3
    70be:	885b      	ldrh	r3, [r3, #2]
    70c0:	b29b      	uxth	r3, r3
    70c2:	041a      	lsls	r2, r3, #16
    70c4:	697b      	ldr	r3, [r7, #20]
    70c6:	4313      	orrs	r3, r2
    70c8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    70ca:	697b      	ldr	r3, [r7, #20]
    70cc:	221f      	movs	r2, #31
    70ce:	18bc      	adds	r4, r7, r2
    70d0:	4a9c      	ldr	r2, [pc, #624]	; (7344 <hif_send+0x354>)
    70d2:	0019      	movs	r1, r3
    70d4:	0010      	movs	r0, r2
    70d6:	4b9c      	ldr	r3, [pc, #624]	; (7348 <hif_send+0x358>)
    70d8:	4798      	blx	r3
    70da:	0003      	movs	r3, r0
    70dc:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    70de:	231f      	movs	r3, #31
    70e0:	18fb      	adds	r3, r7, r3
    70e2:	781b      	ldrb	r3, [r3, #0]
    70e4:	b25b      	sxtb	r3, r3
    70e6:	2b00      	cmp	r3, #0
    70e8:	d000      	beq.n	70ec <hif_send+0xfc>
    70ea:	e115      	b.n	7318 <hif_send+0x328>

		reg = 0UL;
    70ec:	2300      	movs	r3, #0
    70ee:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    70f0:	697b      	ldr	r3, [r7, #20]
    70f2:	2202      	movs	r2, #2
    70f4:	4313      	orrs	r3, r2
    70f6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    70f8:	697b      	ldr	r3, [r7, #20]
    70fa:	221f      	movs	r2, #31
    70fc:	18bc      	adds	r4, r7, r2
    70fe:	4a93      	ldr	r2, [pc, #588]	; (734c <hif_send+0x35c>)
    7100:	0019      	movs	r1, r3
    7102:	0010      	movs	r0, r2
    7104:	4b90      	ldr	r3, [pc, #576]	; (7348 <hif_send+0x358>)
    7106:	4798      	blx	r3
    7108:	0003      	movs	r3, r0
    710a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    710c:	231f      	movs	r3, #31
    710e:	18fb      	adds	r3, r7, r3
    7110:	781b      	ldrb	r3, [r3, #0]
    7112:	b25b      	sxtb	r3, r3
    7114:	2b00      	cmp	r3, #0
    7116:	d000      	beq.n	711a <hif_send+0x12a>
    7118:	e100      	b.n	731c <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    711a:	2300      	movs	r3, #0
    711c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    711e:	230e      	movs	r3, #14
    7120:	18fb      	adds	r3, r7, r3
    7122:	2200      	movs	r2, #0
    7124:	801a      	strh	r2, [r3, #0]
    7126:	e04f      	b.n	71c8 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    7128:	231f      	movs	r3, #31
    712a:	18fc      	adds	r4, r7, r3
    712c:	2314      	movs	r3, #20
    712e:	18fb      	adds	r3, r7, r3
    7130:	4a86      	ldr	r2, [pc, #536]	; (734c <hif_send+0x35c>)
    7132:	0019      	movs	r1, r3
    7134:	0010      	movs	r0, r2
    7136:	4b86      	ldr	r3, [pc, #536]	; (7350 <hif_send+0x360>)
    7138:	4798      	blx	r3
    713a:	0003      	movs	r3, r0
    713c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    713e:	231f      	movs	r3, #31
    7140:	18fb      	adds	r3, r7, r3
    7142:	781b      	ldrb	r3, [r3, #0]
    7144:	b25b      	sxtb	r3, r3
    7146:	2b00      	cmp	r3, #0
    7148:	d146      	bne.n	71d8 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    714a:	230e      	movs	r3, #14
    714c:	18fb      	adds	r3, r7, r3
    714e:	881b      	ldrh	r3, [r3, #0]
    7150:	b29a      	uxth	r2, r3
    7152:	23f4      	movs	r3, #244	; 0xf4
    7154:	33ff      	adds	r3, #255	; 0xff
    7156:	429a      	cmp	r2, r3
    7158:	d915      	bls.n	7186 <hif_send+0x196>
				if(cnt < 501) {
    715a:	230e      	movs	r3, #14
    715c:	18fb      	adds	r3, r7, r3
    715e:	881b      	ldrh	r3, [r3, #0]
    7160:	b29a      	uxth	r2, r3
    7162:	23fa      	movs	r3, #250	; 0xfa
    7164:	005b      	lsls	r3, r3, #1
    7166:	429a      	cmp	r2, r3
    7168:	d80a      	bhi.n	7180 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    716a:	4b7a      	ldr	r3, [pc, #488]	; (7354 <hif_send+0x364>)
    716c:	0018      	movs	r0, r3
    716e:	4b7a      	ldr	r3, [pc, #488]	; (7358 <hif_send+0x368>)
    7170:	4798      	blx	r3
    7172:	4b7a      	ldr	r3, [pc, #488]	; (735c <hif_send+0x36c>)
    7174:	0018      	movs	r0, r3
    7176:	4b7a      	ldr	r3, [pc, #488]	; (7360 <hif_send+0x370>)
    7178:	4798      	blx	r3
    717a:	200d      	movs	r0, #13
    717c:	4b79      	ldr	r3, [pc, #484]	; (7364 <hif_send+0x374>)
    717e:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    7180:	2001      	movs	r0, #1
    7182:	4b79      	ldr	r3, [pc, #484]	; (7368 <hif_send+0x378>)
    7184:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    7186:	697b      	ldr	r3, [r7, #20]
    7188:	2202      	movs	r2, #2
    718a:	4013      	ands	r3, r2
    718c:	d113      	bne.n	71b6 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    718e:	231f      	movs	r3, #31
    7190:	18fc      	adds	r4, r7, r3
    7192:	2310      	movs	r3, #16
    7194:	18fb      	adds	r3, r7, r3
    7196:	4a75      	ldr	r2, [pc, #468]	; (736c <hif_send+0x37c>)
    7198:	0019      	movs	r1, r3
    719a:	0010      	movs	r0, r2
    719c:	4b6c      	ldr	r3, [pc, #432]	; (7350 <hif_send+0x360>)
    719e:	4798      	blx	r3
    71a0:	0003      	movs	r3, r0
    71a2:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    71a4:	231f      	movs	r3, #31
    71a6:	18fb      	adds	r3, r7, r3
    71a8:	781b      	ldrb	r3, [r3, #0]
    71aa:	b25b      	sxtb	r3, r3
    71ac:	2b00      	cmp	r3, #0
    71ae:	d015      	beq.n	71dc <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    71b0:	2300      	movs	r3, #0
    71b2:	613b      	str	r3, [r7, #16]
					goto ERR1;
    71b4:	e0b9      	b.n	732a <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    71b6:	230e      	movs	r3, #14
    71b8:	18fb      	adds	r3, r7, r3
    71ba:	881b      	ldrh	r3, [r3, #0]
    71bc:	b29b      	uxth	r3, r3
    71be:	3301      	adds	r3, #1
    71c0:	b29a      	uxth	r2, r3
    71c2:	230e      	movs	r3, #14
    71c4:	18fb      	adds	r3, r7, r3
    71c6:	801a      	strh	r2, [r3, #0]
    71c8:	230e      	movs	r3, #14
    71ca:	18fb      	adds	r3, r7, r3
    71cc:	881b      	ldrh	r3, [r3, #0]
    71ce:	b29b      	uxth	r3, r3
    71d0:	4a67      	ldr	r2, [pc, #412]	; (7370 <hif_send+0x380>)
    71d2:	4293      	cmp	r3, r2
    71d4:	d9a8      	bls.n	7128 <hif_send+0x138>
    71d6:	e002      	b.n	71de <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    71d8:	46c0      	nop			; (mov r8, r8)
    71da:	e000      	b.n	71de <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    71dc:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    71de:	693b      	ldr	r3, [r7, #16]
    71e0:	2b00      	cmp	r3, #0
    71e2:	d100      	bne.n	71e6 <hif_send+0x1f6>
    71e4:	e073      	b.n	72ce <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    71e6:	693b      	ldr	r3, [r7, #16]
    71e8:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    71ea:	2318      	movs	r3, #24
    71ec:	18fb      	adds	r3, r7, r3
    71ee:	885b      	ldrh	r3, [r3, #2]
    71f0:	b29a      	uxth	r2, r3
    71f2:	2318      	movs	r3, #24
    71f4:	18fb      	adds	r3, r7, r3
    71f6:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    71f8:	68bb      	ldr	r3, [r7, #8]
    71fa:	221f      	movs	r2, #31
    71fc:	18bc      	adds	r4, r7, r2
    71fe:	2218      	movs	r2, #24
    7200:	18b9      	adds	r1, r7, r2
    7202:	2208      	movs	r2, #8
    7204:	0018      	movs	r0, r3
    7206:	4b5b      	ldr	r3, [pc, #364]	; (7374 <hif_send+0x384>)
    7208:	4798      	blx	r3
    720a:	0003      	movs	r3, r0
    720c:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    720e:	231f      	movs	r3, #31
    7210:	18fb      	adds	r3, r7, r3
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	b25b      	sxtb	r3, r3
    7216:	2b00      	cmp	r3, #0
    7218:	d000      	beq.n	721c <hif_send+0x22c>
    721a:	e081      	b.n	7320 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    721c:	68bb      	ldr	r3, [r7, #8]
    721e:	3308      	adds	r3, #8
    7220:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    7222:	683b      	ldr	r3, [r7, #0]
    7224:	2b00      	cmp	r3, #0
    7226:	d015      	beq.n	7254 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    7228:	68b8      	ldr	r0, [r7, #8]
    722a:	1d3b      	adds	r3, r7, #4
    722c:	881a      	ldrh	r2, [r3, #0]
    722e:	231f      	movs	r3, #31
    7230:	18fc      	adds	r4, r7, r3
    7232:	683b      	ldr	r3, [r7, #0]
    7234:	0019      	movs	r1, r3
    7236:	4b4f      	ldr	r3, [pc, #316]	; (7374 <hif_send+0x384>)
    7238:	4798      	blx	r3
    723a:	0003      	movs	r3, r0
    723c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    723e:	231f      	movs	r3, #31
    7240:	18fb      	adds	r3, r7, r3
    7242:	781b      	ldrb	r3, [r3, #0]
    7244:	b25b      	sxtb	r3, r3
    7246:	2b00      	cmp	r3, #0
    7248:	d16c      	bne.n	7324 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    724a:	1d3b      	adds	r3, r7, #4
    724c:	881a      	ldrh	r2, [r3, #0]
    724e:	68bb      	ldr	r3, [r7, #8]
    7250:	18d3      	adds	r3, r2, r3
    7252:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    7254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7256:	2b00      	cmp	r3, #0
    7258:	d021      	beq.n	729e <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    725a:	2338      	movs	r3, #56	; 0x38
    725c:	18fb      	adds	r3, r7, r3
    725e:	881a      	ldrh	r2, [r3, #0]
    7260:	1d3b      	adds	r3, r7, #4
    7262:	881b      	ldrh	r3, [r3, #0]
    7264:	1ad3      	subs	r3, r2, r3
    7266:	001a      	movs	r2, r3
    7268:	68bb      	ldr	r3, [r7, #8]
    726a:	18d3      	adds	r3, r2, r3
    726c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    726e:	68b8      	ldr	r0, [r7, #8]
    7270:	2334      	movs	r3, #52	; 0x34
    7272:	18fb      	adds	r3, r7, r3
    7274:	881a      	ldrh	r2, [r3, #0]
    7276:	231f      	movs	r3, #31
    7278:	18fc      	adds	r4, r7, r3
    727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    727c:	0019      	movs	r1, r3
    727e:	4b3d      	ldr	r3, [pc, #244]	; (7374 <hif_send+0x384>)
    7280:	4798      	blx	r3
    7282:	0003      	movs	r3, r0
    7284:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    7286:	231f      	movs	r3, #31
    7288:	18fb      	adds	r3, r7, r3
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	b25b      	sxtb	r3, r3
    728e:	2b00      	cmp	r3, #0
    7290:	d14a      	bne.n	7328 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    7292:	2334      	movs	r3, #52	; 0x34
    7294:	18fb      	adds	r3, r7, r3
    7296:	881a      	ldrh	r2, [r3, #0]
    7298:	68bb      	ldr	r3, [r7, #8]
    729a:	18d3      	adds	r3, r2, r3
    729c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    729e:	693b      	ldr	r3, [r7, #16]
    72a0:	009b      	lsls	r3, r3, #2
    72a2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    72a4:	697b      	ldr	r3, [r7, #20]
    72a6:	2202      	movs	r2, #2
    72a8:	4313      	orrs	r3, r2
    72aa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    72ac:	697b      	ldr	r3, [r7, #20]
    72ae:	221f      	movs	r2, #31
    72b0:	18bc      	adds	r4, r7, r2
    72b2:	4a31      	ldr	r2, [pc, #196]	; (7378 <hif_send+0x388>)
    72b4:	0019      	movs	r1, r3
    72b6:	0010      	movs	r0, r2
    72b8:	4b23      	ldr	r3, [pc, #140]	; (7348 <hif_send+0x358>)
    72ba:	4798      	blx	r3
    72bc:	0003      	movs	r3, r0
    72be:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    72c0:	231f      	movs	r3, #31
    72c2:	18fb      	adds	r3, r7, r3
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	b25b      	sxtb	r3, r3
    72c8:	2b00      	cmp	r3, #0
    72ca:	d01a      	beq.n	7302 <hif_send+0x312>
    72cc:	e02d      	b.n	732a <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    72ce:	231f      	movs	r3, #31
    72d0:	18fc      	adds	r4, r7, r3
    72d2:	4b2a      	ldr	r3, [pc, #168]	; (737c <hif_send+0x38c>)
    72d4:	4798      	blx	r3
    72d6:	0003      	movs	r3, r0
    72d8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    72da:	231f      	movs	r3, #31
    72dc:	18fb      	adds	r3, r7, r3
    72de:	22fd      	movs	r2, #253	; 0xfd
    72e0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    72e2:	e024      	b.n	732e <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    72e4:	23cb      	movs	r3, #203	; 0xcb
    72e6:	005a      	lsls	r2, r3, #1
    72e8:	4925      	ldr	r1, [pc, #148]	; (7380 <hif_send+0x390>)
    72ea:	4b26      	ldr	r3, [pc, #152]	; (7384 <hif_send+0x394>)
    72ec:	0018      	movs	r0, r3
    72ee:	4b1a      	ldr	r3, [pc, #104]	; (7358 <hif_send+0x368>)
    72f0:	4798      	blx	r3
    72f2:	4b25      	ldr	r3, [pc, #148]	; (7388 <hif_send+0x398>)
    72f4:	0018      	movs	r0, r3
    72f6:	4b1a      	ldr	r3, [pc, #104]	; (7360 <hif_send+0x370>)
    72f8:	4798      	blx	r3
    72fa:	200d      	movs	r0, #13
    72fc:	4b19      	ldr	r3, [pc, #100]	; (7364 <hif_send+0x374>)
    72fe:	4798      	blx	r3
		goto ERR2;
    7300:	e015      	b.n	732e <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    7302:	231f      	movs	r3, #31
    7304:	18fc      	adds	r4, r7, r3
    7306:	4b1d      	ldr	r3, [pc, #116]	; (737c <hif_send+0x38c>)
    7308:	4798      	blx	r3
    730a:	0003      	movs	r3, r0
    730c:	7023      	strb	r3, [r4, #0]
	return ret;
    730e:	231f      	movs	r3, #31
    7310:	18fb      	adds	r3, r7, r3
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	b25b      	sxtb	r3, r3
    7316:	e00e      	b.n	7336 <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    7318:	46c0      	nop			; (mov r8, r8)
    731a:	e006      	b.n	732a <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    731c:	46c0      	nop			; (mov r8, r8)
    731e:	e004      	b.n	732a <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    7320:	46c0      	nop			; (mov r8, r8)
    7322:	e002      	b.n	732a <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    7324:	46c0      	nop			; (mov r8, r8)
    7326:	e000      	b.n	732a <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    7328:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    732a:	4b18      	ldr	r3, [pc, #96]	; (738c <hif_send+0x39c>)
    732c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    732e:	231f      	movs	r3, #31
    7330:	18fb      	adds	r3, r7, r3
    7332:	781b      	ldrb	r3, [r3, #0]
    7334:	b25b      	sxtb	r3, r3
}
    7336:	0018      	movs	r0, r3
    7338:	46bd      	mov	sp, r7
    733a:	b009      	add	sp, #36	; 0x24
    733c:	bd90      	pop	{r4, r7, pc}
    733e:	46c0      	nop			; (mov r8, r8)
    7340:	00006eb9 	.word	0x00006eb9
    7344:	0000108c 	.word	0x0000108c
    7348:	000091a9 	.word	0x000091a9
    734c:	00001078 	.word	0x00001078
    7350:	00009185 	.word	0x00009185
    7354:	0001f944 	.word	0x0001f944
    7358:	0001c37d 	.word	0x0001c37d
    735c:	0001f950 	.word	0x0001f950
    7360:	0001c499 	.word	0x0001c499
    7364:	0001c3b1 	.word	0x0001c3b1
    7368:	000064a1 	.word	0x000064a1
    736c:	00150400 	.word	0x00150400
    7370:	000003e7 	.word	0x000003e7
    7374:	000092f1 	.word	0x000092f1
    7378:	0000106c 	.word	0x0000106c
    737c:	00006f51 	.word	0x00006f51
    7380:	0001fc58 	.word	0x0001fc58
    7384:	0001f960 	.word	0x0001f960
    7388:	0001f974 	.word	0x0001f974
    738c:	00006f29 	.word	0x00006f29

00007390 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    7390:	b590      	push	{r4, r7, lr}
    7392:	b087      	sub	sp, #28
    7394:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    7396:	230f      	movs	r3, #15
    7398:	18fb      	adds	r3, r7, r3
    739a:	2200      	movs	r2, #0
    739c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    739e:	230f      	movs	r3, #15
    73a0:	18fc      	adds	r4, r7, r3
    73a2:	2308      	movs	r3, #8
    73a4:	18fb      	adds	r3, r7, r3
    73a6:	4ad6      	ldr	r2, [pc, #856]	; (7700 <hif_isr+0x370>)
    73a8:	0019      	movs	r1, r3
    73aa:	0010      	movs	r0, r2
    73ac:	4bd5      	ldr	r3, [pc, #852]	; (7704 <hif_isr+0x374>)
    73ae:	4798      	blx	r3
    73b0:	0003      	movs	r3, r0
    73b2:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    73b4:	230f      	movs	r3, #15
    73b6:	18fb      	adds	r3, r7, r3
    73b8:	781b      	ldrb	r3, [r3, #0]
    73ba:	b25b      	sxtb	r3, r3
    73bc:	2b00      	cmp	r3, #0
    73be:	d000      	beq.n	73c2 <hif_isr+0x32>
    73c0:	e217      	b.n	77f2 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    73c2:	68bb      	ldr	r3, [r7, #8]
    73c4:	2201      	movs	r2, #1
    73c6:	4013      	ands	r3, r2
    73c8:	d100      	bne.n	73cc <hif_isr+0x3c>
    73ca:	e1fd      	b.n	77c8 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    73cc:	2000      	movs	r0, #0
    73ce:	4bce      	ldr	r3, [pc, #824]	; (7708 <hif_isr+0x378>)
    73d0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    73d2:	68bb      	ldr	r3, [r7, #8]
    73d4:	2201      	movs	r2, #1
    73d6:	4393      	bics	r3, r2
    73d8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    73da:	68bb      	ldr	r3, [r7, #8]
    73dc:	220f      	movs	r2, #15
    73de:	18bc      	adds	r4, r7, r2
    73e0:	4ac7      	ldr	r2, [pc, #796]	; (7700 <hif_isr+0x370>)
    73e2:	0019      	movs	r1, r3
    73e4:	0010      	movs	r0, r2
    73e6:	4bc9      	ldr	r3, [pc, #804]	; (770c <hif_isr+0x37c>)
    73e8:	4798      	blx	r3
    73ea:	0003      	movs	r3, r0
    73ec:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    73ee:	230f      	movs	r3, #15
    73f0:	18fb      	adds	r3, r7, r3
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	b25b      	sxtb	r3, r3
    73f6:	2b00      	cmp	r3, #0
    73f8:	d000      	beq.n	73fc <hif_isr+0x6c>
    73fa:	e208      	b.n	780e <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    73fc:	4bc4      	ldr	r3, [pc, #784]	; (7710 <hif_isr+0x380>)
    73fe:	2201      	movs	r2, #1
    7400:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    7402:	68bb      	ldr	r3, [r7, #8]
    7404:	089b      	lsrs	r3, r3, #2
    7406:	b29a      	uxth	r2, r3
    7408:	230c      	movs	r3, #12
    740a:	18fb      	adds	r3, r7, r3
    740c:	0512      	lsls	r2, r2, #20
    740e:	0d12      	lsrs	r2, r2, #20
    7410:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    7412:	230c      	movs	r3, #12
    7414:	18fb      	adds	r3, r7, r3
    7416:	881b      	ldrh	r3, [r3, #0]
    7418:	2b00      	cmp	r3, #0
    741a:	d100      	bne.n	741e <hif_isr+0x8e>
    741c:	e1c1      	b.n	77a2 <hif_isr+0x412>
				uint32 address = 0;
    741e:	2300      	movs	r3, #0
    7420:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    7422:	230f      	movs	r3, #15
    7424:	18fc      	adds	r4, r7, r3
    7426:	003b      	movs	r3, r7
    7428:	4aba      	ldr	r2, [pc, #744]	; (7714 <hif_isr+0x384>)
    742a:	0019      	movs	r1, r3
    742c:	0010      	movs	r0, r2
    742e:	4bb5      	ldr	r3, [pc, #724]	; (7704 <hif_isr+0x374>)
    7430:	4798      	blx	r3
    7432:	0003      	movs	r3, r0
    7434:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    7436:	230f      	movs	r3, #15
    7438:	18fb      	adds	r3, r7, r3
    743a:	781b      	ldrb	r3, [r3, #0]
    743c:	b25b      	sxtb	r3, r3
    743e:	2b00      	cmp	r3, #0
    7440:	d012      	beq.n	7468 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    7442:	23c8      	movs	r3, #200	; 0xc8
    7444:	33ff      	adds	r3, #255	; 0xff
    7446:	001a      	movs	r2, r3
    7448:	49b3      	ldr	r1, [pc, #716]	; (7718 <hif_isr+0x388>)
    744a:	4bb4      	ldr	r3, [pc, #720]	; (771c <hif_isr+0x38c>)
    744c:	0018      	movs	r0, r3
    744e:	4bb4      	ldr	r3, [pc, #720]	; (7720 <hif_isr+0x390>)
    7450:	4798      	blx	r3
    7452:	4bb4      	ldr	r3, [pc, #720]	; (7724 <hif_isr+0x394>)
    7454:	0018      	movs	r0, r3
    7456:	4bb4      	ldr	r3, [pc, #720]	; (7728 <hif_isr+0x398>)
    7458:	4798      	blx	r3
    745a:	200d      	movs	r0, #13
    745c:	4bb3      	ldr	r3, [pc, #716]	; (772c <hif_isr+0x39c>)
    745e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    7460:	2001      	movs	r0, #1
    7462:	4ba9      	ldr	r3, [pc, #676]	; (7708 <hif_isr+0x378>)
    7464:	4798      	blx	r3
					goto ERR1;
    7466:	e1d3      	b.n	7810 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    7468:	683a      	ldr	r2, [r7, #0]
    746a:	4ba9      	ldr	r3, [pc, #676]	; (7710 <hif_isr+0x380>)
    746c:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    746e:	230c      	movs	r3, #12
    7470:	18fb      	adds	r3, r7, r3
    7472:	881a      	ldrh	r2, [r3, #0]
    7474:	4ba6      	ldr	r3, [pc, #664]	; (7710 <hif_isr+0x380>)
    7476:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    7478:	683b      	ldr	r3, [r7, #0]
    747a:	220f      	movs	r2, #15
    747c:	18bc      	adds	r4, r7, r2
    747e:	1d39      	adds	r1, r7, #4
    7480:	2204      	movs	r2, #4
    7482:	0018      	movs	r0, r3
    7484:	4baa      	ldr	r3, [pc, #680]	; (7730 <hif_isr+0x3a0>)
    7486:	4798      	blx	r3
    7488:	0003      	movs	r3, r0
    748a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    748c:	1d3b      	adds	r3, r7, #4
    748e:	885b      	ldrh	r3, [r3, #2]
    7490:	b29a      	uxth	r2, r3
    7492:	1d3b      	adds	r3, r7, #4
    7494:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    7496:	230f      	movs	r3, #15
    7498:	18fb      	adds	r3, r7, r3
    749a:	781b      	ldrb	r3, [r3, #0]
    749c:	b25b      	sxtb	r3, r3
    749e:	2b00      	cmp	r3, #0
    74a0:	d012      	beq.n	74c8 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    74a2:	23d2      	movs	r3, #210	; 0xd2
    74a4:	33ff      	adds	r3, #255	; 0xff
    74a6:	001a      	movs	r2, r3
    74a8:	499b      	ldr	r1, [pc, #620]	; (7718 <hif_isr+0x388>)
    74aa:	4b9c      	ldr	r3, [pc, #624]	; (771c <hif_isr+0x38c>)
    74ac:	0018      	movs	r0, r3
    74ae:	4b9c      	ldr	r3, [pc, #624]	; (7720 <hif_isr+0x390>)
    74b0:	4798      	blx	r3
    74b2:	4ba0      	ldr	r3, [pc, #640]	; (7734 <hif_isr+0x3a4>)
    74b4:	0018      	movs	r0, r3
    74b6:	4b9c      	ldr	r3, [pc, #624]	; (7728 <hif_isr+0x398>)
    74b8:	4798      	blx	r3
    74ba:	200d      	movs	r0, #13
    74bc:	4b9b      	ldr	r3, [pc, #620]	; (772c <hif_isr+0x39c>)
    74be:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    74c0:	2001      	movs	r0, #1
    74c2:	4b91      	ldr	r3, [pc, #580]	; (7708 <hif_isr+0x378>)
    74c4:	4798      	blx	r3
					goto ERR1;
    74c6:	e1a3      	b.n	7810 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    74c8:	1d3b      	adds	r3, r7, #4
    74ca:	885b      	ldrh	r3, [r3, #2]
    74cc:	b29b      	uxth	r3, r3
    74ce:	220c      	movs	r2, #12
    74d0:	18ba      	adds	r2, r7, r2
    74d2:	8812      	ldrh	r2, [r2, #0]
    74d4:	429a      	cmp	r2, r3
    74d6:	d02d      	beq.n	7534 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    74d8:	230c      	movs	r3, #12
    74da:	18fb      	adds	r3, r7, r3
    74dc:	881b      	ldrh	r3, [r3, #0]
    74de:	1d3a      	adds	r2, r7, #4
    74e0:	8852      	ldrh	r2, [r2, #2]
    74e2:	b292      	uxth	r2, r2
    74e4:	1a9b      	subs	r3, r3, r2
    74e6:	2b04      	cmp	r3, #4
    74e8:	dd24      	ble.n	7534 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    74ea:	23ed      	movs	r3, #237	; 0xed
    74ec:	005a      	lsls	r2, r3, #1
    74ee:	498a      	ldr	r1, [pc, #552]	; (7718 <hif_isr+0x388>)
    74f0:	4b8a      	ldr	r3, [pc, #552]	; (771c <hif_isr+0x38c>)
    74f2:	0018      	movs	r0, r3
    74f4:	4b8a      	ldr	r3, [pc, #552]	; (7720 <hif_isr+0x390>)
    74f6:	4798      	blx	r3
    74f8:	230c      	movs	r3, #12
    74fa:	18fb      	adds	r3, r7, r3
    74fc:	8819      	ldrh	r1, [r3, #0]
    74fe:	1d3b      	adds	r3, r7, #4
    7500:	885b      	ldrh	r3, [r3, #2]
    7502:	b29b      	uxth	r3, r3
    7504:	001a      	movs	r2, r3
    7506:	1d3b      	adds	r3, r7, #4
    7508:	781b      	ldrb	r3, [r3, #0]
    750a:	b2db      	uxtb	r3, r3
    750c:	001c      	movs	r4, r3
    750e:	1d3b      	adds	r3, r7, #4
    7510:	785b      	ldrb	r3, [r3, #1]
    7512:	b2db      	uxtb	r3, r3
    7514:	4888      	ldr	r0, [pc, #544]	; (7738 <hif_isr+0x3a8>)
    7516:	9300      	str	r3, [sp, #0]
    7518:	0023      	movs	r3, r4
    751a:	4c81      	ldr	r4, [pc, #516]	; (7720 <hif_isr+0x390>)
    751c:	47a0      	blx	r4
    751e:	200d      	movs	r0, #13
    7520:	4b82      	ldr	r3, [pc, #520]	; (772c <hif_isr+0x39c>)
    7522:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    7524:	2001      	movs	r0, #1
    7526:	4b78      	ldr	r3, [pc, #480]	; (7708 <hif_isr+0x378>)
    7528:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    752a:	230f      	movs	r3, #15
    752c:	18fb      	adds	r3, r7, r3
    752e:	22fa      	movs	r2, #250	; 0xfa
    7530:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    7532:	e16d      	b.n	7810 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    7534:	1d3b      	adds	r3, r7, #4
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	b2db      	uxtb	r3, r3
    753a:	2b01      	cmp	r3, #1
    753c:	d120      	bne.n	7580 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    753e:	4b74      	ldr	r3, [pc, #464]	; (7710 <hif_isr+0x380>)
    7540:	68db      	ldr	r3, [r3, #12]
    7542:	2b00      	cmp	r3, #0
    7544:	d00d      	beq.n	7562 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    7546:	4b72      	ldr	r3, [pc, #456]	; (7710 <hif_isr+0x380>)
    7548:	68db      	ldr	r3, [r3, #12]
    754a:	1d3a      	adds	r2, r7, #4
    754c:	7852      	ldrb	r2, [r2, #1]
    754e:	b2d0      	uxtb	r0, r2
    7550:	1d3a      	adds	r2, r7, #4
    7552:	8852      	ldrh	r2, [r2, #2]
    7554:	b292      	uxth	r2, r2
    7556:	3a08      	subs	r2, #8
    7558:	b291      	uxth	r1, r2
    755a:	683a      	ldr	r2, [r7, #0]
    755c:	3208      	adds	r2, #8
    755e:	4798      	blx	r3
    7560:	e0fe      	b.n	7760 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    7562:	23f3      	movs	r3, #243	; 0xf3
    7564:	005a      	lsls	r2, r3, #1
    7566:	496c      	ldr	r1, [pc, #432]	; (7718 <hif_isr+0x388>)
    7568:	4b6c      	ldr	r3, [pc, #432]	; (771c <hif_isr+0x38c>)
    756a:	0018      	movs	r0, r3
    756c:	4b6c      	ldr	r3, [pc, #432]	; (7720 <hif_isr+0x390>)
    756e:	4798      	blx	r3
    7570:	4b72      	ldr	r3, [pc, #456]	; (773c <hif_isr+0x3ac>)
    7572:	0018      	movs	r0, r3
    7574:	4b6c      	ldr	r3, [pc, #432]	; (7728 <hif_isr+0x398>)
    7576:	4798      	blx	r3
    7578:	200d      	movs	r0, #13
    757a:	4b6c      	ldr	r3, [pc, #432]	; (772c <hif_isr+0x39c>)
    757c:	4798      	blx	r3
    757e:	e0ef      	b.n	7760 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    7580:	1d3b      	adds	r3, r7, #4
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	b2db      	uxtb	r3, r3
    7586:	2b02      	cmp	r3, #2
    7588:	d120      	bne.n	75cc <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    758a:	4b61      	ldr	r3, [pc, #388]	; (7710 <hif_isr+0x380>)
    758c:	691b      	ldr	r3, [r3, #16]
    758e:	2b00      	cmp	r3, #0
    7590:	d00d      	beq.n	75ae <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    7592:	4b5f      	ldr	r3, [pc, #380]	; (7710 <hif_isr+0x380>)
    7594:	691b      	ldr	r3, [r3, #16]
    7596:	1d3a      	adds	r2, r7, #4
    7598:	7852      	ldrb	r2, [r2, #1]
    759a:	b2d0      	uxtb	r0, r2
    759c:	1d3a      	adds	r2, r7, #4
    759e:	8852      	ldrh	r2, [r2, #2]
    75a0:	b292      	uxth	r2, r2
    75a2:	3a08      	subs	r2, #8
    75a4:	b291      	uxth	r1, r2
    75a6:	683a      	ldr	r2, [r7, #0]
    75a8:	3208      	adds	r2, #8
    75aa:	4798      	blx	r3
    75ac:	e0d8      	b.n	7760 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    75ae:	23f7      	movs	r3, #247	; 0xf7
    75b0:	005a      	lsls	r2, r3, #1
    75b2:	4959      	ldr	r1, [pc, #356]	; (7718 <hif_isr+0x388>)
    75b4:	4b59      	ldr	r3, [pc, #356]	; (771c <hif_isr+0x38c>)
    75b6:	0018      	movs	r0, r3
    75b8:	4b59      	ldr	r3, [pc, #356]	; (7720 <hif_isr+0x390>)
    75ba:	4798      	blx	r3
    75bc:	4b60      	ldr	r3, [pc, #384]	; (7740 <hif_isr+0x3b0>)
    75be:	0018      	movs	r0, r3
    75c0:	4b59      	ldr	r3, [pc, #356]	; (7728 <hif_isr+0x398>)
    75c2:	4798      	blx	r3
    75c4:	200d      	movs	r0, #13
    75c6:	4b59      	ldr	r3, [pc, #356]	; (772c <hif_isr+0x39c>)
    75c8:	4798      	blx	r3
    75ca:	e0c9      	b.n	7760 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    75cc:	1d3b      	adds	r3, r7, #4
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	b2db      	uxtb	r3, r3
    75d2:	2b04      	cmp	r3, #4
    75d4:	d120      	bne.n	7618 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    75d6:	4b4e      	ldr	r3, [pc, #312]	; (7710 <hif_isr+0x380>)
    75d8:	695b      	ldr	r3, [r3, #20]
    75da:	2b00      	cmp	r3, #0
    75dc:	d00d      	beq.n	75fa <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    75de:	4b4c      	ldr	r3, [pc, #304]	; (7710 <hif_isr+0x380>)
    75e0:	695b      	ldr	r3, [r3, #20]
    75e2:	1d3a      	adds	r2, r7, #4
    75e4:	7852      	ldrb	r2, [r2, #1]
    75e6:	b2d0      	uxtb	r0, r2
    75e8:	1d3a      	adds	r2, r7, #4
    75ea:	8852      	ldrh	r2, [r2, #2]
    75ec:	b292      	uxth	r2, r2
    75ee:	3a08      	subs	r2, #8
    75f0:	b291      	uxth	r1, r2
    75f2:	683a      	ldr	r2, [r7, #0]
    75f4:	3208      	adds	r2, #8
    75f6:	4798      	blx	r3
    75f8:	e0b2      	b.n	7760 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    75fa:	23fb      	movs	r3, #251	; 0xfb
    75fc:	005a      	lsls	r2, r3, #1
    75fe:	4946      	ldr	r1, [pc, #280]	; (7718 <hif_isr+0x388>)
    7600:	4b46      	ldr	r3, [pc, #280]	; (771c <hif_isr+0x38c>)
    7602:	0018      	movs	r0, r3
    7604:	4b46      	ldr	r3, [pc, #280]	; (7720 <hif_isr+0x390>)
    7606:	4798      	blx	r3
    7608:	4b4e      	ldr	r3, [pc, #312]	; (7744 <hif_isr+0x3b4>)
    760a:	0018      	movs	r0, r3
    760c:	4b46      	ldr	r3, [pc, #280]	; (7728 <hif_isr+0x398>)
    760e:	4798      	blx	r3
    7610:	200d      	movs	r0, #13
    7612:	4b46      	ldr	r3, [pc, #280]	; (772c <hif_isr+0x39c>)
    7614:	4798      	blx	r3
    7616:	e0a3      	b.n	7760 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    7618:	1d3b      	adds	r3, r7, #4
    761a:	781b      	ldrb	r3, [r3, #0]
    761c:	b2db      	uxtb	r3, r3
    761e:	2b06      	cmp	r3, #6
    7620:	d11f      	bne.n	7662 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    7622:	4b3b      	ldr	r3, [pc, #236]	; (7710 <hif_isr+0x380>)
    7624:	6a1b      	ldr	r3, [r3, #32]
    7626:	2b00      	cmp	r3, #0
    7628:	d00d      	beq.n	7646 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    762a:	4b39      	ldr	r3, [pc, #228]	; (7710 <hif_isr+0x380>)
    762c:	6a1b      	ldr	r3, [r3, #32]
    762e:	1d3a      	adds	r2, r7, #4
    7630:	7852      	ldrb	r2, [r2, #1]
    7632:	b2d0      	uxtb	r0, r2
    7634:	1d3a      	adds	r2, r7, #4
    7636:	8852      	ldrh	r2, [r2, #2]
    7638:	b292      	uxth	r2, r2
    763a:	3a08      	subs	r2, #8
    763c:	b291      	uxth	r1, r2
    763e:	683a      	ldr	r2, [r7, #0]
    7640:	3208      	adds	r2, #8
    7642:	4798      	blx	r3
    7644:	e08c      	b.n	7760 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    7646:	4a40      	ldr	r2, [pc, #256]	; (7748 <hif_isr+0x3b8>)
    7648:	4933      	ldr	r1, [pc, #204]	; (7718 <hif_isr+0x388>)
    764a:	4b34      	ldr	r3, [pc, #208]	; (771c <hif_isr+0x38c>)
    764c:	0018      	movs	r0, r3
    764e:	4b34      	ldr	r3, [pc, #208]	; (7720 <hif_isr+0x390>)
    7650:	4798      	blx	r3
    7652:	4b3e      	ldr	r3, [pc, #248]	; (774c <hif_isr+0x3bc>)
    7654:	0018      	movs	r0, r3
    7656:	4b34      	ldr	r3, [pc, #208]	; (7728 <hif_isr+0x398>)
    7658:	4798      	blx	r3
    765a:	200d      	movs	r0, #13
    765c:	4b33      	ldr	r3, [pc, #204]	; (772c <hif_isr+0x39c>)
    765e:	4798      	blx	r3
    7660:	e07e      	b.n	7760 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    7662:	1d3b      	adds	r3, r7, #4
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	b2db      	uxtb	r3, r3
    7668:	2b07      	cmp	r3, #7
    766a:	d11f      	bne.n	76ac <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    766c:	4b28      	ldr	r3, [pc, #160]	; (7710 <hif_isr+0x380>)
    766e:	699b      	ldr	r3, [r3, #24]
    7670:	2b00      	cmp	r3, #0
    7672:	d00d      	beq.n	7690 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    7674:	4b26      	ldr	r3, [pc, #152]	; (7710 <hif_isr+0x380>)
    7676:	699b      	ldr	r3, [r3, #24]
    7678:	1d3a      	adds	r2, r7, #4
    767a:	7852      	ldrb	r2, [r2, #1]
    767c:	b2d0      	uxtb	r0, r2
    767e:	1d3a      	adds	r2, r7, #4
    7680:	8852      	ldrh	r2, [r2, #2]
    7682:	b292      	uxth	r2, r2
    7684:	3a08      	subs	r2, #8
    7686:	b291      	uxth	r1, r2
    7688:	683a      	ldr	r2, [r7, #0]
    768a:	3208      	adds	r2, #8
    768c:	4798      	blx	r3
    768e:	e067      	b.n	7760 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    7690:	4a2f      	ldr	r2, [pc, #188]	; (7750 <hif_isr+0x3c0>)
    7692:	4921      	ldr	r1, [pc, #132]	; (7718 <hif_isr+0x388>)
    7694:	4b21      	ldr	r3, [pc, #132]	; (771c <hif_isr+0x38c>)
    7696:	0018      	movs	r0, r3
    7698:	4b21      	ldr	r3, [pc, #132]	; (7720 <hif_isr+0x390>)
    769a:	4798      	blx	r3
    769c:	4b2d      	ldr	r3, [pc, #180]	; (7754 <hif_isr+0x3c4>)
    769e:	0018      	movs	r0, r3
    76a0:	4b21      	ldr	r3, [pc, #132]	; (7728 <hif_isr+0x398>)
    76a2:	4798      	blx	r3
    76a4:	200d      	movs	r0, #13
    76a6:	4b21      	ldr	r3, [pc, #132]	; (772c <hif_isr+0x39c>)
    76a8:	4798      	blx	r3
    76aa:	e059      	b.n	7760 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    76ac:	1d3b      	adds	r3, r7, #4
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	b2db      	uxtb	r3, r3
    76b2:	2b05      	cmp	r3, #5
    76b4:	d111      	bne.n	76da <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    76b6:	4b16      	ldr	r3, [pc, #88]	; (7710 <hif_isr+0x380>)
    76b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76ba:	2b00      	cmp	r3, #0
    76bc:	d050      	beq.n	7760 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    76be:	4b14      	ldr	r3, [pc, #80]	; (7710 <hif_isr+0x380>)
    76c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76c2:	1d3a      	adds	r2, r7, #4
    76c4:	7852      	ldrb	r2, [r2, #1]
    76c6:	b2d0      	uxtb	r0, r2
    76c8:	1d3a      	adds	r2, r7, #4
    76ca:	8852      	ldrh	r2, [r2, #2]
    76cc:	b292      	uxth	r2, r2
    76ce:	3a08      	subs	r2, #8
    76d0:	b291      	uxth	r1, r2
    76d2:	683a      	ldr	r2, [r7, #0]
    76d4:	3208      	adds	r2, #8
    76d6:	4798      	blx	r3
    76d8:	e042      	b.n	7760 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    76da:	4a1f      	ldr	r2, [pc, #124]	; (7758 <hif_isr+0x3c8>)
    76dc:	490e      	ldr	r1, [pc, #56]	; (7718 <hif_isr+0x388>)
    76de:	4b0f      	ldr	r3, [pc, #60]	; (771c <hif_isr+0x38c>)
    76e0:	0018      	movs	r0, r3
    76e2:	4b0f      	ldr	r3, [pc, #60]	; (7720 <hif_isr+0x390>)
    76e4:	4798      	blx	r3
    76e6:	4b1d      	ldr	r3, [pc, #116]	; (775c <hif_isr+0x3cc>)
    76e8:	0018      	movs	r0, r3
    76ea:	4b0f      	ldr	r3, [pc, #60]	; (7728 <hif_isr+0x398>)
    76ec:	4798      	blx	r3
    76ee:	200d      	movs	r0, #13
    76f0:	4b0e      	ldr	r3, [pc, #56]	; (772c <hif_isr+0x39c>)
    76f2:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    76f4:	230f      	movs	r3, #15
    76f6:	18fb      	adds	r3, r7, r3
    76f8:	22fa      	movs	r2, #250	; 0xfa
    76fa:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    76fc:	e088      	b.n	7810 <hif_isr+0x480>
    76fe:	46c0      	nop			; (mov r8, r8)
    7700:	00001070 	.word	0x00001070
    7704:	00009185 	.word	0x00009185
    7708:	00006541 	.word	0x00006541
    770c:	000091a9 	.word	0x000091a9
    7710:	20002a30 	.word	0x20002a30
    7714:	00001084 	.word	0x00001084
    7718:	0001fc64 	.word	0x0001fc64
    771c:	0001f960 	.word	0x0001f960
    7720:	0001c37d 	.word	0x0001c37d
    7724:	0001f990 	.word	0x0001f990
    7728:	0001c499 	.word	0x0001c499
    772c:	0001c3b1 	.word	0x0001c3b1
    7730:	000091f9 	.word	0x000091f9
    7734:	0001f9b4 	.word	0x0001f9b4
    7738:	0001f9cc 	.word	0x0001f9cc
    773c:	0001fa0c 	.word	0x0001fa0c
    7740:	0001fa2c 	.word	0x0001fa2c
    7744:	0001fa50 	.word	0x0001fa50
    7748:	000001ff 	.word	0x000001ff
    774c:	0001fa70 	.word	0x0001fa70
    7750:	00000206 	.word	0x00000206
    7754:	0001fa94 	.word	0x0001fa94
    7758:	0000020f 	.word	0x0000020f
    775c:	0001fab8 	.word	0x0001fab8
				}
				if(gstrHifCxt.u8HifRXDone)
    7760:	4b2f      	ldr	r3, [pc, #188]	; (7820 <hif_isr+0x490>)
    7762:	789b      	ldrb	r3, [r3, #2]
    7764:	b2db      	uxtb	r3, r3
    7766:	2b00      	cmp	r3, #0
    7768:	d052      	beq.n	7810 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    776a:	4a2e      	ldr	r2, [pc, #184]	; (7824 <hif_isr+0x494>)
    776c:	492e      	ldr	r1, [pc, #184]	; (7828 <hif_isr+0x498>)
    776e:	4b2f      	ldr	r3, [pc, #188]	; (782c <hif_isr+0x49c>)
    7770:	0018      	movs	r0, r3
    7772:	4b2f      	ldr	r3, [pc, #188]	; (7830 <hif_isr+0x4a0>)
    7774:	4798      	blx	r3
    7776:	1d3b      	adds	r3, r7, #4
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	b2db      	uxtb	r3, r3
    777c:	0019      	movs	r1, r3
    777e:	1d3b      	adds	r3, r7, #4
    7780:	785b      	ldrb	r3, [r3, #1]
    7782:	b2db      	uxtb	r3, r3
    7784:	001a      	movs	r2, r3
    7786:	4b2b      	ldr	r3, [pc, #172]	; (7834 <hif_isr+0x4a4>)
    7788:	0018      	movs	r0, r3
    778a:	4b29      	ldr	r3, [pc, #164]	; (7830 <hif_isr+0x4a0>)
    778c:	4798      	blx	r3
    778e:	200d      	movs	r0, #13
    7790:	4b29      	ldr	r3, [pc, #164]	; (7838 <hif_isr+0x4a8>)
    7792:	4798      	blx	r3
					ret = hif_set_rx_done();
    7794:	230f      	movs	r3, #15
    7796:	18fc      	adds	r4, r7, r3
    7798:	4b28      	ldr	r3, [pc, #160]	; (783c <hif_isr+0x4ac>)
    779a:	4798      	blx	r3
    779c:	0003      	movs	r3, r0
    779e:	7023      	strb	r3, [r4, #0]
    77a0:	e036      	b.n	7810 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    77a2:	2387      	movs	r3, #135	; 0x87
    77a4:	009a      	lsls	r2, r3, #2
    77a6:	4920      	ldr	r1, [pc, #128]	; (7828 <hif_isr+0x498>)
    77a8:	4b20      	ldr	r3, [pc, #128]	; (782c <hif_isr+0x49c>)
    77aa:	0018      	movs	r0, r3
    77ac:	4b20      	ldr	r3, [pc, #128]	; (7830 <hif_isr+0x4a0>)
    77ae:	4798      	blx	r3
    77b0:	4b23      	ldr	r3, [pc, #140]	; (7840 <hif_isr+0x4b0>)
    77b2:	0018      	movs	r0, r3
    77b4:	4b23      	ldr	r3, [pc, #140]	; (7844 <hif_isr+0x4b4>)
    77b6:	4798      	blx	r3
    77b8:	200d      	movs	r0, #13
    77ba:	4b1f      	ldr	r3, [pc, #124]	; (7838 <hif_isr+0x4a8>)
    77bc:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    77be:	230f      	movs	r3, #15
    77c0:	18fb      	adds	r3, r7, r3
    77c2:	22fe      	movs	r2, #254	; 0xfe
    77c4:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    77c6:	e023      	b.n	7810 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    77c8:	2389      	movs	r3, #137	; 0x89
    77ca:	009a      	lsls	r2, r3, #2
    77cc:	4916      	ldr	r1, [pc, #88]	; (7828 <hif_isr+0x498>)
    77ce:	4b17      	ldr	r3, [pc, #92]	; (782c <hif_isr+0x49c>)
    77d0:	0018      	movs	r0, r3
    77d2:	4b17      	ldr	r3, [pc, #92]	; (7830 <hif_isr+0x4a0>)
    77d4:	4798      	blx	r3
    77d6:	68ba      	ldr	r2, [r7, #8]
    77d8:	4b1b      	ldr	r3, [pc, #108]	; (7848 <hif_isr+0x4b8>)
    77da:	0011      	movs	r1, r2
    77dc:	0018      	movs	r0, r3
    77de:	4b14      	ldr	r3, [pc, #80]	; (7830 <hif_isr+0x4a0>)
    77e0:	4798      	blx	r3
    77e2:	200d      	movs	r0, #13
    77e4:	4b14      	ldr	r3, [pc, #80]	; (7838 <hif_isr+0x4a8>)
    77e6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    77e8:	230f      	movs	r3, #15
    77ea:	18fb      	adds	r3, r7, r3
    77ec:	22f4      	movs	r2, #244	; 0xf4
    77ee:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    77f0:	e00e      	b.n	7810 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    77f2:	4a16      	ldr	r2, [pc, #88]	; (784c <hif_isr+0x4bc>)
    77f4:	490c      	ldr	r1, [pc, #48]	; (7828 <hif_isr+0x498>)
    77f6:	4b0d      	ldr	r3, [pc, #52]	; (782c <hif_isr+0x49c>)
    77f8:	0018      	movs	r0, r3
    77fa:	4b0d      	ldr	r3, [pc, #52]	; (7830 <hif_isr+0x4a0>)
    77fc:	4798      	blx	r3
    77fe:	4b14      	ldr	r3, [pc, #80]	; (7850 <hif_isr+0x4c0>)
    7800:	0018      	movs	r0, r3
    7802:	4b10      	ldr	r3, [pc, #64]	; (7844 <hif_isr+0x4b4>)
    7804:	4798      	blx	r3
    7806:	200d      	movs	r0, #13
    7808:	4b0b      	ldr	r3, [pc, #44]	; (7838 <hif_isr+0x4a8>)
    780a:	4798      	blx	r3
		goto ERR1;
    780c:	e000      	b.n	7810 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    780e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    7810:	230f      	movs	r3, #15
    7812:	18fb      	adds	r3, r7, r3
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	b25b      	sxtb	r3, r3
}
    7818:	0018      	movs	r0, r3
    781a:	46bd      	mov	sp, r7
    781c:	b005      	add	sp, #20
    781e:	bd90      	pop	{r4, r7, pc}
    7820:	20002a30 	.word	0x20002a30
    7824:	00000215 	.word	0x00000215
    7828:	0001fc64 	.word	0x0001fc64
    782c:	0001f960 	.word	0x0001f960
    7830:	0001c37d 	.word	0x0001c37d
    7834:	0001fad0 	.word	0x0001fad0
    7838:	0001c3b1 	.word	0x0001c3b1
    783c:	00006e29 	.word	0x00006e29
    7840:	0001fafc 	.word	0x0001fafc
    7844:	0001c499 	.word	0x0001c499
    7848:	0001fb10 	.word	0x0001fb10
    784c:	0000022d 	.word	0x0000022d
    7850:	0001fb2c 	.word	0x0001fb2c

00007854 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    7854:	b590      	push	{r4, r7, lr}
    7856:	b083      	sub	sp, #12
    7858:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    785a:	1dfb      	adds	r3, r7, #7
    785c:	2200      	movs	r2, #0
    785e:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    7860:	e023      	b.n	78aa <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    7862:	4b18      	ldr	r3, [pc, #96]	; (78c4 <hif_handle_isr+0x70>)
    7864:	78db      	ldrb	r3, [r3, #3]
    7866:	b2db      	uxtb	r3, r3
    7868:	3b01      	subs	r3, #1
    786a:	b2da      	uxtb	r2, r3
    786c:	4b15      	ldr	r3, [pc, #84]	; (78c4 <hif_handle_isr+0x70>)
    786e:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    7870:	1dfc      	adds	r4, r7, #7
    7872:	4b15      	ldr	r3, [pc, #84]	; (78c8 <hif_handle_isr+0x74>)
    7874:	4798      	blx	r3
    7876:	0003      	movs	r3, r0
    7878:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    787a:	1dfb      	adds	r3, r7, #7
    787c:	781b      	ldrb	r3, [r3, #0]
    787e:	b25b      	sxtb	r3, r3
    7880:	2b00      	cmp	r3, #0
    7882:	d100      	bne.n	7886 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    7884:	e011      	b.n	78aa <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    7886:	4a11      	ldr	r2, [pc, #68]	; (78cc <hif_handle_isr+0x78>)
    7888:	4911      	ldr	r1, [pc, #68]	; (78d0 <hif_handle_isr+0x7c>)
    788a:	4b12      	ldr	r3, [pc, #72]	; (78d4 <hif_handle_isr+0x80>)
    788c:	0018      	movs	r0, r3
    788e:	4b12      	ldr	r3, [pc, #72]	; (78d8 <hif_handle_isr+0x84>)
    7890:	4798      	blx	r3
    7892:	1dfb      	adds	r3, r7, #7
    7894:	2200      	movs	r2, #0
    7896:	569a      	ldrsb	r2, [r3, r2]
    7898:	4b10      	ldr	r3, [pc, #64]	; (78dc <hif_handle_isr+0x88>)
    789a:	0011      	movs	r1, r2
    789c:	0018      	movs	r0, r3
    789e:	4b0e      	ldr	r3, [pc, #56]	; (78d8 <hif_handle_isr+0x84>)
    78a0:	4798      	blx	r3
    78a2:	200d      	movs	r0, #13
    78a4:	4b0e      	ldr	r3, [pc, #56]	; (78e0 <hif_handle_isr+0x8c>)
    78a6:	4798      	blx	r3
			ret = hif_isr();
    78a8:	e7e2      	b.n	7870 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    78aa:	4b06      	ldr	r3, [pc, #24]	; (78c4 <hif_handle_isr+0x70>)
    78ac:	78db      	ldrb	r3, [r3, #3]
    78ae:	b2db      	uxtb	r3, r3
    78b0:	2b00      	cmp	r3, #0
    78b2:	d1d6      	bne.n	7862 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    78b4:	1dfb      	adds	r3, r7, #7
    78b6:	781b      	ldrb	r3, [r3, #0]
    78b8:	b25b      	sxtb	r3, r3
}
    78ba:	0018      	movs	r0, r3
    78bc:	46bd      	mov	sp, r7
    78be:	b003      	add	sp, #12
    78c0:	bd90      	pop	{r4, r7, pc}
    78c2:	46c0      	nop			; (mov r8, r8)
    78c4:	20002a30 	.word	0x20002a30
    78c8:	00007391 	.word	0x00007391
    78cc:	0000024a 	.word	0x0000024a
    78d0:	0001fc6c 	.word	0x0001fc6c
    78d4:	0001f960 	.word	0x0001f960
    78d8:	0001c37d 	.word	0x0001c37d
    78dc:	0001fb50 	.word	0x0001fb50
    78e0:	0001c3b1 	.word	0x0001c3b1

000078e4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    78e4:	b590      	push	{r4, r7, lr}
    78e6:	b087      	sub	sp, #28
    78e8:	af00      	add	r7, sp, #0
    78ea:	60f8      	str	r0, [r7, #12]
    78ec:	60b9      	str	r1, [r7, #8]
    78ee:	0019      	movs	r1, r3
    78f0:	1dbb      	adds	r3, r7, #6
    78f2:	801a      	strh	r2, [r3, #0]
    78f4:	1d7b      	adds	r3, r7, #5
    78f6:	1c0a      	adds	r2, r1, #0
    78f8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    78fa:	2317      	movs	r3, #23
    78fc:	18fb      	adds	r3, r7, r3
    78fe:	2200      	movs	r2, #0
    7900:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    7902:	68fb      	ldr	r3, [r7, #12]
    7904:	2b00      	cmp	r3, #0
    7906:	d006      	beq.n	7916 <hif_receive+0x32>
    7908:	68bb      	ldr	r3, [r7, #8]
    790a:	2b00      	cmp	r3, #0
    790c:	d003      	beq.n	7916 <hif_receive+0x32>
    790e:	1dbb      	adds	r3, r7, #6
    7910:	881b      	ldrh	r3, [r3, #0]
    7912:	2b00      	cmp	r3, #0
    7914:	d11c      	bne.n	7950 <hif_receive+0x6c>
	{
		if(isDone)
    7916:	1d7b      	adds	r3, r7, #5
    7918:	781b      	ldrb	r3, [r3, #0]
    791a:	2b00      	cmp	r3, #0
    791c:	d006      	beq.n	792c <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    791e:	2317      	movs	r3, #23
    7920:	18fc      	adds	r4, r7, r3
    7922:	4b42      	ldr	r3, [pc, #264]	; (7a2c <hif_receive+0x148>)
    7924:	4798      	blx	r3
    7926:	0003      	movs	r3, r0
    7928:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    792a:	e077      	b.n	7a1c <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    792c:	2317      	movs	r3, #23
    792e:	18fb      	adds	r3, r7, r3
    7930:	22f4      	movs	r2, #244	; 0xf4
    7932:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    7934:	4a3e      	ldr	r2, [pc, #248]	; (7a30 <hif_receive+0x14c>)
    7936:	493f      	ldr	r1, [pc, #252]	; (7a34 <hif_receive+0x150>)
    7938:	4b3f      	ldr	r3, [pc, #252]	; (7a38 <hif_receive+0x154>)
    793a:	0018      	movs	r0, r3
    793c:	4b3f      	ldr	r3, [pc, #252]	; (7a3c <hif_receive+0x158>)
    793e:	4798      	blx	r3
    7940:	4b3f      	ldr	r3, [pc, #252]	; (7a40 <hif_receive+0x15c>)
    7942:	0018      	movs	r0, r3
    7944:	4b3f      	ldr	r3, [pc, #252]	; (7a44 <hif_receive+0x160>)
    7946:	4798      	blx	r3
    7948:	200d      	movs	r0, #13
    794a:	4b3f      	ldr	r3, [pc, #252]	; (7a48 <hif_receive+0x164>)
    794c:	4798      	blx	r3
		goto ERR1;
    794e:	e065      	b.n	7a1c <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    7950:	1dbb      	adds	r3, r7, #6
    7952:	881a      	ldrh	r2, [r3, #0]
    7954:	4b3d      	ldr	r3, [pc, #244]	; (7a4c <hif_receive+0x168>)
    7956:	689b      	ldr	r3, [r3, #8]
    7958:	429a      	cmp	r2, r3
    795a:	d915      	bls.n	7988 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    795c:	2317      	movs	r3, #23
    795e:	18fb      	adds	r3, r7, r3
    7960:	22f4      	movs	r2, #244	; 0xf4
    7962:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    7964:	4a3a      	ldr	r2, [pc, #232]	; (7a50 <hif_receive+0x16c>)
    7966:	4933      	ldr	r1, [pc, #204]	; (7a34 <hif_receive+0x150>)
    7968:	4b33      	ldr	r3, [pc, #204]	; (7a38 <hif_receive+0x154>)
    796a:	0018      	movs	r0, r3
    796c:	4b33      	ldr	r3, [pc, #204]	; (7a3c <hif_receive+0x158>)
    796e:	4798      	blx	r3
    7970:	1dbb      	adds	r3, r7, #6
    7972:	8819      	ldrh	r1, [r3, #0]
    7974:	4b35      	ldr	r3, [pc, #212]	; (7a4c <hif_receive+0x168>)
    7976:	689a      	ldr	r2, [r3, #8]
    7978:	4b36      	ldr	r3, [pc, #216]	; (7a54 <hif_receive+0x170>)
    797a:	0018      	movs	r0, r3
    797c:	4b2f      	ldr	r3, [pc, #188]	; (7a3c <hif_receive+0x158>)
    797e:	4798      	blx	r3
    7980:	200d      	movs	r0, #13
    7982:	4b31      	ldr	r3, [pc, #196]	; (7a48 <hif_receive+0x164>)
    7984:	4798      	blx	r3
		goto ERR1;
    7986:	e049      	b.n	7a1c <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    7988:	4b30      	ldr	r3, [pc, #192]	; (7a4c <hif_receive+0x168>)
    798a:	685a      	ldr	r2, [r3, #4]
    798c:	68fb      	ldr	r3, [r7, #12]
    798e:	429a      	cmp	r2, r3
    7990:	d80a      	bhi.n	79a8 <hif_receive+0xc4>
    7992:	1dbb      	adds	r3, r7, #6
    7994:	881a      	ldrh	r2, [r3, #0]
    7996:	68fb      	ldr	r3, [r7, #12]
    7998:	18d2      	adds	r2, r2, r3
    799a:	4b2c      	ldr	r3, [pc, #176]	; (7a4c <hif_receive+0x168>)
    799c:	6859      	ldr	r1, [r3, #4]
    799e:	4b2b      	ldr	r3, [pc, #172]	; (7a4c <hif_receive+0x168>)
    79a0:	689b      	ldr	r3, [r3, #8]
    79a2:	18cb      	adds	r3, r1, r3
    79a4:	429a      	cmp	r2, r3
    79a6:	d911      	bls.n	79cc <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    79a8:	2317      	movs	r3, #23
    79aa:	18fb      	adds	r3, r7, r3
    79ac:	22f4      	movs	r2, #244	; 0xf4
    79ae:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    79b0:	4a29      	ldr	r2, [pc, #164]	; (7a58 <hif_receive+0x174>)
    79b2:	4920      	ldr	r1, [pc, #128]	; (7a34 <hif_receive+0x150>)
    79b4:	4b20      	ldr	r3, [pc, #128]	; (7a38 <hif_receive+0x154>)
    79b6:	0018      	movs	r0, r3
    79b8:	4b20      	ldr	r3, [pc, #128]	; (7a3c <hif_receive+0x158>)
    79ba:	4798      	blx	r3
    79bc:	4b27      	ldr	r3, [pc, #156]	; (7a5c <hif_receive+0x178>)
    79be:	0018      	movs	r0, r3
    79c0:	4b20      	ldr	r3, [pc, #128]	; (7a44 <hif_receive+0x160>)
    79c2:	4798      	blx	r3
    79c4:	200d      	movs	r0, #13
    79c6:	4b20      	ldr	r3, [pc, #128]	; (7a48 <hif_receive+0x164>)
    79c8:	4798      	blx	r3
		goto ERR1;
    79ca:	e027      	b.n	7a1c <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    79cc:	1dbb      	adds	r3, r7, #6
    79ce:	881a      	ldrh	r2, [r3, #0]
    79d0:	2317      	movs	r3, #23
    79d2:	18fc      	adds	r4, r7, r3
    79d4:	68b9      	ldr	r1, [r7, #8]
    79d6:	68fb      	ldr	r3, [r7, #12]
    79d8:	0018      	movs	r0, r3
    79da:	4b21      	ldr	r3, [pc, #132]	; (7a60 <hif_receive+0x17c>)
    79dc:	4798      	blx	r3
    79de:	0003      	movs	r3, r0
    79e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    79e2:	2317      	movs	r3, #23
    79e4:	18fb      	adds	r3, r7, r3
    79e6:	781b      	ldrb	r3, [r3, #0]
    79e8:	b25b      	sxtb	r3, r3
    79ea:	2b00      	cmp	r3, #0
    79ec:	d115      	bne.n	7a1a <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    79ee:	4b17      	ldr	r3, [pc, #92]	; (7a4c <hif_receive+0x168>)
    79f0:	685a      	ldr	r2, [r3, #4]
    79f2:	4b16      	ldr	r3, [pc, #88]	; (7a4c <hif_receive+0x168>)
    79f4:	689b      	ldr	r3, [r3, #8]
    79f6:	18d2      	adds	r2, r2, r3
    79f8:	1dbb      	adds	r3, r7, #6
    79fa:	8819      	ldrh	r1, [r3, #0]
    79fc:	68fb      	ldr	r3, [r7, #12]
    79fe:	18cb      	adds	r3, r1, r3
    7a00:	429a      	cmp	r2, r3
    7a02:	d003      	beq.n	7a0c <hif_receive+0x128>
    7a04:	1d7b      	adds	r3, r7, #5
    7a06:	781b      	ldrb	r3, [r3, #0]
    7a08:	2b00      	cmp	r3, #0
    7a0a:	d007      	beq.n	7a1c <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    7a0c:	2317      	movs	r3, #23
    7a0e:	18fc      	adds	r4, r7, r3
    7a10:	4b06      	ldr	r3, [pc, #24]	; (7a2c <hif_receive+0x148>)
    7a12:	4798      	blx	r3
    7a14:	0003      	movs	r3, r0
    7a16:	7023      	strb	r3, [r4, #0]
    7a18:	e000      	b.n	7a1c <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    7a1a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    7a1c:	2317      	movs	r3, #23
    7a1e:	18fb      	adds	r3, r7, r3
    7a20:	781b      	ldrb	r3, [r3, #0]
    7a22:	b25b      	sxtb	r3, r3
}
    7a24:	0018      	movs	r0, r3
    7a26:	46bd      	mov	sp, r7
    7a28:	b007      	add	sp, #28
    7a2a:	bd90      	pop	{r4, r7, pc}
    7a2c:	00006e29 	.word	0x00006e29
    7a30:	0000026b 	.word	0x0000026b
    7a34:	0001fc7c 	.word	0x0001fc7c
    7a38:	0001f960 	.word	0x0001f960
    7a3c:	0001c37d 	.word	0x0001c37d
    7a40:	0001fb80 	.word	0x0001fb80
    7a44:	0001c499 	.word	0x0001c499
    7a48:	0001c3b1 	.word	0x0001c3b1
    7a4c:	20002a30 	.word	0x20002a30
    7a50:	00000273 	.word	0x00000273
    7a54:	0001fba0 	.word	0x0001fba0
    7a58:	00000279 	.word	0x00000279
    7a5c:	0001fbe8 	.word	0x0001fbe8
    7a60:	000091f9 	.word	0x000091f9

00007a64 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    7a64:	b580      	push	{r7, lr}
    7a66:	b084      	sub	sp, #16
    7a68:	af00      	add	r7, sp, #0
    7a6a:	0002      	movs	r2, r0
    7a6c:	6039      	str	r1, [r7, #0]
    7a6e:	1dfb      	adds	r3, r7, #7
    7a70:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    7a72:	230f      	movs	r3, #15
    7a74:	18fb      	adds	r3, r7, r3
    7a76:	2200      	movs	r2, #0
    7a78:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    7a7a:	1dfb      	adds	r3, r7, #7
    7a7c:	781b      	ldrb	r3, [r3, #0]
    7a7e:	2b07      	cmp	r3, #7
    7a80:	d820      	bhi.n	7ac4 <hif_register_cb+0x60>
    7a82:	009a      	lsls	r2, r3, #2
    7a84:	4b1e      	ldr	r3, [pc, #120]	; (7b00 <hif_register_cb+0x9c>)
    7a86:	18d3      	adds	r3, r2, r3
    7a88:	681b      	ldr	r3, [r3, #0]
    7a8a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    7a8c:	4b1d      	ldr	r3, [pc, #116]	; (7b04 <hif_register_cb+0xa0>)
    7a8e:	683a      	ldr	r2, [r7, #0]
    7a90:	611a      	str	r2, [r3, #16]
			break;
    7a92:	e02c      	b.n	7aee <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    7a94:	4b1b      	ldr	r3, [pc, #108]	; (7b04 <hif_register_cb+0xa0>)
    7a96:	683a      	ldr	r2, [r7, #0]
    7a98:	60da      	str	r2, [r3, #12]
			break;
    7a9a:	e028      	b.n	7aee <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    7a9c:	4b19      	ldr	r3, [pc, #100]	; (7b04 <hif_register_cb+0xa0>)
    7a9e:	683a      	ldr	r2, [r7, #0]
    7aa0:	615a      	str	r2, [r3, #20]
			break;
    7aa2:	e024      	b.n	7aee <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    7aa4:	4b17      	ldr	r3, [pc, #92]	; (7b04 <hif_register_cb+0xa0>)
    7aa6:	683a      	ldr	r2, [r7, #0]
    7aa8:	61da      	str	r2, [r3, #28]
			break;
    7aaa:	e020      	b.n	7aee <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    7aac:	4b15      	ldr	r3, [pc, #84]	; (7b04 <hif_register_cb+0xa0>)
    7aae:	683a      	ldr	r2, [r7, #0]
    7ab0:	621a      	str	r2, [r3, #32]
			break;
    7ab2:	e01c      	b.n	7aee <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    7ab4:	4b13      	ldr	r3, [pc, #76]	; (7b04 <hif_register_cb+0xa0>)
    7ab6:	683a      	ldr	r2, [r7, #0]
    7ab8:	619a      	str	r2, [r3, #24]
			break;
    7aba:	e018      	b.n	7aee <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    7abc:	4b11      	ldr	r3, [pc, #68]	; (7b04 <hif_register_cb+0xa0>)
    7abe:	683a      	ldr	r2, [r7, #0]
    7ac0:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    7ac2:	e014      	b.n	7aee <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    7ac4:	4a10      	ldr	r2, [pc, #64]	; (7b08 <hif_register_cb+0xa4>)
    7ac6:	4911      	ldr	r1, [pc, #68]	; (7b0c <hif_register_cb+0xa8>)
    7ac8:	4b11      	ldr	r3, [pc, #68]	; (7b10 <hif_register_cb+0xac>)
    7aca:	0018      	movs	r0, r3
    7acc:	4b11      	ldr	r3, [pc, #68]	; (7b14 <hif_register_cb+0xb0>)
    7ace:	4798      	blx	r3
    7ad0:	1dfb      	adds	r3, r7, #7
    7ad2:	781a      	ldrb	r2, [r3, #0]
    7ad4:	4b10      	ldr	r3, [pc, #64]	; (7b18 <hif_register_cb+0xb4>)
    7ad6:	0011      	movs	r1, r2
    7ad8:	0018      	movs	r0, r3
    7ada:	4b0e      	ldr	r3, [pc, #56]	; (7b14 <hif_register_cb+0xb0>)
    7adc:	4798      	blx	r3
    7ade:	200d      	movs	r0, #13
    7ae0:	4b0e      	ldr	r3, [pc, #56]	; (7b1c <hif_register_cb+0xb8>)
    7ae2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7ae4:	230f      	movs	r3, #15
    7ae6:	18fb      	adds	r3, r7, r3
    7ae8:	22f4      	movs	r2, #244	; 0xf4
    7aea:	701a      	strb	r2, [r3, #0]
			break;
    7aec:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    7aee:	230f      	movs	r3, #15
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	781b      	ldrb	r3, [r3, #0]
    7af4:	b25b      	sxtb	r3, r3
}
    7af6:	0018      	movs	r0, r3
    7af8:	46bd      	mov	sp, r7
    7afa:	b004      	add	sp, #16
    7afc:	bd80      	pop	{r7, pc}
    7afe:	46c0      	nop			; (mov r8, r8)
    7b00:	0001fc38 	.word	0x0001fc38
    7b04:	20002a30 	.word	0x20002a30
    7b08:	000002b1 	.word	0x000002b1
    7b0c:	0001fc88 	.word	0x0001fc88
    7b10:	0001f960 	.word	0x0001f960
    7b14:	0001c37d 	.word	0x0001c37d
    7b18:	0001fc2c 	.word	0x0001fc2c
    7b1c:	0001c3b1 	.word	0x0001c3b1

00007b20 <m2m_periph_pullup_ctrl>:
	return M2M_SUCCESS;
}


sint8 m2m_periph_pullup_ctrl(uint32 pinmask, uint8 enable)
{
    7b20:	b580      	push	{r7, lr}
    7b22:	b082      	sub	sp, #8
    7b24:	af00      	add	r7, sp, #0
    7b26:	6078      	str	r0, [r7, #4]
    7b28:	000a      	movs	r2, r1
    7b2a:	1cfb      	adds	r3, r7, #3
    7b2c:	701a      	strb	r2, [r3, #0]
	return pullup_ctrl(pinmask, enable);
    7b2e:	1cfb      	adds	r3, r7, #3
    7b30:	781a      	ldrb	r2, [r3, #0]
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	0011      	movs	r1, r2
    7b36:	0018      	movs	r0, r3
    7b38:	4b03      	ldr	r3, [pc, #12]	; (7b48 <m2m_periph_pullup_ctrl+0x28>)
    7b3a:	4798      	blx	r3
    7b3c:	0003      	movs	r3, r0
}
    7b3e:	0018      	movs	r0, r3
    7b40:	46bd      	mov	sp, r7
    7b42:	b002      	add	sp, #8
    7b44:	bd80      	pop	{r7, pc}
    7b46:	46c0      	nop			; (mov r8, r8)
    7b48:	00009005 	.word	0x00009005

00007b4c <m2m_ssl_cb>:
				HIF data length.
	@param [in]	u32Addr
				HIF address.
*/
static void m2m_ssl_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    7b4c:	b5b0      	push	{r4, r5, r7, lr}
    7b4e:	b0a0      	sub	sp, #128	; 0x80
    7b50:	af00      	add	r7, sp, #0
    7b52:	603a      	str	r2, [r7, #0]
    7b54:	1dfb      	adds	r3, r7, #7
    7b56:	1c02      	adds	r2, r0, #0
    7b58:	701a      	strb	r2, [r3, #0]
    7b5a:	1d3b      	adds	r3, r7, #4
    7b5c:	1c0a      	adds	r2, r1, #0
    7b5e:	801a      	strh	r2, [r3, #0]
	sint8 s8tmp = M2M_SUCCESS;
    7b60:	237f      	movs	r3, #127	; 0x7f
    7b62:	18fb      	adds	r3, r7, r3
    7b64:	2200      	movs	r2, #0
    7b66:	701a      	strb	r2, [r3, #0]
	switch(u8OpCode)
    7b68:	1dfb      	adds	r3, r7, #7
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	2b01      	cmp	r3, #1
    7b6e:	d002      	beq.n	7b76 <m2m_ssl_cb+0x2a>
    7b70:	2b06      	cmp	r3, #6
    7b72:	d022      	beq.n	7bba <m2m_ssl_cb+0x6e>
    7b74:	e041      	b.n	7bfa <m2m_ssl_cb+0xae>
	{
		case M2M_SSL_REQ_ECC:
		{
			tstrEccReqInfo strEccREQ;
			s8tmp = hif_receive(u32Addr, (uint8*)&strEccREQ, sizeof(tstrEccReqInfo), 0);
    7b76:	237f      	movs	r3, #127	; 0x7f
    7b78:	18fc      	adds	r4, r7, r3
    7b7a:	2308      	movs	r3, #8
    7b7c:	18f9      	adds	r1, r7, r3
    7b7e:	6838      	ldr	r0, [r7, #0]
    7b80:	2300      	movs	r3, #0
    7b82:	2270      	movs	r2, #112	; 0x70
    7b84:	4d28      	ldr	r5, [pc, #160]	; (7c28 <m2m_ssl_cb+0xdc>)
    7b86:	47a8      	blx	r5
    7b88:	0003      	movs	r3, r0
    7b8a:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    7b8c:	237f      	movs	r3, #127	; 0x7f
    7b8e:	18fb      	adds	r3, r7, r3
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	b25b      	sxtb	r3, r3
    7b94:	2b00      	cmp	r3, #0
    7b96:	d12d      	bne.n	7bf4 <m2m_ssl_cb+0xa8>
			{
				if (gpfAppSSLCb)
    7b98:	4b24      	ldr	r3, [pc, #144]	; (7c2c <m2m_ssl_cb+0xe0>)
    7b9a:	681b      	ldr	r3, [r3, #0]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d029      	beq.n	7bf4 <m2m_ssl_cb+0xa8>
				{
					gu32HIFAddr = u32Addr + sizeof(tstrEccReqInfo);
    7ba0:	683b      	ldr	r3, [r7, #0]
    7ba2:	3370      	adds	r3, #112	; 0x70
    7ba4:	001a      	movs	r2, r3
    7ba6:	4b22      	ldr	r3, [pc, #136]	; (7c30 <m2m_ssl_cb+0xe4>)
    7ba8:	601a      	str	r2, [r3, #0]
					gpfAppSSLCb(M2M_SSL_REQ_ECC, &strEccREQ);
    7baa:	4b20      	ldr	r3, [pc, #128]	; (7c2c <m2m_ssl_cb+0xe0>)
    7bac:	681b      	ldr	r3, [r3, #0]
    7bae:	2208      	movs	r2, #8
    7bb0:	18ba      	adds	r2, r7, r2
    7bb2:	0011      	movs	r1, r2
    7bb4:	2001      	movs	r0, #1
    7bb6:	4798      	blx	r3
				}
			}
		}
		break;
    7bb8:	e01c      	b.n	7bf4 <m2m_ssl_cb+0xa8>
		case M2M_SSL_RESP_SET_CS_LIST:
		{
			tstrSslSetActiveCsList strCsList;
			s8tmp = hif_receive(u32Addr, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), 0);
    7bba:	237f      	movs	r3, #127	; 0x7f
    7bbc:	18fc      	adds	r4, r7, r3
    7bbe:	2378      	movs	r3, #120	; 0x78
    7bc0:	18f9      	adds	r1, r7, r3
    7bc2:	6838      	ldr	r0, [r7, #0]
    7bc4:	2300      	movs	r3, #0
    7bc6:	2204      	movs	r2, #4
    7bc8:	4d17      	ldr	r5, [pc, #92]	; (7c28 <m2m_ssl_cb+0xdc>)
    7bca:	47a8      	blx	r5
    7bcc:	0003      	movs	r3, r0
    7bce:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    7bd0:	237f      	movs	r3, #127	; 0x7f
    7bd2:	18fb      	adds	r3, r7, r3
    7bd4:	781b      	ldrb	r3, [r3, #0]
    7bd6:	b25b      	sxtb	r3, r3
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d10d      	bne.n	7bf8 <m2m_ssl_cb+0xac>
			{
				if (gpfAppSSLCb)
    7bdc:	4b13      	ldr	r3, [pc, #76]	; (7c2c <m2m_ssl_cb+0xe0>)
    7bde:	681b      	ldr	r3, [r3, #0]
    7be0:	2b00      	cmp	r3, #0
    7be2:	d009      	beq.n	7bf8 <m2m_ssl_cb+0xac>
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
    7be4:	4b11      	ldr	r3, [pc, #68]	; (7c2c <m2m_ssl_cb+0xe0>)
    7be6:	681b      	ldr	r3, [r3, #0]
    7be8:	2278      	movs	r2, #120	; 0x78
    7bea:	18ba      	adds	r2, r7, r2
    7bec:	0011      	movs	r1, r2
    7bee:	2006      	movs	r0, #6
    7bf0:	4798      	blx	r3
			}
		}
		break;
    7bf2:	e001      	b.n	7bf8 <m2m_ssl_cb+0xac>
		break;
    7bf4:	46c0      	nop			; (mov r8, r8)
    7bf6:	e000      	b.n	7bfa <m2m_ssl_cb+0xae>
		break;
    7bf8:	46c0      	nop			; (mov r8, r8)
	}
	if(s8tmp != M2M_SUCCESS)
    7bfa:	237f      	movs	r3, #127	; 0x7f
    7bfc:	18fb      	adds	r3, r7, r3
    7bfe:	781b      	ldrb	r3, [r3, #0]
    7c00:	b25b      	sxtb	r3, r3
    7c02:	2b00      	cmp	r3, #0
    7c04:	d00c      	beq.n	7c20 <m2m_ssl_cb+0xd4>
	{
		M2M_ERR("Error receiving SSL from the HIF\n");
    7c06:	490b      	ldr	r1, [pc, #44]	; (7c34 <m2m_ssl_cb+0xe8>)
    7c08:	4b0b      	ldr	r3, [pc, #44]	; (7c38 <m2m_ssl_cb+0xec>)
    7c0a:	226b      	movs	r2, #107	; 0x6b
    7c0c:	0018      	movs	r0, r3
    7c0e:	4b0b      	ldr	r3, [pc, #44]	; (7c3c <m2m_ssl_cb+0xf0>)
    7c10:	4798      	blx	r3
    7c12:	4b0b      	ldr	r3, [pc, #44]	; (7c40 <m2m_ssl_cb+0xf4>)
    7c14:	0018      	movs	r0, r3
    7c16:	4b0b      	ldr	r3, [pc, #44]	; (7c44 <m2m_ssl_cb+0xf8>)
    7c18:	4798      	blx	r3
    7c1a:	200d      	movs	r0, #13
    7c1c:	4b0a      	ldr	r3, [pc, #40]	; (7c48 <m2m_ssl_cb+0xfc>)
    7c1e:	4798      	blx	r3
	}
}
    7c20:	46c0      	nop			; (mov r8, r8)
    7c22:	46bd      	mov	sp, r7
    7c24:	b020      	add	sp, #128	; 0x80
    7c26:	bdb0      	pop	{r4, r5, r7, pc}
    7c28:	000078e5 	.word	0x000078e5
    7c2c:	20000540 	.word	0x20000540
    7c30:	20000544 	.word	0x20000544
    7c34:	0001fcf8 	.word	0x0001fcf8
    7c38:	0001fc98 	.word	0x0001fc98
    7c3c:	0001c37d 	.word	0x0001c37d
    7c40:	0001fcac 	.word	0x0001fcac
    7c44:	0001c499 	.word	0x0001c499
    7c48:	0001c3b1 	.word	0x0001c3b1

00007c4c <m2m_ssl_set_active_ciphersuites>:
@return		
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
    7c4c:	b5b0      	push	{r4, r5, r7, lr}
    7c4e:	b088      	sub	sp, #32
    7c50:	af04      	add	r7, sp, #16
    7c52:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    7c54:	230f      	movs	r3, #15
    7c56:	18fb      	adds	r3, r7, r3
    7c58:	2200      	movs	r2, #0
    7c5a:	701a      	strb	r2, [r3, #0]
	tstrSslSetActiveCsList	strCsList;
	
	strCsList.u32CsBMP = u32SslCsBMP;
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	60bb      	str	r3, [r7, #8]
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    7c60:	230f      	movs	r3, #15
    7c62:	18fc      	adds	r4, r7, r3
    7c64:	2308      	movs	r3, #8
    7c66:	18fa      	adds	r2, r7, r3
    7c68:	2300      	movs	r3, #0
    7c6a:	9302      	str	r3, [sp, #8]
    7c6c:	2300      	movs	r3, #0
    7c6e:	9301      	str	r3, [sp, #4]
    7c70:	2300      	movs	r3, #0
    7c72:	9300      	str	r3, [sp, #0]
    7c74:	2304      	movs	r3, #4
    7c76:	2105      	movs	r1, #5
    7c78:	2005      	movs	r0, #5
    7c7a:	4d06      	ldr	r5, [pc, #24]	; (7c94 <m2m_ssl_set_active_ciphersuites+0x48>)
    7c7c:	47a8      	blx	r5
    7c7e:	0003      	movs	r3, r0
    7c80:	7023      	strb	r3, [r4, #0]

	return s8Ret;
    7c82:	230f      	movs	r3, #15
    7c84:	18fb      	adds	r3, r7, r3
    7c86:	781b      	ldrb	r3, [r3, #0]
    7c88:	b25b      	sxtb	r3, r3
}
    7c8a:	0018      	movs	r0, r3
    7c8c:	46bd      	mov	sp, r7
    7c8e:	b004      	add	sp, #16
    7c90:	bdb0      	pop	{r4, r5, r7, pc}
    7c92:	46c0      	nop			; (mov r8, r8)
    7c94:	00006ff1 	.word	0x00006ff1

00007c98 <m2m_ssl_init>:
	@param [in]	pfAppSslCb
	Application SSL callback function.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_init(tpfAppSSLCb pfAppSSLCb)
{
    7c98:	b590      	push	{r4, r7, lr}
    7c9a:	b085      	sub	sp, #20
    7c9c:	af00      	add	r7, sp, #0
    7c9e:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    7ca0:	230f      	movs	r3, #15
    7ca2:	18fb      	adds	r3, r7, r3
    7ca4:	2200      	movs	r2, #0
    7ca6:	701a      	strb	r2, [r3, #0]

	gpfAppSSLCb = pfAppSSLCb;
    7ca8:	4b18      	ldr	r3, [pc, #96]	; (7d0c <m2m_ssl_init+0x74>)
    7caa:	687a      	ldr	r2, [r7, #4]
    7cac:	601a      	str	r2, [r3, #0]
	gu32HIFAddr = 0;
    7cae:	4b18      	ldr	r3, [pc, #96]	; (7d10 <m2m_ssl_init+0x78>)
    7cb0:	2200      	movs	r2, #0
    7cb2:	601a      	str	r2, [r3, #0]

	s8Ret = hif_register_cb(M2M_REQ_GROUP_SSL,m2m_ssl_cb);
    7cb4:	230f      	movs	r3, #15
    7cb6:	18fc      	adds	r4, r7, r3
    7cb8:	4b16      	ldr	r3, [pc, #88]	; (7d14 <m2m_ssl_init+0x7c>)
    7cba:	0019      	movs	r1, r3
    7cbc:	2005      	movs	r0, #5
    7cbe:	4b16      	ldr	r3, [pc, #88]	; (7d18 <m2m_ssl_init+0x80>)
    7cc0:	4798      	blx	r3
    7cc2:	0003      	movs	r3, r0
    7cc4:	7023      	strb	r3, [r4, #0]
	if (s8Ret != M2M_SUCCESS)
    7cc6:	230f      	movs	r3, #15
    7cc8:	18fb      	adds	r3, r7, r3
    7cca:	781b      	ldrb	r3, [r3, #0]
    7ccc:	b25b      	sxtb	r3, r3
    7cce:	2b00      	cmp	r3, #0
    7cd0:	d013      	beq.n	7cfa <m2m_ssl_init+0x62>
	{
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
    7cd2:	2330      	movs	r3, #48	; 0x30
    7cd4:	33ff      	adds	r3, #255	; 0xff
    7cd6:	001a      	movs	r2, r3
    7cd8:	4910      	ldr	r1, [pc, #64]	; (7d1c <m2m_ssl_init+0x84>)
    7cda:	4b11      	ldr	r3, [pc, #68]	; (7d20 <m2m_ssl_init+0x88>)
    7cdc:	0018      	movs	r0, r3
    7cde:	4b11      	ldr	r3, [pc, #68]	; (7d24 <m2m_ssl_init+0x8c>)
    7ce0:	4798      	blx	r3
    7ce2:	230f      	movs	r3, #15
    7ce4:	18fb      	adds	r3, r7, r3
    7ce6:	2200      	movs	r2, #0
    7ce8:	569a      	ldrsb	r2, [r3, r2]
    7cea:	4b0f      	ldr	r3, [pc, #60]	; (7d28 <m2m_ssl_init+0x90>)
    7cec:	0011      	movs	r1, r2
    7cee:	0018      	movs	r0, r3
    7cf0:	4b0c      	ldr	r3, [pc, #48]	; (7d24 <m2m_ssl_init+0x8c>)
    7cf2:	4798      	blx	r3
    7cf4:	200d      	movs	r0, #13
    7cf6:	4b0d      	ldr	r3, [pc, #52]	; (7d2c <m2m_ssl_init+0x94>)
    7cf8:	4798      	blx	r3
	}
	return s8Ret;
    7cfa:	230f      	movs	r3, #15
    7cfc:	18fb      	adds	r3, r7, r3
    7cfe:	781b      	ldrb	r3, [r3, #0]
    7d00:	b25b      	sxtb	r3, r3
    7d02:	0018      	movs	r0, r3
    7d04:	46bd      	mov	sp, r7
    7d06:	b005      	add	sp, #20
    7d08:	bd90      	pop	{r4, r7, pc}
    7d0a:	46c0      	nop			; (mov r8, r8)
    7d0c:	20000540 	.word	0x20000540
    7d10:	20000544 	.word	0x20000544
    7d14:	00007b4d 	.word	0x00007b4d
    7d18:	00007a65 	.word	0x00007a65
    7d1c:	0001fd04 	.word	0x0001fd04
    7d20:	0001fc98 	.word	0x0001fc98
    7d24:	0001c37d 	.word	0x0001c37d
    7d28:	0001fcd0 	.word	0x0001fcd0
    7d2c:	0001c3b1 	.word	0x0001c3b1

00007d30 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    7d30:	b590      	push	{r4, r7, lr}
    7d32:	b0ad      	sub	sp, #180	; 0xb4
    7d34:	af02      	add	r7, sp, #8
    7d36:	603a      	str	r2, [r7, #0]
    7d38:	1dfb      	adds	r3, r7, #7
    7d3a:	1c02      	adds	r2, r0, #0
    7d3c:	701a      	strb	r2, [r3, #0]
    7d3e:	1d3b      	adds	r3, r7, #4
    7d40:	1c0a      	adds	r2, r1, #0
    7d42:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    7d44:	1dfb      	adds	r3, r7, #7
    7d46:	781b      	ldrb	r3, [r3, #0]
    7d48:	2b2c      	cmp	r3, #44	; 0x2c
    7d4a:	d116      	bne.n	7d7a <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    7d4c:	239c      	movs	r3, #156	; 0x9c
    7d4e:	18f9      	adds	r1, r7, r3
    7d50:	6838      	ldr	r0, [r7, #0]
    7d52:	2300      	movs	r3, #0
    7d54:	2204      	movs	r2, #4
    7d56:	4cc6      	ldr	r4, [pc, #792]	; (8070 <m2m_wifi_cb+0x340>)
    7d58:	47a0      	blx	r4
    7d5a:	1e03      	subs	r3, r0, #0
    7d5c:	d000      	beq.n	7d60 <m2m_wifi_cb+0x30>
    7d5e:	e1aa      	b.n	80b6 <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    7d60:	4bc4      	ldr	r3, [pc, #784]	; (8074 <m2m_wifi_cb+0x344>)
    7d62:	681b      	ldr	r3, [r3, #0]
    7d64:	2b00      	cmp	r3, #0
    7d66:	d100      	bne.n	7d6a <m2m_wifi_cb+0x3a>
    7d68:	e1a5      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    7d6a:	4bc2      	ldr	r3, [pc, #776]	; (8074 <m2m_wifi_cb+0x344>)
    7d6c:	681b      	ldr	r3, [r3, #0]
    7d6e:	229c      	movs	r2, #156	; 0x9c
    7d70:	18ba      	adds	r2, r7, r2
    7d72:	0011      	movs	r1, r2
    7d74:	202c      	movs	r0, #44	; 0x2c
    7d76:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    7d78:	e19d      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    7d7a:	1dfb      	adds	r3, r7, #7
    7d7c:	781b      	ldrb	r3, [r3, #0]
    7d7e:	2b1b      	cmp	r3, #27
    7d80:	d116      	bne.n	7db0 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    7d82:	2394      	movs	r3, #148	; 0x94
    7d84:	18f9      	adds	r1, r7, r3
    7d86:	6838      	ldr	r0, [r7, #0]
    7d88:	2300      	movs	r3, #0
    7d8a:	2208      	movs	r2, #8
    7d8c:	4cb8      	ldr	r4, [pc, #736]	; (8070 <m2m_wifi_cb+0x340>)
    7d8e:	47a0      	blx	r4
    7d90:	1e03      	subs	r3, r0, #0
    7d92:	d000      	beq.n	7d96 <m2m_wifi_cb+0x66>
    7d94:	e18f      	b.n	80b6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7d96:	4bb7      	ldr	r3, [pc, #732]	; (8074 <m2m_wifi_cb+0x344>)
    7d98:	681b      	ldr	r3, [r3, #0]
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	d100      	bne.n	7da0 <m2m_wifi_cb+0x70>
    7d9e:	e18a      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    7da0:	4bb4      	ldr	r3, [pc, #720]	; (8074 <m2m_wifi_cb+0x344>)
    7da2:	681b      	ldr	r3, [r3, #0]
    7da4:	2294      	movs	r2, #148	; 0x94
    7da6:	18ba      	adds	r2, r7, r2
    7da8:	0011      	movs	r1, r2
    7daa:	201b      	movs	r0, #27
    7dac:	4798      	blx	r3
}
    7dae:	e182      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    7db0:	1dfb      	adds	r3, r7, #7
    7db2:	781b      	ldrb	r3, [r3, #0]
    7db4:	2b06      	cmp	r3, #6
    7db6:	d116      	bne.n	7de6 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    7db8:	2308      	movs	r3, #8
    7dba:	18f9      	adds	r1, r7, r3
    7dbc:	6838      	ldr	r0, [r7, #0]
    7dbe:	2301      	movs	r3, #1
    7dc0:	2230      	movs	r2, #48	; 0x30
    7dc2:	4cab      	ldr	r4, [pc, #684]	; (8070 <m2m_wifi_cb+0x340>)
    7dc4:	47a0      	blx	r4
    7dc6:	1e03      	subs	r3, r0, #0
    7dc8:	d000      	beq.n	7dcc <m2m_wifi_cb+0x9c>
    7dca:	e174      	b.n	80b6 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    7dcc:	4ba9      	ldr	r3, [pc, #676]	; (8074 <m2m_wifi_cb+0x344>)
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d100      	bne.n	7dd6 <m2m_wifi_cb+0xa6>
    7dd4:	e16f      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    7dd6:	4ba7      	ldr	r3, [pc, #668]	; (8074 <m2m_wifi_cb+0x344>)
    7dd8:	681b      	ldr	r3, [r3, #0]
    7dda:	2208      	movs	r2, #8
    7ddc:	18ba      	adds	r2, r7, r2
    7dde:	0011      	movs	r1, r2
    7de0:	2006      	movs	r0, #6
    7de2:	4798      	blx	r3
}
    7de4:	e167      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    7de6:	1dfb      	adds	r3, r7, #7
    7de8:	781b      	ldrb	r3, [r3, #0]
    7dea:	2b0e      	cmp	r3, #14
    7dec:	d100      	bne.n	7df0 <m2m_wifi_cb+0xc0>
    7dee:	e162      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    7df0:	1dfb      	adds	r3, r7, #7
    7df2:	781b      	ldrb	r3, [r3, #0]
    7df4:	2b32      	cmp	r3, #50	; 0x32
    7df6:	d116      	bne.n	7e26 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    7df8:	2380      	movs	r3, #128	; 0x80
    7dfa:	18f9      	adds	r1, r7, r3
    7dfc:	6838      	ldr	r0, [r7, #0]
    7dfe:	2300      	movs	r3, #0
    7e00:	2214      	movs	r2, #20
    7e02:	4c9b      	ldr	r4, [pc, #620]	; (8070 <m2m_wifi_cb+0x340>)
    7e04:	47a0      	blx	r4
    7e06:	1e03      	subs	r3, r0, #0
    7e08:	d000      	beq.n	7e0c <m2m_wifi_cb+0xdc>
    7e0a:	e154      	b.n	80b6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7e0c:	4b99      	ldr	r3, [pc, #612]	; (8074 <m2m_wifi_cb+0x344>)
    7e0e:	681b      	ldr	r3, [r3, #0]
    7e10:	2b00      	cmp	r3, #0
    7e12:	d100      	bne.n	7e16 <m2m_wifi_cb+0xe6>
    7e14:	e14f      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    7e16:	4b97      	ldr	r3, [pc, #604]	; (8074 <m2m_wifi_cb+0x344>)
    7e18:	681b      	ldr	r3, [r3, #0]
    7e1a:	2280      	movs	r2, #128	; 0x80
    7e1c:	18ba      	adds	r2, r7, r2
    7e1e:	0011      	movs	r1, r2
    7e20:	2032      	movs	r0, #50	; 0x32
    7e22:	4798      	blx	r3
}
    7e24:	e147      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    7e26:	1dfb      	adds	r3, r7, #7
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	2b2f      	cmp	r3, #47	; 0x2f
    7e2c:	d11d      	bne.n	7e6a <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    7e2e:	2308      	movs	r3, #8
    7e30:	18fb      	adds	r3, r7, r3
    7e32:	2264      	movs	r2, #100	; 0x64
    7e34:	2100      	movs	r1, #0
    7e36:	0018      	movs	r0, r3
    7e38:	4b8f      	ldr	r3, [pc, #572]	; (8078 <m2m_wifi_cb+0x348>)
    7e3a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    7e3c:	2308      	movs	r3, #8
    7e3e:	18f9      	adds	r1, r7, r3
    7e40:	6838      	ldr	r0, [r7, #0]
    7e42:	2300      	movs	r3, #0
    7e44:	2264      	movs	r2, #100	; 0x64
    7e46:	4c8a      	ldr	r4, [pc, #552]	; (8070 <m2m_wifi_cb+0x340>)
    7e48:	47a0      	blx	r4
    7e4a:	1e03      	subs	r3, r0, #0
    7e4c:	d000      	beq.n	7e50 <m2m_wifi_cb+0x120>
    7e4e:	e132      	b.n	80b6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7e50:	4b88      	ldr	r3, [pc, #544]	; (8074 <m2m_wifi_cb+0x344>)
    7e52:	681b      	ldr	r3, [r3, #0]
    7e54:	2b00      	cmp	r3, #0
    7e56:	d100      	bne.n	7e5a <m2m_wifi_cb+0x12a>
    7e58:	e12d      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    7e5a:	4b86      	ldr	r3, [pc, #536]	; (8074 <m2m_wifi_cb+0x344>)
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	2208      	movs	r2, #8
    7e60:	18ba      	adds	r2, r7, r2
    7e62:	0011      	movs	r1, r2
    7e64:	202f      	movs	r0, #47	; 0x2f
    7e66:	4798      	blx	r3
}
    7e68:	e125      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    7e6a:	1dfb      	adds	r3, r7, #7
    7e6c:	781b      	ldrb	r3, [r3, #0]
    7e6e:	2b34      	cmp	r3, #52	; 0x34
    7e70:	d12e      	bne.n	7ed0 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    7e72:	237c      	movs	r3, #124	; 0x7c
    7e74:	18f9      	adds	r1, r7, r3
    7e76:	6838      	ldr	r0, [r7, #0]
    7e78:	2300      	movs	r3, #0
    7e7a:	2204      	movs	r2, #4
    7e7c:	4c7c      	ldr	r4, [pc, #496]	; (8070 <m2m_wifi_cb+0x340>)
    7e7e:	47a0      	blx	r4
    7e80:	1e03      	subs	r3, r0, #0
    7e82:	d000      	beq.n	7e86 <m2m_wifi_cb+0x156>
    7e84:	e117      	b.n	80b6 <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    7e86:	4b7d      	ldr	r3, [pc, #500]	; (807c <m2m_wifi_cb+0x34c>)
    7e88:	0018      	movs	r0, r3
    7e8a:	4b7d      	ldr	r3, [pc, #500]	; (8080 <m2m_wifi_cb+0x350>)
    7e8c:	4798      	blx	r3
    7e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e90:	0e1b      	lsrs	r3, r3, #24
    7e92:	b2db      	uxtb	r3, r3
    7e94:	0019      	movs	r1, r3
    7e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e98:	0c1b      	lsrs	r3, r3, #16
    7e9a:	b2db      	uxtb	r3, r3
    7e9c:	001a      	movs	r2, r3
    7e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7ea0:	0a1b      	lsrs	r3, r3, #8
    7ea2:	b2db      	uxtb	r3, r3
    7ea4:	001c      	movs	r4, r3
    7ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7ea8:	b2db      	uxtb	r3, r3
    7eaa:	4876      	ldr	r0, [pc, #472]	; (8084 <m2m_wifi_cb+0x354>)
    7eac:	9300      	str	r3, [sp, #0]
    7eae:	0023      	movs	r3, r4
    7eb0:	4c73      	ldr	r4, [pc, #460]	; (8080 <m2m_wifi_cb+0x350>)
    7eb2:	47a0      	blx	r4
    7eb4:	200d      	movs	r0, #13
    7eb6:	4b74      	ldr	r3, [pc, #464]	; (8088 <m2m_wifi_cb+0x358>)
    7eb8:	4798      	blx	r3
			if (gpfAppWifiCb)
    7eba:	4b6e      	ldr	r3, [pc, #440]	; (8074 <m2m_wifi_cb+0x344>)
    7ebc:	681b      	ldr	r3, [r3, #0]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d100      	bne.n	7ec4 <m2m_wifi_cb+0x194>
    7ec2:	e0f8      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    7ec4:	4b6b      	ldr	r3, [pc, #428]	; (8074 <m2m_wifi_cb+0x344>)
    7ec6:	681b      	ldr	r3, [r3, #0]
    7ec8:	2100      	movs	r1, #0
    7eca:	2034      	movs	r0, #52	; 0x34
    7ecc:	4798      	blx	r3
}
    7ece:	e0f2      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    7ed0:	1dfb      	adds	r3, r7, #7
    7ed2:	781b      	ldrb	r3, [r3, #0]
    7ed4:	2b11      	cmp	r3, #17
    7ed6:	d11e      	bne.n	7f16 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    7ed8:	4b6c      	ldr	r3, [pc, #432]	; (808c <m2m_wifi_cb+0x35c>)
    7eda:	2200      	movs	r2, #0
    7edc:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    7ede:	2378      	movs	r3, #120	; 0x78
    7ee0:	18f9      	adds	r1, r7, r3
    7ee2:	6838      	ldr	r0, [r7, #0]
    7ee4:	2300      	movs	r3, #0
    7ee6:	2204      	movs	r2, #4
    7ee8:	4c61      	ldr	r4, [pc, #388]	; (8070 <m2m_wifi_cb+0x340>)
    7eea:	47a0      	blx	r4
    7eec:	1e03      	subs	r3, r0, #0
    7eee:	d000      	beq.n	7ef2 <m2m_wifi_cb+0x1c2>
    7ef0:	e0e1      	b.n	80b6 <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    7ef2:	2378      	movs	r3, #120	; 0x78
    7ef4:	18fb      	adds	r3, r7, r3
    7ef6:	781a      	ldrb	r2, [r3, #0]
    7ef8:	4b65      	ldr	r3, [pc, #404]	; (8090 <m2m_wifi_cb+0x360>)
    7efa:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    7efc:	4b5d      	ldr	r3, [pc, #372]	; (8074 <m2m_wifi_cb+0x344>)
    7efe:	681b      	ldr	r3, [r3, #0]
    7f00:	2b00      	cmp	r3, #0
    7f02:	d100      	bne.n	7f06 <m2m_wifi_cb+0x1d6>
    7f04:	e0d7      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    7f06:	4b5b      	ldr	r3, [pc, #364]	; (8074 <m2m_wifi_cb+0x344>)
    7f08:	681b      	ldr	r3, [r3, #0]
    7f0a:	2278      	movs	r2, #120	; 0x78
    7f0c:	18ba      	adds	r2, r7, r2
    7f0e:	0011      	movs	r1, r2
    7f10:	2011      	movs	r0, #17
    7f12:	4798      	blx	r3
}
    7f14:	e0cf      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    7f16:	1dfb      	adds	r3, r7, #7
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	2b13      	cmp	r3, #19
    7f1c:	d116      	bne.n	7f4c <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    7f1e:	2308      	movs	r3, #8
    7f20:	18f9      	adds	r1, r7, r3
    7f22:	6838      	ldr	r0, [r7, #0]
    7f24:	2300      	movs	r3, #0
    7f26:	222c      	movs	r2, #44	; 0x2c
    7f28:	4c51      	ldr	r4, [pc, #324]	; (8070 <m2m_wifi_cb+0x340>)
    7f2a:	47a0      	blx	r4
    7f2c:	1e03      	subs	r3, r0, #0
    7f2e:	d000      	beq.n	7f32 <m2m_wifi_cb+0x202>
    7f30:	e0c1      	b.n	80b6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7f32:	4b50      	ldr	r3, [pc, #320]	; (8074 <m2m_wifi_cb+0x344>)
    7f34:	681b      	ldr	r3, [r3, #0]
    7f36:	2b00      	cmp	r3, #0
    7f38:	d100      	bne.n	7f3c <m2m_wifi_cb+0x20c>
    7f3a:	e0bc      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    7f3c:	4b4d      	ldr	r3, [pc, #308]	; (8074 <m2m_wifi_cb+0x344>)
    7f3e:	681b      	ldr	r3, [r3, #0]
    7f40:	2208      	movs	r2, #8
    7f42:	18ba      	adds	r2, r7, r2
    7f44:	0011      	movs	r1, r2
    7f46:	2013      	movs	r0, #19
    7f48:	4798      	blx	r3
}
    7f4a:	e0b4      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    7f4c:	1dfb      	adds	r3, r7, #7
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	2b04      	cmp	r3, #4
    7f52:	d116      	bne.n	7f82 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    7f54:	23a0      	movs	r3, #160	; 0xa0
    7f56:	18f9      	adds	r1, r7, r3
    7f58:	6838      	ldr	r0, [r7, #0]
    7f5a:	2300      	movs	r3, #0
    7f5c:	2204      	movs	r2, #4
    7f5e:	4c44      	ldr	r4, [pc, #272]	; (8070 <m2m_wifi_cb+0x340>)
    7f60:	47a0      	blx	r4
    7f62:	1e03      	subs	r3, r0, #0
    7f64:	d000      	beq.n	7f68 <m2m_wifi_cb+0x238>
    7f66:	e0a6      	b.n	80b6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7f68:	4b42      	ldr	r3, [pc, #264]	; (8074 <m2m_wifi_cb+0x344>)
    7f6a:	681b      	ldr	r3, [r3, #0]
    7f6c:	2b00      	cmp	r3, #0
    7f6e:	d100      	bne.n	7f72 <m2m_wifi_cb+0x242>
    7f70:	e0a1      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    7f72:	4b40      	ldr	r3, [pc, #256]	; (8074 <m2m_wifi_cb+0x344>)
    7f74:	681b      	ldr	r3, [r3, #0]
    7f76:	22a0      	movs	r2, #160	; 0xa0
    7f78:	18ba      	adds	r2, r7, r2
    7f7a:	0011      	movs	r1, r2
    7f7c:	2004      	movs	r0, #4
    7f7e:	4798      	blx	r3
}
    7f80:	e099      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    7f82:	1dfb      	adds	r3, r7, #7
    7f84:	781b      	ldrb	r3, [r3, #0]
    7f86:	2b65      	cmp	r3, #101	; 0x65
    7f88:	d116      	bne.n	7fb8 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    7f8a:	23a0      	movs	r3, #160	; 0xa0
    7f8c:	18f9      	adds	r1, r7, r3
    7f8e:	6838      	ldr	r0, [r7, #0]
    7f90:	2300      	movs	r3, #0
    7f92:	2204      	movs	r2, #4
    7f94:	4c36      	ldr	r4, [pc, #216]	; (8070 <m2m_wifi_cb+0x340>)
    7f96:	47a0      	blx	r4
    7f98:	1e03      	subs	r3, r0, #0
    7f9a:	d000      	beq.n	7f9e <m2m_wifi_cb+0x26e>
    7f9c:	e08b      	b.n	80b6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7f9e:	4b35      	ldr	r3, [pc, #212]	; (8074 <m2m_wifi_cb+0x344>)
    7fa0:	681b      	ldr	r3, [r3, #0]
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	d100      	bne.n	7fa8 <m2m_wifi_cb+0x278>
    7fa6:	e086      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    7fa8:	4b32      	ldr	r3, [pc, #200]	; (8074 <m2m_wifi_cb+0x344>)
    7faa:	681b      	ldr	r3, [r3, #0]
    7fac:	22a0      	movs	r2, #160	; 0xa0
    7fae:	18ba      	adds	r2, r7, r2
    7fb0:	0011      	movs	r1, r2
    7fb2:	2065      	movs	r0, #101	; 0x65
    7fb4:	4798      	blx	r3
}
    7fb6:	e07e      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    7fb8:	1dfb      	adds	r3, r7, #7
    7fba:	781b      	ldrb	r3, [r3, #0]
    7fbc:	2b09      	cmp	r3, #9
    7fbe:	d116      	bne.n	7fee <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    7fc0:	2308      	movs	r3, #8
    7fc2:	18f9      	adds	r1, r7, r3
    7fc4:	6838      	ldr	r0, [r7, #0]
    7fc6:	2301      	movs	r3, #1
    7fc8:	2264      	movs	r2, #100	; 0x64
    7fca:	4c29      	ldr	r4, [pc, #164]	; (8070 <m2m_wifi_cb+0x340>)
    7fcc:	47a0      	blx	r4
    7fce:	1e03      	subs	r3, r0, #0
    7fd0:	d000      	beq.n	7fd4 <m2m_wifi_cb+0x2a4>
    7fd2:	e070      	b.n	80b6 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    7fd4:	4b27      	ldr	r3, [pc, #156]	; (8074 <m2m_wifi_cb+0x344>)
    7fd6:	681b      	ldr	r3, [r3, #0]
    7fd8:	2b00      	cmp	r3, #0
    7fda:	d100      	bne.n	7fde <m2m_wifi_cb+0x2ae>
    7fdc:	e06b      	b.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    7fde:	4b25      	ldr	r3, [pc, #148]	; (8074 <m2m_wifi_cb+0x344>)
    7fe0:	681b      	ldr	r3, [r3, #0]
    7fe2:	2208      	movs	r2, #8
    7fe4:	18ba      	adds	r2, r7, r2
    7fe6:	0011      	movs	r1, r2
    7fe8:	2009      	movs	r0, #9
    7fea:	4798      	blx	r3
}
    7fec:	e063      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    7fee:	1dfb      	adds	r3, r7, #7
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	2b2a      	cmp	r3, #42	; 0x2a
    7ff4:	d114      	bne.n	8020 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    7ff6:	2374      	movs	r3, #116	; 0x74
    7ff8:	18f9      	adds	r1, r7, r3
    7ffa:	6838      	ldr	r0, [r7, #0]
    7ffc:	2301      	movs	r3, #1
    7ffe:	2204      	movs	r2, #4
    8000:	4c1b      	ldr	r4, [pc, #108]	; (8070 <m2m_wifi_cb+0x340>)
    8002:	47a0      	blx	r4
    8004:	1e03      	subs	r3, r0, #0
    8006:	d156      	bne.n	80b6 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    8008:	4b1a      	ldr	r3, [pc, #104]	; (8074 <m2m_wifi_cb+0x344>)
    800a:	681b      	ldr	r3, [r3, #0]
    800c:	2b00      	cmp	r3, #0
    800e:	d052      	beq.n	80b6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    8010:	4b18      	ldr	r3, [pc, #96]	; (8074 <m2m_wifi_cb+0x344>)
    8012:	681b      	ldr	r3, [r3, #0]
    8014:	2274      	movs	r2, #116	; 0x74
    8016:	18ba      	adds	r2, r7, r2
    8018:	0011      	movs	r1, r2
    801a:	202a      	movs	r0, #42	; 0x2a
    801c:	4798      	blx	r3
}
    801e:	e04a      	b.n	80b6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    8020:	1dfb      	adds	r3, r7, #7
    8022:	781b      	ldrb	r3, [r3, #0]
    8024:	2b20      	cmp	r3, #32
    8026:	d135      	bne.n	8094 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    8028:	236c      	movs	r3, #108	; 0x6c
    802a:	18f9      	adds	r1, r7, r3
    802c:	6838      	ldr	r0, [r7, #0]
    802e:	2300      	movs	r3, #0
    8030:	2208      	movs	r2, #8
    8032:	4c0f      	ldr	r4, [pc, #60]	; (8070 <m2m_wifi_cb+0x340>)
    8034:	47a0      	blx	r4
    8036:	1e03      	subs	r3, r0, #0
    8038:	d13d      	bne.n	80b6 <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    803a:	683b      	ldr	r3, [r7, #0]
    803c:	3308      	adds	r3, #8
    803e:	0018      	movs	r0, r3
    8040:	236c      	movs	r3, #108	; 0x6c
    8042:	18fb      	adds	r3, r7, r3
    8044:	6819      	ldr	r1, [r3, #0]
    8046:	236c      	movs	r3, #108	; 0x6c
    8048:	18fb      	adds	r3, r7, r3
    804a:	889a      	ldrh	r2, [r3, #4]
    804c:	2301      	movs	r3, #1
    804e:	4c08      	ldr	r4, [pc, #32]	; (8070 <m2m_wifi_cb+0x340>)
    8050:	47a0      	blx	r4
    8052:	1e03      	subs	r3, r0, #0
    8054:	d12f      	bne.n	80b6 <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    8056:	4b07      	ldr	r3, [pc, #28]	; (8074 <m2m_wifi_cb+0x344>)
    8058:	681b      	ldr	r3, [r3, #0]
    805a:	2b00      	cmp	r3, #0
    805c:	d02b      	beq.n	80b6 <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    805e:	4b05      	ldr	r3, [pc, #20]	; (8074 <m2m_wifi_cb+0x344>)
    8060:	681b      	ldr	r3, [r3, #0]
    8062:	226c      	movs	r2, #108	; 0x6c
    8064:	18ba      	adds	r2, r7, r2
    8066:	0011      	movs	r1, r2
    8068:	2020      	movs	r0, #32
    806a:	4798      	blx	r3
}
    806c:	e023      	b.n	80b6 <m2m_wifi_cb+0x386>
    806e:	46c0      	nop			; (mov r8, r8)
    8070:	000078e5 	.word	0x000078e5
    8074:	2000054c 	.word	0x2000054c
    8078:	00006d91 	.word	0x00006d91
    807c:	0001fd14 	.word	0x0001fd14
    8080:	0001c37d 	.word	0x0001c37d
    8084:	0001fd20 	.word	0x0001fd20
    8088:	0001c3b1 	.word	0x0001c3b1
    808c:	20000549 	.word	0x20000549
    8090:	20000548 	.word	0x20000548
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    8094:	2392      	movs	r3, #146	; 0x92
    8096:	005a      	lsls	r2, r3, #1
    8098:	4909      	ldr	r1, [pc, #36]	; (80c0 <m2m_wifi_cb+0x390>)
    809a:	4b0a      	ldr	r3, [pc, #40]	; (80c4 <m2m_wifi_cb+0x394>)
    809c:	0018      	movs	r0, r3
    809e:	4b0a      	ldr	r3, [pc, #40]	; (80c8 <m2m_wifi_cb+0x398>)
    80a0:	4798      	blx	r3
    80a2:	1dfb      	adds	r3, r7, #7
    80a4:	781a      	ldrb	r2, [r3, #0]
    80a6:	4b09      	ldr	r3, [pc, #36]	; (80cc <m2m_wifi_cb+0x39c>)
    80a8:	0011      	movs	r1, r2
    80aa:	0018      	movs	r0, r3
    80ac:	4b06      	ldr	r3, [pc, #24]	; (80c8 <m2m_wifi_cb+0x398>)
    80ae:	4798      	blx	r3
    80b0:	200d      	movs	r0, #13
    80b2:	4b07      	ldr	r3, [pc, #28]	; (80d0 <m2m_wifi_cb+0x3a0>)
    80b4:	4798      	blx	r3
}
    80b6:	46c0      	nop			; (mov r8, r8)
    80b8:	46bd      	mov	sp, r7
    80ba:	b02b      	add	sp, #172	; 0xac
    80bc:	bd90      	pop	{r4, r7, pc}
    80be:	46c0      	nop			; (mov r8, r8)
    80c0:	000200c8 	.word	0x000200c8
    80c4:	0001fd40 	.word	0x0001fd40
    80c8:	0001c37d 	.word	0x0001c37d
    80cc:	0001fd54 	.word	0x0001fd54
    80d0:	0001c3b1 	.word	0x0001c3b1

000080d4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    80d4:	b590      	push	{r4, r7, lr}
    80d6:	b091      	sub	sp, #68	; 0x44
    80d8:	af02      	add	r7, sp, #8
    80da:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    80dc:	2337      	movs	r3, #55	; 0x37
    80de:	18fb      	adds	r3, r7, r3
    80e0:	2200      	movs	r2, #0
    80e2:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    80e4:	230b      	movs	r3, #11
    80e6:	18fb      	adds	r3, r7, r3
    80e8:	2201      	movs	r2, #1
    80ea:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	2b00      	cmp	r3, #0
    80f0:	d104      	bne.n	80fc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    80f2:	2337      	movs	r3, #55	; 0x37
    80f4:	18fb      	adds	r3, r7, r3
    80f6:	22f4      	movs	r2, #244	; 0xf4
    80f8:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    80fa:	e0ad      	b.n	8258 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	681a      	ldr	r2, [r3, #0]
    8100:	4b59      	ldr	r3, [pc, #356]	; (8268 <m2m_wifi_init+0x194>)
    8102:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    8104:	4b59      	ldr	r3, [pc, #356]	; (826c <m2m_wifi_init+0x198>)
    8106:	2200      	movs	r2, #0
    8108:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    810a:	2337      	movs	r3, #55	; 0x37
    810c:	18fc      	adds	r4, r7, r3
    810e:	230b      	movs	r3, #11
    8110:	18fb      	adds	r3, r7, r3
    8112:	0018      	movs	r0, r3
    8114:	4b56      	ldr	r3, [pc, #344]	; (8270 <m2m_wifi_init+0x19c>)
    8116:	4798      	blx	r3
    8118:	0003      	movs	r3, r0
    811a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    811c:	2337      	movs	r3, #55	; 0x37
    811e:	18fb      	adds	r3, r7, r3
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	b25b      	sxtb	r3, r3
    8124:	2b00      	cmp	r3, #0
    8126:	d000      	beq.n	812a <m2m_wifi_init+0x56>
    8128:	e093      	b.n	8252 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    812a:	2337      	movs	r3, #55	; 0x37
    812c:	18fc      	adds	r4, r7, r3
    812e:	2000      	movs	r0, #0
    8130:	4b50      	ldr	r3, [pc, #320]	; (8274 <m2m_wifi_init+0x1a0>)
    8132:	4798      	blx	r3
    8134:	0003      	movs	r3, r0
    8136:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    8138:	2337      	movs	r3, #55	; 0x37
    813a:	18fb      	adds	r3, r7, r3
    813c:	781b      	ldrb	r3, [r3, #0]
    813e:	b25b      	sxtb	r3, r3
    8140:	2b00      	cmp	r3, #0
    8142:	d000      	beq.n	8146 <m2m_wifi_init+0x72>
    8144:	e080      	b.n	8248 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    8146:	4b4c      	ldr	r3, [pc, #304]	; (8278 <m2m_wifi_init+0x1a4>)
    8148:	0019      	movs	r1, r3
    814a:	2001      	movs	r0, #1
    814c:	4b4b      	ldr	r3, [pc, #300]	; (827c <m2m_wifi_init+0x1a8>)
    814e:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    8150:	2337      	movs	r3, #55	; 0x37
    8152:	18fc      	adds	r4, r7, r3
    8154:	230c      	movs	r3, #12
    8156:	18fb      	adds	r3, r7, r3
    8158:	0018      	movs	r0, r3
    815a:	4b49      	ldr	r3, [pc, #292]	; (8280 <m2m_wifi_init+0x1ac>)
    815c:	4798      	blx	r3
    815e:	0003      	movs	r3, r0
    8160:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    8162:	4b48      	ldr	r3, [pc, #288]	; (8284 <m2m_wifi_init+0x1b0>)
    8164:	0018      	movs	r0, r3
    8166:	4b48      	ldr	r3, [pc, #288]	; (8288 <m2m_wifi_init+0x1b4>)
    8168:	4798      	blx	r3
    816a:	230c      	movs	r3, #12
    816c:	18fb      	adds	r3, r7, r3
    816e:	791b      	ldrb	r3, [r3, #4]
    8170:	0019      	movs	r1, r3
    8172:	230c      	movs	r3, #12
    8174:	18fb      	adds	r3, r7, r3
    8176:	795b      	ldrb	r3, [r3, #5]
    8178:	001a      	movs	r2, r3
    817a:	230c      	movs	r3, #12
    817c:	18fb      	adds	r3, r7, r3
    817e:	799b      	ldrb	r3, [r3, #6]
    8180:	001c      	movs	r4, r3
    8182:	230c      	movs	r3, #12
    8184:	18fb      	adds	r3, r7, r3
    8186:	8c1b      	ldrh	r3, [r3, #32]
    8188:	4840      	ldr	r0, [pc, #256]	; (828c <m2m_wifi_init+0x1b8>)
    818a:	9300      	str	r3, [sp, #0]
    818c:	0023      	movs	r3, r4
    818e:	4c3e      	ldr	r4, [pc, #248]	; (8288 <m2m_wifi_init+0x1b4>)
    8190:	47a0      	blx	r4
    8192:	200d      	movs	r0, #13
    8194:	4b3e      	ldr	r3, [pc, #248]	; (8290 <m2m_wifi_init+0x1bc>)
    8196:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    8198:	4b3a      	ldr	r3, [pc, #232]	; (8284 <m2m_wifi_init+0x1b0>)
    819a:	0018      	movs	r0, r3
    819c:	4b3a      	ldr	r3, [pc, #232]	; (8288 <m2m_wifi_init+0x1b4>)
    819e:	4798      	blx	r3
    81a0:	230c      	movs	r3, #12
    81a2:	18fb      	adds	r3, r7, r3
    81a4:	3316      	adds	r3, #22
    81a6:	001a      	movs	r2, r3
    81a8:	230c      	movs	r3, #12
    81aa:	18fb      	adds	r3, r7, r3
    81ac:	330a      	adds	r3, #10
    81ae:	0019      	movs	r1, r3
    81b0:	4b38      	ldr	r3, [pc, #224]	; (8294 <m2m_wifi_init+0x1c0>)
    81b2:	0018      	movs	r0, r3
    81b4:	4b34      	ldr	r3, [pc, #208]	; (8288 <m2m_wifi_init+0x1b4>)
    81b6:	4798      	blx	r3
    81b8:	200d      	movs	r0, #13
    81ba:	4b35      	ldr	r3, [pc, #212]	; (8290 <m2m_wifi_init+0x1bc>)
    81bc:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    81be:	4b31      	ldr	r3, [pc, #196]	; (8284 <m2m_wifi_init+0x1b0>)
    81c0:	0018      	movs	r0, r3
    81c2:	4b31      	ldr	r3, [pc, #196]	; (8288 <m2m_wifi_init+0x1b4>)
    81c4:	4798      	blx	r3
    81c6:	230c      	movs	r3, #12
    81c8:	18fb      	adds	r3, r7, r3
    81ca:	79db      	ldrb	r3, [r3, #7]
    81cc:	0019      	movs	r1, r3
    81ce:	230c      	movs	r3, #12
    81d0:	18fb      	adds	r3, r7, r3
    81d2:	7a1b      	ldrb	r3, [r3, #8]
    81d4:	001a      	movs	r2, r3
    81d6:	230c      	movs	r3, #12
    81d8:	18fb      	adds	r3, r7, r3
    81da:	7a5b      	ldrb	r3, [r3, #9]
    81dc:	482e      	ldr	r0, [pc, #184]	; (8298 <m2m_wifi_init+0x1c4>)
    81de:	4c2a      	ldr	r4, [pc, #168]	; (8288 <m2m_wifi_init+0x1b4>)
    81e0:	47a0      	blx	r4
    81e2:	200d      	movs	r0, #13
    81e4:	4b2a      	ldr	r3, [pc, #168]	; (8290 <m2m_wifi_init+0x1bc>)
    81e6:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    81e8:	4b26      	ldr	r3, [pc, #152]	; (8284 <m2m_wifi_init+0x1b0>)
    81ea:	0018      	movs	r0, r3
    81ec:	4b26      	ldr	r3, [pc, #152]	; (8288 <m2m_wifi_init+0x1b4>)
    81ee:	4798      	blx	r3
    81f0:	482a      	ldr	r0, [pc, #168]	; (829c <m2m_wifi_init+0x1c8>)
    81f2:	2302      	movs	r3, #2
    81f4:	2205      	movs	r2, #5
    81f6:	2113      	movs	r1, #19
    81f8:	4c23      	ldr	r4, [pc, #140]	; (8288 <m2m_wifi_init+0x1b4>)
    81fa:	47a0      	blx	r4
    81fc:	200d      	movs	r0, #13
    81fe:	4b24      	ldr	r3, [pc, #144]	; (8290 <m2m_wifi_init+0x1bc>)
    8200:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    8202:	4b20      	ldr	r3, [pc, #128]	; (8284 <m2m_wifi_init+0x1b0>)
    8204:	0018      	movs	r0, r3
    8206:	4b20      	ldr	r3, [pc, #128]	; (8288 <m2m_wifi_init+0x1b4>)
    8208:	4798      	blx	r3
    820a:	4a25      	ldr	r2, [pc, #148]	; (82a0 <m2m_wifi_init+0x1cc>)
    820c:	4925      	ldr	r1, [pc, #148]	; (82a4 <m2m_wifi_init+0x1d0>)
    820e:	4b26      	ldr	r3, [pc, #152]	; (82a8 <m2m_wifi_init+0x1d4>)
    8210:	0018      	movs	r0, r3
    8212:	4b1d      	ldr	r3, [pc, #116]	; (8288 <m2m_wifi_init+0x1b4>)
    8214:	4798      	blx	r3
    8216:	200d      	movs	r0, #13
    8218:	4b1d      	ldr	r3, [pc, #116]	; (8290 <m2m_wifi_init+0x1bc>)
    821a:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    821c:	2337      	movs	r3, #55	; 0x37
    821e:	18fb      	adds	r3, r7, r3
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	b25b      	sxtb	r3, r3
    8224:	330d      	adds	r3, #13
    8226:	d116      	bne.n	8256 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    8228:	23e8      	movs	r3, #232	; 0xe8
    822a:	33ff      	adds	r3, #255	; 0xff
    822c:	001a      	movs	r2, r3
    822e:	491f      	ldr	r1, [pc, #124]	; (82ac <m2m_wifi_init+0x1d8>)
    8230:	4b1f      	ldr	r3, [pc, #124]	; (82b0 <m2m_wifi_init+0x1dc>)
    8232:	0018      	movs	r0, r3
    8234:	4b14      	ldr	r3, [pc, #80]	; (8288 <m2m_wifi_init+0x1b4>)
    8236:	4798      	blx	r3
    8238:	4b1e      	ldr	r3, [pc, #120]	; (82b4 <m2m_wifi_init+0x1e0>)
    823a:	0018      	movs	r0, r3
    823c:	4b1e      	ldr	r3, [pc, #120]	; (82b8 <m2m_wifi_init+0x1e4>)
    823e:	4798      	blx	r3
    8240:	200d      	movs	r0, #13
    8242:	4b13      	ldr	r3, [pc, #76]	; (8290 <m2m_wifi_init+0x1bc>)
    8244:	4798      	blx	r3
	}

	goto _EXIT0;
    8246:	e006      	b.n	8256 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    8248:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    824a:	2000      	movs	r0, #0
    824c:	4b1b      	ldr	r3, [pc, #108]	; (82bc <m2m_wifi_init+0x1e8>)
    824e:	4798      	blx	r3
    8250:	e002      	b.n	8258 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	e000      	b.n	8258 <m2m_wifi_init+0x184>
	goto _EXIT0;
    8256:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    8258:	2337      	movs	r3, #55	; 0x37
    825a:	18fb      	adds	r3, r7, r3
    825c:	781b      	ldrb	r3, [r3, #0]
    825e:	b25b      	sxtb	r3, r3
}
    8260:	0018      	movs	r0, r3
    8262:	46bd      	mov	sp, r7
    8264:	b00f      	add	sp, #60	; 0x3c
    8266:	bd90      	pop	{r4, r7, pc}
    8268:	2000054c 	.word	0x2000054c
    826c:	20000549 	.word	0x20000549
    8270:	00009589 	.word	0x00009589
    8274:	00006fa9 	.word	0x00006fa9
    8278:	00007d31 	.word	0x00007d31
    827c:	00007a65 	.word	0x00007a65
    8280:	000093bd 	.word	0x000093bd
    8284:	0001fd14 	.word	0x0001fd14
    8288:	0001c37d 	.word	0x0001c37d
    828c:	0001fea8 	.word	0x0001fea8
    8290:	0001c3b1 	.word	0x0001c3b1
    8294:	0001fed0 	.word	0x0001fed0
    8298:	0001feec 	.word	0x0001feec
    829c:	0001ff10 	.word	0x0001ff10
    82a0:	0001ff28 	.word	0x0001ff28
    82a4:	0001ff34 	.word	0x0001ff34
    82a8:	0001ff40 	.word	0x0001ff40
    82ac:	000200d4 	.word	0x000200d4
    82b0:	0001fd40 	.word	0x0001fd40
    82b4:	0001ff58 	.word	0x0001ff58
    82b8:	0001c499 	.word	0x0001c499
    82bc:	0000971d 	.word	0x0000971d

000082c0 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    82c0:	b580      	push	{r7, lr}
    82c2:	b082      	sub	sp, #8
    82c4:	af00      	add	r7, sp, #0
    82c6:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    82c8:	4b03      	ldr	r3, [pc, #12]	; (82d8 <m2m_wifi_handle_events+0x18>)
    82ca:	4798      	blx	r3
    82cc:	0003      	movs	r3, r0
}
    82ce:	0018      	movs	r0, r3
    82d0:	46bd      	mov	sp, r7
    82d2:	b002      	add	sp, #8
    82d4:	bd80      	pop	{r7, pc}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	00007855 	.word	0x00007855

000082dc <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    82dc:	b590      	push	{r4, r7, lr}
    82de:	b087      	sub	sp, #28
    82e0:	af02      	add	r7, sp, #8
    82e2:	60f8      	str	r0, [r7, #12]
    82e4:	0008      	movs	r0, r1
    82e6:	0011      	movs	r1, r2
    82e8:	607b      	str	r3, [r7, #4]
    82ea:	230b      	movs	r3, #11
    82ec:	18fb      	adds	r3, r7, r3
    82ee:	1c02      	adds	r2, r0, #0
    82f0:	701a      	strb	r2, [r3, #0]
    82f2:	230a      	movs	r3, #10
    82f4:	18fb      	adds	r3, r7, r3
    82f6:	1c0a      	adds	r2, r1, #0
    82f8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    82fa:	687c      	ldr	r4, [r7, #4]
    82fc:	230a      	movs	r3, #10
    82fe:	18fb      	adds	r3, r7, r3
    8300:	781a      	ldrb	r2, [r3, #0]
    8302:	230b      	movs	r3, #11
    8304:	18fb      	adds	r3, r7, r3
    8306:	7819      	ldrb	r1, [r3, #0]
    8308:	68f8      	ldr	r0, [r7, #12]
    830a:	2300      	movs	r3, #0
    830c:	9301      	str	r3, [sp, #4]
    830e:	2320      	movs	r3, #32
    8310:	18fb      	adds	r3, r7, r3
    8312:	881b      	ldrh	r3, [r3, #0]
    8314:	9300      	str	r3, [sp, #0]
    8316:	0023      	movs	r3, r4
    8318:	4c03      	ldr	r4, [pc, #12]	; (8328 <m2m_wifi_connect+0x4c>)
    831a:	47a0      	blx	r4
    831c:	0003      	movs	r3, r0
}
    831e:	0018      	movs	r0, r3
    8320:	46bd      	mov	sp, r7
    8322:	b005      	add	sp, #20
    8324:	bd90      	pop	{r4, r7, pc}
    8326:	46c0      	nop			; (mov r8, r8)
    8328:	0000832d 	.word	0x0000832d

0000832c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    832c:	b5b0      	push	{r4, r5, r7, lr}
    832e:	b0aa      	sub	sp, #168	; 0xa8
    8330:	af04      	add	r7, sp, #16
    8332:	60f8      	str	r0, [r7, #12]
    8334:	0008      	movs	r0, r1
    8336:	0011      	movs	r1, r2
    8338:	607b      	str	r3, [r7, #4]
    833a:	230b      	movs	r3, #11
    833c:	18fb      	adds	r3, r7, r3
    833e:	1c02      	adds	r2, r0, #0
    8340:	701a      	strb	r2, [r3, #0]
    8342:	230a      	movs	r3, #10
    8344:	18fb      	adds	r3, r7, r3
    8346:	1c0a      	adds	r2, r1, #0
    8348:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    834a:	2397      	movs	r3, #151	; 0x97
    834c:	18fb      	adds	r3, r7, r3
    834e:	2200      	movs	r2, #0
    8350:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    8352:	230a      	movs	r3, #10
    8354:	18fb      	adds	r3, r7, r3
    8356:	781b      	ldrb	r3, [r3, #0]
    8358:	2b01      	cmp	r3, #1
    835a:	d100      	bne.n	835e <m2m_wifi_connect_sc+0x32>
    835c:	e083      	b.n	8466 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    835e:	687b      	ldr	r3, [r7, #4]
    8360:	2b00      	cmp	r3, #0
    8362:	d111      	bne.n	8388 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    8364:	4adb      	ldr	r2, [pc, #876]	; (86d4 <m2m_wifi_connect_sc+0x3a8>)
    8366:	49dc      	ldr	r1, [pc, #880]	; (86d8 <m2m_wifi_connect_sc+0x3ac>)
    8368:	4bdc      	ldr	r3, [pc, #880]	; (86dc <m2m_wifi_connect_sc+0x3b0>)
    836a:	0018      	movs	r0, r3
    836c:	4bdc      	ldr	r3, [pc, #880]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    836e:	4798      	blx	r3
    8370:	4bdc      	ldr	r3, [pc, #880]	; (86e4 <m2m_wifi_connect_sc+0x3b8>)
    8372:	0018      	movs	r0, r3
    8374:	4bdc      	ldr	r3, [pc, #880]	; (86e8 <m2m_wifi_connect_sc+0x3bc>)
    8376:	4798      	blx	r3
    8378:	200d      	movs	r0, #13
    837a:	4bdc      	ldr	r3, [pc, #880]	; (86ec <m2m_wifi_connect_sc+0x3c0>)
    837c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    837e:	2397      	movs	r3, #151	; 0x97
    8380:	18fb      	adds	r3, r7, r3
    8382:	22f4      	movs	r2, #244	; 0xf4
    8384:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    8386:	e1f5      	b.n	8774 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    8388:	230a      	movs	r3, #10
    838a:	18fb      	adds	r3, r7, r3
    838c:	781b      	ldrb	r3, [r3, #0]
    838e:	2b02      	cmp	r3, #2
    8390:	d169      	bne.n	8466 <m2m_wifi_connect_sc+0x13a>
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	0018      	movs	r0, r3
    8396:	4bd6      	ldr	r3, [pc, #856]	; (86f0 <m2m_wifi_connect_sc+0x3c4>)
    8398:	4798      	blx	r3
    839a:	0003      	movs	r3, r0
    839c:	2b40      	cmp	r3, #64	; 0x40
    839e:	d162      	bne.n	8466 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    83a0:	2396      	movs	r3, #150	; 0x96
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	2200      	movs	r2, #0
    83a6:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    83a8:	687b      	ldr	r3, [r7, #4]
    83aa:	2290      	movs	r2, #144	; 0x90
    83ac:	18ba      	adds	r2, r7, r2
    83ae:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    83b0:	e054      	b.n	845c <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    83b2:	2396      	movs	r3, #150	; 0x96
    83b4:	18fb      	adds	r3, r7, r3
    83b6:	781b      	ldrb	r3, [r3, #0]
    83b8:	2290      	movs	r2, #144	; 0x90
    83ba:	18ba      	adds	r2, r7, r2
    83bc:	6812      	ldr	r2, [r2, #0]
    83be:	18d3      	adds	r3, r2, r3
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	2b2f      	cmp	r3, #47	; 0x2f
    83c4:	d931      	bls.n	842a <m2m_wifi_connect_sc+0xfe>
    83c6:	2396      	movs	r3, #150	; 0x96
    83c8:	18fb      	adds	r3, r7, r3
    83ca:	781b      	ldrb	r3, [r3, #0]
    83cc:	2290      	movs	r2, #144	; 0x90
    83ce:	18ba      	adds	r2, r7, r2
    83d0:	6812      	ldr	r2, [r2, #0]
    83d2:	18d3      	adds	r3, r2, r3
    83d4:	781b      	ldrb	r3, [r3, #0]
    83d6:	2b39      	cmp	r3, #57	; 0x39
    83d8:	d909      	bls.n	83ee <m2m_wifi_connect_sc+0xc2>
    83da:	2396      	movs	r3, #150	; 0x96
    83dc:	18fb      	adds	r3, r7, r3
    83de:	781b      	ldrb	r3, [r3, #0]
    83e0:	2290      	movs	r2, #144	; 0x90
    83e2:	18ba      	adds	r2, r7, r2
    83e4:	6812      	ldr	r2, [r2, #0]
    83e6:	18d3      	adds	r3, r2, r3
    83e8:	781b      	ldrb	r3, [r3, #0]
    83ea:	2b40      	cmp	r3, #64	; 0x40
    83ec:	d91d      	bls.n	842a <m2m_wifi_connect_sc+0xfe>
    83ee:	2396      	movs	r3, #150	; 0x96
    83f0:	18fb      	adds	r3, r7, r3
    83f2:	781b      	ldrb	r3, [r3, #0]
    83f4:	2290      	movs	r2, #144	; 0x90
    83f6:	18ba      	adds	r2, r7, r2
    83f8:	6812      	ldr	r2, [r2, #0]
    83fa:	18d3      	adds	r3, r2, r3
    83fc:	781b      	ldrb	r3, [r3, #0]
    83fe:	2b46      	cmp	r3, #70	; 0x46
    8400:	d909      	bls.n	8416 <m2m_wifi_connect_sc+0xea>
    8402:	2396      	movs	r3, #150	; 0x96
    8404:	18fb      	adds	r3, r7, r3
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	2290      	movs	r2, #144	; 0x90
    840a:	18ba      	adds	r2, r7, r2
    840c:	6812      	ldr	r2, [r2, #0]
    840e:	18d3      	adds	r3, r2, r3
    8410:	781b      	ldrb	r3, [r3, #0]
    8412:	2b60      	cmp	r3, #96	; 0x60
    8414:	d909      	bls.n	842a <m2m_wifi_connect_sc+0xfe>
    8416:	2396      	movs	r3, #150	; 0x96
    8418:	18fb      	adds	r3, r7, r3
    841a:	781b      	ldrb	r3, [r3, #0]
    841c:	2290      	movs	r2, #144	; 0x90
    841e:	18ba      	adds	r2, r7, r2
    8420:	6812      	ldr	r2, [r2, #0]
    8422:	18d3      	adds	r3, r2, r3
    8424:	781b      	ldrb	r3, [r3, #0]
    8426:	2b66      	cmp	r3, #102	; 0x66
    8428:	d911      	bls.n	844e <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    842a:	4ab2      	ldr	r2, [pc, #712]	; (86f4 <m2m_wifi_connect_sc+0x3c8>)
    842c:	49aa      	ldr	r1, [pc, #680]	; (86d8 <m2m_wifi_connect_sc+0x3ac>)
    842e:	4bab      	ldr	r3, [pc, #684]	; (86dc <m2m_wifi_connect_sc+0x3b0>)
    8430:	0018      	movs	r0, r3
    8432:	4bab      	ldr	r3, [pc, #684]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    8434:	4798      	blx	r3
    8436:	4bb0      	ldr	r3, [pc, #704]	; (86f8 <m2m_wifi_connect_sc+0x3cc>)
    8438:	0018      	movs	r0, r3
    843a:	4bab      	ldr	r3, [pc, #684]	; (86e8 <m2m_wifi_connect_sc+0x3bc>)
    843c:	4798      	blx	r3
    843e:	200d      	movs	r0, #13
    8440:	4baa      	ldr	r3, [pc, #680]	; (86ec <m2m_wifi_connect_sc+0x3c0>)
    8442:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    8444:	2397      	movs	r3, #151	; 0x97
    8446:	18fb      	adds	r3, r7, r3
    8448:	22f4      	movs	r2, #244	; 0xf4
    844a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    844c:	e192      	b.n	8774 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    844e:	2396      	movs	r3, #150	; 0x96
    8450:	18fb      	adds	r3, r7, r3
    8452:	781a      	ldrb	r2, [r3, #0]
    8454:	2396      	movs	r3, #150	; 0x96
    8456:	18fb      	adds	r3, r7, r3
    8458:	3201      	adds	r2, #1
    845a:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    845c:	2396      	movs	r3, #150	; 0x96
    845e:	18fb      	adds	r3, r7, r3
    8460:	781b      	ldrb	r3, [r3, #0]
    8462:	2b3f      	cmp	r3, #63	; 0x3f
    8464:	d9a5      	bls.n	83b2 <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    8466:	230b      	movs	r3, #11
    8468:	18fb      	adds	r3, r7, r3
    846a:	781b      	ldrb	r3, [r3, #0]
    846c:	2b00      	cmp	r3, #0
    846e:	d004      	beq.n	847a <m2m_wifi_connect_sc+0x14e>
    8470:	230b      	movs	r3, #11
    8472:	18fb      	adds	r3, r7, r3
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	2b20      	cmp	r3, #32
    8478:	d911      	bls.n	849e <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    847a:	4aa0      	ldr	r2, [pc, #640]	; (86fc <m2m_wifi_connect_sc+0x3d0>)
    847c:	4996      	ldr	r1, [pc, #600]	; (86d8 <m2m_wifi_connect_sc+0x3ac>)
    847e:	4b97      	ldr	r3, [pc, #604]	; (86dc <m2m_wifi_connect_sc+0x3b0>)
    8480:	0018      	movs	r0, r3
    8482:	4b97      	ldr	r3, [pc, #604]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    8484:	4798      	blx	r3
    8486:	4b9e      	ldr	r3, [pc, #632]	; (8700 <m2m_wifi_connect_sc+0x3d4>)
    8488:	0018      	movs	r0, r3
    848a:	4b97      	ldr	r3, [pc, #604]	; (86e8 <m2m_wifi_connect_sc+0x3bc>)
    848c:	4798      	blx	r3
    848e:	200d      	movs	r0, #13
    8490:	4b96      	ldr	r3, [pc, #600]	; (86ec <m2m_wifi_connect_sc+0x3c0>)
    8492:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8494:	2397      	movs	r3, #151	; 0x97
    8496:	18fb      	adds	r3, r7, r3
    8498:	22f4      	movs	r2, #244	; 0xf4
    849a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    849c:	e16a      	b.n	8774 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    849e:	23a8      	movs	r3, #168	; 0xa8
    84a0:	18fb      	adds	r3, r7, r3
    84a2:	881b      	ldrh	r3, [r3, #0]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d004      	beq.n	84b2 <m2m_wifi_connect_sc+0x186>
    84a8:	23a8      	movs	r3, #168	; 0xa8
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	881b      	ldrh	r3, [r3, #0]
    84ae:	2b0e      	cmp	r3, #14
    84b0:	d917      	bls.n	84e2 <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    84b2:	23a8      	movs	r3, #168	; 0xa8
    84b4:	18fb      	adds	r3, r7, r3
    84b6:	881b      	ldrh	r3, [r3, #0]
    84b8:	2bff      	cmp	r3, #255	; 0xff
    84ba:	d012      	beq.n	84e2 <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    84bc:	238d      	movs	r3, #141	; 0x8d
    84be:	009a      	lsls	r2, r3, #2
    84c0:	4985      	ldr	r1, [pc, #532]	; (86d8 <m2m_wifi_connect_sc+0x3ac>)
    84c2:	4b86      	ldr	r3, [pc, #536]	; (86dc <m2m_wifi_connect_sc+0x3b0>)
    84c4:	0018      	movs	r0, r3
    84c6:	4b86      	ldr	r3, [pc, #536]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    84c8:	4798      	blx	r3
    84ca:	4b8e      	ldr	r3, [pc, #568]	; (8704 <m2m_wifi_connect_sc+0x3d8>)
    84cc:	0018      	movs	r0, r3
    84ce:	4b86      	ldr	r3, [pc, #536]	; (86e8 <m2m_wifi_connect_sc+0x3bc>)
    84d0:	4798      	blx	r3
    84d2:	200d      	movs	r0, #13
    84d4:	4b85      	ldr	r3, [pc, #532]	; (86ec <m2m_wifi_connect_sc+0x3c0>)
    84d6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    84d8:	2397      	movs	r3, #151	; 0x97
    84da:	18fb      	adds	r3, r7, r3
    84dc:	22f4      	movs	r2, #244	; 0xf4
    84de:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    84e0:	e148      	b.n	8774 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    84e2:	230b      	movs	r3, #11
    84e4:	18fb      	adds	r3, r7, r3
    84e6:	781a      	ldrb	r2, [r3, #0]
    84e8:	68f9      	ldr	r1, [r7, #12]
    84ea:	2314      	movs	r3, #20
    84ec:	18fb      	adds	r3, r7, r3
    84ee:	3346      	adds	r3, #70	; 0x46
    84f0:	0018      	movs	r0, r3
    84f2:	4b85      	ldr	r3, [pc, #532]	; (8708 <m2m_wifi_connect_sc+0x3dc>)
    84f4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    84f6:	230b      	movs	r3, #11
    84f8:	18fb      	adds	r3, r7, r3
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	2214      	movs	r2, #20
    84fe:	18ba      	adds	r2, r7, r2
    8500:	2146      	movs	r1, #70	; 0x46
    8502:	18d3      	adds	r3, r2, r3
    8504:	185b      	adds	r3, r3, r1
    8506:	2200      	movs	r2, #0
    8508:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    850a:	2314      	movs	r3, #20
    850c:	18fb      	adds	r3, r7, r3
    850e:	22a8      	movs	r2, #168	; 0xa8
    8510:	18ba      	adds	r2, r7, r2
    8512:	2144      	movs	r1, #68	; 0x44
    8514:	8812      	ldrh	r2, [r2, #0]
    8516:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    8518:	23ac      	movs	r3, #172	; 0xac
    851a:	18fb      	adds	r3, r7, r3
    851c:	781b      	ldrb	r3, [r3, #0]
    851e:	1e5a      	subs	r2, r3, #1
    8520:	4193      	sbcs	r3, r2
    8522:	b2db      	uxtb	r3, r3
    8524:	0019      	movs	r1, r3
    8526:	2314      	movs	r3, #20
    8528:	18fb      	adds	r3, r7, r3
    852a:	2267      	movs	r2, #103	; 0x67
    852c:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    852e:	2314      	movs	r3, #20
    8530:	18fb      	adds	r3, r7, r3
    8532:	228c      	movs	r2, #140	; 0x8c
    8534:	18ba      	adds	r2, r7, r2
    8536:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    8538:	238c      	movs	r3, #140	; 0x8c
    853a:	18fb      	adds	r3, r7, r3
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	220a      	movs	r2, #10
    8540:	18ba      	adds	r2, r7, r2
    8542:	2141      	movs	r1, #65	; 0x41
    8544:	7812      	ldrb	r2, [r2, #0]
    8546:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    8548:	230a      	movs	r3, #10
    854a:	18fb      	adds	r3, r7, r3
    854c:	781b      	ldrb	r3, [r3, #0]
    854e:	2b03      	cmp	r3, #3
    8550:	d000      	beq.n	8554 <m2m_wifi_connect_sc+0x228>
    8552:	e07a      	b.n	864a <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    8554:	687b      	ldr	r3, [r7, #4]
    8556:	2288      	movs	r2, #136	; 0x88
    8558:	18ba      	adds	r2, r7, r2
    855a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    855c:	238c      	movs	r3, #140	; 0x8c
    855e:	18fb      	adds	r3, r7, r3
    8560:	681b      	ldr	r3, [r3, #0]
    8562:	2284      	movs	r2, #132	; 0x84
    8564:	18ba      	adds	r2, r7, r2
    8566:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    8568:	2388      	movs	r3, #136	; 0x88
    856a:	18fb      	adds	r3, r7, r3
    856c:	681b      	ldr	r3, [r3, #0]
    856e:	781b      	ldrb	r3, [r3, #0]
    8570:	3b01      	subs	r3, #1
    8572:	b2da      	uxtb	r2, r3
    8574:	2384      	movs	r3, #132	; 0x84
    8576:	18fb      	adds	r3, r7, r3
    8578:	681b      	ldr	r3, [r3, #0]
    857a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    857c:	2384      	movs	r3, #132	; 0x84
    857e:	18fb      	adds	r3, r7, r3
    8580:	681b      	ldr	r3, [r3, #0]
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	2b03      	cmp	r3, #3
    8586:	d917      	bls.n	85b8 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    8588:	4a60      	ldr	r2, [pc, #384]	; (870c <m2m_wifi_connect_sc+0x3e0>)
    858a:	4953      	ldr	r1, [pc, #332]	; (86d8 <m2m_wifi_connect_sc+0x3ac>)
    858c:	4b53      	ldr	r3, [pc, #332]	; (86dc <m2m_wifi_connect_sc+0x3b0>)
    858e:	0018      	movs	r0, r3
    8590:	4b53      	ldr	r3, [pc, #332]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    8592:	4798      	blx	r3
    8594:	2384      	movs	r3, #132	; 0x84
    8596:	18fb      	adds	r3, r7, r3
    8598:	681b      	ldr	r3, [r3, #0]
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	001a      	movs	r2, r3
    859e:	4b5c      	ldr	r3, [pc, #368]	; (8710 <m2m_wifi_connect_sc+0x3e4>)
    85a0:	0011      	movs	r1, r2
    85a2:	0018      	movs	r0, r3
    85a4:	4b4e      	ldr	r3, [pc, #312]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    85a6:	4798      	blx	r3
    85a8:	200d      	movs	r0, #13
    85aa:	4b50      	ldr	r3, [pc, #320]	; (86ec <m2m_wifi_connect_sc+0x3c0>)
    85ac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    85ae:	2397      	movs	r3, #151	; 0x97
    85b0:	18fb      	adds	r3, r7, r3
    85b2:	22f4      	movs	r2, #244	; 0xf4
    85b4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    85b6:	e0dd      	b.n	8774 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    85b8:	2388      	movs	r3, #136	; 0x88
    85ba:	18fb      	adds	r3, r7, r3
    85bc:	681b      	ldr	r3, [r3, #0]
    85be:	785b      	ldrb	r3, [r3, #1]
    85c0:	3b01      	subs	r3, #1
    85c2:	b2da      	uxtb	r2, r3
    85c4:	2384      	movs	r3, #132	; 0x84
    85c6:	18fb      	adds	r3, r7, r3
    85c8:	681b      	ldr	r3, [r3, #0]
    85ca:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    85cc:	2384      	movs	r3, #132	; 0x84
    85ce:	18fb      	adds	r3, r7, r3
    85d0:	681b      	ldr	r3, [r3, #0]
    85d2:	785b      	ldrb	r3, [r3, #1]
    85d4:	2b0a      	cmp	r3, #10
    85d6:	d01d      	beq.n	8614 <m2m_wifi_connect_sc+0x2e8>
    85d8:	2384      	movs	r3, #132	; 0x84
    85da:	18fb      	adds	r3, r7, r3
    85dc:	681b      	ldr	r3, [r3, #0]
    85de:	785b      	ldrb	r3, [r3, #1]
    85e0:	2b1a      	cmp	r3, #26
    85e2:	d017      	beq.n	8614 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    85e4:	4a4b      	ldr	r2, [pc, #300]	; (8714 <m2m_wifi_connect_sc+0x3e8>)
    85e6:	493c      	ldr	r1, [pc, #240]	; (86d8 <m2m_wifi_connect_sc+0x3ac>)
    85e8:	4b3c      	ldr	r3, [pc, #240]	; (86dc <m2m_wifi_connect_sc+0x3b0>)
    85ea:	0018      	movs	r0, r3
    85ec:	4b3c      	ldr	r3, [pc, #240]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    85ee:	4798      	blx	r3
    85f0:	2384      	movs	r3, #132	; 0x84
    85f2:	18fb      	adds	r3, r7, r3
    85f4:	681b      	ldr	r3, [r3, #0]
    85f6:	785b      	ldrb	r3, [r3, #1]
    85f8:	001a      	movs	r2, r3
    85fa:	4b47      	ldr	r3, [pc, #284]	; (8718 <m2m_wifi_connect_sc+0x3ec>)
    85fc:	0011      	movs	r1, r2
    85fe:	0018      	movs	r0, r3
    8600:	4b37      	ldr	r3, [pc, #220]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    8602:	4798      	blx	r3
    8604:	200d      	movs	r0, #13
    8606:	4b39      	ldr	r3, [pc, #228]	; (86ec <m2m_wifi_connect_sc+0x3c0>)
    8608:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    860a:	2397      	movs	r3, #151	; 0x97
    860c:	18fb      	adds	r3, r7, r3
    860e:	22f4      	movs	r2, #244	; 0xf4
    8610:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    8612:	e0af      	b.n	8774 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    8614:	2384      	movs	r3, #132	; 0x84
    8616:	18fb      	adds	r3, r7, r3
    8618:	681b      	ldr	r3, [r3, #0]
    861a:	1c98      	adds	r0, r3, #2
    861c:	2388      	movs	r3, #136	; 0x88
    861e:	18fb      	adds	r3, r7, r3
    8620:	681b      	ldr	r3, [r3, #0]
    8622:	1c99      	adds	r1, r3, #2
    8624:	2388      	movs	r3, #136	; 0x88
    8626:	18fb      	adds	r3, r7, r3
    8628:	681b      	ldr	r3, [r3, #0]
    862a:	785b      	ldrb	r3, [r3, #1]
    862c:	001a      	movs	r2, r3
    862e:	4b36      	ldr	r3, [pc, #216]	; (8708 <m2m_wifi_connect_sc+0x3dc>)
    8630:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    8632:	2388      	movs	r3, #136	; 0x88
    8634:	18fb      	adds	r3, r7, r3
    8636:	681b      	ldr	r3, [r3, #0]
    8638:	785b      	ldrb	r3, [r3, #1]
    863a:	001a      	movs	r2, r3
    863c:	2384      	movs	r3, #132	; 0x84
    863e:	18fb      	adds	r3, r7, r3
    8640:	681b      	ldr	r3, [r3, #0]
    8642:	189b      	adds	r3, r3, r2
    8644:	2200      	movs	r2, #0
    8646:	709a      	strb	r2, [r3, #2]
    8648:	e083      	b.n	8752 <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    864a:	230a      	movs	r3, #10
    864c:	18fb      	adds	r3, r7, r3
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	2b02      	cmp	r3, #2
    8652:	d130      	bne.n	86b6 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    8654:	2382      	movs	r3, #130	; 0x82
    8656:	18fc      	adds	r4, r7, r3
    8658:	687b      	ldr	r3, [r7, #4]
    865a:	0018      	movs	r0, r3
    865c:	4b24      	ldr	r3, [pc, #144]	; (86f0 <m2m_wifi_connect_sc+0x3c4>)
    865e:	4798      	blx	r3
    8660:	0003      	movs	r3, r0
    8662:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    8664:	2382      	movs	r3, #130	; 0x82
    8666:	18fb      	adds	r3, r7, r3
    8668:	881b      	ldrh	r3, [r3, #0]
    866a:	2b00      	cmp	r3, #0
    866c:	d004      	beq.n	8678 <m2m_wifi_connect_sc+0x34c>
    866e:	2382      	movs	r3, #130	; 0x82
    8670:	18fb      	adds	r3, r7, r3
    8672:	881b      	ldrh	r3, [r3, #0]
    8674:	2b40      	cmp	r3, #64	; 0x40
    8676:	d911      	bls.n	869c <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    8678:	4a28      	ldr	r2, [pc, #160]	; (871c <m2m_wifi_connect_sc+0x3f0>)
    867a:	4917      	ldr	r1, [pc, #92]	; (86d8 <m2m_wifi_connect_sc+0x3ac>)
    867c:	4b17      	ldr	r3, [pc, #92]	; (86dc <m2m_wifi_connect_sc+0x3b0>)
    867e:	0018      	movs	r0, r3
    8680:	4b17      	ldr	r3, [pc, #92]	; (86e0 <m2m_wifi_connect_sc+0x3b4>)
    8682:	4798      	blx	r3
    8684:	4b26      	ldr	r3, [pc, #152]	; (8720 <m2m_wifi_connect_sc+0x3f4>)
    8686:	0018      	movs	r0, r3
    8688:	4b17      	ldr	r3, [pc, #92]	; (86e8 <m2m_wifi_connect_sc+0x3bc>)
    868a:	4798      	blx	r3
    868c:	200d      	movs	r0, #13
    868e:	4b17      	ldr	r3, [pc, #92]	; (86ec <m2m_wifi_connect_sc+0x3c0>)
    8690:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8692:	2397      	movs	r3, #151	; 0x97
    8694:	18fb      	adds	r3, r7, r3
    8696:	22f4      	movs	r2, #244	; 0xf4
    8698:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    869a:	e06b      	b.n	8774 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    869c:	238c      	movs	r3, #140	; 0x8c
    869e:	18fb      	adds	r3, r7, r3
    86a0:	6818      	ldr	r0, [r3, #0]
    86a2:	2382      	movs	r3, #130	; 0x82
    86a4:	18fb      	adds	r3, r7, r3
    86a6:	881b      	ldrh	r3, [r3, #0]
    86a8:	3301      	adds	r3, #1
    86aa:	001a      	movs	r2, r3
    86ac:	687b      	ldr	r3, [r7, #4]
    86ae:	0019      	movs	r1, r3
    86b0:	4b15      	ldr	r3, [pc, #84]	; (8708 <m2m_wifi_connect_sc+0x3dc>)
    86b2:	4798      	blx	r3
    86b4:	e04d      	b.n	8752 <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    86b6:	230a      	movs	r3, #10
    86b8:	18fb      	adds	r3, r7, r3
    86ba:	781b      	ldrb	r3, [r3, #0]
    86bc:	2b04      	cmp	r3, #4
    86be:	d131      	bne.n	8724 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    86c0:	238c      	movs	r3, #140	; 0x8c
    86c2:	18fb      	adds	r3, r7, r3
    86c4:	681b      	ldr	r3, [r3, #0]
    86c6:	6879      	ldr	r1, [r7, #4]
    86c8:	223e      	movs	r2, #62	; 0x3e
    86ca:	0018      	movs	r0, r3
    86cc:	4b0e      	ldr	r3, [pc, #56]	; (8708 <m2m_wifi_connect_sc+0x3dc>)
    86ce:	4798      	blx	r3
    86d0:	e03f      	b.n	8752 <m2m_wifi_connect_sc+0x426>
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	00000215 	.word	0x00000215
    86d8:	000200e4 	.word	0x000200e4
    86dc:	0001fd40 	.word	0x0001fd40
    86e0:	0001c37d 	.word	0x0001c37d
    86e4:	0001ff74 	.word	0x0001ff74
    86e8:	0001c499 	.word	0x0001c499
    86ec:	0001c3b1 	.word	0x0001c3b1
    86f0:	00006dcf 	.word	0x00006dcf
    86f4:	00000221 	.word	0x00000221
    86f8:	0001ff88 	.word	0x0001ff88
    86fc:	0000022b 	.word	0x0000022b
    8700:	0001ff94 	.word	0x0001ff94
    8704:	0001ffa8 	.word	0x0001ffa8
    8708:	00006d55 	.word	0x00006d55
    870c:	0000024b 	.word	0x0000024b
    8710:	0001ffb4 	.word	0x0001ffb4
    8714:	00000252 	.word	0x00000252
    8718:	0001ffd0 	.word	0x0001ffd0
    871c:	00000261 	.word	0x00000261
    8720:	0001ffec 	.word	0x0001ffec
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    8724:	230a      	movs	r3, #10
    8726:	18fb      	adds	r3, r7, r3
    8728:	781b      	ldrb	r3, [r3, #0]
    872a:	2b01      	cmp	r3, #1
    872c:	d011      	beq.n	8752 <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    872e:	4a15      	ldr	r2, [pc, #84]	; (8784 <m2m_wifi_connect_sc+0x458>)
    8730:	4915      	ldr	r1, [pc, #84]	; (8788 <m2m_wifi_connect_sc+0x45c>)
    8732:	4b16      	ldr	r3, [pc, #88]	; (878c <m2m_wifi_connect_sc+0x460>)
    8734:	0018      	movs	r0, r3
    8736:	4b16      	ldr	r3, [pc, #88]	; (8790 <m2m_wifi_connect_sc+0x464>)
    8738:	4798      	blx	r3
    873a:	4b16      	ldr	r3, [pc, #88]	; (8794 <m2m_wifi_connect_sc+0x468>)
    873c:	0018      	movs	r0, r3
    873e:	4b16      	ldr	r3, [pc, #88]	; (8798 <m2m_wifi_connect_sc+0x46c>)
    8740:	4798      	blx	r3
    8742:	200d      	movs	r0, #13
    8744:	4b15      	ldr	r3, [pc, #84]	; (879c <m2m_wifi_connect_sc+0x470>)
    8746:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8748:	2397      	movs	r3, #151	; 0x97
    874a:	18fb      	adds	r3, r7, r3
    874c:	22f4      	movs	r2, #244	; 0xf4
    874e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    8750:	e010      	b.n	8774 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    8752:	2397      	movs	r3, #151	; 0x97
    8754:	18fc      	adds	r4, r7, r3
    8756:	2314      	movs	r3, #20
    8758:	18fa      	adds	r2, r7, r3
    875a:	2300      	movs	r3, #0
    875c:	9302      	str	r3, [sp, #8]
    875e:	2300      	movs	r3, #0
    8760:	9301      	str	r3, [sp, #4]
    8762:	2300      	movs	r3, #0
    8764:	9300      	str	r3, [sp, #0]
    8766:	236c      	movs	r3, #108	; 0x6c
    8768:	2128      	movs	r1, #40	; 0x28
    876a:	2001      	movs	r0, #1
    876c:	4d0c      	ldr	r5, [pc, #48]	; (87a0 <m2m_wifi_connect_sc+0x474>)
    876e:	47a8      	blx	r5
    8770:	0003      	movs	r3, r0
    8772:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    8774:	2397      	movs	r3, #151	; 0x97
    8776:	18fb      	adds	r3, r7, r3
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	b25b      	sxtb	r3, r3
}
    877c:	0018      	movs	r0, r3
    877e:	46bd      	mov	sp, r7
    8780:	b026      	add	sp, #152	; 0x98
    8782:	bdb0      	pop	{r4, r5, r7, pc}
    8784:	00000271 	.word	0x00000271
    8788:	000200e4 	.word	0x000200e4
    878c:	0001fd40 	.word	0x0001fd40
    8790:	0001c37d 	.word	0x0001c37d
    8794:	00020008 	.word	0x00020008
    8798:	0001c499 	.word	0x0001c499
    879c:	0001c3b1 	.word	0x0001c3b1
    87a0:	00006ff1 	.word	0x00006ff1

000087a4 <m2m_wifi_get_firmware_version>:
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
sint8 m2m_wifi_get_firmware_version(tstrM2mRev *pstrRev)
{
    87a4:	b590      	push	{r4, r7, lr}
    87a6:	b085      	sub	sp, #20
    87a8:	af00      	add	r7, sp, #0
    87aa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    87ac:	230f      	movs	r3, #15
    87ae:	18fb      	adds	r3, r7, r3
    87b0:	2200      	movs	r2, #0
    87b2:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    87b4:	230f      	movs	r3, #15
    87b6:	18fc      	adds	r4, r7, r3
    87b8:	4b0d      	ldr	r3, [pc, #52]	; (87f0 <m2m_wifi_get_firmware_version+0x4c>)
    87ba:	4798      	blx	r3
    87bc:	0003      	movs	r3, r0
    87be:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    87c0:	230f      	movs	r3, #15
    87c2:	18fb      	adds	r3, r7, r3
    87c4:	781b      	ldrb	r3, [r3, #0]
    87c6:	b25b      	sxtb	r3, r3
    87c8:	2b00      	cmp	r3, #0
    87ca:	d109      	bne.n	87e0 <m2m_wifi_get_firmware_version+0x3c>
	{
    	ret = nm_get_firmware_full_info(pstrRev);
    87cc:	230f      	movs	r3, #15
    87ce:	18fc      	adds	r4, r7, r3
    87d0:	687b      	ldr	r3, [r7, #4]
    87d2:	0018      	movs	r0, r3
    87d4:	4b07      	ldr	r3, [pc, #28]	; (87f4 <m2m_wifi_get_firmware_version+0x50>)
    87d6:	4798      	blx	r3
    87d8:	0003      	movs	r3, r0
    87da:	7023      	strb	r3, [r4, #0]
		hif_chip_sleep();
    87dc:	4b06      	ldr	r3, [pc, #24]	; (87f8 <m2m_wifi_get_firmware_version+0x54>)
    87de:	4798      	blx	r3
	}
	return ret;
    87e0:	230f      	movs	r3, #15
    87e2:	18fb      	adds	r3, r7, r3
    87e4:	781b      	ldrb	r3, [r3, #0]
    87e6:	b25b      	sxtb	r3, r3
}
    87e8:	0018      	movs	r0, r3
    87ea:	46bd      	mov	sp, r7
    87ec:	b005      	add	sp, #20
    87ee:	bd90      	pop	{r4, r7, pc}
    87f0:	00006eb9 	.word	0x00006eb9
    87f4:	000093bd 	.word	0x000093bd
    87f8:	00006f51 	.word	0x00006f51

000087fc <m2m_wifi_get_sytem_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_sytem_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_sytem_time(void)
{
    87fc:	b590      	push	{r4, r7, lr}
    87fe:	b085      	sub	sp, #20
    8800:	af04      	add	r7, sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
    8802:	2300      	movs	r3, #0
    8804:	9302      	str	r3, [sp, #8]
    8806:	2300      	movs	r3, #0
    8808:	9301      	str	r3, [sp, #4]
    880a:	2300      	movs	r3, #0
    880c:	9300      	str	r3, [sp, #0]
    880e:	2300      	movs	r3, #0
    8810:	2200      	movs	r2, #0
    8812:	211a      	movs	r1, #26
    8814:	2001      	movs	r0, #1
    8816:	4c03      	ldr	r4, [pc, #12]	; (8824 <m2m_wifi_get_sytem_time+0x28>)
    8818:	47a0      	blx	r4
    881a:	0003      	movs	r3, r0
}
    881c:	0018      	movs	r0, r3
    881e:	46bd      	mov	sp, r7
    8820:	b001      	add	sp, #4
    8822:	bd90      	pop	{r4, r7, pc}
    8824:	00006ff1 	.word	0x00006ff1

00008828 <m2m_wifi_enable_sntp>:

sint8 m2m_wifi_enable_sntp(uint8 bEnable)
{
    8828:	b590      	push	{r4, r7, lr}
    882a:	b089      	sub	sp, #36	; 0x24
    882c:	af04      	add	r7, sp, #16
    882e:	0002      	movs	r2, r0
    8830:	1dfb      	adds	r3, r7, #7
    8832:	701a      	strb	r2, [r3, #0]
	uint8	u8Req;

	u8Req = bEnable ? M2M_WIFI_REQ_ENABLE_SNTP_CLIENT : M2M_WIFI_REQ_DISABLE_SNTP_CLIENT;
    8834:	1dfb      	adds	r3, r7, #7
    8836:	781b      	ldrb	r3, [r3, #0]
    8838:	2b00      	cmp	r3, #0
    883a:	d001      	beq.n	8840 <m2m_wifi_enable_sntp+0x18>
    883c:	220c      	movs	r2, #12
    883e:	e000      	b.n	8842 <m2m_wifi_enable_sntp+0x1a>
    8840:	220d      	movs	r2, #13
    8842:	230f      	movs	r3, #15
    8844:	18fb      	adds	r3, r7, r3
    8846:	701a      	strb	r2, [r3, #0]
	return hif_send(M2M_REQ_GROUP_WIFI, u8Req, NULL, 0, NULL, 0, 0);
    8848:	230f      	movs	r3, #15
    884a:	18fb      	adds	r3, r7, r3
    884c:	7819      	ldrb	r1, [r3, #0]
    884e:	2300      	movs	r3, #0
    8850:	9302      	str	r3, [sp, #8]
    8852:	2300      	movs	r3, #0
    8854:	9301      	str	r3, [sp, #4]
    8856:	2300      	movs	r3, #0
    8858:	9300      	str	r3, [sp, #0]
    885a:	2300      	movs	r3, #0
    885c:	2200      	movs	r2, #0
    885e:	2001      	movs	r0, #1
    8860:	4c03      	ldr	r4, [pc, #12]	; (8870 <m2m_wifi_enable_sntp+0x48>)
    8862:	47a0      	blx	r4
    8864:	0003      	movs	r3, r0
}
    8866:	0018      	movs	r0, r3
    8868:	46bd      	mov	sp, r7
    886a:	b005      	add	sp, #20
    886c:	bd90      	pop	{r4, r7, pc}
    886e:	46c0      	nop			; (mov r8, r8)
    8870:	00006ff1 	.word	0x00006ff1

00008874 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    8874:	b590      	push	{r4, r7, lr}
    8876:	b087      	sub	sp, #28
    8878:	af00      	add	r7, sp, #0
    887a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    887c:	2317      	movs	r3, #23
    887e:	18fb      	adds	r3, r7, r3
    8880:	2200      	movs	r2, #0
    8882:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    8884:	687b      	ldr	r3, [r7, #4]
    8886:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    8888:	693b      	ldr	r3, [r7, #16]
    888a:	2280      	movs	r2, #128	; 0x80
    888c:	0052      	lsls	r2, r2, #1
    888e:	4313      	orrs	r3, r2
    8890:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    8892:	693a      	ldr	r2, [r7, #16]
    8894:	23a5      	movs	r3, #165	; 0xa5
    8896:	015b      	lsls	r3, r3, #5
    8898:	0011      	movs	r1, r2
    889a:	0018      	movs	r0, r3
    889c:	4b12      	ldr	r3, [pc, #72]	; (88e8 <chip_apply_conf+0x74>)
    889e:	4798      	blx	r3
		if(val32 != 0) {		
    88a0:	693b      	ldr	r3, [r7, #16]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d018      	beq.n	88d8 <chip_apply_conf+0x64>
			uint32 reg = 0;
    88a6:	2300      	movs	r3, #0
    88a8:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    88aa:	2317      	movs	r3, #23
    88ac:	18fc      	adds	r4, r7, r3
    88ae:	230c      	movs	r3, #12
    88b0:	18fa      	adds	r2, r7, r3
    88b2:	23a5      	movs	r3, #165	; 0xa5
    88b4:	015b      	lsls	r3, r3, #5
    88b6:	0011      	movs	r1, r2
    88b8:	0018      	movs	r0, r3
    88ba:	4b0c      	ldr	r3, [pc, #48]	; (88ec <chip_apply_conf+0x78>)
    88bc:	4798      	blx	r3
    88be:	0003      	movs	r3, r0
    88c0:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    88c2:	2317      	movs	r3, #23
    88c4:	18fb      	adds	r3, r7, r3
    88c6:	781b      	ldrb	r3, [r3, #0]
    88c8:	b25b      	sxtb	r3, r3
    88ca:	2b00      	cmp	r3, #0
    88cc:	d1e1      	bne.n	8892 <chip_apply_conf+0x1e>
				if(reg == val32)
    88ce:	68fa      	ldr	r2, [r7, #12]
    88d0:	693b      	ldr	r3, [r7, #16]
    88d2:	429a      	cmp	r2, r3
    88d4:	d002      	beq.n	88dc <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    88d6:	e7dc      	b.n	8892 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    88d8:	46c0      	nop			; (mov r8, r8)
    88da:	e000      	b.n	88de <chip_apply_conf+0x6a>
					break;
    88dc:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    88de:	2300      	movs	r3, #0
}
    88e0:	0018      	movs	r0, r3
    88e2:	46bd      	mov	sp, r7
    88e4:	b007      	add	sp, #28
    88e6:	bd90      	pop	{r4, r7, pc}
    88e8:	000091a9 	.word	0x000091a9
    88ec:	00009185 	.word	0x00009185

000088f0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    88f0:	b590      	push	{r4, r7, lr}
    88f2:	b083      	sub	sp, #12
    88f4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    88f6:	2300      	movs	r3, #0
    88f8:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    88fa:	1dfb      	adds	r3, r7, #7
    88fc:	2200      	movs	r2, #0
    88fe:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    8900:	1dfc      	adds	r4, r7, #7
    8902:	003b      	movs	r3, r7
    8904:	4a24      	ldr	r2, [pc, #144]	; (8998 <enable_interrupts+0xa8>)
    8906:	0019      	movs	r1, r3
    8908:	0010      	movs	r0, r2
    890a:	4b24      	ldr	r3, [pc, #144]	; (899c <enable_interrupts+0xac>)
    890c:	4798      	blx	r3
    890e:	0003      	movs	r3, r0
    8910:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    8912:	1dfb      	adds	r3, r7, #7
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	b25b      	sxtb	r3, r3
    8918:	2b00      	cmp	r3, #0
    891a:	d131      	bne.n	8980 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    891c:	683b      	ldr	r3, [r7, #0]
    891e:	2280      	movs	r2, #128	; 0x80
    8920:	0052      	lsls	r2, r2, #1
    8922:	4313      	orrs	r3, r2
    8924:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    8926:	683b      	ldr	r3, [r7, #0]
    8928:	1dfc      	adds	r4, r7, #7
    892a:	4a1b      	ldr	r2, [pc, #108]	; (8998 <enable_interrupts+0xa8>)
    892c:	0019      	movs	r1, r3
    892e:	0010      	movs	r0, r2
    8930:	4b1b      	ldr	r3, [pc, #108]	; (89a0 <enable_interrupts+0xb0>)
    8932:	4798      	blx	r3
    8934:	0003      	movs	r3, r0
    8936:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    8938:	1dfb      	adds	r3, r7, #7
    893a:	781b      	ldrb	r3, [r3, #0]
    893c:	b25b      	sxtb	r3, r3
    893e:	2b00      	cmp	r3, #0
    8940:	d120      	bne.n	8984 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    8942:	1dfc      	adds	r4, r7, #7
    8944:	003a      	movs	r2, r7
    8946:	23d0      	movs	r3, #208	; 0xd0
    8948:	015b      	lsls	r3, r3, #5
    894a:	0011      	movs	r1, r2
    894c:	0018      	movs	r0, r3
    894e:	4b13      	ldr	r3, [pc, #76]	; (899c <enable_interrupts+0xac>)
    8950:	4798      	blx	r3
    8952:	0003      	movs	r3, r0
    8954:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    8956:	1dfb      	adds	r3, r7, #7
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	b25b      	sxtb	r3, r3
    895c:	2b00      	cmp	r3, #0
    895e:	d113      	bne.n	8988 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    8960:	683b      	ldr	r3, [r7, #0]
    8962:	2280      	movs	r2, #128	; 0x80
    8964:	0252      	lsls	r2, r2, #9
    8966:	4313      	orrs	r3, r2
    8968:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    896a:	683a      	ldr	r2, [r7, #0]
    896c:	1dfc      	adds	r4, r7, #7
    896e:	23d0      	movs	r3, #208	; 0xd0
    8970:	015b      	lsls	r3, r3, #5
    8972:	0011      	movs	r1, r2
    8974:	0018      	movs	r0, r3
    8976:	4b0a      	ldr	r3, [pc, #40]	; (89a0 <enable_interrupts+0xb0>)
    8978:	4798      	blx	r3
    897a:	0003      	movs	r3, r0
    897c:	7023      	strb	r3, [r4, #0]
    897e:	e004      	b.n	898a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    8980:	46c0      	nop			; (mov r8, r8)
    8982:	e002      	b.n	898a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    8984:	46c0      	nop			; (mov r8, r8)
    8986:	e000      	b.n	898a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    8988:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    898a:	1dfb      	adds	r3, r7, #7
    898c:	781b      	ldrb	r3, [r3, #0]
    898e:	b25b      	sxtb	r3, r3
}
    8990:	0018      	movs	r0, r3
    8992:	46bd      	mov	sp, r7
    8994:	b003      	add	sp, #12
    8996:	bd90      	pop	{r4, r7, pc}
    8998:	00001408 	.word	0x00001408
    899c:	00009185 	.word	0x00009185
    89a0:	000091a9 	.word	0x000091a9

000089a4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b082      	sub	sp, #8
    89a8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    89aa:	4b32      	ldr	r3, [pc, #200]	; (8a74 <nmi_get_chipid+0xd0>)
    89ac:	681b      	ldr	r3, [r3, #0]
    89ae:	2b00      	cmp	r3, #0
    89b0:	d159      	bne.n	8a66 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    89b2:	4a30      	ldr	r2, [pc, #192]	; (8a74 <nmi_get_chipid+0xd0>)
    89b4:	2380      	movs	r3, #128	; 0x80
    89b6:	015b      	lsls	r3, r3, #5
    89b8:	0011      	movs	r1, r2
    89ba:	0018      	movs	r0, r3
    89bc:	4b2e      	ldr	r3, [pc, #184]	; (8a78 <nmi_get_chipid+0xd4>)
    89be:	4798      	blx	r3
    89c0:	1e03      	subs	r3, r0, #0
    89c2:	d004      	beq.n	89ce <nmi_get_chipid+0x2a>
			chipid = 0;
    89c4:	4b2b      	ldr	r3, [pc, #172]	; (8a74 <nmi_get_chipid+0xd0>)
    89c6:	2200      	movs	r2, #0
    89c8:	601a      	str	r2, [r3, #0]
			return 0;
    89ca:	2300      	movs	r3, #0
    89cc:	e04d      	b.n	8a6a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    89ce:	1d3b      	adds	r3, r7, #4
    89d0:	4a2a      	ldr	r2, [pc, #168]	; (8a7c <nmi_get_chipid+0xd8>)
    89d2:	0019      	movs	r1, r3
    89d4:	0010      	movs	r0, r2
    89d6:	4b28      	ldr	r3, [pc, #160]	; (8a78 <nmi_get_chipid+0xd4>)
    89d8:	4798      	blx	r3
    89da:	1e03      	subs	r3, r0, #0
    89dc:	d004      	beq.n	89e8 <nmi_get_chipid+0x44>
			chipid = 0;
    89de:	4b25      	ldr	r3, [pc, #148]	; (8a74 <nmi_get_chipid+0xd0>)
    89e0:	2200      	movs	r2, #0
    89e2:	601a      	str	r2, [r3, #0]
			return 0;
    89e4:	2300      	movs	r3, #0
    89e6:	e040      	b.n	8a6a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    89e8:	4b22      	ldr	r3, [pc, #136]	; (8a74 <nmi_get_chipid+0xd0>)
    89ea:	681b      	ldr	r3, [r3, #0]
    89ec:	4a24      	ldr	r2, [pc, #144]	; (8a80 <nmi_get_chipid+0xdc>)
    89ee:	4293      	cmp	r3, r2
    89f0:	d106      	bne.n	8a00 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    89f2:	687b      	ldr	r3, [r7, #4]
    89f4:	2b01      	cmp	r3, #1
    89f6:	d029      	beq.n	8a4c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    89f8:	4b1e      	ldr	r3, [pc, #120]	; (8a74 <nmi_get_chipid+0xd0>)
    89fa:	4a22      	ldr	r2, [pc, #136]	; (8a84 <nmi_get_chipid+0xe0>)
    89fc:	601a      	str	r2, [r3, #0]
    89fe:	e025      	b.n	8a4c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    8a00:	4b1c      	ldr	r3, [pc, #112]	; (8a74 <nmi_get_chipid+0xd0>)
    8a02:	681b      	ldr	r3, [r3, #0]
    8a04:	4a20      	ldr	r2, [pc, #128]	; (8a88 <nmi_get_chipid+0xe4>)
    8a06:	4293      	cmp	r3, r2
    8a08:	d10d      	bne.n	8a26 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    8a0a:	687b      	ldr	r3, [r7, #4]
    8a0c:	2b03      	cmp	r3, #3
    8a0e:	d01d      	beq.n	8a4c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    8a10:	687b      	ldr	r3, [r7, #4]
    8a12:	2b04      	cmp	r3, #4
    8a14:	d103      	bne.n	8a1e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    8a16:	4b17      	ldr	r3, [pc, #92]	; (8a74 <nmi_get_chipid+0xd0>)
    8a18:	4a1c      	ldr	r2, [pc, #112]	; (8a8c <nmi_get_chipid+0xe8>)
    8a1a:	601a      	str	r2, [r3, #0]
    8a1c:	e016      	b.n	8a4c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    8a1e:	4b15      	ldr	r3, [pc, #84]	; (8a74 <nmi_get_chipid+0xd0>)
    8a20:	4a1b      	ldr	r2, [pc, #108]	; (8a90 <nmi_get_chipid+0xec>)
    8a22:	601a      	str	r2, [r3, #0]
    8a24:	e012      	b.n	8a4c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    8a26:	4b13      	ldr	r3, [pc, #76]	; (8a74 <nmi_get_chipid+0xd0>)
    8a28:	681b      	ldr	r3, [r3, #0]
    8a2a:	4a1a      	ldr	r2, [pc, #104]	; (8a94 <nmi_get_chipid+0xf0>)
    8a2c:	4293      	cmp	r3, r2
    8a2e:	d10d      	bne.n	8a4c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    8a30:	4a10      	ldr	r2, [pc, #64]	; (8a74 <nmi_get_chipid+0xd0>)
    8a32:	23ec      	movs	r3, #236	; 0xec
    8a34:	039b      	lsls	r3, r3, #14
    8a36:	0011      	movs	r1, r2
    8a38:	0018      	movs	r0, r3
    8a3a:	4b0f      	ldr	r3, [pc, #60]	; (8a78 <nmi_get_chipid+0xd4>)
    8a3c:	4798      	blx	r3
    8a3e:	1e03      	subs	r3, r0, #0
    8a40:	d004      	beq.n	8a4c <nmi_get_chipid+0xa8>
			chipid = 0;
    8a42:	4b0c      	ldr	r3, [pc, #48]	; (8a74 <nmi_get_chipid+0xd0>)
    8a44:	2200      	movs	r2, #0
    8a46:	601a      	str	r2, [r3, #0]
			return 0;
    8a48:	2300      	movs	r3, #0
    8a4a:	e00e      	b.n	8a6a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    8a4c:	4b09      	ldr	r3, [pc, #36]	; (8a74 <nmi_get_chipid+0xd0>)
    8a4e:	681b      	ldr	r3, [r3, #0]
    8a50:	4a11      	ldr	r2, [pc, #68]	; (8a98 <nmi_get_chipid+0xf4>)
    8a52:	401a      	ands	r2, r3
    8a54:	4b07      	ldr	r3, [pc, #28]	; (8a74 <nmi_get_chipid+0xd0>)
    8a56:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    8a58:	4b06      	ldr	r3, [pc, #24]	; (8a74 <nmi_get_chipid+0xd0>)
    8a5a:	681b      	ldr	r3, [r3, #0]
    8a5c:	22a0      	movs	r2, #160	; 0xa0
    8a5e:	02d2      	lsls	r2, r2, #11
    8a60:	431a      	orrs	r2, r3
    8a62:	4b04      	ldr	r3, [pc, #16]	; (8a74 <nmi_get_chipid+0xd0>)
    8a64:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    8a66:	4b03      	ldr	r3, [pc, #12]	; (8a74 <nmi_get_chipid+0xd0>)
    8a68:	681b      	ldr	r3, [r3, #0]
}
    8a6a:	0018      	movs	r0, r3
    8a6c:	46bd      	mov	sp, r7
    8a6e:	b002      	add	sp, #8
    8a70:	bd80      	pop	{r7, pc}
    8a72:	46c0      	nop			; (mov r8, r8)
    8a74:	20000550 	.word	0x20000550
    8a78:	00009185 	.word	0x00009185
    8a7c:	000013f4 	.word	0x000013f4
    8a80:	001002a0 	.word	0x001002a0
    8a84:	001002a1 	.word	0x001002a1
    8a88:	001002b0 	.word	0x001002b0
    8a8c:	001002b1 	.word	0x001002b1
    8a90:	001002b2 	.word	0x001002b2
    8a94:	001000f0 	.word	0x001000f0
    8a98:	fff0ffff 	.word	0xfff0ffff

00008a9c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    8a9c:	b590      	push	{r4, r7, lr}
    8a9e:	b083      	sub	sp, #12
    8aa0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    8aa2:	1dfb      	adds	r3, r7, #7
    8aa4:	2200      	movs	r2, #0
    8aa6:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    8aa8:	1dfc      	adds	r4, r7, #7
    8aaa:	003b      	movs	r3, r7
    8aac:	0019      	movs	r1, r3
    8aae:	2010      	movs	r0, #16
    8ab0:	4b2e      	ldr	r3, [pc, #184]	; (8b6c <chip_sleep+0xd0>)
    8ab2:	4798      	blx	r3
    8ab4:	0003      	movs	r3, r0
    8ab6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    8ab8:	1dfb      	adds	r3, r7, #7
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	b25b      	sxtb	r3, r3
    8abe:	2b00      	cmp	r3, #0
    8ac0:	d145      	bne.n	8b4e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    8ac2:	683b      	ldr	r3, [r7, #0]
    8ac4:	2201      	movs	r2, #1
    8ac6:	4013      	ands	r3, r2
    8ac8:	d000      	beq.n	8acc <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    8aca:	e7ed      	b.n	8aa8 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    8acc:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    8ace:	1dfc      	adds	r4, r7, #7
    8ad0:	003b      	movs	r3, r7
    8ad2:	0019      	movs	r1, r3
    8ad4:	2001      	movs	r0, #1
    8ad6:	4b25      	ldr	r3, [pc, #148]	; (8b6c <chip_sleep+0xd0>)
    8ad8:	4798      	blx	r3
    8ada:	0003      	movs	r3, r0
    8adc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    8ade:	1dfb      	adds	r3, r7, #7
    8ae0:	781b      	ldrb	r3, [r3, #0]
    8ae2:	b25b      	sxtb	r3, r3
    8ae4:	2b00      	cmp	r3, #0
    8ae6:	d134      	bne.n	8b52 <chip_sleep+0xb6>
	if(reg & NBIT1)
    8ae8:	683b      	ldr	r3, [r7, #0]
    8aea:	2202      	movs	r2, #2
    8aec:	4013      	ands	r3, r2
    8aee:	d010      	beq.n	8b12 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    8af0:	683b      	ldr	r3, [r7, #0]
    8af2:	2202      	movs	r2, #2
    8af4:	4393      	bics	r3, r2
    8af6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    8af8:	683b      	ldr	r3, [r7, #0]
    8afa:	1dfc      	adds	r4, r7, #7
    8afc:	0019      	movs	r1, r3
    8afe:	2001      	movs	r0, #1
    8b00:	4b1b      	ldr	r3, [pc, #108]	; (8b70 <chip_sleep+0xd4>)
    8b02:	4798      	blx	r3
    8b04:	0003      	movs	r3, r0
    8b06:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    8b08:	1dfb      	adds	r3, r7, #7
    8b0a:	781b      	ldrb	r3, [r3, #0]
    8b0c:	b25b      	sxtb	r3, r3
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d121      	bne.n	8b56 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    8b12:	1dfc      	adds	r4, r7, #7
    8b14:	003b      	movs	r3, r7
    8b16:	0019      	movs	r1, r3
    8b18:	200b      	movs	r0, #11
    8b1a:	4b14      	ldr	r3, [pc, #80]	; (8b6c <chip_sleep+0xd0>)
    8b1c:	4798      	blx	r3
    8b1e:	0003      	movs	r3, r0
    8b20:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    8b22:	1dfb      	adds	r3, r7, #7
    8b24:	781b      	ldrb	r3, [r3, #0]
    8b26:	b25b      	sxtb	r3, r3
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d116      	bne.n	8b5a <chip_sleep+0xbe>
	if(reg & NBIT0)
    8b2c:	683b      	ldr	r3, [r7, #0]
    8b2e:	2201      	movs	r2, #1
    8b30:	4013      	ands	r3, r2
    8b32:	d013      	beq.n	8b5c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    8b34:	683b      	ldr	r3, [r7, #0]
    8b36:	2201      	movs	r2, #1
    8b38:	4393      	bics	r3, r2
    8b3a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    8b3c:	683b      	ldr	r3, [r7, #0]
    8b3e:	1dfc      	adds	r4, r7, #7
    8b40:	0019      	movs	r1, r3
    8b42:	200b      	movs	r0, #11
    8b44:	4b0a      	ldr	r3, [pc, #40]	; (8b70 <chip_sleep+0xd4>)
    8b46:	4798      	blx	r3
    8b48:	0003      	movs	r3, r0
    8b4a:	7023      	strb	r3, [r4, #0]
    8b4c:	e006      	b.n	8b5c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	e004      	b.n	8b5c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    8b52:	46c0      	nop			; (mov r8, r8)
    8b54:	e002      	b.n	8b5c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    8b56:	46c0      	nop			; (mov r8, r8)
    8b58:	e000      	b.n	8b5c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    8b5a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    8b5c:	1dfb      	adds	r3, r7, #7
    8b5e:	781b      	ldrb	r3, [r3, #0]
    8b60:	b25b      	sxtb	r3, r3
}
    8b62:	0018      	movs	r0, r3
    8b64:	46bd      	mov	sp, r7
    8b66:	b003      	add	sp, #12
    8b68:	bd90      	pop	{r4, r7, pc}
    8b6a:	46c0      	nop			; (mov r8, r8)
    8b6c:	00009185 	.word	0x00009185
    8b70:	000091a9 	.word	0x000091a9

00008b74 <chip_wake>:
sint8 chip_wake(void)
{
    8b74:	b590      	push	{r4, r7, lr}
    8b76:	b085      	sub	sp, #20
    8b78:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8b7a:	230f      	movs	r3, #15
    8b7c:	18fb      	adds	r3, r7, r3
    8b7e:	2200      	movs	r2, #0
    8b80:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    8b82:	2300      	movs	r3, #0
    8b84:	607b      	str	r3, [r7, #4]
    8b86:	2300      	movs	r3, #0
    8b88:	603b      	str	r3, [r7, #0]
    8b8a:	2300      	movs	r3, #0
    8b8c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    8b8e:	230f      	movs	r3, #15
    8b90:	18fc      	adds	r4, r7, r3
    8b92:	1d3b      	adds	r3, r7, #4
    8b94:	0019      	movs	r1, r3
    8b96:	200b      	movs	r0, #11
    8b98:	4b4c      	ldr	r3, [pc, #304]	; (8ccc <chip_wake+0x158>)
    8b9a:	4798      	blx	r3
    8b9c:	0003      	movs	r3, r0
    8b9e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8ba0:	230f      	movs	r3, #15
    8ba2:	18fb      	adds	r3, r7, r3
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	b25b      	sxtb	r3, r3
    8ba8:	2b00      	cmp	r3, #0
    8baa:	d000      	beq.n	8bae <chip_wake+0x3a>
    8bac:	e07f      	b.n	8cae <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    8bae:	687b      	ldr	r3, [r7, #4]
    8bb0:	2201      	movs	r2, #1
    8bb2:	4013      	ands	r3, r2
    8bb4:	d110      	bne.n	8bd8 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    8bb6:	687b      	ldr	r3, [r7, #4]
    8bb8:	2201      	movs	r2, #1
    8bba:	4313      	orrs	r3, r2
    8bbc:	220f      	movs	r2, #15
    8bbe:	18bc      	adds	r4, r7, r2
    8bc0:	0019      	movs	r1, r3
    8bc2:	200b      	movs	r0, #11
    8bc4:	4b42      	ldr	r3, [pc, #264]	; (8cd0 <chip_wake+0x15c>)
    8bc6:	4798      	blx	r3
    8bc8:	0003      	movs	r3, r0
    8bca:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8bcc:	230f      	movs	r3, #15
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	b25b      	sxtb	r3, r3
    8bd4:	2b00      	cmp	r3, #0
    8bd6:	d16c      	bne.n	8cb2 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    8bd8:	230f      	movs	r3, #15
    8bda:	18fc      	adds	r4, r7, r3
    8bdc:	1d3b      	adds	r3, r7, #4
    8bde:	0019      	movs	r1, r3
    8be0:	2001      	movs	r0, #1
    8be2:	4b3a      	ldr	r3, [pc, #232]	; (8ccc <chip_wake+0x158>)
    8be4:	4798      	blx	r3
    8be6:	0003      	movs	r3, r0
    8be8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8bea:	230f      	movs	r3, #15
    8bec:	18fb      	adds	r3, r7, r3
    8bee:	781b      	ldrb	r3, [r3, #0]
    8bf0:	b25b      	sxtb	r3, r3
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d15f      	bne.n	8cb6 <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    8bf6:	687b      	ldr	r3, [r7, #4]
    8bf8:	2202      	movs	r2, #2
    8bfa:	4013      	ands	r3, r2
    8bfc:	d110      	bne.n	8c20 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    8bfe:	687b      	ldr	r3, [r7, #4]
    8c00:	2202      	movs	r2, #2
    8c02:	4313      	orrs	r3, r2
    8c04:	220f      	movs	r2, #15
    8c06:	18bc      	adds	r4, r7, r2
    8c08:	0019      	movs	r1, r3
    8c0a:	2001      	movs	r0, #1
    8c0c:	4b30      	ldr	r3, [pc, #192]	; (8cd0 <chip_wake+0x15c>)
    8c0e:	4798      	blx	r3
    8c10:	0003      	movs	r3, r0
    8c12:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    8c14:	230f      	movs	r3, #15
    8c16:	18fb      	adds	r3, r7, r3
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	b25b      	sxtb	r3, r3
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d14c      	bne.n	8cba <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    8c20:	230f      	movs	r3, #15
    8c22:	18fc      	adds	r4, r7, r3
    8c24:	003b      	movs	r3, r7
    8c26:	0019      	movs	r1, r3
    8c28:	200f      	movs	r0, #15
    8c2a:	4b28      	ldr	r3, [pc, #160]	; (8ccc <chip_wake+0x158>)
    8c2c:	4798      	blx	r3
    8c2e:	0003      	movs	r3, r0
    8c30:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    8c32:	230f      	movs	r3, #15
    8c34:	18fb      	adds	r3, r7, r3
    8c36:	781b      	ldrb	r3, [r3, #0]
    8c38:	b25b      	sxtb	r3, r3
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d013      	beq.n	8c66 <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    8c3e:	23aa      	movs	r3, #170	; 0xaa
    8c40:	005a      	lsls	r2, r3, #1
    8c42:	4924      	ldr	r1, [pc, #144]	; (8cd4 <chip_wake+0x160>)
    8c44:	4b24      	ldr	r3, [pc, #144]	; (8cd8 <chip_wake+0x164>)
    8c46:	0018      	movs	r0, r3
    8c48:	4b24      	ldr	r3, [pc, #144]	; (8cdc <chip_wake+0x168>)
    8c4a:	4798      	blx	r3
    8c4c:	230f      	movs	r3, #15
    8c4e:	18fb      	adds	r3, r7, r3
    8c50:	2100      	movs	r1, #0
    8c52:	5659      	ldrsb	r1, [r3, r1]
    8c54:	683a      	ldr	r2, [r7, #0]
    8c56:	4b22      	ldr	r3, [pc, #136]	; (8ce0 <chip_wake+0x16c>)
    8c58:	0018      	movs	r0, r3
    8c5a:	4b20      	ldr	r3, [pc, #128]	; (8cdc <chip_wake+0x168>)
    8c5c:	4798      	blx	r3
    8c5e:	200d      	movs	r0, #13
    8c60:	4b20      	ldr	r3, [pc, #128]	; (8ce4 <chip_wake+0x170>)
    8c62:	4798      	blx	r3
			goto _WAKE_EXIT;
    8c64:	e02a      	b.n	8cbc <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    8c66:	683b      	ldr	r3, [r7, #0]
    8c68:	2204      	movs	r2, #4
    8c6a:	4013      	ands	r3, r2
    8c6c:	d11b      	bne.n	8ca6 <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    8c6e:	2002      	movs	r0, #2
    8c70:	4b1d      	ldr	r3, [pc, #116]	; (8ce8 <chip_wake+0x174>)
    8c72:	4798      	blx	r3
		trials++;
    8c74:	68bb      	ldr	r3, [r7, #8]
    8c76:	3301      	adds	r3, #1
    8c78:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    8c7a:	68bb      	ldr	r3, [r7, #8]
    8c7c:	2b04      	cmp	r3, #4
    8c7e:	d9cf      	bls.n	8c20 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    8c80:	23af      	movs	r3, #175	; 0xaf
    8c82:	005a      	lsls	r2, r3, #1
    8c84:	4913      	ldr	r1, [pc, #76]	; (8cd4 <chip_wake+0x160>)
    8c86:	4b14      	ldr	r3, [pc, #80]	; (8cd8 <chip_wake+0x164>)
    8c88:	0018      	movs	r0, r3
    8c8a:	4b14      	ldr	r3, [pc, #80]	; (8cdc <chip_wake+0x168>)
    8c8c:	4798      	blx	r3
    8c8e:	4b17      	ldr	r3, [pc, #92]	; (8cec <chip_wake+0x178>)
    8c90:	0018      	movs	r0, r3
    8c92:	4b17      	ldr	r3, [pc, #92]	; (8cf0 <chip_wake+0x17c>)
    8c94:	4798      	blx	r3
    8c96:	200d      	movs	r0, #13
    8c98:	4b12      	ldr	r3, [pc, #72]	; (8ce4 <chip_wake+0x170>)
    8c9a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    8c9c:	230f      	movs	r3, #15
    8c9e:	18fb      	adds	r3, r7, r3
    8ca0:	22fc      	movs	r2, #252	; 0xfc
    8ca2:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    8ca4:	e00a      	b.n	8cbc <chip_wake+0x148>
			break;
    8ca6:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    8ca8:	4b12      	ldr	r3, [pc, #72]	; (8cf4 <chip_wake+0x180>)
    8caa:	4798      	blx	r3
    8cac:	e006      	b.n	8cbc <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8cae:	46c0      	nop			; (mov r8, r8)
    8cb0:	e004      	b.n	8cbc <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	e002      	b.n	8cbc <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8cb6:	46c0      	nop			; (mov r8, r8)
    8cb8:	e000      	b.n	8cbc <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    8cba:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    8cbc:	230f      	movs	r3, #15
    8cbe:	18fb      	adds	r3, r7, r3
    8cc0:	781b      	ldrb	r3, [r3, #0]
    8cc2:	b25b      	sxtb	r3, r3
}
    8cc4:	0018      	movs	r0, r3
    8cc6:	46bd      	mov	sp, r7
    8cc8:	b005      	add	sp, #20
    8cca:	bd90      	pop	{r4, r7, pc}
    8ccc:	00009185 	.word	0x00009185
    8cd0:	000091a9 	.word	0x000091a9
    8cd4:	000201bc 	.word	0x000201bc
    8cd8:	000200f8 	.word	0x000200f8
    8cdc:	0001c37d 	.word	0x0001c37d
    8ce0:	0002010c 	.word	0x0002010c
    8ce4:	0001c3b1 	.word	0x0001c3b1
    8ce8:	000064a1 	.word	0x000064a1
    8cec:	00020124 	.word	0x00020124
    8cf0:	0001c499 	.word	0x0001c499
    8cf4:	00009145 	.word	0x00009145

00008cf8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    8cf8:	b580      	push	{r7, lr}
    8cfa:	b088      	sub	sp, #32
    8cfc:	af00      	add	r7, sp, #0
    8cfe:	0002      	movs	r2, r0
    8d00:	1dfb      	adds	r3, r7, #7
    8d02:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    8d04:	2313      	movs	r3, #19
    8d06:	18fb      	adds	r3, r7, r3
    8d08:	2200      	movs	r2, #0
    8d0a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    8d0c:	2300      	movs	r3, #0
    8d0e:	61fb      	str	r3, [r7, #28]
    8d10:	2300      	movs	r3, #0
    8d12:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    8d14:	2300      	movs	r3, #0
    8d16:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    8d18:	4b4a      	ldr	r3, [pc, #296]	; (8e44 <wait_for_bootrom+0x14c>)
    8d1a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    8d1c:	2300      	movs	r3, #0
    8d1e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    8d20:	4b49      	ldr	r3, [pc, #292]	; (8e48 <wait_for_bootrom+0x150>)
    8d22:	0018      	movs	r0, r3
    8d24:	4b49      	ldr	r3, [pc, #292]	; (8e4c <wait_for_bootrom+0x154>)
    8d26:	4798      	blx	r3
    8d28:	0003      	movs	r3, r0
    8d2a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    8d2c:	69fb      	ldr	r3, [r7, #28]
    8d2e:	2b00      	cmp	r3, #0
    8d30:	db03      	blt.n	8d3a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    8d32:	2001      	movs	r0, #1
    8d34:	4b46      	ldr	r3, [pc, #280]	; (8e50 <wait_for_bootrom+0x158>)
    8d36:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    8d38:	e7f2      	b.n	8d20 <wait_for_bootrom+0x28>
			break;
    8d3a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    8d3c:	4b45      	ldr	r3, [pc, #276]	; (8e54 <wait_for_bootrom+0x15c>)
    8d3e:	0018      	movs	r0, r3
    8d40:	4b42      	ldr	r3, [pc, #264]	; (8e4c <wait_for_bootrom+0x154>)
    8d42:	4798      	blx	r3
    8d44:	0003      	movs	r3, r0
    8d46:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    8d48:	69fb      	ldr	r3, [r7, #28]
    8d4a:	2201      	movs	r2, #1
    8d4c:	4013      	ands	r3, r2
    8d4e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    8d50:	69fb      	ldr	r3, [r7, #28]
    8d52:	2b00      	cmp	r3, #0
    8d54:	d112      	bne.n	8d7c <wait_for_bootrom+0x84>
	{
		reg = 0;
    8d56:	2300      	movs	r3, #0
    8d58:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    8d5a:	e00b      	b.n	8d74 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    8d5c:	2001      	movs	r0, #1
    8d5e:	4b3c      	ldr	r3, [pc, #240]	; (8e50 <wait_for_bootrom+0x158>)
    8d60:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    8d62:	4b3d      	ldr	r3, [pc, #244]	; (8e58 <wait_for_bootrom+0x160>)
    8d64:	0018      	movs	r0, r3
    8d66:	4b39      	ldr	r3, [pc, #228]	; (8e4c <wait_for_bootrom+0x154>)
    8d68:	4798      	blx	r3
    8d6a:	0003      	movs	r3, r0
    8d6c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    8d6e:	69bb      	ldr	r3, [r7, #24]
    8d70:	3301      	adds	r3, #1
    8d72:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    8d74:	69fb      	ldr	r3, [r7, #28]
    8d76:	4a39      	ldr	r2, [pc, #228]	; (8e5c <wait_for_bootrom+0x164>)
    8d78:	4293      	cmp	r3, r2
    8d7a:	d1ef      	bne.n	8d5c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    8d7c:	1dfb      	adds	r3, r7, #7
    8d7e:	781b      	ldrb	r3, [r3, #0]
    8d80:	2b02      	cmp	r3, #2
    8d82:	d10d      	bne.n	8da0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    8d84:	4a36      	ldr	r2, [pc, #216]	; (8e60 <wait_for_bootrom+0x168>)
    8d86:	4b37      	ldr	r3, [pc, #220]	; (8e64 <wait_for_bootrom+0x16c>)
    8d88:	0011      	movs	r1, r2
    8d8a:	0018      	movs	r0, r3
    8d8c:	4b36      	ldr	r3, [pc, #216]	; (8e68 <wait_for_bootrom+0x170>)
    8d8e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    8d90:	2380      	movs	r3, #128	; 0x80
    8d92:	035b      	lsls	r3, r3, #13
    8d94:	4a35      	ldr	r2, [pc, #212]	; (8e6c <wait_for_bootrom+0x174>)
    8d96:	0019      	movs	r1, r3
    8d98:	0010      	movs	r0, r2
    8d9a:	4b33      	ldr	r3, [pc, #204]	; (8e68 <wait_for_bootrom+0x170>)
    8d9c:	4798      	blx	r3
    8d9e:	e022      	b.n	8de6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    8da0:	1dfb      	adds	r3, r7, #7
    8da2:	781b      	ldrb	r3, [r3, #0]
    8da4:	2b03      	cmp	r3, #3
    8da6:	d10b      	bne.n	8dc0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    8da8:	4a2d      	ldr	r2, [pc, #180]	; (8e60 <wait_for_bootrom+0x168>)
    8daa:	4b2e      	ldr	r3, [pc, #184]	; (8e64 <wait_for_bootrom+0x16c>)
    8dac:	0011      	movs	r1, r2
    8dae:	0018      	movs	r0, r3
    8db0:	4b2d      	ldr	r3, [pc, #180]	; (8e68 <wait_for_bootrom+0x170>)
    8db2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    8db4:	4b2d      	ldr	r3, [pc, #180]	; (8e6c <wait_for_bootrom+0x174>)
    8db6:	2100      	movs	r1, #0
    8db8:	0018      	movs	r0, r3
    8dba:	4b2b      	ldr	r3, [pc, #172]	; (8e68 <wait_for_bootrom+0x170>)
    8dbc:	4798      	blx	r3
    8dbe:	e012      	b.n	8de6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    8dc0:	1dfb      	adds	r3, r7, #7
    8dc2:	781b      	ldrb	r3, [r3, #0]
    8dc4:	2b04      	cmp	r3, #4
    8dc6:	d108      	bne.n	8dda <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    8dc8:	2380      	movs	r3, #128	; 0x80
    8dca:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    8dcc:	68fb      	ldr	r3, [r7, #12]
    8dce:	4a27      	ldr	r2, [pc, #156]	; (8e6c <wait_for_bootrom+0x174>)
    8dd0:	0019      	movs	r1, r3
    8dd2:	0010      	movs	r0, r2
    8dd4:	4b24      	ldr	r3, [pc, #144]	; (8e68 <wait_for_bootrom+0x170>)
    8dd6:	4798      	blx	r3
    8dd8:	e005      	b.n	8de6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    8dda:	68fb      	ldr	r3, [r7, #12]
    8ddc:	4a23      	ldr	r2, [pc, #140]	; (8e6c <wait_for_bootrom+0x174>)
    8dde:	0019      	movs	r1, r3
    8de0:	0010      	movs	r0, r2
    8de2:	4b21      	ldr	r3, [pc, #132]	; (8e68 <wait_for_bootrom+0x170>)
    8de4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    8de6:	4b22      	ldr	r3, [pc, #136]	; (8e70 <wait_for_bootrom+0x178>)
    8de8:	4798      	blx	r3
    8dea:	0003      	movs	r3, r0
    8dec:	051b      	lsls	r3, r3, #20
    8dee:	0d1b      	lsrs	r3, r3, #20
    8df0:	4a20      	ldr	r2, [pc, #128]	; (8e74 <wait_for_bootrom+0x17c>)
    8df2:	4293      	cmp	r3, r2
    8df4:	d906      	bls.n	8e04 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    8df6:	697b      	ldr	r3, [r7, #20]
    8df8:	2202      	movs	r2, #2
    8dfa:	4313      	orrs	r3, r2
    8dfc:	0018      	movs	r0, r3
    8dfe:	4b1e      	ldr	r3, [pc, #120]	; (8e78 <wait_for_bootrom+0x180>)
    8e00:	4798      	blx	r3
    8e02:	e003      	b.n	8e0c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    8e04:	697b      	ldr	r3, [r7, #20]
    8e06:	0018      	movs	r0, r3
    8e08:	4b1b      	ldr	r3, [pc, #108]	; (8e78 <wait_for_bootrom+0x180>)
    8e0a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    8e0c:	4b1b      	ldr	r3, [pc, #108]	; (8e7c <wait_for_bootrom+0x184>)
    8e0e:	0018      	movs	r0, r3
    8e10:	4b1b      	ldr	r3, [pc, #108]	; (8e80 <wait_for_bootrom+0x188>)
    8e12:	4798      	blx	r3
    8e14:	68fa      	ldr	r2, [r7, #12]
    8e16:	4b1b      	ldr	r3, [pc, #108]	; (8e84 <wait_for_bootrom+0x18c>)
    8e18:	0011      	movs	r1, r2
    8e1a:	0018      	movs	r0, r3
    8e1c:	4b18      	ldr	r3, [pc, #96]	; (8e80 <wait_for_bootrom+0x188>)
    8e1e:	4798      	blx	r3
    8e20:	200d      	movs	r0, #13
    8e22:	4b19      	ldr	r3, [pc, #100]	; (8e88 <wait_for_bootrom+0x190>)
    8e24:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    8e26:	4a19      	ldr	r2, [pc, #100]	; (8e8c <wait_for_bootrom+0x194>)
    8e28:	4b0b      	ldr	r3, [pc, #44]	; (8e58 <wait_for_bootrom+0x160>)
    8e2a:	0011      	movs	r1, r2
    8e2c:	0018      	movs	r0, r3
    8e2e:	4b0e      	ldr	r3, [pc, #56]	; (8e68 <wait_for_bootrom+0x170>)
    8e30:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    8e32:	2313      	movs	r3, #19
    8e34:	18fb      	adds	r3, r7, r3
    8e36:	781b      	ldrb	r3, [r3, #0]
    8e38:	b25b      	sxtb	r3, r3
}
    8e3a:	0018      	movs	r0, r3
    8e3c:	46bd      	mov	sp, r7
    8e3e:	b008      	add	sp, #32
    8e40:	bd80      	pop	{r7, pc}
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	13521352 	.word	0x13521352
    8e48:	00001014 	.word	0x00001014
    8e4c:	00009165 	.word	0x00009165
    8e50:	000064a1 	.word	0x000064a1
    8e54:	000207bc 	.word	0x000207bc
    8e58:	000c000c 	.word	0x000c000c
    8e5c:	10add09e 	.word	0x10add09e
    8e60:	3c1cd57d 	.word	0x3c1cd57d
    8e64:	000207ac 	.word	0x000207ac
    8e68:	000091a9 	.word	0x000091a9
    8e6c:	0000108c 	.word	0x0000108c
    8e70:	000089a5 	.word	0x000089a5
    8e74:	0000039f 	.word	0x0000039f
    8e78:	00008875 	.word	0x00008875
    8e7c:	00020140 	.word	0x00020140
    8e80:	0001c37d 	.word	0x0001c37d
    8e84:	0002014c 	.word	0x0002014c
    8e88:	0001c3b1 	.word	0x0001c3b1
    8e8c:	ef522f61 	.word	0xef522f61

00008e90 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    8e90:	b580      	push	{r7, lr}
    8e92:	b088      	sub	sp, #32
    8e94:	af00      	add	r7, sp, #0
    8e96:	0002      	movs	r2, r0
    8e98:	1dfb      	adds	r3, r7, #7
    8e9a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    8e9c:	231f      	movs	r3, #31
    8e9e:	18fb      	adds	r3, r7, r3
    8ea0:	2200      	movs	r2, #0
    8ea2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    8ea4:	2300      	movs	r3, #0
    8ea6:	61bb      	str	r3, [r7, #24]
    8ea8:	2300      	movs	r3, #0
    8eaa:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    8eac:	2301      	movs	r3, #1
    8eae:	425b      	negs	r3, r3
    8eb0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    8eb2:	4b1d      	ldr	r3, [pc, #116]	; (8f28 <wait_for_firmware_start+0x98>)
    8eb4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    8eb6:	4b1d      	ldr	r3, [pc, #116]	; (8f2c <wait_for_firmware_start+0x9c>)
    8eb8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    8eba:	1dfb      	adds	r3, r7, #7
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	2b02      	cmp	r3, #2
    8ec0:	d003      	beq.n	8eca <wait_for_firmware_start+0x3a>
    8ec2:	1dfb      	adds	r3, r7, #7
    8ec4:	781b      	ldrb	r3, [r3, #0]
    8ec6:	2b03      	cmp	r3, #3
    8ec8:	d119      	bne.n	8efe <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    8eca:	4b19      	ldr	r3, [pc, #100]	; (8f30 <wait_for_firmware_start+0xa0>)
    8ecc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    8ece:	4b19      	ldr	r3, [pc, #100]	; (8f34 <wait_for_firmware_start+0xa4>)
    8ed0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    8ed2:	e014      	b.n	8efe <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    8ed4:	2002      	movs	r0, #2
    8ed6:	4b18      	ldr	r3, [pc, #96]	; (8f38 <wait_for_firmware_start+0xa8>)
    8ed8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    8eda:	68fb      	ldr	r3, [r7, #12]
    8edc:	0018      	movs	r0, r3
    8ede:	4b17      	ldr	r3, [pc, #92]	; (8f3c <wait_for_firmware_start+0xac>)
    8ee0:	4798      	blx	r3
    8ee2:	0003      	movs	r3, r0
    8ee4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    8ee6:	697b      	ldr	r3, [r7, #20]
    8ee8:	3301      	adds	r3, #1
    8eea:	617b      	str	r3, [r7, #20]
    8eec:	697a      	ldr	r2, [r7, #20]
    8eee:	693b      	ldr	r3, [r7, #16]
    8ef0:	429a      	cmp	r2, r3
    8ef2:	d304      	bcc.n	8efe <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    8ef4:	231f      	movs	r3, #31
    8ef6:	18fb      	adds	r3, r7, r3
    8ef8:	22fb      	movs	r2, #251	; 0xfb
    8efa:	701a      	strb	r2, [r3, #0]
			goto ERR;
    8efc:	e00c      	b.n	8f18 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    8efe:	68ba      	ldr	r2, [r7, #8]
    8f00:	69bb      	ldr	r3, [r7, #24]
    8f02:	429a      	cmp	r2, r3
    8f04:	d1e6      	bne.n	8ed4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    8f06:	68bb      	ldr	r3, [r7, #8]
    8f08:	4a08      	ldr	r2, [pc, #32]	; (8f2c <wait_for_firmware_start+0x9c>)
    8f0a:	4293      	cmp	r3, r2
    8f0c:	d104      	bne.n	8f18 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    8f0e:	4b06      	ldr	r3, [pc, #24]	; (8f28 <wait_for_firmware_start+0x98>)
    8f10:	2100      	movs	r1, #0
    8f12:	0018      	movs	r0, r3
    8f14:	4b0a      	ldr	r3, [pc, #40]	; (8f40 <wait_for_firmware_start+0xb0>)
    8f16:	4798      	blx	r3
	}
ERR:
	return ret;
    8f18:	231f      	movs	r3, #31
    8f1a:	18fb      	adds	r3, r7, r3
    8f1c:	781b      	ldrb	r3, [r3, #0]
    8f1e:	b25b      	sxtb	r3, r3
}
    8f20:	0018      	movs	r0, r3
    8f22:	46bd      	mov	sp, r7
    8f24:	b008      	add	sp, #32
    8f26:	bd80      	pop	{r7, pc}
    8f28:	0000108c 	.word	0x0000108c
    8f2c:	02532636 	.word	0x02532636
    8f30:	000207ac 	.word	0x000207ac
    8f34:	d75dc1c3 	.word	0xd75dc1c3
    8f38:	000064a1 	.word	0x000064a1
    8f3c:	00009165 	.word	0x00009165
    8f40:	000091a9 	.word	0x000091a9

00008f44 <chip_deinit>:

sint8 chip_deinit(void)
{
    8f44:	b590      	push	{r4, r7, lr}
    8f46:	b083      	sub	sp, #12
    8f48:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    8f4a:	2300      	movs	r3, #0
    8f4c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    8f4e:	1dfc      	adds	r4, r7, #7
    8f50:	003a      	movs	r2, r7
    8f52:	23a0      	movs	r3, #160	; 0xa0
    8f54:	015b      	lsls	r3, r3, #5
    8f56:	0011      	movs	r1, r2
    8f58:	0018      	movs	r0, r3
    8f5a:	4b1f      	ldr	r3, [pc, #124]	; (8fd8 <chip_deinit+0x94>)
    8f5c:	4798      	blx	r3
    8f5e:	0003      	movs	r3, r0
    8f60:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    8f62:	1dfb      	adds	r3, r7, #7
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	b25b      	sxtb	r3, r3
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d00d      	beq.n	8f88 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    8f6c:	4a1b      	ldr	r2, [pc, #108]	; (8fdc <chip_deinit+0x98>)
    8f6e:	491c      	ldr	r1, [pc, #112]	; (8fe0 <chip_deinit+0x9c>)
    8f70:	4b1c      	ldr	r3, [pc, #112]	; (8fe4 <chip_deinit+0xa0>)
    8f72:	0018      	movs	r0, r3
    8f74:	4b1c      	ldr	r3, [pc, #112]	; (8fe8 <chip_deinit+0xa4>)
    8f76:	4798      	blx	r3
    8f78:	4b1c      	ldr	r3, [pc, #112]	; (8fec <chip_deinit+0xa8>)
    8f7a:	0018      	movs	r0, r3
    8f7c:	4b1c      	ldr	r3, [pc, #112]	; (8ff0 <chip_deinit+0xac>)
    8f7e:	4798      	blx	r3
    8f80:	200d      	movs	r0, #13
    8f82:	4b1c      	ldr	r3, [pc, #112]	; (8ff4 <chip_deinit+0xb0>)
    8f84:	4798      	blx	r3
		goto ERR1;
    8f86:	e020      	b.n	8fca <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    8f88:	683b      	ldr	r3, [r7, #0]
    8f8a:	4a1b      	ldr	r2, [pc, #108]	; (8ff8 <chip_deinit+0xb4>)
    8f8c:	4013      	ands	r3, r2
    8f8e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    8f90:	683a      	ldr	r2, [r7, #0]
    8f92:	1dfc      	adds	r4, r7, #7
    8f94:	23a0      	movs	r3, #160	; 0xa0
    8f96:	015b      	lsls	r3, r3, #5
    8f98:	0011      	movs	r1, r2
    8f9a:	0018      	movs	r0, r3
    8f9c:	4b17      	ldr	r3, [pc, #92]	; (8ffc <chip_deinit+0xb8>)
    8f9e:	4798      	blx	r3
    8fa0:	0003      	movs	r3, r0
    8fa2:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    8fa4:	1dfb      	adds	r3, r7, #7
    8fa6:	781b      	ldrb	r3, [r3, #0]
    8fa8:	b25b      	sxtb	r3, r3
    8faa:	2b00      	cmp	r3, #0
    8fac:	d00d      	beq.n	8fca <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    8fae:	4a14      	ldr	r2, [pc, #80]	; (9000 <chip_deinit+0xbc>)
    8fb0:	490b      	ldr	r1, [pc, #44]	; (8fe0 <chip_deinit+0x9c>)
    8fb2:	4b0c      	ldr	r3, [pc, #48]	; (8fe4 <chip_deinit+0xa0>)
    8fb4:	0018      	movs	r0, r3
    8fb6:	4b0c      	ldr	r3, [pc, #48]	; (8fe8 <chip_deinit+0xa4>)
    8fb8:	4798      	blx	r3
    8fba:	4b0c      	ldr	r3, [pc, #48]	; (8fec <chip_deinit+0xa8>)
    8fbc:	0018      	movs	r0, r3
    8fbe:	4b0c      	ldr	r3, [pc, #48]	; (8ff0 <chip_deinit+0xac>)
    8fc0:	4798      	blx	r3
    8fc2:	200d      	movs	r0, #13
    8fc4:	4b0b      	ldr	r3, [pc, #44]	; (8ff4 <chip_deinit+0xb0>)
    8fc6:	4798      	blx	r3
		goto ERR1;
    8fc8:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    8fca:	1dfb      	adds	r3, r7, #7
    8fcc:	781b      	ldrb	r3, [r3, #0]
    8fce:	b25b      	sxtb	r3, r3
}
    8fd0:	0018      	movs	r0, r3
    8fd2:	46bd      	mov	sp, r7
    8fd4:	b003      	add	sp, #12
    8fd6:	bd90      	pop	{r4, r7, pc}
    8fd8:	00009185 	.word	0x00009185
    8fdc:	00000205 	.word	0x00000205
    8fe0:	000201c8 	.word	0x000201c8
    8fe4:	000200f8 	.word	0x000200f8
    8fe8:	0001c37d 	.word	0x0001c37d
    8fec:	00020164 	.word	0x00020164
    8ff0:	0001c499 	.word	0x0001c499
    8ff4:	0001c3b1 	.word	0x0001c3b1
    8ff8:	fffffbff 	.word	0xfffffbff
    8ffc:	000091a9 	.word	0x000091a9
    9000:	0000020b 	.word	0x0000020b

00009004 <pullup_ctrl>:
_EXIT:
	return ret;
}

sint8 pullup_ctrl(uint32 pinmask, uint8 enable)
{
    9004:	b590      	push	{r4, r7, lr}
    9006:	b085      	sub	sp, #20
    9008:	af00      	add	r7, sp, #0
    900a:	6078      	str	r0, [r7, #4]
    900c:	000a      	movs	r2, r1
    900e:	1cfb      	adds	r3, r7, #3
    9010:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret;
	uint32 val32;
	s8Ret = nm_read_reg_with_ret(0x142c, &val32);
    9012:	230f      	movs	r3, #15
    9014:	18fc      	adds	r4, r7, r3
    9016:	2308      	movs	r3, #8
    9018:	18fb      	adds	r3, r7, r3
    901a:	4a28      	ldr	r2, [pc, #160]	; (90bc <pullup_ctrl+0xb8>)
    901c:	0019      	movs	r1, r3
    901e:	0010      	movs	r0, r2
    9020:	4b27      	ldr	r3, [pc, #156]	; (90c0 <pullup_ctrl+0xbc>)
    9022:	4798      	blx	r3
    9024:	0003      	movs	r3, r0
    9026:	7023      	strb	r3, [r4, #0]
	if(s8Ret != M2M_SUCCESS) {
    9028:	230f      	movs	r3, #15
    902a:	18fb      	adds	r3, r7, r3
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	b25b      	sxtb	r3, r3
    9030:	2b00      	cmp	r3, #0
    9032:	d00e      	beq.n	9052 <pullup_ctrl+0x4e>
		M2M_ERR("[pullup_ctrl]: failed to read\n");
    9034:	2394      	movs	r3, #148	; 0x94
    9036:	009a      	lsls	r2, r3, #2
    9038:	4922      	ldr	r1, [pc, #136]	; (90c4 <pullup_ctrl+0xc0>)
    903a:	4b23      	ldr	r3, [pc, #140]	; (90c8 <pullup_ctrl+0xc4>)
    903c:	0018      	movs	r0, r3
    903e:	4b23      	ldr	r3, [pc, #140]	; (90cc <pullup_ctrl+0xc8>)
    9040:	4798      	blx	r3
    9042:	4b23      	ldr	r3, [pc, #140]	; (90d0 <pullup_ctrl+0xcc>)
    9044:	0018      	movs	r0, r3
    9046:	4b23      	ldr	r3, [pc, #140]	; (90d4 <pullup_ctrl+0xd0>)
    9048:	4798      	blx	r3
    904a:	200d      	movs	r0, #13
    904c:	4b22      	ldr	r3, [pc, #136]	; (90d8 <pullup_ctrl+0xd4>)
    904e:	4798      	blx	r3
		goto _EXIT;
    9050:	e02b      	b.n	90aa <pullup_ctrl+0xa6>
	}
	if(enable) {
    9052:	1cfb      	adds	r3, r7, #3
    9054:	781b      	ldrb	r3, [r3, #0]
    9056:	2b00      	cmp	r3, #0
    9058:	d005      	beq.n	9066 <pullup_ctrl+0x62>
		val32 &= ~pinmask;
    905a:	687b      	ldr	r3, [r7, #4]
    905c:	43db      	mvns	r3, r3
    905e:	68ba      	ldr	r2, [r7, #8]
    9060:	4013      	ands	r3, r2
    9062:	60bb      	str	r3, [r7, #8]
    9064:	e003      	b.n	906e <pullup_ctrl+0x6a>
		} else {
		val32 |= pinmask;
    9066:	68ba      	ldr	r2, [r7, #8]
    9068:	687b      	ldr	r3, [r7, #4]
    906a:	4313      	orrs	r3, r2
    906c:	60bb      	str	r3, [r7, #8]
	}
	s8Ret = nm_write_reg(0x142c, val32);
    906e:	68bb      	ldr	r3, [r7, #8]
    9070:	220f      	movs	r2, #15
    9072:	18bc      	adds	r4, r7, r2
    9074:	4a11      	ldr	r2, [pc, #68]	; (90bc <pullup_ctrl+0xb8>)
    9076:	0019      	movs	r1, r3
    9078:	0010      	movs	r0, r2
    907a:	4b18      	ldr	r3, [pc, #96]	; (90dc <pullup_ctrl+0xd8>)
    907c:	4798      	blx	r3
    907e:	0003      	movs	r3, r0
    9080:	7023      	strb	r3, [r4, #0]
	if(s8Ret  != M2M_SUCCESS) {
    9082:	230f      	movs	r3, #15
    9084:	18fb      	adds	r3, r7, r3
    9086:	781b      	ldrb	r3, [r3, #0]
    9088:	b25b      	sxtb	r3, r3
    908a:	2b00      	cmp	r3, #0
    908c:	d00d      	beq.n	90aa <pullup_ctrl+0xa6>
		M2M_ERR("[pullup_ctrl]: failed to write\n");
    908e:	4a14      	ldr	r2, [pc, #80]	; (90e0 <pullup_ctrl+0xdc>)
    9090:	490c      	ldr	r1, [pc, #48]	; (90c4 <pullup_ctrl+0xc0>)
    9092:	4b0d      	ldr	r3, [pc, #52]	; (90c8 <pullup_ctrl+0xc4>)
    9094:	0018      	movs	r0, r3
    9096:	4b0d      	ldr	r3, [pc, #52]	; (90cc <pullup_ctrl+0xc8>)
    9098:	4798      	blx	r3
    909a:	4b12      	ldr	r3, [pc, #72]	; (90e4 <pullup_ctrl+0xe0>)
    909c:	0018      	movs	r0, r3
    909e:	4b0d      	ldr	r3, [pc, #52]	; (90d4 <pullup_ctrl+0xd0>)
    90a0:	4798      	blx	r3
    90a2:	200d      	movs	r0, #13
    90a4:	4b0c      	ldr	r3, [pc, #48]	; (90d8 <pullup_ctrl+0xd4>)
    90a6:	4798      	blx	r3
		goto _EXIT;
    90a8:	46c0      	nop			; (mov r8, r8)
	}
_EXIT:
	return s8Ret;
    90aa:	230f      	movs	r3, #15
    90ac:	18fb      	adds	r3, r7, r3
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	b25b      	sxtb	r3, r3
}
    90b2:	0018      	movs	r0, r3
    90b4:	46bd      	mov	sp, r7
    90b6:	b005      	add	sp, #20
    90b8:	bd90      	pop	{r4, r7, pc}
    90ba:	46c0      	nop			; (mov r8, r8)
    90bc:	0000142c 	.word	0x0000142c
    90c0:	00009185 	.word	0x00009185
    90c4:	000201d4 	.word	0x000201d4
    90c8:	000200f8 	.word	0x000200f8
    90cc:	0001c37d 	.word	0x0001c37d
    90d0:	0002017c 	.word	0x0002017c
    90d4:	0001c499 	.word	0x0001c499
    90d8:	0001c3b1 	.word	0x0001c3b1
    90dc:	000091a9 	.word	0x000091a9
    90e0:	0000025a 	.word	0x0000025a
    90e4:	0002019c 	.word	0x0002019c

000090e8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    90e8:	b590      	push	{r4, r7, lr}
    90ea:	b085      	sub	sp, #20
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    90f0:	230f      	movs	r3, #15
    90f2:	18fb      	adds	r3, r7, r3
    90f4:	2200      	movs	r2, #0
    90f6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    90f8:	230f      	movs	r3, #15
    90fa:	18fc      	adds	r4, r7, r3
    90fc:	687b      	ldr	r3, [r7, #4]
    90fe:	0018      	movs	r0, r3
    9100:	4b05      	ldr	r3, [pc, #20]	; (9118 <nm_bus_iface_init+0x30>)
    9102:	4798      	blx	r3
    9104:	0003      	movs	r3, r0
    9106:	7023      	strb	r3, [r4, #0]
	return ret;
    9108:	230f      	movs	r3, #15
    910a:	18fb      	adds	r3, r7, r3
    910c:	781b      	ldrb	r3, [r3, #0]
    910e:	b25b      	sxtb	r3, r3
}
    9110:	0018      	movs	r0, r3
    9112:	46bd      	mov	sp, r7
    9114:	b005      	add	sp, #20
    9116:	bd90      	pop	{r4, r7, pc}
    9118:	00006b69 	.word	0x00006b69

0000911c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    911c:	b590      	push	{r4, r7, lr}
    911e:	b083      	sub	sp, #12
    9120:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    9122:	1dfb      	adds	r3, r7, #7
    9124:	2200      	movs	r2, #0
    9126:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    9128:	1dfc      	adds	r4, r7, #7
    912a:	4b05      	ldr	r3, [pc, #20]	; (9140 <nm_bus_iface_deinit+0x24>)
    912c:	4798      	blx	r3
    912e:	0003      	movs	r3, r0
    9130:	7023      	strb	r3, [r4, #0]

	return ret;
    9132:	1dfb      	adds	r3, r7, #7
    9134:	781b      	ldrb	r3, [r3, #0]
    9136:	b25b      	sxtb	r3, r3
}
    9138:	0018      	movs	r0, r3
    913a:	46bd      	mov	sp, r7
    913c:	b003      	add	sp, #12
    913e:	bd90      	pop	{r4, r7, pc}
    9140:	00006ce5 	.word	0x00006ce5

00009144 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    9144:	b580      	push	{r7, lr}
    9146:	b082      	sub	sp, #8
    9148:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    914a:	1dfb      	adds	r3, r7, #7
    914c:	2200      	movs	r2, #0
    914e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    9150:	4b03      	ldr	r3, [pc, #12]	; (9160 <nm_bus_reset+0x1c>)
    9152:	4798      	blx	r3
    9154:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    9156:	0018      	movs	r0, r3
    9158:	46bd      	mov	sp, r7
    915a:	b002      	add	sp, #8
    915c:	bd80      	pop	{r7, pc}
    915e:	46c0      	nop			; (mov r8, r8)
    9160:	0000aa2d 	.word	0x0000aa2d

00009164 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    9164:	b580      	push	{r7, lr}
    9166:	b082      	sub	sp, #8
    9168:	af00      	add	r7, sp, #0
    916a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	0018      	movs	r0, r3
    9170:	4b03      	ldr	r3, [pc, #12]	; (9180 <nm_read_reg+0x1c>)
    9172:	4798      	blx	r3
    9174:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    9176:	0018      	movs	r0, r3
    9178:	46bd      	mov	sp, r7
    917a:	b002      	add	sp, #8
    917c:	bd80      	pop	{r7, pc}
    917e:	46c0      	nop			; (mov r8, r8)
    9180:	0000abc1 	.word	0x0000abc1

00009184 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    9184:	b580      	push	{r7, lr}
    9186:	b082      	sub	sp, #8
    9188:	af00      	add	r7, sp, #0
    918a:	6078      	str	r0, [r7, #4]
    918c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    918e:	683a      	ldr	r2, [r7, #0]
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	0011      	movs	r1, r2
    9194:	0018      	movs	r0, r3
    9196:	4b03      	ldr	r3, [pc, #12]	; (91a4 <nm_read_reg_with_ret+0x20>)
    9198:	4798      	blx	r3
    919a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    919c:	0018      	movs	r0, r3
    919e:	46bd      	mov	sp, r7
    91a0:	b002      	add	sp, #8
    91a2:	bd80      	pop	{r7, pc}
    91a4:	0000abe5 	.word	0x0000abe5

000091a8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    91a8:	b580      	push	{r7, lr}
    91aa:	b082      	sub	sp, #8
    91ac:	af00      	add	r7, sp, #0
    91ae:	6078      	str	r0, [r7, #4]
    91b0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    91b2:	683a      	ldr	r2, [r7, #0]
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	0011      	movs	r1, r2
    91b8:	0018      	movs	r0, r3
    91ba:	4b03      	ldr	r3, [pc, #12]	; (91c8 <nm_write_reg+0x20>)
    91bc:	4798      	blx	r3
    91be:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    91c0:	0018      	movs	r0, r3
    91c2:	46bd      	mov	sp, r7
    91c4:	b002      	add	sp, #8
    91c6:	bd80      	pop	{r7, pc}
    91c8:	0000ac35 	.word	0x0000ac35

000091cc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    91cc:	b580      	push	{r7, lr}
    91ce:	b084      	sub	sp, #16
    91d0:	af00      	add	r7, sp, #0
    91d2:	60f8      	str	r0, [r7, #12]
    91d4:	60b9      	str	r1, [r7, #8]
    91d6:	1dbb      	adds	r3, r7, #6
    91d8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    91da:	1dbb      	adds	r3, r7, #6
    91dc:	881a      	ldrh	r2, [r3, #0]
    91de:	68b9      	ldr	r1, [r7, #8]
    91e0:	68fb      	ldr	r3, [r7, #12]
    91e2:	0018      	movs	r0, r3
    91e4:	4b03      	ldr	r3, [pc, #12]	; (91f4 <p_nm_read_block+0x28>)
    91e6:	4798      	blx	r3
    91e8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    91ea:	0018      	movs	r0, r3
    91ec:	46bd      	mov	sp, r7
    91ee:	b004      	add	sp, #16
    91f0:	bd80      	pop	{r7, pc}
    91f2:	46c0      	nop			; (mov r8, r8)
    91f4:	0000ac85 	.word	0x0000ac85

000091f8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    91f8:	b580      	push	{r7, lr}
    91fa:	b086      	sub	sp, #24
    91fc:	af00      	add	r7, sp, #0
    91fe:	60f8      	str	r0, [r7, #12]
    9200:	60b9      	str	r1, [r7, #8]
    9202:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    9204:	4b2d      	ldr	r3, [pc, #180]	; (92bc <nm_read_block+0xc4>)
    9206:	881a      	ldrh	r2, [r3, #0]
    9208:	2310      	movs	r3, #16
    920a:	18fb      	adds	r3, r7, r3
    920c:	3a08      	subs	r2, #8
    920e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    9210:	2300      	movs	r3, #0
    9212:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    9214:	2313      	movs	r3, #19
    9216:	18fb      	adds	r3, r7, r3
    9218:	2200      	movs	r2, #0
    921a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    921c:	2310      	movs	r3, #16
    921e:	18fb      	adds	r3, r7, r3
    9220:	881a      	ldrh	r2, [r3, #0]
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	429a      	cmp	r2, r3
    9226:	d313      	bcc.n	9250 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    9228:	68ba      	ldr	r2, [r7, #8]
    922a:	697b      	ldr	r3, [r7, #20]
    922c:	18d1      	adds	r1, r2, r3
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	b29a      	uxth	r2, r3
    9232:	68fb      	ldr	r3, [r7, #12]
    9234:	0018      	movs	r0, r3
    9236:	4b22      	ldr	r3, [pc, #136]	; (92c0 <nm_read_block+0xc8>)
    9238:	4798      	blx	r3
    923a:	0003      	movs	r3, r0
    923c:	b2da      	uxtb	r2, r3
    923e:	2313      	movs	r3, #19
    9240:	18fb      	adds	r3, r7, r3
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	18d3      	adds	r3, r2, r3
    9246:	b2da      	uxtb	r2, r3
    9248:	2313      	movs	r3, #19
    924a:	18fb      	adds	r3, r7, r3
    924c:	701a      	strb	r2, [r3, #0]
			break;
    924e:	e02d      	b.n	92ac <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    9250:	68ba      	ldr	r2, [r7, #8]
    9252:	697b      	ldr	r3, [r7, #20]
    9254:	18d1      	adds	r1, r2, r3
    9256:	2310      	movs	r3, #16
    9258:	18fb      	adds	r3, r7, r3
    925a:	881a      	ldrh	r2, [r3, #0]
    925c:	68fb      	ldr	r3, [r7, #12]
    925e:	0018      	movs	r0, r3
    9260:	4b17      	ldr	r3, [pc, #92]	; (92c0 <nm_read_block+0xc8>)
    9262:	4798      	blx	r3
    9264:	0003      	movs	r3, r0
    9266:	b2da      	uxtb	r2, r3
    9268:	2313      	movs	r3, #19
    926a:	18fb      	adds	r3, r7, r3
    926c:	781b      	ldrb	r3, [r3, #0]
    926e:	18d3      	adds	r3, r2, r3
    9270:	b2da      	uxtb	r2, r3
    9272:	2313      	movs	r3, #19
    9274:	18fb      	adds	r3, r7, r3
    9276:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    9278:	2313      	movs	r3, #19
    927a:	18fb      	adds	r3, r7, r3
    927c:	781b      	ldrb	r3, [r3, #0]
    927e:	b25b      	sxtb	r3, r3
    9280:	2b00      	cmp	r3, #0
    9282:	d112      	bne.n	92aa <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    9284:	2310      	movs	r3, #16
    9286:	18fb      	adds	r3, r7, r3
    9288:	881b      	ldrh	r3, [r3, #0]
    928a:	687a      	ldr	r2, [r7, #4]
    928c:	1ad3      	subs	r3, r2, r3
    928e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    9290:	2310      	movs	r3, #16
    9292:	18fb      	adds	r3, r7, r3
    9294:	881b      	ldrh	r3, [r3, #0]
    9296:	697a      	ldr	r2, [r7, #20]
    9298:	18d3      	adds	r3, r2, r3
    929a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    929c:	2310      	movs	r3, #16
    929e:	18fb      	adds	r3, r7, r3
    92a0:	881b      	ldrh	r3, [r3, #0]
    92a2:	68fa      	ldr	r2, [r7, #12]
    92a4:	18d3      	adds	r3, r2, r3
    92a6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    92a8:	e7b8      	b.n	921c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    92aa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    92ac:	2313      	movs	r3, #19
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	b25b      	sxtb	r3, r3
}
    92b4:	0018      	movs	r0, r3
    92b6:	46bd      	mov	sp, r7
    92b8:	b006      	add	sp, #24
    92ba:	bd80      	pop	{r7, pc}
    92bc:	2000011c 	.word	0x2000011c
    92c0:	000091cd 	.word	0x000091cd

000092c4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    92c4:	b580      	push	{r7, lr}
    92c6:	b084      	sub	sp, #16
    92c8:	af00      	add	r7, sp, #0
    92ca:	60f8      	str	r0, [r7, #12]
    92cc:	60b9      	str	r1, [r7, #8]
    92ce:	1dbb      	adds	r3, r7, #6
    92d0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    92d2:	1dbb      	adds	r3, r7, #6
    92d4:	881a      	ldrh	r2, [r3, #0]
    92d6:	68b9      	ldr	r1, [r7, #8]
    92d8:	68fb      	ldr	r3, [r7, #12]
    92da:	0018      	movs	r0, r3
    92dc:	4b03      	ldr	r3, [pc, #12]	; (92ec <p_nm_write_block+0x28>)
    92de:	4798      	blx	r3
    92e0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    92e2:	0018      	movs	r0, r3
    92e4:	46bd      	mov	sp, r7
    92e6:	b004      	add	sp, #16
    92e8:	bd80      	pop	{r7, pc}
    92ea:	46c0      	nop			; (mov r8, r8)
    92ec:	0000acdd 	.word	0x0000acdd

000092f0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    92f0:	b580      	push	{r7, lr}
    92f2:	b086      	sub	sp, #24
    92f4:	af00      	add	r7, sp, #0
    92f6:	60f8      	str	r0, [r7, #12]
    92f8:	60b9      	str	r1, [r7, #8]
    92fa:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    92fc:	4b2d      	ldr	r3, [pc, #180]	; (93b4 <nm_write_block+0xc4>)
    92fe:	881a      	ldrh	r2, [r3, #0]
    9300:	2310      	movs	r3, #16
    9302:	18fb      	adds	r3, r7, r3
    9304:	3a08      	subs	r2, #8
    9306:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    9308:	2300      	movs	r3, #0
    930a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    930c:	2313      	movs	r3, #19
    930e:	18fb      	adds	r3, r7, r3
    9310:	2200      	movs	r2, #0
    9312:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    9314:	2310      	movs	r3, #16
    9316:	18fb      	adds	r3, r7, r3
    9318:	881a      	ldrh	r2, [r3, #0]
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	429a      	cmp	r2, r3
    931e:	d313      	bcc.n	9348 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    9320:	68ba      	ldr	r2, [r7, #8]
    9322:	697b      	ldr	r3, [r7, #20]
    9324:	18d1      	adds	r1, r2, r3
    9326:	687b      	ldr	r3, [r7, #4]
    9328:	b29a      	uxth	r2, r3
    932a:	68fb      	ldr	r3, [r7, #12]
    932c:	0018      	movs	r0, r3
    932e:	4b22      	ldr	r3, [pc, #136]	; (93b8 <nm_write_block+0xc8>)
    9330:	4798      	blx	r3
    9332:	0003      	movs	r3, r0
    9334:	b2da      	uxtb	r2, r3
    9336:	2313      	movs	r3, #19
    9338:	18fb      	adds	r3, r7, r3
    933a:	781b      	ldrb	r3, [r3, #0]
    933c:	18d3      	adds	r3, r2, r3
    933e:	b2da      	uxtb	r2, r3
    9340:	2313      	movs	r3, #19
    9342:	18fb      	adds	r3, r7, r3
    9344:	701a      	strb	r2, [r3, #0]
			break;
    9346:	e02d      	b.n	93a4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    9348:	68ba      	ldr	r2, [r7, #8]
    934a:	697b      	ldr	r3, [r7, #20]
    934c:	18d1      	adds	r1, r2, r3
    934e:	2310      	movs	r3, #16
    9350:	18fb      	adds	r3, r7, r3
    9352:	881a      	ldrh	r2, [r3, #0]
    9354:	68fb      	ldr	r3, [r7, #12]
    9356:	0018      	movs	r0, r3
    9358:	4b17      	ldr	r3, [pc, #92]	; (93b8 <nm_write_block+0xc8>)
    935a:	4798      	blx	r3
    935c:	0003      	movs	r3, r0
    935e:	b2da      	uxtb	r2, r3
    9360:	2313      	movs	r3, #19
    9362:	18fb      	adds	r3, r7, r3
    9364:	781b      	ldrb	r3, [r3, #0]
    9366:	18d3      	adds	r3, r2, r3
    9368:	b2da      	uxtb	r2, r3
    936a:	2313      	movs	r3, #19
    936c:	18fb      	adds	r3, r7, r3
    936e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    9370:	2313      	movs	r3, #19
    9372:	18fb      	adds	r3, r7, r3
    9374:	781b      	ldrb	r3, [r3, #0]
    9376:	b25b      	sxtb	r3, r3
    9378:	2b00      	cmp	r3, #0
    937a:	d112      	bne.n	93a2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    937c:	2310      	movs	r3, #16
    937e:	18fb      	adds	r3, r7, r3
    9380:	881b      	ldrh	r3, [r3, #0]
    9382:	687a      	ldr	r2, [r7, #4]
    9384:	1ad3      	subs	r3, r2, r3
    9386:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    9388:	2310      	movs	r3, #16
    938a:	18fb      	adds	r3, r7, r3
    938c:	881b      	ldrh	r3, [r3, #0]
    938e:	697a      	ldr	r2, [r7, #20]
    9390:	18d3      	adds	r3, r2, r3
    9392:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    9394:	2310      	movs	r3, #16
    9396:	18fb      	adds	r3, r7, r3
    9398:	881b      	ldrh	r3, [r3, #0]
    939a:	68fa      	ldr	r2, [r7, #12]
    939c:	18d3      	adds	r3, r2, r3
    939e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    93a0:	e7b8      	b.n	9314 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    93a2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    93a4:	2313      	movs	r3, #19
    93a6:	18fb      	adds	r3, r7, r3
    93a8:	781b      	ldrb	r3, [r3, #0]
    93aa:	b25b      	sxtb	r3, r3
}
    93ac:	0018      	movs	r0, r3
    93ae:	46bd      	mov	sp, r7
    93b0:	b006      	add	sp, #24
    93b2:	bd80      	pop	{r7, pc}
    93b4:	2000011c 	.word	0x2000011c
    93b8:	000092c5 	.word	0x000092c5

000093bc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    93bc:	b590      	push	{r4, r7, lr}
    93be:	b089      	sub	sp, #36	; 0x24
    93c0:	af00      	add	r7, sp, #0
    93c2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    93c4:	2300      	movs	r3, #0
    93c6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    93c8:	231f      	movs	r3, #31
    93ca:	18fb      	adds	r3, r7, r3
    93cc:	2200      	movs	r2, #0
    93ce:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    93d0:	230c      	movs	r3, #12
    93d2:	18fb      	adds	r3, r7, r3
    93d4:	0018      	movs	r0, r3
    93d6:	2308      	movs	r3, #8
    93d8:	001a      	movs	r2, r3
    93da:	2100      	movs	r1, #0
    93dc:	4b64      	ldr	r3, [pc, #400]	; (9570 <nm_get_firmware_full_info+0x1b4>)
    93de:	4798      	blx	r3
	if (pstrRev != NULL)
    93e0:	687b      	ldr	r3, [r7, #4]
    93e2:	2b00      	cmp	r3, #0
    93e4:	d100      	bne.n	93e8 <nm_get_firmware_full_info+0x2c>
    93e6:	e0ba      	b.n	955e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	2228      	movs	r2, #40	; 0x28
    93ec:	2100      	movs	r1, #0
    93ee:	0018      	movs	r0, r3
    93f0:	4b60      	ldr	r3, [pc, #384]	; (9574 <nm_get_firmware_full_info+0x1b8>)
    93f2:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    93f4:	231f      	movs	r3, #31
    93f6:	18fc      	adds	r4, r7, r3
    93f8:	2314      	movs	r3, #20
    93fa:	18fb      	adds	r3, r7, r3
    93fc:	4a5e      	ldr	r2, [pc, #376]	; (9578 <nm_get_firmware_full_info+0x1bc>)
    93fe:	0019      	movs	r1, r3
    9400:	0010      	movs	r0, r2
    9402:	4b5e      	ldr	r3, [pc, #376]	; (957c <nm_get_firmware_full_info+0x1c0>)
    9404:	4798      	blx	r3
    9406:	0003      	movs	r3, r0
    9408:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    940a:	231f      	movs	r3, #31
    940c:	18fb      	adds	r3, r7, r3
    940e:	781b      	ldrb	r3, [r3, #0]
    9410:	b25b      	sxtb	r3, r3
    9412:	2b00      	cmp	r3, #0
    9414:	d000      	beq.n	9418 <nm_get_firmware_full_info+0x5c>
    9416:	e0a2      	b.n	955e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    9418:	697b      	ldr	r3, [r7, #20]
    941a:	2b00      	cmp	r3, #0
    941c:	d100      	bne.n	9420 <nm_get_firmware_full_info+0x64>
    941e:	e09a      	b.n	9556 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    9420:	697b      	ldr	r3, [r7, #20]
    9422:	22c0      	movs	r2, #192	; 0xc0
    9424:	0292      	lsls	r2, r2, #10
    9426:	4313      	orrs	r3, r2
    9428:	221f      	movs	r2, #31
    942a:	18bc      	adds	r4, r7, r2
    942c:	220c      	movs	r2, #12
    942e:	18b9      	adds	r1, r7, r2
    9430:	2208      	movs	r2, #8
    9432:	0018      	movs	r0, r3
    9434:	4b52      	ldr	r3, [pc, #328]	; (9580 <nm_get_firmware_full_info+0x1c4>)
    9436:	4798      	blx	r3
    9438:	0003      	movs	r3, r0
    943a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    943c:	231f      	movs	r3, #31
    943e:	18fb      	adds	r3, r7, r3
    9440:	781b      	ldrb	r3, [r3, #0]
    9442:	b25b      	sxtb	r3, r3
    9444:	2b00      	cmp	r3, #0
    9446:	d000      	beq.n	944a <nm_get_firmware_full_info+0x8e>
    9448:	e089      	b.n	955e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    944a:	230c      	movs	r3, #12
    944c:	18fb      	adds	r3, r7, r3
    944e:	685b      	ldr	r3, [r3, #4]
    9450:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    9452:	697b      	ldr	r3, [r7, #20]
    9454:	041b      	lsls	r3, r3, #16
    9456:	0c1b      	lsrs	r3, r3, #16
    9458:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    945a:	697b      	ldr	r3, [r7, #20]
    945c:	2b00      	cmp	r3, #0
    945e:	d100      	bne.n	9462 <nm_get_firmware_full_info+0xa6>
    9460:	e074      	b.n	954c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    9462:	697b      	ldr	r3, [r7, #20]
    9464:	22c0      	movs	r2, #192	; 0xc0
    9466:	0292      	lsls	r2, r2, #10
    9468:	4313      	orrs	r3, r2
    946a:	221f      	movs	r2, #31
    946c:	18bc      	adds	r4, r7, r2
    946e:	6879      	ldr	r1, [r7, #4]
    9470:	2228      	movs	r2, #40	; 0x28
    9472:	0018      	movs	r0, r3
    9474:	4b42      	ldr	r3, [pc, #264]	; (9580 <nm_get_firmware_full_info+0x1c4>)
    9476:	4798      	blx	r3
    9478:	0003      	movs	r3, r0
    947a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    947c:	231f      	movs	r3, #31
    947e:	18fb      	adds	r3, r7, r3
    9480:	781b      	ldrb	r3, [r3, #0]
    9482:	b25b      	sxtb	r3, r3
    9484:	2b00      	cmp	r3, #0
    9486:	d16a      	bne.n	955e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	791b      	ldrb	r3, [r3, #4]
    948c:	021b      	lsls	r3, r3, #8
    948e:	b21a      	sxth	r2, r3
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	795b      	ldrb	r3, [r3, #5]
    9494:	011b      	lsls	r3, r3, #4
    9496:	b21b      	sxth	r3, r3
    9498:	21ff      	movs	r1, #255	; 0xff
    949a:	400b      	ands	r3, r1
    949c:	b21b      	sxth	r3, r3
    949e:	4313      	orrs	r3, r2
    94a0:	b21a      	sxth	r2, r3
    94a2:	687b      	ldr	r3, [r7, #4]
    94a4:	799b      	ldrb	r3, [r3, #6]
    94a6:	b21b      	sxth	r3, r3
    94a8:	210f      	movs	r1, #15
    94aa:	400b      	ands	r3, r1
    94ac:	b21b      	sxth	r3, r3
    94ae:	4313      	orrs	r3, r2
    94b0:	b21a      	sxth	r2, r3
    94b2:	231c      	movs	r3, #28
    94b4:	18fb      	adds	r3, r7, r3
    94b6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    94b8:	231a      	movs	r3, #26
    94ba:	18fb      	adds	r3, r7, r3
    94bc:	4a31      	ldr	r2, [pc, #196]	; (9584 <nm_get_firmware_full_info+0x1c8>)
    94be:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    94c0:	687b      	ldr	r3, [r7, #4]
    94c2:	79db      	ldrb	r3, [r3, #7]
    94c4:	021b      	lsls	r3, r3, #8
    94c6:	b21a      	sxth	r2, r3
    94c8:	687b      	ldr	r3, [r7, #4]
    94ca:	7a1b      	ldrb	r3, [r3, #8]
    94cc:	011b      	lsls	r3, r3, #4
    94ce:	b21b      	sxth	r3, r3
    94d0:	21ff      	movs	r1, #255	; 0xff
    94d2:	400b      	ands	r3, r1
    94d4:	b21b      	sxth	r3, r3
    94d6:	4313      	orrs	r3, r2
    94d8:	b21a      	sxth	r2, r3
    94da:	687b      	ldr	r3, [r7, #4]
    94dc:	7a5b      	ldrb	r3, [r3, #9]
    94de:	b21b      	sxth	r3, r3
    94e0:	210f      	movs	r1, #15
    94e2:	400b      	ands	r3, r1
    94e4:	b21b      	sxth	r3, r3
    94e6:	4313      	orrs	r3, r2
    94e8:	b21a      	sxth	r2, r3
    94ea:	2318      	movs	r3, #24
    94ec:	18fb      	adds	r3, r7, r3
    94ee:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    94f0:	231c      	movs	r3, #28
    94f2:	18fb      	adds	r3, r7, r3
    94f4:	881b      	ldrh	r3, [r3, #0]
    94f6:	2b00      	cmp	r3, #0
    94f8:	d009      	beq.n	950e <nm_get_firmware_full_info+0x152>
    94fa:	2318      	movs	r3, #24
    94fc:	18fb      	adds	r3, r7, r3
    94fe:	881b      	ldrh	r3, [r3, #0]
    9500:	2b00      	cmp	r3, #0
    9502:	d004      	beq.n	950e <nm_get_firmware_full_info+0x152>
    9504:	2318      	movs	r3, #24
    9506:	18fb      	adds	r3, r7, r3
    9508:	881b      	ldrh	r3, [r3, #0]
    950a:	2b00      	cmp	r3, #0
    950c:	d104      	bne.n	9518 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    950e:	231f      	movs	r3, #31
    9510:	18fb      	adds	r3, r7, r3
    9512:	22f4      	movs	r2, #244	; 0xf4
    9514:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    9516:	e022      	b.n	955e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    9518:	231a      	movs	r3, #26
    951a:	18fa      	adds	r2, r7, r3
    951c:	2318      	movs	r3, #24
    951e:	18fb      	adds	r3, r7, r3
    9520:	8812      	ldrh	r2, [r2, #0]
    9522:	881b      	ldrh	r3, [r3, #0]
    9524:	429a      	cmp	r2, r3
    9526:	d204      	bcs.n	9532 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    9528:	231f      	movs	r3, #31
    952a:	18fb      	adds	r3, r7, r3
    952c:	22f3      	movs	r2, #243	; 0xf3
    952e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    9530:	e015      	b.n	955e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    9532:	231a      	movs	r3, #26
    9534:	18fa      	adds	r2, r7, r3
    9536:	231c      	movs	r3, #28
    9538:	18fb      	adds	r3, r7, r3
    953a:	8812      	ldrh	r2, [r2, #0]
    953c:	881b      	ldrh	r3, [r3, #0]
    953e:	429a      	cmp	r2, r3
    9540:	d90d      	bls.n	955e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    9542:	231f      	movs	r3, #31
    9544:	18fb      	adds	r3, r7, r3
    9546:	22f3      	movs	r2, #243	; 0xf3
    9548:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    954a:	e008      	b.n	955e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    954c:	231f      	movs	r3, #31
    954e:	18fb      	adds	r3, r7, r3
    9550:	22f4      	movs	r2, #244	; 0xf4
    9552:	701a      	strb	r2, [r3, #0]
    9554:	e003      	b.n	955e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    9556:	231f      	movs	r3, #31
    9558:	18fb      	adds	r3, r7, r3
    955a:	22f4      	movs	r2, #244	; 0xf4
    955c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    955e:	231f      	movs	r3, #31
    9560:	18fb      	adds	r3, r7, r3
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	b25b      	sxtb	r3, r3
}
    9566:	0018      	movs	r0, r3
    9568:	46bd      	mov	sp, r7
    956a:	b009      	add	sp, #36	; 0x24
    956c:	bd90      	pop	{r4, r7, pc}
    956e:	46c0      	nop			; (mov r8, r8)
    9570:	0001c21b 	.word	0x0001c21b
    9574:	00006d91 	.word	0x00006d91
    9578:	000c0008 	.word	0x000c0008
    957c:	00009185 	.word	0x00009185
    9580:	000091f9 	.word	0x000091f9
    9584:	00001352 	.word	0x00001352

00009588 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    9588:	b590      	push	{r4, r7, lr}
    958a:	b085      	sub	sp, #20
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    9590:	230f      	movs	r3, #15
    9592:	18fb      	adds	r3, r7, r3
    9594:	2200      	movs	r2, #0
    9596:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    9598:	687b      	ldr	r3, [r7, #4]
    959a:	2b00      	cmp	r3, #0
    959c:	d013      	beq.n	95c6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    959e:	230e      	movs	r3, #14
    95a0:	18fb      	adds	r3, r7, r3
    95a2:	687a      	ldr	r2, [r7, #4]
    95a4:	7812      	ldrb	r2, [r2, #0]
    95a6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    95a8:	230e      	movs	r3, #14
    95aa:	18fb      	adds	r3, r7, r3
    95ac:	781b      	ldrb	r3, [r3, #0]
    95ae:	2b00      	cmp	r3, #0
    95b0:	d004      	beq.n	95bc <nm_drv_init+0x34>
    95b2:	230e      	movs	r3, #14
    95b4:	18fb      	adds	r3, r7, r3
    95b6:	781b      	ldrb	r3, [r3, #0]
    95b8:	2b04      	cmp	r3, #4
    95ba:	d908      	bls.n	95ce <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    95bc:	230e      	movs	r3, #14
    95be:	18fb      	adds	r3, r7, r3
    95c0:	2201      	movs	r2, #1
    95c2:	701a      	strb	r2, [r3, #0]
    95c4:	e003      	b.n	95ce <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    95c6:	230e      	movs	r3, #14
    95c8:	18fb      	adds	r3, r7, r3
    95ca:	2201      	movs	r2, #1
    95cc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    95ce:	230f      	movs	r3, #15
    95d0:	18fc      	adds	r4, r7, r3
    95d2:	2000      	movs	r0, #0
    95d4:	4b41      	ldr	r3, [pc, #260]	; (96dc <nm_drv_init+0x154>)
    95d6:	4798      	blx	r3
    95d8:	0003      	movs	r3, r0
    95da:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    95dc:	230f      	movs	r3, #15
    95de:	18fb      	adds	r3, r7, r3
    95e0:	781b      	ldrb	r3, [r3, #0]
    95e2:	b25b      	sxtb	r3, r3
    95e4:	2b00      	cmp	r3, #0
    95e6:	d00f      	beq.n	9608 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    95e8:	2328      	movs	r3, #40	; 0x28
    95ea:	33ff      	adds	r3, #255	; 0xff
    95ec:	001a      	movs	r2, r3
    95ee:	493c      	ldr	r1, [pc, #240]	; (96e0 <nm_drv_init+0x158>)
    95f0:	4b3c      	ldr	r3, [pc, #240]	; (96e4 <nm_drv_init+0x15c>)
    95f2:	0018      	movs	r0, r3
    95f4:	4b3c      	ldr	r3, [pc, #240]	; (96e8 <nm_drv_init+0x160>)
    95f6:	4798      	blx	r3
    95f8:	4b3c      	ldr	r3, [pc, #240]	; (96ec <nm_drv_init+0x164>)
    95fa:	0018      	movs	r0, r3
    95fc:	4b3c      	ldr	r3, [pc, #240]	; (96f0 <nm_drv_init+0x168>)
    95fe:	4798      	blx	r3
    9600:	200d      	movs	r0, #13
    9602:	4b3c      	ldr	r3, [pc, #240]	; (96f4 <nm_drv_init+0x16c>)
    9604:	4798      	blx	r3
		goto ERR1;
    9606:	e060      	b.n	96ca <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    9608:	4b3b      	ldr	r3, [pc, #236]	; (96f8 <nm_drv_init+0x170>)
    960a:	0018      	movs	r0, r3
    960c:	4b36      	ldr	r3, [pc, #216]	; (96e8 <nm_drv_init+0x160>)
    960e:	4798      	blx	r3
    9610:	4b3a      	ldr	r3, [pc, #232]	; (96fc <nm_drv_init+0x174>)
    9612:	4798      	blx	r3
    9614:	0002      	movs	r2, r0
    9616:	4b3a      	ldr	r3, [pc, #232]	; (9700 <nm_drv_init+0x178>)
    9618:	0011      	movs	r1, r2
    961a:	0018      	movs	r0, r3
    961c:	4b32      	ldr	r3, [pc, #200]	; (96e8 <nm_drv_init+0x160>)
    961e:	4798      	blx	r3
    9620:	200d      	movs	r0, #13
    9622:	4b34      	ldr	r3, [pc, #208]	; (96f4 <nm_drv_init+0x16c>)
    9624:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    9626:	4b37      	ldr	r3, [pc, #220]	; (9704 <nm_drv_init+0x17c>)
    9628:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    962a:	230f      	movs	r3, #15
    962c:	18fc      	adds	r4, r7, r3
    962e:	230e      	movs	r3, #14
    9630:	18fb      	adds	r3, r7, r3
    9632:	781b      	ldrb	r3, [r3, #0]
    9634:	0018      	movs	r0, r3
    9636:	4b34      	ldr	r3, [pc, #208]	; (9708 <nm_drv_init+0x180>)
    9638:	4798      	blx	r3
    963a:	0003      	movs	r3, r0
    963c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    963e:	230f      	movs	r3, #15
    9640:	18fb      	adds	r3, r7, r3
    9642:	781b      	ldrb	r3, [r3, #0]
    9644:	b25b      	sxtb	r3, r3
    9646:	2b00      	cmp	r3, #0
    9648:	d13a      	bne.n	96c0 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    964a:	230f      	movs	r3, #15
    964c:	18fc      	adds	r4, r7, r3
    964e:	230e      	movs	r3, #14
    9650:	18fb      	adds	r3, r7, r3
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	0018      	movs	r0, r3
    9656:	4b2d      	ldr	r3, [pc, #180]	; (970c <nm_drv_init+0x184>)
    9658:	4798      	blx	r3
    965a:	0003      	movs	r3, r0
    965c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    965e:	230f      	movs	r3, #15
    9660:	18fb      	adds	r3, r7, r3
    9662:	781b      	ldrb	r3, [r3, #0]
    9664:	b25b      	sxtb	r3, r3
    9666:	2b00      	cmp	r3, #0
    9668:	d12c      	bne.n	96c4 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    966a:	230e      	movs	r3, #14
    966c:	18fb      	adds	r3, r7, r3
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	2b02      	cmp	r3, #2
    9672:	d02a      	beq.n	96ca <nm_drv_init+0x142>
    9674:	230e      	movs	r3, #14
    9676:	18fb      	adds	r3, r7, r3
    9678:	781b      	ldrb	r3, [r3, #0]
    967a:	2b03      	cmp	r3, #3
    967c:	d025      	beq.n	96ca <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    967e:	230f      	movs	r3, #15
    9680:	18fc      	adds	r4, r7, r3
    9682:	4b23      	ldr	r3, [pc, #140]	; (9710 <nm_drv_init+0x188>)
    9684:	4798      	blx	r3
    9686:	0003      	movs	r3, r0
    9688:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    968a:	230f      	movs	r3, #15
    968c:	18fb      	adds	r3, r7, r3
    968e:	781b      	ldrb	r3, [r3, #0]
    9690:	b25b      	sxtb	r3, r3
    9692:	2b00      	cmp	r3, #0
    9694:	d00f      	beq.n	96b6 <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    9696:	2356      	movs	r3, #86	; 0x56
    9698:	33ff      	adds	r3, #255	; 0xff
    969a:	001a      	movs	r2, r3
    969c:	4910      	ldr	r1, [pc, #64]	; (96e0 <nm_drv_init+0x158>)
    969e:	4b11      	ldr	r3, [pc, #68]	; (96e4 <nm_drv_init+0x15c>)
    96a0:	0018      	movs	r0, r3
    96a2:	4b11      	ldr	r3, [pc, #68]	; (96e8 <nm_drv_init+0x160>)
    96a4:	4798      	blx	r3
    96a6:	4b1b      	ldr	r3, [pc, #108]	; (9714 <nm_drv_init+0x18c>)
    96a8:	0018      	movs	r0, r3
    96aa:	4b11      	ldr	r3, [pc, #68]	; (96f0 <nm_drv_init+0x168>)
    96ac:	4798      	blx	r3
    96ae:	200d      	movs	r0, #13
    96b0:	4b10      	ldr	r3, [pc, #64]	; (96f4 <nm_drv_init+0x16c>)
    96b2:	4798      	blx	r3
		goto ERR2;
    96b4:	e007      	b.n	96c6 <nm_drv_init+0x13e>
	}
	return ret;
    96b6:	230f      	movs	r3, #15
    96b8:	18fb      	adds	r3, r7, r3
    96ba:	781b      	ldrb	r3, [r3, #0]
    96bc:	b25b      	sxtb	r3, r3
    96be:	e008      	b.n	96d2 <nm_drv_init+0x14a>
		goto ERR2;
    96c0:	46c0      	nop			; (mov r8, r8)
    96c2:	e000      	b.n	96c6 <nm_drv_init+0x13e>
		goto ERR2;
    96c4:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    96c6:	4b14      	ldr	r3, [pc, #80]	; (9718 <nm_drv_init+0x190>)
    96c8:	4798      	blx	r3
ERR1:
	return ret;
    96ca:	230f      	movs	r3, #15
    96cc:	18fb      	adds	r3, r7, r3
    96ce:	781b      	ldrb	r3, [r3, #0]
    96d0:	b25b      	sxtb	r3, r3
}
    96d2:	0018      	movs	r0, r3
    96d4:	46bd      	mov	sp, r7
    96d6:	b005      	add	sp, #20
    96d8:	bd90      	pop	{r4, r7, pc}
    96da:	46c0      	nop			; (mov r8, r8)
    96dc:	000090e9 	.word	0x000090e9
    96e0:	000202ac 	.word	0x000202ac
    96e4:	000201e0 	.word	0x000201e0
    96e8:	0001c37d 	.word	0x0001c37d
    96ec:	000201f4 	.word	0x000201f4
    96f0:	0001c499 	.word	0x0001c499
    96f4:	0001c3b1 	.word	0x0001c3b1
    96f8:	00020210 	.word	0x00020210
    96fc:	000089a5 	.word	0x000089a5
    9700:	0002021c 	.word	0x0002021c
    9704:	0000aa5d 	.word	0x0000aa5d
    9708:	00008cf9 	.word	0x00008cf9
    970c:	00008e91 	.word	0x00008e91
    9710:	000088f1 	.word	0x000088f1
    9714:	0002022c 	.word	0x0002022c
    9718:	0000911d 	.word	0x0000911d

0000971c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    971c:	b590      	push	{r4, r7, lr}
    971e:	b085      	sub	sp, #20
    9720:	af00      	add	r7, sp, #0
    9722:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    9724:	230f      	movs	r3, #15
    9726:	18fc      	adds	r4, r7, r3
    9728:	4b2d      	ldr	r3, [pc, #180]	; (97e0 <nm_drv_deinit+0xc4>)
    972a:	4798      	blx	r3
    972c:	0003      	movs	r3, r0
    972e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    9730:	230f      	movs	r3, #15
    9732:	18fb      	adds	r3, r7, r3
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	b25b      	sxtb	r3, r3
    9738:	2b00      	cmp	r3, #0
    973a:	d00e      	beq.n	975a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    973c:	23b6      	movs	r3, #182	; 0xb6
    973e:	005a      	lsls	r2, r3, #1
    9740:	4928      	ldr	r1, [pc, #160]	; (97e4 <nm_drv_deinit+0xc8>)
    9742:	4b29      	ldr	r3, [pc, #164]	; (97e8 <nm_drv_deinit+0xcc>)
    9744:	0018      	movs	r0, r3
    9746:	4b29      	ldr	r3, [pc, #164]	; (97ec <nm_drv_deinit+0xd0>)
    9748:	4798      	blx	r3
    974a:	4b29      	ldr	r3, [pc, #164]	; (97f0 <nm_drv_deinit+0xd4>)
    974c:	0018      	movs	r0, r3
    974e:	4b29      	ldr	r3, [pc, #164]	; (97f4 <nm_drv_deinit+0xd8>)
    9750:	4798      	blx	r3
    9752:	200d      	movs	r0, #13
    9754:	4b28      	ldr	r3, [pc, #160]	; (97f8 <nm_drv_deinit+0xdc>)
    9756:	4798      	blx	r3
		goto ERR1;
    9758:	e03a      	b.n	97d0 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    975a:	230f      	movs	r3, #15
    975c:	18fc      	adds	r4, r7, r3
    975e:	2000      	movs	r0, #0
    9760:	4b26      	ldr	r3, [pc, #152]	; (97fc <nm_drv_deinit+0xe0>)
    9762:	4798      	blx	r3
    9764:	0003      	movs	r3, r0
    9766:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    9768:	230f      	movs	r3, #15
    976a:	18fb      	adds	r3, r7, r3
    976c:	781b      	ldrb	r3, [r3, #0]
    976e:	b25b      	sxtb	r3, r3
    9770:	2b00      	cmp	r3, #0
    9772:	d00f      	beq.n	9794 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    9774:	2374      	movs	r3, #116	; 0x74
    9776:	33ff      	adds	r3, #255	; 0xff
    9778:	001a      	movs	r2, r3
    977a:	491a      	ldr	r1, [pc, #104]	; (97e4 <nm_drv_deinit+0xc8>)
    977c:	4b1a      	ldr	r3, [pc, #104]	; (97e8 <nm_drv_deinit+0xcc>)
    977e:	0018      	movs	r0, r3
    9780:	4b1a      	ldr	r3, [pc, #104]	; (97ec <nm_drv_deinit+0xd0>)
    9782:	4798      	blx	r3
    9784:	4b1e      	ldr	r3, [pc, #120]	; (9800 <nm_drv_deinit+0xe4>)
    9786:	0018      	movs	r0, r3
    9788:	4b1a      	ldr	r3, [pc, #104]	; (97f4 <nm_drv_deinit+0xd8>)
    978a:	4798      	blx	r3
    978c:	200d      	movs	r0, #13
    978e:	4b1a      	ldr	r3, [pc, #104]	; (97f8 <nm_drv_deinit+0xdc>)
    9790:	4798      	blx	r3
		goto ERR1;
    9792:	e01d      	b.n	97d0 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    9794:	230f      	movs	r3, #15
    9796:	18fc      	adds	r4, r7, r3
    9798:	4b1a      	ldr	r3, [pc, #104]	; (9804 <nm_drv_deinit+0xe8>)
    979a:	4798      	blx	r3
    979c:	0003      	movs	r3, r0
    979e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    97a0:	230f      	movs	r3, #15
    97a2:	18fb      	adds	r3, r7, r3
    97a4:	781b      	ldrb	r3, [r3, #0]
    97a6:	b25b      	sxtb	r3, r3
    97a8:	2b00      	cmp	r3, #0
    97aa:	d00f      	beq.n	97cc <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    97ac:	237a      	movs	r3, #122	; 0x7a
    97ae:	33ff      	adds	r3, #255	; 0xff
    97b0:	001a      	movs	r2, r3
    97b2:	490c      	ldr	r1, [pc, #48]	; (97e4 <nm_drv_deinit+0xc8>)
    97b4:	4b0c      	ldr	r3, [pc, #48]	; (97e8 <nm_drv_deinit+0xcc>)
    97b6:	0018      	movs	r0, r3
    97b8:	4b0c      	ldr	r3, [pc, #48]	; (97ec <nm_drv_deinit+0xd0>)
    97ba:	4798      	blx	r3
    97bc:	4b12      	ldr	r3, [pc, #72]	; (9808 <nm_drv_deinit+0xec>)
    97be:	0018      	movs	r0, r3
    97c0:	4b0c      	ldr	r3, [pc, #48]	; (97f4 <nm_drv_deinit+0xd8>)
    97c2:	4798      	blx	r3
    97c4:	200d      	movs	r0, #13
    97c6:	4b0c      	ldr	r3, [pc, #48]	; (97f8 <nm_drv_deinit+0xdc>)
    97c8:	4798      	blx	r3
		goto ERR1;
    97ca:	e001      	b.n	97d0 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    97cc:	4b0f      	ldr	r3, [pc, #60]	; (980c <nm_drv_deinit+0xf0>)
    97ce:	4798      	blx	r3
#endif

ERR1:
	return ret;
    97d0:	230f      	movs	r3, #15
    97d2:	18fb      	adds	r3, r7, r3
    97d4:	781b      	ldrb	r3, [r3, #0]
    97d6:	b25b      	sxtb	r3, r3
}
    97d8:	0018      	movs	r0, r3
    97da:	46bd      	mov	sp, r7
    97dc:	b005      	add	sp, #20
    97de:	bd90      	pop	{r4, r7, pc}
    97e0:	00008f45 	.word	0x00008f45
    97e4:	000202b8 	.word	0x000202b8
    97e8:	000201e0 	.word	0x000201e0
    97ec:	0001c37d 	.word	0x0001c37d
    97f0:	0002024c 	.word	0x0002024c
    97f4:	0001c499 	.word	0x0001c499
    97f8:	0001c3b1 	.word	0x0001c3b1
    97fc:	0000c1ad 	.word	0x0000c1ad
    9800:	0002026c 	.word	0x0002026c
    9804:	0000911d 	.word	0x0000911d
    9808:	00020290 	.word	0x00020290
    980c:	0000aba9 	.word	0x0000aba9

00009810 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    9810:	b580      	push	{r7, lr}
    9812:	b086      	sub	sp, #24
    9814:	af00      	add	r7, sp, #0
    9816:	6078      	str	r0, [r7, #4]
    9818:	000a      	movs	r2, r1
    981a:	1cbb      	adds	r3, r7, #2
    981c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    981e:	230c      	movs	r3, #12
    9820:	18fb      	adds	r3, r7, r3
    9822:	2200      	movs	r2, #0
    9824:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    9826:	230c      	movs	r3, #12
    9828:	18fb      	adds	r3, r7, r3
    982a:	687a      	ldr	r2, [r7, #4]
    982c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    982e:	230c      	movs	r3, #12
    9830:	18fb      	adds	r3, r7, r3
    9832:	1cba      	adds	r2, r7, #2
    9834:	8812      	ldrh	r2, [r2, #0]
    9836:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    9838:	230c      	movs	r3, #12
    983a:	18fb      	adds	r3, r7, r3
    983c:	0019      	movs	r1, r3
    983e:	2003      	movs	r0, #3
    9840:	4b03      	ldr	r3, [pc, #12]	; (9850 <nmi_spi_read+0x40>)
    9842:	4798      	blx	r3
    9844:	0003      	movs	r3, r0
}
    9846:	0018      	movs	r0, r3
    9848:	46bd      	mov	sp, r7
    984a:	b006      	add	sp, #24
    984c:	bd80      	pop	{r7, pc}
    984e:	46c0      	nop			; (mov r8, r8)
    9850:	00006c51 	.word	0x00006c51

00009854 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    9854:	b580      	push	{r7, lr}
    9856:	b086      	sub	sp, #24
    9858:	af00      	add	r7, sp, #0
    985a:	6078      	str	r0, [r7, #4]
    985c:	000a      	movs	r2, r1
    985e:	1cbb      	adds	r3, r7, #2
    9860:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    9862:	230c      	movs	r3, #12
    9864:	18fb      	adds	r3, r7, r3
    9866:	687a      	ldr	r2, [r7, #4]
    9868:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    986a:	230c      	movs	r3, #12
    986c:	18fb      	adds	r3, r7, r3
    986e:	2200      	movs	r2, #0
    9870:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    9872:	230c      	movs	r3, #12
    9874:	18fb      	adds	r3, r7, r3
    9876:	1cba      	adds	r2, r7, #2
    9878:	8812      	ldrh	r2, [r2, #0]
    987a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    987c:	230c      	movs	r3, #12
    987e:	18fb      	adds	r3, r7, r3
    9880:	0019      	movs	r1, r3
    9882:	2003      	movs	r0, #3
    9884:	4b03      	ldr	r3, [pc, #12]	; (9894 <nmi_spi_write+0x40>)
    9886:	4798      	blx	r3
    9888:	0003      	movs	r3, r0
}
    988a:	0018      	movs	r0, r3
    988c:	46bd      	mov	sp, r7
    988e:	b006      	add	sp, #24
    9890:	bd80      	pop	{r7, pc}
    9892:	46c0      	nop			; (mov r8, r8)
    9894:	00006c51 	.word	0x00006c51

00009898 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    9898:	b580      	push	{r7, lr}
    989a:	b082      	sub	sp, #8
    989c:	af00      	add	r7, sp, #0
    989e:	0002      	movs	r2, r0
    98a0:	1dfb      	adds	r3, r7, #7
    98a2:	701a      	strb	r2, [r3, #0]
    98a4:	1dbb      	adds	r3, r7, #6
    98a6:	1c0a      	adds	r2, r1, #0
    98a8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    98aa:	1dfb      	adds	r3, r7, #7
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	005a      	lsls	r2, r3, #1
    98b0:	1dbb      	adds	r3, r7, #6
    98b2:	781b      	ldrb	r3, [r3, #0]
    98b4:	4053      	eors	r3, r2
    98b6:	4a03      	ldr	r2, [pc, #12]	; (98c4 <crc7_byte+0x2c>)
    98b8:	5cd3      	ldrb	r3, [r2, r3]
}
    98ba:	0018      	movs	r0, r3
    98bc:	46bd      	mov	sp, r7
    98be:	b002      	add	sp, #8
    98c0:	bd80      	pop	{r7, pc}
    98c2:	46c0      	nop			; (mov r8, r8)
    98c4:	000202c8 	.word	0x000202c8

000098c8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    98c8:	b590      	push	{r4, r7, lr}
    98ca:	b085      	sub	sp, #20
    98cc:	af00      	add	r7, sp, #0
    98ce:	60b9      	str	r1, [r7, #8]
    98d0:	607a      	str	r2, [r7, #4]
    98d2:	230f      	movs	r3, #15
    98d4:	18fb      	adds	r3, r7, r3
    98d6:	1c02      	adds	r2, r0, #0
    98d8:	701a      	strb	r2, [r3, #0]
	while (len--)
    98da:	e00e      	b.n	98fa <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    98dc:	68bb      	ldr	r3, [r7, #8]
    98de:	1c5a      	adds	r2, r3, #1
    98e0:	60ba      	str	r2, [r7, #8]
    98e2:	781a      	ldrb	r2, [r3, #0]
    98e4:	230f      	movs	r3, #15
    98e6:	18fc      	adds	r4, r7, r3
    98e8:	230f      	movs	r3, #15
    98ea:	18fb      	adds	r3, r7, r3
    98ec:	781b      	ldrb	r3, [r3, #0]
    98ee:	0011      	movs	r1, r2
    98f0:	0018      	movs	r0, r3
    98f2:	4b08      	ldr	r3, [pc, #32]	; (9914 <crc7+0x4c>)
    98f4:	4798      	blx	r3
    98f6:	0003      	movs	r3, r0
    98f8:	7023      	strb	r3, [r4, #0]
	while (len--)
    98fa:	687b      	ldr	r3, [r7, #4]
    98fc:	1e5a      	subs	r2, r3, #1
    98fe:	607a      	str	r2, [r7, #4]
    9900:	2b00      	cmp	r3, #0
    9902:	d1eb      	bne.n	98dc <crc7+0x14>
	return crc;
    9904:	230f      	movs	r3, #15
    9906:	18fb      	adds	r3, r7, r3
    9908:	781b      	ldrb	r3, [r3, #0]
}
    990a:	0018      	movs	r0, r3
    990c:	46bd      	mov	sp, r7
    990e:	b005      	add	sp, #20
    9910:	bd90      	pop	{r4, r7, pc}
    9912:	46c0      	nop			; (mov r8, r8)
    9914:	00009899 	.word	0x00009899

00009918 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    9918:	b590      	push	{r4, r7, lr}
    991a:	b089      	sub	sp, #36	; 0x24
    991c:	af00      	add	r7, sp, #0
    991e:	60b9      	str	r1, [r7, #8]
    9920:	607a      	str	r2, [r7, #4]
    9922:	603b      	str	r3, [r7, #0]
    9924:	230f      	movs	r3, #15
    9926:	18fb      	adds	r3, r7, r3
    9928:	1c02      	adds	r2, r0, #0
    992a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    992c:	231f      	movs	r3, #31
    992e:	18fb      	adds	r3, r7, r3
    9930:	2205      	movs	r2, #5
    9932:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    9934:	231e      	movs	r3, #30
    9936:	18fb      	adds	r3, r7, r3
    9938:	2201      	movs	r2, #1
    993a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    993c:	2314      	movs	r3, #20
    993e:	18fb      	adds	r3, r7, r3
    9940:	220f      	movs	r2, #15
    9942:	18ba      	adds	r2, r7, r2
    9944:	7812      	ldrb	r2, [r2, #0]
    9946:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    9948:	230f      	movs	r3, #15
    994a:	18fb      	adds	r3, r7, r3
    994c:	781b      	ldrb	r3, [r3, #0]
    994e:	3bc1      	subs	r3, #193	; 0xc1
    9950:	2b0e      	cmp	r3, #14
    9952:	d900      	bls.n	9956 <spi_cmd+0x3e>
    9954:	e11b      	b.n	9b8e <spi_cmd+0x276>
    9956:	009a      	lsls	r2, r3, #2
    9958:	4bb6      	ldr	r3, [pc, #728]	; (9c34 <spi_cmd+0x31c>)
    995a:	18d3      	adds	r3, r2, r3
    995c:	681b      	ldr	r3, [r3, #0]
    995e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    9960:	68bb      	ldr	r3, [r7, #8]
    9962:	0c1b      	lsrs	r3, r3, #16
    9964:	b2da      	uxtb	r2, r3
    9966:	2314      	movs	r3, #20
    9968:	18fb      	adds	r3, r7, r3
    996a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    996c:	68bb      	ldr	r3, [r7, #8]
    996e:	0a1b      	lsrs	r3, r3, #8
    9970:	b2da      	uxtb	r2, r3
    9972:	2314      	movs	r3, #20
    9974:	18fb      	adds	r3, r7, r3
    9976:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    9978:	68bb      	ldr	r3, [r7, #8]
    997a:	b2da      	uxtb	r2, r3
    997c:	2314      	movs	r3, #20
    997e:	18fb      	adds	r3, r7, r3
    9980:	70da      	strb	r2, [r3, #3]
		len = 5;
    9982:	231f      	movs	r3, #31
    9984:	18fb      	adds	r3, r7, r3
    9986:	2205      	movs	r2, #5
    9988:	701a      	strb	r2, [r3, #0]
		break;
    998a:	e105      	b.n	9b98 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    998c:	68bb      	ldr	r3, [r7, #8]
    998e:	0a1b      	lsrs	r3, r3, #8
    9990:	b2da      	uxtb	r2, r3
    9992:	2314      	movs	r3, #20
    9994:	18fb      	adds	r3, r7, r3
    9996:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    9998:	2330      	movs	r3, #48	; 0x30
    999a:	18fb      	adds	r3, r7, r3
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	2b00      	cmp	r3, #0
    99a0:	d009      	beq.n	99b6 <spi_cmd+0x9e>
    99a2:	2314      	movs	r3, #20
    99a4:	18fb      	adds	r3, r7, r3
    99a6:	785b      	ldrb	r3, [r3, #1]
    99a8:	2280      	movs	r2, #128	; 0x80
    99aa:	4252      	negs	r2, r2
    99ac:	4313      	orrs	r3, r2
    99ae:	b2da      	uxtb	r2, r3
    99b0:	2314      	movs	r3, #20
    99b2:	18fb      	adds	r3, r7, r3
    99b4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    99b6:	68bb      	ldr	r3, [r7, #8]
    99b8:	b2da      	uxtb	r2, r3
    99ba:	2314      	movs	r3, #20
    99bc:	18fb      	adds	r3, r7, r3
    99be:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    99c0:	2314      	movs	r3, #20
    99c2:	18fb      	adds	r3, r7, r3
    99c4:	2200      	movs	r2, #0
    99c6:	70da      	strb	r2, [r3, #3]
		len = 5;
    99c8:	231f      	movs	r3, #31
    99ca:	18fb      	adds	r3, r7, r3
    99cc:	2205      	movs	r2, #5
    99ce:	701a      	strb	r2, [r3, #0]
		break;
    99d0:	e0e2      	b.n	9b98 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    99d2:	2314      	movs	r3, #20
    99d4:	18fb      	adds	r3, r7, r3
    99d6:	2200      	movs	r2, #0
    99d8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    99da:	2314      	movs	r3, #20
    99dc:	18fb      	adds	r3, r7, r3
    99de:	2200      	movs	r2, #0
    99e0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    99e2:	2314      	movs	r3, #20
    99e4:	18fb      	adds	r3, r7, r3
    99e6:	2200      	movs	r2, #0
    99e8:	70da      	strb	r2, [r3, #3]
		len = 5;
    99ea:	231f      	movs	r3, #31
    99ec:	18fb      	adds	r3, r7, r3
    99ee:	2205      	movs	r2, #5
    99f0:	701a      	strb	r2, [r3, #0]
		break;
    99f2:	e0d1      	b.n	9b98 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    99f4:	2314      	movs	r3, #20
    99f6:	18fb      	adds	r3, r7, r3
    99f8:	2200      	movs	r2, #0
    99fa:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    99fc:	2314      	movs	r3, #20
    99fe:	18fb      	adds	r3, r7, r3
    9a00:	2200      	movs	r2, #0
    9a02:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    9a04:	2314      	movs	r3, #20
    9a06:	18fb      	adds	r3, r7, r3
    9a08:	2200      	movs	r2, #0
    9a0a:	70da      	strb	r2, [r3, #3]
		len = 5;
    9a0c:	231f      	movs	r3, #31
    9a0e:	18fb      	adds	r3, r7, r3
    9a10:	2205      	movs	r2, #5
    9a12:	701a      	strb	r2, [r3, #0]
		break;
    9a14:	e0c0      	b.n	9b98 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    9a16:	2314      	movs	r3, #20
    9a18:	18fb      	adds	r3, r7, r3
    9a1a:	22ff      	movs	r2, #255	; 0xff
    9a1c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    9a1e:	2314      	movs	r3, #20
    9a20:	18fb      	adds	r3, r7, r3
    9a22:	22ff      	movs	r2, #255	; 0xff
    9a24:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    9a26:	2314      	movs	r3, #20
    9a28:	18fb      	adds	r3, r7, r3
    9a2a:	22ff      	movs	r2, #255	; 0xff
    9a2c:	70da      	strb	r2, [r3, #3]
		len = 5;
    9a2e:	231f      	movs	r3, #31
    9a30:	18fb      	adds	r3, r7, r3
    9a32:	2205      	movs	r2, #5
    9a34:	701a      	strb	r2, [r3, #0]
		break;
    9a36:	e0af      	b.n	9b98 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    9a38:	68bb      	ldr	r3, [r7, #8]
    9a3a:	0c1b      	lsrs	r3, r3, #16
    9a3c:	b2da      	uxtb	r2, r3
    9a3e:	2314      	movs	r3, #20
    9a40:	18fb      	adds	r3, r7, r3
    9a42:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9a44:	68bb      	ldr	r3, [r7, #8]
    9a46:	0a1b      	lsrs	r3, r3, #8
    9a48:	b2da      	uxtb	r2, r3
    9a4a:	2314      	movs	r3, #20
    9a4c:	18fb      	adds	r3, r7, r3
    9a4e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    9a50:	68bb      	ldr	r3, [r7, #8]
    9a52:	b2da      	uxtb	r2, r3
    9a54:	2314      	movs	r3, #20
    9a56:	18fb      	adds	r3, r7, r3
    9a58:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    9a5a:	683b      	ldr	r3, [r7, #0]
    9a5c:	0a1b      	lsrs	r3, r3, #8
    9a5e:	b2da      	uxtb	r2, r3
    9a60:	2314      	movs	r3, #20
    9a62:	18fb      	adds	r3, r7, r3
    9a64:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    9a66:	683b      	ldr	r3, [r7, #0]
    9a68:	b2da      	uxtb	r2, r3
    9a6a:	2314      	movs	r3, #20
    9a6c:	18fb      	adds	r3, r7, r3
    9a6e:	715a      	strb	r2, [r3, #5]
		len = 7;
    9a70:	231f      	movs	r3, #31
    9a72:	18fb      	adds	r3, r7, r3
    9a74:	2207      	movs	r2, #7
    9a76:	701a      	strb	r2, [r3, #0]
		break;
    9a78:	e08e      	b.n	9b98 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    9a7a:	68bb      	ldr	r3, [r7, #8]
    9a7c:	0c1b      	lsrs	r3, r3, #16
    9a7e:	b2da      	uxtb	r2, r3
    9a80:	2314      	movs	r3, #20
    9a82:	18fb      	adds	r3, r7, r3
    9a84:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9a86:	68bb      	ldr	r3, [r7, #8]
    9a88:	0a1b      	lsrs	r3, r3, #8
    9a8a:	b2da      	uxtb	r2, r3
    9a8c:	2314      	movs	r3, #20
    9a8e:	18fb      	adds	r3, r7, r3
    9a90:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    9a92:	68bb      	ldr	r3, [r7, #8]
    9a94:	b2da      	uxtb	r2, r3
    9a96:	2314      	movs	r3, #20
    9a98:	18fb      	adds	r3, r7, r3
    9a9a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    9a9c:	683b      	ldr	r3, [r7, #0]
    9a9e:	0c1b      	lsrs	r3, r3, #16
    9aa0:	b2da      	uxtb	r2, r3
    9aa2:	2314      	movs	r3, #20
    9aa4:	18fb      	adds	r3, r7, r3
    9aa6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    9aa8:	683b      	ldr	r3, [r7, #0]
    9aaa:	0a1b      	lsrs	r3, r3, #8
    9aac:	b2da      	uxtb	r2, r3
    9aae:	2314      	movs	r3, #20
    9ab0:	18fb      	adds	r3, r7, r3
    9ab2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    9ab4:	683b      	ldr	r3, [r7, #0]
    9ab6:	b2da      	uxtb	r2, r3
    9ab8:	2314      	movs	r3, #20
    9aba:	18fb      	adds	r3, r7, r3
    9abc:	719a      	strb	r2, [r3, #6]
		len = 8;
    9abe:	231f      	movs	r3, #31
    9ac0:	18fb      	adds	r3, r7, r3
    9ac2:	2208      	movs	r2, #8
    9ac4:	701a      	strb	r2, [r3, #0]
		break;
    9ac6:	e067      	b.n	9b98 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    9ac8:	68bb      	ldr	r3, [r7, #8]
    9aca:	0a1b      	lsrs	r3, r3, #8
    9acc:	b2da      	uxtb	r2, r3
    9ace:	2314      	movs	r3, #20
    9ad0:	18fb      	adds	r3, r7, r3
    9ad2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    9ad4:	2330      	movs	r3, #48	; 0x30
    9ad6:	18fb      	adds	r3, r7, r3
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	2b00      	cmp	r3, #0
    9adc:	d009      	beq.n	9af2 <spi_cmd+0x1da>
    9ade:	2314      	movs	r3, #20
    9ae0:	18fb      	adds	r3, r7, r3
    9ae2:	785b      	ldrb	r3, [r3, #1]
    9ae4:	2280      	movs	r2, #128	; 0x80
    9ae6:	4252      	negs	r2, r2
    9ae8:	4313      	orrs	r3, r2
    9aea:	b2da      	uxtb	r2, r3
    9aec:	2314      	movs	r3, #20
    9aee:	18fb      	adds	r3, r7, r3
    9af0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    9af2:	68bb      	ldr	r3, [r7, #8]
    9af4:	b2da      	uxtb	r2, r3
    9af6:	2314      	movs	r3, #20
    9af8:	18fb      	adds	r3, r7, r3
    9afa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    9afc:	687b      	ldr	r3, [r7, #4]
    9afe:	0e1b      	lsrs	r3, r3, #24
    9b00:	b2da      	uxtb	r2, r3
    9b02:	2314      	movs	r3, #20
    9b04:	18fb      	adds	r3, r7, r3
    9b06:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    9b08:	687b      	ldr	r3, [r7, #4]
    9b0a:	0c1b      	lsrs	r3, r3, #16
    9b0c:	b2da      	uxtb	r2, r3
    9b0e:	2314      	movs	r3, #20
    9b10:	18fb      	adds	r3, r7, r3
    9b12:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    9b14:	687b      	ldr	r3, [r7, #4]
    9b16:	0a1b      	lsrs	r3, r3, #8
    9b18:	b2da      	uxtb	r2, r3
    9b1a:	2314      	movs	r3, #20
    9b1c:	18fb      	adds	r3, r7, r3
    9b1e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	b2da      	uxtb	r2, r3
    9b24:	2314      	movs	r3, #20
    9b26:	18fb      	adds	r3, r7, r3
    9b28:	719a      	strb	r2, [r3, #6]
		len = 8;
    9b2a:	231f      	movs	r3, #31
    9b2c:	18fb      	adds	r3, r7, r3
    9b2e:	2208      	movs	r2, #8
    9b30:	701a      	strb	r2, [r3, #0]
		break;
    9b32:	e031      	b.n	9b98 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    9b34:	68bb      	ldr	r3, [r7, #8]
    9b36:	0c1b      	lsrs	r3, r3, #16
    9b38:	b2da      	uxtb	r2, r3
    9b3a:	2314      	movs	r3, #20
    9b3c:	18fb      	adds	r3, r7, r3
    9b3e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9b40:	68bb      	ldr	r3, [r7, #8]
    9b42:	0a1b      	lsrs	r3, r3, #8
    9b44:	b2da      	uxtb	r2, r3
    9b46:	2314      	movs	r3, #20
    9b48:	18fb      	adds	r3, r7, r3
    9b4a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    9b4c:	68bb      	ldr	r3, [r7, #8]
    9b4e:	b2da      	uxtb	r2, r3
    9b50:	2314      	movs	r3, #20
    9b52:	18fb      	adds	r3, r7, r3
    9b54:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    9b56:	687b      	ldr	r3, [r7, #4]
    9b58:	0e1b      	lsrs	r3, r3, #24
    9b5a:	b2da      	uxtb	r2, r3
    9b5c:	2314      	movs	r3, #20
    9b5e:	18fb      	adds	r3, r7, r3
    9b60:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    9b62:	687b      	ldr	r3, [r7, #4]
    9b64:	0c1b      	lsrs	r3, r3, #16
    9b66:	b2da      	uxtb	r2, r3
    9b68:	2314      	movs	r3, #20
    9b6a:	18fb      	adds	r3, r7, r3
    9b6c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    9b6e:	687b      	ldr	r3, [r7, #4]
    9b70:	0a1b      	lsrs	r3, r3, #8
    9b72:	b2da      	uxtb	r2, r3
    9b74:	2314      	movs	r3, #20
    9b76:	18fb      	adds	r3, r7, r3
    9b78:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    9b7a:	687b      	ldr	r3, [r7, #4]
    9b7c:	b2da      	uxtb	r2, r3
    9b7e:	2314      	movs	r3, #20
    9b80:	18fb      	adds	r3, r7, r3
    9b82:	71da      	strb	r2, [r3, #7]
		len = 9;
    9b84:	231f      	movs	r3, #31
    9b86:	18fb      	adds	r3, r7, r3
    9b88:	2209      	movs	r2, #9
    9b8a:	701a      	strb	r2, [r3, #0]
		break;
    9b8c:	e004      	b.n	9b98 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    9b8e:	231e      	movs	r3, #30
    9b90:	18fb      	adds	r3, r7, r3
    9b92:	2200      	movs	r2, #0
    9b94:	701a      	strb	r2, [r3, #0]
		break;
    9b96:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    9b98:	231e      	movs	r3, #30
    9b9a:	18fb      	adds	r3, r7, r3
    9b9c:	781b      	ldrb	r3, [r3, #0]
    9b9e:	b25b      	sxtb	r3, r3
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d03f      	beq.n	9c24 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    9ba4:	4b24      	ldr	r3, [pc, #144]	; (9c38 <spi_cmd+0x320>)
    9ba6:	781b      	ldrb	r3, [r3, #0]
    9ba8:	2b00      	cmp	r3, #0
    9baa:	d115      	bne.n	9bd8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    9bac:	231f      	movs	r3, #31
    9bae:	18fb      	adds	r3, r7, r3
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	1e5c      	subs	r4, r3, #1
    9bb4:	231f      	movs	r3, #31
    9bb6:	18fb      	adds	r3, r7, r3
    9bb8:	781b      	ldrb	r3, [r3, #0]
    9bba:	3b01      	subs	r3, #1
    9bbc:	001a      	movs	r2, r3
    9bbe:	2314      	movs	r3, #20
    9bc0:	18fb      	adds	r3, r7, r3
    9bc2:	0019      	movs	r1, r3
    9bc4:	207f      	movs	r0, #127	; 0x7f
    9bc6:	4b1d      	ldr	r3, [pc, #116]	; (9c3c <spi_cmd+0x324>)
    9bc8:	4798      	blx	r3
    9bca:	0003      	movs	r3, r0
    9bcc:	18db      	adds	r3, r3, r3
    9bce:	b2da      	uxtb	r2, r3
    9bd0:	2314      	movs	r3, #20
    9bd2:	18fb      	adds	r3, r7, r3
    9bd4:	551a      	strb	r2, [r3, r4]
    9bd6:	e006      	b.n	9be6 <spi_cmd+0x2ce>
		else
			len-=1;
    9bd8:	231f      	movs	r3, #31
    9bda:	18fb      	adds	r3, r7, r3
    9bdc:	221f      	movs	r2, #31
    9bde:	18ba      	adds	r2, r7, r2
    9be0:	7812      	ldrb	r2, [r2, #0]
    9be2:	3a01      	subs	r2, #1
    9be4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    9be6:	231f      	movs	r3, #31
    9be8:	18fb      	adds	r3, r7, r3
    9bea:	781b      	ldrb	r3, [r3, #0]
    9bec:	b29a      	uxth	r2, r3
    9bee:	2314      	movs	r3, #20
    9bf0:	18fb      	adds	r3, r7, r3
    9bf2:	0011      	movs	r1, r2
    9bf4:	0018      	movs	r0, r3
    9bf6:	4b12      	ldr	r3, [pc, #72]	; (9c40 <spi_cmd+0x328>)
    9bf8:	4798      	blx	r3
    9bfa:	1e03      	subs	r3, r0, #0
    9bfc:	d012      	beq.n	9c24 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    9bfe:	2328      	movs	r3, #40	; 0x28
    9c00:	33ff      	adds	r3, #255	; 0xff
    9c02:	001a      	movs	r2, r3
    9c04:	490f      	ldr	r1, [pc, #60]	; (9c44 <spi_cmd+0x32c>)
    9c06:	4b10      	ldr	r3, [pc, #64]	; (9c48 <spi_cmd+0x330>)
    9c08:	0018      	movs	r0, r3
    9c0a:	4b10      	ldr	r3, [pc, #64]	; (9c4c <spi_cmd+0x334>)
    9c0c:	4798      	blx	r3
    9c0e:	4b10      	ldr	r3, [pc, #64]	; (9c50 <spi_cmd+0x338>)
    9c10:	0018      	movs	r0, r3
    9c12:	4b10      	ldr	r3, [pc, #64]	; (9c54 <spi_cmd+0x33c>)
    9c14:	4798      	blx	r3
    9c16:	200d      	movs	r0, #13
    9c18:	4b0f      	ldr	r3, [pc, #60]	; (9c58 <spi_cmd+0x340>)
    9c1a:	4798      	blx	r3
			result = N_FAIL;
    9c1c:	231e      	movs	r3, #30
    9c1e:	18fb      	adds	r3, r7, r3
    9c20:	2200      	movs	r2, #0
    9c22:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    9c24:	231e      	movs	r3, #30
    9c26:	18fb      	adds	r3, r7, r3
    9c28:	781b      	ldrb	r3, [r3, #0]
    9c2a:	b25b      	sxtb	r3, r3
}
    9c2c:	0018      	movs	r0, r3
    9c2e:	46bd      	mov	sp, r7
    9c30:	b009      	add	sp, #36	; 0x24
    9c32:	bd90      	pop	{r4, r7, pc}
    9c34:	00020920 	.word	0x00020920
    9c38:	20000554 	.word	0x20000554
    9c3c:	000098c9 	.word	0x000098c9
    9c40:	00009855 	.word	0x00009855
    9c44:	0002095c 	.word	0x0002095c
    9c48:	000203c8 	.word	0x000203c8
    9c4c:	0001c37d 	.word	0x0001c37d
    9c50:	000203dc 	.word	0x000203dc
    9c54:	0001c499 	.word	0x0001c499
    9c58:	0001c3b1 	.word	0x0001c3b1

00009c5c <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    9c5c:	b590      	push	{r4, r7, lr}
    9c5e:	b085      	sub	sp, #20
    9c60:	af00      	add	r7, sp, #0
    9c62:	0002      	movs	r2, r0
    9c64:	1dfb      	adds	r3, r7, #7
    9c66:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    9c68:	230e      	movs	r3, #14
    9c6a:	18fb      	adds	r3, r7, r3
    9c6c:	2201      	movs	r2, #1
    9c6e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    9c70:	4b31      	ldr	r3, [pc, #196]	; (9d38 <spi_data_rsp+0xdc>)
    9c72:	781b      	ldrb	r3, [r3, #0]
    9c74:	2b00      	cmp	r3, #0
    9c76:	d104      	bne.n	9c82 <spi_data_rsp+0x26>
		len = 2;
    9c78:	230f      	movs	r3, #15
    9c7a:	18fb      	adds	r3, r7, r3
    9c7c:	2202      	movs	r2, #2
    9c7e:	701a      	strb	r2, [r3, #0]
    9c80:	e003      	b.n	9c8a <spi_data_rsp+0x2e>
	else
		len = 3;
    9c82:	230f      	movs	r3, #15
    9c84:	18fb      	adds	r3, r7, r3
    9c86:	2203      	movs	r2, #3
    9c88:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    9c8a:	230f      	movs	r3, #15
    9c8c:	18fb      	adds	r3, r7, r3
    9c8e:	781b      	ldrb	r3, [r3, #0]
    9c90:	b29a      	uxth	r2, r3
    9c92:	2308      	movs	r3, #8
    9c94:	18fb      	adds	r3, r7, r3
    9c96:	0011      	movs	r1, r2
    9c98:	0018      	movs	r0, r3
    9c9a:	4b28      	ldr	r3, [pc, #160]	; (9d3c <spi_data_rsp+0xe0>)
    9c9c:	4798      	blx	r3
    9c9e:	1e03      	subs	r3, r0, #0
    9ca0:	d013      	beq.n	9cca <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    9ca2:	233c      	movs	r3, #60	; 0x3c
    9ca4:	33ff      	adds	r3, #255	; 0xff
    9ca6:	001a      	movs	r2, r3
    9ca8:	4925      	ldr	r1, [pc, #148]	; (9d40 <spi_data_rsp+0xe4>)
    9caa:	4b26      	ldr	r3, [pc, #152]	; (9d44 <spi_data_rsp+0xe8>)
    9cac:	0018      	movs	r0, r3
    9cae:	4b26      	ldr	r3, [pc, #152]	; (9d48 <spi_data_rsp+0xec>)
    9cb0:	4798      	blx	r3
    9cb2:	4b26      	ldr	r3, [pc, #152]	; (9d4c <spi_data_rsp+0xf0>)
    9cb4:	0018      	movs	r0, r3
    9cb6:	4b26      	ldr	r3, [pc, #152]	; (9d50 <spi_data_rsp+0xf4>)
    9cb8:	4798      	blx	r3
    9cba:	200d      	movs	r0, #13
    9cbc:	4b25      	ldr	r3, [pc, #148]	; (9d54 <spi_data_rsp+0xf8>)
    9cbe:	4798      	blx	r3
		result = N_FAIL;
    9cc0:	230e      	movs	r3, #14
    9cc2:	18fb      	adds	r3, r7, r3
    9cc4:	2200      	movs	r2, #0
    9cc6:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    9cc8:	e02e      	b.n	9d28 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    9cca:	230f      	movs	r3, #15
    9ccc:	18fb      	adds	r3, r7, r3
    9cce:	781b      	ldrb	r3, [r3, #0]
    9cd0:	3b01      	subs	r3, #1
    9cd2:	2208      	movs	r2, #8
    9cd4:	18ba      	adds	r2, r7, r2
    9cd6:	5cd3      	ldrb	r3, [r2, r3]
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d108      	bne.n	9cee <spi_data_rsp+0x92>
    9cdc:	230f      	movs	r3, #15
    9cde:	18fb      	adds	r3, r7, r3
    9ce0:	781b      	ldrb	r3, [r3, #0]
    9ce2:	3b02      	subs	r3, #2
    9ce4:	2208      	movs	r2, #8
    9ce6:	18ba      	adds	r2, r7, r2
    9ce8:	5cd3      	ldrb	r3, [r2, r3]
    9cea:	2bc3      	cmp	r3, #195	; 0xc3
    9cec:	d01c      	beq.n	9d28 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    9cee:	23a1      	movs	r3, #161	; 0xa1
    9cf0:	005a      	lsls	r2, r3, #1
    9cf2:	4913      	ldr	r1, [pc, #76]	; (9d40 <spi_data_rsp+0xe4>)
    9cf4:	4b13      	ldr	r3, [pc, #76]	; (9d44 <spi_data_rsp+0xe8>)
    9cf6:	0018      	movs	r0, r3
    9cf8:	4b13      	ldr	r3, [pc, #76]	; (9d48 <spi_data_rsp+0xec>)
    9cfa:	4798      	blx	r3
    9cfc:	2308      	movs	r3, #8
    9cfe:	18fb      	adds	r3, r7, r3
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	0019      	movs	r1, r3
    9d04:	2308      	movs	r3, #8
    9d06:	18fb      	adds	r3, r7, r3
    9d08:	785b      	ldrb	r3, [r3, #1]
    9d0a:	001a      	movs	r2, r3
    9d0c:	2308      	movs	r3, #8
    9d0e:	18fb      	adds	r3, r7, r3
    9d10:	789b      	ldrb	r3, [r3, #2]
    9d12:	4811      	ldr	r0, [pc, #68]	; (9d58 <spi_data_rsp+0xfc>)
    9d14:	4c0c      	ldr	r4, [pc, #48]	; (9d48 <spi_data_rsp+0xec>)
    9d16:	47a0      	blx	r4
    9d18:	200d      	movs	r0, #13
    9d1a:	4b0e      	ldr	r3, [pc, #56]	; (9d54 <spi_data_rsp+0xf8>)
    9d1c:	4798      	blx	r3
		result = N_FAIL;
    9d1e:	230e      	movs	r3, #14
    9d20:	18fb      	adds	r3, r7, r3
    9d22:	2200      	movs	r2, #0
    9d24:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    9d26:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    9d28:	230e      	movs	r3, #14
    9d2a:	18fb      	adds	r3, r7, r3
    9d2c:	781b      	ldrb	r3, [r3, #0]
    9d2e:	b25b      	sxtb	r3, r3
}
    9d30:	0018      	movs	r0, r3
    9d32:	46bd      	mov	sp, r7
    9d34:	b005      	add	sp, #20
    9d36:	bd90      	pop	{r4, r7, pc}
    9d38:	20000554 	.word	0x20000554
    9d3c:	00009811 	.word	0x00009811
    9d40:	00020964 	.word	0x00020964
    9d44:	000203c8 	.word	0x000203c8
    9d48:	0001c37d 	.word	0x0001c37d
    9d4c:	00020408 	.word	0x00020408
    9d50:	0001c499 	.word	0x0001c499
    9d54:	0001c3b1 	.word	0x0001c3b1
    9d58:	00020428 	.word	0x00020428

00009d5c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    9d5c:	b580      	push	{r7, lr}
    9d5e:	b084      	sub	sp, #16
    9d60:	af00      	add	r7, sp, #0
    9d62:	0002      	movs	r2, r0
    9d64:	1dfb      	adds	r3, r7, #7
    9d66:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    9d68:	230f      	movs	r3, #15
    9d6a:	18fb      	adds	r3, r7, r3
    9d6c:	2201      	movs	r2, #1
    9d6e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    9d70:	1dfb      	adds	r3, r7, #7
    9d72:	781b      	ldrb	r3, [r3, #0]
    9d74:	2bcf      	cmp	r3, #207	; 0xcf
    9d76:	d007      	beq.n	9d88 <spi_cmd_rsp+0x2c>
    9d78:	1dfb      	adds	r3, r7, #7
    9d7a:	781b      	ldrb	r3, [r3, #0]
    9d7c:	2bc5      	cmp	r3, #197	; 0xc5
    9d7e:	d003      	beq.n	9d88 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    9d80:	1dfb      	adds	r3, r7, #7
    9d82:	781b      	ldrb	r3, [r3, #0]
    9d84:	2bc6      	cmp	r3, #198	; 0xc6
    9d86:	d10c      	bne.n	9da2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9d88:	230d      	movs	r3, #13
    9d8a:	18fb      	adds	r3, r7, r3
    9d8c:	2101      	movs	r1, #1
    9d8e:	0018      	movs	r0, r3
    9d90:	4b39      	ldr	r3, [pc, #228]	; (9e78 <spi_cmd_rsp+0x11c>)
    9d92:	4798      	blx	r3
    9d94:	1e03      	subs	r3, r0, #0
    9d96:	d004      	beq.n	9da2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    9d98:	230f      	movs	r3, #15
    9d9a:	18fb      	adds	r3, r7, r3
    9d9c:	2200      	movs	r2, #0
    9d9e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    9da0:	e061      	b.n	9e66 <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    9da2:	230e      	movs	r3, #14
    9da4:	18fb      	adds	r3, r7, r3
    9da6:	220a      	movs	r2, #10
    9da8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9daa:	230d      	movs	r3, #13
    9dac:	18fb      	adds	r3, r7, r3
    9dae:	2101      	movs	r1, #1
    9db0:	0018      	movs	r0, r3
    9db2:	4b31      	ldr	r3, [pc, #196]	; (9e78 <spi_cmd_rsp+0x11c>)
    9db4:	4798      	blx	r3
    9db6:	1e03      	subs	r3, r0, #0
    9db8:	d012      	beq.n	9de0 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9dba:	23b1      	movs	r3, #177	; 0xb1
    9dbc:	005a      	lsls	r2, r3, #1
    9dbe:	492f      	ldr	r1, [pc, #188]	; (9e7c <spi_cmd_rsp+0x120>)
    9dc0:	4b2f      	ldr	r3, [pc, #188]	; (9e80 <spi_cmd_rsp+0x124>)
    9dc2:	0018      	movs	r0, r3
    9dc4:	4b2f      	ldr	r3, [pc, #188]	; (9e84 <spi_cmd_rsp+0x128>)
    9dc6:	4798      	blx	r3
    9dc8:	4b2f      	ldr	r3, [pc, #188]	; (9e88 <spi_cmd_rsp+0x12c>)
    9dca:	0018      	movs	r0, r3
    9dcc:	4b2f      	ldr	r3, [pc, #188]	; (9e8c <spi_cmd_rsp+0x130>)
    9dce:	4798      	blx	r3
    9dd0:	200d      	movs	r0, #13
    9dd2:	4b2f      	ldr	r3, [pc, #188]	; (9e90 <spi_cmd_rsp+0x134>)
    9dd4:	4798      	blx	r3
			result = N_FAIL;
    9dd6:	230f      	movs	r3, #15
    9dd8:	18fb      	adds	r3, r7, r3
    9dda:	2200      	movs	r2, #0
    9ddc:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    9dde:	e042      	b.n	9e66 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    9de0:	230d      	movs	r3, #13
    9de2:	18fb      	adds	r3, r7, r3
    9de4:	781b      	ldrb	r3, [r3, #0]
    9de6:	1dfa      	adds	r2, r7, #7
    9de8:	7812      	ldrb	r2, [r2, #0]
    9dea:	429a      	cmp	r2, r3
    9dec:	d00b      	beq.n	9e06 <spi_cmd_rsp+0xaa>
    9dee:	230e      	movs	r3, #14
    9df0:	18fb      	adds	r3, r7, r3
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	b25b      	sxtb	r3, r3
    9df6:	b2da      	uxtb	r2, r3
    9df8:	3a01      	subs	r2, #1
    9dfa:	b2d1      	uxtb	r1, r2
    9dfc:	220e      	movs	r2, #14
    9dfe:	18ba      	adds	r2, r7, r2
    9e00:	7011      	strb	r1, [r2, #0]
    9e02:	2b00      	cmp	r3, #0
    9e04:	dcd1      	bgt.n	9daa <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    9e06:	230e      	movs	r3, #14
    9e08:	18fb      	adds	r3, r7, r3
    9e0a:	220a      	movs	r2, #10
    9e0c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9e0e:	230d      	movs	r3, #13
    9e10:	18fb      	adds	r3, r7, r3
    9e12:	2101      	movs	r1, #1
    9e14:	0018      	movs	r0, r3
    9e16:	4b18      	ldr	r3, [pc, #96]	; (9e78 <spi_cmd_rsp+0x11c>)
    9e18:	4798      	blx	r3
    9e1a:	1e03      	subs	r3, r0, #0
    9e1c:	d012      	beq.n	9e44 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9e1e:	23b8      	movs	r3, #184	; 0xb8
    9e20:	005a      	lsls	r2, r3, #1
    9e22:	4916      	ldr	r1, [pc, #88]	; (9e7c <spi_cmd_rsp+0x120>)
    9e24:	4b16      	ldr	r3, [pc, #88]	; (9e80 <spi_cmd_rsp+0x124>)
    9e26:	0018      	movs	r0, r3
    9e28:	4b16      	ldr	r3, [pc, #88]	; (9e84 <spi_cmd_rsp+0x128>)
    9e2a:	4798      	blx	r3
    9e2c:	4b16      	ldr	r3, [pc, #88]	; (9e88 <spi_cmd_rsp+0x12c>)
    9e2e:	0018      	movs	r0, r3
    9e30:	4b16      	ldr	r3, [pc, #88]	; (9e8c <spi_cmd_rsp+0x130>)
    9e32:	4798      	blx	r3
    9e34:	200d      	movs	r0, #13
    9e36:	4b16      	ldr	r3, [pc, #88]	; (9e90 <spi_cmd_rsp+0x134>)
    9e38:	4798      	blx	r3
			result = N_FAIL;
    9e3a:	230f      	movs	r3, #15
    9e3c:	18fb      	adds	r3, r7, r3
    9e3e:	2200      	movs	r2, #0
    9e40:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    9e42:	e010      	b.n	9e66 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    9e44:	230d      	movs	r3, #13
    9e46:	18fb      	adds	r3, r7, r3
    9e48:	781b      	ldrb	r3, [r3, #0]
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	d00b      	beq.n	9e66 <spi_cmd_rsp+0x10a>
    9e4e:	230e      	movs	r3, #14
    9e50:	18fb      	adds	r3, r7, r3
    9e52:	781b      	ldrb	r3, [r3, #0]
    9e54:	b25b      	sxtb	r3, r3
    9e56:	b2da      	uxtb	r2, r3
    9e58:	3a01      	subs	r2, #1
    9e5a:	b2d1      	uxtb	r1, r2
    9e5c:	220e      	movs	r2, #14
    9e5e:	18ba      	adds	r2, r7, r2
    9e60:	7011      	strb	r1, [r2, #0]
    9e62:	2b00      	cmp	r3, #0
    9e64:	dcd3      	bgt.n	9e0e <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    9e66:	230f      	movs	r3, #15
    9e68:	18fb      	adds	r3, r7, r3
    9e6a:	781b      	ldrb	r3, [r3, #0]
    9e6c:	b25b      	sxtb	r3, r3
}
    9e6e:	0018      	movs	r0, r3
    9e70:	46bd      	mov	sp, r7
    9e72:	b004      	add	sp, #16
    9e74:	bd80      	pop	{r7, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	00009811 	.word	0x00009811
    9e7c:	00020974 	.word	0x00020974
    9e80:	000203c8 	.word	0x000203c8
    9e84:	0001c37d 	.word	0x0001c37d
    9e88:	00020458 	.word	0x00020458
    9e8c:	0001c499 	.word	0x0001c499
    9e90:	0001c3b1 	.word	0x0001c3b1

00009e94 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    9e94:	b580      	push	{r7, lr}
    9e96:	b086      	sub	sp, #24
    9e98:	af00      	add	r7, sp, #0
    9e9a:	6078      	str	r0, [r7, #4]
    9e9c:	0008      	movs	r0, r1
    9e9e:	0011      	movs	r1, r2
    9ea0:	1cbb      	adds	r3, r7, #2
    9ea2:	1c02      	adds	r2, r0, #0
    9ea4:	801a      	strh	r2, [r3, #0]
    9ea6:	1c7b      	adds	r3, r7, #1
    9ea8:	1c0a      	adds	r2, r1, #0
    9eaa:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    9eac:	2311      	movs	r3, #17
    9eae:	18fb      	adds	r3, r7, r3
    9eb0:	2201      	movs	r2, #1
    9eb2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    9eb4:	2314      	movs	r3, #20
    9eb6:	18fb      	adds	r3, r7, r3
    9eb8:	2200      	movs	r2, #0
    9eba:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    9ebc:	1cbb      	adds	r3, r7, #2
    9ebe:	881a      	ldrh	r2, [r3, #0]
    9ec0:	2380      	movs	r3, #128	; 0x80
    9ec2:	019b      	lsls	r3, r3, #6
    9ec4:	429a      	cmp	r2, r3
    9ec6:	d805      	bhi.n	9ed4 <spi_data_read+0x40>
			nbytes = sz;
    9ec8:	2312      	movs	r3, #18
    9eca:	18fb      	adds	r3, r7, r3
    9ecc:	1cba      	adds	r2, r7, #2
    9ece:	8812      	ldrh	r2, [r2, #0]
    9ed0:	801a      	strh	r2, [r3, #0]
    9ed2:	e004      	b.n	9ede <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    9ed4:	2312      	movs	r3, #18
    9ed6:	18fb      	adds	r3, r7, r3
    9ed8:	2280      	movs	r2, #128	; 0x80
    9eda:	0192      	lsls	r2, r2, #6
    9edc:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    9ede:	2316      	movs	r3, #22
    9ee0:	18fb      	adds	r3, r7, r3
    9ee2:	220a      	movs	r2, #10
    9ee4:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9ee6:	230b      	movs	r3, #11
    9ee8:	18fb      	adds	r3, r7, r3
    9eea:	2101      	movs	r1, #1
    9eec:	0018      	movs	r0, r3
    9eee:	4b5c      	ldr	r3, [pc, #368]	; (a060 <spi_data_read+0x1cc>)
    9ef0:	4798      	blx	r3
    9ef2:	1e03      	subs	r3, r0, #0
    9ef4:	d011      	beq.n	9f1a <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    9ef6:	4a5b      	ldr	r2, [pc, #364]	; (a064 <spi_data_read+0x1d0>)
    9ef8:	495b      	ldr	r1, [pc, #364]	; (a068 <spi_data_read+0x1d4>)
    9efa:	4b5c      	ldr	r3, [pc, #368]	; (a06c <spi_data_read+0x1d8>)
    9efc:	0018      	movs	r0, r3
    9efe:	4b5c      	ldr	r3, [pc, #368]	; (a070 <spi_data_read+0x1dc>)
    9f00:	4798      	blx	r3
    9f02:	4b5c      	ldr	r3, [pc, #368]	; (a074 <spi_data_read+0x1e0>)
    9f04:	0018      	movs	r0, r3
    9f06:	4b5c      	ldr	r3, [pc, #368]	; (a078 <spi_data_read+0x1e4>)
    9f08:	4798      	blx	r3
    9f0a:	200d      	movs	r0, #13
    9f0c:	4b5b      	ldr	r3, [pc, #364]	; (a07c <spi_data_read+0x1e8>)
    9f0e:	4798      	blx	r3
				result = N_FAIL;
    9f10:	2311      	movs	r3, #17
    9f12:	18fb      	adds	r3, r7, r3
    9f14:	2200      	movs	r2, #0
    9f16:	701a      	strb	r2, [r3, #0]
				break;
    9f18:	e017      	b.n	9f4a <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    9f1a:	230b      	movs	r3, #11
    9f1c:	18fb      	adds	r3, r7, r3
    9f1e:	781b      	ldrb	r3, [r3, #0]
    9f20:	091b      	lsrs	r3, r3, #4
    9f22:	b2db      	uxtb	r3, r3
    9f24:	001a      	movs	r2, r3
    9f26:	230f      	movs	r3, #15
    9f28:	4013      	ands	r3, r2
    9f2a:	2b0f      	cmp	r3, #15
    9f2c:	d00c      	beq.n	9f48 <spi_data_read+0xb4>
				break;
		} while (retry--);
    9f2e:	2316      	movs	r3, #22
    9f30:	18fb      	adds	r3, r7, r3
    9f32:	2200      	movs	r2, #0
    9f34:	5e9b      	ldrsh	r3, [r3, r2]
    9f36:	b29a      	uxth	r2, r3
    9f38:	3a01      	subs	r2, #1
    9f3a:	b291      	uxth	r1, r2
    9f3c:	2216      	movs	r2, #22
    9f3e:	18ba      	adds	r2, r7, r2
    9f40:	8011      	strh	r1, [r2, #0]
    9f42:	2b00      	cmp	r3, #0
    9f44:	d1cf      	bne.n	9ee6 <spi_data_read+0x52>
    9f46:	e000      	b.n	9f4a <spi_data_read+0xb6>
				break;
    9f48:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    9f4a:	2311      	movs	r3, #17
    9f4c:	18fb      	adds	r3, r7, r3
    9f4e:	781b      	ldrb	r3, [r3, #0]
    9f50:	b25b      	sxtb	r3, r3
    9f52:	2b00      	cmp	r3, #0
    9f54:	d100      	bne.n	9f58 <spi_data_read+0xc4>
    9f56:	e079      	b.n	a04c <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    9f58:	2316      	movs	r3, #22
    9f5a:	18fb      	adds	r3, r7, r3
    9f5c:	2200      	movs	r2, #0
    9f5e:	5e9b      	ldrsh	r3, [r3, r2]
    9f60:	2b00      	cmp	r3, #0
    9f62:	dc16      	bgt.n	9f92 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    9f64:	4a46      	ldr	r2, [pc, #280]	; (a080 <spi_data_read+0x1ec>)
    9f66:	4940      	ldr	r1, [pc, #256]	; (a068 <spi_data_read+0x1d4>)
    9f68:	4b40      	ldr	r3, [pc, #256]	; (a06c <spi_data_read+0x1d8>)
    9f6a:	0018      	movs	r0, r3
    9f6c:	4b40      	ldr	r3, [pc, #256]	; (a070 <spi_data_read+0x1dc>)
    9f6e:	4798      	blx	r3
    9f70:	230b      	movs	r3, #11
    9f72:	18fb      	adds	r3, r7, r3
    9f74:	781b      	ldrb	r3, [r3, #0]
    9f76:	001a      	movs	r2, r3
    9f78:	4b42      	ldr	r3, [pc, #264]	; (a084 <spi_data_read+0x1f0>)
    9f7a:	0011      	movs	r1, r2
    9f7c:	0018      	movs	r0, r3
    9f7e:	4b3c      	ldr	r3, [pc, #240]	; (a070 <spi_data_read+0x1dc>)
    9f80:	4798      	blx	r3
    9f82:	200d      	movs	r0, #13
    9f84:	4b3d      	ldr	r3, [pc, #244]	; (a07c <spi_data_read+0x1e8>)
    9f86:	4798      	blx	r3
			result = N_FAIL;
    9f88:	2311      	movs	r3, #17
    9f8a:	18fb      	adds	r3, r7, r3
    9f8c:	2200      	movs	r2, #0
    9f8e:	701a      	strb	r2, [r3, #0]
			break;
    9f90:	e05d      	b.n	a04e <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    9f92:	2314      	movs	r3, #20
    9f94:	18fb      	adds	r3, r7, r3
    9f96:	2200      	movs	r2, #0
    9f98:	5e9b      	ldrsh	r3, [r3, r2]
    9f9a:	687a      	ldr	r2, [r7, #4]
    9f9c:	18d2      	adds	r2, r2, r3
    9f9e:	2312      	movs	r3, #18
    9fa0:	18fb      	adds	r3, r7, r3
    9fa2:	881b      	ldrh	r3, [r3, #0]
    9fa4:	0019      	movs	r1, r3
    9fa6:	0010      	movs	r0, r2
    9fa8:	4b2d      	ldr	r3, [pc, #180]	; (a060 <spi_data_read+0x1cc>)
    9faa:	4798      	blx	r3
    9fac:	1e03      	subs	r3, r0, #0
    9fae:	d012      	beq.n	9fd6 <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    9fb0:	23c5      	movs	r3, #197	; 0xc5
    9fb2:	009a      	lsls	r2, r3, #2
    9fb4:	492c      	ldr	r1, [pc, #176]	; (a068 <spi_data_read+0x1d4>)
    9fb6:	4b2d      	ldr	r3, [pc, #180]	; (a06c <spi_data_read+0x1d8>)
    9fb8:	0018      	movs	r0, r3
    9fba:	4b2d      	ldr	r3, [pc, #180]	; (a070 <spi_data_read+0x1dc>)
    9fbc:	4798      	blx	r3
    9fbe:	4b32      	ldr	r3, [pc, #200]	; (a088 <spi_data_read+0x1f4>)
    9fc0:	0018      	movs	r0, r3
    9fc2:	4b2d      	ldr	r3, [pc, #180]	; (a078 <spi_data_read+0x1e4>)
    9fc4:	4798      	blx	r3
    9fc6:	200d      	movs	r0, #13
    9fc8:	4b2c      	ldr	r3, [pc, #176]	; (a07c <spi_data_read+0x1e8>)
    9fca:	4798      	blx	r3
			result = N_FAIL;
    9fcc:	2311      	movs	r3, #17
    9fce:	18fb      	adds	r3, r7, r3
    9fd0:	2200      	movs	r2, #0
    9fd2:	701a      	strb	r2, [r3, #0]
			break;
    9fd4:	e03b      	b.n	a04e <spi_data_read+0x1ba>
		}
		if(!clockless)
    9fd6:	1c7b      	adds	r3, r7, #1
    9fd8:	781b      	ldrb	r3, [r3, #0]
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d11d      	bne.n	a01a <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    9fde:	4b2b      	ldr	r3, [pc, #172]	; (a08c <spi_data_read+0x1f8>)
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d119      	bne.n	a01a <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    9fe6:	230c      	movs	r3, #12
    9fe8:	18fb      	adds	r3, r7, r3
    9fea:	2102      	movs	r1, #2
    9fec:	0018      	movs	r0, r3
    9fee:	4b1c      	ldr	r3, [pc, #112]	; (a060 <spi_data_read+0x1cc>)
    9ff0:	4798      	blx	r3
    9ff2:	1e03      	subs	r3, r0, #0
    9ff4:	d011      	beq.n	a01a <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    9ff6:	4a26      	ldr	r2, [pc, #152]	; (a090 <spi_data_read+0x1fc>)
    9ff8:	491b      	ldr	r1, [pc, #108]	; (a068 <spi_data_read+0x1d4>)
    9ffa:	4b1c      	ldr	r3, [pc, #112]	; (a06c <spi_data_read+0x1d8>)
    9ffc:	0018      	movs	r0, r3
    9ffe:	4b1c      	ldr	r3, [pc, #112]	; (a070 <spi_data_read+0x1dc>)
    a000:	4798      	blx	r3
    a002:	4b24      	ldr	r3, [pc, #144]	; (a094 <spi_data_read+0x200>)
    a004:	0018      	movs	r0, r3
    a006:	4b1c      	ldr	r3, [pc, #112]	; (a078 <spi_data_read+0x1e4>)
    a008:	4798      	blx	r3
    a00a:	200d      	movs	r0, #13
    a00c:	4b1b      	ldr	r3, [pc, #108]	; (a07c <spi_data_read+0x1e8>)
    a00e:	4798      	blx	r3
					result = N_FAIL;
    a010:	2311      	movs	r3, #17
    a012:	18fb      	adds	r3, r7, r3
    a014:	2200      	movs	r2, #0
    a016:	701a      	strb	r2, [r3, #0]
					break;
    a018:	e019      	b.n	a04e <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    a01a:	2314      	movs	r3, #20
    a01c:	18fb      	adds	r3, r7, r3
    a01e:	881a      	ldrh	r2, [r3, #0]
    a020:	2312      	movs	r3, #18
    a022:	18fb      	adds	r3, r7, r3
    a024:	881b      	ldrh	r3, [r3, #0]
    a026:	18d3      	adds	r3, r2, r3
    a028:	b29a      	uxth	r2, r3
    a02a:	2314      	movs	r3, #20
    a02c:	18fb      	adds	r3, r7, r3
    a02e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    a030:	2312      	movs	r3, #18
    a032:	18fb      	adds	r3, r7, r3
    a034:	881a      	ldrh	r2, [r3, #0]
    a036:	1cbb      	adds	r3, r7, #2
    a038:	1cb9      	adds	r1, r7, #2
    a03a:	8809      	ldrh	r1, [r1, #0]
    a03c:	1a8a      	subs	r2, r1, r2
    a03e:	801a      	strh	r2, [r3, #0]

	} while (sz);
    a040:	1cbb      	adds	r3, r7, #2
    a042:	881b      	ldrh	r3, [r3, #0]
    a044:	2b00      	cmp	r3, #0
    a046:	d000      	beq.n	a04a <spi_data_read+0x1b6>
    a048:	e738      	b.n	9ebc <spi_data_read+0x28>
    a04a:	e000      	b.n	a04e <spi_data_read+0x1ba>
			break;
    a04c:	46c0      	nop			; (mov r8, r8)

	return result;
    a04e:	2311      	movs	r3, #17
    a050:	18fb      	adds	r3, r7, r3
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	b25b      	sxtb	r3, r3
}
    a056:	0018      	movs	r0, r3
    a058:	46bd      	mov	sp, r7
    a05a:	b006      	add	sp, #24
    a05c:	bd80      	pop	{r7, pc}
    a05e:	46c0      	nop			; (mov r8, r8)
    a060:	00009811 	.word	0x00009811
    a064:	000002ff 	.word	0x000002ff
    a068:	00020980 	.word	0x00020980
    a06c:	000203c8 	.word	0x000203c8
    a070:	0001c37d 	.word	0x0001c37d
    a074:	0002048c 	.word	0x0002048c
    a078:	0001c499 	.word	0x0001c499
    a07c:	0001c3b1 	.word	0x0001c3b1
    a080:	0000030b 	.word	0x0000030b
    a084:	000204c0 	.word	0x000204c0
    a088:	000204f0 	.word	0x000204f0
    a08c:	20000554 	.word	0x20000554
    a090:	0000031f 	.word	0x0000031f
    a094:	00020520 	.word	0x00020520

0000a098 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    a098:	b580      	push	{r7, lr}
    a09a:	b086      	sub	sp, #24
    a09c:	af00      	add	r7, sp, #0
    a09e:	6078      	str	r0, [r7, #4]
    a0a0:	000a      	movs	r2, r1
    a0a2:	1cbb      	adds	r3, r7, #2
    a0a4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    a0a6:	2313      	movs	r3, #19
    a0a8:	18fb      	adds	r3, r7, r3
    a0aa:	2201      	movs	r2, #1
    a0ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    a0ae:	230c      	movs	r3, #12
    a0b0:	18fb      	adds	r3, r7, r3
    a0b2:	2200      	movs	r2, #0
    a0b4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    a0b6:	2316      	movs	r3, #22
    a0b8:	18fb      	adds	r3, r7, r3
    a0ba:	2200      	movs	r2, #0
    a0bc:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    a0be:	1cbb      	adds	r3, r7, #2
    a0c0:	881a      	ldrh	r2, [r3, #0]
    a0c2:	2380      	movs	r3, #128	; 0x80
    a0c4:	019b      	lsls	r3, r3, #6
    a0c6:	429a      	cmp	r2, r3
    a0c8:	d805      	bhi.n	a0d6 <spi_data_write+0x3e>
			nbytes = sz;
    a0ca:	2314      	movs	r3, #20
    a0cc:	18fb      	adds	r3, r7, r3
    a0ce:	1cba      	adds	r2, r7, #2
    a0d0:	8812      	ldrh	r2, [r2, #0]
    a0d2:	801a      	strh	r2, [r3, #0]
    a0d4:	e004      	b.n	a0e0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    a0d6:	2314      	movs	r3, #20
    a0d8:	18fb      	adds	r3, r7, r3
    a0da:	2280      	movs	r2, #128	; 0x80
    a0dc:	0192      	lsls	r2, r2, #6
    a0de:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    a0e0:	2311      	movs	r3, #17
    a0e2:	18fb      	adds	r3, r7, r3
    a0e4:	22f0      	movs	r2, #240	; 0xf0
    a0e6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    a0e8:	2316      	movs	r3, #22
    a0ea:	18fb      	adds	r3, r7, r3
    a0ec:	2200      	movs	r2, #0
    a0ee:	5e9b      	ldrsh	r3, [r3, r2]
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d10f      	bne.n	a114 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    a0f4:	1cbb      	adds	r3, r7, #2
    a0f6:	881a      	ldrh	r2, [r3, #0]
    a0f8:	2380      	movs	r3, #128	; 0x80
    a0fa:	019b      	lsls	r3, r3, #6
    a0fc:	429a      	cmp	r2, r3
    a0fe:	d804      	bhi.n	a10a <spi_data_write+0x72>
				order = 0x3;
    a100:	2312      	movs	r3, #18
    a102:	18fb      	adds	r3, r7, r3
    a104:	2203      	movs	r2, #3
    a106:	701a      	strb	r2, [r3, #0]
    a108:	e013      	b.n	a132 <spi_data_write+0x9a>
			else
				order = 0x1;
    a10a:	2312      	movs	r3, #18
    a10c:	18fb      	adds	r3, r7, r3
    a10e:	2201      	movs	r2, #1
    a110:	701a      	strb	r2, [r3, #0]
    a112:	e00e      	b.n	a132 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    a114:	1cbb      	adds	r3, r7, #2
    a116:	881a      	ldrh	r2, [r3, #0]
    a118:	2380      	movs	r3, #128	; 0x80
    a11a:	019b      	lsls	r3, r3, #6
    a11c:	429a      	cmp	r2, r3
    a11e:	d804      	bhi.n	a12a <spi_data_write+0x92>
				order = 0x3;
    a120:	2312      	movs	r3, #18
    a122:	18fb      	adds	r3, r7, r3
    a124:	2203      	movs	r2, #3
    a126:	701a      	strb	r2, [r3, #0]
    a128:	e003      	b.n	a132 <spi_data_write+0x9a>
			else
				order = 0x2;
    a12a:	2312      	movs	r3, #18
    a12c:	18fb      	adds	r3, r7, r3
    a12e:	2202      	movs	r2, #2
    a130:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    a132:	2311      	movs	r3, #17
    a134:	18fb      	adds	r3, r7, r3
    a136:	781a      	ldrb	r2, [r3, #0]
    a138:	2312      	movs	r3, #18
    a13a:	18fb      	adds	r3, r7, r3
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	4313      	orrs	r3, r2
    a140:	b2da      	uxtb	r2, r3
    a142:	2311      	movs	r3, #17
    a144:	18fb      	adds	r3, r7, r3
    a146:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    a148:	2311      	movs	r3, #17
    a14a:	18fb      	adds	r3, r7, r3
    a14c:	2101      	movs	r1, #1
    a14e:	0018      	movs	r0, r3
    a150:	4b3a      	ldr	r3, [pc, #232]	; (a23c <spi_data_write+0x1a4>)
    a152:	4798      	blx	r3
    a154:	1e03      	subs	r3, r0, #0
    a156:	d012      	beq.n	a17e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    a158:	23d4      	movs	r3, #212	; 0xd4
    a15a:	009a      	lsls	r2, r3, #2
    a15c:	4938      	ldr	r1, [pc, #224]	; (a240 <spi_data_write+0x1a8>)
    a15e:	4b39      	ldr	r3, [pc, #228]	; (a244 <spi_data_write+0x1ac>)
    a160:	0018      	movs	r0, r3
    a162:	4b39      	ldr	r3, [pc, #228]	; (a248 <spi_data_write+0x1b0>)
    a164:	4798      	blx	r3
    a166:	4b39      	ldr	r3, [pc, #228]	; (a24c <spi_data_write+0x1b4>)
    a168:	0018      	movs	r0, r3
    a16a:	4b39      	ldr	r3, [pc, #228]	; (a250 <spi_data_write+0x1b8>)
    a16c:	4798      	blx	r3
    a16e:	200d      	movs	r0, #13
    a170:	4b38      	ldr	r3, [pc, #224]	; (a254 <spi_data_write+0x1bc>)
    a172:	4798      	blx	r3
			result = N_FAIL;
    a174:	2313      	movs	r3, #19
    a176:	18fb      	adds	r3, r7, r3
    a178:	2200      	movs	r2, #0
    a17a:	701a      	strb	r2, [r3, #0]
			break;
    a17c:	e056      	b.n	a22c <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    a17e:	2316      	movs	r3, #22
    a180:	18fb      	adds	r3, r7, r3
    a182:	2200      	movs	r2, #0
    a184:	5e9b      	ldrsh	r3, [r3, r2]
    a186:	687a      	ldr	r2, [r7, #4]
    a188:	18d2      	adds	r2, r2, r3
    a18a:	2314      	movs	r3, #20
    a18c:	18fb      	adds	r3, r7, r3
    a18e:	881b      	ldrh	r3, [r3, #0]
    a190:	0019      	movs	r1, r3
    a192:	0010      	movs	r0, r2
    a194:	4b29      	ldr	r3, [pc, #164]	; (a23c <spi_data_write+0x1a4>)
    a196:	4798      	blx	r3
    a198:	1e03      	subs	r3, r0, #0
    a19a:	d011      	beq.n	a1c0 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    a19c:	4a2e      	ldr	r2, [pc, #184]	; (a258 <spi_data_write+0x1c0>)
    a19e:	4928      	ldr	r1, [pc, #160]	; (a240 <spi_data_write+0x1a8>)
    a1a0:	4b28      	ldr	r3, [pc, #160]	; (a244 <spi_data_write+0x1ac>)
    a1a2:	0018      	movs	r0, r3
    a1a4:	4b28      	ldr	r3, [pc, #160]	; (a248 <spi_data_write+0x1b0>)
    a1a6:	4798      	blx	r3
    a1a8:	4b2c      	ldr	r3, [pc, #176]	; (a25c <spi_data_write+0x1c4>)
    a1aa:	0018      	movs	r0, r3
    a1ac:	4b28      	ldr	r3, [pc, #160]	; (a250 <spi_data_write+0x1b8>)
    a1ae:	4798      	blx	r3
    a1b0:	200d      	movs	r0, #13
    a1b2:	4b28      	ldr	r3, [pc, #160]	; (a254 <spi_data_write+0x1bc>)
    a1b4:	4798      	blx	r3
			result = N_FAIL;
    a1b6:	2313      	movs	r3, #19
    a1b8:	18fb      	adds	r3, r7, r3
    a1ba:	2200      	movs	r2, #0
    a1bc:	701a      	strb	r2, [r3, #0]
			break;
    a1be:	e035      	b.n	a22c <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    a1c0:	4b27      	ldr	r3, [pc, #156]	; (a260 <spi_data_write+0x1c8>)
    a1c2:	781b      	ldrb	r3, [r3, #0]
    a1c4:	2b00      	cmp	r3, #0
    a1c6:	d119      	bne.n	a1fc <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    a1c8:	230c      	movs	r3, #12
    a1ca:	18fb      	adds	r3, r7, r3
    a1cc:	2102      	movs	r1, #2
    a1ce:	0018      	movs	r0, r3
    a1d0:	4b1a      	ldr	r3, [pc, #104]	; (a23c <spi_data_write+0x1a4>)
    a1d2:	4798      	blx	r3
    a1d4:	1e03      	subs	r3, r0, #0
    a1d6:	d011      	beq.n	a1fc <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    a1d8:	4a22      	ldr	r2, [pc, #136]	; (a264 <spi_data_write+0x1cc>)
    a1da:	4919      	ldr	r1, [pc, #100]	; (a240 <spi_data_write+0x1a8>)
    a1dc:	4b19      	ldr	r3, [pc, #100]	; (a244 <spi_data_write+0x1ac>)
    a1de:	0018      	movs	r0, r3
    a1e0:	4b19      	ldr	r3, [pc, #100]	; (a248 <spi_data_write+0x1b0>)
    a1e2:	4798      	blx	r3
    a1e4:	4b20      	ldr	r3, [pc, #128]	; (a268 <spi_data_write+0x1d0>)
    a1e6:	0018      	movs	r0, r3
    a1e8:	4b19      	ldr	r3, [pc, #100]	; (a250 <spi_data_write+0x1b8>)
    a1ea:	4798      	blx	r3
    a1ec:	200d      	movs	r0, #13
    a1ee:	4b19      	ldr	r3, [pc, #100]	; (a254 <spi_data_write+0x1bc>)
    a1f0:	4798      	blx	r3
				result = N_FAIL;
    a1f2:	2313      	movs	r3, #19
    a1f4:	18fb      	adds	r3, r7, r3
    a1f6:	2200      	movs	r2, #0
    a1f8:	701a      	strb	r2, [r3, #0]
				break;
    a1fa:	e017      	b.n	a22c <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    a1fc:	2316      	movs	r3, #22
    a1fe:	18fb      	adds	r3, r7, r3
    a200:	881a      	ldrh	r2, [r3, #0]
    a202:	2314      	movs	r3, #20
    a204:	18fb      	adds	r3, r7, r3
    a206:	881b      	ldrh	r3, [r3, #0]
    a208:	18d3      	adds	r3, r2, r3
    a20a:	b29a      	uxth	r2, r3
    a20c:	2316      	movs	r3, #22
    a20e:	18fb      	adds	r3, r7, r3
    a210:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    a212:	1cbb      	adds	r3, r7, #2
    a214:	1cb9      	adds	r1, r7, #2
    a216:	2214      	movs	r2, #20
    a218:	18ba      	adds	r2, r7, r2
    a21a:	8809      	ldrh	r1, [r1, #0]
    a21c:	8812      	ldrh	r2, [r2, #0]
    a21e:	1a8a      	subs	r2, r1, r2
    a220:	801a      	strh	r2, [r3, #0]
	} while (sz);
    a222:	1cbb      	adds	r3, r7, #2
    a224:	881b      	ldrh	r3, [r3, #0]
    a226:	2b00      	cmp	r3, #0
    a228:	d000      	beq.n	a22c <spi_data_write+0x194>
    a22a:	e748      	b.n	a0be <spi_data_write+0x26>


	return result;
    a22c:	2313      	movs	r3, #19
    a22e:	18fb      	adds	r3, r7, r3
    a230:	781b      	ldrb	r3, [r3, #0]
    a232:	b25b      	sxtb	r3, r3
}
    a234:	0018      	movs	r0, r3
    a236:	46bd      	mov	sp, r7
    a238:	b006      	add	sp, #24
    a23a:	bd80      	pop	{r7, pc}
    a23c:	00009855 	.word	0x00009855
    a240:	00020990 	.word	0x00020990
    a244:	000203c8 	.word	0x000203c8
    a248:	0001c37d 	.word	0x0001c37d
    a24c:	00020554 	.word	0x00020554
    a250:	0001c499 	.word	0x0001c499
    a254:	0001c3b1 	.word	0x0001c3b1
    a258:	00000359 	.word	0x00000359
    a25c:	0002058c 	.word	0x0002058c
    a260:	20000554 	.word	0x20000554
    a264:	00000363 	.word	0x00000363
    a268:	000205c0 	.word	0x000205c0

0000a26c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    a26c:	b5b0      	push	{r4, r5, r7, lr}
    a26e:	b086      	sub	sp, #24
    a270:	af02      	add	r7, sp, #8
    a272:	6078      	str	r0, [r7, #4]
    a274:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    a276:	230f      	movs	r3, #15
    a278:	18fb      	adds	r3, r7, r3
    a27a:	220a      	movs	r2, #10
    a27c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    a27e:	230e      	movs	r3, #14
    a280:	18fb      	adds	r3, r7, r3
    a282:	2201      	movs	r2, #1
    a284:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    a286:	230d      	movs	r3, #13
    a288:	18fb      	adds	r3, r7, r3
    a28a:	22c9      	movs	r2, #201	; 0xc9
    a28c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    a28e:	230c      	movs	r3, #12
    a290:	18fb      	adds	r3, r7, r3
    a292:	2200      	movs	r2, #0
    a294:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	2b30      	cmp	r3, #48	; 0x30
    a29a:	d808      	bhi.n	a2ae <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    a29c:	230d      	movs	r3, #13
    a29e:	18fb      	adds	r3, r7, r3
    a2a0:	22c3      	movs	r2, #195	; 0xc3
    a2a2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    a2a4:	230c      	movs	r3, #12
    a2a6:	18fb      	adds	r3, r7, r3
    a2a8:	2201      	movs	r2, #1
    a2aa:	701a      	strb	r2, [r3, #0]
    a2ac:	e007      	b.n	a2be <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    a2ae:	230d      	movs	r3, #13
    a2b0:	18fb      	adds	r3, r7, r3
    a2b2:	22c9      	movs	r2, #201	; 0xc9
    a2b4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    a2b6:	230c      	movs	r3, #12
    a2b8:	18fb      	adds	r3, r7, r3
    a2ba:	2200      	movs	r2, #0
    a2bc:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    a2be:	230e      	movs	r3, #14
    a2c0:	18fc      	adds	r4, r7, r3
    a2c2:	683a      	ldr	r2, [r7, #0]
    a2c4:	6879      	ldr	r1, [r7, #4]
    a2c6:	230d      	movs	r3, #13
    a2c8:	18fb      	adds	r3, r7, r3
    a2ca:	7818      	ldrb	r0, [r3, #0]
    a2cc:	230c      	movs	r3, #12
    a2ce:	18fb      	adds	r3, r7, r3
    a2d0:	781b      	ldrb	r3, [r3, #0]
    a2d2:	9300      	str	r3, [sp, #0]
    a2d4:	2304      	movs	r3, #4
    a2d6:	4d3c      	ldr	r5, [pc, #240]	; (a3c8 <spi_write_reg+0x15c>)
    a2d8:	47a8      	blx	r5
    a2da:	0003      	movs	r3, r0
    a2dc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a2de:	230e      	movs	r3, #14
    a2e0:	18fb      	adds	r3, r7, r3
    a2e2:	781b      	ldrb	r3, [r3, #0]
    a2e4:	b25b      	sxtb	r3, r3
    a2e6:	2b01      	cmp	r3, #1
    a2e8:	d00f      	beq.n	a30a <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    a2ea:	4a38      	ldr	r2, [pc, #224]	; (a3cc <spi_write_reg+0x160>)
    a2ec:	4938      	ldr	r1, [pc, #224]	; (a3d0 <spi_write_reg+0x164>)
    a2ee:	4b39      	ldr	r3, [pc, #228]	; (a3d4 <spi_write_reg+0x168>)
    a2f0:	0018      	movs	r0, r3
    a2f2:	4b39      	ldr	r3, [pc, #228]	; (a3d8 <spi_write_reg+0x16c>)
    a2f4:	4798      	blx	r3
    a2f6:	687a      	ldr	r2, [r7, #4]
    a2f8:	4b38      	ldr	r3, [pc, #224]	; (a3dc <spi_write_reg+0x170>)
    a2fa:	0011      	movs	r1, r2
    a2fc:	0018      	movs	r0, r3
    a2fe:	4b36      	ldr	r3, [pc, #216]	; (a3d8 <spi_write_reg+0x16c>)
    a300:	4798      	blx	r3
    a302:	200d      	movs	r0, #13
    a304:	4b36      	ldr	r3, [pc, #216]	; (a3e0 <spi_write_reg+0x174>)
    a306:	4798      	blx	r3
		goto _FAIL_;
    a308:	e020      	b.n	a34c <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    a30a:	230e      	movs	r3, #14
    a30c:	18fc      	adds	r4, r7, r3
    a30e:	230d      	movs	r3, #13
    a310:	18fb      	adds	r3, r7, r3
    a312:	781b      	ldrb	r3, [r3, #0]
    a314:	0018      	movs	r0, r3
    a316:	4b33      	ldr	r3, [pc, #204]	; (a3e4 <spi_write_reg+0x178>)
    a318:	4798      	blx	r3
    a31a:	0003      	movs	r3, r0
    a31c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a31e:	230e      	movs	r3, #14
    a320:	18fb      	adds	r3, r7, r3
    a322:	781b      	ldrb	r3, [r3, #0]
    a324:	b25b      	sxtb	r3, r3
    a326:	2b01      	cmp	r3, #1
    a328:	d010      	beq.n	a34c <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    a32a:	23e7      	movs	r3, #231	; 0xe7
    a32c:	009a      	lsls	r2, r3, #2
    a32e:	4928      	ldr	r1, [pc, #160]	; (a3d0 <spi_write_reg+0x164>)
    a330:	4b28      	ldr	r3, [pc, #160]	; (a3d4 <spi_write_reg+0x168>)
    a332:	0018      	movs	r0, r3
    a334:	4b28      	ldr	r3, [pc, #160]	; (a3d8 <spi_write_reg+0x16c>)
    a336:	4798      	blx	r3
    a338:	687a      	ldr	r2, [r7, #4]
    a33a:	4b2b      	ldr	r3, [pc, #172]	; (a3e8 <spi_write_reg+0x17c>)
    a33c:	0011      	movs	r1, r2
    a33e:	0018      	movs	r0, r3
    a340:	4b25      	ldr	r3, [pc, #148]	; (a3d8 <spi_write_reg+0x16c>)
    a342:	4798      	blx	r3
    a344:	200d      	movs	r0, #13
    a346:	4b26      	ldr	r3, [pc, #152]	; (a3e0 <spi_write_reg+0x174>)
    a348:	4798      	blx	r3
		goto _FAIL_;
    a34a:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    a34c:	230e      	movs	r3, #14
    a34e:	18fb      	adds	r3, r7, r3
    a350:	781b      	ldrb	r3, [r3, #0]
    a352:	b25b      	sxtb	r3, r3
    a354:	2b01      	cmp	r3, #1
    a356:	d02e      	beq.n	a3b6 <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    a358:	2001      	movs	r0, #1
    a35a:	4b24      	ldr	r3, [pc, #144]	; (a3ec <spi_write_reg+0x180>)
    a35c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a35e:	2300      	movs	r3, #0
    a360:	9300      	str	r3, [sp, #0]
    a362:	2300      	movs	r3, #0
    a364:	2200      	movs	r2, #0
    a366:	2100      	movs	r1, #0
    a368:	20cf      	movs	r0, #207	; 0xcf
    a36a:	4c17      	ldr	r4, [pc, #92]	; (a3c8 <spi_write_reg+0x15c>)
    a36c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a36e:	20cf      	movs	r0, #207	; 0xcf
    a370:	4b1c      	ldr	r3, [pc, #112]	; (a3e4 <spi_write_reg+0x178>)
    a372:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    a374:	4a1e      	ldr	r2, [pc, #120]	; (a3f0 <spi_write_reg+0x184>)
    a376:	4916      	ldr	r1, [pc, #88]	; (a3d0 <spi_write_reg+0x164>)
    a378:	4b16      	ldr	r3, [pc, #88]	; (a3d4 <spi_write_reg+0x168>)
    a37a:	0018      	movs	r0, r3
    a37c:	4b16      	ldr	r3, [pc, #88]	; (a3d8 <spi_write_reg+0x16c>)
    a37e:	4798      	blx	r3
    a380:	230f      	movs	r3, #15
    a382:	18fb      	adds	r3, r7, r3
    a384:	7819      	ldrb	r1, [r3, #0]
    a386:	683b      	ldr	r3, [r7, #0]
    a388:	687a      	ldr	r2, [r7, #4]
    a38a:	481a      	ldr	r0, [pc, #104]	; (a3f4 <spi_write_reg+0x188>)
    a38c:	4c12      	ldr	r4, [pc, #72]	; (a3d8 <spi_write_reg+0x16c>)
    a38e:	47a0      	blx	r4
    a390:	200d      	movs	r0, #13
    a392:	4b13      	ldr	r3, [pc, #76]	; (a3e0 <spi_write_reg+0x174>)
    a394:	4798      	blx	r3
		nm_bsp_sleep(1);
    a396:	2001      	movs	r0, #1
    a398:	4b14      	ldr	r3, [pc, #80]	; (a3ec <spi_write_reg+0x180>)
    a39a:	4798      	blx	r3
		retry--;
    a39c:	230f      	movs	r3, #15
    a39e:	18fb      	adds	r3, r7, r3
    a3a0:	781a      	ldrb	r2, [r3, #0]
    a3a2:	230f      	movs	r3, #15
    a3a4:	18fb      	adds	r3, r7, r3
    a3a6:	3a01      	subs	r2, #1
    a3a8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a3aa:	230f      	movs	r3, #15
    a3ac:	18fb      	adds	r3, r7, r3
    a3ae:	781b      	ldrb	r3, [r3, #0]
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d000      	beq.n	a3b6 <spi_write_reg+0x14a>
    a3b4:	e76f      	b.n	a296 <spi_write_reg+0x2a>
	}

	return result;
    a3b6:	230e      	movs	r3, #14
    a3b8:	18fb      	adds	r3, r7, r3
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	b25b      	sxtb	r3, r3
}
    a3be:	0018      	movs	r0, r3
    a3c0:	46bd      	mov	sp, r7
    a3c2:	b004      	add	sp, #16
    a3c4:	bdb0      	pop	{r4, r5, r7, pc}
    a3c6:	46c0      	nop			; (mov r8, r8)
    a3c8:	00009919 	.word	0x00009919
    a3cc:	00000396 	.word	0x00000396
    a3d0:	000209a0 	.word	0x000209a0
    a3d4:	000203c8 	.word	0x000203c8
    a3d8:	0001c37d 	.word	0x0001c37d
    a3dc:	000205f8 	.word	0x000205f8
    a3e0:	0001c3b1 	.word	0x0001c3b1
    a3e4:	00009d5d 	.word	0x00009d5d
    a3e8:	00020624 	.word	0x00020624
    a3ec:	000064a1 	.word	0x000064a1
    a3f0:	000003af 	.word	0x000003af
    a3f4:	0002065c 	.word	0x0002065c

0000a3f8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    a3f8:	b5b0      	push	{r4, r5, r7, lr}
    a3fa:	b088      	sub	sp, #32
    a3fc:	af02      	add	r7, sp, #8
    a3fe:	60f8      	str	r0, [r7, #12]
    a400:	60b9      	str	r1, [r7, #8]
    a402:	1dbb      	adds	r3, r7, #6
    a404:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    a406:	2316      	movs	r3, #22
    a408:	18fb      	adds	r3, r7, r3
    a40a:	220a      	movs	r2, #10
    a40c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    a40e:	2315      	movs	r3, #21
    a410:	18fb      	adds	r3, r7, r3
    a412:	22c7      	movs	r2, #199	; 0xc7
    a414:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    a416:	1dbb      	adds	r3, r7, #6
    a418:	881b      	ldrh	r3, [r3, #0]
    a41a:	2b01      	cmp	r3, #1
    a41c:	d102      	bne.n	a424 <nm_spi_write+0x2c>
		size = 2;
    a41e:	1dbb      	adds	r3, r7, #6
    a420:	2202      	movs	r2, #2
    a422:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    a424:	1dbb      	adds	r3, r7, #6
    a426:	881a      	ldrh	r2, [r3, #0]
    a428:	2317      	movs	r3, #23
    a42a:	18fc      	adds	r4, r7, r3
    a42c:	68f9      	ldr	r1, [r7, #12]
    a42e:	2315      	movs	r3, #21
    a430:	18fb      	adds	r3, r7, r3
    a432:	7818      	ldrb	r0, [r3, #0]
    a434:	2300      	movs	r3, #0
    a436:	9300      	str	r3, [sp, #0]
    a438:	0013      	movs	r3, r2
    a43a:	2200      	movs	r2, #0
    a43c:	4d5b      	ldr	r5, [pc, #364]	; (a5ac <nm_spi_write+0x1b4>)
    a43e:	47a8      	blx	r5
    a440:	0003      	movs	r3, r0
    a442:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a444:	2317      	movs	r3, #23
    a446:	18fb      	adds	r3, r7, r3
    a448:	781b      	ldrb	r3, [r3, #0]
    a44a:	b25b      	sxtb	r3, r3
    a44c:	2b01      	cmp	r3, #1
    a44e:	d00f      	beq.n	a470 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    a450:	4a57      	ldr	r2, [pc, #348]	; (a5b0 <nm_spi_write+0x1b8>)
    a452:	4958      	ldr	r1, [pc, #352]	; (a5b4 <nm_spi_write+0x1bc>)
    a454:	4b58      	ldr	r3, [pc, #352]	; (a5b8 <nm_spi_write+0x1c0>)
    a456:	0018      	movs	r0, r3
    a458:	4b58      	ldr	r3, [pc, #352]	; (a5bc <nm_spi_write+0x1c4>)
    a45a:	4798      	blx	r3
    a45c:	68fa      	ldr	r2, [r7, #12]
    a45e:	4b58      	ldr	r3, [pc, #352]	; (a5c0 <nm_spi_write+0x1c8>)
    a460:	0011      	movs	r1, r2
    a462:	0018      	movs	r0, r3
    a464:	4b55      	ldr	r3, [pc, #340]	; (a5bc <nm_spi_write+0x1c4>)
    a466:	4798      	blx	r3
    a468:	200d      	movs	r0, #13
    a46a:	4b56      	ldr	r3, [pc, #344]	; (a5c4 <nm_spi_write+0x1cc>)
    a46c:	4798      	blx	r3
		goto _FAIL_;
    a46e:	e05f      	b.n	a530 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    a470:	2317      	movs	r3, #23
    a472:	18fc      	adds	r4, r7, r3
    a474:	2315      	movs	r3, #21
    a476:	18fb      	adds	r3, r7, r3
    a478:	781b      	ldrb	r3, [r3, #0]
    a47a:	0018      	movs	r0, r3
    a47c:	4b52      	ldr	r3, [pc, #328]	; (a5c8 <nm_spi_write+0x1d0>)
    a47e:	4798      	blx	r3
    a480:	0003      	movs	r3, r0
    a482:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a484:	2317      	movs	r3, #23
    a486:	18fb      	adds	r3, r7, r3
    a488:	781b      	ldrb	r3, [r3, #0]
    a48a:	b25b      	sxtb	r3, r3
    a48c:	2b01      	cmp	r3, #1
    a48e:	d010      	beq.n	a4b2 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    a490:	23f4      	movs	r3, #244	; 0xf4
    a492:	009a      	lsls	r2, r3, #2
    a494:	4947      	ldr	r1, [pc, #284]	; (a5b4 <nm_spi_write+0x1bc>)
    a496:	4b48      	ldr	r3, [pc, #288]	; (a5b8 <nm_spi_write+0x1c0>)
    a498:	0018      	movs	r0, r3
    a49a:	4b48      	ldr	r3, [pc, #288]	; (a5bc <nm_spi_write+0x1c4>)
    a49c:	4798      	blx	r3
    a49e:	68fa      	ldr	r2, [r7, #12]
    a4a0:	4b4a      	ldr	r3, [pc, #296]	; (a5cc <nm_spi_write+0x1d4>)
    a4a2:	0011      	movs	r1, r2
    a4a4:	0018      	movs	r0, r3
    a4a6:	4b45      	ldr	r3, [pc, #276]	; (a5bc <nm_spi_write+0x1c4>)
    a4a8:	4798      	blx	r3
    a4aa:	200d      	movs	r0, #13
    a4ac:	4b45      	ldr	r3, [pc, #276]	; (a5c4 <nm_spi_write+0x1cc>)
    a4ae:	4798      	blx	r3
		goto _FAIL_;
    a4b0:	e03e      	b.n	a530 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    a4b2:	2317      	movs	r3, #23
    a4b4:	18fc      	adds	r4, r7, r3
    a4b6:	1dbb      	adds	r3, r7, #6
    a4b8:	881a      	ldrh	r2, [r3, #0]
    a4ba:	68bb      	ldr	r3, [r7, #8]
    a4bc:	0011      	movs	r1, r2
    a4be:	0018      	movs	r0, r3
    a4c0:	4b43      	ldr	r3, [pc, #268]	; (a5d0 <nm_spi_write+0x1d8>)
    a4c2:	4798      	blx	r3
    a4c4:	0003      	movs	r3, r0
    a4c6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a4c8:	2317      	movs	r3, #23
    a4ca:	18fb      	adds	r3, r7, r3
    a4cc:	781b      	ldrb	r3, [r3, #0]
    a4ce:	b25b      	sxtb	r3, r3
    a4d0:	2b01      	cmp	r3, #1
    a4d2:	d00e      	beq.n	a4f2 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a4d4:	23f8      	movs	r3, #248	; 0xf8
    a4d6:	009a      	lsls	r2, r3, #2
    a4d8:	4936      	ldr	r1, [pc, #216]	; (a5b4 <nm_spi_write+0x1bc>)
    a4da:	4b37      	ldr	r3, [pc, #220]	; (a5b8 <nm_spi_write+0x1c0>)
    a4dc:	0018      	movs	r0, r3
    a4de:	4b37      	ldr	r3, [pc, #220]	; (a5bc <nm_spi_write+0x1c4>)
    a4e0:	4798      	blx	r3
    a4e2:	4b3c      	ldr	r3, [pc, #240]	; (a5d4 <nm_spi_write+0x1dc>)
    a4e4:	0018      	movs	r0, r3
    a4e6:	4b3c      	ldr	r3, [pc, #240]	; (a5d8 <nm_spi_write+0x1e0>)
    a4e8:	4798      	blx	r3
    a4ea:	200d      	movs	r0, #13
    a4ec:	4b35      	ldr	r3, [pc, #212]	; (a5c4 <nm_spi_write+0x1cc>)
    a4ee:	4798      	blx	r3
		goto _FAIL_;
    a4f0:	e01e      	b.n	a530 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    a4f2:	2317      	movs	r3, #23
    a4f4:	18fc      	adds	r4, r7, r3
    a4f6:	2315      	movs	r3, #21
    a4f8:	18fb      	adds	r3, r7, r3
    a4fa:	781b      	ldrb	r3, [r3, #0]
    a4fc:	0018      	movs	r0, r3
    a4fe:	4b37      	ldr	r3, [pc, #220]	; (a5dc <nm_spi_write+0x1e4>)
    a500:	4798      	blx	r3
    a502:	0003      	movs	r3, r0
    a504:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a506:	2317      	movs	r3, #23
    a508:	18fb      	adds	r3, r7, r3
    a50a:	781b      	ldrb	r3, [r3, #0]
    a50c:	b25b      	sxtb	r3, r3
    a50e:	2b01      	cmp	r3, #1
    a510:	d00e      	beq.n	a530 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a512:	23fa      	movs	r3, #250	; 0xfa
    a514:	009a      	lsls	r2, r3, #2
    a516:	4927      	ldr	r1, [pc, #156]	; (a5b4 <nm_spi_write+0x1bc>)
    a518:	4b27      	ldr	r3, [pc, #156]	; (a5b8 <nm_spi_write+0x1c0>)
    a51a:	0018      	movs	r0, r3
    a51c:	4b27      	ldr	r3, [pc, #156]	; (a5bc <nm_spi_write+0x1c4>)
    a51e:	4798      	blx	r3
    a520:	4b2c      	ldr	r3, [pc, #176]	; (a5d4 <nm_spi_write+0x1dc>)
    a522:	0018      	movs	r0, r3
    a524:	4b2c      	ldr	r3, [pc, #176]	; (a5d8 <nm_spi_write+0x1e0>)
    a526:	4798      	blx	r3
    a528:	200d      	movs	r0, #13
    a52a:	4b26      	ldr	r3, [pc, #152]	; (a5c4 <nm_spi_write+0x1cc>)
    a52c:	4798      	blx	r3
		goto _FAIL_;
    a52e:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    a530:	2317      	movs	r3, #23
    a532:	18fb      	adds	r3, r7, r3
    a534:	781b      	ldrb	r3, [r3, #0]
    a536:	b25b      	sxtb	r3, r3
    a538:	2b01      	cmp	r3, #1
    a53a:	d02f      	beq.n	a59c <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    a53c:	2001      	movs	r0, #1
    a53e:	4b28      	ldr	r3, [pc, #160]	; (a5e0 <nm_spi_write+0x1e8>)
    a540:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a542:	2300      	movs	r3, #0
    a544:	9300      	str	r3, [sp, #0]
    a546:	2300      	movs	r3, #0
    a548:	2200      	movs	r2, #0
    a54a:	2100      	movs	r1, #0
    a54c:	20cf      	movs	r0, #207	; 0xcf
    a54e:	4c17      	ldr	r4, [pc, #92]	; (a5ac <nm_spi_write+0x1b4>)
    a550:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a552:	20cf      	movs	r0, #207	; 0xcf
    a554:	4b1c      	ldr	r3, [pc, #112]	; (a5c8 <nm_spi_write+0x1d0>)
    a556:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a558:	4a22      	ldr	r2, [pc, #136]	; (a5e4 <nm_spi_write+0x1ec>)
    a55a:	4916      	ldr	r1, [pc, #88]	; (a5b4 <nm_spi_write+0x1bc>)
    a55c:	4b16      	ldr	r3, [pc, #88]	; (a5b8 <nm_spi_write+0x1c0>)
    a55e:	0018      	movs	r0, r3
    a560:	4b16      	ldr	r3, [pc, #88]	; (a5bc <nm_spi_write+0x1c4>)
    a562:	4798      	blx	r3
    a564:	2316      	movs	r3, #22
    a566:	18fb      	adds	r3, r7, r3
    a568:	7819      	ldrb	r1, [r3, #0]
    a56a:	1dbb      	adds	r3, r7, #6
    a56c:	881b      	ldrh	r3, [r3, #0]
    a56e:	68fa      	ldr	r2, [r7, #12]
    a570:	481d      	ldr	r0, [pc, #116]	; (a5e8 <nm_spi_write+0x1f0>)
    a572:	4c12      	ldr	r4, [pc, #72]	; (a5bc <nm_spi_write+0x1c4>)
    a574:	47a0      	blx	r4
    a576:	200d      	movs	r0, #13
    a578:	4b12      	ldr	r3, [pc, #72]	; (a5c4 <nm_spi_write+0x1cc>)
    a57a:	4798      	blx	r3
		nm_bsp_sleep(1);
    a57c:	2001      	movs	r0, #1
    a57e:	4b18      	ldr	r3, [pc, #96]	; (a5e0 <nm_spi_write+0x1e8>)
    a580:	4798      	blx	r3
		retry--;
    a582:	2316      	movs	r3, #22
    a584:	18fb      	adds	r3, r7, r3
    a586:	781a      	ldrb	r2, [r3, #0]
    a588:	2316      	movs	r3, #22
    a58a:	18fb      	adds	r3, r7, r3
    a58c:	3a01      	subs	r2, #1
    a58e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a590:	2316      	movs	r3, #22
    a592:	18fb      	adds	r3, r7, r3
    a594:	781b      	ldrb	r3, [r3, #0]
    a596:	2b00      	cmp	r3, #0
    a598:	d000      	beq.n	a59c <nm_spi_write+0x1a4>
    a59a:	e73c      	b.n	a416 <nm_spi_write+0x1e>
	}


	return result;
    a59c:	2317      	movs	r3, #23
    a59e:	18fb      	adds	r3, r7, r3
    a5a0:	781b      	ldrb	r3, [r3, #0]
    a5a2:	b25b      	sxtb	r3, r3
}
    a5a4:	0018      	movs	r0, r3
    a5a6:	46bd      	mov	sp, r7
    a5a8:	b006      	add	sp, #24
    a5aa:	bdb0      	pop	{r4, r5, r7, pc}
    a5ac:	00009919 	.word	0x00009919
    a5b0:	000003ca 	.word	0x000003ca
    a5b4:	000209b0 	.word	0x000209b0
    a5b8:	000203c8 	.word	0x000203c8
    a5bc:	0001c37d 	.word	0x0001c37d
    a5c0:	00020678 	.word	0x00020678
    a5c4:	0001c3b1 	.word	0x0001c3b1
    a5c8:	00009d5d 	.word	0x00009d5d
    a5cc:	000206a8 	.word	0x000206a8
    a5d0:	0000a099 	.word	0x0000a099
    a5d4:	000206e0 	.word	0x000206e0
    a5d8:	0001c499 	.word	0x0001c499
    a5dc:	00009c5d 	.word	0x00009c5d
    a5e0:	000064a1 	.word	0x000064a1
    a5e4:	000003f2 	.word	0x000003f2
    a5e8:	00020708 	.word	0x00020708

0000a5ec <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    a5ec:	b5b0      	push	{r4, r5, r7, lr}
    a5ee:	b086      	sub	sp, #24
    a5f0:	af02      	add	r7, sp, #8
    a5f2:	6078      	str	r0, [r7, #4]
    a5f4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    a5f6:	230f      	movs	r3, #15
    a5f8:	18fb      	adds	r3, r7, r3
    a5fa:	220a      	movs	r2, #10
    a5fc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    a5fe:	230e      	movs	r3, #14
    a600:	18fb      	adds	r3, r7, r3
    a602:	2201      	movs	r2, #1
    a604:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    a606:	230d      	movs	r3, #13
    a608:	18fb      	adds	r3, r7, r3
    a60a:	22ca      	movs	r2, #202	; 0xca
    a60c:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    a60e:	230c      	movs	r3, #12
    a610:	18fb      	adds	r3, r7, r3
    a612:	2200      	movs	r2, #0
    a614:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    a616:	687b      	ldr	r3, [r7, #4]
    a618:	2bff      	cmp	r3, #255	; 0xff
    a61a:	d808      	bhi.n	a62e <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    a61c:	230d      	movs	r3, #13
    a61e:	18fb      	adds	r3, r7, r3
    a620:	22c4      	movs	r2, #196	; 0xc4
    a622:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    a624:	230c      	movs	r3, #12
    a626:	18fb      	adds	r3, r7, r3
    a628:	2201      	movs	r2, #1
    a62a:	701a      	strb	r2, [r3, #0]
    a62c:	e007      	b.n	a63e <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    a62e:	230d      	movs	r3, #13
    a630:	18fb      	adds	r3, r7, r3
    a632:	22ca      	movs	r2, #202	; 0xca
    a634:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    a636:	230c      	movs	r3, #12
    a638:	18fb      	adds	r3, r7, r3
    a63a:	2200      	movs	r2, #0
    a63c:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    a63e:	230e      	movs	r3, #14
    a640:	18fc      	adds	r4, r7, r3
    a642:	6879      	ldr	r1, [r7, #4]
    a644:	230d      	movs	r3, #13
    a646:	18fb      	adds	r3, r7, r3
    a648:	7818      	ldrb	r0, [r3, #0]
    a64a:	230c      	movs	r3, #12
    a64c:	18fb      	adds	r3, r7, r3
    a64e:	781b      	ldrb	r3, [r3, #0]
    a650:	9300      	str	r3, [sp, #0]
    a652:	2304      	movs	r3, #4
    a654:	2200      	movs	r2, #0
    a656:	4d56      	ldr	r5, [pc, #344]	; (a7b0 <spi_read_reg+0x1c4>)
    a658:	47a8      	blx	r5
    a65a:	0003      	movs	r3, r0
    a65c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a65e:	230e      	movs	r3, #14
    a660:	18fb      	adds	r3, r7, r3
    a662:	781b      	ldrb	r3, [r3, #0]
    a664:	b25b      	sxtb	r3, r3
    a666:	2b01      	cmp	r3, #1
    a668:	d00f      	beq.n	a68a <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    a66a:	4a52      	ldr	r2, [pc, #328]	; (a7b4 <spi_read_reg+0x1c8>)
    a66c:	4952      	ldr	r1, [pc, #328]	; (a7b8 <spi_read_reg+0x1cc>)
    a66e:	4b53      	ldr	r3, [pc, #332]	; (a7bc <spi_read_reg+0x1d0>)
    a670:	0018      	movs	r0, r3
    a672:	4b53      	ldr	r3, [pc, #332]	; (a7c0 <spi_read_reg+0x1d4>)
    a674:	4798      	blx	r3
    a676:	687a      	ldr	r2, [r7, #4]
    a678:	4b52      	ldr	r3, [pc, #328]	; (a7c4 <spi_read_reg+0x1d8>)
    a67a:	0011      	movs	r1, r2
    a67c:	0018      	movs	r0, r3
    a67e:	4b50      	ldr	r3, [pc, #320]	; (a7c0 <spi_read_reg+0x1d4>)
    a680:	4798      	blx	r3
    a682:	200d      	movs	r0, #13
    a684:	4b50      	ldr	r3, [pc, #320]	; (a7c8 <spi_read_reg+0x1dc>)
    a686:	4798      	blx	r3
		goto _FAIL_;
    a688:	e055      	b.n	a736 <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    a68a:	230e      	movs	r3, #14
    a68c:	18fc      	adds	r4, r7, r3
    a68e:	230d      	movs	r3, #13
    a690:	18fb      	adds	r3, r7, r3
    a692:	781b      	ldrb	r3, [r3, #0]
    a694:	0018      	movs	r0, r3
    a696:	4b4d      	ldr	r3, [pc, #308]	; (a7cc <spi_read_reg+0x1e0>)
    a698:	4798      	blx	r3
    a69a:	0003      	movs	r3, r0
    a69c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a69e:	230e      	movs	r3, #14
    a6a0:	18fb      	adds	r3, r7, r3
    a6a2:	781b      	ldrb	r3, [r3, #0]
    a6a4:	b25b      	sxtb	r3, r3
    a6a6:	2b01      	cmp	r3, #1
    a6a8:	d00f      	beq.n	a6ca <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    a6aa:	4a49      	ldr	r2, [pc, #292]	; (a7d0 <spi_read_reg+0x1e4>)
    a6ac:	4942      	ldr	r1, [pc, #264]	; (a7b8 <spi_read_reg+0x1cc>)
    a6ae:	4b43      	ldr	r3, [pc, #268]	; (a7bc <spi_read_reg+0x1d0>)
    a6b0:	0018      	movs	r0, r3
    a6b2:	4b43      	ldr	r3, [pc, #268]	; (a7c0 <spi_read_reg+0x1d4>)
    a6b4:	4798      	blx	r3
    a6b6:	687a      	ldr	r2, [r7, #4]
    a6b8:	4b46      	ldr	r3, [pc, #280]	; (a7d4 <spi_read_reg+0x1e8>)
    a6ba:	0011      	movs	r1, r2
    a6bc:	0018      	movs	r0, r3
    a6be:	4b40      	ldr	r3, [pc, #256]	; (a7c0 <spi_read_reg+0x1d4>)
    a6c0:	4798      	blx	r3
    a6c2:	200d      	movs	r0, #13
    a6c4:	4b40      	ldr	r3, [pc, #256]	; (a7c8 <spi_read_reg+0x1dc>)
    a6c6:	4798      	blx	r3
		goto _FAIL_;
    a6c8:	e035      	b.n	a736 <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    a6ca:	230e      	movs	r3, #14
    a6cc:	18fc      	adds	r4, r7, r3
    a6ce:	230c      	movs	r3, #12
    a6d0:	18fb      	adds	r3, r7, r3
    a6d2:	781a      	ldrb	r2, [r3, #0]
    a6d4:	2308      	movs	r3, #8
    a6d6:	18fb      	adds	r3, r7, r3
    a6d8:	2104      	movs	r1, #4
    a6da:	0018      	movs	r0, r3
    a6dc:	4b3e      	ldr	r3, [pc, #248]	; (a7d8 <spi_read_reg+0x1ec>)
    a6de:	4798      	blx	r3
    a6e0:	0003      	movs	r3, r0
    a6e2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a6e4:	230e      	movs	r3, #14
    a6e6:	18fb      	adds	r3, r7, r3
    a6e8:	781b      	ldrb	r3, [r3, #0]
    a6ea:	b25b      	sxtb	r3, r3
    a6ec:	2b01      	cmp	r3, #1
    a6ee:	d00d      	beq.n	a70c <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    a6f0:	4a3a      	ldr	r2, [pc, #232]	; (a7dc <spi_read_reg+0x1f0>)
    a6f2:	4931      	ldr	r1, [pc, #196]	; (a7b8 <spi_read_reg+0x1cc>)
    a6f4:	4b31      	ldr	r3, [pc, #196]	; (a7bc <spi_read_reg+0x1d0>)
    a6f6:	0018      	movs	r0, r3
    a6f8:	4b31      	ldr	r3, [pc, #196]	; (a7c0 <spi_read_reg+0x1d4>)
    a6fa:	4798      	blx	r3
    a6fc:	4b38      	ldr	r3, [pc, #224]	; (a7e0 <spi_read_reg+0x1f4>)
    a6fe:	0018      	movs	r0, r3
    a700:	4b38      	ldr	r3, [pc, #224]	; (a7e4 <spi_read_reg+0x1f8>)
    a702:	4798      	blx	r3
    a704:	200d      	movs	r0, #13
    a706:	4b30      	ldr	r3, [pc, #192]	; (a7c8 <spi_read_reg+0x1dc>)
    a708:	4798      	blx	r3
		goto _FAIL_;
    a70a:	e014      	b.n	a736 <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    a70c:	2308      	movs	r3, #8
    a70e:	18fb      	adds	r3, r7, r3
    a710:	781b      	ldrb	r3, [r3, #0]
    a712:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    a714:	2308      	movs	r3, #8
    a716:	18fb      	adds	r3, r7, r3
    a718:	785b      	ldrb	r3, [r3, #1]
    a71a:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    a71c:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    a71e:	2308      	movs	r3, #8
    a720:	18fb      	adds	r3, r7, r3
    a722:	789b      	ldrb	r3, [r3, #2]
    a724:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    a726:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    a728:	2308      	movs	r3, #8
    a72a:	18fb      	adds	r3, r7, r3
    a72c:	78db      	ldrb	r3, [r3, #3]
    a72e:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    a730:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    a732:	683b      	ldr	r3, [r7, #0]
    a734:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    a736:	230e      	movs	r3, #14
    a738:	18fb      	adds	r3, r7, r3
    a73a:	781b      	ldrb	r3, [r3, #0]
    a73c:	b25b      	sxtb	r3, r3
    a73e:	2b01      	cmp	r3, #1
    a740:	d02e      	beq.n	a7a0 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    a742:	2001      	movs	r0, #1
    a744:	4b28      	ldr	r3, [pc, #160]	; (a7e8 <spi_read_reg+0x1fc>)
    a746:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a748:	2300      	movs	r3, #0
    a74a:	9300      	str	r3, [sp, #0]
    a74c:	2300      	movs	r3, #0
    a74e:	2200      	movs	r2, #0
    a750:	2100      	movs	r1, #0
    a752:	20cf      	movs	r0, #207	; 0xcf
    a754:	4c16      	ldr	r4, [pc, #88]	; (a7b0 <spi_read_reg+0x1c4>)
    a756:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a758:	20cf      	movs	r0, #207	; 0xcf
    a75a:	4b1c      	ldr	r3, [pc, #112]	; (a7cc <spi_read_reg+0x1e0>)
    a75c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    a75e:	4a23      	ldr	r2, [pc, #140]	; (a7ec <spi_read_reg+0x200>)
    a760:	4915      	ldr	r1, [pc, #84]	; (a7b8 <spi_read_reg+0x1cc>)
    a762:	4b16      	ldr	r3, [pc, #88]	; (a7bc <spi_read_reg+0x1d0>)
    a764:	0018      	movs	r0, r3
    a766:	4b16      	ldr	r3, [pc, #88]	; (a7c0 <spi_read_reg+0x1d4>)
    a768:	4798      	blx	r3
    a76a:	230f      	movs	r3, #15
    a76c:	18fb      	adds	r3, r7, r3
    a76e:	7819      	ldrb	r1, [r3, #0]
    a770:	687a      	ldr	r2, [r7, #4]
    a772:	4b1f      	ldr	r3, [pc, #124]	; (a7f0 <spi_read_reg+0x204>)
    a774:	0018      	movs	r0, r3
    a776:	4b12      	ldr	r3, [pc, #72]	; (a7c0 <spi_read_reg+0x1d4>)
    a778:	4798      	blx	r3
    a77a:	200d      	movs	r0, #13
    a77c:	4b12      	ldr	r3, [pc, #72]	; (a7c8 <spi_read_reg+0x1dc>)
    a77e:	4798      	blx	r3
		nm_bsp_sleep(1);
    a780:	2001      	movs	r0, #1
    a782:	4b19      	ldr	r3, [pc, #100]	; (a7e8 <spi_read_reg+0x1fc>)
    a784:	4798      	blx	r3
		retry--;
    a786:	230f      	movs	r3, #15
    a788:	18fb      	adds	r3, r7, r3
    a78a:	781a      	ldrb	r2, [r3, #0]
    a78c:	230f      	movs	r3, #15
    a78e:	18fb      	adds	r3, r7, r3
    a790:	3a01      	subs	r2, #1
    a792:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a794:	230f      	movs	r3, #15
    a796:	18fb      	adds	r3, r7, r3
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	2b00      	cmp	r3, #0
    a79c:	d000      	beq.n	a7a0 <spi_read_reg+0x1b4>
    a79e:	e73a      	b.n	a616 <spi_read_reg+0x2a>
	}
		
	return result;
    a7a0:	230e      	movs	r3, #14
    a7a2:	18fb      	adds	r3, r7, r3
    a7a4:	781b      	ldrb	r3, [r3, #0]
    a7a6:	b25b      	sxtb	r3, r3
}
    a7a8:	0018      	movs	r0, r3
    a7aa:	46bd      	mov	sp, r7
    a7ac:	b004      	add	sp, #16
    a7ae:	bdb0      	pop	{r4, r5, r7, pc}
    a7b0:	00009919 	.word	0x00009919
    a7b4:	00000417 	.word	0x00000417
    a7b8:	000209c0 	.word	0x000209c0
    a7bc:	000203c8 	.word	0x000203c8
    a7c0:	0001c37d 	.word	0x0001c37d
    a7c4:	00020724 	.word	0x00020724
    a7c8:	0001c3b1 	.word	0x0001c3b1
    a7cc:	00009d5d 	.word	0x00009d5d
    a7d0:	0000041d 	.word	0x0000041d
    a7d4:	00020750 	.word	0x00020750
    a7d8:	00009e95 	.word	0x00009e95
    a7dc:	00000424 	.word	0x00000424
    a7e0:	00020784 	.word	0x00020784
    a7e4:	0001c499 	.word	0x0001c499
    a7e8:	000064a1 	.word	0x000064a1
    a7ec:	0000043c 	.word	0x0000043c
    a7f0:	000207a4 	.word	0x000207a4

0000a7f4 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    a7f4:	b5b0      	push	{r4, r5, r7, lr}
    a7f6:	b088      	sub	sp, #32
    a7f8:	af02      	add	r7, sp, #8
    a7fa:	60f8      	str	r0, [r7, #12]
    a7fc:	60b9      	str	r1, [r7, #8]
    a7fe:	1dbb      	adds	r3, r7, #6
    a800:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    a802:	2314      	movs	r3, #20
    a804:	18fb      	adds	r3, r7, r3
    a806:	22c8      	movs	r2, #200	; 0xc8
    a808:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    a80a:	2316      	movs	r3, #22
    a80c:	18fb      	adds	r3, r7, r3
    a80e:	220a      	movs	r2, #10
    a810:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    a812:	2315      	movs	r3, #21
    a814:	18fb      	adds	r3, r7, r3
    a816:	2200      	movs	r2, #0
    a818:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    a81a:	1dbb      	adds	r3, r7, #6
    a81c:	881b      	ldrh	r3, [r3, #0]
    a81e:	2b01      	cmp	r3, #1
    a820:	d106      	bne.n	a830 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    a822:	1dbb      	adds	r3, r7, #6
    a824:	2202      	movs	r2, #2
    a826:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    a828:	2315      	movs	r3, #21
    a82a:	18fb      	adds	r3, r7, r3
    a82c:	2201      	movs	r2, #1
    a82e:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    a830:	1dbb      	adds	r3, r7, #6
    a832:	881a      	ldrh	r2, [r3, #0]
    a834:	2317      	movs	r3, #23
    a836:	18fc      	adds	r4, r7, r3
    a838:	68f9      	ldr	r1, [r7, #12]
    a83a:	2314      	movs	r3, #20
    a83c:	18fb      	adds	r3, r7, r3
    a83e:	7818      	ldrb	r0, [r3, #0]
    a840:	2300      	movs	r3, #0
    a842:	9300      	str	r3, [sp, #0]
    a844:	0013      	movs	r3, r2
    a846:	2200      	movs	r2, #0
    a848:	4d56      	ldr	r5, [pc, #344]	; (a9a4 <nm_spi_read+0x1b0>)
    a84a:	47a8      	blx	r5
    a84c:	0003      	movs	r3, r0
    a84e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a850:	2317      	movs	r3, #23
    a852:	18fb      	adds	r3, r7, r3
    a854:	781b      	ldrb	r3, [r3, #0]
    a856:	b25b      	sxtb	r3, r3
    a858:	2b01      	cmp	r3, #1
    a85a:	d00f      	beq.n	a87c <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    a85c:	4a52      	ldr	r2, [pc, #328]	; (a9a8 <nm_spi_read+0x1b4>)
    a85e:	4953      	ldr	r1, [pc, #332]	; (a9ac <nm_spi_read+0x1b8>)
    a860:	4b53      	ldr	r3, [pc, #332]	; (a9b0 <nm_spi_read+0x1bc>)
    a862:	0018      	movs	r0, r3
    a864:	4b53      	ldr	r3, [pc, #332]	; (a9b4 <nm_spi_read+0x1c0>)
    a866:	4798      	blx	r3
    a868:	68fa      	ldr	r2, [r7, #12]
    a86a:	4b53      	ldr	r3, [pc, #332]	; (a9b8 <nm_spi_read+0x1c4>)
    a86c:	0011      	movs	r1, r2
    a86e:	0018      	movs	r0, r3
    a870:	4b50      	ldr	r3, [pc, #320]	; (a9b4 <nm_spi_read+0x1c0>)
    a872:	4798      	blx	r3
    a874:	200d      	movs	r0, #13
    a876:	4b51      	ldr	r3, [pc, #324]	; (a9bc <nm_spi_read+0x1c8>)
    a878:	4798      	blx	r3
		goto _FAIL_;
    a87a:	e055      	b.n	a928 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    a87c:	2317      	movs	r3, #23
    a87e:	18fc      	adds	r4, r7, r3
    a880:	2314      	movs	r3, #20
    a882:	18fb      	adds	r3, r7, r3
    a884:	781b      	ldrb	r3, [r3, #0]
    a886:	0018      	movs	r0, r3
    a888:	4b4d      	ldr	r3, [pc, #308]	; (a9c0 <nm_spi_read+0x1cc>)
    a88a:	4798      	blx	r3
    a88c:	0003      	movs	r3, r0
    a88e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a890:	2317      	movs	r3, #23
    a892:	18fb      	adds	r3, r7, r3
    a894:	781b      	ldrb	r3, [r3, #0]
    a896:	b25b      	sxtb	r3, r3
    a898:	2b01      	cmp	r3, #1
    a89a:	d00f      	beq.n	a8bc <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    a89c:	4a49      	ldr	r2, [pc, #292]	; (a9c4 <nm_spi_read+0x1d0>)
    a89e:	4943      	ldr	r1, [pc, #268]	; (a9ac <nm_spi_read+0x1b8>)
    a8a0:	4b43      	ldr	r3, [pc, #268]	; (a9b0 <nm_spi_read+0x1bc>)
    a8a2:	0018      	movs	r0, r3
    a8a4:	4b43      	ldr	r3, [pc, #268]	; (a9b4 <nm_spi_read+0x1c0>)
    a8a6:	4798      	blx	r3
    a8a8:	68fa      	ldr	r2, [r7, #12]
    a8aa:	4b47      	ldr	r3, [pc, #284]	; (a9c8 <nm_spi_read+0x1d4>)
    a8ac:	0011      	movs	r1, r2
    a8ae:	0018      	movs	r0, r3
    a8b0:	4b40      	ldr	r3, [pc, #256]	; (a9b4 <nm_spi_read+0x1c0>)
    a8b2:	4798      	blx	r3
    a8b4:	200d      	movs	r0, #13
    a8b6:	4b41      	ldr	r3, [pc, #260]	; (a9bc <nm_spi_read+0x1c8>)
    a8b8:	4798      	blx	r3
		goto _FAIL_;
    a8ba:	e035      	b.n	a928 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    a8bc:	2315      	movs	r3, #21
    a8be:	18fb      	adds	r3, r7, r3
    a8c0:	781b      	ldrb	r3, [r3, #0]
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d011      	beq.n	a8ea <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    a8c6:	2317      	movs	r3, #23
    a8c8:	18fc      	adds	r4, r7, r3
    a8ca:	1dbb      	adds	r3, r7, #6
    a8cc:	8819      	ldrh	r1, [r3, #0]
    a8ce:	2310      	movs	r3, #16
    a8d0:	18fb      	adds	r3, r7, r3
    a8d2:	2200      	movs	r2, #0
    a8d4:	0018      	movs	r0, r3
    a8d6:	4b3d      	ldr	r3, [pc, #244]	; (a9cc <nm_spi_read+0x1d8>)
    a8d8:	4798      	blx	r3
    a8da:	0003      	movs	r3, r0
    a8dc:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    a8de:	2310      	movs	r3, #16
    a8e0:	18fb      	adds	r3, r7, r3
    a8e2:	781a      	ldrb	r2, [r3, #0]
    a8e4:	68bb      	ldr	r3, [r7, #8]
    a8e6:	701a      	strb	r2, [r3, #0]
    a8e8:	e00a      	b.n	a900 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    a8ea:	2317      	movs	r3, #23
    a8ec:	18fc      	adds	r4, r7, r3
    a8ee:	1dbb      	adds	r3, r7, #6
    a8f0:	8819      	ldrh	r1, [r3, #0]
    a8f2:	68bb      	ldr	r3, [r7, #8]
    a8f4:	2200      	movs	r2, #0
    a8f6:	0018      	movs	r0, r3
    a8f8:	4b34      	ldr	r3, [pc, #208]	; (a9cc <nm_spi_read+0x1d8>)
    a8fa:	4798      	blx	r3
    a8fc:	0003      	movs	r3, r0
    a8fe:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    a900:	2317      	movs	r3, #23
    a902:	18fb      	adds	r3, r7, r3
    a904:	781b      	ldrb	r3, [r3, #0]
    a906:	b25b      	sxtb	r3, r3
    a908:	2b01      	cmp	r3, #1
    a90a:	d00d      	beq.n	a928 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    a90c:	4a30      	ldr	r2, [pc, #192]	; (a9d0 <nm_spi_read+0x1dc>)
    a90e:	4927      	ldr	r1, [pc, #156]	; (a9ac <nm_spi_read+0x1b8>)
    a910:	4b27      	ldr	r3, [pc, #156]	; (a9b0 <nm_spi_read+0x1bc>)
    a912:	0018      	movs	r0, r3
    a914:	4b27      	ldr	r3, [pc, #156]	; (a9b4 <nm_spi_read+0x1c0>)
    a916:	4798      	blx	r3
    a918:	4b2e      	ldr	r3, [pc, #184]	; (a9d4 <nm_spi_read+0x1e0>)
    a91a:	0018      	movs	r0, r3
    a91c:	4b2e      	ldr	r3, [pc, #184]	; (a9d8 <nm_spi_read+0x1e4>)
    a91e:	4798      	blx	r3
    a920:	200d      	movs	r0, #13
    a922:	4b26      	ldr	r3, [pc, #152]	; (a9bc <nm_spi_read+0x1c8>)
    a924:	4798      	blx	r3
		goto _FAIL_;
    a926:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    a928:	2317      	movs	r3, #23
    a92a:	18fb      	adds	r3, r7, r3
    a92c:	781b      	ldrb	r3, [r3, #0]
    a92e:	b25b      	sxtb	r3, r3
    a930:	2b01      	cmp	r3, #1
    a932:	d02f      	beq.n	a994 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    a934:	2001      	movs	r0, #1
    a936:	4b29      	ldr	r3, [pc, #164]	; (a9dc <nm_spi_read+0x1e8>)
    a938:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a93a:	2300      	movs	r3, #0
    a93c:	9300      	str	r3, [sp, #0]
    a93e:	2300      	movs	r3, #0
    a940:	2200      	movs	r2, #0
    a942:	2100      	movs	r1, #0
    a944:	20cf      	movs	r0, #207	; 0xcf
    a946:	4c17      	ldr	r4, [pc, #92]	; (a9a4 <nm_spi_read+0x1b0>)
    a948:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a94a:	20cf      	movs	r0, #207	; 0xcf
    a94c:	4b1c      	ldr	r3, [pc, #112]	; (a9c0 <nm_spi_read+0x1cc>)
    a94e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a950:	4a23      	ldr	r2, [pc, #140]	; (a9e0 <nm_spi_read+0x1ec>)
    a952:	4916      	ldr	r1, [pc, #88]	; (a9ac <nm_spi_read+0x1b8>)
    a954:	4b16      	ldr	r3, [pc, #88]	; (a9b0 <nm_spi_read+0x1bc>)
    a956:	0018      	movs	r0, r3
    a958:	4b16      	ldr	r3, [pc, #88]	; (a9b4 <nm_spi_read+0x1c0>)
    a95a:	4798      	blx	r3
    a95c:	2316      	movs	r3, #22
    a95e:	18fb      	adds	r3, r7, r3
    a960:	7819      	ldrb	r1, [r3, #0]
    a962:	1dbb      	adds	r3, r7, #6
    a964:	881b      	ldrh	r3, [r3, #0]
    a966:	68fa      	ldr	r2, [r7, #12]
    a968:	481e      	ldr	r0, [pc, #120]	; (a9e4 <nm_spi_read+0x1f0>)
    a96a:	4c12      	ldr	r4, [pc, #72]	; (a9b4 <nm_spi_read+0x1c0>)
    a96c:	47a0      	blx	r4
    a96e:	200d      	movs	r0, #13
    a970:	4b12      	ldr	r3, [pc, #72]	; (a9bc <nm_spi_read+0x1c8>)
    a972:	4798      	blx	r3
		nm_bsp_sleep(1);
    a974:	2001      	movs	r0, #1
    a976:	4b19      	ldr	r3, [pc, #100]	; (a9dc <nm_spi_read+0x1e8>)
    a978:	4798      	blx	r3
		retry--;
    a97a:	2316      	movs	r3, #22
    a97c:	18fb      	adds	r3, r7, r3
    a97e:	781a      	ldrb	r2, [r3, #0]
    a980:	2316      	movs	r3, #22
    a982:	18fb      	adds	r3, r7, r3
    a984:	3a01      	subs	r2, #1
    a986:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a988:	2316      	movs	r3, #22
    a98a:	18fb      	adds	r3, r7, r3
    a98c:	781b      	ldrb	r3, [r3, #0]
    a98e:	2b00      	cmp	r3, #0
    a990:	d000      	beq.n	a994 <nm_spi_read+0x1a0>
    a992:	e742      	b.n	a81a <nm_spi_read+0x26>
	}

	return result;
    a994:	2317      	movs	r3, #23
    a996:	18fb      	adds	r3, r7, r3
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	b25b      	sxtb	r3, r3
}
    a99c:	0018      	movs	r0, r3
    a99e:	46bd      	mov	sp, r7
    a9a0:	b006      	add	sp, #24
    a9a2:	bdb0      	pop	{r4, r5, r7, pc}
    a9a4:	00009919 	.word	0x00009919
    a9a8:	0000045d 	.word	0x0000045d
    a9ac:	000209d0 	.word	0x000209d0
    a9b0:	000203c8 	.word	0x000203c8
    a9b4:	0001c37d 	.word	0x0001c37d
    a9b8:	000207bc 	.word	0x000207bc
    a9bc:	0001c3b1 	.word	0x0001c3b1
    a9c0:	00009d5d 	.word	0x00009d5d
    a9c4:	00000463 	.word	0x00000463
    a9c8:	000207ec 	.word	0x000207ec
    a9cc:	00009e95 	.word	0x00009e95
    a9d0:	00000473 	.word	0x00000473
    a9d4:	00020824 	.word	0x00020824
    a9d8:	0001c499 	.word	0x0001c499
    a9dc:	000064a1 	.word	0x000064a1
    a9e0:	00000484 	.word	0x00000484
    a9e4:	00020708 	.word	0x00020708

0000a9e8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    a9e8:	b580      	push	{r7, lr}
    a9ea:	b082      	sub	sp, #8
    a9ec:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    a9ee:	4b0c      	ldr	r3, [pc, #48]	; (aa20 <spi_init_pkt_sz+0x38>)
    a9f0:	0018      	movs	r0, r3
    a9f2:	4b0c      	ldr	r3, [pc, #48]	; (aa24 <spi_init_pkt_sz+0x3c>)
    a9f4:	4798      	blx	r3
    a9f6:	0003      	movs	r3, r0
    a9f8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    a9fa:	687b      	ldr	r3, [r7, #4]
    a9fc:	2270      	movs	r2, #112	; 0x70
    a9fe:	4393      	bics	r3, r2
    aa00:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    aa02:	687b      	ldr	r3, [r7, #4]
    aa04:	2250      	movs	r2, #80	; 0x50
    aa06:	4313      	orrs	r3, r2
    aa08:	607b      	str	r3, [r7, #4]
    aa0a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    aa0c:	687b      	ldr	r3, [r7, #4]
    aa0e:	4a04      	ldr	r2, [pc, #16]	; (aa20 <spi_init_pkt_sz+0x38>)
    aa10:	0019      	movs	r1, r3
    aa12:	0010      	movs	r0, r2
    aa14:	4b04      	ldr	r3, [pc, #16]	; (aa28 <spi_init_pkt_sz+0x40>)
    aa16:	4798      	blx	r3
}
    aa18:	46c0      	nop			; (mov r8, r8)
    aa1a:	46bd      	mov	sp, r7
    aa1c:	b002      	add	sp, #8
    aa1e:	bd80      	pop	{r7, pc}
    aa20:	0000e824 	.word	0x0000e824
    aa24:	0000abc1 	.word	0x0000abc1
    aa28:	0000ac35 	.word	0x0000ac35

0000aa2c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    aa2c:	b590      	push	{r4, r7, lr}
    aa2e:	b083      	sub	sp, #12
    aa30:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    aa32:	2300      	movs	r3, #0
    aa34:	9300      	str	r3, [sp, #0]
    aa36:	2300      	movs	r3, #0
    aa38:	2200      	movs	r2, #0
    aa3a:	2100      	movs	r1, #0
    aa3c:	20cf      	movs	r0, #207	; 0xcf
    aa3e:	4c05      	ldr	r4, [pc, #20]	; (aa54 <nm_spi_reset+0x28>)
    aa40:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    aa42:	20cf      	movs	r0, #207	; 0xcf
    aa44:	4b04      	ldr	r3, [pc, #16]	; (aa58 <nm_spi_reset+0x2c>)
    aa46:	4798      	blx	r3
	return M2M_SUCCESS;
    aa48:	2300      	movs	r3, #0
}
    aa4a:	0018      	movs	r0, r3
    aa4c:	46bd      	mov	sp, r7
    aa4e:	b001      	add	sp, #4
    aa50:	bd90      	pop	{r4, r7, pc}
    aa52:	46c0      	nop			; (mov r8, r8)
    aa54:	00009919 	.word	0x00009919
    aa58:	00009d5d 	.word	0x00009d5d

0000aa5c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    aa5c:	b580      	push	{r7, lr}
    aa5e:	b082      	sub	sp, #8
    aa60:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    aa62:	2300      	movs	r3, #0
    aa64:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    aa66:	4b3e      	ldr	r3, [pc, #248]	; (ab60 <nm_spi_init+0x104>)
    aa68:	2200      	movs	r2, #0
    aa6a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    aa6c:	003b      	movs	r3, r7
    aa6e:	4a3d      	ldr	r2, [pc, #244]	; (ab64 <nm_spi_init+0x108>)
    aa70:	0019      	movs	r1, r3
    aa72:	0010      	movs	r0, r2
    aa74:	4b3c      	ldr	r3, [pc, #240]	; (ab68 <nm_spi_init+0x10c>)
    aa76:	4798      	blx	r3
    aa78:	1e03      	subs	r3, r0, #0
    aa7a:	d126      	bne.n	aaca <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    aa7c:	4b38      	ldr	r3, [pc, #224]	; (ab60 <nm_spi_init+0x104>)
    aa7e:	2201      	movs	r2, #1
    aa80:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    aa82:	4a3a      	ldr	r2, [pc, #232]	; (ab6c <nm_spi_init+0x110>)
    aa84:	493a      	ldr	r1, [pc, #232]	; (ab70 <nm_spi_init+0x114>)
    aa86:	4b3b      	ldr	r3, [pc, #236]	; (ab74 <nm_spi_init+0x118>)
    aa88:	0018      	movs	r0, r3
    aa8a:	4b3b      	ldr	r3, [pc, #236]	; (ab78 <nm_spi_init+0x11c>)
    aa8c:	4798      	blx	r3
    aa8e:	4b3b      	ldr	r3, [pc, #236]	; (ab7c <nm_spi_init+0x120>)
    aa90:	0018      	movs	r0, r3
    aa92:	4b3b      	ldr	r3, [pc, #236]	; (ab80 <nm_spi_init+0x124>)
    aa94:	4798      	blx	r3
    aa96:	200d      	movs	r0, #13
    aa98:	4b3a      	ldr	r3, [pc, #232]	; (ab84 <nm_spi_init+0x128>)
    aa9a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    aa9c:	003b      	movs	r3, r7
    aa9e:	4a31      	ldr	r2, [pc, #196]	; (ab64 <nm_spi_init+0x108>)
    aaa0:	0019      	movs	r1, r3
    aaa2:	0010      	movs	r0, r2
    aaa4:	4b30      	ldr	r3, [pc, #192]	; (ab68 <nm_spi_init+0x10c>)
    aaa6:	4798      	blx	r3
    aaa8:	1e03      	subs	r3, r0, #0
    aaaa:	d10e      	bne.n	aaca <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    aaac:	4a36      	ldr	r2, [pc, #216]	; (ab88 <nm_spi_init+0x12c>)
    aaae:	4930      	ldr	r1, [pc, #192]	; (ab70 <nm_spi_init+0x114>)
    aab0:	4b30      	ldr	r3, [pc, #192]	; (ab74 <nm_spi_init+0x118>)
    aab2:	0018      	movs	r0, r3
    aab4:	4b30      	ldr	r3, [pc, #192]	; (ab78 <nm_spi_init+0x11c>)
    aab6:	4798      	blx	r3
    aab8:	4b34      	ldr	r3, [pc, #208]	; (ab8c <nm_spi_init+0x130>)
    aaba:	0018      	movs	r0, r3
    aabc:	4b30      	ldr	r3, [pc, #192]	; (ab80 <nm_spi_init+0x124>)
    aabe:	4798      	blx	r3
    aac0:	200d      	movs	r0, #13
    aac2:	4b30      	ldr	r3, [pc, #192]	; (ab84 <nm_spi_init+0x128>)
    aac4:	4798      	blx	r3
			return 0;
    aac6:	2300      	movs	r3, #0
    aac8:	e045      	b.n	ab56 <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    aaca:	4b25      	ldr	r3, [pc, #148]	; (ab60 <nm_spi_init+0x104>)
    aacc:	781b      	ldrb	r3, [r3, #0]
    aace:	2b00      	cmp	r3, #0
    aad0:	d125      	bne.n	ab1e <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    aad2:	683b      	ldr	r3, [r7, #0]
    aad4:	220c      	movs	r2, #12
    aad6:	4393      	bics	r3, r2
    aad8:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    aada:	683b      	ldr	r3, [r7, #0]
    aadc:	2270      	movs	r2, #112	; 0x70
    aade:	4393      	bics	r3, r2
    aae0:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    aae2:	683b      	ldr	r3, [r7, #0]
    aae4:	2250      	movs	r2, #80	; 0x50
    aae6:	4313      	orrs	r3, r2
    aae8:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    aaea:	683b      	ldr	r3, [r7, #0]
    aaec:	4a1d      	ldr	r2, [pc, #116]	; (ab64 <nm_spi_init+0x108>)
    aaee:	0019      	movs	r1, r3
    aaf0:	0010      	movs	r0, r2
    aaf2:	4b27      	ldr	r3, [pc, #156]	; (ab90 <nm_spi_init+0x134>)
    aaf4:	4798      	blx	r3
    aaf6:	1e03      	subs	r3, r0, #0
    aaf8:	d10e      	bne.n	ab18 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    aafa:	4a26      	ldr	r2, [pc, #152]	; (ab94 <nm_spi_init+0x138>)
    aafc:	491c      	ldr	r1, [pc, #112]	; (ab70 <nm_spi_init+0x114>)
    aafe:	4b1d      	ldr	r3, [pc, #116]	; (ab74 <nm_spi_init+0x118>)
    ab00:	0018      	movs	r0, r3
    ab02:	4b1d      	ldr	r3, [pc, #116]	; (ab78 <nm_spi_init+0x11c>)
    ab04:	4798      	blx	r3
    ab06:	4b24      	ldr	r3, [pc, #144]	; (ab98 <nm_spi_init+0x13c>)
    ab08:	0018      	movs	r0, r3
    ab0a:	4b1d      	ldr	r3, [pc, #116]	; (ab80 <nm_spi_init+0x124>)
    ab0c:	4798      	blx	r3
    ab0e:	200d      	movs	r0, #13
    ab10:	4b1c      	ldr	r3, [pc, #112]	; (ab84 <nm_spi_init+0x128>)
    ab12:	4798      	blx	r3
			return 0;
    ab14:	2300      	movs	r3, #0
    ab16:	e01e      	b.n	ab56 <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    ab18:	4b11      	ldr	r3, [pc, #68]	; (ab60 <nm_spi_init+0x104>)
    ab1a:	2201      	movs	r2, #1
    ab1c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    ab1e:	1d3a      	adds	r2, r7, #4
    ab20:	2380      	movs	r3, #128	; 0x80
    ab22:	015b      	lsls	r3, r3, #5
    ab24:	0011      	movs	r1, r2
    ab26:	0018      	movs	r0, r3
    ab28:	4b0f      	ldr	r3, [pc, #60]	; (ab68 <nm_spi_init+0x10c>)
    ab2a:	4798      	blx	r3
    ab2c:	1e03      	subs	r3, r0, #0
    ab2e:	d10f      	bne.n	ab50 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    ab30:	4a1a      	ldr	r2, [pc, #104]	; (ab9c <nm_spi_init+0x140>)
    ab32:	490f      	ldr	r1, [pc, #60]	; (ab70 <nm_spi_init+0x114>)
    ab34:	4b0f      	ldr	r3, [pc, #60]	; (ab74 <nm_spi_init+0x118>)
    ab36:	0018      	movs	r0, r3
    ab38:	4b0f      	ldr	r3, [pc, #60]	; (ab78 <nm_spi_init+0x11c>)
    ab3a:	4798      	blx	r3
    ab3c:	4b18      	ldr	r3, [pc, #96]	; (aba0 <nm_spi_init+0x144>)
    ab3e:	0018      	movs	r0, r3
    ab40:	4b0f      	ldr	r3, [pc, #60]	; (ab80 <nm_spi_init+0x124>)
    ab42:	4798      	blx	r3
    ab44:	200d      	movs	r0, #13
    ab46:	4b0f      	ldr	r3, [pc, #60]	; (ab84 <nm_spi_init+0x128>)
    ab48:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    ab4a:	2306      	movs	r3, #6
    ab4c:	425b      	negs	r3, r3
    ab4e:	e002      	b.n	ab56 <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    ab50:	4b14      	ldr	r3, [pc, #80]	; (aba4 <nm_spi_init+0x148>)
    ab52:	4798      	blx	r3


	return M2M_SUCCESS;
    ab54:	2300      	movs	r3, #0
}
    ab56:	0018      	movs	r0, r3
    ab58:	46bd      	mov	sp, r7
    ab5a:	b002      	add	sp, #8
    ab5c:	bd80      	pop	{r7, pc}
    ab5e:	46c0      	nop			; (mov r8, r8)
    ab60:	20000554 	.word	0x20000554
    ab64:	0000e824 	.word	0x0000e824
    ab68:	0000a5ed 	.word	0x0000a5ed
    ab6c:	000004c7 	.word	0x000004c7
    ab70:	000209dc 	.word	0x000209dc
    ab74:	000203c8 	.word	0x000203c8
    ab78:	0001c37d 	.word	0x0001c37d
    ab7c:	0002084c 	.word	0x0002084c
    ab80:	0001c499 	.word	0x0001c499
    ab84:	0001c3b1 	.word	0x0001c3b1
    ab88:	000004ca 	.word	0x000004ca
    ab8c:	0002089c 	.word	0x0002089c
    ab90:	0000a26d 	.word	0x0000a26d
    ab94:	000004d4 	.word	0x000004d4
    ab98:	000208c8 	.word	0x000208c8
    ab9c:	000004de 	.word	0x000004de
    aba0:	000208fc 	.word	0x000208fc
    aba4:	0000a9e9 	.word	0x0000a9e9

0000aba8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    aba8:	b580      	push	{r7, lr}
    abaa:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    abac:	4b03      	ldr	r3, [pc, #12]	; (abbc <nm_spi_deinit+0x14>)
    abae:	2200      	movs	r2, #0
    abb0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    abb2:	2300      	movs	r3, #0
}
    abb4:	0018      	movs	r0, r3
    abb6:	46bd      	mov	sp, r7
    abb8:	bd80      	pop	{r7, pc}
    abba:	46c0      	nop			; (mov r8, r8)
    abbc:	20000554 	.word	0x20000554

0000abc0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    abc0:	b580      	push	{r7, lr}
    abc2:	b084      	sub	sp, #16
    abc4:	af00      	add	r7, sp, #0
    abc6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    abc8:	230c      	movs	r3, #12
    abca:	18fa      	adds	r2, r7, r3
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	0011      	movs	r1, r2
    abd0:	0018      	movs	r0, r3
    abd2:	4b03      	ldr	r3, [pc, #12]	; (abe0 <nm_spi_read_reg+0x20>)
    abd4:	4798      	blx	r3

	return u32Val;
    abd6:	68fb      	ldr	r3, [r7, #12]
}
    abd8:	0018      	movs	r0, r3
    abda:	46bd      	mov	sp, r7
    abdc:	b004      	add	sp, #16
    abde:	bd80      	pop	{r7, pc}
    abe0:	0000a5ed 	.word	0x0000a5ed

0000abe4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    abe4:	b590      	push	{r4, r7, lr}
    abe6:	b085      	sub	sp, #20
    abe8:	af00      	add	r7, sp, #0
    abea:	6078      	str	r0, [r7, #4]
    abec:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    abee:	230f      	movs	r3, #15
    abf0:	18fc      	adds	r4, r7, r3
    abf2:	683a      	ldr	r2, [r7, #0]
    abf4:	687b      	ldr	r3, [r7, #4]
    abf6:	0011      	movs	r1, r2
    abf8:	0018      	movs	r0, r3
    abfa:	4b0d      	ldr	r3, [pc, #52]	; (ac30 <nm_spi_read_reg_with_ret+0x4c>)
    abfc:	4798      	blx	r3
    abfe:	0003      	movs	r3, r0
    ac00:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ac02:	230f      	movs	r3, #15
    ac04:	18fb      	adds	r3, r7, r3
    ac06:	781b      	ldrb	r3, [r3, #0]
    ac08:	b25b      	sxtb	r3, r3
    ac0a:	2b01      	cmp	r3, #1
    ac0c:	d104      	bne.n	ac18 <nm_spi_read_reg_with_ret+0x34>
    ac0e:	230f      	movs	r3, #15
    ac10:	18fb      	adds	r3, r7, r3
    ac12:	2200      	movs	r2, #0
    ac14:	701a      	strb	r2, [r3, #0]
    ac16:	e003      	b.n	ac20 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ac18:	230f      	movs	r3, #15
    ac1a:	18fb      	adds	r3, r7, r3
    ac1c:	22fa      	movs	r2, #250	; 0xfa
    ac1e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    ac20:	230f      	movs	r3, #15
    ac22:	18fb      	adds	r3, r7, r3
    ac24:	781b      	ldrb	r3, [r3, #0]
    ac26:	b25b      	sxtb	r3, r3
}
    ac28:	0018      	movs	r0, r3
    ac2a:	46bd      	mov	sp, r7
    ac2c:	b005      	add	sp, #20
    ac2e:	bd90      	pop	{r4, r7, pc}
    ac30:	0000a5ed 	.word	0x0000a5ed

0000ac34 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    ac34:	b590      	push	{r4, r7, lr}
    ac36:	b085      	sub	sp, #20
    ac38:	af00      	add	r7, sp, #0
    ac3a:	6078      	str	r0, [r7, #4]
    ac3c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    ac3e:	230f      	movs	r3, #15
    ac40:	18fc      	adds	r4, r7, r3
    ac42:	683a      	ldr	r2, [r7, #0]
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	0011      	movs	r1, r2
    ac48:	0018      	movs	r0, r3
    ac4a:	4b0d      	ldr	r3, [pc, #52]	; (ac80 <nm_spi_write_reg+0x4c>)
    ac4c:	4798      	blx	r3
    ac4e:	0003      	movs	r3, r0
    ac50:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ac52:	230f      	movs	r3, #15
    ac54:	18fb      	adds	r3, r7, r3
    ac56:	781b      	ldrb	r3, [r3, #0]
    ac58:	b25b      	sxtb	r3, r3
    ac5a:	2b01      	cmp	r3, #1
    ac5c:	d104      	bne.n	ac68 <nm_spi_write_reg+0x34>
    ac5e:	230f      	movs	r3, #15
    ac60:	18fb      	adds	r3, r7, r3
    ac62:	2200      	movs	r2, #0
    ac64:	701a      	strb	r2, [r3, #0]
    ac66:	e003      	b.n	ac70 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ac68:	230f      	movs	r3, #15
    ac6a:	18fb      	adds	r3, r7, r3
    ac6c:	22fa      	movs	r2, #250	; 0xfa
    ac6e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    ac70:	230f      	movs	r3, #15
    ac72:	18fb      	adds	r3, r7, r3
    ac74:	781b      	ldrb	r3, [r3, #0]
    ac76:	b25b      	sxtb	r3, r3
}
    ac78:	0018      	movs	r0, r3
    ac7a:	46bd      	mov	sp, r7
    ac7c:	b005      	add	sp, #20
    ac7e:	bd90      	pop	{r4, r7, pc}
    ac80:	0000a26d 	.word	0x0000a26d

0000ac84 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ac84:	b590      	push	{r4, r7, lr}
    ac86:	b087      	sub	sp, #28
    ac88:	af00      	add	r7, sp, #0
    ac8a:	60f8      	str	r0, [r7, #12]
    ac8c:	60b9      	str	r1, [r7, #8]
    ac8e:	1dbb      	adds	r3, r7, #6
    ac90:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    ac92:	2317      	movs	r3, #23
    ac94:	18fc      	adds	r4, r7, r3
    ac96:	1dbb      	adds	r3, r7, #6
    ac98:	881a      	ldrh	r2, [r3, #0]
    ac9a:	68b9      	ldr	r1, [r7, #8]
    ac9c:	68fb      	ldr	r3, [r7, #12]
    ac9e:	0018      	movs	r0, r3
    aca0:	4b0d      	ldr	r3, [pc, #52]	; (acd8 <nm_spi_read_block+0x54>)
    aca2:	4798      	blx	r3
    aca4:	0003      	movs	r3, r0
    aca6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    aca8:	2317      	movs	r3, #23
    acaa:	18fb      	adds	r3, r7, r3
    acac:	781b      	ldrb	r3, [r3, #0]
    acae:	b25b      	sxtb	r3, r3
    acb0:	2b01      	cmp	r3, #1
    acb2:	d104      	bne.n	acbe <nm_spi_read_block+0x3a>
    acb4:	2317      	movs	r3, #23
    acb6:	18fb      	adds	r3, r7, r3
    acb8:	2200      	movs	r2, #0
    acba:	701a      	strb	r2, [r3, #0]
    acbc:	e003      	b.n	acc6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    acbe:	2317      	movs	r3, #23
    acc0:	18fb      	adds	r3, r7, r3
    acc2:	22fa      	movs	r2, #250	; 0xfa
    acc4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    acc6:	2317      	movs	r3, #23
    acc8:	18fb      	adds	r3, r7, r3
    acca:	781b      	ldrb	r3, [r3, #0]
    accc:	b25b      	sxtb	r3, r3
}
    acce:	0018      	movs	r0, r3
    acd0:	46bd      	mov	sp, r7
    acd2:	b007      	add	sp, #28
    acd4:	bd90      	pop	{r4, r7, pc}
    acd6:	46c0      	nop			; (mov r8, r8)
    acd8:	0000a7f5 	.word	0x0000a7f5

0000acdc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    acdc:	b590      	push	{r4, r7, lr}
    acde:	b087      	sub	sp, #28
    ace0:	af00      	add	r7, sp, #0
    ace2:	60f8      	str	r0, [r7, #12]
    ace4:	60b9      	str	r1, [r7, #8]
    ace6:	1dbb      	adds	r3, r7, #6
    ace8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    acea:	2317      	movs	r3, #23
    acec:	18fc      	adds	r4, r7, r3
    acee:	1dbb      	adds	r3, r7, #6
    acf0:	881a      	ldrh	r2, [r3, #0]
    acf2:	68b9      	ldr	r1, [r7, #8]
    acf4:	68fb      	ldr	r3, [r7, #12]
    acf6:	0018      	movs	r0, r3
    acf8:	4b0d      	ldr	r3, [pc, #52]	; (ad30 <nm_spi_write_block+0x54>)
    acfa:	4798      	blx	r3
    acfc:	0003      	movs	r3, r0
    acfe:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ad00:	2317      	movs	r3, #23
    ad02:	18fb      	adds	r3, r7, r3
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	b25b      	sxtb	r3, r3
    ad08:	2b01      	cmp	r3, #1
    ad0a:	d104      	bne.n	ad16 <nm_spi_write_block+0x3a>
    ad0c:	2317      	movs	r3, #23
    ad0e:	18fb      	adds	r3, r7, r3
    ad10:	2200      	movs	r2, #0
    ad12:	701a      	strb	r2, [r3, #0]
    ad14:	e003      	b.n	ad1e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ad16:	2317      	movs	r3, #23
    ad18:	18fb      	adds	r3, r7, r3
    ad1a:	22fa      	movs	r2, #250	; 0xfa
    ad1c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    ad1e:	2317      	movs	r3, #23
    ad20:	18fb      	adds	r3, r7, r3
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	b25b      	sxtb	r3, r3
}
    ad26:	0018      	movs	r0, r3
    ad28:	46bd      	mov	sp, r7
    ad2a:	b007      	add	sp, #28
    ad2c:	bd90      	pop	{r4, r7, pc}
    ad2e:	46c0      	nop			; (mov r8, r8)
    ad30:	0000a3f9 	.word	0x0000a3f9

0000ad34 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    ad34:	b590      	push	{r4, r7, lr}
    ad36:	b089      	sub	sp, #36	; 0x24
    ad38:	af00      	add	r7, sp, #0
    ad3a:	60b9      	str	r1, [r7, #8]
    ad3c:	0011      	movs	r1, r2
    ad3e:	607b      	str	r3, [r7, #4]
    ad40:	230f      	movs	r3, #15
    ad42:	18fb      	adds	r3, r7, r3
    ad44:	1c02      	adds	r2, r0, #0
    ad46:	701a      	strb	r2, [r3, #0]
    ad48:	230e      	movs	r3, #14
    ad4a:	18fb      	adds	r3, r7, r3
    ad4c:	1c0a      	adds	r2, r1, #0
    ad4e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    ad50:	2330      	movs	r3, #48	; 0x30
    ad52:	18fb      	adds	r3, r7, r3
    ad54:	881b      	ldrh	r3, [r3, #0]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d100      	bne.n	ad5c <Socket_ReadSocketData+0x28>
    ad5a:	e0d6      	b.n	af0a <Socket_ReadSocketData+0x1d6>
    ad5c:	230f      	movs	r3, #15
    ad5e:	18fb      	adds	r3, r7, r3
    ad60:	2200      	movs	r2, #0
    ad62:	569a      	ldrsb	r2, [r3, r2]
    ad64:	4b6b      	ldr	r3, [pc, #428]	; (af14 <Socket_ReadSocketData+0x1e0>)
    ad66:	0112      	lsls	r2, r2, #4
    ad68:	58d3      	ldr	r3, [r2, r3]
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d100      	bne.n	ad70 <Socket_ReadSocketData+0x3c>
    ad6e:	e0cc      	b.n	af0a <Socket_ReadSocketData+0x1d6>
    ad70:	230f      	movs	r3, #15
    ad72:	18fb      	adds	r3, r7, r3
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	b25b      	sxtb	r3, r3
    ad78:	4a66      	ldr	r2, [pc, #408]	; (af14 <Socket_ReadSocketData+0x1e0>)
    ad7a:	011b      	lsls	r3, r3, #4
    ad7c:	18d3      	adds	r3, r2, r3
    ad7e:	3304      	adds	r3, #4
    ad80:	881b      	ldrh	r3, [r3, #0]
    ad82:	b29b      	uxth	r3, r3
    ad84:	2b00      	cmp	r3, #0
    ad86:	d100      	bne.n	ad8a <Socket_ReadSocketData+0x56>
    ad88:	e0bf      	b.n	af0a <Socket_ReadSocketData+0x1d6>
    ad8a:	230f      	movs	r3, #15
    ad8c:	18fb      	adds	r3, r7, r3
    ad8e:	781b      	ldrb	r3, [r3, #0]
    ad90:	b25b      	sxtb	r3, r3
    ad92:	4a60      	ldr	r2, [pc, #384]	; (af14 <Socket_ReadSocketData+0x1e0>)
    ad94:	011b      	lsls	r3, r3, #4
    ad96:	18d3      	adds	r3, r2, r3
    ad98:	330a      	adds	r3, #10
    ad9a:	781b      	ldrb	r3, [r3, #0]
    ad9c:	b2db      	uxtb	r3, r3
    ad9e:	2b01      	cmp	r3, #1
    ada0:	d000      	beq.n	ada4 <Socket_ReadSocketData+0x70>
    ada2:	e0b2      	b.n	af0a <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    ada4:	687b      	ldr	r3, [r7, #4]
    ada6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    ada8:	68bb      	ldr	r3, [r7, #8]
    adaa:	2230      	movs	r2, #48	; 0x30
    adac:	18ba      	adds	r2, r7, r2
    adae:	8812      	ldrh	r2, [r2, #0]
    adb0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    adb2:	2319      	movs	r3, #25
    adb4:	18fb      	adds	r3, r7, r3
    adb6:	2201      	movs	r2, #1
    adb8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    adba:	231a      	movs	r3, #26
    adbc:	18fb      	adds	r3, r7, r3
    adbe:	2230      	movs	r2, #48	; 0x30
    adc0:	18ba      	adds	r2, r7, r2
    adc2:	8812      	ldrh	r2, [r2, #0]
    adc4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    adc6:	230f      	movs	r3, #15
    adc8:	18fb      	adds	r3, r7, r3
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	b25b      	sxtb	r3, r3
    adce:	4a51      	ldr	r2, [pc, #324]	; (af14 <Socket_ReadSocketData+0x1e0>)
    add0:	011b      	lsls	r3, r3, #4
    add2:	18d3      	adds	r3, r2, r3
    add4:	3304      	adds	r3, #4
    add6:	881b      	ldrh	r3, [r3, #0]
    add8:	b29b      	uxth	r3, r3
    adda:	221a      	movs	r2, #26
    addc:	18ba      	adds	r2, r7, r2
    adde:	8812      	ldrh	r2, [r2, #0]
    ade0:	1ad3      	subs	r3, r2, r3
    ade2:	b29a      	uxth	r2, r3
    ade4:	2316      	movs	r3, #22
    ade6:	18fb      	adds	r3, r7, r3
    ade8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    adea:	2316      	movs	r3, #22
    adec:	18fb      	adds	r3, r7, r3
    adee:	2200      	movs	r2, #0
    adf0:	5e9b      	ldrsh	r3, [r3, r2]
    adf2:	2b00      	cmp	r3, #0
    adf4:	dd0f      	ble.n	ae16 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    adf6:	2319      	movs	r3, #25
    adf8:	18fb      	adds	r3, r7, r3
    adfa:	2200      	movs	r2, #0
    adfc:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    adfe:	230f      	movs	r3, #15
    ae00:	18fb      	adds	r3, r7, r3
    ae02:	2200      	movs	r2, #0
    ae04:	569a      	ldrsb	r2, [r3, r2]
    ae06:	231a      	movs	r3, #26
    ae08:	18fb      	adds	r3, r7, r3
    ae0a:	4942      	ldr	r1, [pc, #264]	; (af14 <Socket_ReadSocketData+0x1e0>)
    ae0c:	0112      	lsls	r2, r2, #4
    ae0e:	188a      	adds	r2, r1, r2
    ae10:	3204      	adds	r2, #4
    ae12:	8812      	ldrh	r2, [r2, #0]
    ae14:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    ae16:	230f      	movs	r3, #15
    ae18:	18fb      	adds	r3, r7, r3
    ae1a:	2200      	movs	r2, #0
    ae1c:	569a      	ldrsb	r2, [r3, r2]
    ae1e:	4b3d      	ldr	r3, [pc, #244]	; (af14 <Socket_ReadSocketData+0x1e0>)
    ae20:	0112      	lsls	r2, r2, #4
    ae22:	58d1      	ldr	r1, [r2, r3]
    ae24:	2319      	movs	r3, #25
    ae26:	18fb      	adds	r3, r7, r3
    ae28:	781c      	ldrb	r4, [r3, #0]
    ae2a:	231a      	movs	r3, #26
    ae2c:	18fb      	adds	r3, r7, r3
    ae2e:	881a      	ldrh	r2, [r3, #0]
    ae30:	69f8      	ldr	r0, [r7, #28]
    ae32:	0023      	movs	r3, r4
    ae34:	4c38      	ldr	r4, [pc, #224]	; (af18 <Socket_ReadSocketData+0x1e4>)
    ae36:	47a0      	blx	r4
    ae38:	1e03      	subs	r3, r0, #0
    ae3a:	d14f      	bne.n	aedc <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    ae3c:	230f      	movs	r3, #15
    ae3e:	18fb      	adds	r3, r7, r3
    ae40:	2200      	movs	r2, #0
    ae42:	569a      	ldrsb	r2, [r3, r2]
    ae44:	4b33      	ldr	r3, [pc, #204]	; (af14 <Socket_ReadSocketData+0x1e0>)
    ae46:	0112      	lsls	r2, r2, #4
    ae48:	58d2      	ldr	r2, [r2, r3]
    ae4a:	68bb      	ldr	r3, [r7, #8]
    ae4c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    ae4e:	231a      	movs	r3, #26
    ae50:	18fb      	adds	r3, r7, r3
    ae52:	2200      	movs	r2, #0
    ae54:	5e9a      	ldrsh	r2, [r3, r2]
    ae56:	68bb      	ldr	r3, [r7, #8]
    ae58:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    ae5a:	68bb      	ldr	r3, [r7, #8]
    ae5c:	88da      	ldrh	r2, [r3, #6]
    ae5e:	231a      	movs	r3, #26
    ae60:	18fb      	adds	r3, r7, r3
    ae62:	881b      	ldrh	r3, [r3, #0]
    ae64:	1ad3      	subs	r3, r2, r3
    ae66:	b29a      	uxth	r2, r3
    ae68:	68bb      	ldr	r3, [r7, #8]
    ae6a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    ae6c:	4b2b      	ldr	r3, [pc, #172]	; (af1c <Socket_ReadSocketData+0x1e8>)
    ae6e:	681b      	ldr	r3, [r3, #0]
    ae70:	2b00      	cmp	r3, #0
    ae72:	d00b      	beq.n	ae8c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    ae74:	4b29      	ldr	r3, [pc, #164]	; (af1c <Socket_ReadSocketData+0x1e8>)
    ae76:	681b      	ldr	r3, [r3, #0]
    ae78:	68bc      	ldr	r4, [r7, #8]
    ae7a:	220e      	movs	r2, #14
    ae7c:	18ba      	adds	r2, r7, r2
    ae7e:	7811      	ldrb	r1, [r2, #0]
    ae80:	220f      	movs	r2, #15
    ae82:	18ba      	adds	r2, r7, r2
    ae84:	2000      	movs	r0, #0
    ae86:	5610      	ldrsb	r0, [r2, r0]
    ae88:	0022      	movs	r2, r4
    ae8a:	4798      	blx	r3

				u16ReadCount -= u16Read;
    ae8c:	2330      	movs	r3, #48	; 0x30
    ae8e:	18f9      	adds	r1, r7, r3
    ae90:	2330      	movs	r3, #48	; 0x30
    ae92:	18fa      	adds	r2, r7, r3
    ae94:	231a      	movs	r3, #26
    ae96:	18fb      	adds	r3, r7, r3
    ae98:	8812      	ldrh	r2, [r2, #0]
    ae9a:	881b      	ldrh	r3, [r3, #0]
    ae9c:	1ad3      	subs	r3, r2, r3
    ae9e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    aea0:	231a      	movs	r3, #26
    aea2:	18fb      	adds	r3, r7, r3
    aea4:	881b      	ldrh	r3, [r3, #0]
    aea6:	69fa      	ldr	r2, [r7, #28]
    aea8:	18d3      	adds	r3, r2, r3
    aeaa:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    aeac:	230f      	movs	r3, #15
    aeae:	18fb      	adds	r3, r7, r3
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	b25b      	sxtb	r3, r3
    aeb4:	4a17      	ldr	r2, [pc, #92]	; (af14 <Socket_ReadSocketData+0x1e0>)
    aeb6:	011b      	lsls	r3, r3, #4
    aeb8:	18d3      	adds	r3, r2, r3
    aeba:	330a      	adds	r3, #10
    aebc:	781b      	ldrb	r3, [r3, #0]
    aebe:	b2db      	uxtb	r3, r3
    aec0:	2b00      	cmp	r3, #0
    aec2:	d11b      	bne.n	aefc <Socket_ReadSocketData+0x1c8>
    aec4:	2330      	movs	r3, #48	; 0x30
    aec6:	18fb      	adds	r3, r7, r3
    aec8:	881b      	ldrh	r3, [r3, #0]
    aeca:	2b00      	cmp	r3, #0
    aecc:	d016      	beq.n	aefc <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    aece:	2301      	movs	r3, #1
    aed0:	2200      	movs	r2, #0
    aed2:	2100      	movs	r1, #0
    aed4:	2000      	movs	r0, #0
    aed6:	4c10      	ldr	r4, [pc, #64]	; (af18 <Socket_ReadSocketData+0x1e4>)
    aed8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    aeda:	e016      	b.n	af0a <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    aedc:	4b10      	ldr	r3, [pc, #64]	; (af20 <Socket_ReadSocketData+0x1ec>)
    aede:	0018      	movs	r0, r3
    aee0:	4b10      	ldr	r3, [pc, #64]	; (af24 <Socket_ReadSocketData+0x1f0>)
    aee2:	4798      	blx	r3
    aee4:	2330      	movs	r3, #48	; 0x30
    aee6:	18fb      	adds	r3, r7, r3
    aee8:	881a      	ldrh	r2, [r3, #0]
    aeea:	4b0f      	ldr	r3, [pc, #60]	; (af28 <Socket_ReadSocketData+0x1f4>)
    aeec:	0011      	movs	r1, r2
    aeee:	0018      	movs	r0, r3
    aef0:	4b0c      	ldr	r3, [pc, #48]	; (af24 <Socket_ReadSocketData+0x1f0>)
    aef2:	4798      	blx	r3
    aef4:	200d      	movs	r0, #13
    aef6:	4b0d      	ldr	r3, [pc, #52]	; (af2c <Socket_ReadSocketData+0x1f8>)
    aef8:	4798      	blx	r3
				break;
    aefa:	e006      	b.n	af0a <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    aefc:	2330      	movs	r3, #48	; 0x30
    aefe:	18fb      	adds	r3, r7, r3
    af00:	881b      	ldrh	r3, [r3, #0]
    af02:	2b00      	cmp	r3, #0
    af04:	d000      	beq.n	af08 <Socket_ReadSocketData+0x1d4>
    af06:	e754      	b.n	adb2 <Socket_ReadSocketData+0x7e>
	}
}
    af08:	e7ff      	b.n	af0a <Socket_ReadSocketData+0x1d6>
    af0a:	46c0      	nop			; (mov r8, r8)
    af0c:	46bd      	mov	sp, r7
    af0e:	b009      	add	sp, #36	; 0x24
    af10:	bd90      	pop	{r4, r7, pc}
    af12:	46c0      	nop			; (mov r8, r8)
    af14:	20002a5c 	.word	0x20002a5c
    af18:	000078e5 	.word	0x000078e5
    af1c:	20002b0c 	.word	0x20002b0c
    af20:	000209e8 	.word	0x000209e8
    af24:	0001c37d 	.word	0x0001c37d
    af28:	000209f4 	.word	0x000209f4
    af2c:	0001c3b1 	.word	0x0001c3b1

0000af30 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    af30:	b590      	push	{r4, r7, lr}
    af32:	b0bb      	sub	sp, #236	; 0xec
    af34:	af02      	add	r7, sp, #8
    af36:	603a      	str	r2, [r7, #0]
    af38:	1dfb      	adds	r3, r7, #7
    af3a:	1c02      	adds	r2, r0, #0
    af3c:	701a      	strb	r2, [r3, #0]
    af3e:	1d3b      	adds	r3, r7, #4
    af40:	1c0a      	adds	r2, r1, #0
    af42:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    af44:	1dfb      	adds	r3, r7, #7
    af46:	781b      	ldrb	r3, [r3, #0]
    af48:	2b41      	cmp	r3, #65	; 0x41
    af4a:	d003      	beq.n	af54 <m2m_ip_cb+0x24>
    af4c:	1dfb      	adds	r3, r7, #7
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	2b54      	cmp	r3, #84	; 0x54
    af52:	d120      	bne.n	af96 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    af54:	23cc      	movs	r3, #204	; 0xcc
    af56:	18f9      	adds	r1, r7, r3
    af58:	6838      	ldr	r0, [r7, #0]
    af5a:	2300      	movs	r3, #0
    af5c:	2204      	movs	r2, #4
    af5e:	4c98      	ldr	r4, [pc, #608]	; (b1c0 <m2m_ip_cb+0x290>)
    af60:	47a0      	blx	r4
    af62:	1e03      	subs	r3, r0, #0
    af64:	d000      	beq.n	af68 <m2m_ip_cb+0x38>
    af66:	e275      	b.n	b454 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    af68:	23cc      	movs	r3, #204	; 0xcc
    af6a:	18fb      	adds	r3, r7, r3
    af6c:	2201      	movs	r2, #1
    af6e:	569a      	ldrsb	r2, [r3, r2]
    af70:	23c8      	movs	r3, #200	; 0xc8
    af72:	18fb      	adds	r3, r7, r3
    af74:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    af76:	4b93      	ldr	r3, [pc, #588]	; (b1c4 <m2m_ip_cb+0x294>)
    af78:	681b      	ldr	r3, [r3, #0]
    af7a:	2b00      	cmp	r3, #0
    af7c:	d100      	bne.n	af80 <m2m_ip_cb+0x50>
    af7e:	e269      	b.n	b454 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    af80:	4b90      	ldr	r3, [pc, #576]	; (b1c4 <m2m_ip_cb+0x294>)
    af82:	681b      	ldr	r3, [r3, #0]
    af84:	22cc      	movs	r2, #204	; 0xcc
    af86:	18ba      	adds	r2, r7, r2
    af88:	2000      	movs	r0, #0
    af8a:	5610      	ldrsb	r0, [r2, r0]
    af8c:	22c8      	movs	r2, #200	; 0xc8
    af8e:	18ba      	adds	r2, r7, r2
    af90:	2101      	movs	r1, #1
    af92:	4798      	blx	r3
	{
    af94:	e25e      	b.n	b454 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    af96:	1dfb      	adds	r3, r7, #7
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	2b42      	cmp	r3, #66	; 0x42
    af9c:	d120      	bne.n	afe0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    af9e:	23c4      	movs	r3, #196	; 0xc4
    afa0:	18f9      	adds	r1, r7, r3
    afa2:	6838      	ldr	r0, [r7, #0]
    afa4:	2300      	movs	r3, #0
    afa6:	2204      	movs	r2, #4
    afa8:	4c85      	ldr	r4, [pc, #532]	; (b1c0 <m2m_ip_cb+0x290>)
    afaa:	47a0      	blx	r4
    afac:	1e03      	subs	r3, r0, #0
    afae:	d000      	beq.n	afb2 <m2m_ip_cb+0x82>
    afb0:	e257      	b.n	b462 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    afb2:	23c4      	movs	r3, #196	; 0xc4
    afb4:	18fb      	adds	r3, r7, r3
    afb6:	2201      	movs	r2, #1
    afb8:	569a      	ldrsb	r2, [r3, r2]
    afba:	23c0      	movs	r3, #192	; 0xc0
    afbc:	18fb      	adds	r3, r7, r3
    afbe:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    afc0:	4b80      	ldr	r3, [pc, #512]	; (b1c4 <m2m_ip_cb+0x294>)
    afc2:	681b      	ldr	r3, [r3, #0]
    afc4:	2b00      	cmp	r3, #0
    afc6:	d100      	bne.n	afca <m2m_ip_cb+0x9a>
    afc8:	e24b      	b.n	b462 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    afca:	4b7e      	ldr	r3, [pc, #504]	; (b1c4 <m2m_ip_cb+0x294>)
    afcc:	681b      	ldr	r3, [r3, #0]
    afce:	22c4      	movs	r2, #196	; 0xc4
    afd0:	18ba      	adds	r2, r7, r2
    afd2:	2000      	movs	r0, #0
    afd4:	5610      	ldrsb	r0, [r2, r0]
    afd6:	22c0      	movs	r2, #192	; 0xc0
    afd8:	18ba      	adds	r2, r7, r2
    afda:	2102      	movs	r1, #2
    afdc:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    afde:	e240      	b.n	b462 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    afe0:	1dfb      	adds	r3, r7, #7
    afe2:	781b      	ldrb	r3, [r3, #0]
    afe4:	2b43      	cmp	r3, #67	; 0x43
    afe6:	d000      	beq.n	afea <m2m_ip_cb+0xba>
    afe8:	e086      	b.n	b0f8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    afea:	23b4      	movs	r3, #180	; 0xb4
    afec:	18f9      	adds	r1, r7, r3
    afee:	6838      	ldr	r0, [r7, #0]
    aff0:	2300      	movs	r3, #0
    aff2:	220c      	movs	r2, #12
    aff4:	4c72      	ldr	r4, [pc, #456]	; (b1c0 <m2m_ip_cb+0x290>)
    aff6:	47a0      	blx	r4
    aff8:	1e03      	subs	r3, r0, #0
    affa:	d000      	beq.n	affe <m2m_ip_cb+0xce>
    affc:	e231      	b.n	b462 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    affe:	23b4      	movs	r3, #180	; 0xb4
    b000:	18fb      	adds	r3, r7, r3
    b002:	7a5b      	ldrb	r3, [r3, #9]
    b004:	b25b      	sxtb	r3, r3
    b006:	2b00      	cmp	r3, #0
    b008:	db4f      	blt.n	b0aa <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    b00a:	23b4      	movs	r3, #180	; 0xb4
    b00c:	18fb      	adds	r3, r7, r3
    b00e:	7a5b      	ldrb	r3, [r3, #9]
    b010:	b25b      	sxtb	r3, r3
    b012:	0018      	movs	r0, r3
    b014:	23b4      	movs	r3, #180	; 0xb4
    b016:	18fb      	adds	r3, r7, r3
    b018:	7a1b      	ldrb	r3, [r3, #8]
    b01a:	b25b      	sxtb	r3, r3
    b01c:	4a6a      	ldr	r2, [pc, #424]	; (b1c8 <m2m_ip_cb+0x298>)
    b01e:	011b      	lsls	r3, r3, #4
    b020:	18d3      	adds	r3, r2, r3
    b022:	330b      	adds	r3, #11
    b024:	781b      	ldrb	r3, [r3, #0]
    b026:	b2d9      	uxtb	r1, r3
    b028:	4a67      	ldr	r2, [pc, #412]	; (b1c8 <m2m_ip_cb+0x298>)
    b02a:	0103      	lsls	r3, r0, #4
    b02c:	18d3      	adds	r3, r2, r3
    b02e:	330b      	adds	r3, #11
    b030:	1c0a      	adds	r2, r1, #0
    b032:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    b034:	23b4      	movs	r3, #180	; 0xb4
    b036:	18fb      	adds	r3, r7, r3
    b038:	7a5b      	ldrb	r3, [r3, #9]
    b03a:	b25b      	sxtb	r3, r3
    b03c:	4a62      	ldr	r2, [pc, #392]	; (b1c8 <m2m_ip_cb+0x298>)
    b03e:	011b      	lsls	r3, r3, #4
    b040:	18d3      	adds	r3, r2, r3
    b042:	330a      	adds	r3, #10
    b044:	2201      	movs	r2, #1
    b046:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b048:	23b4      	movs	r3, #180	; 0xb4
    b04a:	18fb      	adds	r3, r7, r3
    b04c:	7a5b      	ldrb	r3, [r3, #9]
    b04e:	b25b      	sxtb	r3, r3
    b050:	0018      	movs	r0, r3
    b052:	23b4      	movs	r3, #180	; 0xb4
    b054:	18fb      	adds	r3, r7, r3
    b056:	895b      	ldrh	r3, [r3, #10]
    b058:	3b08      	subs	r3, #8
    b05a:	b299      	uxth	r1, r3
    b05c:	4a5a      	ldr	r2, [pc, #360]	; (b1c8 <m2m_ip_cb+0x298>)
    b05e:	0103      	lsls	r3, r0, #4
    b060:	18d3      	adds	r3, r2, r3
    b062:	3308      	adds	r3, #8
    b064:	1c0a      	adds	r2, r1, #0
    b066:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    b068:	4b58      	ldr	r3, [pc, #352]	; (b1cc <m2m_ip_cb+0x29c>)
    b06a:	881b      	ldrh	r3, [r3, #0]
    b06c:	b29b      	uxth	r3, r3
    b06e:	3301      	adds	r3, #1
    b070:	b29a      	uxth	r2, r3
    b072:	4b56      	ldr	r3, [pc, #344]	; (b1cc <m2m_ip_cb+0x29c>)
    b074:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    b076:	4b55      	ldr	r3, [pc, #340]	; (b1cc <m2m_ip_cb+0x29c>)
    b078:	881b      	ldrh	r3, [r3, #0]
    b07a:	b29b      	uxth	r3, r3
    b07c:	2b00      	cmp	r3, #0
    b07e:	d106      	bne.n	b08e <m2m_ip_cb+0x15e>
					++gu16SessionID;
    b080:	4b52      	ldr	r3, [pc, #328]	; (b1cc <m2m_ip_cb+0x29c>)
    b082:	881b      	ldrh	r3, [r3, #0]
    b084:	b29b      	uxth	r3, r3
    b086:	3301      	adds	r3, #1
    b088:	b29a      	uxth	r2, r3
    b08a:	4b50      	ldr	r3, [pc, #320]	; (b1cc <m2m_ip_cb+0x29c>)
    b08c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    b08e:	23b4      	movs	r3, #180	; 0xb4
    b090:	18fb      	adds	r3, r7, r3
    b092:	7a5b      	ldrb	r3, [r3, #9]
    b094:	b25b      	sxtb	r3, r3
    b096:	0018      	movs	r0, r3
    b098:	4b4c      	ldr	r3, [pc, #304]	; (b1cc <m2m_ip_cb+0x29c>)
    b09a:	881b      	ldrh	r3, [r3, #0]
    b09c:	b299      	uxth	r1, r3
    b09e:	4a4a      	ldr	r2, [pc, #296]	; (b1c8 <m2m_ip_cb+0x298>)
    b0a0:	0103      	lsls	r3, r0, #4
    b0a2:	18d3      	adds	r3, r2, r3
    b0a4:	3306      	adds	r3, #6
    b0a6:	1c0a      	adds	r2, r1, #0
    b0a8:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    b0aa:	23b4      	movs	r3, #180	; 0xb4
    b0ac:	18fb      	adds	r3, r7, r3
    b0ae:	2209      	movs	r2, #9
    b0b0:	569a      	ldrsb	r2, [r3, r2]
    b0b2:	23a0      	movs	r3, #160	; 0xa0
    b0b4:	18fb      	adds	r3, r7, r3
    b0b6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    b0b8:	23a0      	movs	r3, #160	; 0xa0
    b0ba:	18fb      	adds	r3, r7, r3
    b0bc:	2202      	movs	r2, #2
    b0be:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    b0c0:	23b4      	movs	r3, #180	; 0xb4
    b0c2:	18fb      	adds	r3, r7, r3
    b0c4:	885a      	ldrh	r2, [r3, #2]
    b0c6:	23a0      	movs	r3, #160	; 0xa0
    b0c8:	18fb      	adds	r3, r7, r3
    b0ca:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    b0cc:	23b4      	movs	r3, #180	; 0xb4
    b0ce:	18fb      	adds	r3, r7, r3
    b0d0:	685a      	ldr	r2, [r3, #4]
    b0d2:	23a0      	movs	r3, #160	; 0xa0
    b0d4:	18fb      	adds	r3, r7, r3
    b0d6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    b0d8:	4b3a      	ldr	r3, [pc, #232]	; (b1c4 <m2m_ip_cb+0x294>)
    b0da:	681b      	ldr	r3, [r3, #0]
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d100      	bne.n	b0e2 <m2m_ip_cb+0x1b2>
    b0e0:	e1bf      	b.n	b462 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    b0e2:	4b38      	ldr	r3, [pc, #224]	; (b1c4 <m2m_ip_cb+0x294>)
    b0e4:	681b      	ldr	r3, [r3, #0]
    b0e6:	22b4      	movs	r2, #180	; 0xb4
    b0e8:	18ba      	adds	r2, r7, r2
    b0ea:	2008      	movs	r0, #8
    b0ec:	5610      	ldrsb	r0, [r2, r0]
    b0ee:	22a0      	movs	r2, #160	; 0xa0
    b0f0:	18ba      	adds	r2, r7, r2
    b0f2:	2104      	movs	r1, #4
    b0f4:	4798      	blx	r3
}
    b0f6:	e1b4      	b.n	b462 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    b0f8:	1dfb      	adds	r3, r7, #7
    b0fa:	781b      	ldrb	r3, [r3, #0]
    b0fc:	2b44      	cmp	r3, #68	; 0x44
    b0fe:	d003      	beq.n	b108 <m2m_ip_cb+0x1d8>
    b100:	1dfb      	adds	r3, r7, #7
    b102:	781b      	ldrb	r3, [r3, #0]
    b104:	2b4b      	cmp	r3, #75	; 0x4b
    b106:	d13d      	bne.n	b184 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    b108:	239c      	movs	r3, #156	; 0x9c
    b10a:	18f9      	adds	r1, r7, r3
    b10c:	6838      	ldr	r0, [r7, #0]
    b10e:	2300      	movs	r3, #0
    b110:	2204      	movs	r2, #4
    b112:	4c2b      	ldr	r4, [pc, #172]	; (b1c0 <m2m_ip_cb+0x290>)
    b114:	47a0      	blx	r4
    b116:	1e03      	subs	r3, r0, #0
    b118:	d000      	beq.n	b11c <m2m_ip_cb+0x1ec>
    b11a:	e19d      	b.n	b458 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    b11c:	239c      	movs	r3, #156	; 0x9c
    b11e:	18fb      	adds	r3, r7, r3
    b120:	2200      	movs	r2, #0
    b122:	569a      	ldrsb	r2, [r3, r2]
    b124:	2398      	movs	r3, #152	; 0x98
    b126:	18fb      	adds	r3, r7, r3
    b128:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    b12a:	239c      	movs	r3, #156	; 0x9c
    b12c:	18fb      	adds	r3, r7, r3
    b12e:	2201      	movs	r2, #1
    b130:	569a      	ldrsb	r2, [r3, r2]
    b132:	2398      	movs	r3, #152	; 0x98
    b134:	18fb      	adds	r3, r7, r3
    b136:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    b138:	239c      	movs	r3, #156	; 0x9c
    b13a:	18fb      	adds	r3, r7, r3
    b13c:	785b      	ldrb	r3, [r3, #1]
    b13e:	b25b      	sxtb	r3, r3
    b140:	2b00      	cmp	r3, #0
    b142:	d10f      	bne.n	b164 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b144:	239c      	movs	r3, #156	; 0x9c
    b146:	18fb      	adds	r3, r7, r3
    b148:	781b      	ldrb	r3, [r3, #0]
    b14a:	b25b      	sxtb	r3, r3
    b14c:	0018      	movs	r0, r3
    b14e:	239c      	movs	r3, #156	; 0x9c
    b150:	18fb      	adds	r3, r7, r3
    b152:	885b      	ldrh	r3, [r3, #2]
    b154:	3b08      	subs	r3, #8
    b156:	b299      	uxth	r1, r3
    b158:	4a1b      	ldr	r2, [pc, #108]	; (b1c8 <m2m_ip_cb+0x298>)
    b15a:	0103      	lsls	r3, r0, #4
    b15c:	18d3      	adds	r3, r2, r3
    b15e:	3308      	adds	r3, #8
    b160:	1c0a      	adds	r2, r1, #0
    b162:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    b164:	4b17      	ldr	r3, [pc, #92]	; (b1c4 <m2m_ip_cb+0x294>)
    b166:	681b      	ldr	r3, [r3, #0]
    b168:	2b00      	cmp	r3, #0
    b16a:	d100      	bne.n	b16e <m2m_ip_cb+0x23e>
    b16c:	e174      	b.n	b458 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    b16e:	4b15      	ldr	r3, [pc, #84]	; (b1c4 <m2m_ip_cb+0x294>)
    b170:	681b      	ldr	r3, [r3, #0]
    b172:	229c      	movs	r2, #156	; 0x9c
    b174:	18ba      	adds	r2, r7, r2
    b176:	2000      	movs	r0, #0
    b178:	5610      	ldrsb	r0, [r2, r0]
    b17a:	2298      	movs	r2, #152	; 0x98
    b17c:	18ba      	adds	r2, r7, r2
    b17e:	2105      	movs	r1, #5
    b180:	4798      	blx	r3
	{
    b182:	e169      	b.n	b458 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    b184:	1dfb      	adds	r3, r7, #7
    b186:	781b      	ldrb	r3, [r3, #0]
    b188:	2b4a      	cmp	r3, #74	; 0x4a
    b18a:	d123      	bne.n	b1d4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    b18c:	230c      	movs	r3, #12
    b18e:	18f9      	adds	r1, r7, r3
    b190:	6838      	ldr	r0, [r7, #0]
    b192:	2300      	movs	r3, #0
    b194:	2244      	movs	r2, #68	; 0x44
    b196:	4c0a      	ldr	r4, [pc, #40]	; (b1c0 <m2m_ip_cb+0x290>)
    b198:	47a0      	blx	r4
    b19a:	1e03      	subs	r3, r0, #0
    b19c:	d000      	beq.n	b1a0 <m2m_ip_cb+0x270>
    b19e:	e160      	b.n	b462 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    b1a0:	4b0b      	ldr	r3, [pc, #44]	; (b1d0 <m2m_ip_cb+0x2a0>)
    b1a2:	681b      	ldr	r3, [r3, #0]
    b1a4:	2b00      	cmp	r3, #0
    b1a6:	d100      	bne.n	b1aa <m2m_ip_cb+0x27a>
    b1a8:	e15b      	b.n	b462 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    b1aa:	4b09      	ldr	r3, [pc, #36]	; (b1d0 <m2m_ip_cb+0x2a0>)
    b1ac:	681a      	ldr	r2, [r3, #0]
    b1ae:	230c      	movs	r3, #12
    b1b0:	18fb      	adds	r3, r7, r3
    b1b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    b1b4:	230c      	movs	r3, #12
    b1b6:	18fb      	adds	r3, r7, r3
    b1b8:	0018      	movs	r0, r3
    b1ba:	4790      	blx	r2
}
    b1bc:	e151      	b.n	b462 <m2m_ip_cb+0x532>
    b1be:	46c0      	nop			; (mov r8, r8)
    b1c0:	000078e5 	.word	0x000078e5
    b1c4:	20002b0c 	.word	0x20002b0c
    b1c8:	20002a5c 	.word	0x20002a5c
    b1cc:	20000556 	.word	0x20000556
    b1d0:	20002b14 	.word	0x20002b14
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    b1d4:	1dfb      	adds	r3, r7, #7
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	2b46      	cmp	r3, #70	; 0x46
    b1da:	d008      	beq.n	b1ee <m2m_ip_cb+0x2be>
    b1dc:	1dfb      	adds	r3, r7, #7
    b1de:	781b      	ldrb	r3, [r3, #0]
    b1e0:	2b48      	cmp	r3, #72	; 0x48
    b1e2:	d004      	beq.n	b1ee <m2m_ip_cb+0x2be>
    b1e4:	1dfb      	adds	r3, r7, #7
    b1e6:	781b      	ldrb	r3, [r3, #0]
    b1e8:	2b4d      	cmp	r3, #77	; 0x4d
    b1ea:	d000      	beq.n	b1ee <m2m_ip_cb+0x2be>
    b1ec:	e0b4      	b.n	b358 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    b1ee:	23df      	movs	r3, #223	; 0xdf
    b1f0:	18fb      	adds	r3, r7, r3
    b1f2:	2206      	movs	r2, #6
    b1f4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    b1f6:	1dfb      	adds	r3, r7, #7
    b1f8:	781b      	ldrb	r3, [r3, #0]
    b1fa:	2b48      	cmp	r3, #72	; 0x48
    b1fc:	d103      	bne.n	b206 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    b1fe:	23df      	movs	r3, #223	; 0xdf
    b200:	18fb      	adds	r3, r7, r3
    b202:	2209      	movs	r2, #9
    b204:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    b206:	23d8      	movs	r3, #216	; 0xd8
    b208:	18fb      	adds	r3, r7, r3
    b20a:	2210      	movs	r2, #16
    b20c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    b20e:	23d8      	movs	r3, #216	; 0xd8
    b210:	18fb      	adds	r3, r7, r3
    b212:	881a      	ldrh	r2, [r3, #0]
    b214:	2388      	movs	r3, #136	; 0x88
    b216:	18f9      	adds	r1, r7, r3
    b218:	6838      	ldr	r0, [r7, #0]
    b21a:	2300      	movs	r3, #0
    b21c:	4c93      	ldr	r4, [pc, #588]	; (b46c <m2m_ip_cb+0x53c>)
    b21e:	47a0      	blx	r4
    b220:	1e03      	subs	r3, r0, #0
    b222:	d000      	beq.n	b226 <m2m_ip_cb+0x2f6>
    b224:	e11a      	b.n	b45c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    b226:	23d6      	movs	r3, #214	; 0xd6
    b228:	18fb      	adds	r3, r7, r3
    b22a:	2200      	movs	r2, #0
    b22c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    b22e:	23d5      	movs	r3, #213	; 0xd5
    b230:	18fb      	adds	r3, r7, r3
    b232:	2288      	movs	r2, #136	; 0x88
    b234:	18ba      	adds	r2, r7, r2
    b236:	7b12      	ldrb	r2, [r2, #12]
    b238:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    b23a:	23d6      	movs	r3, #214	; 0xd6
    b23c:	18fb      	adds	r3, r7, r3
    b23e:	2288      	movs	r2, #136	; 0x88
    b240:	18ba      	adds	r2, r7, r2
    b242:	89d2      	ldrh	r2, [r2, #14]
    b244:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    b246:	23d5      	movs	r3, #213	; 0xd5
    b248:	18fb      	adds	r3, r7, r3
    b24a:	781b      	ldrb	r3, [r3, #0]
    b24c:	b25b      	sxtb	r3, r3
    b24e:	4a88      	ldr	r2, [pc, #544]	; (b470 <m2m_ip_cb+0x540>)
    b250:	011b      	lsls	r3, r3, #4
    b252:	18d3      	adds	r3, r2, r3
    b254:	330c      	adds	r3, #12
    b256:	2200      	movs	r2, #0
    b258:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    b25a:	23d2      	movs	r3, #210	; 0xd2
    b25c:	18fb      	adds	r3, r7, r3
    b25e:	2288      	movs	r2, #136	; 0x88
    b260:	18ba      	adds	r2, r7, r2
    b262:	8912      	ldrh	r2, [r2, #8]
    b264:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    b266:	23d0      	movs	r3, #208	; 0xd0
    b268:	18fb      	adds	r3, r7, r3
    b26a:	2288      	movs	r2, #136	; 0x88
    b26c:	18ba      	adds	r2, r7, r2
    b26e:	8952      	ldrh	r2, [r2, #10]
    b270:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    b272:	2388      	movs	r3, #136	; 0x88
    b274:	18fb      	adds	r3, r7, r3
    b276:	885a      	ldrh	r2, [r3, #2]
    b278:	2370      	movs	r3, #112	; 0x70
    b27a:	18fb      	adds	r3, r7, r3
    b27c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    b27e:	2388      	movs	r3, #136	; 0x88
    b280:	18fb      	adds	r3, r7, r3
    b282:	685a      	ldr	r2, [r3, #4]
    b284:	2370      	movs	r3, #112	; 0x70
    b286:	18fb      	adds	r3, r7, r3
    b288:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b28a:	23d5      	movs	r3, #213	; 0xd5
    b28c:	18fb      	adds	r3, r7, r3
    b28e:	781b      	ldrb	r3, [r3, #0]
    b290:	b25b      	sxtb	r3, r3
    b292:	4a77      	ldr	r2, [pc, #476]	; (b470 <m2m_ip_cb+0x540>)
    b294:	011b      	lsls	r3, r3, #4
    b296:	18d3      	adds	r3, r2, r3
    b298:	3306      	adds	r3, #6
    b29a:	881b      	ldrh	r3, [r3, #0]
    b29c:	b29b      	uxth	r3, r3
    b29e:	22d6      	movs	r2, #214	; 0xd6
    b2a0:	18ba      	adds	r2, r7, r2
    b2a2:	8812      	ldrh	r2, [r2, #0]
    b2a4:	429a      	cmp	r2, r3
    b2a6:	d148      	bne.n	b33a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    b2a8:	23d2      	movs	r3, #210	; 0xd2
    b2aa:	18fb      	adds	r3, r7, r3
    b2ac:	2200      	movs	r2, #0
    b2ae:	5e9b      	ldrsh	r3, [r3, r2]
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	dd25      	ble.n	b300 <m2m_ip_cb+0x3d0>
    b2b4:	23d2      	movs	r3, #210	; 0xd2
    b2b6:	18fb      	adds	r3, r7, r3
    b2b8:	2200      	movs	r2, #0
    b2ba:	5e9a      	ldrsh	r2, [r3, r2]
    b2bc:	1d3b      	adds	r3, r7, #4
    b2be:	881b      	ldrh	r3, [r3, #0]
    b2c0:	429a      	cmp	r2, r3
    b2c2:	da1d      	bge.n	b300 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    b2c4:	23d0      	movs	r3, #208	; 0xd0
    b2c6:	18fb      	adds	r3, r7, r3
    b2c8:	881b      	ldrh	r3, [r3, #0]
    b2ca:	683a      	ldr	r2, [r7, #0]
    b2cc:	18d3      	adds	r3, r2, r3
    b2ce:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    b2d0:	23d8      	movs	r3, #216	; 0xd8
    b2d2:	18fb      	adds	r3, r7, r3
    b2d4:	22d2      	movs	r2, #210	; 0xd2
    b2d6:	18ba      	adds	r2, r7, r2
    b2d8:	8812      	ldrh	r2, [r2, #0]
    b2da:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    b2dc:	683c      	ldr	r4, [r7, #0]
    b2de:	23df      	movs	r3, #223	; 0xdf
    b2e0:	18fb      	adds	r3, r7, r3
    b2e2:	781a      	ldrb	r2, [r3, #0]
    b2e4:	2370      	movs	r3, #112	; 0x70
    b2e6:	18f9      	adds	r1, r7, r3
    b2e8:	23d5      	movs	r3, #213	; 0xd5
    b2ea:	18fb      	adds	r3, r7, r3
    b2ec:	2000      	movs	r0, #0
    b2ee:	5618      	ldrsb	r0, [r3, r0]
    b2f0:	23d8      	movs	r3, #216	; 0xd8
    b2f2:	18fb      	adds	r3, r7, r3
    b2f4:	881b      	ldrh	r3, [r3, #0]
    b2f6:	9300      	str	r3, [sp, #0]
    b2f8:	0023      	movs	r3, r4
    b2fa:	4c5e      	ldr	r4, [pc, #376]	; (b474 <m2m_ip_cb+0x544>)
    b2fc:	47a0      	blx	r4
	{
    b2fe:	e0ad      	b.n	b45c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    b300:	2370      	movs	r3, #112	; 0x70
    b302:	18fb      	adds	r3, r7, r3
    b304:	22d2      	movs	r2, #210	; 0xd2
    b306:	18ba      	adds	r2, r7, r2
    b308:	8812      	ldrh	r2, [r2, #0]
    b30a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    b30c:	2370      	movs	r3, #112	; 0x70
    b30e:	18fb      	adds	r3, r7, r3
    b310:	2200      	movs	r2, #0
    b312:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    b314:	4b58      	ldr	r3, [pc, #352]	; (b478 <m2m_ip_cb+0x548>)
    b316:	681b      	ldr	r3, [r3, #0]
    b318:	2b00      	cmp	r3, #0
    b31a:	d100      	bne.n	b31e <m2m_ip_cb+0x3ee>
    b31c:	e09e      	b.n	b45c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    b31e:	4b56      	ldr	r3, [pc, #344]	; (b478 <m2m_ip_cb+0x548>)
    b320:	681b      	ldr	r3, [r3, #0]
    b322:	2270      	movs	r2, #112	; 0x70
    b324:	18bc      	adds	r4, r7, r2
    b326:	22df      	movs	r2, #223	; 0xdf
    b328:	18ba      	adds	r2, r7, r2
    b32a:	7811      	ldrb	r1, [r2, #0]
    b32c:	22d5      	movs	r2, #213	; 0xd5
    b32e:	18ba      	adds	r2, r7, r2
    b330:	2000      	movs	r0, #0
    b332:	5610      	ldrsb	r0, [r2, r0]
    b334:	0022      	movs	r2, r4
    b336:	4798      	blx	r3
	{
    b338:	e090      	b.n	b45c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    b33a:	23d8      	movs	r3, #216	; 0xd8
    b33c:	18fa      	adds	r2, r7, r3
    b33e:	1d3b      	adds	r3, r7, #4
    b340:	8812      	ldrh	r2, [r2, #0]
    b342:	881b      	ldrh	r3, [r3, #0]
    b344:	429a      	cmp	r2, r3
    b346:	d300      	bcc.n	b34a <m2m_ip_cb+0x41a>
    b348:	e088      	b.n	b45c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    b34a:	2301      	movs	r3, #1
    b34c:	2200      	movs	r2, #0
    b34e:	2100      	movs	r1, #0
    b350:	2000      	movs	r0, #0
    b352:	4c46      	ldr	r4, [pc, #280]	; (b46c <m2m_ip_cb+0x53c>)
    b354:	47a0      	blx	r4
	{
    b356:	e081      	b.n	b45c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    b358:	1dfb      	adds	r3, r7, #7
    b35a:	781b      	ldrb	r3, [r3, #0]
    b35c:	2b45      	cmp	r3, #69	; 0x45
    b35e:	d007      	beq.n	b370 <m2m_ip_cb+0x440>
    b360:	1dfb      	adds	r3, r7, #7
    b362:	781b      	ldrb	r3, [r3, #0]
    b364:	2b47      	cmp	r3, #71	; 0x47
    b366:	d003      	beq.n	b370 <m2m_ip_cb+0x440>
    b368:	1dfb      	adds	r3, r7, #7
    b36a:	781b      	ldrb	r3, [r3, #0]
    b36c:	2b4c      	cmp	r3, #76	; 0x4c
    b36e:	d14c      	bne.n	b40a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    b370:	23de      	movs	r3, #222	; 0xde
    b372:	18fb      	adds	r3, r7, r3
    b374:	2207      	movs	r2, #7
    b376:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    b378:	1dfb      	adds	r3, r7, #7
    b37a:	781b      	ldrb	r3, [r3, #0]
    b37c:	2b47      	cmp	r3, #71	; 0x47
    b37e:	d103      	bne.n	b388 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    b380:	23de      	movs	r3, #222	; 0xde
    b382:	18fb      	adds	r3, r7, r3
    b384:	2208      	movs	r2, #8
    b386:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    b388:	2364      	movs	r3, #100	; 0x64
    b38a:	18f9      	adds	r1, r7, r3
    b38c:	6838      	ldr	r0, [r7, #0]
    b38e:	2300      	movs	r3, #0
    b390:	2208      	movs	r2, #8
    b392:	4c36      	ldr	r4, [pc, #216]	; (b46c <m2m_ip_cb+0x53c>)
    b394:	47a0      	blx	r4
    b396:	1e03      	subs	r3, r0, #0
    b398:	d162      	bne.n	b460 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    b39a:	23dc      	movs	r3, #220	; 0xdc
    b39c:	18fb      	adds	r3, r7, r3
    b39e:	2200      	movs	r2, #0
    b3a0:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    b3a2:	23db      	movs	r3, #219	; 0xdb
    b3a4:	18fb      	adds	r3, r7, r3
    b3a6:	2264      	movs	r2, #100	; 0x64
    b3a8:	18ba      	adds	r2, r7, r2
    b3aa:	7812      	ldrb	r2, [r2, #0]
    b3ac:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    b3ae:	23dc      	movs	r3, #220	; 0xdc
    b3b0:	18fb      	adds	r3, r7, r3
    b3b2:	2264      	movs	r2, #100	; 0x64
    b3b4:	18ba      	adds	r2, r7, r2
    b3b6:	8892      	ldrh	r2, [r2, #4]
    b3b8:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    b3ba:	2364      	movs	r3, #100	; 0x64
    b3bc:	18fb      	adds	r3, r7, r3
    b3be:	2202      	movs	r2, #2
    b3c0:	5e9a      	ldrsh	r2, [r3, r2]
    b3c2:	236e      	movs	r3, #110	; 0x6e
    b3c4:	18fb      	adds	r3, r7, r3
    b3c6:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b3c8:	23db      	movs	r3, #219	; 0xdb
    b3ca:	18fb      	adds	r3, r7, r3
    b3cc:	781b      	ldrb	r3, [r3, #0]
    b3ce:	b25b      	sxtb	r3, r3
    b3d0:	4a27      	ldr	r2, [pc, #156]	; (b470 <m2m_ip_cb+0x540>)
    b3d2:	011b      	lsls	r3, r3, #4
    b3d4:	18d3      	adds	r3, r2, r3
    b3d6:	3306      	adds	r3, #6
    b3d8:	881b      	ldrh	r3, [r3, #0]
    b3da:	b29b      	uxth	r3, r3
    b3dc:	22dc      	movs	r2, #220	; 0xdc
    b3de:	18ba      	adds	r2, r7, r2
    b3e0:	8812      	ldrh	r2, [r2, #0]
    b3e2:	429a      	cmp	r2, r3
    b3e4:	d13c      	bne.n	b460 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    b3e6:	4b24      	ldr	r3, [pc, #144]	; (b478 <m2m_ip_cb+0x548>)
    b3e8:	681b      	ldr	r3, [r3, #0]
    b3ea:	2b00      	cmp	r3, #0
    b3ec:	d038      	beq.n	b460 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    b3ee:	4b22      	ldr	r3, [pc, #136]	; (b478 <m2m_ip_cb+0x548>)
    b3f0:	681b      	ldr	r3, [r3, #0]
    b3f2:	226e      	movs	r2, #110	; 0x6e
    b3f4:	18bc      	adds	r4, r7, r2
    b3f6:	22de      	movs	r2, #222	; 0xde
    b3f8:	18ba      	adds	r2, r7, r2
    b3fa:	7811      	ldrb	r1, [r2, #0]
    b3fc:	22db      	movs	r2, #219	; 0xdb
    b3fe:	18ba      	adds	r2, r7, r2
    b400:	2000      	movs	r0, #0
    b402:	5610      	ldrsb	r0, [r2, r0]
    b404:	0022      	movs	r2, r4
    b406:	4798      	blx	r3
	{
    b408:	e02a      	b.n	b460 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    b40a:	1dfb      	adds	r3, r7, #7
    b40c:	781b      	ldrb	r3, [r3, #0]
    b40e:	2b52      	cmp	r3, #82	; 0x52
    b410:	d127      	bne.n	b462 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    b412:	2350      	movs	r3, #80	; 0x50
    b414:	18f9      	adds	r1, r7, r3
    b416:	6838      	ldr	r0, [r7, #0]
    b418:	2301      	movs	r3, #1
    b41a:	2214      	movs	r2, #20
    b41c:	4c13      	ldr	r4, [pc, #76]	; (b46c <m2m_ip_cb+0x53c>)
    b41e:	47a0      	blx	r4
    b420:	1e03      	subs	r3, r0, #0
    b422:	d11e      	bne.n	b462 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    b424:	2350      	movs	r3, #80	; 0x50
    b426:	18fb      	adds	r3, r7, r3
    b428:	685b      	ldr	r3, [r3, #4]
    b42a:	001a      	movs	r2, r3
    b42c:	4b13      	ldr	r3, [pc, #76]	; (b47c <m2m_ip_cb+0x54c>)
    b42e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    b430:	4b12      	ldr	r3, [pc, #72]	; (b47c <m2m_ip_cb+0x54c>)
    b432:	681b      	ldr	r3, [r3, #0]
    b434:	2b00      	cmp	r3, #0
    b436:	d014      	beq.n	b462 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    b438:	4b10      	ldr	r3, [pc, #64]	; (b47c <m2m_ip_cb+0x54c>)
    b43a:	681c      	ldr	r4, [r3, #0]
    b43c:	2350      	movs	r3, #80	; 0x50
    b43e:	18fb      	adds	r3, r7, r3
    b440:	6818      	ldr	r0, [r3, #0]
    b442:	2350      	movs	r3, #80	; 0x50
    b444:	18fb      	adds	r3, r7, r3
    b446:	6899      	ldr	r1, [r3, #8]
    b448:	2350      	movs	r3, #80	; 0x50
    b44a:	18fb      	adds	r3, r7, r3
    b44c:	7c1b      	ldrb	r3, [r3, #16]
    b44e:	001a      	movs	r2, r3
    b450:	47a0      	blx	r4
}
    b452:	e006      	b.n	b462 <m2m_ip_cb+0x532>
	{
    b454:	46c0      	nop			; (mov r8, r8)
    b456:	e004      	b.n	b462 <m2m_ip_cb+0x532>
	{
    b458:	46c0      	nop			; (mov r8, r8)
    b45a:	e002      	b.n	b462 <m2m_ip_cb+0x532>
	{
    b45c:	46c0      	nop			; (mov r8, r8)
    b45e:	e000      	b.n	b462 <m2m_ip_cb+0x532>
	{
    b460:	46c0      	nop			; (mov r8, r8)
}
    b462:	46c0      	nop			; (mov r8, r8)
    b464:	46bd      	mov	sp, r7
    b466:	b039      	add	sp, #228	; 0xe4
    b468:	bd90      	pop	{r4, r7, pc}
    b46a:	46c0      	nop			; (mov r8, r8)
    b46c:	000078e5 	.word	0x000078e5
    b470:	20002a5c 	.word	0x20002a5c
    b474:	0000ad35 	.word	0x0000ad35
    b478:	20002b0c 	.word	0x20002b0c
    b47c:	20002b10 	.word	0x20002b10

0000b480 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    b480:	b580      	push	{r7, lr}
    b482:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    b484:	4b0c      	ldr	r3, [pc, #48]	; (b4b8 <socketInit+0x38>)
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	b2db      	uxtb	r3, r3
    b48a:	2b00      	cmp	r3, #0
    b48c:	d110      	bne.n	b4b0 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    b48e:	4b0b      	ldr	r3, [pc, #44]	; (b4bc <socketInit+0x3c>)
    b490:	22b0      	movs	r2, #176	; 0xb0
    b492:	2100      	movs	r1, #0
    b494:	0018      	movs	r0, r3
    b496:	4b0a      	ldr	r3, [pc, #40]	; (b4c0 <socketInit+0x40>)
    b498:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    b49a:	4b0a      	ldr	r3, [pc, #40]	; (b4c4 <socketInit+0x44>)
    b49c:	0019      	movs	r1, r3
    b49e:	2002      	movs	r0, #2
    b4a0:	4b09      	ldr	r3, [pc, #36]	; (b4c8 <socketInit+0x48>)
    b4a2:	4798      	blx	r3
		gbSocketInit	= 1;
    b4a4:	4b04      	ldr	r3, [pc, #16]	; (b4b8 <socketInit+0x38>)
    b4a6:	2201      	movs	r2, #1
    b4a8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    b4aa:	4b08      	ldr	r3, [pc, #32]	; (b4cc <socketInit+0x4c>)
    b4ac:	2200      	movs	r2, #0
    b4ae:	801a      	strh	r2, [r3, #0]
	}
}
    b4b0:	46c0      	nop			; (mov r8, r8)
    b4b2:	46bd      	mov	sp, r7
    b4b4:	bd80      	pop	{r7, pc}
    b4b6:	46c0      	nop			; (mov r8, r8)
    b4b8:	20000558 	.word	0x20000558
    b4bc:	20002a5c 	.word	0x20002a5c
    b4c0:	00006d91 	.word	0x00006d91
    b4c4:	0000af31 	.word	0x0000af31
    b4c8:	00007a65 	.word	0x00007a65
    b4cc:	20000556 	.word	0x20000556

0000b4d0 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    b4d0:	b580      	push	{r7, lr}
    b4d2:	b082      	sub	sp, #8
    b4d4:	af00      	add	r7, sp, #0
    b4d6:	6078      	str	r0, [r7, #4]
    b4d8:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    b4da:	4b05      	ldr	r3, [pc, #20]	; (b4f0 <registerSocketCallback+0x20>)
    b4dc:	687a      	ldr	r2, [r7, #4]
    b4de:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    b4e0:	4b04      	ldr	r3, [pc, #16]	; (b4f4 <registerSocketCallback+0x24>)
    b4e2:	683a      	ldr	r2, [r7, #0]
    b4e4:	601a      	str	r2, [r3, #0]
}
    b4e6:	46c0      	nop			; (mov r8, r8)
    b4e8:	46bd      	mov	sp, r7
    b4ea:	b002      	add	sp, #8
    b4ec:	bd80      	pop	{r7, pc}
    b4ee:	46c0      	nop			; (mov r8, r8)
    b4f0:	20002b0c 	.word	0x20002b0c
    b4f4:	20002b14 	.word	0x20002b14

0000b4f8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    b4f8:	b590      	push	{r4, r7, lr}
    b4fa:	b08d      	sub	sp, #52	; 0x34
    b4fc:	af04      	add	r7, sp, #16
    b4fe:	0004      	movs	r4, r0
    b500:	0008      	movs	r0, r1
    b502:	0011      	movs	r1, r2
    b504:	1dbb      	adds	r3, r7, #6
    b506:	1c22      	adds	r2, r4, #0
    b508:	801a      	strh	r2, [r3, #0]
    b50a:	1d7b      	adds	r3, r7, #5
    b50c:	1c02      	adds	r2, r0, #0
    b50e:	701a      	strb	r2, [r3, #0]
    b510:	1d3b      	adds	r3, r7, #4
    b512:	1c0a      	adds	r2, r1, #0
    b514:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    b516:	231f      	movs	r3, #31
    b518:	18fb      	adds	r3, r7, r3
    b51a:	22ff      	movs	r2, #255	; 0xff
    b51c:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    b51e:	1dbb      	adds	r3, r7, #6
    b520:	881b      	ldrh	r3, [r3, #0]
    b522:	2b02      	cmp	r3, #2
    b524:	d000      	beq.n	b528 <socket+0x30>
    b526:	e0cd      	b.n	b6c4 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    b528:	1d7b      	adds	r3, r7, #5
    b52a:	781b      	ldrb	r3, [r3, #0]
    b52c:	2b01      	cmp	r3, #1
    b52e:	d135      	bne.n	b59c <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    b530:	231e      	movs	r3, #30
    b532:	18fb      	adds	r3, r7, r3
    b534:	2200      	movs	r2, #0
    b536:	701a      	strb	r2, [r3, #0]
    b538:	e02a      	b.n	b590 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    b53a:	2317      	movs	r3, #23
    b53c:	18fb      	adds	r3, r7, r3
    b53e:	4a65      	ldr	r2, [pc, #404]	; (b6d4 <socket+0x1dc>)
    b540:	7812      	ldrb	r2, [r2, #0]
    b542:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b544:	4b63      	ldr	r3, [pc, #396]	; (b6d4 <socket+0x1dc>)
    b546:	781b      	ldrb	r3, [r3, #0]
    b548:	b2db      	uxtb	r3, r3
    b54a:	011a      	lsls	r2, r3, #4
    b54c:	4b62      	ldr	r3, [pc, #392]	; (b6d8 <socket+0x1e0>)
    b54e:	18d3      	adds	r3, r2, r3
    b550:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b552:	4b60      	ldr	r3, [pc, #384]	; (b6d4 <socket+0x1dc>)
    b554:	781b      	ldrb	r3, [r3, #0]
    b556:	b2db      	uxtb	r3, r3
    b558:	1c5a      	adds	r2, r3, #1
    b55a:	4b60      	ldr	r3, [pc, #384]	; (b6dc <socket+0x1e4>)
    b55c:	2107      	movs	r1, #7
    b55e:	0010      	movs	r0, r2
    b560:	4798      	blx	r3
    b562:	000b      	movs	r3, r1
    b564:	b2da      	uxtb	r2, r3
    b566:	4b5b      	ldr	r3, [pc, #364]	; (b6d4 <socket+0x1dc>)
    b568:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    b56a:	69bb      	ldr	r3, [r7, #24]
    b56c:	7a9b      	ldrb	r3, [r3, #10]
    b56e:	b2db      	uxtb	r3, r3
    b570:	2b00      	cmp	r3, #0
    b572:	d106      	bne.n	b582 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    b574:	231f      	movs	r3, #31
    b576:	18fb      	adds	r3, r7, r3
    b578:	2217      	movs	r2, #23
    b57a:	18ba      	adds	r2, r7, r2
    b57c:	7812      	ldrb	r2, [r2, #0]
    b57e:	701a      	strb	r2, [r3, #0]
					break;
    b580:	e04c      	b.n	b61c <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    b582:	231e      	movs	r3, #30
    b584:	18fb      	adds	r3, r7, r3
    b586:	781a      	ldrb	r2, [r3, #0]
    b588:	231e      	movs	r3, #30
    b58a:	18fb      	adds	r3, r7, r3
    b58c:	3201      	adds	r2, #1
    b58e:	701a      	strb	r2, [r3, #0]
    b590:	231e      	movs	r3, #30
    b592:	18fb      	adds	r3, r7, r3
    b594:	781b      	ldrb	r3, [r3, #0]
    b596:	2b06      	cmp	r3, #6
    b598:	d9cf      	bls.n	b53a <socket+0x42>
    b59a:	e03f      	b.n	b61c <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    b59c:	1d7b      	adds	r3, r7, #5
    b59e:	781b      	ldrb	r3, [r3, #0]
    b5a0:	2b02      	cmp	r3, #2
    b5a2:	d13b      	bne.n	b61c <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    b5a4:	4b4e      	ldr	r3, [pc, #312]	; (b6e0 <socket+0x1e8>)
    b5a6:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    b5a8:	231e      	movs	r3, #30
    b5aa:	18fb      	adds	r3, r7, r3
    b5ac:	2200      	movs	r2, #0
    b5ae:	701a      	strb	r2, [r3, #0]
    b5b0:	e02f      	b.n	b612 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    b5b2:	2317      	movs	r3, #23
    b5b4:	18fb      	adds	r3, r7, r3
    b5b6:	4a4b      	ldr	r2, [pc, #300]	; (b6e4 <socket+0x1ec>)
    b5b8:	7812      	ldrb	r2, [r2, #0]
    b5ba:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b5bc:	4b49      	ldr	r3, [pc, #292]	; (b6e4 <socket+0x1ec>)
    b5be:	781b      	ldrb	r3, [r3, #0]
    b5c0:	b2db      	uxtb	r3, r3
    b5c2:	011b      	lsls	r3, r3, #4
    b5c4:	693a      	ldr	r2, [r7, #16]
    b5c6:	18d3      	adds	r3, r2, r3
    b5c8:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b5ca:	4b46      	ldr	r3, [pc, #280]	; (b6e4 <socket+0x1ec>)
    b5cc:	781b      	ldrb	r3, [r3, #0]
    b5ce:	b2db      	uxtb	r3, r3
    b5d0:	3301      	adds	r3, #1
    b5d2:	4a45      	ldr	r2, [pc, #276]	; (b6e8 <socket+0x1f0>)
    b5d4:	4013      	ands	r3, r2
    b5d6:	d504      	bpl.n	b5e2 <socket+0xea>
    b5d8:	3b01      	subs	r3, #1
    b5da:	2204      	movs	r2, #4
    b5dc:	4252      	negs	r2, r2
    b5de:	4313      	orrs	r3, r2
    b5e0:	3301      	adds	r3, #1
    b5e2:	b2da      	uxtb	r2, r3
    b5e4:	4b3f      	ldr	r3, [pc, #252]	; (b6e4 <socket+0x1ec>)
    b5e6:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    b5e8:	69bb      	ldr	r3, [r7, #24]
    b5ea:	7a9b      	ldrb	r3, [r3, #10]
    b5ec:	b2db      	uxtb	r3, r3
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d108      	bne.n	b604 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    b5f2:	2317      	movs	r3, #23
    b5f4:	18fb      	adds	r3, r7, r3
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	3307      	adds	r3, #7
    b5fa:	b2da      	uxtb	r2, r3
    b5fc:	231f      	movs	r3, #31
    b5fe:	18fb      	adds	r3, r7, r3
    b600:	701a      	strb	r2, [r3, #0]
					break;
    b602:	e00b      	b.n	b61c <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    b604:	231e      	movs	r3, #30
    b606:	18fb      	adds	r3, r7, r3
    b608:	781a      	ldrb	r2, [r3, #0]
    b60a:	231e      	movs	r3, #30
    b60c:	18fb      	adds	r3, r7, r3
    b60e:	3201      	adds	r2, #1
    b610:	701a      	strb	r2, [r3, #0]
    b612:	231e      	movs	r3, #30
    b614:	18fb      	adds	r3, r7, r3
    b616:	781b      	ldrb	r3, [r3, #0]
    b618:	2b03      	cmp	r3, #3
    b61a:	d9ca      	bls.n	b5b2 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    b61c:	231f      	movs	r3, #31
    b61e:	18fb      	adds	r3, r7, r3
    b620:	781b      	ldrb	r3, [r3, #0]
    b622:	2b7f      	cmp	r3, #127	; 0x7f
    b624:	d84e      	bhi.n	b6c4 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    b626:	69bb      	ldr	r3, [r7, #24]
    b628:	2210      	movs	r2, #16
    b62a:	2100      	movs	r1, #0
    b62c:	0018      	movs	r0, r3
    b62e:	4b2f      	ldr	r3, [pc, #188]	; (b6ec <socket+0x1f4>)
    b630:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    b632:	69bb      	ldr	r3, [r7, #24]
    b634:	2201      	movs	r2, #1
    b636:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    b638:	4b2d      	ldr	r3, [pc, #180]	; (b6f0 <socket+0x1f8>)
    b63a:	881b      	ldrh	r3, [r3, #0]
    b63c:	b29b      	uxth	r3, r3
    b63e:	3301      	adds	r3, #1
    b640:	b29a      	uxth	r2, r3
    b642:	4b2b      	ldr	r3, [pc, #172]	; (b6f0 <socket+0x1f8>)
    b644:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    b646:	4b2a      	ldr	r3, [pc, #168]	; (b6f0 <socket+0x1f8>)
    b648:	881b      	ldrh	r3, [r3, #0]
    b64a:	b29b      	uxth	r3, r3
    b64c:	2b00      	cmp	r3, #0
    b64e:	d106      	bne.n	b65e <socket+0x166>
				++gu16SessionID;
    b650:	4b27      	ldr	r3, [pc, #156]	; (b6f0 <socket+0x1f8>)
    b652:	881b      	ldrh	r3, [r3, #0]
    b654:	b29b      	uxth	r3, r3
    b656:	3301      	adds	r3, #1
    b658:	b29a      	uxth	r2, r3
    b65a:	4b25      	ldr	r3, [pc, #148]	; (b6f0 <socket+0x1f8>)
    b65c:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    b65e:	4b24      	ldr	r3, [pc, #144]	; (b6f0 <socket+0x1f8>)
    b660:	881b      	ldrh	r3, [r3, #0]
    b662:	b29a      	uxth	r2, r3
    b664:	69bb      	ldr	r3, [r7, #24]
    b666:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    b668:	4b22      	ldr	r3, [pc, #136]	; (b6f4 <socket+0x1fc>)
    b66a:	0018      	movs	r0, r3
    b66c:	4b22      	ldr	r3, [pc, #136]	; (b6f8 <socket+0x200>)
    b66e:	4798      	blx	r3
    b670:	231f      	movs	r3, #31
    b672:	18fb      	adds	r3, r7, r3
    b674:	2100      	movs	r1, #0
    b676:	5659      	ldrsb	r1, [r3, r1]
    b678:	4b1d      	ldr	r3, [pc, #116]	; (b6f0 <socket+0x1f8>)
    b67a:	881b      	ldrh	r3, [r3, #0]
    b67c:	b29b      	uxth	r3, r3
    b67e:	001a      	movs	r2, r3
    b680:	4b1e      	ldr	r3, [pc, #120]	; (b6fc <socket+0x204>)
    b682:	0018      	movs	r0, r3
    b684:	4b1c      	ldr	r3, [pc, #112]	; (b6f8 <socket+0x200>)
    b686:	4798      	blx	r3
    b688:	200d      	movs	r0, #13
    b68a:	4b1d      	ldr	r3, [pc, #116]	; (b700 <socket+0x208>)
    b68c:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    b68e:	1d3b      	adds	r3, r7, #4
    b690:	781b      	ldrb	r3, [r3, #0]
    b692:	2201      	movs	r2, #1
    b694:	4013      	ands	r3, r2
    b696:	d015      	beq.n	b6c4 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    b698:	230c      	movs	r3, #12
    b69a:	18fb      	adds	r3, r7, r3
    b69c:	221f      	movs	r2, #31
    b69e:	18ba      	adds	r2, r7, r2
    b6a0:	7812      	ldrb	r2, [r2, #0]
    b6a2:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    b6a4:	69bb      	ldr	r3, [r7, #24]
    b6a6:	2221      	movs	r2, #33	; 0x21
    b6a8:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    b6aa:	230c      	movs	r3, #12
    b6ac:	18fa      	adds	r2, r7, r3
    b6ae:	2300      	movs	r3, #0
    b6b0:	9302      	str	r3, [sp, #8]
    b6b2:	2300      	movs	r3, #0
    b6b4:	9301      	str	r3, [sp, #4]
    b6b6:	2300      	movs	r3, #0
    b6b8:	9300      	str	r3, [sp, #0]
    b6ba:	2304      	movs	r3, #4
    b6bc:	2150      	movs	r1, #80	; 0x50
    b6be:	2002      	movs	r0, #2
    b6c0:	4c10      	ldr	r4, [pc, #64]	; (b704 <socket+0x20c>)
    b6c2:	47a0      	blx	r4
			}
		}
	}
	return sock;
    b6c4:	231f      	movs	r3, #31
    b6c6:	18fb      	adds	r3, r7, r3
    b6c8:	781b      	ldrb	r3, [r3, #0]
    b6ca:	b25b      	sxtb	r3, r3
}
    b6cc:	0018      	movs	r0, r3
    b6ce:	46bd      	mov	sp, r7
    b6d0:	b009      	add	sp, #36	; 0x24
    b6d2:	bd90      	pop	{r4, r7, pc}
    b6d4:	20000559 	.word	0x20000559
    b6d8:	20002a5c 	.word	0x20002a5c
    b6dc:	0001a061 	.word	0x0001a061
    b6e0:	20002acc 	.word	0x20002acc
    b6e4:	2000055a 	.word	0x2000055a
    b6e8:	80000003 	.word	0x80000003
    b6ec:	00006d91 	.word	0x00006d91
    b6f0:	20000556 	.word	0x20000556
    b6f4:	000209e8 	.word	0x000209e8
    b6f8:	0001c37d 	.word	0x0001c37d
    b6fc:	00020a08 	.word	0x00020a08
    b700:	0001c3b1 	.word	0x0001c3b1
    b704:	00006ff1 	.word	0x00006ff1

0000b708 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    b708:	b5b0      	push	{r4, r5, r7, lr}
    b70a:	b08a      	sub	sp, #40	; 0x28
    b70c:	af04      	add	r7, sp, #16
    b70e:	6039      	str	r1, [r7, #0]
    b710:	0011      	movs	r1, r2
    b712:	1dfb      	adds	r3, r7, #7
    b714:	1c02      	adds	r2, r0, #0
    b716:	701a      	strb	r2, [r3, #0]
    b718:	1dbb      	adds	r3, r7, #6
    b71a:	1c0a      	adds	r2, r1, #0
    b71c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    b71e:	2317      	movs	r3, #23
    b720:	18fb      	adds	r3, r7, r3
    b722:	22fa      	movs	r2, #250	; 0xfa
    b724:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    b726:	1dfb      	adds	r3, r7, #7
    b728:	781b      	ldrb	r3, [r3, #0]
    b72a:	2b7f      	cmp	r3, #127	; 0x7f
    b72c:	d867      	bhi.n	b7fe <connect+0xf6>
    b72e:	683b      	ldr	r3, [r7, #0]
    b730:	2b00      	cmp	r3, #0
    b732:	d064      	beq.n	b7fe <connect+0xf6>
    b734:	1dfb      	adds	r3, r7, #7
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	b25b      	sxtb	r3, r3
    b73a:	4a35      	ldr	r2, [pc, #212]	; (b810 <connect+0x108>)
    b73c:	011b      	lsls	r3, r3, #4
    b73e:	18d3      	adds	r3, r2, r3
    b740:	330a      	adds	r3, #10
    b742:	781b      	ldrb	r3, [r3, #0]
    b744:	b2db      	uxtb	r3, r3
    b746:	2b01      	cmp	r3, #1
    b748:	d159      	bne.n	b7fe <connect+0xf6>
    b74a:	1dbb      	adds	r3, r7, #6
    b74c:	781b      	ldrb	r3, [r3, #0]
    b74e:	2b00      	cmp	r3, #0
    b750:	d055      	beq.n	b7fe <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    b752:	2316      	movs	r3, #22
    b754:	18fb      	adds	r3, r7, r3
    b756:	2244      	movs	r2, #68	; 0x44
    b758:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    b75a:	1dfb      	adds	r3, r7, #7
    b75c:	781b      	ldrb	r3, [r3, #0]
    b75e:	b25b      	sxtb	r3, r3
    b760:	4a2b      	ldr	r2, [pc, #172]	; (b810 <connect+0x108>)
    b762:	011b      	lsls	r3, r3, #4
    b764:	18d3      	adds	r3, r2, r3
    b766:	330b      	adds	r3, #11
    b768:	781b      	ldrb	r3, [r3, #0]
    b76a:	b2db      	uxtb	r3, r3
    b76c:	001a      	movs	r2, r3
    b76e:	2301      	movs	r3, #1
    b770:	4013      	ands	r3, r2
    b772:	d00f      	beq.n	b794 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    b774:	2316      	movs	r3, #22
    b776:	18fb      	adds	r3, r7, r3
    b778:	224b      	movs	r2, #75	; 0x4b
    b77a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    b77c:	1dfb      	adds	r3, r7, #7
    b77e:	781b      	ldrb	r3, [r3, #0]
    b780:	b25b      	sxtb	r3, r3
    b782:	4a23      	ldr	r2, [pc, #140]	; (b810 <connect+0x108>)
    b784:	011b      	lsls	r3, r3, #4
    b786:	18d3      	adds	r3, r2, r3
    b788:	330b      	adds	r3, #11
    b78a:	781b      	ldrb	r3, [r3, #0]
    b78c:	b2da      	uxtb	r2, r3
    b78e:	2308      	movs	r3, #8
    b790:	18fb      	adds	r3, r7, r3
    b792:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    b794:	2308      	movs	r3, #8
    b796:	18fb      	adds	r3, r7, r3
    b798:	1dfa      	adds	r2, r7, #7
    b79a:	7812      	ldrb	r2, [r2, #0]
    b79c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    b79e:	6839      	ldr	r1, [r7, #0]
    b7a0:	2308      	movs	r3, #8
    b7a2:	18fb      	adds	r3, r7, r3
    b7a4:	2208      	movs	r2, #8
    b7a6:	0018      	movs	r0, r3
    b7a8:	4b1a      	ldr	r3, [pc, #104]	; (b814 <connect+0x10c>)
    b7aa:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    b7ac:	1dfb      	adds	r3, r7, #7
    b7ae:	781b      	ldrb	r3, [r3, #0]
    b7b0:	b25b      	sxtb	r3, r3
    b7b2:	4a17      	ldr	r2, [pc, #92]	; (b810 <connect+0x108>)
    b7b4:	011b      	lsls	r3, r3, #4
    b7b6:	18d3      	adds	r3, r2, r3
    b7b8:	3306      	adds	r3, #6
    b7ba:	881b      	ldrh	r3, [r3, #0]
    b7bc:	b29a      	uxth	r2, r3
    b7be:	2308      	movs	r3, #8
    b7c0:	18fb      	adds	r3, r7, r3
    b7c2:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    b7c4:	2317      	movs	r3, #23
    b7c6:	18fc      	adds	r4, r7, r3
    b7c8:	2308      	movs	r3, #8
    b7ca:	18fa      	adds	r2, r7, r3
    b7cc:	2316      	movs	r3, #22
    b7ce:	18fb      	adds	r3, r7, r3
    b7d0:	7819      	ldrb	r1, [r3, #0]
    b7d2:	2300      	movs	r3, #0
    b7d4:	9302      	str	r3, [sp, #8]
    b7d6:	2300      	movs	r3, #0
    b7d8:	9301      	str	r3, [sp, #4]
    b7da:	2300      	movs	r3, #0
    b7dc:	9300      	str	r3, [sp, #0]
    b7de:	230c      	movs	r3, #12
    b7e0:	2002      	movs	r0, #2
    b7e2:	4d0d      	ldr	r5, [pc, #52]	; (b818 <connect+0x110>)
    b7e4:	47a8      	blx	r5
    b7e6:	0003      	movs	r3, r0
    b7e8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    b7ea:	2317      	movs	r3, #23
    b7ec:	18fb      	adds	r3, r7, r3
    b7ee:	781b      	ldrb	r3, [r3, #0]
    b7f0:	b25b      	sxtb	r3, r3
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	d003      	beq.n	b7fe <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    b7f6:	2317      	movs	r3, #23
    b7f8:	18fb      	adds	r3, r7, r3
    b7fa:	22f7      	movs	r2, #247	; 0xf7
    b7fc:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    b7fe:	2317      	movs	r3, #23
    b800:	18fb      	adds	r3, r7, r3
    b802:	781b      	ldrb	r3, [r3, #0]
    b804:	b25b      	sxtb	r3, r3
}
    b806:	0018      	movs	r0, r3
    b808:	46bd      	mov	sp, r7
    b80a:	b006      	add	sp, #24
    b80c:	bdb0      	pop	{r4, r5, r7, pc}
    b80e:	46c0      	nop			; (mov r8, r8)
    b810:	20002a5c 	.word	0x20002a5c
    b814:	00006d55 	.word	0x00006d55
    b818:	00006ff1 	.word	0x00006ff1

0000b81c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    b81c:	b590      	push	{r4, r7, lr}
    b81e:	b08f      	sub	sp, #60	; 0x3c
    b820:	af04      	add	r7, sp, #16
    b822:	0004      	movs	r4, r0
    b824:	60b9      	str	r1, [r7, #8]
    b826:	0010      	movs	r0, r2
    b828:	0019      	movs	r1, r3
    b82a:	230f      	movs	r3, #15
    b82c:	18fb      	adds	r3, r7, r3
    b82e:	1c22      	adds	r2, r4, #0
    b830:	701a      	strb	r2, [r3, #0]
    b832:	230c      	movs	r3, #12
    b834:	18fb      	adds	r3, r7, r3
    b836:	1c02      	adds	r2, r0, #0
    b838:	801a      	strh	r2, [r3, #0]
    b83a:	1dbb      	adds	r3, r7, #6
    b83c:	1c0a      	adds	r2, r1, #0
    b83e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b840:	2326      	movs	r3, #38	; 0x26
    b842:	18fb      	adds	r3, r7, r3
    b844:	2206      	movs	r2, #6
    b846:	4252      	negs	r2, r2
    b848:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    b84a:	230f      	movs	r3, #15
    b84c:	18fb      	adds	r3, r7, r3
    b84e:	781b      	ldrb	r3, [r3, #0]
    b850:	2b7f      	cmp	r3, #127	; 0x7f
    b852:	d900      	bls.n	b856 <send+0x3a>
    b854:	e087      	b.n	b966 <send+0x14a>
    b856:	68bb      	ldr	r3, [r7, #8]
    b858:	2b00      	cmp	r3, #0
    b85a:	d100      	bne.n	b85e <send+0x42>
    b85c:	e083      	b.n	b966 <send+0x14a>
    b85e:	230c      	movs	r3, #12
    b860:	18fb      	adds	r3, r7, r3
    b862:	881a      	ldrh	r2, [r3, #0]
    b864:	23af      	movs	r3, #175	; 0xaf
    b866:	00db      	lsls	r3, r3, #3
    b868:	429a      	cmp	r2, r3
    b86a:	d900      	bls.n	b86e <send+0x52>
    b86c:	e07b      	b.n	b966 <send+0x14a>
    b86e:	230f      	movs	r3, #15
    b870:	18fb      	adds	r3, r7, r3
    b872:	781b      	ldrb	r3, [r3, #0]
    b874:	b25b      	sxtb	r3, r3
    b876:	4a40      	ldr	r2, [pc, #256]	; (b978 <send+0x15c>)
    b878:	011b      	lsls	r3, r3, #4
    b87a:	18d3      	adds	r3, r2, r3
    b87c:	330a      	adds	r3, #10
    b87e:	781b      	ldrb	r3, [r3, #0]
    b880:	b2db      	uxtb	r3, r3
    b882:	2b01      	cmp	r3, #1
    b884:	d16f      	bne.n	b966 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    b886:	2323      	movs	r3, #35	; 0x23
    b888:	18fb      	adds	r3, r7, r3
    b88a:	2245      	movs	r2, #69	; 0x45
    b88c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    b88e:	2324      	movs	r3, #36	; 0x24
    b890:	18fb      	adds	r3, r7, r3
    b892:	2250      	movs	r2, #80	; 0x50
    b894:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    b896:	2310      	movs	r3, #16
    b898:	18fb      	adds	r3, r7, r3
    b89a:	220f      	movs	r2, #15
    b89c:	18ba      	adds	r2, r7, r2
    b89e:	7812      	ldrb	r2, [r2, #0]
    b8a0:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    b8a2:	2310      	movs	r3, #16
    b8a4:	18fb      	adds	r3, r7, r3
    b8a6:	220c      	movs	r2, #12
    b8a8:	18ba      	adds	r2, r7, r2
    b8aa:	8812      	ldrh	r2, [r2, #0]
    b8ac:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    b8ae:	230f      	movs	r3, #15
    b8b0:	18fb      	adds	r3, r7, r3
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	b25b      	sxtb	r3, r3
    b8b6:	4a30      	ldr	r2, [pc, #192]	; (b978 <send+0x15c>)
    b8b8:	011b      	lsls	r3, r3, #4
    b8ba:	18d3      	adds	r3, r2, r3
    b8bc:	3306      	adds	r3, #6
    b8be:	881b      	ldrh	r3, [r3, #0]
    b8c0:	b29a      	uxth	r2, r3
    b8c2:	2310      	movs	r3, #16
    b8c4:	18fb      	adds	r3, r7, r3
    b8c6:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    b8c8:	230f      	movs	r3, #15
    b8ca:	18fb      	adds	r3, r7, r3
    b8cc:	781b      	ldrb	r3, [r3, #0]
    b8ce:	b25b      	sxtb	r3, r3
    b8d0:	2b06      	cmp	r3, #6
    b8d2:	dd03      	ble.n	b8dc <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    b8d4:	2324      	movs	r3, #36	; 0x24
    b8d6:	18fb      	adds	r3, r7, r3
    b8d8:	2244      	movs	r2, #68	; 0x44
    b8da:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b8dc:	230f      	movs	r3, #15
    b8de:	18fb      	adds	r3, r7, r3
    b8e0:	781b      	ldrb	r3, [r3, #0]
    b8e2:	b25b      	sxtb	r3, r3
    b8e4:	4a24      	ldr	r2, [pc, #144]	; (b978 <send+0x15c>)
    b8e6:	011b      	lsls	r3, r3, #4
    b8e8:	18d3      	adds	r3, r2, r3
    b8ea:	330b      	adds	r3, #11
    b8ec:	781b      	ldrb	r3, [r3, #0]
    b8ee:	b2db      	uxtb	r3, r3
    b8f0:	001a      	movs	r2, r3
    b8f2:	2301      	movs	r3, #1
    b8f4:	4013      	ands	r3, r2
    b8f6:	d00f      	beq.n	b918 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    b8f8:	2323      	movs	r3, #35	; 0x23
    b8fa:	18fb      	adds	r3, r7, r3
    b8fc:	224c      	movs	r2, #76	; 0x4c
    b8fe:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    b900:	230f      	movs	r3, #15
    b902:	18fb      	adds	r3, r7, r3
    b904:	2200      	movs	r2, #0
    b906:	569a      	ldrsb	r2, [r3, r2]
    b908:	2324      	movs	r3, #36	; 0x24
    b90a:	18fb      	adds	r3, r7, r3
    b90c:	491a      	ldr	r1, [pc, #104]	; (b978 <send+0x15c>)
    b90e:	0112      	lsls	r2, r2, #4
    b910:	188a      	adds	r2, r1, r2
    b912:	3208      	adds	r2, #8
    b914:	8812      	ldrh	r2, [r2, #0]
    b916:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    b918:	2323      	movs	r3, #35	; 0x23
    b91a:	18fb      	adds	r3, r7, r3
    b91c:	781b      	ldrb	r3, [r3, #0]
    b91e:	2280      	movs	r2, #128	; 0x80
    b920:	4252      	negs	r2, r2
    b922:	4313      	orrs	r3, r2
    b924:	b2d9      	uxtb	r1, r3
    b926:	2310      	movs	r3, #16
    b928:	18fa      	adds	r2, r7, r3
    b92a:	2324      	movs	r3, #36	; 0x24
    b92c:	18fb      	adds	r3, r7, r3
    b92e:	881b      	ldrh	r3, [r3, #0]
    b930:	9302      	str	r3, [sp, #8]
    b932:	230c      	movs	r3, #12
    b934:	18fb      	adds	r3, r7, r3
    b936:	881b      	ldrh	r3, [r3, #0]
    b938:	9301      	str	r3, [sp, #4]
    b93a:	68bb      	ldr	r3, [r7, #8]
    b93c:	9300      	str	r3, [sp, #0]
    b93e:	2310      	movs	r3, #16
    b940:	2002      	movs	r0, #2
    b942:	4c0e      	ldr	r4, [pc, #56]	; (b97c <send+0x160>)
    b944:	47a0      	blx	r4
    b946:	0003      	movs	r3, r0
    b948:	001a      	movs	r2, r3
    b94a:	2326      	movs	r3, #38	; 0x26
    b94c:	18fb      	adds	r3, r7, r3
    b94e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    b950:	2326      	movs	r3, #38	; 0x26
    b952:	18fb      	adds	r3, r7, r3
    b954:	2200      	movs	r2, #0
    b956:	5e9b      	ldrsh	r3, [r3, r2]
    b958:	2b00      	cmp	r3, #0
    b95a:	d004      	beq.n	b966 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    b95c:	2326      	movs	r3, #38	; 0x26
    b95e:	18fb      	adds	r3, r7, r3
    b960:	220e      	movs	r2, #14
    b962:	4252      	negs	r2, r2
    b964:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    b966:	2326      	movs	r3, #38	; 0x26
    b968:	18fb      	adds	r3, r7, r3
    b96a:	2200      	movs	r2, #0
    b96c:	5e9b      	ldrsh	r3, [r3, r2]
}
    b96e:	0018      	movs	r0, r3
    b970:	46bd      	mov	sp, r7
    b972:	b00b      	add	sp, #44	; 0x2c
    b974:	bd90      	pop	{r4, r7, pc}
    b976:	46c0      	nop			; (mov r8, r8)
    b978:	20002a5c 	.word	0x20002a5c
    b97c:	00006ff1 	.word	0x00006ff1

0000b980 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    b980:	b590      	push	{r4, r7, lr}
    b982:	b08d      	sub	sp, #52	; 0x34
    b984:	af04      	add	r7, sp, #16
    b986:	60b9      	str	r1, [r7, #8]
    b988:	0011      	movs	r1, r2
    b98a:	607b      	str	r3, [r7, #4]
    b98c:	230f      	movs	r3, #15
    b98e:	18fb      	adds	r3, r7, r3
    b990:	1c02      	adds	r2, r0, #0
    b992:	701a      	strb	r2, [r3, #0]
    b994:	230c      	movs	r3, #12
    b996:	18fb      	adds	r3, r7, r3
    b998:	1c0a      	adds	r2, r1, #0
    b99a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b99c:	231e      	movs	r3, #30
    b99e:	18fb      	adds	r3, r7, r3
    b9a0:	2206      	movs	r2, #6
    b9a2:	4252      	negs	r2, r2
    b9a4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    b9a6:	230f      	movs	r3, #15
    b9a8:	18fb      	adds	r3, r7, r3
    b9aa:	781b      	ldrb	r3, [r3, #0]
    b9ac:	2b7f      	cmp	r3, #127	; 0x7f
    b9ae:	d900      	bls.n	b9b2 <recv+0x32>
    b9b0:	e099      	b.n	bae6 <recv+0x166>
    b9b2:	68bb      	ldr	r3, [r7, #8]
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	d100      	bne.n	b9ba <recv+0x3a>
    b9b8:	e095      	b.n	bae6 <recv+0x166>
    b9ba:	230c      	movs	r3, #12
    b9bc:	18fb      	adds	r3, r7, r3
    b9be:	881b      	ldrh	r3, [r3, #0]
    b9c0:	2b00      	cmp	r3, #0
    b9c2:	d100      	bne.n	b9c6 <recv+0x46>
    b9c4:	e08f      	b.n	bae6 <recv+0x166>
    b9c6:	230f      	movs	r3, #15
    b9c8:	18fb      	adds	r3, r7, r3
    b9ca:	781b      	ldrb	r3, [r3, #0]
    b9cc:	b25b      	sxtb	r3, r3
    b9ce:	4a4a      	ldr	r2, [pc, #296]	; (baf8 <recv+0x178>)
    b9d0:	011b      	lsls	r3, r3, #4
    b9d2:	18d3      	adds	r3, r2, r3
    b9d4:	330a      	adds	r3, #10
    b9d6:	781b      	ldrb	r3, [r3, #0]
    b9d8:	b2db      	uxtb	r3, r3
    b9da:	2b01      	cmp	r3, #1
    b9dc:	d000      	beq.n	b9e0 <recv+0x60>
    b9de:	e082      	b.n	bae6 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    b9e0:	231e      	movs	r3, #30
    b9e2:	18fb      	adds	r3, r7, r3
    b9e4:	2200      	movs	r2, #0
    b9e6:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    b9e8:	230f      	movs	r3, #15
    b9ea:	18fb      	adds	r3, r7, r3
    b9ec:	2200      	movs	r2, #0
    b9ee:	569a      	ldrsb	r2, [r3, r2]
    b9f0:	4b41      	ldr	r3, [pc, #260]	; (baf8 <recv+0x178>)
    b9f2:	0112      	lsls	r2, r2, #4
    b9f4:	68b9      	ldr	r1, [r7, #8]
    b9f6:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    b9f8:	230f      	movs	r3, #15
    b9fa:	18fb      	adds	r3, r7, r3
    b9fc:	781b      	ldrb	r3, [r3, #0]
    b9fe:	b25b      	sxtb	r3, r3
    ba00:	4a3d      	ldr	r2, [pc, #244]	; (baf8 <recv+0x178>)
    ba02:	011b      	lsls	r3, r3, #4
    ba04:	18d3      	adds	r3, r2, r3
    ba06:	3304      	adds	r3, #4
    ba08:	220c      	movs	r2, #12
    ba0a:	18ba      	adds	r2, r7, r2
    ba0c:	8812      	ldrh	r2, [r2, #0]
    ba0e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    ba10:	230f      	movs	r3, #15
    ba12:	18fb      	adds	r3, r7, r3
    ba14:	781b      	ldrb	r3, [r3, #0]
    ba16:	b25b      	sxtb	r3, r3
    ba18:	4a37      	ldr	r2, [pc, #220]	; (baf8 <recv+0x178>)
    ba1a:	011b      	lsls	r3, r3, #4
    ba1c:	18d3      	adds	r3, r2, r3
    ba1e:	330c      	adds	r3, #12
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	b2db      	uxtb	r3, r3
    ba24:	2b00      	cmp	r3, #0
    ba26:	d15e      	bne.n	bae6 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    ba28:	231d      	movs	r3, #29
    ba2a:	18fb      	adds	r3, r7, r3
    ba2c:	2246      	movs	r2, #70	; 0x46
    ba2e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    ba30:	230f      	movs	r3, #15
    ba32:	18fb      	adds	r3, r7, r3
    ba34:	781b      	ldrb	r3, [r3, #0]
    ba36:	b25b      	sxtb	r3, r3
    ba38:	4a2f      	ldr	r2, [pc, #188]	; (baf8 <recv+0x178>)
    ba3a:	011b      	lsls	r3, r3, #4
    ba3c:	18d3      	adds	r3, r2, r3
    ba3e:	330c      	adds	r3, #12
    ba40:	2201      	movs	r2, #1
    ba42:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ba44:	230f      	movs	r3, #15
    ba46:	18fb      	adds	r3, r7, r3
    ba48:	781b      	ldrb	r3, [r3, #0]
    ba4a:	b25b      	sxtb	r3, r3
    ba4c:	4a2a      	ldr	r2, [pc, #168]	; (baf8 <recv+0x178>)
    ba4e:	011b      	lsls	r3, r3, #4
    ba50:	18d3      	adds	r3, r2, r3
    ba52:	330b      	adds	r3, #11
    ba54:	781b      	ldrb	r3, [r3, #0]
    ba56:	b2db      	uxtb	r3, r3
    ba58:	001a      	movs	r2, r3
    ba5a:	2301      	movs	r3, #1
    ba5c:	4013      	ands	r3, r2
    ba5e:	d003      	beq.n	ba68 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    ba60:	231d      	movs	r3, #29
    ba62:	18fb      	adds	r3, r7, r3
    ba64:	224d      	movs	r2, #77	; 0x4d
    ba66:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    ba68:	687b      	ldr	r3, [r7, #4]
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	d105      	bne.n	ba7a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    ba6e:	2314      	movs	r3, #20
    ba70:	18fb      	adds	r3, r7, r3
    ba72:	2201      	movs	r2, #1
    ba74:	4252      	negs	r2, r2
    ba76:	601a      	str	r2, [r3, #0]
    ba78:	e003      	b.n	ba82 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    ba7a:	2314      	movs	r3, #20
    ba7c:	18fb      	adds	r3, r7, r3
    ba7e:	687a      	ldr	r2, [r7, #4]
    ba80:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    ba82:	2314      	movs	r3, #20
    ba84:	18fb      	adds	r3, r7, r3
    ba86:	220f      	movs	r2, #15
    ba88:	18ba      	adds	r2, r7, r2
    ba8a:	7812      	ldrb	r2, [r2, #0]
    ba8c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    ba8e:	230f      	movs	r3, #15
    ba90:	18fb      	adds	r3, r7, r3
    ba92:	781b      	ldrb	r3, [r3, #0]
    ba94:	b25b      	sxtb	r3, r3
    ba96:	4a18      	ldr	r2, [pc, #96]	; (baf8 <recv+0x178>)
    ba98:	011b      	lsls	r3, r3, #4
    ba9a:	18d3      	adds	r3, r2, r3
    ba9c:	3306      	adds	r3, #6
    ba9e:	881b      	ldrh	r3, [r3, #0]
    baa0:	b29a      	uxth	r2, r3
    baa2:	2314      	movs	r3, #20
    baa4:	18fb      	adds	r3, r7, r3
    baa6:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    baa8:	2314      	movs	r3, #20
    baaa:	18fa      	adds	r2, r7, r3
    baac:	231d      	movs	r3, #29
    baae:	18fb      	adds	r3, r7, r3
    bab0:	7819      	ldrb	r1, [r3, #0]
    bab2:	2300      	movs	r3, #0
    bab4:	9302      	str	r3, [sp, #8]
    bab6:	2300      	movs	r3, #0
    bab8:	9301      	str	r3, [sp, #4]
    baba:	2300      	movs	r3, #0
    babc:	9300      	str	r3, [sp, #0]
    babe:	2308      	movs	r3, #8
    bac0:	2002      	movs	r0, #2
    bac2:	4c0e      	ldr	r4, [pc, #56]	; (bafc <recv+0x17c>)
    bac4:	47a0      	blx	r4
    bac6:	0003      	movs	r3, r0
    bac8:	001a      	movs	r2, r3
    baca:	231e      	movs	r3, #30
    bacc:	18fb      	adds	r3, r7, r3
    bace:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    bad0:	231e      	movs	r3, #30
    bad2:	18fb      	adds	r3, r7, r3
    bad4:	2200      	movs	r2, #0
    bad6:	5e9b      	ldrsh	r3, [r3, r2]
    bad8:	2b00      	cmp	r3, #0
    bada:	d004      	beq.n	bae6 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    badc:	231e      	movs	r3, #30
    bade:	18fb      	adds	r3, r7, r3
    bae0:	220e      	movs	r2, #14
    bae2:	4252      	negs	r2, r2
    bae4:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    bae6:	231e      	movs	r3, #30
    bae8:	18fb      	adds	r3, r7, r3
    baea:	2200      	movs	r2, #0
    baec:	5e9b      	ldrsh	r3, [r3, r2]
}
    baee:	0018      	movs	r0, r3
    baf0:	46bd      	mov	sp, r7
    baf2:	b009      	add	sp, #36	; 0x24
    baf4:	bd90      	pop	{r4, r7, pc}
    baf6:	46c0      	nop			; (mov r8, r8)
    baf8:	20002a5c 	.word	0x20002a5c
    bafc:	00006ff1 	.word	0x00006ff1

0000bb00 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    bb00:	b5b0      	push	{r4, r5, r7, lr}
    bb02:	b088      	sub	sp, #32
    bb04:	af04      	add	r7, sp, #16
    bb06:	0002      	movs	r2, r0
    bb08:	1dfb      	adds	r3, r7, #7
    bb0a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    bb0c:	230f      	movs	r3, #15
    bb0e:	18fb      	adds	r3, r7, r3
    bb10:	22fa      	movs	r2, #250	; 0xfa
    bb12:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    bb14:	4b42      	ldr	r3, [pc, #264]	; (bc20 <close+0x120>)
    bb16:	0018      	movs	r0, r3
    bb18:	4b42      	ldr	r3, [pc, #264]	; (bc24 <close+0x124>)
    bb1a:	4798      	blx	r3
    bb1c:	1dfb      	adds	r3, r7, #7
    bb1e:	2200      	movs	r2, #0
    bb20:	569a      	ldrsb	r2, [r3, r2]
    bb22:	4b41      	ldr	r3, [pc, #260]	; (bc28 <close+0x128>)
    bb24:	0011      	movs	r1, r2
    bb26:	0018      	movs	r0, r3
    bb28:	4b3e      	ldr	r3, [pc, #248]	; (bc24 <close+0x124>)
    bb2a:	4798      	blx	r3
    bb2c:	200d      	movs	r0, #13
    bb2e:	4b3f      	ldr	r3, [pc, #252]	; (bc2c <close+0x12c>)
    bb30:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    bb32:	1dfb      	adds	r3, r7, #7
    bb34:	781b      	ldrb	r3, [r3, #0]
    bb36:	2b7f      	cmp	r3, #127	; 0x7f
    bb38:	d86a      	bhi.n	bc10 <close+0x110>
    bb3a:	1dfb      	adds	r3, r7, #7
    bb3c:	781b      	ldrb	r3, [r3, #0]
    bb3e:	b25b      	sxtb	r3, r3
    bb40:	4a3b      	ldr	r2, [pc, #236]	; (bc30 <close+0x130>)
    bb42:	011b      	lsls	r3, r3, #4
    bb44:	18d3      	adds	r3, r2, r3
    bb46:	330a      	adds	r3, #10
    bb48:	781b      	ldrb	r3, [r3, #0]
    bb4a:	b2db      	uxtb	r3, r3
    bb4c:	2b01      	cmp	r3, #1
    bb4e:	d15f      	bne.n	bc10 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    bb50:	230e      	movs	r3, #14
    bb52:	18fb      	adds	r3, r7, r3
    bb54:	2249      	movs	r2, #73	; 0x49
    bb56:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    bb58:	2308      	movs	r3, #8
    bb5a:	18fb      	adds	r3, r7, r3
    bb5c:	1dfa      	adds	r2, r7, #7
    bb5e:	7812      	ldrb	r2, [r2, #0]
    bb60:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    bb62:	1dfb      	adds	r3, r7, #7
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	b25b      	sxtb	r3, r3
    bb68:	4a31      	ldr	r2, [pc, #196]	; (bc30 <close+0x130>)
    bb6a:	011b      	lsls	r3, r3, #4
    bb6c:	18d3      	adds	r3, r2, r3
    bb6e:	3306      	adds	r3, #6
    bb70:	881b      	ldrh	r3, [r3, #0]
    bb72:	b29a      	uxth	r2, r3
    bb74:	2308      	movs	r3, #8
    bb76:	18fb      	adds	r3, r7, r3
    bb78:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    bb7a:	1dfb      	adds	r3, r7, #7
    bb7c:	781b      	ldrb	r3, [r3, #0]
    bb7e:	b25b      	sxtb	r3, r3
    bb80:	4a2b      	ldr	r2, [pc, #172]	; (bc30 <close+0x130>)
    bb82:	011b      	lsls	r3, r3, #4
    bb84:	18d3      	adds	r3, r2, r3
    bb86:	330a      	adds	r3, #10
    bb88:	2200      	movs	r2, #0
    bb8a:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    bb8c:	1dfb      	adds	r3, r7, #7
    bb8e:	781b      	ldrb	r3, [r3, #0]
    bb90:	b25b      	sxtb	r3, r3
    bb92:	4a27      	ldr	r2, [pc, #156]	; (bc30 <close+0x130>)
    bb94:	011b      	lsls	r3, r3, #4
    bb96:	18d3      	adds	r3, r2, r3
    bb98:	3306      	adds	r3, #6
    bb9a:	2200      	movs	r2, #0
    bb9c:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    bb9e:	1dfb      	adds	r3, r7, #7
    bba0:	781b      	ldrb	r3, [r3, #0]
    bba2:	b25b      	sxtb	r3, r3
    bba4:	4a22      	ldr	r2, [pc, #136]	; (bc30 <close+0x130>)
    bba6:	011b      	lsls	r3, r3, #4
    bba8:	18d3      	adds	r3, r2, r3
    bbaa:	330b      	adds	r3, #11
    bbac:	781b      	ldrb	r3, [r3, #0]
    bbae:	b2db      	uxtb	r3, r3
    bbb0:	001a      	movs	r2, r3
    bbb2:	2301      	movs	r3, #1
    bbb4:	4013      	ands	r3, r2
    bbb6:	d003      	beq.n	bbc0 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    bbb8:	230e      	movs	r3, #14
    bbba:	18fb      	adds	r3, r7, r3
    bbbc:	224e      	movs	r2, #78	; 0x4e
    bbbe:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    bbc0:	230f      	movs	r3, #15
    bbc2:	18fc      	adds	r4, r7, r3
    bbc4:	2308      	movs	r3, #8
    bbc6:	18fa      	adds	r2, r7, r3
    bbc8:	230e      	movs	r3, #14
    bbca:	18fb      	adds	r3, r7, r3
    bbcc:	7819      	ldrb	r1, [r3, #0]
    bbce:	2300      	movs	r3, #0
    bbd0:	9302      	str	r3, [sp, #8]
    bbd2:	2300      	movs	r3, #0
    bbd4:	9301      	str	r3, [sp, #4]
    bbd6:	2300      	movs	r3, #0
    bbd8:	9300      	str	r3, [sp, #0]
    bbda:	2304      	movs	r3, #4
    bbdc:	2002      	movs	r0, #2
    bbde:	4d15      	ldr	r5, [pc, #84]	; (bc34 <close+0x134>)
    bbe0:	47a8      	blx	r5
    bbe2:	0003      	movs	r3, r0
    bbe4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    bbe6:	230f      	movs	r3, #15
    bbe8:	18fb      	adds	r3, r7, r3
    bbea:	781b      	ldrb	r3, [r3, #0]
    bbec:	b25b      	sxtb	r3, r3
    bbee:	2b00      	cmp	r3, #0
    bbf0:	d003      	beq.n	bbfa <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    bbf2:	230f      	movs	r3, #15
    bbf4:	18fb      	adds	r3, r7, r3
    bbf6:	22f7      	movs	r2, #247	; 0xf7
    bbf8:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    bbfa:	1dfb      	adds	r3, r7, #7
    bbfc:	781b      	ldrb	r3, [r3, #0]
    bbfe:	b25b      	sxtb	r3, r3
    bc00:	011a      	lsls	r2, r3, #4
    bc02:	4b0b      	ldr	r3, [pc, #44]	; (bc30 <close+0x130>)
    bc04:	18d3      	adds	r3, r2, r3
    bc06:	2210      	movs	r2, #16
    bc08:	2100      	movs	r1, #0
    bc0a:	0018      	movs	r0, r3
    bc0c:	4b0a      	ldr	r3, [pc, #40]	; (bc38 <close+0x138>)
    bc0e:	4798      	blx	r3
	}
	return s8Ret;
    bc10:	230f      	movs	r3, #15
    bc12:	18fb      	adds	r3, r7, r3
    bc14:	781b      	ldrb	r3, [r3, #0]
    bc16:	b25b      	sxtb	r3, r3
}
    bc18:	0018      	movs	r0, r3
    bc1a:	46bd      	mov	sp, r7
    bc1c:	b004      	add	sp, #16
    bc1e:	bdb0      	pop	{r4, r5, r7, pc}
    bc20:	000209e8 	.word	0x000209e8
    bc24:	0001c37d 	.word	0x0001c37d
    bc28:	00020a24 	.word	0x00020a24
    bc2c:	0001c3b1 	.word	0x0001c3b1
    bc30:	20002a5c 	.word	0x20002a5c
    bc34:	00006ff1 	.word	0x00006ff1
    bc38:	00006d91 	.word	0x00006d91

0000bc3c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    bc3c:	b5b0      	push	{r4, r5, r7, lr}
    bc3e:	b088      	sub	sp, #32
    bc40:	af04      	add	r7, sp, #16
    bc42:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    bc44:	230f      	movs	r3, #15
    bc46:	18fb      	adds	r3, r7, r3
    bc48:	22fa      	movs	r2, #250	; 0xfa
    bc4a:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    bc4c:	687b      	ldr	r3, [r7, #4]
    bc4e:	0018      	movs	r0, r3
    bc50:	4b14      	ldr	r3, [pc, #80]	; (bca4 <gethostbyname+0x68>)
    bc52:	4798      	blx	r3
    bc54:	0003      	movs	r3, r0
    bc56:	001a      	movs	r2, r3
    bc58:	230e      	movs	r3, #14
    bc5a:	18fb      	adds	r3, r7, r3
    bc5c:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    bc5e:	230e      	movs	r3, #14
    bc60:	18fb      	adds	r3, r7, r3
    bc62:	781b      	ldrb	r3, [r3, #0]
    bc64:	2b40      	cmp	r3, #64	; 0x40
    bc66:	d815      	bhi.n	bc94 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    bc68:	230e      	movs	r3, #14
    bc6a:	18fb      	adds	r3, r7, r3
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	b29b      	uxth	r3, r3
    bc70:	3301      	adds	r3, #1
    bc72:	b299      	uxth	r1, r3
    bc74:	230f      	movs	r3, #15
    bc76:	18fc      	adds	r4, r7, r3
    bc78:	687a      	ldr	r2, [r7, #4]
    bc7a:	2300      	movs	r3, #0
    bc7c:	9302      	str	r3, [sp, #8]
    bc7e:	2300      	movs	r3, #0
    bc80:	9301      	str	r3, [sp, #4]
    bc82:	2300      	movs	r3, #0
    bc84:	9300      	str	r3, [sp, #0]
    bc86:	000b      	movs	r3, r1
    bc88:	214a      	movs	r1, #74	; 0x4a
    bc8a:	2002      	movs	r0, #2
    bc8c:	4d06      	ldr	r5, [pc, #24]	; (bca8 <gethostbyname+0x6c>)
    bc8e:	47a8      	blx	r5
    bc90:	0003      	movs	r3, r0
    bc92:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    bc94:	230f      	movs	r3, #15
    bc96:	18fb      	adds	r3, r7, r3
    bc98:	781b      	ldrb	r3, [r3, #0]
    bc9a:	b25b      	sxtb	r3, r3
}
    bc9c:	0018      	movs	r0, r3
    bc9e:	46bd      	mov	sp, r7
    bca0:	b004      	add	sp, #16
    bca2:	bdb0      	pop	{r4, r5, r7, pc}
    bca4:	00006dcf 	.word	0x00006dcf
    bca8:	00006ff1 	.word	0x00006ff1

0000bcac <sslSetSockOpt>:

Date
		9 September 2014
*********************************************************************/
static sint8 sslSetSockOpt(SOCKET sock, uint8  u8Opt, const void *pvOptVal, uint16 u16OptLen)
{
    bcac:	b5b0      	push	{r4, r5, r7, lr}
    bcae:	b09e      	sub	sp, #120	; 0x78
    bcb0:	af04      	add	r7, sp, #16
    bcb2:	0004      	movs	r4, r0
    bcb4:	0008      	movs	r0, r1
    bcb6:	603a      	str	r2, [r7, #0]
    bcb8:	0019      	movs	r1, r3
    bcba:	1dfb      	adds	r3, r7, #7
    bcbc:	1c22      	adds	r2, r4, #0
    bcbe:	701a      	strb	r2, [r3, #0]
    bcc0:	1dbb      	adds	r3, r7, #6
    bcc2:	1c02      	adds	r2, r0, #0
    bcc4:	701a      	strb	r2, [r3, #0]
    bcc6:	1d3b      	adds	r3, r7, #4
    bcc8:	1c0a      	adds	r2, r1, #0
    bcca:	801a      	strh	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    bccc:	2367      	movs	r3, #103	; 0x67
    bcce:	18fb      	adds	r3, r7, r3
    bcd0:	22fa      	movs	r2, #250	; 0xfa
    bcd2:	701a      	strb	r2, [r3, #0]
	if(sock < TCP_SOCK_MAX)
    bcd4:	1dfb      	adds	r3, r7, #7
    bcd6:	781b      	ldrb	r3, [r3, #0]
    bcd8:	b25b      	sxtb	r3, r3
    bcda:	2b06      	cmp	r3, #6
    bcdc:	dd00      	ble.n	bce0 <sslSetSockOpt+0x34>
    bcde:	e13a      	b.n	bf56 <sslSetSockOpt+0x2aa>
	{
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    bce0:	1dfb      	adds	r3, r7, #7
    bce2:	781b      	ldrb	r3, [r3, #0]
    bce4:	b25b      	sxtb	r3, r3
    bce6:	4aa0      	ldr	r2, [pc, #640]	; (bf68 <sslSetSockOpt+0x2bc>)
    bce8:	011b      	lsls	r3, r3, #4
    bcea:	18d3      	adds	r3, r2, r3
    bcec:	330b      	adds	r3, #11
    bcee:	781b      	ldrb	r3, [r3, #0]
    bcf0:	b2db      	uxtb	r3, r3
    bcf2:	001a      	movs	r2, r3
    bcf4:	2301      	movs	r3, #1
    bcf6:	4013      	ands	r3, r2
    bcf8:	d100      	bne.n	bcfc <sslSetSockOpt+0x50>
    bcfa:	e11f      	b.n	bf3c <sslSetSockOpt+0x290>
		{
			if(u8Opt == SO_SSL_BYPASS_X509_VERIF)
    bcfc:	1dbb      	adds	r3, r7, #6
    bcfe:	781b      	ldrb	r3, [r3, #0]
    bd00:	2b01      	cmp	r3, #1
    bd02:	d135      	bne.n	bd70 <sslSetSockOpt+0xc4>
			{
				int	optVal = *((int*)pvOptVal);
    bd04:	683b      	ldr	r3, [r7, #0]
    bd06:	681b      	ldr	r3, [r3, #0]
    bd08:	663b      	str	r3, [r7, #96]	; 0x60
				if(optVal)
    bd0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	d015      	beq.n	bd3c <sslSetSockOpt+0x90>
				{
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
    bd10:	1dfb      	adds	r3, r7, #7
    bd12:	781b      	ldrb	r3, [r3, #0]
    bd14:	b25b      	sxtb	r3, r3
    bd16:	1dfa      	adds	r2, r7, #7
    bd18:	7812      	ldrb	r2, [r2, #0]
    bd1a:	b252      	sxtb	r2, r2
    bd1c:	4992      	ldr	r1, [pc, #584]	; (bf68 <sslSetSockOpt+0x2bc>)
    bd1e:	0112      	lsls	r2, r2, #4
    bd20:	188a      	adds	r2, r1, r2
    bd22:	320b      	adds	r2, #11
    bd24:	7812      	ldrb	r2, [r2, #0]
    bd26:	b2d2      	uxtb	r2, r2
    bd28:	2102      	movs	r1, #2
    bd2a:	430a      	orrs	r2, r1
    bd2c:	b2d1      	uxtb	r1, r2
    bd2e:	4a8e      	ldr	r2, [pc, #568]	; (bf68 <sslSetSockOpt+0x2bc>)
    bd30:	011b      	lsls	r3, r3, #4
    bd32:	18d3      	adds	r3, r2, r3
    bd34:	330b      	adds	r3, #11
    bd36:	1c0a      	adds	r2, r1, #0
    bd38:	701a      	strb	r2, [r3, #0]
    bd3a:	e014      	b.n	bd66 <sslSetSockOpt+0xba>
				}
				else
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_BYPASS_X509;
    bd3c:	1dfb      	adds	r3, r7, #7
    bd3e:	781b      	ldrb	r3, [r3, #0]
    bd40:	b25b      	sxtb	r3, r3
    bd42:	1dfa      	adds	r2, r7, #7
    bd44:	7812      	ldrb	r2, [r2, #0]
    bd46:	b252      	sxtb	r2, r2
    bd48:	4987      	ldr	r1, [pc, #540]	; (bf68 <sslSetSockOpt+0x2bc>)
    bd4a:	0112      	lsls	r2, r2, #4
    bd4c:	188a      	adds	r2, r1, r2
    bd4e:	320b      	adds	r2, #11
    bd50:	7812      	ldrb	r2, [r2, #0]
    bd52:	b2d2      	uxtb	r2, r2
    bd54:	2102      	movs	r1, #2
    bd56:	438a      	bics	r2, r1
    bd58:	b2d1      	uxtb	r1, r2
    bd5a:	4a83      	ldr	r2, [pc, #524]	; (bf68 <sslSetSockOpt+0x2bc>)
    bd5c:	011b      	lsls	r3, r3, #4
    bd5e:	18d3      	adds	r3, r2, r3
    bd60:	330b      	adds	r3, #11
    bd62:	1c0a      	adds	r2, r1, #0
    bd64:	701a      	strb	r2, [r3, #0]
				}
				s8Ret = SOCK_ERR_NO_ERROR;
    bd66:	2367      	movs	r3, #103	; 0x67
    bd68:	18fb      	adds	r3, r7, r3
    bd6a:	2200      	movs	r2, #0
    bd6c:	701a      	strb	r2, [r3, #0]
    bd6e:	e0f2      	b.n	bf56 <sslSetSockOpt+0x2aa>
			}
			else if(u8Opt == SO_SSL_ENABLE_SESSION_CACHING)
    bd70:	1dbb      	adds	r3, r7, #6
    bd72:	781b      	ldrb	r3, [r3, #0]
    bd74:	2b03      	cmp	r3, #3
    bd76:	d135      	bne.n	bde4 <sslSetSockOpt+0x138>
			{
				int	optVal = *((int*)pvOptVal);
    bd78:	683b      	ldr	r3, [r7, #0]
    bd7a:	681b      	ldr	r3, [r3, #0]
    bd7c:	65fb      	str	r3, [r7, #92]	; 0x5c
				if(optVal)
    bd7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bd80:	2b00      	cmp	r3, #0
    bd82:	d015      	beq.n	bdb0 <sslSetSockOpt+0x104>
				{
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
    bd84:	1dfb      	adds	r3, r7, #7
    bd86:	781b      	ldrb	r3, [r3, #0]
    bd88:	b25b      	sxtb	r3, r3
    bd8a:	1dfa      	adds	r2, r7, #7
    bd8c:	7812      	ldrb	r2, [r2, #0]
    bd8e:	b252      	sxtb	r2, r2
    bd90:	4975      	ldr	r1, [pc, #468]	; (bf68 <sslSetSockOpt+0x2bc>)
    bd92:	0112      	lsls	r2, r2, #4
    bd94:	188a      	adds	r2, r1, r2
    bd96:	320b      	adds	r2, #11
    bd98:	7812      	ldrb	r2, [r2, #0]
    bd9a:	b2d2      	uxtb	r2, r2
    bd9c:	2110      	movs	r1, #16
    bd9e:	430a      	orrs	r2, r1
    bda0:	b2d1      	uxtb	r1, r2
    bda2:	4a71      	ldr	r2, [pc, #452]	; (bf68 <sslSetSockOpt+0x2bc>)
    bda4:	011b      	lsls	r3, r3, #4
    bda6:	18d3      	adds	r3, r2, r3
    bda8:	330b      	adds	r3, #11
    bdaa:	1c0a      	adds	r2, r1, #0
    bdac:	701a      	strb	r2, [r3, #0]
    bdae:	e014      	b.n	bdda <sslSetSockOpt+0x12e>
				}
				else
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CACHE_SESSION;
    bdb0:	1dfb      	adds	r3, r7, #7
    bdb2:	781b      	ldrb	r3, [r3, #0]
    bdb4:	b25b      	sxtb	r3, r3
    bdb6:	1dfa      	adds	r2, r7, #7
    bdb8:	7812      	ldrb	r2, [r2, #0]
    bdba:	b252      	sxtb	r2, r2
    bdbc:	496a      	ldr	r1, [pc, #424]	; (bf68 <sslSetSockOpt+0x2bc>)
    bdbe:	0112      	lsls	r2, r2, #4
    bdc0:	188a      	adds	r2, r1, r2
    bdc2:	320b      	adds	r2, #11
    bdc4:	7812      	ldrb	r2, [r2, #0]
    bdc6:	b2d2      	uxtb	r2, r2
    bdc8:	2110      	movs	r1, #16
    bdca:	438a      	bics	r2, r1
    bdcc:	b2d1      	uxtb	r1, r2
    bdce:	4a66      	ldr	r2, [pc, #408]	; (bf68 <sslSetSockOpt+0x2bc>)
    bdd0:	011b      	lsls	r3, r3, #4
    bdd2:	18d3      	adds	r3, r2, r3
    bdd4:	330b      	adds	r3, #11
    bdd6:	1c0a      	adds	r2, r1, #0
    bdd8:	701a      	strb	r2, [r3, #0]
				}
				s8Ret = SOCK_ERR_NO_ERROR;
    bdda:	2367      	movs	r3, #103	; 0x67
    bddc:	18fb      	adds	r3, r7, r3
    bdde:	2200      	movs	r2, #0
    bde0:	701a      	strb	r2, [r3, #0]
    bde2:	e0b8      	b.n	bf56 <sslSetSockOpt+0x2aa>
			}
			else if(u8Opt == SO_SSL_ENABLE_SNI_VALIDATION)
    bde4:	1dbb      	adds	r3, r7, #6
    bde6:	781b      	ldrb	r3, [r3, #0]
    bde8:	2b04      	cmp	r3, #4
    bdea:	d135      	bne.n	be58 <sslSetSockOpt+0x1ac>
			{
				int	optVal = *((int*)pvOptVal);
    bdec:	683b      	ldr	r3, [r7, #0]
    bdee:	681b      	ldr	r3, [r3, #0]
    bdf0:	65bb      	str	r3, [r7, #88]	; 0x58
				if(optVal)
    bdf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d015      	beq.n	be24 <sslSetSockOpt+0x178>
				{
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
    bdf8:	1dfb      	adds	r3, r7, #7
    bdfa:	781b      	ldrb	r3, [r3, #0]
    bdfc:	b25b      	sxtb	r3, r3
    bdfe:	1dfa      	adds	r2, r7, #7
    be00:	7812      	ldrb	r2, [r2, #0]
    be02:	b252      	sxtb	r2, r2
    be04:	4958      	ldr	r1, [pc, #352]	; (bf68 <sslSetSockOpt+0x2bc>)
    be06:	0112      	lsls	r2, r2, #4
    be08:	188a      	adds	r2, r1, r2
    be0a:	320b      	adds	r2, #11
    be0c:	7812      	ldrb	r2, [r2, #0]
    be0e:	b2d2      	uxtb	r2, r2
    be10:	2140      	movs	r1, #64	; 0x40
    be12:	430a      	orrs	r2, r1
    be14:	b2d1      	uxtb	r1, r2
    be16:	4a54      	ldr	r2, [pc, #336]	; (bf68 <sslSetSockOpt+0x2bc>)
    be18:	011b      	lsls	r3, r3, #4
    be1a:	18d3      	adds	r3, r2, r3
    be1c:	330b      	adds	r3, #11
    be1e:	1c0a      	adds	r2, r1, #0
    be20:	701a      	strb	r2, [r3, #0]
    be22:	e014      	b.n	be4e <sslSetSockOpt+0x1a2>
				}
				else
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CHECK_SNI;
    be24:	1dfb      	adds	r3, r7, #7
    be26:	781b      	ldrb	r3, [r3, #0]
    be28:	b25b      	sxtb	r3, r3
    be2a:	1dfa      	adds	r2, r7, #7
    be2c:	7812      	ldrb	r2, [r2, #0]
    be2e:	b252      	sxtb	r2, r2
    be30:	494d      	ldr	r1, [pc, #308]	; (bf68 <sslSetSockOpt+0x2bc>)
    be32:	0112      	lsls	r2, r2, #4
    be34:	188a      	adds	r2, r1, r2
    be36:	320b      	adds	r2, #11
    be38:	7812      	ldrb	r2, [r2, #0]
    be3a:	b2d2      	uxtb	r2, r2
    be3c:	2140      	movs	r1, #64	; 0x40
    be3e:	438a      	bics	r2, r1
    be40:	b2d1      	uxtb	r1, r2
    be42:	4a49      	ldr	r2, [pc, #292]	; (bf68 <sslSetSockOpt+0x2bc>)
    be44:	011b      	lsls	r3, r3, #4
    be46:	18d3      	adds	r3, r2, r3
    be48:	330b      	adds	r3, #11
    be4a:	1c0a      	adds	r2, r1, #0
    be4c:	701a      	strb	r2, [r3, #0]
				}
				s8Ret = SOCK_ERR_NO_ERROR;
    be4e:	2367      	movs	r3, #103	; 0x67
    be50:	18fb      	adds	r3, r7, r3
    be52:	2200      	movs	r2, #0
    be54:	701a      	strb	r2, [r3, #0]
    be56:	e07e      	b.n	bf56 <sslSetSockOpt+0x2aa>
			}
			else if(u8Opt == SO_SSL_SNI)
    be58:	1dbb      	adds	r3, r7, #6
    be5a:	781b      	ldrb	r3, [r3, #0]
    be5c:	2b02      	cmp	r3, #2
    be5e:	d15c      	bne.n	bf1a <sslSetSockOpt+0x26e>
			{
				if(u16OptLen < HOSTNAME_MAX_SIZE)
    be60:	1d3b      	adds	r3, r7, #4
    be62:	881b      	ldrh	r3, [r3, #0]
    be64:	2b3f      	cmp	r3, #63	; 0x3f
    be66:	d84a      	bhi.n	befe <sslSetSockOpt+0x252>
				{
					uint8					*pu8SNI = (uint8*)pvOptVal;
    be68:	683b      	ldr	r3, [r7, #0]
    be6a:	657b      	str	r3, [r7, #84]	; 0x54
					tstrSSLSetSockOptCmd	strCmd;

					strCmd.sock			= sock;
    be6c:	230c      	movs	r3, #12
    be6e:	18fb      	adds	r3, r7, r3
    be70:	1dfa      	adds	r2, r7, #7
    be72:	7812      	ldrb	r2, [r2, #0]
    be74:	701a      	strb	r2, [r3, #0]
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
    be76:	1dfb      	adds	r3, r7, #7
    be78:	781b      	ldrb	r3, [r3, #0]
    be7a:	b25b      	sxtb	r3, r3
    be7c:	4a3a      	ldr	r2, [pc, #232]	; (bf68 <sslSetSockOpt+0x2bc>)
    be7e:	011b      	lsls	r3, r3, #4
    be80:	18d3      	adds	r3, r2, r3
    be82:	3306      	adds	r3, #6
    be84:	881b      	ldrh	r3, [r3, #0]
    be86:	b29a      	uxth	r2, r3
    be88:	230c      	movs	r3, #12
    be8a:	18fb      	adds	r3, r7, r3
    be8c:	805a      	strh	r2, [r3, #2]
					strCmd.u8Option		= u8Opt;
    be8e:	230c      	movs	r3, #12
    be90:	18fb      	adds	r3, r7, r3
    be92:	1dba      	adds	r2, r7, #6
    be94:	7812      	ldrb	r2, [r2, #0]
    be96:	705a      	strb	r2, [r3, #1]
					strCmd.u32OptLen	= u16OptLen;
    be98:	1d3b      	adds	r3, r7, #4
    be9a:	881a      	ldrh	r2, [r3, #0]
    be9c:	230c      	movs	r3, #12
    be9e:	18fb      	adds	r3, r7, r3
    bea0:	605a      	str	r2, [r3, #4]
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
    bea2:	6d79      	ldr	r1, [r7, #84]	; 0x54
    bea4:	230c      	movs	r3, #12
    bea6:	18fb      	adds	r3, r7, r3
    bea8:	3308      	adds	r3, #8
    beaa:	2240      	movs	r2, #64	; 0x40
    beac:	0018      	movs	r0, r3
    beae:	4b2f      	ldr	r3, [pc, #188]	; (bf6c <sslSetSockOpt+0x2c0>)
    beb0:	4798      	blx	r3
					
					if(SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT, (uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd),
    beb2:	230c      	movs	r3, #12
    beb4:	18fa      	adds	r2, r7, r3
    beb6:	2300      	movs	r3, #0
    beb8:	9302      	str	r3, [sp, #8]
    beba:	2300      	movs	r3, #0
    bebc:	9301      	str	r3, [sp, #4]
    bebe:	2300      	movs	r3, #0
    bec0:	9300      	str	r3, [sp, #0]
    bec2:	2348      	movs	r3, #72	; 0x48
    bec4:	2151      	movs	r1, #81	; 0x51
    bec6:	2002      	movs	r0, #2
    bec8:	4c29      	ldr	r4, [pc, #164]	; (bf70 <sslSetSockOpt+0x2c4>)
    beca:	47a0      	blx	r4
    becc:	0003      	movs	r3, r0
    bece:	3303      	adds	r3, #3
    bed0:	d110      	bne.n	bef4 <sslSetSockOpt+0x248>
						0, 0, 0) == M2M_ERR_MEM_ALLOC)
					{
						s8Ret = SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT | M2M_REQ_DATA_PKT, 
    bed2:	2367      	movs	r3, #103	; 0x67
    bed4:	18fc      	adds	r4, r7, r3
    bed6:	230c      	movs	r3, #12
    bed8:	18fa      	adds	r2, r7, r3
    beda:	2300      	movs	r3, #0
    bedc:	9302      	str	r3, [sp, #8]
    bede:	2300      	movs	r3, #0
    bee0:	9301      	str	r3, [sp, #4]
    bee2:	2300      	movs	r3, #0
    bee4:	9300      	str	r3, [sp, #0]
    bee6:	2348      	movs	r3, #72	; 0x48
    bee8:	21d1      	movs	r1, #209	; 0xd1
    beea:	2002      	movs	r0, #2
    beec:	4d20      	ldr	r5, [pc, #128]	; (bf70 <sslSetSockOpt+0x2c4>)
    beee:	47a8      	blx	r5
    bef0:	0003      	movs	r3, r0
    bef2:	7023      	strb	r3, [r4, #0]
							(uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd), 0, 0, 0);
					}
					s8Ret = SOCK_ERR_NO_ERROR;
    bef4:	2367      	movs	r3, #103	; 0x67
    bef6:	18fb      	adds	r3, r7, r3
    bef8:	2200      	movs	r2, #0
    befa:	701a      	strb	r2, [r3, #0]
    befc:	e02b      	b.n	bf56 <sslSetSockOpt+0x2aa>
				}
				else
				{
					M2M_ERR("SNI Exceeds Max Length\n");
    befe:	4a1d      	ldr	r2, [pc, #116]	; (bf74 <sslSetSockOpt+0x2c8>)
    bf00:	491d      	ldr	r1, [pc, #116]	; (bf78 <sslSetSockOpt+0x2cc>)
    bf02:	4b1e      	ldr	r3, [pc, #120]	; (bf7c <sslSetSockOpt+0x2d0>)
    bf04:	0018      	movs	r0, r3
    bf06:	4b1e      	ldr	r3, [pc, #120]	; (bf80 <sslSetSockOpt+0x2d4>)
    bf08:	4798      	blx	r3
    bf0a:	4b1e      	ldr	r3, [pc, #120]	; (bf84 <sslSetSockOpt+0x2d8>)
    bf0c:	0018      	movs	r0, r3
    bf0e:	4b1e      	ldr	r3, [pc, #120]	; (bf88 <sslSetSockOpt+0x2dc>)
    bf10:	4798      	blx	r3
    bf12:	200d      	movs	r0, #13
    bf14:	4b1d      	ldr	r3, [pc, #116]	; (bf8c <sslSetSockOpt+0x2e0>)
    bf16:	4798      	blx	r3
    bf18:	e01d      	b.n	bf56 <sslSetSockOpt+0x2aa>
				}
			}
			else
			{
				M2M_ERR("Unknown SSL Socket Option %d\n",u8Opt);
    bf1a:	4a1d      	ldr	r2, [pc, #116]	; (bf90 <sslSetSockOpt+0x2e4>)
    bf1c:	4916      	ldr	r1, [pc, #88]	; (bf78 <sslSetSockOpt+0x2cc>)
    bf1e:	4b17      	ldr	r3, [pc, #92]	; (bf7c <sslSetSockOpt+0x2d0>)
    bf20:	0018      	movs	r0, r3
    bf22:	4b17      	ldr	r3, [pc, #92]	; (bf80 <sslSetSockOpt+0x2d4>)
    bf24:	4798      	blx	r3
    bf26:	1dbb      	adds	r3, r7, #6
    bf28:	781a      	ldrb	r2, [r3, #0]
    bf2a:	4b1a      	ldr	r3, [pc, #104]	; (bf94 <sslSetSockOpt+0x2e8>)
    bf2c:	0011      	movs	r1, r2
    bf2e:	0018      	movs	r0, r3
    bf30:	4b13      	ldr	r3, [pc, #76]	; (bf80 <sslSetSockOpt+0x2d4>)
    bf32:	4798      	blx	r3
    bf34:	200d      	movs	r0, #13
    bf36:	4b15      	ldr	r3, [pc, #84]	; (bf8c <sslSetSockOpt+0x2e0>)
    bf38:	4798      	blx	r3
    bf3a:	e00c      	b.n	bf56 <sslSetSockOpt+0x2aa>
			}
		}
		else
		{
			M2M_ERR("Not SSL Socket\n");
    bf3c:	4a16      	ldr	r2, [pc, #88]	; (bf98 <sslSetSockOpt+0x2ec>)
    bf3e:	490e      	ldr	r1, [pc, #56]	; (bf78 <sslSetSockOpt+0x2cc>)
    bf40:	4b0e      	ldr	r3, [pc, #56]	; (bf7c <sslSetSockOpt+0x2d0>)
    bf42:	0018      	movs	r0, r3
    bf44:	4b0e      	ldr	r3, [pc, #56]	; (bf80 <sslSetSockOpt+0x2d4>)
    bf46:	4798      	blx	r3
    bf48:	4b14      	ldr	r3, [pc, #80]	; (bf9c <sslSetSockOpt+0x2f0>)
    bf4a:	0018      	movs	r0, r3
    bf4c:	4b0e      	ldr	r3, [pc, #56]	; (bf88 <sslSetSockOpt+0x2dc>)
    bf4e:	4798      	blx	r3
    bf50:	200d      	movs	r0, #13
    bf52:	4b0e      	ldr	r3, [pc, #56]	; (bf8c <sslSetSockOpt+0x2e0>)
    bf54:	4798      	blx	r3
		}
	}
	return s8Ret;
    bf56:	2367      	movs	r3, #103	; 0x67
    bf58:	18fb      	adds	r3, r7, r3
    bf5a:	781b      	ldrb	r3, [r3, #0]
    bf5c:	b25b      	sxtb	r3, r3
}
    bf5e:	0018      	movs	r0, r3
    bf60:	46bd      	mov	sp, r7
    bf62:	b01a      	add	sp, #104	; 0x68
    bf64:	bdb0      	pop	{r4, r5, r7, pc}
    bf66:	46c0      	nop			; (mov r8, r8)
    bf68:	20002a5c 	.word	0x20002a5c
    bf6c:	00006d55 	.word	0x00006d55
    bf70:	00006ff1 	.word	0x00006ff1
    bf74:	0000048f 	.word	0x0000048f
    bf78:	00020a98 	.word	0x00020a98
    bf7c:	00020a3c 	.word	0x00020a3c
    bf80:	0001c37d 	.word	0x0001c37d
    bf84:	00020a50 	.word	0x00020a50
    bf88:	0001c499 	.word	0x0001c499
    bf8c:	0001c3b1 	.word	0x0001c3b1
    bf90:	00000494 	.word	0x00000494
    bf94:	00020a68 	.word	0x00020a68
    bf98:	00000499 	.word	0x00000499
    bf9c:	00020a88 	.word	0x00020a88

0000bfa0 <setsockopt>:
Date
		9 September 2014
*********************************************************************/
sint8 setsockopt(SOCKET sock, uint8  u8Level, uint8  option_name,
       const void *option_value, uint16 u16OptionLen)
{
    bfa0:	b5b0      	push	{r4, r5, r7, lr}
    bfa2:	b08a      	sub	sp, #40	; 0x28
    bfa4:	af04      	add	r7, sp, #16
    bfa6:	0004      	movs	r4, r0
    bfa8:	0008      	movs	r0, r1
    bfaa:	0011      	movs	r1, r2
    bfac:	603b      	str	r3, [r7, #0]
    bfae:	1dfb      	adds	r3, r7, #7
    bfb0:	1c22      	adds	r2, r4, #0
    bfb2:	701a      	strb	r2, [r3, #0]
    bfb4:	1dbb      	adds	r3, r7, #6
    bfb6:	1c02      	adds	r2, r0, #0
    bfb8:	701a      	strb	r2, [r3, #0]
    bfba:	1d7b      	adds	r3, r7, #5
    bfbc:	1c0a      	adds	r2, r1, #0
    bfbe:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    bfc0:	2317      	movs	r3, #23
    bfc2:	18fb      	adds	r3, r7, r3
    bfc4:	22fa      	movs	r2, #250	; 0xfa
    bfc6:	701a      	strb	r2, [r3, #0]
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
    bfc8:	1dfb      	adds	r3, r7, #7
    bfca:	781b      	ldrb	r3, [r3, #0]
    bfcc:	2b7f      	cmp	r3, #127	; 0x7f
    bfce:	d85e      	bhi.n	c08e <setsockopt+0xee>
    bfd0:	683b      	ldr	r3, [r7, #0]
    bfd2:	2b00      	cmp	r3, #0
    bfd4:	d05b      	beq.n	c08e <setsockopt+0xee>
    bfd6:	1dfb      	adds	r3, r7, #7
    bfd8:	781b      	ldrb	r3, [r3, #0]
    bfda:	b25b      	sxtb	r3, r3
    bfdc:	4a30      	ldr	r2, [pc, #192]	; (c0a0 <setsockopt+0x100>)
    bfde:	011b      	lsls	r3, r3, #4
    bfe0:	18d3      	adds	r3, r2, r3
    bfe2:	330a      	adds	r3, #10
    bfe4:	781b      	ldrb	r3, [r3, #0]
    bfe6:	b2db      	uxtb	r3, r3
    bfe8:	2b01      	cmp	r3, #1
    bfea:	d150      	bne.n	c08e <setsockopt+0xee>
	{
		if(u8Level == SOL_SSL_SOCKET)
    bfec:	1dbb      	adds	r3, r7, #6
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	2b02      	cmp	r3, #2
    bff2:	d110      	bne.n	c016 <setsockopt+0x76>
		{
			s8Ret = sslSetSockOpt(sock, option_name, option_value, u16OptionLen);
    bff4:	2317      	movs	r3, #23
    bff6:	18fc      	adds	r4, r7, r3
    bff8:	2328      	movs	r3, #40	; 0x28
    bffa:	18fb      	adds	r3, r7, r3
    bffc:	881d      	ldrh	r5, [r3, #0]
    bffe:	683a      	ldr	r2, [r7, #0]
    c000:	1d7b      	adds	r3, r7, #5
    c002:	7819      	ldrb	r1, [r3, #0]
    c004:	1dfb      	adds	r3, r7, #7
    c006:	2000      	movs	r0, #0
    c008:	5618      	ldrsb	r0, [r3, r0]
    c00a:	002b      	movs	r3, r5
    c00c:	4d25      	ldr	r5, [pc, #148]	; (c0a4 <setsockopt+0x104>)
    c00e:	47a8      	blx	r5
    c010:	0003      	movs	r3, r0
    c012:	7023      	strb	r3, [r4, #0]
    c014:	e03b      	b.n	c08e <setsockopt+0xee>
		}
		else
		{
			uint8	u8Cmd = SOCKET_CMD_SET_SOCKET_OPTION;
    c016:	2316      	movs	r3, #22
    c018:	18fb      	adds	r3, r7, r3
    c01a:	224f      	movs	r2, #79	; 0x4f
    c01c:	701a      	strb	r2, [r3, #0]
			tstrSetSocketOptCmd strSetSockOpt;
			strSetSockOpt.u8Option=option_name;
    c01e:	230c      	movs	r3, #12
    c020:	18fb      	adds	r3, r7, r3
    c022:	1d7a      	adds	r2, r7, #5
    c024:	7812      	ldrb	r2, [r2, #0]
    c026:	715a      	strb	r2, [r3, #5]
			strSetSockOpt.sock = sock; 
    c028:	230c      	movs	r3, #12
    c02a:	18fb      	adds	r3, r7, r3
    c02c:	1dfa      	adds	r2, r7, #7
    c02e:	7812      	ldrb	r2, [r2, #0]
    c030:	711a      	strb	r2, [r3, #4]
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
    c032:	683b      	ldr	r3, [r7, #0]
    c034:	681a      	ldr	r2, [r3, #0]
    c036:	230c      	movs	r3, #12
    c038:	18fb      	adds	r3, r7, r3
    c03a:	601a      	str	r2, [r3, #0]
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;
    c03c:	1dfb      	adds	r3, r7, #7
    c03e:	781b      	ldrb	r3, [r3, #0]
    c040:	b25b      	sxtb	r3, r3
    c042:	4a17      	ldr	r2, [pc, #92]	; (c0a0 <setsockopt+0x100>)
    c044:	011b      	lsls	r3, r3, #4
    c046:	18d3      	adds	r3, r2, r3
    c048:	3306      	adds	r3, #6
    c04a:	881b      	ldrh	r3, [r3, #0]
    c04c:	b29a      	uxth	r2, r3
    c04e:	230c      	movs	r3, #12
    c050:	18fb      	adds	r3, r7, r3
    c052:	80da      	strh	r2, [r3, #6]

			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
    c054:	2317      	movs	r3, #23
    c056:	18fc      	adds	r4, r7, r3
    c058:	230c      	movs	r3, #12
    c05a:	18fa      	adds	r2, r7, r3
    c05c:	2316      	movs	r3, #22
    c05e:	18fb      	adds	r3, r7, r3
    c060:	7819      	ldrb	r1, [r3, #0]
    c062:	2300      	movs	r3, #0
    c064:	9302      	str	r3, [sp, #8]
    c066:	2300      	movs	r3, #0
    c068:	9301      	str	r3, [sp, #4]
    c06a:	2300      	movs	r3, #0
    c06c:	9300      	str	r3, [sp, #0]
    c06e:	2308      	movs	r3, #8
    c070:	2002      	movs	r0, #2
    c072:	4d0d      	ldr	r5, [pc, #52]	; (c0a8 <setsockopt+0x108>)
    c074:	47a8      	blx	r5
    c076:	0003      	movs	r3, r0
    c078:	7023      	strb	r3, [r4, #0]
			if(s8Ret != SOCK_ERR_NO_ERROR)
    c07a:	2317      	movs	r3, #23
    c07c:	18fb      	adds	r3, r7, r3
    c07e:	781b      	ldrb	r3, [r3, #0]
    c080:	b25b      	sxtb	r3, r3
    c082:	2b00      	cmp	r3, #0
    c084:	d003      	beq.n	c08e <setsockopt+0xee>
			{
				s8Ret = SOCK_ERR_INVALID;
    c086:	2317      	movs	r3, #23
    c088:	18fb      	adds	r3, r7, r3
    c08a:	22f7      	movs	r2, #247	; 0xf7
    c08c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return s8Ret;	
    c08e:	2317      	movs	r3, #23
    c090:	18fb      	adds	r3, r7, r3
    c092:	781b      	ldrb	r3, [r3, #0]
    c094:	b25b      	sxtb	r3, r3
}
    c096:	0018      	movs	r0, r3
    c098:	46bd      	mov	sp, r7
    c09a:	b006      	add	sp, #24
    c09c:	bdb0      	pop	{r4, r5, r7, pc}
    c09e:	46c0      	nop			; (mov r8, r8)
    c0a0:	20002a5c 	.word	0x20002a5c
    c0a4:	0000bcad 	.word	0x0000bcad
    c0a8:	00006ff1 	.word	0x00006ff1

0000c0ac <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    c0ac:	b580      	push	{r7, lr}
    c0ae:	b082      	sub	sp, #8
    c0b0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    c0b2:	003b      	movs	r3, r7
    c0b4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	22b9      	movs	r2, #185	; 0xb9
    c0ba:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c0bc:	4b13      	ldr	r3, [pc, #76]	; (c10c <spi_flash_enter_low_power_mode+0x60>)
    c0be:	2100      	movs	r1, #0
    c0c0:	0018      	movs	r0, r3
    c0c2:	4b13      	ldr	r3, [pc, #76]	; (c110 <spi_flash_enter_low_power_mode+0x64>)
    c0c4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c0c6:	687b      	ldr	r3, [r7, #4]
    c0c8:	781b      	ldrb	r3, [r3, #0]
    c0ca:	001a      	movs	r2, r3
    c0cc:	4b11      	ldr	r3, [pc, #68]	; (c114 <spi_flash_enter_low_power_mode+0x68>)
    c0ce:	0011      	movs	r1, r2
    c0d0:	0018      	movs	r0, r3
    c0d2:	4b0f      	ldr	r3, [pc, #60]	; (c110 <spi_flash_enter_low_power_mode+0x64>)
    c0d4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c0d6:	4b10      	ldr	r3, [pc, #64]	; (c118 <spi_flash_enter_low_power_mode+0x6c>)
    c0d8:	2101      	movs	r1, #1
    c0da:	0018      	movs	r0, r3
    c0dc:	4b0c      	ldr	r3, [pc, #48]	; (c110 <spi_flash_enter_low_power_mode+0x64>)
    c0de:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c0e0:	4b0e      	ldr	r3, [pc, #56]	; (c11c <spi_flash_enter_low_power_mode+0x70>)
    c0e2:	2100      	movs	r1, #0
    c0e4:	0018      	movs	r0, r3
    c0e6:	4b0a      	ldr	r3, [pc, #40]	; (c110 <spi_flash_enter_low_power_mode+0x64>)
    c0e8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    c0ea:	4b0d      	ldr	r3, [pc, #52]	; (c120 <spi_flash_enter_low_power_mode+0x74>)
    c0ec:	2181      	movs	r1, #129	; 0x81
    c0ee:	0018      	movs	r0, r3
    c0f0:	4b07      	ldr	r3, [pc, #28]	; (c110 <spi_flash_enter_low_power_mode+0x64>)
    c0f2:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c0f4:	46c0      	nop			; (mov r8, r8)
    c0f6:	4b0b      	ldr	r3, [pc, #44]	; (c124 <spi_flash_enter_low_power_mode+0x78>)
    c0f8:	0018      	movs	r0, r3
    c0fa:	4b0b      	ldr	r3, [pc, #44]	; (c128 <spi_flash_enter_low_power_mode+0x7c>)
    c0fc:	4798      	blx	r3
    c0fe:	0003      	movs	r3, r0
    c100:	2b01      	cmp	r3, #1
    c102:	d1f8      	bne.n	c0f6 <spi_flash_enter_low_power_mode+0x4a>
}
    c104:	46c0      	nop			; (mov r8, r8)
    c106:	46bd      	mov	sp, r7
    c108:	b002      	add	sp, #8
    c10a:	bd80      	pop	{r7, pc}
    c10c:	00010208 	.word	0x00010208
    c110:	000091a9 	.word	0x000091a9
    c114:	0001020c 	.word	0x0001020c
    c118:	00010214 	.word	0x00010214
    c11c:	0001021c 	.word	0x0001021c
    c120:	00010204 	.word	0x00010204
    c124:	00010218 	.word	0x00010218
    c128:	00009165 	.word	0x00009165

0000c12c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    c12c:	b580      	push	{r7, lr}
    c12e:	b082      	sub	sp, #8
    c130:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    c132:	003b      	movs	r3, r7
    c134:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    c136:	687b      	ldr	r3, [r7, #4]
    c138:	22ab      	movs	r2, #171	; 0xab
    c13a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c13c:	4b13      	ldr	r3, [pc, #76]	; (c18c <spi_flash_leave_low_power_mode+0x60>)
    c13e:	2100      	movs	r1, #0
    c140:	0018      	movs	r0, r3
    c142:	4b13      	ldr	r3, [pc, #76]	; (c190 <spi_flash_leave_low_power_mode+0x64>)
    c144:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c146:	687b      	ldr	r3, [r7, #4]
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	001a      	movs	r2, r3
    c14c:	4b11      	ldr	r3, [pc, #68]	; (c194 <spi_flash_leave_low_power_mode+0x68>)
    c14e:	0011      	movs	r1, r2
    c150:	0018      	movs	r0, r3
    c152:	4b0f      	ldr	r3, [pc, #60]	; (c190 <spi_flash_leave_low_power_mode+0x64>)
    c154:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c156:	4b10      	ldr	r3, [pc, #64]	; (c198 <spi_flash_leave_low_power_mode+0x6c>)
    c158:	2101      	movs	r1, #1
    c15a:	0018      	movs	r0, r3
    c15c:	4b0c      	ldr	r3, [pc, #48]	; (c190 <spi_flash_leave_low_power_mode+0x64>)
    c15e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c160:	4b0e      	ldr	r3, [pc, #56]	; (c19c <spi_flash_leave_low_power_mode+0x70>)
    c162:	2100      	movs	r1, #0
    c164:	0018      	movs	r0, r3
    c166:	4b0a      	ldr	r3, [pc, #40]	; (c190 <spi_flash_leave_low_power_mode+0x64>)
    c168:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    c16a:	4b0d      	ldr	r3, [pc, #52]	; (c1a0 <spi_flash_leave_low_power_mode+0x74>)
    c16c:	2181      	movs	r1, #129	; 0x81
    c16e:	0018      	movs	r0, r3
    c170:	4b07      	ldr	r3, [pc, #28]	; (c190 <spi_flash_leave_low_power_mode+0x64>)
    c172:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c174:	46c0      	nop			; (mov r8, r8)
    c176:	4b0b      	ldr	r3, [pc, #44]	; (c1a4 <spi_flash_leave_low_power_mode+0x78>)
    c178:	0018      	movs	r0, r3
    c17a:	4b0b      	ldr	r3, [pc, #44]	; (c1a8 <spi_flash_leave_low_power_mode+0x7c>)
    c17c:	4798      	blx	r3
    c17e:	0003      	movs	r3, r0
    c180:	2b01      	cmp	r3, #1
    c182:	d1f8      	bne.n	c176 <spi_flash_leave_low_power_mode+0x4a>
}
    c184:	46c0      	nop			; (mov r8, r8)
    c186:	46bd      	mov	sp, r7
    c188:	b002      	add	sp, #8
    c18a:	bd80      	pop	{r7, pc}
    c18c:	00010208 	.word	0x00010208
    c190:	000091a9 	.word	0x000091a9
    c194:	0001020c 	.word	0x0001020c
    c198:	00010214 	.word	0x00010214
    c19c:	0001021c 	.word	0x0001021c
    c1a0:	00010204 	.word	0x00010204
    c1a4:	00010218 	.word	0x00010218
    c1a8:	00009165 	.word	0x00009165

0000c1ac <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    c1ac:	b590      	push	{r4, r7, lr}
    c1ae:	b085      	sub	sp, #20
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	0002      	movs	r2, r0
    c1b4:	1dfb      	adds	r3, r7, #7
    c1b6:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    c1b8:	230f      	movs	r3, #15
    c1ba:	18fb      	adds	r3, r7, r3
    c1bc:	2200      	movs	r2, #0
    c1be:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    c1c0:	4b24      	ldr	r3, [pc, #144]	; (c254 <spi_flash_enable+0xa8>)
    c1c2:	4798      	blx	r3
    c1c4:	0003      	movs	r3, r0
    c1c6:	051b      	lsls	r3, r3, #20
    c1c8:	0d1b      	lsrs	r3, r3, #20
    c1ca:	4a23      	ldr	r2, [pc, #140]	; (c258 <spi_flash_enable+0xac>)
    c1cc:	4293      	cmp	r3, r2
    c1ce:	d938      	bls.n	c242 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    c1d0:	230f      	movs	r3, #15
    c1d2:	18fc      	adds	r4, r7, r3
    c1d4:	2308      	movs	r3, #8
    c1d6:	18fb      	adds	r3, r7, r3
    c1d8:	4a20      	ldr	r2, [pc, #128]	; (c25c <spi_flash_enable+0xb0>)
    c1da:	0019      	movs	r1, r3
    c1dc:	0010      	movs	r0, r2
    c1de:	4b20      	ldr	r3, [pc, #128]	; (c260 <spi_flash_enable+0xb4>)
    c1e0:	4798      	blx	r3
    c1e2:	0003      	movs	r3, r0
    c1e4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    c1e6:	230f      	movs	r3, #15
    c1e8:	18fb      	adds	r3, r7, r3
    c1ea:	781b      	ldrb	r3, [r3, #0]
    c1ec:	b25b      	sxtb	r3, r3
    c1ee:	2b00      	cmp	r3, #0
    c1f0:	d126      	bne.n	c240 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    c1f2:	68bb      	ldr	r3, [r7, #8]
    c1f4:	4a1b      	ldr	r2, [pc, #108]	; (c264 <spi_flash_enable+0xb8>)
    c1f6:	4013      	ands	r3, r2
    c1f8:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    c1fa:	68bb      	ldr	r3, [r7, #8]
    c1fc:	4a1a      	ldr	r2, [pc, #104]	; (c268 <spi_flash_enable+0xbc>)
    c1fe:	4313      	orrs	r3, r2
    c200:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    c202:	68bb      	ldr	r3, [r7, #8]
    c204:	4a15      	ldr	r2, [pc, #84]	; (c25c <spi_flash_enable+0xb0>)
    c206:	0019      	movs	r1, r3
    c208:	0010      	movs	r0, r2
    c20a:	4b18      	ldr	r3, [pc, #96]	; (c26c <spi_flash_enable+0xc0>)
    c20c:	4798      	blx	r3
		if(enable) {
    c20e:	1dfb      	adds	r3, r7, #7
    c210:	781b      	ldrb	r3, [r3, #0]
    c212:	2b00      	cmp	r3, #0
    c214:	d002      	beq.n	c21c <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    c216:	4b16      	ldr	r3, [pc, #88]	; (c270 <spi_flash_enable+0xc4>)
    c218:	4798      	blx	r3
    c21a:	e001      	b.n	c220 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    c21c:	4b15      	ldr	r3, [pc, #84]	; (c274 <spi_flash_enable+0xc8>)
    c21e:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    c220:	68bb      	ldr	r3, [r7, #8]
    c222:	4a10      	ldr	r2, [pc, #64]	; (c264 <spi_flash_enable+0xb8>)
    c224:	4013      	ands	r3, r2
    c226:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    c228:	68bb      	ldr	r3, [r7, #8]
    c22a:	2280      	movs	r2, #128	; 0x80
    c22c:	0252      	lsls	r2, r2, #9
    c22e:	4313      	orrs	r3, r2
    c230:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    c232:	68bb      	ldr	r3, [r7, #8]
    c234:	4a09      	ldr	r2, [pc, #36]	; (c25c <spi_flash_enable+0xb0>)
    c236:	0019      	movs	r1, r3
    c238:	0010      	movs	r0, r2
    c23a:	4b0c      	ldr	r3, [pc, #48]	; (c26c <spi_flash_enable+0xc0>)
    c23c:	4798      	blx	r3
    c23e:	e000      	b.n	c242 <spi_flash_enable+0x96>
			goto ERR1;
    c240:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    c242:	230f      	movs	r3, #15
    c244:	18fb      	adds	r3, r7, r3
    c246:	781b      	ldrb	r3, [r3, #0]
    c248:	b25b      	sxtb	r3, r3
}
    c24a:	0018      	movs	r0, r3
    c24c:	46bd      	mov	sp, r7
    c24e:	b005      	add	sp, #20
    c250:	bd90      	pop	{r4, r7, pc}
    c252:	46c0      	nop			; (mov r8, r8)
    c254:	000089a5 	.word	0x000089a5
    c258:	0000039f 	.word	0x0000039f
    c25c:	00001410 	.word	0x00001410
    c260:	00009185 	.word	0x00009185
    c264:	f8888fff 	.word	0xf8888fff
    c268:	01111000 	.word	0x01111000
    c26c:	000091a9 	.word	0x000091a9
    c270:	0000c12d 	.word	0x0000c12d
    c274:	0000c0ad 	.word	0x0000c0ad

0000c278 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    c278:	b580      	push	{r7, lr}
    c27a:	b084      	sub	sp, #16
    c27c:	af00      	add	r7, sp, #0
    c27e:	0002      	movs	r2, r0
    c280:	1dfb      	adds	r3, r7, #7
    c282:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    c284:	230f      	movs	r3, #15
    c286:	18fb      	adds	r3, r7, r3
    c288:	1dfa      	adds	r2, r7, #7
    c28a:	7812      	ldrb	r2, [r2, #0]
    c28c:	0952      	lsrs	r2, r2, #5
    c28e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    c290:	230f      	movs	r3, #15
    c292:	18fb      	adds	r3, r7, r3
    c294:	781b      	ldrb	r3, [r3, #0]
    c296:	2b00      	cmp	r3, #0
    c298:	d10c      	bne.n	c2b4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c29a:	4b09      	ldr	r3, [pc, #36]	; (c2c0 <_extint_get_eic_from_channel+0x48>)
    c29c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    c29e:	230f      	movs	r3, #15
    c2a0:	18fb      	adds	r3, r7, r3
    c2a2:	781b      	ldrb	r3, [r3, #0]
    c2a4:	009b      	lsls	r3, r3, #2
    c2a6:	2210      	movs	r2, #16
    c2a8:	4694      	mov	ip, r2
    c2aa:	44bc      	add	ip, r7
    c2ac:	4463      	add	r3, ip
    c2ae:	3b08      	subs	r3, #8
    c2b0:	681b      	ldr	r3, [r3, #0]
    c2b2:	e000      	b.n	c2b6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    c2b4:	2300      	movs	r3, #0
	}
}
    c2b6:	0018      	movs	r0, r3
    c2b8:	46bd      	mov	sp, r7
    c2ba:	b004      	add	sp, #16
    c2bc:	bd80      	pop	{r7, pc}
    c2be:	46c0      	nop			; (mov r8, r8)
    c2c0:	40001800 	.word	0x40001800

0000c2c4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b084      	sub	sp, #16
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	0002      	movs	r2, r0
    c2cc:	1dfb      	adds	r3, r7, #7
    c2ce:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    c2d0:	1dfb      	adds	r3, r7, #7
    c2d2:	781b      	ldrb	r3, [r3, #0]
    c2d4:	0018      	movs	r0, r3
    c2d6:	4b0b      	ldr	r3, [pc, #44]	; (c304 <extint_chan_is_detected+0x40>)
    c2d8:	4798      	blx	r3
    c2da:	0003      	movs	r3, r0
    c2dc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    c2de:	1dfb      	adds	r3, r7, #7
    c2e0:	781b      	ldrb	r3, [r3, #0]
    c2e2:	221f      	movs	r2, #31
    c2e4:	4013      	ands	r3, r2
    c2e6:	2201      	movs	r2, #1
    c2e8:	409a      	lsls	r2, r3
    c2ea:	0013      	movs	r3, r2
    c2ec:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    c2ee:	68fb      	ldr	r3, [r7, #12]
    c2f0:	691b      	ldr	r3, [r3, #16]
    c2f2:	68ba      	ldr	r2, [r7, #8]
    c2f4:	4013      	ands	r3, r2
    c2f6:	1e5a      	subs	r2, r3, #1
    c2f8:	4193      	sbcs	r3, r2
    c2fa:	b2db      	uxtb	r3, r3
}
    c2fc:	0018      	movs	r0, r3
    c2fe:	46bd      	mov	sp, r7
    c300:	b004      	add	sp, #16
    c302:	bd80      	pop	{r7, pc}
    c304:	0000c279 	.word	0x0000c279

0000c308 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    c308:	b580      	push	{r7, lr}
    c30a:	b084      	sub	sp, #16
    c30c:	af00      	add	r7, sp, #0
    c30e:	0002      	movs	r2, r0
    c310:	1dfb      	adds	r3, r7, #7
    c312:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    c314:	1dfb      	adds	r3, r7, #7
    c316:	781b      	ldrb	r3, [r3, #0]
    c318:	0018      	movs	r0, r3
    c31a:	4b09      	ldr	r3, [pc, #36]	; (c340 <extint_chan_clear_detected+0x38>)
    c31c:	4798      	blx	r3
    c31e:	0003      	movs	r3, r0
    c320:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    c322:	1dfb      	adds	r3, r7, #7
    c324:	781b      	ldrb	r3, [r3, #0]
    c326:	221f      	movs	r2, #31
    c328:	4013      	ands	r3, r2
    c32a:	2201      	movs	r2, #1
    c32c:	409a      	lsls	r2, r3
    c32e:	0013      	movs	r3, r2
    c330:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    c332:	68fb      	ldr	r3, [r7, #12]
    c334:	68ba      	ldr	r2, [r7, #8]
    c336:	611a      	str	r2, [r3, #16]
}
    c338:	46c0      	nop			; (mov r8, r8)
    c33a:	46bd      	mov	sp, r7
    c33c:	b004      	add	sp, #16
    c33e:	bd80      	pop	{r7, pc}
    c340:	0000c279 	.word	0x0000c279

0000c344 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    c344:	b580      	push	{r7, lr}
    c346:	b082      	sub	sp, #8
    c348:	af00      	add	r7, sp, #0
    c34a:	6078      	str	r0, [r7, #4]
    c34c:	0008      	movs	r0, r1
    c34e:	0011      	movs	r1, r2
    c350:	1cfb      	adds	r3, r7, #3
    c352:	1c02      	adds	r2, r0, #0
    c354:	701a      	strb	r2, [r3, #0]
    c356:	1cbb      	adds	r3, r7, #2
    c358:	1c0a      	adds	r2, r1, #0
    c35a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    c35c:	1cbb      	adds	r3, r7, #2
    c35e:	781b      	ldrb	r3, [r3, #0]
    c360:	2b00      	cmp	r3, #0
    c362:	d001      	beq.n	c368 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    c364:	2317      	movs	r3, #23
    c366:	e019      	b.n	c39c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    c368:	1cfb      	adds	r3, r7, #3
    c36a:	781a      	ldrb	r2, [r3, #0]
    c36c:	4b0d      	ldr	r3, [pc, #52]	; (c3a4 <extint_register_callback+0x60>)
    c36e:	0092      	lsls	r2, r2, #2
    c370:	58d3      	ldr	r3, [r2, r3]
    c372:	2b00      	cmp	r3, #0
    c374:	d107      	bne.n	c386 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    c376:	1cfb      	adds	r3, r7, #3
    c378:	781a      	ldrb	r2, [r3, #0]
    c37a:	4b0a      	ldr	r3, [pc, #40]	; (c3a4 <extint_register_callback+0x60>)
    c37c:	0092      	lsls	r2, r2, #2
    c37e:	6879      	ldr	r1, [r7, #4]
    c380:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    c382:	2300      	movs	r3, #0
    c384:	e00a      	b.n	c39c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    c386:	1cfb      	adds	r3, r7, #3
    c388:	781a      	ldrb	r2, [r3, #0]
    c38a:	4b06      	ldr	r3, [pc, #24]	; (c3a4 <extint_register_callback+0x60>)
    c38c:	0092      	lsls	r2, r2, #2
    c38e:	58d2      	ldr	r2, [r2, r3]
    c390:	687b      	ldr	r3, [r7, #4]
    c392:	429a      	cmp	r2, r3
    c394:	d101      	bne.n	c39a <extint_register_callback+0x56>
		return STATUS_OK;
    c396:	2300      	movs	r3, #0
    c398:	e000      	b.n	c39c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    c39a:	231d      	movs	r3, #29
}
    c39c:	0018      	movs	r0, r3
    c39e:	46bd      	mov	sp, r7
    c3a0:	b002      	add	sp, #8
    c3a2:	bd80      	pop	{r7, pc}
    c3a4:	20002b1c 	.word	0x20002b1c

0000c3a8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    c3a8:	b580      	push	{r7, lr}
    c3aa:	b084      	sub	sp, #16
    c3ac:	af00      	add	r7, sp, #0
    c3ae:	0002      	movs	r2, r0
    c3b0:	1dfb      	adds	r3, r7, #7
    c3b2:	701a      	strb	r2, [r3, #0]
    c3b4:	1dbb      	adds	r3, r7, #6
    c3b6:	1c0a      	adds	r2, r1, #0
    c3b8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    c3ba:	1dbb      	adds	r3, r7, #6
    c3bc:	781b      	ldrb	r3, [r3, #0]
    c3be:	2b00      	cmp	r3, #0
    c3c0:	d10e      	bne.n	c3e0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    c3c2:	1dfb      	adds	r3, r7, #7
    c3c4:	781b      	ldrb	r3, [r3, #0]
    c3c6:	0018      	movs	r0, r3
    c3c8:	4b08      	ldr	r3, [pc, #32]	; (c3ec <extint_chan_enable_callback+0x44>)
    c3ca:	4798      	blx	r3
    c3cc:	0003      	movs	r3, r0
    c3ce:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    c3d0:	1dfb      	adds	r3, r7, #7
    c3d2:	781b      	ldrb	r3, [r3, #0]
    c3d4:	2201      	movs	r2, #1
    c3d6:	409a      	lsls	r2, r3
    c3d8:	68fb      	ldr	r3, [r7, #12]
    c3da:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    c3dc:	2300      	movs	r3, #0
    c3de:	e000      	b.n	c3e2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    c3e0:	2317      	movs	r3, #23
}
    c3e2:	0018      	movs	r0, r3
    c3e4:	46bd      	mov	sp, r7
    c3e6:	b004      	add	sp, #16
    c3e8:	bd80      	pop	{r7, pc}
    c3ea:	46c0      	nop			; (mov r8, r8)
    c3ec:	0000c279 	.word	0x0000c279

0000c3f0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    c3f0:	b580      	push	{r7, lr}
    c3f2:	b084      	sub	sp, #16
    c3f4:	af00      	add	r7, sp, #0
    c3f6:	0002      	movs	r2, r0
    c3f8:	1dfb      	adds	r3, r7, #7
    c3fa:	701a      	strb	r2, [r3, #0]
    c3fc:	1dbb      	adds	r3, r7, #6
    c3fe:	1c0a      	adds	r2, r1, #0
    c400:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    c402:	1dbb      	adds	r3, r7, #6
    c404:	781b      	ldrb	r3, [r3, #0]
    c406:	2b00      	cmp	r3, #0
    c408:	d10e      	bne.n	c428 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    c40a:	1dfb      	adds	r3, r7, #7
    c40c:	781b      	ldrb	r3, [r3, #0]
    c40e:	0018      	movs	r0, r3
    c410:	4b08      	ldr	r3, [pc, #32]	; (c434 <extint_chan_disable_callback+0x44>)
    c412:	4798      	blx	r3
    c414:	0003      	movs	r3, r0
    c416:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    c418:	1dfb      	adds	r3, r7, #7
    c41a:	781b      	ldrb	r3, [r3, #0]
    c41c:	2201      	movs	r2, #1
    c41e:	409a      	lsls	r2, r3
    c420:	68fb      	ldr	r3, [r7, #12]
    c422:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    c424:	2300      	movs	r3, #0
    c426:	e000      	b.n	c42a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    c428:	2317      	movs	r3, #23
}
    c42a:	0018      	movs	r0, r3
    c42c:	46bd      	mov	sp, r7
    c42e:	b004      	add	sp, #16
    c430:	bd80      	pop	{r7, pc}
    c432:	46c0      	nop			; (mov r8, r8)
    c434:	0000c279 	.word	0x0000c279

0000c438 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    c438:	b580      	push	{r7, lr}
    c43a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    c43c:	4b15      	ldr	r3, [pc, #84]	; (c494 <EIC_Handler+0x5c>)
    c43e:	2200      	movs	r2, #0
    c440:	701a      	strb	r2, [r3, #0]
    c442:	e020      	b.n	c486 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    c444:	4b13      	ldr	r3, [pc, #76]	; (c494 <EIC_Handler+0x5c>)
    c446:	781b      	ldrb	r3, [r3, #0]
    c448:	0018      	movs	r0, r3
    c44a:	4b13      	ldr	r3, [pc, #76]	; (c498 <EIC_Handler+0x60>)
    c44c:	4798      	blx	r3
    c44e:	1e03      	subs	r3, r0, #0
    c450:	d013      	beq.n	c47a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    c452:	4b10      	ldr	r3, [pc, #64]	; (c494 <EIC_Handler+0x5c>)
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	0018      	movs	r0, r3
    c458:	4b10      	ldr	r3, [pc, #64]	; (c49c <EIC_Handler+0x64>)
    c45a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    c45c:	4b0d      	ldr	r3, [pc, #52]	; (c494 <EIC_Handler+0x5c>)
    c45e:	781b      	ldrb	r3, [r3, #0]
    c460:	001a      	movs	r2, r3
    c462:	4b0f      	ldr	r3, [pc, #60]	; (c4a0 <EIC_Handler+0x68>)
    c464:	0092      	lsls	r2, r2, #2
    c466:	58d3      	ldr	r3, [r2, r3]
    c468:	2b00      	cmp	r3, #0
    c46a:	d006      	beq.n	c47a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    c46c:	4b09      	ldr	r3, [pc, #36]	; (c494 <EIC_Handler+0x5c>)
    c46e:	781b      	ldrb	r3, [r3, #0]
    c470:	001a      	movs	r2, r3
    c472:	4b0b      	ldr	r3, [pc, #44]	; (c4a0 <EIC_Handler+0x68>)
    c474:	0092      	lsls	r2, r2, #2
    c476:	58d3      	ldr	r3, [r2, r3]
    c478:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    c47a:	4b06      	ldr	r3, [pc, #24]	; (c494 <EIC_Handler+0x5c>)
    c47c:	781b      	ldrb	r3, [r3, #0]
    c47e:	3301      	adds	r3, #1
    c480:	b2da      	uxtb	r2, r3
    c482:	4b04      	ldr	r3, [pc, #16]	; (c494 <EIC_Handler+0x5c>)
    c484:	701a      	strb	r2, [r3, #0]
    c486:	4b03      	ldr	r3, [pc, #12]	; (c494 <EIC_Handler+0x5c>)
    c488:	781b      	ldrb	r3, [r3, #0]
    c48a:	2b0f      	cmp	r3, #15
    c48c:	d9da      	bls.n	c444 <EIC_Handler+0xc>
			}
		}
	}
}
    c48e:	46c0      	nop			; (mov r8, r8)
    c490:	46bd      	mov	sp, r7
    c492:	bd80      	pop	{r7, pc}
    c494:	20002b18 	.word	0x20002b18
    c498:	0000c2c5 	.word	0x0000c2c5
    c49c:	0000c309 	.word	0x0000c309
    c4a0:	20002b1c 	.word	0x20002b1c

0000c4a4 <system_gclk_chan_get_config_defaults>:
{
    c4a4:	b580      	push	{r7, lr}
    c4a6:	b082      	sub	sp, #8
    c4a8:	af00      	add	r7, sp, #0
    c4aa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c4ac:	687b      	ldr	r3, [r7, #4]
    c4ae:	2200      	movs	r2, #0
    c4b0:	701a      	strb	r2, [r3, #0]
}
    c4b2:	46c0      	nop			; (mov r8, r8)
    c4b4:	46bd      	mov	sp, r7
    c4b6:	b002      	add	sp, #8
    c4b8:	bd80      	pop	{r7, pc}
	...

0000c4bc <system_apb_clock_set_mask>:
{
    c4bc:	b580      	push	{r7, lr}
    c4be:	b082      	sub	sp, #8
    c4c0:	af00      	add	r7, sp, #0
    c4c2:	0002      	movs	r2, r0
    c4c4:	6039      	str	r1, [r7, #0]
    c4c6:	1dfb      	adds	r3, r7, #7
    c4c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c4ca:	1dfb      	adds	r3, r7, #7
    c4cc:	781b      	ldrb	r3, [r3, #0]
    c4ce:	2b01      	cmp	r3, #1
    c4d0:	d00a      	beq.n	c4e8 <system_apb_clock_set_mask+0x2c>
    c4d2:	2b02      	cmp	r3, #2
    c4d4:	d00f      	beq.n	c4f6 <system_apb_clock_set_mask+0x3a>
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d114      	bne.n	c504 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c4da:	4b0e      	ldr	r3, [pc, #56]	; (c514 <system_apb_clock_set_mask+0x58>)
    c4dc:	4a0d      	ldr	r2, [pc, #52]	; (c514 <system_apb_clock_set_mask+0x58>)
    c4de:	6991      	ldr	r1, [r2, #24]
    c4e0:	683a      	ldr	r2, [r7, #0]
    c4e2:	430a      	orrs	r2, r1
    c4e4:	619a      	str	r2, [r3, #24]
			break;
    c4e6:	e00f      	b.n	c508 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c4e8:	4b0a      	ldr	r3, [pc, #40]	; (c514 <system_apb_clock_set_mask+0x58>)
    c4ea:	4a0a      	ldr	r2, [pc, #40]	; (c514 <system_apb_clock_set_mask+0x58>)
    c4ec:	69d1      	ldr	r1, [r2, #28]
    c4ee:	683a      	ldr	r2, [r7, #0]
    c4f0:	430a      	orrs	r2, r1
    c4f2:	61da      	str	r2, [r3, #28]
			break;
    c4f4:	e008      	b.n	c508 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c4f6:	4b07      	ldr	r3, [pc, #28]	; (c514 <system_apb_clock_set_mask+0x58>)
    c4f8:	4a06      	ldr	r2, [pc, #24]	; (c514 <system_apb_clock_set_mask+0x58>)
    c4fa:	6a11      	ldr	r1, [r2, #32]
    c4fc:	683a      	ldr	r2, [r7, #0]
    c4fe:	430a      	orrs	r2, r1
    c500:	621a      	str	r2, [r3, #32]
			break;
    c502:	e001      	b.n	c508 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c504:	2317      	movs	r3, #23
    c506:	e000      	b.n	c50a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c508:	2300      	movs	r3, #0
}
    c50a:	0018      	movs	r0, r3
    c50c:	46bd      	mov	sp, r7
    c50e:	b002      	add	sp, #8
    c510:	bd80      	pop	{r7, pc}
    c512:	46c0      	nop			; (mov r8, r8)
    c514:	40000400 	.word	0x40000400

0000c518 <system_pinmux_get_config_defaults>:
{
    c518:	b580      	push	{r7, lr}
    c51a:	b082      	sub	sp, #8
    c51c:	af00      	add	r7, sp, #0
    c51e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c520:	687b      	ldr	r3, [r7, #4]
    c522:	2280      	movs	r2, #128	; 0x80
    c524:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c526:	687b      	ldr	r3, [r7, #4]
    c528:	2200      	movs	r2, #0
    c52a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c52c:	687b      	ldr	r3, [r7, #4]
    c52e:	2201      	movs	r2, #1
    c530:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    c532:	687b      	ldr	r3, [r7, #4]
    c534:	2200      	movs	r2, #0
    c536:	70da      	strb	r2, [r3, #3]
}
    c538:	46c0      	nop			; (mov r8, r8)
    c53a:	46bd      	mov	sp, r7
    c53c:	b002      	add	sp, #8
    c53e:	bd80      	pop	{r7, pc}

0000c540 <system_interrupt_enable>:
{
    c540:	b580      	push	{r7, lr}
    c542:	b082      	sub	sp, #8
    c544:	af00      	add	r7, sp, #0
    c546:	0002      	movs	r2, r0
    c548:	1dfb      	adds	r3, r7, #7
    c54a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c54c:	4b06      	ldr	r3, [pc, #24]	; (c568 <system_interrupt_enable+0x28>)
    c54e:	1dfa      	adds	r2, r7, #7
    c550:	7812      	ldrb	r2, [r2, #0]
    c552:	0011      	movs	r1, r2
    c554:	221f      	movs	r2, #31
    c556:	400a      	ands	r2, r1
    c558:	2101      	movs	r1, #1
    c55a:	4091      	lsls	r1, r2
    c55c:	000a      	movs	r2, r1
    c55e:	601a      	str	r2, [r3, #0]
}
    c560:	46c0      	nop			; (mov r8, r8)
    c562:	46bd      	mov	sp, r7
    c564:	b002      	add	sp, #8
    c566:	bd80      	pop	{r7, pc}
    c568:	e000e100 	.word	0xe000e100

0000c56c <_extint_get_eic_from_channel>:
{
    c56c:	b580      	push	{r7, lr}
    c56e:	b084      	sub	sp, #16
    c570:	af00      	add	r7, sp, #0
    c572:	0002      	movs	r2, r0
    c574:	1dfb      	adds	r3, r7, #7
    c576:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    c578:	230f      	movs	r3, #15
    c57a:	18fb      	adds	r3, r7, r3
    c57c:	1dfa      	adds	r2, r7, #7
    c57e:	7812      	ldrb	r2, [r2, #0]
    c580:	0952      	lsrs	r2, r2, #5
    c582:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    c584:	230f      	movs	r3, #15
    c586:	18fb      	adds	r3, r7, r3
    c588:	781b      	ldrb	r3, [r3, #0]
    c58a:	2b00      	cmp	r3, #0
    c58c:	d10c      	bne.n	c5a8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c58e:	4b09      	ldr	r3, [pc, #36]	; (c5b4 <_extint_get_eic_from_channel+0x48>)
    c590:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    c592:	230f      	movs	r3, #15
    c594:	18fb      	adds	r3, r7, r3
    c596:	781b      	ldrb	r3, [r3, #0]
    c598:	009b      	lsls	r3, r3, #2
    c59a:	2210      	movs	r2, #16
    c59c:	4694      	mov	ip, r2
    c59e:	44bc      	add	ip, r7
    c5a0:	4463      	add	r3, ip
    c5a2:	3b08      	subs	r3, #8
    c5a4:	681b      	ldr	r3, [r3, #0]
    c5a6:	e000      	b.n	c5aa <_extint_get_eic_from_channel+0x3e>
		return NULL;
    c5a8:	2300      	movs	r3, #0
}
    c5aa:	0018      	movs	r0, r3
    c5ac:	46bd      	mov	sp, r7
    c5ae:	b004      	add	sp, #16
    c5b0:	bd80      	pop	{r7, pc}
    c5b2:	46c0      	nop			; (mov r8, r8)
    c5b4:	40001800 	.word	0x40001800

0000c5b8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    c5b8:	b580      	push	{r7, lr}
    c5ba:	b082      	sub	sp, #8
    c5bc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c5be:	4b0f      	ldr	r3, [pc, #60]	; (c5fc <extint_is_syncing+0x44>)
    c5c0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c5c2:	2300      	movs	r3, #0
    c5c4:	607b      	str	r3, [r7, #4]
    c5c6:	e011      	b.n	c5ec <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    c5c8:	687b      	ldr	r3, [r7, #4]
    c5ca:	009b      	lsls	r3, r3, #2
    c5cc:	2208      	movs	r2, #8
    c5ce:	4694      	mov	ip, r2
    c5d0:	44bc      	add	ip, r7
    c5d2:	4463      	add	r3, ip
    c5d4:	3b08      	subs	r3, #8
    c5d6:	681b      	ldr	r3, [r3, #0]
    c5d8:	785b      	ldrb	r3, [r3, #1]
    c5da:	b2db      	uxtb	r3, r3
    c5dc:	b25b      	sxtb	r3, r3
    c5de:	2b00      	cmp	r3, #0
    c5e0:	da01      	bge.n	c5e6 <extint_is_syncing+0x2e>
			return true;
    c5e2:	2301      	movs	r3, #1
    c5e4:	e006      	b.n	c5f4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c5e6:	687b      	ldr	r3, [r7, #4]
    c5e8:	3301      	adds	r3, #1
    c5ea:	607b      	str	r3, [r7, #4]
    c5ec:	687b      	ldr	r3, [r7, #4]
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d0ea      	beq.n	c5c8 <extint_is_syncing+0x10>
		}
	}
	return false;
    c5f2:	2300      	movs	r3, #0
}
    c5f4:	0018      	movs	r0, r3
    c5f6:	46bd      	mov	sp, r7
    c5f8:	b002      	add	sp, #8
    c5fa:	bd80      	pop	{r7, pc}
    c5fc:	40001800 	.word	0x40001800

0000c600 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    c600:	b580      	push	{r7, lr}
    c602:	b084      	sub	sp, #16
    c604:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c606:	4b2d      	ldr	r3, [pc, #180]	; (c6bc <_system_extint_init+0xbc>)
    c608:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    c60a:	2140      	movs	r1, #64	; 0x40
    c60c:	2000      	movs	r0, #0
    c60e:	4b2c      	ldr	r3, [pc, #176]	; (c6c0 <_system_extint_init+0xc0>)
    c610:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    c612:	003b      	movs	r3, r7
    c614:	0018      	movs	r0, r3
    c616:	4b2b      	ldr	r3, [pc, #172]	; (c6c4 <_system_extint_init+0xc4>)
    c618:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    c61a:	003b      	movs	r3, r7
    c61c:	2200      	movs	r2, #0
    c61e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    c620:	003b      	movs	r3, r7
    c622:	0019      	movs	r1, r3
    c624:	2005      	movs	r0, #5
    c626:	4b28      	ldr	r3, [pc, #160]	; (c6c8 <_system_extint_init+0xc8>)
    c628:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    c62a:	2005      	movs	r0, #5
    c62c:	4b27      	ldr	r3, [pc, #156]	; (c6cc <_system_extint_init+0xcc>)
    c62e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c630:	2300      	movs	r3, #0
    c632:	60fb      	str	r3, [r7, #12]
    c634:	e018      	b.n	c668 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    c636:	68fb      	ldr	r3, [r7, #12]
    c638:	009b      	lsls	r3, r3, #2
    c63a:	2210      	movs	r2, #16
    c63c:	4694      	mov	ip, r2
    c63e:	44bc      	add	ip, r7
    c640:	4463      	add	r3, ip
    c642:	3b0c      	subs	r3, #12
    c644:	681a      	ldr	r2, [r3, #0]
    c646:	68fb      	ldr	r3, [r7, #12]
    c648:	009b      	lsls	r3, r3, #2
    c64a:	2110      	movs	r1, #16
    c64c:	468c      	mov	ip, r1
    c64e:	44bc      	add	ip, r7
    c650:	4463      	add	r3, ip
    c652:	3b0c      	subs	r3, #12
    c654:	681b      	ldr	r3, [r3, #0]
    c656:	781b      	ldrb	r3, [r3, #0]
    c658:	b2db      	uxtb	r3, r3
    c65a:	2101      	movs	r1, #1
    c65c:	430b      	orrs	r3, r1
    c65e:	b2db      	uxtb	r3, r3
    c660:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c662:	68fb      	ldr	r3, [r7, #12]
    c664:	3301      	adds	r3, #1
    c666:	60fb      	str	r3, [r7, #12]
    c668:	68fb      	ldr	r3, [r7, #12]
    c66a:	2b00      	cmp	r3, #0
    c66c:	d0e3      	beq.n	c636 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    c66e:	46c0      	nop			; (mov r8, r8)
    c670:	4b17      	ldr	r3, [pc, #92]	; (c6d0 <_system_extint_init+0xd0>)
    c672:	4798      	blx	r3
    c674:	1e03      	subs	r3, r0, #0
    c676:	d1fb      	bne.n	c670 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    c678:	230b      	movs	r3, #11
    c67a:	18fb      	adds	r3, r7, r3
    c67c:	2200      	movs	r2, #0
    c67e:	701a      	strb	r2, [r3, #0]
    c680:	e00d      	b.n	c69e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    c682:	230b      	movs	r3, #11
    c684:	18fb      	adds	r3, r7, r3
    c686:	781a      	ldrb	r2, [r3, #0]
    c688:	4b12      	ldr	r3, [pc, #72]	; (c6d4 <_system_extint_init+0xd4>)
    c68a:	0092      	lsls	r2, r2, #2
    c68c:	2100      	movs	r1, #0
    c68e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    c690:	230b      	movs	r3, #11
    c692:	18fb      	adds	r3, r7, r3
    c694:	781a      	ldrb	r2, [r3, #0]
    c696:	230b      	movs	r3, #11
    c698:	18fb      	adds	r3, r7, r3
    c69a:	3201      	adds	r2, #1
    c69c:	701a      	strb	r2, [r3, #0]
    c69e:	230b      	movs	r3, #11
    c6a0:	18fb      	adds	r3, r7, r3
    c6a2:	781b      	ldrb	r3, [r3, #0]
    c6a4:	2b0f      	cmp	r3, #15
    c6a6:	d9ec      	bls.n	c682 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    c6a8:	2004      	movs	r0, #4
    c6aa:	4b0b      	ldr	r3, [pc, #44]	; (c6d8 <_system_extint_init+0xd8>)
    c6ac:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    c6ae:	4b0b      	ldr	r3, [pc, #44]	; (c6dc <_system_extint_init+0xdc>)
    c6b0:	4798      	blx	r3
}
    c6b2:	46c0      	nop			; (mov r8, r8)
    c6b4:	46bd      	mov	sp, r7
    c6b6:	b004      	add	sp, #16
    c6b8:	bd80      	pop	{r7, pc}
    c6ba:	46c0      	nop			; (mov r8, r8)
    c6bc:	40001800 	.word	0x40001800
    c6c0:	0000c4bd 	.word	0x0000c4bd
    c6c4:	0000c4a5 	.word	0x0000c4a5
    c6c8:	0000f259 	.word	0x0000f259
    c6cc:	0000f29d 	.word	0x0000f29d
    c6d0:	0000c5b9 	.word	0x0000c5b9
    c6d4:	20002b1c 	.word	0x20002b1c
    c6d8:	0000c541 	.word	0x0000c541
    c6dc:	0000c6e1 	.word	0x0000c6e1

0000c6e0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    c6e0:	b580      	push	{r7, lr}
    c6e2:	b082      	sub	sp, #8
    c6e4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c6e6:	4b15      	ldr	r3, [pc, #84]	; (c73c <_extint_enable+0x5c>)
    c6e8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c6ea:	2300      	movs	r3, #0
    c6ec:	607b      	str	r3, [r7, #4]
    c6ee:	e018      	b.n	c722 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    c6f0:	687b      	ldr	r3, [r7, #4]
    c6f2:	009b      	lsls	r3, r3, #2
    c6f4:	2208      	movs	r2, #8
    c6f6:	4694      	mov	ip, r2
    c6f8:	44bc      	add	ip, r7
    c6fa:	4463      	add	r3, ip
    c6fc:	3b08      	subs	r3, #8
    c6fe:	681a      	ldr	r2, [r3, #0]
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	009b      	lsls	r3, r3, #2
    c704:	2108      	movs	r1, #8
    c706:	468c      	mov	ip, r1
    c708:	44bc      	add	ip, r7
    c70a:	4463      	add	r3, ip
    c70c:	3b08      	subs	r3, #8
    c70e:	681b      	ldr	r3, [r3, #0]
    c710:	781b      	ldrb	r3, [r3, #0]
    c712:	b2db      	uxtb	r3, r3
    c714:	2102      	movs	r1, #2
    c716:	430b      	orrs	r3, r1
    c718:	b2db      	uxtb	r3, r3
    c71a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c71c:	687b      	ldr	r3, [r7, #4]
    c71e:	3301      	adds	r3, #1
    c720:	607b      	str	r3, [r7, #4]
    c722:	687b      	ldr	r3, [r7, #4]
    c724:	2b00      	cmp	r3, #0
    c726:	d0e3      	beq.n	c6f0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    c728:	46c0      	nop			; (mov r8, r8)
    c72a:	4b05      	ldr	r3, [pc, #20]	; (c740 <_extint_enable+0x60>)
    c72c:	4798      	blx	r3
    c72e:	1e03      	subs	r3, r0, #0
    c730:	d1fb      	bne.n	c72a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    c732:	46c0      	nop			; (mov r8, r8)
    c734:	46bd      	mov	sp, r7
    c736:	b002      	add	sp, #8
    c738:	bd80      	pop	{r7, pc}
    c73a:	46c0      	nop			; (mov r8, r8)
    c73c:	40001800 	.word	0x40001800
    c740:	0000c5b9 	.word	0x0000c5b9

0000c744 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    c744:	b580      	push	{r7, lr}
    c746:	b082      	sub	sp, #8
    c748:	af00      	add	r7, sp, #0
    c74a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	2200      	movs	r2, #0
    c750:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	2200      	movs	r2, #0
    c756:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    c758:	687b      	ldr	r3, [r7, #4]
    c75a:	2201      	movs	r2, #1
    c75c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    c75e:	687b      	ldr	r3, [r7, #4]
    c760:	2201      	movs	r2, #1
    c762:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    c764:	687b      	ldr	r3, [r7, #4]
    c766:	2200      	movs	r2, #0
    c768:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    c76a:	687b      	ldr	r3, [r7, #4]
    c76c:	2202      	movs	r2, #2
    c76e:	72da      	strb	r2, [r3, #11]
}
    c770:	46c0      	nop			; (mov r8, r8)
    c772:	46bd      	mov	sp, r7
    c774:	b002      	add	sp, #8
    c776:	bd80      	pop	{r7, pc}

0000c778 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    c778:	b580      	push	{r7, lr}
    c77a:	b086      	sub	sp, #24
    c77c:	af00      	add	r7, sp, #0
    c77e:	0002      	movs	r2, r0
    c780:	6039      	str	r1, [r7, #0]
    c782:	1dfb      	adds	r3, r7, #7
    c784:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    c786:	2308      	movs	r3, #8
    c788:	18fb      	adds	r3, r7, r3
    c78a:	0018      	movs	r0, r3
    c78c:	4b36      	ldr	r3, [pc, #216]	; (c868 <extint_chan_set_config+0xf0>)
    c78e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    c790:	683b      	ldr	r3, [r7, #0]
    c792:	685b      	ldr	r3, [r3, #4]
    c794:	b2da      	uxtb	r2, r3
    c796:	2308      	movs	r3, #8
    c798:	18fb      	adds	r3, r7, r3
    c79a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c79c:	2308      	movs	r3, #8
    c79e:	18fb      	adds	r3, r7, r3
    c7a0:	2200      	movs	r2, #0
    c7a2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    c7a4:	683b      	ldr	r3, [r7, #0]
    c7a6:	7a1a      	ldrb	r2, [r3, #8]
    c7a8:	2308      	movs	r3, #8
    c7aa:	18fb      	adds	r3, r7, r3
    c7ac:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    c7ae:	683b      	ldr	r3, [r7, #0]
    c7b0:	681b      	ldr	r3, [r3, #0]
    c7b2:	b2db      	uxtb	r3, r3
    c7b4:	2208      	movs	r2, #8
    c7b6:	18ba      	adds	r2, r7, r2
    c7b8:	0011      	movs	r1, r2
    c7ba:	0018      	movs	r0, r3
    c7bc:	4b2b      	ldr	r3, [pc, #172]	; (c86c <extint_chan_set_config+0xf4>)
    c7be:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    c7c0:	1dfb      	adds	r3, r7, #7
    c7c2:	781b      	ldrb	r3, [r3, #0]
    c7c4:	0018      	movs	r0, r3
    c7c6:	4b2a      	ldr	r3, [pc, #168]	; (c870 <extint_chan_set_config+0xf8>)
    c7c8:	4798      	blx	r3
    c7ca:	0003      	movs	r3, r0
    c7cc:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    c7ce:	1dfb      	adds	r3, r7, #7
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	2207      	movs	r2, #7
    c7d4:	4013      	ands	r3, r2
    c7d6:	009b      	lsls	r3, r3, #2
    c7d8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    c7da:	683b      	ldr	r3, [r7, #0]
    c7dc:	7adb      	ldrb	r3, [r3, #11]
    c7de:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    c7e0:	683b      	ldr	r3, [r7, #0]
    c7e2:	7a9b      	ldrb	r3, [r3, #10]
    c7e4:	2b00      	cmp	r3, #0
    c7e6:	d003      	beq.n	c7f0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    c7e8:	697b      	ldr	r3, [r7, #20]
    c7ea:	2208      	movs	r2, #8
    c7ec:	4313      	orrs	r3, r2
    c7ee:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    c7f0:	1dfb      	adds	r3, r7, #7
    c7f2:	781b      	ldrb	r3, [r3, #0]
    c7f4:	08db      	lsrs	r3, r3, #3
    c7f6:	b2db      	uxtb	r3, r3
    c7f8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    c7fa:	1dfb      	adds	r3, r7, #7
    c7fc:	781b      	ldrb	r3, [r3, #0]
    c7fe:	08db      	lsrs	r3, r3, #3
    c800:	b2db      	uxtb	r3, r3
    c802:	001a      	movs	r2, r3
    c804:	693b      	ldr	r3, [r7, #16]
    c806:	3206      	adds	r2, #6
    c808:	0092      	lsls	r2, r2, #2
    c80a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    c80c:	210f      	movs	r1, #15
    c80e:	68fa      	ldr	r2, [r7, #12]
    c810:	4091      	lsls	r1, r2
    c812:	000a      	movs	r2, r1
    c814:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    c816:	401a      	ands	r2, r3
			(new_config << config_pos);
    c818:	6979      	ldr	r1, [r7, #20]
    c81a:	68fb      	ldr	r3, [r7, #12]
    c81c:	4099      	lsls	r1, r3
    c81e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    c820:	431a      	orrs	r2, r3
    c822:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    c824:	693b      	ldr	r3, [r7, #16]
    c826:	1d82      	adds	r2, r0, #6
    c828:	0092      	lsls	r2, r2, #2
    c82a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    c82c:	683b      	ldr	r3, [r7, #0]
    c82e:	7a5b      	ldrb	r3, [r3, #9]
    c830:	2b00      	cmp	r3, #0
    c832:	d00a      	beq.n	c84a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    c834:	693b      	ldr	r3, [r7, #16]
    c836:	695a      	ldr	r2, [r3, #20]
    c838:	1dfb      	adds	r3, r7, #7
    c83a:	781b      	ldrb	r3, [r3, #0]
    c83c:	2101      	movs	r1, #1
    c83e:	4099      	lsls	r1, r3
    c840:	000b      	movs	r3, r1
    c842:	431a      	orrs	r2, r3
    c844:	693b      	ldr	r3, [r7, #16]
    c846:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    c848:	e00a      	b.n	c860 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    c84a:	693b      	ldr	r3, [r7, #16]
    c84c:	695b      	ldr	r3, [r3, #20]
    c84e:	1dfa      	adds	r2, r7, #7
    c850:	7812      	ldrb	r2, [r2, #0]
    c852:	2101      	movs	r1, #1
    c854:	4091      	lsls	r1, r2
    c856:	000a      	movs	r2, r1
    c858:	43d2      	mvns	r2, r2
    c85a:	401a      	ands	r2, r3
    c85c:	693b      	ldr	r3, [r7, #16]
    c85e:	615a      	str	r2, [r3, #20]
}
    c860:	46c0      	nop			; (mov r8, r8)
    c862:	46bd      	mov	sp, r7
    c864:	b006      	add	sp, #24
    c866:	bd80      	pop	{r7, pc}
    c868:	0000c519 	.word	0x0000c519
    c86c:	000003a1 	.word	0x000003a1
    c870:	0000c56d 	.word	0x0000c56d

0000c874 <system_gclk_chan_get_config_defaults>:
{
    c874:	b580      	push	{r7, lr}
    c876:	b082      	sub	sp, #8
    c878:	af00      	add	r7, sp, #0
    c87a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c87c:	687b      	ldr	r3, [r7, #4]
    c87e:	2200      	movs	r2, #0
    c880:	701a      	strb	r2, [r3, #0]
}
    c882:	46c0      	nop			; (mov r8, r8)
    c884:	46bd      	mov	sp, r7
    c886:	b002      	add	sp, #8
    c888:	bd80      	pop	{r7, pc}

0000c88a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    c88a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c88c:	b08d      	sub	sp, #52	; 0x34
    c88e:	af00      	add	r7, sp, #0
    c890:	60b8      	str	r0, [r7, #8]
    c892:	60f9      	str	r1, [r7, #12]
    c894:	603a      	str	r2, [r7, #0]
    c896:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    c898:	2300      	movs	r3, #0
    c89a:	2400      	movs	r4, #0
    c89c:	623b      	str	r3, [r7, #32]
    c89e:	627c      	str	r4, [r7, #36]	; 0x24
    c8a0:	2300      	movs	r3, #0
    c8a2:	2400      	movs	r4, #0
    c8a4:	61bb      	str	r3, [r7, #24]
    c8a6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    c8a8:	233f      	movs	r3, #63	; 0x3f
    c8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    c8ac:	e053      	b.n	c956 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8b0:	3b20      	subs	r3, #32
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	db04      	blt.n	c8c0 <long_division+0x36>
    c8b6:	2201      	movs	r2, #1
    c8b8:	409a      	lsls	r2, r3
    c8ba:	0013      	movs	r3, r2
    c8bc:	617b      	str	r3, [r7, #20]
    c8be:	e00b      	b.n	c8d8 <long_division+0x4e>
    c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8c2:	2220      	movs	r2, #32
    c8c4:	1ad3      	subs	r3, r2, r3
    c8c6:	2201      	movs	r2, #1
    c8c8:	40da      	lsrs	r2, r3
    c8ca:	0013      	movs	r3, r2
    c8cc:	2100      	movs	r1, #0
    c8ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c8d0:	4091      	lsls	r1, r2
    c8d2:	000a      	movs	r2, r1
    c8d4:	4313      	orrs	r3, r2
    c8d6:	617b      	str	r3, [r7, #20]
    c8d8:	2201      	movs	r2, #1
    c8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8dc:	409a      	lsls	r2, r3
    c8de:	0013      	movs	r3, r2
    c8e0:	613b      	str	r3, [r7, #16]

		r = r << 1;
    c8e2:	69bb      	ldr	r3, [r7, #24]
    c8e4:	69fc      	ldr	r4, [r7, #28]
    c8e6:	18db      	adds	r3, r3, r3
    c8e8:	4164      	adcs	r4, r4
    c8ea:	61bb      	str	r3, [r7, #24]
    c8ec:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    c8ee:	68bb      	ldr	r3, [r7, #8]
    c8f0:	693a      	ldr	r2, [r7, #16]
    c8f2:	401a      	ands	r2, r3
    c8f4:	0015      	movs	r5, r2
    c8f6:	68fb      	ldr	r3, [r7, #12]
    c8f8:	697a      	ldr	r2, [r7, #20]
    c8fa:	401a      	ands	r2, r3
    c8fc:	0016      	movs	r6, r2
    c8fe:	002b      	movs	r3, r5
    c900:	4333      	orrs	r3, r6
    c902:	d007      	beq.n	c914 <long_division+0x8a>
			r |= 0x01;
    c904:	69bb      	ldr	r3, [r7, #24]
    c906:	2201      	movs	r2, #1
    c908:	4313      	orrs	r3, r2
    c90a:	61bb      	str	r3, [r7, #24]
    c90c:	69fb      	ldr	r3, [r7, #28]
    c90e:	2200      	movs	r2, #0
    c910:	4313      	orrs	r3, r2
    c912:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    c914:	687a      	ldr	r2, [r7, #4]
    c916:	69fb      	ldr	r3, [r7, #28]
    c918:	429a      	cmp	r2, r3
    c91a:	d819      	bhi.n	c950 <long_division+0xc6>
    c91c:	687a      	ldr	r2, [r7, #4]
    c91e:	69fb      	ldr	r3, [r7, #28]
    c920:	429a      	cmp	r2, r3
    c922:	d103      	bne.n	c92c <long_division+0xa2>
    c924:	683a      	ldr	r2, [r7, #0]
    c926:	69bb      	ldr	r3, [r7, #24]
    c928:	429a      	cmp	r2, r3
    c92a:	d811      	bhi.n	c950 <long_division+0xc6>
			r = r - d;
    c92c:	69b9      	ldr	r1, [r7, #24]
    c92e:	69fa      	ldr	r2, [r7, #28]
    c930:	683b      	ldr	r3, [r7, #0]
    c932:	687c      	ldr	r4, [r7, #4]
    c934:	1ac9      	subs	r1, r1, r3
    c936:	41a2      	sbcs	r2, r4
    c938:	000b      	movs	r3, r1
    c93a:	0014      	movs	r4, r2
    c93c:	61bb      	str	r3, [r7, #24]
    c93e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    c940:	6a3a      	ldr	r2, [r7, #32]
    c942:	693b      	ldr	r3, [r7, #16]
    c944:	4313      	orrs	r3, r2
    c946:	623b      	str	r3, [r7, #32]
    c948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c94a:	697b      	ldr	r3, [r7, #20]
    c94c:	4313      	orrs	r3, r2
    c94e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c952:	3b01      	subs	r3, #1
    c954:	62fb      	str	r3, [r7, #44]	; 0x2c
    c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c958:	2b00      	cmp	r3, #0
    c95a:	daa8      	bge.n	c8ae <long_division+0x24>
		}
	}

	return q;
    c95c:	6a3b      	ldr	r3, [r7, #32]
    c95e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    c960:	0018      	movs	r0, r3
    c962:	0021      	movs	r1, r4
    c964:	46bd      	mov	sp, r7
    c966:	b00d      	add	sp, #52	; 0x34
    c968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c96a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    c96a:	b580      	push	{r7, lr}
    c96c:	b086      	sub	sp, #24
    c96e:	af00      	add	r7, sp, #0
    c970:	60f8      	str	r0, [r7, #12]
    c972:	60b9      	str	r1, [r7, #8]
    c974:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    c976:	2316      	movs	r3, #22
    c978:	18fb      	adds	r3, r7, r3
    c97a:	2200      	movs	r2, #0
    c97c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    c97e:	68bb      	ldr	r3, [r7, #8]
    c980:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    c982:	68bb      	ldr	r3, [r7, #8]
    c984:	085a      	lsrs	r2, r3, #1
    c986:	68fb      	ldr	r3, [r7, #12]
    c988:	429a      	cmp	r2, r3
    c98a:	d201      	bcs.n	c990 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c98c:	2340      	movs	r3, #64	; 0x40
    c98e:	e026      	b.n	c9de <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    c990:	68bb      	ldr	r3, [r7, #8]
    c992:	085b      	lsrs	r3, r3, #1
    c994:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    c996:	e00a      	b.n	c9ae <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    c998:	693a      	ldr	r2, [r7, #16]
    c99a:	68fb      	ldr	r3, [r7, #12]
    c99c:	1ad3      	subs	r3, r2, r3
    c99e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    c9a0:	2316      	movs	r3, #22
    c9a2:	18fb      	adds	r3, r7, r3
    c9a4:	881a      	ldrh	r2, [r3, #0]
    c9a6:	2316      	movs	r3, #22
    c9a8:	18fb      	adds	r3, r7, r3
    c9aa:	3201      	adds	r2, #1
    c9ac:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    c9ae:	693a      	ldr	r2, [r7, #16]
    c9b0:	68fb      	ldr	r3, [r7, #12]
    c9b2:	429a      	cmp	r2, r3
    c9b4:	d2f0      	bcs.n	c998 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    c9b6:	2316      	movs	r3, #22
    c9b8:	18fb      	adds	r3, r7, r3
    c9ba:	2216      	movs	r2, #22
    c9bc:	18ba      	adds	r2, r7, r2
    c9be:	8812      	ldrh	r2, [r2, #0]
    c9c0:	3a01      	subs	r2, #1
    c9c2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    c9c4:	2316      	movs	r3, #22
    c9c6:	18fb      	adds	r3, r7, r3
    c9c8:	881b      	ldrh	r3, [r3, #0]
    c9ca:	2bff      	cmp	r3, #255	; 0xff
    c9cc:	d901      	bls.n	c9d2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c9ce:	2340      	movs	r3, #64	; 0x40
    c9d0:	e005      	b.n	c9de <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    c9d2:	687b      	ldr	r3, [r7, #4]
    c9d4:	2216      	movs	r2, #22
    c9d6:	18ba      	adds	r2, r7, r2
    c9d8:	8812      	ldrh	r2, [r2, #0]
    c9da:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    c9dc:	2300      	movs	r3, #0
	}
}
    c9de:	0018      	movs	r0, r3
    c9e0:	46bd      	mov	sp, r7
    c9e2:	b006      	add	sp, #24
    c9e4:	bd80      	pop	{r7, pc}
	...

0000c9e8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9ea:	b0a1      	sub	sp, #132	; 0x84
    c9ec:	af00      	add	r7, sp, #0
    c9ee:	64f8      	str	r0, [r7, #76]	; 0x4c
    c9f0:	64b9      	str	r1, [r7, #72]	; 0x48
    c9f2:	647a      	str	r2, [r7, #68]	; 0x44
    c9f4:	2243      	movs	r2, #67	; 0x43
    c9f6:	18ba      	adds	r2, r7, r2
    c9f8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    c9fa:	2300      	movs	r3, #0
    c9fc:	2400      	movs	r4, #0
    c9fe:	673b      	str	r3, [r7, #112]	; 0x70
    ca00:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    ca02:	2300      	movs	r3, #0
    ca04:	2400      	movs	r4, #0
    ca06:	66bb      	str	r3, [r7, #104]	; 0x68
    ca08:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    ca0a:	2300      	movs	r3, #0
    ca0c:	2400      	movs	r4, #0
    ca0e:	67bb      	str	r3, [r7, #120]	; 0x78
    ca10:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    ca12:	2300      	movs	r3, #0
    ca14:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    ca16:	2358      	movs	r3, #88	; 0x58
    ca18:	2240      	movs	r2, #64	; 0x40
    ca1a:	4694      	mov	ip, r2
    ca1c:	44bc      	add	ip, r7
    ca1e:	4463      	add	r3, ip
    ca20:	781a      	ldrb	r2, [r3, #0]
    ca22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ca24:	435a      	muls	r2, r3
    ca26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ca28:	429a      	cmp	r2, r3
    ca2a:	d901      	bls.n	ca30 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ca2c:	2340      	movs	r3, #64	; 0x40
    ca2e:	e0b3      	b.n	cb98 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    ca30:	2343      	movs	r3, #67	; 0x43
    ca32:	18fb      	adds	r3, r7, r3
    ca34:	781b      	ldrb	r3, [r3, #0]
    ca36:	2b00      	cmp	r3, #0
    ca38:	d13d      	bne.n	cab6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    ca3a:	2358      	movs	r3, #88	; 0x58
    ca3c:	2240      	movs	r2, #64	; 0x40
    ca3e:	4694      	mov	ip, r2
    ca40:	44bc      	add	ip, r7
    ca42:	4463      	add	r3, ip
    ca44:	781b      	ldrb	r3, [r3, #0]
    ca46:	b2db      	uxtb	r3, r3
    ca48:	613b      	str	r3, [r7, #16]
    ca4a:	2300      	movs	r3, #0
    ca4c:	617b      	str	r3, [r7, #20]
    ca4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ca50:	60bb      	str	r3, [r7, #8]
    ca52:	2300      	movs	r3, #0
    ca54:	60fb      	str	r3, [r7, #12]
    ca56:	4c52      	ldr	r4, [pc, #328]	; (cba0 <_sercom_get_async_baud_val+0x1b8>)
    ca58:	68ba      	ldr	r2, [r7, #8]
    ca5a:	68fb      	ldr	r3, [r7, #12]
    ca5c:	6938      	ldr	r0, [r7, #16]
    ca5e:	6979      	ldr	r1, [r7, #20]
    ca60:	47a0      	blx	r4
    ca62:	0003      	movs	r3, r0
    ca64:	000c      	movs	r4, r1
    ca66:	001b      	movs	r3, r3
    ca68:	65fb      	str	r3, [r7, #92]	; 0x5c
    ca6a:	2300      	movs	r3, #0
    ca6c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    ca6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ca70:	603b      	str	r3, [r7, #0]
    ca72:	2300      	movs	r3, #0
    ca74:	607b      	str	r3, [r7, #4]
    ca76:	6db8      	ldr	r0, [r7, #88]	; 0x58
    ca78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    ca7a:	683a      	ldr	r2, [r7, #0]
    ca7c:	687b      	ldr	r3, [r7, #4]
    ca7e:	4c49      	ldr	r4, [pc, #292]	; (cba4 <_sercom_get_async_baud_val+0x1bc>)
    ca80:	47a0      	blx	r4
    ca82:	0003      	movs	r3, r0
    ca84:	000c      	movs	r4, r1
    ca86:	673b      	str	r3, [r7, #112]	; 0x70
    ca88:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    ca8a:	2100      	movs	r1, #0
    ca8c:	2201      	movs	r2, #1
    ca8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ca90:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    ca92:	1ac9      	subs	r1, r1, r3
    ca94:	41a2      	sbcs	r2, r4
    ca96:	000b      	movs	r3, r1
    ca98:	0014      	movs	r4, r2
    ca9a:	66bb      	str	r3, [r7, #104]	; 0x68
    ca9c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    ca9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    caa0:	0c1b      	lsrs	r3, r3, #16
    caa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    caa4:	0416      	lsls	r6, r2, #16
    caa6:	431e      	orrs	r6, r3
    caa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    caaa:	041d      	lsls	r5, r3, #16
    caac:	0033      	movs	r3, r6
    caae:	67bb      	str	r3, [r7, #120]	; 0x78
    cab0:	2300      	movs	r3, #0
    cab2:	67fb      	str	r3, [r7, #124]	; 0x7c
    cab4:	e06a      	b.n	cb8c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    cab6:	2343      	movs	r3, #67	; 0x43
    cab8:	18fb      	adds	r3, r7, r3
    caba:	781b      	ldrb	r3, [r3, #0]
    cabc:	2b01      	cmp	r3, #1
    cabe:	d165      	bne.n	cb8c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    cac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cac2:	633b      	str	r3, [r7, #48]	; 0x30
    cac4:	2300      	movs	r3, #0
    cac6:	637b      	str	r3, [r7, #52]	; 0x34
    cac8:	2358      	movs	r3, #88	; 0x58
    caca:	2240      	movs	r2, #64	; 0x40
    cacc:	4694      	mov	ip, r2
    cace:	44bc      	add	ip, r7
    cad0:	4463      	add	r3, ip
    cad2:	781b      	ldrb	r3, [r3, #0]
    cad4:	b2db      	uxtb	r3, r3
    cad6:	62bb      	str	r3, [r7, #40]	; 0x28
    cad8:	2300      	movs	r3, #0
    cada:	62fb      	str	r3, [r7, #44]	; 0x2c
    cadc:	4c30      	ldr	r4, [pc, #192]	; (cba0 <_sercom_get_async_baud_val+0x1b8>)
    cade:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    cae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    cae6:	47a0      	blx	r4
    cae8:	0003      	movs	r3, r0
    caea:	000c      	movs	r4, r1
    caec:	65bb      	str	r3, [r7, #88]	; 0x58
    caee:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    caf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    caf2:	623b      	str	r3, [r7, #32]
    caf4:	2300      	movs	r3, #0
    caf6:	627b      	str	r3, [r7, #36]	; 0x24
    caf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    cafa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    cafc:	001a      	movs	r2, r3
    cafe:	0023      	movs	r3, r4
    cb00:	6a38      	ldr	r0, [r7, #32]
    cb02:	6a79      	ldr	r1, [r7, #36]	; 0x24
    cb04:	4c27      	ldr	r4, [pc, #156]	; (cba4 <_sercom_get_async_baud_val+0x1bc>)
    cb06:	47a0      	blx	r4
    cb08:	0003      	movs	r3, r0
    cb0a:	000c      	movs	r4, r1
    cb0c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    cb0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    cb10:	2380      	movs	r3, #128	; 0x80
    cb12:	019b      	lsls	r3, r3, #6
    cb14:	429a      	cmp	r2, r3
    cb16:	d901      	bls.n	cb1c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    cb18:	2340      	movs	r3, #64	; 0x40
    cb1a:	e03d      	b.n	cb98 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    cb1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cb1e:	61bb      	str	r3, [r7, #24]
    cb20:	2300      	movs	r3, #0
    cb22:	61fb      	str	r3, [r7, #28]
    cb24:	69b9      	ldr	r1, [r7, #24]
    cb26:	69fa      	ldr	r2, [r7, #28]
    cb28:	000b      	movs	r3, r1
    cb2a:	0f5b      	lsrs	r3, r3, #29
    cb2c:	0010      	movs	r0, r2
    cb2e:	00c0      	lsls	r0, r0, #3
    cb30:	63f8      	str	r0, [r7, #60]	; 0x3c
    cb32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cb34:	4318      	orrs	r0, r3
    cb36:	63f8      	str	r0, [r7, #60]	; 0x3c
    cb38:	000b      	movs	r3, r1
    cb3a:	00db      	lsls	r3, r3, #3
    cb3c:	63bb      	str	r3, [r7, #56]	; 0x38
    cb3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    cb40:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    cb42:	001a      	movs	r2, r3
    cb44:	0023      	movs	r3, r4
    cb46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    cb48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    cb4a:	4c16      	ldr	r4, [pc, #88]	; (cba4 <_sercom_get_async_baud_val+0x1bc>)
    cb4c:	47a0      	blx	r4
    cb4e:	0003      	movs	r3, r0
    cb50:	000c      	movs	r4, r1
    cb52:	65bb      	str	r3, [r7, #88]	; 0x58
    cb54:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    cb56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    cb58:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    cb5a:	b2d9      	uxtb	r1, r3
    cb5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    cb5e:	b2db      	uxtb	r3, r3
    cb60:	00db      	lsls	r3, r3, #3
    cb62:	b2da      	uxtb	r2, r3
    cb64:	2317      	movs	r3, #23
    cb66:	2040      	movs	r0, #64	; 0x40
    cb68:	4684      	mov	ip, r0
    cb6a:	44bc      	add	ip, r7
    cb6c:	4463      	add	r3, ip
    cb6e:	1a8a      	subs	r2, r1, r2
    cb70:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    cb72:	2317      	movs	r3, #23
    cb74:	2240      	movs	r2, #64	; 0x40
    cb76:	4694      	mov	ip, r2
    cb78:	44bc      	add	ip, r7
    cb7a:	4463      	add	r3, ip
    cb7c:	781b      	ldrb	r3, [r3, #0]
    cb7e:	035b      	lsls	r3, r3, #13
    cb80:	001a      	movs	r2, r3
    cb82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    cb84:	4313      	orrs	r3, r2
    cb86:	67bb      	str	r3, [r7, #120]	; 0x78
    cb88:	2300      	movs	r3, #0
    cb8a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    cb8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    cb8e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    cb90:	b29a      	uxth	r2, r3
    cb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb94:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    cb96:	2300      	movs	r3, #0
}
    cb98:	0018      	movs	r0, r3
    cb9a:	46bd      	mov	sp, r7
    cb9c:	b021      	add	sp, #132	; 0x84
    cb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cba0:	0001a165 	.word	0x0001a165
    cba4:	0000c88b 	.word	0x0000c88b

0000cba8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    cba8:	b580      	push	{r7, lr}
    cbaa:	b084      	sub	sp, #16
    cbac:	af00      	add	r7, sp, #0
    cbae:	0002      	movs	r2, r0
    cbb0:	1dfb      	adds	r3, r7, #7
    cbb2:	701a      	strb	r2, [r3, #0]
    cbb4:	1dbb      	adds	r3, r7, #6
    cbb6:	1c0a      	adds	r2, r1, #0
    cbb8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    cbba:	4b1a      	ldr	r3, [pc, #104]	; (cc24 <sercom_set_gclk_generator+0x7c>)
    cbbc:	781b      	ldrb	r3, [r3, #0]
    cbbe:	2201      	movs	r2, #1
    cbc0:	4053      	eors	r3, r2
    cbc2:	b2db      	uxtb	r3, r3
    cbc4:	2b00      	cmp	r3, #0
    cbc6:	d103      	bne.n	cbd0 <sercom_set_gclk_generator+0x28>
    cbc8:	1dbb      	adds	r3, r7, #6
    cbca:	781b      	ldrb	r3, [r3, #0]
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d01b      	beq.n	cc08 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    cbd0:	230c      	movs	r3, #12
    cbd2:	18fb      	adds	r3, r7, r3
    cbd4:	0018      	movs	r0, r3
    cbd6:	4b14      	ldr	r3, [pc, #80]	; (cc28 <sercom_set_gclk_generator+0x80>)
    cbd8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    cbda:	230c      	movs	r3, #12
    cbdc:	18fb      	adds	r3, r7, r3
    cbde:	1dfa      	adds	r2, r7, #7
    cbe0:	7812      	ldrb	r2, [r2, #0]
    cbe2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    cbe4:	230c      	movs	r3, #12
    cbe6:	18fb      	adds	r3, r7, r3
    cbe8:	0019      	movs	r1, r3
    cbea:	2013      	movs	r0, #19
    cbec:	4b0f      	ldr	r3, [pc, #60]	; (cc2c <sercom_set_gclk_generator+0x84>)
    cbee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    cbf0:	2013      	movs	r0, #19
    cbf2:	4b0f      	ldr	r3, [pc, #60]	; (cc30 <sercom_set_gclk_generator+0x88>)
    cbf4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    cbf6:	4b0b      	ldr	r3, [pc, #44]	; (cc24 <sercom_set_gclk_generator+0x7c>)
    cbf8:	1dfa      	adds	r2, r7, #7
    cbfa:	7812      	ldrb	r2, [r2, #0]
    cbfc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    cbfe:	4b09      	ldr	r3, [pc, #36]	; (cc24 <sercom_set_gclk_generator+0x7c>)
    cc00:	2201      	movs	r2, #1
    cc02:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    cc04:	2300      	movs	r3, #0
    cc06:	e008      	b.n	cc1a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    cc08:	4b06      	ldr	r3, [pc, #24]	; (cc24 <sercom_set_gclk_generator+0x7c>)
    cc0a:	785b      	ldrb	r3, [r3, #1]
    cc0c:	1dfa      	adds	r2, r7, #7
    cc0e:	7812      	ldrb	r2, [r2, #0]
    cc10:	429a      	cmp	r2, r3
    cc12:	d101      	bne.n	cc18 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    cc14:	2300      	movs	r3, #0
    cc16:	e000      	b.n	cc1a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    cc18:	231d      	movs	r3, #29
}
    cc1a:	0018      	movs	r0, r3
    cc1c:	46bd      	mov	sp, r7
    cc1e:	b004      	add	sp, #16
    cc20:	bd80      	pop	{r7, pc}
    cc22:	46c0      	nop			; (mov r8, r8)
    cc24:	2000055c 	.word	0x2000055c
    cc28:	0000c875 	.word	0x0000c875
    cc2c:	0000f259 	.word	0x0000f259
    cc30:	0000f29d 	.word	0x0000f29d

0000cc34 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    cc34:	b580      	push	{r7, lr}
    cc36:	b082      	sub	sp, #8
    cc38:	af00      	add	r7, sp, #0
    cc3a:	6078      	str	r0, [r7, #4]
    cc3c:	000a      	movs	r2, r1
    cc3e:	1cfb      	adds	r3, r7, #3
    cc40:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    cc42:	687b      	ldr	r3, [r7, #4]
    cc44:	4a4d      	ldr	r2, [pc, #308]	; (cd7c <_sercom_get_default_pad+0x148>)
    cc46:	4293      	cmp	r3, r2
    cc48:	d03f      	beq.n	ccca <_sercom_get_default_pad+0x96>
    cc4a:	4a4c      	ldr	r2, [pc, #304]	; (cd7c <_sercom_get_default_pad+0x148>)
    cc4c:	4293      	cmp	r3, r2
    cc4e:	d806      	bhi.n	cc5e <_sercom_get_default_pad+0x2a>
    cc50:	4a4b      	ldr	r2, [pc, #300]	; (cd80 <_sercom_get_default_pad+0x14c>)
    cc52:	4293      	cmp	r3, r2
    cc54:	d00f      	beq.n	cc76 <_sercom_get_default_pad+0x42>
    cc56:	4a4b      	ldr	r2, [pc, #300]	; (cd84 <_sercom_get_default_pad+0x150>)
    cc58:	4293      	cmp	r3, r2
    cc5a:	d021      	beq.n	cca0 <_sercom_get_default_pad+0x6c>
    cc5c:	e089      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cc5e:	4a4a      	ldr	r2, [pc, #296]	; (cd88 <_sercom_get_default_pad+0x154>)
    cc60:	4293      	cmp	r3, r2
    cc62:	d100      	bne.n	cc66 <_sercom_get_default_pad+0x32>
    cc64:	e05b      	b.n	cd1e <_sercom_get_default_pad+0xea>
    cc66:	4a49      	ldr	r2, [pc, #292]	; (cd8c <_sercom_get_default_pad+0x158>)
    cc68:	4293      	cmp	r3, r2
    cc6a:	d100      	bne.n	cc6e <_sercom_get_default_pad+0x3a>
    cc6c:	e06c      	b.n	cd48 <_sercom_get_default_pad+0x114>
    cc6e:	4a48      	ldr	r2, [pc, #288]	; (cd90 <_sercom_get_default_pad+0x15c>)
    cc70:	4293      	cmp	r3, r2
    cc72:	d03f      	beq.n	ccf4 <_sercom_get_default_pad+0xc0>
    cc74:	e07d      	b.n	cd72 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cc76:	1cfb      	adds	r3, r7, #3
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	2b01      	cmp	r3, #1
    cc7c:	d00a      	beq.n	cc94 <_sercom_get_default_pad+0x60>
    cc7e:	dc02      	bgt.n	cc86 <_sercom_get_default_pad+0x52>
    cc80:	2b00      	cmp	r3, #0
    cc82:	d005      	beq.n	cc90 <_sercom_get_default_pad+0x5c>
    cc84:	e075      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cc86:	2b02      	cmp	r3, #2
    cc88:	d006      	beq.n	cc98 <_sercom_get_default_pad+0x64>
    cc8a:	2b03      	cmp	r3, #3
    cc8c:	d006      	beq.n	cc9c <_sercom_get_default_pad+0x68>
    cc8e:	e070      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cc90:	4b40      	ldr	r3, [pc, #256]	; (cd94 <_sercom_get_default_pad+0x160>)
    cc92:	e06f      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cc94:	4b40      	ldr	r3, [pc, #256]	; (cd98 <_sercom_get_default_pad+0x164>)
    cc96:	e06d      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cc98:	4b40      	ldr	r3, [pc, #256]	; (cd9c <_sercom_get_default_pad+0x168>)
    cc9a:	e06b      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cc9c:	4b40      	ldr	r3, [pc, #256]	; (cda0 <_sercom_get_default_pad+0x16c>)
    cc9e:	e069      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cca0:	1cfb      	adds	r3, r7, #3
    cca2:	781b      	ldrb	r3, [r3, #0]
    cca4:	2b01      	cmp	r3, #1
    cca6:	d00a      	beq.n	ccbe <_sercom_get_default_pad+0x8a>
    cca8:	dc02      	bgt.n	ccb0 <_sercom_get_default_pad+0x7c>
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d005      	beq.n	ccba <_sercom_get_default_pad+0x86>
    ccae:	e060      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    ccb0:	2b02      	cmp	r3, #2
    ccb2:	d006      	beq.n	ccc2 <_sercom_get_default_pad+0x8e>
    ccb4:	2b03      	cmp	r3, #3
    ccb6:	d006      	beq.n	ccc6 <_sercom_get_default_pad+0x92>
    ccb8:	e05b      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    ccba:	2303      	movs	r3, #3
    ccbc:	e05a      	b.n	cd74 <_sercom_get_default_pad+0x140>
    ccbe:	4b39      	ldr	r3, [pc, #228]	; (cda4 <_sercom_get_default_pad+0x170>)
    ccc0:	e058      	b.n	cd74 <_sercom_get_default_pad+0x140>
    ccc2:	4b39      	ldr	r3, [pc, #228]	; (cda8 <_sercom_get_default_pad+0x174>)
    ccc4:	e056      	b.n	cd74 <_sercom_get_default_pad+0x140>
    ccc6:	4b39      	ldr	r3, [pc, #228]	; (cdac <_sercom_get_default_pad+0x178>)
    ccc8:	e054      	b.n	cd74 <_sercom_get_default_pad+0x140>
    ccca:	1cfb      	adds	r3, r7, #3
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	2b01      	cmp	r3, #1
    ccd0:	d00a      	beq.n	cce8 <_sercom_get_default_pad+0xb4>
    ccd2:	dc02      	bgt.n	ccda <_sercom_get_default_pad+0xa6>
    ccd4:	2b00      	cmp	r3, #0
    ccd6:	d005      	beq.n	cce4 <_sercom_get_default_pad+0xb0>
    ccd8:	e04b      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    ccda:	2b02      	cmp	r3, #2
    ccdc:	d006      	beq.n	ccec <_sercom_get_default_pad+0xb8>
    ccde:	2b03      	cmp	r3, #3
    cce0:	d006      	beq.n	ccf0 <_sercom_get_default_pad+0xbc>
    cce2:	e046      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cce4:	4b32      	ldr	r3, [pc, #200]	; (cdb0 <_sercom_get_default_pad+0x17c>)
    cce6:	e045      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cce8:	4b32      	ldr	r3, [pc, #200]	; (cdb4 <_sercom_get_default_pad+0x180>)
    ccea:	e043      	b.n	cd74 <_sercom_get_default_pad+0x140>
    ccec:	4b32      	ldr	r3, [pc, #200]	; (cdb8 <_sercom_get_default_pad+0x184>)
    ccee:	e041      	b.n	cd74 <_sercom_get_default_pad+0x140>
    ccf0:	4b32      	ldr	r3, [pc, #200]	; (cdbc <_sercom_get_default_pad+0x188>)
    ccf2:	e03f      	b.n	cd74 <_sercom_get_default_pad+0x140>
    ccf4:	1cfb      	adds	r3, r7, #3
    ccf6:	781b      	ldrb	r3, [r3, #0]
    ccf8:	2b01      	cmp	r3, #1
    ccfa:	d00a      	beq.n	cd12 <_sercom_get_default_pad+0xde>
    ccfc:	dc02      	bgt.n	cd04 <_sercom_get_default_pad+0xd0>
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d005      	beq.n	cd0e <_sercom_get_default_pad+0xda>
    cd02:	e036      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cd04:	2b02      	cmp	r3, #2
    cd06:	d006      	beq.n	cd16 <_sercom_get_default_pad+0xe2>
    cd08:	2b03      	cmp	r3, #3
    cd0a:	d006      	beq.n	cd1a <_sercom_get_default_pad+0xe6>
    cd0c:	e031      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cd0e:	4b2c      	ldr	r3, [pc, #176]	; (cdc0 <_sercom_get_default_pad+0x18c>)
    cd10:	e030      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd12:	4b2c      	ldr	r3, [pc, #176]	; (cdc4 <_sercom_get_default_pad+0x190>)
    cd14:	e02e      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd16:	4b2c      	ldr	r3, [pc, #176]	; (cdc8 <_sercom_get_default_pad+0x194>)
    cd18:	e02c      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd1a:	4b2c      	ldr	r3, [pc, #176]	; (cdcc <_sercom_get_default_pad+0x198>)
    cd1c:	e02a      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd1e:	1cfb      	adds	r3, r7, #3
    cd20:	781b      	ldrb	r3, [r3, #0]
    cd22:	2b01      	cmp	r3, #1
    cd24:	d00a      	beq.n	cd3c <_sercom_get_default_pad+0x108>
    cd26:	dc02      	bgt.n	cd2e <_sercom_get_default_pad+0xfa>
    cd28:	2b00      	cmp	r3, #0
    cd2a:	d005      	beq.n	cd38 <_sercom_get_default_pad+0x104>
    cd2c:	e021      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cd2e:	2b02      	cmp	r3, #2
    cd30:	d006      	beq.n	cd40 <_sercom_get_default_pad+0x10c>
    cd32:	2b03      	cmp	r3, #3
    cd34:	d006      	beq.n	cd44 <_sercom_get_default_pad+0x110>
    cd36:	e01c      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cd38:	4b25      	ldr	r3, [pc, #148]	; (cdd0 <_sercom_get_default_pad+0x19c>)
    cd3a:	e01b      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd3c:	4b25      	ldr	r3, [pc, #148]	; (cdd4 <_sercom_get_default_pad+0x1a0>)
    cd3e:	e019      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd40:	4b25      	ldr	r3, [pc, #148]	; (cdd8 <_sercom_get_default_pad+0x1a4>)
    cd42:	e017      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd44:	4b25      	ldr	r3, [pc, #148]	; (cddc <_sercom_get_default_pad+0x1a8>)
    cd46:	e015      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd48:	1cfb      	adds	r3, r7, #3
    cd4a:	781b      	ldrb	r3, [r3, #0]
    cd4c:	2b01      	cmp	r3, #1
    cd4e:	d00a      	beq.n	cd66 <_sercom_get_default_pad+0x132>
    cd50:	dc02      	bgt.n	cd58 <_sercom_get_default_pad+0x124>
    cd52:	2b00      	cmp	r3, #0
    cd54:	d005      	beq.n	cd62 <_sercom_get_default_pad+0x12e>
    cd56:	e00c      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cd58:	2b02      	cmp	r3, #2
    cd5a:	d006      	beq.n	cd6a <_sercom_get_default_pad+0x136>
    cd5c:	2b03      	cmp	r3, #3
    cd5e:	d006      	beq.n	cd6e <_sercom_get_default_pad+0x13a>
    cd60:	e007      	b.n	cd72 <_sercom_get_default_pad+0x13e>
    cd62:	4b1f      	ldr	r3, [pc, #124]	; (cde0 <_sercom_get_default_pad+0x1ac>)
    cd64:	e006      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd66:	4b1f      	ldr	r3, [pc, #124]	; (cde4 <_sercom_get_default_pad+0x1b0>)
    cd68:	e004      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd6a:	4b1f      	ldr	r3, [pc, #124]	; (cde8 <_sercom_get_default_pad+0x1b4>)
    cd6c:	e002      	b.n	cd74 <_sercom_get_default_pad+0x140>
    cd6e:	4b1f      	ldr	r3, [pc, #124]	; (cdec <_sercom_get_default_pad+0x1b8>)
    cd70:	e000      	b.n	cd74 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    cd72:	2300      	movs	r3, #0
}
    cd74:	0018      	movs	r0, r3
    cd76:	46bd      	mov	sp, r7
    cd78:	b002      	add	sp, #8
    cd7a:	bd80      	pop	{r7, pc}
    cd7c:	42001000 	.word	0x42001000
    cd80:	42000800 	.word	0x42000800
    cd84:	42000c00 	.word	0x42000c00
    cd88:	42001800 	.word	0x42001800
    cd8c:	42001c00 	.word	0x42001c00
    cd90:	42001400 	.word	0x42001400
    cd94:	00040003 	.word	0x00040003
    cd98:	00050003 	.word	0x00050003
    cd9c:	00060003 	.word	0x00060003
    cda0:	00070003 	.word	0x00070003
    cda4:	00010003 	.word	0x00010003
    cda8:	001e0003 	.word	0x001e0003
    cdac:	001f0003 	.word	0x001f0003
    cdb0:	00080003 	.word	0x00080003
    cdb4:	00090003 	.word	0x00090003
    cdb8:	000a0003 	.word	0x000a0003
    cdbc:	000b0003 	.word	0x000b0003
    cdc0:	00100003 	.word	0x00100003
    cdc4:	00110003 	.word	0x00110003
    cdc8:	00120003 	.word	0x00120003
    cdcc:	00130003 	.word	0x00130003
    cdd0:	000c0003 	.word	0x000c0003
    cdd4:	000d0003 	.word	0x000d0003
    cdd8:	000e0003 	.word	0x000e0003
    cddc:	000f0003 	.word	0x000f0003
    cde0:	00160003 	.word	0x00160003
    cde4:	00170003 	.word	0x00170003
    cde8:	00180003 	.word	0x00180003
    cdec:	00190003 	.word	0x00190003

0000cdf0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    cdf0:	b590      	push	{r4, r7, lr}
    cdf2:	b08b      	sub	sp, #44	; 0x2c
    cdf4:	af00      	add	r7, sp, #0
    cdf6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    cdf8:	230c      	movs	r3, #12
    cdfa:	18fb      	adds	r3, r7, r3
    cdfc:	4a0f      	ldr	r2, [pc, #60]	; (ce3c <_sercom_get_sercom_inst_index+0x4c>)
    cdfe:	ca13      	ldmia	r2!, {r0, r1, r4}
    ce00:	c313      	stmia	r3!, {r0, r1, r4}
    ce02:	ca13      	ldmia	r2!, {r0, r1, r4}
    ce04:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ce06:	2300      	movs	r3, #0
    ce08:	627b      	str	r3, [r7, #36]	; 0x24
    ce0a:	e00e      	b.n	ce2a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    ce0c:	230c      	movs	r3, #12
    ce0e:	18fb      	adds	r3, r7, r3
    ce10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce12:	0092      	lsls	r2, r2, #2
    ce14:	58d3      	ldr	r3, [r2, r3]
    ce16:	001a      	movs	r2, r3
    ce18:	687b      	ldr	r3, [r7, #4]
    ce1a:	429a      	cmp	r2, r3
    ce1c:	d102      	bne.n	ce24 <_sercom_get_sercom_inst_index+0x34>
			return i;
    ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce20:	b2db      	uxtb	r3, r3
    ce22:	e006      	b.n	ce32 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce26:	3301      	adds	r3, #1
    ce28:	627b      	str	r3, [r7, #36]	; 0x24
    ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce2c:	2b05      	cmp	r3, #5
    ce2e:	d9ed      	bls.n	ce0c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    ce30:	2300      	movs	r3, #0
}
    ce32:	0018      	movs	r0, r3
    ce34:	46bd      	mov	sp, r7
    ce36:	b00b      	add	sp, #44	; 0x2c
    ce38:	bd90      	pop	{r4, r7, pc}
    ce3a:	46c0      	nop			; (mov r8, r8)
    ce3c:	00020aa8 	.word	0x00020aa8

0000ce40 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    ce40:	b580      	push	{r7, lr}
    ce42:	b082      	sub	sp, #8
    ce44:	af00      	add	r7, sp, #0
    ce46:	0002      	movs	r2, r0
    ce48:	1dfb      	adds	r3, r7, #7
    ce4a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    ce4c:	46c0      	nop			; (mov r8, r8)
    ce4e:	46bd      	mov	sp, r7
    ce50:	b002      	add	sp, #8
    ce52:	bd80      	pop	{r7, pc}

0000ce54 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    ce54:	b580      	push	{r7, lr}
    ce56:	b084      	sub	sp, #16
    ce58:	af00      	add	r7, sp, #0
    ce5a:	0002      	movs	r2, r0
    ce5c:	6039      	str	r1, [r7, #0]
    ce5e:	1dfb      	adds	r3, r7, #7
    ce60:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    ce62:	4b13      	ldr	r3, [pc, #76]	; (ceb0 <_sercom_set_handler+0x5c>)
    ce64:	781b      	ldrb	r3, [r3, #0]
    ce66:	2201      	movs	r2, #1
    ce68:	4053      	eors	r3, r2
    ce6a:	b2db      	uxtb	r3, r3
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	d015      	beq.n	ce9c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ce70:	2300      	movs	r3, #0
    ce72:	60fb      	str	r3, [r7, #12]
    ce74:	e00c      	b.n	ce90 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ce76:	4b0f      	ldr	r3, [pc, #60]	; (ceb4 <_sercom_set_handler+0x60>)
    ce78:	68fa      	ldr	r2, [r7, #12]
    ce7a:	0092      	lsls	r2, r2, #2
    ce7c:	490e      	ldr	r1, [pc, #56]	; (ceb8 <_sercom_set_handler+0x64>)
    ce7e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    ce80:	4b0e      	ldr	r3, [pc, #56]	; (cebc <_sercom_set_handler+0x68>)
    ce82:	68fa      	ldr	r2, [r7, #12]
    ce84:	0092      	lsls	r2, r2, #2
    ce86:	2100      	movs	r1, #0
    ce88:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ce8a:	68fb      	ldr	r3, [r7, #12]
    ce8c:	3301      	adds	r3, #1
    ce8e:	60fb      	str	r3, [r7, #12]
    ce90:	68fb      	ldr	r3, [r7, #12]
    ce92:	2b05      	cmp	r3, #5
    ce94:	d9ef      	bls.n	ce76 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    ce96:	4b06      	ldr	r3, [pc, #24]	; (ceb0 <_sercom_set_handler+0x5c>)
    ce98:	2201      	movs	r2, #1
    ce9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    ce9c:	1dfb      	adds	r3, r7, #7
    ce9e:	781a      	ldrb	r2, [r3, #0]
    cea0:	4b04      	ldr	r3, [pc, #16]	; (ceb4 <_sercom_set_handler+0x60>)
    cea2:	0092      	lsls	r2, r2, #2
    cea4:	6839      	ldr	r1, [r7, #0]
    cea6:	50d1      	str	r1, [r2, r3]
}
    cea8:	46c0      	nop			; (mov r8, r8)
    ceaa:	46bd      	mov	sp, r7
    ceac:	b004      	add	sp, #16
    ceae:	bd80      	pop	{r7, pc}
    ceb0:	2000055e 	.word	0x2000055e
    ceb4:	20000560 	.word	0x20000560
    ceb8:	0000ce41 	.word	0x0000ce41
    cebc:	20002b5c 	.word	0x20002b5c

0000cec0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    cec0:	b590      	push	{r4, r7, lr}
    cec2:	b085      	sub	sp, #20
    cec4:	af00      	add	r7, sp, #0
    cec6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    cec8:	2308      	movs	r3, #8
    ceca:	18fb      	adds	r3, r7, r3
    cecc:	4a0b      	ldr	r2, [pc, #44]	; (cefc <_sercom_get_interrupt_vector+0x3c>)
    cece:	6811      	ldr	r1, [r2, #0]
    ced0:	6019      	str	r1, [r3, #0]
    ced2:	8892      	ldrh	r2, [r2, #4]
    ced4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    ced6:	230f      	movs	r3, #15
    ced8:	18fc      	adds	r4, r7, r3
    ceda:	687b      	ldr	r3, [r7, #4]
    cedc:	0018      	movs	r0, r3
    cede:	4b08      	ldr	r3, [pc, #32]	; (cf00 <_sercom_get_interrupt_vector+0x40>)
    cee0:	4798      	blx	r3
    cee2:	0003      	movs	r3, r0
    cee4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    cee6:	230f      	movs	r3, #15
    cee8:	18fb      	adds	r3, r7, r3
    ceea:	781b      	ldrb	r3, [r3, #0]
    ceec:	2208      	movs	r2, #8
    ceee:	18ba      	adds	r2, r7, r2
    cef0:	5cd3      	ldrb	r3, [r2, r3]
    cef2:	b25b      	sxtb	r3, r3
}
    cef4:	0018      	movs	r0, r3
    cef6:	46bd      	mov	sp, r7
    cef8:	b005      	add	sp, #20
    cefa:	bd90      	pop	{r4, r7, pc}
    cefc:	00020ac0 	.word	0x00020ac0
    cf00:	0000cdf1 	.word	0x0000cdf1

0000cf04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    cf04:	b580      	push	{r7, lr}
    cf06:	af00      	add	r7, sp, #0
    cf08:	4b03      	ldr	r3, [pc, #12]	; (cf18 <SERCOM0_Handler+0x14>)
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	2000      	movs	r0, #0
    cf0e:	4798      	blx	r3
    cf10:	46c0      	nop			; (mov r8, r8)
    cf12:	46bd      	mov	sp, r7
    cf14:	bd80      	pop	{r7, pc}
    cf16:	46c0      	nop			; (mov r8, r8)
    cf18:	20000560 	.word	0x20000560

0000cf1c <SERCOM1_Handler>:
    cf1c:	b580      	push	{r7, lr}
    cf1e:	af00      	add	r7, sp, #0
    cf20:	4b03      	ldr	r3, [pc, #12]	; (cf30 <SERCOM1_Handler+0x14>)
    cf22:	685b      	ldr	r3, [r3, #4]
    cf24:	2001      	movs	r0, #1
    cf26:	4798      	blx	r3
    cf28:	46c0      	nop			; (mov r8, r8)
    cf2a:	46bd      	mov	sp, r7
    cf2c:	bd80      	pop	{r7, pc}
    cf2e:	46c0      	nop			; (mov r8, r8)
    cf30:	20000560 	.word	0x20000560

0000cf34 <SERCOM2_Handler>:
    cf34:	b580      	push	{r7, lr}
    cf36:	af00      	add	r7, sp, #0
    cf38:	4b03      	ldr	r3, [pc, #12]	; (cf48 <SERCOM2_Handler+0x14>)
    cf3a:	689b      	ldr	r3, [r3, #8]
    cf3c:	2002      	movs	r0, #2
    cf3e:	4798      	blx	r3
    cf40:	46c0      	nop			; (mov r8, r8)
    cf42:	46bd      	mov	sp, r7
    cf44:	bd80      	pop	{r7, pc}
    cf46:	46c0      	nop			; (mov r8, r8)
    cf48:	20000560 	.word	0x20000560

0000cf4c <SERCOM3_Handler>:
    cf4c:	b580      	push	{r7, lr}
    cf4e:	af00      	add	r7, sp, #0
    cf50:	4b03      	ldr	r3, [pc, #12]	; (cf60 <SERCOM3_Handler+0x14>)
    cf52:	68db      	ldr	r3, [r3, #12]
    cf54:	2003      	movs	r0, #3
    cf56:	4798      	blx	r3
    cf58:	46c0      	nop			; (mov r8, r8)
    cf5a:	46bd      	mov	sp, r7
    cf5c:	bd80      	pop	{r7, pc}
    cf5e:	46c0      	nop			; (mov r8, r8)
    cf60:	20000560 	.word	0x20000560

0000cf64 <SERCOM4_Handler>:
    cf64:	b580      	push	{r7, lr}
    cf66:	af00      	add	r7, sp, #0
    cf68:	4b03      	ldr	r3, [pc, #12]	; (cf78 <SERCOM4_Handler+0x14>)
    cf6a:	691b      	ldr	r3, [r3, #16]
    cf6c:	2004      	movs	r0, #4
    cf6e:	4798      	blx	r3
    cf70:	46c0      	nop			; (mov r8, r8)
    cf72:	46bd      	mov	sp, r7
    cf74:	bd80      	pop	{r7, pc}
    cf76:	46c0      	nop			; (mov r8, r8)
    cf78:	20000560 	.word	0x20000560

0000cf7c <SERCOM5_Handler>:
    cf7c:	b580      	push	{r7, lr}
    cf7e:	af00      	add	r7, sp, #0
    cf80:	4b03      	ldr	r3, [pc, #12]	; (cf90 <SERCOM5_Handler+0x14>)
    cf82:	695b      	ldr	r3, [r3, #20]
    cf84:	2005      	movs	r0, #5
    cf86:	4798      	blx	r3
    cf88:	46c0      	nop			; (mov r8, r8)
    cf8a:	46bd      	mov	sp, r7
    cf8c:	bd80      	pop	{r7, pc}
    cf8e:	46c0      	nop			; (mov r8, r8)
    cf90:	20000560 	.word	0x20000560

0000cf94 <system_pinmux_get_config_defaults>:
{
    cf94:	b580      	push	{r7, lr}
    cf96:	b082      	sub	sp, #8
    cf98:	af00      	add	r7, sp, #0
    cf9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cf9c:	687b      	ldr	r3, [r7, #4]
    cf9e:	2280      	movs	r2, #128	; 0x80
    cfa0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cfa2:	687b      	ldr	r3, [r7, #4]
    cfa4:	2200      	movs	r2, #0
    cfa6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    cfa8:	687b      	ldr	r3, [r7, #4]
    cfaa:	2201      	movs	r2, #1
    cfac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    cfae:	687b      	ldr	r3, [r7, #4]
    cfb0:	2200      	movs	r2, #0
    cfb2:	70da      	strb	r2, [r3, #3]
}
    cfb4:	46c0      	nop			; (mov r8, r8)
    cfb6:	46bd      	mov	sp, r7
    cfb8:	b002      	add	sp, #8
    cfba:	bd80      	pop	{r7, pc}

0000cfbc <system_pinmux_get_group_from_gpio_pin>:
{
    cfbc:	b580      	push	{r7, lr}
    cfbe:	b084      	sub	sp, #16
    cfc0:	af00      	add	r7, sp, #0
    cfc2:	0002      	movs	r2, r0
    cfc4:	1dfb      	adds	r3, r7, #7
    cfc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cfc8:	230f      	movs	r3, #15
    cfca:	18fb      	adds	r3, r7, r3
    cfcc:	1dfa      	adds	r2, r7, #7
    cfce:	7812      	ldrb	r2, [r2, #0]
    cfd0:	09d2      	lsrs	r2, r2, #7
    cfd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cfd4:	230e      	movs	r3, #14
    cfd6:	18fb      	adds	r3, r7, r3
    cfd8:	1dfa      	adds	r2, r7, #7
    cfda:	7812      	ldrb	r2, [r2, #0]
    cfdc:	0952      	lsrs	r2, r2, #5
    cfde:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cfe0:	4b0d      	ldr	r3, [pc, #52]	; (d018 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cfe2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    cfe4:	230f      	movs	r3, #15
    cfe6:	18fb      	adds	r3, r7, r3
    cfe8:	781b      	ldrb	r3, [r3, #0]
    cfea:	2b00      	cmp	r3, #0
    cfec:	d10f      	bne.n	d00e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cfee:	230f      	movs	r3, #15
    cff0:	18fb      	adds	r3, r7, r3
    cff2:	781b      	ldrb	r3, [r3, #0]
    cff4:	009b      	lsls	r3, r3, #2
    cff6:	2210      	movs	r2, #16
    cff8:	4694      	mov	ip, r2
    cffa:	44bc      	add	ip, r7
    cffc:	4463      	add	r3, ip
    cffe:	3b08      	subs	r3, #8
    d000:	681a      	ldr	r2, [r3, #0]
    d002:	230e      	movs	r3, #14
    d004:	18fb      	adds	r3, r7, r3
    d006:	781b      	ldrb	r3, [r3, #0]
    d008:	01db      	lsls	r3, r3, #7
    d00a:	18d3      	adds	r3, r2, r3
    d00c:	e000      	b.n	d010 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    d00e:	2300      	movs	r3, #0
}
    d010:	0018      	movs	r0, r3
    d012:	46bd      	mov	sp, r7
    d014:	b004      	add	sp, #16
    d016:	bd80      	pop	{r7, pc}
    d018:	41004400 	.word	0x41004400

0000d01c <port_get_group_from_gpio_pin>:
{
    d01c:	b580      	push	{r7, lr}
    d01e:	b082      	sub	sp, #8
    d020:	af00      	add	r7, sp, #0
    d022:	0002      	movs	r2, r0
    d024:	1dfb      	adds	r3, r7, #7
    d026:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d028:	1dfb      	adds	r3, r7, #7
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	0018      	movs	r0, r3
    d02e:	4b03      	ldr	r3, [pc, #12]	; (d03c <port_get_group_from_gpio_pin+0x20>)
    d030:	4798      	blx	r3
    d032:	0003      	movs	r3, r0
}
    d034:	0018      	movs	r0, r3
    d036:	46bd      	mov	sp, r7
    d038:	b002      	add	sp, #8
    d03a:	bd80      	pop	{r7, pc}
    d03c:	0000cfbd 	.word	0x0000cfbd

0000d040 <port_pin_set_output_level>:
{
    d040:	b580      	push	{r7, lr}
    d042:	b084      	sub	sp, #16
    d044:	af00      	add	r7, sp, #0
    d046:	0002      	movs	r2, r0
    d048:	1dfb      	adds	r3, r7, #7
    d04a:	701a      	strb	r2, [r3, #0]
    d04c:	1dbb      	adds	r3, r7, #6
    d04e:	1c0a      	adds	r2, r1, #0
    d050:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d052:	1dfb      	adds	r3, r7, #7
    d054:	781b      	ldrb	r3, [r3, #0]
    d056:	0018      	movs	r0, r3
    d058:	4b0d      	ldr	r3, [pc, #52]	; (d090 <port_pin_set_output_level+0x50>)
    d05a:	4798      	blx	r3
    d05c:	0003      	movs	r3, r0
    d05e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d060:	1dfb      	adds	r3, r7, #7
    d062:	781b      	ldrb	r3, [r3, #0]
    d064:	221f      	movs	r2, #31
    d066:	4013      	ands	r3, r2
    d068:	2201      	movs	r2, #1
    d06a:	409a      	lsls	r2, r3
    d06c:	0013      	movs	r3, r2
    d06e:	60bb      	str	r3, [r7, #8]
	if (level) {
    d070:	1dbb      	adds	r3, r7, #6
    d072:	781b      	ldrb	r3, [r3, #0]
    d074:	2b00      	cmp	r3, #0
    d076:	d003      	beq.n	d080 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d078:	68fb      	ldr	r3, [r7, #12]
    d07a:	68ba      	ldr	r2, [r7, #8]
    d07c:	619a      	str	r2, [r3, #24]
}
    d07e:	e002      	b.n	d086 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    d080:	68fb      	ldr	r3, [r7, #12]
    d082:	68ba      	ldr	r2, [r7, #8]
    d084:	615a      	str	r2, [r3, #20]
}
    d086:	46c0      	nop			; (mov r8, r8)
    d088:	46bd      	mov	sp, r7
    d08a:	b004      	add	sp, #16
    d08c:	bd80      	pop	{r7, pc}
    d08e:	46c0      	nop			; (mov r8, r8)
    d090:	0000d01d 	.word	0x0000d01d

0000d094 <system_gclk_chan_get_config_defaults>:
{
    d094:	b580      	push	{r7, lr}
    d096:	b082      	sub	sp, #8
    d098:	af00      	add	r7, sp, #0
    d09a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d09c:	687b      	ldr	r3, [r7, #4]
    d09e:	2200      	movs	r2, #0
    d0a0:	701a      	strb	r2, [r3, #0]
}
    d0a2:	46c0      	nop			; (mov r8, r8)
    d0a4:	46bd      	mov	sp, r7
    d0a6:	b002      	add	sp, #8
    d0a8:	bd80      	pop	{r7, pc}
	...

0000d0ac <system_apb_clock_set_mask>:
{
    d0ac:	b580      	push	{r7, lr}
    d0ae:	b082      	sub	sp, #8
    d0b0:	af00      	add	r7, sp, #0
    d0b2:	0002      	movs	r2, r0
    d0b4:	6039      	str	r1, [r7, #0]
    d0b6:	1dfb      	adds	r3, r7, #7
    d0b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d0ba:	1dfb      	adds	r3, r7, #7
    d0bc:	781b      	ldrb	r3, [r3, #0]
    d0be:	2b01      	cmp	r3, #1
    d0c0:	d00a      	beq.n	d0d8 <system_apb_clock_set_mask+0x2c>
    d0c2:	2b02      	cmp	r3, #2
    d0c4:	d00f      	beq.n	d0e6 <system_apb_clock_set_mask+0x3a>
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d114      	bne.n	d0f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d0ca:	4b0e      	ldr	r3, [pc, #56]	; (d104 <system_apb_clock_set_mask+0x58>)
    d0cc:	4a0d      	ldr	r2, [pc, #52]	; (d104 <system_apb_clock_set_mask+0x58>)
    d0ce:	6991      	ldr	r1, [r2, #24]
    d0d0:	683a      	ldr	r2, [r7, #0]
    d0d2:	430a      	orrs	r2, r1
    d0d4:	619a      	str	r2, [r3, #24]
			break;
    d0d6:	e00f      	b.n	d0f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d0d8:	4b0a      	ldr	r3, [pc, #40]	; (d104 <system_apb_clock_set_mask+0x58>)
    d0da:	4a0a      	ldr	r2, [pc, #40]	; (d104 <system_apb_clock_set_mask+0x58>)
    d0dc:	69d1      	ldr	r1, [r2, #28]
    d0de:	683a      	ldr	r2, [r7, #0]
    d0e0:	430a      	orrs	r2, r1
    d0e2:	61da      	str	r2, [r3, #28]
			break;
    d0e4:	e008      	b.n	d0f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d0e6:	4b07      	ldr	r3, [pc, #28]	; (d104 <system_apb_clock_set_mask+0x58>)
    d0e8:	4a06      	ldr	r2, [pc, #24]	; (d104 <system_apb_clock_set_mask+0x58>)
    d0ea:	6a11      	ldr	r1, [r2, #32]
    d0ec:	683a      	ldr	r2, [r7, #0]
    d0ee:	430a      	orrs	r2, r1
    d0f0:	621a      	str	r2, [r3, #32]
			break;
    d0f2:	e001      	b.n	d0f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d0f4:	2317      	movs	r3, #23
    d0f6:	e000      	b.n	d0fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d0f8:	2300      	movs	r3, #0
}
    d0fa:	0018      	movs	r0, r3
    d0fc:	46bd      	mov	sp, r7
    d0fe:	b002      	add	sp, #8
    d100:	bd80      	pop	{r7, pc}
    d102:	46c0      	nop			; (mov r8, r8)
    d104:	40000400 	.word	0x40000400

0000d108 <system_is_debugger_present>:
{
    d108:	b580      	push	{r7, lr}
    d10a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    d10c:	4b05      	ldr	r3, [pc, #20]	; (d124 <system_is_debugger_present+0x1c>)
    d10e:	789b      	ldrb	r3, [r3, #2]
    d110:	b2db      	uxtb	r3, r3
    d112:	001a      	movs	r2, r3
    d114:	2302      	movs	r3, #2
    d116:	4013      	ands	r3, r2
    d118:	1e5a      	subs	r2, r3, #1
    d11a:	4193      	sbcs	r3, r2
    d11c:	b2db      	uxtb	r3, r3
}
    d11e:	0018      	movs	r0, r3
    d120:	46bd      	mov	sp, r7
    d122:	bd80      	pop	{r7, pc}
    d124:	41002000 	.word	0x41002000

0000d128 <spi_is_ready_to_write>:
{
    d128:	b580      	push	{r7, lr}
    d12a:	b084      	sub	sp, #16
    d12c:	af00      	add	r7, sp, #0
    d12e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d130:	687b      	ldr	r3, [r7, #4]
    d132:	681b      	ldr	r3, [r3, #0]
    d134:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d136:	68fb      	ldr	r3, [r7, #12]
    d138:	7e1b      	ldrb	r3, [r3, #24]
    d13a:	b2db      	uxtb	r3, r3
    d13c:	001a      	movs	r2, r3
    d13e:	2301      	movs	r3, #1
    d140:	4013      	ands	r3, r2
    d142:	1e5a      	subs	r2, r3, #1
    d144:	4193      	sbcs	r3, r2
    d146:	b2db      	uxtb	r3, r3
}
    d148:	0018      	movs	r0, r3
    d14a:	46bd      	mov	sp, r7
    d14c:	b004      	add	sp, #16
    d14e:	bd80      	pop	{r7, pc}

0000d150 <spi_is_ready_to_read>:
{
    d150:	b580      	push	{r7, lr}
    d152:	b084      	sub	sp, #16
    d154:	af00      	add	r7, sp, #0
    d156:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d158:	687b      	ldr	r3, [r7, #4]
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d15e:	68fb      	ldr	r3, [r7, #12]
    d160:	7e1b      	ldrb	r3, [r3, #24]
    d162:	b2db      	uxtb	r3, r3
    d164:	001a      	movs	r2, r3
    d166:	2304      	movs	r3, #4
    d168:	4013      	ands	r3, r2
    d16a:	1e5a      	subs	r2, r3, #1
    d16c:	4193      	sbcs	r3, r2
    d16e:	b2db      	uxtb	r3, r3
}
    d170:	0018      	movs	r0, r3
    d172:	46bd      	mov	sp, r7
    d174:	b004      	add	sp, #16
    d176:	bd80      	pop	{r7, pc}

0000d178 <spi_write>:
{
    d178:	b580      	push	{r7, lr}
    d17a:	b084      	sub	sp, #16
    d17c:	af00      	add	r7, sp, #0
    d17e:	6078      	str	r0, [r7, #4]
    d180:	000a      	movs	r2, r1
    d182:	1cbb      	adds	r3, r7, #2
    d184:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d186:	687b      	ldr	r3, [r7, #4]
    d188:	681b      	ldr	r3, [r3, #0]
    d18a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    d18c:	687b      	ldr	r3, [r7, #4]
    d18e:	0018      	movs	r0, r3
    d190:	4b0a      	ldr	r3, [pc, #40]	; (d1bc <spi_write+0x44>)
    d192:	4798      	blx	r3
    d194:	0003      	movs	r3, r0
    d196:	001a      	movs	r2, r3
    d198:	2301      	movs	r3, #1
    d19a:	4053      	eors	r3, r2
    d19c:	b2db      	uxtb	r3, r3
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d001      	beq.n	d1a6 <spi_write+0x2e>
		return STATUS_BUSY;
    d1a2:	2305      	movs	r3, #5
    d1a4:	e006      	b.n	d1b4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d1a6:	1cbb      	adds	r3, r7, #2
    d1a8:	881b      	ldrh	r3, [r3, #0]
    d1aa:	05db      	lsls	r3, r3, #23
    d1ac:	0dda      	lsrs	r2, r3, #23
    d1ae:	68fb      	ldr	r3, [r7, #12]
    d1b0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    d1b2:	2300      	movs	r3, #0
}
    d1b4:	0018      	movs	r0, r3
    d1b6:	46bd      	mov	sp, r7
    d1b8:	b004      	add	sp, #16
    d1ba:	bd80      	pop	{r7, pc}
    d1bc:	0000d129 	.word	0x0000d129

0000d1c0 <spi_read>:
{
    d1c0:	b580      	push	{r7, lr}
    d1c2:	b084      	sub	sp, #16
    d1c4:	af00      	add	r7, sp, #0
    d1c6:	6078      	str	r0, [r7, #4]
    d1c8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d1ca:	687b      	ldr	r3, [r7, #4]
    d1cc:	681b      	ldr	r3, [r3, #0]
    d1ce:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    d1d0:	687b      	ldr	r3, [r7, #4]
    d1d2:	0018      	movs	r0, r3
    d1d4:	4b1b      	ldr	r3, [pc, #108]	; (d244 <spi_read+0x84>)
    d1d6:	4798      	blx	r3
    d1d8:	0003      	movs	r3, r0
    d1da:	001a      	movs	r2, r3
    d1dc:	2301      	movs	r3, #1
    d1de:	4053      	eors	r3, r2
    d1e0:	b2db      	uxtb	r3, r3
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	d001      	beq.n	d1ea <spi_read+0x2a>
		return STATUS_ERR_IO;
    d1e6:	2310      	movs	r3, #16
    d1e8:	e027      	b.n	d23a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    d1ea:	230f      	movs	r3, #15
    d1ec:	18fb      	adds	r3, r7, r3
    d1ee:	2200      	movs	r2, #0
    d1f0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d1f2:	68bb      	ldr	r3, [r7, #8]
    d1f4:	8b5b      	ldrh	r3, [r3, #26]
    d1f6:	b29b      	uxth	r3, r3
    d1f8:	001a      	movs	r2, r3
    d1fa:	2304      	movs	r3, #4
    d1fc:	4013      	ands	r3, r2
    d1fe:	d006      	beq.n	d20e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    d200:	230f      	movs	r3, #15
    d202:	18fb      	adds	r3, r7, r3
    d204:	221e      	movs	r2, #30
    d206:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d208:	68bb      	ldr	r3, [r7, #8]
    d20a:	2204      	movs	r2, #4
    d20c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d20e:	687b      	ldr	r3, [r7, #4]
    d210:	799b      	ldrb	r3, [r3, #6]
    d212:	2b01      	cmp	r3, #1
    d214:	d108      	bne.n	d228 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d216:	68bb      	ldr	r3, [r7, #8]
    d218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d21a:	b29b      	uxth	r3, r3
    d21c:	05db      	lsls	r3, r3, #23
    d21e:	0ddb      	lsrs	r3, r3, #23
    d220:	b29a      	uxth	r2, r3
    d222:	683b      	ldr	r3, [r7, #0]
    d224:	801a      	strh	r2, [r3, #0]
    d226:	e005      	b.n	d234 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d228:	68bb      	ldr	r3, [r7, #8]
    d22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d22c:	b2db      	uxtb	r3, r3
    d22e:	b29a      	uxth	r2, r3
    d230:	683b      	ldr	r3, [r7, #0]
    d232:	801a      	strh	r2, [r3, #0]
	return retval;
    d234:	230f      	movs	r3, #15
    d236:	18fb      	adds	r3, r7, r3
    d238:	781b      	ldrb	r3, [r3, #0]
}
    d23a:	0018      	movs	r0, r3
    d23c:	46bd      	mov	sp, r7
    d23e:	b004      	add	sp, #16
    d240:	bd80      	pop	{r7, pc}
    d242:	46c0      	nop			; (mov r8, r8)
    d244:	0000d151 	.word	0x0000d151

0000d248 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    d248:	b590      	push	{r4, r7, lr}
    d24a:	b093      	sub	sp, #76	; 0x4c
    d24c:	af00      	add	r7, sp, #0
    d24e:	6078      	str	r0, [r7, #4]
    d250:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d252:	687b      	ldr	r3, [r7, #4]
    d254:	681b      	ldr	r3, [r3, #0]
    d256:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    d258:	687b      	ldr	r3, [r7, #4]
    d25a:	681b      	ldr	r3, [r3, #0]
    d25c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    d25e:	231c      	movs	r3, #28
    d260:	18fb      	adds	r3, r7, r3
    d262:	0018      	movs	r0, r3
    d264:	4b75      	ldr	r3, [pc, #468]	; (d43c <_spi_set_config+0x1f4>)
    d266:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d268:	231c      	movs	r3, #28
    d26a:	18fb      	adds	r3, r7, r3
    d26c:	2200      	movs	r2, #0
    d26e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    d270:	683b      	ldr	r3, [r7, #0]
    d272:	781b      	ldrb	r3, [r3, #0]
    d274:	2b00      	cmp	r3, #0
    d276:	d103      	bne.n	d280 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    d278:	231c      	movs	r3, #28
    d27a:	18fb      	adds	r3, r7, r3
    d27c:	2200      	movs	r2, #0
    d27e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    d280:	683b      	ldr	r3, [r7, #0]
    d282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    d284:	230c      	movs	r3, #12
    d286:	18fb      	adds	r3, r7, r3
    d288:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    d28a:	683b      	ldr	r3, [r7, #0]
    d28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    d28e:	230c      	movs	r3, #12
    d290:	18fb      	adds	r3, r7, r3
    d292:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    d294:	683b      	ldr	r3, [r7, #0]
    d296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    d298:	230c      	movs	r3, #12
    d29a:	18fb      	adds	r3, r7, r3
    d29c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    d29e:	683b      	ldr	r3, [r7, #0]
    d2a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    d2a2:	230c      	movs	r3, #12
    d2a4:	18fb      	adds	r3, r7, r3
    d2a6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    d2a8:	2347      	movs	r3, #71	; 0x47
    d2aa:	18fb      	adds	r3, r7, r3
    d2ac:	2200      	movs	r2, #0
    d2ae:	701a      	strb	r2, [r3, #0]
    d2b0:	e02c      	b.n	d30c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    d2b2:	2347      	movs	r3, #71	; 0x47
    d2b4:	18fb      	adds	r3, r7, r3
    d2b6:	781a      	ldrb	r2, [r3, #0]
    d2b8:	230c      	movs	r3, #12
    d2ba:	18fb      	adds	r3, r7, r3
    d2bc:	0092      	lsls	r2, r2, #2
    d2be:	58d3      	ldr	r3, [r2, r3]
    d2c0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    d2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2c4:	2b00      	cmp	r3, #0
    d2c6:	d109      	bne.n	d2dc <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    d2c8:	2347      	movs	r3, #71	; 0x47
    d2ca:	18fb      	adds	r3, r7, r3
    d2cc:	781a      	ldrb	r2, [r3, #0]
    d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d2d0:	0011      	movs	r1, r2
    d2d2:	0018      	movs	r0, r3
    d2d4:	4b5a      	ldr	r3, [pc, #360]	; (d440 <_spi_set_config+0x1f8>)
    d2d6:	4798      	blx	r3
    d2d8:	0003      	movs	r3, r0
    d2da:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    d2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2de:	3301      	adds	r3, #1
    d2e0:	d00d      	beq.n	d2fe <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    d2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2e4:	b2da      	uxtb	r2, r3
    d2e6:	231c      	movs	r3, #28
    d2e8:	18fb      	adds	r3, r7, r3
    d2ea:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    d2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2ee:	0c1b      	lsrs	r3, r3, #16
    d2f0:	b2db      	uxtb	r3, r3
    d2f2:	221c      	movs	r2, #28
    d2f4:	18ba      	adds	r2, r7, r2
    d2f6:	0011      	movs	r1, r2
    d2f8:	0018      	movs	r0, r3
    d2fa:	4b52      	ldr	r3, [pc, #328]	; (d444 <_spi_set_config+0x1fc>)
    d2fc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    d2fe:	2347      	movs	r3, #71	; 0x47
    d300:	18fb      	adds	r3, r7, r3
    d302:	781a      	ldrb	r2, [r3, #0]
    d304:	2347      	movs	r3, #71	; 0x47
    d306:	18fb      	adds	r3, r7, r3
    d308:	3201      	adds	r2, #1
    d30a:	701a      	strb	r2, [r3, #0]
    d30c:	2347      	movs	r3, #71	; 0x47
    d30e:	18fb      	adds	r3, r7, r3
    d310:	781b      	ldrb	r3, [r3, #0]
    d312:	2b03      	cmp	r3, #3
    d314:	d9cd      	bls.n	d2b2 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    d316:	683b      	ldr	r3, [r7, #0]
    d318:	781a      	ldrb	r2, [r3, #0]
    d31a:	687b      	ldr	r3, [r7, #4]
    d31c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    d31e:	683b      	ldr	r3, [r7, #0]
    d320:	7c1a      	ldrb	r2, [r3, #16]
    d322:	687b      	ldr	r3, [r7, #4]
    d324:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    d326:	683b      	ldr	r3, [r7, #0]
    d328:	7c9a      	ldrb	r2, [r3, #18]
    d32a:	687b      	ldr	r3, [r7, #4]
    d32c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    d32e:	683b      	ldr	r3, [r7, #0]
    d330:	7d1a      	ldrb	r2, [r3, #20]
    d332:	687b      	ldr	r3, [r7, #4]
    d334:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    d336:	230a      	movs	r3, #10
    d338:	18fb      	adds	r3, r7, r3
    d33a:	2200      	movs	r2, #0
    d33c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    d33e:	2300      	movs	r3, #0
    d340:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    d342:	2300      	movs	r3, #0
    d344:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    d346:	683b      	ldr	r3, [r7, #0]
    d348:	781b      	ldrb	r3, [r3, #0]
    d34a:	2b01      	cmp	r3, #1
    d34c:	d129      	bne.n	d3a2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d34e:	687b      	ldr	r3, [r7, #4]
    d350:	681b      	ldr	r3, [r3, #0]
    d352:	0018      	movs	r0, r3
    d354:	4b3c      	ldr	r3, [pc, #240]	; (d448 <_spi_set_config+0x200>)
    d356:	4798      	blx	r3
    d358:	0003      	movs	r3, r0
    d35a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d35e:	3314      	adds	r3, #20
    d360:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d364:	b2db      	uxtb	r3, r3
    d366:	0018      	movs	r0, r3
    d368:	4b38      	ldr	r3, [pc, #224]	; (d44c <_spi_set_config+0x204>)
    d36a:	4798      	blx	r3
    d36c:	0003      	movs	r3, r0
    d36e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    d370:	683b      	ldr	r3, [r7, #0]
    d372:	699b      	ldr	r3, [r3, #24]
    d374:	2223      	movs	r2, #35	; 0x23
    d376:	18bc      	adds	r4, r7, r2
    d378:	220a      	movs	r2, #10
    d37a:	18ba      	adds	r2, r7, r2
    d37c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d37e:	0018      	movs	r0, r3
    d380:	4b33      	ldr	r3, [pc, #204]	; (d450 <_spi_set_config+0x208>)
    d382:	4798      	blx	r3
    d384:	0003      	movs	r3, r0
    d386:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    d388:	2323      	movs	r3, #35	; 0x23
    d38a:	18fb      	adds	r3, r7, r3
    d38c:	781b      	ldrb	r3, [r3, #0]
    d38e:	2b00      	cmp	r3, #0
    d390:	d001      	beq.n	d396 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    d392:	2317      	movs	r3, #23
    d394:	e04e      	b.n	d434 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    d396:	230a      	movs	r3, #10
    d398:	18fb      	adds	r3, r7, r3
    d39a:	881b      	ldrh	r3, [r3, #0]
    d39c:	b2da      	uxtb	r2, r3
    d39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d3a0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    d3a2:	683b      	ldr	r3, [r7, #0]
    d3a4:	685b      	ldr	r3, [r3, #4]
    d3a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3a8:	4313      	orrs	r3, r2
    d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    d3ac:	683b      	ldr	r3, [r7, #0]
    d3ae:	689b      	ldr	r3, [r3, #8]
    d3b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3b2:	4313      	orrs	r3, r2
    d3b4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    d3b6:	683b      	ldr	r3, [r7, #0]
    d3b8:	68db      	ldr	r3, [r3, #12]
    d3ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3bc:	4313      	orrs	r3, r2
    d3be:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    d3c0:	683b      	ldr	r3, [r7, #0]
    d3c2:	7c1b      	ldrb	r3, [r3, #16]
    d3c4:	001a      	movs	r2, r3
    d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3c8:	4313      	orrs	r3, r2
    d3ca:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    d3cc:	683b      	ldr	r3, [r7, #0]
    d3ce:	7c5b      	ldrb	r3, [r3, #17]
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	d103      	bne.n	d3dc <_spi_set_config+0x194>
    d3d4:	4b1f      	ldr	r3, [pc, #124]	; (d454 <_spi_set_config+0x20c>)
    d3d6:	4798      	blx	r3
    d3d8:	1e03      	subs	r3, r0, #0
    d3da:	d003      	beq.n	d3e4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    d3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3de:	2280      	movs	r2, #128	; 0x80
    d3e0:	4313      	orrs	r3, r2
    d3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    d3e4:	683b      	ldr	r3, [r7, #0]
    d3e6:	7c9b      	ldrb	r3, [r3, #18]
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d004      	beq.n	d3f6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3ee:	2280      	movs	r2, #128	; 0x80
    d3f0:	0292      	lsls	r2, r2, #10
    d3f2:	4313      	orrs	r3, r2
    d3f4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    d3f6:	683b      	ldr	r3, [r7, #0]
    d3f8:	7cdb      	ldrb	r3, [r3, #19]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d004      	beq.n	d408 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d400:	2280      	movs	r2, #128	; 0x80
    d402:	0092      	lsls	r2, r2, #2
    d404:	4313      	orrs	r3, r2
    d406:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    d408:	683b      	ldr	r3, [r7, #0]
    d40a:	7d1b      	ldrb	r3, [r3, #20]
    d40c:	2b00      	cmp	r3, #0
    d40e:	d004      	beq.n	d41a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    d410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d412:	2280      	movs	r2, #128	; 0x80
    d414:	0192      	lsls	r2, r2, #6
    d416:	4313      	orrs	r3, r2
    d418:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    d41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d41c:	681a      	ldr	r2, [r3, #0]
    d41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d420:	431a      	orrs	r2, r3
    d422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d424:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    d426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d428:	685a      	ldr	r2, [r3, #4]
    d42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d42c:	431a      	orrs	r2, r3
    d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d430:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    d432:	2300      	movs	r3, #0
}
    d434:	0018      	movs	r0, r3
    d436:	46bd      	mov	sp, r7
    d438:	b013      	add	sp, #76	; 0x4c
    d43a:	bd90      	pop	{r4, r7, pc}
    d43c:	0000cf95 	.word	0x0000cf95
    d440:	0000cc35 	.word	0x0000cc35
    d444:	000003a1 	.word	0x000003a1
    d448:	0000cdf1 	.word	0x0000cdf1
    d44c:	0000f37d 	.word	0x0000f37d
    d450:	0000c96b 	.word	0x0000c96b
    d454:	0000d109 	.word	0x0000d109

0000d458 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    d458:	b590      	push	{r4, r7, lr}
    d45a:	b08b      	sub	sp, #44	; 0x2c
    d45c:	af00      	add	r7, sp, #0
    d45e:	60f8      	str	r0, [r7, #12]
    d460:	60b9      	str	r1, [r7, #8]
    d462:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d464:	68fb      	ldr	r3, [r7, #12]
    d466:	68ba      	ldr	r2, [r7, #8]
    d468:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    d46a:	68fb      	ldr	r3, [r7, #12]
    d46c:	681b      	ldr	r3, [r3, #0]
    d46e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    d470:	6a3b      	ldr	r3, [r7, #32]
    d472:	681b      	ldr	r3, [r3, #0]
    d474:	2202      	movs	r2, #2
    d476:	4013      	ands	r3, r2
    d478:	d001      	beq.n	d47e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    d47a:	231c      	movs	r3, #28
    d47c:	e09c      	b.n	d5b8 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    d47e:	6a3b      	ldr	r3, [r7, #32]
    d480:	681b      	ldr	r3, [r3, #0]
    d482:	2201      	movs	r2, #1
    d484:	4013      	ands	r3, r2
    d486:	d001      	beq.n	d48c <spi_init+0x34>
		return STATUS_BUSY;
    d488:	2305      	movs	r3, #5
    d48a:	e095      	b.n	d5b8 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d48c:	68fb      	ldr	r3, [r7, #12]
    d48e:	681b      	ldr	r3, [r3, #0]
    d490:	0018      	movs	r0, r3
    d492:	4b4b      	ldr	r3, [pc, #300]	; (d5c0 <spi_init+0x168>)
    d494:	4798      	blx	r3
    d496:	0003      	movs	r3, r0
    d498:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    d49a:	69fb      	ldr	r3, [r7, #28]
    d49c:	3302      	adds	r3, #2
    d49e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d4a0:	69fb      	ldr	r3, [r7, #28]
    d4a2:	3314      	adds	r3, #20
    d4a4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    d4a6:	2201      	movs	r2, #1
    d4a8:	69bb      	ldr	r3, [r7, #24]
    d4aa:	409a      	lsls	r2, r3
    d4ac:	0013      	movs	r3, r2
    d4ae:	0019      	movs	r1, r3
    d4b0:	2002      	movs	r0, #2
    d4b2:	4b44      	ldr	r3, [pc, #272]	; (d5c4 <spi_init+0x16c>)
    d4b4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d4b6:	2310      	movs	r3, #16
    d4b8:	18fb      	adds	r3, r7, r3
    d4ba:	0018      	movs	r0, r3
    d4bc:	4b42      	ldr	r3, [pc, #264]	; (d5c8 <spi_init+0x170>)
    d4be:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	2224      	movs	r2, #36	; 0x24
    d4c4:	5c9a      	ldrb	r2, [r3, r2]
    d4c6:	2310      	movs	r3, #16
    d4c8:	18fb      	adds	r3, r7, r3
    d4ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    d4cc:	697b      	ldr	r3, [r7, #20]
    d4ce:	b2db      	uxtb	r3, r3
    d4d0:	2210      	movs	r2, #16
    d4d2:	18ba      	adds	r2, r7, r2
    d4d4:	0011      	movs	r1, r2
    d4d6:	0018      	movs	r0, r3
    d4d8:	4b3c      	ldr	r3, [pc, #240]	; (d5cc <spi_init+0x174>)
    d4da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    d4dc:	697b      	ldr	r3, [r7, #20]
    d4de:	b2db      	uxtb	r3, r3
    d4e0:	0018      	movs	r0, r3
    d4e2:	4b3b      	ldr	r3, [pc, #236]	; (d5d0 <spi_init+0x178>)
    d4e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    d4e6:	687b      	ldr	r3, [r7, #4]
    d4e8:	2224      	movs	r2, #36	; 0x24
    d4ea:	5c9b      	ldrb	r3, [r3, r2]
    d4ec:	2100      	movs	r1, #0
    d4ee:	0018      	movs	r0, r3
    d4f0:	4b38      	ldr	r3, [pc, #224]	; (d5d4 <spi_init+0x17c>)
    d4f2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    d4f4:	687b      	ldr	r3, [r7, #4]
    d4f6:	781b      	ldrb	r3, [r3, #0]
    d4f8:	2b01      	cmp	r3, #1
    d4fa:	d105      	bne.n	d508 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    d4fc:	6a3b      	ldr	r3, [r7, #32]
    d4fe:	681b      	ldr	r3, [r3, #0]
    d500:	220c      	movs	r2, #12
    d502:	431a      	orrs	r2, r3
    d504:	6a3b      	ldr	r3, [r7, #32]
    d506:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    d508:	2327      	movs	r3, #39	; 0x27
    d50a:	18fb      	adds	r3, r7, r3
    d50c:	2200      	movs	r2, #0
    d50e:	701a      	strb	r2, [r3, #0]
    d510:	e010      	b.n	d534 <spi_init+0xdc>
		module->callback[i]        = NULL;
    d512:	2327      	movs	r3, #39	; 0x27
    d514:	18fb      	adds	r3, r7, r3
    d516:	781b      	ldrb	r3, [r3, #0]
    d518:	68fa      	ldr	r2, [r7, #12]
    d51a:	3302      	adds	r3, #2
    d51c:	009b      	lsls	r3, r3, #2
    d51e:	18d3      	adds	r3, r2, r3
    d520:	3304      	adds	r3, #4
    d522:	2200      	movs	r2, #0
    d524:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    d526:	2327      	movs	r3, #39	; 0x27
    d528:	18fb      	adds	r3, r7, r3
    d52a:	781a      	ldrb	r2, [r3, #0]
    d52c:	2327      	movs	r3, #39	; 0x27
    d52e:	18fb      	adds	r3, r7, r3
    d530:	3201      	adds	r2, #1
    d532:	701a      	strb	r2, [r3, #0]
    d534:	2327      	movs	r3, #39	; 0x27
    d536:	18fb      	adds	r3, r7, r3
    d538:	781b      	ldrb	r3, [r3, #0]
    d53a:	2b06      	cmp	r3, #6
    d53c:	d9e9      	bls.n	d512 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    d53e:	68fb      	ldr	r3, [r7, #12]
    d540:	2200      	movs	r2, #0
    d542:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    d544:	68fb      	ldr	r3, [r7, #12]
    d546:	2200      	movs	r2, #0
    d548:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    d54a:	68fb      	ldr	r3, [r7, #12]
    d54c:	2200      	movs	r2, #0
    d54e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    d550:	68fb      	ldr	r3, [r7, #12]
    d552:	2200      	movs	r2, #0
    d554:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	2236      	movs	r2, #54	; 0x36
    d55a:	2100      	movs	r1, #0
    d55c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    d55e:	68fb      	ldr	r3, [r7, #12]
    d560:	2237      	movs	r2, #55	; 0x37
    d562:	2100      	movs	r1, #0
    d564:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    d566:	68fb      	ldr	r3, [r7, #12]
    d568:	2238      	movs	r2, #56	; 0x38
    d56a:	2100      	movs	r1, #0
    d56c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    d56e:	68fb      	ldr	r3, [r7, #12]
    d570:	2203      	movs	r2, #3
    d572:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    d574:	68fb      	ldr	r3, [r7, #12]
    d576:	2200      	movs	r2, #0
    d578:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    d57a:	68fb      	ldr	r3, [r7, #12]
    d57c:	681b      	ldr	r3, [r3, #0]
    d57e:	2213      	movs	r2, #19
    d580:	18bc      	adds	r4, r7, r2
    d582:	0018      	movs	r0, r3
    d584:	4b0e      	ldr	r3, [pc, #56]	; (d5c0 <spi_init+0x168>)
    d586:	4798      	blx	r3
    d588:	0003      	movs	r3, r0
    d58a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    d58c:	4a12      	ldr	r2, [pc, #72]	; (d5d8 <spi_init+0x180>)
    d58e:	2313      	movs	r3, #19
    d590:	18fb      	adds	r3, r7, r3
    d592:	781b      	ldrb	r3, [r3, #0]
    d594:	0011      	movs	r1, r2
    d596:	0018      	movs	r0, r3
    d598:	4b10      	ldr	r3, [pc, #64]	; (d5dc <spi_init+0x184>)
    d59a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    d59c:	2313      	movs	r3, #19
    d59e:	18fb      	adds	r3, r7, r3
    d5a0:	781a      	ldrb	r2, [r3, #0]
    d5a2:	4b0f      	ldr	r3, [pc, #60]	; (d5e0 <spi_init+0x188>)
    d5a4:	0092      	lsls	r2, r2, #2
    d5a6:	68f9      	ldr	r1, [r7, #12]
    d5a8:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    d5aa:	687a      	ldr	r2, [r7, #4]
    d5ac:	68fb      	ldr	r3, [r7, #12]
    d5ae:	0011      	movs	r1, r2
    d5b0:	0018      	movs	r0, r3
    d5b2:	4b0c      	ldr	r3, [pc, #48]	; (d5e4 <spi_init+0x18c>)
    d5b4:	4798      	blx	r3
    d5b6:	0003      	movs	r3, r0
}
    d5b8:	0018      	movs	r0, r3
    d5ba:	46bd      	mov	sp, r7
    d5bc:	b00b      	add	sp, #44	; 0x2c
    d5be:	bd90      	pop	{r4, r7, pc}
    d5c0:	0000cdf1 	.word	0x0000cdf1
    d5c4:	0000d0ad 	.word	0x0000d0ad
    d5c8:	0000d095 	.word	0x0000d095
    d5cc:	0000f259 	.word	0x0000f259
    d5d0:	0000f29d 	.word	0x0000f29d
    d5d4:	0000cba9 	.word	0x0000cba9
    d5d8:	0000d831 	.word	0x0000d831
    d5dc:	0000ce55 	.word	0x0000ce55
    d5e0:	20002b5c 	.word	0x20002b5c
    d5e4:	0000d249 	.word	0x0000d249

0000d5e8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    d5e8:	b580      	push	{r7, lr}
    d5ea:	b086      	sub	sp, #24
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	60f8      	str	r0, [r7, #12]
    d5f0:	60b9      	str	r1, [r7, #8]
    d5f2:	1dfb      	adds	r3, r7, #7
    d5f4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    d5f6:	68fb      	ldr	r3, [r7, #12]
    d5f8:	795b      	ldrb	r3, [r3, #5]
    d5fa:	2b01      	cmp	r3, #1
    d5fc:	d001      	beq.n	d602 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    d5fe:	2315      	movs	r3, #21
    d600:	e05c      	b.n	d6bc <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    d602:	68fb      	ldr	r3, [r7, #12]
    d604:	7a1b      	ldrb	r3, [r3, #8]
    d606:	2201      	movs	r2, #1
    d608:	4053      	eors	r3, r2
    d60a:	b2db      	uxtb	r3, r3
    d60c:	2b00      	cmp	r3, #0
    d60e:	d054      	beq.n	d6ba <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    d610:	1dfb      	adds	r3, r7, #7
    d612:	781b      	ldrb	r3, [r3, #0]
    d614:	2b00      	cmp	r3, #0
    d616:	d04a      	beq.n	d6ae <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    d618:	68bb      	ldr	r3, [r7, #8]
    d61a:	785b      	ldrb	r3, [r3, #1]
    d61c:	2b00      	cmp	r3, #0
    d61e:	d03f      	beq.n	d6a0 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    d620:	68fb      	ldr	r3, [r7, #12]
    d622:	0018      	movs	r0, r3
    d624:	4b27      	ldr	r3, [pc, #156]	; (d6c4 <spi_select_slave+0xdc>)
    d626:	4798      	blx	r3
    d628:	0003      	movs	r3, r0
    d62a:	001a      	movs	r2, r3
    d62c:	2301      	movs	r3, #1
    d62e:	4053      	eors	r3, r2
    d630:	b2db      	uxtb	r3, r3
    d632:	2b00      	cmp	r3, #0
    d634:	d007      	beq.n	d646 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    d636:	68bb      	ldr	r3, [r7, #8]
    d638:	781b      	ldrb	r3, [r3, #0]
    d63a:	2101      	movs	r1, #1
    d63c:	0018      	movs	r0, r3
    d63e:	4b22      	ldr	r3, [pc, #136]	; (d6c8 <spi_select_slave+0xe0>)
    d640:	4798      	blx	r3
					return STATUS_BUSY;
    d642:	2305      	movs	r3, #5
    d644:	e03a      	b.n	d6bc <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    d646:	68bb      	ldr	r3, [r7, #8]
    d648:	781b      	ldrb	r3, [r3, #0]
    d64a:	2100      	movs	r1, #0
    d64c:	0018      	movs	r0, r3
    d64e:	4b1e      	ldr	r3, [pc, #120]	; (d6c8 <spi_select_slave+0xe0>)
    d650:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    d652:	68bb      	ldr	r3, [r7, #8]
    d654:	789b      	ldrb	r3, [r3, #2]
    d656:	b29a      	uxth	r2, r3
    d658:	68fb      	ldr	r3, [r7, #12]
    d65a:	0011      	movs	r1, r2
    d65c:	0018      	movs	r0, r3
    d65e:	4b1b      	ldr	r3, [pc, #108]	; (d6cc <spi_select_slave+0xe4>)
    d660:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    d662:	68fb      	ldr	r3, [r7, #12]
    d664:	79db      	ldrb	r3, [r3, #7]
    d666:	2201      	movs	r2, #1
    d668:	4053      	eors	r3, r2
    d66a:	b2db      	uxtb	r3, r3
    d66c:	2b00      	cmp	r3, #0
    d66e:	d024      	beq.n	d6ba <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    d670:	46c0      	nop			; (mov r8, r8)
    d672:	68fb      	ldr	r3, [r7, #12]
    d674:	0018      	movs	r0, r3
    d676:	4b16      	ldr	r3, [pc, #88]	; (d6d0 <spi_select_slave+0xe8>)
    d678:	4798      	blx	r3
    d67a:	0003      	movs	r3, r0
    d67c:	001a      	movs	r2, r3
    d67e:	2301      	movs	r3, #1
    d680:	4053      	eors	r3, r2
    d682:	b2db      	uxtb	r3, r3
    d684:	2b00      	cmp	r3, #0
    d686:	d1f4      	bne.n	d672 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    d688:	2316      	movs	r3, #22
    d68a:	18fb      	adds	r3, r7, r3
    d68c:	2200      	movs	r2, #0
    d68e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    d690:	2316      	movs	r3, #22
    d692:	18fa      	adds	r2, r7, r3
    d694:	68fb      	ldr	r3, [r7, #12]
    d696:	0011      	movs	r1, r2
    d698:	0018      	movs	r0, r3
    d69a:	4b0e      	ldr	r3, [pc, #56]	; (d6d4 <spi_select_slave+0xec>)
    d69c:	4798      	blx	r3
    d69e:	e00c      	b.n	d6ba <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    d6a0:	68bb      	ldr	r3, [r7, #8]
    d6a2:	781b      	ldrb	r3, [r3, #0]
    d6a4:	2100      	movs	r1, #0
    d6a6:	0018      	movs	r0, r3
    d6a8:	4b07      	ldr	r3, [pc, #28]	; (d6c8 <spi_select_slave+0xe0>)
    d6aa:	4798      	blx	r3
    d6ac:	e005      	b.n	d6ba <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    d6ae:	68bb      	ldr	r3, [r7, #8]
    d6b0:	781b      	ldrb	r3, [r3, #0]
    d6b2:	2101      	movs	r1, #1
    d6b4:	0018      	movs	r0, r3
    d6b6:	4b04      	ldr	r3, [pc, #16]	; (d6c8 <spi_select_slave+0xe0>)
    d6b8:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    d6ba:	2300      	movs	r3, #0
}
    d6bc:	0018      	movs	r0, r3
    d6be:	46bd      	mov	sp, r7
    d6c0:	b006      	add	sp, #24
    d6c2:	bd80      	pop	{r7, pc}
    d6c4:	0000d129 	.word	0x0000d129
    d6c8:	0000d041 	.word	0x0000d041
    d6cc:	0000d179 	.word	0x0000d179
    d6d0:	0000d151 	.word	0x0000d151
    d6d4:	0000d1c1 	.word	0x0000d1c1

0000d6d8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    d6d8:	b580      	push	{r7, lr}
    d6da:	b084      	sub	sp, #16
    d6dc:	af00      	add	r7, sp, #0
    d6de:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d6e0:	687b      	ldr	r3, [r7, #4]
    d6e2:	681b      	ldr	r3, [r3, #0]
    d6e4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    d6e6:	687b      	ldr	r3, [r7, #4]
    d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d6ea:	781b      	ldrb	r3, [r3, #0]
    d6ec:	b2da      	uxtb	r2, r3
    d6ee:	230e      	movs	r3, #14
    d6f0:	18fb      	adds	r3, r7, r3
    d6f2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    d6f4:	687b      	ldr	r3, [r7, #4]
    d6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d6f8:	1c5a      	adds	r2, r3, #1
    d6fa:	687b      	ldr	r3, [r7, #4]
    d6fc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d6fe:	687b      	ldr	r3, [r7, #4]
    d700:	799b      	ldrb	r3, [r3, #6]
    d702:	2b01      	cmp	r3, #1
    d704:	d113      	bne.n	d72e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d70a:	781b      	ldrb	r3, [r3, #0]
    d70c:	b2db      	uxtb	r3, r3
    d70e:	021b      	lsls	r3, r3, #8
    d710:	b21a      	sxth	r2, r3
    d712:	230e      	movs	r3, #14
    d714:	18fb      	adds	r3, r7, r3
    d716:	2100      	movs	r1, #0
    d718:	5e5b      	ldrsh	r3, [r3, r1]
    d71a:	4313      	orrs	r3, r2
    d71c:	b21a      	sxth	r2, r3
    d71e:	230e      	movs	r3, #14
    d720:	18fb      	adds	r3, r7, r3
    d722:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    d724:	687b      	ldr	r3, [r7, #4]
    d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d728:	1c5a      	adds	r2, r3, #1
    d72a:	687b      	ldr	r3, [r7, #4]
    d72c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    d72e:	230e      	movs	r3, #14
    d730:	18fb      	adds	r3, r7, r3
    d732:	881b      	ldrh	r3, [r3, #0]
    d734:	05db      	lsls	r3, r3, #23
    d736:	0dda      	lsrs	r2, r3, #23
    d738:	68bb      	ldr	r3, [r7, #8]
    d73a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    d73c:	687b      	ldr	r3, [r7, #4]
    d73e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d740:	b29b      	uxth	r3, r3
    d742:	3b01      	subs	r3, #1
    d744:	b29a      	uxth	r2, r3
    d746:	687b      	ldr	r3, [r7, #4]
    d748:	869a      	strh	r2, [r3, #52]	; 0x34
}
    d74a:	46c0      	nop			; (mov r8, r8)
    d74c:	46bd      	mov	sp, r7
    d74e:	b004      	add	sp, #16
    d750:	bd80      	pop	{r7, pc}
	...

0000d754 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    d754:	b580      	push	{r7, lr}
    d756:	b084      	sub	sp, #16
    d758:	af00      	add	r7, sp, #0
    d75a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d75c:	687b      	ldr	r3, [r7, #4]
    d75e:	681b      	ldr	r3, [r3, #0]
    d760:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    d762:	4b08      	ldr	r3, [pc, #32]	; (d784 <_spi_write_dummy+0x30>)
    d764:	881b      	ldrh	r3, [r3, #0]
    d766:	001a      	movs	r2, r3
    d768:	68fb      	ldr	r3, [r7, #12]
    d76a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    d76c:	687b      	ldr	r3, [r7, #4]
    d76e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d770:	b29b      	uxth	r3, r3
    d772:	3b01      	subs	r3, #1
    d774:	b29a      	uxth	r2, r3
    d776:	687b      	ldr	r3, [r7, #4]
    d778:	865a      	strh	r2, [r3, #50]	; 0x32
}
    d77a:	46c0      	nop			; (mov r8, r8)
    d77c:	46bd      	mov	sp, r7
    d77e:	b004      	add	sp, #16
    d780:	bd80      	pop	{r7, pc}
    d782:	46c0      	nop			; (mov r8, r8)
    d784:	20002b74 	.word	0x20002b74

0000d788 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    d788:	b580      	push	{r7, lr}
    d78a:	b084      	sub	sp, #16
    d78c:	af00      	add	r7, sp, #0
    d78e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d790:	687b      	ldr	r3, [r7, #4]
    d792:	681b      	ldr	r3, [r3, #0]
    d794:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    d796:	230a      	movs	r3, #10
    d798:	18fb      	adds	r3, r7, r3
    d79a:	2200      	movs	r2, #0
    d79c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    d79e:	68fb      	ldr	r3, [r7, #12]
    d7a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7a2:	230a      	movs	r3, #10
    d7a4:	18fb      	adds	r3, r7, r3
    d7a6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    d7a8:	687b      	ldr	r3, [r7, #4]
    d7aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d7ac:	b29b      	uxth	r3, r3
    d7ae:	3b01      	subs	r3, #1
    d7b0:	b29a      	uxth	r2, r3
    d7b2:	687b      	ldr	r3, [r7, #4]
    d7b4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    d7b6:	46c0      	nop			; (mov r8, r8)
    d7b8:	46bd      	mov	sp, r7
    d7ba:	b004      	add	sp, #16
    d7bc:	bd80      	pop	{r7, pc}

0000d7be <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    d7be:	b580      	push	{r7, lr}
    d7c0:	b084      	sub	sp, #16
    d7c2:	af00      	add	r7, sp, #0
    d7c4:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d7c6:	687b      	ldr	r3, [r7, #4]
    d7c8:	681b      	ldr	r3, [r3, #0]
    d7ca:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    d7cc:	68fb      	ldr	r3, [r7, #12]
    d7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7d0:	b29a      	uxth	r2, r3
    d7d2:	230a      	movs	r3, #10
    d7d4:	18fb      	adds	r3, r7, r3
    d7d6:	05d2      	lsls	r2, r2, #23
    d7d8:	0dd2      	lsrs	r2, r2, #23
    d7da:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    d7dc:	687b      	ldr	r3, [r7, #4]
    d7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7e0:	220a      	movs	r2, #10
    d7e2:	18ba      	adds	r2, r7, r2
    d7e4:	8812      	ldrh	r2, [r2, #0]
    d7e6:	b2d2      	uxtb	r2, r2
    d7e8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    d7ea:	687b      	ldr	r3, [r7, #4]
    d7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7ee:	1c5a      	adds	r2, r3, #1
    d7f0:	687b      	ldr	r3, [r7, #4]
    d7f2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d7f4:	687b      	ldr	r3, [r7, #4]
    d7f6:	799b      	ldrb	r3, [r3, #6]
    d7f8:	2b01      	cmp	r3, #1
    d7fa:	d10d      	bne.n	d818 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d800:	220a      	movs	r2, #10
    d802:	18ba      	adds	r2, r7, r2
    d804:	8812      	ldrh	r2, [r2, #0]
    d806:	0a12      	lsrs	r2, r2, #8
    d808:	b292      	uxth	r2, r2
    d80a:	b2d2      	uxtb	r2, r2
    d80c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    d80e:	687b      	ldr	r3, [r7, #4]
    d810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d812:	1c5a      	adds	r2, r3, #1
    d814:	687b      	ldr	r3, [r7, #4]
    d816:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    d818:	687b      	ldr	r3, [r7, #4]
    d81a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    d81c:	b29b      	uxth	r3, r3
    d81e:	3b01      	subs	r3, #1
    d820:	b29a      	uxth	r2, r3
    d822:	687b      	ldr	r3, [r7, #4]
    d824:	861a      	strh	r2, [r3, #48]	; 0x30
}
    d826:	46c0      	nop			; (mov r8, r8)
    d828:	46bd      	mov	sp, r7
    d82a:	b004      	add	sp, #16
    d82c:	bd80      	pop	{r7, pc}
	...

0000d830 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    d830:	b580      	push	{r7, lr}
    d832:	b086      	sub	sp, #24
    d834:	af00      	add	r7, sp, #0
    d836:	0002      	movs	r2, r0
    d838:	1dfb      	adds	r3, r7, #7
    d83a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    d83c:	1dfb      	adds	r3, r7, #7
    d83e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    d840:	4b96      	ldr	r3, [pc, #600]	; (da9c <_spi_interrupt_handler+0x26c>)
    d842:	0092      	lsls	r2, r2, #2
    d844:	58d3      	ldr	r3, [r2, r3]
    d846:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d848:	697b      	ldr	r3, [r7, #20]
    d84a:	681b      	ldr	r3, [r3, #0]
    d84c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    d84e:	697b      	ldr	r3, [r7, #20]
    d850:	2237      	movs	r2, #55	; 0x37
    d852:	5c9a      	ldrb	r2, [r3, r2]
    d854:	697b      	ldr	r3, [r7, #20]
    d856:	2136      	movs	r1, #54	; 0x36
    d858:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    d85a:	230f      	movs	r3, #15
    d85c:	18fb      	adds	r3, r7, r3
    d85e:	400a      	ands	r2, r1
    d860:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    d862:	693b      	ldr	r3, [r7, #16]
    d864:	7e1b      	ldrb	r3, [r3, #24]
    d866:	b2da      	uxtb	r2, r3
    d868:	230c      	movs	r3, #12
    d86a:	18fb      	adds	r3, r7, r3
    d86c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    d86e:	693b      	ldr	r3, [r7, #16]
    d870:	7d9b      	ldrb	r3, [r3, #22]
    d872:	b2db      	uxtb	r3, r3
    d874:	b29a      	uxth	r2, r3
    d876:	230c      	movs	r3, #12
    d878:	18fb      	adds	r3, r7, r3
    d87a:	210c      	movs	r1, #12
    d87c:	1879      	adds	r1, r7, r1
    d87e:	8809      	ldrh	r1, [r1, #0]
    d880:	400a      	ands	r2, r1
    d882:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    d884:	230c      	movs	r3, #12
    d886:	18fb      	adds	r3, r7, r3
    d888:	881b      	ldrh	r3, [r3, #0]
    d88a:	2201      	movs	r2, #1
    d88c:	4013      	ands	r3, r2
    d88e:	d038      	beq.n	d902 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    d890:	697b      	ldr	r3, [r7, #20]
    d892:	795b      	ldrb	r3, [r3, #5]
    d894:	2b01      	cmp	r3, #1
    d896:	d110      	bne.n	d8ba <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    d898:	697b      	ldr	r3, [r7, #20]
    d89a:	7a5b      	ldrb	r3, [r3, #9]
    d89c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    d89e:	2b00      	cmp	r3, #0
    d8a0:	d10b      	bne.n	d8ba <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    d8a2:	697b      	ldr	r3, [r7, #20]
    d8a4:	0018      	movs	r0, r3
    d8a6:	4b7e      	ldr	r3, [pc, #504]	; (daa0 <_spi_interrupt_handler+0x270>)
    d8a8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    d8aa:	697b      	ldr	r3, [r7, #20]
    d8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d8ae:	b29b      	uxth	r3, r3
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d102      	bne.n	d8ba <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d8b4:	693b      	ldr	r3, [r7, #16]
    d8b6:	2201      	movs	r2, #1
    d8b8:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    d8ba:	697b      	ldr	r3, [r7, #20]
    d8bc:	795b      	ldrb	r3, [r3, #5]
		if (0
    d8be:	2b01      	cmp	r3, #1
    d8c0:	d11f      	bne.n	d902 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    d8c2:	697b      	ldr	r3, [r7, #20]
    d8c4:	7a5b      	ldrb	r3, [r3, #9]
    d8c6:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d01a      	beq.n	d902 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    d8cc:	697b      	ldr	r3, [r7, #20]
    d8ce:	0018      	movs	r0, r3
    d8d0:	4b74      	ldr	r3, [pc, #464]	; (daa4 <_spi_interrupt_handler+0x274>)
    d8d2:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    d8d4:	697b      	ldr	r3, [r7, #20]
    d8d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d8d8:	b29b      	uxth	r3, r3
    d8da:	2b00      	cmp	r3, #0
    d8dc:	d111      	bne.n	d902 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d8de:	693b      	ldr	r3, [r7, #16]
    d8e0:	2201      	movs	r2, #1
    d8e2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    d8e4:	697b      	ldr	r3, [r7, #20]
    d8e6:	7a5b      	ldrb	r3, [r3, #9]
    d8e8:	b2db      	uxtb	r3, r3
    d8ea:	2b01      	cmp	r3, #1
    d8ec:	d109      	bne.n	d902 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    d8ee:	697b      	ldr	r3, [r7, #20]
    d8f0:	79db      	ldrb	r3, [r3, #7]
    d8f2:	2201      	movs	r2, #1
    d8f4:	4053      	eors	r3, r2
    d8f6:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d002      	beq.n	d902 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d8fc:	693b      	ldr	r3, [r7, #16]
    d8fe:	2202      	movs	r2, #2
    d900:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    d902:	230c      	movs	r3, #12
    d904:	18fb      	adds	r3, r7, r3
    d906:	881b      	ldrh	r3, [r3, #0]
    d908:	2204      	movs	r2, #4
    d90a:	4013      	ands	r3, r2
    d90c:	d100      	bne.n	d910 <_spi_interrupt_handler+0xe0>
    d90e:	e07e      	b.n	da0e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d910:	693b      	ldr	r3, [r7, #16]
    d912:	8b5b      	ldrh	r3, [r3, #26]
    d914:	b29b      	uxth	r3, r3
    d916:	001a      	movs	r2, r3
    d918:	2304      	movs	r3, #4
    d91a:	4013      	ands	r3, r2
    d91c:	d022      	beq.n	d964 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    d91e:	697b      	ldr	r3, [r7, #20]
    d920:	7a5b      	ldrb	r3, [r3, #9]
    d922:	b2db      	uxtb	r3, r3
    d924:	2b01      	cmp	r3, #1
    d926:	d014      	beq.n	d952 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    d928:	697b      	ldr	r3, [r7, #20]
    d92a:	2238      	movs	r2, #56	; 0x38
    d92c:	211e      	movs	r1, #30
    d92e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    d930:	697b      	ldr	r3, [r7, #20]
    d932:	2203      	movs	r2, #3
    d934:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    d936:	693b      	ldr	r3, [r7, #16]
    d938:	2205      	movs	r2, #5
    d93a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    d93c:	230f      	movs	r3, #15
    d93e:	18fb      	adds	r3, r7, r3
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	2208      	movs	r2, #8
    d944:	4013      	ands	r3, r2
    d946:	d004      	beq.n	d952 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    d948:	697b      	ldr	r3, [r7, #20]
    d94a:	699b      	ldr	r3, [r3, #24]
    d94c:	697a      	ldr	r2, [r7, #20]
    d94e:	0010      	movs	r0, r2
    d950:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    d952:	693b      	ldr	r3, [r7, #16]
    d954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d956:	230a      	movs	r3, #10
    d958:	18fb      	adds	r3, r7, r3
    d95a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d95c:	693b      	ldr	r3, [r7, #16]
    d95e:	2204      	movs	r2, #4
    d960:	835a      	strh	r2, [r3, #26]
    d962:	e054      	b.n	da0e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    d964:	697b      	ldr	r3, [r7, #20]
    d966:	7a5b      	ldrb	r3, [r3, #9]
    d968:	b2db      	uxtb	r3, r3
    d96a:	2b01      	cmp	r3, #1
    d96c:	d11e      	bne.n	d9ac <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    d96e:	697b      	ldr	r3, [r7, #20]
    d970:	0018      	movs	r0, r3
    d972:	4b4d      	ldr	r3, [pc, #308]	; (daa8 <_spi_interrupt_handler+0x278>)
    d974:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    d976:	697b      	ldr	r3, [r7, #20]
    d978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d97a:	b29b      	uxth	r3, r3
    d97c:	2b00      	cmp	r3, #0
    d97e:	d146      	bne.n	da0e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d980:	693b      	ldr	r3, [r7, #16]
    d982:	2204      	movs	r2, #4
    d984:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    d986:	697b      	ldr	r3, [r7, #20]
    d988:	2238      	movs	r2, #56	; 0x38
    d98a:	2100      	movs	r1, #0
    d98c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    d98e:	697b      	ldr	r3, [r7, #20]
    d990:	2203      	movs	r2, #3
    d992:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    d994:	230f      	movs	r3, #15
    d996:	18fb      	adds	r3, r7, r3
    d998:	781b      	ldrb	r3, [r3, #0]
    d99a:	2201      	movs	r2, #1
    d99c:	4013      	ands	r3, r2
    d99e:	d036      	beq.n	da0e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    d9a0:	697b      	ldr	r3, [r7, #20]
    d9a2:	68db      	ldr	r3, [r3, #12]
    d9a4:	697a      	ldr	r2, [r7, #20]
    d9a6:	0010      	movs	r0, r2
    d9a8:	4798      	blx	r3
    d9aa:	e030      	b.n	da0e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    d9ac:	697b      	ldr	r3, [r7, #20]
    d9ae:	0018      	movs	r0, r3
    d9b0:	4b3e      	ldr	r3, [pc, #248]	; (daac <_spi_interrupt_handler+0x27c>)
    d9b2:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    d9b4:	697b      	ldr	r3, [r7, #20]
    d9b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    d9b8:	b29b      	uxth	r3, r3
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d127      	bne.n	da0e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    d9be:	697b      	ldr	r3, [r7, #20]
    d9c0:	2238      	movs	r2, #56	; 0x38
    d9c2:	2100      	movs	r1, #0
    d9c4:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d9c6:	693b      	ldr	r3, [r7, #16]
    d9c8:	2204      	movs	r2, #4
    d9ca:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    d9cc:	697b      	ldr	r3, [r7, #20]
    d9ce:	7a5b      	ldrb	r3, [r3, #9]
    d9d0:	b2db      	uxtb	r3, r3
    d9d2:	2b02      	cmp	r3, #2
    d9d4:	d10b      	bne.n	d9ee <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    d9d6:	230f      	movs	r3, #15
    d9d8:	18fb      	adds	r3, r7, r3
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	2204      	movs	r2, #4
    d9de:	4013      	ands	r3, r2
    d9e0:	d015      	beq.n	da0e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    d9e2:	697b      	ldr	r3, [r7, #20]
    d9e4:	695b      	ldr	r3, [r3, #20]
    d9e6:	697a      	ldr	r2, [r7, #20]
    d9e8:	0010      	movs	r0, r2
    d9ea:	4798      	blx	r3
    d9ec:	e00f      	b.n	da0e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    d9ee:	697b      	ldr	r3, [r7, #20]
    d9f0:	7a5b      	ldrb	r3, [r3, #9]
    d9f2:	b2db      	uxtb	r3, r3
    d9f4:	2b00      	cmp	r3, #0
    d9f6:	d10a      	bne.n	da0e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    d9f8:	230f      	movs	r3, #15
    d9fa:	18fb      	adds	r3, r7, r3
    d9fc:	781b      	ldrb	r3, [r3, #0]
    d9fe:	2202      	movs	r2, #2
    da00:	4013      	ands	r3, r2
    da02:	d004      	beq.n	da0e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    da04:	697b      	ldr	r3, [r7, #20]
    da06:	691b      	ldr	r3, [r3, #16]
    da08:	697a      	ldr	r2, [r7, #20]
    da0a:	0010      	movs	r0, r2
    da0c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    da0e:	230c      	movs	r3, #12
    da10:	18fb      	adds	r3, r7, r3
    da12:	881b      	ldrh	r3, [r3, #0]
    da14:	2202      	movs	r2, #2
    da16:	4013      	ands	r3, r2
    da18:	d024      	beq.n	da64 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    da1a:	697b      	ldr	r3, [r7, #20]
    da1c:	795b      	ldrb	r3, [r3, #5]
    da1e:	2b01      	cmp	r3, #1
    da20:	d120      	bne.n	da64 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    da22:	697b      	ldr	r3, [r7, #20]
    da24:	7a5b      	ldrb	r3, [r3, #9]
    da26:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    da28:	2b01      	cmp	r3, #1
    da2a:	d11b      	bne.n	da64 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    da2c:	697b      	ldr	r3, [r7, #20]
    da2e:	79db      	ldrb	r3, [r3, #7]
    da30:	2201      	movs	r2, #1
    da32:	4053      	eors	r3, r2
    da34:	b2db      	uxtb	r3, r3
    da36:	2b00      	cmp	r3, #0
    da38:	d014      	beq.n	da64 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    da3a:	693b      	ldr	r3, [r7, #16]
    da3c:	2202      	movs	r2, #2
    da3e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    da40:	697b      	ldr	r3, [r7, #20]
    da42:	2203      	movs	r2, #3
    da44:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    da46:	697b      	ldr	r3, [r7, #20]
    da48:	2238      	movs	r2, #56	; 0x38
    da4a:	2100      	movs	r1, #0
    da4c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    da4e:	230f      	movs	r3, #15
    da50:	18fb      	adds	r3, r7, r3
    da52:	781b      	ldrb	r3, [r3, #0]
    da54:	2201      	movs	r2, #1
    da56:	4013      	ands	r3, r2
    da58:	d004      	beq.n	da64 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    da5a:	697b      	ldr	r3, [r7, #20]
    da5c:	68db      	ldr	r3, [r3, #12]
    da5e:	697a      	ldr	r2, [r7, #20]
    da60:	0010      	movs	r0, r2
    da62:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    da64:	230c      	movs	r3, #12
    da66:	18fb      	adds	r3, r7, r3
    da68:	881b      	ldrh	r3, [r3, #0]
    da6a:	2280      	movs	r2, #128	; 0x80
    da6c:	4013      	ands	r3, r2
    da6e:	d010      	beq.n	da92 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    da70:	693b      	ldr	r3, [r7, #16]
    da72:	2280      	movs	r2, #128	; 0x80
    da74:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    da76:	693b      	ldr	r3, [r7, #16]
    da78:	2280      	movs	r2, #128	; 0x80
    da7a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    da7c:	230f      	movs	r3, #15
    da7e:	18fb      	adds	r3, r7, r3
    da80:	781b      	ldrb	r3, [r3, #0]
    da82:	2240      	movs	r2, #64	; 0x40
    da84:	4013      	ands	r3, r2
    da86:	d004      	beq.n	da92 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    da88:	697b      	ldr	r3, [r7, #20]
    da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    da8c:	697a      	ldr	r2, [r7, #20]
    da8e:	0010      	movs	r0, r2
    da90:	4798      	blx	r3
		}
	}
#  endif
}
    da92:	46c0      	nop			; (mov r8, r8)
    da94:	46bd      	mov	sp, r7
    da96:	b006      	add	sp, #24
    da98:	bd80      	pop	{r7, pc}
    da9a:	46c0      	nop			; (mov r8, r8)
    da9c:	20002b5c 	.word	0x20002b5c
    daa0:	0000d755 	.word	0x0000d755
    daa4:	0000d6d9 	.word	0x0000d6d9
    daa8:	0000d789 	.word	0x0000d789
    daac:	0000d7bf 	.word	0x0000d7bf

0000dab0 <system_gclk_chan_get_config_defaults>:
{
    dab0:	b580      	push	{r7, lr}
    dab2:	b082      	sub	sp, #8
    dab4:	af00      	add	r7, sp, #0
    dab6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    dab8:	687b      	ldr	r3, [r7, #4]
    daba:	2200      	movs	r2, #0
    dabc:	701a      	strb	r2, [r3, #0]
}
    dabe:	46c0      	nop			; (mov r8, r8)
    dac0:	46bd      	mov	sp, r7
    dac2:	b002      	add	sp, #8
    dac4:	bd80      	pop	{r7, pc}
	...

0000dac8 <system_apb_clock_set_mask>:
{
    dac8:	b580      	push	{r7, lr}
    daca:	b082      	sub	sp, #8
    dacc:	af00      	add	r7, sp, #0
    dace:	0002      	movs	r2, r0
    dad0:	6039      	str	r1, [r7, #0]
    dad2:	1dfb      	adds	r3, r7, #7
    dad4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    dad6:	1dfb      	adds	r3, r7, #7
    dad8:	781b      	ldrb	r3, [r3, #0]
    dada:	2b01      	cmp	r3, #1
    dadc:	d00a      	beq.n	daf4 <system_apb_clock_set_mask+0x2c>
    dade:	2b02      	cmp	r3, #2
    dae0:	d00f      	beq.n	db02 <system_apb_clock_set_mask+0x3a>
    dae2:	2b00      	cmp	r3, #0
    dae4:	d114      	bne.n	db10 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    dae6:	4b0e      	ldr	r3, [pc, #56]	; (db20 <system_apb_clock_set_mask+0x58>)
    dae8:	4a0d      	ldr	r2, [pc, #52]	; (db20 <system_apb_clock_set_mask+0x58>)
    daea:	6991      	ldr	r1, [r2, #24]
    daec:	683a      	ldr	r2, [r7, #0]
    daee:	430a      	orrs	r2, r1
    daf0:	619a      	str	r2, [r3, #24]
			break;
    daf2:	e00f      	b.n	db14 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    daf4:	4b0a      	ldr	r3, [pc, #40]	; (db20 <system_apb_clock_set_mask+0x58>)
    daf6:	4a0a      	ldr	r2, [pc, #40]	; (db20 <system_apb_clock_set_mask+0x58>)
    daf8:	69d1      	ldr	r1, [r2, #28]
    dafa:	683a      	ldr	r2, [r7, #0]
    dafc:	430a      	orrs	r2, r1
    dafe:	61da      	str	r2, [r3, #28]
			break;
    db00:	e008      	b.n	db14 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    db02:	4b07      	ldr	r3, [pc, #28]	; (db20 <system_apb_clock_set_mask+0x58>)
    db04:	4a06      	ldr	r2, [pc, #24]	; (db20 <system_apb_clock_set_mask+0x58>)
    db06:	6a11      	ldr	r1, [r2, #32]
    db08:	683a      	ldr	r2, [r7, #0]
    db0a:	430a      	orrs	r2, r1
    db0c:	621a      	str	r2, [r3, #32]
			break;
    db0e:	e001      	b.n	db14 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    db10:	2317      	movs	r3, #23
    db12:	e000      	b.n	db16 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    db14:	2300      	movs	r3, #0
}
    db16:	0018      	movs	r0, r3
    db18:	46bd      	mov	sp, r7
    db1a:	b002      	add	sp, #8
    db1c:	bd80      	pop	{r7, pc}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	40000400 	.word	0x40000400

0000db24 <system_pinmux_get_config_defaults>:
{
    db24:	b580      	push	{r7, lr}
    db26:	b082      	sub	sp, #8
    db28:	af00      	add	r7, sp, #0
    db2a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    db2c:	687b      	ldr	r3, [r7, #4]
    db2e:	2280      	movs	r2, #128	; 0x80
    db30:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    db32:	687b      	ldr	r3, [r7, #4]
    db34:	2200      	movs	r2, #0
    db36:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    db38:	687b      	ldr	r3, [r7, #4]
    db3a:	2201      	movs	r2, #1
    db3c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    db3e:	687b      	ldr	r3, [r7, #4]
    db40:	2200      	movs	r2, #0
    db42:	70da      	strb	r2, [r3, #3]
}
    db44:	46c0      	nop			; (mov r8, r8)
    db46:	46bd      	mov	sp, r7
    db48:	b002      	add	sp, #8
    db4a:	bd80      	pop	{r7, pc}

0000db4c <system_is_debugger_present>:
{
    db4c:	b580      	push	{r7, lr}
    db4e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    db50:	4b05      	ldr	r3, [pc, #20]	; (db68 <system_is_debugger_present+0x1c>)
    db52:	789b      	ldrb	r3, [r3, #2]
    db54:	b2db      	uxtb	r3, r3
    db56:	001a      	movs	r2, r3
    db58:	2302      	movs	r3, #2
    db5a:	4013      	ands	r3, r2
    db5c:	1e5a      	subs	r2, r3, #1
    db5e:	4193      	sbcs	r3, r2
    db60:	b2db      	uxtb	r3, r3
}
    db62:	0018      	movs	r0, r3
    db64:	46bd      	mov	sp, r7
    db66:	bd80      	pop	{r7, pc}
    db68:	41002000 	.word	0x41002000

0000db6c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    db6c:	b580      	push	{r7, lr}
    db6e:	b084      	sub	sp, #16
    db70:	af00      	add	r7, sp, #0
    db72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    db74:	687b      	ldr	r3, [r7, #4]
    db76:	681b      	ldr	r3, [r3, #0]
    db78:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    db7a:	68fb      	ldr	r3, [r7, #12]
    db7c:	69db      	ldr	r3, [r3, #28]
    db7e:	1e5a      	subs	r2, r3, #1
    db80:	4193      	sbcs	r3, r2
    db82:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    db84:	0018      	movs	r0, r3
    db86:	46bd      	mov	sp, r7
    db88:	b004      	add	sp, #16
    db8a:	bd80      	pop	{r7, pc}

0000db8c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    db8c:	b580      	push	{r7, lr}
    db8e:	b082      	sub	sp, #8
    db90:	af00      	add	r7, sp, #0
    db92:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    db94:	46c0      	nop			; (mov r8, r8)
    db96:	687b      	ldr	r3, [r7, #4]
    db98:	0018      	movs	r0, r3
    db9a:	4b04      	ldr	r3, [pc, #16]	; (dbac <_usart_wait_for_sync+0x20>)
    db9c:	4798      	blx	r3
    db9e:	1e03      	subs	r3, r0, #0
    dba0:	d1f9      	bne.n	db96 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    dba2:	46c0      	nop			; (mov r8, r8)
    dba4:	46bd      	mov	sp, r7
    dba6:	b002      	add	sp, #8
    dba8:	bd80      	pop	{r7, pc}
    dbaa:	46c0      	nop			; (mov r8, r8)
    dbac:	0000db6d 	.word	0x0000db6d

0000dbb0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    dbb0:	b5b0      	push	{r4, r5, r7, lr}
    dbb2:	b08c      	sub	sp, #48	; 0x30
    dbb4:	af02      	add	r7, sp, #8
    dbb6:	6078      	str	r0, [r7, #4]
    dbb8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    dbba:	687b      	ldr	r3, [r7, #4]
    dbbc:	681b      	ldr	r3, [r3, #0]
    dbbe:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    dbc0:	687b      	ldr	r3, [r7, #4]
    dbc2:	681b      	ldr	r3, [r3, #0]
    dbc4:	0018      	movs	r0, r3
    dbc6:	4bab      	ldr	r3, [pc, #684]	; (de74 <_usart_set_config+0x2c4>)
    dbc8:	4798      	blx	r3
    dbca:	0003      	movs	r3, r0
    dbcc:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    dbce:	697b      	ldr	r3, [r7, #20]
    dbd0:	3314      	adds	r3, #20
    dbd2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    dbd4:	2300      	movs	r3, #0
    dbd6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    dbd8:	2300      	movs	r3, #0
    dbda:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    dbdc:	230a      	movs	r3, #10
    dbde:	18fb      	adds	r3, r7, r3
    dbe0:	2200      	movs	r2, #0
    dbe2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dbe4:	231f      	movs	r3, #31
    dbe6:	18fb      	adds	r3, r7, r3
    dbe8:	2200      	movs	r2, #0
    dbea:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    dbec:	231e      	movs	r3, #30
    dbee:	18fb      	adds	r3, r7, r3
    dbf0:	2210      	movs	r2, #16
    dbf2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    dbf4:	683b      	ldr	r3, [r7, #0]
    dbf6:	8a1b      	ldrh	r3, [r3, #16]
    dbf8:	2280      	movs	r2, #128	; 0x80
    dbfa:	01d2      	lsls	r2, r2, #7
    dbfc:	4293      	cmp	r3, r2
    dbfe:	d01c      	beq.n	dc3a <_usart_set_config+0x8a>
    dc00:	2280      	movs	r2, #128	; 0x80
    dc02:	01d2      	lsls	r2, r2, #7
    dc04:	4293      	cmp	r3, r2
    dc06:	dc06      	bgt.n	dc16 <_usart_set_config+0x66>
    dc08:	2b00      	cmp	r3, #0
    dc0a:	d00d      	beq.n	dc28 <_usart_set_config+0x78>
    dc0c:	2280      	movs	r2, #128	; 0x80
    dc0e:	0192      	lsls	r2, r2, #6
    dc10:	4293      	cmp	r3, r2
    dc12:	d024      	beq.n	dc5e <_usart_set_config+0xae>
    dc14:	e035      	b.n	dc82 <_usart_set_config+0xd2>
    dc16:	22c0      	movs	r2, #192	; 0xc0
    dc18:	01d2      	lsls	r2, r2, #7
    dc1a:	4293      	cmp	r3, r2
    dc1c:	d028      	beq.n	dc70 <_usart_set_config+0xc0>
    dc1e:	2280      	movs	r2, #128	; 0x80
    dc20:	0212      	lsls	r2, r2, #8
    dc22:	4293      	cmp	r3, r2
    dc24:	d012      	beq.n	dc4c <_usart_set_config+0x9c>
    dc26:	e02c      	b.n	dc82 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dc28:	231f      	movs	r3, #31
    dc2a:	18fb      	adds	r3, r7, r3
    dc2c:	2200      	movs	r2, #0
    dc2e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    dc30:	231e      	movs	r3, #30
    dc32:	18fb      	adds	r3, r7, r3
    dc34:	2210      	movs	r2, #16
    dc36:	701a      	strb	r2, [r3, #0]
			break;
    dc38:	e023      	b.n	dc82 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dc3a:	231f      	movs	r3, #31
    dc3c:	18fb      	adds	r3, r7, r3
    dc3e:	2200      	movs	r2, #0
    dc40:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    dc42:	231e      	movs	r3, #30
    dc44:	18fb      	adds	r3, r7, r3
    dc46:	2208      	movs	r2, #8
    dc48:	701a      	strb	r2, [r3, #0]
			break;
    dc4a:	e01a      	b.n	dc82 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dc4c:	231f      	movs	r3, #31
    dc4e:	18fb      	adds	r3, r7, r3
    dc50:	2200      	movs	r2, #0
    dc52:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    dc54:	231e      	movs	r3, #30
    dc56:	18fb      	adds	r3, r7, r3
    dc58:	2203      	movs	r2, #3
    dc5a:	701a      	strb	r2, [r3, #0]
			break;
    dc5c:	e011      	b.n	dc82 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    dc5e:	231f      	movs	r3, #31
    dc60:	18fb      	adds	r3, r7, r3
    dc62:	2201      	movs	r2, #1
    dc64:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    dc66:	231e      	movs	r3, #30
    dc68:	18fb      	adds	r3, r7, r3
    dc6a:	2210      	movs	r2, #16
    dc6c:	701a      	strb	r2, [r3, #0]
			break;
    dc6e:	e008      	b.n	dc82 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    dc70:	231f      	movs	r3, #31
    dc72:	18fb      	adds	r3, r7, r3
    dc74:	2201      	movs	r2, #1
    dc76:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    dc78:	231e      	movs	r3, #30
    dc7a:	18fb      	adds	r3, r7, r3
    dc7c:	2208      	movs	r2, #8
    dc7e:	701a      	strb	r2, [r3, #0]
			break;
    dc80:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    dc82:	683b      	ldr	r3, [r7, #0]
    dc84:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    dc86:	683b      	ldr	r3, [r7, #0]
    dc88:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    dc8a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    dc8c:	683b      	ldr	r3, [r7, #0]
    dc8e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    dc90:	4313      	orrs	r3, r2
		config->sample_rate |
    dc92:	683a      	ldr	r2, [r7, #0]
    dc94:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    dc96:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    dc98:	683a      	ldr	r2, [r7, #0]
    dc9a:	7e12      	ldrb	r2, [r2, #24]
    dc9c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    dc9e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    dca0:	683a      	ldr	r2, [r7, #0]
    dca2:	2126      	movs	r1, #38	; 0x26
    dca4:	5c52      	ldrb	r2, [r2, r1]
    dca6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    dca8:	4313      	orrs	r3, r2
    dcaa:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    dcac:	231d      	movs	r3, #29
    dcae:	18fb      	adds	r3, r7, r3
    dcb0:	2200      	movs	r2, #0
    dcb2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    dcb4:	683b      	ldr	r3, [r7, #0]
    dcb6:	685b      	ldr	r3, [r3, #4]
    dcb8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    dcba:	68fb      	ldr	r3, [r7, #12]
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d01e      	beq.n	dcfe <_usart_set_config+0x14e>
    dcc0:	2280      	movs	r2, #128	; 0x80
    dcc2:	0552      	lsls	r2, r2, #21
    dcc4:	4293      	cmp	r3, r2
    dcc6:	d14f      	bne.n	dd68 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    dcc8:	683b      	ldr	r3, [r7, #0]
    dcca:	2227      	movs	r2, #39	; 0x27
    dccc:	5c9b      	ldrb	r3, [r3, r2]
    dcce:	2201      	movs	r2, #1
    dcd0:	4053      	eors	r3, r2
    dcd2:	b2db      	uxtb	r3, r3
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	d046      	beq.n	dd66 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    dcd8:	683b      	ldr	r3, [r7, #0]
    dcda:	6a1d      	ldr	r5, [r3, #32]
    dcdc:	693b      	ldr	r3, [r7, #16]
    dcde:	b2db      	uxtb	r3, r3
    dce0:	0018      	movs	r0, r3
    dce2:	4b65      	ldr	r3, [pc, #404]	; (de78 <_usart_set_config+0x2c8>)
    dce4:	4798      	blx	r3
    dce6:	0001      	movs	r1, r0
    dce8:	231d      	movs	r3, #29
    dcea:	18fc      	adds	r4, r7, r3
    dcec:	230a      	movs	r3, #10
    dcee:	18fb      	adds	r3, r7, r3
    dcf0:	001a      	movs	r2, r3
    dcf2:	0028      	movs	r0, r5
    dcf4:	4b61      	ldr	r3, [pc, #388]	; (de7c <_usart_set_config+0x2cc>)
    dcf6:	4798      	blx	r3
    dcf8:	0003      	movs	r3, r0
    dcfa:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    dcfc:	e033      	b.n	dd66 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    dcfe:	683b      	ldr	r3, [r7, #0]
    dd00:	2227      	movs	r2, #39	; 0x27
    dd02:	5c9b      	ldrb	r3, [r3, r2]
    dd04:	2b00      	cmp	r3, #0
    dd06:	d014      	beq.n	dd32 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    dd08:	683b      	ldr	r3, [r7, #0]
    dd0a:	6a18      	ldr	r0, [r3, #32]
    dd0c:	683b      	ldr	r3, [r7, #0]
    dd0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    dd10:	231d      	movs	r3, #29
    dd12:	18fc      	adds	r4, r7, r3
    dd14:	231f      	movs	r3, #31
    dd16:	18fb      	adds	r3, r7, r3
    dd18:	781d      	ldrb	r5, [r3, #0]
    dd1a:	230a      	movs	r3, #10
    dd1c:	18fa      	adds	r2, r7, r3
    dd1e:	231e      	movs	r3, #30
    dd20:	18fb      	adds	r3, r7, r3
    dd22:	781b      	ldrb	r3, [r3, #0]
    dd24:	9300      	str	r3, [sp, #0]
    dd26:	002b      	movs	r3, r5
    dd28:	4d55      	ldr	r5, [pc, #340]	; (de80 <_usart_set_config+0x2d0>)
    dd2a:	47a8      	blx	r5
    dd2c:	0003      	movs	r3, r0
    dd2e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    dd30:	e01a      	b.n	dd68 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    dd32:	683b      	ldr	r3, [r7, #0]
    dd34:	6a1d      	ldr	r5, [r3, #32]
    dd36:	693b      	ldr	r3, [r7, #16]
    dd38:	b2db      	uxtb	r3, r3
    dd3a:	0018      	movs	r0, r3
    dd3c:	4b4e      	ldr	r3, [pc, #312]	; (de78 <_usart_set_config+0x2c8>)
    dd3e:	4798      	blx	r3
				status_code =
    dd40:	231d      	movs	r3, #29
    dd42:	18fc      	adds	r4, r7, r3
    dd44:	231f      	movs	r3, #31
    dd46:	18fb      	adds	r3, r7, r3
    dd48:	7819      	ldrb	r1, [r3, #0]
    dd4a:	230a      	movs	r3, #10
    dd4c:	18fa      	adds	r2, r7, r3
    dd4e:	231e      	movs	r3, #30
    dd50:	18fb      	adds	r3, r7, r3
    dd52:	781b      	ldrb	r3, [r3, #0]
    dd54:	9300      	str	r3, [sp, #0]
    dd56:	000b      	movs	r3, r1
    dd58:	0001      	movs	r1, r0
    dd5a:	0028      	movs	r0, r5
    dd5c:	4d48      	ldr	r5, [pc, #288]	; (de80 <_usart_set_config+0x2d0>)
    dd5e:	47a8      	blx	r5
    dd60:	0003      	movs	r3, r0
    dd62:	7023      	strb	r3, [r4, #0]
			break;
    dd64:	e000      	b.n	dd68 <_usart_set_config+0x1b8>
			break;
    dd66:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    dd68:	231d      	movs	r3, #29
    dd6a:	18fb      	adds	r3, r7, r3
    dd6c:	781b      	ldrb	r3, [r3, #0]
    dd6e:	2b00      	cmp	r3, #0
    dd70:	d003      	beq.n	dd7a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    dd72:	231d      	movs	r3, #29
    dd74:	18fb      	adds	r3, r7, r3
    dd76:	781b      	ldrb	r3, [r3, #0]
    dd78:	e077      	b.n	de6a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    dd7a:	683b      	ldr	r3, [r7, #0]
    dd7c:	7e5b      	ldrb	r3, [r3, #25]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d003      	beq.n	dd8a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    dd82:	683b      	ldr	r3, [r7, #0]
    dd84:	7e9a      	ldrb	r2, [r3, #26]
    dd86:	69bb      	ldr	r3, [r7, #24]
    dd88:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    dd8a:	687b      	ldr	r3, [r7, #4]
    dd8c:	0018      	movs	r0, r3
    dd8e:	4b3d      	ldr	r3, [pc, #244]	; (de84 <_usart_set_config+0x2d4>)
    dd90:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    dd92:	230a      	movs	r3, #10
    dd94:	18fb      	adds	r3, r7, r3
    dd96:	881a      	ldrh	r2, [r3, #0]
    dd98:	69bb      	ldr	r3, [r7, #24]
    dd9a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    dd9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dd9e:	68fb      	ldr	r3, [r7, #12]
    dda0:	4313      	orrs	r3, r2
    dda2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    dda4:	683b      	ldr	r3, [r7, #0]
    dda6:	2227      	movs	r2, #39	; 0x27
    dda8:	5c9b      	ldrb	r3, [r3, r2]
    ddaa:	2201      	movs	r2, #1
    ddac:	4053      	eors	r3, r2
    ddae:	b2db      	uxtb	r3, r3
    ddb0:	2b00      	cmp	r3, #0
    ddb2:	d003      	beq.n	ddbc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ddb6:	2204      	movs	r2, #4
    ddb8:	4313      	orrs	r3, r2
    ddba:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ddbc:	683b      	ldr	r3, [r7, #0]
    ddbe:	7e5b      	ldrb	r3, [r3, #25]
    ddc0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ddc2:	683b      	ldr	r3, [r7, #0]
    ddc4:	7f1b      	ldrb	r3, [r3, #28]
    ddc6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ddc8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ddca:	683b      	ldr	r3, [r7, #0]
    ddcc:	7f5b      	ldrb	r3, [r3, #29]
    ddce:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ddd0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ddd2:	683b      	ldr	r3, [r7, #0]
    ddd4:	2124      	movs	r1, #36	; 0x24
    ddd6:	5c5b      	ldrb	r3, [r3, r1]
    ddd8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ddda:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    dddc:	683b      	ldr	r3, [r7, #0]
    ddde:	2125      	movs	r1, #37	; 0x25
    dde0:	5c5b      	ldrb	r3, [r3, r1]
    dde2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    dde4:	4313      	orrs	r3, r2
	ctrlb =  
    dde6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    dde8:	683b      	ldr	r3, [r7, #0]
    ddea:	7a9b      	ldrb	r3, [r3, #10]
    ddec:	001a      	movs	r2, r3
    ddee:	6a3b      	ldr	r3, [r7, #32]
    ddf0:	4313      	orrs	r3, r2
    ddf2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    ddf4:	683b      	ldr	r3, [r7, #0]
    ddf6:	7adb      	ldrb	r3, [r3, #11]
    ddf8:	001a      	movs	r2, r3
    ddfa:	6a3b      	ldr	r3, [r7, #32]
    ddfc:	4313      	orrs	r3, r2
    ddfe:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    de00:	683b      	ldr	r3, [r7, #0]
    de02:	891b      	ldrh	r3, [r3, #8]
    de04:	2bff      	cmp	r3, #255	; 0xff
    de06:	d00b      	beq.n	de20 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de0a:	2280      	movs	r2, #128	; 0x80
    de0c:	0452      	lsls	r2, r2, #17
    de0e:	4313      	orrs	r3, r2
    de10:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    de12:	683b      	ldr	r3, [r7, #0]
    de14:	891b      	ldrh	r3, [r3, #8]
    de16:	001a      	movs	r2, r3
    de18:	6a3b      	ldr	r3, [r7, #32]
    de1a:	4313      	orrs	r3, r2
    de1c:	623b      	str	r3, [r7, #32]
    de1e:	e008      	b.n	de32 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    de20:	683b      	ldr	r3, [r7, #0]
    de22:	7edb      	ldrb	r3, [r3, #27]
    de24:	2b00      	cmp	r3, #0
    de26:	d004      	beq.n	de32 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de2a:	2280      	movs	r2, #128	; 0x80
    de2c:	04d2      	lsls	r2, r2, #19
    de2e:	4313      	orrs	r3, r2
    de30:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    de32:	683b      	ldr	r3, [r7, #0]
    de34:	222c      	movs	r2, #44	; 0x2c
    de36:	5c9b      	ldrb	r3, [r3, r2]
    de38:	2b00      	cmp	r3, #0
    de3a:	d103      	bne.n	de44 <_usart_set_config+0x294>
    de3c:	4b12      	ldr	r3, [pc, #72]	; (de88 <_usart_set_config+0x2d8>)
    de3e:	4798      	blx	r3
    de40:	1e03      	subs	r3, r0, #0
    de42:	d003      	beq.n	de4c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de46:	2280      	movs	r2, #128	; 0x80
    de48:	4313      	orrs	r3, r2
    de4a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    de4c:	687b      	ldr	r3, [r7, #4]
    de4e:	0018      	movs	r0, r3
    de50:	4b0c      	ldr	r3, [pc, #48]	; (de84 <_usart_set_config+0x2d4>)
    de52:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    de54:	69bb      	ldr	r3, [r7, #24]
    de56:	6a3a      	ldr	r2, [r7, #32]
    de58:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    de5a:	687b      	ldr	r3, [r7, #4]
    de5c:	0018      	movs	r0, r3
    de5e:	4b09      	ldr	r3, [pc, #36]	; (de84 <_usart_set_config+0x2d4>)
    de60:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    de62:	69bb      	ldr	r3, [r7, #24]
    de64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    de66:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    de68:	2300      	movs	r3, #0
}
    de6a:	0018      	movs	r0, r3
    de6c:	46bd      	mov	sp, r7
    de6e:	b00a      	add	sp, #40	; 0x28
    de70:	bdb0      	pop	{r4, r5, r7, pc}
    de72:	46c0      	nop			; (mov r8, r8)
    de74:	0000cdf1 	.word	0x0000cdf1
    de78:	0000f37d 	.word	0x0000f37d
    de7c:	0000c96b 	.word	0x0000c96b
    de80:	0000c9e9 	.word	0x0000c9e9
    de84:	0000db8d 	.word	0x0000db8d
    de88:	0000db4d 	.word	0x0000db4d

0000de8c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    de8c:	b590      	push	{r4, r7, lr}
    de8e:	b093      	sub	sp, #76	; 0x4c
    de90:	af00      	add	r7, sp, #0
    de92:	60f8      	str	r0, [r7, #12]
    de94:	60b9      	str	r1, [r7, #8]
    de96:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    de98:	233b      	movs	r3, #59	; 0x3b
    de9a:	18fb      	adds	r3, r7, r3
    de9c:	2200      	movs	r2, #0
    de9e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    dea0:	68fb      	ldr	r3, [r7, #12]
    dea2:	68ba      	ldr	r2, [r7, #8]
    dea4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    dea6:	68fb      	ldr	r3, [r7, #12]
    dea8:	681b      	ldr	r3, [r3, #0]
    deaa:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    deac:	68fb      	ldr	r3, [r7, #12]
    deae:	681b      	ldr	r3, [r3, #0]
    deb0:	0018      	movs	r0, r3
    deb2:	4b86      	ldr	r3, [pc, #536]	; (e0cc <usart_init+0x240>)
    deb4:	4798      	blx	r3
    deb6:	0003      	movs	r3, r0
    deb8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    deba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    debc:	3302      	adds	r3, #2
    debe:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    dec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dec2:	3314      	adds	r3, #20
    dec4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    dec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dec8:	681b      	ldr	r3, [r3, #0]
    deca:	2201      	movs	r2, #1
    decc:	4013      	ands	r3, r2
    dece:	d001      	beq.n	ded4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    ded0:	2305      	movs	r3, #5
    ded2:	e0f6      	b.n	e0c2 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    ded4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ded6:	681b      	ldr	r3, [r3, #0]
    ded8:	2202      	movs	r2, #2
    deda:	4013      	ands	r3, r2
    dedc:	d001      	beq.n	dee2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    dede:	231c      	movs	r3, #28
    dee0:	e0ef      	b.n	e0c2 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    dee2:	2201      	movs	r2, #1
    dee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dee6:	409a      	lsls	r2, r3
    dee8:	0013      	movs	r3, r2
    deea:	0019      	movs	r1, r3
    deec:	2002      	movs	r0, #2
    deee:	4b78      	ldr	r3, [pc, #480]	; (e0d0 <usart_init+0x244>)
    def0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    def2:	2324      	movs	r3, #36	; 0x24
    def4:	18fb      	adds	r3, r7, r3
    def6:	0018      	movs	r0, r3
    def8:	4b76      	ldr	r3, [pc, #472]	; (e0d4 <usart_init+0x248>)
    defa:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    defc:	687b      	ldr	r3, [r7, #4]
    defe:	222d      	movs	r2, #45	; 0x2d
    df00:	5c9a      	ldrb	r2, [r3, r2]
    df02:	2324      	movs	r3, #36	; 0x24
    df04:	18fb      	adds	r3, r7, r3
    df06:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df0a:	b2db      	uxtb	r3, r3
    df0c:	2224      	movs	r2, #36	; 0x24
    df0e:	18ba      	adds	r2, r7, r2
    df10:	0011      	movs	r1, r2
    df12:	0018      	movs	r0, r3
    df14:	4b70      	ldr	r3, [pc, #448]	; (e0d8 <usart_init+0x24c>)
    df16:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df1a:	b2db      	uxtb	r3, r3
    df1c:	0018      	movs	r0, r3
    df1e:	4b6f      	ldr	r3, [pc, #444]	; (e0dc <usart_init+0x250>)
    df20:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    df22:	687b      	ldr	r3, [r7, #4]
    df24:	222d      	movs	r2, #45	; 0x2d
    df26:	5c9b      	ldrb	r3, [r3, r2]
    df28:	2100      	movs	r1, #0
    df2a:	0018      	movs	r0, r3
    df2c:	4b6c      	ldr	r3, [pc, #432]	; (e0e0 <usart_init+0x254>)
    df2e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	7ada      	ldrb	r2, [r3, #11]
    df34:	68fb      	ldr	r3, [r7, #12]
    df36:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    df38:	687b      	ldr	r3, [r7, #4]
    df3a:	2224      	movs	r2, #36	; 0x24
    df3c:	5c9a      	ldrb	r2, [r3, r2]
    df3e:	68fb      	ldr	r3, [r7, #12]
    df40:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	2225      	movs	r2, #37	; 0x25
    df46:	5c9a      	ldrb	r2, [r3, r2]
    df48:	68fb      	ldr	r3, [r7, #12]
    df4a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    df4c:	687b      	ldr	r3, [r7, #4]
    df4e:	7eda      	ldrb	r2, [r3, #27]
    df50:	68fb      	ldr	r3, [r7, #12]
    df52:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    df54:	687b      	ldr	r3, [r7, #4]
    df56:	7f1a      	ldrb	r2, [r3, #28]
    df58:	68fb      	ldr	r3, [r7, #12]
    df5a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    df5c:	233b      	movs	r3, #59	; 0x3b
    df5e:	18fc      	adds	r4, r7, r3
    df60:	687a      	ldr	r2, [r7, #4]
    df62:	68fb      	ldr	r3, [r7, #12]
    df64:	0011      	movs	r1, r2
    df66:	0018      	movs	r0, r3
    df68:	4b5e      	ldr	r3, [pc, #376]	; (e0e4 <usart_init+0x258>)
    df6a:	4798      	blx	r3
    df6c:	0003      	movs	r3, r0
    df6e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    df70:	233b      	movs	r3, #59	; 0x3b
    df72:	18fb      	adds	r3, r7, r3
    df74:	781b      	ldrb	r3, [r3, #0]
    df76:	2b00      	cmp	r3, #0
    df78:	d003      	beq.n	df82 <usart_init+0xf6>
		return status_code;
    df7a:	233b      	movs	r3, #59	; 0x3b
    df7c:	18fb      	adds	r3, r7, r3
    df7e:	781b      	ldrb	r3, [r3, #0]
    df80:	e09f      	b.n	e0c2 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    df82:	2320      	movs	r3, #32
    df84:	18fb      	adds	r3, r7, r3
    df86:	0018      	movs	r0, r3
    df88:	4b57      	ldr	r3, [pc, #348]	; (e0e8 <usart_init+0x25c>)
    df8a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    df8c:	2320      	movs	r3, #32
    df8e:	18fb      	adds	r3, r7, r3
    df90:	2200      	movs	r2, #0
    df92:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    df94:	2320      	movs	r3, #32
    df96:	18fb      	adds	r3, r7, r3
    df98:	2200      	movs	r2, #0
    df9a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    df9c:	687b      	ldr	r3, [r7, #4]
    df9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    dfa0:	2310      	movs	r3, #16
    dfa2:	18fb      	adds	r3, r7, r3
    dfa4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    dfa6:	687b      	ldr	r3, [r7, #4]
    dfa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    dfaa:	2310      	movs	r3, #16
    dfac:	18fb      	adds	r3, r7, r3
    dfae:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    dfb0:	687b      	ldr	r3, [r7, #4]
    dfb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    dfb4:	2310      	movs	r3, #16
    dfb6:	18fb      	adds	r3, r7, r3
    dfb8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    dfba:	687b      	ldr	r3, [r7, #4]
    dfbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    dfbe:	2310      	movs	r3, #16
    dfc0:	18fb      	adds	r3, r7, r3
    dfc2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    dfc4:	2347      	movs	r3, #71	; 0x47
    dfc6:	18fb      	adds	r3, r7, r3
    dfc8:	2200      	movs	r2, #0
    dfca:	701a      	strb	r2, [r3, #0]
    dfcc:	e02c      	b.n	e028 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    dfce:	2347      	movs	r3, #71	; 0x47
    dfd0:	18fb      	adds	r3, r7, r3
    dfd2:	781a      	ldrb	r2, [r3, #0]
    dfd4:	2310      	movs	r3, #16
    dfd6:	18fb      	adds	r3, r7, r3
    dfd8:	0092      	lsls	r2, r2, #2
    dfda:	58d3      	ldr	r3, [r2, r3]
    dfdc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    dfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfe0:	2b00      	cmp	r3, #0
    dfe2:	d109      	bne.n	dff8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    dfe4:	2347      	movs	r3, #71	; 0x47
    dfe6:	18fb      	adds	r3, r7, r3
    dfe8:	781a      	ldrb	r2, [r3, #0]
    dfea:	68bb      	ldr	r3, [r7, #8]
    dfec:	0011      	movs	r1, r2
    dfee:	0018      	movs	r0, r3
    dff0:	4b3e      	ldr	r3, [pc, #248]	; (e0ec <usart_init+0x260>)
    dff2:	4798      	blx	r3
    dff4:	0003      	movs	r3, r0
    dff6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    dff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dffa:	3301      	adds	r3, #1
    dffc:	d00d      	beq.n	e01a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    dffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e000:	b2da      	uxtb	r2, r3
    e002:	2320      	movs	r3, #32
    e004:	18fb      	adds	r3, r7, r3
    e006:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    e008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e00a:	0c1b      	lsrs	r3, r3, #16
    e00c:	b2db      	uxtb	r3, r3
    e00e:	2220      	movs	r2, #32
    e010:	18ba      	adds	r2, r7, r2
    e012:	0011      	movs	r1, r2
    e014:	0018      	movs	r0, r3
    e016:	4b36      	ldr	r3, [pc, #216]	; (e0f0 <usart_init+0x264>)
    e018:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    e01a:	2347      	movs	r3, #71	; 0x47
    e01c:	18fb      	adds	r3, r7, r3
    e01e:	781a      	ldrb	r2, [r3, #0]
    e020:	2347      	movs	r3, #71	; 0x47
    e022:	18fb      	adds	r3, r7, r3
    e024:	3201      	adds	r2, #1
    e026:	701a      	strb	r2, [r3, #0]
    e028:	2347      	movs	r3, #71	; 0x47
    e02a:	18fb      	adds	r3, r7, r3
    e02c:	781b      	ldrb	r3, [r3, #0]
    e02e:	2b03      	cmp	r3, #3
    e030:	d9cd      	bls.n	dfce <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    e032:	2300      	movs	r3, #0
    e034:	63fb      	str	r3, [r7, #60]	; 0x3c
    e036:	e00a      	b.n	e04e <usart_init+0x1c2>
		module->callback[i]            = NULL;
    e038:	68fa      	ldr	r2, [r7, #12]
    e03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e03c:	3302      	adds	r3, #2
    e03e:	009b      	lsls	r3, r3, #2
    e040:	18d3      	adds	r3, r2, r3
    e042:	3304      	adds	r3, #4
    e044:	2200      	movs	r2, #0
    e046:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    e048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e04a:	3301      	adds	r3, #1
    e04c:	63fb      	str	r3, [r7, #60]	; 0x3c
    e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e050:	2b05      	cmp	r3, #5
    e052:	d9f1      	bls.n	e038 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    e054:	68fb      	ldr	r3, [r7, #12]
    e056:	2200      	movs	r2, #0
    e058:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    e05a:	68fb      	ldr	r3, [r7, #12]
    e05c:	2200      	movs	r2, #0
    e05e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    e060:	68fb      	ldr	r3, [r7, #12]
    e062:	2200      	movs	r2, #0
    e064:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    e066:	68fb      	ldr	r3, [r7, #12]
    e068:	2200      	movs	r2, #0
    e06a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    e06c:	68fb      	ldr	r3, [r7, #12]
    e06e:	2230      	movs	r2, #48	; 0x30
    e070:	2100      	movs	r1, #0
    e072:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    e074:	68fb      	ldr	r3, [r7, #12]
    e076:	2231      	movs	r2, #49	; 0x31
    e078:	2100      	movs	r1, #0
    e07a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    e07c:	68fb      	ldr	r3, [r7, #12]
    e07e:	2232      	movs	r2, #50	; 0x32
    e080:	2100      	movs	r1, #0
    e082:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    e084:	68fb      	ldr	r3, [r7, #12]
    e086:	2233      	movs	r2, #51	; 0x33
    e088:	2100      	movs	r1, #0
    e08a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    e08c:	68fb      	ldr	r3, [r7, #12]
    e08e:	681b      	ldr	r3, [r3, #0]
    e090:	2227      	movs	r2, #39	; 0x27
    e092:	18bc      	adds	r4, r7, r2
    e094:	0018      	movs	r0, r3
    e096:	4b0d      	ldr	r3, [pc, #52]	; (e0cc <usart_init+0x240>)
    e098:	4798      	blx	r3
    e09a:	0003      	movs	r3, r0
    e09c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    e09e:	4a15      	ldr	r2, [pc, #84]	; (e0f4 <usart_init+0x268>)
    e0a0:	2327      	movs	r3, #39	; 0x27
    e0a2:	18fb      	adds	r3, r7, r3
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	0011      	movs	r1, r2
    e0a8:	0018      	movs	r0, r3
    e0aa:	4b13      	ldr	r3, [pc, #76]	; (e0f8 <usart_init+0x26c>)
    e0ac:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    e0ae:	2327      	movs	r3, #39	; 0x27
    e0b0:	18fb      	adds	r3, r7, r3
    e0b2:	781a      	ldrb	r2, [r3, #0]
    e0b4:	4b11      	ldr	r3, [pc, #68]	; (e0fc <usart_init+0x270>)
    e0b6:	0092      	lsls	r2, r2, #2
    e0b8:	68f9      	ldr	r1, [r7, #12]
    e0ba:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    e0bc:	233b      	movs	r3, #59	; 0x3b
    e0be:	18fb      	adds	r3, r7, r3
    e0c0:	781b      	ldrb	r3, [r3, #0]
}
    e0c2:	0018      	movs	r0, r3
    e0c4:	46bd      	mov	sp, r7
    e0c6:	b013      	add	sp, #76	; 0x4c
    e0c8:	bd90      	pop	{r4, r7, pc}
    e0ca:	46c0      	nop			; (mov r8, r8)
    e0cc:	0000cdf1 	.word	0x0000cdf1
    e0d0:	0000dac9 	.word	0x0000dac9
    e0d4:	0000dab1 	.word	0x0000dab1
    e0d8:	0000f259 	.word	0x0000f259
    e0dc:	0000f29d 	.word	0x0000f29d
    e0e0:	0000cba9 	.word	0x0000cba9
    e0e4:	0000dbb1 	.word	0x0000dbb1
    e0e8:	0000db25 	.word	0x0000db25
    e0ec:	0000cc35 	.word	0x0000cc35
    e0f0:	000003a1 	.word	0x000003a1
    e0f4:	0000e295 	.word	0x0000e295
    e0f8:	0000ce55 	.word	0x0000ce55
    e0fc:	20002b5c 	.word	0x20002b5c

0000e100 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    e100:	b580      	push	{r7, lr}
    e102:	b084      	sub	sp, #16
    e104:	af00      	add	r7, sp, #0
    e106:	6078      	str	r0, [r7, #4]
    e108:	000a      	movs	r2, r1
    e10a:	1cbb      	adds	r3, r7, #2
    e10c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e10e:	687b      	ldr	r3, [r7, #4]
    e110:	681b      	ldr	r3, [r3, #0]
    e112:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    e114:	687b      	ldr	r3, [r7, #4]
    e116:	79db      	ldrb	r3, [r3, #7]
    e118:	2201      	movs	r2, #1
    e11a:	4053      	eors	r3, r2
    e11c:	b2db      	uxtb	r3, r3
    e11e:	2b00      	cmp	r3, #0
    e120:	d001      	beq.n	e126 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    e122:	231c      	movs	r3, #28
    e124:	e017      	b.n	e156 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    e126:	687b      	ldr	r3, [r7, #4]
    e128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    e12a:	b29b      	uxth	r3, r3
    e12c:	2b00      	cmp	r3, #0
    e12e:	d001      	beq.n	e134 <usart_write_wait+0x34>
		return STATUS_BUSY;
    e130:	2305      	movs	r3, #5
    e132:	e010      	b.n	e156 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    e134:	687b      	ldr	r3, [r7, #4]
    e136:	0018      	movs	r0, r3
    e138:	4b09      	ldr	r3, [pc, #36]	; (e160 <usart_write_wait+0x60>)
    e13a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    e13c:	68fb      	ldr	r3, [r7, #12]
    e13e:	1cba      	adds	r2, r7, #2
    e140:	8812      	ldrh	r2, [r2, #0]
    e142:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    e144:	46c0      	nop			; (mov r8, r8)
    e146:	68fb      	ldr	r3, [r7, #12]
    e148:	7e1b      	ldrb	r3, [r3, #24]
    e14a:	b2db      	uxtb	r3, r3
    e14c:	001a      	movs	r2, r3
    e14e:	2302      	movs	r3, #2
    e150:	4013      	ands	r3, r2
    e152:	d0f8      	beq.n	e146 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    e154:	2300      	movs	r3, #0
}
    e156:	0018      	movs	r0, r3
    e158:	46bd      	mov	sp, r7
    e15a:	b004      	add	sp, #16
    e15c:	bd80      	pop	{r7, pc}
    e15e:	46c0      	nop			; (mov r8, r8)
    e160:	0000db8d 	.word	0x0000db8d

0000e164 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    e164:	b580      	push	{r7, lr}
    e166:	b084      	sub	sp, #16
    e168:	af00      	add	r7, sp, #0
    e16a:	6078      	str	r0, [r7, #4]
    e16c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	681b      	ldr	r3, [r3, #0]
    e172:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    e174:	687b      	ldr	r3, [r7, #4]
    e176:	799b      	ldrb	r3, [r3, #6]
    e178:	2201      	movs	r2, #1
    e17a:	4053      	eors	r3, r2
    e17c:	b2db      	uxtb	r3, r3
    e17e:	2b00      	cmp	r3, #0
    e180:	d001      	beq.n	e186 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    e182:	231c      	movs	r3, #28
    e184:	e05e      	b.n	e244 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    e186:	687b      	ldr	r3, [r7, #4]
    e188:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    e18a:	b29b      	uxth	r3, r3
    e18c:	2b00      	cmp	r3, #0
    e18e:	d001      	beq.n	e194 <usart_read_wait+0x30>
		return STATUS_BUSY;
    e190:	2305      	movs	r3, #5
    e192:	e057      	b.n	e244 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    e194:	68fb      	ldr	r3, [r7, #12]
    e196:	7e1b      	ldrb	r3, [r3, #24]
    e198:	b2db      	uxtb	r3, r3
    e19a:	001a      	movs	r2, r3
    e19c:	2304      	movs	r3, #4
    e19e:	4013      	ands	r3, r2
    e1a0:	d101      	bne.n	e1a6 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    e1a2:	2305      	movs	r3, #5
    e1a4:	e04e      	b.n	e244 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    e1a6:	687b      	ldr	r3, [r7, #4]
    e1a8:	0018      	movs	r0, r3
    e1aa:	4b28      	ldr	r3, [pc, #160]	; (e24c <usart_read_wait+0xe8>)
    e1ac:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e1ae:	68fb      	ldr	r3, [r7, #12]
    e1b0:	8b5b      	ldrh	r3, [r3, #26]
    e1b2:	b29b      	uxth	r3, r3
    e1b4:	b2da      	uxtb	r2, r3
    e1b6:	230b      	movs	r3, #11
    e1b8:	18fb      	adds	r3, r7, r3
    e1ba:	213f      	movs	r1, #63	; 0x3f
    e1bc:	400a      	ands	r2, r1
    e1be:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    e1c0:	230b      	movs	r3, #11
    e1c2:	18fb      	adds	r3, r7, r3
    e1c4:	781b      	ldrb	r3, [r3, #0]
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d036      	beq.n	e238 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    e1ca:	230b      	movs	r3, #11
    e1cc:	18fb      	adds	r3, r7, r3
    e1ce:	781b      	ldrb	r3, [r3, #0]
    e1d0:	2202      	movs	r2, #2
    e1d2:	4013      	ands	r3, r2
    e1d4:	d004      	beq.n	e1e0 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    e1d6:	68fb      	ldr	r3, [r7, #12]
    e1d8:	2202      	movs	r2, #2
    e1da:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    e1dc:	231a      	movs	r3, #26
    e1de:	e031      	b.n	e244 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    e1e0:	230b      	movs	r3, #11
    e1e2:	18fb      	adds	r3, r7, r3
    e1e4:	781b      	ldrb	r3, [r3, #0]
    e1e6:	2204      	movs	r2, #4
    e1e8:	4013      	ands	r3, r2
    e1ea:	d004      	beq.n	e1f6 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    e1ec:	68fb      	ldr	r3, [r7, #12]
    e1ee:	2204      	movs	r2, #4
    e1f0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    e1f2:	231e      	movs	r3, #30
    e1f4:	e026      	b.n	e244 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    e1f6:	230b      	movs	r3, #11
    e1f8:	18fb      	adds	r3, r7, r3
    e1fa:	781b      	ldrb	r3, [r3, #0]
    e1fc:	2201      	movs	r2, #1
    e1fe:	4013      	ands	r3, r2
    e200:	d004      	beq.n	e20c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    e202:	68fb      	ldr	r3, [r7, #12]
    e204:	2201      	movs	r2, #1
    e206:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    e208:	2313      	movs	r3, #19
    e20a:	e01b      	b.n	e244 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    e20c:	230b      	movs	r3, #11
    e20e:	18fb      	adds	r3, r7, r3
    e210:	781b      	ldrb	r3, [r3, #0]
    e212:	2210      	movs	r2, #16
    e214:	4013      	ands	r3, r2
    e216:	d004      	beq.n	e222 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    e218:	68fb      	ldr	r3, [r7, #12]
    e21a:	2210      	movs	r2, #16
    e21c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    e21e:	2342      	movs	r3, #66	; 0x42
    e220:	e010      	b.n	e244 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    e222:	230b      	movs	r3, #11
    e224:	18fb      	adds	r3, r7, r3
    e226:	781b      	ldrb	r3, [r3, #0]
    e228:	2220      	movs	r2, #32
    e22a:	4013      	ands	r3, r2
    e22c:	d004      	beq.n	e238 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    e22e:	68fb      	ldr	r3, [r7, #12]
    e230:	2220      	movs	r2, #32
    e232:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    e234:	2341      	movs	r3, #65	; 0x41
    e236:	e005      	b.n	e244 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    e238:	68fb      	ldr	r3, [r7, #12]
    e23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    e23c:	b29a      	uxth	r2, r3
    e23e:	683b      	ldr	r3, [r7, #0]
    e240:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    e242:	2300      	movs	r3, #0
}
    e244:	0018      	movs	r0, r3
    e246:	46bd      	mov	sp, r7
    e248:	b004      	add	sp, #16
    e24a:	bd80      	pop	{r7, pc}
    e24c:	0000db8d 	.word	0x0000db8d

0000e250 <usart_is_syncing>:
{
    e250:	b580      	push	{r7, lr}
    e252:	b084      	sub	sp, #16
    e254:	af00      	add	r7, sp, #0
    e256:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e258:	687b      	ldr	r3, [r7, #4]
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    e25e:	68fb      	ldr	r3, [r7, #12]
    e260:	69db      	ldr	r3, [r3, #28]
    e262:	1e5a      	subs	r2, r3, #1
    e264:	4193      	sbcs	r3, r2
    e266:	b2db      	uxtb	r3, r3
}
    e268:	0018      	movs	r0, r3
    e26a:	46bd      	mov	sp, r7
    e26c:	b004      	add	sp, #16
    e26e:	bd80      	pop	{r7, pc}

0000e270 <_usart_wait_for_sync>:
{
    e270:	b580      	push	{r7, lr}
    e272:	b082      	sub	sp, #8
    e274:	af00      	add	r7, sp, #0
    e276:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    e278:	46c0      	nop			; (mov r8, r8)
    e27a:	687b      	ldr	r3, [r7, #4]
    e27c:	0018      	movs	r0, r3
    e27e:	4b04      	ldr	r3, [pc, #16]	; (e290 <_usart_wait_for_sync+0x20>)
    e280:	4798      	blx	r3
    e282:	1e03      	subs	r3, r0, #0
    e284:	d1f9      	bne.n	e27a <_usart_wait_for_sync+0xa>
}
    e286:	46c0      	nop			; (mov r8, r8)
    e288:	46bd      	mov	sp, r7
    e28a:	b002      	add	sp, #8
    e28c:	bd80      	pop	{r7, pc}
    e28e:	46c0      	nop			; (mov r8, r8)
    e290:	0000e251 	.word	0x0000e251

0000e294 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    e294:	b580      	push	{r7, lr}
    e296:	b088      	sub	sp, #32
    e298:	af00      	add	r7, sp, #0
    e29a:	0002      	movs	r2, r0
    e29c:	1dfb      	adds	r3, r7, #7
    e29e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    e2a0:	1dfb      	adds	r3, r7, #7
    e2a2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    e2a4:	4ba3      	ldr	r3, [pc, #652]	; (e534 <_usart_interrupt_handler+0x2a0>)
    e2a6:	0092      	lsls	r2, r2, #2
    e2a8:	58d3      	ldr	r3, [r2, r3]
    e2aa:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    e2ac:	69bb      	ldr	r3, [r7, #24]
    e2ae:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    e2b0:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    e2b2:	69bb      	ldr	r3, [r7, #24]
    e2b4:	0018      	movs	r0, r3
    e2b6:	4ba0      	ldr	r3, [pc, #640]	; (e538 <_usart_interrupt_handler+0x2a4>)
    e2b8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    e2ba:	697b      	ldr	r3, [r7, #20]
    e2bc:	7e1b      	ldrb	r3, [r3, #24]
    e2be:	b2da      	uxtb	r2, r3
    e2c0:	2312      	movs	r3, #18
    e2c2:	18fb      	adds	r3, r7, r3
    e2c4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    e2c6:	697b      	ldr	r3, [r7, #20]
    e2c8:	7d9b      	ldrb	r3, [r3, #22]
    e2ca:	b2db      	uxtb	r3, r3
    e2cc:	b29a      	uxth	r2, r3
    e2ce:	2312      	movs	r3, #18
    e2d0:	18fb      	adds	r3, r7, r3
    e2d2:	2112      	movs	r1, #18
    e2d4:	1879      	adds	r1, r7, r1
    e2d6:	8809      	ldrh	r1, [r1, #0]
    e2d8:	400a      	ands	r2, r1
    e2da:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    e2dc:	69bb      	ldr	r3, [r7, #24]
    e2de:	2230      	movs	r2, #48	; 0x30
    e2e0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    e2e2:	69ba      	ldr	r2, [r7, #24]
    e2e4:	2131      	movs	r1, #49	; 0x31
    e2e6:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    e2e8:	4013      	ands	r3, r2
    e2ea:	b2da      	uxtb	r2, r3
    e2ec:	2310      	movs	r3, #16
    e2ee:	18fb      	adds	r3, r7, r3
    e2f0:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    e2f2:	2312      	movs	r3, #18
    e2f4:	18fb      	adds	r3, r7, r3
    e2f6:	881b      	ldrh	r3, [r3, #0]
    e2f8:	2201      	movs	r2, #1
    e2fa:	4013      	ands	r3, r2
    e2fc:	d044      	beq.n	e388 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    e2fe:	69bb      	ldr	r3, [r7, #24]
    e300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    e302:	b29b      	uxth	r3, r3
    e304:	2b00      	cmp	r3, #0
    e306:	d03c      	beq.n	e382 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    e308:	69bb      	ldr	r3, [r7, #24]
    e30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e30c:	781b      	ldrb	r3, [r3, #0]
    e30e:	b2da      	uxtb	r2, r3
    e310:	231c      	movs	r3, #28
    e312:	18fb      	adds	r3, r7, r3
    e314:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    e316:	69bb      	ldr	r3, [r7, #24]
    e318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e31a:	1c5a      	adds	r2, r3, #1
    e31c:	69bb      	ldr	r3, [r7, #24]
    e31e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e320:	69bb      	ldr	r3, [r7, #24]
    e322:	795b      	ldrb	r3, [r3, #5]
    e324:	2b01      	cmp	r3, #1
    e326:	d113      	bne.n	e350 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    e328:	69bb      	ldr	r3, [r7, #24]
    e32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e32c:	781b      	ldrb	r3, [r3, #0]
    e32e:	b2db      	uxtb	r3, r3
    e330:	021b      	lsls	r3, r3, #8
    e332:	b21a      	sxth	r2, r3
    e334:	231c      	movs	r3, #28
    e336:	18fb      	adds	r3, r7, r3
    e338:	2100      	movs	r1, #0
    e33a:	5e5b      	ldrsh	r3, [r3, r1]
    e33c:	4313      	orrs	r3, r2
    e33e:	b21a      	sxth	r2, r3
    e340:	231c      	movs	r3, #28
    e342:	18fb      	adds	r3, r7, r3
    e344:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    e346:	69bb      	ldr	r3, [r7, #24]
    e348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e34a:	1c5a      	adds	r2, r3, #1
    e34c:	69bb      	ldr	r3, [r7, #24]
    e34e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    e350:	231c      	movs	r3, #28
    e352:	18fb      	adds	r3, r7, r3
    e354:	881b      	ldrh	r3, [r3, #0]
    e356:	05db      	lsls	r3, r3, #23
    e358:	0ddb      	lsrs	r3, r3, #23
    e35a:	b29a      	uxth	r2, r3
    e35c:	697b      	ldr	r3, [r7, #20]
    e35e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    e360:	69bb      	ldr	r3, [r7, #24]
    e362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    e364:	b29b      	uxth	r3, r3
    e366:	3b01      	subs	r3, #1
    e368:	b29b      	uxth	r3, r3
    e36a:	69ba      	ldr	r2, [r7, #24]
    e36c:	1c19      	adds	r1, r3, #0
    e36e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    e370:	2b00      	cmp	r3, #0
    e372:	d109      	bne.n	e388 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e374:	697b      	ldr	r3, [r7, #20]
    e376:	2201      	movs	r2, #1
    e378:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    e37a:	697b      	ldr	r3, [r7, #20]
    e37c:	2202      	movs	r2, #2
    e37e:	759a      	strb	r2, [r3, #22]
    e380:	e002      	b.n	e388 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e382:	697b      	ldr	r3, [r7, #20]
    e384:	2201      	movs	r2, #1
    e386:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    e388:	2312      	movs	r3, #18
    e38a:	18fb      	adds	r3, r7, r3
    e38c:	881b      	ldrh	r3, [r3, #0]
    e38e:	2202      	movs	r2, #2
    e390:	4013      	ands	r3, r2
    e392:	d011      	beq.n	e3b8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    e394:	697b      	ldr	r3, [r7, #20]
    e396:	2202      	movs	r2, #2
    e398:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    e39a:	69bb      	ldr	r3, [r7, #24]
    e39c:	2233      	movs	r2, #51	; 0x33
    e39e:	2100      	movs	r1, #0
    e3a0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    e3a2:	2310      	movs	r3, #16
    e3a4:	18fb      	adds	r3, r7, r3
    e3a6:	881b      	ldrh	r3, [r3, #0]
    e3a8:	2201      	movs	r2, #1
    e3aa:	4013      	ands	r3, r2
    e3ac:	d004      	beq.n	e3b8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    e3ae:	69bb      	ldr	r3, [r7, #24]
    e3b0:	68db      	ldr	r3, [r3, #12]
    e3b2:	69ba      	ldr	r2, [r7, #24]
    e3b4:	0010      	movs	r0, r2
    e3b6:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    e3b8:	2312      	movs	r3, #18
    e3ba:	18fb      	adds	r3, r7, r3
    e3bc:	881b      	ldrh	r3, [r3, #0]
    e3be:	2204      	movs	r2, #4
    e3c0:	4013      	ands	r3, r2
    e3c2:	d100      	bne.n	e3c6 <_usart_interrupt_handler+0x132>
    e3c4:	e0bd      	b.n	e542 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    e3c6:	69bb      	ldr	r3, [r7, #24]
    e3c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    e3ca:	b29b      	uxth	r3, r3
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d100      	bne.n	e3d2 <_usart_interrupt_handler+0x13e>
    e3d0:	e0b4      	b.n	e53c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e3d2:	697b      	ldr	r3, [r7, #20]
    e3d4:	8b5b      	ldrh	r3, [r3, #26]
    e3d6:	b29b      	uxth	r3, r3
    e3d8:	b2da      	uxtb	r2, r3
    e3da:	231f      	movs	r3, #31
    e3dc:	18fb      	adds	r3, r7, r3
    e3de:	213f      	movs	r1, #63	; 0x3f
    e3e0:	400a      	ands	r2, r1
    e3e2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    e3e4:	231f      	movs	r3, #31
    e3e6:	18fb      	adds	r3, r7, r3
    e3e8:	781b      	ldrb	r3, [r3, #0]
    e3ea:	2208      	movs	r2, #8
    e3ec:	4013      	ands	r3, r2
    e3ee:	d007      	beq.n	e400 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    e3f0:	231f      	movs	r3, #31
    e3f2:	18fb      	adds	r3, r7, r3
    e3f4:	221f      	movs	r2, #31
    e3f6:	18ba      	adds	r2, r7, r2
    e3f8:	7812      	ldrb	r2, [r2, #0]
    e3fa:	2108      	movs	r1, #8
    e3fc:	438a      	bics	r2, r1
    e3fe:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    e400:	231f      	movs	r3, #31
    e402:	18fb      	adds	r3, r7, r3
    e404:	781b      	ldrb	r3, [r3, #0]
    e406:	2b00      	cmp	r3, #0
    e408:	d050      	beq.n	e4ac <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    e40a:	231f      	movs	r3, #31
    e40c:	18fb      	adds	r3, r7, r3
    e40e:	781b      	ldrb	r3, [r3, #0]
    e410:	2202      	movs	r2, #2
    e412:	4013      	ands	r3, r2
    e414:	d007      	beq.n	e426 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    e416:	69bb      	ldr	r3, [r7, #24]
    e418:	2232      	movs	r2, #50	; 0x32
    e41a:	211a      	movs	r1, #26
    e41c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    e41e:	697b      	ldr	r3, [r7, #20]
    e420:	2202      	movs	r2, #2
    e422:	835a      	strh	r2, [r3, #26]
    e424:	e036      	b.n	e494 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    e426:	231f      	movs	r3, #31
    e428:	18fb      	adds	r3, r7, r3
    e42a:	781b      	ldrb	r3, [r3, #0]
    e42c:	2204      	movs	r2, #4
    e42e:	4013      	ands	r3, r2
    e430:	d007      	beq.n	e442 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    e432:	69bb      	ldr	r3, [r7, #24]
    e434:	2232      	movs	r2, #50	; 0x32
    e436:	211e      	movs	r1, #30
    e438:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    e43a:	697b      	ldr	r3, [r7, #20]
    e43c:	2204      	movs	r2, #4
    e43e:	835a      	strh	r2, [r3, #26]
    e440:	e028      	b.n	e494 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    e442:	231f      	movs	r3, #31
    e444:	18fb      	adds	r3, r7, r3
    e446:	781b      	ldrb	r3, [r3, #0]
    e448:	2201      	movs	r2, #1
    e44a:	4013      	ands	r3, r2
    e44c:	d007      	beq.n	e45e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    e44e:	69bb      	ldr	r3, [r7, #24]
    e450:	2232      	movs	r2, #50	; 0x32
    e452:	2113      	movs	r1, #19
    e454:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    e456:	697b      	ldr	r3, [r7, #20]
    e458:	2201      	movs	r2, #1
    e45a:	835a      	strh	r2, [r3, #26]
    e45c:	e01a      	b.n	e494 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    e45e:	231f      	movs	r3, #31
    e460:	18fb      	adds	r3, r7, r3
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	2210      	movs	r2, #16
    e466:	4013      	ands	r3, r2
    e468:	d007      	beq.n	e47a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    e46a:	69bb      	ldr	r3, [r7, #24]
    e46c:	2232      	movs	r2, #50	; 0x32
    e46e:	2142      	movs	r1, #66	; 0x42
    e470:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    e472:	697b      	ldr	r3, [r7, #20]
    e474:	2210      	movs	r2, #16
    e476:	835a      	strh	r2, [r3, #26]
    e478:	e00c      	b.n	e494 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    e47a:	231f      	movs	r3, #31
    e47c:	18fb      	adds	r3, r7, r3
    e47e:	781b      	ldrb	r3, [r3, #0]
    e480:	2220      	movs	r2, #32
    e482:	4013      	ands	r3, r2
    e484:	d006      	beq.n	e494 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    e486:	69bb      	ldr	r3, [r7, #24]
    e488:	2232      	movs	r2, #50	; 0x32
    e48a:	2141      	movs	r1, #65	; 0x41
    e48c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    e48e:	697b      	ldr	r3, [r7, #20]
    e490:	2220      	movs	r2, #32
    e492:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    e494:	2310      	movs	r3, #16
    e496:	18fb      	adds	r3, r7, r3
    e498:	881b      	ldrh	r3, [r3, #0]
    e49a:	2204      	movs	r2, #4
    e49c:	4013      	ands	r3, r2
				if (callback_status
    e49e:	d050      	beq.n	e542 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    e4a0:	69bb      	ldr	r3, [r7, #24]
    e4a2:	695b      	ldr	r3, [r3, #20]
    e4a4:	69ba      	ldr	r2, [r7, #24]
    e4a6:	0010      	movs	r0, r2
    e4a8:	4798      	blx	r3
    e4aa:	e04a      	b.n	e542 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    e4ac:	697b      	ldr	r3, [r7, #20]
    e4ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    e4b0:	b29a      	uxth	r2, r3
    e4b2:	230e      	movs	r3, #14
    e4b4:	18fb      	adds	r3, r7, r3
    e4b6:	05d2      	lsls	r2, r2, #23
    e4b8:	0dd2      	lsrs	r2, r2, #23
    e4ba:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    e4bc:	69bb      	ldr	r3, [r7, #24]
    e4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4c0:	220e      	movs	r2, #14
    e4c2:	18ba      	adds	r2, r7, r2
    e4c4:	8812      	ldrh	r2, [r2, #0]
    e4c6:	b2d2      	uxtb	r2, r2
    e4c8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    e4ca:	69bb      	ldr	r3, [r7, #24]
    e4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4ce:	1c5a      	adds	r2, r3, #1
    e4d0:	69bb      	ldr	r3, [r7, #24]
    e4d2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e4d4:	69bb      	ldr	r3, [r7, #24]
    e4d6:	795b      	ldrb	r3, [r3, #5]
    e4d8:	2b01      	cmp	r3, #1
    e4da:	d10d      	bne.n	e4f8 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    e4dc:	69bb      	ldr	r3, [r7, #24]
    e4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4e0:	220e      	movs	r2, #14
    e4e2:	18ba      	adds	r2, r7, r2
    e4e4:	8812      	ldrh	r2, [r2, #0]
    e4e6:	0a12      	lsrs	r2, r2, #8
    e4e8:	b292      	uxth	r2, r2
    e4ea:	b2d2      	uxtb	r2, r2
    e4ec:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    e4ee:	69bb      	ldr	r3, [r7, #24]
    e4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4f2:	1c5a      	adds	r2, r3, #1
    e4f4:	69bb      	ldr	r3, [r7, #24]
    e4f6:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    e4f8:	69bb      	ldr	r3, [r7, #24]
    e4fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    e4fc:	b29b      	uxth	r3, r3
    e4fe:	3b01      	subs	r3, #1
    e500:	b29b      	uxth	r3, r3
    e502:	69ba      	ldr	r2, [r7, #24]
    e504:	1c19      	adds	r1, r3, #0
    e506:	8591      	strh	r1, [r2, #44]	; 0x2c
    e508:	2b00      	cmp	r3, #0
    e50a:	d11a      	bne.n	e542 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e50c:	697b      	ldr	r3, [r7, #20]
    e50e:	2204      	movs	r2, #4
    e510:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    e512:	69bb      	ldr	r3, [r7, #24]
    e514:	2232      	movs	r2, #50	; 0x32
    e516:	2100      	movs	r1, #0
    e518:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    e51a:	2310      	movs	r3, #16
    e51c:	18fb      	adds	r3, r7, r3
    e51e:	881b      	ldrh	r3, [r3, #0]
    e520:	2202      	movs	r2, #2
    e522:	4013      	ands	r3, r2
					if (callback_status
    e524:	d00d      	beq.n	e542 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    e526:	69bb      	ldr	r3, [r7, #24]
    e528:	691b      	ldr	r3, [r3, #16]
    e52a:	69ba      	ldr	r2, [r7, #24]
    e52c:	0010      	movs	r0, r2
    e52e:	4798      	blx	r3
    e530:	e007      	b.n	e542 <_usart_interrupt_handler+0x2ae>
    e532:	46c0      	nop			; (mov r8, r8)
    e534:	20002b5c 	.word	0x20002b5c
    e538:	0000e271 	.word	0x0000e271
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e53c:	697b      	ldr	r3, [r7, #20]
    e53e:	2204      	movs	r2, #4
    e540:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    e542:	2312      	movs	r3, #18
    e544:	18fb      	adds	r3, r7, r3
    e546:	881b      	ldrh	r3, [r3, #0]
    e548:	2210      	movs	r2, #16
    e54a:	4013      	ands	r3, r2
    e54c:	d010      	beq.n	e570 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    e54e:	697b      	ldr	r3, [r7, #20]
    e550:	2210      	movs	r2, #16
    e552:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    e554:	697b      	ldr	r3, [r7, #20]
    e556:	2210      	movs	r2, #16
    e558:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    e55a:	2310      	movs	r3, #16
    e55c:	18fb      	adds	r3, r7, r3
    e55e:	881b      	ldrh	r3, [r3, #0]
    e560:	2210      	movs	r2, #16
    e562:	4013      	ands	r3, r2
    e564:	d004      	beq.n	e570 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    e566:	69bb      	ldr	r3, [r7, #24]
    e568:	69db      	ldr	r3, [r3, #28]
    e56a:	69ba      	ldr	r2, [r7, #24]
    e56c:	0010      	movs	r0, r2
    e56e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    e570:	2312      	movs	r3, #18
    e572:	18fb      	adds	r3, r7, r3
    e574:	881b      	ldrh	r3, [r3, #0]
    e576:	2220      	movs	r2, #32
    e578:	4013      	ands	r3, r2
    e57a:	d010      	beq.n	e59e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    e57c:	697b      	ldr	r3, [r7, #20]
    e57e:	2220      	movs	r2, #32
    e580:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    e582:	697b      	ldr	r3, [r7, #20]
    e584:	2220      	movs	r2, #32
    e586:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    e588:	2310      	movs	r3, #16
    e58a:	18fb      	adds	r3, r7, r3
    e58c:	881b      	ldrh	r3, [r3, #0]
    e58e:	2208      	movs	r2, #8
    e590:	4013      	ands	r3, r2
    e592:	d004      	beq.n	e59e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    e594:	69bb      	ldr	r3, [r7, #24]
    e596:	699b      	ldr	r3, [r3, #24]
    e598:	69ba      	ldr	r2, [r7, #24]
    e59a:	0010      	movs	r0, r2
    e59c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    e59e:	2312      	movs	r3, #18
    e5a0:	18fb      	adds	r3, r7, r3
    e5a2:	881b      	ldrh	r3, [r3, #0]
    e5a4:	2208      	movs	r2, #8
    e5a6:	4013      	ands	r3, r2
    e5a8:	d010      	beq.n	e5cc <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    e5aa:	697b      	ldr	r3, [r7, #20]
    e5ac:	2208      	movs	r2, #8
    e5ae:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    e5b0:	697b      	ldr	r3, [r7, #20]
    e5b2:	2208      	movs	r2, #8
    e5b4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    e5b6:	2310      	movs	r3, #16
    e5b8:	18fb      	adds	r3, r7, r3
    e5ba:	881b      	ldrh	r3, [r3, #0]
    e5bc:	2220      	movs	r2, #32
    e5be:	4013      	ands	r3, r2
    e5c0:	d004      	beq.n	e5cc <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    e5c2:	69bb      	ldr	r3, [r7, #24]
    e5c4:	6a1b      	ldr	r3, [r3, #32]
    e5c6:	69ba      	ldr	r2, [r7, #24]
    e5c8:	0010      	movs	r0, r2
    e5ca:	4798      	blx	r3
		}
	}
#endif
}
    e5cc:	46c0      	nop			; (mov r8, r8)
    e5ce:	46bd      	mov	sp, r7
    e5d0:	b008      	add	sp, #32
    e5d2:	bd80      	pop	{r7, pc}

0000e5d4 <system_gclk_gen_get_config_defaults>:
{
    e5d4:	b580      	push	{r7, lr}
    e5d6:	b082      	sub	sp, #8
    e5d8:	af00      	add	r7, sp, #0
    e5da:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    e5dc:	687b      	ldr	r3, [r7, #4]
    e5de:	2201      	movs	r2, #1
    e5e0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    e5e2:	687b      	ldr	r3, [r7, #4]
    e5e4:	2200      	movs	r2, #0
    e5e6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	2206      	movs	r2, #6
    e5ec:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	2200      	movs	r2, #0
    e5f2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    e5f4:	687b      	ldr	r3, [r7, #4]
    e5f6:	2200      	movs	r2, #0
    e5f8:	725a      	strb	r2, [r3, #9]
}
    e5fa:	46c0      	nop			; (mov r8, r8)
    e5fc:	46bd      	mov	sp, r7
    e5fe:	b002      	add	sp, #8
    e600:	bd80      	pop	{r7, pc}

0000e602 <system_gclk_chan_get_config_defaults>:
{
    e602:	b580      	push	{r7, lr}
    e604:	b082      	sub	sp, #8
    e606:	af00      	add	r7, sp, #0
    e608:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    e60a:	687b      	ldr	r3, [r7, #4]
    e60c:	2200      	movs	r2, #0
    e60e:	701a      	strb	r2, [r3, #0]
}
    e610:	46c0      	nop			; (mov r8, r8)
    e612:	46bd      	mov	sp, r7
    e614:	b002      	add	sp, #8
    e616:	bd80      	pop	{r7, pc}

0000e618 <system_clock_source_xosc32k_get_config_defaults>:
{
    e618:	b580      	push	{r7, lr}
    e61a:	b082      	sub	sp, #8
    e61c:	af00      	add	r7, sp, #0
    e61e:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    e620:	687b      	ldr	r3, [r7, #4]
    e622:	2200      	movs	r2, #0
    e624:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    e626:	687b      	ldr	r3, [r7, #4]
    e628:	2204      	movs	r2, #4
    e62a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    e62c:	687b      	ldr	r3, [r7, #4]
    e62e:	2200      	movs	r2, #0
    e630:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    e632:	687b      	ldr	r3, [r7, #4]
    e634:	2280      	movs	r2, #128	; 0x80
    e636:	0212      	lsls	r2, r2, #8
    e638:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    e63a:	687b      	ldr	r3, [r7, #4]
    e63c:	2200      	movs	r2, #0
    e63e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    e640:	687b      	ldr	r3, [r7, #4]
    e642:	2201      	movs	r2, #1
    e644:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    e646:	687b      	ldr	r3, [r7, #4]
    e648:	2200      	movs	r2, #0
    e64a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	2201      	movs	r2, #1
    e650:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    e652:	687b      	ldr	r3, [r7, #4]
    e654:	2200      	movs	r2, #0
    e656:	739a      	strb	r2, [r3, #14]
}
    e658:	46c0      	nop			; (mov r8, r8)
    e65a:	46bd      	mov	sp, r7
    e65c:	b002      	add	sp, #8
    e65e:	bd80      	pop	{r7, pc}

0000e660 <system_clock_source_osc8m_get_config_defaults>:
{
    e660:	b580      	push	{r7, lr}
    e662:	b082      	sub	sp, #8
    e664:	af00      	add	r7, sp, #0
    e666:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    e668:	687b      	ldr	r3, [r7, #4]
    e66a:	2203      	movs	r2, #3
    e66c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    e66e:	687b      	ldr	r3, [r7, #4]
    e670:	2200      	movs	r2, #0
    e672:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	2201      	movs	r2, #1
    e678:	709a      	strb	r2, [r3, #2]
}
    e67a:	46c0      	nop			; (mov r8, r8)
    e67c:	46bd      	mov	sp, r7
    e67e:	b002      	add	sp, #8
    e680:	bd80      	pop	{r7, pc}

0000e682 <system_clock_source_dfll_get_config_defaults>:
{
    e682:	b580      	push	{r7, lr}
    e684:	b082      	sub	sp, #8
    e686:	af00      	add	r7, sp, #0
    e688:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    e68a:	687b      	ldr	r3, [r7, #4]
    e68c:	2200      	movs	r2, #0
    e68e:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	2200      	movs	r2, #0
    e694:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    e696:	687b      	ldr	r3, [r7, #4]
    e698:	2200      	movs	r2, #0
    e69a:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    e69c:	687b      	ldr	r3, [r7, #4]
    e69e:	2200      	movs	r2, #0
    e6a0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    e6a2:	687b      	ldr	r3, [r7, #4]
    e6a4:	2200      	movs	r2, #0
    e6a6:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    e6a8:	687b      	ldr	r3, [r7, #4]
    e6aa:	2201      	movs	r2, #1
    e6ac:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    e6ae:	687b      	ldr	r3, [r7, #4]
    e6b0:	2207      	movs	r2, #7
    e6b2:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    e6b4:	687b      	ldr	r3, [r7, #4]
    e6b6:	223f      	movs	r2, #63	; 0x3f
    e6b8:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    e6ba:	687b      	ldr	r3, [r7, #4]
    e6bc:	2201      	movs	r2, #1
    e6be:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	2201      	movs	r2, #1
    e6c4:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    e6c6:	687b      	ldr	r3, [r7, #4]
    e6c8:	2206      	movs	r2, #6
    e6ca:	821a      	strh	r2, [r3, #16]
}
    e6cc:	46c0      	nop			; (mov r8, r8)
    e6ce:	46bd      	mov	sp, r7
    e6d0:	b002      	add	sp, #8
    e6d2:	bd80      	pop	{r7, pc}

0000e6d4 <system_cpu_clock_set_divider>:
{
    e6d4:	b580      	push	{r7, lr}
    e6d6:	b082      	sub	sp, #8
    e6d8:	af00      	add	r7, sp, #0
    e6da:	0002      	movs	r2, r0
    e6dc:	1dfb      	adds	r3, r7, #7
    e6de:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    e6e0:	4a03      	ldr	r2, [pc, #12]	; (e6f0 <system_cpu_clock_set_divider+0x1c>)
    e6e2:	1dfb      	adds	r3, r7, #7
    e6e4:	781b      	ldrb	r3, [r3, #0]
    e6e6:	7213      	strb	r3, [r2, #8]
}
    e6e8:	46c0      	nop			; (mov r8, r8)
    e6ea:	46bd      	mov	sp, r7
    e6ec:	b002      	add	sp, #8
    e6ee:	bd80      	pop	{r7, pc}
    e6f0:	40000400 	.word	0x40000400

0000e6f4 <system_apb_clock_set_divider>:
{
    e6f4:	b580      	push	{r7, lr}
    e6f6:	b082      	sub	sp, #8
    e6f8:	af00      	add	r7, sp, #0
    e6fa:	0002      	movs	r2, r0
    e6fc:	1dfb      	adds	r3, r7, #7
    e6fe:	701a      	strb	r2, [r3, #0]
    e700:	1dbb      	adds	r3, r7, #6
    e702:	1c0a      	adds	r2, r1, #0
    e704:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    e706:	1dfb      	adds	r3, r7, #7
    e708:	781b      	ldrb	r3, [r3, #0]
    e70a:	2b01      	cmp	r3, #1
    e70c:	d008      	beq.n	e720 <system_apb_clock_set_divider+0x2c>
    e70e:	2b02      	cmp	r3, #2
    e710:	d00b      	beq.n	e72a <system_apb_clock_set_divider+0x36>
    e712:	2b00      	cmp	r3, #0
    e714:	d10e      	bne.n	e734 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    e716:	4a0b      	ldr	r2, [pc, #44]	; (e744 <system_apb_clock_set_divider+0x50>)
    e718:	1dbb      	adds	r3, r7, #6
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	7253      	strb	r3, [r2, #9]
			break;
    e71e:	e00b      	b.n	e738 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    e720:	4a08      	ldr	r2, [pc, #32]	; (e744 <system_apb_clock_set_divider+0x50>)
    e722:	1dbb      	adds	r3, r7, #6
    e724:	781b      	ldrb	r3, [r3, #0]
    e726:	7293      	strb	r3, [r2, #10]
			break;
    e728:	e006      	b.n	e738 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    e72a:	4a06      	ldr	r2, [pc, #24]	; (e744 <system_apb_clock_set_divider+0x50>)
    e72c:	1dbb      	adds	r3, r7, #6
    e72e:	781b      	ldrb	r3, [r3, #0]
    e730:	72d3      	strb	r3, [r2, #11]
			break;
    e732:	e001      	b.n	e738 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    e734:	2317      	movs	r3, #23
    e736:	e000      	b.n	e73a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    e738:	2300      	movs	r3, #0
}
    e73a:	0018      	movs	r0, r3
    e73c:	46bd      	mov	sp, r7
    e73e:	b002      	add	sp, #8
    e740:	bd80      	pop	{r7, pc}
    e742:	46c0      	nop			; (mov r8, r8)
    e744:	40000400 	.word	0x40000400

0000e748 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    e748:	b580      	push	{r7, lr}
    e74a:	b082      	sub	sp, #8
    e74c:	af00      	add	r7, sp, #0
    e74e:	0002      	movs	r2, r0
    e750:	1dfb      	adds	r3, r7, #7
    e752:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    e754:	4a08      	ldr	r2, [pc, #32]	; (e778 <system_flash_set_waitstates+0x30>)
    e756:	1dfb      	adds	r3, r7, #7
    e758:	781b      	ldrb	r3, [r3, #0]
    e75a:	210f      	movs	r1, #15
    e75c:	400b      	ands	r3, r1
    e75e:	b2d9      	uxtb	r1, r3
    e760:	6853      	ldr	r3, [r2, #4]
    e762:	200f      	movs	r0, #15
    e764:	4001      	ands	r1, r0
    e766:	0049      	lsls	r1, r1, #1
    e768:	201e      	movs	r0, #30
    e76a:	4383      	bics	r3, r0
    e76c:	430b      	orrs	r3, r1
    e76e:	6053      	str	r3, [r2, #4]
}
    e770:	46c0      	nop			; (mov r8, r8)
    e772:	46bd      	mov	sp, r7
    e774:	b002      	add	sp, #8
    e776:	bd80      	pop	{r7, pc}
    e778:	41004000 	.word	0x41004000

0000e77c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    e77c:	b580      	push	{r7, lr}
    e77e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e780:	46c0      	nop			; (mov r8, r8)
    e782:	4b04      	ldr	r3, [pc, #16]	; (e794 <_system_dfll_wait_for_sync+0x18>)
    e784:	68db      	ldr	r3, [r3, #12]
    e786:	2210      	movs	r2, #16
    e788:	4013      	ands	r3, r2
    e78a:	d0fa      	beq.n	e782 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    e78c:	46c0      	nop			; (mov r8, r8)
    e78e:	46bd      	mov	sp, r7
    e790:	bd80      	pop	{r7, pc}
    e792:	46c0      	nop			; (mov r8, r8)
    e794:	40000800 	.word	0x40000800

0000e798 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    e798:	b580      	push	{r7, lr}
    e79a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    e79c:	4b0c      	ldr	r3, [pc, #48]	; (e7d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e79e:	2202      	movs	r2, #2
    e7a0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    e7a2:	4b0c      	ldr	r3, [pc, #48]	; (e7d4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    e7a4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    e7a6:	4a0a      	ldr	r2, [pc, #40]	; (e7d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e7a8:	4b0b      	ldr	r3, [pc, #44]	; (e7d8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    e7aa:	689b      	ldr	r3, [r3, #8]
    e7ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    e7ae:	4a08      	ldr	r2, [pc, #32]	; (e7d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e7b0:	4b09      	ldr	r3, [pc, #36]	; (e7d8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    e7b2:	685b      	ldr	r3, [r3, #4]
    e7b4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    e7b6:	4b06      	ldr	r3, [pc, #24]	; (e7d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e7b8:	2200      	movs	r2, #0
    e7ba:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    e7bc:	4b05      	ldr	r3, [pc, #20]	; (e7d4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    e7be:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    e7c0:	4a03      	ldr	r2, [pc, #12]	; (e7d0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e7c2:	4b05      	ldr	r3, [pc, #20]	; (e7d8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    e7c4:	681b      	ldr	r3, [r3, #0]
    e7c6:	b29b      	uxth	r3, r3
    e7c8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    e7ca:	46c0      	nop			; (mov r8, r8)
    e7cc:	46bd      	mov	sp, r7
    e7ce:	bd80      	pop	{r7, pc}
    e7d0:	40000800 	.word	0x40000800
    e7d4:	0000e77d 	.word	0x0000e77d
    e7d8:	20000578 	.word	0x20000578

0000e7dc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    e7dc:	b580      	push	{r7, lr}
    e7de:	b082      	sub	sp, #8
    e7e0:	af00      	add	r7, sp, #0
    e7e2:	0002      	movs	r2, r0
    e7e4:	1dfb      	adds	r3, r7, #7
    e7e6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    e7e8:	1dfb      	adds	r3, r7, #7
    e7ea:	781b      	ldrb	r3, [r3, #0]
    e7ec:	2b08      	cmp	r3, #8
    e7ee:	d840      	bhi.n	e872 <system_clock_source_get_hz+0x96>
    e7f0:	009a      	lsls	r2, r3, #2
    e7f2:	4b22      	ldr	r3, [pc, #136]	; (e87c <system_clock_source_get_hz+0xa0>)
    e7f4:	18d3      	adds	r3, r2, r3
    e7f6:	681b      	ldr	r3, [r3, #0]
    e7f8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    e7fa:	4b21      	ldr	r3, [pc, #132]	; (e880 <system_clock_source_get_hz+0xa4>)
    e7fc:	691b      	ldr	r3, [r3, #16]
    e7fe:	e039      	b.n	e874 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    e800:	4b20      	ldr	r3, [pc, #128]	; (e884 <system_clock_source_get_hz+0xa8>)
    e802:	6a1b      	ldr	r3, [r3, #32]
    e804:	059b      	lsls	r3, r3, #22
    e806:	0f9b      	lsrs	r3, r3, #30
    e808:	b2db      	uxtb	r3, r3
    e80a:	001a      	movs	r2, r3
    e80c:	4b1e      	ldr	r3, [pc, #120]	; (e888 <system_clock_source_get_hz+0xac>)
    e80e:	40d3      	lsrs	r3, r2
    e810:	e030      	b.n	e874 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    e812:	2380      	movs	r3, #128	; 0x80
    e814:	021b      	lsls	r3, r3, #8
    e816:	e02d      	b.n	e874 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    e818:	2380      	movs	r3, #128	; 0x80
    e81a:	021b      	lsls	r3, r3, #8
    e81c:	e02a      	b.n	e874 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    e81e:	4b18      	ldr	r3, [pc, #96]	; (e880 <system_clock_source_get_hz+0xa4>)
    e820:	695b      	ldr	r3, [r3, #20]
    e822:	e027      	b.n	e874 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    e824:	4b16      	ldr	r3, [pc, #88]	; (e880 <system_clock_source_get_hz+0xa4>)
    e826:	681b      	ldr	r3, [r3, #0]
    e828:	2202      	movs	r2, #2
    e82a:	4013      	ands	r3, r2
    e82c:	d101      	bne.n	e832 <system_clock_source_get_hz+0x56>
			return 0;
    e82e:	2300      	movs	r3, #0
    e830:	e020      	b.n	e874 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    e832:	4b16      	ldr	r3, [pc, #88]	; (e88c <system_clock_source_get_hz+0xb0>)
    e834:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    e836:	4b12      	ldr	r3, [pc, #72]	; (e880 <system_clock_source_get_hz+0xa4>)
    e838:	681b      	ldr	r3, [r3, #0]
    e83a:	2204      	movs	r2, #4
    e83c:	4013      	ands	r3, r2
    e83e:	d009      	beq.n	e854 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e840:	2000      	movs	r0, #0
    e842:	4b13      	ldr	r3, [pc, #76]	; (e890 <system_clock_source_get_hz+0xb4>)
    e844:	4798      	blx	r3
    e846:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    e848:	4b0d      	ldr	r3, [pc, #52]	; (e880 <system_clock_source_get_hz+0xa4>)
    e84a:	689b      	ldr	r3, [r3, #8]
    e84c:	041b      	lsls	r3, r3, #16
    e84e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e850:	4353      	muls	r3, r2
    e852:	e00f      	b.n	e874 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    e854:	4b0f      	ldr	r3, [pc, #60]	; (e894 <system_clock_source_get_hz+0xb8>)
    e856:	e00d      	b.n	e874 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    e858:	4a0a      	ldr	r2, [pc, #40]	; (e884 <system_clock_source_get_hz+0xa8>)
    e85a:	2350      	movs	r3, #80	; 0x50
    e85c:	5cd3      	ldrb	r3, [r2, r3]
    e85e:	b2db      	uxtb	r3, r3
    e860:	001a      	movs	r2, r3
    e862:	2304      	movs	r3, #4
    e864:	4013      	ands	r3, r2
    e866:	d101      	bne.n	e86c <system_clock_source_get_hz+0x90>
			return 0;
    e868:	2300      	movs	r3, #0
    e86a:	e003      	b.n	e874 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    e86c:	4b04      	ldr	r3, [pc, #16]	; (e880 <system_clock_source_get_hz+0xa4>)
    e86e:	68db      	ldr	r3, [r3, #12]
    e870:	e000      	b.n	e874 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    e872:	2300      	movs	r3, #0
	}
}
    e874:	0018      	movs	r0, r3
    e876:	46bd      	mov	sp, r7
    e878:	b002      	add	sp, #8
    e87a:	bd80      	pop	{r7, pc}
    e87c:	00020ac8 	.word	0x00020ac8
    e880:	20000578 	.word	0x20000578
    e884:	40000800 	.word	0x40000800
    e888:	007a1200 	.word	0x007a1200
    e88c:	0000e77d 	.word	0x0000e77d
    e890:	0000f37d 	.word	0x0000f37d
    e894:	02dc6c00 	.word	0x02dc6c00

0000e898 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    e898:	b580      	push	{r7, lr}
    e89a:	b084      	sub	sp, #16
    e89c:	af00      	add	r7, sp, #0
    e89e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    e8a0:	4b1a      	ldr	r3, [pc, #104]	; (e90c <system_clock_source_osc8m_set_config+0x74>)
    e8a2:	6a1b      	ldr	r3, [r3, #32]
    e8a4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    e8a6:	687b      	ldr	r3, [r7, #4]
    e8a8:	781b      	ldrb	r3, [r3, #0]
    e8aa:	1c1a      	adds	r2, r3, #0
    e8ac:	2303      	movs	r3, #3
    e8ae:	4013      	ands	r3, r2
    e8b0:	b2da      	uxtb	r2, r3
    e8b2:	230d      	movs	r3, #13
    e8b4:	18fb      	adds	r3, r7, r3
    e8b6:	2103      	movs	r1, #3
    e8b8:	400a      	ands	r2, r1
    e8ba:	0010      	movs	r0, r2
    e8bc:	781a      	ldrb	r2, [r3, #0]
    e8be:	2103      	movs	r1, #3
    e8c0:	438a      	bics	r2, r1
    e8c2:	1c11      	adds	r1, r2, #0
    e8c4:	1c02      	adds	r2, r0, #0
    e8c6:	430a      	orrs	r2, r1
    e8c8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    e8ca:	687b      	ldr	r3, [r7, #4]
    e8cc:	789a      	ldrb	r2, [r3, #2]
    e8ce:	230c      	movs	r3, #12
    e8d0:	18fb      	adds	r3, r7, r3
    e8d2:	01d0      	lsls	r0, r2, #7
    e8d4:	781a      	ldrb	r2, [r3, #0]
    e8d6:	217f      	movs	r1, #127	; 0x7f
    e8d8:	400a      	ands	r2, r1
    e8da:	1c11      	adds	r1, r2, #0
    e8dc:	1c02      	adds	r2, r0, #0
    e8de:	430a      	orrs	r2, r1
    e8e0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    e8e2:	687b      	ldr	r3, [r7, #4]
    e8e4:	785a      	ldrb	r2, [r3, #1]
    e8e6:	230c      	movs	r3, #12
    e8e8:	18fb      	adds	r3, r7, r3
    e8ea:	2101      	movs	r1, #1
    e8ec:	400a      	ands	r2, r1
    e8ee:	0190      	lsls	r0, r2, #6
    e8f0:	781a      	ldrb	r2, [r3, #0]
    e8f2:	2140      	movs	r1, #64	; 0x40
    e8f4:	438a      	bics	r2, r1
    e8f6:	1c11      	adds	r1, r2, #0
    e8f8:	1c02      	adds	r2, r0, #0
    e8fa:	430a      	orrs	r2, r1
    e8fc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    e8fe:	4b03      	ldr	r3, [pc, #12]	; (e90c <system_clock_source_osc8m_set_config+0x74>)
    e900:	68fa      	ldr	r2, [r7, #12]
    e902:	621a      	str	r2, [r3, #32]
}
    e904:	46c0      	nop			; (mov r8, r8)
    e906:	46bd      	mov	sp, r7
    e908:	b004      	add	sp, #16
    e90a:	bd80      	pop	{r7, pc}
    e90c:	40000800 	.word	0x40000800

0000e910 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    e910:	b580      	push	{r7, lr}
    e912:	b084      	sub	sp, #16
    e914:	af00      	add	r7, sp, #0
    e916:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    e918:	4a43      	ldr	r2, [pc, #268]	; (ea28 <system_clock_source_xosc32k_set_config+0x118>)
    e91a:	230c      	movs	r3, #12
    e91c:	18fb      	adds	r3, r7, r3
    e91e:	8a92      	ldrh	r2, [r2, #20]
    e920:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    e922:	687b      	ldr	r3, [r7, #4]
    e924:	785b      	ldrb	r3, [r3, #1]
    e926:	1c1a      	adds	r2, r3, #0
    e928:	2307      	movs	r3, #7
    e92a:	4013      	ands	r3, r2
    e92c:	b2da      	uxtb	r2, r3
    e92e:	230c      	movs	r3, #12
    e930:	18fb      	adds	r3, r7, r3
    e932:	2107      	movs	r1, #7
    e934:	400a      	ands	r2, r1
    e936:	0010      	movs	r0, r2
    e938:	785a      	ldrb	r2, [r3, #1]
    e93a:	2107      	movs	r1, #7
    e93c:	438a      	bics	r2, r1
    e93e:	1c11      	adds	r1, r2, #0
    e940:	1c02      	adds	r2, r0, #0
    e942:	430a      	orrs	r2, r1
    e944:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    e946:	687b      	ldr	r3, [r7, #4]
    e948:	781b      	ldrb	r3, [r3, #0]
    e94a:	2b00      	cmp	r3, #0
    e94c:	d106      	bne.n	e95c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    e94e:	230c      	movs	r3, #12
    e950:	18fb      	adds	r3, r7, r3
    e952:	781a      	ldrb	r2, [r3, #0]
    e954:	2104      	movs	r1, #4
    e956:	430a      	orrs	r2, r1
    e958:	701a      	strb	r2, [r3, #0]
    e95a:	e005      	b.n	e968 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    e95c:	230c      	movs	r3, #12
    e95e:	18fb      	adds	r3, r7, r3
    e960:	781a      	ldrb	r2, [r3, #0]
    e962:	2104      	movs	r1, #4
    e964:	438a      	bics	r2, r1
    e966:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    e968:	687b      	ldr	r3, [r7, #4]
    e96a:	789a      	ldrb	r2, [r3, #2]
    e96c:	230c      	movs	r3, #12
    e96e:	18fb      	adds	r3, r7, r3
    e970:	2101      	movs	r1, #1
    e972:	400a      	ands	r2, r1
    e974:	0150      	lsls	r0, r2, #5
    e976:	781a      	ldrb	r2, [r3, #0]
    e978:	2120      	movs	r1, #32
    e97a:	438a      	bics	r2, r1
    e97c:	1c11      	adds	r1, r2, #0
    e97e:	1c02      	adds	r2, r0, #0
    e980:	430a      	orrs	r2, r1
    e982:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    e984:	687b      	ldr	r3, [r7, #4]
    e986:	78da      	ldrb	r2, [r3, #3]
    e988:	230c      	movs	r3, #12
    e98a:	18fb      	adds	r3, r7, r3
    e98c:	2101      	movs	r1, #1
    e98e:	400a      	ands	r2, r1
    e990:	0110      	lsls	r0, r2, #4
    e992:	781a      	ldrb	r2, [r3, #0]
    e994:	2110      	movs	r1, #16
    e996:	438a      	bics	r2, r1
    e998:	1c11      	adds	r1, r2, #0
    e99a:	1c02      	adds	r2, r0, #0
    e99c:	430a      	orrs	r2, r1
    e99e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    e9a0:	687b      	ldr	r3, [r7, #4]
    e9a2:	791a      	ldrb	r2, [r3, #4]
    e9a4:	230c      	movs	r3, #12
    e9a6:	18fb      	adds	r3, r7, r3
    e9a8:	2101      	movs	r1, #1
    e9aa:	400a      	ands	r2, r1
    e9ac:	00d0      	lsls	r0, r2, #3
    e9ae:	781a      	ldrb	r2, [r3, #0]
    e9b0:	2108      	movs	r1, #8
    e9b2:	438a      	bics	r2, r1
    e9b4:	1c11      	adds	r1, r2, #0
    e9b6:	1c02      	adds	r2, r0, #0
    e9b8:	430a      	orrs	r2, r1
    e9ba:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    e9bc:	687b      	ldr	r3, [r7, #4]
    e9be:	7b5a      	ldrb	r2, [r3, #13]
    e9c0:	230c      	movs	r3, #12
    e9c2:	18fb      	adds	r3, r7, r3
    e9c4:	01d0      	lsls	r0, r2, #7
    e9c6:	781a      	ldrb	r2, [r3, #0]
    e9c8:	217f      	movs	r1, #127	; 0x7f
    e9ca:	400a      	ands	r2, r1
    e9cc:	1c11      	adds	r1, r2, #0
    e9ce:	1c02      	adds	r2, r0, #0
    e9d0:	430a      	orrs	r2, r1
    e9d2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    e9d4:	687b      	ldr	r3, [r7, #4]
    e9d6:	7b1a      	ldrb	r2, [r3, #12]
    e9d8:	230c      	movs	r3, #12
    e9da:	18fb      	adds	r3, r7, r3
    e9dc:	2101      	movs	r1, #1
    e9de:	400a      	ands	r2, r1
    e9e0:	0190      	lsls	r0, r2, #6
    e9e2:	781a      	ldrb	r2, [r3, #0]
    e9e4:	2140      	movs	r1, #64	; 0x40
    e9e6:	438a      	bics	r2, r1
    e9e8:	1c11      	adds	r1, r2, #0
    e9ea:	1c02      	adds	r2, r0, #0
    e9ec:	430a      	orrs	r2, r1
    e9ee:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    e9f0:	687b      	ldr	r3, [r7, #4]
    e9f2:	7b9a      	ldrb	r2, [r3, #14]
    e9f4:	230c      	movs	r3, #12
    e9f6:	18fb      	adds	r3, r7, r3
    e9f8:	2101      	movs	r1, #1
    e9fa:	400a      	ands	r2, r1
    e9fc:	0110      	lsls	r0, r2, #4
    e9fe:	785a      	ldrb	r2, [r3, #1]
    ea00:	2110      	movs	r1, #16
    ea02:	438a      	bics	r2, r1
    ea04:	1c11      	adds	r1, r2, #0
    ea06:	1c02      	adds	r2, r0, #0
    ea08:	430a      	orrs	r2, r1
    ea0a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    ea0c:	687b      	ldr	r3, [r7, #4]
    ea0e:	689a      	ldr	r2, [r3, #8]
    ea10:	4b06      	ldr	r3, [pc, #24]	; (ea2c <system_clock_source_xosc32k_set_config+0x11c>)
    ea12:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    ea14:	4a04      	ldr	r2, [pc, #16]	; (ea28 <system_clock_source_xosc32k_set_config+0x118>)
    ea16:	230c      	movs	r3, #12
    ea18:	18fb      	adds	r3, r7, r3
    ea1a:	881b      	ldrh	r3, [r3, #0]
    ea1c:	8293      	strh	r3, [r2, #20]
}
    ea1e:	46c0      	nop			; (mov r8, r8)
    ea20:	46bd      	mov	sp, r7
    ea22:	b004      	add	sp, #16
    ea24:	bd80      	pop	{r7, pc}
    ea26:	46c0      	nop			; (mov r8, r8)
    ea28:	40000800 	.word	0x40000800
    ea2c:	20000578 	.word	0x20000578

0000ea30 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    ea30:	b580      	push	{r7, lr}
    ea32:	b082      	sub	sp, #8
    ea34:	af00      	add	r7, sp, #0
    ea36:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    ea38:	687b      	ldr	r3, [r7, #4]
    ea3a:	7a1b      	ldrb	r3, [r3, #8]
    ea3c:	029b      	lsls	r3, r3, #10
    ea3e:	041b      	lsls	r3, r3, #16
    ea40:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    ea42:	687b      	ldr	r3, [r7, #4]
    ea44:	895b      	ldrh	r3, [r3, #10]
    ea46:	059b      	lsls	r3, r3, #22
    ea48:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    ea4a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    ea4c:	4b2a      	ldr	r3, [pc, #168]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    ea4e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    ea50:	687b      	ldr	r3, [r7, #4]
    ea52:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    ea54:	687b      	ldr	r3, [r7, #4]
    ea56:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    ea58:	4313      	orrs	r3, r2
    ea5a:	b2db      	uxtb	r3, r3
    ea5c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    ea5e:	687b      	ldr	r3, [r7, #4]
    ea60:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    ea62:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    ea64:	687a      	ldr	r2, [r7, #4]
    ea66:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    ea68:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    ea6a:	687b      	ldr	r3, [r7, #4]
    ea6c:	785b      	ldrb	r3, [r3, #1]
    ea6e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    ea70:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    ea72:	4b21      	ldr	r3, [pc, #132]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    ea74:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    ea76:	687b      	ldr	r3, [r7, #4]
    ea78:	781b      	ldrb	r3, [r3, #0]
    ea7a:	2b04      	cmp	r3, #4
    ea7c:	d116      	bne.n	eaac <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ea7e:	687b      	ldr	r3, [r7, #4]
    ea80:	7b1b      	ldrb	r3, [r3, #12]
    ea82:	069b      	lsls	r3, r3, #26
    ea84:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ea86:	687b      	ldr	r3, [r7, #4]
    ea88:	89db      	ldrh	r3, [r3, #14]
    ea8a:	041b      	lsls	r3, r3, #16
    ea8c:	0019      	movs	r1, r3
    ea8e:	4b1b      	ldr	r3, [pc, #108]	; (eafc <system_clock_source_dfll_set_config+0xcc>)
    ea90:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ea92:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    ea94:	687a      	ldr	r2, [r7, #4]
    ea96:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ea98:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    ea9a:	4b17      	ldr	r3, [pc, #92]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    ea9c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    ea9e:	4b16      	ldr	r3, [pc, #88]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    eaa0:	681b      	ldr	r3, [r3, #0]
    eaa2:	687a      	ldr	r2, [r7, #4]
    eaa4:	7812      	ldrb	r2, [r2, #0]
    eaa6:	431a      	orrs	r2, r3
    eaa8:	4b13      	ldr	r3, [pc, #76]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    eaaa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    eaac:	687b      	ldr	r3, [r7, #4]
    eaae:	781b      	ldrb	r3, [r3, #0]
    eab0:	2b20      	cmp	r3, #32
    eab2:	d11c      	bne.n	eaee <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    eab4:	687b      	ldr	r3, [r7, #4]
    eab6:	7b1b      	ldrb	r3, [r3, #12]
    eab8:	069b      	lsls	r3, r3, #26
    eaba:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    eabc:	687b      	ldr	r3, [r7, #4]
    eabe:	89db      	ldrh	r3, [r3, #14]
    eac0:	041b      	lsls	r3, r3, #16
    eac2:	0019      	movs	r1, r3
    eac4:	4b0d      	ldr	r3, [pc, #52]	; (eafc <system_clock_source_dfll_set_config+0xcc>)
    eac6:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    eac8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    eaca:	687a      	ldr	r2, [r7, #4]
    eacc:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    eace:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    ead0:	4b09      	ldr	r3, [pc, #36]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    ead2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    ead4:	4b08      	ldr	r3, [pc, #32]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    ead6:	681b      	ldr	r3, [r3, #0]
    ead8:	687a      	ldr	r2, [r7, #4]
    eada:	7812      	ldrb	r2, [r2, #0]
    eadc:	2104      	movs	r1, #4
    eade:	430a      	orrs	r2, r1
    eae0:	b2d2      	uxtb	r2, r2
    eae2:	4313      	orrs	r3, r2
    eae4:	2280      	movs	r2, #128	; 0x80
    eae6:	00d2      	lsls	r2, r2, #3
    eae8:	431a      	orrs	r2, r3
    eaea:	4b03      	ldr	r3, [pc, #12]	; (eaf8 <system_clock_source_dfll_set_config+0xc8>)
    eaec:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    eaee:	46c0      	nop			; (mov r8, r8)
    eaf0:	46bd      	mov	sp, r7
    eaf2:	b002      	add	sp, #8
    eaf4:	bd80      	pop	{r7, pc}
    eaf6:	46c0      	nop			; (mov r8, r8)
    eaf8:	20000578 	.word	0x20000578
    eafc:	03ff0000 	.word	0x03ff0000

0000eb00 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    eb00:	b580      	push	{r7, lr}
    eb02:	b082      	sub	sp, #8
    eb04:	af00      	add	r7, sp, #0
    eb06:	0002      	movs	r2, r0
    eb08:	1dfb      	adds	r3, r7, #7
    eb0a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    eb0c:	1dfb      	adds	r3, r7, #7
    eb0e:	781b      	ldrb	r3, [r3, #0]
    eb10:	2b08      	cmp	r3, #8
    eb12:	d83b      	bhi.n	eb8c <system_clock_source_enable+0x8c>
    eb14:	009a      	lsls	r2, r3, #2
    eb16:	4b21      	ldr	r3, [pc, #132]	; (eb9c <system_clock_source_enable+0x9c>)
    eb18:	18d3      	adds	r3, r2, r3
    eb1a:	681b      	ldr	r3, [r3, #0]
    eb1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    eb1e:	4b20      	ldr	r3, [pc, #128]	; (eba0 <system_clock_source_enable+0xa0>)
    eb20:	4a1f      	ldr	r2, [pc, #124]	; (eba0 <system_clock_source_enable+0xa0>)
    eb22:	6a12      	ldr	r2, [r2, #32]
    eb24:	2102      	movs	r1, #2
    eb26:	430a      	orrs	r2, r1
    eb28:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    eb2a:	2300      	movs	r3, #0
    eb2c:	e031      	b.n	eb92 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    eb2e:	4b1c      	ldr	r3, [pc, #112]	; (eba0 <system_clock_source_enable+0xa0>)
    eb30:	4a1b      	ldr	r2, [pc, #108]	; (eba0 <system_clock_source_enable+0xa0>)
    eb32:	6992      	ldr	r2, [r2, #24]
    eb34:	2102      	movs	r1, #2
    eb36:	430a      	orrs	r2, r1
    eb38:	619a      	str	r2, [r3, #24]
		break;
    eb3a:	e029      	b.n	eb90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    eb3c:	4a18      	ldr	r2, [pc, #96]	; (eba0 <system_clock_source_enable+0xa0>)
    eb3e:	4b18      	ldr	r3, [pc, #96]	; (eba0 <system_clock_source_enable+0xa0>)
    eb40:	8a1b      	ldrh	r3, [r3, #16]
    eb42:	b29b      	uxth	r3, r3
    eb44:	2102      	movs	r1, #2
    eb46:	430b      	orrs	r3, r1
    eb48:	b29b      	uxth	r3, r3
    eb4a:	8213      	strh	r3, [r2, #16]
		break;
    eb4c:	e020      	b.n	eb90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    eb4e:	4a14      	ldr	r2, [pc, #80]	; (eba0 <system_clock_source_enable+0xa0>)
    eb50:	4b13      	ldr	r3, [pc, #76]	; (eba0 <system_clock_source_enable+0xa0>)
    eb52:	8a9b      	ldrh	r3, [r3, #20]
    eb54:	b29b      	uxth	r3, r3
    eb56:	2102      	movs	r1, #2
    eb58:	430b      	orrs	r3, r1
    eb5a:	b29b      	uxth	r3, r3
    eb5c:	8293      	strh	r3, [r2, #20]
		break;
    eb5e:	e017      	b.n	eb90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    eb60:	4b10      	ldr	r3, [pc, #64]	; (eba4 <system_clock_source_enable+0xa4>)
    eb62:	681b      	ldr	r3, [r3, #0]
    eb64:	2202      	movs	r2, #2
    eb66:	431a      	orrs	r2, r3
    eb68:	4b0e      	ldr	r3, [pc, #56]	; (eba4 <system_clock_source_enable+0xa4>)
    eb6a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    eb6c:	4b0e      	ldr	r3, [pc, #56]	; (eba8 <system_clock_source_enable+0xa8>)
    eb6e:	4798      	blx	r3
		break;
    eb70:	e00e      	b.n	eb90 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    eb72:	4a0b      	ldr	r2, [pc, #44]	; (eba0 <system_clock_source_enable+0xa0>)
    eb74:	490a      	ldr	r1, [pc, #40]	; (eba0 <system_clock_source_enable+0xa0>)
    eb76:	2344      	movs	r3, #68	; 0x44
    eb78:	5ccb      	ldrb	r3, [r1, r3]
    eb7a:	b2db      	uxtb	r3, r3
    eb7c:	2102      	movs	r1, #2
    eb7e:	430b      	orrs	r3, r1
    eb80:	b2d9      	uxtb	r1, r3
    eb82:	2344      	movs	r3, #68	; 0x44
    eb84:	54d1      	strb	r1, [r2, r3]
		break;
    eb86:	e003      	b.n	eb90 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    eb88:	2300      	movs	r3, #0
    eb8a:	e002      	b.n	eb92 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    eb8c:	2317      	movs	r3, #23
    eb8e:	e000      	b.n	eb92 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    eb90:	2300      	movs	r3, #0
}
    eb92:	0018      	movs	r0, r3
    eb94:	46bd      	mov	sp, r7
    eb96:	b002      	add	sp, #8
    eb98:	bd80      	pop	{r7, pc}
    eb9a:	46c0      	nop			; (mov r8, r8)
    eb9c:	00020aec 	.word	0x00020aec
    eba0:	40000800 	.word	0x40000800
    eba4:	20000578 	.word	0x20000578
    eba8:	0000e799 	.word	0x0000e799

0000ebac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    ebac:	b580      	push	{r7, lr}
    ebae:	b084      	sub	sp, #16
    ebb0:	af00      	add	r7, sp, #0
    ebb2:	0002      	movs	r2, r0
    ebb4:	1dfb      	adds	r3, r7, #7
    ebb6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    ebb8:	2300      	movs	r3, #0
    ebba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    ebbc:	1dfb      	adds	r3, r7, #7
    ebbe:	781b      	ldrb	r3, [r3, #0]
    ebc0:	2b08      	cmp	r3, #8
    ebc2:	d821      	bhi.n	ec08 <system_clock_source_is_ready+0x5c>
    ebc4:	009a      	lsls	r2, r3, #2
    ebc6:	4b18      	ldr	r3, [pc, #96]	; (ec28 <system_clock_source_is_ready+0x7c>)
    ebc8:	18d3      	adds	r3, r2, r3
    ebca:	681b      	ldr	r3, [r3, #0]
    ebcc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    ebce:	2308      	movs	r3, #8
    ebd0:	60fb      	str	r3, [r7, #12]
		break;
    ebd2:	e01b      	b.n	ec0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    ebd4:	2304      	movs	r3, #4
    ebd6:	60fb      	str	r3, [r7, #12]
		break;
    ebd8:	e018      	b.n	ec0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    ebda:	2301      	movs	r3, #1
    ebdc:	60fb      	str	r3, [r7, #12]
		break;
    ebde:	e015      	b.n	ec0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    ebe0:	2302      	movs	r3, #2
    ebe2:	60fb      	str	r3, [r7, #12]
		break;
    ebe4:	e012      	b.n	ec0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    ebe6:	23d0      	movs	r3, #208	; 0xd0
    ebe8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    ebea:	e00f      	b.n	ec0c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    ebec:	4a0f      	ldr	r2, [pc, #60]	; (ec2c <system_clock_source_is_ready+0x80>)
    ebee:	2350      	movs	r3, #80	; 0x50
    ebf0:	5cd3      	ldrb	r3, [r2, r3]
    ebf2:	b2db      	uxtb	r3, r3
    ebf4:	001a      	movs	r2, r3
    ebf6:	2303      	movs	r3, #3
    ebf8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    ebfa:	3b03      	subs	r3, #3
    ebfc:	425a      	negs	r2, r3
    ebfe:	4153      	adcs	r3, r2
    ec00:	b2db      	uxtb	r3, r3
    ec02:	e00c      	b.n	ec1e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    ec04:	2301      	movs	r3, #1
    ec06:	e00a      	b.n	ec1e <system_clock_source_is_ready+0x72>

	default:
		return false;
    ec08:	2300      	movs	r3, #0
    ec0a:	e008      	b.n	ec1e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    ec0c:	4b07      	ldr	r3, [pc, #28]	; (ec2c <system_clock_source_is_ready+0x80>)
    ec0e:	68db      	ldr	r3, [r3, #12]
    ec10:	68fa      	ldr	r2, [r7, #12]
    ec12:	401a      	ands	r2, r3
    ec14:	68fb      	ldr	r3, [r7, #12]
    ec16:	1ad3      	subs	r3, r2, r3
    ec18:	425a      	negs	r2, r3
    ec1a:	4153      	adcs	r3, r2
    ec1c:	b2db      	uxtb	r3, r3
}
    ec1e:	0018      	movs	r0, r3
    ec20:	46bd      	mov	sp, r7
    ec22:	b004      	add	sp, #16
    ec24:	bd80      	pop	{r7, pc}
    ec26:	46c0      	nop			; (mov r8, r8)
    ec28:	00020b10 	.word	0x00020b10
    ec2c:	40000800 	.word	0x40000800

0000ec30 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    ec30:	b580      	push	{r7, lr}
    ec32:	b082      	sub	sp, #8
    ec34:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    ec36:	003b      	movs	r3, r7
    ec38:	2203      	movs	r2, #3
    ec3a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    ec3c:	2300      	movs	r3, #0
    ec3e:	607b      	str	r3, [r7, #4]
    ec40:	e009      	b.n	ec56 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    ec42:	687b      	ldr	r3, [r7, #4]
    ec44:	b2db      	uxtb	r3, r3
    ec46:	003a      	movs	r2, r7
    ec48:	0011      	movs	r1, r2
    ec4a:	0018      	movs	r0, r3
    ec4c:	4b05      	ldr	r3, [pc, #20]	; (ec64 <_switch_peripheral_gclk+0x34>)
    ec4e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	3301      	adds	r3, #1
    ec54:	607b      	str	r3, [r7, #4]
    ec56:	687b      	ldr	r3, [r7, #4]
    ec58:	2b24      	cmp	r3, #36	; 0x24
    ec5a:	d9f2      	bls.n	ec42 <_switch_peripheral_gclk+0x12>
	}
}
    ec5c:	46c0      	nop			; (mov r8, r8)
    ec5e:	46bd      	mov	sp, r7
    ec60:	b002      	add	sp, #8
    ec62:	bd80      	pop	{r7, pc}
    ec64:	0000f259 	.word	0x0000f259

0000ec68 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    ec68:	b580      	push	{r7, lr}
    ec6a:	b0aa      	sub	sp, #168	; 0xa8
    ec6c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    ec6e:	4b99      	ldr	r3, [pc, #612]	; (eed4 <system_clock_init+0x26c>)
    ec70:	22c2      	movs	r2, #194	; 0xc2
    ec72:	00d2      	lsls	r2, r2, #3
    ec74:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    ec76:	2002      	movs	r0, #2
    ec78:	4b97      	ldr	r3, [pc, #604]	; (eed8 <system_clock_init+0x270>)
    ec7a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    ec7c:	4b97      	ldr	r3, [pc, #604]	; (eedc <system_clock_init+0x274>)
    ec7e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    ec80:	2394      	movs	r3, #148	; 0x94
    ec82:	18fb      	adds	r3, r7, r3
    ec84:	0018      	movs	r0, r3
    ec86:	4b96      	ldr	r3, [pc, #600]	; (eee0 <system_clock_init+0x278>)
    ec88:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    ec8a:	2394      	movs	r3, #148	; 0x94
    ec8c:	18fb      	adds	r3, r7, r3
    ec8e:	2280      	movs	r2, #128	; 0x80
    ec90:	0212      	lsls	r2, r2, #8
    ec92:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    ec94:	2394      	movs	r3, #148	; 0x94
    ec96:	18fb      	adds	r3, r7, r3
    ec98:	2200      	movs	r2, #0
    ec9a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    ec9c:	2394      	movs	r3, #148	; 0x94
    ec9e:	18fb      	adds	r3, r7, r3
    eca0:	2203      	movs	r2, #3
    eca2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    eca4:	2394      	movs	r3, #148	; 0x94
    eca6:	18fb      	adds	r3, r7, r3
    eca8:	2200      	movs	r2, #0
    ecaa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    ecac:	2394      	movs	r3, #148	; 0x94
    ecae:	18fb      	adds	r3, r7, r3
    ecb0:	2200      	movs	r2, #0
    ecb2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    ecb4:	2394      	movs	r3, #148	; 0x94
    ecb6:	18fb      	adds	r3, r7, r3
    ecb8:	2201      	movs	r2, #1
    ecba:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    ecbc:	2394      	movs	r3, #148	; 0x94
    ecbe:	18fb      	adds	r3, r7, r3
    ecc0:	2200      	movs	r2, #0
    ecc2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    ecc4:	2394      	movs	r3, #148	; 0x94
    ecc6:	18fb      	adds	r3, r7, r3
    ecc8:	2200      	movs	r2, #0
    ecca:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    eccc:	2394      	movs	r3, #148	; 0x94
    ecce:	18fb      	adds	r3, r7, r3
    ecd0:	0018      	movs	r0, r3
    ecd2:	4b84      	ldr	r3, [pc, #528]	; (eee4 <system_clock_init+0x27c>)
    ecd4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    ecd6:	2005      	movs	r0, #5
    ecd8:	4b83      	ldr	r3, [pc, #524]	; (eee8 <system_clock_init+0x280>)
    ecda:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    ecdc:	46c0      	nop			; (mov r8, r8)
    ecde:	2005      	movs	r0, #5
    ece0:	4b82      	ldr	r3, [pc, #520]	; (eeec <system_clock_init+0x284>)
    ece2:	4798      	blx	r3
    ece4:	0003      	movs	r3, r0
    ece6:	001a      	movs	r2, r3
    ece8:	2301      	movs	r3, #1
    ecea:	4053      	eors	r3, r2
    ecec:	b2db      	uxtb	r3, r3
    ecee:	2b00      	cmp	r3, #0
    ecf0:	d1f5      	bne.n	ecde <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    ecf2:	4a78      	ldr	r2, [pc, #480]	; (eed4 <system_clock_init+0x26c>)
    ecf4:	8a93      	ldrh	r3, [r2, #20]
    ecf6:	2180      	movs	r1, #128	; 0x80
    ecf8:	430b      	orrs	r3, r1
    ecfa:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    ecfc:	2380      	movs	r3, #128	; 0x80
    ecfe:	18fb      	adds	r3, r7, r3
    ed00:	0018      	movs	r0, r3
    ed02:	4b7b      	ldr	r3, [pc, #492]	; (eef0 <system_clock_init+0x288>)
    ed04:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    ed06:	2380      	movs	r3, #128	; 0x80
    ed08:	18fb      	adds	r3, r7, r3
    ed0a:	2204      	movs	r2, #4
    ed0c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    ed0e:	2380      	movs	r3, #128	; 0x80
    ed10:	18fb      	adds	r3, r7, r3
    ed12:	2200      	movs	r2, #0
    ed14:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    ed16:	4b77      	ldr	r3, [pc, #476]	; (eef4 <system_clock_init+0x28c>)
    ed18:	681b      	ldr	r3, [r3, #0]
    ed1a:	0e9b      	lsrs	r3, r3, #26
    ed1c:	22a4      	movs	r2, #164	; 0xa4
    ed1e:	18ba      	adds	r2, r7, r2
    ed20:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    ed22:	23a4      	movs	r3, #164	; 0xa4
    ed24:	18fb      	adds	r3, r7, r3
    ed26:	681b      	ldr	r3, [r3, #0]
    ed28:	2b3f      	cmp	r3, #63	; 0x3f
    ed2a:	d103      	bne.n	ed34 <system_clock_init+0xcc>
		coarse = 0x1f;
    ed2c:	231f      	movs	r3, #31
    ed2e:	22a4      	movs	r2, #164	; 0xa4
    ed30:	18ba      	adds	r2, r7, r2
    ed32:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    ed34:	23a4      	movs	r3, #164	; 0xa4
    ed36:	18fb      	adds	r3, r7, r3
    ed38:	681b      	ldr	r3, [r3, #0]
    ed3a:	b2da      	uxtb	r2, r3
    ed3c:	2380      	movs	r3, #128	; 0x80
    ed3e:	18fb      	adds	r3, r7, r3
    ed40:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    ed42:	2380      	movs	r3, #128	; 0x80
    ed44:	18fb      	adds	r3, r7, r3
    ed46:	2200      	movs	r2, #0
    ed48:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    ed4a:	2380      	movs	r3, #128	; 0x80
    ed4c:	18fb      	adds	r3, r7, r3
    ed4e:	2200      	movs	r2, #0
    ed50:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    ed52:	2380      	movs	r3, #128	; 0x80
    ed54:	18fb      	adds	r3, r7, r3
    ed56:	2200      	movs	r2, #0
    ed58:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    ed5a:	2380      	movs	r3, #128	; 0x80
    ed5c:	18fb      	adds	r3, r7, r3
    ed5e:	2200      	movs	r2, #0
    ed60:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    ed62:	2380      	movs	r3, #128	; 0x80
    ed64:	18fb      	adds	r3, r7, r3
    ed66:	4a64      	ldr	r2, [pc, #400]	; (eef8 <system_clock_init+0x290>)
    ed68:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    ed6a:	2380      	movs	r3, #128	; 0x80
    ed6c:	18fb      	adds	r3, r7, r3
    ed6e:	2207      	movs	r2, #7
    ed70:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    ed72:	2380      	movs	r3, #128	; 0x80
    ed74:	18fb      	adds	r3, r7, r3
    ed76:	223f      	movs	r2, #63	; 0x3f
    ed78:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    ed7a:	2380      	movs	r3, #128	; 0x80
    ed7c:	18fb      	adds	r3, r7, r3
    ed7e:	0018      	movs	r0, r3
    ed80:	4b5e      	ldr	r3, [pc, #376]	; (eefc <system_clock_init+0x294>)
    ed82:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    ed84:	237c      	movs	r3, #124	; 0x7c
    ed86:	18fb      	adds	r3, r7, r3
    ed88:	0018      	movs	r0, r3
    ed8a:	4b5d      	ldr	r3, [pc, #372]	; (ef00 <system_clock_init+0x298>)
    ed8c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    ed8e:	237c      	movs	r3, #124	; 0x7c
    ed90:	18fb      	adds	r3, r7, r3
    ed92:	2200      	movs	r2, #0
    ed94:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    ed96:	237c      	movs	r3, #124	; 0x7c
    ed98:	18fb      	adds	r3, r7, r3
    ed9a:	2201      	movs	r2, #1
    ed9c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    ed9e:	237c      	movs	r3, #124	; 0x7c
    eda0:	18fb      	adds	r3, r7, r3
    eda2:	2200      	movs	r2, #0
    eda4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    eda6:	237c      	movs	r3, #124	; 0x7c
    eda8:	18fb      	adds	r3, r7, r3
    edaa:	0018      	movs	r0, r3
    edac:	4b55      	ldr	r3, [pc, #340]	; (ef04 <system_clock_init+0x29c>)
    edae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    edb0:	2006      	movs	r0, #6
    edb2:	4b4d      	ldr	r3, [pc, #308]	; (eee8 <system_clock_init+0x280>)
    edb4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    edb6:	4b54      	ldr	r3, [pc, #336]	; (ef08 <system_clock_init+0x2a0>)
    edb8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    edba:	2364      	movs	r3, #100	; 0x64
    edbc:	18fb      	adds	r3, r7, r3
    edbe:	0018      	movs	r0, r3
    edc0:	4b52      	ldr	r3, [pc, #328]	; (ef0c <system_clock_init+0x2a4>)
    edc2:	4798      	blx	r3
    edc4:	2364      	movs	r3, #100	; 0x64
    edc6:	18fb      	adds	r3, r7, r3
    edc8:	2205      	movs	r2, #5
    edca:	701a      	strb	r2, [r3, #0]
    edcc:	2364      	movs	r3, #100	; 0x64
    edce:	18fb      	adds	r3, r7, r3
    edd0:	2201      	movs	r2, #1
    edd2:	605a      	str	r2, [r3, #4]
    edd4:	2364      	movs	r3, #100	; 0x64
    edd6:	18fb      	adds	r3, r7, r3
    edd8:	2200      	movs	r2, #0
    edda:	721a      	strb	r2, [r3, #8]
    eddc:	2364      	movs	r3, #100	; 0x64
    edde:	18fb      	adds	r3, r7, r3
    ede0:	2200      	movs	r2, #0
    ede2:	725a      	strb	r2, [r3, #9]
    ede4:	2364      	movs	r3, #100	; 0x64
    ede6:	18fb      	adds	r3, r7, r3
    ede8:	0019      	movs	r1, r3
    edea:	2001      	movs	r0, #1
    edec:	4b48      	ldr	r3, [pc, #288]	; (ef10 <system_clock_init+0x2a8>)
    edee:	4798      	blx	r3
    edf0:	2001      	movs	r0, #1
    edf2:	4b48      	ldr	r3, [pc, #288]	; (ef14 <system_clock_init+0x2ac>)
    edf4:	4798      	blx	r3
    edf6:	2358      	movs	r3, #88	; 0x58
    edf8:	18fb      	adds	r3, r7, r3
    edfa:	0018      	movs	r0, r3
    edfc:	4b43      	ldr	r3, [pc, #268]	; (ef0c <system_clock_init+0x2a4>)
    edfe:	4798      	blx	r3
    ee00:	2358      	movs	r3, #88	; 0x58
    ee02:	18fb      	adds	r3, r7, r3
    ee04:	2204      	movs	r2, #4
    ee06:	701a      	strb	r2, [r3, #0]
    ee08:	2358      	movs	r3, #88	; 0x58
    ee0a:	18fb      	adds	r3, r7, r3
    ee0c:	2220      	movs	r2, #32
    ee0e:	605a      	str	r2, [r3, #4]
    ee10:	2358      	movs	r3, #88	; 0x58
    ee12:	18fb      	adds	r3, r7, r3
    ee14:	2201      	movs	r2, #1
    ee16:	721a      	strb	r2, [r3, #8]
    ee18:	2358      	movs	r3, #88	; 0x58
    ee1a:	18fb      	adds	r3, r7, r3
    ee1c:	2200      	movs	r2, #0
    ee1e:	725a      	strb	r2, [r3, #9]
    ee20:	2358      	movs	r3, #88	; 0x58
    ee22:	18fb      	adds	r3, r7, r3
    ee24:	0019      	movs	r1, r3
    ee26:	2002      	movs	r0, #2
    ee28:	4b39      	ldr	r3, [pc, #228]	; (ef10 <system_clock_init+0x2a8>)
    ee2a:	4798      	blx	r3
    ee2c:	2002      	movs	r0, #2
    ee2e:	4b39      	ldr	r3, [pc, #228]	; (ef14 <system_clock_init+0x2ac>)
    ee30:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    ee32:	230c      	movs	r3, #12
    ee34:	18fb      	adds	r3, r7, r3
    ee36:	0018      	movs	r0, r3
    ee38:	4b37      	ldr	r3, [pc, #220]	; (ef18 <system_clock_init+0x2b0>)
    ee3a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    ee3c:	230c      	movs	r3, #12
    ee3e:	18fb      	adds	r3, r7, r3
    ee40:	2201      	movs	r2, #1
    ee42:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    ee44:	230c      	movs	r3, #12
    ee46:	18fb      	adds	r3, r7, r3
    ee48:	0019      	movs	r1, r3
    ee4a:	2000      	movs	r0, #0
    ee4c:	4b33      	ldr	r3, [pc, #204]	; (ef1c <system_clock_init+0x2b4>)
    ee4e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    ee50:	2000      	movs	r0, #0
    ee52:	4b33      	ldr	r3, [pc, #204]	; (ef20 <system_clock_init+0x2b8>)
    ee54:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    ee56:	2007      	movs	r0, #7
    ee58:	4b23      	ldr	r3, [pc, #140]	; (eee8 <system_clock_init+0x280>)
    ee5a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    ee5c:	46c0      	nop			; (mov r8, r8)
    ee5e:	2007      	movs	r0, #7
    ee60:	4b22      	ldr	r3, [pc, #136]	; (eeec <system_clock_init+0x284>)
    ee62:	4798      	blx	r3
    ee64:	0003      	movs	r3, r0
    ee66:	001a      	movs	r2, r3
    ee68:	2301      	movs	r3, #1
    ee6a:	4053      	eors	r3, r2
    ee6c:	b2db      	uxtb	r3, r3
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d1f5      	bne.n	ee5e <system_clock_init+0x1f6>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    ee72:	4a18      	ldr	r2, [pc, #96]	; (eed4 <system_clock_init+0x26c>)
    ee74:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    ee76:	2180      	movs	r1, #128	; 0x80
    ee78:	430b      	orrs	r3, r1
    ee7a:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    ee7c:	2000      	movs	r0, #0
    ee7e:	4b29      	ldr	r3, [pc, #164]	; (ef24 <system_clock_init+0x2bc>)
    ee80:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    ee82:	2100      	movs	r1, #0
    ee84:	2000      	movs	r0, #0
    ee86:	4b28      	ldr	r3, [pc, #160]	; (ef28 <system_clock_init+0x2c0>)
    ee88:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    ee8a:	2100      	movs	r1, #0
    ee8c:	2001      	movs	r0, #1
    ee8e:	4b26      	ldr	r3, [pc, #152]	; (ef28 <system_clock_init+0x2c0>)
    ee90:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    ee92:	2100      	movs	r1, #0
    ee94:	2002      	movs	r0, #2
    ee96:	4b24      	ldr	r3, [pc, #144]	; (ef28 <system_clock_init+0x2c0>)
    ee98:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    ee9a:	003b      	movs	r3, r7
    ee9c:	0018      	movs	r0, r3
    ee9e:	4b1b      	ldr	r3, [pc, #108]	; (ef0c <system_clock_init+0x2a4>)
    eea0:	4798      	blx	r3
    eea2:	003b      	movs	r3, r7
    eea4:	2207      	movs	r2, #7
    eea6:	701a      	strb	r2, [r3, #0]
    eea8:	003b      	movs	r3, r7
    eeaa:	2201      	movs	r2, #1
    eeac:	605a      	str	r2, [r3, #4]
    eeae:	003b      	movs	r3, r7
    eeb0:	2200      	movs	r2, #0
    eeb2:	721a      	strb	r2, [r3, #8]
    eeb4:	003b      	movs	r3, r7
    eeb6:	2200      	movs	r2, #0
    eeb8:	725a      	strb	r2, [r3, #9]
    eeba:	003b      	movs	r3, r7
    eebc:	0019      	movs	r1, r3
    eebe:	2000      	movs	r0, #0
    eec0:	4b13      	ldr	r3, [pc, #76]	; (ef10 <system_clock_init+0x2a8>)
    eec2:	4798      	blx	r3
    eec4:	2000      	movs	r0, #0
    eec6:	4b13      	ldr	r3, [pc, #76]	; (ef14 <system_clock_init+0x2ac>)
    eec8:	4798      	blx	r3
#endif
}
    eeca:	46c0      	nop			; (mov r8, r8)
    eecc:	46bd      	mov	sp, r7
    eece:	b02a      	add	sp, #168	; 0xa8
    eed0:	bd80      	pop	{r7, pc}
    eed2:	46c0      	nop			; (mov r8, r8)
    eed4:	40000800 	.word	0x40000800
    eed8:	0000e749 	.word	0x0000e749
    eedc:	0000ec31 	.word	0x0000ec31
    eee0:	0000e619 	.word	0x0000e619
    eee4:	0000e911 	.word	0x0000e911
    eee8:	0000eb01 	.word	0x0000eb01
    eeec:	0000ebad 	.word	0x0000ebad
    eef0:	0000e683 	.word	0x0000e683
    eef4:	00806024 	.word	0x00806024
    eef8:	000005b9 	.word	0x000005b9
    eefc:	0000ea31 	.word	0x0000ea31
    ef00:	0000e661 	.word	0x0000e661
    ef04:	0000e899 	.word	0x0000e899
    ef08:	0000efd1 	.word	0x0000efd1
    ef0c:	0000e5d5 	.word	0x0000e5d5
    ef10:	0000f001 	.word	0x0000f001
    ef14:	0000f125 	.word	0x0000f125
    ef18:	0000e603 	.word	0x0000e603
    ef1c:	0000f259 	.word	0x0000f259
    ef20:	0000f29d 	.word	0x0000f29d
    ef24:	0000e6d5 	.word	0x0000e6d5
    ef28:	0000e6f5 	.word	0x0000e6f5

0000ef2c <system_apb_clock_set_mask>:
{
    ef2c:	b580      	push	{r7, lr}
    ef2e:	b082      	sub	sp, #8
    ef30:	af00      	add	r7, sp, #0
    ef32:	0002      	movs	r2, r0
    ef34:	6039      	str	r1, [r7, #0]
    ef36:	1dfb      	adds	r3, r7, #7
    ef38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ef3a:	1dfb      	adds	r3, r7, #7
    ef3c:	781b      	ldrb	r3, [r3, #0]
    ef3e:	2b01      	cmp	r3, #1
    ef40:	d00a      	beq.n	ef58 <system_apb_clock_set_mask+0x2c>
    ef42:	2b02      	cmp	r3, #2
    ef44:	d00f      	beq.n	ef66 <system_apb_clock_set_mask+0x3a>
    ef46:	2b00      	cmp	r3, #0
    ef48:	d114      	bne.n	ef74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ef4a:	4b0e      	ldr	r3, [pc, #56]	; (ef84 <system_apb_clock_set_mask+0x58>)
    ef4c:	4a0d      	ldr	r2, [pc, #52]	; (ef84 <system_apb_clock_set_mask+0x58>)
    ef4e:	6991      	ldr	r1, [r2, #24]
    ef50:	683a      	ldr	r2, [r7, #0]
    ef52:	430a      	orrs	r2, r1
    ef54:	619a      	str	r2, [r3, #24]
			break;
    ef56:	e00f      	b.n	ef78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ef58:	4b0a      	ldr	r3, [pc, #40]	; (ef84 <system_apb_clock_set_mask+0x58>)
    ef5a:	4a0a      	ldr	r2, [pc, #40]	; (ef84 <system_apb_clock_set_mask+0x58>)
    ef5c:	69d1      	ldr	r1, [r2, #28]
    ef5e:	683a      	ldr	r2, [r7, #0]
    ef60:	430a      	orrs	r2, r1
    ef62:	61da      	str	r2, [r3, #28]
			break;
    ef64:	e008      	b.n	ef78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ef66:	4b07      	ldr	r3, [pc, #28]	; (ef84 <system_apb_clock_set_mask+0x58>)
    ef68:	4a06      	ldr	r2, [pc, #24]	; (ef84 <system_apb_clock_set_mask+0x58>)
    ef6a:	6a11      	ldr	r1, [r2, #32]
    ef6c:	683a      	ldr	r2, [r7, #0]
    ef6e:	430a      	orrs	r2, r1
    ef70:	621a      	str	r2, [r3, #32]
			break;
    ef72:	e001      	b.n	ef78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ef74:	2317      	movs	r3, #23
    ef76:	e000      	b.n	ef7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ef78:	2300      	movs	r3, #0
}
    ef7a:	0018      	movs	r0, r3
    ef7c:	46bd      	mov	sp, r7
    ef7e:	b002      	add	sp, #8
    ef80:	bd80      	pop	{r7, pc}
    ef82:	46c0      	nop			; (mov r8, r8)
    ef84:	40000400 	.word	0x40000400

0000ef88 <system_interrupt_enter_critical_section>:
{
    ef88:	b580      	push	{r7, lr}
    ef8a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    ef8c:	4b02      	ldr	r3, [pc, #8]	; (ef98 <system_interrupt_enter_critical_section+0x10>)
    ef8e:	4798      	blx	r3
}
    ef90:	46c0      	nop			; (mov r8, r8)
    ef92:	46bd      	mov	sp, r7
    ef94:	bd80      	pop	{r7, pc}
    ef96:	46c0      	nop			; (mov r8, r8)
    ef98:	00000115 	.word	0x00000115

0000ef9c <system_interrupt_leave_critical_section>:
{
    ef9c:	b580      	push	{r7, lr}
    ef9e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    efa0:	4b02      	ldr	r3, [pc, #8]	; (efac <system_interrupt_leave_critical_section+0x10>)
    efa2:	4798      	blx	r3
}
    efa4:	46c0      	nop			; (mov r8, r8)
    efa6:	46bd      	mov	sp, r7
    efa8:	bd80      	pop	{r7, pc}
    efaa:	46c0      	nop			; (mov r8, r8)
    efac:	00000169 	.word	0x00000169

0000efb0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    efb0:	b580      	push	{r7, lr}
    efb2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    efb4:	4b05      	ldr	r3, [pc, #20]	; (efcc <system_gclk_is_syncing+0x1c>)
    efb6:	785b      	ldrb	r3, [r3, #1]
    efb8:	b2db      	uxtb	r3, r3
    efba:	b25b      	sxtb	r3, r3
    efbc:	2b00      	cmp	r3, #0
    efbe:	da01      	bge.n	efc4 <system_gclk_is_syncing+0x14>
		return true;
    efc0:	2301      	movs	r3, #1
    efc2:	e000      	b.n	efc6 <system_gclk_is_syncing+0x16>
	}

	return false;
    efc4:	2300      	movs	r3, #0
}
    efc6:	0018      	movs	r0, r3
    efc8:	46bd      	mov	sp, r7
    efca:	bd80      	pop	{r7, pc}
    efcc:	40000c00 	.word	0x40000c00

0000efd0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    efd0:	b580      	push	{r7, lr}
    efd2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    efd4:	2108      	movs	r1, #8
    efd6:	2000      	movs	r0, #0
    efd8:	4b07      	ldr	r3, [pc, #28]	; (eff8 <system_gclk_init+0x28>)
    efda:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    efdc:	4b07      	ldr	r3, [pc, #28]	; (effc <system_gclk_init+0x2c>)
    efde:	2201      	movs	r2, #1
    efe0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    efe2:	46c0      	nop			; (mov r8, r8)
    efe4:	4b05      	ldr	r3, [pc, #20]	; (effc <system_gclk_init+0x2c>)
    efe6:	781b      	ldrb	r3, [r3, #0]
    efe8:	b2db      	uxtb	r3, r3
    efea:	001a      	movs	r2, r3
    efec:	2301      	movs	r3, #1
    efee:	4013      	ands	r3, r2
    eff0:	d1f8      	bne.n	efe4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    eff2:	46c0      	nop			; (mov r8, r8)
    eff4:	46bd      	mov	sp, r7
    eff6:	bd80      	pop	{r7, pc}
    eff8:	0000ef2d 	.word	0x0000ef2d
    effc:	40000c00 	.word	0x40000c00

0000f000 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    f000:	b580      	push	{r7, lr}
    f002:	b086      	sub	sp, #24
    f004:	af00      	add	r7, sp, #0
    f006:	0002      	movs	r2, r0
    f008:	6039      	str	r1, [r7, #0]
    f00a:	1dfb      	adds	r3, r7, #7
    f00c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    f00e:	1dfb      	adds	r3, r7, #7
    f010:	781b      	ldrb	r3, [r3, #0]
    f012:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    f014:	1dfb      	adds	r3, r7, #7
    f016:	781b      	ldrb	r3, [r3, #0]
    f018:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    f01a:	683b      	ldr	r3, [r7, #0]
    f01c:	781b      	ldrb	r3, [r3, #0]
    f01e:	021b      	lsls	r3, r3, #8
    f020:	001a      	movs	r2, r3
    f022:	697b      	ldr	r3, [r7, #20]
    f024:	4313      	orrs	r3, r2
    f026:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    f028:	683b      	ldr	r3, [r7, #0]
    f02a:	785b      	ldrb	r3, [r3, #1]
    f02c:	2b00      	cmp	r3, #0
    f02e:	d004      	beq.n	f03a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    f030:	697b      	ldr	r3, [r7, #20]
    f032:	2280      	movs	r2, #128	; 0x80
    f034:	02d2      	lsls	r2, r2, #11
    f036:	4313      	orrs	r3, r2
    f038:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    f03a:	683b      	ldr	r3, [r7, #0]
    f03c:	7a5b      	ldrb	r3, [r3, #9]
    f03e:	2b00      	cmp	r3, #0
    f040:	d004      	beq.n	f04c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    f042:	697b      	ldr	r3, [r7, #20]
    f044:	2280      	movs	r2, #128	; 0x80
    f046:	0312      	lsls	r2, r2, #12
    f048:	4313      	orrs	r3, r2
    f04a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    f04c:	683b      	ldr	r3, [r7, #0]
    f04e:	685b      	ldr	r3, [r3, #4]
    f050:	2b01      	cmp	r3, #1
    f052:	d92c      	bls.n	f0ae <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    f054:	683b      	ldr	r3, [r7, #0]
    f056:	685a      	ldr	r2, [r3, #4]
    f058:	683b      	ldr	r3, [r7, #0]
    f05a:	685b      	ldr	r3, [r3, #4]
    f05c:	3b01      	subs	r3, #1
    f05e:	4013      	ands	r3, r2
    f060:	d11a      	bne.n	f098 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    f062:	2300      	movs	r3, #0
    f064:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    f066:	2302      	movs	r3, #2
    f068:	60bb      	str	r3, [r7, #8]
    f06a:	e005      	b.n	f078 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    f06c:	68fb      	ldr	r3, [r7, #12]
    f06e:	3301      	adds	r3, #1
    f070:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    f072:	68bb      	ldr	r3, [r7, #8]
    f074:	005b      	lsls	r3, r3, #1
    f076:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    f078:	683b      	ldr	r3, [r7, #0]
    f07a:	685a      	ldr	r2, [r3, #4]
    f07c:	68bb      	ldr	r3, [r7, #8]
    f07e:	429a      	cmp	r2, r3
    f080:	d8f4      	bhi.n	f06c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    f082:	68fb      	ldr	r3, [r7, #12]
    f084:	021b      	lsls	r3, r3, #8
    f086:	693a      	ldr	r2, [r7, #16]
    f088:	4313      	orrs	r3, r2
    f08a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    f08c:	697b      	ldr	r3, [r7, #20]
    f08e:	2280      	movs	r2, #128	; 0x80
    f090:	0352      	lsls	r2, r2, #13
    f092:	4313      	orrs	r3, r2
    f094:	617b      	str	r3, [r7, #20]
    f096:	e00a      	b.n	f0ae <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    f098:	683b      	ldr	r3, [r7, #0]
    f09a:	685b      	ldr	r3, [r3, #4]
    f09c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    f09e:	693a      	ldr	r2, [r7, #16]
    f0a0:	4313      	orrs	r3, r2
    f0a2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    f0a4:	697b      	ldr	r3, [r7, #20]
    f0a6:	2280      	movs	r2, #128	; 0x80
    f0a8:	0292      	lsls	r2, r2, #10
    f0aa:	4313      	orrs	r3, r2
    f0ac:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    f0ae:	683b      	ldr	r3, [r7, #0]
    f0b0:	7a1b      	ldrb	r3, [r3, #8]
    f0b2:	2b00      	cmp	r3, #0
    f0b4:	d004      	beq.n	f0c0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    f0b6:	697b      	ldr	r3, [r7, #20]
    f0b8:	2280      	movs	r2, #128	; 0x80
    f0ba:	0392      	lsls	r2, r2, #14
    f0bc:	4313      	orrs	r3, r2
    f0be:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    f0c0:	46c0      	nop			; (mov r8, r8)
    f0c2:	4b13      	ldr	r3, [pc, #76]	; (f110 <system_gclk_gen_set_config+0x110>)
    f0c4:	4798      	blx	r3
    f0c6:	1e03      	subs	r3, r0, #0
    f0c8:	d1fb      	bne.n	f0c2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f0ca:	4b12      	ldr	r3, [pc, #72]	; (f114 <system_gclk_gen_set_config+0x114>)
    f0cc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f0ce:	4a12      	ldr	r2, [pc, #72]	; (f118 <system_gclk_gen_set_config+0x118>)
    f0d0:	1dfb      	adds	r3, r7, #7
    f0d2:	781b      	ldrb	r3, [r3, #0]
    f0d4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    f0d6:	46c0      	nop			; (mov r8, r8)
    f0d8:	4b0d      	ldr	r3, [pc, #52]	; (f110 <system_gclk_gen_set_config+0x110>)
    f0da:	4798      	blx	r3
    f0dc:	1e03      	subs	r3, r0, #0
    f0de:	d1fb      	bne.n	f0d8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    f0e0:	4b0e      	ldr	r3, [pc, #56]	; (f11c <system_gclk_gen_set_config+0x11c>)
    f0e2:	693a      	ldr	r2, [r7, #16]
    f0e4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    f0e6:	46c0      	nop			; (mov r8, r8)
    f0e8:	4b09      	ldr	r3, [pc, #36]	; (f110 <system_gclk_gen_set_config+0x110>)
    f0ea:	4798      	blx	r3
    f0ec:	1e03      	subs	r3, r0, #0
    f0ee:	d1fb      	bne.n	f0e8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    f0f0:	4b0a      	ldr	r3, [pc, #40]	; (f11c <system_gclk_gen_set_config+0x11c>)
    f0f2:	4a0a      	ldr	r2, [pc, #40]	; (f11c <system_gclk_gen_set_config+0x11c>)
    f0f4:	6851      	ldr	r1, [r2, #4]
    f0f6:	2280      	movs	r2, #128	; 0x80
    f0f8:	0252      	lsls	r2, r2, #9
    f0fa:	4011      	ands	r1, r2
    f0fc:	697a      	ldr	r2, [r7, #20]
    f0fe:	430a      	orrs	r2, r1
    f100:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    f102:	4b07      	ldr	r3, [pc, #28]	; (f120 <system_gclk_gen_set_config+0x120>)
    f104:	4798      	blx	r3
}
    f106:	46c0      	nop			; (mov r8, r8)
    f108:	46bd      	mov	sp, r7
    f10a:	b006      	add	sp, #24
    f10c:	bd80      	pop	{r7, pc}
    f10e:	46c0      	nop			; (mov r8, r8)
    f110:	0000efb1 	.word	0x0000efb1
    f114:	0000ef89 	.word	0x0000ef89
    f118:	40000c08 	.word	0x40000c08
    f11c:	40000c00 	.word	0x40000c00
    f120:	0000ef9d 	.word	0x0000ef9d

0000f124 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    f124:	b580      	push	{r7, lr}
    f126:	b082      	sub	sp, #8
    f128:	af00      	add	r7, sp, #0
    f12a:	0002      	movs	r2, r0
    f12c:	1dfb      	adds	r3, r7, #7
    f12e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    f130:	46c0      	nop			; (mov r8, r8)
    f132:	4b0e      	ldr	r3, [pc, #56]	; (f16c <system_gclk_gen_enable+0x48>)
    f134:	4798      	blx	r3
    f136:	1e03      	subs	r3, r0, #0
    f138:	d1fb      	bne.n	f132 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f13a:	4b0d      	ldr	r3, [pc, #52]	; (f170 <system_gclk_gen_enable+0x4c>)
    f13c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f13e:	4a0d      	ldr	r2, [pc, #52]	; (f174 <system_gclk_gen_enable+0x50>)
    f140:	1dfb      	adds	r3, r7, #7
    f142:	781b      	ldrb	r3, [r3, #0]
    f144:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f146:	46c0      	nop			; (mov r8, r8)
    f148:	4b08      	ldr	r3, [pc, #32]	; (f16c <system_gclk_gen_enable+0x48>)
    f14a:	4798      	blx	r3
    f14c:	1e03      	subs	r3, r0, #0
    f14e:	d1fb      	bne.n	f148 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    f150:	4b09      	ldr	r3, [pc, #36]	; (f178 <system_gclk_gen_enable+0x54>)
    f152:	4a09      	ldr	r2, [pc, #36]	; (f178 <system_gclk_gen_enable+0x54>)
    f154:	6852      	ldr	r2, [r2, #4]
    f156:	2180      	movs	r1, #128	; 0x80
    f158:	0249      	lsls	r1, r1, #9
    f15a:	430a      	orrs	r2, r1
    f15c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    f15e:	4b07      	ldr	r3, [pc, #28]	; (f17c <system_gclk_gen_enable+0x58>)
    f160:	4798      	blx	r3
}
    f162:	46c0      	nop			; (mov r8, r8)
    f164:	46bd      	mov	sp, r7
    f166:	b002      	add	sp, #8
    f168:	bd80      	pop	{r7, pc}
    f16a:	46c0      	nop			; (mov r8, r8)
    f16c:	0000efb1 	.word	0x0000efb1
    f170:	0000ef89 	.word	0x0000ef89
    f174:	40000c04 	.word	0x40000c04
    f178:	40000c00 	.word	0x40000c00
    f17c:	0000ef9d 	.word	0x0000ef9d

0000f180 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    f180:	b580      	push	{r7, lr}
    f182:	b086      	sub	sp, #24
    f184:	af00      	add	r7, sp, #0
    f186:	0002      	movs	r2, r0
    f188:	1dfb      	adds	r3, r7, #7
    f18a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    f18c:	46c0      	nop			; (mov r8, r8)
    f18e:	4b2a      	ldr	r3, [pc, #168]	; (f238 <system_gclk_gen_get_hz+0xb8>)
    f190:	4798      	blx	r3
    f192:	1e03      	subs	r3, r0, #0
    f194:	d1fb      	bne.n	f18e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f196:	4b29      	ldr	r3, [pc, #164]	; (f23c <system_gclk_gen_get_hz+0xbc>)
    f198:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f19a:	4a29      	ldr	r2, [pc, #164]	; (f240 <system_gclk_gen_get_hz+0xc0>)
    f19c:	1dfb      	adds	r3, r7, #7
    f19e:	781b      	ldrb	r3, [r3, #0]
    f1a0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f1a2:	46c0      	nop			; (mov r8, r8)
    f1a4:	4b24      	ldr	r3, [pc, #144]	; (f238 <system_gclk_gen_get_hz+0xb8>)
    f1a6:	4798      	blx	r3
    f1a8:	1e03      	subs	r3, r0, #0
    f1aa:	d1fb      	bne.n	f1a4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    f1ac:	4b25      	ldr	r3, [pc, #148]	; (f244 <system_gclk_gen_get_hz+0xc4>)
    f1ae:	685b      	ldr	r3, [r3, #4]
    f1b0:	04db      	lsls	r3, r3, #19
    f1b2:	0edb      	lsrs	r3, r3, #27
    f1b4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    f1b6:	0018      	movs	r0, r3
    f1b8:	4b23      	ldr	r3, [pc, #140]	; (f248 <system_gclk_gen_get_hz+0xc8>)
    f1ba:	4798      	blx	r3
    f1bc:	0003      	movs	r3, r0
    f1be:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f1c0:	4a1f      	ldr	r2, [pc, #124]	; (f240 <system_gclk_gen_get_hz+0xc0>)
    f1c2:	1dfb      	adds	r3, r7, #7
    f1c4:	781b      	ldrb	r3, [r3, #0]
    f1c6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    f1c8:	4b1e      	ldr	r3, [pc, #120]	; (f244 <system_gclk_gen_get_hz+0xc4>)
    f1ca:	685b      	ldr	r3, [r3, #4]
    f1cc:	02db      	lsls	r3, r3, #11
    f1ce:	0fdb      	lsrs	r3, r3, #31
    f1d0:	b2da      	uxtb	r2, r3
    f1d2:	2313      	movs	r3, #19
    f1d4:	18fb      	adds	r3, r7, r3
    f1d6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f1d8:	4a1c      	ldr	r2, [pc, #112]	; (f24c <system_gclk_gen_get_hz+0xcc>)
    f1da:	1dfb      	adds	r3, r7, #7
    f1dc:	781b      	ldrb	r3, [r3, #0]
    f1de:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f1e0:	46c0      	nop			; (mov r8, r8)
    f1e2:	4b15      	ldr	r3, [pc, #84]	; (f238 <system_gclk_gen_get_hz+0xb8>)
    f1e4:	4798      	blx	r3
    f1e6:	1e03      	subs	r3, r0, #0
    f1e8:	d1fb      	bne.n	f1e2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    f1ea:	4b16      	ldr	r3, [pc, #88]	; (f244 <system_gclk_gen_get_hz+0xc4>)
    f1ec:	689b      	ldr	r3, [r3, #8]
    f1ee:	021b      	lsls	r3, r3, #8
    f1f0:	0c1b      	lsrs	r3, r3, #16
    f1f2:	b29b      	uxth	r3, r3
    f1f4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    f1f6:	4b16      	ldr	r3, [pc, #88]	; (f250 <system_gclk_gen_get_hz+0xd0>)
    f1f8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    f1fa:	2313      	movs	r3, #19
    f1fc:	18fb      	adds	r3, r7, r3
    f1fe:	781b      	ldrb	r3, [r3, #0]
    f200:	2b00      	cmp	r3, #0
    f202:	d109      	bne.n	f218 <system_gclk_gen_get_hz+0x98>
    f204:	68fb      	ldr	r3, [r7, #12]
    f206:	2b01      	cmp	r3, #1
    f208:	d906      	bls.n	f218 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    f20a:	4b12      	ldr	r3, [pc, #72]	; (f254 <system_gclk_gen_get_hz+0xd4>)
    f20c:	68f9      	ldr	r1, [r7, #12]
    f20e:	6978      	ldr	r0, [r7, #20]
    f210:	4798      	blx	r3
    f212:	0003      	movs	r3, r0
    f214:	617b      	str	r3, [r7, #20]
    f216:	e00a      	b.n	f22e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    f218:	2313      	movs	r3, #19
    f21a:	18fb      	adds	r3, r7, r3
    f21c:	781b      	ldrb	r3, [r3, #0]
    f21e:	2b00      	cmp	r3, #0
    f220:	d005      	beq.n	f22e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    f222:	68fb      	ldr	r3, [r7, #12]
    f224:	3301      	adds	r3, #1
    f226:	697a      	ldr	r2, [r7, #20]
    f228:	40da      	lsrs	r2, r3
    f22a:	0013      	movs	r3, r2
    f22c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    f22e:	697b      	ldr	r3, [r7, #20]
}
    f230:	0018      	movs	r0, r3
    f232:	46bd      	mov	sp, r7
    f234:	b006      	add	sp, #24
    f236:	bd80      	pop	{r7, pc}
    f238:	0000efb1 	.word	0x0000efb1
    f23c:	0000ef89 	.word	0x0000ef89
    f240:	40000c04 	.word	0x40000c04
    f244:	40000c00 	.word	0x40000c00
    f248:	0000e7dd 	.word	0x0000e7dd
    f24c:	40000c08 	.word	0x40000c08
    f250:	0000ef9d 	.word	0x0000ef9d
    f254:	00019d81 	.word	0x00019d81

0000f258 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    f258:	b580      	push	{r7, lr}
    f25a:	b084      	sub	sp, #16
    f25c:	af00      	add	r7, sp, #0
    f25e:	0002      	movs	r2, r0
    f260:	6039      	str	r1, [r7, #0]
    f262:	1dfb      	adds	r3, r7, #7
    f264:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    f266:	1dfb      	adds	r3, r7, #7
    f268:	781b      	ldrb	r3, [r3, #0]
    f26a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    f26c:	683b      	ldr	r3, [r7, #0]
    f26e:	781b      	ldrb	r3, [r3, #0]
    f270:	021b      	lsls	r3, r3, #8
    f272:	001a      	movs	r2, r3
    f274:	68fb      	ldr	r3, [r7, #12]
    f276:	4313      	orrs	r3, r2
    f278:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    f27a:	1dfb      	adds	r3, r7, #7
    f27c:	781b      	ldrb	r3, [r3, #0]
    f27e:	0018      	movs	r0, r3
    f280:	4b04      	ldr	r3, [pc, #16]	; (f294 <system_gclk_chan_set_config+0x3c>)
    f282:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    f284:	4b04      	ldr	r3, [pc, #16]	; (f298 <system_gclk_chan_set_config+0x40>)
    f286:	68fa      	ldr	r2, [r7, #12]
    f288:	b292      	uxth	r2, r2
    f28a:	805a      	strh	r2, [r3, #2]
}
    f28c:	46c0      	nop			; (mov r8, r8)
    f28e:	46bd      	mov	sp, r7
    f290:	b004      	add	sp, #16
    f292:	bd80      	pop	{r7, pc}
    f294:	0000f2e5 	.word	0x0000f2e5
    f298:	40000c00 	.word	0x40000c00

0000f29c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    f29c:	b580      	push	{r7, lr}
    f29e:	b082      	sub	sp, #8
    f2a0:	af00      	add	r7, sp, #0
    f2a2:	0002      	movs	r2, r0
    f2a4:	1dfb      	adds	r3, r7, #7
    f2a6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    f2a8:	4b0a      	ldr	r3, [pc, #40]	; (f2d4 <system_gclk_chan_enable+0x38>)
    f2aa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f2ac:	4a0a      	ldr	r2, [pc, #40]	; (f2d8 <system_gclk_chan_enable+0x3c>)
    f2ae:	1dfb      	adds	r3, r7, #7
    f2b0:	781b      	ldrb	r3, [r3, #0]
    f2b2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    f2b4:	4909      	ldr	r1, [pc, #36]	; (f2dc <system_gclk_chan_enable+0x40>)
    f2b6:	4b09      	ldr	r3, [pc, #36]	; (f2dc <system_gclk_chan_enable+0x40>)
    f2b8:	885b      	ldrh	r3, [r3, #2]
    f2ba:	b29b      	uxth	r3, r3
    f2bc:	2280      	movs	r2, #128	; 0x80
    f2be:	01d2      	lsls	r2, r2, #7
    f2c0:	4313      	orrs	r3, r2
    f2c2:	b29b      	uxth	r3, r3
    f2c4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    f2c6:	4b06      	ldr	r3, [pc, #24]	; (f2e0 <system_gclk_chan_enable+0x44>)
    f2c8:	4798      	blx	r3
}
    f2ca:	46c0      	nop			; (mov r8, r8)
    f2cc:	46bd      	mov	sp, r7
    f2ce:	b002      	add	sp, #8
    f2d0:	bd80      	pop	{r7, pc}
    f2d2:	46c0      	nop			; (mov r8, r8)
    f2d4:	0000ef89 	.word	0x0000ef89
    f2d8:	40000c02 	.word	0x40000c02
    f2dc:	40000c00 	.word	0x40000c00
    f2e0:	0000ef9d 	.word	0x0000ef9d

0000f2e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    f2e4:	b580      	push	{r7, lr}
    f2e6:	b084      	sub	sp, #16
    f2e8:	af00      	add	r7, sp, #0
    f2ea:	0002      	movs	r2, r0
    f2ec:	1dfb      	adds	r3, r7, #7
    f2ee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    f2f0:	4b1c      	ldr	r3, [pc, #112]	; (f364 <system_gclk_chan_disable+0x80>)
    f2f2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f2f4:	4a1c      	ldr	r2, [pc, #112]	; (f368 <system_gclk_chan_disable+0x84>)
    f2f6:	1dfb      	adds	r3, r7, #7
    f2f8:	781b      	ldrb	r3, [r3, #0]
    f2fa:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    f2fc:	4b1b      	ldr	r3, [pc, #108]	; (f36c <system_gclk_chan_disable+0x88>)
    f2fe:	885b      	ldrh	r3, [r3, #2]
    f300:	051b      	lsls	r3, r3, #20
    f302:	0f1b      	lsrs	r3, r3, #28
    f304:	b2db      	uxtb	r3, r3
    f306:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    f308:	4a18      	ldr	r2, [pc, #96]	; (f36c <system_gclk_chan_disable+0x88>)
    f30a:	8853      	ldrh	r3, [r2, #2]
    f30c:	4918      	ldr	r1, [pc, #96]	; (f370 <system_gclk_chan_disable+0x8c>)
    f30e:	400b      	ands	r3, r1
    f310:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    f312:	4a16      	ldr	r2, [pc, #88]	; (f36c <system_gclk_chan_disable+0x88>)
    f314:	4b15      	ldr	r3, [pc, #84]	; (f36c <system_gclk_chan_disable+0x88>)
    f316:	885b      	ldrh	r3, [r3, #2]
    f318:	b29b      	uxth	r3, r3
    f31a:	4916      	ldr	r1, [pc, #88]	; (f374 <system_gclk_chan_disable+0x90>)
    f31c:	400b      	ands	r3, r1
    f31e:	b29b      	uxth	r3, r3
    f320:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    f322:	46c0      	nop			; (mov r8, r8)
    f324:	4b11      	ldr	r3, [pc, #68]	; (f36c <system_gclk_chan_disable+0x88>)
    f326:	885b      	ldrh	r3, [r3, #2]
    f328:	b29b      	uxth	r3, r3
    f32a:	001a      	movs	r2, r3
    f32c:	2380      	movs	r3, #128	; 0x80
    f32e:	01db      	lsls	r3, r3, #7
    f330:	4013      	ands	r3, r2
    f332:	d1f7      	bne.n	f324 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    f334:	4a0d      	ldr	r2, [pc, #52]	; (f36c <system_gclk_chan_disable+0x88>)
    f336:	68fb      	ldr	r3, [r7, #12]
    f338:	b2db      	uxtb	r3, r3
    f33a:	1c19      	adds	r1, r3, #0
    f33c:	230f      	movs	r3, #15
    f33e:	400b      	ands	r3, r1
    f340:	b2d9      	uxtb	r1, r3
    f342:	8853      	ldrh	r3, [r2, #2]
    f344:	1c08      	adds	r0, r1, #0
    f346:	210f      	movs	r1, #15
    f348:	4001      	ands	r1, r0
    f34a:	0208      	lsls	r0, r1, #8
    f34c:	4908      	ldr	r1, [pc, #32]	; (f370 <system_gclk_chan_disable+0x8c>)
    f34e:	400b      	ands	r3, r1
    f350:	1c19      	adds	r1, r3, #0
    f352:	1c03      	adds	r3, r0, #0
    f354:	430b      	orrs	r3, r1
    f356:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    f358:	4b07      	ldr	r3, [pc, #28]	; (f378 <system_gclk_chan_disable+0x94>)
    f35a:	4798      	blx	r3
}
    f35c:	46c0      	nop			; (mov r8, r8)
    f35e:	46bd      	mov	sp, r7
    f360:	b004      	add	sp, #16
    f362:	bd80      	pop	{r7, pc}
    f364:	0000ef89 	.word	0x0000ef89
    f368:	40000c02 	.word	0x40000c02
    f36c:	40000c00 	.word	0x40000c00
    f370:	fffff0ff 	.word	0xfffff0ff
    f374:	ffffbfff 	.word	0xffffbfff
    f378:	0000ef9d 	.word	0x0000ef9d

0000f37c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    f37c:	b580      	push	{r7, lr}
    f37e:	b084      	sub	sp, #16
    f380:	af00      	add	r7, sp, #0
    f382:	0002      	movs	r2, r0
    f384:	1dfb      	adds	r3, r7, #7
    f386:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    f388:	4b0d      	ldr	r3, [pc, #52]	; (f3c0 <system_gclk_chan_get_hz+0x44>)
    f38a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f38c:	4a0d      	ldr	r2, [pc, #52]	; (f3c4 <system_gclk_chan_get_hz+0x48>)
    f38e:	1dfb      	adds	r3, r7, #7
    f390:	781b      	ldrb	r3, [r3, #0]
    f392:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    f394:	4b0c      	ldr	r3, [pc, #48]	; (f3c8 <system_gclk_chan_get_hz+0x4c>)
    f396:	885b      	ldrh	r3, [r3, #2]
    f398:	051b      	lsls	r3, r3, #20
    f39a:	0f1b      	lsrs	r3, r3, #28
    f39c:	b2da      	uxtb	r2, r3
    f39e:	230f      	movs	r3, #15
    f3a0:	18fb      	adds	r3, r7, r3
    f3a2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    f3a4:	4b09      	ldr	r3, [pc, #36]	; (f3cc <system_gclk_chan_get_hz+0x50>)
    f3a6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    f3a8:	230f      	movs	r3, #15
    f3aa:	18fb      	adds	r3, r7, r3
    f3ac:	781b      	ldrb	r3, [r3, #0]
    f3ae:	0018      	movs	r0, r3
    f3b0:	4b07      	ldr	r3, [pc, #28]	; (f3d0 <system_gclk_chan_get_hz+0x54>)
    f3b2:	4798      	blx	r3
    f3b4:	0003      	movs	r3, r0
}
    f3b6:	0018      	movs	r0, r3
    f3b8:	46bd      	mov	sp, r7
    f3ba:	b004      	add	sp, #16
    f3bc:	bd80      	pop	{r7, pc}
    f3be:	46c0      	nop			; (mov r8, r8)
    f3c0:	0000ef89 	.word	0x0000ef89
    f3c4:	40000c02 	.word	0x40000c02
    f3c8:	40000c00 	.word	0x40000c00
    f3cc:	0000ef9d 	.word	0x0000ef9d
    f3d0:	0000f181 	.word	0x0000f181

0000f3d4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    f3d4:	b580      	push	{r7, lr}
    f3d6:	af00      	add	r7, sp, #0
	return;
    f3d8:	46c0      	nop			; (mov r8, r8)
}
    f3da:	46bd      	mov	sp, r7
    f3dc:	bd80      	pop	{r7, pc}
	...

0000f3e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    f3e0:	b580      	push	{r7, lr}
    f3e2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    f3e4:	4b06      	ldr	r3, [pc, #24]	; (f400 <system_init+0x20>)
    f3e6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    f3e8:	4b06      	ldr	r3, [pc, #24]	; (f404 <system_init+0x24>)
    f3ea:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    f3ec:	4b06      	ldr	r3, [pc, #24]	; (f408 <system_init+0x28>)
    f3ee:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    f3f0:	4b06      	ldr	r3, [pc, #24]	; (f40c <system_init+0x2c>)
    f3f2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    f3f4:	4b06      	ldr	r3, [pc, #24]	; (f410 <system_init+0x30>)
    f3f6:	4798      	blx	r3
}
    f3f8:	46c0      	nop			; (mov r8, r8)
    f3fa:	46bd      	mov	sp, r7
    f3fc:	bd80      	pop	{r7, pc}
    f3fe:	46c0      	nop			; (mov r8, r8)
    f400:	0000ec69 	.word	0x0000ec69
    f404:	00001755 	.word	0x00001755
    f408:	0000f3d5 	.word	0x0000f3d5
    f40c:	0000c601 	.word	0x0000c601
    f410:	0000f3d5 	.word	0x0000f3d5

0000f414 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    f414:	b580      	push	{r7, lr}
    f416:	b082      	sub	sp, #8
    f418:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    f41a:	4b2f      	ldr	r3, [pc, #188]	; (f4d8 <Reset_Handler+0xc4>)
    f41c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    f41e:	4b2f      	ldr	r3, [pc, #188]	; (f4dc <Reset_Handler+0xc8>)
    f420:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    f422:	687a      	ldr	r2, [r7, #4]
    f424:	683b      	ldr	r3, [r7, #0]
    f426:	429a      	cmp	r2, r3
    f428:	d00c      	beq.n	f444 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    f42a:	e007      	b.n	f43c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    f42c:	683b      	ldr	r3, [r7, #0]
    f42e:	1d1a      	adds	r2, r3, #4
    f430:	603a      	str	r2, [r7, #0]
    f432:	687a      	ldr	r2, [r7, #4]
    f434:	1d11      	adds	r1, r2, #4
    f436:	6079      	str	r1, [r7, #4]
    f438:	6812      	ldr	r2, [r2, #0]
    f43a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    f43c:	683a      	ldr	r2, [r7, #0]
    f43e:	4b28      	ldr	r3, [pc, #160]	; (f4e0 <Reset_Handler+0xcc>)
    f440:	429a      	cmp	r2, r3
    f442:	d3f3      	bcc.n	f42c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    f444:	4b27      	ldr	r3, [pc, #156]	; (f4e4 <Reset_Handler+0xd0>)
    f446:	603b      	str	r3, [r7, #0]
    f448:	e004      	b.n	f454 <Reset_Handler+0x40>
                *pDest++ = 0;
    f44a:	683b      	ldr	r3, [r7, #0]
    f44c:	1d1a      	adds	r2, r3, #4
    f44e:	603a      	str	r2, [r7, #0]
    f450:	2200      	movs	r2, #0
    f452:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    f454:	683a      	ldr	r2, [r7, #0]
    f456:	4b24      	ldr	r3, [pc, #144]	; (f4e8 <Reset_Handler+0xd4>)
    f458:	429a      	cmp	r2, r3
    f45a:	d3f6      	bcc.n	f44a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    f45c:	4b23      	ldr	r3, [pc, #140]	; (f4ec <Reset_Handler+0xd8>)
    f45e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    f460:	4b23      	ldr	r3, [pc, #140]	; (f4f0 <Reset_Handler+0xdc>)
    f462:	687a      	ldr	r2, [r7, #4]
    f464:	21ff      	movs	r1, #255	; 0xff
    f466:	438a      	bics	r2, r1
    f468:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    f46a:	4a22      	ldr	r2, [pc, #136]	; (f4f4 <Reset_Handler+0xe0>)
    f46c:	2390      	movs	r3, #144	; 0x90
    f46e:	005b      	lsls	r3, r3, #1
    f470:	2102      	movs	r1, #2
    f472:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    f474:	4a20      	ldr	r2, [pc, #128]	; (f4f8 <Reset_Handler+0xe4>)
    f476:	78d3      	ldrb	r3, [r2, #3]
    f478:	2103      	movs	r1, #3
    f47a:	438b      	bics	r3, r1
    f47c:	1c19      	adds	r1, r3, #0
    f47e:	2302      	movs	r3, #2
    f480:	430b      	orrs	r3, r1
    f482:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    f484:	4a1c      	ldr	r2, [pc, #112]	; (f4f8 <Reset_Handler+0xe4>)
    f486:	78d3      	ldrb	r3, [r2, #3]
    f488:	210c      	movs	r1, #12
    f48a:	438b      	bics	r3, r1
    f48c:	1c19      	adds	r1, r3, #0
    f48e:	2308      	movs	r3, #8
    f490:	430b      	orrs	r3, r1
    f492:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    f494:	4a19      	ldr	r2, [pc, #100]	; (f4fc <Reset_Handler+0xe8>)
    f496:	7b93      	ldrb	r3, [r2, #14]
    f498:	2130      	movs	r1, #48	; 0x30
    f49a:	438b      	bics	r3, r1
    f49c:	1c19      	adds	r1, r3, #0
    f49e:	2320      	movs	r3, #32
    f4a0:	430b      	orrs	r3, r1
    f4a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    f4a4:	4a15      	ldr	r2, [pc, #84]	; (f4fc <Reset_Handler+0xe8>)
    f4a6:	7b93      	ldrb	r3, [r2, #14]
    f4a8:	210c      	movs	r1, #12
    f4aa:	438b      	bics	r3, r1
    f4ac:	1c19      	adds	r1, r3, #0
    f4ae:	2308      	movs	r3, #8
    f4b0:	430b      	orrs	r3, r1
    f4b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    f4b4:	4a11      	ldr	r2, [pc, #68]	; (f4fc <Reset_Handler+0xe8>)
    f4b6:	7b93      	ldrb	r3, [r2, #14]
    f4b8:	2103      	movs	r1, #3
    f4ba:	438b      	bics	r3, r1
    f4bc:	1c19      	adds	r1, r3, #0
    f4be:	2302      	movs	r3, #2
    f4c0:	430b      	orrs	r3, r1
    f4c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    f4c4:	4a0e      	ldr	r2, [pc, #56]	; (f500 <Reset_Handler+0xec>)
    f4c6:	6853      	ldr	r3, [r2, #4]
    f4c8:	2180      	movs	r1, #128	; 0x80
    f4ca:	430b      	orrs	r3, r1
    f4cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    f4ce:	4b0d      	ldr	r3, [pc, #52]	; (f504 <Reset_Handler+0xf0>)
    f4d0:	4798      	blx	r3

        /* Branch to main function */
        main();
    f4d2:	4b0d      	ldr	r3, [pc, #52]	; (f508 <Reset_Handler+0xf4>)
    f4d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    f4d6:	e7fe      	b.n	f4d6 <Reset_Handler+0xc2>
    f4d8:	00021e20 	.word	0x00021e20
    f4dc:	20000000 	.word	0x20000000
    f4e0:	200003fc 	.word	0x200003fc
    f4e4:	200003fc 	.word	0x200003fc
    f4e8:	20002c08 	.word	0x20002c08
    f4ec:	00000000 	.word	0x00000000
    f4f0:	e000ed00 	.word	0xe000ed00
    f4f4:	41007000 	.word	0x41007000
    f4f8:	41005000 	.word	0x41005000
    f4fc:	41004800 	.word	0x41004800
    f500:	41004000 	.word	0x41004000
    f504:	0001c021 	.word	0x0001c021
    f508:	000164cd 	.word	0x000164cd

0000f50c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    f50c:	b580      	push	{r7, lr}
    f50e:	af00      	add	r7, sp, #0
        while (1) {
    f510:	e7fe      	b.n	f510 <Dummy_Handler+0x4>
	...

0000f514 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    f514:	b580      	push	{r7, lr}
    f516:	b086      	sub	sp, #24
    f518:	af00      	add	r7, sp, #0
    f51a:	60f8      	str	r0, [r7, #12]
    f51c:	60b9      	str	r1, [r7, #8]
    f51e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    f520:	2300      	movs	r3, #0
    f522:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    f524:	68fb      	ldr	r3, [r7, #12]
    f526:	2b00      	cmp	r3, #0
    f528:	d012      	beq.n	f550 <_read+0x3c>
		return -1;
    f52a:	2301      	movs	r3, #1
    f52c:	425b      	negs	r3, r3
    f52e:	e013      	b.n	f558 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    f530:	4b0b      	ldr	r3, [pc, #44]	; (f560 <_read+0x4c>)
    f532:	681a      	ldr	r2, [r3, #0]
    f534:	4b0b      	ldr	r3, [pc, #44]	; (f564 <_read+0x50>)
    f536:	681b      	ldr	r3, [r3, #0]
    f538:	68b9      	ldr	r1, [r7, #8]
    f53a:	0018      	movs	r0, r3
    f53c:	4790      	blx	r2
		ptr++;
    f53e:	68bb      	ldr	r3, [r7, #8]
    f540:	3301      	adds	r3, #1
    f542:	60bb      	str	r3, [r7, #8]
		nChars++;
    f544:	697b      	ldr	r3, [r7, #20]
    f546:	3301      	adds	r3, #1
    f548:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    f54a:	687b      	ldr	r3, [r7, #4]
    f54c:	3b01      	subs	r3, #1
    f54e:	607b      	str	r3, [r7, #4]
    f550:	687b      	ldr	r3, [r7, #4]
    f552:	2b00      	cmp	r3, #0
    f554:	dcec      	bgt.n	f530 <_read+0x1c>
	}
	return nChars;
    f556:	697b      	ldr	r3, [r7, #20]
}
    f558:	0018      	movs	r0, r3
    f55a:	46bd      	mov	sp, r7
    f55c:	b006      	add	sp, #24
    f55e:	bd80      	pop	{r7, pc}
    f560:	20002b78 	.word	0x20002b78
    f564:	20002b80 	.word	0x20002b80

0000f568 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    f568:	b580      	push	{r7, lr}
    f56a:	b086      	sub	sp, #24
    f56c:	af00      	add	r7, sp, #0
    f56e:	60f8      	str	r0, [r7, #12]
    f570:	60b9      	str	r1, [r7, #8]
    f572:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    f574:	2300      	movs	r3, #0
    f576:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    f578:	68fb      	ldr	r3, [r7, #12]
    f57a:	2b01      	cmp	r3, #1
    f57c:	d01d      	beq.n	f5ba <_write+0x52>
    f57e:	68fb      	ldr	r3, [r7, #12]
    f580:	2b02      	cmp	r3, #2
    f582:	d01a      	beq.n	f5ba <_write+0x52>
    f584:	68fb      	ldr	r3, [r7, #12]
    f586:	2b03      	cmp	r3, #3
    f588:	d017      	beq.n	f5ba <_write+0x52>
		return -1;
    f58a:	2301      	movs	r3, #1
    f58c:	425b      	negs	r3, r3
    f58e:	e018      	b.n	f5c2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    f590:	4b0e      	ldr	r3, [pc, #56]	; (f5cc <_write+0x64>)
    f592:	681a      	ldr	r2, [r3, #0]
    f594:	4b0e      	ldr	r3, [pc, #56]	; (f5d0 <_write+0x68>)
    f596:	6818      	ldr	r0, [r3, #0]
    f598:	68bb      	ldr	r3, [r7, #8]
    f59a:	1c59      	adds	r1, r3, #1
    f59c:	60b9      	str	r1, [r7, #8]
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	0019      	movs	r1, r3
    f5a2:	4790      	blx	r2
    f5a4:	1e03      	subs	r3, r0, #0
    f5a6:	da02      	bge.n	f5ae <_write+0x46>
			return -1;
    f5a8:	2301      	movs	r3, #1
    f5aa:	425b      	negs	r3, r3
    f5ac:	e009      	b.n	f5c2 <_write+0x5a>
		}
		++nChars;
    f5ae:	697b      	ldr	r3, [r7, #20]
    f5b0:	3301      	adds	r3, #1
    f5b2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    f5b4:	687b      	ldr	r3, [r7, #4]
    f5b6:	3b01      	subs	r3, #1
    f5b8:	607b      	str	r3, [r7, #4]
    f5ba:	687b      	ldr	r3, [r7, #4]
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d1e7      	bne.n	f590 <_write+0x28>
	}
	return nChars;
    f5c0:	697b      	ldr	r3, [r7, #20]
}
    f5c2:	0018      	movs	r0, r3
    f5c4:	46bd      	mov	sp, r7
    f5c6:	b006      	add	sp, #24
    f5c8:	bd80      	pop	{r7, pc}
    f5ca:	46c0      	nop			; (mov r8, r8)
    f5cc:	20002b7c 	.word	0x20002b7c
    f5d0:	20002b80 	.word	0x20002b80

0000f5d4 <atGenKey>:
 * \param[in] ca_cmd     instance
 * \param[in] packet    pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atGenKey(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f5d4:	b580      	push	{r7, lr}
    f5d6:	b082      	sub	sp, #8
    f5d8:	af00      	add	r7, sp, #0
    f5da:	6078      	str	r0, [r7, #4]
    f5dc:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENKEY;
    f5de:	683b      	ldr	r3, [r7, #0]
    f5e0:	2240      	movs	r2, #64	; 0x40
    f5e2:	709a      	strb	r2, [r3, #2]

    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
    f5e4:	683b      	ldr	r3, [r7, #0]
    f5e6:	78db      	ldrb	r3, [r3, #3]
    f5e8:	001a      	movs	r2, r3
    f5ea:	2310      	movs	r3, #16
    f5ec:	4013      	ands	r3, r2
    f5ee:	d007      	beq.n	f600 <atGenKey+0x2c>
    {
        packet->txsize = GENKEY_COUNT_DATA;
    f5f0:	683b      	ldr	r3, [r7, #0]
    f5f2:	220a      	movs	r2, #10
    f5f4:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
    f5f6:	683b      	ldr	r3, [r7, #0]
    f5f8:	228a      	movs	r2, #138	; 0x8a
    f5fa:	2104      	movs	r1, #4
    f5fc:	5299      	strh	r1, [r3, r2]
    f5fe:	e006      	b.n	f60e <atGenKey+0x3a>
    }
    else
    {
        packet->txsize = GENKEY_COUNT;
    f600:	683b      	ldr	r3, [r7, #0]
    f602:	2207      	movs	r2, #7
    f604:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
    f606:	683b      	ldr	r3, [r7, #0]
    f608:	228a      	movs	r2, #138	; 0x8a
    f60a:	214b      	movs	r1, #75	; 0x4b
    f60c:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    f60e:	683b      	ldr	r3, [r7, #0]
    f610:	0018      	movs	r0, r3
    f612:	4b03      	ldr	r3, [pc, #12]	; (f620 <atGenKey+0x4c>)
    f614:	4798      	blx	r3
    return ATCA_SUCCESS;
    f616:	2300      	movs	r3, #0
}
    f618:	0018      	movs	r0, r3
    f61a:	46bd      	mov	sp, r7
    f61c:	b002      	add	sp, #8
    f61e:	bd80      	pop	{r7, pc}
    f620:	0000fa29 	.word	0x0000fa29

0000f624 <atInfo>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atInfo(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f624:	b580      	push	{r7, lr}
    f626:	b082      	sub	sp, #8
    f628:	af00      	add	r7, sp, #0
    f62a:	6078      	str	r0, [r7, #4]
    f62c:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_INFO;
    f62e:	683b      	ldr	r3, [r7, #0]
    f630:	2230      	movs	r2, #48	; 0x30
    f632:	709a      	strb	r2, [r3, #2]
    packet->txsize = INFO_COUNT;
    f634:	683b      	ldr	r3, [r7, #0]
    f636:	2207      	movs	r2, #7
    f638:	705a      	strb	r2, [r3, #1]
    packet->rxsize = INFO_RSP_SIZE;
    f63a:	683b      	ldr	r3, [r7, #0]
    f63c:	228a      	movs	r2, #138	; 0x8a
    f63e:	2107      	movs	r1, #7
    f640:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    f642:	683b      	ldr	r3, [r7, #0]
    f644:	0018      	movs	r0, r3
    f646:	4b03      	ldr	r3, [pc, #12]	; (f654 <atInfo+0x30>)
    f648:	4798      	blx	r3
    return ATCA_SUCCESS;
    f64a:	2300      	movs	r3, #0
}
    f64c:	0018      	movs	r0, r3
    f64e:	46bd      	mov	sp, r7
    f650:	b002      	add	sp, #8
    f652:	bd80      	pop	{r7, pc}
    f654:	0000fa29 	.word	0x0000fa29

0000f658 <atNonce>:
 * \param[in] ca_cmd   instance
 * \param[in] packet   pointer to the packet containing the command being built
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atNonce(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f658:	b580      	push	{r7, lr}
    f65a:	b084      	sub	sp, #16
    f65c:	af00      	add	r7, sp, #0
    f65e:	6078      	str	r0, [r7, #4]
    f660:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    // variable packet size
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
    f662:	683b      	ldr	r3, [r7, #0]
    f664:	78da      	ldrb	r2, [r3, #3]
    f666:	230f      	movs	r3, #15
    f668:	18fb      	adds	r3, r7, r3
    f66a:	2103      	movs	r1, #3
    f66c:	400a      	ands	r2, r1
    f66e:	701a      	strb	r2, [r3, #0]

    packet->opcode = ATCA_NONCE;
    f670:	683b      	ldr	r3, [r7, #0]
    f672:	2216      	movs	r2, #22
    f674:	709a      	strb	r2, [r3, #2]

    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    f676:	230f      	movs	r3, #15
    f678:	18fb      	adds	r3, r7, r3
    f67a:	781b      	ldrb	r3, [r3, #0]
    f67c:	2b00      	cmp	r3, #0
    f67e:	d004      	beq.n	f68a <atNonce+0x32>
    f680:	230f      	movs	r3, #15
    f682:	18fb      	adds	r3, r7, r3
    f684:	781b      	ldrb	r3, [r3, #0]
    f686:	2b01      	cmp	r3, #1
    f688:	d107      	bne.n	f69a <atNonce+0x42>
    {
        // Calculated nonce mode, 20 byte NumInm
        packet->txsize = NONCE_COUNT_SHORT;
    f68a:	683b      	ldr	r3, [r7, #0]
    f68c:	221b      	movs	r2, #27
    f68e:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG; // 32-byte output
    f690:	683b      	ldr	r3, [r7, #0]
    f692:	228a      	movs	r2, #138	; 0x8a
    f694:	2123      	movs	r1, #35	; 0x23
    f696:	5299      	strh	r1, [r3, r2]
    f698:	e018      	b.n	f6cc <atNonce+0x74>
    }
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
    f69a:	230f      	movs	r3, #15
    f69c:	18fb      	adds	r3, r7, r3
    f69e:	781b      	ldrb	r3, [r3, #0]
    f6a0:	2b03      	cmp	r3, #3
    f6a2:	d111      	bne.n	f6c8 <atNonce+0x70>
    {
        // PAss-through nonce mode
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
    f6a4:	683b      	ldr	r3, [r7, #0]
    f6a6:	78db      	ldrb	r3, [r3, #3]
    f6a8:	001a      	movs	r2, r3
    f6aa:	2320      	movs	r3, #32
    f6ac:	4013      	ands	r3, r2
    f6ae:	d003      	beq.n	f6b8 <atNonce+0x60>
        {
            // 64 byte NumIn
            packet->txsize = NONCE_COUNT_LONG_64;
    f6b0:	683b      	ldr	r3, [r7, #0]
    f6b2:	2247      	movs	r2, #71	; 0x47
    f6b4:	705a      	strb	r2, [r3, #1]
    f6b6:	e002      	b.n	f6be <atNonce+0x66>
        }
        else
        {
            // 32 byte NumIn
            packet->txsize = NONCE_COUNT_LONG;
    f6b8:	683b      	ldr	r3, [r7, #0]
    f6ba:	2227      	movs	r2, #39	; 0x27
    f6bc:	705a      	strb	r2, [r3, #1]
        }
        packet->rxsize = NONCE_RSP_SIZE_SHORT; // Status-only output
    f6be:	683b      	ldr	r3, [r7, #0]
    f6c0:	228a      	movs	r2, #138	; 0x8a
    f6c2:	2104      	movs	r1, #4
    f6c4:	5299      	strh	r1, [r3, r2]
    f6c6:	e001      	b.n	f6cc <atNonce+0x74>
    }
    else
    {
        return ATCA_BAD_PARAM;
    f6c8:	23e2      	movs	r3, #226	; 0xe2
    f6ca:	e004      	b.n	f6d6 <atNonce+0x7e>
    }

    atCalcCrc(packet);
    f6cc:	683b      	ldr	r3, [r7, #0]
    f6ce:	0018      	movs	r0, r3
    f6d0:	4b03      	ldr	r3, [pc, #12]	; (f6e0 <atNonce+0x88>)
    f6d2:	4798      	blx	r3
    return ATCA_SUCCESS;
    f6d4:	2300      	movs	r3, #0
}
    f6d6:	0018      	movs	r0, r3
    f6d8:	46bd      	mov	sp, r7
    f6da:	b004      	add	sp, #16
    f6dc:	bd80      	pop	{r7, pc}
    f6de:	46c0      	nop			; (mov r8, r8)
    f6e0:	0000fa29 	.word	0x0000fa29

0000f6e4 <atRandom>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atRandom(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f6e4:	b580      	push	{r7, lr}
    f6e6:	b082      	sub	sp, #8
    f6e8:	af00      	add	r7, sp, #0
    f6ea:	6078      	str	r0, [r7, #4]
    f6ec:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_RANDOM;
    f6ee:	683b      	ldr	r3, [r7, #0]
    f6f0:	221b      	movs	r2, #27
    f6f2:	709a      	strb	r2, [r3, #2]
    packet->txsize = RANDOM_COUNT;
    f6f4:	683b      	ldr	r3, [r7, #0]
    f6f6:	2207      	movs	r2, #7
    f6f8:	705a      	strb	r2, [r3, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
    f6fa:	683b      	ldr	r3, [r7, #0]
    f6fc:	228a      	movs	r2, #138	; 0x8a
    f6fe:	2123      	movs	r1, #35	; 0x23
    f700:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    f702:	683b      	ldr	r3, [r7, #0]
    f704:	0018      	movs	r0, r3
    f706:	4b03      	ldr	r3, [pc, #12]	; (f714 <atRandom+0x30>)
    f708:	4798      	blx	r3
    return ATCA_SUCCESS;
    f70a:	2300      	movs	r3, #0
}
    f70c:	0018      	movs	r0, r3
    f70e:	46bd      	mov	sp, r7
    f710:	b002      	add	sp, #8
    f712:	bd80      	pop	{r7, pc}
    f714:	0000fa29 	.word	0x0000fa29

0000f718 <atRead>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atRead(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f718:	b580      	push	{r7, lr}
    f71a:	b082      	sub	sp, #8
    f71c:	af00      	add	r7, sp, #0
    f71e:	6078      	str	r0, [r7, #4]
    f720:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_READ;
    f722:	683b      	ldr	r3, [r7, #0]
    f724:	2202      	movs	r2, #2
    f726:	709a      	strb	r2, [r3, #2]
    packet->txsize = READ_COUNT;
    f728:	683b      	ldr	r3, [r7, #0]
    f72a:	2207      	movs	r2, #7
    f72c:	705a      	strb	r2, [r3, #1]

    // variable response size based on read type
    if ((packet->param1 & 0x80) == 0)
    f72e:	683b      	ldr	r3, [r7, #0]
    f730:	78db      	ldrb	r3, [r3, #3]
    f732:	b25b      	sxtb	r3, r3
    f734:	2b00      	cmp	r3, #0
    f736:	db04      	blt.n	f742 <atRead+0x2a>
    {
        packet->rxsize = READ_4_RSP_SIZE;
    f738:	683b      	ldr	r3, [r7, #0]
    f73a:	228a      	movs	r2, #138	; 0x8a
    f73c:	2107      	movs	r1, #7
    f73e:	5299      	strh	r1, [r3, r2]
    f740:	e003      	b.n	f74a <atRead+0x32>
    }
    else
    {
        packet->rxsize = READ_32_RSP_SIZE;
    f742:	683b      	ldr	r3, [r7, #0]
    f744:	228a      	movs	r2, #138	; 0x8a
    f746:	2123      	movs	r1, #35	; 0x23
    f748:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    f74a:	683b      	ldr	r3, [r7, #0]
    f74c:	0018      	movs	r0, r3
    f74e:	4b03      	ldr	r3, [pc, #12]	; (f75c <atRead+0x44>)
    f750:	4798      	blx	r3
    return ATCA_SUCCESS;
    f752:	2300      	movs	r3, #0
}
    f754:	0018      	movs	r0, r3
    f756:	46bd      	mov	sp, r7
    f758:	b002      	add	sp, #8
    f75a:	bd80      	pop	{r7, pc}
    f75c:	0000fa29 	.word	0x0000fa29

0000f760 <atSign>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atSign(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f760:	b580      	push	{r7, lr}
    f762:	b082      	sub	sp, #8
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    f768:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_SIGN;
    f76a:	683b      	ldr	r3, [r7, #0]
    f76c:	2241      	movs	r2, #65	; 0x41
    f76e:	709a      	strb	r2, [r3, #2]
    packet->txsize = SIGN_COUNT;
    f770:	683b      	ldr	r3, [r7, #0]
    f772:	2207      	movs	r2, #7
    f774:	705a      	strb	r2, [r3, #1]

    // could be a 64 or 72 byte response depending upon the key configuration for the KeyID
    packet->rxsize = ATCA_RSP_SIZE_64;
    f776:	683b      	ldr	r3, [r7, #0]
    f778:	228a      	movs	r2, #138	; 0x8a
    f77a:	2143      	movs	r1, #67	; 0x43
    f77c:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    f77e:	683b      	ldr	r3, [r7, #0]
    f780:	0018      	movs	r0, r3
    f782:	4b03      	ldr	r3, [pc, #12]	; (f790 <atSign+0x30>)
    f784:	4798      	blx	r3
    return ATCA_SUCCESS;
    f786:	2300      	movs	r3, #0
}
    f788:	0018      	movs	r0, r3
    f78a:	46bd      	mov	sp, r7
    f78c:	b002      	add	sp, #8
    f78e:	bd80      	pop	{r7, pc}
    f790:	0000fa29 	.word	0x0000fa29

0000f794 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
    f794:	b580      	push	{r7, lr}
    f796:	b084      	sub	sp, #16
    f798:	af00      	add	r7, sp, #0
    f79a:	0002      	movs	r2, r0
    f79c:	1dfb      	adds	r3, r7, #7
    f79e:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    f7a0:	230b      	movs	r3, #11
    f7a2:	18fb      	adds	r3, r7, r3
    f7a4:	2200      	movs	r2, #0
    f7a6:	701a      	strb	r2, [r3, #0]
    ATCACommand ca_cmd;

    ca_cmd = (ATCACommand)malloc(sizeof(atca_command));
    f7a8:	2004      	movs	r0, #4
    f7aa:	4b0d      	ldr	r3, [pc, #52]	; (f7e0 <newATCACommand+0x4c>)
    f7ac:	4798      	blx	r3
    f7ae:	0003      	movs	r3, r0
    f7b0:	60fb      	str	r3, [r7, #12]
    ca_cmd->dt = device_type;
    f7b2:	68fb      	ldr	r3, [r7, #12]
    f7b4:	1dfa      	adds	r2, r7, #7
    f7b6:	7812      	ldrb	r2, [r2, #0]
    f7b8:	701a      	strb	r2, [r3, #0]
    ca_cmd->clock_divider = 0;
    f7ba:	68fb      	ldr	r3, [r7, #12]
    f7bc:	2200      	movs	r2, #0
    f7be:	705a      	strb	r2, [r3, #1]
    if (status != ATCA_SUCCESS)
    f7c0:	230b      	movs	r3, #11
    f7c2:	18fb      	adds	r3, r7, r3
    f7c4:	781b      	ldrb	r3, [r3, #0]
    f7c6:	2b00      	cmp	r3, #0
    f7c8:	d005      	beq.n	f7d6 <newATCACommand+0x42>
    {
        free(ca_cmd);
    f7ca:	68fb      	ldr	r3, [r7, #12]
    f7cc:	0018      	movs	r0, r3
    f7ce:	4b05      	ldr	r3, [pc, #20]	; (f7e4 <newATCACommand+0x50>)
    f7d0:	4798      	blx	r3
        ca_cmd = NULL;
    f7d2:	2300      	movs	r3, #0
    f7d4:	60fb      	str	r3, [r7, #12]
    }

    return ca_cmd;
    f7d6:	68fb      	ldr	r3, [r7, #12]
}
    f7d8:	0018      	movs	r0, r3
    f7da:	46bd      	mov	sp, r7
    f7dc:	b004      	add	sp, #16
    f7de:	bd80      	pop	{r7, pc}
    f7e0:	0001c165 	.word	0x0001c165
    f7e4:	0001c179 	.word	0x0001c179

0000f7e8 <deleteATCACommand>:

/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)    // destructor
{
    f7e8:	b580      	push	{r7, lr}
    f7ea:	b082      	sub	sp, #8
    f7ec:	af00      	add	r7, sp, #0
    f7ee:	6078      	str	r0, [r7, #4]
    if (*ca_cmd)
    f7f0:	687b      	ldr	r3, [r7, #4]
    f7f2:	681b      	ldr	r3, [r3, #0]
    f7f4:	2b00      	cmp	r3, #0
    f7f6:	d004      	beq.n	f802 <deleteATCACommand+0x1a>
    {
        free((void*)*ca_cmd);
    f7f8:	687b      	ldr	r3, [r7, #4]
    f7fa:	681b      	ldr	r3, [r3, #0]
    f7fc:	0018      	movs	r0, r3
    f7fe:	4b04      	ldr	r3, [pc, #16]	; (f810 <deleteATCACommand+0x28>)
    f800:	4798      	blx	r3
    }

    *ca_cmd = NULL;
    f802:	687b      	ldr	r3, [r7, #4]
    f804:	2200      	movs	r2, #0
    f806:	601a      	str	r2, [r3, #0]
}
    f808:	46c0      	nop			; (mov r8, r8)
    f80a:	46bd      	mov	sp, r7
    f80c:	b002      	add	sp, #8
    f80e:	bd80      	pop	{r7, pc}
    f810:	0001c179 	.word	0x0001c179

0000f814 <atGetExecTime>:
 *  \param[in] opcode  Opcode value of the command
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
    f814:	b580      	push	{r7, lr}
    f816:	b086      	sub	sp, #24
    f818:	af00      	add	r7, sp, #0
    f81a:	0002      	movs	r2, r0
    f81c:	6039      	str	r1, [r7, #0]
    f81e:	1dfb      	adds	r3, r7, #7
    f820:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    f822:	2317      	movs	r3, #23
    f824:	18fb      	adds	r3, r7, r3
    f826:	2200      	movs	r2, #0
    f828:	701a      	strb	r2, [r3, #0]
    const device_execution_time_t *execution_times;
    uint8_t i, no_of_commands;


    switch (ca_cmd->dt)
    f82a:	683b      	ldr	r3, [r7, #0]
    f82c:	781b      	ldrb	r3, [r3, #0]
    f82e:	2b01      	cmp	r3, #1
    f830:	d00f      	beq.n	f852 <atGetExecTime+0x3e>
    f832:	dc02      	bgt.n	f83a <atGetExecTime+0x26>
    f834:	2b00      	cmp	r3, #0
    f836:	d005      	beq.n	f844 <atGetExecTime+0x30>
    f838:	e036      	b.n	f8a8 <atGetExecTime+0x94>
    f83a:	2b02      	cmp	r3, #2
    f83c:	d010      	beq.n	f860 <atGetExecTime+0x4c>
    f83e:	2b03      	cmp	r3, #3
    f840:	d015      	beq.n	f86e <atGetExecTime+0x5a>
    f842:	e031      	b.n	f8a8 <atGetExecTime+0x94>
    {
    case ATSHA204A:
        execution_times = device_execution_time_204;
    f844:	4b3a      	ldr	r3, [pc, #232]	; (f930 <atGetExecTime+0x11c>)
    f846:	613b      	str	r3, [r7, #16]
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
    f848:	230e      	movs	r3, #14
    f84a:	18fb      	adds	r3, r7, r3
    f84c:	220e      	movs	r2, #14
    f84e:	701a      	strb	r2, [r3, #0]
        break;
    f850:	e031      	b.n	f8b6 <atGetExecTime+0xa2>

    case ATECC108A:
        execution_times = device_execution_time_108;
    f852:	4b38      	ldr	r3, [pc, #224]	; (f934 <atGetExecTime+0x120>)
    f854:	613b      	str	r3, [r7, #16]
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
    f856:	230e      	movs	r3, #14
    f858:	18fb      	adds	r3, r7, r3
    f85a:	2213      	movs	r2, #19
    f85c:	701a      	strb	r2, [r3, #0]
        break;
    f85e:	e02a      	b.n	f8b6 <atGetExecTime+0xa2>

    case ATECC508A:
        execution_times = device_execution_time_508;
    f860:	4b35      	ldr	r3, [pc, #212]	; (f938 <atGetExecTime+0x124>)
    f862:	613b      	str	r3, [r7, #16]
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
    f864:	230e      	movs	r3, #14
    f866:	18fb      	adds	r3, r7, r3
    f868:	2214      	movs	r2, #20
    f86a:	701a      	strb	r2, [r3, #0]
        break;
    f86c:	e023      	b.n	f8b6 <atGetExecTime+0xa2>

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
    f86e:	683b      	ldr	r3, [r7, #0]
    f870:	785b      	ldrb	r3, [r3, #1]
    f872:	2b28      	cmp	r3, #40	; 0x28
    f874:	d106      	bne.n	f884 <atGetExecTime+0x70>
        {
            execution_times = device_execution_time_608_m1;
    f876:	4b31      	ldr	r3, [pc, #196]	; (f93c <atGetExecTime+0x128>)
    f878:	613b      	str	r3, [r7, #16]
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
    f87a:	230e      	movs	r3, #14
    f87c:	18fb      	adds	r3, r7, r3
    f87e:	2216      	movs	r2, #22
    f880:	701a      	strb	r2, [r3, #0]
        {
            // Assume default M0 clock divider
            execution_times = device_execution_time_608_m0;
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
        }
        break;
    f882:	e018      	b.n	f8b6 <atGetExecTime+0xa2>
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
    f884:	683b      	ldr	r3, [r7, #0]
    f886:	785b      	ldrb	r3, [r3, #1]
    f888:	2b68      	cmp	r3, #104	; 0x68
    f88a:	d106      	bne.n	f89a <atGetExecTime+0x86>
            execution_times = device_execution_time_608_m2;
    f88c:	4b2c      	ldr	r3, [pc, #176]	; (f940 <atGetExecTime+0x12c>)
    f88e:	613b      	str	r3, [r7, #16]
            no_of_commands = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
    f890:	230e      	movs	r3, #14
    f892:	18fb      	adds	r3, r7, r3
    f894:	2216      	movs	r2, #22
    f896:	701a      	strb	r2, [r3, #0]
        break;
    f898:	e00d      	b.n	f8b6 <atGetExecTime+0xa2>
            execution_times = device_execution_time_608_m0;
    f89a:	4b2a      	ldr	r3, [pc, #168]	; (f944 <atGetExecTime+0x130>)
    f89c:	613b      	str	r3, [r7, #16]
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
    f89e:	230e      	movs	r3, #14
    f8a0:	18fb      	adds	r3, r7, r3
    f8a2:	2216      	movs	r2, #22
    f8a4:	701a      	strb	r2, [r3, #0]
        break;
    f8a6:	e006      	b.n	f8b6 <atGetExecTime+0xa2>

    default:
        no_of_commands = 0;
    f8a8:	230e      	movs	r3, #14
    f8aa:	18fb      	adds	r3, r7, r3
    f8ac:	2200      	movs	r2, #0
    f8ae:	701a      	strb	r2, [r3, #0]
        execution_times = NULL;
    f8b0:	2300      	movs	r3, #0
    f8b2:	613b      	str	r3, [r7, #16]
        break;
    f8b4:	46c0      	nop			; (mov r8, r8)
    }

    ca_cmd->execution_time_msec = UNSUPPORTED;
    f8b6:	683b      	ldr	r3, [r7, #0]
    f8b8:	2201      	movs	r2, #1
    f8ba:	4252      	negs	r2, r2
    f8bc:	805a      	strh	r2, [r3, #2]

    for (i = 0; i < no_of_commands; i++)
    f8be:	230f      	movs	r3, #15
    f8c0:	18fb      	adds	r3, r7, r3
    f8c2:	2200      	movs	r2, #0
    f8c4:	701a      	strb	r2, [r3, #0]
    f8c6:	e01b      	b.n	f900 <atGetExecTime+0xec>
    {
        if (execution_times[i].opcode == opcode)
    f8c8:	230f      	movs	r3, #15
    f8ca:	18fb      	adds	r3, r7, r3
    f8cc:	781b      	ldrb	r3, [r3, #0]
    f8ce:	009b      	lsls	r3, r3, #2
    f8d0:	693a      	ldr	r2, [r7, #16]
    f8d2:	18d3      	adds	r3, r2, r3
    f8d4:	781b      	ldrb	r3, [r3, #0]
    f8d6:	1dfa      	adds	r2, r7, #7
    f8d8:	7812      	ldrb	r2, [r2, #0]
    f8da:	429a      	cmp	r2, r3
    f8dc:	d109      	bne.n	f8f2 <atGetExecTime+0xde>
        {
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
    f8de:	230f      	movs	r3, #15
    f8e0:	18fb      	adds	r3, r7, r3
    f8e2:	781b      	ldrb	r3, [r3, #0]
    f8e4:	009b      	lsls	r3, r3, #2
    f8e6:	693a      	ldr	r2, [r7, #16]
    f8e8:	18d3      	adds	r3, r2, r3
    f8ea:	885a      	ldrh	r2, [r3, #2]
    f8ec:	683b      	ldr	r3, [r7, #0]
    f8ee:	805a      	strh	r2, [r3, #2]
            break;
    f8f0:	e00e      	b.n	f910 <atGetExecTime+0xfc>
    for (i = 0; i < no_of_commands; i++)
    f8f2:	230f      	movs	r3, #15
    f8f4:	18fb      	adds	r3, r7, r3
    f8f6:	781a      	ldrb	r2, [r3, #0]
    f8f8:	230f      	movs	r3, #15
    f8fa:	18fb      	adds	r3, r7, r3
    f8fc:	3201      	adds	r2, #1
    f8fe:	701a      	strb	r2, [r3, #0]
    f900:	230f      	movs	r3, #15
    f902:	18fa      	adds	r2, r7, r3
    f904:	230e      	movs	r3, #14
    f906:	18fb      	adds	r3, r7, r3
    f908:	7812      	ldrb	r2, [r2, #0]
    f90a:	781b      	ldrb	r3, [r3, #0]
    f90c:	429a      	cmp	r2, r3
    f90e:	d3db      	bcc.n	f8c8 <atGetExecTime+0xb4>
        }
    }

    if (ca_cmd->execution_time_msec == UNSUPPORTED)
    f910:	683b      	ldr	r3, [r7, #0]
    f912:	885b      	ldrh	r3, [r3, #2]
    f914:	4a0c      	ldr	r2, [pc, #48]	; (f948 <atGetExecTime+0x134>)
    f916:	4293      	cmp	r3, r2
    f918:	d103      	bne.n	f922 <atGetExecTime+0x10e>
    {
        status = ATCA_BAD_OPCODE;
    f91a:	2317      	movs	r3, #23
    f91c:	18fb      	adds	r3, r7, r3
    f91e:	22f2      	movs	r2, #242	; 0xf2
    f920:	701a      	strb	r2, [r3, #0]
    }

    return status;
    f922:	2317      	movs	r3, #23
    f924:	18fb      	adds	r3, r7, r3
    f926:	781b      	ldrb	r3, [r3, #0]
}
    f928:	0018      	movs	r0, r3
    f92a:	46bd      	mov	sp, r7
    f92c:	b006      	add	sp, #24
    f92e:	bd80      	pop	{r7, pc}
    f930:	00020b34 	.word	0x00020b34
    f934:	00020b6c 	.word	0x00020b6c
    f938:	00020bb8 	.word	0x00020bb8
    f93c:	00020c60 	.word	0x00020c60
    f940:	00020cb8 	.word	0x00020cb8
    f944:	00020c08 	.word	0x00020c08
    f948:	0000ffff 	.word	0x0000ffff

0000f94c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
    f94c:	b580      	push	{r7, lr}
    f94e:	b088      	sub	sp, #32
    f950:	af00      	add	r7, sp, #0
    f952:	60f8      	str	r0, [r7, #12]
    f954:	60b9      	str	r1, [r7, #8]
    f956:	607a      	str	r2, [r7, #4]
    size_t counter;
    uint16_t crc_register = 0;
    f958:	231a      	movs	r3, #26
    f95a:	18fb      	adds	r3, r7, r3
    f95c:	2200      	movs	r2, #0
    f95e:	801a      	strh	r2, [r3, #0]
    uint16_t polynom = 0x8005;
    f960:	2316      	movs	r3, #22
    f962:	18fb      	adds	r3, r7, r3
    f964:	4a2f      	ldr	r2, [pc, #188]	; (fa24 <atCRC+0xd8>)
    f966:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    f968:	2300      	movs	r3, #0
    f96a:	61fb      	str	r3, [r7, #28]
    f96c:	e043      	b.n	f9f6 <atCRC+0xaa>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    f96e:	2319      	movs	r3, #25
    f970:	18fb      	adds	r3, r7, r3
    f972:	2201      	movs	r2, #1
    f974:	701a      	strb	r2, [r3, #0]
    f976:	e036      	b.n	f9e6 <atCRC+0x9a>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    f978:	68ba      	ldr	r2, [r7, #8]
    f97a:	69fb      	ldr	r3, [r7, #28]
    f97c:	18d3      	adds	r3, r2, r3
    f97e:	781b      	ldrb	r3, [r3, #0]
    f980:	2219      	movs	r2, #25
    f982:	18ba      	adds	r2, r7, r2
    f984:	7812      	ldrb	r2, [r2, #0]
    f986:	4013      	ands	r3, r2
    f988:	b2db      	uxtb	r3, r3
    f98a:	1e5a      	subs	r2, r3, #1
    f98c:	4193      	sbcs	r3, r2
    f98e:	b2da      	uxtb	r2, r3
    f990:	2315      	movs	r3, #21
    f992:	18fb      	adds	r3, r7, r3
    f994:	701a      	strb	r2, [r3, #0]
            crc_bit = crc_register >> 15;
    f996:	231a      	movs	r3, #26
    f998:	18fb      	adds	r3, r7, r3
    f99a:	881b      	ldrh	r3, [r3, #0]
    f99c:	0bdb      	lsrs	r3, r3, #15
    f99e:	b29a      	uxth	r2, r3
    f9a0:	2314      	movs	r3, #20
    f9a2:	18fb      	adds	r3, r7, r3
    f9a4:	701a      	strb	r2, [r3, #0]
            crc_register <<= 1;
    f9a6:	231a      	movs	r3, #26
    f9a8:	18fa      	adds	r2, r7, r3
    f9aa:	231a      	movs	r3, #26
    f9ac:	18fb      	adds	r3, r7, r3
    f9ae:	881b      	ldrh	r3, [r3, #0]
    f9b0:	18db      	adds	r3, r3, r3
    f9b2:	8013      	strh	r3, [r2, #0]
            if (data_bit != crc_bit)
    f9b4:	2315      	movs	r3, #21
    f9b6:	18fa      	adds	r2, r7, r3
    f9b8:	2314      	movs	r3, #20
    f9ba:	18fb      	adds	r3, r7, r3
    f9bc:	7812      	ldrb	r2, [r2, #0]
    f9be:	781b      	ldrb	r3, [r3, #0]
    f9c0:	429a      	cmp	r2, r3
    f9c2:	d009      	beq.n	f9d8 <atCRC+0x8c>
            {
                crc_register ^= polynom;
    f9c4:	231a      	movs	r3, #26
    f9c6:	18fb      	adds	r3, r7, r3
    f9c8:	221a      	movs	r2, #26
    f9ca:	18b9      	adds	r1, r7, r2
    f9cc:	2216      	movs	r2, #22
    f9ce:	18ba      	adds	r2, r7, r2
    f9d0:	8809      	ldrh	r1, [r1, #0]
    f9d2:	8812      	ldrh	r2, [r2, #0]
    f9d4:	404a      	eors	r2, r1
    f9d6:	801a      	strh	r2, [r3, #0]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    f9d8:	2319      	movs	r3, #25
    f9da:	18fa      	adds	r2, r7, r3
    f9dc:	2319      	movs	r3, #25
    f9de:	18fb      	adds	r3, r7, r3
    f9e0:	781b      	ldrb	r3, [r3, #0]
    f9e2:	18db      	adds	r3, r3, r3
    f9e4:	7013      	strb	r3, [r2, #0]
    f9e6:	2319      	movs	r3, #25
    f9e8:	18fb      	adds	r3, r7, r3
    f9ea:	781b      	ldrb	r3, [r3, #0]
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d1c3      	bne.n	f978 <atCRC+0x2c>
    for (counter = 0; counter < length; counter++)
    f9f0:	69fb      	ldr	r3, [r7, #28]
    f9f2:	3301      	adds	r3, #1
    f9f4:	61fb      	str	r3, [r7, #28]
    f9f6:	69fa      	ldr	r2, [r7, #28]
    f9f8:	68fb      	ldr	r3, [r7, #12]
    f9fa:	429a      	cmp	r2, r3
    f9fc:	d3b7      	bcc.n	f96e <atCRC+0x22>
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    f9fe:	231a      	movs	r3, #26
    fa00:	18fb      	adds	r3, r7, r3
    fa02:	881b      	ldrh	r3, [r3, #0]
    fa04:	b2da      	uxtb	r2, r3
    fa06:	687b      	ldr	r3, [r7, #4]
    fa08:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
    fa0a:	687b      	ldr	r3, [r7, #4]
    fa0c:	3301      	adds	r3, #1
    fa0e:	221a      	movs	r2, #26
    fa10:	18ba      	adds	r2, r7, r2
    fa12:	8812      	ldrh	r2, [r2, #0]
    fa14:	0a12      	lsrs	r2, r2, #8
    fa16:	b292      	uxth	r2, r2
    fa18:	b2d2      	uxtb	r2, r2
    fa1a:	701a      	strb	r2, [r3, #0]
}
    fa1c:	46c0      	nop			; (mov r8, r8)
    fa1e:	46bd      	mov	sp, r7
    fa20:	b008      	add	sp, #32
    fa22:	bd80      	pop	{r7, pc}
    fa24:	ffff8005 	.word	0xffff8005

0000fa28 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
    fa28:	b580      	push	{r7, lr}
    fa2a:	b084      	sub	sp, #16
    fa2c:	af00      	add	r7, sp, #0
    fa2e:	6078      	str	r0, [r7, #4]
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    fa30:	687b      	ldr	r3, [r7, #4]
    fa32:	785a      	ldrb	r2, [r3, #1]
    fa34:	230f      	movs	r3, #15
    fa36:	18fb      	adds	r3, r7, r3
    fa38:	3a02      	subs	r2, #2
    fa3a:	701a      	strb	r2, [r3, #0]
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
    fa3c:	687b      	ldr	r3, [r7, #4]
    fa3e:	1c5a      	adds	r2, r3, #1
    fa40:	230f      	movs	r3, #15
    fa42:	18fb      	adds	r3, r7, r3
    fa44:	781b      	ldrb	r3, [r3, #0]
    fa46:	18d3      	adds	r3, r2, r3
    fa48:	60bb      	str	r3, [r7, #8]

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
    fa4a:	230f      	movs	r3, #15
    fa4c:	18fb      	adds	r3, r7, r3
    fa4e:	7818      	ldrb	r0, [r3, #0]
    fa50:	687b      	ldr	r3, [r7, #4]
    fa52:	3301      	adds	r3, #1
    fa54:	68ba      	ldr	r2, [r7, #8]
    fa56:	0019      	movs	r1, r3
    fa58:	4b02      	ldr	r3, [pc, #8]	; (fa64 <atCalcCrc+0x3c>)
    fa5a:	4798      	blx	r3
}
    fa5c:	46c0      	nop			; (mov r8, r8)
    fa5e:	46bd      	mov	sp, r7
    fa60:	b004      	add	sp, #16
    fa62:	bd80      	pop	{r7, pc}
    fa64:	0000f94d 	.word	0x0000f94d

0000fa68 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
    fa68:	b580      	push	{r7, lr}
    fa6a:	b084      	sub	sp, #16
    fa6c:	af00      	add	r7, sp, #0
    fa6e:	6078      	str	r0, [r7, #4]
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
    fa70:	230f      	movs	r3, #15
    fa72:	18fb      	adds	r3, r7, r3
    fa74:	687a      	ldr	r2, [r7, #4]
    fa76:	7812      	ldrb	r2, [r2, #0]
    fa78:	701a      	strb	r2, [r3, #0]

    count -= ATCA_CRC_SIZE;
    fa7a:	230f      	movs	r3, #15
    fa7c:	18fb      	adds	r3, r7, r3
    fa7e:	220f      	movs	r2, #15
    fa80:	18ba      	adds	r2, r7, r2
    fa82:	7812      	ldrb	r2, [r2, #0]
    fa84:	3a02      	subs	r2, #2
    fa86:	701a      	strb	r2, [r3, #0]
    atCRC(count, response, crc);
    fa88:	230f      	movs	r3, #15
    fa8a:	18fb      	adds	r3, r7, r3
    fa8c:	781b      	ldrb	r3, [r3, #0]
    fa8e:	220c      	movs	r2, #12
    fa90:	18ba      	adds	r2, r7, r2
    fa92:	6879      	ldr	r1, [r7, #4]
    fa94:	0018      	movs	r0, r3
    fa96:	4b10      	ldr	r3, [pc, #64]	; (fad8 <atCheckCrc+0x70>)
    fa98:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
    fa9a:	230c      	movs	r3, #12
    fa9c:	18fb      	adds	r3, r7, r3
    fa9e:	781a      	ldrb	r2, [r3, #0]
    faa0:	230f      	movs	r3, #15
    faa2:	18fb      	adds	r3, r7, r3
    faa4:	781b      	ldrb	r3, [r3, #0]
    faa6:	6879      	ldr	r1, [r7, #4]
    faa8:	18cb      	adds	r3, r1, r3
    faaa:	781b      	ldrb	r3, [r3, #0]
    faac:	429a      	cmp	r2, r3
    faae:	d10d      	bne.n	facc <atCheckCrc+0x64>
    fab0:	230c      	movs	r3, #12
    fab2:	18fb      	adds	r3, r7, r3
    fab4:	785a      	ldrb	r2, [r3, #1]
    fab6:	230f      	movs	r3, #15
    fab8:	18fb      	adds	r3, r7, r3
    faba:	781b      	ldrb	r3, [r3, #0]
    fabc:	3301      	adds	r3, #1
    fabe:	6879      	ldr	r1, [r7, #4]
    fac0:	18cb      	adds	r3, r1, r3
    fac2:	781b      	ldrb	r3, [r3, #0]
    fac4:	429a      	cmp	r2, r3
    fac6:	d101      	bne.n	facc <atCheckCrc+0x64>
    fac8:	2300      	movs	r3, #0
    faca:	e000      	b.n	face <atCheckCrc+0x66>
    facc:	23e5      	movs	r3, #229	; 0xe5
}
    face:	0018      	movs	r0, r3
    fad0:	46bd      	mov	sp, r7
    fad2:	b004      	add	sp, #16
    fad4:	bd80      	pop	{r7, pc}
    fad6:	46c0      	nop			; (mov r8, r8)
    fad8:	0000f94d 	.word	0x0000f94d

0000fadc <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    fadc:	b580      	push	{r7, lr}
    fade:	b084      	sub	sp, #16
    fae0:	af00      	add	r7, sp, #0
    fae2:	6078      	str	r0, [r7, #4]
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    fae4:	230c      	movs	r3, #12
    fae6:	18fb      	adds	r3, r7, r3
    fae8:	4a1d      	ldr	r2, [pc, #116]	; (fb60 <isATCAError+0x84>)
    faea:	6812      	ldr	r2, [r2, #0]
    faec:	601a      	str	r2, [r3, #0]

    if (memcmp(data, good, 4) == 0)
    faee:	230c      	movs	r3, #12
    faf0:	18f9      	adds	r1, r7, r3
    faf2:	687b      	ldr	r3, [r7, #4]
    faf4:	2204      	movs	r2, #4
    faf6:	0018      	movs	r0, r3
    faf8:	4b1a      	ldr	r3, [pc, #104]	; (fb64 <isATCAError+0x88>)
    fafa:	4798      	blx	r3
    fafc:	1e03      	subs	r3, r0, #0
    fafe:	d101      	bne.n	fb04 <isATCAError+0x28>
    {
        return ATCA_SUCCESS;
    fb00:	2300      	movs	r3, #0
    fb02:	e028      	b.n	fb56 <isATCAError+0x7a>
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    fb04:	687b      	ldr	r3, [r7, #4]
    fb06:	781b      	ldrb	r3, [r3, #0]
    fb08:	2b04      	cmp	r3, #4
    fb0a:	d123      	bne.n	fb54 <isATCAError+0x78>
    {
        switch (data[1])
    fb0c:	687b      	ldr	r3, [r7, #4]
    fb0e:	3301      	adds	r3, #1
    fb10:	781b      	ldrb	r3, [r3, #0]
    fb12:	2b07      	cmp	r3, #7
    fb14:	d014      	beq.n	fb40 <isATCAError+0x64>
    fb16:	dc06      	bgt.n	fb26 <isATCAError+0x4a>
    fb18:	2b03      	cmp	r3, #3
    fb1a:	d00d      	beq.n	fb38 <isATCAError+0x5c>
    fb1c:	2b05      	cmp	r3, #5
    fb1e:	d00d      	beq.n	fb3c <isATCAError+0x60>
    fb20:	2b01      	cmp	r3, #1
    fb22:	d007      	beq.n	fb34 <isATCAError+0x58>
    fb24:	e014      	b.n	fb50 <isATCAError+0x74>
    fb26:	2b11      	cmp	r3, #17
    fb28:	d00e      	beq.n	fb48 <isATCAError+0x6c>
    fb2a:	2bff      	cmp	r3, #255	; 0xff
    fb2c:	d00e      	beq.n	fb4c <isATCAError+0x70>
    fb2e:	2b0f      	cmp	r3, #15
    fb30:	d008      	beq.n	fb44 <isATCAError+0x68>
    fb32:	e00d      	b.n	fb50 <isATCAError+0x74>
        {
        case 0x01: // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    fb34:	23d1      	movs	r3, #209	; 0xd1
    fb36:	e00e      	b.n	fb56 <isATCAError+0x7a>
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    fb38:	23d2      	movs	r3, #210	; 0xd2
    fb3a:	e00c      	b.n	fb56 <isATCAError+0x7a>
            break;
        case 0x05: // computation error during ECC processing causing invalid results
            return ATCA_STATUS_ECC;
    fb3c:	23d6      	movs	r3, #214	; 0xd6
    fb3e:	e00a      	b.n	fb56 <isATCAError+0x7a>
            break;
        case 0x07: // chip is in self test failure mode
            return ATCA_STATUS_SELFTEST_ERROR;
    fb40:	23d7      	movs	r3, #215	; 0xd7
    fb42:	e008      	b.n	fb56 <isATCAError+0x7a>
            break;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    fb44:	23f4      	movs	r3, #244	; 0xf4
    fb46:	e006      	b.n	fb56 <isATCAError+0x7a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    fb48:	23f3      	movs	r3, #243	; 0xf3
    fb4a:	e004      	b.n	fb56 <isATCAError+0x7a>
            break;
        case 0xff: // bad crc found (command not properly received by device) or other comm error
            return ATCA_STATUS_CRC;
    fb4c:	23d4      	movs	r3, #212	; 0xd4
    fb4e:	e002      	b.n	fb56 <isATCAError+0x7a>
            break;
        default:
            return ATCA_GEN_FAIL;
    fb50:	23e1      	movs	r3, #225	; 0xe1
    fb52:	e000      	b.n	fb56 <isATCAError+0x7a>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
    fb54:	2300      	movs	r3, #0
    }
}
    fb56:	0018      	movs	r0, r3
    fb58:	46bd      	mov	sp, r7
    fb5a:	b004      	add	sp, #16
    fb5c:	bd80      	pop	{r7, pc}
    fb5e:	46c0      	nop			; (mov r8, r8)
    fb60:	00020d10 	.word	0x00020d10
    fb64:	0001c1c7 	.word	0x0001c1c7

0000fb68 <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
    fb68:	b580      	push	{r7, lr}
    fb6a:	b084      	sub	sp, #16
    fb6c:	af00      	add	r7, sp, #0
    fb6e:	6078      	str	r0, [r7, #4]
    ATCADevice ca_dev = NULL;
    fb70:	2300      	movs	r3, #0
    fb72:	60fb      	str	r3, [r7, #12]

    if (cfg == NULL)
    fb74:	687b      	ldr	r3, [r7, #4]
    fb76:	2b00      	cmp	r3, #0
    fb78:	d101      	bne.n	fb7e <newATCADevice+0x16>
    {
        return NULL;
    fb7a:	2300      	movs	r3, #0
    fb7c:	e022      	b.n	fbc4 <newATCADevice+0x5c>
    }

    ca_dev = (ATCADevice)malloc(sizeof(struct atca_device));
    fb7e:	2008      	movs	r0, #8
    fb80:	4b12      	ldr	r3, [pc, #72]	; (fbcc <newATCADevice+0x64>)
    fb82:	4798      	blx	r3
    fb84:	0003      	movs	r3, r0
    fb86:	60fb      	str	r3, [r7, #12]
    ca_dev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    fb88:	687b      	ldr	r3, [r7, #4]
    fb8a:	785b      	ldrb	r3, [r3, #1]
    fb8c:	0018      	movs	r0, r3
    fb8e:	4b10      	ldr	r3, [pc, #64]	; (fbd0 <newATCADevice+0x68>)
    fb90:	4798      	blx	r3
    fb92:	0002      	movs	r2, r0
    fb94:	68fb      	ldr	r3, [r7, #12]
    fb96:	601a      	str	r2, [r3, #0]
    ca_dev->mIface    = (ATCAIface)newATCAIface(cfg);
    fb98:	687b      	ldr	r3, [r7, #4]
    fb9a:	0018      	movs	r0, r3
    fb9c:	4b0d      	ldr	r3, [pc, #52]	; (fbd4 <newATCADevice+0x6c>)
    fb9e:	4798      	blx	r3
    fba0:	0002      	movs	r2, r0
    fba2:	68fb      	ldr	r3, [r7, #12]
    fba4:	605a      	str	r2, [r3, #4]

    if (ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    fba6:	68fb      	ldr	r3, [r7, #12]
    fba8:	681b      	ldr	r3, [r3, #0]
    fbaa:	2b00      	cmp	r3, #0
    fbac:	d003      	beq.n	fbb6 <newATCADevice+0x4e>
    fbae:	68fb      	ldr	r3, [r7, #12]
    fbb0:	685b      	ldr	r3, [r3, #4]
    fbb2:	2b00      	cmp	r3, #0
    fbb4:	d105      	bne.n	fbc2 <newATCADevice+0x5a>
    {
        free(ca_dev);
    fbb6:	68fb      	ldr	r3, [r7, #12]
    fbb8:	0018      	movs	r0, r3
    fbba:	4b07      	ldr	r3, [pc, #28]	; (fbd8 <newATCADevice+0x70>)
    fbbc:	4798      	blx	r3
        ca_dev = NULL;
    fbbe:	2300      	movs	r3, #0
    fbc0:	60fb      	str	r3, [r7, #12]
    }

    return ca_dev;
    fbc2:	68fb      	ldr	r3, [r7, #12]
}
    fbc4:	0018      	movs	r0, r3
    fbc6:	46bd      	mov	sp, r7
    fbc8:	b004      	add	sp, #16
    fbca:	bd80      	pop	{r7, pc}
    fbcc:	0001c165 	.word	0x0001c165
    fbd0:	0000f795 	.word	0x0000f795
    fbd4:	0000fc51 	.word	0x0000fc51
    fbd8:	0001c179 	.word	0x0001c179

0000fbdc <atGetCommands>:
/** \brief returns a reference to the ATCACommand object for the device
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    fbdc:	b580      	push	{r7, lr}
    fbde:	b082      	sub	sp, #8
    fbe0:	af00      	add	r7, sp, #0
    fbe2:	6078      	str	r0, [r7, #4]
    return dev->mCommands;
    fbe4:	687b      	ldr	r3, [r7, #4]
    fbe6:	681b      	ldr	r3, [r3, #0]
}
    fbe8:	0018      	movs	r0, r3
    fbea:	46bd      	mov	sp, r7
    fbec:	b002      	add	sp, #8
    fbee:	bd80      	pop	{r7, pc}

0000fbf0 <atGetIFace>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    fbf0:	b580      	push	{r7, lr}
    fbf2:	b082      	sub	sp, #8
    fbf4:	af00      	add	r7, sp, #0
    fbf6:	6078      	str	r0, [r7, #4]
    return dev->mIface;
    fbf8:	687b      	ldr	r3, [r7, #4]
    fbfa:	685b      	ldr	r3, [r3, #4]
}
    fbfc:	0018      	movs	r0, r3
    fbfe:	46bd      	mov	sp, r7
    fc00:	b002      	add	sp, #8
    fc02:	bd80      	pop	{r7, pc}

0000fc04 <deleteATCADevice>:
/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 *
 */
void deleteATCADevice(ATCADevice *ca_dev)   // destructor
{
    fc04:	b580      	push	{r7, lr}
    fc06:	b084      	sub	sp, #16
    fc08:	af00      	add	r7, sp, #0
    fc0a:	6078      	str	r0, [r7, #4]
    struct atca_device *dev = *ca_dev;
    fc0c:	687b      	ldr	r3, [r7, #4]
    fc0e:	681b      	ldr	r3, [r3, #0]
    fc10:	60fb      	str	r3, [r7, #12]

    if (*ca_dev)
    fc12:	687b      	ldr	r3, [r7, #4]
    fc14:	681b      	ldr	r3, [r3, #0]
    fc16:	2b00      	cmp	r3, #0
    fc18:	d00d      	beq.n	fc36 <deleteATCADevice+0x32>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    fc1a:	68fb      	ldr	r3, [r7, #12]
    fc1c:	0018      	movs	r0, r3
    fc1e:	4b09      	ldr	r3, [pc, #36]	; (fc44 <deleteATCADevice+0x40>)
    fc20:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
    fc22:	68fb      	ldr	r3, [r7, #12]
    fc24:	3304      	adds	r3, #4
    fc26:	0018      	movs	r0, r3
    fc28:	4b07      	ldr	r3, [pc, #28]	; (fc48 <deleteATCADevice+0x44>)
    fc2a:	4798      	blx	r3
        free((void*)*ca_dev);
    fc2c:	687b      	ldr	r3, [r7, #4]
    fc2e:	681b      	ldr	r3, [r3, #0]
    fc30:	0018      	movs	r0, r3
    fc32:	4b06      	ldr	r3, [pc, #24]	; (fc4c <deleteATCADevice+0x48>)
    fc34:	4798      	blx	r3
    }

    *ca_dev = NULL;
    fc36:	687b      	ldr	r3, [r7, #4]
    fc38:	2200      	movs	r2, #0
    fc3a:	601a      	str	r2, [r3, #0]
}
    fc3c:	46c0      	nop			; (mov r8, r8)
    fc3e:	46bd      	mov	sp, r7
    fc40:	b004      	add	sp, #16
    fc42:	bd80      	pop	{r7, pc}
    fc44:	0000f7e9 	.word	0x0000f7e9
    fc48:	0000fded 	.word	0x0000fded
    fc4c:	0001c179 	.word	0x0001c179

0000fc50 <newATCAIface>:
 * \param[in] cfg  points to the logical configuration for the interface
 * \return ATCAIface
 */

ATCAIface newATCAIface(ATCAIfaceCfg *cfg)  // constructor
{
    fc50:	b580      	push	{r7, lr}
    fc52:	b084      	sub	sp, #16
    fc54:	af00      	add	r7, sp, #0
    fc56:	6078      	str	r0, [r7, #4]
    ATCAIface ca_iface;

    ca_iface = (ATCAIface)malloc(sizeof(struct atca_iface));
    fc58:	2028      	movs	r0, #40	; 0x28
    fc5a:	4b0e      	ldr	r3, [pc, #56]	; (fc94 <newATCAIface+0x44>)
    fc5c:	4798      	blx	r3
    fc5e:	0003      	movs	r3, r0
    fc60:	60fb      	str	r3, [r7, #12]
    ca_iface->mType = cfg->iface_type;
    fc62:	687b      	ldr	r3, [r7, #4]
    fc64:	781a      	ldrb	r2, [r3, #0]
    fc66:	68fb      	ldr	r3, [r7, #12]
    fc68:	701a      	strb	r2, [r3, #0]
    ca_iface->mIfaceCFG = cfg;
    fc6a:	68fb      	ldr	r3, [r7, #12]
    fc6c:	687a      	ldr	r2, [r7, #4]
    fc6e:	605a      	str	r2, [r3, #4]

    if (atinit(ca_iface) != ATCA_SUCCESS)
    fc70:	68fb      	ldr	r3, [r7, #12]
    fc72:	0018      	movs	r0, r3
    fc74:	4b08      	ldr	r3, [pc, #32]	; (fc98 <newATCAIface+0x48>)
    fc76:	4798      	blx	r3
    fc78:	1e03      	subs	r3, r0, #0
    fc7a:	d005      	beq.n	fc88 <newATCAIface+0x38>
    {
        free(ca_iface);
    fc7c:	68fb      	ldr	r3, [r7, #12]
    fc7e:	0018      	movs	r0, r3
    fc80:	4b06      	ldr	r3, [pc, #24]	; (fc9c <newATCAIface+0x4c>)
    fc82:	4798      	blx	r3
        ca_iface = NULL;
    fc84:	2300      	movs	r3, #0
    fc86:	60fb      	str	r3, [r7, #12]
    }

    return ca_iface;
    fc88:	68fb      	ldr	r3, [r7, #12]
}
    fc8a:	0018      	movs	r0, r3
    fc8c:	46bd      	mov	sp, r7
    fc8e:	b004      	add	sp, #16
    fc90:	bd80      	pop	{r7, pc}
    fc92:	46c0      	nop			; (mov r8, r8)
    fc94:	0001c165 	.word	0x0001c165
    fc98:	0000fca1 	.word	0x0000fca1
    fc9c:	0001c179 	.word	0x0001c179

0000fca0 <atinit>:
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS atinit(ATCAIface ca_iface)
{
    fca0:	b590      	push	{r4, r7, lr}
    fca2:	b08d      	sub	sp, #52	; 0x34
    fca4:	af00      	add	r7, sp, #0
    fca6:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    fca8:	232f      	movs	r3, #47	; 0x2f
    fcaa:	18fb      	adds	r3, r7, r3
    fcac:	22f0      	movs	r2, #240	; 0xf0
    fcae:	701a      	strb	r2, [r3, #0]
    ATCAHAL_t hal;

    _atinit(ca_iface, &hal);
    fcb0:	2308      	movs	r3, #8
    fcb2:	18fa      	adds	r2, r7, r3
    fcb4:	687b      	ldr	r3, [r7, #4]
    fcb6:	0011      	movs	r1, r2
    fcb8:	0018      	movs	r0, r3
    fcba:	4b14      	ldr	r3, [pc, #80]	; (fd0c <atinit+0x6c>)
    fcbc:	4798      	blx	r3

    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
    fcbe:	687b      	ldr	r3, [r7, #4]
    fcc0:	689a      	ldr	r2, [r3, #8]
    fcc2:	687b      	ldr	r3, [r7, #4]
    fcc4:	6859      	ldr	r1, [r3, #4]
    fcc6:	232f      	movs	r3, #47	; 0x2f
    fcc8:	18fc      	adds	r4, r7, r3
    fcca:	2308      	movs	r3, #8
    fccc:	18fb      	adds	r3, r7, r3
    fcce:	0018      	movs	r0, r3
    fcd0:	4790      	blx	r2
    fcd2:	0003      	movs	r3, r0
    fcd4:	7023      	strb	r3, [r4, #0]
    if (status == ATCA_SUCCESS)
    fcd6:	232f      	movs	r3, #47	; 0x2f
    fcd8:	18fb      	adds	r3, r7, r3
    fcda:	781b      	ldrb	r3, [r3, #0]
    fcdc:	2b00      	cmp	r3, #0
    fcde:	d10d      	bne.n	fcfc <atinit+0x5c>
    {
        ca_iface->hal_data = hal.hal_data;
    fce0:	2308      	movs	r3, #8
    fce2:	18fb      	adds	r3, r7, r3
    fce4:	6a1a      	ldr	r2, [r3, #32]
    fce6:	687b      	ldr	r3, [r7, #4]
    fce8:	625a      	str	r2, [r3, #36]	; 0x24

        // Perform the post init
        status = ca_iface->atpostinit(ca_iface);
    fcea:	687b      	ldr	r3, [r7, #4]
    fcec:	68db      	ldr	r3, [r3, #12]
    fcee:	222f      	movs	r2, #47	; 0x2f
    fcf0:	18bc      	adds	r4, r7, r2
    fcf2:	687a      	ldr	r2, [r7, #4]
    fcf4:	0010      	movs	r0, r2
    fcf6:	4798      	blx	r3
    fcf8:	0003      	movs	r3, r0
    fcfa:	7023      	strb	r3, [r4, #0]
    }

    return status;
    fcfc:	232f      	movs	r3, #47	; 0x2f
    fcfe:	18fb      	adds	r3, r7, r3
    fd00:	781b      	ldrb	r3, [r3, #0]
}
    fd02:	0018      	movs	r0, r3
    fd04:	46bd      	mov	sp, r7
    fd06:	b00d      	add	sp, #52	; 0x34
    fd08:	bd90      	pop	{r4, r7, pc}
    fd0a:	46c0      	nop			; (mov r8, r8)
    fd0c:	0000fe31 	.word	0x0000fe31

0000fd10 <atsend>:
 * \param[in] txdata    pointer to the data to be transmitted to the device
 * \param[in] txlength  The total number of bytes to be transmitted to the device
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
    fd10:	b580      	push	{r7, lr}
    fd12:	b084      	sub	sp, #16
    fd14:	af00      	add	r7, sp, #0
    fd16:	60f8      	str	r0, [r7, #12]
    fd18:	60b9      	str	r1, [r7, #8]
    fd1a:	607a      	str	r2, [r7, #4]
    return ca_iface->atsend(ca_iface, txdata, txlength);
    fd1c:	68fb      	ldr	r3, [r7, #12]
    fd1e:	691b      	ldr	r3, [r3, #16]
    fd20:	687a      	ldr	r2, [r7, #4]
    fd22:	68b9      	ldr	r1, [r7, #8]
    fd24:	68f8      	ldr	r0, [r7, #12]
    fd26:	4798      	blx	r3
    fd28:	0003      	movs	r3, r0
}
    fd2a:	0018      	movs	r0, r3
    fd2c:	46bd      	mov	sp, r7
    fd2e:	b004      	add	sp, #16
    fd30:	bd80      	pop	{r7, pc}

0000fd32 <atreceive>:
 * \param[in] rxdata   pointer to the data to be stored from device
 * \param[in] rxlength  pointer to holds the number of bytes to be received from device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
    fd32:	b580      	push	{r7, lr}
    fd34:	b084      	sub	sp, #16
    fd36:	af00      	add	r7, sp, #0
    fd38:	60f8      	str	r0, [r7, #12]
    fd3a:	60b9      	str	r1, [r7, #8]
    fd3c:	607a      	str	r2, [r7, #4]
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
    fd3e:	68fb      	ldr	r3, [r7, #12]
    fd40:	695b      	ldr	r3, [r3, #20]
    fd42:	687a      	ldr	r2, [r7, #4]
    fd44:	68b9      	ldr	r1, [r7, #8]
    fd46:	68f8      	ldr	r0, [r7, #12]
    fd48:	4798      	blx	r3
    fd4a:	0003      	movs	r3, r0
}
    fd4c:	0018      	movs	r0, r3
    fd4e:	46bd      	mov	sp, r7
    fd50:	b004      	add	sp, #16
    fd52:	bd80      	pop	{r7, pc}

0000fd54 <atwake>:
 *  User should not call this function directly,instead  use atcab_wakeup() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
    fd54:	b580      	push	{r7, lr}
    fd56:	b082      	sub	sp, #8
    fd58:	af00      	add	r7, sp, #0
    fd5a:	6078      	str	r0, [r7, #4]
    return ca_iface->atwake(ca_iface);
    fd5c:	687b      	ldr	r3, [r7, #4]
    fd5e:	699b      	ldr	r3, [r3, #24]
    fd60:	687a      	ldr	r2, [r7, #4]
    fd62:	0010      	movs	r0, r2
    fd64:	4798      	blx	r3
    fd66:	0003      	movs	r3, r0
}
    fd68:	0018      	movs	r0, r3
    fd6a:	46bd      	mov	sp, r7
    fd6c:	b002      	add	sp, #8
    fd6e:	bd80      	pop	{r7, pc}

0000fd70 <atidle>:
 *  User should not call this function directly,instead  use atcab_idle() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
    fd70:	b590      	push	{r4, r7, lr}
    fd72:	b085      	sub	sp, #20
    fd74:	af00      	add	r7, sp, #0
    fd76:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
    fd78:	687b      	ldr	r3, [r7, #4]
    fd7a:	69db      	ldr	r3, [r3, #28]
    fd7c:	220f      	movs	r2, #15
    fd7e:	18bc      	adds	r4, r7, r2
    fd80:	687a      	ldr	r2, [r7, #4]
    fd82:	0010      	movs	r0, r2
    fd84:	4798      	blx	r3
    fd86:	0003      	movs	r3, r0
    fd88:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    fd8a:	2001      	movs	r0, #1
    fd8c:	4b04      	ldr	r3, [pc, #16]	; (fda0 <atidle+0x30>)
    fd8e:	4798      	blx	r3
    return status;
    fd90:	230f      	movs	r3, #15
    fd92:	18fb      	adds	r3, r7, r3
    fd94:	781b      	ldrb	r3, [r3, #0]
}
    fd96:	0018      	movs	r0, r3
    fd98:	46bd      	mov	sp, r7
    fd9a:	b005      	add	sp, #20
    fd9c:	bd90      	pop	{r4, r7, pc}
    fd9e:	46c0      	nop			; (mov r8, r8)
    fda0:	00012395 	.word	0x00012395

0000fda4 <atsleep>:
 *  User should not call this function directly,instead  use atcab_sleep() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsleep(ATCAIface ca_iface)
{
    fda4:	b590      	push	{r4, r7, lr}
    fda6:	b085      	sub	sp, #20
    fda8:	af00      	add	r7, sp, #0
    fdaa:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = ca_iface->atsleep(ca_iface);
    fdac:	687b      	ldr	r3, [r7, #4]
    fdae:	6a1b      	ldr	r3, [r3, #32]
    fdb0:	220f      	movs	r2, #15
    fdb2:	18bc      	adds	r4, r7, r2
    fdb4:	687a      	ldr	r2, [r7, #4]
    fdb6:	0010      	movs	r0, r2
    fdb8:	4798      	blx	r3
    fdba:	0003      	movs	r3, r0
    fdbc:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    fdbe:	2001      	movs	r0, #1
    fdc0:	4b04      	ldr	r3, [pc, #16]	; (fdd4 <atsleep+0x30>)
    fdc2:	4798      	blx	r3
    return status;
    fdc4:	230f      	movs	r3, #15
    fdc6:	18fb      	adds	r3, r7, r3
    fdc8:	781b      	ldrb	r3, [r3, #0]
}
    fdca:	0018      	movs	r0, r3
    fdcc:	46bd      	mov	sp, r7
    fdce:	b005      	add	sp, #20
    fdd0:	bd90      	pop	{r4, r7, pc}
    fdd2:	46c0      	nop			; (mov r8, r8)
    fdd4:	00012395 	.word	0x00012395

0000fdd8 <atgetifacecfg>:
/** \brief This function returns the pointer to Interface configuration of the Crypto Auth device.
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return returns the pointer to ATCAIfaceCfg.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    fdd8:	b580      	push	{r7, lr}
    fdda:	b082      	sub	sp, #8
    fddc:	af00      	add	r7, sp, #0
    fdde:	6078      	str	r0, [r7, #4]
    return ca_iface->mIfaceCFG;
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	685b      	ldr	r3, [r3, #4]
}
    fde4:	0018      	movs	r0, r3
    fde6:	46bd      	mov	sp, r7
    fde8:	b002      	add	sp, #8
    fdea:	bd80      	pop	{r7, pc}

0000fdec <deleteATCAIface>:

/** \brief destructor for ATCAIface objects
 * \param[in] ca_iface  points to the logical configuration for the interface
 */
void deleteATCAIface(ATCAIface *ca_iface) // destructor
{
    fdec:	b580      	push	{r7, lr}
    fdee:	b082      	sub	sp, #8
    fdf0:	af00      	add	r7, sp, #0
    fdf2:	6078      	str	r0, [r7, #4]
    if (*ca_iface)
    fdf4:	687b      	ldr	r3, [r7, #4]
    fdf6:	681b      	ldr	r3, [r3, #0]
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	d00e      	beq.n	fe1a <deleteATCAIface+0x2e>
    {
        hal_iface_release( (*ca_iface)->mType, (*ca_iface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    fdfc:	687b      	ldr	r3, [r7, #4]
    fdfe:	681b      	ldr	r3, [r3, #0]
    fe00:	781a      	ldrb	r2, [r3, #0]
    fe02:	687b      	ldr	r3, [r7, #4]
    fe04:	681b      	ldr	r3, [r3, #0]
    fe06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe08:	0019      	movs	r1, r3
    fe0a:	0010      	movs	r0, r2
    fe0c:	4b06      	ldr	r3, [pc, #24]	; (fe28 <deleteATCAIface+0x3c>)
    fe0e:	4798      	blx	r3
        free((void*)*ca_iface);
    fe10:	687b      	ldr	r3, [r7, #4]
    fe12:	681b      	ldr	r3, [r3, #0]
    fe14:	0018      	movs	r0, r3
    fe16:	4b05      	ldr	r3, [pc, #20]	; (fe2c <deleteATCAIface+0x40>)
    fe18:	4798      	blx	r3
    }

    *ca_iface = NULL;
    fe1a:	687b      	ldr	r3, [r7, #4]
    fe1c:	2200      	movs	r2, #0
    fe1e:	601a      	str	r2, [r3, #0]
}
    fe20:	46c0      	nop			; (mov r8, r8)
    fe22:	46bd      	mov	sp, r7
    fe24:	b002      	add	sp, #8
    fe26:	bd80      	pop	{r7, pc}
    fe28:	00011105 	.word	0x00011105
    fe2c:	0001c179 	.word	0x0001c179

0000fe30 <_atinit>:

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
    fe30:	b580      	push	{r7, lr}
    fe32:	b082      	sub	sp, #8
    fe34:	af00      	add	r7, sp, #0
    fe36:	6078      	str	r0, [r7, #4]
    fe38:	6039      	str	r1, [r7, #0]
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
    fe3a:	687b      	ldr	r3, [r7, #4]
    fe3c:	685b      	ldr	r3, [r3, #4]
    fe3e:	683a      	ldr	r2, [r7, #0]
    fe40:	0011      	movs	r1, r2
    fe42:	0018      	movs	r0, r3
    fe44:	4b13      	ldr	r3, [pc, #76]	; (fe94 <_atinit+0x64>)
    fe46:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
    fe48:	683b      	ldr	r3, [r7, #0]
    fe4a:	681a      	ldr	r2, [r3, #0]
    fe4c:	687b      	ldr	r3, [r7, #4]
    fe4e:	609a      	str	r2, [r3, #8]
    ca_iface->atpostinit = hal->halpostinit;
    fe50:	683b      	ldr	r3, [r7, #0]
    fe52:	685a      	ldr	r2, [r3, #4]
    fe54:	687b      	ldr	r3, [r7, #4]
    fe56:	60da      	str	r2, [r3, #12]
    ca_iface->atsend     = hal->halsend;
    fe58:	683b      	ldr	r3, [r7, #0]
    fe5a:	689a      	ldr	r2, [r3, #8]
    fe5c:	687b      	ldr	r3, [r7, #4]
    fe5e:	611a      	str	r2, [r3, #16]
    ca_iface->atreceive  = hal->halreceive;
    fe60:	683b      	ldr	r3, [r7, #0]
    fe62:	68da      	ldr	r2, [r3, #12]
    fe64:	687b      	ldr	r3, [r7, #4]
    fe66:	615a      	str	r2, [r3, #20]
    ca_iface->atwake     = hal->halwake;
    fe68:	683b      	ldr	r3, [r7, #0]
    fe6a:	691a      	ldr	r2, [r3, #16]
    fe6c:	687b      	ldr	r3, [r7, #4]
    fe6e:	619a      	str	r2, [r3, #24]
    ca_iface->atsleep    = hal->halsleep;
    fe70:	683b      	ldr	r3, [r7, #0]
    fe72:	699a      	ldr	r2, [r3, #24]
    fe74:	687b      	ldr	r3, [r7, #4]
    fe76:	621a      	str	r2, [r3, #32]
    ca_iface->atidle     = hal->halidle;
    fe78:	683b      	ldr	r3, [r7, #0]
    fe7a:	695a      	ldr	r2, [r3, #20]
    fe7c:	687b      	ldr	r3, [r7, #4]
    fe7e:	61da      	str	r2, [r3, #28]
    ca_iface->hal_data   = hal->hal_data;
    fe80:	683b      	ldr	r3, [r7, #0]
    fe82:	6a1a      	ldr	r2, [r3, #32]
    fe84:	687b      	ldr	r3, [r7, #4]
    fe86:	625a      	str	r2, [r3, #36]	; 0x24

    return ATCA_SUCCESS;
    fe88:	2300      	movs	r3, #0
}
    fe8a:	0018      	movs	r0, r3
    fe8c:	46bd      	mov	sp, r7
    fe8e:	b002      	add	sp, #8
    fe90:	bd80      	pop	{r7, pc}
    fe92:	46c0      	nop			; (mov r8, r8)
    fe94:	00011069 	.word	0x00011069

0000fe98 <atcab_init>:
 *  This method builds a global ATCADevice instance behinds the scenes that's used for all Basic API operations
 *  \param[in] cfg      pointer that holds the interface configuration.  This is usually a predefined configuration found in atca_cfgs.h
 *  \return    ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_init(ATCAIfaceCfg *cfg)
{
    fe98:	b5b0      	push	{r4, r5, r7, lr}
    fe9a:	b086      	sub	sp, #24
    fe9c:	af02      	add	r7, sp, #8
    fe9e:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    fea0:	230f      	movs	r3, #15
    fea2:	18fb      	adds	r3, r7, r3
    fea4:	22e1      	movs	r2, #225	; 0xe1
    fea6:	701a      	strb	r2, [r3, #0]

    if (_gDevice)       // if there's already a device created, release it
    fea8:	4b24      	ldr	r3, [pc, #144]	; (ff3c <atcab_init+0xa4>)
    feaa:	681b      	ldr	r3, [r3, #0]
    feac:	2b00      	cmp	r3, #0
    feae:	d001      	beq.n	feb4 <atcab_init+0x1c>
    {
        atcab_release();
    feb0:	4b23      	ldr	r3, [pc, #140]	; (ff40 <atcab_init+0xa8>)
    feb2:	4798      	blx	r3
    }
    _gDevice = newATCADevice(cfg);
    feb4:	687b      	ldr	r3, [r7, #4]
    feb6:	0018      	movs	r0, r3
    feb8:	4b22      	ldr	r3, [pc, #136]	; (ff44 <atcab_init+0xac>)
    feba:	4798      	blx	r3
    febc:	0002      	movs	r2, r0
    febe:	4b1f      	ldr	r3, [pc, #124]	; (ff3c <atcab_init+0xa4>)
    fec0:	601a      	str	r2, [r3, #0]

    if ((_gDevice == NULL) || (_gDevice->mIface == NULL) || (_gDevice->mCommands == NULL))
    fec2:	4b1e      	ldr	r3, [pc, #120]	; (ff3c <atcab_init+0xa4>)
    fec4:	681b      	ldr	r3, [r3, #0]
    fec6:	2b00      	cmp	r3, #0
    fec8:	d009      	beq.n	fede <atcab_init+0x46>
    feca:	4b1c      	ldr	r3, [pc, #112]	; (ff3c <atcab_init+0xa4>)
    fecc:	681b      	ldr	r3, [r3, #0]
    fece:	685b      	ldr	r3, [r3, #4]
    fed0:	2b00      	cmp	r3, #0
    fed2:	d004      	beq.n	fede <atcab_init+0x46>
    fed4:	4b19      	ldr	r3, [pc, #100]	; (ff3c <atcab_init+0xa4>)
    fed6:	681b      	ldr	r3, [r3, #0]
    fed8:	681b      	ldr	r3, [r3, #0]
    feda:	2b00      	cmp	r3, #0
    fedc:	d101      	bne.n	fee2 <atcab_init+0x4a>
    {
        return ATCA_GEN_FAIL;  // Device creation failed
    fede:	23e1      	movs	r3, #225	; 0xe1
    fee0:	e028      	b.n	ff34 <atcab_init+0x9c>

    }
    if (cfg->devtype == ATECC608A)
    fee2:	687b      	ldr	r3, [r7, #4]
    fee4:	785b      	ldrb	r3, [r3, #1]
    fee6:	2b03      	cmp	r3, #3
    fee8:	d123      	bne.n	ff32 <atcab_init+0x9a>
    {

        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
    feea:	4b14      	ldr	r3, [pc, #80]	; (ff3c <atcab_init+0xa4>)
    feec:	681b      	ldr	r3, [r3, #0]
    feee:	681b      	ldr	r3, [r3, #0]
    fef0:	1c5a      	adds	r2, r3, #1
    fef2:	230f      	movs	r3, #15
    fef4:	18fc      	adds	r4, r7, r3
    fef6:	2301      	movs	r3, #1
    fef8:	9300      	str	r3, [sp, #0]
    fefa:	0013      	movs	r3, r2
    fefc:	2213      	movs	r2, #19
    fefe:	2100      	movs	r1, #0
    ff00:	2000      	movs	r0, #0
    ff02:	4d11      	ldr	r5, [pc, #68]	; (ff48 <atcab_init+0xb0>)
    ff04:	47a8      	blx	r5
    ff06:	0003      	movs	r3, r0
    ff08:	7023      	strb	r3, [r4, #0]
    ff0a:	230f      	movs	r3, #15
    ff0c:	18fb      	adds	r3, r7, r3
    ff0e:	781b      	ldrb	r3, [r3, #0]
    ff10:	2b00      	cmp	r3, #0
    ff12:	d003      	beq.n	ff1c <atcab_init+0x84>
        {
            return status;
    ff14:	230f      	movs	r3, #15
    ff16:	18fb      	adds	r3, r7, r3
    ff18:	781b      	ldrb	r3, [r3, #0]
    ff1a:	e00b      	b.n	ff34 <atcab_init+0x9c>
        }
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
    ff1c:	4b07      	ldr	r3, [pc, #28]	; (ff3c <atcab_init+0xa4>)
    ff1e:	681b      	ldr	r3, [r3, #0]
    ff20:	681a      	ldr	r2, [r3, #0]
    ff22:	4b06      	ldr	r3, [pc, #24]	; (ff3c <atcab_init+0xa4>)
    ff24:	681b      	ldr	r3, [r3, #0]
    ff26:	681b      	ldr	r3, [r3, #0]
    ff28:	785b      	ldrb	r3, [r3, #1]
    ff2a:	2107      	movs	r1, #7
    ff2c:	438b      	bics	r3, r1
    ff2e:	b2db      	uxtb	r3, r3
    ff30:	7053      	strb	r3, [r2, #1]
    }

    return ATCA_SUCCESS;
    ff32:	2300      	movs	r3, #0
}
    ff34:	0018      	movs	r0, r3
    ff36:	46bd      	mov	sp, r7
    ff38:	b004      	add	sp, #16
    ff3a:	bdb0      	pop	{r4, r5, r7, pc}
    ff3c:	20000590 	.word	0x20000590
    ff40:	0000ff4d 	.word	0x0000ff4d
    ff44:	0000fb69 	.word	0x0000fb69
    ff48:	00011739 	.word	0x00011739

0000ff4c <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
    ff4c:	b580      	push	{r7, lr}
    ff4e:	af00      	add	r7, sp, #0
    deleteATCADevice(&_gDevice);
    ff50:	4b03      	ldr	r3, [pc, #12]	; (ff60 <atcab_release+0x14>)
    ff52:	0018      	movs	r0, r3
    ff54:	4b03      	ldr	r3, [pc, #12]	; (ff64 <atcab_release+0x18>)
    ff56:	4798      	blx	r3
    return ATCA_SUCCESS;
    ff58:	2300      	movs	r3, #0
}
    ff5a:	0018      	movs	r0, r3
    ff5c:	46bd      	mov	sp, r7
    ff5e:	bd80      	pop	{r7, pc}
    ff60:	20000590 	.word	0x20000590
    ff64:	0000fc05 	.word	0x0000fc05

0000ff68 <atcab_get_device>:

/** \brief Get the global device object.
 *  \return instance of global ATCADevice
 */
ATCADevice atcab_get_device(void)
{
    ff68:	b580      	push	{r7, lr}
    ff6a:	af00      	add	r7, sp, #0
    return _gDevice;
    ff6c:	4b02      	ldr	r3, [pc, #8]	; (ff78 <atcab_get_device+0x10>)
    ff6e:	681b      	ldr	r3, [r3, #0]
}
    ff70:	0018      	movs	r0, r3
    ff72:	46bd      	mov	sp, r7
    ff74:	bd80      	pop	{r7, pc}
    ff76:	46c0      	nop			; (mov r8, r8)
    ff78:	20000590 	.word	0x20000590

0000ff7c <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_wakeup(void)
{
    ff7c:	b580      	push	{r7, lr}
    ff7e:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    ff80:	4b07      	ldr	r3, [pc, #28]	; (ffa0 <atcab_wakeup+0x24>)
    ff82:	681b      	ldr	r3, [r3, #0]
    ff84:	2b00      	cmp	r3, #0
    ff86:	d101      	bne.n	ff8c <atcab_wakeup+0x10>
    {
        return ATCA_GEN_FAIL;
    ff88:	23e1      	movs	r3, #225	; 0xe1
    ff8a:	e006      	b.n	ff9a <atcab_wakeup+0x1e>
    }

    return atwake(_gDevice->mIface);
    ff8c:	4b04      	ldr	r3, [pc, #16]	; (ffa0 <atcab_wakeup+0x24>)
    ff8e:	681b      	ldr	r3, [r3, #0]
    ff90:	685b      	ldr	r3, [r3, #4]
    ff92:	0018      	movs	r0, r3
    ff94:	4b03      	ldr	r3, [pc, #12]	; (ffa4 <atcab_wakeup+0x28>)
    ff96:	4798      	blx	r3
    ff98:	0003      	movs	r3, r0
}
    ff9a:	0018      	movs	r0, r3
    ff9c:	46bd      	mov	sp, r7
    ff9e:	bd80      	pop	{r7, pc}
    ffa0:	20000590 	.word	0x20000590
    ffa4:	0000fd55 	.word	0x0000fd55

0000ffa8 <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_idle(void)
{
    ffa8:	b580      	push	{r7, lr}
    ffaa:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    ffac:	4b07      	ldr	r3, [pc, #28]	; (ffcc <atcab_idle+0x24>)
    ffae:	681b      	ldr	r3, [r3, #0]
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	d101      	bne.n	ffb8 <atcab_idle+0x10>
    {
        return ATCA_GEN_FAIL;
    ffb4:	23e1      	movs	r3, #225	; 0xe1
    ffb6:	e006      	b.n	ffc6 <atcab_idle+0x1e>
    }

    return atidle(_gDevice->mIface);
    ffb8:	4b04      	ldr	r3, [pc, #16]	; (ffcc <atcab_idle+0x24>)
    ffba:	681b      	ldr	r3, [r3, #0]
    ffbc:	685b      	ldr	r3, [r3, #4]
    ffbe:	0018      	movs	r0, r3
    ffc0:	4b03      	ldr	r3, [pc, #12]	; (ffd0 <atcab_idle+0x28>)
    ffc2:	4798      	blx	r3
    ffc4:	0003      	movs	r3, r0
}
    ffc6:	0018      	movs	r0, r3
    ffc8:	46bd      	mov	sp, r7
    ffca:	bd80      	pop	{r7, pc}
    ffcc:	20000590 	.word	0x20000590
    ffd0:	0000fd71 	.word	0x0000fd71

0000ffd4 <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sleep(void)
{
    ffd4:	b580      	push	{r7, lr}
    ffd6:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    ffd8:	4b07      	ldr	r3, [pc, #28]	; (fff8 <atcab_sleep+0x24>)
    ffda:	681b      	ldr	r3, [r3, #0]
    ffdc:	2b00      	cmp	r3, #0
    ffde:	d101      	bne.n	ffe4 <atcab_sleep+0x10>
    {
        return ATCA_GEN_FAIL;
    ffe0:	23e1      	movs	r3, #225	; 0xe1
    ffe2:	e006      	b.n	fff2 <atcab_sleep+0x1e>
    }

    return atsleep(_gDevice->mIface);
    ffe4:	4b04      	ldr	r3, [pc, #16]	; (fff8 <atcab_sleep+0x24>)
    ffe6:	681b      	ldr	r3, [r3, #0]
    ffe8:	685b      	ldr	r3, [r3, #4]
    ffea:	0018      	movs	r0, r3
    ffec:	4b03      	ldr	r3, [pc, #12]	; (fffc <atcab_sleep+0x28>)
    ffee:	4798      	blx	r3
    fff0:	0003      	movs	r3, r0
}
    fff2:	0018      	movs	r0, r3
    fff4:	46bd      	mov	sp, r7
    fff6:	bd80      	pop	{r7, pc}
    fff8:	20000590 	.word	0x20000590
    fffc:	0000fda5 	.word	0x0000fda5

00010000 <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS _atcab_exit(void)
{
   10000:	b580      	push	{r7, lr}
   10002:	af00      	add	r7, sp, #0
    return atcab_idle();
   10004:	4b02      	ldr	r3, [pc, #8]	; (10010 <_atcab_exit+0x10>)
   10006:	4798      	blx	r3
   10008:	0003      	movs	r3, r0
}
   1000a:	0018      	movs	r0, r3
   1000c:	46bd      	mov	sp, r7
   1000e:	bd80      	pop	{r7, pc}
   10010:	0000ffa9 	.word	0x0000ffa9

00010014 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
   10014:	b5b0      	push	{r4, r5, r7, lr}
   10016:	b084      	sub	sp, #16
   10018:	af00      	add	r7, sp, #0
   1001a:	0005      	movs	r5, r0
   1001c:	000c      	movs	r4, r1
   1001e:	0010      	movs	r0, r2
   10020:	0019      	movs	r1, r3
   10022:	1dfb      	adds	r3, r7, #7
   10024:	1c2a      	adds	r2, r5, #0
   10026:	701a      	strb	r2, [r3, #0]
   10028:	1d3b      	adds	r3, r7, #4
   1002a:	1c22      	adds	r2, r4, #0
   1002c:	801a      	strh	r2, [r3, #0]
   1002e:	1dbb      	adds	r3, r7, #6
   10030:	1c02      	adds	r2, r0, #0
   10032:	701a      	strb	r2, [r3, #0]
   10034:	1cfb      	adds	r3, r7, #3
   10036:	1c0a      	adds	r2, r1, #0
   10038:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   1003a:	230f      	movs	r3, #15
   1003c:	18fb      	adds	r3, r7, r3
   1003e:	2200      	movs	r2, #0
   10040:	701a      	strb	r2, [r3, #0]
    uint8_t mem_zone = zone & 0x03;
   10042:	230e      	movs	r3, #14
   10044:	18fb      	adds	r3, r7, r3
   10046:	1dfa      	adds	r2, r7, #7
   10048:	7812      	ldrb	r2, [r2, #0]
   1004a:	2103      	movs	r1, #3
   1004c:	400a      	ands	r2, r1
   1004e:	701a      	strb	r2, [r3, #0]

    if (addr == NULL)
   10050:	6a3b      	ldr	r3, [r7, #32]
   10052:	2b00      	cmp	r3, #0
   10054:	d101      	bne.n	1005a <atcab_get_addr+0x46>
    {
        return ATCA_BAD_PARAM;
   10056:	23e2      	movs	r3, #226	; 0xe2
   10058:	e052      	b.n	10100 <atcab_get_addr+0xec>
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
   1005a:	230e      	movs	r3, #14
   1005c:	18fb      	adds	r3, r7, r3
   1005e:	781b      	ldrb	r3, [r3, #0]
   10060:	2b00      	cmp	r3, #0
   10062:	d00b      	beq.n	1007c <atcab_get_addr+0x68>
   10064:	230e      	movs	r3, #14
   10066:	18fb      	adds	r3, r7, r3
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	2b02      	cmp	r3, #2
   1006c:	d006      	beq.n	1007c <atcab_get_addr+0x68>
   1006e:	230e      	movs	r3, #14
   10070:	18fb      	adds	r3, r7, r3
   10072:	781b      	ldrb	r3, [r3, #0]
   10074:	2b01      	cmp	r3, #1
   10076:	d001      	beq.n	1007c <atcab_get_addr+0x68>
    {
        return ATCA_BAD_PARAM;
   10078:	23e2      	movs	r3, #226	; 0xe2
   1007a:	e041      	b.n	10100 <atcab_get_addr+0xec>
    }
    do
    {
        // Initialize the addr to 00
        *addr = 0;
   1007c:	6a3b      	ldr	r3, [r7, #32]
   1007e:	2200      	movs	r2, #0
   10080:	801a      	strh	r2, [r3, #0]
        // Mask the offset
        offset = offset & (uint8_t)0x07;
   10082:	1cfb      	adds	r3, r7, #3
   10084:	1cfa      	adds	r2, r7, #3
   10086:	7812      	ldrb	r2, [r2, #0]
   10088:	2107      	movs	r1, #7
   1008a:	400a      	ands	r2, r1
   1008c:	701a      	strb	r2, [r3, #0]
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
   1008e:	230e      	movs	r3, #14
   10090:	18fb      	adds	r3, r7, r3
   10092:	781b      	ldrb	r3, [r3, #0]
   10094:	2b00      	cmp	r3, #0
   10096:	d004      	beq.n	100a2 <atcab_get_addr+0x8e>
   10098:	230e      	movs	r3, #14
   1009a:	18fb      	adds	r3, r7, r3
   1009c:	781b      	ldrb	r3, [r3, #0]
   1009e:	2b01      	cmp	r3, #1
   100a0:	d110      	bne.n	100c4 <atcab_get_addr+0xb0>
        {
            *addr = block << 3;
   100a2:	1dbb      	adds	r3, r7, #6
   100a4:	781b      	ldrb	r3, [r3, #0]
   100a6:	b29b      	uxth	r3, r3
   100a8:	00db      	lsls	r3, r3, #3
   100aa:	b29a      	uxth	r2, r3
   100ac:	6a3b      	ldr	r3, [r7, #32]
   100ae:	801a      	strh	r2, [r3, #0]
            *addr |= offset;
   100b0:	6a3b      	ldr	r3, [r7, #32]
   100b2:	881a      	ldrh	r2, [r3, #0]
   100b4:	1cfb      	adds	r3, r7, #3
   100b6:	781b      	ldrb	r3, [r3, #0]
   100b8:	b29b      	uxth	r3, r3
   100ba:	4313      	orrs	r3, r2
   100bc:	b29a      	uxth	r2, r3
   100be:	6a3b      	ldr	r3, [r7, #32]
   100c0:	801a      	strh	r2, [r3, #0]
   100c2:	e01a      	b.n	100fa <atcab_get_addr+0xe6>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
   100c4:	1d3b      	adds	r3, r7, #4
   100c6:	881b      	ldrh	r3, [r3, #0]
   100c8:	00db      	lsls	r3, r3, #3
   100ca:	b29a      	uxth	r2, r3
   100cc:	6a3b      	ldr	r3, [r7, #32]
   100ce:	801a      	strh	r2, [r3, #0]
            *addr  |= offset;
   100d0:	6a3b      	ldr	r3, [r7, #32]
   100d2:	881a      	ldrh	r2, [r3, #0]
   100d4:	1cfb      	adds	r3, r7, #3
   100d6:	781b      	ldrb	r3, [r3, #0]
   100d8:	b29b      	uxth	r3, r3
   100da:	4313      	orrs	r3, r2
   100dc:	b29a      	uxth	r2, r3
   100de:	6a3b      	ldr	r3, [r7, #32]
   100e0:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
   100e2:	6a3b      	ldr	r3, [r7, #32]
   100e4:	881b      	ldrh	r3, [r3, #0]
   100e6:	b21a      	sxth	r2, r3
   100e8:	1dbb      	adds	r3, r7, #6
   100ea:	781b      	ldrb	r3, [r3, #0]
   100ec:	021b      	lsls	r3, r3, #8
   100ee:	b21b      	sxth	r3, r3
   100f0:	4313      	orrs	r3, r2
   100f2:	b21b      	sxth	r3, r3
   100f4:	b29a      	uxth	r2, r3
   100f6:	6a3b      	ldr	r3, [r7, #32]
   100f8:	801a      	strh	r2, [r3, #0]
        }
    }
    while (0);

    return status;
   100fa:	230f      	movs	r3, #15
   100fc:	18fb      	adds	r3, r7, r3
   100fe:	781b      	ldrb	r3, [r3, #0]
}
   10100:	0018      	movs	r0, r3
   10102:	46bd      	mov	sp, r7
   10104:	b004      	add	sp, #16
   10106:	bdb0      	pop	{r4, r5, r7, pc}

00010108 <atcab_get_zone_size>:
 * \param[out] size  Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
   10108:	b580      	push	{r7, lr}
   1010a:	b084      	sub	sp, #16
   1010c:	af00      	add	r7, sp, #0
   1010e:	603a      	str	r2, [r7, #0]
   10110:	1dfb      	adds	r3, r7, #7
   10112:	1c02      	adds	r2, r0, #0
   10114:	701a      	strb	r2, [r3, #0]
   10116:	1d3b      	adds	r3, r7, #4
   10118:	1c0a      	adds	r2, r1, #0
   1011a:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   1011c:	230f      	movs	r3, #15
   1011e:	18fb      	adds	r3, r7, r3
   10120:	2200      	movs	r2, #0
   10122:	701a      	strb	r2, [r3, #0]

    if (size == NULL)
   10124:	683b      	ldr	r3, [r7, #0]
   10126:	2b00      	cmp	r3, #0
   10128:	d101      	bne.n	1012e <atcab_get_zone_size+0x26>
    {
        return ATCA_BAD_PARAM;
   1012a:	23e2      	movs	r3, #226	; 0xe2
   1012c:	e056      	b.n	101dc <atcab_get_zone_size+0xd4>
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
   1012e:	4b2d      	ldr	r3, [pc, #180]	; (101e4 <atcab_get_zone_size+0xdc>)
   10130:	681b      	ldr	r3, [r3, #0]
   10132:	685b      	ldr	r3, [r3, #4]
   10134:	685b      	ldr	r3, [r3, #4]
   10136:	785b      	ldrb	r3, [r3, #1]
   10138:	2b00      	cmp	r3, #0
   1013a:	d119      	bne.n	10170 <atcab_get_zone_size+0x68>
    {
        switch (zone)
   1013c:	1dfb      	adds	r3, r7, #7
   1013e:	781b      	ldrb	r3, [r3, #0]
   10140:	2b01      	cmp	r3, #1
   10142:	d007      	beq.n	10154 <atcab_get_zone_size+0x4c>
   10144:	2b02      	cmp	r3, #2
   10146:	d009      	beq.n	1015c <atcab_get_zone_size+0x54>
   10148:	2b00      	cmp	r3, #0
   1014a:	d10b      	bne.n	10164 <atcab_get_zone_size+0x5c>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
   1014c:	683b      	ldr	r3, [r7, #0]
   1014e:	2258      	movs	r2, #88	; 0x58
   10150:	601a      	str	r2, [r3, #0]
   10152:	e040      	b.n	101d6 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_OTP:    *size = 64; break;
   10154:	683b      	ldr	r3, [r7, #0]
   10156:	2240      	movs	r2, #64	; 0x40
   10158:	601a      	str	r2, [r3, #0]
   1015a:	e03c      	b.n	101d6 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_DATA:   *size = 32; break;
   1015c:	683b      	ldr	r3, [r7, #0]
   1015e:	2220      	movs	r2, #32
   10160:	601a      	str	r2, [r3, #0]
   10162:	e038      	b.n	101d6 <atcab_get_zone_size+0xce>
        default: status = ATCA_BAD_PARAM; break;
   10164:	230f      	movs	r3, #15
   10166:	18fb      	adds	r3, r7, r3
   10168:	22e2      	movs	r2, #226	; 0xe2
   1016a:	701a      	strb	r2, [r3, #0]
   1016c:	46c0      	nop			; (mov r8, r8)
   1016e:	e032      	b.n	101d6 <atcab_get_zone_size+0xce>
        }
    }
    else
    {
        switch (zone)
   10170:	1dfb      	adds	r3, r7, #7
   10172:	781b      	ldrb	r3, [r3, #0]
   10174:	2b01      	cmp	r3, #1
   10176:	d007      	beq.n	10188 <atcab_get_zone_size+0x80>
   10178:	2b02      	cmp	r3, #2
   1017a:	d009      	beq.n	10190 <atcab_get_zone_size+0x88>
   1017c:	2b00      	cmp	r3, #0
   1017e:	d125      	bne.n	101cc <atcab_get_zone_size+0xc4>
        {
        case ATCA_ZONE_CONFIG: *size = 128; break;
   10180:	683b      	ldr	r3, [r7, #0]
   10182:	2280      	movs	r2, #128	; 0x80
   10184:	601a      	str	r2, [r3, #0]
   10186:	e026      	b.n	101d6 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_OTP:    *size = 64; break;
   10188:	683b      	ldr	r3, [r7, #0]
   1018a:	2240      	movs	r2, #64	; 0x40
   1018c:	601a      	str	r2, [r3, #0]
   1018e:	e022      	b.n	101d6 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_DATA:
            if (slot < 8)
   10190:	1d3b      	adds	r3, r7, #4
   10192:	881b      	ldrh	r3, [r3, #0]
   10194:	2b07      	cmp	r3, #7
   10196:	d803      	bhi.n	101a0 <atcab_get_zone_size+0x98>
            {
                *size = 36;
   10198:	683b      	ldr	r3, [r7, #0]
   1019a:	2224      	movs	r2, #36	; 0x24
   1019c:	601a      	str	r2, [r3, #0]
            }
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
   1019e:	e01a      	b.n	101d6 <atcab_get_zone_size+0xce>
            else if (slot == 8)
   101a0:	1d3b      	adds	r3, r7, #4
   101a2:	881b      	ldrh	r3, [r3, #0]
   101a4:	2b08      	cmp	r3, #8
   101a6:	d104      	bne.n	101b2 <atcab_get_zone_size+0xaa>
                *size = 416;
   101a8:	683b      	ldr	r3, [r7, #0]
   101aa:	22d0      	movs	r2, #208	; 0xd0
   101ac:	0052      	lsls	r2, r2, #1
   101ae:	601a      	str	r2, [r3, #0]
            break;
   101b0:	e011      	b.n	101d6 <atcab_get_zone_size+0xce>
            else if (slot < 16)
   101b2:	1d3b      	adds	r3, r7, #4
   101b4:	881b      	ldrh	r3, [r3, #0]
   101b6:	2b0f      	cmp	r3, #15
   101b8:	d803      	bhi.n	101c2 <atcab_get_zone_size+0xba>
                *size = 72;
   101ba:	683b      	ldr	r3, [r7, #0]
   101bc:	2248      	movs	r2, #72	; 0x48
   101be:	601a      	str	r2, [r3, #0]
            break;
   101c0:	e009      	b.n	101d6 <atcab_get_zone_size+0xce>
                status = ATCA_BAD_PARAM;
   101c2:	230f      	movs	r3, #15
   101c4:	18fb      	adds	r3, r7, r3
   101c6:	22e2      	movs	r2, #226	; 0xe2
   101c8:	701a      	strb	r2, [r3, #0]
            break;
   101ca:	e004      	b.n	101d6 <atcab_get_zone_size+0xce>
        default: status = ATCA_BAD_PARAM; break;
   101cc:	230f      	movs	r3, #15
   101ce:	18fb      	adds	r3, r7, r3
   101d0:	22e2      	movs	r2, #226	; 0xe2
   101d2:	701a      	strb	r2, [r3, #0]
   101d4:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
   101d6:	230f      	movs	r3, #15
   101d8:	18fb      	adds	r3, r7, r3
   101da:	781b      	ldrb	r3, [r3, #0]
}
   101dc:	0018      	movs	r0, r3
   101de:	46bd      	mov	sp, r7
   101e0:	b004      	add	sp, #16
   101e2:	bd80      	pop	{r7, pc}
   101e4:	20000590 	.word	0x20000590

000101e8 <atcab_execute_command>:
 *
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_execute_command(ATCAPacket* packet)
{
   101e8:	b590      	push	{r4, r7, lr}
   101ea:	b087      	sub	sp, #28
   101ec:	af00      	add	r7, sp, #0
   101ee:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;
    ATCACommand ca_cmd = _gDevice->mCommands;
   101f0:	4b45      	ldr	r3, [pc, #276]	; (10308 <atcab_execute_command+0x120>)
   101f2:	681b      	ldr	r3, [r3, #0]
   101f4:	681b      	ldr	r3, [r3, #0]
   101f6:	613b      	str	r3, [r7, #16]
    ATCAIface ca_iface = _gDevice->mIface;
   101f8:	4b43      	ldr	r3, [pc, #268]	; (10308 <atcab_execute_command+0x120>)
   101fa:	681b      	ldr	r3, [r3, #0]
   101fc:	685b      	ldr	r3, [r3, #4]
   101fe:	60fb      	str	r3, [r7, #12]

    if ((status = atGetExecTime(packet->opcode, ca_cmd)) != ATCA_SUCCESS)
   10200:	687b      	ldr	r3, [r7, #4]
   10202:	789b      	ldrb	r3, [r3, #2]
   10204:	2217      	movs	r2, #23
   10206:	18bc      	adds	r4, r7, r2
   10208:	693a      	ldr	r2, [r7, #16]
   1020a:	0011      	movs	r1, r2
   1020c:	0018      	movs	r0, r3
   1020e:	4b3f      	ldr	r3, [pc, #252]	; (1030c <atcab_execute_command+0x124>)
   10210:	4798      	blx	r3
   10212:	0003      	movs	r3, r0
   10214:	7023      	strb	r3, [r4, #0]
   10216:	2317      	movs	r3, #23
   10218:	18fb      	adds	r3, r7, r3
   1021a:	781b      	ldrb	r3, [r3, #0]
   1021c:	2b00      	cmp	r3, #0
   1021e:	d003      	beq.n	10228 <atcab_execute_command+0x40>
    {
        return status;
   10220:	2317      	movs	r3, #23
   10222:	18fb      	adds	r3, r7, r3
   10224:	781b      	ldrb	r3, [r3, #0]
   10226:	e06a      	b.n	102fe <atcab_execute_command+0x116>
    }
    do
    {
        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
   10228:	2317      	movs	r3, #23
   1022a:	18fc      	adds	r4, r7, r3
   1022c:	4b38      	ldr	r3, [pc, #224]	; (10310 <atcab_execute_command+0x128>)
   1022e:	4798      	blx	r3
   10230:	0003      	movs	r3, r0
   10232:	7023      	strb	r3, [r4, #0]
   10234:	2317      	movs	r3, #23
   10236:	18fb      	adds	r3, r7, r3
   10238:	781b      	ldrb	r3, [r3, #0]
   1023a:	2b00      	cmp	r3, #0
   1023c:	d153      	bne.n	102e6 <atcab_execute_command+0xfe>
        {
            break;
        }

        // send the command
        if ((status = atsend(ca_iface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
   1023e:	687b      	ldr	r3, [r7, #4]
   10240:	785b      	ldrb	r3, [r3, #1]
   10242:	001a      	movs	r2, r3
   10244:	2317      	movs	r3, #23
   10246:	18fc      	adds	r4, r7, r3
   10248:	6879      	ldr	r1, [r7, #4]
   1024a:	68fb      	ldr	r3, [r7, #12]
   1024c:	0018      	movs	r0, r3
   1024e:	4b31      	ldr	r3, [pc, #196]	; (10314 <atcab_execute_command+0x12c>)
   10250:	4798      	blx	r3
   10252:	0003      	movs	r3, r0
   10254:	7023      	strb	r3, [r4, #0]
   10256:	2317      	movs	r3, #23
   10258:	18fb      	adds	r3, r7, r3
   1025a:	781b      	ldrb	r3, [r3, #0]
   1025c:	2b00      	cmp	r3, #0
   1025e:	d144      	bne.n	102ea <atcab_execute_command+0x102>
        {
            break;
        }

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(ca_cmd->execution_time_msec);
   10260:	693b      	ldr	r3, [r7, #16]
   10262:	885b      	ldrh	r3, [r3, #2]
   10264:	0018      	movs	r0, r3
   10266:	4b2c      	ldr	r3, [pc, #176]	; (10318 <atcab_execute_command+0x130>)
   10268:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(ca_iface, packet->data, &(packet->rxsize))) != ATCA_SUCCESS)
   1026a:	687b      	ldr	r3, [r7, #4]
   1026c:	1d99      	adds	r1, r3, #6
   1026e:	687b      	ldr	r3, [r7, #4]
   10270:	338a      	adds	r3, #138	; 0x8a
   10272:	001a      	movs	r2, r3
   10274:	2317      	movs	r3, #23
   10276:	18fc      	adds	r4, r7, r3
   10278:	68fb      	ldr	r3, [r7, #12]
   1027a:	0018      	movs	r0, r3
   1027c:	4b27      	ldr	r3, [pc, #156]	; (1031c <atcab_execute_command+0x134>)
   1027e:	4798      	blx	r3
   10280:	0003      	movs	r3, r0
   10282:	7023      	strb	r3, [r4, #0]
   10284:	2317      	movs	r3, #23
   10286:	18fb      	adds	r3, r7, r3
   10288:	781b      	ldrb	r3, [r3, #0]
   1028a:	2b00      	cmp	r3, #0
   1028c:	d12f      	bne.n	102ee <atcab_execute_command+0x106>
        {
            break;
        }

        // Check response size
        if (packet->rxsize < 4)
   1028e:	687b      	ldr	r3, [r7, #4]
   10290:	228a      	movs	r2, #138	; 0x8a
   10292:	5a9b      	ldrh	r3, [r3, r2]
   10294:	2b03      	cmp	r3, #3
   10296:	d80e      	bhi.n	102b6 <atcab_execute_command+0xce>
        {
            if (packet->rxsize > 0)
   10298:	687b      	ldr	r3, [r7, #4]
   1029a:	228a      	movs	r2, #138	; 0x8a
   1029c:	5a9b      	ldrh	r3, [r3, r2]
   1029e:	2b00      	cmp	r3, #0
   102a0:	d004      	beq.n	102ac <atcab_execute_command+0xc4>
            {
                status = ATCA_RX_FAIL;
   102a2:	2317      	movs	r3, #23
   102a4:	18fb      	adds	r3, r7, r3
   102a6:	22e6      	movs	r2, #230	; 0xe6
   102a8:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = ATCA_RX_NO_RESPONSE;
            }
            break;
   102aa:	e023      	b.n	102f4 <atcab_execute_command+0x10c>
                status = ATCA_RX_NO_RESPONSE;
   102ac:	2317      	movs	r3, #23
   102ae:	18fb      	adds	r3, r7, r3
   102b0:	22e7      	movs	r2, #231	; 0xe7
   102b2:	701a      	strb	r2, [r3, #0]
            break;
   102b4:	e01e      	b.n	102f4 <atcab_execute_command+0x10c>
        }

        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
   102b6:	687b      	ldr	r3, [r7, #4]
   102b8:	3306      	adds	r3, #6
   102ba:	2217      	movs	r2, #23
   102bc:	18bc      	adds	r4, r7, r2
   102be:	0018      	movs	r0, r3
   102c0:	4b17      	ldr	r3, [pc, #92]	; (10320 <atcab_execute_command+0x138>)
   102c2:	4798      	blx	r3
   102c4:	0003      	movs	r3, r0
   102c6:	7023      	strb	r3, [r4, #0]
   102c8:	2317      	movs	r3, #23
   102ca:	18fb      	adds	r3, r7, r3
   102cc:	781b      	ldrb	r3, [r3, #0]
   102ce:	2b00      	cmp	r3, #0
   102d0:	d10f      	bne.n	102f2 <atcab_execute_command+0x10a>
        {
            break;
        }

        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
   102d2:	687b      	ldr	r3, [r7, #4]
   102d4:	3306      	adds	r3, #6
   102d6:	2217      	movs	r2, #23
   102d8:	18bc      	adds	r4, r7, r2
   102da:	0018      	movs	r0, r3
   102dc:	4b11      	ldr	r3, [pc, #68]	; (10324 <atcab_execute_command+0x13c>)
   102de:	4798      	blx	r3
   102e0:	0003      	movs	r3, r0
   102e2:	7023      	strb	r3, [r4, #0]
   102e4:	e006      	b.n	102f4 <atcab_execute_command+0x10c>
            break;
   102e6:	46c0      	nop			; (mov r8, r8)
   102e8:	e004      	b.n	102f4 <atcab_execute_command+0x10c>
            break;
   102ea:	46c0      	nop			; (mov r8, r8)
   102ec:	e002      	b.n	102f4 <atcab_execute_command+0x10c>
            break;
   102ee:	46c0      	nop			; (mov r8, r8)
   102f0:	e000      	b.n	102f4 <atcab_execute_command+0x10c>
            break;
   102f2:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (0);

    _atcab_exit();
   102f4:	4b0c      	ldr	r3, [pc, #48]	; (10328 <atcab_execute_command+0x140>)
   102f6:	4798      	blx	r3
    return status;
   102f8:	2317      	movs	r3, #23
   102fa:	18fb      	adds	r3, r7, r3
   102fc:	781b      	ldrb	r3, [r3, #0]
   102fe:	0018      	movs	r0, r3
   10300:	46bd      	mov	sp, r7
   10302:	b007      	add	sp, #28
   10304:	bd90      	pop	{r4, r7, pc}
   10306:	46c0      	nop			; (mov r8, r8)
   10308:	20000590 	.word	0x20000590
   1030c:	0000f815 	.word	0x0000f815
   10310:	0000ff7d 	.word	0x0000ff7d
   10314:	0000fd11 	.word	0x0000fd11
   10318:	00012395 	.word	0x00012395
   1031c:	0000fd33 	.word	0x0000fd33
   10320:	0000fa69 	.word	0x0000fa69
   10324:	0000fadd 	.word	0x0000fadd
   10328:	00010001 	.word	0x00010001

0001032c <base64Char>:
 * \param[in] id     index to check
 * \param[in] rules  base64 ruleset to use
 * \return the base 64 character of the given index
 */
char base64Char(char id, const uint8_t * rules)
{
   1032c:	b580      	push	{r7, lr}
   1032e:	b082      	sub	sp, #8
   10330:	af00      	add	r7, sp, #0
   10332:	0002      	movs	r2, r0
   10334:	6039      	str	r1, [r7, #0]
   10336:	1dfb      	adds	r3, r7, #7
   10338:	701a      	strb	r2, [r3, #0]
    if (id >= 0 && (id < 26))
   1033a:	1dfb      	adds	r3, r7, #7
   1033c:	781b      	ldrb	r3, [r3, #0]
   1033e:	2b19      	cmp	r3, #25
   10340:	d804      	bhi.n	1034c <base64Char+0x20>
    {
        return (char)('A' + id);
   10342:	1dfb      	adds	r3, r7, #7
   10344:	781b      	ldrb	r3, [r3, #0]
   10346:	3341      	adds	r3, #65	; 0x41
   10348:	b2db      	uxtb	r3, r3
   1034a:	e031      	b.n	103b0 <base64Char+0x84>
    }
    if ((id >= 26) && (id < 52))
   1034c:	1dfb      	adds	r3, r7, #7
   1034e:	781b      	ldrb	r3, [r3, #0]
   10350:	2b19      	cmp	r3, #25
   10352:	d908      	bls.n	10366 <base64Char+0x3a>
   10354:	1dfb      	adds	r3, r7, #7
   10356:	781b      	ldrb	r3, [r3, #0]
   10358:	2b33      	cmp	r3, #51	; 0x33
   1035a:	d804      	bhi.n	10366 <base64Char+0x3a>
    {
        return (char)('a' + id - 26);
   1035c:	1dfb      	adds	r3, r7, #7
   1035e:	781b      	ldrb	r3, [r3, #0]
   10360:	3347      	adds	r3, #71	; 0x47
   10362:	b2db      	uxtb	r3, r3
   10364:	e024      	b.n	103b0 <base64Char+0x84>
    }
    if ((id >= 52) && (id < 62))
   10366:	1dfb      	adds	r3, r7, #7
   10368:	781b      	ldrb	r3, [r3, #0]
   1036a:	2b33      	cmp	r3, #51	; 0x33
   1036c:	d908      	bls.n	10380 <base64Char+0x54>
   1036e:	1dfb      	adds	r3, r7, #7
   10370:	781b      	ldrb	r3, [r3, #0]
   10372:	2b3d      	cmp	r3, #61	; 0x3d
   10374:	d804      	bhi.n	10380 <base64Char+0x54>
    {
        return (char)('0' + id - 52);
   10376:	1dfb      	adds	r3, r7, #7
   10378:	781b      	ldrb	r3, [r3, #0]
   1037a:	3b04      	subs	r3, #4
   1037c:	b2db      	uxtb	r3, r3
   1037e:	e017      	b.n	103b0 <base64Char+0x84>
    }
    if (id == 62)
   10380:	1dfb      	adds	r3, r7, #7
   10382:	781b      	ldrb	r3, [r3, #0]
   10384:	2b3e      	cmp	r3, #62	; 0x3e
   10386:	d102      	bne.n	1038e <base64Char+0x62>
    {
        return rules[0];
   10388:	683b      	ldr	r3, [r7, #0]
   1038a:	781b      	ldrb	r3, [r3, #0]
   1038c:	e010      	b.n	103b0 <base64Char+0x84>
    }
    if (id == 63)
   1038e:	1dfb      	adds	r3, r7, #7
   10390:	781b      	ldrb	r3, [r3, #0]
   10392:	2b3f      	cmp	r3, #63	; 0x3f
   10394:	d103      	bne.n	1039e <base64Char+0x72>
    {
        return rules[1];
   10396:	683b      	ldr	r3, [r7, #0]
   10398:	3301      	adds	r3, #1
   1039a:	781b      	ldrb	r3, [r3, #0]
   1039c:	e008      	b.n	103b0 <base64Char+0x84>
    }

    if (id == IS_EQUAL)
   1039e:	1dfb      	adds	r3, r7, #7
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	2b40      	cmp	r3, #64	; 0x40
   103a4:	d103      	bne.n	103ae <base64Char+0x82>
    {
        return rules[2];
   103a6:	683b      	ldr	r3, [r7, #0]
   103a8:	3302      	adds	r3, #2
   103aa:	781b      	ldrb	r3, [r3, #0]
   103ac:	e000      	b.n	103b0 <base64Char+0x84>
    }
    return IS_INVALID;
   103ae:	23ff      	movs	r3, #255	; 0xff
}
   103b0:	0018      	movs	r0, r3
   103b2:	46bd      	mov	sp, r7
   103b4:	b002      	add	sp, #8
   103b6:	bd80      	pop	{r7, pc}

000103b8 <atcab_base64encode_>:
    size_t          array_len,   /**< [in] The length of the byte array */
    char*           encoded,     /**< [in] The output converted to base 64 encoded characters. */
    size_t*         encoded_len, /**< [inout] Input: The size of the encoded buffer, Output: The length of the encoded base 64 character string */
    const uint8_t * rules        /**< [in] ruleset to use during encoding */
    )
{
   103b8:	b590      	push	{r4, r7, lr}
   103ba:	b08d      	sub	sp, #52	; 0x34
   103bc:	af00      	add	r7, sp, #0
   103be:	60f8      	str	r0, [r7, #12]
   103c0:	60b9      	str	r1, [r7, #8]
   103c2:	607a      	str	r2, [r7, #4]
   103c4:	603b      	str	r3, [r7, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   103c6:	232f      	movs	r3, #47	; 0x2f
   103c8:	18fb      	adds	r3, r7, r3
   103ca:	2200      	movs	r2, #0
   103cc:	701a      	strb	r2, [r3, #0]
    size_t i = 0;
   103ce:	2300      	movs	r3, #0
   103d0:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t j = 0;
   103d2:	2300      	movs	r3, #0
   103d4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t offset = 0;
   103d6:	2300      	movs	r3, #0
   103d8:	623b      	str	r3, [r7, #32]
    int id = 0;
   103da:	2300      	movs	r3, #0
   103dc:	61bb      	str	r3, [r7, #24]
    size_t out_len;

    size_t r3 = (array_len % 3);
   103de:	68ba      	ldr	r2, [r7, #8]
   103e0:	4bb8      	ldr	r3, [pc, #736]	; (106c4 <atcab_base64encode_+0x30c>)
   103e2:	2103      	movs	r1, #3
   103e4:	0010      	movs	r0, r2
   103e6:	4798      	blx	r3
   103e8:	000b      	movs	r3, r1
   103ea:	617b      	str	r3, [r7, #20]
    size_t b64_len = ((array_len * 4) / 3) + r3;
   103ec:	68bb      	ldr	r3, [r7, #8]
   103ee:	009a      	lsls	r2, r3, #2
   103f0:	4bb5      	ldr	r3, [pc, #724]	; (106c8 <atcab_base64encode_+0x310>)
   103f2:	2103      	movs	r1, #3
   103f4:	0010      	movs	r0, r2
   103f6:	4798      	blx	r3
   103f8:	0003      	movs	r3, r0
   103fa:	001a      	movs	r2, r3
   103fc:	697b      	ldr	r3, [r7, #20]
   103fe:	18d3      	adds	r3, r2, r3
   10400:	613b      	str	r3, [r7, #16]

    do
    {
        // Check the input parameters
        if (encoded == NULL || byte_array == NULL || encoded_len == NULL || !rules)
   10402:	687b      	ldr	r3, [r7, #4]
   10404:	2b00      	cmp	r3, #0
   10406:	d008      	beq.n	1041a <atcab_base64encode_+0x62>
   10408:	68fb      	ldr	r3, [r7, #12]
   1040a:	2b00      	cmp	r3, #0
   1040c:	d005      	beq.n	1041a <atcab_base64encode_+0x62>
   1040e:	683b      	ldr	r3, [r7, #0]
   10410:	2b00      	cmp	r3, #0
   10412:	d002      	beq.n	1041a <atcab_base64encode_+0x62>
   10414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10416:	2b00      	cmp	r3, #0
   10418:	d10c      	bne.n	10434 <atcab_base64encode_+0x7c>
        {
            status = ATCA_BAD_PARAM;
   1041a:	232f      	movs	r3, #47	; 0x2f
   1041c:	18fb      	adds	r3, r7, r3
   1041e:	22e2      	movs	r2, #226	; 0xe2
   10420:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Null input parameter");
   10422:	232f      	movs	r3, #47	; 0x2f
   10424:	18fb      	adds	r3, r7, r3
   10426:	781a      	ldrb	r2, [r3, #0]
   10428:	4ba8      	ldr	r3, [pc, #672]	; (106cc <atcab_base64encode_+0x314>)
   1042a:	0011      	movs	r1, r2
   1042c:	0018      	movs	r0, r3
   1042e:	4ba8      	ldr	r3, [pc, #672]	; (106d0 <atcab_base64encode_+0x318>)
   10430:	4798      	blx	r3
   10432:	e140      	b.n	106b6 <atcab_base64encode_+0x2fe>
        }

        // Set the output length.  Add the \r\n every n characters
        out_len = b64_len;
   10434:	693b      	ldr	r3, [r7, #16]
   10436:	61fb      	str	r3, [r7, #28]
        if (rules[3])
   10438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1043a:	3303      	adds	r3, #3
   1043c:	781b      	ldrb	r3, [r3, #0]
   1043e:	2b00      	cmp	r3, #0
   10440:	d00c      	beq.n	1045c <atcab_base64encode_+0xa4>
        {
            out_len += (b64_len / rules[3]) * 2;
   10442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10444:	3303      	adds	r3, #3
   10446:	781b      	ldrb	r3, [r3, #0]
   10448:	001a      	movs	r2, r3
   1044a:	4b9f      	ldr	r3, [pc, #636]	; (106c8 <atcab_base64encode_+0x310>)
   1044c:	0011      	movs	r1, r2
   1044e:	6938      	ldr	r0, [r7, #16]
   10450:	4798      	blx	r3
   10452:	0003      	movs	r3, r0
   10454:	005b      	lsls	r3, r3, #1
   10456:	69fa      	ldr	r2, [r7, #28]
   10458:	18d3      	adds	r3, r2, r3
   1045a:	61fb      	str	r3, [r7, #28]
        }

        if (*encoded_len < out_len)
   1045c:	683b      	ldr	r3, [r7, #0]
   1045e:	681a      	ldr	r2, [r3, #0]
   10460:	69fb      	ldr	r3, [r7, #28]
   10462:	429a      	cmp	r2, r3
   10464:	d20c      	bcs.n	10480 <atcab_base64encode_+0xc8>
        {
            status = ATCA_BAD_PARAM;
   10466:	232f      	movs	r3, #47	; 0x2f
   10468:	18fb      	adds	r3, r7, r3
   1046a:	22e2      	movs	r2, #226	; 0xe2
   1046c:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Length of encoded buffer too small");
   1046e:	232f      	movs	r3, #47	; 0x2f
   10470:	18fb      	adds	r3, r7, r3
   10472:	781a      	ldrb	r2, [r3, #0]
   10474:	4b97      	ldr	r3, [pc, #604]	; (106d4 <atcab_base64encode_+0x31c>)
   10476:	0011      	movs	r1, r2
   10478:	0018      	movs	r0, r3
   1047a:	4b95      	ldr	r3, [pc, #596]	; (106d0 <atcab_base64encode_+0x318>)
   1047c:	4798      	blx	r3
   1047e:	e11a      	b.n	106b6 <atcab_base64encode_+0x2fe>
        }
        // Initialize the return length to 0
        *encoded_len = 0;
   10480:	683b      	ldr	r3, [r7, #0]
   10482:	2200      	movs	r2, #0
   10484:	601a      	str	r2, [r3, #0]

        // Loop through the byte array by 3 then map to 4 base 64 encoded characters
        for (i = 0; i < array_len; i += 3)
   10486:	2300      	movs	r3, #0
   10488:	62bb      	str	r3, [r7, #40]	; 0x28
   1048a:	e0e6      	b.n	1065a <atcab_base64encode_+0x2a2>
        {
            id = (byte_array[i] & 0xFC) >> 2;
   1048c:	68fa      	ldr	r2, [r7, #12]
   1048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10490:	18d3      	adds	r3, r2, r3
   10492:	781b      	ldrb	r3, [r3, #0]
   10494:	089b      	lsrs	r3, r3, #2
   10496:	b2db      	uxtb	r3, r3
   10498:	61bb      	str	r3, [r7, #24]
            encoded[j++] = base64Char(id, rules);
   1049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1049c:	1c5a      	adds	r2, r3, #1
   1049e:	627a      	str	r2, [r7, #36]	; 0x24
   104a0:	687a      	ldr	r2, [r7, #4]
   104a2:	18d4      	adds	r4, r2, r3
   104a4:	69bb      	ldr	r3, [r7, #24]
   104a6:	b2db      	uxtb	r3, r3
   104a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104aa:	0011      	movs	r1, r2
   104ac:	0018      	movs	r0, r3
   104ae:	4b8a      	ldr	r3, [pc, #552]	; (106d8 <atcab_base64encode_+0x320>)
   104b0:	4798      	blx	r3
   104b2:	0003      	movs	r3, r0
   104b4:	7023      	strb	r3, [r4, #0]
            id = (byte_array[i] & 0x03) << 4;
   104b6:	68fa      	ldr	r2, [r7, #12]
   104b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104ba:	18d3      	adds	r3, r2, r3
   104bc:	781b      	ldrb	r3, [r3, #0]
   104be:	011b      	lsls	r3, r3, #4
   104c0:	2230      	movs	r2, #48	; 0x30
   104c2:	4013      	ands	r3, r2
   104c4:	61bb      	str	r3, [r7, #24]
            if (i + 1 < array_len)
   104c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104c8:	1c5a      	adds	r2, r3, #1
   104ca:	68bb      	ldr	r3, [r7, #8]
   104cc:	429a      	cmp	r2, r3
   104ce:	d272      	bcs.n	105b6 <atcab_base64encode_+0x1fe>
            {
                id |= (byte_array[i + 1] & 0xF0) >> 4;
   104d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104d2:	3301      	adds	r3, #1
   104d4:	68fa      	ldr	r2, [r7, #12]
   104d6:	18d3      	adds	r3, r2, r3
   104d8:	781b      	ldrb	r3, [r3, #0]
   104da:	091b      	lsrs	r3, r3, #4
   104dc:	b2db      	uxtb	r3, r3
   104de:	001a      	movs	r2, r3
   104e0:	69bb      	ldr	r3, [r7, #24]
   104e2:	4313      	orrs	r3, r2
   104e4:	61bb      	str	r3, [r7, #24]
                encoded[j++] = base64Char(id, rules);
   104e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104e8:	1c5a      	adds	r2, r3, #1
   104ea:	627a      	str	r2, [r7, #36]	; 0x24
   104ec:	687a      	ldr	r2, [r7, #4]
   104ee:	18d4      	adds	r4, r2, r3
   104f0:	69bb      	ldr	r3, [r7, #24]
   104f2:	b2db      	uxtb	r3, r3
   104f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104f6:	0011      	movs	r1, r2
   104f8:	0018      	movs	r0, r3
   104fa:	4b77      	ldr	r3, [pc, #476]	; (106d8 <atcab_base64encode_+0x320>)
   104fc:	4798      	blx	r3
   104fe:	0003      	movs	r3, r0
   10500:	7023      	strb	r3, [r4, #0]
                id = (byte_array[i + 1] & 0x0F) << 2;
   10502:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10504:	3301      	adds	r3, #1
   10506:	68fa      	ldr	r2, [r7, #12]
   10508:	18d3      	adds	r3, r2, r3
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	009b      	lsls	r3, r3, #2
   1050e:	223c      	movs	r2, #60	; 0x3c
   10510:	4013      	ands	r3, r2
   10512:	61bb      	str	r3, [r7, #24]
                if (i + 2 < array_len)
   10514:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10516:	1c9a      	adds	r2, r3, #2
   10518:	68bb      	ldr	r3, [r7, #8]
   1051a:	429a      	cmp	r2, r3
   1051c:	d230      	bcs.n	10580 <atcab_base64encode_+0x1c8>
                {
                    id |= (byte_array[i + 2] & 0xC0) >> 6;
   1051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10520:	3302      	adds	r3, #2
   10522:	68fa      	ldr	r2, [r7, #12]
   10524:	18d3      	adds	r3, r2, r3
   10526:	781b      	ldrb	r3, [r3, #0]
   10528:	099b      	lsrs	r3, r3, #6
   1052a:	b2db      	uxtb	r3, r3
   1052c:	001a      	movs	r2, r3
   1052e:	69bb      	ldr	r3, [r7, #24]
   10530:	4313      	orrs	r3, r2
   10532:	61bb      	str	r3, [r7, #24]
                    encoded[j++] = base64Char(id, rules);
   10534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10536:	1c5a      	adds	r2, r3, #1
   10538:	627a      	str	r2, [r7, #36]	; 0x24
   1053a:	687a      	ldr	r2, [r7, #4]
   1053c:	18d4      	adds	r4, r2, r3
   1053e:	69bb      	ldr	r3, [r7, #24]
   10540:	b2db      	uxtb	r3, r3
   10542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10544:	0011      	movs	r1, r2
   10546:	0018      	movs	r0, r3
   10548:	4b63      	ldr	r3, [pc, #396]	; (106d8 <atcab_base64encode_+0x320>)
   1054a:	4798      	blx	r3
   1054c:	0003      	movs	r3, r0
   1054e:	7023      	strb	r3, [r4, #0]
                    id = byte_array[i + 2] & 0x3F;
   10550:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10552:	3302      	adds	r3, #2
   10554:	68fa      	ldr	r2, [r7, #12]
   10556:	18d3      	adds	r3, r2, r3
   10558:	781b      	ldrb	r3, [r3, #0]
   1055a:	001a      	movs	r2, r3
   1055c:	233f      	movs	r3, #63	; 0x3f
   1055e:	4013      	ands	r3, r2
   10560:	61bb      	str	r3, [r7, #24]
                    encoded[j++] = base64Char(id, rules);
   10562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10564:	1c5a      	adds	r2, r3, #1
   10566:	627a      	str	r2, [r7, #36]	; 0x24
   10568:	687a      	ldr	r2, [r7, #4]
   1056a:	18d4      	adds	r4, r2, r3
   1056c:	69bb      	ldr	r3, [r7, #24]
   1056e:	b2db      	uxtb	r3, r3
   10570:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10572:	0011      	movs	r1, r2
   10574:	0018      	movs	r0, r3
   10576:	4b58      	ldr	r3, [pc, #352]	; (106d8 <atcab_base64encode_+0x320>)
   10578:	4798      	blx	r3
   1057a:	0003      	movs	r3, r0
   1057c:	7023      	strb	r3, [r4, #0]
   1057e:	e040      	b.n	10602 <atcab_base64encode_+0x24a>
                }
                else
                {
                    encoded[j++] = base64Char(id, rules);
   10580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10582:	1c5a      	adds	r2, r3, #1
   10584:	627a      	str	r2, [r7, #36]	; 0x24
   10586:	687a      	ldr	r2, [r7, #4]
   10588:	18d4      	adds	r4, r2, r3
   1058a:	69bb      	ldr	r3, [r7, #24]
   1058c:	b2db      	uxtb	r3, r3
   1058e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10590:	0011      	movs	r1, r2
   10592:	0018      	movs	r0, r3
   10594:	4b50      	ldr	r3, [pc, #320]	; (106d8 <atcab_base64encode_+0x320>)
   10596:	4798      	blx	r3
   10598:	0003      	movs	r3, r0
   1059a:	7023      	strb	r3, [r4, #0]
                    encoded[j++] = base64Char(IS_EQUAL, rules);
   1059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1059e:	1c5a      	adds	r2, r3, #1
   105a0:	627a      	str	r2, [r7, #36]	; 0x24
   105a2:	687a      	ldr	r2, [r7, #4]
   105a4:	18d4      	adds	r4, r2, r3
   105a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105a8:	0019      	movs	r1, r3
   105aa:	2040      	movs	r0, #64	; 0x40
   105ac:	4b4a      	ldr	r3, [pc, #296]	; (106d8 <atcab_base64encode_+0x320>)
   105ae:	4798      	blx	r3
   105b0:	0003      	movs	r3, r0
   105b2:	7023      	strb	r3, [r4, #0]
   105b4:	e025      	b.n	10602 <atcab_base64encode_+0x24a>
                }
            }
            else
            {
                encoded[j++] = base64Char(id, rules);
   105b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105b8:	1c5a      	adds	r2, r3, #1
   105ba:	627a      	str	r2, [r7, #36]	; 0x24
   105bc:	687a      	ldr	r2, [r7, #4]
   105be:	18d4      	adds	r4, r2, r3
   105c0:	69bb      	ldr	r3, [r7, #24]
   105c2:	b2db      	uxtb	r3, r3
   105c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   105c6:	0011      	movs	r1, r2
   105c8:	0018      	movs	r0, r3
   105ca:	4b43      	ldr	r3, [pc, #268]	; (106d8 <atcab_base64encode_+0x320>)
   105cc:	4798      	blx	r3
   105ce:	0003      	movs	r3, r0
   105d0:	7023      	strb	r3, [r4, #0]
                encoded[j++] = base64Char(IS_EQUAL, rules);
   105d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105d4:	1c5a      	adds	r2, r3, #1
   105d6:	627a      	str	r2, [r7, #36]	; 0x24
   105d8:	687a      	ldr	r2, [r7, #4]
   105da:	18d4      	adds	r4, r2, r3
   105dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105de:	0019      	movs	r1, r3
   105e0:	2040      	movs	r0, #64	; 0x40
   105e2:	4b3d      	ldr	r3, [pc, #244]	; (106d8 <atcab_base64encode_+0x320>)
   105e4:	4798      	blx	r3
   105e6:	0003      	movs	r3, r0
   105e8:	7023      	strb	r3, [r4, #0]
                encoded[j++] = base64Char(IS_EQUAL, rules);
   105ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105ec:	1c5a      	adds	r2, r3, #1
   105ee:	627a      	str	r2, [r7, #36]	; 0x24
   105f0:	687a      	ldr	r2, [r7, #4]
   105f2:	18d4      	adds	r4, r2, r3
   105f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105f6:	0019      	movs	r1, r3
   105f8:	2040      	movs	r0, #64	; 0x40
   105fa:	4b37      	ldr	r3, [pc, #220]	; (106d8 <atcab_base64encode_+0x320>)
   105fc:	4798      	blx	r3
   105fe:	0003      	movs	r3, r0
   10600:	7023      	strb	r3, [r4, #0]
            }
            // Add \r\n every n bytes if specified
            if (rules[3] && ((j - offset) % rules[3] == 0) && encoded[j - 1])
   10602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10604:	3303      	adds	r3, #3
   10606:	781b      	ldrb	r3, [r3, #0]
   10608:	2b00      	cmp	r3, #0
   1060a:	d023      	beq.n	10654 <atcab_base64encode_+0x29c>
   1060c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1060e:	6a3b      	ldr	r3, [r7, #32]
   10610:	1ad2      	subs	r2, r2, r3
   10612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10614:	3303      	adds	r3, #3
   10616:	781b      	ldrb	r3, [r3, #0]
   10618:	0019      	movs	r1, r3
   1061a:	4b2a      	ldr	r3, [pc, #168]	; (106c4 <atcab_base64encode_+0x30c>)
   1061c:	0010      	movs	r0, r2
   1061e:	4798      	blx	r3
   10620:	1e0b      	subs	r3, r1, #0
   10622:	d117      	bne.n	10654 <atcab_base64encode_+0x29c>
   10624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10626:	3b01      	subs	r3, #1
   10628:	687a      	ldr	r2, [r7, #4]
   1062a:	18d3      	adds	r3, r2, r3
   1062c:	781b      	ldrb	r3, [r3, #0]
   1062e:	2b00      	cmp	r3, #0
   10630:	d010      	beq.n	10654 <atcab_base64encode_+0x29c>
            {
                // as soon as we do this, we introduce an offset
                encoded[j++] = '\r';
   10632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10634:	1c5a      	adds	r2, r3, #1
   10636:	627a      	str	r2, [r7, #36]	; 0x24
   10638:	687a      	ldr	r2, [r7, #4]
   1063a:	18d3      	adds	r3, r2, r3
   1063c:	220d      	movs	r2, #13
   1063e:	701a      	strb	r2, [r3, #0]
                encoded[j++] = '\n';
   10640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10642:	1c5a      	adds	r2, r3, #1
   10644:	627a      	str	r2, [r7, #36]	; 0x24
   10646:	687a      	ldr	r2, [r7, #4]
   10648:	18d3      	adds	r3, r2, r3
   1064a:	220a      	movs	r2, #10
   1064c:	701a      	strb	r2, [r3, #0]
                offset += 2;
   1064e:	6a3b      	ldr	r3, [r7, #32]
   10650:	3302      	adds	r3, #2
   10652:	623b      	str	r3, [r7, #32]
        for (i = 0; i < array_len; i += 3)
   10654:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10656:	3303      	adds	r3, #3
   10658:	62bb      	str	r3, [r7, #40]	; 0x28
   1065a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1065c:	68bb      	ldr	r3, [r7, #8]
   1065e:	429a      	cmp	r2, r3
   10660:	d200      	bcs.n	10664 <atcab_base64encode_+0x2ac>
   10662:	e713      	b.n	1048c <atcab_base64encode_+0xd4>
            }
        }

        /* Check if there is padding to be stripped from the end*/
        for (j -= 1; j; j--)
   10664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10666:	3b01      	subs	r3, #1
   10668:	627b      	str	r3, [r7, #36]	; 0x24
   1066a:	e014      	b.n	10696 <atcab_base64encode_+0x2de>
        {
            if (encoded[j])
   1066c:	687a      	ldr	r2, [r7, #4]
   1066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10670:	18d3      	adds	r3, r2, r3
   10672:	781b      	ldrb	r3, [r3, #0]
   10674:	2b00      	cmp	r3, #0
   10676:	d00b      	beq.n	10690 <atcab_base64encode_+0x2d8>
            {
                if ('\r' != encoded[j] && '\n' != encoded[j])
   10678:	687a      	ldr	r2, [r7, #4]
   1067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1067c:	18d3      	adds	r3, r2, r3
   1067e:	781b      	ldrb	r3, [r3, #0]
   10680:	2b0d      	cmp	r3, #13
   10682:	d005      	beq.n	10690 <atcab_base64encode_+0x2d8>
   10684:	687a      	ldr	r2, [r7, #4]
   10686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10688:	18d3      	adds	r3, r2, r3
   1068a:	781b      	ldrb	r3, [r3, #0]
   1068c:	2b0a      	cmp	r3, #10
   1068e:	d106      	bne.n	1069e <atcab_base64encode_+0x2e6>
        for (j -= 1; j; j--)
   10690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10692:	3b01      	subs	r3, #1
   10694:	627b      	str	r3, [r7, #36]	; 0x24
   10696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10698:	2b00      	cmp	r3, #0
   1069a:	d1e7      	bne.n	1066c <atcab_base64encode_+0x2b4>
   1069c:	e000      	b.n	106a0 <atcab_base64encode_+0x2e8>
                {
                    break;
   1069e:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
        /* Make sure the result is terminated */
        encoded[++j] = 0;
   106a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   106a2:	3301      	adds	r3, #1
   106a4:	627b      	str	r3, [r7, #36]	; 0x24
   106a6:	687a      	ldr	r2, [r7, #4]
   106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   106aa:	18d3      	adds	r3, r2, r3
   106ac:	2200      	movs	r2, #0
   106ae:	701a      	strb	r2, [r3, #0]

        // Set the final encoded length
        *encoded_len = j;
   106b0:	683b      	ldr	r3, [r7, #0]
   106b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   106b4:	601a      	str	r2, [r3, #0]
    }
    while (false);
    return status;
   106b6:	232f      	movs	r3, #47	; 0x2f
   106b8:	18fb      	adds	r3, r7, r3
   106ba:	781b      	ldrb	r3, [r3, #0]
}
   106bc:	0018      	movs	r0, r3
   106be:	46bd      	mov	sp, r7
   106c0:	b00d      	add	sp, #52	; 0x34
   106c2:	bd90      	pop	{r4, r7, pc}
   106c4:	00019e8d 	.word	0x00019e8d
   106c8:	00019d81 	.word	0x00019d81
   106cc:	00020d2c 	.word	0x00020d2c
   106d0:	0001c37d 	.word	0x0001c37d
   106d4:	00020dc4 	.word	0x00020dc4
   106d8:	0001032d 	.word	0x0001032d

000106dc <atcab_base64encode>:
 *                            character string.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_base64encode(const uint8_t* byte_array, size_t array_len, char* encoded, size_t* encoded_len)
{
   106dc:	b590      	push	{r4, r7, lr}
   106de:	b087      	sub	sp, #28
   106e0:	af02      	add	r7, sp, #8
   106e2:	60f8      	str	r0, [r7, #12]
   106e4:	60b9      	str	r1, [r7, #8]
   106e6:	607a      	str	r2, [r7, #4]
   106e8:	603b      	str	r3, [r7, #0]
    return atcab_base64encode_(byte_array, array_len, encoded, encoded_len, atcab_b64rules_default);
   106ea:	683c      	ldr	r4, [r7, #0]
   106ec:	687a      	ldr	r2, [r7, #4]
   106ee:	68b9      	ldr	r1, [r7, #8]
   106f0:	68f8      	ldr	r0, [r7, #12]
   106f2:	4b05      	ldr	r3, [pc, #20]	; (10708 <atcab_base64encode+0x2c>)
   106f4:	9300      	str	r3, [sp, #0]
   106f6:	0023      	movs	r3, r4
   106f8:	4c04      	ldr	r4, [pc, #16]	; (1070c <atcab_base64encode+0x30>)
   106fa:	47a0      	blx	r4
   106fc:	0003      	movs	r3, r0
}
   106fe:	0018      	movs	r0, r3
   10700:	46bd      	mov	sp, r7
   10702:	b005      	add	sp, #20
   10704:	bd90      	pop	{r4, r7, pc}
   10706:	46c0      	nop			; (mov r8, r8)
   10708:	20000150 	.word	0x20000150
   1070c:	000103b9 	.word	0x000103b9

00010710 <atcac_sw_sha2_256_init>:
 * \param[in] ctx  ptr to context data structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256_init(atcac_sha2_256_ctx* ctx)
{
   10710:	b580      	push	{r7, lr}
   10712:	b082      	sub	sp, #8
   10714:	af00      	add	r7, sp, #0
   10716:	6078      	str	r0, [r7, #4]
    if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
    {
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    }
    sw_sha256_init((sw_sha256_ctx*)ctx);
   10718:	687b      	ldr	r3, [r7, #4]
   1071a:	0018      	movs	r0, r3
   1071c:	4b03      	ldr	r3, [pc, #12]	; (1072c <atcac_sw_sha2_256_init+0x1c>)
   1071e:	4798      	blx	r3

    return ATCA_SUCCESS;
   10720:	2300      	movs	r3, #0
}
   10722:	0018      	movs	r0, r3
   10724:	46bd      	mov	sp, r7
   10726:	b002      	add	sp, #8
   10728:	bd80      	pop	{r7, pc}
   1072a:	46c0      	nop			; (mov r8, r8)
   1072c:	00010e21 	.word	0x00010e21

00010730 <atcac_sw_sha2_256_update>:
    \param[in] data_size  size amount of data to hash in the given block, in bytes
    \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
   10730:	b580      	push	{r7, lr}
   10732:	b084      	sub	sp, #16
   10734:	af00      	add	r7, sp, #0
   10736:	60f8      	str	r0, [r7, #12]
   10738:	60b9      	str	r1, [r7, #8]
   1073a:	607a      	str	r2, [r7, #4]
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
   1073c:	687a      	ldr	r2, [r7, #4]
   1073e:	68b9      	ldr	r1, [r7, #8]
   10740:	68fb      	ldr	r3, [r7, #12]
   10742:	0018      	movs	r0, r3
   10744:	4b03      	ldr	r3, [pc, #12]	; (10754 <atcac_sw_sha2_256_update+0x24>)
   10746:	4798      	blx	r3

    return ATCA_SUCCESS;
   10748:	2300      	movs	r3, #0
}
   1074a:	0018      	movs	r0, r3
   1074c:	46bd      	mov	sp, r7
   1074e:	b004      	add	sp, #16
   10750:	bd80      	pop	{r7, pc}
   10752:	46c0      	nop			; (mov r8, r8)
   10754:	00010e69 	.word	0x00010e69

00010758 <atcac_sw_sha2_256_finish>:
 * \param[out] digest  receives the computed digest of the SHA 256
 * \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
   10758:	b580      	push	{r7, lr}
   1075a:	b082      	sub	sp, #8
   1075c:	af00      	add	r7, sp, #0
   1075e:	6078      	str	r0, [r7, #4]
   10760:	6039      	str	r1, [r7, #0]
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
   10762:	683a      	ldr	r2, [r7, #0]
   10764:	687b      	ldr	r3, [r7, #4]
   10766:	0011      	movs	r1, r2
   10768:	0018      	movs	r0, r3
   1076a:	4b03      	ldr	r3, [pc, #12]	; (10778 <atcac_sw_sha2_256_finish+0x20>)
   1076c:	4798      	blx	r3

    return ATCA_SUCCESS;
   1076e:	2300      	movs	r3, #0
}
   10770:	0018      	movs	r0, r3
   10772:	46bd      	mov	sp, r7
   10774:	b002      	add	sp, #8
   10776:	bd80      	pop	{r7, pc}
   10778:	00010f2d 	.word	0x00010f2d

0001077c <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
   1077c:	b580      	push	{r7, lr}
   1077e:	b0b6      	sub	sp, #216	; 0xd8
   10780:	af00      	add	r7, sp, #0
   10782:	60f8      	str	r0, [r7, #12]
   10784:	60b9      	str	r1, [r7, #8]
   10786:	607a      	str	r2, [r7, #4]
    int ret;
    atcac_sha2_256_ctx ctx;

    ret = atcac_sw_sha2_256_init(&ctx);
   10788:	2314      	movs	r3, #20
   1078a:	18fb      	adds	r3, r7, r3
   1078c:	0018      	movs	r0, r3
   1078e:	4b1e      	ldr	r3, [pc, #120]	; (10808 <atcac_sw_sha2_256+0x8c>)
   10790:	4798      	blx	r3
   10792:	0003      	movs	r3, r0
   10794:	22d4      	movs	r2, #212	; 0xd4
   10796:	18ba      	adds	r2, r7, r2
   10798:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1079a:	23d4      	movs	r3, #212	; 0xd4
   1079c:	18fb      	adds	r3, r7, r3
   1079e:	681b      	ldr	r3, [r3, #0]
   107a0:	2b00      	cmp	r3, #0
   107a2:	d003      	beq.n	107ac <atcac_sw_sha2_256+0x30>
    {
        return ret;
   107a4:	23d4      	movs	r3, #212	; 0xd4
   107a6:	18fb      	adds	r3, r7, r3
   107a8:	681b      	ldr	r3, [r3, #0]
   107aa:	e028      	b.n	107fe <atcac_sw_sha2_256+0x82>
    }

    ret = atcac_sw_sha2_256_update(&ctx, data, data_size);
   107ac:	68ba      	ldr	r2, [r7, #8]
   107ae:	68f9      	ldr	r1, [r7, #12]
   107b0:	2314      	movs	r3, #20
   107b2:	18fb      	adds	r3, r7, r3
   107b4:	0018      	movs	r0, r3
   107b6:	4b15      	ldr	r3, [pc, #84]	; (1080c <atcac_sw_sha2_256+0x90>)
   107b8:	4798      	blx	r3
   107ba:	0003      	movs	r3, r0
   107bc:	22d4      	movs	r2, #212	; 0xd4
   107be:	18ba      	adds	r2, r7, r2
   107c0:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   107c2:	23d4      	movs	r3, #212	; 0xd4
   107c4:	18fb      	adds	r3, r7, r3
   107c6:	681b      	ldr	r3, [r3, #0]
   107c8:	2b00      	cmp	r3, #0
   107ca:	d003      	beq.n	107d4 <atcac_sw_sha2_256+0x58>
    {
        return ret;
   107cc:	23d4      	movs	r3, #212	; 0xd4
   107ce:	18fb      	adds	r3, r7, r3
   107d0:	681b      	ldr	r3, [r3, #0]
   107d2:	e014      	b.n	107fe <atcac_sw_sha2_256+0x82>
    }

    ret = atcac_sw_sha2_256_finish(&ctx, digest);
   107d4:	687a      	ldr	r2, [r7, #4]
   107d6:	2314      	movs	r3, #20
   107d8:	18fb      	adds	r3, r7, r3
   107da:	0011      	movs	r1, r2
   107dc:	0018      	movs	r0, r3
   107de:	4b0c      	ldr	r3, [pc, #48]	; (10810 <atcac_sw_sha2_256+0x94>)
   107e0:	4798      	blx	r3
   107e2:	0003      	movs	r3, r0
   107e4:	22d4      	movs	r2, #212	; 0xd4
   107e6:	18ba      	adds	r2, r7, r2
   107e8:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   107ea:	23d4      	movs	r3, #212	; 0xd4
   107ec:	18fb      	adds	r3, r7, r3
   107ee:	681b      	ldr	r3, [r3, #0]
   107f0:	2b00      	cmp	r3, #0
   107f2:	d003      	beq.n	107fc <atcac_sw_sha2_256+0x80>
    {
        return ret;
   107f4:	23d4      	movs	r3, #212	; 0xd4
   107f6:	18fb      	adds	r3, r7, r3
   107f8:	681b      	ldr	r3, [r3, #0]
   107fa:	e000      	b.n	107fe <atcac_sw_sha2_256+0x82>
    }

    return ATCA_SUCCESS;
   107fc:	2300      	movs	r3, #0
   107fe:	0018      	movs	r0, r3
   10800:	46bd      	mov	sp, r7
   10802:	b036      	add	sp, #216	; 0xd8
   10804:	bd80      	pop	{r7, pc}
   10806:	46c0      	nop			; (mov r8, r8)
   10808:	00010711 	.word	0x00010711
   1080c:	00010731 	.word	0x00010731
   10810:	00010759 	.word	0x00010759

00010814 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
   10814:	b580      	push	{r7, lr}
   10816:	b0d8      	sub	sp, #352	; 0x160
   10818:	af00      	add	r7, sp, #0
   1081a:	60f8      	str	r0, [r7, #12]
   1081c:	60b9      	str	r1, [r7, #8]
   1081e:	607a      	str	r2, [r7, #4]
    int i = 0;
   10820:	2300      	movs	r3, #0
   10822:	22ae      	movs	r2, #174	; 0xae
   10824:	0052      	lsls	r2, r2, #1
   10826:	18ba      	adds	r2, r7, r2
   10828:	6013      	str	r3, [r2, #0]
    uint32_t block = 0;
   1082a:	2300      	movs	r3, #0
   1082c:	22ac      	movs	r2, #172	; 0xac
   1082e:	0052      	lsls	r2, r2, #1
   10830:	18ba      	adds	r2, r7, r2
   10832:	6013      	str	r3, [r2, #0]
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
   10834:	2300      	movs	r3, #0
   10836:	22ac      	movs	r2, #172	; 0xac
   10838:	0052      	lsls	r2, r2, #1
   1083a:	18ba      	adds	r2, r7, r2
   1083c:	6013      	str	r3, [r2, #0]
   1083e:	e2dd      	b.n	10dfc <sw_sha256_process+0x5e8>
        uint32_t word_value;
        uint32_t s0, s1;
        uint32_t t1, t2;
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];
   10840:	23ac      	movs	r3, #172	; 0xac
   10842:	005b      	lsls	r3, r3, #1
   10844:	18fb      	adds	r3, r7, r3
   10846:	681b      	ldr	r3, [r3, #0]
   10848:	019b      	lsls	r3, r3, #6
   1084a:	68ba      	ldr	r2, [r7, #8]
   1084c:	18d3      	adds	r3, r2, r3
   1084e:	22a8      	movs	r2, #168	; 0xa8
   10850:	0052      	lsls	r2, r2, #1
   10852:	18ba      	adds	r2, r7, r2
   10854:	6013      	str	r3, [r2, #0]

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
   10856:	2300      	movs	r3, #0
   10858:	22ae      	movs	r2, #174	; 0xae
   1085a:	0052      	lsls	r2, r2, #1
   1085c:	18ba      	adds	r2, r7, r2
   1085e:	6013      	str	r3, [r2, #0]
   10860:	e063      	b.n	1092a <sw_sha256_process+0x116>
        {
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
   10862:	23ae      	movs	r3, #174	; 0xae
   10864:	005b      	lsls	r3, r3, #1
   10866:	18fb      	adds	r3, r7, r3
   10868:	681b      	ldr	r3, [r3, #0]
   1086a:	3303      	adds	r3, #3
   1086c:	22ae      	movs	r2, #174	; 0xae
   1086e:	0052      	lsls	r2, r2, #1
   10870:	18ba      	adds	r2, r7, r2
   10872:	6812      	ldr	r2, [r2, #0]
   10874:	21a8      	movs	r1, #168	; 0xa8
   10876:	0049      	lsls	r1, r1, #1
   10878:	1879      	adds	r1, r7, r1
   1087a:	6809      	ldr	r1, [r1, #0]
   1087c:	188a      	adds	r2, r1, r2
   1087e:	7811      	ldrb	r1, [r2, #0]
   10880:	4a92      	ldr	r2, [pc, #584]	; (10acc <sw_sha256_process+0x2b8>)
   10882:	20b0      	movs	r0, #176	; 0xb0
   10884:	0040      	lsls	r0, r0, #1
   10886:	4684      	mov	ip, r0
   10888:	44bc      	add	ip, r7
   1088a:	4462      	add	r2, ip
   1088c:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
   1088e:	23ae      	movs	r3, #174	; 0xae
   10890:	005b      	lsls	r3, r3, #1
   10892:	18fb      	adds	r3, r7, r3
   10894:	681b      	ldr	r3, [r3, #0]
   10896:	3302      	adds	r3, #2
   10898:	22ae      	movs	r2, #174	; 0xae
   1089a:	0052      	lsls	r2, r2, #1
   1089c:	18ba      	adds	r2, r7, r2
   1089e:	6812      	ldr	r2, [r2, #0]
   108a0:	3201      	adds	r2, #1
   108a2:	21a8      	movs	r1, #168	; 0xa8
   108a4:	0049      	lsls	r1, r1, #1
   108a6:	1879      	adds	r1, r7, r1
   108a8:	6809      	ldr	r1, [r1, #0]
   108aa:	188a      	adds	r2, r1, r2
   108ac:	7811      	ldrb	r1, [r2, #0]
   108ae:	4a87      	ldr	r2, [pc, #540]	; (10acc <sw_sha256_process+0x2b8>)
   108b0:	20b0      	movs	r0, #176	; 0xb0
   108b2:	0040      	lsls	r0, r0, #1
   108b4:	4684      	mov	ip, r0
   108b6:	44bc      	add	ip, r7
   108b8:	4462      	add	r2, ip
   108ba:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
   108bc:	23ae      	movs	r3, #174	; 0xae
   108be:	005b      	lsls	r3, r3, #1
   108c0:	18fb      	adds	r3, r7, r3
   108c2:	681b      	ldr	r3, [r3, #0]
   108c4:	3301      	adds	r3, #1
   108c6:	22ae      	movs	r2, #174	; 0xae
   108c8:	0052      	lsls	r2, r2, #1
   108ca:	18ba      	adds	r2, r7, r2
   108cc:	6812      	ldr	r2, [r2, #0]
   108ce:	3202      	adds	r2, #2
   108d0:	21a8      	movs	r1, #168	; 0xa8
   108d2:	0049      	lsls	r1, r1, #1
   108d4:	1879      	adds	r1, r7, r1
   108d6:	6809      	ldr	r1, [r1, #0]
   108d8:	188a      	adds	r2, r1, r2
   108da:	7811      	ldrb	r1, [r2, #0]
   108dc:	4a7b      	ldr	r2, [pc, #492]	; (10acc <sw_sha256_process+0x2b8>)
   108de:	20b0      	movs	r0, #176	; 0xb0
   108e0:	0040      	lsls	r0, r0, #1
   108e2:	4684      	mov	ip, r0
   108e4:	44bc      	add	ip, r7
   108e6:	4462      	add	r2, ip
   108e8:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
   108ea:	23ae      	movs	r3, #174	; 0xae
   108ec:	005b      	lsls	r3, r3, #1
   108ee:	18fb      	adds	r3, r7, r3
   108f0:	681b      	ldr	r3, [r3, #0]
   108f2:	3303      	adds	r3, #3
   108f4:	22a8      	movs	r2, #168	; 0xa8
   108f6:	0052      	lsls	r2, r2, #1
   108f8:	18ba      	adds	r2, r7, r2
   108fa:	6812      	ldr	r2, [r2, #0]
   108fc:	18d3      	adds	r3, r2, r3
   108fe:	7819      	ldrb	r1, [r3, #0]
   10900:	4b72      	ldr	r3, [pc, #456]	; (10acc <sw_sha256_process+0x2b8>)
   10902:	22b0      	movs	r2, #176	; 0xb0
   10904:	0052      	lsls	r2, r2, #1
   10906:	18ba      	adds	r2, r7, r2
   10908:	18d2      	adds	r2, r2, r3
   1090a:	23ae      	movs	r3, #174	; 0xae
   1090c:	005b      	lsls	r3, r3, #1
   1090e:	18fb      	adds	r3, r7, r3
   10910:	681b      	ldr	r3, [r3, #0]
   10912:	18d3      	adds	r3, r2, r3
   10914:	1c0a      	adds	r2, r1, #0
   10916:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
   10918:	23ae      	movs	r3, #174	; 0xae
   1091a:	005b      	lsls	r3, r3, #1
   1091c:	18fb      	adds	r3, r7, r3
   1091e:	681b      	ldr	r3, [r3, #0]
   10920:	3304      	adds	r3, #4
   10922:	22ae      	movs	r2, #174	; 0xae
   10924:	0052      	lsls	r2, r2, #1
   10926:	18ba      	adds	r2, r7, r2
   10928:	6013      	str	r3, [r2, #0]
   1092a:	23ae      	movs	r3, #174	; 0xae
   1092c:	005b      	lsls	r3, r3, #1
   1092e:	18fb      	adds	r3, r7, r3
   10930:	681b      	ldr	r3, [r3, #0]
   10932:	2b3f      	cmp	r3, #63	; 0x3f
   10934:	dd95      	ble.n	10862 <sw_sha256_process+0x4e>
        }

        w_index = 16;
   10936:	2310      	movs	r3, #16
   10938:	22aa      	movs	r2, #170	; 0xaa
   1093a:	0052      	lsls	r2, r2, #1
   1093c:	18ba      	adds	r2, r7, r2
   1093e:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
   10940:	e08d      	b.n	10a5e <sw_sha256_process+0x24a>
        {
            // right rotate for 32-bit variable in C: (value >> places) | (value << 32 - places)
            word_value = w_union.w_word[w_index - 15];
   10942:	23aa      	movs	r3, #170	; 0xaa
   10944:	005b      	lsls	r3, r3, #1
   10946:	18fb      	adds	r3, r7, r3
   10948:	681b      	ldr	r3, [r3, #0]
   1094a:	3b0f      	subs	r3, #15
   1094c:	001a      	movs	r2, r3
   1094e:	4b5f      	ldr	r3, [pc, #380]	; (10acc <sw_sha256_process+0x2b8>)
   10950:	21b0      	movs	r1, #176	; 0xb0
   10952:	0049      	lsls	r1, r1, #1
   10954:	468c      	mov	ip, r1
   10956:	44bc      	add	ip, r7
   10958:	4463      	add	r3, ip
   1095a:	0092      	lsls	r2, r2, #2
   1095c:	58d3      	ldr	r3, [r2, r3]
   1095e:	22a6      	movs	r2, #166	; 0xa6
   10960:	0052      	lsls	r2, r2, #1
   10962:	18ba      	adds	r2, r7, r2
   10964:	6013      	str	r3, [r2, #0]
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
   10966:	23a6      	movs	r3, #166	; 0xa6
   10968:	005b      	lsls	r3, r3, #1
   1096a:	18fb      	adds	r3, r7, r3
   1096c:	681b      	ldr	r3, [r3, #0]
   1096e:	2207      	movs	r2, #7
   10970:	41d3      	rors	r3, r2
   10972:	001a      	movs	r2, r3
   10974:	23a6      	movs	r3, #166	; 0xa6
   10976:	005b      	lsls	r3, r3, #1
   10978:	18fb      	adds	r3, r7, r3
   1097a:	681b      	ldr	r3, [r3, #0]
   1097c:	2112      	movs	r1, #18
   1097e:	41cb      	rors	r3, r1
   10980:	405a      	eors	r2, r3
   10982:	23a6      	movs	r3, #166	; 0xa6
   10984:	005b      	lsls	r3, r3, #1
   10986:	18fb      	adds	r3, r7, r3
   10988:	681b      	ldr	r3, [r3, #0]
   1098a:	08db      	lsrs	r3, r3, #3
   1098c:	4053      	eors	r3, r2
   1098e:	22a4      	movs	r2, #164	; 0xa4
   10990:	0052      	lsls	r2, r2, #1
   10992:	18ba      	adds	r2, r7, r2
   10994:	6013      	str	r3, [r2, #0]

            word_value = w_union.w_word[w_index - 2];
   10996:	23aa      	movs	r3, #170	; 0xaa
   10998:	005b      	lsls	r3, r3, #1
   1099a:	18fb      	adds	r3, r7, r3
   1099c:	681b      	ldr	r3, [r3, #0]
   1099e:	1e9a      	subs	r2, r3, #2
   109a0:	4b4a      	ldr	r3, [pc, #296]	; (10acc <sw_sha256_process+0x2b8>)
   109a2:	21b0      	movs	r1, #176	; 0xb0
   109a4:	0049      	lsls	r1, r1, #1
   109a6:	468c      	mov	ip, r1
   109a8:	44bc      	add	ip, r7
   109aa:	4463      	add	r3, ip
   109ac:	0092      	lsls	r2, r2, #2
   109ae:	58d3      	ldr	r3, [r2, r3]
   109b0:	22a6      	movs	r2, #166	; 0xa6
   109b2:	0052      	lsls	r2, r2, #1
   109b4:	18ba      	adds	r2, r7, r2
   109b6:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
   109b8:	23a6      	movs	r3, #166	; 0xa6
   109ba:	005b      	lsls	r3, r3, #1
   109bc:	18fb      	adds	r3, r7, r3
   109be:	681b      	ldr	r3, [r3, #0]
   109c0:	2211      	movs	r2, #17
   109c2:	41d3      	rors	r3, r2
   109c4:	001a      	movs	r2, r3
   109c6:	23a6      	movs	r3, #166	; 0xa6
   109c8:	005b      	lsls	r3, r3, #1
   109ca:	18fb      	adds	r3, r7, r3
   109cc:	681b      	ldr	r3, [r3, #0]
   109ce:	2113      	movs	r1, #19
   109d0:	41cb      	rors	r3, r1
   109d2:	405a      	eors	r2, r3
   109d4:	23a6      	movs	r3, #166	; 0xa6
   109d6:	005b      	lsls	r3, r3, #1
   109d8:	18fb      	adds	r3, r7, r3
   109da:	681b      	ldr	r3, [r3, #0]
   109dc:	0a9b      	lsrs	r3, r3, #10
   109de:	4053      	eors	r3, r2
   109e0:	22a2      	movs	r2, #162	; 0xa2
   109e2:	0052      	lsls	r2, r2, #1
   109e4:	18ba      	adds	r2, r7, r2
   109e6:	6013      	str	r3, [r2, #0]

            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
   109e8:	23aa      	movs	r3, #170	; 0xaa
   109ea:	005b      	lsls	r3, r3, #1
   109ec:	18fb      	adds	r3, r7, r3
   109ee:	681b      	ldr	r3, [r3, #0]
   109f0:	3b10      	subs	r3, #16
   109f2:	001a      	movs	r2, r3
   109f4:	4b35      	ldr	r3, [pc, #212]	; (10acc <sw_sha256_process+0x2b8>)
   109f6:	21b0      	movs	r1, #176	; 0xb0
   109f8:	0049      	lsls	r1, r1, #1
   109fa:	468c      	mov	ip, r1
   109fc:	44bc      	add	ip, r7
   109fe:	4463      	add	r3, ip
   10a00:	0092      	lsls	r2, r2, #2
   10a02:	58d2      	ldr	r2, [r2, r3]
   10a04:	23a4      	movs	r3, #164	; 0xa4
   10a06:	005b      	lsls	r3, r3, #1
   10a08:	18fb      	adds	r3, r7, r3
   10a0a:	681b      	ldr	r3, [r3, #0]
   10a0c:	18d2      	adds	r2, r2, r3
   10a0e:	23aa      	movs	r3, #170	; 0xaa
   10a10:	005b      	lsls	r3, r3, #1
   10a12:	18fb      	adds	r3, r7, r3
   10a14:	681b      	ldr	r3, [r3, #0]
   10a16:	1fd9      	subs	r1, r3, #7
   10a18:	4b2c      	ldr	r3, [pc, #176]	; (10acc <sw_sha256_process+0x2b8>)
   10a1a:	20b0      	movs	r0, #176	; 0xb0
   10a1c:	0040      	lsls	r0, r0, #1
   10a1e:	4684      	mov	ip, r0
   10a20:	44bc      	add	ip, r7
   10a22:	4463      	add	r3, ip
   10a24:	0089      	lsls	r1, r1, #2
   10a26:	58cb      	ldr	r3, [r1, r3]
   10a28:	18d2      	adds	r2, r2, r3
   10a2a:	23a2      	movs	r3, #162	; 0xa2
   10a2c:	005b      	lsls	r3, r3, #1
   10a2e:	18fb      	adds	r3, r7, r3
   10a30:	681b      	ldr	r3, [r3, #0]
   10a32:	18d1      	adds	r1, r2, r3
   10a34:	4b25      	ldr	r3, [pc, #148]	; (10acc <sw_sha256_process+0x2b8>)
   10a36:	22b0      	movs	r2, #176	; 0xb0
   10a38:	0052      	lsls	r2, r2, #1
   10a3a:	4694      	mov	ip, r2
   10a3c:	44bc      	add	ip, r7
   10a3e:	4463      	add	r3, ip
   10a40:	22aa      	movs	r2, #170	; 0xaa
   10a42:	0052      	lsls	r2, r2, #1
   10a44:	18ba      	adds	r2, r7, r2
   10a46:	6812      	ldr	r2, [r2, #0]
   10a48:	0092      	lsls	r2, r2, #2
   10a4a:	50d1      	str	r1, [r2, r3]

            w_index++;
   10a4c:	23aa      	movs	r3, #170	; 0xaa
   10a4e:	005b      	lsls	r3, r3, #1
   10a50:	18fb      	adds	r3, r7, r3
   10a52:	681b      	ldr	r3, [r3, #0]
   10a54:	3301      	adds	r3, #1
   10a56:	22aa      	movs	r2, #170	; 0xaa
   10a58:	0052      	lsls	r2, r2, #1
   10a5a:	18ba      	adds	r2, r7, r2
   10a5c:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
   10a5e:	23aa      	movs	r3, #170	; 0xaa
   10a60:	005b      	lsls	r3, r3, #1
   10a62:	18fb      	adds	r3, r7, r3
   10a64:	681b      	ldr	r3, [r3, #0]
   10a66:	2b3f      	cmp	r3, #63	; 0x3f
   10a68:	d800      	bhi.n	10a6c <sw_sha256_process+0x258>
   10a6a:	e76a      	b.n	10942 <sw_sha256_process+0x12e>
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
   10a6c:	2300      	movs	r3, #0
   10a6e:	22ae      	movs	r2, #174	; 0xae
   10a70:	0052      	lsls	r2, r2, #1
   10a72:	18ba      	adds	r2, r7, r2
   10a74:	6013      	str	r3, [r2, #0]
   10a76:	e01c      	b.n	10ab2 <sw_sha256_process+0x29e>
        {
            rotate_register[i] = ctx->hash[i];
   10a78:	68fb      	ldr	r3, [r7, #12]
   10a7a:	22ae      	movs	r2, #174	; 0xae
   10a7c:	0052      	lsls	r2, r2, #1
   10a7e:	18ba      	adds	r2, r7, r2
   10a80:	6812      	ldr	r2, [r2, #0]
   10a82:	3222      	adds	r2, #34	; 0x22
   10a84:	0092      	lsls	r2, r2, #2
   10a86:	58d1      	ldr	r1, [r2, r3]
   10a88:	4b11      	ldr	r3, [pc, #68]	; (10ad0 <sw_sha256_process+0x2bc>)
   10a8a:	22b0      	movs	r2, #176	; 0xb0
   10a8c:	0052      	lsls	r2, r2, #1
   10a8e:	4694      	mov	ip, r2
   10a90:	44bc      	add	ip, r7
   10a92:	4463      	add	r3, ip
   10a94:	22ae      	movs	r2, #174	; 0xae
   10a96:	0052      	lsls	r2, r2, #1
   10a98:	18ba      	adds	r2, r7, r2
   10a9a:	6812      	ldr	r2, [r2, #0]
   10a9c:	0092      	lsls	r2, r2, #2
   10a9e:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
   10aa0:	23ae      	movs	r3, #174	; 0xae
   10aa2:	005b      	lsls	r3, r3, #1
   10aa4:	18fb      	adds	r3, r7, r3
   10aa6:	681b      	ldr	r3, [r3, #0]
   10aa8:	3301      	adds	r3, #1
   10aaa:	22ae      	movs	r2, #174	; 0xae
   10aac:	0052      	lsls	r2, r2, #1
   10aae:	18ba      	adds	r2, r7, r2
   10ab0:	6013      	str	r3, [r2, #0]
   10ab2:	23ae      	movs	r3, #174	; 0xae
   10ab4:	005b      	lsls	r3, r3, #1
   10ab6:	18fb      	adds	r3, r7, r3
   10ab8:	681b      	ldr	r3, [r3, #0]
   10aba:	2b07      	cmp	r3, #7
   10abc:	dddc      	ble.n	10a78 <sw_sha256_process+0x264>
        }

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
   10abe:	2300      	movs	r3, #0
   10ac0:	22ae      	movs	r2, #174	; 0xae
   10ac2:	0052      	lsls	r2, r2, #1
   10ac4:	18ba      	adds	r2, r7, r2
   10ac6:	6013      	str	r3, [r2, #0]
   10ac8:	e156      	b.n	10d78 <sw_sha256_process+0x564>
   10aca:	46c0      	nop			; (mov r8, r8)
   10acc:	fffffed4 	.word	0xfffffed4
   10ad0:	fffffeb4 	.word	0xfffffeb4
        {
            s0 = rotate_right(rotate_register[0], 2)
   10ad4:	4bcf      	ldr	r3, [pc, #828]	; (10e14 <sw_sha256_process+0x600>)
   10ad6:	22b0      	movs	r2, #176	; 0xb0
   10ad8:	0052      	lsls	r2, r2, #1
   10ada:	4694      	mov	ip, r2
   10adc:	44bc      	add	ip, r7
   10ade:	4463      	add	r3, ip
   10ae0:	681b      	ldr	r3, [r3, #0]
   10ae2:	2202      	movs	r2, #2
   10ae4:	41d3      	rors	r3, r2
   10ae6:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[0], 13)
   10ae8:	4bca      	ldr	r3, [pc, #808]	; (10e14 <sw_sha256_process+0x600>)
   10aea:	21b0      	movs	r1, #176	; 0xb0
   10aec:	0049      	lsls	r1, r1, #1
   10aee:	468c      	mov	ip, r1
   10af0:	44bc      	add	ip, r7
   10af2:	4463      	add	r3, ip
   10af4:	681b      	ldr	r3, [r3, #0]
   10af6:	210d      	movs	r1, #13
   10af8:	41cb      	rors	r3, r1
   10afa:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[0], 22);
   10afc:	4bc5      	ldr	r3, [pc, #788]	; (10e14 <sw_sha256_process+0x600>)
   10afe:	21b0      	movs	r1, #176	; 0xb0
   10b00:	0049      	lsls	r1, r1, #1
   10b02:	468c      	mov	ip, r1
   10b04:	44bc      	add	ip, r7
   10b06:	4463      	add	r3, ip
   10b08:	681b      	ldr	r3, [r3, #0]
   10b0a:	2116      	movs	r1, #22
   10b0c:	41cb      	rors	r3, r1
            s0 = rotate_right(rotate_register[0], 2)
   10b0e:	4053      	eors	r3, r2
   10b10:	22a4      	movs	r2, #164	; 0xa4
   10b12:	0052      	lsls	r2, r2, #1
   10b14:	18ba      	adds	r2, r7, r2
   10b16:	6013      	str	r3, [r2, #0]
            maj = (rotate_register[0] & rotate_register[1])
   10b18:	4bbe      	ldr	r3, [pc, #760]	; (10e14 <sw_sha256_process+0x600>)
   10b1a:	22b0      	movs	r2, #176	; 0xb0
   10b1c:	0052      	lsls	r2, r2, #1
   10b1e:	4694      	mov	ip, r2
   10b20:	44bc      	add	ip, r7
   10b22:	4463      	add	r3, ip
   10b24:	681a      	ldr	r2, [r3, #0]
   10b26:	4bbb      	ldr	r3, [pc, #748]	; (10e14 <sw_sha256_process+0x600>)
   10b28:	21b0      	movs	r1, #176	; 0xb0
   10b2a:	0049      	lsls	r1, r1, #1
   10b2c:	468c      	mov	ip, r1
   10b2e:	44bc      	add	ip, r7
   10b30:	4463      	add	r3, ip
   10b32:	685b      	ldr	r3, [r3, #4]
   10b34:	401a      	ands	r2, r3
                  ^ (rotate_register[0] & rotate_register[2])
   10b36:	4bb7      	ldr	r3, [pc, #732]	; (10e14 <sw_sha256_process+0x600>)
   10b38:	21b0      	movs	r1, #176	; 0xb0
   10b3a:	0049      	lsls	r1, r1, #1
   10b3c:	468c      	mov	ip, r1
   10b3e:	44bc      	add	ip, r7
   10b40:	4463      	add	r3, ip
   10b42:	6819      	ldr	r1, [r3, #0]
   10b44:	4bb3      	ldr	r3, [pc, #716]	; (10e14 <sw_sha256_process+0x600>)
   10b46:	20b0      	movs	r0, #176	; 0xb0
   10b48:	0040      	lsls	r0, r0, #1
   10b4a:	4684      	mov	ip, r0
   10b4c:	44bc      	add	ip, r7
   10b4e:	4463      	add	r3, ip
   10b50:	689b      	ldr	r3, [r3, #8]
   10b52:	400b      	ands	r3, r1
   10b54:	405a      	eors	r2, r3
                  ^ (rotate_register[1] & rotate_register[2]);
   10b56:	4baf      	ldr	r3, [pc, #700]	; (10e14 <sw_sha256_process+0x600>)
   10b58:	21b0      	movs	r1, #176	; 0xb0
   10b5a:	0049      	lsls	r1, r1, #1
   10b5c:	468c      	mov	ip, r1
   10b5e:	44bc      	add	ip, r7
   10b60:	4463      	add	r3, ip
   10b62:	6859      	ldr	r1, [r3, #4]
   10b64:	4bab      	ldr	r3, [pc, #684]	; (10e14 <sw_sha256_process+0x600>)
   10b66:	20b0      	movs	r0, #176	; 0xb0
   10b68:	0040      	lsls	r0, r0, #1
   10b6a:	4684      	mov	ip, r0
   10b6c:	44bc      	add	ip, r7
   10b6e:	4463      	add	r3, ip
   10b70:	689b      	ldr	r3, [r3, #8]
   10b72:	400b      	ands	r3, r1
            maj = (rotate_register[0] & rotate_register[1])
   10b74:	4053      	eors	r3, r2
   10b76:	22a0      	movs	r2, #160	; 0xa0
   10b78:	0052      	lsls	r2, r2, #1
   10b7a:	18ba      	adds	r2, r7, r2
   10b7c:	6013      	str	r3, [r2, #0]
            t2 = s0 + maj;
   10b7e:	23a4      	movs	r3, #164	; 0xa4
   10b80:	005b      	lsls	r3, r3, #1
   10b82:	18fb      	adds	r3, r7, r3
   10b84:	681a      	ldr	r2, [r3, #0]
   10b86:	23a0      	movs	r3, #160	; 0xa0
   10b88:	005b      	lsls	r3, r3, #1
   10b8a:	18fb      	adds	r3, r7, r3
   10b8c:	681b      	ldr	r3, [r3, #0]
   10b8e:	18d3      	adds	r3, r2, r3
   10b90:	229e      	movs	r2, #158	; 0x9e
   10b92:	0052      	lsls	r2, r2, #1
   10b94:	18ba      	adds	r2, r7, r2
   10b96:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(rotate_register[4], 6)
   10b98:	4b9e      	ldr	r3, [pc, #632]	; (10e14 <sw_sha256_process+0x600>)
   10b9a:	22b0      	movs	r2, #176	; 0xb0
   10b9c:	0052      	lsls	r2, r2, #1
   10b9e:	4694      	mov	ip, r2
   10ba0:	44bc      	add	ip, r7
   10ba2:	4463      	add	r3, ip
   10ba4:	691b      	ldr	r3, [r3, #16]
   10ba6:	2206      	movs	r2, #6
   10ba8:	41d3      	rors	r3, r2
   10baa:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[4], 11)
   10bac:	4b99      	ldr	r3, [pc, #612]	; (10e14 <sw_sha256_process+0x600>)
   10bae:	21b0      	movs	r1, #176	; 0xb0
   10bb0:	0049      	lsls	r1, r1, #1
   10bb2:	468c      	mov	ip, r1
   10bb4:	44bc      	add	ip, r7
   10bb6:	4463      	add	r3, ip
   10bb8:	691b      	ldr	r3, [r3, #16]
   10bba:	210b      	movs	r1, #11
   10bbc:	41cb      	rors	r3, r1
   10bbe:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[4], 25);
   10bc0:	4b94      	ldr	r3, [pc, #592]	; (10e14 <sw_sha256_process+0x600>)
   10bc2:	21b0      	movs	r1, #176	; 0xb0
   10bc4:	0049      	lsls	r1, r1, #1
   10bc6:	468c      	mov	ip, r1
   10bc8:	44bc      	add	ip, r7
   10bca:	4463      	add	r3, ip
   10bcc:	691b      	ldr	r3, [r3, #16]
   10bce:	2119      	movs	r1, #25
   10bd0:	41cb      	rors	r3, r1
            s1 = rotate_right(rotate_register[4], 6)
   10bd2:	4053      	eors	r3, r2
   10bd4:	22a2      	movs	r2, #162	; 0xa2
   10bd6:	0052      	lsls	r2, r2, #1
   10bd8:	18ba      	adds	r2, r7, r2
   10bda:	6013      	str	r3, [r2, #0]
            ch = (rotate_register[4] & rotate_register[5])
   10bdc:	4b8d      	ldr	r3, [pc, #564]	; (10e14 <sw_sha256_process+0x600>)
   10bde:	22b0      	movs	r2, #176	; 0xb0
   10be0:	0052      	lsls	r2, r2, #1
   10be2:	4694      	mov	ip, r2
   10be4:	44bc      	add	ip, r7
   10be6:	4463      	add	r3, ip
   10be8:	691a      	ldr	r2, [r3, #16]
   10bea:	4b8a      	ldr	r3, [pc, #552]	; (10e14 <sw_sha256_process+0x600>)
   10bec:	21b0      	movs	r1, #176	; 0xb0
   10bee:	0049      	lsls	r1, r1, #1
   10bf0:	468c      	mov	ip, r1
   10bf2:	44bc      	add	ip, r7
   10bf4:	4463      	add	r3, ip
   10bf6:	695b      	ldr	r3, [r3, #20]
   10bf8:	401a      	ands	r2, r3
                 ^ (~rotate_register[4] & rotate_register[6]);
   10bfa:	4b86      	ldr	r3, [pc, #536]	; (10e14 <sw_sha256_process+0x600>)
   10bfc:	21b0      	movs	r1, #176	; 0xb0
   10bfe:	0049      	lsls	r1, r1, #1
   10c00:	468c      	mov	ip, r1
   10c02:	44bc      	add	ip, r7
   10c04:	4463      	add	r3, ip
   10c06:	691b      	ldr	r3, [r3, #16]
   10c08:	43d9      	mvns	r1, r3
   10c0a:	4b82      	ldr	r3, [pc, #520]	; (10e14 <sw_sha256_process+0x600>)
   10c0c:	20b0      	movs	r0, #176	; 0xb0
   10c0e:	0040      	lsls	r0, r0, #1
   10c10:	4684      	mov	ip, r0
   10c12:	44bc      	add	ip, r7
   10c14:	4463      	add	r3, ip
   10c16:	699b      	ldr	r3, [r3, #24]
   10c18:	400b      	ands	r3, r1
            ch = (rotate_register[4] & rotate_register[5])
   10c1a:	4053      	eors	r3, r2
   10c1c:	229c      	movs	r2, #156	; 0x9c
   10c1e:	0052      	lsls	r2, r2, #1
   10c20:	18ba      	adds	r2, r7, r2
   10c22:	6013      	str	r3, [r2, #0]
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
   10c24:	4b7b      	ldr	r3, [pc, #492]	; (10e14 <sw_sha256_process+0x600>)
   10c26:	22b0      	movs	r2, #176	; 0xb0
   10c28:	0052      	lsls	r2, r2, #1
   10c2a:	4694      	mov	ip, r2
   10c2c:	44bc      	add	ip, r7
   10c2e:	4463      	add	r3, ip
   10c30:	69da      	ldr	r2, [r3, #28]
   10c32:	23a2      	movs	r3, #162	; 0xa2
   10c34:	005b      	lsls	r3, r3, #1
   10c36:	18fb      	adds	r3, r7, r3
   10c38:	681b      	ldr	r3, [r3, #0]
   10c3a:	18d2      	adds	r2, r2, r3
   10c3c:	239c      	movs	r3, #156	; 0x9c
   10c3e:	005b      	lsls	r3, r3, #1
   10c40:	18fb      	adds	r3, r7, r3
   10c42:	681b      	ldr	r3, [r3, #0]
   10c44:	18d2      	adds	r2, r2, r3
   10c46:	4b74      	ldr	r3, [pc, #464]	; (10e18 <sw_sha256_process+0x604>)
   10c48:	21ae      	movs	r1, #174	; 0xae
   10c4a:	0049      	lsls	r1, r1, #1
   10c4c:	1879      	adds	r1, r7, r1
   10c4e:	6809      	ldr	r1, [r1, #0]
   10c50:	0089      	lsls	r1, r1, #2
   10c52:	58cb      	ldr	r3, [r1, r3]
   10c54:	18d2      	adds	r2, r2, r3
   10c56:	4b71      	ldr	r3, [pc, #452]	; (10e1c <sw_sha256_process+0x608>)
   10c58:	21b0      	movs	r1, #176	; 0xb0
   10c5a:	0049      	lsls	r1, r1, #1
   10c5c:	468c      	mov	ip, r1
   10c5e:	44bc      	add	ip, r7
   10c60:	4463      	add	r3, ip
   10c62:	21ae      	movs	r1, #174	; 0xae
   10c64:	0049      	lsls	r1, r1, #1
   10c66:	1879      	adds	r1, r7, r1
   10c68:	6809      	ldr	r1, [r1, #0]
   10c6a:	0089      	lsls	r1, r1, #2
   10c6c:	58cb      	ldr	r3, [r1, r3]
   10c6e:	18d3      	adds	r3, r2, r3
   10c70:	229a      	movs	r2, #154	; 0x9a
   10c72:	0052      	lsls	r2, r2, #1
   10c74:	18ba      	adds	r2, r7, r2
   10c76:	6013      	str	r3, [r2, #0]

            rotate_register[7] = rotate_register[6];
   10c78:	4b66      	ldr	r3, [pc, #408]	; (10e14 <sw_sha256_process+0x600>)
   10c7a:	22b0      	movs	r2, #176	; 0xb0
   10c7c:	0052      	lsls	r2, r2, #1
   10c7e:	4694      	mov	ip, r2
   10c80:	44bc      	add	ip, r7
   10c82:	4463      	add	r3, ip
   10c84:	699a      	ldr	r2, [r3, #24]
   10c86:	4b63      	ldr	r3, [pc, #396]	; (10e14 <sw_sha256_process+0x600>)
   10c88:	21b0      	movs	r1, #176	; 0xb0
   10c8a:	0049      	lsls	r1, r1, #1
   10c8c:	468c      	mov	ip, r1
   10c8e:	44bc      	add	ip, r7
   10c90:	4463      	add	r3, ip
   10c92:	61da      	str	r2, [r3, #28]
            rotate_register[6] = rotate_register[5];
   10c94:	4b5f      	ldr	r3, [pc, #380]	; (10e14 <sw_sha256_process+0x600>)
   10c96:	22b0      	movs	r2, #176	; 0xb0
   10c98:	0052      	lsls	r2, r2, #1
   10c9a:	4694      	mov	ip, r2
   10c9c:	44bc      	add	ip, r7
   10c9e:	4463      	add	r3, ip
   10ca0:	695a      	ldr	r2, [r3, #20]
   10ca2:	4b5c      	ldr	r3, [pc, #368]	; (10e14 <sw_sha256_process+0x600>)
   10ca4:	21b0      	movs	r1, #176	; 0xb0
   10ca6:	0049      	lsls	r1, r1, #1
   10ca8:	468c      	mov	ip, r1
   10caa:	44bc      	add	ip, r7
   10cac:	4463      	add	r3, ip
   10cae:	619a      	str	r2, [r3, #24]
            rotate_register[5] = rotate_register[4];
   10cb0:	4b58      	ldr	r3, [pc, #352]	; (10e14 <sw_sha256_process+0x600>)
   10cb2:	22b0      	movs	r2, #176	; 0xb0
   10cb4:	0052      	lsls	r2, r2, #1
   10cb6:	4694      	mov	ip, r2
   10cb8:	44bc      	add	ip, r7
   10cba:	4463      	add	r3, ip
   10cbc:	691a      	ldr	r2, [r3, #16]
   10cbe:	4b55      	ldr	r3, [pc, #340]	; (10e14 <sw_sha256_process+0x600>)
   10cc0:	21b0      	movs	r1, #176	; 0xb0
   10cc2:	0049      	lsls	r1, r1, #1
   10cc4:	468c      	mov	ip, r1
   10cc6:	44bc      	add	ip, r7
   10cc8:	4463      	add	r3, ip
   10cca:	615a      	str	r2, [r3, #20]
            rotate_register[4] = rotate_register[3] + t1;
   10ccc:	4b51      	ldr	r3, [pc, #324]	; (10e14 <sw_sha256_process+0x600>)
   10cce:	22b0      	movs	r2, #176	; 0xb0
   10cd0:	0052      	lsls	r2, r2, #1
   10cd2:	4694      	mov	ip, r2
   10cd4:	44bc      	add	ip, r7
   10cd6:	4463      	add	r3, ip
   10cd8:	68da      	ldr	r2, [r3, #12]
   10cda:	239a      	movs	r3, #154	; 0x9a
   10cdc:	005b      	lsls	r3, r3, #1
   10cde:	18fb      	adds	r3, r7, r3
   10ce0:	681b      	ldr	r3, [r3, #0]
   10ce2:	18d2      	adds	r2, r2, r3
   10ce4:	4b4b      	ldr	r3, [pc, #300]	; (10e14 <sw_sha256_process+0x600>)
   10ce6:	21b0      	movs	r1, #176	; 0xb0
   10ce8:	0049      	lsls	r1, r1, #1
   10cea:	468c      	mov	ip, r1
   10cec:	44bc      	add	ip, r7
   10cee:	4463      	add	r3, ip
   10cf0:	611a      	str	r2, [r3, #16]
            rotate_register[3] = rotate_register[2];
   10cf2:	4b48      	ldr	r3, [pc, #288]	; (10e14 <sw_sha256_process+0x600>)
   10cf4:	22b0      	movs	r2, #176	; 0xb0
   10cf6:	0052      	lsls	r2, r2, #1
   10cf8:	4694      	mov	ip, r2
   10cfa:	44bc      	add	ip, r7
   10cfc:	4463      	add	r3, ip
   10cfe:	689a      	ldr	r2, [r3, #8]
   10d00:	4b44      	ldr	r3, [pc, #272]	; (10e14 <sw_sha256_process+0x600>)
   10d02:	21b0      	movs	r1, #176	; 0xb0
   10d04:	0049      	lsls	r1, r1, #1
   10d06:	468c      	mov	ip, r1
   10d08:	44bc      	add	ip, r7
   10d0a:	4463      	add	r3, ip
   10d0c:	60da      	str	r2, [r3, #12]
            rotate_register[2] = rotate_register[1];
   10d0e:	4b41      	ldr	r3, [pc, #260]	; (10e14 <sw_sha256_process+0x600>)
   10d10:	22b0      	movs	r2, #176	; 0xb0
   10d12:	0052      	lsls	r2, r2, #1
   10d14:	4694      	mov	ip, r2
   10d16:	44bc      	add	ip, r7
   10d18:	4463      	add	r3, ip
   10d1a:	685a      	ldr	r2, [r3, #4]
   10d1c:	4b3d      	ldr	r3, [pc, #244]	; (10e14 <sw_sha256_process+0x600>)
   10d1e:	21b0      	movs	r1, #176	; 0xb0
   10d20:	0049      	lsls	r1, r1, #1
   10d22:	468c      	mov	ip, r1
   10d24:	44bc      	add	ip, r7
   10d26:	4463      	add	r3, ip
   10d28:	609a      	str	r2, [r3, #8]
            rotate_register[1] = rotate_register[0];
   10d2a:	4b3a      	ldr	r3, [pc, #232]	; (10e14 <sw_sha256_process+0x600>)
   10d2c:	22b0      	movs	r2, #176	; 0xb0
   10d2e:	0052      	lsls	r2, r2, #1
   10d30:	4694      	mov	ip, r2
   10d32:	44bc      	add	ip, r7
   10d34:	4463      	add	r3, ip
   10d36:	681a      	ldr	r2, [r3, #0]
   10d38:	4b36      	ldr	r3, [pc, #216]	; (10e14 <sw_sha256_process+0x600>)
   10d3a:	21b0      	movs	r1, #176	; 0xb0
   10d3c:	0049      	lsls	r1, r1, #1
   10d3e:	468c      	mov	ip, r1
   10d40:	44bc      	add	ip, r7
   10d42:	4463      	add	r3, ip
   10d44:	605a      	str	r2, [r3, #4]
            rotate_register[0] = t1 + t2;
   10d46:	239a      	movs	r3, #154	; 0x9a
   10d48:	005b      	lsls	r3, r3, #1
   10d4a:	18fb      	adds	r3, r7, r3
   10d4c:	681a      	ldr	r2, [r3, #0]
   10d4e:	239e      	movs	r3, #158	; 0x9e
   10d50:	005b      	lsls	r3, r3, #1
   10d52:	18fb      	adds	r3, r7, r3
   10d54:	681b      	ldr	r3, [r3, #0]
   10d56:	18d2      	adds	r2, r2, r3
   10d58:	4b2e      	ldr	r3, [pc, #184]	; (10e14 <sw_sha256_process+0x600>)
   10d5a:	21b0      	movs	r1, #176	; 0xb0
   10d5c:	0049      	lsls	r1, r1, #1
   10d5e:	468c      	mov	ip, r1
   10d60:	44bc      	add	ip, r7
   10d62:	4463      	add	r3, ip
   10d64:	601a      	str	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
   10d66:	23ae      	movs	r3, #174	; 0xae
   10d68:	005b      	lsls	r3, r3, #1
   10d6a:	18fb      	adds	r3, r7, r3
   10d6c:	681b      	ldr	r3, [r3, #0]
   10d6e:	3301      	adds	r3, #1
   10d70:	22ae      	movs	r2, #174	; 0xae
   10d72:	0052      	lsls	r2, r2, #1
   10d74:	18ba      	adds	r2, r7, r2
   10d76:	6013      	str	r3, [r2, #0]
   10d78:	23ae      	movs	r3, #174	; 0xae
   10d7a:	005b      	lsls	r3, r3, #1
   10d7c:	18fb      	adds	r3, r7, r3
   10d7e:	681b      	ldr	r3, [r3, #0]
   10d80:	2b3f      	cmp	r3, #63	; 0x3f
   10d82:	dc00      	bgt.n	10d86 <sw_sha256_process+0x572>
   10d84:	e6a6      	b.n	10ad4 <sw_sha256_process+0x2c0>
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
   10d86:	2300      	movs	r3, #0
   10d88:	22ae      	movs	r2, #174	; 0xae
   10d8a:	0052      	lsls	r2, r2, #1
   10d8c:	18ba      	adds	r2, r7, r2
   10d8e:	6013      	str	r3, [r2, #0]
   10d90:	e025      	b.n	10dde <sw_sha256_process+0x5ca>
        {
            ctx->hash[i] += rotate_register[i];
   10d92:	68fb      	ldr	r3, [r7, #12]
   10d94:	22ae      	movs	r2, #174	; 0xae
   10d96:	0052      	lsls	r2, r2, #1
   10d98:	18ba      	adds	r2, r7, r2
   10d9a:	6812      	ldr	r2, [r2, #0]
   10d9c:	3222      	adds	r2, #34	; 0x22
   10d9e:	0092      	lsls	r2, r2, #2
   10da0:	58d2      	ldr	r2, [r2, r3]
   10da2:	4b1c      	ldr	r3, [pc, #112]	; (10e14 <sw_sha256_process+0x600>)
   10da4:	21b0      	movs	r1, #176	; 0xb0
   10da6:	0049      	lsls	r1, r1, #1
   10da8:	468c      	mov	ip, r1
   10daa:	44bc      	add	ip, r7
   10dac:	4463      	add	r3, ip
   10dae:	21ae      	movs	r1, #174	; 0xae
   10db0:	0049      	lsls	r1, r1, #1
   10db2:	1879      	adds	r1, r7, r1
   10db4:	6809      	ldr	r1, [r1, #0]
   10db6:	0089      	lsls	r1, r1, #2
   10db8:	58cb      	ldr	r3, [r1, r3]
   10dba:	18d1      	adds	r1, r2, r3
   10dbc:	68fb      	ldr	r3, [r7, #12]
   10dbe:	22ae      	movs	r2, #174	; 0xae
   10dc0:	0052      	lsls	r2, r2, #1
   10dc2:	18ba      	adds	r2, r7, r2
   10dc4:	6812      	ldr	r2, [r2, #0]
   10dc6:	3222      	adds	r2, #34	; 0x22
   10dc8:	0092      	lsls	r2, r2, #2
   10dca:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
   10dcc:	23ae      	movs	r3, #174	; 0xae
   10dce:	005b      	lsls	r3, r3, #1
   10dd0:	18fb      	adds	r3, r7, r3
   10dd2:	681b      	ldr	r3, [r3, #0]
   10dd4:	3301      	adds	r3, #1
   10dd6:	22ae      	movs	r2, #174	; 0xae
   10dd8:	0052      	lsls	r2, r2, #1
   10dda:	18ba      	adds	r2, r7, r2
   10ddc:	6013      	str	r3, [r2, #0]
   10dde:	23ae      	movs	r3, #174	; 0xae
   10de0:	005b      	lsls	r3, r3, #1
   10de2:	18fb      	adds	r3, r7, r3
   10de4:	681b      	ldr	r3, [r3, #0]
   10de6:	2b07      	cmp	r3, #7
   10de8:	ddd3      	ble.n	10d92 <sw_sha256_process+0x57e>
    for (block = 0; block < block_count; block++)
   10dea:	23ac      	movs	r3, #172	; 0xac
   10dec:	005b      	lsls	r3, r3, #1
   10dee:	18fb      	adds	r3, r7, r3
   10df0:	681b      	ldr	r3, [r3, #0]
   10df2:	3301      	adds	r3, #1
   10df4:	22ac      	movs	r2, #172	; 0xac
   10df6:	0052      	lsls	r2, r2, #1
   10df8:	18ba      	adds	r2, r7, r2
   10dfa:	6013      	str	r3, [r2, #0]
   10dfc:	23ac      	movs	r3, #172	; 0xac
   10dfe:	005b      	lsls	r3, r3, #1
   10e00:	18fb      	adds	r3, r7, r3
   10e02:	681a      	ldr	r2, [r3, #0]
   10e04:	687b      	ldr	r3, [r7, #4]
   10e06:	429a      	cmp	r2, r3
   10e08:	d200      	bcs.n	10e0c <sw_sha256_process+0x5f8>
   10e0a:	e519      	b.n	10840 <sw_sha256_process+0x2c>
        }
    }
}
   10e0c:	46c0      	nop			; (mov r8, r8)
   10e0e:	46bd      	mov	sp, r7
   10e10:	b058      	add	sp, #352	; 0x160
   10e12:	bd80      	pop	{r7, pc}
   10e14:	fffffeb4 	.word	0xfffffeb4
   10e18:	00020dfc 	.word	0x00020dfc
   10e1c:	fffffed4 	.word	0xfffffed4

00010e20 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
   10e20:	b580      	push	{r7, lr}
   10e22:	b084      	sub	sp, #16
   10e24:	af00      	add	r7, sp, #0
   10e26:	6078      	str	r0, [r7, #4]
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
   10e28:	687b      	ldr	r3, [r7, #4]
   10e2a:	22a8      	movs	r2, #168	; 0xa8
   10e2c:	2100      	movs	r1, #0
   10e2e:	0018      	movs	r0, r3
   10e30:	4b0b      	ldr	r3, [pc, #44]	; (10e60 <sw_sha256_init+0x40>)
   10e32:	4798      	blx	r3
    for (i = 0; i < 8; i++)
   10e34:	2300      	movs	r3, #0
   10e36:	60fb      	str	r3, [r7, #12]
   10e38:	e00b      	b.n	10e52 <sw_sha256_init+0x32>
    {
        ctx->hash[i] = hash_init[i];
   10e3a:	4b0a      	ldr	r3, [pc, #40]	; (10e64 <sw_sha256_init+0x44>)
   10e3c:	68fa      	ldr	r2, [r7, #12]
   10e3e:	0092      	lsls	r2, r2, #2
   10e40:	58d1      	ldr	r1, [r2, r3]
   10e42:	687b      	ldr	r3, [r7, #4]
   10e44:	68fa      	ldr	r2, [r7, #12]
   10e46:	3222      	adds	r2, #34	; 0x22
   10e48:	0092      	lsls	r2, r2, #2
   10e4a:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 8; i++)
   10e4c:	68fb      	ldr	r3, [r7, #12]
   10e4e:	3301      	adds	r3, #1
   10e50:	60fb      	str	r3, [r7, #12]
   10e52:	68fb      	ldr	r3, [r7, #12]
   10e54:	2b07      	cmp	r3, #7
   10e56:	ddf0      	ble.n	10e3a <sw_sha256_init+0x1a>
    }
}
   10e58:	46c0      	nop			; (mov r8, r8)
   10e5a:	46bd      	mov	sp, r7
   10e5c:	b004      	add	sp, #16
   10e5e:	bd80      	pop	{r7, pc}
   10e60:	0001c21b 	.word	0x0001c21b
   10e64:	00020efc 	.word	0x00020efc

00010e68 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
   10e68:	b580      	push	{r7, lr}
   10e6a:	b088      	sub	sp, #32
   10e6c:	af00      	add	r7, sp, #0
   10e6e:	60f8      	str	r0, [r7, #12]
   10e70:	60b9      	str	r1, [r7, #8]
   10e72:	607a      	str	r2, [r7, #4]
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
   10e74:	68fb      	ldr	r3, [r7, #12]
   10e76:	685b      	ldr	r3, [r3, #4]
   10e78:	2240      	movs	r2, #64	; 0x40
   10e7a:	1ad3      	subs	r3, r2, r3
   10e7c:	61fb      	str	r3, [r7, #28]
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
   10e7e:	69fa      	ldr	r2, [r7, #28]
   10e80:	687b      	ldr	r3, [r7, #4]
   10e82:	4293      	cmp	r3, r2
   10e84:	d900      	bls.n	10e88 <sw_sha256_update+0x20>
   10e86:	0013      	movs	r3, r2
   10e88:	61bb      	str	r3, [r7, #24]

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
   10e8a:	68fb      	ldr	r3, [r7, #12]
   10e8c:	685b      	ldr	r3, [r3, #4]
   10e8e:	3308      	adds	r3, #8
   10e90:	68fa      	ldr	r2, [r7, #12]
   10e92:	18d3      	adds	r3, r2, r3
   10e94:	69ba      	ldr	r2, [r7, #24]
   10e96:	68b9      	ldr	r1, [r7, #8]
   10e98:	0018      	movs	r0, r3
   10e9a:	4b22      	ldr	r3, [pc, #136]	; (10f24 <sw_sha256_update+0xbc>)
   10e9c:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
   10e9e:	68fb      	ldr	r3, [r7, #12]
   10ea0:	685a      	ldr	r2, [r3, #4]
   10ea2:	687b      	ldr	r3, [r7, #4]
   10ea4:	18d3      	adds	r3, r2, r3
   10ea6:	2b3f      	cmp	r3, #63	; 0x3f
   10ea8:	d806      	bhi.n	10eb8 <sw_sha256_update+0x50>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
   10eaa:	68fb      	ldr	r3, [r7, #12]
   10eac:	685a      	ldr	r2, [r3, #4]
   10eae:	687b      	ldr	r3, [r7, #4]
   10eb0:	18d2      	adds	r2, r2, r3
   10eb2:	68fb      	ldr	r3, [r7, #12]
   10eb4:	605a      	str	r2, [r3, #4]
        return;
   10eb6:	e031      	b.n	10f1c <sw_sha256_update+0xb4>
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
   10eb8:	68fb      	ldr	r3, [r7, #12]
   10eba:	3308      	adds	r3, #8
   10ebc:	0019      	movs	r1, r3
   10ebe:	68fb      	ldr	r3, [r7, #12]
   10ec0:	2201      	movs	r2, #1
   10ec2:	0018      	movs	r0, r3
   10ec4:	4b18      	ldr	r3, [pc, #96]	; (10f28 <sw_sha256_update+0xc0>)
   10ec6:	4798      	blx	r3

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
   10ec8:	687a      	ldr	r2, [r7, #4]
   10eca:	69bb      	ldr	r3, [r7, #24]
   10ecc:	1ad3      	subs	r3, r2, r3
   10ece:	607b      	str	r3, [r7, #4]
    block_count = msg_size / SHA256_BLOCK_SIZE;
   10ed0:	687b      	ldr	r3, [r7, #4]
   10ed2:	099b      	lsrs	r3, r3, #6
   10ed4:	617b      	str	r3, [r7, #20]
    sw_sha256_process(ctx, &msg[copy_size], block_count);
   10ed6:	68ba      	ldr	r2, [r7, #8]
   10ed8:	69bb      	ldr	r3, [r7, #24]
   10eda:	18d1      	adds	r1, r2, r3
   10edc:	697a      	ldr	r2, [r7, #20]
   10ede:	68fb      	ldr	r3, [r7, #12]
   10ee0:	0018      	movs	r0, r3
   10ee2:	4b11      	ldr	r3, [pc, #68]	; (10f28 <sw_sha256_update+0xc0>)
   10ee4:	4798      	blx	r3

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
   10ee6:	68fb      	ldr	r3, [r7, #12]
   10ee8:	681a      	ldr	r2, [r3, #0]
   10eea:	697b      	ldr	r3, [r7, #20]
   10eec:	3301      	adds	r3, #1
   10eee:	019b      	lsls	r3, r3, #6
   10ef0:	18d2      	adds	r2, r2, r3
   10ef2:	68fb      	ldr	r3, [r7, #12]
   10ef4:	601a      	str	r2, [r3, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
   10ef6:	687b      	ldr	r3, [r7, #4]
   10ef8:	223f      	movs	r2, #63	; 0x3f
   10efa:	401a      	ands	r2, r3
   10efc:	68fb      	ldr	r3, [r7, #12]
   10efe:	605a      	str	r2, [r3, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
   10f00:	68fb      	ldr	r3, [r7, #12]
   10f02:	3308      	adds	r3, #8
   10f04:	0018      	movs	r0, r3
   10f06:	697b      	ldr	r3, [r7, #20]
   10f08:	019a      	lsls	r2, r3, #6
   10f0a:	69bb      	ldr	r3, [r7, #24]
   10f0c:	18d3      	adds	r3, r2, r3
   10f0e:	68ba      	ldr	r2, [r7, #8]
   10f10:	18d1      	adds	r1, r2, r3
   10f12:	68fb      	ldr	r3, [r7, #12]
   10f14:	685b      	ldr	r3, [r3, #4]
   10f16:	001a      	movs	r2, r3
   10f18:	4b02      	ldr	r3, [pc, #8]	; (10f24 <sw_sha256_update+0xbc>)
   10f1a:	4798      	blx	r3
}
   10f1c:	46bd      	mov	sp, r7
   10f1e:	b008      	add	sp, #32
   10f20:	bd80      	pop	{r7, pc}
   10f22:	46c0      	nop			; (mov r8, r8)
   10f24:	0001c1e5 	.word	0x0001c1e5
   10f28:	00010815 	.word	0x00010815

00010f2c <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
   10f2c:	b580      	push	{r7, lr}
   10f2e:	b086      	sub	sp, #24
   10f30:	af00      	add	r7, sp, #0
   10f32:	6078      	str	r0, [r7, #4]
   10f34:	6039      	str	r1, [r7, #0]
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
   10f36:	687b      	ldr	r3, [r7, #4]
   10f38:	681a      	ldr	r2, [r3, #0]
   10f3a:	687b      	ldr	r3, [r7, #4]
   10f3c:	685b      	ldr	r3, [r3, #4]
   10f3e:	18d2      	adds	r2, r2, r3
   10f40:	687b      	ldr	r3, [r7, #4]
   10f42:	601a      	str	r2, [r3, #0]
    msg_size_bits = ctx->total_msg_size * 8;
   10f44:	687b      	ldr	r3, [r7, #4]
   10f46:	681b      	ldr	r3, [r3, #0]
   10f48:	00db      	lsls	r3, r3, #3
   10f4a:	60fb      	str	r3, [r7, #12]

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
   10f4c:	687b      	ldr	r3, [r7, #4]
   10f4e:	685b      	ldr	r3, [r3, #4]
   10f50:	2209      	movs	r2, #9
   10f52:	4252      	negs	r2, r2
   10f54:	1ad3      	subs	r3, r2, r3
   10f56:	223f      	movs	r2, #63	; 0x3f
   10f58:	4013      	ands	r3, r2
   10f5a:	60bb      	str	r3, [r7, #8]

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
   10f5c:	687b      	ldr	r3, [r7, #4]
   10f5e:	685b      	ldr	r3, [r3, #4]
   10f60:	1c59      	adds	r1, r3, #1
   10f62:	687a      	ldr	r2, [r7, #4]
   10f64:	6051      	str	r1, [r2, #4]
   10f66:	687a      	ldr	r2, [r7, #4]
   10f68:	18d3      	adds	r3, r2, r3
   10f6a:	2280      	movs	r2, #128	; 0x80
   10f6c:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
   10f6e:	687b      	ldr	r3, [r7, #4]
   10f70:	685b      	ldr	r3, [r3, #4]
   10f72:	3308      	adds	r3, #8
   10f74:	687a      	ldr	r2, [r7, #4]
   10f76:	18d0      	adds	r0, r2, r3
   10f78:	68bb      	ldr	r3, [r7, #8]
   10f7a:	3304      	adds	r3, #4
   10f7c:	001a      	movs	r2, r3
   10f7e:	2100      	movs	r1, #0
   10f80:	4b37      	ldr	r3, [pc, #220]	; (11060 <sw_sha256_final+0x134>)
   10f82:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
   10f84:	687b      	ldr	r3, [r7, #4]
   10f86:	685a      	ldr	r2, [r3, #4]
   10f88:	68bb      	ldr	r3, [r7, #8]
   10f8a:	18d3      	adds	r3, r2, r3
   10f8c:	1d1a      	adds	r2, r3, #4
   10f8e:	687b      	ldr	r3, [r7, #4]
   10f90:	605a      	str	r2, [r3, #4]

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
   10f92:	687b      	ldr	r3, [r7, #4]
   10f94:	685b      	ldr	r3, [r3, #4]
   10f96:	1c59      	adds	r1, r3, #1
   10f98:	687a      	ldr	r2, [r7, #4]
   10f9a:	6051      	str	r1, [r2, #4]
   10f9c:	68fa      	ldr	r2, [r7, #12]
   10f9e:	0e12      	lsrs	r2, r2, #24
   10fa0:	b2d1      	uxtb	r1, r2
   10fa2:	687a      	ldr	r2, [r7, #4]
   10fa4:	18d3      	adds	r3, r2, r3
   10fa6:	1c0a      	adds	r2, r1, #0
   10fa8:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
   10faa:	687b      	ldr	r3, [r7, #4]
   10fac:	685b      	ldr	r3, [r3, #4]
   10fae:	1c59      	adds	r1, r3, #1
   10fb0:	687a      	ldr	r2, [r7, #4]
   10fb2:	6051      	str	r1, [r2, #4]
   10fb4:	68fa      	ldr	r2, [r7, #12]
   10fb6:	0c12      	lsrs	r2, r2, #16
   10fb8:	b2d1      	uxtb	r1, r2
   10fba:	687a      	ldr	r2, [r7, #4]
   10fbc:	18d3      	adds	r3, r2, r3
   10fbe:	1c0a      	adds	r2, r1, #0
   10fc0:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
   10fc2:	687b      	ldr	r3, [r7, #4]
   10fc4:	685b      	ldr	r3, [r3, #4]
   10fc6:	1c59      	adds	r1, r3, #1
   10fc8:	687a      	ldr	r2, [r7, #4]
   10fca:	6051      	str	r1, [r2, #4]
   10fcc:	68fa      	ldr	r2, [r7, #12]
   10fce:	0a12      	lsrs	r2, r2, #8
   10fd0:	b2d1      	uxtb	r1, r2
   10fd2:	687a      	ldr	r2, [r7, #4]
   10fd4:	18d3      	adds	r3, r2, r3
   10fd6:	1c0a      	adds	r2, r1, #0
   10fd8:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
   10fda:	687b      	ldr	r3, [r7, #4]
   10fdc:	685b      	ldr	r3, [r3, #4]
   10fde:	1c59      	adds	r1, r3, #1
   10fe0:	687a      	ldr	r2, [r7, #4]
   10fe2:	6051      	str	r1, [r2, #4]
   10fe4:	68fa      	ldr	r2, [r7, #12]
   10fe6:	b2d1      	uxtb	r1, r2
   10fe8:	687a      	ldr	r2, [r7, #4]
   10fea:	18d3      	adds	r3, r2, r3
   10fec:	1c0a      	adds	r2, r1, #0
   10fee:	721a      	strb	r2, [r3, #8]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
   10ff0:	687b      	ldr	r3, [r7, #4]
   10ff2:	3308      	adds	r3, #8
   10ff4:	0019      	movs	r1, r3
   10ff6:	687b      	ldr	r3, [r7, #4]
   10ff8:	685b      	ldr	r3, [r3, #4]
   10ffa:	099a      	lsrs	r2, r3, #6
   10ffc:	687b      	ldr	r3, [r7, #4]
   10ffe:	0018      	movs	r0, r3
   11000:	4b18      	ldr	r3, [pc, #96]	; (11064 <sw_sha256_final+0x138>)
   11002:	4798      	blx	r3

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
   11004:	2300      	movs	r3, #0
   11006:	617b      	str	r3, [r7, #20]
   11008:	e023      	b.n	11052 <sw_sha256_final+0x126>
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
   1100a:	2303      	movs	r3, #3
   1100c:	613b      	str	r3, [r7, #16]
   1100e:	e01a      	b.n	11046 <sw_sha256_final+0x11a>
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
   11010:	697b      	ldr	r3, [r7, #20]
   11012:	009a      	lsls	r2, r3, #2
   11014:	693b      	ldr	r3, [r7, #16]
   11016:	18d3      	adds	r3, r2, r3
   11018:	683a      	ldr	r2, [r7, #0]
   1101a:	18d3      	adds	r3, r2, r3
   1101c:	687a      	ldr	r2, [r7, #4]
   1101e:	6979      	ldr	r1, [r7, #20]
   11020:	3122      	adds	r1, #34	; 0x22
   11022:	0089      	lsls	r1, r1, #2
   11024:	588a      	ldr	r2, [r1, r2]
   11026:	b2d2      	uxtb	r2, r2
   11028:	701a      	strb	r2, [r3, #0]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
   1102a:	693b      	ldr	r3, [r7, #16]
   1102c:	3b01      	subs	r3, #1
   1102e:	613b      	str	r3, [r7, #16]
   11030:	687b      	ldr	r3, [r7, #4]
   11032:	697a      	ldr	r2, [r7, #20]
   11034:	3222      	adds	r2, #34	; 0x22
   11036:	0092      	lsls	r2, r2, #2
   11038:	58d3      	ldr	r3, [r2, r3]
   1103a:	0a19      	lsrs	r1, r3, #8
   1103c:	687b      	ldr	r3, [r7, #4]
   1103e:	697a      	ldr	r2, [r7, #20]
   11040:	3222      	adds	r2, #34	; 0x22
   11042:	0092      	lsls	r2, r2, #2
   11044:	50d1      	str	r1, [r2, r3]
   11046:	693b      	ldr	r3, [r7, #16]
   11048:	2b00      	cmp	r3, #0
   1104a:	dae1      	bge.n	11010 <sw_sha256_final+0xe4>
    for (i = 0; i < 8; i++)
   1104c:	697b      	ldr	r3, [r7, #20]
   1104e:	3301      	adds	r3, #1
   11050:	617b      	str	r3, [r7, #20]
   11052:	697b      	ldr	r3, [r7, #20]
   11054:	2b07      	cmp	r3, #7
   11056:	ddd8      	ble.n	1100a <sw_sha256_final+0xde>
        }
    }
}
   11058:	46c0      	nop			; (mov r8, r8)
   1105a:	46bd      	mov	sp, r7
   1105c:	b006      	add	sp, #24
   1105e:	bd80      	pop	{r7, pc}
   11060:	0001c21b 	.word	0x0001c21b
   11064:	00010815 	.word	0x00010815

00011068 <hal_iface_init>:
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
   11068:	b580      	push	{r7, lr}
   1106a:	b084      	sub	sp, #16
   1106c:	af00      	add	r7, sp, #0
   1106e:	6078      	str	r0, [r7, #4]
   11070:	6039      	str	r1, [r7, #0]
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
   11072:	230f      	movs	r3, #15
   11074:	18fb      	adds	r3, r7, r3
   11076:	22f0      	movs	r2, #240	; 0xf0
   11078:	701a      	strb	r2, [r3, #0]

    switch (cfg->iface_type)
   1107a:	687b      	ldr	r3, [r7, #4]
   1107c:	781b      	ldrb	r3, [r3, #0]
   1107e:	2b05      	cmp	r3, #5
   11080:	d824      	bhi.n	110cc <hal_iface_init+0x64>
   11082:	009a      	lsls	r2, r3, #2
   11084:	4b16      	ldr	r3, [pc, #88]	; (110e0 <hal_iface_init+0x78>)
   11086:	18d3      	adds	r3, r2, r3
   11088:	681b      	ldr	r3, [r3, #0]
   1108a:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
   1108c:	683b      	ldr	r3, [r7, #0]
   1108e:	4a15      	ldr	r2, [pc, #84]	; (110e4 <hal_iface_init+0x7c>)
   11090:	601a      	str	r2, [r3, #0]
        hal->halpostinit = &hal_i2c_post_init;
   11092:	683b      	ldr	r3, [r7, #0]
   11094:	4a14      	ldr	r2, [pc, #80]	; (110e8 <hal_iface_init+0x80>)
   11096:	605a      	str	r2, [r3, #4]
        hal->halreceive = &hal_i2c_receive;
   11098:	683b      	ldr	r3, [r7, #0]
   1109a:	4a14      	ldr	r2, [pc, #80]	; (110ec <hal_iface_init+0x84>)
   1109c:	60da      	str	r2, [r3, #12]
        hal->halsend = &hal_i2c_send;
   1109e:	683b      	ldr	r3, [r7, #0]
   110a0:	4a13      	ldr	r2, [pc, #76]	; (110f0 <hal_iface_init+0x88>)
   110a2:	609a      	str	r2, [r3, #8]
        hal->halsleep = &hal_i2c_sleep;
   110a4:	683b      	ldr	r3, [r7, #0]
   110a6:	4a13      	ldr	r2, [pc, #76]	; (110f4 <hal_iface_init+0x8c>)
   110a8:	619a      	str	r2, [r3, #24]
        hal->halwake = &hal_i2c_wake;
   110aa:	683b      	ldr	r3, [r7, #0]
   110ac:	4a12      	ldr	r2, [pc, #72]	; (110f8 <hal_iface_init+0x90>)
   110ae:	611a      	str	r2, [r3, #16]
        hal->halidle = &hal_i2c_idle;
   110b0:	683b      	ldr	r3, [r7, #0]
   110b2:	4a12      	ldr	r2, [pc, #72]	; (110fc <hal_iface_init+0x94>)
   110b4:	615a      	str	r2, [r3, #20]
        hal->halrelease = &hal_i2c_release;
   110b6:	683b      	ldr	r3, [r7, #0]
   110b8:	4a11      	ldr	r2, [pc, #68]	; (11100 <hal_iface_init+0x98>)
   110ba:	61da      	str	r2, [r3, #28]
        hal->hal_data = NULL;
   110bc:	683b      	ldr	r3, [r7, #0]
   110be:	2200      	movs	r2, #0
   110c0:	621a      	str	r2, [r3, #32]

        status = ATCA_SUCCESS;
   110c2:	230f      	movs	r3, #15
   110c4:	18fb      	adds	r3, r7, r3
   110c6:	2200      	movs	r2, #0
   110c8:	701a      	strb	r2, [r3, #0]
        #endif
        break;
   110ca:	e002      	b.n	110d2 <hal_iface_init+0x6a>

        status = ATCA_SUCCESS;
        #endif
        break;
    default:
        break;
   110cc:	46c0      	nop			; (mov r8, r8)
   110ce:	e000      	b.n	110d2 <hal_iface_init+0x6a>
        break;
   110d0:	46c0      	nop			; (mov r8, r8)
    }
    return status;
   110d2:	230f      	movs	r3, #15
   110d4:	18fb      	adds	r3, r7, r3
   110d6:	781b      	ldrb	r3, [r3, #0]
}
   110d8:	0018      	movs	r0, r3
   110da:	46bd      	mov	sp, r7
   110dc:	b004      	add	sp, #16
   110de:	bd80      	pop	{r7, pc}
   110e0:	00020f1c 	.word	0x00020f1c
   110e4:	00011c25 	.word	0x00011c25
   110e8:	00011dd5 	.word	0x00011dd5
   110ec:	00011e8d 	.word	0x00011e8d
   110f0:	00011de9 	.word	0x00011de9
   110f4:	0001225d 	.word	0x0001225d
   110f8:	00012081 	.word	0x00012081
   110fc:	000121cd 	.word	0x000121cd
   11100:	000122ed 	.word	0x000122ed

00011104 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
   11104:	b590      	push	{r4, r7, lr}
   11106:	b085      	sub	sp, #20
   11108:	af00      	add	r7, sp, #0
   1110a:	0002      	movs	r2, r0
   1110c:	6039      	str	r1, [r7, #0]
   1110e:	1dfb      	adds	r3, r7, #7
   11110:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11112:	230f      	movs	r3, #15
   11114:	18fb      	adds	r3, r7, r3
   11116:	22e1      	movs	r2, #225	; 0xe1
   11118:	701a      	strb	r2, [r3, #0]

    switch (iface_type)
   1111a:	1dfb      	adds	r3, r7, #7
   1111c:	781b      	ldrb	r3, [r3, #0]
   1111e:	2b05      	cmp	r3, #5
   11120:	d80d      	bhi.n	1113e <hal_iface_release+0x3a>
   11122:	009a      	lsls	r2, r3, #2
   11124:	4b0b      	ldr	r3, [pc, #44]	; (11154 <hal_iface_release+0x50>)
   11126:	18d3      	adds	r3, r2, r3
   11128:	681b      	ldr	r3, [r3, #0]
   1112a:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
#ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
   1112c:	230f      	movs	r3, #15
   1112e:	18fc      	adds	r4, r7, r3
   11130:	683b      	ldr	r3, [r7, #0]
   11132:	0018      	movs	r0, r3
   11134:	4b08      	ldr	r3, [pc, #32]	; (11158 <hal_iface_release+0x54>)
   11136:	4798      	blx	r3
   11138:	0003      	movs	r3, r0
   1113a:	7023      	strb	r3, [r4, #0]
#endif
        break;
   1113c:	e002      	b.n	11144 <hal_iface_release+0x40>
    case ATCA_CUSTOM_IFACE:
#ifdef ATCA_HAL_CUSTOM
#endif
        break;
    default:
        break;
   1113e:	46c0      	nop			; (mov r8, r8)
   11140:	e000      	b.n	11144 <hal_iface_release+0x40>
        break;
   11142:	46c0      	nop			; (mov r8, r8)
    }

    return status;
   11144:	230f      	movs	r3, #15
   11146:	18fb      	adds	r3, r7, r3
   11148:	781b      	ldrb	r3, [r3, #0]
}
   1114a:	0018      	movs	r0, r3
   1114c:	46bd      	mov	sp, r7
   1114e:	b005      	add	sp, #20
   11150:	bd90      	pop	{r4, r7, pc}
   11152:	46c0      	nop			; (mov r8, r8)
   11154:	00020f34 	.word	0x00020f34
   11158:	000122ed 	.word	0x000122ed

0001115c <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
   1115c:	b590      	push	{r4, r7, lr}
   1115e:	b0ab      	sub	sp, #172	; 0xac
   11160:	af00      	add	r7, sp, #0
   11162:	60ba      	str	r2, [r7, #8]
   11164:	607b      	str	r3, [r7, #4]
   11166:	230f      	movs	r3, #15
   11168:	18fb      	adds	r3, r7, r3
   1116a:	1c02      	adds	r2, r0, #0
   1116c:	701a      	strb	r2, [r3, #0]
   1116e:	230c      	movs	r3, #12
   11170:	18fb      	adds	r3, r7, r3
   11172:	1c0a      	adds	r2, r1, #0
   11174:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   11176:	4b30      	ldr	r3, [pc, #192]	; (11238 <atcab_genkey_base+0xdc>)
   11178:	681b      	ldr	r3, [r3, #0]
   1117a:	681b      	ldr	r3, [r3, #0]
   1117c:	22a0      	movs	r2, #160	; 0xa0
   1117e:	18ba      	adds	r2, r7, r2
   11180:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11182:	23a7      	movs	r3, #167	; 0xa7
   11184:	18fb      	adds	r3, r7, r3
   11186:	22e1      	movs	r2, #225	; 0xe1
   11188:	701a      	strb	r2, [r3, #0]

    do
    {
        // Build GenKey command
        packet.param1 = mode;
   1118a:	2314      	movs	r3, #20
   1118c:	18fb      	adds	r3, r7, r3
   1118e:	220f      	movs	r2, #15
   11190:	18ba      	adds	r2, r7, r2
   11192:	7812      	ldrb	r2, [r2, #0]
   11194:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   11196:	2314      	movs	r3, #20
   11198:	18fb      	adds	r3, r7, r3
   1119a:	220c      	movs	r2, #12
   1119c:	18ba      	adds	r2, r7, r2
   1119e:	8812      	ldrh	r2, [r2, #0]
   111a0:	809a      	strh	r2, [r3, #4]
        if (other_data)
   111a2:	68bb      	ldr	r3, [r7, #8]
   111a4:	2b00      	cmp	r3, #0
   111a6:	d007      	beq.n	111b8 <atcab_genkey_base+0x5c>
        {
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
   111a8:	68b9      	ldr	r1, [r7, #8]
   111aa:	2314      	movs	r3, #20
   111ac:	18fb      	adds	r3, r7, r3
   111ae:	3306      	adds	r3, #6
   111b0:	2203      	movs	r2, #3
   111b2:	0018      	movs	r0, r3
   111b4:	4b21      	ldr	r3, [pc, #132]	; (1123c <atcab_genkey_base+0xe0>)
   111b6:	4798      	blx	r3
        }

        if ((status = atGenKey(ca_cmd, &packet)) != ATCA_SUCCESS)
   111b8:	23a7      	movs	r3, #167	; 0xa7
   111ba:	18fc      	adds	r4, r7, r3
   111bc:	2314      	movs	r3, #20
   111be:	18fa      	adds	r2, r7, r3
   111c0:	23a0      	movs	r3, #160	; 0xa0
   111c2:	18fb      	adds	r3, r7, r3
   111c4:	681b      	ldr	r3, [r3, #0]
   111c6:	0011      	movs	r1, r2
   111c8:	0018      	movs	r0, r3
   111ca:	4b1d      	ldr	r3, [pc, #116]	; (11240 <atcab_genkey_base+0xe4>)
   111cc:	4798      	blx	r3
   111ce:	0003      	movs	r3, r0
   111d0:	7023      	strb	r3, [r4, #0]
   111d2:	23a7      	movs	r3, #167	; 0xa7
   111d4:	18fb      	adds	r3, r7, r3
   111d6:	781b      	ldrb	r3, [r3, #0]
   111d8:	2b00      	cmp	r3, #0
   111da:	d122      	bne.n	11222 <atcab_genkey_base+0xc6>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   111dc:	23a7      	movs	r3, #167	; 0xa7
   111de:	18fc      	adds	r4, r7, r3
   111e0:	2314      	movs	r3, #20
   111e2:	18fb      	adds	r3, r7, r3
   111e4:	0018      	movs	r0, r3
   111e6:	4b17      	ldr	r3, [pc, #92]	; (11244 <atcab_genkey_base+0xe8>)
   111e8:	4798      	blx	r3
   111ea:	0003      	movs	r3, r0
   111ec:	7023      	strb	r3, [r4, #0]
   111ee:	23a7      	movs	r3, #167	; 0xa7
   111f0:	18fb      	adds	r3, r7, r3
   111f2:	781b      	ldrb	r3, [r3, #0]
   111f4:	2b00      	cmp	r3, #0
   111f6:	d116      	bne.n	11226 <atcab_genkey_base+0xca>
        {
            break;
        }

        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
   111f8:	687b      	ldr	r3, [r7, #4]
   111fa:	2b00      	cmp	r3, #0
   111fc:	d014      	beq.n	11228 <atcab_genkey_base+0xcc>
   111fe:	2314      	movs	r3, #20
   11200:	18fb      	adds	r3, r7, r3
   11202:	799b      	ldrb	r3, [r3, #6]
   11204:	2b04      	cmp	r3, #4
   11206:	d90f      	bls.n	11228 <atcab_genkey_base+0xcc>
        {
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
   11208:	2314      	movs	r3, #20
   1120a:	18fb      	adds	r3, r7, r3
   1120c:	799b      	ldrb	r3, [r3, #6]
   1120e:	3b03      	subs	r3, #3
   11210:	001a      	movs	r2, r3
   11212:	2314      	movs	r3, #20
   11214:	18fb      	adds	r3, r7, r3
   11216:	1dd9      	adds	r1, r3, #7
   11218:	687b      	ldr	r3, [r7, #4]
   1121a:	0018      	movs	r0, r3
   1121c:	4b07      	ldr	r3, [pc, #28]	; (1123c <atcab_genkey_base+0xe0>)
   1121e:	4798      	blx	r3
   11220:	e002      	b.n	11228 <atcab_genkey_base+0xcc>
            break;
   11222:	46c0      	nop			; (mov r8, r8)
   11224:	e000      	b.n	11228 <atcab_genkey_base+0xcc>
            break;
   11226:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return status;
   11228:	23a7      	movs	r3, #167	; 0xa7
   1122a:	18fb      	adds	r3, r7, r3
   1122c:	781b      	ldrb	r3, [r3, #0]
}
   1122e:	0018      	movs	r0, r3
   11230:	46bd      	mov	sp, r7
   11232:	b02b      	add	sp, #172	; 0xac
   11234:	bd90      	pop	{r4, r7, pc}
   11236:	46c0      	nop			; (mov r8, r8)
   11238:	20000590 	.word	0x20000590
   1123c:	0001c1e5 	.word	0x0001c1e5
   11240:	0000f5d5 	.word	0x0000f5d5
   11244:	000101e9 	.word	0x000101e9

00011248 <atcab_get_pubkey>:
 *                          isn't required.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
   11248:	b590      	push	{r4, r7, lr}
   1124a:	b083      	sub	sp, #12
   1124c:	af00      	add	r7, sp, #0
   1124e:	0002      	movs	r2, r0
   11250:	6039      	str	r1, [r7, #0]
   11252:	1dbb      	adds	r3, r7, #6
   11254:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
   11256:	683a      	ldr	r2, [r7, #0]
   11258:	1dbb      	adds	r3, r7, #6
   1125a:	8819      	ldrh	r1, [r3, #0]
   1125c:	0013      	movs	r3, r2
   1125e:	2200      	movs	r2, #0
   11260:	2000      	movs	r0, #0
   11262:	4c03      	ldr	r4, [pc, #12]	; (11270 <atcab_get_pubkey+0x28>)
   11264:	47a0      	blx	r4
   11266:	0003      	movs	r3, r0
   11268:	0018      	movs	r0, r3
   1126a:	46bd      	mov	sp, r7
   1126c:	b003      	add	sp, #12
   1126e:	bd90      	pop	{r4, r7, pc}
   11270:	0001115d 	.word	0x0001115d

00011274 <atcab_info_base>:
 * \param[out] out_data  Response from info command (4 bytes). Can be set to
 *                       NULL if not required.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info_base(uint8_t mode, uint16_t param2, uint8_t* out_data)
{
   11274:	b590      	push	{r4, r7, lr}
   11276:	b0a9      	sub	sp, #164	; 0xa4
   11278:	af00      	add	r7, sp, #0
   1127a:	603a      	str	r2, [r7, #0]
   1127c:	1dfb      	adds	r3, r7, #7
   1127e:	1c02      	adds	r2, r0, #0
   11280:	701a      	strb	r2, [r3, #0]
   11282:	1d3b      	adds	r3, r7, #4
   11284:	1c0a      	adds	r2, r1, #0
   11286:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   11288:	4b27      	ldr	r3, [pc, #156]	; (11328 <atcab_info_base+0xb4>)
   1128a:	681b      	ldr	r3, [r3, #0]
   1128c:	681b      	ldr	r3, [r3, #0]
   1128e:	2298      	movs	r2, #152	; 0x98
   11290:	18ba      	adds	r2, r7, r2
   11292:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11294:	239f      	movs	r3, #159	; 0x9f
   11296:	18fb      	adds	r3, r7, r3
   11298:	22e1      	movs	r2, #225	; 0xe1
   1129a:	701a      	strb	r2, [r3, #0]

    // build an info command
    packet.param1 = mode;
   1129c:	230c      	movs	r3, #12
   1129e:	18fb      	adds	r3, r7, r3
   112a0:	1dfa      	adds	r2, r7, #7
   112a2:	7812      	ldrb	r2, [r2, #0]
   112a4:	70da      	strb	r2, [r3, #3]
    packet.param2 = param2;
   112a6:	230c      	movs	r3, #12
   112a8:	18fb      	adds	r3, r7, r3
   112aa:	1d3a      	adds	r2, r7, #4
   112ac:	8812      	ldrh	r2, [r2, #0]
   112ae:	809a      	strh	r2, [r3, #4]

    do
    {

        if ((status = atInfo(ca_cmd, &packet)) != ATCA_SUCCESS)
   112b0:	239f      	movs	r3, #159	; 0x9f
   112b2:	18fc      	adds	r4, r7, r3
   112b4:	230c      	movs	r3, #12
   112b6:	18fa      	adds	r2, r7, r3
   112b8:	2398      	movs	r3, #152	; 0x98
   112ba:	18fb      	adds	r3, r7, r3
   112bc:	681b      	ldr	r3, [r3, #0]
   112be:	0011      	movs	r1, r2
   112c0:	0018      	movs	r0, r3
   112c2:	4b1a      	ldr	r3, [pc, #104]	; (1132c <atcab_info_base+0xb8>)
   112c4:	4798      	blx	r3
   112c6:	0003      	movs	r3, r0
   112c8:	7023      	strb	r3, [r4, #0]
   112ca:	239f      	movs	r3, #159	; 0x9f
   112cc:	18fb      	adds	r3, r7, r3
   112ce:	781b      	ldrb	r3, [r3, #0]
   112d0:	2b00      	cmp	r3, #0
   112d2:	d11f      	bne.n	11314 <atcab_info_base+0xa0>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   112d4:	239f      	movs	r3, #159	; 0x9f
   112d6:	18fc      	adds	r4, r7, r3
   112d8:	230c      	movs	r3, #12
   112da:	18fb      	adds	r3, r7, r3
   112dc:	0018      	movs	r0, r3
   112de:	4b14      	ldr	r3, [pc, #80]	; (11330 <atcab_info_base+0xbc>)
   112e0:	4798      	blx	r3
   112e2:	0003      	movs	r3, r0
   112e4:	7023      	strb	r3, [r4, #0]
   112e6:	239f      	movs	r3, #159	; 0x9f
   112e8:	18fb      	adds	r3, r7, r3
   112ea:	781b      	ldrb	r3, [r3, #0]
   112ec:	2b00      	cmp	r3, #0
   112ee:	d113      	bne.n	11318 <atcab_info_base+0xa4>
        {
            break;
        }

        if (out_data != NULL && packet.rxsize >= 7)
   112f0:	683b      	ldr	r3, [r7, #0]
   112f2:	2b00      	cmp	r3, #0
   112f4:	d011      	beq.n	1131a <atcab_info_base+0xa6>
   112f6:	230c      	movs	r3, #12
   112f8:	18fb      	adds	r3, r7, r3
   112fa:	228a      	movs	r2, #138	; 0x8a
   112fc:	5a9b      	ldrh	r3, [r3, r2]
   112fe:	2b06      	cmp	r3, #6
   11300:	d90b      	bls.n	1131a <atcab_info_base+0xa6>
        {
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);
   11302:	230c      	movs	r3, #12
   11304:	18fb      	adds	r3, r7, r3
   11306:	1dd9      	adds	r1, r3, #7
   11308:	683b      	ldr	r3, [r7, #0]
   1130a:	2204      	movs	r2, #4
   1130c:	0018      	movs	r0, r3
   1130e:	4b09      	ldr	r3, [pc, #36]	; (11334 <atcab_info_base+0xc0>)
   11310:	4798      	blx	r3
   11312:	e002      	b.n	1131a <atcab_info_base+0xa6>
            break;
   11314:	46c0      	nop			; (mov r8, r8)
   11316:	e000      	b.n	1131a <atcab_info_base+0xa6>
            break;
   11318:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return status;
   1131a:	239f      	movs	r3, #159	; 0x9f
   1131c:	18fb      	adds	r3, r7, r3
   1131e:	781b      	ldrb	r3, [r3, #0]
}
   11320:	0018      	movs	r0, r3
   11322:	46bd      	mov	sp, r7
   11324:	b029      	add	sp, #164	; 0xa4
   11326:	bd90      	pop	{r4, r7, pc}
   11328:	20000590 	.word	0x20000590
   1132c:	0000f625 	.word	0x0000f625
   11330:	000101e9 	.word	0x000101e9
   11334:	0001c1e5 	.word	0x0001c1e5

00011338 <atcab_info>:
/** \brief Use the Info command to get the device revision (DevRev).
 *  \param[out] revision  Device revision is returned here (4 bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info(uint8_t* revision)
{
   11338:	b580      	push	{r7, lr}
   1133a:	b082      	sub	sp, #8
   1133c:	af00      	add	r7, sp, #0
   1133e:	6078      	str	r0, [r7, #4]
    if (revision == NULL)
   11340:	687b      	ldr	r3, [r7, #4]
   11342:	2b00      	cmp	r3, #0
   11344:	d101      	bne.n	1134a <atcab_info+0x12>
    {
        return ATCA_BAD_PARAM;
   11346:	23e2      	movs	r3, #226	; 0xe2
   11348:	e006      	b.n	11358 <atcab_info+0x20>
    }

    return atcab_info_base(INFO_MODE_REVISION, 0, revision);
   1134a:	687b      	ldr	r3, [r7, #4]
   1134c:	001a      	movs	r2, r3
   1134e:	2100      	movs	r1, #0
   11350:	2000      	movs	r0, #0
   11352:	4b03      	ldr	r3, [pc, #12]	; (11360 <atcab_info+0x28>)
   11354:	4798      	blx	r3
   11356:	0003      	movs	r3, r0
}
   11358:	0018      	movs	r0, r3
   1135a:	46bd      	mov	sp, r7
   1135c:	b002      	add	sp, #8
   1135e:	bd80      	pop	{r7, pc}
   11360:	00011275 	.word	0x00011275

00011364 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
   11364:	b590      	push	{r4, r7, lr}
   11366:	b0ab      	sub	sp, #172	; 0xac
   11368:	af00      	add	r7, sp, #0
   1136a:	60ba      	str	r2, [r7, #8]
   1136c:	607b      	str	r3, [r7, #4]
   1136e:	230f      	movs	r3, #15
   11370:	18fb      	adds	r3, r7, r3
   11372:	1c02      	adds	r2, r0, #0
   11374:	701a      	strb	r2, [r3, #0]
   11376:	230c      	movs	r3, #12
   11378:	18fb      	adds	r3, r7, r3
   1137a:	1c0a      	adds	r2, r1, #0
   1137c:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1137e:	4b46      	ldr	r3, [pc, #280]	; (11498 <atcab_nonce_base+0x134>)
   11380:	681b      	ldr	r3, [r3, #0]
   11382:	681b      	ldr	r3, [r3, #0]
   11384:	22a0      	movs	r2, #160	; 0xa0
   11386:	18ba      	adds	r2, r7, r2
   11388:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1138a:	23a7      	movs	r3, #167	; 0xa7
   1138c:	18fb      	adds	r3, r7, r3
   1138e:	22e1      	movs	r2, #225	; 0xe1
   11390:	701a      	strb	r2, [r3, #0]
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
   11392:	239f      	movs	r3, #159	; 0x9f
   11394:	18fb      	adds	r3, r7, r3
   11396:	220f      	movs	r2, #15
   11398:	18ba      	adds	r2, r7, r2
   1139a:	7812      	ldrb	r2, [r2, #0]
   1139c:	2103      	movs	r1, #3
   1139e:	400a      	ands	r2, r1
   113a0:	701a      	strb	r2, [r3, #0]

    do
    {
        // build a nonce command
        packet.param1 = mode;
   113a2:	2310      	movs	r3, #16
   113a4:	18fb      	adds	r3, r7, r3
   113a6:	220f      	movs	r2, #15
   113a8:	18ba      	adds	r2, r7, r2
   113aa:	7812      	ldrb	r2, [r2, #0]
   113ac:	70da      	strb	r2, [r3, #3]
        packet.param2 = zero;
   113ae:	2310      	movs	r3, #16
   113b0:	18fb      	adds	r3, r7, r3
   113b2:	220c      	movs	r2, #12
   113b4:	18ba      	adds	r2, r7, r2
   113b6:	8812      	ldrh	r2, [r2, #0]
   113b8:	809a      	strh	r2, [r3, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
   113ba:	239f      	movs	r3, #159	; 0x9f
   113bc:	18fb      	adds	r3, r7, r3
   113be:	781b      	ldrb	r3, [r3, #0]
   113c0:	2b00      	cmp	r3, #0
   113c2:	d004      	beq.n	113ce <atcab_nonce_base+0x6a>
   113c4:	239f      	movs	r3, #159	; 0x9f
   113c6:	18fb      	adds	r3, r7, r3
   113c8:	781b      	ldrb	r3, [r3, #0]
   113ca:	2b01      	cmp	r3, #1
   113cc:	d108      	bne.n	113e0 <atcab_nonce_base+0x7c>
        {
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
   113ce:	68b9      	ldr	r1, [r7, #8]
   113d0:	2310      	movs	r3, #16
   113d2:	18fb      	adds	r3, r7, r3
   113d4:	3306      	adds	r3, #6
   113d6:	2214      	movs	r2, #20
   113d8:	0018      	movs	r0, r3
   113da:	4b30      	ldr	r3, [pc, #192]	; (1149c <atcab_nonce_base+0x138>)
   113dc:	4798      	blx	r3
   113de:	e01e      	b.n	1141e <atcab_nonce_base+0xba>
        }
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
   113e0:	239f      	movs	r3, #159	; 0x9f
   113e2:	18fb      	adds	r3, r7, r3
   113e4:	781b      	ldrb	r3, [r3, #0]
   113e6:	2b03      	cmp	r3, #3
   113e8:	d117      	bne.n	1141a <atcab_nonce_base+0xb6>
        {
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
   113ea:	230f      	movs	r3, #15
   113ec:	18fb      	adds	r3, r7, r3
   113ee:	781b      	ldrb	r3, [r3, #0]
   113f0:	2220      	movs	r2, #32
   113f2:	4013      	ands	r3, r2
   113f4:	d008      	beq.n	11408 <atcab_nonce_base+0xa4>
            {
                memcpy(packet.data, num_in, 64);
   113f6:	68b9      	ldr	r1, [r7, #8]
   113f8:	2310      	movs	r3, #16
   113fa:	18fb      	adds	r3, r7, r3
   113fc:	3306      	adds	r3, #6
   113fe:	2240      	movs	r2, #64	; 0x40
   11400:	0018      	movs	r0, r3
   11402:	4b26      	ldr	r3, [pc, #152]	; (1149c <atcab_nonce_base+0x138>)
   11404:	4798      	blx	r3
   11406:	e00a      	b.n	1141e <atcab_nonce_base+0xba>
            }
            else
            {
                memcpy(packet.data, num_in, 32);
   11408:	68b9      	ldr	r1, [r7, #8]
   1140a:	2310      	movs	r3, #16
   1140c:	18fb      	adds	r3, r7, r3
   1140e:	3306      	adds	r3, #6
   11410:	2220      	movs	r2, #32
   11412:	0018      	movs	r0, r3
   11414:	4b21      	ldr	r3, [pc, #132]	; (1149c <atcab_nonce_base+0x138>)
   11416:	4798      	blx	r3
   11418:	e001      	b.n	1141e <atcab_nonce_base+0xba>
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
   1141a:	23e2      	movs	r3, #226	; 0xe2
   1141c:	e037      	b.n	1148e <atcab_nonce_base+0x12a>
        }

        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
   1141e:	23a7      	movs	r3, #167	; 0xa7
   11420:	18fc      	adds	r4, r7, r3
   11422:	2310      	movs	r3, #16
   11424:	18fa      	adds	r2, r7, r3
   11426:	23a0      	movs	r3, #160	; 0xa0
   11428:	18fb      	adds	r3, r7, r3
   1142a:	681b      	ldr	r3, [r3, #0]
   1142c:	0011      	movs	r1, r2
   1142e:	0018      	movs	r0, r3
   11430:	4b1b      	ldr	r3, [pc, #108]	; (114a0 <atcab_nonce_base+0x13c>)
   11432:	4798      	blx	r3
   11434:	0003      	movs	r3, r0
   11436:	7023      	strb	r3, [r4, #0]
   11438:	23a7      	movs	r3, #167	; 0xa7
   1143a:	18fb      	adds	r3, r7, r3
   1143c:	781b      	ldrb	r3, [r3, #0]
   1143e:	2b00      	cmp	r3, #0
   11440:	d11f      	bne.n	11482 <atcab_nonce_base+0x11e>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   11442:	23a7      	movs	r3, #167	; 0xa7
   11444:	18fc      	adds	r4, r7, r3
   11446:	2310      	movs	r3, #16
   11448:	18fb      	adds	r3, r7, r3
   1144a:	0018      	movs	r0, r3
   1144c:	4b15      	ldr	r3, [pc, #84]	; (114a4 <atcab_nonce_base+0x140>)
   1144e:	4798      	blx	r3
   11450:	0003      	movs	r3, r0
   11452:	7023      	strb	r3, [r4, #0]
   11454:	23a7      	movs	r3, #167	; 0xa7
   11456:	18fb      	adds	r3, r7, r3
   11458:	781b      	ldrb	r3, [r3, #0]
   1145a:	2b00      	cmp	r3, #0
   1145c:	d113      	bne.n	11486 <atcab_nonce_base+0x122>
        {
            break;
        }

        if ((rand_out != NULL) && (packet.rxsize >= 35))
   1145e:	687b      	ldr	r3, [r7, #4]
   11460:	2b00      	cmp	r3, #0
   11462:	d011      	beq.n	11488 <atcab_nonce_base+0x124>
   11464:	2310      	movs	r3, #16
   11466:	18fb      	adds	r3, r7, r3
   11468:	228a      	movs	r2, #138	; 0x8a
   1146a:	5a9b      	ldrh	r3, [r3, r2]
   1146c:	2b22      	cmp	r3, #34	; 0x22
   1146e:	d90b      	bls.n	11488 <atcab_nonce_base+0x124>
        {
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
   11470:	2310      	movs	r3, #16
   11472:	18fb      	adds	r3, r7, r3
   11474:	1dd9      	adds	r1, r3, #7
   11476:	687b      	ldr	r3, [r7, #4]
   11478:	2220      	movs	r2, #32
   1147a:	0018      	movs	r0, r3
   1147c:	4b07      	ldr	r3, [pc, #28]	; (1149c <atcab_nonce_base+0x138>)
   1147e:	4798      	blx	r3
   11480:	e002      	b.n	11488 <atcab_nonce_base+0x124>
            break;
   11482:	46c0      	nop			; (mov r8, r8)
   11484:	e000      	b.n	11488 <atcab_nonce_base+0x124>
            break;
   11486:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   11488:	23a7      	movs	r3, #167	; 0xa7
   1148a:	18fb      	adds	r3, r7, r3
   1148c:	781b      	ldrb	r3, [r3, #0]
}
   1148e:	0018      	movs	r0, r3
   11490:	46bd      	mov	sp, r7
   11492:	b02b      	add	sp, #172	; 0xac
   11494:	bd90      	pop	{r4, r7, pc}
   11496:	46c0      	nop			; (mov r8, r8)
   11498:	20000590 	.word	0x20000590
   1149c:	0001c1e5 	.word	0x0001c1e5
   114a0:	0000f659 	.word	0x0000f659
   114a4:	000101e9 	.word	0x000101e9

000114a8 <atcab_nonce_load>:
 *                          depending on device and target.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
   114a8:	b590      	push	{r4, r7, lr}
   114aa:	b085      	sub	sp, #20
   114ac:	af00      	add	r7, sp, #0
   114ae:	6039      	str	r1, [r7, #0]
   114b0:	0011      	movs	r1, r2
   114b2:	1dfb      	adds	r3, r7, #7
   114b4:	1c02      	adds	r2, r0, #0
   114b6:	701a      	strb	r2, [r3, #0]
   114b8:	1d3b      	adds	r3, r7, #4
   114ba:	1c0a      	adds	r2, r1, #0
   114bc:	801a      	strh	r2, [r3, #0]
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
   114be:	1dfb      	adds	r3, r7, #7
   114c0:	781b      	ldrb	r3, [r3, #0]
   114c2:	223f      	movs	r2, #63	; 0x3f
   114c4:	4393      	bics	r3, r2
   114c6:	b2da      	uxtb	r2, r3
   114c8:	230f      	movs	r3, #15
   114ca:	18fb      	adds	r3, r7, r3
   114cc:	2103      	movs	r1, #3
   114ce:	430a      	orrs	r2, r1
   114d0:	701a      	strb	r2, [r3, #0]

    if (num_in_size == 32)
   114d2:	1d3b      	adds	r3, r7, #4
   114d4:	881b      	ldrh	r3, [r3, #0]
   114d6:	2b20      	cmp	r3, #32
   114d8:	d106      	bne.n	114e8 <atcab_nonce_load+0x40>
    {
        mode |= NONCE_MODE_INPUT_LEN_32;
   114da:	230f      	movs	r3, #15
   114dc:	18fb      	adds	r3, r7, r3
   114de:	220f      	movs	r2, #15
   114e0:	18ba      	adds	r2, r7, r2
   114e2:	7812      	ldrb	r2, [r2, #0]
   114e4:	701a      	strb	r2, [r3, #0]
   114e6:	e00e      	b.n	11506 <atcab_nonce_load+0x5e>
    }
    else if (num_in_size == 64)
   114e8:	1d3b      	adds	r3, r7, #4
   114ea:	881b      	ldrh	r3, [r3, #0]
   114ec:	2b40      	cmp	r3, #64	; 0x40
   114ee:	d108      	bne.n	11502 <atcab_nonce_load+0x5a>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
   114f0:	230f      	movs	r3, #15
   114f2:	18fb      	adds	r3, r7, r3
   114f4:	220f      	movs	r2, #15
   114f6:	18ba      	adds	r2, r7, r2
   114f8:	7812      	ldrb	r2, [r2, #0]
   114fa:	2120      	movs	r1, #32
   114fc:	430a      	orrs	r2, r1
   114fe:	701a      	strb	r2, [r3, #0]
   11500:	e001      	b.n	11506 <atcab_nonce_load+0x5e>
    }
    else
    {
        return ATCA_BAD_PARAM;
   11502:	23e2      	movs	r3, #226	; 0xe2
   11504:	e008      	b.n	11518 <atcab_nonce_load+0x70>
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
   11506:	683a      	ldr	r2, [r7, #0]
   11508:	230f      	movs	r3, #15
   1150a:	18fb      	adds	r3, r7, r3
   1150c:	7818      	ldrb	r0, [r3, #0]
   1150e:	2300      	movs	r3, #0
   11510:	2100      	movs	r1, #0
   11512:	4c03      	ldr	r4, [pc, #12]	; (11520 <atcab_nonce_load+0x78>)
   11514:	47a0      	blx	r4
   11516:	0003      	movs	r3, r0
}
   11518:	0018      	movs	r0, r3
   1151a:	46bd      	mov	sp, r7
   1151c:	b005      	add	sp, #20
   1151e:	bd90      	pop	{r4, r7, pc}
   11520:	00011365 	.word	0x00011365

00011524 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
   11524:	b590      	push	{r4, r7, lr}
   11526:	b0a9      	sub	sp, #164	; 0xa4
   11528:	af00      	add	r7, sp, #0
   1152a:	6078      	str	r0, [r7, #4]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1152c:	4b2d      	ldr	r3, [pc, #180]	; (115e4 <atcab_random+0xc0>)
   1152e:	681b      	ldr	r3, [r3, #0]
   11530:	681b      	ldr	r3, [r3, #0]
   11532:	2298      	movs	r2, #152	; 0x98
   11534:	18ba      	adds	r2, r7, r2
   11536:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11538:	239f      	movs	r3, #159	; 0x9f
   1153a:	18fb      	adds	r3, r7, r3
   1153c:	22e1      	movs	r2, #225	; 0xe1
   1153e:	701a      	strb	r2, [r3, #0]

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
   11540:	230c      	movs	r3, #12
   11542:	18fb      	adds	r3, r7, r3
   11544:	2200      	movs	r2, #0
   11546:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
   11548:	230c      	movs	r3, #12
   1154a:	18fb      	adds	r3, r7, r3
   1154c:	2200      	movs	r2, #0
   1154e:	809a      	strh	r2, [r3, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
   11550:	239f      	movs	r3, #159	; 0x9f
   11552:	18fc      	adds	r4, r7, r3
   11554:	230c      	movs	r3, #12
   11556:	18fa      	adds	r2, r7, r3
   11558:	2398      	movs	r3, #152	; 0x98
   1155a:	18fb      	adds	r3, r7, r3
   1155c:	681b      	ldr	r3, [r3, #0]
   1155e:	0011      	movs	r1, r2
   11560:	0018      	movs	r0, r3
   11562:	4b21      	ldr	r3, [pc, #132]	; (115e8 <atcab_random+0xc4>)
   11564:	4798      	blx	r3
   11566:	0003      	movs	r3, r0
   11568:	7023      	strb	r3, [r4, #0]
   1156a:	239f      	movs	r3, #159	; 0x9f
   1156c:	18fb      	adds	r3, r7, r3
   1156e:	781b      	ldrb	r3, [r3, #0]
   11570:	2b00      	cmp	r3, #0
   11572:	d12d      	bne.n	115d0 <atcab_random+0xac>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   11574:	239f      	movs	r3, #159	; 0x9f
   11576:	18fc      	adds	r4, r7, r3
   11578:	230c      	movs	r3, #12
   1157a:	18fb      	adds	r3, r7, r3
   1157c:	0018      	movs	r0, r3
   1157e:	4b1b      	ldr	r3, [pc, #108]	; (115ec <atcab_random+0xc8>)
   11580:	4798      	blx	r3
   11582:	0003      	movs	r3, r0
   11584:	7023      	strb	r3, [r4, #0]
   11586:	239f      	movs	r3, #159	; 0x9f
   11588:	18fb      	adds	r3, r7, r3
   1158a:	781b      	ldrb	r3, [r3, #0]
   1158c:	2b00      	cmp	r3, #0
   1158e:	d121      	bne.n	115d4 <atcab_random+0xb0>
        {
            break;
        }

        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
   11590:	230c      	movs	r3, #12
   11592:	18fb      	adds	r3, r7, r3
   11594:	228a      	movs	r2, #138	; 0x8a
   11596:	5a9a      	ldrh	r2, [r3, r2]
   11598:	230c      	movs	r3, #12
   1159a:	18fb      	adds	r3, r7, r3
   1159c:	799b      	ldrb	r3, [r3, #6]
   1159e:	b29b      	uxth	r3, r3
   115a0:	429a      	cmp	r2, r3
   115a2:	d304      	bcc.n	115ae <atcab_random+0x8a>
   115a4:	230c      	movs	r3, #12
   115a6:	18fb      	adds	r3, r7, r3
   115a8:	799b      	ldrb	r3, [r3, #6]
   115aa:	2b23      	cmp	r3, #35	; 0x23
   115ac:	d004      	beq.n	115b8 <atcab_random+0x94>
        {
            status = ATCA_RX_FAIL;
   115ae:	239f      	movs	r3, #159	; 0x9f
   115b0:	18fb      	adds	r3, r7, r3
   115b2:	22e6      	movs	r2, #230	; 0xe6
   115b4:	701a      	strb	r2, [r3, #0]
            break;
   115b6:	e00e      	b.n	115d6 <atcab_random+0xb2>
        }

        if (rand_out)
   115b8:	687b      	ldr	r3, [r7, #4]
   115ba:	2b00      	cmp	r3, #0
   115bc:	d00b      	beq.n	115d6 <atcab_random+0xb2>
        {
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
   115be:	230c      	movs	r3, #12
   115c0:	18fb      	adds	r3, r7, r3
   115c2:	1dd9      	adds	r1, r3, #7
   115c4:	687b      	ldr	r3, [r7, #4]
   115c6:	2220      	movs	r2, #32
   115c8:	0018      	movs	r0, r3
   115ca:	4b09      	ldr	r3, [pc, #36]	; (115f0 <atcab_random+0xcc>)
   115cc:	4798      	blx	r3
   115ce:	e002      	b.n	115d6 <atcab_random+0xb2>
            break;
   115d0:	46c0      	nop			; (mov r8, r8)
   115d2:	e000      	b.n	115d6 <atcab_random+0xb2>
            break;
   115d4:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);


    return status;
   115d6:	239f      	movs	r3, #159	; 0x9f
   115d8:	18fb      	adds	r3, r7, r3
   115da:	781b      	ldrb	r3, [r3, #0]
}
   115dc:	0018      	movs	r0, r3
   115de:	46bd      	mov	sp, r7
   115e0:	b029      	add	sp, #164	; 0xa4
   115e2:	bd90      	pop	{r4, r7, pc}
   115e4:	20000590 	.word	0x20000590
   115e8:	0000f6e5 	.word	0x0000f6e5
   115ec:	000101e9 	.word	0x000101e9
   115f0:	0001c1e5 	.word	0x0001c1e5

000115f4 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
   115f4:	b5b0      	push	{r4, r5, r7, lr}
   115f6:	b0aa      	sub	sp, #168	; 0xa8
   115f8:	af02      	add	r7, sp, #8
   115fa:	0005      	movs	r5, r0
   115fc:	000c      	movs	r4, r1
   115fe:	0010      	movs	r0, r2
   11600:	0019      	movs	r1, r3
   11602:	1dfb      	adds	r3, r7, #7
   11604:	1c2a      	adds	r2, r5, #0
   11606:	701a      	strb	r2, [r3, #0]
   11608:	1d3b      	adds	r3, r7, #4
   1160a:	1c22      	adds	r2, r4, #0
   1160c:	801a      	strh	r2, [r3, #0]
   1160e:	1dbb      	adds	r3, r7, #6
   11610:	1c02      	adds	r2, r0, #0
   11612:	701a      	strb	r2, [r3, #0]
   11614:	1cfb      	adds	r3, r7, #3
   11616:	1c0a      	adds	r2, r1, #0
   11618:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1161a:	4b42      	ldr	r3, [pc, #264]	; (11724 <atcab_read_zone+0x130>)
   1161c:	681b      	ldr	r3, [r3, #0]
   1161e:	681b      	ldr	r3, [r3, #0]
   11620:	2298      	movs	r2, #152	; 0x98
   11622:	18ba      	adds	r2, r7, r2
   11624:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11626:	239f      	movs	r3, #159	; 0x9f
   11628:	18fb      	adds	r3, r7, r3
   1162a:	22e1      	movs	r2, #225	; 0xe1
   1162c:	701a      	strb	r2, [r3, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
   1162e:	23b0      	movs	r3, #176	; 0xb0
   11630:	18fb      	adds	r3, r7, r3
   11632:	681b      	ldr	r3, [r3, #0]
   11634:	2b00      	cmp	r3, #0
   11636:	d101      	bne.n	1163c <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
   11638:	23e2      	movs	r3, #226	; 0xe2
   1163a:	e06e      	b.n	1171a <atcab_read_zone+0x126>
        }

        if (len != 4 && len != 32)
   1163c:	23b4      	movs	r3, #180	; 0xb4
   1163e:	18fb      	adds	r3, r7, r3
   11640:	781b      	ldrb	r3, [r3, #0]
   11642:	2b04      	cmp	r3, #4
   11644:	d006      	beq.n	11654 <atcab_read_zone+0x60>
   11646:	23b4      	movs	r3, #180	; 0xb4
   11648:	18fb      	adds	r3, r7, r3
   1164a:	781b      	ldrb	r3, [r3, #0]
   1164c:	2b20      	cmp	r3, #32
   1164e:	d001      	beq.n	11654 <atcab_read_zone+0x60>
        {
            return ATCA_BAD_PARAM;
   11650:	23e2      	movs	r3, #226	; 0xe2
   11652:	e062      	b.n	1171a <atcab_read_zone+0x126>
        }

        // The get address function checks the remaining variables
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
   11654:	239f      	movs	r3, #159	; 0x9f
   11656:	18fc      	adds	r4, r7, r3
   11658:	1cfb      	adds	r3, r7, #3
   1165a:	781d      	ldrb	r5, [r3, #0]
   1165c:	1dbb      	adds	r3, r7, #6
   1165e:	781a      	ldrb	r2, [r3, #0]
   11660:	1d3b      	adds	r3, r7, #4
   11662:	8819      	ldrh	r1, [r3, #0]
   11664:	1dfb      	adds	r3, r7, #7
   11666:	7818      	ldrb	r0, [r3, #0]
   11668:	230a      	movs	r3, #10
   1166a:	18fb      	adds	r3, r7, r3
   1166c:	9300      	str	r3, [sp, #0]
   1166e:	002b      	movs	r3, r5
   11670:	4d2d      	ldr	r5, [pc, #180]	; (11728 <atcab_read_zone+0x134>)
   11672:	47a8      	blx	r5
   11674:	0003      	movs	r3, r0
   11676:	7023      	strb	r3, [r4, #0]
   11678:	239f      	movs	r3, #159	; 0x9f
   1167a:	18fb      	adds	r3, r7, r3
   1167c:	781b      	ldrb	r3, [r3, #0]
   1167e:	2b00      	cmp	r3, #0
   11680:	d143      	bne.n	1170a <atcab_read_zone+0x116>
        {
            break;
        }

        // If there are 32 bytes to read, then OR the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
   11682:	23b4      	movs	r3, #180	; 0xb4
   11684:	18fb      	adds	r3, r7, r3
   11686:	781b      	ldrb	r3, [r3, #0]
   11688:	2b20      	cmp	r3, #32
   1168a:	d106      	bne.n	1169a <atcab_read_zone+0xa6>
        {
            zone = zone | ATCA_ZONE_READWRITE_32;
   1168c:	1dfb      	adds	r3, r7, #7
   1168e:	1dfa      	adds	r2, r7, #7
   11690:	7812      	ldrb	r2, [r2, #0]
   11692:	2180      	movs	r1, #128	; 0x80
   11694:	4249      	negs	r1, r1
   11696:	430a      	orrs	r2, r1
   11698:	701a      	strb	r2, [r3, #0]
        }

        // build a read command
        packet.param1 = zone;
   1169a:	230c      	movs	r3, #12
   1169c:	18fb      	adds	r3, r7, r3
   1169e:	1dfa      	adds	r2, r7, #7
   116a0:	7812      	ldrb	r2, [r2, #0]
   116a2:	70da      	strb	r2, [r3, #3]
        packet.param2 = addr;
   116a4:	230a      	movs	r3, #10
   116a6:	18fb      	adds	r3, r7, r3
   116a8:	881a      	ldrh	r2, [r3, #0]
   116aa:	230c      	movs	r3, #12
   116ac:	18fb      	adds	r3, r7, r3
   116ae:	809a      	strh	r2, [r3, #4]

        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
   116b0:	239f      	movs	r3, #159	; 0x9f
   116b2:	18fc      	adds	r4, r7, r3
   116b4:	230c      	movs	r3, #12
   116b6:	18fa      	adds	r2, r7, r3
   116b8:	2398      	movs	r3, #152	; 0x98
   116ba:	18fb      	adds	r3, r7, r3
   116bc:	681b      	ldr	r3, [r3, #0]
   116be:	0011      	movs	r1, r2
   116c0:	0018      	movs	r0, r3
   116c2:	4b1a      	ldr	r3, [pc, #104]	; (1172c <atcab_read_zone+0x138>)
   116c4:	4798      	blx	r3
   116c6:	0003      	movs	r3, r0
   116c8:	7023      	strb	r3, [r4, #0]
   116ca:	239f      	movs	r3, #159	; 0x9f
   116cc:	18fb      	adds	r3, r7, r3
   116ce:	781b      	ldrb	r3, [r3, #0]
   116d0:	2b00      	cmp	r3, #0
   116d2:	d11c      	bne.n	1170e <atcab_read_zone+0x11a>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   116d4:	239f      	movs	r3, #159	; 0x9f
   116d6:	18fc      	adds	r4, r7, r3
   116d8:	230c      	movs	r3, #12
   116da:	18fb      	adds	r3, r7, r3
   116dc:	0018      	movs	r0, r3
   116de:	4b14      	ldr	r3, [pc, #80]	; (11730 <atcab_read_zone+0x13c>)
   116e0:	4798      	blx	r3
   116e2:	0003      	movs	r3, r0
   116e4:	7023      	strb	r3, [r4, #0]
   116e6:	239f      	movs	r3, #159	; 0x9f
   116e8:	18fb      	adds	r3, r7, r3
   116ea:	781b      	ldrb	r3, [r3, #0]
   116ec:	2b00      	cmp	r3, #0
   116ee:	d110      	bne.n	11712 <atcab_read_zone+0x11e>
        {
            break;
        }

        memcpy(data, &packet.data[1], len);
   116f0:	23b4      	movs	r3, #180	; 0xb4
   116f2:	18fb      	adds	r3, r7, r3
   116f4:	781a      	ldrb	r2, [r3, #0]
   116f6:	230c      	movs	r3, #12
   116f8:	18fb      	adds	r3, r7, r3
   116fa:	1dd9      	adds	r1, r3, #7
   116fc:	23b0      	movs	r3, #176	; 0xb0
   116fe:	18fb      	adds	r3, r7, r3
   11700:	681b      	ldr	r3, [r3, #0]
   11702:	0018      	movs	r0, r3
   11704:	4b0b      	ldr	r3, [pc, #44]	; (11734 <atcab_read_zone+0x140>)
   11706:	4798      	blx	r3
   11708:	e004      	b.n	11714 <atcab_read_zone+0x120>
            break;
   1170a:	46c0      	nop			; (mov r8, r8)
   1170c:	e002      	b.n	11714 <atcab_read_zone+0x120>
            break;
   1170e:	46c0      	nop			; (mov r8, r8)
   11710:	e000      	b.n	11714 <atcab_read_zone+0x120>
            break;
   11712:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    return status;
   11714:	239f      	movs	r3, #159	; 0x9f
   11716:	18fb      	adds	r3, r7, r3
   11718:	781b      	ldrb	r3, [r3, #0]
}
   1171a:	0018      	movs	r0, r3
   1171c:	46bd      	mov	sp, r7
   1171e:	b028      	add	sp, #160	; 0xa0
   11720:	bdb0      	pop	{r4, r5, r7, pc}
   11722:	46c0      	nop			; (mov r8, r8)
   11724:	20000590 	.word	0x20000590
   11728:	00010015 	.word	0x00010015
   1172c:	0000f719 	.word	0x0000f719
   11730:	000101e9 	.word	0x000101e9
   11734:	0001c1e5 	.word	0x0001c1e5

00011738 <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
   11738:	b5b0      	push	{r4, r5, r7, lr}
   1173a:	b098      	sub	sp, #96	; 0x60
   1173c:	af02      	add	r7, sp, #8
   1173e:	60ba      	str	r2, [r7, #8]
   11740:	607b      	str	r3, [r7, #4]
   11742:	230f      	movs	r3, #15
   11744:	18fb      	adds	r3, r7, r3
   11746:	1c02      	adds	r2, r0, #0
   11748:	701a      	strb	r2, [r3, #0]
   1174a:	230c      	movs	r3, #12
   1174c:	18fb      	adds	r3, r7, r3
   1174e:	1c0a      	adds	r2, r1, #0
   11750:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11752:	2357      	movs	r3, #87	; 0x57
   11754:	18fb      	adds	r3, r7, r3
   11756:	22e1      	movs	r2, #225	; 0xe1
   11758:	701a      	strb	r2, [r3, #0]
    size_t zone_size = 0;
   1175a:	2300      	movs	r3, #0
   1175c:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t read_buf[32];
    size_t data_idx = 0;
   1175e:	2300      	movs	r3, #0
   11760:	653b      	str	r3, [r7, #80]	; 0x50
    size_t cur_block = 0;
   11762:	2300      	movs	r3, #0
   11764:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t cur_offset = 0;
   11766:	2300      	movs	r3, #0
   11768:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t read_size = ATCA_BLOCK_SIZE;
   1176a:	2347      	movs	r3, #71	; 0x47
   1176c:	18fb      	adds	r3, r7, r3
   1176e:	2220      	movs	r2, #32
   11770:	701a      	strb	r2, [r3, #0]
    size_t read_buf_idx = 0;
   11772:	2300      	movs	r3, #0
   11774:	643b      	str	r3, [r7, #64]	; 0x40
    size_t copy_length = 0;
   11776:	2300      	movs	r3, #0
   11778:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t read_offset = 0;
   1177a:	2300      	movs	r3, #0
   1177c:	63bb      	str	r3, [r7, #56]	; 0x38

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
   1177e:	230f      	movs	r3, #15
   11780:	18fb      	adds	r3, r7, r3
   11782:	781b      	ldrb	r3, [r3, #0]
   11784:	2b00      	cmp	r3, #0
   11786:	d00b      	beq.n	117a0 <atcab_read_bytes_zone+0x68>
   11788:	230f      	movs	r3, #15
   1178a:	18fb      	adds	r3, r7, r3
   1178c:	781b      	ldrb	r3, [r3, #0]
   1178e:	2b01      	cmp	r3, #1
   11790:	d006      	beq.n	117a0 <atcab_read_bytes_zone+0x68>
   11792:	230f      	movs	r3, #15
   11794:	18fb      	adds	r3, r7, r3
   11796:	781b      	ldrb	r3, [r3, #0]
   11798:	2b02      	cmp	r3, #2
   1179a:	d001      	beq.n	117a0 <atcab_read_bytes_zone+0x68>
    {
        return ATCA_BAD_PARAM;
   1179c:	23e2      	movs	r3, #226	; 0xe2
   1179e:	e0b5      	b.n	1190c <atcab_read_bytes_zone+0x1d4>
    }
    if (zone == ATCA_ZONE_DATA && slot > 15)
   117a0:	230f      	movs	r3, #15
   117a2:	18fb      	adds	r3, r7, r3
   117a4:	781b      	ldrb	r3, [r3, #0]
   117a6:	2b02      	cmp	r3, #2
   117a8:	d106      	bne.n	117b8 <atcab_read_bytes_zone+0x80>
   117aa:	230c      	movs	r3, #12
   117ac:	18fb      	adds	r3, r7, r3
   117ae:	881b      	ldrh	r3, [r3, #0]
   117b0:	2b0f      	cmp	r3, #15
   117b2:	d901      	bls.n	117b8 <atcab_read_bytes_zone+0x80>
    {
        return ATCA_BAD_PARAM;
   117b4:	23e2      	movs	r3, #226	; 0xe2
   117b6:	e0a9      	b.n	1190c <atcab_read_bytes_zone+0x1d4>
    }
    if (length == 0)
   117b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   117ba:	2b00      	cmp	r3, #0
   117bc:	d101      	bne.n	117c2 <atcab_read_bytes_zone+0x8a>
    {
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
   117be:	2300      	movs	r3, #0
   117c0:	e0a4      	b.n	1190c <atcab_read_bytes_zone+0x1d4>
    }
    if (data == NULL)
   117c2:	687b      	ldr	r3, [r7, #4]
   117c4:	2b00      	cmp	r3, #0
   117c6:	d101      	bne.n	117cc <atcab_read_bytes_zone+0x94>
    {
        return ATCA_BAD_PARAM;
   117c8:	23e2      	movs	r3, #226	; 0xe2
   117ca:	e09f      	b.n	1190c <atcab_read_bytes_zone+0x1d4>
    }

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
   117cc:	2357      	movs	r3, #87	; 0x57
   117ce:	18fc      	adds	r4, r7, r3
   117d0:	2334      	movs	r3, #52	; 0x34
   117d2:	18fa      	adds	r2, r7, r3
   117d4:	230c      	movs	r3, #12
   117d6:	18fb      	adds	r3, r7, r3
   117d8:	8819      	ldrh	r1, [r3, #0]
   117da:	230f      	movs	r3, #15
   117dc:	18fb      	adds	r3, r7, r3
   117de:	781b      	ldrb	r3, [r3, #0]
   117e0:	0018      	movs	r0, r3
   117e2:	4b4c      	ldr	r3, [pc, #304]	; (11914 <atcab_read_bytes_zone+0x1dc>)
   117e4:	4798      	blx	r3
   117e6:	0003      	movs	r3, r0
   117e8:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   117ea:	2357      	movs	r3, #87	; 0x57
   117ec:	18fb      	adds	r3, r7, r3
   117ee:	781b      	ldrb	r3, [r3, #0]
   117f0:	2b00      	cmp	r3, #0
   117f2:	d000      	beq.n	117f6 <atcab_read_bytes_zone+0xbe>
   117f4:	e084      	b.n	11900 <atcab_read_bytes_zone+0x1c8>
        {
            break;
        }
        if (offset + length > zone_size)
   117f6:	68ba      	ldr	r2, [r7, #8]
   117f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   117fa:	18d2      	adds	r2, r2, r3
   117fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   117fe:	429a      	cmp	r2, r3
   11800:	d901      	bls.n	11806 <atcab_read_bytes_zone+0xce>
        {
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
   11802:	23e2      	movs	r3, #226	; 0xe2
   11804:	e082      	b.n	1190c <atcab_read_bytes_zone+0x1d4>

        }
        cur_block = offset / ATCA_BLOCK_SIZE;
   11806:	68bb      	ldr	r3, [r7, #8]
   11808:	095b      	lsrs	r3, r3, #5
   1180a:	64fb      	str	r3, [r7, #76]	; 0x4c

        while (data_idx < length)
   1180c:	e073      	b.n	118f6 <atcab_read_bytes_zone+0x1be>
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
   1180e:	2347      	movs	r3, #71	; 0x47
   11810:	18fb      	adds	r3, r7, r3
   11812:	781b      	ldrb	r3, [r3, #0]
   11814:	2b20      	cmp	r3, #32
   11816:	d110      	bne.n	1183a <atcab_read_bytes_zone+0x102>
   11818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1181a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1181c:	015b      	lsls	r3, r3, #5
   1181e:	1ad3      	subs	r3, r2, r3
   11820:	2b1f      	cmp	r3, #31
   11822:	d80a      	bhi.n	1183a <atcab_read_bytes_zone+0x102>
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
   11824:	2347      	movs	r3, #71	; 0x47
   11826:	18fb      	adds	r3, r7, r3
   11828:	2204      	movs	r2, #4
   1182a:	701a      	strb	r2, [r3, #0]
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
   1182c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1182e:	68bb      	ldr	r3, [r7, #8]
   11830:	18d3      	adds	r3, r2, r3
   11832:	089b      	lsrs	r3, r3, #2
   11834:	2207      	movs	r2, #7
   11836:	4013      	ands	r3, r2
   11838:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            // Read next chunk of data
            status = atcab_read_zone(
   1183a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1183c:	b2da      	uxtb	r2, r3
   1183e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11840:	b2dd      	uxtb	r5, r3
   11842:	2357      	movs	r3, #87	; 0x57
   11844:	18fc      	adds	r4, r7, r3
   11846:	230c      	movs	r3, #12
   11848:	18fb      	adds	r3, r7, r3
   1184a:	8819      	ldrh	r1, [r3, #0]
   1184c:	230f      	movs	r3, #15
   1184e:	18fb      	adds	r3, r7, r3
   11850:	7818      	ldrb	r0, [r3, #0]
   11852:	2347      	movs	r3, #71	; 0x47
   11854:	18fb      	adds	r3, r7, r3
   11856:	781b      	ldrb	r3, [r3, #0]
   11858:	9301      	str	r3, [sp, #4]
   1185a:	2314      	movs	r3, #20
   1185c:	18fb      	adds	r3, r7, r3
   1185e:	9300      	str	r3, [sp, #0]
   11860:	002b      	movs	r3, r5
   11862:	4d2d      	ldr	r5, [pc, #180]	; (11918 <atcab_read_bytes_zone+0x1e0>)
   11864:	47a8      	blx	r5
   11866:	0003      	movs	r3, r0
   11868:	7023      	strb	r3, [r4, #0]
                slot,
                (uint8_t)cur_block,
                (uint8_t)cur_offset,
                read_buf,
                read_size);
            if (status != ATCA_SUCCESS)
   1186a:	2357      	movs	r3, #87	; 0x57
   1186c:	18fb      	adds	r3, r7, r3
   1186e:	781b      	ldrb	r3, [r3, #0]
   11870:	2b00      	cmp	r3, #0
   11872:	d147      	bne.n	11904 <atcab_read_bytes_zone+0x1cc>
            {
                break;
            }

            // Calculate where in the read buffer we need data from
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
   11874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11876:	00da      	lsls	r2, r3, #3
   11878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1187a:	18d3      	adds	r3, r2, r3
   1187c:	009b      	lsls	r3, r3, #2
   1187e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (read_offset < offset)
   11880:	6bba      	ldr	r2, [r7, #56]	; 0x38
   11882:	68bb      	ldr	r3, [r7, #8]
   11884:	429a      	cmp	r2, r3
   11886:	d204      	bcs.n	11892 <atcab_read_bytes_zone+0x15a>
            {
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
   11888:	68ba      	ldr	r2, [r7, #8]
   1188a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1188c:	1ad3      	subs	r3, r2, r3
   1188e:	643b      	str	r3, [r7, #64]	; 0x40
   11890:	e001      	b.n	11896 <atcab_read_bytes_zone+0x15e>
            }
            else
            {
                read_buf_idx = 0;                     // Read data is within the requested chunk
   11892:	2300      	movs	r3, #0
   11894:	643b      	str	r3, [r7, #64]	; 0x40

            }
            // Calculate how much data from the read buffer we want to copy
            if (length - data_idx < read_size - read_buf_idx)
   11896:	6eba      	ldr	r2, [r7, #104]	; 0x68
   11898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1189a:	1ad2      	subs	r2, r2, r3
   1189c:	2347      	movs	r3, #71	; 0x47
   1189e:	18fb      	adds	r3, r7, r3
   118a0:	7819      	ldrb	r1, [r3, #0]
   118a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118a4:	1acb      	subs	r3, r1, r3
   118a6:	429a      	cmp	r2, r3
   118a8:	d204      	bcs.n	118b4 <atcab_read_bytes_zone+0x17c>
            {
                copy_length = length - data_idx;
   118aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   118ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   118ae:	1ad3      	subs	r3, r2, r3
   118b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   118b2:	e005      	b.n	118c0 <atcab_read_bytes_zone+0x188>
            }
            else
            {
                copy_length = read_size - read_buf_idx;
   118b4:	2347      	movs	r3, #71	; 0x47
   118b6:	18fb      	adds	r3, r7, r3
   118b8:	781a      	ldrb	r2, [r3, #0]
   118ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118bc:	1ad3      	subs	r3, r2, r3
   118be:	63fb      	str	r3, [r7, #60]	; 0x3c
            }

            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
   118c0:	687a      	ldr	r2, [r7, #4]
   118c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   118c4:	18d0      	adds	r0, r2, r3
   118c6:	2314      	movs	r3, #20
   118c8:	18fa      	adds	r2, r7, r3
   118ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118cc:	18d3      	adds	r3, r2, r3
   118ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   118d0:	0019      	movs	r1, r3
   118d2:	4b12      	ldr	r3, [pc, #72]	; (1191c <atcab_read_bytes_zone+0x1e4>)
   118d4:	4798      	blx	r3
            data_idx += copy_length;
   118d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   118d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   118da:	18d3      	adds	r3, r2, r3
   118dc:	653b      	str	r3, [r7, #80]	; 0x50
            if (read_size == ATCA_BLOCK_SIZE)
   118de:	2347      	movs	r3, #71	; 0x47
   118e0:	18fb      	adds	r3, r7, r3
   118e2:	781b      	ldrb	r3, [r3, #0]
   118e4:	2b20      	cmp	r3, #32
   118e6:	d103      	bne.n	118f0 <atcab_read_bytes_zone+0x1b8>
            {
                cur_block += 1;
   118e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   118ea:	3301      	adds	r3, #1
   118ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   118ee:	e002      	b.n	118f6 <atcab_read_bytes_zone+0x1be>
            }
            else
            {
                cur_offset += 1;
   118f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   118f2:	3301      	adds	r3, #1
   118f4:	64bb      	str	r3, [r7, #72]	; 0x48
        while (data_idx < length)
   118f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   118f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   118fa:	429a      	cmp	r2, r3
   118fc:	d387      	bcc.n	1180e <atcab_read_bytes_zone+0xd6>
   118fe:	e002      	b.n	11906 <atcab_read_bytes_zone+0x1ce>
            break;
   11900:	46c0      	nop			; (mov r8, r8)
   11902:	e000      	b.n	11906 <atcab_read_bytes_zone+0x1ce>
                break;
   11904:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (false);

    return status;
   11906:	2357      	movs	r3, #87	; 0x57
   11908:	18fb      	adds	r3, r7, r3
   1190a:	781b      	ldrb	r3, [r3, #0]
}
   1190c:	0018      	movs	r0, r3
   1190e:	46bd      	mov	sp, r7
   11910:	b016      	add	sp, #88	; 0x58
   11912:	bdb0      	pop	{r4, r5, r7, pc}
   11914:	00010109 	.word	0x00010109
   11918:	000115f5 	.word	0x000115f5
   1191c:	0001c1e5 	.word	0x0001c1e5

00011920 <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
   11920:	b590      	push	{r4, r7, lr}
   11922:	b0a9      	sub	sp, #164	; 0xa4
   11924:	af00      	add	r7, sp, #0
   11926:	603a      	str	r2, [r7, #0]
   11928:	1dfb      	adds	r3, r7, #7
   1192a:	1c02      	adds	r2, r0, #0
   1192c:	701a      	strb	r2, [r3, #0]
   1192e:	1d3b      	adds	r3, r7, #4
   11930:	1c0a      	adds	r2, r1, #0
   11932:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   11934:	4b2b      	ldr	r3, [pc, #172]	; (119e4 <atcab_sign_base+0xc4>)
   11936:	681b      	ldr	r3, [r3, #0]
   11938:	681b      	ldr	r3, [r3, #0]
   1193a:	2298      	movs	r2, #152	; 0x98
   1193c:	18ba      	adds	r2, r7, r2
   1193e:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11940:	239f      	movs	r3, #159	; 0x9f
   11942:	18fb      	adds	r3, r7, r3
   11944:	22e1      	movs	r2, #225	; 0xe1
   11946:	701a      	strb	r2, [r3, #0]

    if (signature == NULL)
   11948:	683b      	ldr	r3, [r7, #0]
   1194a:	2b00      	cmp	r3, #0
   1194c:	d101      	bne.n	11952 <atcab_sign_base+0x32>
    {
        return ATCA_BAD_PARAM;
   1194e:	23e2      	movs	r3, #226	; 0xe2
   11950:	e043      	b.n	119da <atcab_sign_base+0xba>
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
   11952:	230c      	movs	r3, #12
   11954:	18fb      	adds	r3, r7, r3
   11956:	1dfa      	adds	r2, r7, #7
   11958:	7812      	ldrb	r2, [r2, #0]
   1195a:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   1195c:	230c      	movs	r3, #12
   1195e:	18fb      	adds	r3, r7, r3
   11960:	1d3a      	adds	r2, r7, #4
   11962:	8812      	ldrh	r2, [r2, #0]
   11964:	809a      	strh	r2, [r3, #4]
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
   11966:	239f      	movs	r3, #159	; 0x9f
   11968:	18fc      	adds	r4, r7, r3
   1196a:	230c      	movs	r3, #12
   1196c:	18fa      	adds	r2, r7, r3
   1196e:	2398      	movs	r3, #152	; 0x98
   11970:	18fb      	adds	r3, r7, r3
   11972:	681b      	ldr	r3, [r3, #0]
   11974:	0011      	movs	r1, r2
   11976:	0018      	movs	r0, r3
   11978:	4b1b      	ldr	r3, [pc, #108]	; (119e8 <atcab_sign_base+0xc8>)
   1197a:	4798      	blx	r3
   1197c:	0003      	movs	r3, r0
   1197e:	7023      	strb	r3, [r4, #0]
   11980:	239f      	movs	r3, #159	; 0x9f
   11982:	18fb      	adds	r3, r7, r3
   11984:	781b      	ldrb	r3, [r3, #0]
   11986:	2b00      	cmp	r3, #0
   11988:	d121      	bne.n	119ce <atcab_sign_base+0xae>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   1198a:	239f      	movs	r3, #159	; 0x9f
   1198c:	18fc      	adds	r4, r7, r3
   1198e:	230c      	movs	r3, #12
   11990:	18fb      	adds	r3, r7, r3
   11992:	0018      	movs	r0, r3
   11994:	4b15      	ldr	r3, [pc, #84]	; (119ec <atcab_sign_base+0xcc>)
   11996:	4798      	blx	r3
   11998:	0003      	movs	r3, r0
   1199a:	7023      	strb	r3, [r4, #0]
   1199c:	239f      	movs	r3, #159	; 0x9f
   1199e:	18fb      	adds	r3, r7, r3
   119a0:	781b      	ldrb	r3, [r3, #0]
   119a2:	2b00      	cmp	r3, #0
   119a4:	d115      	bne.n	119d2 <atcab_sign_base+0xb2>
        {
            break;
        }

        if (packet.rxsize > 4)
   119a6:	230c      	movs	r3, #12
   119a8:	18fb      	adds	r3, r7, r3
   119aa:	228a      	movs	r2, #138	; 0x8a
   119ac:	5a9b      	ldrh	r3, [r3, r2]
   119ae:	2b04      	cmp	r3, #4
   119b0:	d910      	bls.n	119d4 <atcab_sign_base+0xb4>
        {
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.rxsize - ATCA_PACKET_OVERHEAD);
   119b2:	230c      	movs	r3, #12
   119b4:	18fb      	adds	r3, r7, r3
   119b6:	228a      	movs	r2, #138	; 0x8a
   119b8:	5a9b      	ldrh	r3, [r3, r2]
   119ba:	3b03      	subs	r3, #3
   119bc:	001a      	movs	r2, r3
   119be:	230c      	movs	r3, #12
   119c0:	18fb      	adds	r3, r7, r3
   119c2:	1dd9      	adds	r1, r3, #7
   119c4:	683b      	ldr	r3, [r7, #0]
   119c6:	0018      	movs	r0, r3
   119c8:	4b09      	ldr	r3, [pc, #36]	; (119f0 <atcab_sign_base+0xd0>)
   119ca:	4798      	blx	r3
   119cc:	e002      	b.n	119d4 <atcab_sign_base+0xb4>
            break;
   119ce:	46c0      	nop			; (mov r8, r8)
   119d0:	e000      	b.n	119d4 <atcab_sign_base+0xb4>
            break;
   119d2:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   119d4:	239f      	movs	r3, #159	; 0x9f
   119d6:	18fb      	adds	r3, r7, r3
   119d8:	781b      	ldrb	r3, [r3, #0]
}
   119da:	0018      	movs	r0, r3
   119dc:	46bd      	mov	sp, r7
   119de:	b029      	add	sp, #164	; 0xa4
   119e0:	bd90      	pop	{r4, r7, pc}
   119e2:	46c0      	nop			; (mov r8, r8)
   119e4:	20000590 	.word	0x20000590
   119e8:	0000f761 	.word	0x0000f761
   119ec:	000101e9 	.word	0x000101e9
   119f0:	0001c1e5 	.word	0x0001c1e5

000119f4 <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
   119f4:	b590      	push	{r4, r7, lr}
   119f6:	b087      	sub	sp, #28
   119f8:	af00      	add	r7, sp, #0
   119fa:	60b9      	str	r1, [r7, #8]
   119fc:	607a      	str	r2, [r7, #4]
   119fe:	230e      	movs	r3, #14
   11a00:	18fb      	adds	r3, r7, r3
   11a02:	1c02      	adds	r2, r0, #0
   11a04:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11a06:	2317      	movs	r3, #23
   11a08:	18fb      	adds	r3, r7, r3
   11a0a:	22e1      	movs	r2, #225	; 0xe1
   11a0c:	701a      	strb	r2, [r3, #0]
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
   11a0e:	2316      	movs	r3, #22
   11a10:	18fb      	adds	r3, r7, r3
   11a12:	2200      	movs	r2, #0
   11a14:	701a      	strb	r2, [r3, #0]
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
   11a16:	2315      	movs	r3, #21
   11a18:	18fb      	adds	r3, r7, r3
   11a1a:	2200      	movs	r2, #0
   11a1c:	701a      	strb	r2, [r3, #0]

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
   11a1e:	2317      	movs	r3, #23
   11a20:	18fc      	adds	r4, r7, r3
   11a22:	2000      	movs	r0, #0
   11a24:	4b22      	ldr	r3, [pc, #136]	; (11ab0 <atcab_sign+0xbc>)
   11a26:	4798      	blx	r3
   11a28:	0003      	movs	r3, r0
   11a2a:	7023      	strb	r3, [r4, #0]
   11a2c:	2317      	movs	r3, #23
   11a2e:	18fb      	adds	r3, r7, r3
   11a30:	781b      	ldrb	r3, [r3, #0]
   11a32:	2b00      	cmp	r3, #0
   11a34:	d131      	bne.n	11a9a <atcab_sign+0xa6>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
   11a36:	4b1f      	ldr	r3, [pc, #124]	; (11ab4 <atcab_sign+0xc0>)
   11a38:	681b      	ldr	r3, [r3, #0]
   11a3a:	681b      	ldr	r3, [r3, #0]
   11a3c:	781b      	ldrb	r3, [r3, #0]
   11a3e:	2b03      	cmp	r3, #3
   11a40:	d107      	bne.n	11a52 <atcab_sign+0x5e>
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
   11a42:	2316      	movs	r3, #22
   11a44:	18fb      	adds	r3, r7, r3
   11a46:	2240      	movs	r2, #64	; 0x40
   11a48:	701a      	strb	r2, [r3, #0]
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
   11a4a:	2315      	movs	r3, #21
   11a4c:	18fb      	adds	r3, r7, r3
   11a4e:	2220      	movs	r2, #32
   11a50:	701a      	strb	r2, [r3, #0]
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
   11a52:	2317      	movs	r3, #23
   11a54:	18fc      	adds	r4, r7, r3
   11a56:	68b9      	ldr	r1, [r7, #8]
   11a58:	2316      	movs	r3, #22
   11a5a:	18fb      	adds	r3, r7, r3
   11a5c:	781b      	ldrb	r3, [r3, #0]
   11a5e:	2220      	movs	r2, #32
   11a60:	0018      	movs	r0, r3
   11a62:	4b15      	ldr	r3, [pc, #84]	; (11ab8 <atcab_sign+0xc4>)
   11a64:	4798      	blx	r3
   11a66:	0003      	movs	r3, r0
   11a68:	7023      	strb	r3, [r4, #0]
   11a6a:	2317      	movs	r3, #23
   11a6c:	18fb      	adds	r3, r7, r3
   11a6e:	781b      	ldrb	r3, [r3, #0]
   11a70:	2b00      	cmp	r3, #0
   11a72:	d114      	bne.n	11a9e <atcab_sign+0xaa>
        {
            break;
        }

        // Sign the message
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
   11a74:	2315      	movs	r3, #21
   11a76:	18fb      	adds	r3, r7, r3
   11a78:	781b      	ldrb	r3, [r3, #0]
   11a7a:	2280      	movs	r2, #128	; 0x80
   11a7c:	4252      	negs	r2, r2
   11a7e:	4313      	orrs	r3, r2
   11a80:	b2d8      	uxtb	r0, r3
   11a82:	2317      	movs	r3, #23
   11a84:	18fc      	adds	r4, r7, r3
   11a86:	687a      	ldr	r2, [r7, #4]
   11a88:	230e      	movs	r3, #14
   11a8a:	18fb      	adds	r3, r7, r3
   11a8c:	881b      	ldrh	r3, [r3, #0]
   11a8e:	0019      	movs	r1, r3
   11a90:	4b0a      	ldr	r3, [pc, #40]	; (11abc <atcab_sign+0xc8>)
   11a92:	4798      	blx	r3
   11a94:	0003      	movs	r3, r0
   11a96:	7023      	strb	r3, [r4, #0]
   11a98:	e002      	b.n	11aa0 <atcab_sign+0xac>
            break;
   11a9a:	46c0      	nop			; (mov r8, r8)
   11a9c:	e000      	b.n	11aa0 <atcab_sign+0xac>
            break;
   11a9e:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (0);

    return status;
   11aa0:	2317      	movs	r3, #23
   11aa2:	18fb      	adds	r3, r7, r3
   11aa4:	781b      	ldrb	r3, [r3, #0]
}
   11aa6:	0018      	movs	r0, r3
   11aa8:	46bd      	mov	sp, r7
   11aaa:	b007      	add	sp, #28
   11aac:	bd90      	pop	{r4, r7, pc}
   11aae:	46c0      	nop			; (mov r8, r8)
   11ab0:	00011525 	.word	0x00011525
   11ab4:	20000590 	.word	0x20000590
   11ab8:	000114a9 	.word	0x000114a9
   11abc:	00011921 	.word	0x00011921

00011ac0 <i2c_master_is_syncing>:
{
   11ac0:	b580      	push	{r7, lr}
   11ac2:	b084      	sub	sp, #16
   11ac4:	af00      	add	r7, sp, #0
   11ac6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   11ac8:	687b      	ldr	r3, [r7, #4]
   11aca:	681b      	ldr	r3, [r3, #0]
   11acc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   11ace:	68fb      	ldr	r3, [r7, #12]
   11ad0:	69db      	ldr	r3, [r3, #28]
   11ad2:	2207      	movs	r2, #7
   11ad4:	4013      	ands	r3, r2
   11ad6:	1e5a      	subs	r2, r3, #1
   11ad8:	4193      	sbcs	r3, r2
   11ada:	b2db      	uxtb	r3, r3
}
   11adc:	0018      	movs	r0, r3
   11ade:	46bd      	mov	sp, r7
   11ae0:	b004      	add	sp, #16
   11ae2:	bd80      	pop	{r7, pc}

00011ae4 <_i2c_master_wait_for_sync>:
{
   11ae4:	b580      	push	{r7, lr}
   11ae6:	b082      	sub	sp, #8
   11ae8:	af00      	add	r7, sp, #0
   11aea:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   11aec:	46c0      	nop			; (mov r8, r8)
   11aee:	687b      	ldr	r3, [r7, #4]
   11af0:	0018      	movs	r0, r3
   11af2:	4b04      	ldr	r3, [pc, #16]	; (11b04 <_i2c_master_wait_for_sync+0x20>)
   11af4:	4798      	blx	r3
   11af6:	1e03      	subs	r3, r0, #0
   11af8:	d1f9      	bne.n	11aee <_i2c_master_wait_for_sync+0xa>
}
   11afa:	46c0      	nop			; (mov r8, r8)
   11afc:	46bd      	mov	sp, r7
   11afe:	b002      	add	sp, #8
   11b00:	bd80      	pop	{r7, pc}
   11b02:	46c0      	nop			; (mov r8, r8)
   11b04:	00011ac1 	.word	0x00011ac1

00011b08 <i2c_master_get_config_defaults>:
{
   11b08:	b580      	push	{r7, lr}
   11b0a:	b082      	sub	sp, #8
   11b0c:	af00      	add	r7, sp, #0
   11b0e:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   11b10:	687b      	ldr	r3, [r7, #4]
   11b12:	2264      	movs	r2, #100	; 0x64
   11b14:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   11b16:	687b      	ldr	r3, [r7, #4]
   11b18:	4a1b      	ldr	r2, [pc, #108]	; (11b88 <i2c_master_get_config_defaults+0x80>)
   11b1a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   11b1c:	687b      	ldr	r3, [r7, #4]
   11b1e:	2200      	movs	r2, #0
   11b20:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
   11b22:	687b      	ldr	r3, [r7, #4]
   11b24:	2200      	movs	r2, #0
   11b26:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   11b28:	687b      	ldr	r3, [r7, #4]
   11b2a:	2200      	movs	r2, #0
   11b2c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   11b2e:	687b      	ldr	r3, [r7, #4]
   11b30:	2280      	movs	r2, #128	; 0x80
   11b32:	0392      	lsls	r2, r2, #14
   11b34:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   11b36:	687b      	ldr	r3, [r7, #4]
   11b38:	2201      	movs	r2, #1
   11b3a:	4252      	negs	r2, r2
   11b3c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   11b3e:	687b      	ldr	r3, [r7, #4]
   11b40:	2201      	movs	r2, #1
   11b42:	4252      	negs	r2, r2
   11b44:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11b46:	687b      	ldr	r3, [r7, #4]
   11b48:	2200      	movs	r2, #0
   11b4a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11b4c:	687b      	ldr	r3, [r7, #4]
   11b4e:	2200      	movs	r2, #0
   11b50:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   11b52:	687b      	ldr	r3, [r7, #4]
   11b54:	2224      	movs	r2, #36	; 0x24
   11b56:	2100      	movs	r1, #0
   11b58:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   11b5a:	687b      	ldr	r3, [r7, #4]
   11b5c:	2200      	movs	r2, #0
   11b5e:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
   11b60:	687b      	ldr	r3, [r7, #4]
   11b62:	222c      	movs	r2, #44	; 0x2c
   11b64:	2100      	movs	r1, #0
   11b66:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
   11b68:	687b      	ldr	r3, [r7, #4]
   11b6a:	222d      	movs	r2, #45	; 0x2d
   11b6c:	2100      	movs	r1, #0
   11b6e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   11b70:	687b      	ldr	r3, [r7, #4]
   11b72:	222e      	movs	r2, #46	; 0x2e
   11b74:	2100      	movs	r1, #0
   11b76:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
   11b78:	687b      	ldr	r3, [r7, #4]
   11b7a:	22d7      	movs	r2, #215	; 0xd7
   11b7c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   11b7e:	46c0      	nop			; (mov r8, r8)
   11b80:	46bd      	mov	sp, r7
   11b82:	b002      	add	sp, #8
   11b84:	bd80      	pop	{r7, pc}
   11b86:	46c0      	nop			; (mov r8, r8)
   11b88:	00000d48 	.word	0x00000d48

00011b8c <i2c_master_enable>:
{
   11b8c:	b580      	push	{r7, lr}
   11b8e:	b084      	sub	sp, #16
   11b90:	af00      	add	r7, sp, #0
   11b92:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11b94:	687b      	ldr	r3, [r7, #4]
   11b96:	681b      	ldr	r3, [r3, #0]
   11b98:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
   11b9a:	2300      	movs	r3, #0
   11b9c:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
   11b9e:	687b      	ldr	r3, [r7, #4]
   11ba0:	0018      	movs	r0, r3
   11ba2:	4b10      	ldr	r3, [pc, #64]	; (11be4 <i2c_master_enable+0x58>)
   11ba4:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   11ba6:	68bb      	ldr	r3, [r7, #8]
   11ba8:	681b      	ldr	r3, [r3, #0]
   11baa:	2202      	movs	r2, #2
   11bac:	431a      	orrs	r2, r3
   11bae:	68bb      	ldr	r3, [r7, #8]
   11bb0:	601a      	str	r2, [r3, #0]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   11bb2:	e00c      	b.n	11bce <i2c_master_enable+0x42>
		timeout_counter++;
   11bb4:	68fb      	ldr	r3, [r7, #12]
   11bb6:	3301      	adds	r3, #1
   11bb8:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   11bba:	687b      	ldr	r3, [r7, #4]
   11bbc:	88db      	ldrh	r3, [r3, #6]
   11bbe:	001a      	movs	r2, r3
   11bc0:	68fb      	ldr	r3, [r7, #12]
   11bc2:	429a      	cmp	r2, r3
   11bc4:	d803      	bhi.n	11bce <i2c_master_enable+0x42>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   11bc6:	68bb      	ldr	r3, [r7, #8]
   11bc8:	2210      	movs	r2, #16
   11bca:	835a      	strh	r2, [r3, #26]
			return;
   11bcc:	e006      	b.n	11bdc <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   11bce:	68bb      	ldr	r3, [r7, #8]
   11bd0:	8b5b      	ldrh	r3, [r3, #26]
   11bd2:	b29b      	uxth	r3, r3
   11bd4:	001a      	movs	r2, r3
   11bd6:	2310      	movs	r3, #16
   11bd8:	4013      	ands	r3, r2
   11bda:	d0eb      	beq.n	11bb4 <i2c_master_enable+0x28>
}
   11bdc:	46bd      	mov	sp, r7
   11bde:	b004      	add	sp, #16
   11be0:	bd80      	pop	{r7, pc}
   11be2:	46c0      	nop			; (mov r8, r8)
   11be4:	00011ae5 	.word	0x00011ae5

00011be8 <i2c_master_disable>:
{
   11be8:	b580      	push	{r7, lr}
   11bea:	b084      	sub	sp, #16
   11bec:	af00      	add	r7, sp, #0
   11bee:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11bf0:	687b      	ldr	r3, [r7, #4]
   11bf2:	681b      	ldr	r3, [r3, #0]
   11bf4:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
   11bf6:	687b      	ldr	r3, [r7, #4]
   11bf8:	0018      	movs	r0, r3
   11bfa:	4b09      	ldr	r3, [pc, #36]	; (11c20 <i2c_master_disable+0x38>)
   11bfc:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   11bfe:	68fb      	ldr	r3, [r7, #12]
   11c00:	2283      	movs	r2, #131	; 0x83
   11c02:	751a      	strb	r2, [r3, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   11c04:	68fb      	ldr	r3, [r7, #12]
   11c06:	2283      	movs	r2, #131	; 0x83
   11c08:	761a      	strb	r2, [r3, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   11c0a:	68fb      	ldr	r3, [r7, #12]
   11c0c:	681b      	ldr	r3, [r3, #0]
   11c0e:	2202      	movs	r2, #2
   11c10:	4393      	bics	r3, r2
   11c12:	001a      	movs	r2, r3
   11c14:	68fb      	ldr	r3, [r7, #12]
   11c16:	601a      	str	r2, [r3, #0]
}
   11c18:	46c0      	nop			; (mov r8, r8)
   11c1a:	46bd      	mov	sp, r7
   11c1c:	b004      	add	sp, #16
   11c1e:	bd80      	pop	{r7, pc}
   11c20:	00011ae5 	.word	0x00011ae5

00011c24 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
   11c24:	b580      	push	{r7, lr}
   11c26:	b086      	sub	sp, #24
   11c28:	af00      	add	r7, sp, #0
   11c2a:	6078      	str	r0, [r7, #4]
   11c2c:	6039      	str	r1, [r7, #0]
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
   11c2e:	683b      	ldr	r3, [r7, #0]
   11c30:	795b      	ldrb	r3, [r3, #5]
   11c32:	613b      	str	r3, [r7, #16]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;
   11c34:	687b      	ldr	r3, [r7, #4]
   11c36:	60fb      	str	r3, [r7, #12]

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
   11c38:	4b57      	ldr	r3, [pc, #348]	; (11d98 <hal_i2c_init+0x174>)
   11c3a:	681b      	ldr	r3, [r3, #0]
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	d10d      	bne.n	11c5c <hal_i2c_init+0x38>
    {
        for (int i = 0; i < MAX_I2C_BUSES; i++)
   11c40:	2300      	movs	r3, #0
   11c42:	617b      	str	r3, [r7, #20]
   11c44:	e007      	b.n	11c56 <hal_i2c_init+0x32>
        {
            i2c_hal_data[i] = NULL;
   11c46:	4b55      	ldr	r3, [pc, #340]	; (11d9c <hal_i2c_init+0x178>)
   11c48:	697a      	ldr	r2, [r7, #20]
   11c4a:	0092      	lsls	r2, r2, #2
   11c4c:	2100      	movs	r1, #0
   11c4e:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < MAX_I2C_BUSES; i++)
   11c50:	697b      	ldr	r3, [r7, #20]
   11c52:	3301      	adds	r3, #1
   11c54:	617b      	str	r3, [r7, #20]
   11c56:	697b      	ldr	r3, [r7, #20]
   11c58:	2b05      	cmp	r3, #5
   11c5a:	ddf4      	ble.n	11c46 <hal_i2c_init+0x22>
        }
    }

    i2c_bus_ref_ct++;  // total across buses
   11c5c:	4b4e      	ldr	r3, [pc, #312]	; (11d98 <hal_i2c_init+0x174>)
   11c5e:	681b      	ldr	r3, [r3, #0]
   11c60:	1c5a      	adds	r2, r3, #1
   11c62:	4b4d      	ldr	r3, [pc, #308]	; (11d98 <hal_i2c_init+0x174>)
   11c64:	601a      	str	r2, [r3, #0]

    if (bus >= 0 && bus < MAX_I2C_BUSES)
   11c66:	693b      	ldr	r3, [r7, #16]
   11c68:	2b00      	cmp	r3, #0
   11c6a:	da00      	bge.n	11c6e <hal_i2c_init+0x4a>
   11c6c:	e08e      	b.n	11d8c <hal_i2c_init+0x168>
   11c6e:	693b      	ldr	r3, [r7, #16]
   11c70:	2b05      	cmp	r3, #5
   11c72:	dd00      	ble.n	11c76 <hal_i2c_init+0x52>
   11c74:	e08a      	b.n	11d8c <hal_i2c_init+0x168>
    {
        // if this is the first time this bus and interface has been created, do the physical work of enabling it
        if (i2c_hal_data[bus] == NULL)
   11c76:	4b49      	ldr	r3, [pc, #292]	; (11d9c <hal_i2c_init+0x178>)
   11c78:	693a      	ldr	r2, [r7, #16]
   11c7a:	0092      	lsls	r2, r2, #2
   11c7c:	58d3      	ldr	r3, [r2, r3]
   11c7e:	2b00      	cmp	r3, #0
   11c80:	d175      	bne.n	11d6e <hal_i2c_init+0x14a>
        {
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
   11c82:	2014      	movs	r0, #20
   11c84:	4b46      	ldr	r3, [pc, #280]	; (11da0 <hal_i2c_init+0x17c>)
   11c86:	4798      	blx	r3
   11c88:	0003      	movs	r3, r0
   11c8a:	0019      	movs	r1, r3
   11c8c:	4b43      	ldr	r3, [pc, #268]	; (11d9c <hal_i2c_init+0x178>)
   11c8e:	693a      	ldr	r2, [r7, #16]
   11c90:	0092      	lsls	r2, r2, #2
   11c92:	50d1      	str	r1, [r2, r3]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
   11c94:	4b41      	ldr	r3, [pc, #260]	; (11d9c <hal_i2c_init+0x178>)
   11c96:	693a      	ldr	r2, [r7, #16]
   11c98:	0092      	lsls	r2, r2, #2
   11c9a:	58d3      	ldr	r3, [r2, r3]
   11c9c:	2201      	movs	r2, #1
   11c9e:	60da      	str	r2, [r3, #12]
            i2c_master_get_config_defaults(&config_i2c_master);
   11ca0:	4b40      	ldr	r3, [pc, #256]	; (11da4 <hal_i2c_init+0x180>)
   11ca2:	0018      	movs	r0, r3
   11ca4:	4b40      	ldr	r3, [pc, #256]	; (11da8 <hal_i2c_init+0x184>)
   11ca6:	4798      	blx	r3
                config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
            }
#endif

            // config_i2c_master.buffer_timeout = 10000;
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
   11ca8:	683b      	ldr	r3, [r7, #0]
   11caa:	6898      	ldr	r0, [r3, #8]
   11cac:	4b3f      	ldr	r3, [pc, #252]	; (11dac <hal_i2c_init+0x188>)
   11cae:	22fa      	movs	r2, #250	; 0xfa
   11cb0:	0091      	lsls	r1, r2, #2
   11cb2:	4798      	blx	r3
   11cb4:	0003      	movs	r3, r0
   11cb6:	001a      	movs	r2, r3
   11cb8:	4b3a      	ldr	r3, [pc, #232]	; (11da4 <hal_i2c_init+0x180>)
   11cba:	601a      	str	r2, [r3, #0]

            switch (bus)
   11cbc:	693b      	ldr	r3, [r7, #16]
   11cbe:	2b05      	cmp	r3, #5
   11cc0:	d847      	bhi.n	11d52 <hal_i2c_init+0x12e>
   11cc2:	693b      	ldr	r3, [r7, #16]
   11cc4:	009a      	lsls	r2, r3, #2
   11cc6:	4b3a      	ldr	r3, [pc, #232]	; (11db0 <hal_i2c_init+0x18c>)
   11cc8:	18d3      	adds	r3, r2, r3
   11cca:	681b      	ldr	r3, [r3, #0]
   11ccc:	469f      	mov	pc, r3
            {
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
   11cce:	4b33      	ldr	r3, [pc, #204]	; (11d9c <hal_i2c_init+0x178>)
   11cd0:	693a      	ldr	r2, [r7, #16]
   11cd2:	0092      	lsls	r2, r2, #2
   11cd4:	58d3      	ldr	r3, [r2, r3]
   11cd6:	0018      	movs	r0, r3
   11cd8:	4b32      	ldr	r3, [pc, #200]	; (11da4 <hal_i2c_init+0x180>)
   11cda:	4936      	ldr	r1, [pc, #216]	; (11db4 <hal_i2c_init+0x190>)
   11cdc:	001a      	movs	r2, r3
   11cde:	4b36      	ldr	r3, [pc, #216]	; (11db8 <hal_i2c_init+0x194>)
   11ce0:	4798      	blx	r3
   11ce2:	e036      	b.n	11d52 <hal_i2c_init+0x12e>
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
   11ce4:	4b2d      	ldr	r3, [pc, #180]	; (11d9c <hal_i2c_init+0x178>)
   11ce6:	693a      	ldr	r2, [r7, #16]
   11ce8:	0092      	lsls	r2, r2, #2
   11cea:	58d3      	ldr	r3, [r2, r3]
   11cec:	0018      	movs	r0, r3
   11cee:	4b2d      	ldr	r3, [pc, #180]	; (11da4 <hal_i2c_init+0x180>)
   11cf0:	4932      	ldr	r1, [pc, #200]	; (11dbc <hal_i2c_init+0x198>)
   11cf2:	001a      	movs	r2, r3
   11cf4:	4b30      	ldr	r3, [pc, #192]	; (11db8 <hal_i2c_init+0x194>)
   11cf6:	4798      	blx	r3
   11cf8:	e02b      	b.n	11d52 <hal_i2c_init+0x12e>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
   11cfa:	4b28      	ldr	r3, [pc, #160]	; (11d9c <hal_i2c_init+0x178>)
   11cfc:	693a      	ldr	r2, [r7, #16]
   11cfe:	0092      	lsls	r2, r2, #2
   11d00:	58d3      	ldr	r3, [r2, r3]
   11d02:	0018      	movs	r0, r3
   11d04:	4b27      	ldr	r3, [pc, #156]	; (11da4 <hal_i2c_init+0x180>)
   11d06:	492e      	ldr	r1, [pc, #184]	; (11dc0 <hal_i2c_init+0x19c>)
   11d08:	001a      	movs	r2, r3
   11d0a:	4b2b      	ldr	r3, [pc, #172]	; (11db8 <hal_i2c_init+0x194>)
   11d0c:	4798      	blx	r3
   11d0e:	e020      	b.n	11d52 <hal_i2c_init+0x12e>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
   11d10:	4b22      	ldr	r3, [pc, #136]	; (11d9c <hal_i2c_init+0x178>)
   11d12:	693a      	ldr	r2, [r7, #16]
   11d14:	0092      	lsls	r2, r2, #2
   11d16:	58d3      	ldr	r3, [r2, r3]
   11d18:	0018      	movs	r0, r3
   11d1a:	4b22      	ldr	r3, [pc, #136]	; (11da4 <hal_i2c_init+0x180>)
   11d1c:	4929      	ldr	r1, [pc, #164]	; (11dc4 <hal_i2c_init+0x1a0>)
   11d1e:	001a      	movs	r2, r3
   11d20:	4b25      	ldr	r3, [pc, #148]	; (11db8 <hal_i2c_init+0x194>)
   11d22:	4798      	blx	r3
   11d24:	e015      	b.n	11d52 <hal_i2c_init+0x12e>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
   11d26:	4b1d      	ldr	r3, [pc, #116]	; (11d9c <hal_i2c_init+0x178>)
   11d28:	693a      	ldr	r2, [r7, #16]
   11d2a:	0092      	lsls	r2, r2, #2
   11d2c:	58d3      	ldr	r3, [r2, r3]
   11d2e:	0018      	movs	r0, r3
   11d30:	4b1c      	ldr	r3, [pc, #112]	; (11da4 <hal_i2c_init+0x180>)
   11d32:	4925      	ldr	r1, [pc, #148]	; (11dc8 <hal_i2c_init+0x1a4>)
   11d34:	001a      	movs	r2, r3
   11d36:	4b20      	ldr	r3, [pc, #128]	; (11db8 <hal_i2c_init+0x194>)
   11d38:	4798      	blx	r3
   11d3a:	e00a      	b.n	11d52 <hal_i2c_init+0x12e>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
   11d3c:	4b17      	ldr	r3, [pc, #92]	; (11d9c <hal_i2c_init+0x178>)
   11d3e:	693a      	ldr	r2, [r7, #16]
   11d40:	0092      	lsls	r2, r2, #2
   11d42:	58d3      	ldr	r3, [r2, r3]
   11d44:	0018      	movs	r0, r3
   11d46:	4b17      	ldr	r3, [pc, #92]	; (11da4 <hal_i2c_init+0x180>)
   11d48:	4920      	ldr	r1, [pc, #128]	; (11dcc <hal_i2c_init+0x1a8>)
   11d4a:	001a      	movs	r2, r3
   11d4c:	4b1a      	ldr	r3, [pc, #104]	; (11db8 <hal_i2c_init+0x194>)
   11d4e:	4798      	blx	r3
   11d50:	46c0      	nop			; (mov r8, r8)
            }

            // store this for use during the release phase
            i2c_hal_data[bus]->bus_index = bus;
   11d52:	4b12      	ldr	r3, [pc, #72]	; (11d9c <hal_i2c_init+0x178>)
   11d54:	693a      	ldr	r2, [r7, #16]
   11d56:	0092      	lsls	r2, r2, #2
   11d58:	58d3      	ldr	r3, [r2, r3]
   11d5a:	693a      	ldr	r2, [r7, #16]
   11d5c:	611a      	str	r2, [r3, #16]
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
   11d5e:	4b0f      	ldr	r3, [pc, #60]	; (11d9c <hal_i2c_init+0x178>)
   11d60:	693a      	ldr	r2, [r7, #16]
   11d62:	0092      	lsls	r2, r2, #2
   11d64:	58d3      	ldr	r3, [r2, r3]
   11d66:	0018      	movs	r0, r3
   11d68:	4b19      	ldr	r3, [pc, #100]	; (11dd0 <hal_i2c_init+0x1ac>)
   11d6a:	4798      	blx	r3
   11d6c:	e006      	b.n	11d7c <hal_i2c_init+0x158>
        }
        else
        {
            // otherwise, another interface already initialized the bus, so this interface will share it and any different
            // cfg parameters will be ignored...first one to initialize this sets the configuration
            i2c_hal_data[bus]->ref_ct++;
   11d6e:	4b0b      	ldr	r3, [pc, #44]	; (11d9c <hal_i2c_init+0x178>)
   11d70:	693a      	ldr	r2, [r7, #16]
   11d72:	0092      	lsls	r2, r2, #2
   11d74:	58d3      	ldr	r3, [r2, r3]
   11d76:	68da      	ldr	r2, [r3, #12]
   11d78:	3201      	adds	r2, #1
   11d7a:	60da      	str	r2, [r3, #12]
        }

        phal->hal_data = i2c_hal_data[bus];
   11d7c:	4b07      	ldr	r3, [pc, #28]	; (11d9c <hal_i2c_init+0x178>)
   11d7e:	693a      	ldr	r2, [r7, #16]
   11d80:	0092      	lsls	r2, r2, #2
   11d82:	58d2      	ldr	r2, [r2, r3]
   11d84:	68fb      	ldr	r3, [r7, #12]
   11d86:	621a      	str	r2, [r3, #32]

        return ATCA_SUCCESS;
   11d88:	2300      	movs	r3, #0
   11d8a:	e000      	b.n	11d8e <hal_i2c_init+0x16a>
    }

    return ATCA_COMM_FAIL;
   11d8c:	23f0      	movs	r3, #240	; 0xf0
}
   11d8e:	0018      	movs	r0, r3
   11d90:	46bd      	mov	sp, r7
   11d92:	b006      	add	sp, #24
   11d94:	bd80      	pop	{r7, pc}
   11d96:	46c0      	nop			; (mov r8, r8)
   11d98:	20000594 	.word	0x20000594
   11d9c:	20002b84 	.word	0x20002b84
   11da0:	0001c165 	.word	0x0001c165
   11da4:	20000598 	.word	0x20000598
   11da8:	00011b09 	.word	0x00011b09
   11dac:	00019d81 	.word	0x00019d81
   11db0:	00020f90 	.word	0x00020f90
   11db4:	42000800 	.word	0x42000800
   11db8:	00005be9 	.word	0x00005be9
   11dbc:	42000c00 	.word	0x42000c00
   11dc0:	42001000 	.word	0x42001000
   11dc4:	42001400 	.word	0x42001400
   11dc8:	42001800 	.word	0x42001800
   11dcc:	42001c00 	.word	0x42001c00
   11dd0:	00011b8d 	.word	0x00011b8d

00011dd4 <hal_i2c_post_init>:
/** \brief HAL implementation of I2C post init
 * \param[in] iface  instance
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
   11dd4:	b580      	push	{r7, lr}
   11dd6:	b082      	sub	sp, #8
   11dd8:	af00      	add	r7, sp, #0
   11dda:	6078      	str	r0, [r7, #4]
    return ATCA_SUCCESS;
   11ddc:	2300      	movs	r3, #0
}
   11dde:	0018      	movs	r0, r3
   11de0:	46bd      	mov	sp, r7
   11de2:	b002      	add	sp, #8
   11de4:	bd80      	pop	{r7, pc}
	...

00011de8 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
   11de8:	b580      	push	{r7, lr}
   11dea:	b08a      	sub	sp, #40	; 0x28
   11dec:	af00      	add	r7, sp, #0
   11dee:	60f8      	str	r0, [r7, #12]
   11df0:	60b9      	str	r1, [r7, #8]
   11df2:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   11df4:	68fb      	ldr	r3, [r7, #12]
   11df6:	0018      	movs	r0, r3
   11df8:	4b21      	ldr	r3, [pc, #132]	; (11e80 <hal_i2c_send+0x98>)
   11dfa:	4798      	blx	r3
   11dfc:	0003      	movs	r3, r0
   11dfe:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
   11e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e02:	795b      	ldrb	r3, [r3, #5]
   11e04:	623b      	str	r3, [r7, #32]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   11e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e08:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   11e0a:	085b      	lsrs	r3, r3, #1
   11e0c:	b2db      	uxtb	r3, r3
   11e0e:	b29a      	uxth	r2, r3
   11e10:	2314      	movs	r3, #20
   11e12:	18fb      	adds	r3, r7, r3
   11e14:	801a      	strh	r2, [r3, #0]
   11e16:	687b      	ldr	r3, [r7, #4]
   11e18:	b29a      	uxth	r2, r3
   11e1a:	2314      	movs	r3, #20
   11e1c:	18fb      	adds	r3, r7, r3
   11e1e:	805a      	strh	r2, [r3, #2]
   11e20:	2314      	movs	r3, #20
   11e22:	18fb      	adds	r3, r7, r3
   11e24:	68ba      	ldr	r2, [r7, #8]
   11e26:	605a      	str	r2, [r3, #4]
   11e28:	2314      	movs	r3, #20
   11e2a:	18fb      	adds	r3, r7, r3
   11e2c:	2200      	movs	r2, #0
   11e2e:	721a      	strb	r2, [r3, #8]
   11e30:	2314      	movs	r3, #20
   11e32:	18fb      	adds	r3, r7, r3
   11e34:	2200      	movs	r2, #0
   11e36:	725a      	strb	r2, [r3, #9]
   11e38:	2314      	movs	r3, #20
   11e3a:	18fb      	adds	r3, r7, r3
   11e3c:	2200      	movs	r2, #0
   11e3e:	729a      	strb	r2, [r3, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
   11e40:	68bb      	ldr	r3, [r7, #8]
   11e42:	2203      	movs	r2, #3
   11e44:	701a      	strb	r2, [r3, #0]
    txlength++;         // account for word address value byte.
   11e46:	687b      	ldr	r3, [r7, #4]
   11e48:	3301      	adds	r3, #1
   11e4a:	607b      	str	r3, [r7, #4]
    packet.data_length = txlength;
   11e4c:	687b      	ldr	r3, [r7, #4]
   11e4e:	b29a      	uxth	r2, r3
   11e50:	2314      	movs	r3, #20
   11e52:	18fb      	adds	r3, r7, r3
   11e54:	805a      	strh	r2, [r3, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
   11e56:	4b0b      	ldr	r3, [pc, #44]	; (11e84 <hal_i2c_send+0x9c>)
   11e58:	6a3a      	ldr	r2, [r7, #32]
   11e5a:	0092      	lsls	r2, r2, #2
   11e5c:	58d3      	ldr	r3, [r2, r3]
   11e5e:	001a      	movs	r2, r3
   11e60:	2314      	movs	r3, #20
   11e62:	18fb      	adds	r3, r7, r3
   11e64:	0019      	movs	r1, r3
   11e66:	0010      	movs	r0, r2
   11e68:	4b07      	ldr	r3, [pc, #28]	; (11e88 <hal_i2c_send+0xa0>)
   11e6a:	4798      	blx	r3
   11e6c:	1e03      	subs	r3, r0, #0
   11e6e:	d001      	beq.n	11e74 <hal_i2c_send+0x8c>
    {
        return ATCA_COMM_FAIL;
   11e70:	23f0      	movs	r3, #240	; 0xf0
   11e72:	e000      	b.n	11e76 <hal_i2c_send+0x8e>
    }

    return ATCA_SUCCESS;
   11e74:	2300      	movs	r3, #0
}
   11e76:	0018      	movs	r0, r3
   11e78:	46bd      	mov	sp, r7
   11e7a:	b00a      	add	sp, #40	; 0x28
   11e7c:	bd80      	pop	{r7, pc}
   11e7e:	46c0      	nop			; (mov r8, r8)
   11e80:	0000fdd9 	.word	0x0000fdd9
   11e84:	20002b84 	.word	0x20002b84
   11e88:	00006221 	.word	0x00006221

00011e8c <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
   11e8c:	b580      	push	{r7, lr}
   11e8e:	b08c      	sub	sp, #48	; 0x30
   11e90:	af00      	add	r7, sp, #0
   11e92:	60f8      	str	r0, [r7, #12]
   11e94:	60b9      	str	r1, [r7, #8]
   11e96:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   11e98:	68fb      	ldr	r3, [r7, #12]
   11e9a:	0018      	movs	r0, r3
   11e9c:	4b29      	ldr	r3, [pc, #164]	; (11f44 <hal_i2c_receive+0xb8>)
   11e9e:	4798      	blx	r3
   11ea0:	0003      	movs	r3, r0
   11ea2:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
   11ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ea6:	795b      	ldrb	r3, [r3, #5]
   11ea8:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
   11eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    int status = !STATUS_OK;
   11eb0:	2301      	movs	r3, #1
   11eb2:	62bb      	str	r3, [r7, #40]	; 0x28

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   11eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11eb6:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   11eb8:	085b      	lsrs	r3, r3, #1
   11eba:	b2db      	uxtb	r3, r3
   11ebc:	b29a      	uxth	r2, r3
   11ebe:	2314      	movs	r3, #20
   11ec0:	18fb      	adds	r3, r7, r3
   11ec2:	801a      	strh	r2, [r3, #0]
        .data_length        = *rxlength,
   11ec4:	687b      	ldr	r3, [r7, #4]
   11ec6:	881a      	ldrh	r2, [r3, #0]
    struct i2c_master_packet packet = {
   11ec8:	2314      	movs	r3, #20
   11eca:	18fb      	adds	r3, r7, r3
   11ecc:	805a      	strh	r2, [r3, #2]
   11ece:	2314      	movs	r3, #20
   11ed0:	18fb      	adds	r3, r7, r3
   11ed2:	68ba      	ldr	r2, [r7, #8]
   11ed4:	605a      	str	r2, [r3, #4]
   11ed6:	2314      	movs	r3, #20
   11ed8:	18fb      	adds	r3, r7, r3
   11eda:	2200      	movs	r2, #0
   11edc:	721a      	strb	r2, [r3, #8]
   11ede:	2314      	movs	r3, #20
   11ee0:	18fb      	adds	r3, r7, r3
   11ee2:	2200      	movs	r2, #0
   11ee4:	725a      	strb	r2, [r3, #9]
   11ee6:	2314      	movs	r3, #20
   11ee8:	18fb      	adds	r3, r7, r3
   11eea:	2200      	movs	r2, #0
   11eec:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
   11eee:	e00c      	b.n	11f0a <hal_i2c_receive+0x7e>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
   11ef0:	4b15      	ldr	r3, [pc, #84]	; (11f48 <hal_i2c_receive+0xbc>)
   11ef2:	6a3a      	ldr	r2, [r7, #32]
   11ef4:	0092      	lsls	r2, r2, #2
   11ef6:	58d3      	ldr	r3, [r2, r3]
   11ef8:	001a      	movs	r2, r3
   11efa:	2314      	movs	r3, #20
   11efc:	18fb      	adds	r3, r7, r3
   11efe:	0019      	movs	r1, r3
   11f00:	0010      	movs	r0, r2
   11f02:	4b12      	ldr	r3, [pc, #72]	; (11f4c <hal_i2c_receive+0xc0>)
   11f04:	4798      	blx	r3
   11f06:	0003      	movs	r3, r0
   11f08:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
   11f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11f0c:	1e5a      	subs	r2, r3, #1
   11f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   11f10:	2b00      	cmp	r3, #0
   11f12:	dd02      	ble.n	11f1a <hal_i2c_receive+0x8e>
   11f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f16:	2b00      	cmp	r3, #0
   11f18:	d1ea      	bne.n	11ef0 <hal_i2c_receive+0x64>
    }

    if (status != STATUS_OK)
   11f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f1c:	2b00      	cmp	r3, #0
   11f1e:	d001      	beq.n	11f24 <hal_i2c_receive+0x98>
    {
        return ATCA_COMM_FAIL;
   11f20:	23f0      	movs	r3, #240	; 0xf0
   11f22:	e00a      	b.n	11f3a <hal_i2c_receive+0xae>
    }

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
   11f24:	2314      	movs	r3, #20
   11f26:	18fb      	adds	r3, r7, r3
   11f28:	685b      	ldr	r3, [r3, #4]
   11f2a:	0018      	movs	r0, r3
   11f2c:	4b08      	ldr	r3, [pc, #32]	; (11f50 <hal_i2c_receive+0xc4>)
   11f2e:	4798      	blx	r3
   11f30:	1e03      	subs	r3, r0, #0
   11f32:	d001      	beq.n	11f38 <hal_i2c_receive+0xac>
    {
        return ATCA_COMM_FAIL;
   11f34:	23f0      	movs	r3, #240	; 0xf0
   11f36:	e000      	b.n	11f3a <hal_i2c_receive+0xae>
    }

    return ATCA_SUCCESS;
   11f38:	2300      	movs	r3, #0
}
   11f3a:	0018      	movs	r0, r3
   11f3c:	46bd      	mov	sp, r7
   11f3e:	b00c      	add	sp, #48	; 0x30
   11f40:	bd80      	pop	{r7, pc}
   11f42:	46c0      	nop			; (mov r8, r8)
   11f44:	0000fdd9 	.word	0x0000fdd9
   11f48:	20002b84 	.word	0x20002b84
   11f4c:	00006079 	.word	0x00006079
   11f50:	0000fa69 	.word	0x0000fa69

00011f54 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
   11f54:	b580      	push	{r7, lr}
   11f56:	b084      	sub	sp, #16
   11f58:	af00      	add	r7, sp, #0
   11f5a:	6078      	str	r0, [r7, #4]
   11f5c:	6039      	str	r1, [r7, #0]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	0018      	movs	r0, r3
   11f62:	4b38      	ldr	r3, [pc, #224]	; (12044 <change_i2c_speed+0xf0>)
   11f64:	4798      	blx	r3
   11f66:	0003      	movs	r3, r0
   11f68:	60fb      	str	r3, [r7, #12]
    int bus = cfg->atcai2c.bus;
   11f6a:	68fb      	ldr	r3, [r7, #12]
   11f6c:	795b      	ldrb	r3, [r3, #5]
   11f6e:	60bb      	str	r3, [r7, #8]

    config_i2c_master.buffer_timeout = 10000;
   11f70:	4b35      	ldr	r3, [pc, #212]	; (12048 <change_i2c_speed+0xf4>)
   11f72:	4a36      	ldr	r2, [pc, #216]	; (1204c <change_i2c_speed+0xf8>)
   11f74:	82da      	strh	r2, [r3, #22]
    config_i2c_master.baud_rate = speed / 1000;
   11f76:	6838      	ldr	r0, [r7, #0]
   11f78:	4b35      	ldr	r3, [pc, #212]	; (12050 <change_i2c_speed+0xfc>)
   11f7a:	22fa      	movs	r2, #250	; 0xfa
   11f7c:	0091      	lsls	r1, r2, #2
   11f7e:	4798      	blx	r3
   11f80:	0003      	movs	r3, r0
   11f82:	001a      	movs	r2, r3
   11f84:	4b30      	ldr	r3, [pc, #192]	; (12048 <change_i2c_speed+0xf4>)
   11f86:	601a      	str	r2, [r3, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
   11f88:	4b32      	ldr	r3, [pc, #200]	; (12054 <change_i2c_speed+0x100>)
   11f8a:	68ba      	ldr	r2, [r7, #8]
   11f8c:	0092      	lsls	r2, r2, #2
   11f8e:	58d3      	ldr	r3, [r2, r3]
   11f90:	0018      	movs	r0, r3
   11f92:	4b31      	ldr	r3, [pc, #196]	; (12058 <change_i2c_speed+0x104>)
   11f94:	4798      	blx	r3

    switch (bus)
   11f96:	68bb      	ldr	r3, [r7, #8]
   11f98:	2b05      	cmp	r3, #5
   11f9a:	d847      	bhi.n	1202c <change_i2c_speed+0xd8>
   11f9c:	68bb      	ldr	r3, [r7, #8]
   11f9e:	009a      	lsls	r2, r3, #2
   11fa0:	4b2e      	ldr	r3, [pc, #184]	; (1205c <change_i2c_speed+0x108>)
   11fa2:	18d3      	adds	r3, r2, r3
   11fa4:	681b      	ldr	r3, [r3, #0]
   11fa6:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
   11fa8:	4b2a      	ldr	r3, [pc, #168]	; (12054 <change_i2c_speed+0x100>)
   11faa:	68ba      	ldr	r2, [r7, #8]
   11fac:	0092      	lsls	r2, r2, #2
   11fae:	58d3      	ldr	r3, [r2, r3]
   11fb0:	0018      	movs	r0, r3
   11fb2:	4b25      	ldr	r3, [pc, #148]	; (12048 <change_i2c_speed+0xf4>)
   11fb4:	492a      	ldr	r1, [pc, #168]	; (12060 <change_i2c_speed+0x10c>)
   11fb6:	001a      	movs	r2, r3
   11fb8:	4b2a      	ldr	r3, [pc, #168]	; (12064 <change_i2c_speed+0x110>)
   11fba:	4798      	blx	r3
   11fbc:	e036      	b.n	1202c <change_i2c_speed+0xd8>
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
   11fbe:	4b25      	ldr	r3, [pc, #148]	; (12054 <change_i2c_speed+0x100>)
   11fc0:	68ba      	ldr	r2, [r7, #8]
   11fc2:	0092      	lsls	r2, r2, #2
   11fc4:	58d3      	ldr	r3, [r2, r3]
   11fc6:	0018      	movs	r0, r3
   11fc8:	4b1f      	ldr	r3, [pc, #124]	; (12048 <change_i2c_speed+0xf4>)
   11fca:	4927      	ldr	r1, [pc, #156]	; (12068 <change_i2c_speed+0x114>)
   11fcc:	001a      	movs	r2, r3
   11fce:	4b25      	ldr	r3, [pc, #148]	; (12064 <change_i2c_speed+0x110>)
   11fd0:	4798      	blx	r3
   11fd2:	e02b      	b.n	1202c <change_i2c_speed+0xd8>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
   11fd4:	4b1f      	ldr	r3, [pc, #124]	; (12054 <change_i2c_speed+0x100>)
   11fd6:	68ba      	ldr	r2, [r7, #8]
   11fd8:	0092      	lsls	r2, r2, #2
   11fda:	58d3      	ldr	r3, [r2, r3]
   11fdc:	0018      	movs	r0, r3
   11fde:	4b1a      	ldr	r3, [pc, #104]	; (12048 <change_i2c_speed+0xf4>)
   11fe0:	4922      	ldr	r1, [pc, #136]	; (1206c <change_i2c_speed+0x118>)
   11fe2:	001a      	movs	r2, r3
   11fe4:	4b1f      	ldr	r3, [pc, #124]	; (12064 <change_i2c_speed+0x110>)
   11fe6:	4798      	blx	r3
   11fe8:	e020      	b.n	1202c <change_i2c_speed+0xd8>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
   11fea:	4b1a      	ldr	r3, [pc, #104]	; (12054 <change_i2c_speed+0x100>)
   11fec:	68ba      	ldr	r2, [r7, #8]
   11fee:	0092      	lsls	r2, r2, #2
   11ff0:	58d3      	ldr	r3, [r2, r3]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b14      	ldr	r3, [pc, #80]	; (12048 <change_i2c_speed+0xf4>)
   11ff6:	491e      	ldr	r1, [pc, #120]	; (12070 <change_i2c_speed+0x11c>)
   11ff8:	001a      	movs	r2, r3
   11ffa:	4b1a      	ldr	r3, [pc, #104]	; (12064 <change_i2c_speed+0x110>)
   11ffc:	4798      	blx	r3
   11ffe:	e015      	b.n	1202c <change_i2c_speed+0xd8>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
   12000:	4b14      	ldr	r3, [pc, #80]	; (12054 <change_i2c_speed+0x100>)
   12002:	68ba      	ldr	r2, [r7, #8]
   12004:	0092      	lsls	r2, r2, #2
   12006:	58d3      	ldr	r3, [r2, r3]
   12008:	0018      	movs	r0, r3
   1200a:	4b0f      	ldr	r3, [pc, #60]	; (12048 <change_i2c_speed+0xf4>)
   1200c:	4919      	ldr	r1, [pc, #100]	; (12074 <change_i2c_speed+0x120>)
   1200e:	001a      	movs	r2, r3
   12010:	4b14      	ldr	r3, [pc, #80]	; (12064 <change_i2c_speed+0x110>)
   12012:	4798      	blx	r3
   12014:	e00a      	b.n	1202c <change_i2c_speed+0xd8>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
   12016:	4b0f      	ldr	r3, [pc, #60]	; (12054 <change_i2c_speed+0x100>)
   12018:	68ba      	ldr	r2, [r7, #8]
   1201a:	0092      	lsls	r2, r2, #2
   1201c:	58d3      	ldr	r3, [r2, r3]
   1201e:	0018      	movs	r0, r3
   12020:	4b09      	ldr	r3, [pc, #36]	; (12048 <change_i2c_speed+0xf4>)
   12022:	4915      	ldr	r1, [pc, #84]	; (12078 <change_i2c_speed+0x124>)
   12024:	001a      	movs	r2, r3
   12026:	4b0f      	ldr	r3, [pc, #60]	; (12064 <change_i2c_speed+0x110>)
   12028:	4798      	blx	r3
   1202a:	46c0      	nop			; (mov r8, r8)
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
   1202c:	4b09      	ldr	r3, [pc, #36]	; (12054 <change_i2c_speed+0x100>)
   1202e:	68ba      	ldr	r2, [r7, #8]
   12030:	0092      	lsls	r2, r2, #2
   12032:	58d3      	ldr	r3, [r2, r3]
   12034:	0018      	movs	r0, r3
   12036:	4b11      	ldr	r3, [pc, #68]	; (1207c <change_i2c_speed+0x128>)
   12038:	4798      	blx	r3
}
   1203a:	46c0      	nop			; (mov r8, r8)
   1203c:	46bd      	mov	sp, r7
   1203e:	b004      	add	sp, #16
   12040:	bd80      	pop	{r7, pc}
   12042:	46c0      	nop			; (mov r8, r8)
   12044:	0000fdd9 	.word	0x0000fdd9
   12048:	20000598 	.word	0x20000598
   1204c:	00002710 	.word	0x00002710
   12050:	00019d81 	.word	0x00019d81
   12054:	20002b84 	.word	0x20002b84
   12058:	00011be9 	.word	0x00011be9
   1205c:	00020fa8 	.word	0x00020fa8
   12060:	42000800 	.word	0x42000800
   12064:	00005be9 	.word	0x00005be9
   12068:	42000c00 	.word	0x42000c00
   1206c:	42001000 	.word	0x42001000
   12070:	42001400 	.word	0x42001400
   12074:	42001800 	.word	0x42001800
   12078:	42001c00 	.word	0x42001c00
   1207c:	00011b8d 	.word	0x00011b8d

00012080 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
   12080:	b580      	push	{r7, lr}
   12082:	b08c      	sub	sp, #48	; 0x30
   12084:	af00      	add	r7, sp, #0
   12086:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	0018      	movs	r0, r3
   1208c:	4b46      	ldr	r3, [pc, #280]	; (121a8 <hal_i2c_wake+0x128>)
   1208e:	4798      	blx	r3
   12090:	0003      	movs	r3, r0
   12092:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
   12094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12096:	795b      	ldrb	r3, [r3, #5]
   12098:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
   1209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bdrt = cfg->atcai2c.baud;
   120a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   120a2:	689b      	ldr	r3, [r3, #8]
   120a4:	61fb      	str	r3, [r7, #28]
    int status = !STATUS_OK;
   120a6:	2301      	movs	r3, #1
   120a8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
   120aa:	2314      	movs	r3, #20
   120ac:	18fb      	adds	r3, r7, r3
   120ae:	4a3f      	ldr	r2, [pc, #252]	; (121ac <hal_i2c_wake+0x12c>)
   120b0:	6812      	ldr	r2, [r2, #0]
   120b2:	601a      	str	r2, [r3, #0]

    if (bdrt != 100000)    // if not already at 100KHz, change it
   120b4:	69fb      	ldr	r3, [r7, #28]
   120b6:	4a3e      	ldr	r2, [pc, #248]	; (121b0 <hal_i2c_wake+0x130>)
   120b8:	4293      	cmp	r3, r2
   120ba:	d005      	beq.n	120c8 <hal_i2c_wake+0x48>
    {
        change_i2c_speed(iface, 100000);
   120bc:	4a3c      	ldr	r2, [pc, #240]	; (121b0 <hal_i2c_wake+0x130>)
   120be:	687b      	ldr	r3, [r7, #4]
   120c0:	0011      	movs	r1, r2
   120c2:	0018      	movs	r0, r3
   120c4:	4b3b      	ldr	r3, [pc, #236]	; (121b4 <hal_i2c_wake+0x134>)
   120c6:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
   120c8:	2308      	movs	r3, #8
   120ca:	18fb      	adds	r3, r7, r3
   120cc:	2200      	movs	r2, #0
   120ce:	801a      	strh	r2, [r3, #0]
   120d0:	2308      	movs	r3, #8
   120d2:	18fb      	adds	r3, r7, r3
   120d4:	2200      	movs	r2, #0
   120d6:	805a      	strh	r2, [r3, #2]
   120d8:	2308      	movs	r3, #8
   120da:	18fb      	adds	r3, r7, r3
   120dc:	2218      	movs	r2, #24
   120de:	18ba      	adds	r2, r7, r2
   120e0:	605a      	str	r2, [r3, #4]
   120e2:	2308      	movs	r3, #8
   120e4:	18fb      	adds	r3, r7, r3
   120e6:	2200      	movs	r2, #0
   120e8:	721a      	strb	r2, [r3, #8]
   120ea:	2308      	movs	r3, #8
   120ec:	18fb      	adds	r3, r7, r3
   120ee:	2200      	movs	r2, #0
   120f0:	725a      	strb	r2, [r3, #9]
   120f2:	2308      	movs	r3, #8
   120f4:	18fb      	adds	r3, r7, r3
   120f6:	2200      	movs	r2, #0
   120f8:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
   120fa:	4b2f      	ldr	r3, [pc, #188]	; (121b8 <hal_i2c_wake+0x138>)
   120fc:	6a3a      	ldr	r2, [r7, #32]
   120fe:	0092      	lsls	r2, r2, #2
   12100:	58d3      	ldr	r3, [r2, r3]
   12102:	001a      	movs	r2, r3
   12104:	2308      	movs	r3, #8
   12106:	18fb      	adds	r3, r7, r3
   12108:	0019      	movs	r1, r3
   1210a:	0010      	movs	r0, r2
   1210c:	4b2b      	ldr	r3, [pc, #172]	; (121bc <hal_i2c_wake+0x13c>)
   1210e:	4798      	blx	r3

    atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
   12110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12112:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12114:	0018      	movs	r0, r3
   12116:	4b2a      	ldr	r3, [pc, #168]	; (121c0 <hal_i2c_wake+0x140>)
   12118:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
   1211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1211c:	791b      	ldrb	r3, [r3, #4]
   1211e:	085b      	lsrs	r3, r3, #1
   12120:	b2db      	uxtb	r3, r3
   12122:	b29a      	uxth	r2, r3
   12124:	2308      	movs	r3, #8
   12126:	18fb      	adds	r3, r7, r3
   12128:	801a      	strh	r2, [r3, #0]
    packet.data_length = 4;
   1212a:	2308      	movs	r3, #8
   1212c:	18fb      	adds	r3, r7, r3
   1212e:	2204      	movs	r2, #4
   12130:	805a      	strh	r2, [r3, #2]
    packet.data = data;
   12132:	2308      	movs	r3, #8
   12134:	18fb      	adds	r3, r7, r3
   12136:	2218      	movs	r2, #24
   12138:	18ba      	adds	r2, r7, r2
   1213a:	605a      	str	r2, [r3, #4]

    while (retries-- > 0 && status != STATUS_OK)
   1213c:	e00c      	b.n	12158 <hal_i2c_wake+0xd8>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
   1213e:	4b1e      	ldr	r3, [pc, #120]	; (121b8 <hal_i2c_wake+0x138>)
   12140:	6a3a      	ldr	r2, [r7, #32]
   12142:	0092      	lsls	r2, r2, #2
   12144:	58d3      	ldr	r3, [r2, r3]
   12146:	001a      	movs	r2, r3
   12148:	2308      	movs	r3, #8
   1214a:	18fb      	adds	r3, r7, r3
   1214c:	0019      	movs	r1, r3
   1214e:	0010      	movs	r0, r2
   12150:	4b1c      	ldr	r3, [pc, #112]	; (121c4 <hal_i2c_wake+0x144>)
   12152:	4798      	blx	r3
   12154:	0003      	movs	r3, r0
   12156:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
   12158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1215a:	1e5a      	subs	r2, r3, #1
   1215c:	62fa      	str	r2, [r7, #44]	; 0x2c
   1215e:	2b00      	cmp	r3, #0
   12160:	dd02      	ble.n	12168 <hal_i2c_wake+0xe8>
   12162:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12164:	2b00      	cmp	r3, #0
   12166:	d1ea      	bne.n	1213e <hal_i2c_wake+0xbe>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
   12168:	69fb      	ldr	r3, [r7, #28]
   1216a:	4a11      	ldr	r2, [pc, #68]	; (121b0 <hal_i2c_wake+0x130>)
   1216c:	4293      	cmp	r3, r2
   1216e:	d005      	beq.n	1217c <hal_i2c_wake+0xfc>
    {
        change_i2c_speed(iface, bdrt);
   12170:	69fa      	ldr	r2, [r7, #28]
   12172:	687b      	ldr	r3, [r7, #4]
   12174:	0011      	movs	r1, r2
   12176:	0018      	movs	r0, r3
   12178:	4b0e      	ldr	r3, [pc, #56]	; (121b4 <hal_i2c_wake+0x134>)
   1217a:	4798      	blx	r3
    }

    if (status != STATUS_OK)
   1217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1217e:	2b00      	cmp	r3, #0
   12180:	d001      	beq.n	12186 <hal_i2c_wake+0x106>
    {
        return ATCA_COMM_FAIL;
   12182:	23f0      	movs	r3, #240	; 0xf0
   12184:	e00c      	b.n	121a0 <hal_i2c_wake+0x120>
    }

    if (memcmp(data, expected, 4) == 0)
   12186:	2314      	movs	r3, #20
   12188:	18f9      	adds	r1, r7, r3
   1218a:	2318      	movs	r3, #24
   1218c:	18fb      	adds	r3, r7, r3
   1218e:	2204      	movs	r2, #4
   12190:	0018      	movs	r0, r3
   12192:	4b0d      	ldr	r3, [pc, #52]	; (121c8 <hal_i2c_wake+0x148>)
   12194:	4798      	blx	r3
   12196:	1e03      	subs	r3, r0, #0
   12198:	d101      	bne.n	1219e <hal_i2c_wake+0x11e>
    {
        return ATCA_SUCCESS;
   1219a:	2300      	movs	r3, #0
   1219c:	e000      	b.n	121a0 <hal_i2c_wake+0x120>
    }

    return ATCA_COMM_FAIL;
   1219e:	23f0      	movs	r3, #240	; 0xf0
}
   121a0:	0018      	movs	r0, r3
   121a2:	46bd      	mov	sp, r7
   121a4:	b00c      	add	sp, #48	; 0x30
   121a6:	bd80      	pop	{r7, pc}
   121a8:	0000fdd9 	.word	0x0000fdd9
   121ac:	00020f8c 	.word	0x00020f8c
   121b0:	000186a0 	.word	0x000186a0
   121b4:	00011f55 	.word	0x00011f55
   121b8:	20002b84 	.word	0x20002b84
   121bc:	00006221 	.word	0x00006221
   121c0:	00012369 	.word	0x00012369
   121c4:	00006079 	.word	0x00006079
   121c8:	0001c1c7 	.word	0x0001c1c7

000121cc <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
   121cc:	b580      	push	{r7, lr}
   121ce:	b088      	sub	sp, #32
   121d0:	af00      	add	r7, sp, #0
   121d2:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   121d4:	687b      	ldr	r3, [r7, #4]
   121d6:	0018      	movs	r0, r3
   121d8:	4b1d      	ldr	r3, [pc, #116]	; (12250 <hal_i2c_idle+0x84>)
   121da:	4798      	blx	r3
   121dc:	0003      	movs	r3, r0
   121de:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
   121e0:	69fb      	ldr	r3, [r7, #28]
   121e2:	795b      	ldrb	r3, [r3, #5]
   121e4:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   121e6:	69fb      	ldr	r3, [r7, #28]
   121e8:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   121ea:	085b      	lsrs	r3, r3, #1
   121ec:	b2db      	uxtb	r3, r3
   121ee:	b29a      	uxth	r2, r3
   121f0:	2308      	movs	r3, #8
   121f2:	18fb      	adds	r3, r7, r3
   121f4:	801a      	strh	r2, [r3, #0]
   121f6:	2308      	movs	r3, #8
   121f8:	18fb      	adds	r3, r7, r3
   121fa:	2201      	movs	r2, #1
   121fc:	805a      	strh	r2, [r3, #2]
   121fe:	2308      	movs	r3, #8
   12200:	18fb      	adds	r3, r7, r3
   12202:	2214      	movs	r2, #20
   12204:	18ba      	adds	r2, r7, r2
   12206:	605a      	str	r2, [r3, #4]
   12208:	2308      	movs	r3, #8
   1220a:	18fb      	adds	r3, r7, r3
   1220c:	2200      	movs	r2, #0
   1220e:	721a      	strb	r2, [r3, #8]
   12210:	2308      	movs	r3, #8
   12212:	18fb      	adds	r3, r7, r3
   12214:	2200      	movs	r2, #0
   12216:	725a      	strb	r2, [r3, #9]
   12218:	2308      	movs	r3, #8
   1221a:	18fb      	adds	r3, r7, r3
   1221c:	2200      	movs	r2, #0
   1221e:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
   12220:	2314      	movs	r3, #20
   12222:	18fb      	adds	r3, r7, r3
   12224:	2202      	movs	r2, #2
   12226:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
   12228:	4b0a      	ldr	r3, [pc, #40]	; (12254 <hal_i2c_idle+0x88>)
   1222a:	69ba      	ldr	r2, [r7, #24]
   1222c:	0092      	lsls	r2, r2, #2
   1222e:	58d3      	ldr	r3, [r2, r3]
   12230:	001a      	movs	r2, r3
   12232:	2308      	movs	r3, #8
   12234:	18fb      	adds	r3, r7, r3
   12236:	0019      	movs	r1, r3
   12238:	0010      	movs	r0, r2
   1223a:	4b07      	ldr	r3, [pc, #28]	; (12258 <hal_i2c_idle+0x8c>)
   1223c:	4798      	blx	r3
   1223e:	1e03      	subs	r3, r0, #0
   12240:	d001      	beq.n	12246 <hal_i2c_idle+0x7a>
    {
        return ATCA_COMM_FAIL;
   12242:	23f0      	movs	r3, #240	; 0xf0
   12244:	e000      	b.n	12248 <hal_i2c_idle+0x7c>
    }

    return ATCA_SUCCESS;
   12246:	2300      	movs	r3, #0

}
   12248:	0018      	movs	r0, r3
   1224a:	46bd      	mov	sp, r7
   1224c:	b008      	add	sp, #32
   1224e:	bd80      	pop	{r7, pc}
   12250:	0000fdd9 	.word	0x0000fdd9
   12254:	20002b84 	.word	0x20002b84
   12258:	00006221 	.word	0x00006221

0001225c <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
   1225c:	b580      	push	{r7, lr}
   1225e:	b088      	sub	sp, #32
   12260:	af00      	add	r7, sp, #0
   12262:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   12264:	687b      	ldr	r3, [r7, #4]
   12266:	0018      	movs	r0, r3
   12268:	4b1d      	ldr	r3, [pc, #116]	; (122e0 <hal_i2c_sleep+0x84>)
   1226a:	4798      	blx	r3
   1226c:	0003      	movs	r3, r0
   1226e:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
   12270:	69fb      	ldr	r3, [r7, #28]
   12272:	795b      	ldrb	r3, [r3, #5]
   12274:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   12276:	69fb      	ldr	r3, [r7, #28]
   12278:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   1227a:	085b      	lsrs	r3, r3, #1
   1227c:	b2db      	uxtb	r3, r3
   1227e:	b29a      	uxth	r2, r3
   12280:	2308      	movs	r3, #8
   12282:	18fb      	adds	r3, r7, r3
   12284:	801a      	strh	r2, [r3, #0]
   12286:	2308      	movs	r3, #8
   12288:	18fb      	adds	r3, r7, r3
   1228a:	2201      	movs	r2, #1
   1228c:	805a      	strh	r2, [r3, #2]
   1228e:	2308      	movs	r3, #8
   12290:	18fb      	adds	r3, r7, r3
   12292:	2214      	movs	r2, #20
   12294:	18ba      	adds	r2, r7, r2
   12296:	605a      	str	r2, [r3, #4]
   12298:	2308      	movs	r3, #8
   1229a:	18fb      	adds	r3, r7, r3
   1229c:	2200      	movs	r2, #0
   1229e:	721a      	strb	r2, [r3, #8]
   122a0:	2308      	movs	r3, #8
   122a2:	18fb      	adds	r3, r7, r3
   122a4:	2200      	movs	r2, #0
   122a6:	725a      	strb	r2, [r3, #9]
   122a8:	2308      	movs	r3, #8
   122aa:	18fb      	adds	r3, r7, r3
   122ac:	2200      	movs	r2, #0
   122ae:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
   122b0:	2314      	movs	r3, #20
   122b2:	18fb      	adds	r3, r7, r3
   122b4:	2201      	movs	r2, #1
   122b6:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
   122b8:	4b0a      	ldr	r3, [pc, #40]	; (122e4 <hal_i2c_sleep+0x88>)
   122ba:	69ba      	ldr	r2, [r7, #24]
   122bc:	0092      	lsls	r2, r2, #2
   122be:	58d3      	ldr	r3, [r2, r3]
   122c0:	001a      	movs	r2, r3
   122c2:	2308      	movs	r3, #8
   122c4:	18fb      	adds	r3, r7, r3
   122c6:	0019      	movs	r1, r3
   122c8:	0010      	movs	r0, r2
   122ca:	4b07      	ldr	r3, [pc, #28]	; (122e8 <hal_i2c_sleep+0x8c>)
   122cc:	4798      	blx	r3
   122ce:	1e03      	subs	r3, r0, #0
   122d0:	d001      	beq.n	122d6 <hal_i2c_sleep+0x7a>
    {
        return ATCA_COMM_FAIL;
   122d2:	23f0      	movs	r3, #240	; 0xf0
   122d4:	e000      	b.n	122d8 <hal_i2c_sleep+0x7c>
    }

    return ATCA_SUCCESS;
   122d6:	2300      	movs	r3, #0
}
   122d8:	0018      	movs	r0, r3
   122da:	46bd      	mov	sp, r7
   122dc:	b008      	add	sp, #32
   122de:	bd80      	pop	{r7, pc}
   122e0:	0000fdd9 	.word	0x0000fdd9
   122e4:	20002b84 	.word	0x20002b84
   122e8:	00006221 	.word	0x00006221

000122ec <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
   122ec:	b580      	push	{r7, lr}
   122ee:	b084      	sub	sp, #16
   122f0:	af00      	add	r7, sp, #0
   122f2:	6078      	str	r0, [r7, #4]
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;
   122f4:	687b      	ldr	r3, [r7, #4]
   122f6:	60fb      	str	r3, [r7, #12]

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
   122f8:	4b17      	ldr	r3, [pc, #92]	; (12358 <hal_i2c_release+0x6c>)
   122fa:	681b      	ldr	r3, [r3, #0]
   122fc:	1e5a      	subs	r2, r3, #1
   122fe:	4b16      	ldr	r3, [pc, #88]	; (12358 <hal_i2c_release+0x6c>)
   12300:	601a      	str	r2, [r3, #0]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
   12302:	68fb      	ldr	r3, [r7, #12]
   12304:	2b00      	cmp	r3, #0
   12306:	d021      	beq.n	1234c <hal_i2c_release+0x60>
   12308:	68fb      	ldr	r3, [r7, #12]
   1230a:	68db      	ldr	r3, [r3, #12]
   1230c:	1e5a      	subs	r2, r3, #1
   1230e:	68fb      	ldr	r3, [r7, #12]
   12310:	60da      	str	r2, [r3, #12]
   12312:	68fb      	ldr	r3, [r7, #12]
   12314:	68db      	ldr	r3, [r3, #12]
   12316:	2b00      	cmp	r3, #0
   12318:	dc18      	bgt.n	1234c <hal_i2c_release+0x60>
   1231a:	68fb      	ldr	r3, [r7, #12]
   1231c:	691a      	ldr	r2, [r3, #16]
   1231e:	4b0f      	ldr	r3, [pc, #60]	; (1235c <hal_i2c_release+0x70>)
   12320:	0092      	lsls	r2, r2, #2
   12322:	58d3      	ldr	r3, [r2, r3]
   12324:	2b00      	cmp	r3, #0
   12326:	d011      	beq.n	1234c <hal_i2c_release+0x60>
    {
        i2c_master_reset(&(hal->i2c_master_instance));
   12328:	68fb      	ldr	r3, [r7, #12]
   1232a:	0018      	movs	r0, r3
   1232c:	4b0c      	ldr	r3, [pc, #48]	; (12360 <hal_i2c_release+0x74>)
   1232e:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
   12330:	68fb      	ldr	r3, [r7, #12]
   12332:	691a      	ldr	r2, [r3, #16]
   12334:	4b09      	ldr	r3, [pc, #36]	; (1235c <hal_i2c_release+0x70>)
   12336:	0092      	lsls	r2, r2, #2
   12338:	58d3      	ldr	r3, [r2, r3]
   1233a:	0018      	movs	r0, r3
   1233c:	4b09      	ldr	r3, [pc, #36]	; (12364 <hal_i2c_release+0x78>)
   1233e:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
   12340:	68fb      	ldr	r3, [r7, #12]
   12342:	691a      	ldr	r2, [r3, #16]
   12344:	4b05      	ldr	r3, [pc, #20]	; (1235c <hal_i2c_release+0x70>)
   12346:	0092      	lsls	r2, r2, #2
   12348:	2100      	movs	r1, #0
   1234a:	50d1      	str	r1, [r2, r3]
    }

    return ATCA_SUCCESS;
   1234c:	2300      	movs	r3, #0
}
   1234e:	0018      	movs	r0, r3
   12350:	46bd      	mov	sp, r7
   12352:	b004      	add	sp, #16
   12354:	bd80      	pop	{r7, pc}
   12356:	46c0      	nop			; (mov r8, r8)
   12358:	20000594 	.word	0x20000594
   1235c:	20002b84 	.word	0x20002b84
   12360:	00005cb9 	.word	0x00005cb9
   12364:	0001c179 	.word	0x0001c179

00012368 <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
   12368:	b580      	push	{r7, lr}
   1236a:	b082      	sub	sp, #8
   1236c:	af00      	add	r7, sp, #0
   1236e:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_us(delay);
   12370:	687b      	ldr	r3, [r7, #4]
   12372:	2b00      	cmp	r3, #0
   12374:	d004      	beq.n	12380 <atca_delay_us+0x18>
   12376:	687b      	ldr	r3, [r7, #4]
   12378:	0018      	movs	r0, r3
   1237a:	4b05      	ldr	r3, [pc, #20]	; (12390 <atca_delay_us+0x28>)
   1237c:	4798      	blx	r3
}
   1237e:	e002      	b.n	12386 <atca_delay_us+0x1e>
    delay_us(delay);
   12380:	2001      	movs	r0, #1
   12382:	4b03      	ldr	r3, [pc, #12]	; (12390 <atca_delay_us+0x28>)
   12384:	4798      	blx	r3
}
   12386:	46c0      	nop			; (mov r8, r8)
   12388:	46bd      	mov	sp, r7
   1238a:	b002      	add	sp, #8
   1238c:	bd80      	pop	{r7, pc}
   1238e:	46c0      	nop			; (mov r8, r8)
   12390:	00000509 	.word	0x00000509

00012394 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
   12394:	b580      	push	{r7, lr}
   12396:	b082      	sub	sp, #8
   12398:	af00      	add	r7, sp, #0
   1239a:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_ms(delay);
   1239c:	687b      	ldr	r3, [r7, #4]
   1239e:	2b00      	cmp	r3, #0
   123a0:	d004      	beq.n	123ac <atca_delay_ms+0x18>
   123a2:	687b      	ldr	r3, [r7, #4]
   123a4:	0018      	movs	r0, r3
   123a6:	4b05      	ldr	r3, [pc, #20]	; (123bc <atca_delay_ms+0x28>)
   123a8:	4798      	blx	r3
}
   123aa:	e002      	b.n	123b2 <atca_delay_ms+0x1e>
    delay_ms(delay);
   123ac:	2001      	movs	r0, #1
   123ae:	4b04      	ldr	r3, [pc, #16]	; (123c0 <atca_delay_ms+0x2c>)
   123b0:	4798      	blx	r3
}
   123b2:	46c0      	nop			; (mov r8, r8)
   123b4:	46bd      	mov	sp, r7
   123b6:	b002      	add	sp, #8
   123b8:	bd80      	pop	{r7, pc}
   123ba:	46c0      	nop			; (mov r8, r8)
   123bc:	00000539 	.word	0x00000539
   123c0:	00000509 	.word	0x00000509

000123c4 <atca_jwt_check_payload_start>:
 * order to append a claim
 */
void atca_jwt_check_payload_start(
    atca_jwt_t* jwt     /**< [in] JWT Context to use */
    )
{
   123c4:	b580      	push	{r7, lr}
   123c6:	b084      	sub	sp, #16
   123c8:	af00      	add	r7, sp, #0
   123ca:	6078      	str	r0, [r7, #4]
    /* Rationality checks: a) must be valid, b) buf must be valid, c) must not be at the start, d) must have room */
    if (jwt && jwt->buf && jwt->cur && (jwt->cur < jwt->buflen - 1))
   123cc:	687b      	ldr	r3, [r7, #4]
   123ce:	2b00      	cmp	r3, #0
   123d0:	d03a      	beq.n	12448 <atca_jwt_check_payload_start+0x84>
   123d2:	687b      	ldr	r3, [r7, #4]
   123d4:	681b      	ldr	r3, [r3, #0]
   123d6:	2b00      	cmp	r3, #0
   123d8:	d036      	beq.n	12448 <atca_jwt_check_payload_start+0x84>
   123da:	687b      	ldr	r3, [r7, #4]
   123dc:	88db      	ldrh	r3, [r3, #6]
   123de:	2b00      	cmp	r3, #0
   123e0:	d032      	beq.n	12448 <atca_jwt_check_payload_start+0x84>
   123e2:	687b      	ldr	r3, [r7, #4]
   123e4:	88db      	ldrh	r3, [r3, #6]
   123e6:	001a      	movs	r2, r3
   123e8:	687b      	ldr	r3, [r7, #4]
   123ea:	889b      	ldrh	r3, [r3, #4]
   123ec:	3b01      	subs	r3, #1
   123ee:	429a      	cmp	r2, r3
   123f0:	da2a      	bge.n	12448 <atca_jwt_check_payload_start+0x84>
    {
        /* Check the previous */
        char c = jwt->buf[jwt->cur - 1];
   123f2:	687b      	ldr	r3, [r7, #4]
   123f4:	681a      	ldr	r2, [r3, #0]
   123f6:	687b      	ldr	r3, [r7, #4]
   123f8:	88db      	ldrh	r3, [r3, #6]
   123fa:	3b01      	subs	r3, #1
   123fc:	18d2      	adds	r2, r2, r3
   123fe:	230f      	movs	r3, #15
   12400:	18fb      	adds	r3, r7, r3
   12402:	7812      	ldrb	r2, [r2, #0]
   12404:	701a      	strb	r2, [r3, #0]
        if ('.' == c)
   12406:	230f      	movs	r3, #15
   12408:	18fb      	adds	r3, r7, r3
   1240a:	781b      	ldrb	r3, [r3, #0]
   1240c:	2b2e      	cmp	r3, #46	; 0x2e
   1240e:	d10b      	bne.n	12428 <atca_jwt_check_payload_start+0x64>
        {
            jwt->buf[jwt->cur++] = '{';
   12410:	687b      	ldr	r3, [r7, #4]
   12412:	681a      	ldr	r2, [r3, #0]
   12414:	687b      	ldr	r3, [r7, #4]
   12416:	88db      	ldrh	r3, [r3, #6]
   12418:	1c59      	adds	r1, r3, #1
   1241a:	b288      	uxth	r0, r1
   1241c:	6879      	ldr	r1, [r7, #4]
   1241e:	80c8      	strh	r0, [r1, #6]
   12420:	18d3      	adds	r3, r2, r3
   12422:	227b      	movs	r2, #123	; 0x7b
   12424:	701a      	strb	r2, [r3, #0]
        else if ('{' != c)
        {
            jwt->buf[jwt->cur++] = ',';
        }
    }
}
   12426:	e00f      	b.n	12448 <atca_jwt_check_payload_start+0x84>
        else if ('{' != c)
   12428:	230f      	movs	r3, #15
   1242a:	18fb      	adds	r3, r7, r3
   1242c:	781b      	ldrb	r3, [r3, #0]
   1242e:	2b7b      	cmp	r3, #123	; 0x7b
   12430:	d00a      	beq.n	12448 <atca_jwt_check_payload_start+0x84>
            jwt->buf[jwt->cur++] = ',';
   12432:	687b      	ldr	r3, [r7, #4]
   12434:	681a      	ldr	r2, [r3, #0]
   12436:	687b      	ldr	r3, [r7, #4]
   12438:	88db      	ldrh	r3, [r3, #6]
   1243a:	1c59      	adds	r1, r3, #1
   1243c:	b288      	uxth	r0, r1
   1243e:	6879      	ldr	r1, [r7, #4]
   12440:	80c8      	strh	r0, [r1, #6]
   12442:	18d3      	adds	r3, r2, r3
   12444:	222c      	movs	r2, #44	; 0x2c
   12446:	701a      	strb	r2, [r3, #0]
}
   12448:	46c0      	nop			; (mov r8, r8)
   1244a:	46bd      	mov	sp, r7
   1244c:	b004      	add	sp, #16
   1244e:	bd80      	pop	{r7, pc}

00012450 <atca_jwt_init>:
ATCA_STATUS atca_jwt_init(
    atca_jwt_t* jwt,    /**< [in] JWT Context to initialize */
    char*       buf,    /**< [inout] Pointer to a buffer to store the token */
    uint16_t    buflen  /**< [in] Length of the buffer */
    )
{
   12450:	b5b0      	push	{r4, r5, r7, lr}
   12452:	b088      	sub	sp, #32
   12454:	af02      	add	r7, sp, #8
   12456:	60f8      	str	r0, [r7, #12]
   12458:	60b9      	str	r1, [r7, #8]
   1245a:	1dbb      	adds	r3, r7, #6
   1245c:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_BAD_PARAM;
   1245e:	2317      	movs	r3, #23
   12460:	18fb      	adds	r3, r7, r3
   12462:	22e2      	movs	r2, #226	; 0xe2
   12464:	701a      	strb	r2, [r3, #0]
    size_t tSize;

    if (jwt && buf && buflen)
   12466:	68fb      	ldr	r3, [r7, #12]
   12468:	2b00      	cmp	r3, #0
   1246a:	d047      	beq.n	124fc <atca_jwt_init+0xac>
   1246c:	68bb      	ldr	r3, [r7, #8]
   1246e:	2b00      	cmp	r3, #0
   12470:	d044      	beq.n	124fc <atca_jwt_init+0xac>
   12472:	1dbb      	adds	r3, r7, #6
   12474:	881b      	ldrh	r3, [r3, #0]
   12476:	2b00      	cmp	r3, #0
   12478:	d040      	beq.n	124fc <atca_jwt_init+0xac>
    {
        jwt->buf = buf;
   1247a:	68fb      	ldr	r3, [r7, #12]
   1247c:	68ba      	ldr	r2, [r7, #8]
   1247e:	601a      	str	r2, [r3, #0]
        jwt->buflen = buflen;
   12480:	68fb      	ldr	r3, [r7, #12]
   12482:	1dba      	adds	r2, r7, #6
   12484:	8812      	ldrh	r2, [r2, #0]
   12486:	809a      	strh	r2, [r3, #4]
        jwt->cur = 0;
   12488:	68fb      	ldr	r3, [r7, #12]
   1248a:	2200      	movs	r2, #0
   1248c:	80da      	strh	r2, [r3, #6]

        /* Encode the header into the buffer */
        tSize = jwt->buflen;
   1248e:	68fb      	ldr	r3, [r7, #12]
   12490:	889b      	ldrh	r3, [r3, #4]
   12492:	613b      	str	r3, [r7, #16]
        ret = atcab_base64encode_((const uint8_t*)g_jwt_header, strlen(g_jwt_header), jwt->buf,
   12494:	68fb      	ldr	r3, [r7, #12]
   12496:	681a      	ldr	r2, [r3, #0]
   12498:	2317      	movs	r3, #23
   1249a:	18fc      	adds	r4, r7, r3
   1249c:	2310      	movs	r3, #16
   1249e:	18f9      	adds	r1, r7, r3
   124a0:	481a      	ldr	r0, [pc, #104]	; (1250c <atca_jwt_init+0xbc>)
   124a2:	4b1b      	ldr	r3, [pc, #108]	; (12510 <atca_jwt_init+0xc0>)
   124a4:	9300      	str	r3, [sp, #0]
   124a6:	000b      	movs	r3, r1
   124a8:	211b      	movs	r1, #27
   124aa:	4d1a      	ldr	r5, [pc, #104]	; (12514 <atca_jwt_init+0xc4>)
   124ac:	47a8      	blx	r5
   124ae:	0003      	movs	r3, r0
   124b0:	7023      	strb	r3, [r4, #0]
                                  &tSize, atcab_b64rules_urlsafe);
        if (ATCA_SUCCESS == ret)
   124b2:	2317      	movs	r3, #23
   124b4:	18fb      	adds	r3, r7, r3
   124b6:	781b      	ldrb	r3, [r3, #0]
   124b8:	2b00      	cmp	r3, #0
   124ba:	d11f      	bne.n	124fc <atca_jwt_init+0xac>
        {
            jwt->cur += (uint16_t)tSize;
   124bc:	68fb      	ldr	r3, [r7, #12]
   124be:	88da      	ldrh	r2, [r3, #6]
   124c0:	693b      	ldr	r3, [r7, #16]
   124c2:	b29b      	uxth	r3, r3
   124c4:	18d3      	adds	r3, r2, r3
   124c6:	b29a      	uxth	r2, r3
   124c8:	68fb      	ldr	r3, [r7, #12]
   124ca:	80da      	strh	r2, [r3, #6]

            /* Check length */
            if (jwt->cur < jwt->buflen - 1)
   124cc:	68fb      	ldr	r3, [r7, #12]
   124ce:	88db      	ldrh	r3, [r3, #6]
   124d0:	001a      	movs	r2, r3
   124d2:	68fb      	ldr	r3, [r7, #12]
   124d4:	889b      	ldrh	r3, [r3, #4]
   124d6:	3b01      	subs	r3, #1
   124d8:	429a      	cmp	r2, r3
   124da:	da0b      	bge.n	124f4 <atca_jwt_init+0xa4>
            {
                /* Add the separator */
                jwt->buf[jwt->cur++] = '.';
   124dc:	68fb      	ldr	r3, [r7, #12]
   124de:	681a      	ldr	r2, [r3, #0]
   124e0:	68fb      	ldr	r3, [r7, #12]
   124e2:	88db      	ldrh	r3, [r3, #6]
   124e4:	1c59      	adds	r1, r3, #1
   124e6:	b288      	uxth	r0, r1
   124e8:	68f9      	ldr	r1, [r7, #12]
   124ea:	80c8      	strh	r0, [r1, #6]
   124ec:	18d3      	adds	r3, r2, r3
   124ee:	222e      	movs	r2, #46	; 0x2e
   124f0:	701a      	strb	r2, [r3, #0]
   124f2:	e003      	b.n	124fc <atca_jwt_init+0xac>
            }
            else
            {
                ret = ATCA_INVALID_SIZE;
   124f4:	2317      	movs	r3, #23
   124f6:	18fb      	adds	r3, r7, r3
   124f8:	22e4      	movs	r2, #228	; 0xe4
   124fa:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return ret;
   124fc:	2317      	movs	r3, #23
   124fe:	18fb      	adds	r3, r7, r3
   12500:	781b      	ldrb	r3, [r3, #0]
}
   12502:	0018      	movs	r0, r3
   12504:	46bd      	mov	sp, r7
   12506:	b006      	add	sp, #24
   12508:	bdb0      	pop	{r4, r5, r7, pc}
   1250a:	46c0      	nop			; (mov r8, r8)
   1250c:	00020fc0 	.word	0x00020fc0
   12510:	20000154 	.word	0x20000154
   12514:	000103b9 	.word	0x000103b9

00012518 <atca_jwt_finalize>:
 */
ATCA_STATUS atca_jwt_finalize(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    uint16_t    key_id  /**< [in] Key Id (Slot number) used to sign */
    )
{
   12518:	b5b0      	push	{r4, r5, r7, lr}
   1251a:	b088      	sub	sp, #32
   1251c:	af02      	add	r7, sp, #8
   1251e:	6078      	str	r0, [r7, #4]
   12520:	000a      	movs	r2, r1
   12522:	1cbb      	adds	r3, r7, #2
   12524:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status;
    uint16_t i;
    size_t rem;
    size_t tSize;

    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
   12526:	687b      	ldr	r3, [r7, #4]
   12528:	2b00      	cmp	r3, #0
   1252a:	d00b      	beq.n	12544 <atca_jwt_finalize+0x2c>
   1252c:	687b      	ldr	r3, [r7, #4]
   1252e:	681b      	ldr	r3, [r3, #0]
   12530:	2b00      	cmp	r3, #0
   12532:	d007      	beq.n	12544 <atca_jwt_finalize+0x2c>
   12534:	687b      	ldr	r3, [r7, #4]
   12536:	889b      	ldrh	r3, [r3, #4]
   12538:	2b00      	cmp	r3, #0
   1253a:	d003      	beq.n	12544 <atca_jwt_finalize+0x2c>
   1253c:	687b      	ldr	r3, [r7, #4]
   1253e:	88db      	ldrh	r3, [r3, #6]
   12540:	2b00      	cmp	r3, #0
   12542:	d101      	bne.n	12548 <atca_jwt_finalize+0x30>
    {
        return ATCA_BAD_PARAM;
   12544:	23e2      	movs	r3, #226	; 0xe2
   12546:	e124      	b.n	12792 <atca_jwt_finalize+0x27a>
    }

    /* Verify the payload is closed */
    if ('}' != jwt->buf[jwt->cur - 1])
   12548:	687b      	ldr	r3, [r7, #4]
   1254a:	681a      	ldr	r2, [r3, #0]
   1254c:	687b      	ldr	r3, [r7, #4]
   1254e:	88db      	ldrh	r3, [r3, #6]
   12550:	3b01      	subs	r3, #1
   12552:	18d3      	adds	r3, r2, r3
   12554:	781b      	ldrb	r3, [r3, #0]
   12556:	2b7d      	cmp	r3, #125	; 0x7d
   12558:	d00a      	beq.n	12570 <atca_jwt_finalize+0x58>
    {
        jwt->buf[jwt->cur++] = '}';
   1255a:	687b      	ldr	r3, [r7, #4]
   1255c:	681a      	ldr	r2, [r3, #0]
   1255e:	687b      	ldr	r3, [r7, #4]
   12560:	88db      	ldrh	r3, [r3, #6]
   12562:	1c59      	adds	r1, r3, #1
   12564:	b288      	uxth	r0, r1
   12566:	6879      	ldr	r1, [r7, #4]
   12568:	80c8      	strh	r0, [r1, #6]
   1256a:	18d3      	adds	r3, r2, r3
   1256c:	227d      	movs	r2, #125	; 0x7d
   1256e:	701a      	strb	r2, [r3, #0]
    }

    /* Find the start of the "claims" portion of the token - header should
       already be encoded */
    for (i = 0; i < jwt->cur; i++)
   12570:	2316      	movs	r3, #22
   12572:	18fb      	adds	r3, r7, r3
   12574:	2200      	movs	r2, #0
   12576:	801a      	strh	r2, [r3, #0]
   12578:	e017      	b.n	125aa <atca_jwt_finalize+0x92>
    {
        if ('.' == jwt->buf[i])
   1257a:	687b      	ldr	r3, [r7, #4]
   1257c:	681a      	ldr	r2, [r3, #0]
   1257e:	2316      	movs	r3, #22
   12580:	18fb      	adds	r3, r7, r3
   12582:	881b      	ldrh	r3, [r3, #0]
   12584:	18d3      	adds	r3, r2, r3
   12586:	781b      	ldrb	r3, [r3, #0]
   12588:	2b2e      	cmp	r3, #46	; 0x2e
   1258a:	d107      	bne.n	1259c <atca_jwt_finalize+0x84>
        {
            i++;
   1258c:	2316      	movs	r3, #22
   1258e:	18fb      	adds	r3, r7, r3
   12590:	881a      	ldrh	r2, [r3, #0]
   12592:	2316      	movs	r3, #22
   12594:	18fb      	adds	r3, r7, r3
   12596:	3201      	adds	r2, #1
   12598:	801a      	strh	r2, [r3, #0]
            break;
   1259a:	e00d      	b.n	125b8 <atca_jwt_finalize+0xa0>
    for (i = 0; i < jwt->cur; i++)
   1259c:	2316      	movs	r3, #22
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	881a      	ldrh	r2, [r3, #0]
   125a2:	2316      	movs	r3, #22
   125a4:	18fb      	adds	r3, r7, r3
   125a6:	3201      	adds	r2, #1
   125a8:	801a      	strh	r2, [r3, #0]
   125aa:	687b      	ldr	r3, [r7, #4]
   125ac:	88db      	ldrh	r3, [r3, #6]
   125ae:	2216      	movs	r2, #22
   125b0:	18ba      	adds	r2, r7, r2
   125b2:	8812      	ldrh	r2, [r2, #0]
   125b4:	429a      	cmp	r2, r3
   125b6:	d3e0      	bcc.n	1257a <atca_jwt_finalize+0x62>
        }
    }

    /* Make sure there is enough remaining buffer given base64 4/3 expansion */
    rem = (jwt->cur - i + ATCA_SIG_SIZE) * 4;
   125b8:	687b      	ldr	r3, [r7, #4]
   125ba:	88db      	ldrh	r3, [r3, #6]
   125bc:	001a      	movs	r2, r3
   125be:	2316      	movs	r3, #22
   125c0:	18fb      	adds	r3, r7, r3
   125c2:	881b      	ldrh	r3, [r3, #0]
   125c4:	1ad3      	subs	r3, r2, r3
   125c6:	3340      	adds	r3, #64	; 0x40
   125c8:	009b      	lsls	r3, r3, #2
   125ca:	613b      	str	r3, [r7, #16]
    rem /= 3;
   125cc:	693a      	ldr	r2, [r7, #16]
   125ce:	4b73      	ldr	r3, [pc, #460]	; (1279c <atca_jwt_finalize+0x284>)
   125d0:	2103      	movs	r1, #3
   125d2:	0010      	movs	r0, r2
   125d4:	4798      	blx	r3
   125d6:	0003      	movs	r3, r0
   125d8:	613b      	str	r3, [r7, #16]

    /* Increase Count to accomodate: 1 for the '.', 1 for the null terminator,
        and 1 for padding */
    rem += 3;
   125da:	693b      	ldr	r3, [r7, #16]
   125dc:	3303      	adds	r3, #3
   125de:	613b      	str	r3, [r7, #16]

    if (rem > (size_t)(jwt->buflen - jwt->cur))
   125e0:	687b      	ldr	r3, [r7, #4]
   125e2:	889b      	ldrh	r3, [r3, #4]
   125e4:	001a      	movs	r2, r3
   125e6:	687b      	ldr	r3, [r7, #4]
   125e8:	88db      	ldrh	r3, [r3, #6]
   125ea:	1ad3      	subs	r3, r2, r3
   125ec:	001a      	movs	r2, r3
   125ee:	693b      	ldr	r3, [r7, #16]
   125f0:	429a      	cmp	r2, r3
   125f2:	d201      	bcs.n	125f8 <atca_jwt_finalize+0xe0>
    {
        return ATCA_INVALID_SIZE;
   125f4:	23e4      	movs	r3, #228	; 0xe4
   125f6:	e0cc      	b.n	12792 <atca_jwt_finalize+0x27a>
    }

    /* Calculate the payload length */
    rem = jwt->cur - i;
   125f8:	687b      	ldr	r3, [r7, #4]
   125fa:	88db      	ldrh	r3, [r3, #6]
   125fc:	001a      	movs	r2, r3
   125fe:	2316      	movs	r3, #22
   12600:	18fb      	adds	r3, r7, r3
   12602:	881b      	ldrh	r3, [r3, #0]
   12604:	1ad3      	subs	r3, r2, r3
   12606:	613b      	str	r3, [r7, #16]
    /* Move the payload to make room for the encoding */
    memmove(jwt->buf + jwt->buflen - jwt->cur, &jwt->buf[i], rem);
   12608:	687b      	ldr	r3, [r7, #4]
   1260a:	681a      	ldr	r2, [r3, #0]
   1260c:	687b      	ldr	r3, [r7, #4]
   1260e:	889b      	ldrh	r3, [r3, #4]
   12610:	0019      	movs	r1, r3
   12612:	687b      	ldr	r3, [r7, #4]
   12614:	88db      	ldrh	r3, [r3, #6]
   12616:	1acb      	subs	r3, r1, r3
   12618:	18d0      	adds	r0, r2, r3
   1261a:	687b      	ldr	r3, [r7, #4]
   1261c:	681a      	ldr	r2, [r3, #0]
   1261e:	2316      	movs	r3, #22
   12620:	18fb      	adds	r3, r7, r3
   12622:	881b      	ldrh	r3, [r3, #0]
   12624:	18d3      	adds	r3, r2, r3
   12626:	693a      	ldr	r2, [r7, #16]
   12628:	0019      	movs	r1, r3
   1262a:	4b5d      	ldr	r3, [pc, #372]	; (127a0 <atca_jwt_finalize+0x288>)
   1262c:	4798      	blx	r3

    /* Encode the payload into the buffer */
    tSize = jwt->buflen;
   1262e:	687b      	ldr	r3, [r7, #4]
   12630:	889b      	ldrh	r3, [r3, #4]
   12632:	60bb      	str	r3, [r7, #8]
    status = atcab_base64encode_((uint8_t*)(jwt->buf + jwt->buflen - jwt->cur), rem,
   12634:	687b      	ldr	r3, [r7, #4]
   12636:	681a      	ldr	r2, [r3, #0]
   12638:	687b      	ldr	r3, [r7, #4]
   1263a:	889b      	ldrh	r3, [r3, #4]
   1263c:	0019      	movs	r1, r3
   1263e:	687b      	ldr	r3, [r7, #4]
   12640:	88db      	ldrh	r3, [r3, #6]
   12642:	1acb      	subs	r3, r1, r3
   12644:	18d0      	adds	r0, r2, r3
                                 &jwt->buf[i], &tSize, atcab_b64rules_urlsafe);
   12646:	687b      	ldr	r3, [r7, #4]
   12648:	681a      	ldr	r2, [r3, #0]
    status = atcab_base64encode_((uint8_t*)(jwt->buf + jwt->buflen - jwt->cur), rem,
   1264a:	2316      	movs	r3, #22
   1264c:	18fb      	adds	r3, r7, r3
   1264e:	881b      	ldrh	r3, [r3, #0]
   12650:	18d2      	adds	r2, r2, r3
   12652:	230f      	movs	r3, #15
   12654:	18fc      	adds	r4, r7, r3
   12656:	2308      	movs	r3, #8
   12658:	18fd      	adds	r5, r7, r3
   1265a:	6939      	ldr	r1, [r7, #16]
   1265c:	4b51      	ldr	r3, [pc, #324]	; (127a4 <atca_jwt_finalize+0x28c>)
   1265e:	9300      	str	r3, [sp, #0]
   12660:	002b      	movs	r3, r5
   12662:	4d51      	ldr	r5, [pc, #324]	; (127a8 <atca_jwt_finalize+0x290>)
   12664:	47a8      	blx	r5
   12666:	0003      	movs	r3, r0
   12668:	7023      	strb	r3, [r4, #0]
    if (ATCA_SUCCESS != status)
   1266a:	230f      	movs	r3, #15
   1266c:	18fb      	adds	r3, r7, r3
   1266e:	781b      	ldrb	r3, [r3, #0]
   12670:	2b00      	cmp	r3, #0
   12672:	d003      	beq.n	1267c <atca_jwt_finalize+0x164>
    {
        return status;
   12674:	230f      	movs	r3, #15
   12676:	18fb      	adds	r3, r7, r3
   12678:	781b      	ldrb	r3, [r3, #0]
   1267a:	e08a      	b.n	12792 <atca_jwt_finalize+0x27a>
    }

    jwt->cur = (uint16_t)(i + tSize);
   1267c:	68bb      	ldr	r3, [r7, #8]
   1267e:	b29a      	uxth	r2, r3
   12680:	2316      	movs	r3, #22
   12682:	18fb      	adds	r3, r7, r3
   12684:	881b      	ldrh	r3, [r3, #0]
   12686:	18d3      	adds	r3, r2, r3
   12688:	b29a      	uxth	r2, r3
   1268a:	687b      	ldr	r3, [r7, #4]
   1268c:	80da      	strh	r2, [r3, #6]

    /* Make sure there room to add the signature
        ECDSA(P256) -> 64 bytes -> base64 -> 86.3 (87) -> 88 including null */
    if (jwt->cur >= jwt->buflen - 88)
   1268e:	687b      	ldr	r3, [r7, #4]
   12690:	88db      	ldrh	r3, [r3, #6]
   12692:	001a      	movs	r2, r3
   12694:	687b      	ldr	r3, [r7, #4]
   12696:	889b      	ldrh	r3, [r3, #4]
   12698:	3b58      	subs	r3, #88	; 0x58
   1269a:	429a      	cmp	r2, r3
   1269c:	db01      	blt.n	126a2 <atca_jwt_finalize+0x18a>
    {
        /* Something broke */
        return ATCA_INVALID_SIZE;
   1269e:	23e4      	movs	r3, #228	; 0xe4
   126a0:	e077      	b.n	12792 <atca_jwt_finalize+0x27a>
    }

    /* Create digest of the message store and store in the buffer */
    status = atcac_sw_sha2_256((const uint8_t*)jwt->buf, jwt->cur, (uint8_t*)(jwt->buf + jwt->buflen - 32));
   126a2:	687b      	ldr	r3, [r7, #4]
   126a4:	6818      	ldr	r0, [r3, #0]
   126a6:	687b      	ldr	r3, [r7, #4]
   126a8:	88db      	ldrh	r3, [r3, #6]
   126aa:	0019      	movs	r1, r3
   126ac:	687b      	ldr	r3, [r7, #4]
   126ae:	681a      	ldr	r2, [r3, #0]
   126b0:	687b      	ldr	r3, [r7, #4]
   126b2:	889b      	ldrh	r3, [r3, #4]
   126b4:	3b20      	subs	r3, #32
   126b6:	18d3      	adds	r3, r2, r3
   126b8:	001a      	movs	r2, r3
   126ba:	4b3c      	ldr	r3, [pc, #240]	; (127ac <atca_jwt_finalize+0x294>)
   126bc:	4798      	blx	r3
   126be:	0002      	movs	r2, r0
   126c0:	230f      	movs	r3, #15
   126c2:	18fb      	adds	r3, r7, r3
   126c4:	701a      	strb	r2, [r3, #0]
    if (ATCA_SUCCESS != status)
   126c6:	230f      	movs	r3, #15
   126c8:	18fb      	adds	r3, r7, r3
   126ca:	781b      	ldrb	r3, [r3, #0]
   126cc:	2b00      	cmp	r3, #0
   126ce:	d003      	beq.n	126d8 <atca_jwt_finalize+0x1c0>
    {
        return status;
   126d0:	230f      	movs	r3, #15
   126d2:	18fb      	adds	r3, r7, r3
   126d4:	781b      	ldrb	r3, [r3, #0]
   126d6:	e05c      	b.n	12792 <atca_jwt_finalize+0x27a>
    }

    /* Create ECSDA signature of the digest and store it back in the buffer */
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
   126d8:	687b      	ldr	r3, [r7, #4]
   126da:	681a      	ldr	r2, [r3, #0]
   126dc:	687b      	ldr	r3, [r7, #4]
   126de:	889b      	ldrh	r3, [r3, #4]
   126e0:	3b20      	subs	r3, #32
   126e2:	18d1      	adds	r1, r2, r3
                        (uint8_t*)(jwt->buf + jwt->buflen - 64));
   126e4:	687b      	ldr	r3, [r7, #4]
   126e6:	681a      	ldr	r2, [r3, #0]
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	889b      	ldrh	r3, [r3, #4]
   126ec:	3b40      	subs	r3, #64	; 0x40
   126ee:	18d2      	adds	r2, r2, r3
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
   126f0:	230f      	movs	r3, #15
   126f2:	18fc      	adds	r4, r7, r3
   126f4:	1cbb      	adds	r3, r7, #2
   126f6:	881b      	ldrh	r3, [r3, #0]
   126f8:	0018      	movs	r0, r3
   126fa:	4b2d      	ldr	r3, [pc, #180]	; (127b0 <atca_jwt_finalize+0x298>)
   126fc:	4798      	blx	r3
   126fe:	0003      	movs	r3, r0
   12700:	7023      	strb	r3, [r4, #0]
    if (ATCA_SUCCESS != status)
   12702:	230f      	movs	r3, #15
   12704:	18fb      	adds	r3, r7, r3
   12706:	781b      	ldrb	r3, [r3, #0]
   12708:	2b00      	cmp	r3, #0
   1270a:	d003      	beq.n	12714 <atca_jwt_finalize+0x1fc>
    {
        return status;
   1270c:	230f      	movs	r3, #15
   1270e:	18fb      	adds	r3, r7, r3
   12710:	781b      	ldrb	r3, [r3, #0]
   12712:	e03e      	b.n	12792 <atca_jwt_finalize+0x27a>
    }

    /* Add the separator */
    jwt->buf[jwt->cur++] = '.';
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	681a      	ldr	r2, [r3, #0]
   12718:	687b      	ldr	r3, [r7, #4]
   1271a:	88db      	ldrh	r3, [r3, #6]
   1271c:	1c59      	adds	r1, r3, #1
   1271e:	b288      	uxth	r0, r1
   12720:	6879      	ldr	r1, [r7, #4]
   12722:	80c8      	strh	r0, [r1, #6]
   12724:	18d3      	adds	r3, r2, r3
   12726:	222e      	movs	r2, #46	; 0x2e
   12728:	701a      	strb	r2, [r3, #0]

    /* Encode the signature and store it in the buffer */
    tSize = jwt->buflen - jwt->cur;
   1272a:	687b      	ldr	r3, [r7, #4]
   1272c:	889b      	ldrh	r3, [r3, #4]
   1272e:	001a      	movs	r2, r3
   12730:	687b      	ldr	r3, [r7, #4]
   12732:	88db      	ldrh	r3, [r3, #6]
   12734:	1ad3      	subs	r3, r2, r3
   12736:	60bb      	str	r3, [r7, #8]
    atcab_base64encode_((const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SIG_SIZE), ATCA_SIG_SIZE,
   12738:	687b      	ldr	r3, [r7, #4]
   1273a:	681a      	ldr	r2, [r3, #0]
   1273c:	687b      	ldr	r3, [r7, #4]
   1273e:	889b      	ldrh	r3, [r3, #4]
   12740:	3b40      	subs	r3, #64	; 0x40
   12742:	18d0      	adds	r0, r2, r3
                        &jwt->buf[jwt->cur], &tSize, atcab_b64rules_urlsafe);
   12744:	687b      	ldr	r3, [r7, #4]
   12746:	681b      	ldr	r3, [r3, #0]
   12748:	687a      	ldr	r2, [r7, #4]
   1274a:	88d2      	ldrh	r2, [r2, #6]
    atcab_base64encode_((const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SIG_SIZE), ATCA_SIG_SIZE,
   1274c:	189a      	adds	r2, r3, r2
   1274e:	2308      	movs	r3, #8
   12750:	18f9      	adds	r1, r7, r3
   12752:	4b14      	ldr	r3, [pc, #80]	; (127a4 <atca_jwt_finalize+0x28c>)
   12754:	9300      	str	r3, [sp, #0]
   12756:	000b      	movs	r3, r1
   12758:	2140      	movs	r1, #64	; 0x40
   1275a:	4c13      	ldr	r4, [pc, #76]	; (127a8 <atca_jwt_finalize+0x290>)
   1275c:	47a0      	blx	r4
    jwt->cur += (uint16_t)tSize;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	88da      	ldrh	r2, [r3, #6]
   12762:	68bb      	ldr	r3, [r7, #8]
   12764:	b29b      	uxth	r3, r3
   12766:	18d3      	adds	r3, r2, r3
   12768:	b29a      	uxth	r2, r3
   1276a:	687b      	ldr	r3, [r7, #4]
   1276c:	80da      	strh	r2, [r3, #6]

    if (jwt->cur >= jwt->buflen)
   1276e:	687b      	ldr	r3, [r7, #4]
   12770:	88da      	ldrh	r2, [r3, #6]
   12772:	687b      	ldr	r3, [r7, #4]
   12774:	889b      	ldrh	r3, [r3, #4]
   12776:	429a      	cmp	r2, r3
   12778:	d301      	bcc.n	1277e <atca_jwt_finalize+0x266>
    {
        /* Something broke */
        return ATCA_INVALID_SIZE;
   1277a:	23e4      	movs	r3, #228	; 0xe4
   1277c:	e009      	b.n	12792 <atca_jwt_finalize+0x27a>
    }

    /* Make sure resulting buffer is null terminated */
    jwt->buf[jwt->cur] = 0;
   1277e:	687b      	ldr	r3, [r7, #4]
   12780:	681b      	ldr	r3, [r3, #0]
   12782:	687a      	ldr	r2, [r7, #4]
   12784:	88d2      	ldrh	r2, [r2, #6]
   12786:	189b      	adds	r3, r3, r2
   12788:	2200      	movs	r2, #0
   1278a:	701a      	strb	r2, [r3, #0]

    return status;
   1278c:	230f      	movs	r3, #15
   1278e:	18fb      	adds	r3, r7, r3
   12790:	781b      	ldrb	r3, [r3, #0]
}
   12792:	0018      	movs	r0, r3
   12794:	46bd      	mov	sp, r7
   12796:	b006      	add	sp, #24
   12798:	bdb0      	pop	{r4, r5, r7, pc}
   1279a:	46c0      	nop			; (mov r8, r8)
   1279c:	00019d81 	.word	0x00019d81
   127a0:	0001c1f7 	.word	0x0001c1f7
   127a4:	20000154 	.word	0x20000154
   127a8:	000103b9 	.word	0x000103b9
   127ac:	0001077d 	.word	0x0001077d
   127b0:	000119f5 	.word	0x000119f5

000127b4 <atca_jwt_add_claim_string>:
ATCA_STATUS atca_jwt_add_claim_string(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    const char* value   /**< [in] Null terminated string to be insterted */
    )
{
   127b4:	b590      	push	{r4, r7, lr}
   127b6:	b089      	sub	sp, #36	; 0x24
   127b8:	af02      	add	r7, sp, #8
   127ba:	60f8      	str	r0, [r7, #12]
   127bc:	60b9      	str	r1, [r7, #8]
   127be:	607a      	str	r2, [r7, #4]
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim && value)
   127c0:	68fb      	ldr	r3, [r7, #12]
   127c2:	2b00      	cmp	r3, #0
   127c4:	d03a      	beq.n	1283c <atca_jwt_add_claim_string+0x88>
   127c6:	68fb      	ldr	r3, [r7, #12]
   127c8:	681b      	ldr	r3, [r3, #0]
   127ca:	2b00      	cmp	r3, #0
   127cc:	d036      	beq.n	1283c <atca_jwt_add_claim_string+0x88>
   127ce:	68fb      	ldr	r3, [r7, #12]
   127d0:	889b      	ldrh	r3, [r3, #4]
   127d2:	2b00      	cmp	r3, #0
   127d4:	d032      	beq.n	1283c <atca_jwt_add_claim_string+0x88>
   127d6:	68bb      	ldr	r3, [r7, #8]
   127d8:	2b00      	cmp	r3, #0
   127da:	d02f      	beq.n	1283c <atca_jwt_add_claim_string+0x88>
   127dc:	687b      	ldr	r3, [r7, #4]
   127de:	2b00      	cmp	r3, #0
   127e0:	d02c      	beq.n	1283c <atca_jwt_add_claim_string+0x88>
    {
        atca_jwt_check_payload_start(jwt);
   127e2:	68fb      	ldr	r3, [r7, #12]
   127e4:	0018      	movs	r0, r3
   127e6:	4b18      	ldr	r3, [pc, #96]	; (12848 <atca_jwt_add_claim_string+0x94>)
   127e8:	4798      	blx	r3

        remaining = jwt->buflen - jwt->cur;
   127ea:	68fb      	ldr	r3, [r7, #12]
   127ec:	889b      	ldrh	r3, [r3, #4]
   127ee:	001a      	movs	r2, r3
   127f0:	68fb      	ldr	r3, [r7, #12]
   127f2:	88db      	ldrh	r3, [r3, #6]
   127f4:	1ad3      	subs	r3, r2, r3
   127f6:	617b      	str	r3, [r7, #20]
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":\"%s\"", claim, value);
   127f8:	68fb      	ldr	r3, [r7, #12]
   127fa:	681b      	ldr	r3, [r3, #0]
   127fc:	68fa      	ldr	r2, [r7, #12]
   127fe:	88d2      	ldrh	r2, [r2, #6]
   12800:	1898      	adds	r0, r3, r2
   12802:	6979      	ldr	r1, [r7, #20]
   12804:	68bc      	ldr	r4, [r7, #8]
   12806:	4a11      	ldr	r2, [pc, #68]	; (1284c <atca_jwt_add_claim_string+0x98>)
   12808:	687b      	ldr	r3, [r7, #4]
   1280a:	9300      	str	r3, [sp, #0]
   1280c:	0023      	movs	r3, r4
   1280e:	4c10      	ldr	r4, [pc, #64]	; (12850 <atca_jwt_add_claim_string+0x9c>)
   12810:	47a0      	blx	r4
   12812:	0003      	movs	r3, r0
   12814:	613b      	str	r3, [r7, #16]
        if (0 < written && written < remaining)
   12816:	693b      	ldr	r3, [r7, #16]
   12818:	2b00      	cmp	r3, #0
   1281a:	dd0d      	ble.n	12838 <atca_jwt_add_claim_string+0x84>
   1281c:	693a      	ldr	r2, [r7, #16]
   1281e:	697b      	ldr	r3, [r7, #20]
   12820:	429a      	cmp	r2, r3
   12822:	da09      	bge.n	12838 <atca_jwt_add_claim_string+0x84>
        {
            jwt->cur += written;
   12824:	68fb      	ldr	r3, [r7, #12]
   12826:	88da      	ldrh	r2, [r3, #6]
   12828:	693b      	ldr	r3, [r7, #16]
   1282a:	b29b      	uxth	r3, r3
   1282c:	18d3      	adds	r3, r2, r3
   1282e:	b29a      	uxth	r2, r3
   12830:	68fb      	ldr	r3, [r7, #12]
   12832:	80da      	strh	r2, [r3, #6]
            return ATCA_SUCCESS;
   12834:	2300      	movs	r3, #0
   12836:	e002      	b.n	1283e <atca_jwt_add_claim_string+0x8a>
        }
        else
        {
            return ATCA_GEN_FAIL;
   12838:	23e1      	movs	r3, #225	; 0xe1
   1283a:	e000      	b.n	1283e <atca_jwt_add_claim_string+0x8a>
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
   1283c:	23e2      	movs	r3, #226	; 0xe2
    }
}
   1283e:	0018      	movs	r0, r3
   12840:	46bd      	mov	sp, r7
   12842:	b007      	add	sp, #28
   12844:	bd90      	pop	{r4, r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000123c5 	.word	0x000123c5
   1284c:	00020fdc 	.word	0x00020fdc
   12850:	0001c63d 	.word	0x0001c63d

00012854 <atca_jwt_add_claim_numeric>:
ATCA_STATUS atca_jwt_add_claim_numeric(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    int32_t     value   /**< [in] integer value to be inserted */
    )
{
   12854:	b590      	push	{r4, r7, lr}
   12856:	b089      	sub	sp, #36	; 0x24
   12858:	af02      	add	r7, sp, #8
   1285a:	60f8      	str	r0, [r7, #12]
   1285c:	60b9      	str	r1, [r7, #8]
   1285e:	607a      	str	r2, [r7, #4]
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim)
   12860:	68fb      	ldr	r3, [r7, #12]
   12862:	2b00      	cmp	r3, #0
   12864:	d037      	beq.n	128d6 <atca_jwt_add_claim_numeric+0x82>
   12866:	68fb      	ldr	r3, [r7, #12]
   12868:	681b      	ldr	r3, [r3, #0]
   1286a:	2b00      	cmp	r3, #0
   1286c:	d033      	beq.n	128d6 <atca_jwt_add_claim_numeric+0x82>
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	889b      	ldrh	r3, [r3, #4]
   12872:	2b00      	cmp	r3, #0
   12874:	d02f      	beq.n	128d6 <atca_jwt_add_claim_numeric+0x82>
   12876:	68bb      	ldr	r3, [r7, #8]
   12878:	2b00      	cmp	r3, #0
   1287a:	d02c      	beq.n	128d6 <atca_jwt_add_claim_numeric+0x82>
    {
        atca_jwt_check_payload_start(jwt);
   1287c:	68fb      	ldr	r3, [r7, #12]
   1287e:	0018      	movs	r0, r3
   12880:	4b17      	ldr	r3, [pc, #92]	; (128e0 <atca_jwt_add_claim_numeric+0x8c>)
   12882:	4798      	blx	r3

        remaining = jwt->buflen - jwt->cur;
   12884:	68fb      	ldr	r3, [r7, #12]
   12886:	889b      	ldrh	r3, [r3, #4]
   12888:	001a      	movs	r2, r3
   1288a:	68fb      	ldr	r3, [r7, #12]
   1288c:	88db      	ldrh	r3, [r3, #6]
   1288e:	1ad3      	subs	r3, r2, r3
   12890:	617b      	str	r3, [r7, #20]
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":%d", claim, value);
   12892:	68fb      	ldr	r3, [r7, #12]
   12894:	681b      	ldr	r3, [r3, #0]
   12896:	68fa      	ldr	r2, [r7, #12]
   12898:	88d2      	ldrh	r2, [r2, #6]
   1289a:	1898      	adds	r0, r3, r2
   1289c:	6979      	ldr	r1, [r7, #20]
   1289e:	68bc      	ldr	r4, [r7, #8]
   128a0:	4a10      	ldr	r2, [pc, #64]	; (128e4 <atca_jwt_add_claim_numeric+0x90>)
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	9300      	str	r3, [sp, #0]
   128a6:	0023      	movs	r3, r4
   128a8:	4c0f      	ldr	r4, [pc, #60]	; (128e8 <atca_jwt_add_claim_numeric+0x94>)
   128aa:	47a0      	blx	r4
   128ac:	0003      	movs	r3, r0
   128ae:	613b      	str	r3, [r7, #16]
        if (0 < written && written < remaining)
   128b0:	693b      	ldr	r3, [r7, #16]
   128b2:	2b00      	cmp	r3, #0
   128b4:	dd0d      	ble.n	128d2 <atca_jwt_add_claim_numeric+0x7e>
   128b6:	693a      	ldr	r2, [r7, #16]
   128b8:	697b      	ldr	r3, [r7, #20]
   128ba:	429a      	cmp	r2, r3
   128bc:	da09      	bge.n	128d2 <atca_jwt_add_claim_numeric+0x7e>
        {
            jwt->cur += written;
   128be:	68fb      	ldr	r3, [r7, #12]
   128c0:	88da      	ldrh	r2, [r3, #6]
   128c2:	693b      	ldr	r3, [r7, #16]
   128c4:	b29b      	uxth	r3, r3
   128c6:	18d3      	adds	r3, r2, r3
   128c8:	b29a      	uxth	r2, r3
   128ca:	68fb      	ldr	r3, [r7, #12]
   128cc:	80da      	strh	r2, [r3, #6]
            return 0;
   128ce:	2300      	movs	r3, #0
   128d0:	e002      	b.n	128d8 <atca_jwt_add_claim_numeric+0x84>
        }
        else
        {
            return ATCA_GEN_FAIL;
   128d2:	23e1      	movs	r3, #225	; 0xe1
   128d4:	e000      	b.n	128d8 <atca_jwt_add_claim_numeric+0x84>
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
   128d6:	23e2      	movs	r3, #226	; 0xe2
    }
}
   128d8:	0018      	movs	r0, r3
   128da:	46bd      	mov	sp, r7
   128dc:	b007      	add	sp, #28
   128de:	bd90      	pop	{r4, r7, pc}
   128e0:	000123c5 	.word	0x000123c5
   128e4:	00020fe8 	.word	0x00020fe8
   128e8:	0001c63d 	.word	0x0001c63d

000128ec <NewMessageData>:
#pragma GCC diagnostic ignored "-Wshadow"
#pragma GCC diagnostic ignored "-Wcast-align"

#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   128ec:	b580      	push	{r7, lr}
   128ee:	b084      	sub	sp, #16
   128f0:	af00      	add	r7, sp, #0
   128f2:	60f8      	str	r0, [r7, #12]
   128f4:	60b9      	str	r1, [r7, #8]
   128f6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   128f8:	68fb      	ldr	r3, [r7, #12]
   128fa:	68ba      	ldr	r2, [r7, #8]
   128fc:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   128fe:	68fb      	ldr	r3, [r7, #12]
   12900:	687a      	ldr	r2, [r7, #4]
   12902:	601a      	str	r2, [r3, #0]
}
   12904:	46c0      	nop			; (mov r8, r8)
   12906:	46bd      	mov	sp, r7
   12908:	b004      	add	sp, #16
   1290a:	bd80      	pop	{r7, pc}

0001290c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   1290c:	b580      	push	{r7, lr}
   1290e:	b082      	sub	sp, #8
   12910:	af00      	add	r7, sp, #0
   12912:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   12914:	687b      	ldr	r3, [r7, #4]
   12916:	681b      	ldr	r3, [r3, #0]
   12918:	4a07      	ldr	r2, [pc, #28]	; (12938 <getNextPacketId+0x2c>)
   1291a:	4293      	cmp	r3, r2
   1291c:	d003      	beq.n	12926 <getNextPacketId+0x1a>
   1291e:	687b      	ldr	r3, [r7, #4]
   12920:	681b      	ldr	r3, [r3, #0]
   12922:	1c5a      	adds	r2, r3, #1
   12924:	e000      	b.n	12928 <getNextPacketId+0x1c>
   12926:	2201      	movs	r2, #1
   12928:	687b      	ldr	r3, [r7, #4]
   1292a:	601a      	str	r2, [r3, #0]
   1292c:	687b      	ldr	r3, [r7, #4]
   1292e:	681b      	ldr	r3, [r3, #0]
}
   12930:	0018      	movs	r0, r3
   12932:	46bd      	mov	sp, r7
   12934:	b002      	add	sp, #8
   12936:	bd80      	pop	{r7, pc}
   12938:	0000ffff 	.word	0x0000ffff

0001293c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1293c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1293e:	b087      	sub	sp, #28
   12940:	af00      	add	r7, sp, #0
   12942:	60f8      	str	r0, [r7, #12]
   12944:	60b9      	str	r1, [r7, #8]
   12946:	607a      	str	r2, [r7, #4]
    int rc = MQTTCLIENT_FAILURE, 
   12948:	2301      	movs	r3, #1
   1294a:	425b      	negs	r3, r3
   1294c:	617b      	str	r3, [r7, #20]
        sent = 0;
   1294e:	2300      	movs	r3, #0
   12950:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   12952:	e01a      	b.n	1298a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   12954:	68fb      	ldr	r3, [r7, #12]
   12956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   12958:	685c      	ldr	r4, [r3, #4]
   1295a:	68fb      	ldr	r3, [r7, #12]
   1295c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1295e:	68fb      	ldr	r3, [r7, #12]
   12960:	691a      	ldr	r2, [r3, #16]
   12962:	693b      	ldr	r3, [r7, #16]
   12964:	18d6      	adds	r6, r2, r3
   12966:	687b      	ldr	r3, [r7, #4]
   12968:	0018      	movs	r0, r3
   1296a:	4b1a      	ldr	r3, [pc, #104]	; (129d4 <sendPacket+0x98>)
   1296c:	4798      	blx	r3
   1296e:	0003      	movs	r3, r0
   12970:	68ba      	ldr	r2, [r7, #8]
   12972:	0031      	movs	r1, r6
   12974:	0028      	movs	r0, r5
   12976:	47a0      	blx	r4
   12978:	0003      	movs	r3, r0
   1297a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   1297c:	697b      	ldr	r3, [r7, #20]
   1297e:	2b00      	cmp	r3, #0
   12980:	db0e      	blt.n	129a0 <sendPacket+0x64>
            break;
        sent += rc;
   12982:	693a      	ldr	r2, [r7, #16]
   12984:	697b      	ldr	r3, [r7, #20]
   12986:	18d3      	adds	r3, r2, r3
   12988:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1298a:	693a      	ldr	r2, [r7, #16]
   1298c:	68bb      	ldr	r3, [r7, #8]
   1298e:	429a      	cmp	r2, r3
   12990:	da07      	bge.n	129a2 <sendPacket+0x66>
   12992:	687b      	ldr	r3, [r7, #4]
   12994:	0018      	movs	r0, r3
   12996:	4b10      	ldr	r3, [pc, #64]	; (129d8 <sendPacket+0x9c>)
   12998:	4798      	blx	r3
   1299a:	1e03      	subs	r3, r0, #0
   1299c:	d0da      	beq.n	12954 <sendPacket+0x18>
   1299e:	e000      	b.n	129a2 <sendPacket+0x66>
            break;
   129a0:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   129a2:	693a      	ldr	r2, [r7, #16]
   129a4:	68bb      	ldr	r3, [r7, #8]
   129a6:	429a      	cmp	r2, r3
   129a8:	d10b      	bne.n	129c2 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   129aa:	68fb      	ldr	r3, [r7, #12]
   129ac:	3354      	adds	r3, #84	; 0x54
   129ae:	001a      	movs	r2, r3
   129b0:	68fb      	ldr	r3, [r7, #12]
   129b2:	699b      	ldr	r3, [r3, #24]
   129b4:	0019      	movs	r1, r3
   129b6:	0010      	movs	r0, r2
   129b8:	4b08      	ldr	r3, [pc, #32]	; (129dc <sendPacket+0xa0>)
   129ba:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
   129bc:	2300      	movs	r3, #0
   129be:	617b      	str	r3, [r7, #20]
   129c0:	e002      	b.n	129c8 <sendPacket+0x8c>
    }
    else
        rc = MQTTCLIENT_FAILURE;
   129c2:	2301      	movs	r3, #1
   129c4:	425b      	negs	r3, r3
   129c6:	617b      	str	r3, [r7, #20]
    return rc;
   129c8:	697b      	ldr	r3, [r7, #20]
}
   129ca:	0018      	movs	r0, r3
   129cc:	46bd      	mov	sp, r7
   129ce:	b007      	add	sp, #28
   129d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129d2:	46c0      	nop			; (mov r8, r8)
   129d4:	0001486d 	.word	0x0001486d
   129d8:	0001469d 	.word	0x0001469d
   129dc:	000147e9 	.word	0x000147e9

000129e0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   129e0:	b580      	push	{r7, lr}
   129e2:	b086      	sub	sp, #24
   129e4:	af00      	add	r7, sp, #0
   129e6:	60f8      	str	r0, [r7, #12]
   129e8:	60b9      	str	r1, [r7, #8]
   129ea:	607a      	str	r2, [r7, #4]
   129ec:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   129ee:	68fb      	ldr	r3, [r7, #12]
   129f0:	68ba      	ldr	r2, [r7, #8]
   129f2:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   129f4:	2300      	movs	r3, #0
   129f6:	617b      	str	r3, [r7, #20]
   129f8:	e00a      	b.n	12a10 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   129fa:	68fa      	ldr	r2, [r7, #12]
   129fc:	697b      	ldr	r3, [r7, #20]
   129fe:	3304      	adds	r3, #4
   12a00:	00db      	lsls	r3, r3, #3
   12a02:	18d3      	adds	r3, r2, r3
   12a04:	3304      	adds	r3, #4
   12a06:	2200      	movs	r2, #0
   12a08:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12a0a:	697b      	ldr	r3, [r7, #20]
   12a0c:	3301      	adds	r3, #1
   12a0e:	617b      	str	r3, [r7, #20]
   12a10:	697b      	ldr	r3, [r7, #20]
   12a12:	2b04      	cmp	r3, #4
   12a14:	ddf1      	ble.n	129fa <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   12a16:	68fb      	ldr	r3, [r7, #12]
   12a18:	687a      	ldr	r2, [r7, #4]
   12a1a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   12a1c:	68fb      	ldr	r3, [r7, #12]
   12a1e:	683a      	ldr	r2, [r7, #0]
   12a20:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   12a22:	68fb      	ldr	r3, [r7, #12]
   12a24:	6a3a      	ldr	r2, [r7, #32]
   12a26:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   12a28:	68fb      	ldr	r3, [r7, #12]
   12a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12a2c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   12a2e:	68fb      	ldr	r3, [r7, #12]
   12a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12a32:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   12a34:	68fb      	ldr	r3, [r7, #12]
   12a36:	2200      	movs	r2, #0
   12a38:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   12a3a:	68fb      	ldr	r3, [r7, #12]
   12a3c:	2200      	movs	r2, #0
   12a3e:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   12a40:	68fb      	ldr	r3, [r7, #12]
   12a42:	2200      	movs	r2, #0
   12a44:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   12a46:	68fb      	ldr	r3, [r7, #12]
   12a48:	2201      	movs	r2, #1
   12a4a:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   12a4c:	68fb      	ldr	r3, [r7, #12]
   12a4e:	3354      	adds	r3, #84	; 0x54
   12a50:	0018      	movs	r0, r3
   12a52:	4b03      	ldr	r3, [pc, #12]	; (12a60 <MQTTClientInit+0x80>)
   12a54:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   12a56:	46c0      	nop			; (mov r8, r8)
   12a58:	46bd      	mov	sp, r7
   12a5a:	b006      	add	sp, #24
   12a5c:	bd80      	pop	{r7, pc}
   12a5e:	46c0      	nop			; (mov r8, r8)
   12a60:	00014679 	.word	0x00014679

00012a64 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   12a64:	b590      	push	{r4, r7, lr}
   12a66:	b08b      	sub	sp, #44	; 0x2c
   12a68:	af00      	add	r7, sp, #0
   12a6a:	60f8      	str	r0, [r7, #12]
   12a6c:	60b9      	str	r1, [r7, #8]
   12a6e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   12a70:	2301      	movs	r3, #1
   12a72:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   12a74:	2300      	movs	r3, #0
   12a76:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   12a78:	2304      	movs	r3, #4
   12a7a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   12a7c:	68bb      	ldr	r3, [r7, #8]
   12a7e:	2200      	movs	r2, #0
   12a80:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   12a82:	2301      	movs	r3, #1
   12a84:	425b      	negs	r3, r3
   12a86:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   12a88:	6a3b      	ldr	r3, [r7, #32]
   12a8a:	3301      	adds	r3, #1
   12a8c:	623b      	str	r3, [r7, #32]
   12a8e:	6a3a      	ldr	r2, [r7, #32]
   12a90:	69fb      	ldr	r3, [r7, #28]
   12a92:	429a      	cmp	r2, r3
   12a94:	dd03      	ble.n	12a9e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   12a96:	2301      	movs	r3, #1
   12a98:	425b      	negs	r3, r3
   12a9a:	61bb      	str	r3, [r7, #24]
            goto exit;
   12a9c:	e026      	b.n	12aec <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   12a9e:	68fb      	ldr	r3, [r7, #12]
   12aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   12aa2:	681c      	ldr	r4, [r3, #0]
   12aa4:	68fb      	ldr	r3, [r7, #12]
   12aa6:	6d18      	ldr	r0, [r3, #80]	; 0x50
   12aa8:	687b      	ldr	r3, [r7, #4]
   12aaa:	2217      	movs	r2, #23
   12aac:	18b9      	adds	r1, r7, r2
   12aae:	2201      	movs	r2, #1
   12ab0:	47a0      	blx	r4
   12ab2:	0003      	movs	r3, r0
   12ab4:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   12ab6:	69bb      	ldr	r3, [r7, #24]
   12ab8:	2b01      	cmp	r3, #1
   12aba:	d116      	bne.n	12aea <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   12abc:	68bb      	ldr	r3, [r7, #8]
   12abe:	681a      	ldr	r2, [r3, #0]
   12ac0:	2317      	movs	r3, #23
   12ac2:	18fb      	adds	r3, r7, r3
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	0019      	movs	r1, r3
   12ac8:	237f      	movs	r3, #127	; 0x7f
   12aca:	400b      	ands	r3, r1
   12acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12ace:	434b      	muls	r3, r1
   12ad0:	18d2      	adds	r2, r2, r3
   12ad2:	68bb      	ldr	r3, [r7, #8]
   12ad4:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   12ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ad8:	01db      	lsls	r3, r3, #7
   12ada:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   12adc:	2317      	movs	r3, #23
   12ade:	18fb      	adds	r3, r7, r3
   12ae0:	781b      	ldrb	r3, [r3, #0]
   12ae2:	b25b      	sxtb	r3, r3
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	dbcc      	blt.n	12a82 <decodePacket+0x1e>
   12ae8:	e000      	b.n	12aec <decodePacket+0x88>
            goto exit;
   12aea:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   12aec:	6a3b      	ldr	r3, [r7, #32]
}
   12aee:	0018      	movs	r0, r3
   12af0:	46bd      	mov	sp, r7
   12af2:	b00b      	add	sp, #44	; 0x2c
   12af4:	bd90      	pop	{r4, r7, pc}
	...

00012af8 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   12af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12afa:	46c6      	mov	lr, r8
   12afc:	b500      	push	{lr}
   12afe:	b086      	sub	sp, #24
   12b00:	af00      	add	r7, sp, #0
   12b02:	6078      	str	r0, [r7, #4]
   12b04:	6039      	str	r1, [r7, #0]
    int rc = MQTTCLIENT_FAILURE;
   12b06:	2301      	movs	r3, #1
   12b08:	425b      	negs	r3, r3
   12b0a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   12b0c:	2300      	movs	r3, #0
   12b0e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   12b10:	2300      	movs	r3, #0
   12b12:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   12b14:	2300      	movs	r3, #0
   12b16:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   12b18:	687b      	ldr	r3, [r7, #4]
   12b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   12b1c:	681c      	ldr	r4, [r3, #0]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   12b22:	687b      	ldr	r3, [r7, #4]
   12b24:	695e      	ldr	r6, [r3, #20]
   12b26:	683b      	ldr	r3, [r7, #0]
   12b28:	0018      	movs	r0, r3
   12b2a:	4b2b      	ldr	r3, [pc, #172]	; (12bd8 <readPacket+0xe0>)
   12b2c:	4798      	blx	r3
   12b2e:	0003      	movs	r3, r0
   12b30:	2201      	movs	r2, #1
   12b32:	0031      	movs	r1, r6
   12b34:	0028      	movs	r0, r5
   12b36:	47a0      	blx	r4
   12b38:	0003      	movs	r3, r0
   12b3a:	2b01      	cmp	r3, #1
   12b3c:	d141      	bne.n	12bc2 <readPacket+0xca>
        goto exit;

    len = 1;
   12b3e:	2301      	movs	r3, #1
   12b40:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   12b42:	683b      	ldr	r3, [r7, #0]
   12b44:	0018      	movs	r0, r3
   12b46:	4b24      	ldr	r3, [pc, #144]	; (12bd8 <readPacket+0xe0>)
   12b48:	4798      	blx	r3
   12b4a:	0002      	movs	r2, r0
   12b4c:	2308      	movs	r3, #8
   12b4e:	18f9      	adds	r1, r7, r3
   12b50:	687b      	ldr	r3, [r7, #4]
   12b52:	0018      	movs	r0, r3
   12b54:	4b21      	ldr	r3, [pc, #132]	; (12bdc <readPacket+0xe4>)
   12b56:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   12b58:	687b      	ldr	r3, [r7, #4]
   12b5a:	695b      	ldr	r3, [r3, #20]
   12b5c:	3301      	adds	r3, #1
   12b5e:	68ba      	ldr	r2, [r7, #8]
   12b60:	0011      	movs	r1, r2
   12b62:	0018      	movs	r0, r3
   12b64:	4b1e      	ldr	r3, [pc, #120]	; (12be0 <readPacket+0xe8>)
   12b66:	4798      	blx	r3
   12b68:	0002      	movs	r2, r0
   12b6a:	693b      	ldr	r3, [r7, #16]
   12b6c:	189b      	adds	r3, r3, r2
   12b6e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   12b70:	68bb      	ldr	r3, [r7, #8]
   12b72:	2b00      	cmp	r3, #0
   12b74:	dd17      	ble.n	12ba6 <readPacket+0xae>
   12b76:	687b      	ldr	r3, [r7, #4]
   12b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   12b7a:	681c      	ldr	r4, [r3, #0]
   12b7c:	687b      	ldr	r3, [r7, #4]
   12b7e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   12b80:	687b      	ldr	r3, [r7, #4]
   12b82:	695a      	ldr	r2, [r3, #20]
   12b84:	693b      	ldr	r3, [r7, #16]
   12b86:	18d6      	adds	r6, r2, r3
   12b88:	68bb      	ldr	r3, [r7, #8]
   12b8a:	4698      	mov	r8, r3
   12b8c:	683b      	ldr	r3, [r7, #0]
   12b8e:	0018      	movs	r0, r3
   12b90:	4b11      	ldr	r3, [pc, #68]	; (12bd8 <readPacket+0xe0>)
   12b92:	4798      	blx	r3
   12b94:	0003      	movs	r3, r0
   12b96:	4642      	mov	r2, r8
   12b98:	0031      	movs	r1, r6
   12b9a:	0028      	movs	r0, r5
   12b9c:	47a0      	blx	r4
   12b9e:	0002      	movs	r2, r0
   12ba0:	68bb      	ldr	r3, [r7, #8]
   12ba2:	429a      	cmp	r2, r3
   12ba4:	d10f      	bne.n	12bc6 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   12ba6:	687b      	ldr	r3, [r7, #4]
   12ba8:	695b      	ldr	r3, [r3, #20]
   12baa:	781a      	ldrb	r2, [r3, #0]
   12bac:	230c      	movs	r3, #12
   12bae:	18fb      	adds	r3, r7, r3
   12bb0:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   12bb2:	230c      	movs	r3, #12
   12bb4:	18fb      	adds	r3, r7, r3
   12bb6:	781b      	ldrb	r3, [r3, #0]
   12bb8:	061b      	lsls	r3, r3, #24
   12bba:	0f1b      	lsrs	r3, r3, #28
   12bbc:	b2db      	uxtb	r3, r3
   12bbe:	617b      	str	r3, [r7, #20]
   12bc0:	e002      	b.n	12bc8 <readPacket+0xd0>
        goto exit;
   12bc2:	46c0      	nop			; (mov r8, r8)
   12bc4:	e000      	b.n	12bc8 <readPacket+0xd0>
        goto exit;
   12bc6:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   12bc8:	697b      	ldr	r3, [r7, #20]
}
   12bca:	0018      	movs	r0, r3
   12bcc:	46bd      	mov	sp, r7
   12bce:	b006      	add	sp, #24
   12bd0:	bc04      	pop	{r2}
   12bd2:	4690      	mov	r8, r2
   12bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bd6:	46c0      	nop			; (mov r8, r8)
   12bd8:	0001486d 	.word	0x0001486d
   12bdc:	00012a65 	.word	0x00012a65
   12be0:	00013bf5 	.word	0x00013bf5

00012be4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   12be4:	b580      	push	{r7, lr}
   12be6:	b086      	sub	sp, #24
   12be8:	af00      	add	r7, sp, #0
   12bea:	6078      	str	r0, [r7, #4]
   12bec:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   12bee:	687b      	ldr	r3, [r7, #4]
   12bf0:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   12bf2:	683b      	ldr	r3, [r7, #0]
   12bf4:	689b      	ldr	r3, [r3, #8]
   12bf6:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   12bf8:	683b      	ldr	r3, [r7, #0]
   12bfa:	685b      	ldr	r3, [r3, #4]
   12bfc:	001a      	movs	r2, r3
   12bfe:	693b      	ldr	r3, [r7, #16]
   12c00:	189b      	adds	r3, r3, r2
   12c02:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   12c04:	e039      	b.n	12c7a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   12c06:	693b      	ldr	r3, [r7, #16]
   12c08:	781b      	ldrb	r3, [r3, #0]
   12c0a:	2b2f      	cmp	r3, #47	; 0x2f
   12c0c:	d103      	bne.n	12c16 <isTopicMatched+0x32>
   12c0e:	697b      	ldr	r3, [r7, #20]
   12c10:	781b      	ldrb	r3, [r3, #0]
   12c12:	2b2f      	cmp	r3, #47	; 0x2f
   12c14:	d13a      	bne.n	12c8c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   12c16:	697b      	ldr	r3, [r7, #20]
   12c18:	781b      	ldrb	r3, [r3, #0]
   12c1a:	2b2b      	cmp	r3, #43	; 0x2b
   12c1c:	d009      	beq.n	12c32 <isTopicMatched+0x4e>
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	781b      	ldrb	r3, [r3, #0]
   12c22:	2b23      	cmp	r3, #35	; 0x23
   12c24:	d005      	beq.n	12c32 <isTopicMatched+0x4e>
   12c26:	697b      	ldr	r3, [r7, #20]
   12c28:	781a      	ldrb	r2, [r3, #0]
   12c2a:	693b      	ldr	r3, [r7, #16]
   12c2c:	781b      	ldrb	r3, [r3, #0]
   12c2e:	429a      	cmp	r2, r3
   12c30:	d12e      	bne.n	12c90 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	781b      	ldrb	r3, [r3, #0]
   12c36:	2b2b      	cmp	r3, #43	; 0x2b
   12c38:	d112      	bne.n	12c60 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   12c3a:	693b      	ldr	r3, [r7, #16]
   12c3c:	3301      	adds	r3, #1
   12c3e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   12c40:	e005      	b.n	12c4e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   12c42:	693b      	ldr	r3, [r7, #16]
   12c44:	3301      	adds	r3, #1
   12c46:	613b      	str	r3, [r7, #16]
   12c48:	693b      	ldr	r3, [r7, #16]
   12c4a:	3301      	adds	r3, #1
   12c4c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   12c4e:	68fa      	ldr	r2, [r7, #12]
   12c50:	68bb      	ldr	r3, [r7, #8]
   12c52:	429a      	cmp	r2, r3
   12c54:	d20b      	bcs.n	12c6e <isTopicMatched+0x8a>
   12c56:	68fb      	ldr	r3, [r7, #12]
   12c58:	781b      	ldrb	r3, [r3, #0]
   12c5a:	2b2f      	cmp	r3, #47	; 0x2f
   12c5c:	d1f1      	bne.n	12c42 <isTopicMatched+0x5e>
   12c5e:	e006      	b.n	12c6e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   12c60:	697b      	ldr	r3, [r7, #20]
   12c62:	781b      	ldrb	r3, [r3, #0]
   12c64:	2b23      	cmp	r3, #35	; 0x23
   12c66:	d102      	bne.n	12c6e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   12c68:	68bb      	ldr	r3, [r7, #8]
   12c6a:	3b01      	subs	r3, #1
   12c6c:	613b      	str	r3, [r7, #16]
        curf++;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	3301      	adds	r3, #1
   12c72:	617b      	str	r3, [r7, #20]
        curn++;
   12c74:	693b      	ldr	r3, [r7, #16]
   12c76:	3301      	adds	r3, #1
   12c78:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   12c7a:	697b      	ldr	r3, [r7, #20]
   12c7c:	781b      	ldrb	r3, [r3, #0]
   12c7e:	2b00      	cmp	r3, #0
   12c80:	d007      	beq.n	12c92 <isTopicMatched+0xae>
   12c82:	693a      	ldr	r2, [r7, #16]
   12c84:	68bb      	ldr	r3, [r7, #8]
   12c86:	429a      	cmp	r2, r3
   12c88:	d3bd      	bcc.n	12c06 <isTopicMatched+0x22>
   12c8a:	e002      	b.n	12c92 <isTopicMatched+0xae>
            break;
   12c8c:	46c0      	nop			; (mov r8, r8)
   12c8e:	e000      	b.n	12c92 <isTopicMatched+0xae>
            break;
   12c90:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   12c92:	693a      	ldr	r2, [r7, #16]
   12c94:	68bb      	ldr	r3, [r7, #8]
   12c96:	429a      	cmp	r2, r3
   12c98:	d105      	bne.n	12ca6 <isTopicMatched+0xc2>
   12c9a:	697b      	ldr	r3, [r7, #20]
   12c9c:	781b      	ldrb	r3, [r3, #0]
   12c9e:	2b00      	cmp	r3, #0
   12ca0:	d101      	bne.n	12ca6 <isTopicMatched+0xc2>
   12ca2:	2301      	movs	r3, #1
   12ca4:	e000      	b.n	12ca8 <isTopicMatched+0xc4>
   12ca6:	2300      	movs	r3, #0
   12ca8:	b2db      	uxtb	r3, r3
}
   12caa:	0018      	movs	r0, r3
   12cac:	46bd      	mov	sp, r7
   12cae:	b006      	add	sp, #24
   12cb0:	bd80      	pop	{r7, pc}
	...

00012cb4 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   12cb4:	b580      	push	{r7, lr}
   12cb6:	b08a      	sub	sp, #40	; 0x28
   12cb8:	af00      	add	r7, sp, #0
   12cba:	60f8      	str	r0, [r7, #12]
   12cbc:	60b9      	str	r1, [r7, #8]
   12cbe:	607a      	str	r2, [r7, #4]
    int i;
    int rc = MQTTCLIENT_FAILURE;
   12cc0:	2301      	movs	r3, #1
   12cc2:	425b      	negs	r3, r3
   12cc4:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12cc6:	2300      	movs	r3, #0
   12cc8:	627b      	str	r3, [r7, #36]	; 0x24
   12cca:	e044      	b.n	12d56 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   12ccc:	68fa      	ldr	r2, [r7, #12]
   12cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cd0:	3304      	adds	r3, #4
   12cd2:	00db      	lsls	r3, r3, #3
   12cd4:	18d3      	adds	r3, r2, r3
   12cd6:	3304      	adds	r3, #4
   12cd8:	681b      	ldr	r3, [r3, #0]
   12cda:	2b00      	cmp	r3, #0
   12cdc:	d038      	beq.n	12d50 <deliverMessage+0x9c>
   12cde:	68fa      	ldr	r2, [r7, #12]
   12ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ce2:	3304      	adds	r3, #4
   12ce4:	00db      	lsls	r3, r3, #3
   12ce6:	18d3      	adds	r3, r2, r3
   12ce8:	3304      	adds	r3, #4
   12cea:	681a      	ldr	r2, [r3, #0]
   12cec:	68bb      	ldr	r3, [r7, #8]
   12cee:	0011      	movs	r1, r2
   12cf0:	0018      	movs	r0, r3
   12cf2:	4b28      	ldr	r3, [pc, #160]	; (12d94 <deliverMessage+0xe0>)
   12cf4:	4798      	blx	r3
   12cf6:	1e03      	subs	r3, r0, #0
   12cf8:	d10d      	bne.n	12d16 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   12cfa:	68fa      	ldr	r2, [r7, #12]
   12cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cfe:	3304      	adds	r3, #4
   12d00:	00db      	lsls	r3, r3, #3
   12d02:	18d3      	adds	r3, r2, r3
   12d04:	3304      	adds	r3, #4
   12d06:	681b      	ldr	r3, [r3, #0]
   12d08:	68ba      	ldr	r2, [r7, #8]
   12d0a:	0011      	movs	r1, r2
   12d0c:	0018      	movs	r0, r3
   12d0e:	4b22      	ldr	r3, [pc, #136]	; (12d98 <deliverMessage+0xe4>)
   12d10:	4798      	blx	r3
   12d12:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   12d14:	d01c      	beq.n	12d50 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   12d16:	68fa      	ldr	r2, [r7, #12]
   12d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d1a:	3304      	adds	r3, #4
   12d1c:	00db      	lsls	r3, r3, #3
   12d1e:	18d3      	adds	r3, r2, r3
   12d20:	3308      	adds	r3, #8
   12d22:	681b      	ldr	r3, [r3, #0]
   12d24:	2b00      	cmp	r3, #0
   12d26:	d013      	beq.n	12d50 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   12d28:	687a      	ldr	r2, [r7, #4]
   12d2a:	68b9      	ldr	r1, [r7, #8]
   12d2c:	2318      	movs	r3, #24
   12d2e:	18fb      	adds	r3, r7, r3
   12d30:	0018      	movs	r0, r3
   12d32:	4b1a      	ldr	r3, [pc, #104]	; (12d9c <deliverMessage+0xe8>)
   12d34:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   12d36:	68fa      	ldr	r2, [r7, #12]
   12d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d3a:	3304      	adds	r3, #4
   12d3c:	00db      	lsls	r3, r3, #3
   12d3e:	18d3      	adds	r3, r2, r3
   12d40:	3308      	adds	r3, #8
   12d42:	681b      	ldr	r3, [r3, #0]
   12d44:	2218      	movs	r2, #24
   12d46:	18ba      	adds	r2, r7, r2
   12d48:	0010      	movs	r0, r2
   12d4a:	4798      	blx	r3
                rc = MQTTCLIENT_SUCCESS;
   12d4c:	2300      	movs	r3, #0
   12d4e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d52:	3301      	adds	r3, #1
   12d54:	627b      	str	r3, [r7, #36]	; 0x24
   12d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d58:	2b04      	cmp	r3, #4
   12d5a:	ddb7      	ble.n	12ccc <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == MQTTCLIENT_FAILURE && c->defaultMessageHandler != NULL) 
   12d5c:	6a3b      	ldr	r3, [r7, #32]
   12d5e:	3301      	adds	r3, #1
   12d60:	d112      	bne.n	12d88 <deliverMessage+0xd4>
   12d62:	68fb      	ldr	r3, [r7, #12]
   12d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12d66:	2b00      	cmp	r3, #0
   12d68:	d00e      	beq.n	12d88 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   12d6a:	687a      	ldr	r2, [r7, #4]
   12d6c:	68b9      	ldr	r1, [r7, #8]
   12d6e:	2310      	movs	r3, #16
   12d70:	18fb      	adds	r3, r7, r3
   12d72:	0018      	movs	r0, r3
   12d74:	4b09      	ldr	r3, [pc, #36]	; (12d9c <deliverMessage+0xe8>)
   12d76:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   12d78:	68fb      	ldr	r3, [r7, #12]
   12d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12d7c:	2210      	movs	r2, #16
   12d7e:	18ba      	adds	r2, r7, r2
   12d80:	0010      	movs	r0, r2
   12d82:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
   12d84:	2300      	movs	r3, #0
   12d86:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   12d88:	6a3b      	ldr	r3, [r7, #32]
}
   12d8a:	0018      	movs	r0, r3
   12d8c:	46bd      	mov	sp, r7
   12d8e:	b00a      	add	sp, #40	; 0x28
   12d90:	bd80      	pop	{r7, pc}
   12d92:	46c0      	nop			; (mov r8, r8)
   12d94:	00014009 	.word	0x00014009
   12d98:	00012be5 	.word	0x00012be5
   12d9c:	000128ed 	.word	0x000128ed

00012da0 <keepalive>:


int keepalive(MQTTClient* c)
{
   12da0:	b580      	push	{r7, lr}
   12da2:	b086      	sub	sp, #24
   12da4:	af00      	add	r7, sp, #0
   12da6:	6078      	str	r0, [r7, #4]
    int rc = MQTTCLIENT_FAILURE;
   12da8:	2301      	movs	r3, #1
   12daa:	425b      	negs	r3, r3
   12dac:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
   12dae:	687b      	ldr	r3, [r7, #4]
   12db0:	699b      	ldr	r3, [r3, #24]
   12db2:	2b00      	cmp	r3, #0
   12db4:	d102      	bne.n	12dbc <keepalive+0x1c>
    {
        rc = MQTTCLIENT_SUCCESS;
   12db6:	2300      	movs	r3, #0
   12db8:	617b      	str	r3, [r7, #20]
        goto exit;
   12dba:	e033      	b.n	12e24 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   12dbc:	687b      	ldr	r3, [r7, #4]
   12dbe:	3354      	adds	r3, #84	; 0x54
   12dc0:	0018      	movs	r0, r3
   12dc2:	4b1b      	ldr	r3, [pc, #108]	; (12e30 <keepalive+0x90>)
   12dc4:	4798      	blx	r3
   12dc6:	1e03      	subs	r3, r0, #0
   12dc8:	d02c      	beq.n	12e24 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   12dca:	687b      	ldr	r3, [r7, #4]
   12dcc:	7f1b      	ldrb	r3, [r3, #28]
   12dce:	2b00      	cmp	r3, #0
   12dd0:	d128      	bne.n	12e24 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   12dd2:	2308      	movs	r3, #8
   12dd4:	18fb      	adds	r3, r7, r3
   12dd6:	0018      	movs	r0, r3
   12dd8:	4b16      	ldr	r3, [pc, #88]	; (12e34 <keepalive+0x94>)
   12dda:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   12ddc:	23fa      	movs	r3, #250	; 0xfa
   12dde:	009a      	lsls	r2, r3, #2
   12de0:	2308      	movs	r3, #8
   12de2:	18fb      	adds	r3, r7, r3
   12de4:	0011      	movs	r1, r2
   12de6:	0018      	movs	r0, r3
   12de8:	4b13      	ldr	r3, [pc, #76]	; (12e38 <keepalive+0x98>)
   12dea:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   12dec:	687b      	ldr	r3, [r7, #4]
   12dee:	691a      	ldr	r2, [r3, #16]
   12df0:	687b      	ldr	r3, [r7, #4]
   12df2:	689b      	ldr	r3, [r3, #8]
   12df4:	0019      	movs	r1, r3
   12df6:	0010      	movs	r0, r2
   12df8:	4b10      	ldr	r3, [pc, #64]	; (12e3c <keepalive+0x9c>)
   12dfa:	4798      	blx	r3
   12dfc:	0003      	movs	r3, r0
   12dfe:	613b      	str	r3, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTTCLIENT_SUCCESS) // send the ping packet
   12e00:	693b      	ldr	r3, [r7, #16]
   12e02:	2b00      	cmp	r3, #0
   12e04:	dd0e      	ble.n	12e24 <keepalive+0x84>
   12e06:	2308      	movs	r3, #8
   12e08:	18fa      	adds	r2, r7, r3
   12e0a:	6939      	ldr	r1, [r7, #16]
   12e0c:	687b      	ldr	r3, [r7, #4]
   12e0e:	0018      	movs	r0, r3
   12e10:	4b0b      	ldr	r3, [pc, #44]	; (12e40 <keepalive+0xa0>)
   12e12:	4798      	blx	r3
   12e14:	0003      	movs	r3, r0
   12e16:	617b      	str	r3, [r7, #20]
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	2b00      	cmp	r3, #0
   12e1c:	d102      	bne.n	12e24 <keepalive+0x84>
                c->ping_outstanding = 1;
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	2201      	movs	r2, #1
   12e22:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   12e24:	697b      	ldr	r3, [r7, #20]
}
   12e26:	0018      	movs	r0, r3
   12e28:	46bd      	mov	sp, r7
   12e2a:	b006      	add	sp, #24
   12e2c:	bd80      	pop	{r7, pc}
   12e2e:	46c0      	nop			; (mov r8, r8)
   12e30:	0001469d 	.word	0x0001469d
   12e34:	00014679 	.word	0x00014679
   12e38:	0001473d 	.word	0x0001473d
   12e3c:	00013a19 	.word	0x00013a19
   12e40:	0001293d 	.word	0x0001293d

00012e44 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   12e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e46:	b095      	sub	sp, #84	; 0x54
   12e48:	af06      	add	r7, sp, #24
   12e4a:	6078      	str	r0, [r7, #4]
   12e4c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   12e4e:	683a      	ldr	r2, [r7, #0]
   12e50:	687b      	ldr	r3, [r7, #4]
   12e52:	0011      	movs	r1, r2
   12e54:	0018      	movs	r0, r3
   12e56:	4b70      	ldr	r3, [pc, #448]	; (13018 <cycle+0x1d4>)
   12e58:	4798      	blx	r3
   12e5a:	0002      	movs	r2, r0
   12e5c:	232e      	movs	r3, #46	; 0x2e
   12e5e:	18fb      	adds	r3, r7, r3
   12e60:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   12e62:	2300      	movs	r3, #0
   12e64:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTTCLIENT_SUCCESS;
   12e66:	2300      	movs	r3, #0
   12e68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   12e6a:	232e      	movs	r3, #46	; 0x2e
   12e6c:	18fb      	adds	r3, r7, r3
   12e6e:	881b      	ldrh	r3, [r3, #0]
   12e70:	2b0d      	cmp	r3, #13
   12e72:	d900      	bls.n	12e76 <cycle+0x32>
   12e74:	e0bd      	b.n	12ff2 <cycle+0x1ae>
   12e76:	009a      	lsls	r2, r3, #2
   12e78:	4b68      	ldr	r3, [pc, #416]	; (1301c <cycle+0x1d8>)
   12e7a:	18d3      	adds	r3, r2, r3
   12e7c:	681b      	ldr	r3, [r3, #0]
   12e7e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12e80:	687b      	ldr	r3, [r7, #4]
   12e82:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   12e84:	687b      	ldr	r3, [r7, #4]
   12e86:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12e88:	001e      	movs	r6, r3
   12e8a:	2310      	movs	r3, #16
   12e8c:	18fb      	adds	r3, r7, r3
   12e8e:	1d1d      	adds	r5, r3, #4
   12e90:	2310      	movs	r3, #16
   12e92:	18fb      	adds	r3, r7, r3
   12e94:	1c5c      	adds	r4, r3, #1
   12e96:	230c      	movs	r3, #12
   12e98:	18f9      	adds	r1, r7, r3
   12e9a:	2310      	movs	r3, #16
   12e9c:	18fb      	adds	r3, r7, r3
   12e9e:	1c98      	adds	r0, r3, #2
   12ea0:	9604      	str	r6, [sp, #16]
   12ea2:	9203      	str	r2, [sp, #12]
   12ea4:	2310      	movs	r3, #16
   12ea6:	18fb      	adds	r3, r7, r3
   12ea8:	330c      	adds	r3, #12
   12eaa:	9302      	str	r3, [sp, #8]
   12eac:	2310      	movs	r3, #16
   12eae:	18fb      	adds	r3, r7, r3
   12eb0:	3308      	adds	r3, #8
   12eb2:	9301      	str	r3, [sp, #4]
   12eb4:	2320      	movs	r3, #32
   12eb6:	18fb      	adds	r3, r7, r3
   12eb8:	9300      	str	r3, [sp, #0]
   12eba:	002b      	movs	r3, r5
   12ebc:	0022      	movs	r2, r4
   12ebe:	4c58      	ldr	r4, [pc, #352]	; (13020 <cycle+0x1dc>)
   12ec0:	47a0      	blx	r4
   12ec2:	0003      	movs	r3, r0
   12ec4:	2b01      	cmp	r3, #1
   12ec6:	d000      	beq.n	12eca <cycle+0x86>
   12ec8:	e098      	b.n	12ffc <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   12eca:	68fb      	ldr	r3, [r7, #12]
   12ecc:	b2da      	uxtb	r2, r3
   12ece:	2310      	movs	r3, #16
   12ed0:	18fb      	adds	r3, r7, r3
   12ed2:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   12ed4:	2310      	movs	r3, #16
   12ed6:	18fa      	adds	r2, r7, r3
   12ed8:	2320      	movs	r3, #32
   12eda:	18f9      	adds	r1, r7, r3
   12edc:	687b      	ldr	r3, [r7, #4]
   12ede:	0018      	movs	r0, r3
   12ee0:	4b50      	ldr	r3, [pc, #320]	; (13024 <cycle+0x1e0>)
   12ee2:	4798      	blx	r3
            if (msg.qos != QOS0)
   12ee4:	2310      	movs	r3, #16
   12ee6:	18fb      	adds	r3, r7, r3
   12ee8:	781b      	ldrb	r3, [r3, #0]
   12eea:	2b00      	cmp	r3, #0
   12eec:	d100      	bne.n	12ef0 <cycle+0xac>
   12eee:	e07d      	b.n	12fec <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   12ef0:	2310      	movs	r3, #16
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2b01      	cmp	r3, #1
   12ef8:	d10f      	bne.n	12f1a <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   12efa:	687b      	ldr	r3, [r7, #4]
   12efc:	6918      	ldr	r0, [r3, #16]
   12efe:	687b      	ldr	r3, [r7, #4]
   12f00:	689b      	ldr	r3, [r3, #8]
   12f02:	0019      	movs	r1, r3
   12f04:	2310      	movs	r3, #16
   12f06:	18fb      	adds	r3, r7, r3
   12f08:	889b      	ldrh	r3, [r3, #4]
   12f0a:	9300      	str	r3, [sp, #0]
   12f0c:	2300      	movs	r3, #0
   12f0e:	2204      	movs	r2, #4
   12f10:	4c45      	ldr	r4, [pc, #276]	; (13028 <cycle+0x1e4>)
   12f12:	47a0      	blx	r4
   12f14:	0003      	movs	r3, r0
   12f16:	637b      	str	r3, [r7, #52]	; 0x34
   12f18:	e013      	b.n	12f42 <cycle+0xfe>
                else if (msg.qos == QOS2)
   12f1a:	2310      	movs	r3, #16
   12f1c:	18fb      	adds	r3, r7, r3
   12f1e:	781b      	ldrb	r3, [r3, #0]
   12f20:	2b02      	cmp	r3, #2
   12f22:	d10e      	bne.n	12f42 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   12f24:	687b      	ldr	r3, [r7, #4]
   12f26:	6918      	ldr	r0, [r3, #16]
   12f28:	687b      	ldr	r3, [r7, #4]
   12f2a:	689b      	ldr	r3, [r3, #8]
   12f2c:	0019      	movs	r1, r3
   12f2e:	2310      	movs	r3, #16
   12f30:	18fb      	adds	r3, r7, r3
   12f32:	889b      	ldrh	r3, [r3, #4]
   12f34:	9300      	str	r3, [sp, #0]
   12f36:	2300      	movs	r3, #0
   12f38:	2205      	movs	r2, #5
   12f3a:	4c3b      	ldr	r4, [pc, #236]	; (13028 <cycle+0x1e4>)
   12f3c:	47a0      	blx	r4
   12f3e:	0003      	movs	r3, r0
   12f40:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   12f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f44:	2b00      	cmp	r3, #0
   12f46:	dc03      	bgt.n	12f50 <cycle+0x10c>
                    rc = MQTTCLIENT_FAILURE;
   12f48:	2301      	movs	r3, #1
   12f4a:	425b      	negs	r3, r3
   12f4c:	633b      	str	r3, [r7, #48]	; 0x30
   12f4e:	e007      	b.n	12f60 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   12f50:	683a      	ldr	r2, [r7, #0]
   12f52:	6b79      	ldr	r1, [r7, #52]	; 0x34
   12f54:	687b      	ldr	r3, [r7, #4]
   12f56:	0018      	movs	r0, r3
   12f58:	4b34      	ldr	r3, [pc, #208]	; (1302c <cycle+0x1e8>)
   12f5a:	4798      	blx	r3
   12f5c:	0003      	movs	r3, r0
   12f5e:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == MQTTCLIENT_FAILURE)
   12f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f62:	3301      	adds	r3, #1
   12f64:	d142      	bne.n	12fec <cycle+0x1a8>
                    goto exit; // there was a problem
   12f66:	46c0      	nop			; (mov r8, r8)
   12f68:	e049      	b.n	12ffe <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	695c      	ldr	r4, [r3, #20]
   12f6e:	687b      	ldr	r3, [r7, #4]
   12f70:	68db      	ldr	r3, [r3, #12]
   12f72:	220a      	movs	r2, #10
   12f74:	18ba      	adds	r2, r7, r2
   12f76:	2109      	movs	r1, #9
   12f78:	1879      	adds	r1, r7, r1
   12f7a:	2008      	movs	r0, #8
   12f7c:	1838      	adds	r0, r7, r0
   12f7e:	9300      	str	r3, [sp, #0]
   12f80:	0023      	movs	r3, r4
   12f82:	4c2b      	ldr	r4, [pc, #172]	; (13030 <cycle+0x1ec>)
   12f84:	47a0      	blx	r4
   12f86:	0003      	movs	r3, r0
   12f88:	2b01      	cmp	r3, #1
   12f8a:	d003      	beq.n	12f94 <cycle+0x150>
                rc = MQTTCLIENT_FAILURE;
   12f8c:	2301      	movs	r3, #1
   12f8e:	425b      	negs	r3, r3
   12f90:	633b      	str	r3, [r7, #48]	; 0x30
   12f92:	e023      	b.n	12fdc <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   12f94:	687b      	ldr	r3, [r7, #4]
   12f96:	6918      	ldr	r0, [r3, #16]
   12f98:	687b      	ldr	r3, [r7, #4]
   12f9a:	689b      	ldr	r3, [r3, #8]
   12f9c:	0019      	movs	r1, r3
   12f9e:	230a      	movs	r3, #10
   12fa0:	18fb      	adds	r3, r7, r3
   12fa2:	881b      	ldrh	r3, [r3, #0]
   12fa4:	9300      	str	r3, [sp, #0]
   12fa6:	2300      	movs	r3, #0
   12fa8:	2206      	movs	r2, #6
   12faa:	4c1f      	ldr	r4, [pc, #124]	; (13028 <cycle+0x1e4>)
   12fac:	47a0      	blx	r4
   12fae:	0003      	movs	r3, r0
   12fb0:	637b      	str	r3, [r7, #52]	; 0x34
   12fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12fb4:	2b00      	cmp	r3, #0
   12fb6:	dc03      	bgt.n	12fc0 <cycle+0x17c>
                rc = MQTTCLIENT_FAILURE;
   12fb8:	2301      	movs	r3, #1
   12fba:	425b      	negs	r3, r3
   12fbc:	633b      	str	r3, [r7, #48]	; 0x30
   12fbe:	e00d      	b.n	12fdc <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != MQTTCLIENT_SUCCESS) // send the PUBREL packet
   12fc0:	683a      	ldr	r2, [r7, #0]
   12fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   12fc4:	687b      	ldr	r3, [r7, #4]
   12fc6:	0018      	movs	r0, r3
   12fc8:	4b18      	ldr	r3, [pc, #96]	; (1302c <cycle+0x1e8>)
   12fca:	4798      	blx	r3
   12fcc:	0003      	movs	r3, r0
   12fce:	633b      	str	r3, [r7, #48]	; 0x30
   12fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d002      	beq.n	12fdc <cycle+0x198>
                rc = MQTTCLIENT_FAILURE; // there was a problem
   12fd6:	2301      	movs	r3, #1
   12fd8:	425b      	negs	r3, r3
   12fda:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == MQTTCLIENT_FAILURE)
   12fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12fde:	3301      	adds	r3, #1
   12fe0:	d106      	bne.n	12ff0 <cycle+0x1ac>
                goto exit; // there was a problem
   12fe2:	e00c      	b.n	12ffe <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   12fe4:	687b      	ldr	r3, [r7, #4]
   12fe6:	2200      	movs	r2, #0
   12fe8:	771a      	strb	r2, [r3, #28]
            break;
   12fea:	e002      	b.n	12ff2 <cycle+0x1ae>
            break;
   12fec:	46c0      	nop			; (mov r8, r8)
   12fee:	e000      	b.n	12ff2 <cycle+0x1ae>
            break;
   12ff0:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   12ff2:	687b      	ldr	r3, [r7, #4]
   12ff4:	0018      	movs	r0, r3
   12ff6:	4b0f      	ldr	r3, [pc, #60]	; (13034 <cycle+0x1f0>)
   12ff8:	4798      	blx	r3
   12ffa:	e000      	b.n	12ffe <cycle+0x1ba>
                goto exit;
   12ffc:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == MQTTCLIENT_SUCCESS)
   12ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13000:	2b00      	cmp	r3, #0
   13002:	d103      	bne.n	1300c <cycle+0x1c8>
        rc = packet_type;
   13004:	232e      	movs	r3, #46	; 0x2e
   13006:	18fb      	adds	r3, r7, r3
   13008:	881b      	ldrh	r3, [r3, #0]
   1300a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   1300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1300e:	0018      	movs	r0, r3
   13010:	46bd      	mov	sp, r7
   13012:	b00f      	add	sp, #60	; 0x3c
   13014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13016:	46c0      	nop			; (mov r8, r8)
   13018:	00012af9 	.word	0x00012af9
   1301c:	00020ff0 	.word	0x00020ff0
   13020:	00013a3d 	.word	0x00013a3d
   13024:	00012cb5 	.word	0x00012cb5
   13028:	00014235 	.word	0x00014235
   1302c:	0001293d 	.word	0x0001293d
   13030:	00013b41 	.word	0x00013b41
   13034:	00012da1 	.word	0x00012da1

00013038 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   13038:	b580      	push	{r7, lr}
   1303a:	b086      	sub	sp, #24
   1303c:	af00      	add	r7, sp, #0
   1303e:	6078      	str	r0, [r7, #4]
   13040:	6039      	str	r1, [r7, #0]
    int rc = MQTTCLIENT_SUCCESS;
   13042:	2300      	movs	r3, #0
   13044:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   13046:	230c      	movs	r3, #12
   13048:	18fb      	adds	r3, r7, r3
   1304a:	0018      	movs	r0, r3
   1304c:	4b11      	ldr	r3, [pc, #68]	; (13094 <MQTTYield+0x5c>)
   1304e:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   13050:	683a      	ldr	r2, [r7, #0]
   13052:	230c      	movs	r3, #12
   13054:	18fb      	adds	r3, r7, r3
   13056:	0011      	movs	r1, r2
   13058:	0018      	movs	r0, r3
   1305a:	4b0f      	ldr	r3, [pc, #60]	; (13098 <MQTTYield+0x60>)
   1305c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == MQTTCLIENT_FAILURE)
   1305e:	230c      	movs	r3, #12
   13060:	18fa      	adds	r2, r7, r3
   13062:	687b      	ldr	r3, [r7, #4]
   13064:	0011      	movs	r1, r2
   13066:	0018      	movs	r0, r3
   13068:	4b0c      	ldr	r3, [pc, #48]	; (1309c <MQTTYield+0x64>)
   1306a:	4798      	blx	r3
   1306c:	0003      	movs	r3, r0
   1306e:	3301      	adds	r3, #1
   13070:	d103      	bne.n	1307a <MQTTYield+0x42>
        {
            rc = MQTTCLIENT_FAILURE;
   13072:	2301      	movs	r3, #1
   13074:	425b      	negs	r3, r3
   13076:	617b      	str	r3, [r7, #20]
            break;
   13078:	e006      	b.n	13088 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1307a:	230c      	movs	r3, #12
   1307c:	18fb      	adds	r3, r7, r3
   1307e:	0018      	movs	r0, r3
   13080:	4b07      	ldr	r3, [pc, #28]	; (130a0 <MQTTYield+0x68>)
   13082:	4798      	blx	r3
   13084:	1e03      	subs	r3, r0, #0
   13086:	d0ea      	beq.n	1305e <MQTTYield+0x26>
        
    return rc;
   13088:	697b      	ldr	r3, [r7, #20]
}
   1308a:	0018      	movs	r0, r3
   1308c:	46bd      	mov	sp, r7
   1308e:	b006      	add	sp, #24
   13090:	bd80      	pop	{r7, pc}
   13092:	46c0      	nop			; (mov r8, r8)
   13094:	00014679 	.word	0x00014679
   13098:	0001473d 	.word	0x0001473d
   1309c:	00012e45 	.word	0x00012e45
   130a0:	0001469d 	.word	0x0001469d

000130a4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   130a4:	b580      	push	{r7, lr}
   130a6:	b086      	sub	sp, #24
   130a8:	af00      	add	r7, sp, #0
   130aa:	60f8      	str	r0, [r7, #12]
   130ac:	60b9      	str	r1, [r7, #8]
   130ae:	607a      	str	r2, [r7, #4]
    int rc = MQTTCLIENT_FAILURE;
   130b0:	2301      	movs	r3, #1
   130b2:	425b      	negs	r3, r3
   130b4:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	0018      	movs	r0, r3
   130ba:	4b0b      	ldr	r3, [pc, #44]	; (130e8 <waitfor+0x44>)
   130bc:	4798      	blx	r3
   130be:	1e03      	subs	r3, r0, #0
   130c0:	d10c      	bne.n	130dc <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   130c2:	687a      	ldr	r2, [r7, #4]
   130c4:	68fb      	ldr	r3, [r7, #12]
   130c6:	0011      	movs	r1, r2
   130c8:	0018      	movs	r0, r3
   130ca:	4b08      	ldr	r3, [pc, #32]	; (130ec <waitfor+0x48>)
   130cc:	4798      	blx	r3
   130ce:	0003      	movs	r3, r0
   130d0:	617b      	str	r3, [r7, #20]
   130d2:	697a      	ldr	r2, [r7, #20]
   130d4:	68bb      	ldr	r3, [r7, #8]
   130d6:	429a      	cmp	r2, r3
   130d8:	d1ed      	bne.n	130b6 <waitfor+0x12>
   130da:	e000      	b.n	130de <waitfor+0x3a>
            break; // we timed out
   130dc:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   130de:	697b      	ldr	r3, [r7, #20]
}
   130e0:	0018      	movs	r0, r3
   130e2:	46bd      	mov	sp, r7
   130e4:	b006      	add	sp, #24
   130e6:	bd80      	pop	{r7, pc}
   130e8:	0001469d 	.word	0x0001469d
   130ec:	00012e45 	.word	0x00012e45

000130f0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   130f0:	b590      	push	{r4, r7, lr}
   130f2:	b09f      	sub	sp, #124	; 0x7c
   130f4:	af00      	add	r7, sp, #0
   130f6:	6078      	str	r0, [r7, #4]
   130f8:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = MQTTCLIENT_FAILURE;
   130fa:	2301      	movs	r3, #1
   130fc:	425b      	negs	r3, r3
   130fe:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   13100:	2310      	movs	r3, #16
   13102:	18fa      	adds	r2, r7, r3
   13104:	4b41      	ldr	r3, [pc, #260]	; (1320c <MQTTConnect+0x11c>)
   13106:	0010      	movs	r0, r2
   13108:	0019      	movs	r1, r3
   1310a:	2358      	movs	r3, #88	; 0x58
   1310c:	001a      	movs	r2, r3
   1310e:	4b40      	ldr	r3, [pc, #256]	; (13210 <MQTTConnect+0x120>)
   13110:	4798      	blx	r3
    int len = 0;
   13112:	2300      	movs	r3, #0
   13114:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	6a1b      	ldr	r3, [r3, #32]
   1311a:	2b00      	cmp	r3, #0
   1311c:	d166      	bne.n	131ec <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   1311e:	2368      	movs	r3, #104	; 0x68
   13120:	18fb      	adds	r3, r7, r3
   13122:	0018      	movs	r0, r3
   13124:	4b3b      	ldr	r3, [pc, #236]	; (13214 <MQTTConnect+0x124>)
   13126:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   13128:	687b      	ldr	r3, [r7, #4]
   1312a:	685a      	ldr	r2, [r3, #4]
   1312c:	2368      	movs	r3, #104	; 0x68
   1312e:	18fb      	adds	r3, r7, r3
   13130:	0011      	movs	r1, r2
   13132:	0018      	movs	r0, r3
   13134:	4b38      	ldr	r3, [pc, #224]	; (13218 <MQTTConnect+0x128>)
   13136:	4798      	blx	r3

    if (options == 0)
   13138:	683b      	ldr	r3, [r7, #0]
   1313a:	2b00      	cmp	r3, #0
   1313c:	d102      	bne.n	13144 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   1313e:	2310      	movs	r3, #16
   13140:	18fb      	adds	r3, r7, r3
   13142:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   13144:	683b      	ldr	r3, [r7, #0]
   13146:	8b1b      	ldrh	r3, [r3, #24]
   13148:	001a      	movs	r2, r3
   1314a:	687b      	ldr	r3, [r7, #4]
   1314c:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1314e:	687b      	ldr	r3, [r7, #4]
   13150:	3354      	adds	r3, #84	; 0x54
   13152:	001a      	movs	r2, r3
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	699b      	ldr	r3, [r3, #24]
   13158:	0019      	movs	r1, r3
   1315a:	0010      	movs	r0, r2
   1315c:	4b2f      	ldr	r3, [pc, #188]	; (1321c <MQTTConnect+0x12c>)
   1315e:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   13160:	687b      	ldr	r3, [r7, #4]
   13162:	6918      	ldr	r0, [r3, #16]
   13164:	687b      	ldr	r3, [r7, #4]
   13166:	689b      	ldr	r3, [r3, #8]
   13168:	0019      	movs	r1, r3
   1316a:	683b      	ldr	r3, [r7, #0]
   1316c:	001a      	movs	r2, r3
   1316e:	4b2c      	ldr	r3, [pc, #176]	; (13220 <MQTTConnect+0x130>)
   13170:	4798      	blx	r3
   13172:	0003      	movs	r3, r0
   13174:	673b      	str	r3, [r7, #112]	; 0x70
   13176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13178:	2b00      	cmp	r3, #0
   1317a:	dd39      	ble.n	131f0 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTTCLIENT_SUCCESS)  // send the connect packet
   1317c:	2368      	movs	r3, #104	; 0x68
   1317e:	18fa      	adds	r2, r7, r3
   13180:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13182:	687b      	ldr	r3, [r7, #4]
   13184:	0018      	movs	r0, r3
   13186:	4b27      	ldr	r3, [pc, #156]	; (13224 <MQTTConnect+0x134>)
   13188:	4798      	blx	r3
   1318a:	0003      	movs	r3, r0
   1318c:	677b      	str	r3, [r7, #116]	; 0x74
   1318e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13190:	2b00      	cmp	r3, #0
   13192:	d12f      	bne.n	131f4 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   13194:	2368      	movs	r3, #104	; 0x68
   13196:	18fa      	adds	r2, r7, r3
   13198:	687b      	ldr	r3, [r7, #4]
   1319a:	2102      	movs	r1, #2
   1319c:	0018      	movs	r0, r3
   1319e:	4b22      	ldr	r3, [pc, #136]	; (13228 <MQTTConnect+0x138>)
   131a0:	4798      	blx	r3
   131a2:	0003      	movs	r3, r0
   131a4:	2b02      	cmp	r3, #2
   131a6:	d11d      	bne.n	131e4 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   131a8:	230f      	movs	r3, #15
   131aa:	18fb      	adds	r3, r7, r3
   131ac:	22ff      	movs	r2, #255	; 0xff
   131ae:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   131b0:	230e      	movs	r3, #14
   131b2:	18fb      	adds	r3, r7, r3
   131b4:	2200      	movs	r2, #0
   131b6:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   131b8:	687b      	ldr	r3, [r7, #4]
   131ba:	695a      	ldr	r2, [r3, #20]
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	68db      	ldr	r3, [r3, #12]
   131c0:	210f      	movs	r1, #15
   131c2:	1879      	adds	r1, r7, r1
   131c4:	200e      	movs	r0, #14
   131c6:	1838      	adds	r0, r7, r0
   131c8:	4c18      	ldr	r4, [pc, #96]	; (1322c <MQTTConnect+0x13c>)
   131ca:	47a0      	blx	r4
   131cc:	0003      	movs	r3, r0
   131ce:	2b01      	cmp	r3, #1
   131d0:	d104      	bne.n	131dc <MQTTConnect+0xec>
            rc = connack_rc;
   131d2:	230f      	movs	r3, #15
   131d4:	18fb      	adds	r3, r7, r3
   131d6:	781b      	ldrb	r3, [r3, #0]
   131d8:	677b      	str	r3, [r7, #116]	; 0x74
   131da:	e00c      	b.n	131f6 <MQTTConnect+0x106>
        else
            rc = MQTTCLIENT_FAILURE;
   131dc:	2301      	movs	r3, #1
   131de:	425b      	negs	r3, r3
   131e0:	677b      	str	r3, [r7, #116]	; 0x74
   131e2:	e008      	b.n	131f6 <MQTTConnect+0x106>
    }
    else
        rc = MQTTCLIENT_FAILURE;
   131e4:	2301      	movs	r3, #1
   131e6:	425b      	negs	r3, r3
   131e8:	677b      	str	r3, [r7, #116]	; 0x74
   131ea:	e004      	b.n	131f6 <MQTTConnect+0x106>
		goto exit;
   131ec:	46c0      	nop			; (mov r8, r8)
   131ee:	e002      	b.n	131f6 <MQTTConnect+0x106>
        goto exit;
   131f0:	46c0      	nop			; (mov r8, r8)
   131f2:	e000      	b.n	131f6 <MQTTConnect+0x106>
        goto exit; // there was a problem
   131f4:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == MQTTCLIENT_SUCCESS)
   131f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   131f8:	2b00      	cmp	r3, #0
   131fa:	d102      	bne.n	13202 <MQTTConnect+0x112>
        c->isconnected = 1;
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	2201      	movs	r2, #1
   13200:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   13202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   13204:	0018      	movs	r0, r3
   13206:	46bd      	mov	sp, r7
   13208:	b01f      	add	sp, #124	; 0x7c
   1320a:	bd90      	pop	{r4, r7, pc}
   1320c:	00021028 	.word	0x00021028
   13210:	0001c1e5 	.word	0x0001c1e5
   13214:	00014679 	.word	0x00014679
   13218:	0001473d 	.word	0x0001473d
   1321c:	000147e9 	.word	0x000147e9
   13220:	00013645 	.word	0x00013645
   13224:	0001293d 	.word	0x0001293d
   13228:	000130a5 	.word	0x000130a5
   1322c:	000138c1 	.word	0x000138c1

00013230 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
   13230:	b5b0      	push	{r4, r5, r7, lr}
   13232:	b094      	sub	sp, #80	; 0x50
   13234:	af04      	add	r7, sp, #16
   13236:	60f8      	str	r0, [r7, #12]
   13238:	60b9      	str	r1, [r7, #8]
   1323a:	603b      	str	r3, [r7, #0]
   1323c:	1dfb      	adds	r3, r7, #7
   1323e:	701a      	strb	r2, [r3, #0]
    int rc = MQTTCLIENT_FAILURE;  
   13240:	2301      	movs	r3, #1
   13242:	425b      	negs	r3, r3
   13244:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
   13246:	2300      	movs	r3, #0
   13248:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
   1324a:	2320      	movs	r3, #32
   1324c:	18fb      	adds	r3, r7, r3
   1324e:	2200      	movs	r2, #0
   13250:	601a      	str	r2, [r3, #0]
   13252:	2320      	movs	r3, #32
   13254:	18fb      	adds	r3, r7, r3
   13256:	2200      	movs	r2, #0
   13258:	605a      	str	r2, [r3, #4]
   1325a:	2320      	movs	r3, #32
   1325c:	18fb      	adds	r3, r7, r3
   1325e:	2200      	movs	r2, #0
   13260:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicFilter;
   13262:	2320      	movs	r3, #32
   13264:	18fb      	adds	r3, r7, r3
   13266:	68ba      	ldr	r2, [r7, #8]
   13268:	601a      	str	r2, [r3, #0]
    int qos_val = qos;
   1326a:	1dfb      	adds	r3, r7, #7
   1326c:	781b      	ldrb	r3, [r3, #0]
   1326e:	61fb      	str	r3, [r7, #28]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   13270:	68fb      	ldr	r3, [r7, #12]
   13272:	6a1b      	ldr	r3, [r3, #32]
   13274:	2b00      	cmp	r3, #0
   13276:	d100      	bne.n	1327a <MQTTSubscribe+0x4a>
   13278:	e088      	b.n	1338c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1327a:	232c      	movs	r3, #44	; 0x2c
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	0018      	movs	r0, r3
   13280:	4b47      	ldr	r3, [pc, #284]	; (133a0 <MQTTSubscribe+0x170>)
   13282:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   13284:	68fb      	ldr	r3, [r7, #12]
   13286:	685a      	ldr	r2, [r3, #4]
   13288:	232c      	movs	r3, #44	; 0x2c
   1328a:	18fb      	adds	r3, r7, r3
   1328c:	0011      	movs	r1, r2
   1328e:	0018      	movs	r0, r3
   13290:	4b44      	ldr	r3, [pc, #272]	; (133a4 <MQTTSubscribe+0x174>)
   13292:	4798      	blx	r3
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &qos_val);
   13294:	68fb      	ldr	r3, [r7, #12]
   13296:	691c      	ldr	r4, [r3, #16]
   13298:	68fb      	ldr	r3, [r7, #12]
   1329a:	689b      	ldr	r3, [r3, #8]
   1329c:	001d      	movs	r5, r3
   1329e:	68fb      	ldr	r3, [r7, #12]
   132a0:	0018      	movs	r0, r3
   132a2:	4b41      	ldr	r3, [pc, #260]	; (133a8 <MQTTSubscribe+0x178>)
   132a4:	4798      	blx	r3
   132a6:	0003      	movs	r3, r0
   132a8:	b29a      	uxth	r2, r3
   132aa:	231c      	movs	r3, #28
   132ac:	18fb      	adds	r3, r7, r3
   132ae:	9302      	str	r3, [sp, #8]
   132b0:	2320      	movs	r3, #32
   132b2:	18fb      	adds	r3, r7, r3
   132b4:	9301      	str	r3, [sp, #4]
   132b6:	2301      	movs	r3, #1
   132b8:	9300      	str	r3, [sp, #0]
   132ba:	0013      	movs	r3, r2
   132bc:	2200      	movs	r2, #0
   132be:	0029      	movs	r1, r5
   132c0:	0020      	movs	r0, r4
   132c2:	4c3a      	ldr	r4, [pc, #232]	; (133ac <MQTTSubscribe+0x17c>)
   132c4:	47a0      	blx	r4
   132c6:	0003      	movs	r3, r0
   132c8:	637b      	str	r3, [r7, #52]	; 0x34
    if (len <= 0)
   132ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   132cc:	2b00      	cmp	r3, #0
   132ce:	dd5f      	ble.n	13390 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
   132d0:	232c      	movs	r3, #44	; 0x2c
   132d2:	18fa      	adds	r2, r7, r3
   132d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
   132d6:	68fb      	ldr	r3, [r7, #12]
   132d8:	0018      	movs	r0, r3
   132da:	4b35      	ldr	r3, [pc, #212]	; (133b0 <MQTTSubscribe+0x180>)
   132dc:	4798      	blx	r3
   132de:	0003      	movs	r3, r0
   132e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   132e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   132e4:	2b00      	cmp	r3, #0
   132e6:	d155      	bne.n	13394 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   132e8:	232c      	movs	r3, #44	; 0x2c
   132ea:	18fa      	adds	r2, r7, r3
   132ec:	68fb      	ldr	r3, [r7, #12]
   132ee:	2109      	movs	r1, #9
   132f0:	0018      	movs	r0, r3
   132f2:	4b30      	ldr	r3, [pc, #192]	; (133b4 <MQTTSubscribe+0x184>)
   132f4:	4798      	blx	r3
   132f6:	0003      	movs	r3, r0
   132f8:	2b09      	cmp	r3, #9
   132fa:	d143      	bne.n	13384 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   132fc:	2300      	movs	r3, #0
   132fe:	61bb      	str	r3, [r7, #24]
   13300:	2301      	movs	r3, #1
   13302:	425b      	negs	r3, r3
   13304:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   13306:	68fb      	ldr	r3, [r7, #12]
   13308:	695a      	ldr	r2, [r3, #20]
   1330a:	68fb      	ldr	r3, [r7, #12]
   1330c:	68db      	ldr	r3, [r3, #12]
   1330e:	001c      	movs	r4, r3
   13310:	2314      	movs	r3, #20
   13312:	18fb      	adds	r3, r7, r3
   13314:	2118      	movs	r1, #24
   13316:	1879      	adds	r1, r7, r1
   13318:	2012      	movs	r0, #18
   1331a:	1838      	adds	r0, r7, r0
   1331c:	9401      	str	r4, [sp, #4]
   1331e:	9200      	str	r2, [sp, #0]
   13320:	000a      	movs	r2, r1
   13322:	2101      	movs	r1, #1
   13324:	4c24      	ldr	r4, [pc, #144]	; (133b8 <MQTTSubscribe+0x188>)
   13326:	47a0      	blx	r4
   13328:	0003      	movs	r3, r0
   1332a:	2b01      	cmp	r3, #1
   1332c:	d101      	bne.n	13332 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1332e:	697b      	ldr	r3, [r7, #20]
   13330:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
   13332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13334:	2b80      	cmp	r3, #128	; 0x80
   13336:	d02e      	beq.n	13396 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13338:	2300      	movs	r3, #0
   1333a:	63bb      	str	r3, [r7, #56]	; 0x38
   1333c:	e01e      	b.n	1337c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   1333e:	68fa      	ldr	r2, [r7, #12]
   13340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13342:	3304      	adds	r3, #4
   13344:	00db      	lsls	r3, r3, #3
   13346:	18d3      	adds	r3, r2, r3
   13348:	3304      	adds	r3, #4
   1334a:	681b      	ldr	r3, [r3, #0]
   1334c:	2b00      	cmp	r3, #0
   1334e:	d112      	bne.n	13376 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   13350:	68fa      	ldr	r2, [r7, #12]
   13352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13354:	3304      	adds	r3, #4
   13356:	00db      	lsls	r3, r3, #3
   13358:	18d3      	adds	r3, r2, r3
   1335a:	3304      	adds	r3, #4
   1335c:	68ba      	ldr	r2, [r7, #8]
   1335e:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = messageHandler;
   13360:	68fa      	ldr	r2, [r7, #12]
   13362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13364:	3304      	adds	r3, #4
   13366:	00db      	lsls	r3, r3, #3
   13368:	18d3      	adds	r3, r2, r3
   1336a:	3308      	adds	r3, #8
   1336c:	683a      	ldr	r2, [r7, #0]
   1336e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   13370:	2300      	movs	r3, #0
   13372:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
   13374:	e00f      	b.n	13396 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13378:	3301      	adds	r3, #1
   1337a:	63bb      	str	r3, [r7, #56]	; 0x38
   1337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1337e:	2b04      	cmp	r3, #4
   13380:	dddd      	ble.n	1333e <MQTTSubscribe+0x10e>
   13382:	e008      	b.n	13396 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = MQTTCLIENT_FAILURE;
   13384:	2301      	movs	r3, #1
   13386:	425b      	negs	r3, r3
   13388:	63fb      	str	r3, [r7, #60]	; 0x3c
   1338a:	e004      	b.n	13396 <MQTTSubscribe+0x166>
		goto exit;
   1338c:	46c0      	nop			; (mov r8, r8)
   1338e:	e002      	b.n	13396 <MQTTSubscribe+0x166>
        goto exit;
   13390:	46c0      	nop			; (mov r8, r8)
   13392:	e000      	b.n	13396 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   13394:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   13396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13398:	0018      	movs	r0, r3
   1339a:	46bd      	mov	sp, r7
   1339c:	b010      	add	sp, #64	; 0x40
   1339e:	bdb0      	pop	{r4, r5, r7, pc}
   133a0:	00014679 	.word	0x00014679
   133a4:	0001473d 	.word	0x0001473d
   133a8:	0001290d 	.word	0x0001290d
   133ac:	0001437d 	.word	0x0001437d
   133b0:	0001293d 	.word	0x0001293d
   133b4:	000130a5 	.word	0x000130a5
   133b8:	000144cd 	.word	0x000144cd

000133bc <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   133bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   133be:	46ce      	mov	lr, r9
   133c0:	4647      	mov	r7, r8
   133c2:	b580      	push	{r7, lr}
   133c4:	b097      	sub	sp, #92	; 0x5c
   133c6:	af08      	add	r7, sp, #32
   133c8:	60f8      	str	r0, [r7, #12]
   133ca:	60b9      	str	r1, [r7, #8]
   133cc:	607a      	str	r2, [r7, #4]
    int rc = MQTTCLIENT_FAILURE;
   133ce:	2301      	movs	r3, #1
   133d0:	425b      	negs	r3, r3
   133d2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   133d4:	231c      	movs	r3, #28
   133d6:	18fb      	adds	r3, r7, r3
   133d8:	2200      	movs	r2, #0
   133da:	601a      	str	r2, [r3, #0]
   133dc:	231c      	movs	r3, #28
   133de:	18fb      	adds	r3, r7, r3
   133e0:	2200      	movs	r2, #0
   133e2:	605a      	str	r2, [r3, #4]
   133e4:	231c      	movs	r3, #28
   133e6:	18fb      	adds	r3, r7, r3
   133e8:	2200      	movs	r2, #0
   133ea:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   133ec:	231c      	movs	r3, #28
   133ee:	18fb      	adds	r3, r7, r3
   133f0:	68ba      	ldr	r2, [r7, #8]
   133f2:	601a      	str	r2, [r3, #0]
    int len = 0;
   133f4:	2300      	movs	r3, #0
   133f6:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   133f8:	68fb      	ldr	r3, [r7, #12]
   133fa:	6a1b      	ldr	r3, [r3, #32]
   133fc:	2b00      	cmp	r3, #0
   133fe:	d100      	bne.n	13402 <MQTTPublish+0x46>
   13400:	e0a0      	b.n	13544 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   13402:	2328      	movs	r3, #40	; 0x28
   13404:	18fb      	adds	r3, r7, r3
   13406:	0018      	movs	r0, r3
   13408:	4b55      	ldr	r3, [pc, #340]	; (13560 <MQTTPublish+0x1a4>)
   1340a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1340c:	68fb      	ldr	r3, [r7, #12]
   1340e:	685a      	ldr	r2, [r3, #4]
   13410:	2328      	movs	r3, #40	; 0x28
   13412:	18fb      	adds	r3, r7, r3
   13414:	0011      	movs	r1, r2
   13416:	0018      	movs	r0, r3
   13418:	4b52      	ldr	r3, [pc, #328]	; (13564 <MQTTPublish+0x1a8>)
   1341a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1341c:	687b      	ldr	r3, [r7, #4]
   1341e:	781b      	ldrb	r3, [r3, #0]
   13420:	2b01      	cmp	r3, #1
   13422:	d003      	beq.n	1342c <MQTTPublish+0x70>
   13424:	687b      	ldr	r3, [r7, #4]
   13426:	781b      	ldrb	r3, [r3, #0]
   13428:	2b02      	cmp	r3, #2
   1342a:	d107      	bne.n	1343c <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   1342c:	68fb      	ldr	r3, [r7, #12]
   1342e:	0018      	movs	r0, r3
   13430:	4b4d      	ldr	r3, [pc, #308]	; (13568 <MQTTPublish+0x1ac>)
   13432:	4798      	blx	r3
   13434:	0003      	movs	r3, r0
   13436:	b29a      	uxth	r2, r3
   13438:	687b      	ldr	r3, [r7, #4]
   1343a:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1343c:	68fb      	ldr	r3, [r7, #12]
   1343e:	691b      	ldr	r3, [r3, #16]
   13440:	469c      	mov	ip, r3
   13442:	68fb      	ldr	r3, [r7, #12]
   13444:	689b      	ldr	r3, [r3, #8]
   13446:	001d      	movs	r5, r3
   13448:	687b      	ldr	r3, [r7, #4]
   1344a:	781b      	ldrb	r3, [r3, #0]
   1344c:	001e      	movs	r6, r3
   1344e:	687b      	ldr	r3, [r7, #4]
   13450:	785b      	ldrb	r3, [r3, #1]
   13452:	4698      	mov	r8, r3
   13454:	687b      	ldr	r3, [r7, #4]
   13456:	889b      	ldrh	r3, [r3, #4]
   13458:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	689a      	ldr	r2, [r3, #8]
   1345e:	687b      	ldr	r3, [r7, #4]
   13460:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   13462:	9306      	str	r3, [sp, #24]
   13464:	9205      	str	r2, [sp, #20]
   13466:	231c      	movs	r3, #28
   13468:	18fa      	adds	r2, r7, r3
   1346a:	2308      	movs	r3, #8
   1346c:	446b      	add	r3, sp
   1346e:	ca13      	ldmia	r2!, {r0, r1, r4}
   13470:	c313      	stmia	r3!, {r0, r1, r4}
   13472:	464b      	mov	r3, r9
   13474:	9301      	str	r3, [sp, #4]
   13476:	4643      	mov	r3, r8
   13478:	9300      	str	r3, [sp, #0]
   1347a:	0033      	movs	r3, r6
   1347c:	2200      	movs	r2, #0
   1347e:	0029      	movs	r1, r5
   13480:	4660      	mov	r0, ip
   13482:	4c3a      	ldr	r4, [pc, #232]	; (1356c <MQTTPublish+0x1b0>)
   13484:	47a0      	blx	r4
   13486:	0003      	movs	r3, r0
   13488:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1348c:	2b00      	cmp	r3, #0
   1348e:	dd5b      	ble.n	13548 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
   13490:	2328      	movs	r3, #40	; 0x28
   13492:	18fa      	adds	r2, r7, r3
   13494:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13496:	68fb      	ldr	r3, [r7, #12]
   13498:	0018      	movs	r0, r3
   1349a:	4b35      	ldr	r3, [pc, #212]	; (13570 <MQTTPublish+0x1b4>)
   1349c:	4798      	blx	r3
   1349e:	0003      	movs	r3, r0
   134a0:	637b      	str	r3, [r7, #52]	; 0x34
   134a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   134a4:	2b00      	cmp	r3, #0
   134a6:	d151      	bne.n	1354c <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   134a8:	687b      	ldr	r3, [r7, #4]
   134aa:	781b      	ldrb	r3, [r3, #0]
   134ac:	2b01      	cmp	r3, #1
   134ae:	d122      	bne.n	134f6 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   134b0:	2328      	movs	r3, #40	; 0x28
   134b2:	18fa      	adds	r2, r7, r3
   134b4:	68fb      	ldr	r3, [r7, #12]
   134b6:	2104      	movs	r1, #4
   134b8:	0018      	movs	r0, r3
   134ba:	4b2e      	ldr	r3, [pc, #184]	; (13574 <MQTTPublish+0x1b8>)
   134bc:	4798      	blx	r3
   134be:	0003      	movs	r3, r0
   134c0:	2b04      	cmp	r3, #4
   134c2:	d114      	bne.n	134ee <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   134c4:	68fb      	ldr	r3, [r7, #12]
   134c6:	695c      	ldr	r4, [r3, #20]
   134c8:	68fb      	ldr	r3, [r7, #12]
   134ca:	68db      	ldr	r3, [r3, #12]
   134cc:	221a      	movs	r2, #26
   134ce:	18ba      	adds	r2, r7, r2
   134d0:	2119      	movs	r1, #25
   134d2:	1879      	adds	r1, r7, r1
   134d4:	2018      	movs	r0, #24
   134d6:	1838      	adds	r0, r7, r0
   134d8:	9300      	str	r3, [sp, #0]
   134da:	0023      	movs	r3, r4
   134dc:	4c26      	ldr	r4, [pc, #152]	; (13578 <MQTTPublish+0x1bc>)
   134de:	47a0      	blx	r4
   134e0:	0003      	movs	r3, r0
   134e2:	2b01      	cmp	r3, #1
   134e4:	d033      	beq.n	1354e <MQTTPublish+0x192>
                rc = MQTTCLIENT_FAILURE;
   134e6:	2301      	movs	r3, #1
   134e8:	425b      	negs	r3, r3
   134ea:	637b      	str	r3, [r7, #52]	; 0x34
   134ec:	e02f      	b.n	1354e <MQTTPublish+0x192>
        }
        else
            rc = MQTTCLIENT_FAILURE;
   134ee:	2301      	movs	r3, #1
   134f0:	425b      	negs	r3, r3
   134f2:	637b      	str	r3, [r7, #52]	; 0x34
   134f4:	e02b      	b.n	1354e <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   134f6:	687b      	ldr	r3, [r7, #4]
   134f8:	781b      	ldrb	r3, [r3, #0]
   134fa:	2b02      	cmp	r3, #2
   134fc:	d127      	bne.n	1354e <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   134fe:	2328      	movs	r3, #40	; 0x28
   13500:	18fa      	adds	r2, r7, r3
   13502:	68fb      	ldr	r3, [r7, #12]
   13504:	2107      	movs	r1, #7
   13506:	0018      	movs	r0, r3
   13508:	4b1a      	ldr	r3, [pc, #104]	; (13574 <MQTTPublish+0x1b8>)
   1350a:	4798      	blx	r3
   1350c:	0003      	movs	r3, r0
   1350e:	2b07      	cmp	r3, #7
   13510:	d114      	bne.n	1353c <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13512:	68fb      	ldr	r3, [r7, #12]
   13514:	695c      	ldr	r4, [r3, #20]
   13516:	68fb      	ldr	r3, [r7, #12]
   13518:	68db      	ldr	r3, [r3, #12]
   1351a:	2216      	movs	r2, #22
   1351c:	18ba      	adds	r2, r7, r2
   1351e:	2115      	movs	r1, #21
   13520:	1879      	adds	r1, r7, r1
   13522:	2014      	movs	r0, #20
   13524:	1838      	adds	r0, r7, r0
   13526:	9300      	str	r3, [sp, #0]
   13528:	0023      	movs	r3, r4
   1352a:	4c13      	ldr	r4, [pc, #76]	; (13578 <MQTTPublish+0x1bc>)
   1352c:	47a0      	blx	r4
   1352e:	0003      	movs	r3, r0
   13530:	2b01      	cmp	r3, #1
   13532:	d00c      	beq.n	1354e <MQTTPublish+0x192>
                rc = MQTTCLIENT_FAILURE;
   13534:	2301      	movs	r3, #1
   13536:	425b      	negs	r3, r3
   13538:	637b      	str	r3, [r7, #52]	; 0x34
   1353a:	e008      	b.n	1354e <MQTTPublish+0x192>
        }
        else
            rc = MQTTCLIENT_FAILURE;
   1353c:	2301      	movs	r3, #1
   1353e:	425b      	negs	r3, r3
   13540:	637b      	str	r3, [r7, #52]	; 0x34
   13542:	e004      	b.n	1354e <MQTTPublish+0x192>
		goto exit;
   13544:	46c0      	nop			; (mov r8, r8)
   13546:	e002      	b.n	1354e <MQTTPublish+0x192>
        goto exit;
   13548:	46c0      	nop			; (mov r8, r8)
   1354a:	e000      	b.n	1354e <MQTTPublish+0x192>
        goto exit; // there was a problem
   1354c:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   13550:	0018      	movs	r0, r3
   13552:	46bd      	mov	sp, r7
   13554:	b00f      	add	sp, #60	; 0x3c
   13556:	bc0c      	pop	{r2, r3}
   13558:	4690      	mov	r8, r2
   1355a:	4699      	mov	r9, r3
   1355c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1355e:	46c0      	nop			; (mov r8, r8)
   13560:	00014679 	.word	0x00014679
   13564:	0001473d 	.word	0x0001473d
   13568:	0001290d 	.word	0x0001290d
   1356c:	000140c9 	.word	0x000140c9
   13570:	0001293d 	.word	0x0001293d
   13574:	000130a5 	.word	0x000130a5
   13578:	00013b41 	.word	0x00013b41

0001357c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1357c:	b590      	push	{r4, r7, lr}
   1357e:	b085      	sub	sp, #20
   13580:	af00      	add	r7, sp, #0
   13582:	6078      	str	r0, [r7, #4]
	int len = 0;
   13584:	2300      	movs	r3, #0
   13586:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   13588:	687b      	ldr	r3, [r7, #4]
   1358a:	7a1b      	ldrb	r3, [r3, #8]
   1358c:	2b03      	cmp	r3, #3
   1358e:	d102      	bne.n	13596 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   13590:	230c      	movs	r3, #12
   13592:	60fb      	str	r3, [r7, #12]
   13594:	e005      	b.n	135a2 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   13596:	687b      	ldr	r3, [r7, #4]
   13598:	7a1b      	ldrb	r3, [r3, #8]
   1359a:	2b04      	cmp	r3, #4
   1359c:	d101      	bne.n	135a2 <MQTTSerialize_connectLength+0x26>
		len = 10;
   1359e:	230a      	movs	r3, #10
   135a0:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   135a2:	687b      	ldr	r3, [r7, #4]
   135a4:	68d8      	ldr	r0, [r3, #12]
   135a6:	6919      	ldr	r1, [r3, #16]
   135a8:	695a      	ldr	r2, [r3, #20]
   135aa:	4b25      	ldr	r3, [pc, #148]	; (13640 <MQTTSerialize_connectLength+0xc4>)
   135ac:	4798      	blx	r3
   135ae:	0003      	movs	r3, r0
   135b0:	3302      	adds	r3, #2
   135b2:	68fa      	ldr	r2, [r7, #12]
   135b4:	18d3      	adds	r3, r2, r3
   135b6:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   135b8:	687b      	ldr	r3, [r7, #4]
   135ba:	7edb      	ldrb	r3, [r3, #27]
   135bc:	2b00      	cmp	r3, #0
   135be:	d013      	beq.n	135e8 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   135c0:	687b      	ldr	r3, [r7, #4]
   135c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
   135c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
   135c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   135c8:	4b1d      	ldr	r3, [pc, #116]	; (13640 <MQTTSerialize_connectLength+0xc4>)
   135ca:	4798      	blx	r3
   135cc:	0003      	movs	r3, r0
   135ce:	1c9c      	adds	r4, r3, #2
   135d0:	687b      	ldr	r3, [r7, #4]
   135d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
   135d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   135d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   135d8:	4b19      	ldr	r3, [pc, #100]	; (13640 <MQTTSerialize_connectLength+0xc4>)
   135da:	4798      	blx	r3
   135dc:	0003      	movs	r3, r0
   135de:	18e3      	adds	r3, r4, r3
   135e0:	3302      	adds	r3, #2
   135e2:	68fa      	ldr	r2, [r7, #12]
   135e4:	18d3      	adds	r3, r2, r3
   135e6:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   135e8:	687b      	ldr	r3, [r7, #4]
   135ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   135ec:	2b00      	cmp	r3, #0
   135ee:	d103      	bne.n	135f8 <MQTTSerialize_connectLength+0x7c>
   135f0:	687b      	ldr	r3, [r7, #4]
   135f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   135f4:	2b00      	cmp	r3, #0
   135f6:	d00a      	beq.n	1360e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   135f8:	687b      	ldr	r3, [r7, #4]
   135fa:	6c18      	ldr	r0, [r3, #64]	; 0x40
   135fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
   135fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   13600:	4b0f      	ldr	r3, [pc, #60]	; (13640 <MQTTSerialize_connectLength+0xc4>)
   13602:	4798      	blx	r3
   13604:	0003      	movs	r3, r0
   13606:	3302      	adds	r3, #2
   13608:	68fa      	ldr	r2, [r7, #12]
   1360a:	18d3      	adds	r3, r2, r3
   1360c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   1360e:	687b      	ldr	r3, [r7, #4]
   13610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13612:	2b00      	cmp	r3, #0
   13614:	d103      	bne.n	1361e <MQTTSerialize_connectLength+0xa2>
   13616:	687b      	ldr	r3, [r7, #4]
   13618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1361a:	2b00      	cmp	r3, #0
   1361c:	d00a      	beq.n	13634 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   1361e:	687b      	ldr	r3, [r7, #4]
   13620:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   13622:	6d19      	ldr	r1, [r3, #80]	; 0x50
   13624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   13626:	4b06      	ldr	r3, [pc, #24]	; (13640 <MQTTSerialize_connectLength+0xc4>)
   13628:	4798      	blx	r3
   1362a:	0003      	movs	r3, r0
   1362c:	3302      	adds	r3, #2
   1362e:	68fa      	ldr	r2, [r7, #12]
   13630:	18d3      	adds	r3, r2, r3
   13632:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   13634:	68fb      	ldr	r3, [r7, #12]
}
   13636:	0018      	movs	r0, r3
   13638:	46bd      	mov	sp, r7
   1363a:	b005      	add	sp, #20
   1363c:	bd90      	pop	{r4, r7, pc}
   1363e:	46c0      	nop			; (mov r8, r8)
   13640:	00013fc9 	.word	0x00013fc9

00013644 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   13644:	b590      	push	{r4, r7, lr}
   13646:	b08b      	sub	sp, #44	; 0x2c
   13648:	af00      	add	r7, sp, #0
   1364a:	60f8      	str	r0, [r7, #12]
   1364c:	60b9      	str	r1, [r7, #8]
   1364e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   13650:	68fb      	ldr	r3, [r7, #12]
   13652:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   13654:	2300      	movs	r3, #0
   13656:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   13658:	2300      	movs	r3, #0
   1365a:	617b      	str	r3, [r7, #20]
	int len = 0;
   1365c:	2300      	movs	r3, #0
   1365e:	623b      	str	r3, [r7, #32]
	int rc = -1;
   13660:	2301      	movs	r3, #1
   13662:	425b      	negs	r3, r3
   13664:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   13666:	687b      	ldr	r3, [r7, #4]
   13668:	0018      	movs	r0, r3
   1366a:	4b8c      	ldr	r3, [pc, #560]	; (1389c <MQTTSerialize_connect+0x258>)
   1366c:	4798      	blx	r3
   1366e:	0003      	movs	r3, r0
   13670:	623b      	str	r3, [r7, #32]
   13672:	6a3b      	ldr	r3, [r7, #32]
   13674:	0018      	movs	r0, r3
   13676:	4b8a      	ldr	r3, [pc, #552]	; (138a0 <MQTTSerialize_connect+0x25c>)
   13678:	4798      	blx	r3
   1367a:	0002      	movs	r2, r0
   1367c:	68bb      	ldr	r3, [r7, #8]
   1367e:	429a      	cmp	r2, r3
   13680:	dd03      	ble.n	1368a <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   13682:	2302      	movs	r3, #2
   13684:	425b      	negs	r3, r3
   13686:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   13688:	e103      	b.n	13892 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1368a:	2318      	movs	r3, #24
   1368c:	18fb      	adds	r3, r7, r3
   1368e:	2200      	movs	r2, #0
   13690:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   13692:	2318      	movs	r3, #24
   13694:	18fb      	adds	r3, r7, r3
   13696:	781a      	ldrb	r2, [r3, #0]
   13698:	210f      	movs	r1, #15
   1369a:	400a      	ands	r2, r1
   1369c:	1c11      	adds	r1, r2, #0
   1369e:	2210      	movs	r2, #16
   136a0:	430a      	orrs	r2, r1
   136a2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   136a4:	2318      	movs	r3, #24
   136a6:	18fb      	adds	r3, r7, r3
   136a8:	781a      	ldrb	r2, [r3, #0]
   136aa:	231c      	movs	r3, #28
   136ac:	18fb      	adds	r3, r7, r3
   136ae:	0011      	movs	r1, r2
   136b0:	0018      	movs	r0, r3
   136b2:	4b7c      	ldr	r3, [pc, #496]	; (138a4 <MQTTSerialize_connect+0x260>)
   136b4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   136b6:	69fb      	ldr	r3, [r7, #28]
   136b8:	6a3a      	ldr	r2, [r7, #32]
   136ba:	0011      	movs	r1, r2
   136bc:	0018      	movs	r0, r3
   136be:	4b7a      	ldr	r3, [pc, #488]	; (138a8 <MQTTSerialize_connect+0x264>)
   136c0:	4798      	blx	r3
   136c2:	0002      	movs	r2, r0
   136c4:	69fb      	ldr	r3, [r7, #28]
   136c6:	189b      	adds	r3, r3, r2
   136c8:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   136ca:	687b      	ldr	r3, [r7, #4]
   136cc:	7a1b      	ldrb	r3, [r3, #8]
   136ce:	2b04      	cmp	r3, #4
   136d0:	d10d      	bne.n	136ee <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   136d2:	4a76      	ldr	r2, [pc, #472]	; (138ac <MQTTSerialize_connect+0x268>)
   136d4:	231c      	movs	r3, #28
   136d6:	18fb      	adds	r3, r7, r3
   136d8:	0011      	movs	r1, r2
   136da:	0018      	movs	r0, r3
   136dc:	4b74      	ldr	r3, [pc, #464]	; (138b0 <MQTTSerialize_connect+0x26c>)
   136de:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   136e0:	231c      	movs	r3, #28
   136e2:	18fb      	adds	r3, r7, r3
   136e4:	2104      	movs	r1, #4
   136e6:	0018      	movs	r0, r3
   136e8:	4b6e      	ldr	r3, [pc, #440]	; (138a4 <MQTTSerialize_connect+0x260>)
   136ea:	4798      	blx	r3
   136ec:	e00c      	b.n	13708 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   136ee:	4a71      	ldr	r2, [pc, #452]	; (138b4 <MQTTSerialize_connect+0x270>)
   136f0:	231c      	movs	r3, #28
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	0011      	movs	r1, r2
   136f6:	0018      	movs	r0, r3
   136f8:	4b6d      	ldr	r3, [pc, #436]	; (138b0 <MQTTSerialize_connect+0x26c>)
   136fa:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   136fc:	231c      	movs	r3, #28
   136fe:	18fb      	adds	r3, r7, r3
   13700:	2103      	movs	r1, #3
   13702:	0018      	movs	r0, r3
   13704:	4b67      	ldr	r3, [pc, #412]	; (138a4 <MQTTSerialize_connect+0x260>)
   13706:	4798      	blx	r3
	}

	flags.all = 0;
   13708:	2314      	movs	r3, #20
   1370a:	18fb      	adds	r3, r7, r3
   1370c:	2200      	movs	r2, #0
   1370e:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   13710:	687b      	ldr	r3, [r7, #4]
   13712:	7e9b      	ldrb	r3, [r3, #26]
   13714:	1c1a      	adds	r2, r3, #0
   13716:	2301      	movs	r3, #1
   13718:	4013      	ands	r3, r2
   1371a:	b2da      	uxtb	r2, r3
   1371c:	2314      	movs	r3, #20
   1371e:	18fb      	adds	r3, r7, r3
   13720:	2101      	movs	r1, #1
   13722:	400a      	ands	r2, r1
   13724:	1890      	adds	r0, r2, r2
   13726:	781a      	ldrb	r2, [r3, #0]
   13728:	2102      	movs	r1, #2
   1372a:	438a      	bics	r2, r1
   1372c:	1c11      	adds	r1, r2, #0
   1372e:	1c02      	adds	r2, r0, #0
   13730:	430a      	orrs	r2, r1
   13732:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   13734:	687b      	ldr	r3, [r7, #4]
   13736:	7edb      	ldrb	r3, [r3, #27]
   13738:	1e5a      	subs	r2, r3, #1
   1373a:	4193      	sbcs	r3, r2
   1373c:	b2da      	uxtb	r2, r3
   1373e:	2314      	movs	r3, #20
   13740:	18fb      	adds	r3, r7, r3
   13742:	2101      	movs	r1, #1
   13744:	400a      	ands	r2, r1
   13746:	0090      	lsls	r0, r2, #2
   13748:	781a      	ldrb	r2, [r3, #0]
   1374a:	2104      	movs	r1, #4
   1374c:	438a      	bics	r2, r1
   1374e:	1c11      	adds	r1, r2, #0
   13750:	1c02      	adds	r2, r0, #0
   13752:	430a      	orrs	r2, r1
   13754:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   13756:	2314      	movs	r3, #20
   13758:	18fb      	adds	r3, r7, r3
   1375a:	781b      	ldrb	r3, [r3, #0]
   1375c:	2204      	movs	r2, #4
   1375e:	4013      	ands	r3, r2
   13760:	b2db      	uxtb	r3, r3
   13762:	2b00      	cmp	r3, #0
   13764:	d025      	beq.n	137b2 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   13766:	687b      	ldr	r3, [r7, #4]
   13768:	223d      	movs	r2, #61	; 0x3d
   1376a:	5c9b      	ldrb	r3, [r3, r2]
   1376c:	1c1a      	adds	r2, r3, #0
   1376e:	2303      	movs	r3, #3
   13770:	4013      	ands	r3, r2
   13772:	b2da      	uxtb	r2, r3
   13774:	2314      	movs	r3, #20
   13776:	18fb      	adds	r3, r7, r3
   13778:	2103      	movs	r1, #3
   1377a:	400a      	ands	r2, r1
   1377c:	00d0      	lsls	r0, r2, #3
   1377e:	781a      	ldrb	r2, [r3, #0]
   13780:	2118      	movs	r1, #24
   13782:	438a      	bics	r2, r1
   13784:	1c11      	adds	r1, r2, #0
   13786:	1c02      	adds	r2, r0, #0
   13788:	430a      	orrs	r2, r1
   1378a:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   1378c:	687b      	ldr	r3, [r7, #4]
   1378e:	223c      	movs	r2, #60	; 0x3c
   13790:	5c9b      	ldrb	r3, [r3, r2]
   13792:	1c1a      	adds	r2, r3, #0
   13794:	2301      	movs	r3, #1
   13796:	4013      	ands	r3, r2
   13798:	b2da      	uxtb	r2, r3
   1379a:	2314      	movs	r3, #20
   1379c:	18fb      	adds	r3, r7, r3
   1379e:	2101      	movs	r1, #1
   137a0:	400a      	ands	r2, r1
   137a2:	0150      	lsls	r0, r2, #5
   137a4:	781a      	ldrb	r2, [r3, #0]
   137a6:	2120      	movs	r1, #32
   137a8:	438a      	bics	r2, r1
   137aa:	1c11      	adds	r1, r2, #0
   137ac:	1c02      	adds	r2, r0, #0
   137ae:	430a      	orrs	r2, r1
   137b0:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   137b2:	687b      	ldr	r3, [r7, #4]
   137b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   137b6:	2b00      	cmp	r3, #0
   137b8:	d103      	bne.n	137c2 <MQTTSerialize_connect+0x17e>
   137ba:	687b      	ldr	r3, [r7, #4]
   137bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   137be:	2b00      	cmp	r3, #0
   137c0:	d006      	beq.n	137d0 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   137c2:	2314      	movs	r3, #20
   137c4:	18fb      	adds	r3, r7, r3
   137c6:	781a      	ldrb	r2, [r3, #0]
   137c8:	2180      	movs	r1, #128	; 0x80
   137ca:	4249      	negs	r1, r1
   137cc:	430a      	orrs	r2, r1
   137ce:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   137d0:	687b      	ldr	r3, [r7, #4]
   137d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   137d4:	2b00      	cmp	r3, #0
   137d6:	d103      	bne.n	137e0 <MQTTSerialize_connect+0x19c>
   137d8:	687b      	ldr	r3, [r7, #4]
   137da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   137dc:	2b00      	cmp	r3, #0
   137de:	d005      	beq.n	137ec <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   137e0:	2314      	movs	r3, #20
   137e2:	18fb      	adds	r3, r7, r3
   137e4:	781a      	ldrb	r2, [r3, #0]
   137e6:	2140      	movs	r1, #64	; 0x40
   137e8:	430a      	orrs	r2, r1
   137ea:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   137ec:	2314      	movs	r3, #20
   137ee:	18fb      	adds	r3, r7, r3
   137f0:	781a      	ldrb	r2, [r3, #0]
   137f2:	231c      	movs	r3, #28
   137f4:	18fb      	adds	r3, r7, r3
   137f6:	0011      	movs	r1, r2
   137f8:	0018      	movs	r0, r3
   137fa:	4b2a      	ldr	r3, [pc, #168]	; (138a4 <MQTTSerialize_connect+0x260>)
   137fc:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   137fe:	687b      	ldr	r3, [r7, #4]
   13800:	8b1b      	ldrh	r3, [r3, #24]
   13802:	001a      	movs	r2, r3
   13804:	231c      	movs	r3, #28
   13806:	18fb      	adds	r3, r7, r3
   13808:	0011      	movs	r1, r2
   1380a:	0018      	movs	r0, r3
   1380c:	4b2a      	ldr	r3, [pc, #168]	; (138b8 <MQTTSerialize_connect+0x274>)
   1380e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   13810:	687b      	ldr	r3, [r7, #4]
   13812:	221c      	movs	r2, #28
   13814:	18b8      	adds	r0, r7, r2
   13816:	68d9      	ldr	r1, [r3, #12]
   13818:	691a      	ldr	r2, [r3, #16]
   1381a:	695b      	ldr	r3, [r3, #20]
   1381c:	4c27      	ldr	r4, [pc, #156]	; (138bc <MQTTSerialize_connect+0x278>)
   1381e:	47a0      	blx	r4
	if (options->willFlag)
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	7edb      	ldrb	r3, [r3, #27]
   13824:	2b00      	cmp	r3, #0
   13826:	d00f      	beq.n	13848 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   13828:	687b      	ldr	r3, [r7, #4]
   1382a:	221c      	movs	r2, #28
   1382c:	18b8      	adds	r0, r7, r2
   1382e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   13830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13834:	4c21      	ldr	r4, [pc, #132]	; (138bc <MQTTSerialize_connect+0x278>)
   13836:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   13838:	687b      	ldr	r3, [r7, #4]
   1383a:	221c      	movs	r2, #28
   1383c:	18b8      	adds	r0, r7, r2
   1383e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   13840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   13844:	4c1d      	ldr	r4, [pc, #116]	; (138bc <MQTTSerialize_connect+0x278>)
   13846:	47a0      	blx	r4
	}
	if (flags.bits.username)
   13848:	2314      	movs	r3, #20
   1384a:	18fb      	adds	r3, r7, r3
   1384c:	781b      	ldrb	r3, [r3, #0]
   1384e:	227f      	movs	r2, #127	; 0x7f
   13850:	4393      	bics	r3, r2
   13852:	b2db      	uxtb	r3, r3
   13854:	2b00      	cmp	r3, #0
   13856:	d007      	beq.n	13868 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   13858:	687b      	ldr	r3, [r7, #4]
   1385a:	221c      	movs	r2, #28
   1385c:	18b8      	adds	r0, r7, r2
   1385e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   13860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13864:	4c15      	ldr	r4, [pc, #84]	; (138bc <MQTTSerialize_connect+0x278>)
   13866:	47a0      	blx	r4
	if (flags.bits.password)
   13868:	2314      	movs	r3, #20
   1386a:	18fb      	adds	r3, r7, r3
   1386c:	781b      	ldrb	r3, [r3, #0]
   1386e:	2240      	movs	r2, #64	; 0x40
   13870:	4013      	ands	r3, r2
   13872:	b2db      	uxtb	r3, r3
   13874:	2b00      	cmp	r3, #0
   13876:	d007      	beq.n	13888 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   13878:	687b      	ldr	r3, [r7, #4]
   1387a:	221c      	movs	r2, #28
   1387c:	18b8      	adds	r0, r7, r2
   1387e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   13880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   13882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   13884:	4c0d      	ldr	r4, [pc, #52]	; (138bc <MQTTSerialize_connect+0x278>)
   13886:	47a0      	blx	r4

	rc = ptr - buf;
   13888:	69fb      	ldr	r3, [r7, #28]
   1388a:	001a      	movs	r2, r3
   1388c:	68fb      	ldr	r3, [r7, #12]
   1388e:	1ad3      	subs	r3, r2, r3
   13890:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   13892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13894:	0018      	movs	r0, r3
   13896:	46bd      	mov	sp, r7
   13898:	b00b      	add	sp, #44	; 0x2c
   1389a:	bd90      	pop	{r4, r7, pc}
   1389c:	0001357d 	.word	0x0001357d
   138a0:	00013ced 	.word	0x00013ced
   138a4:	00013e0f 	.word	0x00013e0f
   138a8:	00013bf5 	.word	0x00013bf5
   138ac:	00021080 	.word	0x00021080
   138b0:	00013e91 	.word	0x00013e91
   138b4:	00021088 	.word	0x00021088
   138b8:	00013e39 	.word	0x00013e39
   138bc:	00013ee1 	.word	0x00013ee1

000138c0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   138c0:	b580      	push	{r7, lr}
   138c2:	b08a      	sub	sp, #40	; 0x28
   138c4:	af00      	add	r7, sp, #0
   138c6:	60f8      	str	r0, [r7, #12]
   138c8:	60b9      	str	r1, [r7, #8]
   138ca:	607a      	str	r2, [r7, #4]
   138cc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   138ce:	2300      	movs	r3, #0
   138d0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   138d2:	687b      	ldr	r3, [r7, #4]
   138d4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   138d6:	2300      	movs	r3, #0
   138d8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   138da:	2300      	movs	r3, #0
   138dc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   138de:	2300      	movs	r3, #0
   138e0:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   138e2:	2318      	movs	r3, #24
   138e4:	18fb      	adds	r3, r7, r3
   138e6:	0018      	movs	r0, r3
   138e8:	4b25      	ldr	r3, [pc, #148]	; (13980 <MQTTDeserialize_connack+0xc0>)
   138ea:	4798      	blx	r3
   138ec:	0003      	movs	r3, r0
   138ee:	001a      	movs	r2, r3
   138f0:	231c      	movs	r3, #28
   138f2:	18fb      	adds	r3, r7, r3
   138f4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   138f6:	231c      	movs	r3, #28
   138f8:	18fb      	adds	r3, r7, r3
   138fa:	781b      	ldrb	r3, [r3, #0]
   138fc:	220f      	movs	r2, #15
   138fe:	4393      	bics	r3, r2
   13900:	b2db      	uxtb	r3, r3
   13902:	2b20      	cmp	r3, #32
   13904:	d134      	bne.n	13970 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13906:	69bb      	ldr	r3, [r7, #24]
   13908:	2214      	movs	r2, #20
   1390a:	18ba      	adds	r2, r7, r2
   1390c:	0011      	movs	r1, r2
   1390e:	0018      	movs	r0, r3
   13910:	4b1c      	ldr	r3, [pc, #112]	; (13984 <MQTTDeserialize_connack+0xc4>)
   13912:	4798      	blx	r3
   13914:	0003      	movs	r3, r0
   13916:	627b      	str	r3, [r7, #36]	; 0x24
   13918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1391a:	69bb      	ldr	r3, [r7, #24]
   1391c:	189b      	adds	r3, r3, r2
   1391e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   13920:	69bb      	ldr	r3, [r7, #24]
   13922:	697a      	ldr	r2, [r7, #20]
   13924:	189b      	adds	r3, r3, r2
   13926:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   13928:	6a3b      	ldr	r3, [r7, #32]
   1392a:	69ba      	ldr	r2, [r7, #24]
   1392c:	1a9b      	subs	r3, r3, r2
   1392e:	2b01      	cmp	r3, #1
   13930:	dd20      	ble.n	13974 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   13932:	2318      	movs	r3, #24
   13934:	18fb      	adds	r3, r7, r3
   13936:	0018      	movs	r0, r3
   13938:	4b11      	ldr	r3, [pc, #68]	; (13980 <MQTTDeserialize_connack+0xc0>)
   1393a:	4798      	blx	r3
   1393c:	0003      	movs	r3, r0
   1393e:	001a      	movs	r2, r3
   13940:	2310      	movs	r3, #16
   13942:	18fb      	adds	r3, r7, r3
   13944:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   13946:	2310      	movs	r3, #16
   13948:	18fb      	adds	r3, r7, r3
   1394a:	781b      	ldrb	r3, [r3, #0]
   1394c:	061b      	lsls	r3, r3, #24
   1394e:	0fdb      	lsrs	r3, r3, #31
   13950:	b2db      	uxtb	r3, r3
   13952:	001a      	movs	r2, r3
   13954:	68fb      	ldr	r3, [r7, #12]
   13956:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   13958:	2318      	movs	r3, #24
   1395a:	18fb      	adds	r3, r7, r3
   1395c:	0018      	movs	r0, r3
   1395e:	4b08      	ldr	r3, [pc, #32]	; (13980 <MQTTDeserialize_connack+0xc0>)
   13960:	4798      	blx	r3
   13962:	0003      	movs	r3, r0
   13964:	001a      	movs	r2, r3
   13966:	68bb      	ldr	r3, [r7, #8]
   13968:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1396a:	2301      	movs	r3, #1
   1396c:	627b      	str	r3, [r7, #36]	; 0x24
   1396e:	e002      	b.n	13976 <MQTTDeserialize_connack+0xb6>
		goto exit;
   13970:	46c0      	nop			; (mov r8, r8)
   13972:	e000      	b.n	13976 <MQTTDeserialize_connack+0xb6>
		goto exit;
   13974:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   13976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13978:	0018      	movs	r0, r3
   1397a:	46bd      	mov	sp, r7
   1397c:	b00a      	add	sp, #40	; 0x28
   1397e:	bd80      	pop	{r7, pc}
   13980:	00013de3 	.word	0x00013de3
   13984:	00013d7d 	.word	0x00013d7d

00013988 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   13988:	b580      	push	{r7, lr}
   1398a:	b088      	sub	sp, #32
   1398c:	af00      	add	r7, sp, #0
   1398e:	60f8      	str	r0, [r7, #12]
   13990:	60b9      	str	r1, [r7, #8]
   13992:	1dfb      	adds	r3, r7, #7
   13994:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   13996:	2300      	movs	r3, #0
   13998:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1399a:	2301      	movs	r3, #1
   1399c:	425b      	negs	r3, r3
   1399e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   139a0:	68fb      	ldr	r3, [r7, #12]
   139a2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   139a4:	68bb      	ldr	r3, [r7, #8]
   139a6:	2b01      	cmp	r3, #1
   139a8:	dc03      	bgt.n	139b2 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   139aa:	2302      	movs	r3, #2
   139ac:	425b      	negs	r3, r3
   139ae:	61fb      	str	r3, [r7, #28]
		goto exit;
   139b0:	e029      	b.n	13a06 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   139b2:	2318      	movs	r3, #24
   139b4:	18fb      	adds	r3, r7, r3
   139b6:	2200      	movs	r2, #0
   139b8:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   139ba:	1dfb      	adds	r3, r7, #7
   139bc:	781b      	ldrb	r3, [r3, #0]
   139be:	220f      	movs	r2, #15
   139c0:	4013      	ands	r3, r2
   139c2:	b2da      	uxtb	r2, r3
   139c4:	2318      	movs	r3, #24
   139c6:	18fb      	adds	r3, r7, r3
   139c8:	0110      	lsls	r0, r2, #4
   139ca:	781a      	ldrb	r2, [r3, #0]
   139cc:	210f      	movs	r1, #15
   139ce:	400a      	ands	r2, r1
   139d0:	1c11      	adds	r1, r2, #0
   139d2:	1c02      	adds	r2, r0, #0
   139d4:	430a      	orrs	r2, r1
   139d6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   139d8:	2318      	movs	r3, #24
   139da:	18fb      	adds	r3, r7, r3
   139dc:	781a      	ldrb	r2, [r3, #0]
   139de:	2314      	movs	r3, #20
   139e0:	18fb      	adds	r3, r7, r3
   139e2:	0011      	movs	r1, r2
   139e4:	0018      	movs	r0, r3
   139e6:	4b0a      	ldr	r3, [pc, #40]	; (13a10 <MQTTSerialize_zero+0x88>)
   139e8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   139ea:	697b      	ldr	r3, [r7, #20]
   139ec:	2100      	movs	r1, #0
   139ee:	0018      	movs	r0, r3
   139f0:	4b08      	ldr	r3, [pc, #32]	; (13a14 <MQTTSerialize_zero+0x8c>)
   139f2:	4798      	blx	r3
   139f4:	0002      	movs	r2, r0
   139f6:	697b      	ldr	r3, [r7, #20]
   139f8:	189b      	adds	r3, r3, r2
   139fa:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   139fc:	697b      	ldr	r3, [r7, #20]
   139fe:	001a      	movs	r2, r3
   13a00:	68fb      	ldr	r3, [r7, #12]
   13a02:	1ad3      	subs	r3, r2, r3
   13a04:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   13a06:	69fb      	ldr	r3, [r7, #28]
}
   13a08:	0018      	movs	r0, r3
   13a0a:	46bd      	mov	sp, r7
   13a0c:	b008      	add	sp, #32
   13a0e:	bd80      	pop	{r7, pc}
   13a10:	00013e0f 	.word	0x00013e0f
   13a14:	00013bf5 	.word	0x00013bf5

00013a18 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   13a18:	b580      	push	{r7, lr}
   13a1a:	b082      	sub	sp, #8
   13a1c:	af00      	add	r7, sp, #0
   13a1e:	6078      	str	r0, [r7, #4]
   13a20:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   13a22:	6839      	ldr	r1, [r7, #0]
   13a24:	687b      	ldr	r3, [r7, #4]
   13a26:	220c      	movs	r2, #12
   13a28:	0018      	movs	r0, r3
   13a2a:	4b03      	ldr	r3, [pc, #12]	; (13a38 <MQTTSerialize_pingreq+0x20>)
   13a2c:	4798      	blx	r3
   13a2e:	0003      	movs	r3, r0
}
   13a30:	0018      	movs	r0, r3
   13a32:	46bd      	mov	sp, r7
   13a34:	b002      	add	sp, #8
   13a36:	bd80      	pop	{r7, pc}
   13a38:	00013989 	.word	0x00013989

00013a3c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   13a3c:	b580      	push	{r7, lr}
   13a3e:	b08a      	sub	sp, #40	; 0x28
   13a40:	af00      	add	r7, sp, #0
   13a42:	60f8      	str	r0, [r7, #12]
   13a44:	60b9      	str	r1, [r7, #8]
   13a46:	607a      	str	r2, [r7, #4]
   13a48:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   13a4a:	2300      	movs	r3, #0
   13a4c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   13a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13a50:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   13a52:	2300      	movs	r3, #0
   13a54:	623b      	str	r3, [r7, #32]
	int rc = 0;
   13a56:	2300      	movs	r3, #0
   13a58:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   13a5a:	2300      	movs	r3, #0
   13a5c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   13a5e:	2318      	movs	r3, #24
   13a60:	18fb      	adds	r3, r7, r3
   13a62:	0018      	movs	r0, r3
   13a64:	4b32      	ldr	r3, [pc, #200]	; (13b30 <MQTTDeserialize_publish+0xf4>)
   13a66:	4798      	blx	r3
   13a68:	0003      	movs	r3, r0
   13a6a:	001a      	movs	r2, r3
   13a6c:	231c      	movs	r3, #28
   13a6e:	18fb      	adds	r3, r7, r3
   13a70:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   13a72:	231c      	movs	r3, #28
   13a74:	18fb      	adds	r3, r7, r3
   13a76:	781b      	ldrb	r3, [r3, #0]
   13a78:	220f      	movs	r2, #15
   13a7a:	4393      	bics	r3, r2
   13a7c:	b2db      	uxtb	r3, r3
   13a7e:	2b30      	cmp	r3, #48	; 0x30
   13a80:	d150      	bne.n	13b24 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   13a82:	231c      	movs	r3, #28
   13a84:	18fb      	adds	r3, r7, r3
   13a86:	781b      	ldrb	r3, [r3, #0]
   13a88:	071b      	lsls	r3, r3, #28
   13a8a:	0fdb      	lsrs	r3, r3, #31
   13a8c:	b2db      	uxtb	r3, r3
   13a8e:	001a      	movs	r2, r3
   13a90:	68fb      	ldr	r3, [r7, #12]
   13a92:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   13a94:	231c      	movs	r3, #28
   13a96:	18fb      	adds	r3, r7, r3
   13a98:	781b      	ldrb	r3, [r3, #0]
   13a9a:	075b      	lsls	r3, r3, #29
   13a9c:	0f9b      	lsrs	r3, r3, #30
   13a9e:	b2db      	uxtb	r3, r3
   13aa0:	001a      	movs	r2, r3
   13aa2:	68bb      	ldr	r3, [r7, #8]
   13aa4:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   13aa6:	231c      	movs	r3, #28
   13aa8:	18fb      	adds	r3, r7, r3
   13aaa:	781b      	ldrb	r3, [r3, #0]
   13aac:	07db      	lsls	r3, r3, #31
   13aae:	0fdb      	lsrs	r3, r3, #31
   13ab0:	b2db      	uxtb	r3, r3
   13ab2:	001a      	movs	r2, r3
   13ab4:	687b      	ldr	r3, [r7, #4]
   13ab6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13ab8:	69bb      	ldr	r3, [r7, #24]
   13aba:	2214      	movs	r2, #20
   13abc:	18ba      	adds	r2, r7, r2
   13abe:	0011      	movs	r1, r2
   13ac0:	0018      	movs	r0, r3
   13ac2:	4b1c      	ldr	r3, [pc, #112]	; (13b34 <MQTTDeserialize_publish+0xf8>)
   13ac4:	4798      	blx	r3
   13ac6:	0003      	movs	r3, r0
   13ac8:	627b      	str	r3, [r7, #36]	; 0x24
   13aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13acc:	69bb      	ldr	r3, [r7, #24]
   13ace:	189b      	adds	r3, r3, r2
   13ad0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   13ad2:	69bb      	ldr	r3, [r7, #24]
   13ad4:	697a      	ldr	r2, [r7, #20]
   13ad6:	189b      	adds	r3, r3, r2
   13ad8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   13ada:	6a3a      	ldr	r2, [r7, #32]
   13adc:	2318      	movs	r3, #24
   13ade:	18f9      	adds	r1, r7, r3
   13ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13ae2:	0018      	movs	r0, r3
   13ae4:	4b14      	ldr	r3, [pc, #80]	; (13b38 <MQTTDeserialize_publish+0xfc>)
   13ae6:	4798      	blx	r3
   13ae8:	1e03      	subs	r3, r0, #0
   13aea:	d01c      	beq.n	13b26 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   13aec:	6a3b      	ldr	r3, [r7, #32]
   13aee:	69ba      	ldr	r2, [r7, #24]
   13af0:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   13af2:	d418      	bmi.n	13b26 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   13af4:	68bb      	ldr	r3, [r7, #8]
   13af6:	681b      	ldr	r3, [r3, #0]
   13af8:	2b00      	cmp	r3, #0
   13afa:	dd08      	ble.n	13b0e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   13afc:	2318      	movs	r3, #24
   13afe:	18fb      	adds	r3, r7, r3
   13b00:	0018      	movs	r0, r3
   13b02:	4b0e      	ldr	r3, [pc, #56]	; (13b3c <MQTTDeserialize_publish+0x100>)
   13b04:	4798      	blx	r3
   13b06:	0003      	movs	r3, r0
   13b08:	b29a      	uxth	r2, r3
   13b0a:	683b      	ldr	r3, [r7, #0]
   13b0c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   13b0e:	6a3b      	ldr	r3, [r7, #32]
   13b10:	69ba      	ldr	r2, [r7, #24]
   13b12:	1a9a      	subs	r2, r3, r2
   13b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13b16:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   13b18:	69ba      	ldr	r2, [r7, #24]
   13b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b1c:	601a      	str	r2, [r3, #0]
	rc = 1;
   13b1e:	2301      	movs	r3, #1
   13b20:	627b      	str	r3, [r7, #36]	; 0x24
   13b22:	e000      	b.n	13b26 <MQTTDeserialize_publish+0xea>
		goto exit;
   13b24:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   13b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13b28:	0018      	movs	r0, r3
   13b2a:	46bd      	mov	sp, r7
   13b2c:	b00a      	add	sp, #40	; 0x28
   13b2e:	bd80      	pop	{r7, pc}
   13b30:	00013de3 	.word	0x00013de3
   13b34:	00013d7d 	.word	0x00013d7d
   13b38:	00013f61 	.word	0x00013f61
   13b3c:	00013db1 	.word	0x00013db1

00013b40 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   13b40:	b580      	push	{r7, lr}
   13b42:	b08a      	sub	sp, #40	; 0x28
   13b44:	af00      	add	r7, sp, #0
   13b46:	60f8      	str	r0, [r7, #12]
   13b48:	60b9      	str	r1, [r7, #8]
   13b4a:	607a      	str	r2, [r7, #4]
   13b4c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   13b4e:	2300      	movs	r3, #0
   13b50:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   13b52:	683b      	ldr	r3, [r7, #0]
   13b54:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   13b56:	2300      	movs	r3, #0
   13b58:	623b      	str	r3, [r7, #32]
	int rc = 0;
   13b5a:	2300      	movs	r3, #0
   13b5c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   13b5e:	2318      	movs	r3, #24
   13b60:	18fb      	adds	r3, r7, r3
   13b62:	0018      	movs	r0, r3
   13b64:	4b20      	ldr	r3, [pc, #128]	; (13be8 <MQTTDeserialize_ack+0xa8>)
   13b66:	4798      	blx	r3
   13b68:	0003      	movs	r3, r0
   13b6a:	001a      	movs	r2, r3
   13b6c:	231c      	movs	r3, #28
   13b6e:	18fb      	adds	r3, r7, r3
   13b70:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   13b72:	231c      	movs	r3, #28
   13b74:	18fb      	adds	r3, r7, r3
   13b76:	781b      	ldrb	r3, [r3, #0]
   13b78:	071b      	lsls	r3, r3, #28
   13b7a:	0fdb      	lsrs	r3, r3, #31
   13b7c:	b2db      	uxtb	r3, r3
   13b7e:	001a      	movs	r2, r3
   13b80:	68bb      	ldr	r3, [r7, #8]
   13b82:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   13b84:	231c      	movs	r3, #28
   13b86:	18fb      	adds	r3, r7, r3
   13b88:	781b      	ldrb	r3, [r3, #0]
   13b8a:	061b      	lsls	r3, r3, #24
   13b8c:	0f1b      	lsrs	r3, r3, #28
   13b8e:	b2db      	uxtb	r3, r3
   13b90:	001a      	movs	r2, r3
   13b92:	68fb      	ldr	r3, [r7, #12]
   13b94:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13b96:	69bb      	ldr	r3, [r7, #24]
   13b98:	2214      	movs	r2, #20
   13b9a:	18ba      	adds	r2, r7, r2
   13b9c:	0011      	movs	r1, r2
   13b9e:	0018      	movs	r0, r3
   13ba0:	4b12      	ldr	r3, [pc, #72]	; (13bec <MQTTDeserialize_ack+0xac>)
   13ba2:	4798      	blx	r3
   13ba4:	0003      	movs	r3, r0
   13ba6:	627b      	str	r3, [r7, #36]	; 0x24
   13ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13baa:	69bb      	ldr	r3, [r7, #24]
   13bac:	189b      	adds	r3, r3, r2
   13bae:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   13bb0:	69bb      	ldr	r3, [r7, #24]
   13bb2:	697a      	ldr	r2, [r7, #20]
   13bb4:	189b      	adds	r3, r3, r2
   13bb6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   13bb8:	6a3b      	ldr	r3, [r7, #32]
   13bba:	69ba      	ldr	r2, [r7, #24]
   13bbc:	1a9b      	subs	r3, r3, r2
   13bbe:	2b01      	cmp	r3, #1
   13bc0:	dd0b      	ble.n	13bda <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   13bc2:	2318      	movs	r3, #24
   13bc4:	18fb      	adds	r3, r7, r3
   13bc6:	0018      	movs	r0, r3
   13bc8:	4b09      	ldr	r3, [pc, #36]	; (13bf0 <MQTTDeserialize_ack+0xb0>)
   13bca:	4798      	blx	r3
   13bcc:	0003      	movs	r3, r0
   13bce:	b29a      	uxth	r2, r3
   13bd0:	687b      	ldr	r3, [r7, #4]
   13bd2:	801a      	strh	r2, [r3, #0]

	rc = 1;
   13bd4:	2301      	movs	r3, #1
   13bd6:	627b      	str	r3, [r7, #36]	; 0x24
   13bd8:	e000      	b.n	13bdc <MQTTDeserialize_ack+0x9c>
		goto exit;
   13bda:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   13bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13bde:	0018      	movs	r0, r3
   13be0:	46bd      	mov	sp, r7
   13be2:	b00a      	add	sp, #40	; 0x28
   13be4:	bd80      	pop	{r7, pc}
   13be6:	46c0      	nop			; (mov r8, r8)
   13be8:	00013de3 	.word	0x00013de3
   13bec:	00013d7d 	.word	0x00013d7d
   13bf0:	00013db1 	.word	0x00013db1

00013bf4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   13bf4:	b580      	push	{r7, lr}
   13bf6:	b084      	sub	sp, #16
   13bf8:	af00      	add	r7, sp, #0
   13bfa:	6078      	str	r0, [r7, #4]
   13bfc:	6039      	str	r1, [r7, #0]
	int rc = 0;
   13bfe:	2300      	movs	r3, #0
   13c00:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   13c02:	683b      	ldr	r3, [r7, #0]
   13c04:	4a17      	ldr	r2, [pc, #92]	; (13c64 <MQTTPacket_encode+0x70>)
   13c06:	4013      	ands	r3, r2
   13c08:	d504      	bpl.n	13c14 <MQTTPacket_encode+0x20>
   13c0a:	3b01      	subs	r3, #1
   13c0c:	2280      	movs	r2, #128	; 0x80
   13c0e:	4252      	negs	r2, r2
   13c10:	4313      	orrs	r3, r2
   13c12:	3301      	adds	r3, #1
   13c14:	001a      	movs	r2, r3
   13c16:	230b      	movs	r3, #11
   13c18:	18fb      	adds	r3, r7, r3
   13c1a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   13c1c:	683b      	ldr	r3, [r7, #0]
   13c1e:	2b00      	cmp	r3, #0
   13c20:	da00      	bge.n	13c24 <MQTTPacket_encode+0x30>
   13c22:	337f      	adds	r3, #127	; 0x7f
   13c24:	11db      	asrs	r3, r3, #7
   13c26:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   13c28:	683b      	ldr	r3, [r7, #0]
   13c2a:	2b00      	cmp	r3, #0
   13c2c:	dd08      	ble.n	13c40 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   13c2e:	230b      	movs	r3, #11
   13c30:	18fb      	adds	r3, r7, r3
   13c32:	220b      	movs	r2, #11
   13c34:	18ba      	adds	r2, r7, r2
   13c36:	7812      	ldrb	r2, [r2, #0]
   13c38:	2180      	movs	r1, #128	; 0x80
   13c3a:	4249      	negs	r1, r1
   13c3c:	430a      	orrs	r2, r1
   13c3e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   13c40:	68fb      	ldr	r3, [r7, #12]
   13c42:	1c5a      	adds	r2, r3, #1
   13c44:	60fa      	str	r2, [r7, #12]
   13c46:	001a      	movs	r2, r3
   13c48:	687b      	ldr	r3, [r7, #4]
   13c4a:	189b      	adds	r3, r3, r2
   13c4c:	220b      	movs	r2, #11
   13c4e:	18ba      	adds	r2, r7, r2
   13c50:	7812      	ldrb	r2, [r2, #0]
   13c52:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   13c54:	683b      	ldr	r3, [r7, #0]
   13c56:	2b00      	cmp	r3, #0
   13c58:	dcd3      	bgt.n	13c02 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   13c5a:	68fb      	ldr	r3, [r7, #12]
}
   13c5c:	0018      	movs	r0, r3
   13c5e:	46bd      	mov	sp, r7
   13c60:	b004      	add	sp, #16
   13c62:	bd80      	pop	{r7, pc}
   13c64:	8000007f 	.word	0x8000007f

00013c68 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   13c68:	b580      	push	{r7, lr}
   13c6a:	b086      	sub	sp, #24
   13c6c:	af00      	add	r7, sp, #0
   13c6e:	6078      	str	r0, [r7, #4]
   13c70:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   13c72:	2301      	movs	r3, #1
   13c74:	617b      	str	r3, [r7, #20]
	int len = 0;
   13c76:	2300      	movs	r3, #0
   13c78:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   13c7a:	683b      	ldr	r3, [r7, #0]
   13c7c:	2200      	movs	r2, #0
   13c7e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   13c80:	2301      	movs	r3, #1
   13c82:	425b      	negs	r3, r3
   13c84:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   13c86:	693b      	ldr	r3, [r7, #16]
   13c88:	3301      	adds	r3, #1
   13c8a:	613b      	str	r3, [r7, #16]
   13c8c:	693b      	ldr	r3, [r7, #16]
   13c8e:	2b04      	cmp	r3, #4
   13c90:	dd03      	ble.n	13c9a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   13c92:	2301      	movs	r3, #1
   13c94:	425b      	negs	r3, r3
   13c96:	60fb      	str	r3, [r7, #12]
			goto exit;
   13c98:	e022      	b.n	13ce0 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   13c9a:	230b      	movs	r3, #11
   13c9c:	18fa      	adds	r2, r7, r3
   13c9e:	687b      	ldr	r3, [r7, #4]
   13ca0:	2101      	movs	r1, #1
   13ca2:	0010      	movs	r0, r2
   13ca4:	4798      	blx	r3
   13ca6:	0003      	movs	r3, r0
   13ca8:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   13caa:	68fb      	ldr	r3, [r7, #12]
   13cac:	2b01      	cmp	r3, #1
   13cae:	d116      	bne.n	13cde <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   13cb0:	683b      	ldr	r3, [r7, #0]
   13cb2:	681a      	ldr	r2, [r3, #0]
   13cb4:	230b      	movs	r3, #11
   13cb6:	18fb      	adds	r3, r7, r3
   13cb8:	781b      	ldrb	r3, [r3, #0]
   13cba:	0019      	movs	r1, r3
   13cbc:	237f      	movs	r3, #127	; 0x7f
   13cbe:	400b      	ands	r3, r1
   13cc0:	6979      	ldr	r1, [r7, #20]
   13cc2:	434b      	muls	r3, r1
   13cc4:	18d2      	adds	r2, r2, r3
   13cc6:	683b      	ldr	r3, [r7, #0]
   13cc8:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   13cca:	697b      	ldr	r3, [r7, #20]
   13ccc:	01db      	lsls	r3, r3, #7
   13cce:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   13cd0:	230b      	movs	r3, #11
   13cd2:	18fb      	adds	r3, r7, r3
   13cd4:	781b      	ldrb	r3, [r3, #0]
   13cd6:	b25b      	sxtb	r3, r3
   13cd8:	2b00      	cmp	r3, #0
   13cda:	dbd1      	blt.n	13c80 <MQTTPacket_decode+0x18>
   13cdc:	e000      	b.n	13ce0 <MQTTPacket_decode+0x78>
			goto exit;
   13cde:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   13ce0:	693b      	ldr	r3, [r7, #16]
}
   13ce2:	0018      	movs	r0, r3
   13ce4:	46bd      	mov	sp, r7
   13ce6:	b006      	add	sp, #24
   13ce8:	bd80      	pop	{r7, pc}
	...

00013cec <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   13cec:	b580      	push	{r7, lr}
   13cee:	b082      	sub	sp, #8
   13cf0:	af00      	add	r7, sp, #0
   13cf2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   13cf4:	687b      	ldr	r3, [r7, #4]
   13cf6:	3301      	adds	r3, #1
   13cf8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   13cfa:	687b      	ldr	r3, [r7, #4]
   13cfc:	2b7f      	cmp	r3, #127	; 0x7f
   13cfe:	dc03      	bgt.n	13d08 <MQTTPacket_len+0x1c>
		rem_len += 1;
   13d00:	687b      	ldr	r3, [r7, #4]
   13d02:	3301      	adds	r3, #1
   13d04:	607b      	str	r3, [r7, #4]
   13d06:	e012      	b.n	13d2e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   13d08:	687b      	ldr	r3, [r7, #4]
   13d0a:	4a0b      	ldr	r2, [pc, #44]	; (13d38 <MQTTPacket_len+0x4c>)
   13d0c:	4293      	cmp	r3, r2
   13d0e:	dc03      	bgt.n	13d18 <MQTTPacket_len+0x2c>
		rem_len += 2;
   13d10:	687b      	ldr	r3, [r7, #4]
   13d12:	3302      	adds	r3, #2
   13d14:	607b      	str	r3, [r7, #4]
   13d16:	e00a      	b.n	13d2e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   13d18:	687b      	ldr	r3, [r7, #4]
   13d1a:	4a08      	ldr	r2, [pc, #32]	; (13d3c <MQTTPacket_len+0x50>)
   13d1c:	4293      	cmp	r3, r2
   13d1e:	dc03      	bgt.n	13d28 <MQTTPacket_len+0x3c>
		rem_len += 3;
   13d20:	687b      	ldr	r3, [r7, #4]
   13d22:	3303      	adds	r3, #3
   13d24:	607b      	str	r3, [r7, #4]
   13d26:	e002      	b.n	13d2e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   13d28:	687b      	ldr	r3, [r7, #4]
   13d2a:	3304      	adds	r3, #4
   13d2c:	607b      	str	r3, [r7, #4]
	return rem_len;
   13d2e:	687b      	ldr	r3, [r7, #4]
}
   13d30:	0018      	movs	r0, r3
   13d32:	46bd      	mov	sp, r7
   13d34:	b002      	add	sp, #8
   13d36:	bd80      	pop	{r7, pc}
   13d38:	00003fff 	.word	0x00003fff
   13d3c:	001ffffe 	.word	0x001ffffe

00013d40 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   13d40:	b580      	push	{r7, lr}
   13d42:	b084      	sub	sp, #16
   13d44:	af00      	add	r7, sp, #0
   13d46:	6078      	str	r0, [r7, #4]
   13d48:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   13d4a:	2300      	movs	r3, #0
   13d4c:	60fb      	str	r3, [r7, #12]
   13d4e:	e00a      	b.n	13d66 <bufchar+0x26>
		*c = *bufptr++;
   13d50:	4b09      	ldr	r3, [pc, #36]	; (13d78 <bufchar+0x38>)
   13d52:	681b      	ldr	r3, [r3, #0]
   13d54:	1c59      	adds	r1, r3, #1
   13d56:	4a08      	ldr	r2, [pc, #32]	; (13d78 <bufchar+0x38>)
   13d58:	6011      	str	r1, [r2, #0]
   13d5a:	781a      	ldrb	r2, [r3, #0]
   13d5c:	687b      	ldr	r3, [r7, #4]
   13d5e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   13d60:	68fb      	ldr	r3, [r7, #12]
   13d62:	3301      	adds	r3, #1
   13d64:	60fb      	str	r3, [r7, #12]
   13d66:	68fa      	ldr	r2, [r7, #12]
   13d68:	683b      	ldr	r3, [r7, #0]
   13d6a:	429a      	cmp	r2, r3
   13d6c:	dbf0      	blt.n	13d50 <bufchar+0x10>
	return count;
   13d6e:	683b      	ldr	r3, [r7, #0]
}
   13d70:	0018      	movs	r0, r3
   13d72:	46bd      	mov	sp, r7
   13d74:	b004      	add	sp, #16
   13d76:	bd80      	pop	{r7, pc}
   13d78:	200005cc 	.word	0x200005cc

00013d7c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   13d7c:	b580      	push	{r7, lr}
   13d7e:	b082      	sub	sp, #8
   13d80:	af00      	add	r7, sp, #0
   13d82:	6078      	str	r0, [r7, #4]
   13d84:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   13d86:	4b07      	ldr	r3, [pc, #28]	; (13da4 <MQTTPacket_decodeBuf+0x28>)
   13d88:	687a      	ldr	r2, [r7, #4]
   13d8a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   13d8c:	683a      	ldr	r2, [r7, #0]
   13d8e:	4b06      	ldr	r3, [pc, #24]	; (13da8 <MQTTPacket_decodeBuf+0x2c>)
   13d90:	0011      	movs	r1, r2
   13d92:	0018      	movs	r0, r3
   13d94:	4b05      	ldr	r3, [pc, #20]	; (13dac <MQTTPacket_decodeBuf+0x30>)
   13d96:	4798      	blx	r3
   13d98:	0003      	movs	r3, r0
}
   13d9a:	0018      	movs	r0, r3
   13d9c:	46bd      	mov	sp, r7
   13d9e:	b002      	add	sp, #8
   13da0:	bd80      	pop	{r7, pc}
   13da2:	46c0      	nop			; (mov r8, r8)
   13da4:	200005cc 	.word	0x200005cc
   13da8:	00013d41 	.word	0x00013d41
   13dac:	00013c69 	.word	0x00013c69

00013db0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   13db0:	b580      	push	{r7, lr}
   13db2:	b084      	sub	sp, #16
   13db4:	af00      	add	r7, sp, #0
   13db6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   13db8:	687b      	ldr	r3, [r7, #4]
   13dba:	681b      	ldr	r3, [r3, #0]
   13dbc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   13dbe:	68fb      	ldr	r3, [r7, #12]
   13dc0:	781b      	ldrb	r3, [r3, #0]
   13dc2:	021b      	lsls	r3, r3, #8
   13dc4:	68fa      	ldr	r2, [r7, #12]
   13dc6:	3201      	adds	r2, #1
   13dc8:	7812      	ldrb	r2, [r2, #0]
   13dca:	189b      	adds	r3, r3, r2
   13dcc:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   13dce:	687b      	ldr	r3, [r7, #4]
   13dd0:	681b      	ldr	r3, [r3, #0]
   13dd2:	1c9a      	adds	r2, r3, #2
   13dd4:	687b      	ldr	r3, [r7, #4]
   13dd6:	601a      	str	r2, [r3, #0]
	return len;
   13dd8:	68bb      	ldr	r3, [r7, #8]
}
   13dda:	0018      	movs	r0, r3
   13ddc:	46bd      	mov	sp, r7
   13dde:	b004      	add	sp, #16
   13de0:	bd80      	pop	{r7, pc}

00013de2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   13de2:	b580      	push	{r7, lr}
   13de4:	b084      	sub	sp, #16
   13de6:	af00      	add	r7, sp, #0
   13de8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   13dea:	687b      	ldr	r3, [r7, #4]
   13dec:	681a      	ldr	r2, [r3, #0]
   13dee:	230f      	movs	r3, #15
   13df0:	18fb      	adds	r3, r7, r3
   13df2:	7812      	ldrb	r2, [r2, #0]
   13df4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   13df6:	687b      	ldr	r3, [r7, #4]
   13df8:	681b      	ldr	r3, [r3, #0]
   13dfa:	1c5a      	adds	r2, r3, #1
   13dfc:	687b      	ldr	r3, [r7, #4]
   13dfe:	601a      	str	r2, [r3, #0]
	return c;
   13e00:	230f      	movs	r3, #15
   13e02:	18fb      	adds	r3, r7, r3
   13e04:	781b      	ldrb	r3, [r3, #0]
}
   13e06:	0018      	movs	r0, r3
   13e08:	46bd      	mov	sp, r7
   13e0a:	b004      	add	sp, #16
   13e0c:	bd80      	pop	{r7, pc}

00013e0e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   13e0e:	b580      	push	{r7, lr}
   13e10:	b082      	sub	sp, #8
   13e12:	af00      	add	r7, sp, #0
   13e14:	6078      	str	r0, [r7, #4]
   13e16:	000a      	movs	r2, r1
   13e18:	1cfb      	adds	r3, r7, #3
   13e1a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   13e1c:	687b      	ldr	r3, [r7, #4]
   13e1e:	681b      	ldr	r3, [r3, #0]
   13e20:	1cfa      	adds	r2, r7, #3
   13e22:	7812      	ldrb	r2, [r2, #0]
   13e24:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   13e26:	687b      	ldr	r3, [r7, #4]
   13e28:	681b      	ldr	r3, [r3, #0]
   13e2a:	1c5a      	adds	r2, r3, #1
   13e2c:	687b      	ldr	r3, [r7, #4]
   13e2e:	601a      	str	r2, [r3, #0]
}
   13e30:	46c0      	nop			; (mov r8, r8)
   13e32:	46bd      	mov	sp, r7
   13e34:	b002      	add	sp, #8
   13e36:	bd80      	pop	{r7, pc}

00013e38 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   13e38:	b580      	push	{r7, lr}
   13e3a:	b082      	sub	sp, #8
   13e3c:	af00      	add	r7, sp, #0
   13e3e:	6078      	str	r0, [r7, #4]
   13e40:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   13e42:	687b      	ldr	r3, [r7, #4]
   13e44:	681a      	ldr	r2, [r3, #0]
   13e46:	683b      	ldr	r3, [r7, #0]
   13e48:	2b00      	cmp	r3, #0
   13e4a:	da00      	bge.n	13e4e <writeInt+0x16>
   13e4c:	33ff      	adds	r3, #255	; 0xff
   13e4e:	121b      	asrs	r3, r3, #8
   13e50:	b2db      	uxtb	r3, r3
   13e52:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   13e54:	687b      	ldr	r3, [r7, #4]
   13e56:	681b      	ldr	r3, [r3, #0]
   13e58:	1c5a      	adds	r2, r3, #1
   13e5a:	687b      	ldr	r3, [r7, #4]
   13e5c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   13e5e:	687b      	ldr	r3, [r7, #4]
   13e60:	681a      	ldr	r2, [r3, #0]
   13e62:	683b      	ldr	r3, [r7, #0]
   13e64:	4908      	ldr	r1, [pc, #32]	; (13e88 <writeInt+0x50>)
   13e66:	400b      	ands	r3, r1
   13e68:	d503      	bpl.n	13e72 <writeInt+0x3a>
   13e6a:	3b01      	subs	r3, #1
   13e6c:	4907      	ldr	r1, [pc, #28]	; (13e8c <writeInt+0x54>)
   13e6e:	430b      	orrs	r3, r1
   13e70:	3301      	adds	r3, #1
   13e72:	b2db      	uxtb	r3, r3
   13e74:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   13e76:	687b      	ldr	r3, [r7, #4]
   13e78:	681b      	ldr	r3, [r3, #0]
   13e7a:	1c5a      	adds	r2, r3, #1
   13e7c:	687b      	ldr	r3, [r7, #4]
   13e7e:	601a      	str	r2, [r3, #0]
}
   13e80:	46c0      	nop			; (mov r8, r8)
   13e82:	46bd      	mov	sp, r7
   13e84:	b002      	add	sp, #8
   13e86:	bd80      	pop	{r7, pc}
   13e88:	800000ff 	.word	0x800000ff
   13e8c:	ffffff00 	.word	0xffffff00

00013e90 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   13e90:	b580      	push	{r7, lr}
   13e92:	b084      	sub	sp, #16
   13e94:	af00      	add	r7, sp, #0
   13e96:	6078      	str	r0, [r7, #4]
   13e98:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   13e9a:	683b      	ldr	r3, [r7, #0]
   13e9c:	0018      	movs	r0, r3
   13e9e:	4b0d      	ldr	r3, [pc, #52]	; (13ed4 <writeCString+0x44>)
   13ea0:	4798      	blx	r3
   13ea2:	0003      	movs	r3, r0
   13ea4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   13ea6:	68fa      	ldr	r2, [r7, #12]
   13ea8:	687b      	ldr	r3, [r7, #4]
   13eaa:	0011      	movs	r1, r2
   13eac:	0018      	movs	r0, r3
   13eae:	4b0a      	ldr	r3, [pc, #40]	; (13ed8 <writeCString+0x48>)
   13eb0:	4798      	blx	r3
	memcpy(*pptr, string, len);
   13eb2:	687b      	ldr	r3, [r7, #4]
   13eb4:	681b      	ldr	r3, [r3, #0]
   13eb6:	68fa      	ldr	r2, [r7, #12]
   13eb8:	6839      	ldr	r1, [r7, #0]
   13eba:	0018      	movs	r0, r3
   13ebc:	4b07      	ldr	r3, [pc, #28]	; (13edc <writeCString+0x4c>)
   13ebe:	4798      	blx	r3
	*pptr += len;
   13ec0:	687b      	ldr	r3, [r7, #4]
   13ec2:	681a      	ldr	r2, [r3, #0]
   13ec4:	68fb      	ldr	r3, [r7, #12]
   13ec6:	18d2      	adds	r2, r2, r3
   13ec8:	687b      	ldr	r3, [r7, #4]
   13eca:	601a      	str	r2, [r3, #0]
}
   13ecc:	46c0      	nop			; (mov r8, r8)
   13ece:	46bd      	mov	sp, r7
   13ed0:	b004      	add	sp, #16
   13ed2:	bd80      	pop	{r7, pc}
   13ed4:	0001c7d3 	.word	0x0001c7d3
   13ed8:	00013e39 	.word	0x00013e39
   13edc:	0001c1e5 	.word	0x0001c1e5

00013ee0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   13ee0:	b580      	push	{r7, lr}
   13ee2:	b084      	sub	sp, #16
   13ee4:	af00      	add	r7, sp, #0
   13ee6:	60f8      	str	r0, [r7, #12]
   13ee8:	0038      	movs	r0, r7
   13eea:	6001      	str	r1, [r0, #0]
   13eec:	6042      	str	r2, [r0, #4]
   13eee:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   13ef0:	003b      	movs	r3, r7
   13ef2:	685b      	ldr	r3, [r3, #4]
   13ef4:	2b00      	cmp	r3, #0
   13ef6:	dd17      	ble.n	13f28 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   13ef8:	003b      	movs	r3, r7
   13efa:	685a      	ldr	r2, [r3, #4]
   13efc:	68fb      	ldr	r3, [r7, #12]
   13efe:	0011      	movs	r1, r2
   13f00:	0018      	movs	r0, r3
   13f02:	4b14      	ldr	r3, [pc, #80]	; (13f54 <writeMQTTString+0x74>)
   13f04:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   13f06:	68fb      	ldr	r3, [r7, #12]
   13f08:	6818      	ldr	r0, [r3, #0]
   13f0a:	003b      	movs	r3, r7
   13f0c:	6899      	ldr	r1, [r3, #8]
   13f0e:	003b      	movs	r3, r7
   13f10:	685b      	ldr	r3, [r3, #4]
   13f12:	001a      	movs	r2, r3
   13f14:	4b10      	ldr	r3, [pc, #64]	; (13f58 <writeMQTTString+0x78>)
   13f16:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   13f18:	68fb      	ldr	r3, [r7, #12]
   13f1a:	681a      	ldr	r2, [r3, #0]
   13f1c:	003b      	movs	r3, r7
   13f1e:	685b      	ldr	r3, [r3, #4]
   13f20:	18d2      	adds	r2, r2, r3
   13f22:	68fb      	ldr	r3, [r7, #12]
   13f24:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   13f26:	e010      	b.n	13f4a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   13f28:	003b      	movs	r3, r7
   13f2a:	681b      	ldr	r3, [r3, #0]
   13f2c:	2b00      	cmp	r3, #0
   13f2e:	d007      	beq.n	13f40 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   13f30:	003b      	movs	r3, r7
   13f32:	681a      	ldr	r2, [r3, #0]
   13f34:	68fb      	ldr	r3, [r7, #12]
   13f36:	0011      	movs	r1, r2
   13f38:	0018      	movs	r0, r3
   13f3a:	4b08      	ldr	r3, [pc, #32]	; (13f5c <writeMQTTString+0x7c>)
   13f3c:	4798      	blx	r3
}
   13f3e:	e004      	b.n	13f4a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   13f40:	68fb      	ldr	r3, [r7, #12]
   13f42:	2100      	movs	r1, #0
   13f44:	0018      	movs	r0, r3
   13f46:	4b03      	ldr	r3, [pc, #12]	; (13f54 <writeMQTTString+0x74>)
   13f48:	4798      	blx	r3
}
   13f4a:	46c0      	nop			; (mov r8, r8)
   13f4c:	46bd      	mov	sp, r7
   13f4e:	b004      	add	sp, #16
   13f50:	bd80      	pop	{r7, pc}
   13f52:	46c0      	nop			; (mov r8, r8)
   13f54:	00013e39 	.word	0x00013e39
   13f58:	0001c1e5 	.word	0x0001c1e5
   13f5c:	00013e91 	.word	0x00013e91

00013f60 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   13f60:	b580      	push	{r7, lr}
   13f62:	b086      	sub	sp, #24
   13f64:	af00      	add	r7, sp, #0
   13f66:	60f8      	str	r0, [r7, #12]
   13f68:	60b9      	str	r1, [r7, #8]
   13f6a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   13f6c:	2300      	movs	r3, #0
   13f6e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   13f70:	687a      	ldr	r2, [r7, #4]
   13f72:	68bb      	ldr	r3, [r7, #8]
   13f74:	681b      	ldr	r3, [r3, #0]
   13f76:	1ad3      	subs	r3, r2, r3
   13f78:	2b01      	cmp	r3, #1
   13f7a:	dd1b      	ble.n	13fb4 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   13f7c:	68bb      	ldr	r3, [r7, #8]
   13f7e:	0018      	movs	r0, r3
   13f80:	4b10      	ldr	r3, [pc, #64]	; (13fc4 <readMQTTLenString+0x64>)
   13f82:	4798      	blx	r3
   13f84:	0002      	movs	r2, r0
   13f86:	68fb      	ldr	r3, [r7, #12]
   13f88:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   13f8a:	68bb      	ldr	r3, [r7, #8]
   13f8c:	681a      	ldr	r2, [r3, #0]
   13f8e:	68fb      	ldr	r3, [r7, #12]
   13f90:	685b      	ldr	r3, [r3, #4]
   13f92:	18d2      	adds	r2, r2, r3
   13f94:	687b      	ldr	r3, [r7, #4]
   13f96:	429a      	cmp	r2, r3
   13f98:	d80c      	bhi.n	13fb4 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   13f9a:	68bb      	ldr	r3, [r7, #8]
   13f9c:	681a      	ldr	r2, [r3, #0]
   13f9e:	68fb      	ldr	r3, [r7, #12]
   13fa0:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   13fa2:	68bb      	ldr	r3, [r7, #8]
   13fa4:	681a      	ldr	r2, [r3, #0]
   13fa6:	68fb      	ldr	r3, [r7, #12]
   13fa8:	685b      	ldr	r3, [r3, #4]
   13faa:	18d2      	adds	r2, r2, r3
   13fac:	68bb      	ldr	r3, [r7, #8]
   13fae:	601a      	str	r2, [r3, #0]
			rc = 1;
   13fb0:	2301      	movs	r3, #1
   13fb2:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   13fb4:	68fb      	ldr	r3, [r7, #12]
   13fb6:	2200      	movs	r2, #0
   13fb8:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   13fba:	697b      	ldr	r3, [r7, #20]
}
   13fbc:	0018      	movs	r0, r3
   13fbe:	46bd      	mov	sp, r7
   13fc0:	b006      	add	sp, #24
   13fc2:	bd80      	pop	{r7, pc}
   13fc4:	00013db1 	.word	0x00013db1

00013fc8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   13fc8:	b580      	push	{r7, lr}
   13fca:	b086      	sub	sp, #24
   13fcc:	af00      	add	r7, sp, #0
   13fce:	1d3b      	adds	r3, r7, #4
   13fd0:	6018      	str	r0, [r3, #0]
   13fd2:	6059      	str	r1, [r3, #4]
   13fd4:	609a      	str	r2, [r3, #8]
	int rc = 0;
   13fd6:	2300      	movs	r3, #0
   13fd8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   13fda:	1d3b      	adds	r3, r7, #4
   13fdc:	681b      	ldr	r3, [r3, #0]
   13fde:	2b00      	cmp	r3, #0
   13fe0:	d007      	beq.n	13ff2 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   13fe2:	1d3b      	adds	r3, r7, #4
   13fe4:	681b      	ldr	r3, [r3, #0]
   13fe6:	0018      	movs	r0, r3
   13fe8:	4b06      	ldr	r3, [pc, #24]	; (14004 <MQTTstrlen+0x3c>)
   13fea:	4798      	blx	r3
   13fec:	0003      	movs	r3, r0
   13fee:	617b      	str	r3, [r7, #20]
   13ff0:	e002      	b.n	13ff8 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   13ff2:	1d3b      	adds	r3, r7, #4
   13ff4:	685b      	ldr	r3, [r3, #4]
   13ff6:	617b      	str	r3, [r7, #20]
	return rc;
   13ff8:	697b      	ldr	r3, [r7, #20]
}
   13ffa:	0018      	movs	r0, r3
   13ffc:	46bd      	mov	sp, r7
   13ffe:	b006      	add	sp, #24
   14000:	bd80      	pop	{r7, pc}
   14002:	46c0      	nop			; (mov r8, r8)
   14004:	0001c7d3 	.word	0x0001c7d3

00014008 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   14008:	b580      	push	{r7, lr}
   1400a:	b086      	sub	sp, #24
   1400c:	af00      	add	r7, sp, #0
   1400e:	6078      	str	r0, [r7, #4]
   14010:	6039      	str	r1, [r7, #0]
	int alen = 0,
   14012:	2300      	movs	r3, #0
   14014:	617b      	str	r3, [r7, #20]
		blen = 0;
   14016:	2300      	movs	r3, #0
   14018:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   1401a:	687b      	ldr	r3, [r7, #4]
   1401c:	681b      	ldr	r3, [r3, #0]
   1401e:	2b00      	cmp	r3, #0
   14020:	d00a      	beq.n	14038 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   14022:	687b      	ldr	r3, [r7, #4]
   14024:	681b      	ldr	r3, [r3, #0]
   14026:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   14028:	687b      	ldr	r3, [r7, #4]
   1402a:	681b      	ldr	r3, [r3, #0]
   1402c:	0018      	movs	r0, r3
   1402e:	4b12      	ldr	r3, [pc, #72]	; (14078 <MQTTPacket_equals+0x70>)
   14030:	4798      	blx	r3
   14032:	0003      	movs	r3, r0
   14034:	617b      	str	r3, [r7, #20]
   14036:	e005      	b.n	14044 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   14038:	687b      	ldr	r3, [r7, #4]
   1403a:	689b      	ldr	r3, [r3, #8]
   1403c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   1403e:	687b      	ldr	r3, [r7, #4]
   14040:	685b      	ldr	r3, [r3, #4]
   14042:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   14044:	683b      	ldr	r3, [r7, #0]
   14046:	0018      	movs	r0, r3
   14048:	4b0b      	ldr	r3, [pc, #44]	; (14078 <MQTTPacket_equals+0x70>)
   1404a:	4798      	blx	r3
   1404c:	0003      	movs	r3, r0
   1404e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14050:	697a      	ldr	r2, [r7, #20]
   14052:	68fb      	ldr	r3, [r7, #12]
   14054:	429a      	cmp	r2, r3
   14056:	d109      	bne.n	1406c <MQTTPacket_equals+0x64>
   14058:	697a      	ldr	r2, [r7, #20]
   1405a:	6839      	ldr	r1, [r7, #0]
   1405c:	693b      	ldr	r3, [r7, #16]
   1405e:	0018      	movs	r0, r3
   14060:	4b06      	ldr	r3, [pc, #24]	; (1407c <MQTTPacket_equals+0x74>)
   14062:	4798      	blx	r3
   14064:	1e03      	subs	r3, r0, #0
   14066:	d101      	bne.n	1406c <MQTTPacket_equals+0x64>
   14068:	2301      	movs	r3, #1
   1406a:	e000      	b.n	1406e <MQTTPacket_equals+0x66>
   1406c:	2300      	movs	r3, #0
}
   1406e:	0018      	movs	r0, r3
   14070:	46bd      	mov	sp, r7
   14072:	b006      	add	sp, #24
   14074:	bd80      	pop	{r7, pc}
   14076:	46c0      	nop			; (mov r8, r8)
   14078:	0001c7d3 	.word	0x0001c7d3
   1407c:	0001c7e1 	.word	0x0001c7e1

00014080 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   14080:	b580      	push	{r7, lr}
   14082:	b086      	sub	sp, #24
   14084:	af00      	add	r7, sp, #0
   14086:	60f8      	str	r0, [r7, #12]
   14088:	0038      	movs	r0, r7
   1408a:	6001      	str	r1, [r0, #0]
   1408c:	6042      	str	r2, [r0, #4]
   1408e:	6083      	str	r3, [r0, #8]
	int len = 0;
   14090:	2300      	movs	r3, #0
   14092:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   14094:	003b      	movs	r3, r7
   14096:	6818      	ldr	r0, [r3, #0]
   14098:	6859      	ldr	r1, [r3, #4]
   1409a:	689a      	ldr	r2, [r3, #8]
   1409c:	4b09      	ldr	r3, [pc, #36]	; (140c4 <MQTTSerialize_publishLength+0x44>)
   1409e:	4798      	blx	r3
   140a0:	0003      	movs	r3, r0
   140a2:	1c9a      	adds	r2, r3, #2
   140a4:	6a3b      	ldr	r3, [r7, #32]
   140a6:	18d3      	adds	r3, r2, r3
   140a8:	697a      	ldr	r2, [r7, #20]
   140aa:	18d3      	adds	r3, r2, r3
   140ac:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   140ae:	68fb      	ldr	r3, [r7, #12]
   140b0:	2b00      	cmp	r3, #0
   140b2:	dd02      	ble.n	140ba <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   140b4:	697b      	ldr	r3, [r7, #20]
   140b6:	3302      	adds	r3, #2
   140b8:	617b      	str	r3, [r7, #20]
	return len;
   140ba:	697b      	ldr	r3, [r7, #20]
}
   140bc:	0018      	movs	r0, r3
   140be:	46bd      	mov	sp, r7
   140c0:	b006      	add	sp, #24
   140c2:	bd80      	pop	{r7, pc}
   140c4:	00013fc9 	.word	0x00013fc9

000140c8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   140c8:	b590      	push	{r4, r7, lr}
   140ca:	b08b      	sub	sp, #44	; 0x2c
   140cc:	af02      	add	r7, sp, #8
   140ce:	60f8      	str	r0, [r7, #12]
   140d0:	60b9      	str	r1, [r7, #8]
   140d2:	603b      	str	r3, [r7, #0]
   140d4:	1dfb      	adds	r3, r7, #7
   140d6:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   140d8:	68fb      	ldr	r3, [r7, #12]
   140da:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   140dc:	2300      	movs	r3, #0
   140de:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   140e0:	2300      	movs	r3, #0
   140e2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   140e4:	2300      	movs	r3, #0
   140e6:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   140e8:	2308      	movs	r3, #8
   140ea:	2230      	movs	r2, #48	; 0x30
   140ec:	4694      	mov	ip, r2
   140ee:	44bc      	add	ip, r7
   140f0:	4463      	add	r3, ip
   140f2:	6838      	ldr	r0, [r7, #0]
   140f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   140f6:	9200      	str	r2, [sp, #0]
   140f8:	6819      	ldr	r1, [r3, #0]
   140fa:	685a      	ldr	r2, [r3, #4]
   140fc:	689b      	ldr	r3, [r3, #8]
   140fe:	4c46      	ldr	r4, [pc, #280]	; (14218 <MQTTSerialize_publish+0x150>)
   14100:	47a0      	blx	r4
   14102:	0003      	movs	r3, r0
   14104:	61bb      	str	r3, [r7, #24]
   14106:	69bb      	ldr	r3, [r7, #24]
   14108:	0018      	movs	r0, r3
   1410a:	4b44      	ldr	r3, [pc, #272]	; (1421c <MQTTSerialize_publish+0x154>)
   1410c:	4798      	blx	r3
   1410e:	0002      	movs	r2, r0
   14110:	68bb      	ldr	r3, [r7, #8]
   14112:	429a      	cmp	r2, r3
   14114:	dd03      	ble.n	1411e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14116:	2302      	movs	r3, #2
   14118:	425b      	negs	r3, r3
   1411a:	61fb      	str	r3, [r7, #28]
		goto exit;
   1411c:	e077      	b.n	1420e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   1411e:	2310      	movs	r3, #16
   14120:	18fb      	adds	r3, r7, r3
   14122:	781a      	ldrb	r2, [r3, #0]
   14124:	210f      	movs	r1, #15
   14126:	400a      	ands	r2, r1
   14128:	1c11      	adds	r1, r2, #0
   1412a:	2230      	movs	r2, #48	; 0x30
   1412c:	430a      	orrs	r2, r1
   1412e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   14130:	1dfb      	adds	r3, r7, #7
   14132:	781b      	ldrb	r3, [r3, #0]
   14134:	2201      	movs	r2, #1
   14136:	4013      	ands	r3, r2
   14138:	b2da      	uxtb	r2, r3
   1413a:	2310      	movs	r3, #16
   1413c:	18fb      	adds	r3, r7, r3
   1413e:	2101      	movs	r1, #1
   14140:	400a      	ands	r2, r1
   14142:	00d0      	lsls	r0, r2, #3
   14144:	781a      	ldrb	r2, [r3, #0]
   14146:	2108      	movs	r1, #8
   14148:	438a      	bics	r2, r1
   1414a:	1c11      	adds	r1, r2, #0
   1414c:	1c02      	adds	r2, r0, #0
   1414e:	430a      	orrs	r2, r1
   14150:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   14152:	683b      	ldr	r3, [r7, #0]
   14154:	b2db      	uxtb	r3, r3
   14156:	1c1a      	adds	r2, r3, #0
   14158:	2303      	movs	r3, #3
   1415a:	4013      	ands	r3, r2
   1415c:	b2da      	uxtb	r2, r3
   1415e:	2310      	movs	r3, #16
   14160:	18fb      	adds	r3, r7, r3
   14162:	2103      	movs	r1, #3
   14164:	400a      	ands	r2, r1
   14166:	1890      	adds	r0, r2, r2
   14168:	781a      	ldrb	r2, [r3, #0]
   1416a:	2106      	movs	r1, #6
   1416c:	438a      	bics	r2, r1
   1416e:	1c11      	adds	r1, r2, #0
   14170:	1c02      	adds	r2, r0, #0
   14172:	430a      	orrs	r2, r1
   14174:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   14176:	2330      	movs	r3, #48	; 0x30
   14178:	18fb      	adds	r3, r7, r3
   1417a:	781b      	ldrb	r3, [r3, #0]
   1417c:	2201      	movs	r2, #1
   1417e:	4013      	ands	r3, r2
   14180:	b2da      	uxtb	r2, r3
   14182:	2310      	movs	r3, #16
   14184:	18fb      	adds	r3, r7, r3
   14186:	2101      	movs	r1, #1
   14188:	400a      	ands	r2, r1
   1418a:	0010      	movs	r0, r2
   1418c:	781a      	ldrb	r2, [r3, #0]
   1418e:	2101      	movs	r1, #1
   14190:	438a      	bics	r2, r1
   14192:	1c11      	adds	r1, r2, #0
   14194:	1c02      	adds	r2, r0, #0
   14196:	430a      	orrs	r2, r1
   14198:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1419a:	2310      	movs	r3, #16
   1419c:	18fb      	adds	r3, r7, r3
   1419e:	781a      	ldrb	r2, [r3, #0]
   141a0:	2314      	movs	r3, #20
   141a2:	18fb      	adds	r3, r7, r3
   141a4:	0011      	movs	r1, r2
   141a6:	0018      	movs	r0, r3
   141a8:	4b1d      	ldr	r3, [pc, #116]	; (14220 <MQTTSerialize_publish+0x158>)
   141aa:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   141ac:	697b      	ldr	r3, [r7, #20]
   141ae:	69ba      	ldr	r2, [r7, #24]
   141b0:	0011      	movs	r1, r2
   141b2:	0018      	movs	r0, r3
   141b4:	4b1b      	ldr	r3, [pc, #108]	; (14224 <MQTTSerialize_publish+0x15c>)
   141b6:	4798      	blx	r3
   141b8:	0002      	movs	r2, r0
   141ba:	697b      	ldr	r3, [r7, #20]
   141bc:	189b      	adds	r3, r3, r2
   141be:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   141c0:	2308      	movs	r3, #8
   141c2:	2230      	movs	r2, #48	; 0x30
   141c4:	4694      	mov	ip, r2
   141c6:	44bc      	add	ip, r7
   141c8:	4463      	add	r3, ip
   141ca:	2214      	movs	r2, #20
   141cc:	18b8      	adds	r0, r7, r2
   141ce:	6819      	ldr	r1, [r3, #0]
   141d0:	685a      	ldr	r2, [r3, #4]
   141d2:	689b      	ldr	r3, [r3, #8]
   141d4:	4c14      	ldr	r4, [pc, #80]	; (14228 <MQTTSerialize_publish+0x160>)
   141d6:	47a0      	blx	r4

	if (qos > 0)
   141d8:	683b      	ldr	r3, [r7, #0]
   141da:	2b00      	cmp	r3, #0
   141dc:	dd08      	ble.n	141f0 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   141de:	2334      	movs	r3, #52	; 0x34
   141e0:	18fb      	adds	r3, r7, r3
   141e2:	881a      	ldrh	r2, [r3, #0]
   141e4:	2314      	movs	r3, #20
   141e6:	18fb      	adds	r3, r7, r3
   141e8:	0011      	movs	r1, r2
   141ea:	0018      	movs	r0, r3
   141ec:	4b0f      	ldr	r3, [pc, #60]	; (1422c <MQTTSerialize_publish+0x164>)
   141ee:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   141f0:	697b      	ldr	r3, [r7, #20]
   141f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   141f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
   141f6:	0018      	movs	r0, r3
   141f8:	4b0d      	ldr	r3, [pc, #52]	; (14230 <MQTTSerialize_publish+0x168>)
   141fa:	4798      	blx	r3
	ptr += payloadlen;
   141fc:	697a      	ldr	r2, [r7, #20]
   141fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14200:	18d3      	adds	r3, r2, r3
   14202:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   14204:	697b      	ldr	r3, [r7, #20]
   14206:	001a      	movs	r2, r3
   14208:	68fb      	ldr	r3, [r7, #12]
   1420a:	1ad3      	subs	r3, r2, r3
   1420c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1420e:	69fb      	ldr	r3, [r7, #28]
}
   14210:	0018      	movs	r0, r3
   14212:	46bd      	mov	sp, r7
   14214:	b009      	add	sp, #36	; 0x24
   14216:	bd90      	pop	{r4, r7, pc}
   14218:	00014081 	.word	0x00014081
   1421c:	00013ced 	.word	0x00013ced
   14220:	00013e0f 	.word	0x00013e0f
   14224:	00013bf5 	.word	0x00013bf5
   14228:	00013ee1 	.word	0x00013ee1
   1422c:	00013e39 	.word	0x00013e39
   14230:	0001c1e5 	.word	0x0001c1e5

00014234 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   14234:	b580      	push	{r7, lr}
   14236:	b088      	sub	sp, #32
   14238:	af00      	add	r7, sp, #0
   1423a:	60f8      	str	r0, [r7, #12]
   1423c:	60b9      	str	r1, [r7, #8]
   1423e:	0019      	movs	r1, r3
   14240:	1dfb      	adds	r3, r7, #7
   14242:	701a      	strb	r2, [r3, #0]
   14244:	1dbb      	adds	r3, r7, #6
   14246:	1c0a      	adds	r2, r1, #0
   14248:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1424a:	2300      	movs	r3, #0
   1424c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1424e:	2300      	movs	r3, #0
   14250:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   14252:	68fb      	ldr	r3, [r7, #12]
   14254:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   14256:	68bb      	ldr	r3, [r7, #8]
   14258:	2b03      	cmp	r3, #3
   1425a:	dc03      	bgt.n	14264 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1425c:	2302      	movs	r3, #2
   1425e:	425b      	negs	r3, r3
   14260:	61fb      	str	r3, [r7, #28]
		goto exit;
   14262:	e055      	b.n	14310 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   14264:	1dfb      	adds	r3, r7, #7
   14266:	781b      	ldrb	r3, [r3, #0]
   14268:	220f      	movs	r2, #15
   1426a:	4013      	ands	r3, r2
   1426c:	b2da      	uxtb	r2, r3
   1426e:	2318      	movs	r3, #24
   14270:	18fb      	adds	r3, r7, r3
   14272:	0110      	lsls	r0, r2, #4
   14274:	781a      	ldrb	r2, [r3, #0]
   14276:	210f      	movs	r1, #15
   14278:	400a      	ands	r2, r1
   1427a:	1c11      	adds	r1, r2, #0
   1427c:	1c02      	adds	r2, r0, #0
   1427e:	430a      	orrs	r2, r1
   14280:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   14282:	1dbb      	adds	r3, r7, #6
   14284:	781b      	ldrb	r3, [r3, #0]
   14286:	2201      	movs	r2, #1
   14288:	4013      	ands	r3, r2
   1428a:	b2da      	uxtb	r2, r3
   1428c:	2318      	movs	r3, #24
   1428e:	18fb      	adds	r3, r7, r3
   14290:	2101      	movs	r1, #1
   14292:	400a      	ands	r2, r1
   14294:	00d0      	lsls	r0, r2, #3
   14296:	781a      	ldrb	r2, [r3, #0]
   14298:	2108      	movs	r1, #8
   1429a:	438a      	bics	r2, r1
   1429c:	1c11      	adds	r1, r2, #0
   1429e:	1c02      	adds	r2, r0, #0
   142a0:	430a      	orrs	r2, r1
   142a2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   142a4:	1dfb      	adds	r3, r7, #7
   142a6:	781b      	ldrb	r3, [r3, #0]
   142a8:	3b06      	subs	r3, #6
   142aa:	425a      	negs	r2, r3
   142ac:	4153      	adcs	r3, r2
   142ae:	b2db      	uxtb	r3, r3
   142b0:	1c1a      	adds	r2, r3, #0
   142b2:	2303      	movs	r3, #3
   142b4:	4013      	ands	r3, r2
   142b6:	b2da      	uxtb	r2, r3
   142b8:	2318      	movs	r3, #24
   142ba:	18fb      	adds	r3, r7, r3
   142bc:	2103      	movs	r1, #3
   142be:	400a      	ands	r2, r1
   142c0:	1890      	adds	r0, r2, r2
   142c2:	781a      	ldrb	r2, [r3, #0]
   142c4:	2106      	movs	r1, #6
   142c6:	438a      	bics	r2, r1
   142c8:	1c11      	adds	r1, r2, #0
   142ca:	1c02      	adds	r2, r0, #0
   142cc:	430a      	orrs	r2, r1
   142ce:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   142d0:	2318      	movs	r3, #24
   142d2:	18fb      	adds	r3, r7, r3
   142d4:	781a      	ldrb	r2, [r3, #0]
   142d6:	2314      	movs	r3, #20
   142d8:	18fb      	adds	r3, r7, r3
   142da:	0011      	movs	r1, r2
   142dc:	0018      	movs	r0, r3
   142de:	4b0f      	ldr	r3, [pc, #60]	; (1431c <MQTTSerialize_ack+0xe8>)
   142e0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   142e2:	697b      	ldr	r3, [r7, #20]
   142e4:	2102      	movs	r1, #2
   142e6:	0018      	movs	r0, r3
   142e8:	4b0d      	ldr	r3, [pc, #52]	; (14320 <MQTTSerialize_ack+0xec>)
   142ea:	4798      	blx	r3
   142ec:	0002      	movs	r2, r0
   142ee:	697b      	ldr	r3, [r7, #20]
   142f0:	189b      	adds	r3, r3, r2
   142f2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   142f4:	2328      	movs	r3, #40	; 0x28
   142f6:	18fb      	adds	r3, r7, r3
   142f8:	881a      	ldrh	r2, [r3, #0]
   142fa:	2314      	movs	r3, #20
   142fc:	18fb      	adds	r3, r7, r3
   142fe:	0011      	movs	r1, r2
   14300:	0018      	movs	r0, r3
   14302:	4b08      	ldr	r3, [pc, #32]	; (14324 <MQTTSerialize_ack+0xf0>)
   14304:	4798      	blx	r3
	rc = ptr - buf;
   14306:	697b      	ldr	r3, [r7, #20]
   14308:	001a      	movs	r2, r3
   1430a:	68fb      	ldr	r3, [r7, #12]
   1430c:	1ad3      	subs	r3, r2, r3
   1430e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   14310:	69fb      	ldr	r3, [r7, #28]
}
   14312:	0018      	movs	r0, r3
   14314:	46bd      	mov	sp, r7
   14316:	b008      	add	sp, #32
   14318:	bd80      	pop	{r7, pc}
   1431a:	46c0      	nop			; (mov r8, r8)
   1431c:	00013e0f 	.word	0x00013e0f
   14320:	00013bf5 	.word	0x00013bf5
   14324:	00013e39 	.word	0x00013e39

00014328 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   14328:	b580      	push	{r7, lr}
   1432a:	b084      	sub	sp, #16
   1432c:	af00      	add	r7, sp, #0
   1432e:	6078      	str	r0, [r7, #4]
   14330:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   14332:	2302      	movs	r3, #2
   14334:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   14336:	2300      	movs	r3, #0
   14338:	60fb      	str	r3, [r7, #12]
   1433a:	e014      	b.n	14366 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1433c:	68fa      	ldr	r2, [r7, #12]
   1433e:	0013      	movs	r3, r2
   14340:	005b      	lsls	r3, r3, #1
   14342:	189b      	adds	r3, r3, r2
   14344:	009b      	lsls	r3, r3, #2
   14346:	001a      	movs	r2, r3
   14348:	683b      	ldr	r3, [r7, #0]
   1434a:	189b      	adds	r3, r3, r2
   1434c:	6818      	ldr	r0, [r3, #0]
   1434e:	6859      	ldr	r1, [r3, #4]
   14350:	689a      	ldr	r2, [r3, #8]
   14352:	4b09      	ldr	r3, [pc, #36]	; (14378 <MQTTSerialize_subscribeLength+0x50>)
   14354:	4798      	blx	r3
   14356:	0003      	movs	r3, r0
   14358:	3303      	adds	r3, #3
   1435a:	68ba      	ldr	r2, [r7, #8]
   1435c:	18d3      	adds	r3, r2, r3
   1435e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   14360:	68fb      	ldr	r3, [r7, #12]
   14362:	3301      	adds	r3, #1
   14364:	60fb      	str	r3, [r7, #12]
   14366:	68fa      	ldr	r2, [r7, #12]
   14368:	687b      	ldr	r3, [r7, #4]
   1436a:	429a      	cmp	r2, r3
   1436c:	dbe6      	blt.n	1433c <MQTTSerialize_subscribeLength+0x14>
	return len;
   1436e:	68bb      	ldr	r3, [r7, #8]
}
   14370:	0018      	movs	r0, r3
   14372:	46bd      	mov	sp, r7
   14374:	b004      	add	sp, #16
   14376:	bd80      	pop	{r7, pc}
   14378:	00013fc9 	.word	0x00013fc9

0001437c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1437c:	b590      	push	{r4, r7, lr}
   1437e:	b08b      	sub	sp, #44	; 0x2c
   14380:	af00      	add	r7, sp, #0
   14382:	60f8      	str	r0, [r7, #12]
   14384:	60b9      	str	r1, [r7, #8]
   14386:	0019      	movs	r1, r3
   14388:	1dfb      	adds	r3, r7, #7
   1438a:	701a      	strb	r2, [r3, #0]
   1438c:	1d3b      	adds	r3, r7, #4
   1438e:	1c0a      	adds	r2, r1, #0
   14390:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   14392:	68fb      	ldr	r3, [r7, #12]
   14394:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   14396:	2300      	movs	r3, #0
   14398:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1439a:	2300      	movs	r3, #0
   1439c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   1439e:	2300      	movs	r3, #0
   143a0:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   143a2:	2300      	movs	r3, #0
   143a4:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   143a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   143a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   143aa:	0011      	movs	r1, r2
   143ac:	0018      	movs	r0, r3
   143ae:	4b41      	ldr	r3, [pc, #260]	; (144b4 <MQTTSerialize_subscribe+0x138>)
   143b0:	4798      	blx	r3
   143b2:	0003      	movs	r3, r0
   143b4:	61fb      	str	r3, [r7, #28]
   143b6:	69fb      	ldr	r3, [r7, #28]
   143b8:	0018      	movs	r0, r3
   143ba:	4b3f      	ldr	r3, [pc, #252]	; (144b8 <MQTTSerialize_subscribe+0x13c>)
   143bc:	4798      	blx	r3
   143be:	0002      	movs	r2, r0
   143c0:	68bb      	ldr	r3, [r7, #8]
   143c2:	429a      	cmp	r2, r3
   143c4:	dd03      	ble.n	143ce <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   143c6:	2302      	movs	r3, #2
   143c8:	425b      	negs	r3, r3
   143ca:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   143cc:	e06c      	b.n	144a8 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   143ce:	2314      	movs	r3, #20
   143d0:	18fb      	adds	r3, r7, r3
   143d2:	2200      	movs	r2, #0
   143d4:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   143d6:	2314      	movs	r3, #20
   143d8:	18fb      	adds	r3, r7, r3
   143da:	781a      	ldrb	r2, [r3, #0]
   143dc:	210f      	movs	r1, #15
   143de:	400a      	ands	r2, r1
   143e0:	1c11      	adds	r1, r2, #0
   143e2:	2280      	movs	r2, #128	; 0x80
   143e4:	4252      	negs	r2, r2
   143e6:	430a      	orrs	r2, r1
   143e8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   143ea:	1dfb      	adds	r3, r7, #7
   143ec:	781b      	ldrb	r3, [r3, #0]
   143ee:	2201      	movs	r2, #1
   143f0:	4013      	ands	r3, r2
   143f2:	b2da      	uxtb	r2, r3
   143f4:	2314      	movs	r3, #20
   143f6:	18fb      	adds	r3, r7, r3
   143f8:	2101      	movs	r1, #1
   143fa:	400a      	ands	r2, r1
   143fc:	00d0      	lsls	r0, r2, #3
   143fe:	781a      	ldrb	r2, [r3, #0]
   14400:	2108      	movs	r1, #8
   14402:	438a      	bics	r2, r1
   14404:	1c11      	adds	r1, r2, #0
   14406:	1c02      	adds	r2, r0, #0
   14408:	430a      	orrs	r2, r1
   1440a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   1440c:	2314      	movs	r3, #20
   1440e:	18fb      	adds	r3, r7, r3
   14410:	781a      	ldrb	r2, [r3, #0]
   14412:	2106      	movs	r1, #6
   14414:	438a      	bics	r2, r1
   14416:	1c11      	adds	r1, r2, #0
   14418:	2202      	movs	r2, #2
   1441a:	430a      	orrs	r2, r1
   1441c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1441e:	2314      	movs	r3, #20
   14420:	18fb      	adds	r3, r7, r3
   14422:	781a      	ldrb	r2, [r3, #0]
   14424:	2318      	movs	r3, #24
   14426:	18fb      	adds	r3, r7, r3
   14428:	0011      	movs	r1, r2
   1442a:	0018      	movs	r0, r3
   1442c:	4b23      	ldr	r3, [pc, #140]	; (144bc <MQTTSerialize_subscribe+0x140>)
   1442e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14430:	69bb      	ldr	r3, [r7, #24]
   14432:	69fa      	ldr	r2, [r7, #28]
   14434:	0011      	movs	r1, r2
   14436:	0018      	movs	r0, r3
   14438:	4b21      	ldr	r3, [pc, #132]	; (144c0 <MQTTSerialize_subscribe+0x144>)
   1443a:	4798      	blx	r3
   1443c:	0002      	movs	r2, r0
   1443e:	69bb      	ldr	r3, [r7, #24]
   14440:	189b      	adds	r3, r3, r2
   14442:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   14444:	1d3b      	adds	r3, r7, #4
   14446:	881a      	ldrh	r2, [r3, #0]
   14448:	2318      	movs	r3, #24
   1444a:	18fb      	adds	r3, r7, r3
   1444c:	0011      	movs	r1, r2
   1444e:	0018      	movs	r0, r3
   14450:	4b1c      	ldr	r3, [pc, #112]	; (144c4 <MQTTSerialize_subscribe+0x148>)
   14452:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   14454:	2300      	movs	r3, #0
   14456:	623b      	str	r3, [r7, #32]
   14458:	e01d      	b.n	14496 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1445a:	6a3a      	ldr	r2, [r7, #32]
   1445c:	0013      	movs	r3, r2
   1445e:	005b      	lsls	r3, r3, #1
   14460:	189b      	adds	r3, r3, r2
   14462:	009b      	lsls	r3, r3, #2
   14464:	001a      	movs	r2, r3
   14466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14468:	189b      	adds	r3, r3, r2
   1446a:	2218      	movs	r2, #24
   1446c:	18b8      	adds	r0, r7, r2
   1446e:	6819      	ldr	r1, [r3, #0]
   14470:	685a      	ldr	r2, [r3, #4]
   14472:	689b      	ldr	r3, [r3, #8]
   14474:	4c14      	ldr	r4, [pc, #80]	; (144c8 <MQTTSerialize_subscribe+0x14c>)
   14476:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   14478:	6a3b      	ldr	r3, [r7, #32]
   1447a:	009b      	lsls	r3, r3, #2
   1447c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1447e:	18d3      	adds	r3, r2, r3
   14480:	681b      	ldr	r3, [r3, #0]
   14482:	b2da      	uxtb	r2, r3
   14484:	2318      	movs	r3, #24
   14486:	18fb      	adds	r3, r7, r3
   14488:	0011      	movs	r1, r2
   1448a:	0018      	movs	r0, r3
   1448c:	4b0b      	ldr	r3, [pc, #44]	; (144bc <MQTTSerialize_subscribe+0x140>)
   1448e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   14490:	6a3b      	ldr	r3, [r7, #32]
   14492:	3301      	adds	r3, #1
   14494:	623b      	str	r3, [r7, #32]
   14496:	6a3a      	ldr	r2, [r7, #32]
   14498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1449a:	429a      	cmp	r2, r3
   1449c:	dbdd      	blt.n	1445a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   1449e:	69bb      	ldr	r3, [r7, #24]
   144a0:	001a      	movs	r2, r3
   144a2:	68fb      	ldr	r3, [r7, #12]
   144a4:	1ad3      	subs	r3, r2, r3
   144a6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   144a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   144aa:	0018      	movs	r0, r3
   144ac:	46bd      	mov	sp, r7
   144ae:	b00b      	add	sp, #44	; 0x2c
   144b0:	bd90      	pop	{r4, r7, pc}
   144b2:	46c0      	nop			; (mov r8, r8)
   144b4:	00014329 	.word	0x00014329
   144b8:	00013ced 	.word	0x00013ced
   144bc:	00013e0f 	.word	0x00013e0f
   144c0:	00013bf5 	.word	0x00013bf5
   144c4:	00013e39 	.word	0x00013e39
   144c8:	00013ee1 	.word	0x00013ee1

000144cc <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   144cc:	b590      	push	{r4, r7, lr}
   144ce:	b08b      	sub	sp, #44	; 0x2c
   144d0:	af00      	add	r7, sp, #0
   144d2:	60f8      	str	r0, [r7, #12]
   144d4:	60b9      	str	r1, [r7, #8]
   144d6:	607a      	str	r2, [r7, #4]
   144d8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   144da:	2300      	movs	r3, #0
   144dc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   144de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   144e0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   144e2:	2300      	movs	r3, #0
   144e4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   144e6:	2300      	movs	r3, #0
   144e8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   144ea:	2318      	movs	r3, #24
   144ec:	18fb      	adds	r3, r7, r3
   144ee:	0018      	movs	r0, r3
   144f0:	4b2c      	ldr	r3, [pc, #176]	; (145a4 <MQTTDeserialize_suback+0xd8>)
   144f2:	4798      	blx	r3
   144f4:	0003      	movs	r3, r0
   144f6:	001a      	movs	r2, r3
   144f8:	231c      	movs	r3, #28
   144fa:	18fb      	adds	r3, r7, r3
   144fc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   144fe:	231c      	movs	r3, #28
   14500:	18fb      	adds	r3, r7, r3
   14502:	781b      	ldrb	r3, [r3, #0]
   14504:	220f      	movs	r2, #15
   14506:	4393      	bics	r3, r2
   14508:	b2db      	uxtb	r3, r3
   1450a:	2b90      	cmp	r3, #144	; 0x90
   1450c:	d142      	bne.n	14594 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1450e:	69bb      	ldr	r3, [r7, #24]
   14510:	2214      	movs	r2, #20
   14512:	18ba      	adds	r2, r7, r2
   14514:	0011      	movs	r1, r2
   14516:	0018      	movs	r0, r3
   14518:	4b23      	ldr	r3, [pc, #140]	; (145a8 <MQTTDeserialize_suback+0xdc>)
   1451a:	4798      	blx	r3
   1451c:	0003      	movs	r3, r0
   1451e:	627b      	str	r3, [r7, #36]	; 0x24
   14520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14522:	69bb      	ldr	r3, [r7, #24]
   14524:	189b      	adds	r3, r3, r2
   14526:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   14528:	69bb      	ldr	r3, [r7, #24]
   1452a:	697a      	ldr	r2, [r7, #20]
   1452c:	189b      	adds	r3, r3, r2
   1452e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   14530:	6a3b      	ldr	r3, [r7, #32]
   14532:	69ba      	ldr	r2, [r7, #24]
   14534:	1a9b      	subs	r3, r3, r2
   14536:	2b01      	cmp	r3, #1
   14538:	dd2e      	ble.n	14598 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1453a:	2318      	movs	r3, #24
   1453c:	18fb      	adds	r3, r7, r3
   1453e:	0018      	movs	r0, r3
   14540:	4b1a      	ldr	r3, [pc, #104]	; (145ac <MQTTDeserialize_suback+0xe0>)
   14542:	4798      	blx	r3
   14544:	0003      	movs	r3, r0
   14546:	b29a      	uxth	r2, r3
   14548:	68fb      	ldr	r3, [r7, #12]
   1454a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	2200      	movs	r2, #0
   14550:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   14552:	e018      	b.n	14586 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   14554:	687b      	ldr	r3, [r7, #4]
   14556:	681a      	ldr	r2, [r3, #0]
   14558:	68bb      	ldr	r3, [r7, #8]
   1455a:	429a      	cmp	r2, r3
   1455c:	dd03      	ble.n	14566 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   1455e:	2301      	movs	r3, #1
   14560:	425b      	negs	r3, r3
   14562:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   14564:	e019      	b.n	1459a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   14566:	687b      	ldr	r3, [r7, #4]
   14568:	681a      	ldr	r2, [r3, #0]
   1456a:	1c51      	adds	r1, r2, #1
   1456c:	687b      	ldr	r3, [r7, #4]
   1456e:	6019      	str	r1, [r3, #0]
   14570:	0013      	movs	r3, r2
   14572:	009b      	lsls	r3, r3, #2
   14574:	683a      	ldr	r2, [r7, #0]
   14576:	18d4      	adds	r4, r2, r3
   14578:	2318      	movs	r3, #24
   1457a:	18fb      	adds	r3, r7, r3
   1457c:	0018      	movs	r0, r3
   1457e:	4b09      	ldr	r3, [pc, #36]	; (145a4 <MQTTDeserialize_suback+0xd8>)
   14580:	4798      	blx	r3
   14582:	0003      	movs	r3, r0
   14584:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   14586:	69ba      	ldr	r2, [r7, #24]
   14588:	6a3b      	ldr	r3, [r7, #32]
   1458a:	429a      	cmp	r2, r3
   1458c:	d3e2      	bcc.n	14554 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   1458e:	2301      	movs	r3, #1
   14590:	627b      	str	r3, [r7, #36]	; 0x24
   14592:	e002      	b.n	1459a <MQTTDeserialize_suback+0xce>
		goto exit;
   14594:	46c0      	nop			; (mov r8, r8)
   14596:	e000      	b.n	1459a <MQTTDeserialize_suback+0xce>
		goto exit;
   14598:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1459c:	0018      	movs	r0, r3
   1459e:	46bd      	mov	sp, r7
   145a0:	b00b      	add	sp, #44	; 0x2c
   145a2:	bd90      	pop	{r4, r7, pc}
   145a4:	00013de3 	.word	0x00013de3
   145a8:	00013d7d 	.word	0x00013d7d
   145ac:	00013db1 	.word	0x00013db1

000145b0 <mqtt_packet_read>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_read(Network *network, unsigned char *read_buffer, int length, int timeout_ms)
{
   145b0:	b580      	push	{r7, lr}
   145b2:	b084      	sub	sp, #16
   145b4:	af00      	add	r7, sp, #0
   145b6:	60f8      	str	r0, [r7, #12]
   145b8:	60b9      	str	r1, [r7, #8]
   145ba:	607a      	str	r2, [r7, #4]
   145bc:	603b      	str	r3, [r7, #0]
    return wifi_read_data(read_buffer, length, timeout_ms);
   145be:	6879      	ldr	r1, [r7, #4]
   145c0:	683a      	ldr	r2, [r7, #0]
   145c2:	68bb      	ldr	r3, [r7, #8]
   145c4:	0018      	movs	r0, r3
   145c6:	4b03      	ldr	r3, [pc, #12]	; (145d4 <mqtt_packet_read+0x24>)
   145c8:	4798      	blx	r3
   145ca:	0003      	movs	r3, r0
}
   145cc:	0018      	movs	r0, r3
   145ce:	46bd      	mov	sp, r7
   145d0:	b004      	add	sp, #16
   145d2:	bd80      	pop	{r7, pc}
   145d4:	00017089 	.word	0x00017089

000145d8 <mqtt_packet_write>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_write(Network *network, unsigned char *send_buffer, int length, int timeout_ms)
{
   145d8:	b580      	push	{r7, lr}
   145da:	b084      	sub	sp, #16
   145dc:	af00      	add	r7, sp, #0
   145de:	60f8      	str	r0, [r7, #12]
   145e0:	60b9      	str	r1, [r7, #8]
   145e2:	607a      	str	r2, [r7, #4]
   145e4:	603b      	str	r3, [r7, #0]
    return wifi_send_data(send_buffer, length, timeout_ms);
   145e6:	6879      	ldr	r1, [r7, #4]
   145e8:	683a      	ldr	r2, [r7, #0]
   145ea:	68bb      	ldr	r3, [r7, #8]
   145ec:	0018      	movs	r0, r3
   145ee:	4b03      	ldr	r3, [pc, #12]	; (145fc <mqtt_packet_write+0x24>)
   145f0:	4798      	blx	r3
   145f2:	0003      	movs	r3, r0
}
   145f4:	0018      	movs	r0, r3
   145f6:	46bd      	mov	sp, r7
   145f8:	b004      	add	sp, #16
   145fa:	bd80      	pop	{r7, pc}
   145fc:	000171bd 	.word	0x000171bd

00014600 <TimerCallback>:
/* Globals */
static uint32_t g_timer_val;

/** \brief Update the timer */
void TimerCallback(void)
{
   14600:	b580      	push	{r7, lr}
   14602:	af00      	add	r7, sp, #0
    g_timer_val += TIMER_UPDATE_PERIOD;
   14604:	4b04      	ldr	r3, [pc, #16]	; (14618 <TimerCallback+0x18>)
   14606:	681b      	ldr	r3, [r3, #0]
   14608:	3364      	adds	r3, #100	; 0x64
   1460a:	001a      	movs	r2, r3
   1460c:	4b02      	ldr	r3, [pc, #8]	; (14618 <TimerCallback+0x18>)
   1460e:	601a      	str	r2, [r3, #0]
}
   14610:	46c0      	nop			; (mov r8, r8)
   14612:	46bd      	mov	sp, r7
   14614:	bd80      	pop	{r7, pc}
   14616:	46c0      	nop			; (mov r8, r8)
   14618:	200005d0 	.word	0x200005d0

0001461c <get_time_of_day>:
 * \return  Whether the function was successful
 *            0  - The function was successful
 *            -1 - The function was not successful
 */
static int get_time_of_day(struct timeval *time)
{
   1461c:	b580      	push	{r7, lr}
   1461e:	b082      	sub	sp, #8
   14620:	af00      	add	r7, sp, #0
   14622:	6078      	str	r0, [r7, #4]
	if (time == NULL)
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	2b00      	cmp	r3, #0
   14628:	d102      	bne.n	14630 <get_time_of_day+0x14>
    {
        return -1;
   1462a:	2301      	movs	r3, #1
   1462c:	425b      	negs	r3, r3
   1462e:	e018      	b.n	14662 <get_time_of_day+0x46>
    }
        
	time->tv_sec =  (g_timer_val / 1000);
   14630:	4b0e      	ldr	r3, [pc, #56]	; (1466c <get_time_of_day+0x50>)
   14632:	6818      	ldr	r0, [r3, #0]
   14634:	4b0e      	ldr	r3, [pc, #56]	; (14670 <get_time_of_day+0x54>)
   14636:	22fa      	movs	r2, #250	; 0xfa
   14638:	0091      	lsls	r1, r2, #2
   1463a:	4798      	blx	r3
   1463c:	0003      	movs	r3, r0
   1463e:	001a      	movs	r2, r3
   14640:	687b      	ldr	r3, [r7, #4]
   14642:	601a      	str	r2, [r3, #0]
	time->tv_usec = ((g_timer_val % 1000) * 1000);
   14644:	4b09      	ldr	r3, [pc, #36]	; (1466c <get_time_of_day+0x50>)
   14646:	6818      	ldr	r0, [r3, #0]
   14648:	4b0a      	ldr	r3, [pc, #40]	; (14674 <get_time_of_day+0x58>)
   1464a:	22fa      	movs	r2, #250	; 0xfa
   1464c:	0091      	lsls	r1, r2, #2
   1464e:	4798      	blx	r3
   14650:	000b      	movs	r3, r1
   14652:	001a      	movs	r2, r3
   14654:	23fa      	movs	r3, #250	; 0xfa
   14656:	009b      	lsls	r3, r3, #2
   14658:	4353      	muls	r3, r2
   1465a:	001a      	movs	r2, r3
   1465c:	687b      	ldr	r3, [r7, #4]
   1465e:	605a      	str	r2, [r3, #4]

	return 0;
   14660:	2300      	movs	r3, #0
}
   14662:	0018      	movs	r0, r3
   14664:	46bd      	mov	sp, r7
   14666:	b002      	add	sp, #8
   14668:	bd80      	pop	{r7, pc}
   1466a:	46c0      	nop			; (mov r8, r8)
   1466c:	200005d0 	.word	0x200005d0
   14670:	00019d81 	.word	0x00019d81
   14674:	00019e8d 	.word	0x00019e8d

00014678 <TimerInit>:
 * \brief Initialize a timer
 *
 * \param[out] timer       The timer to be initialized
 */
void TimerInit(Timer *timer)
{
   14678:	b580      	push	{r7, lr}
   1467a:	b082      	sub	sp, #8
   1467c:	af00      	add	r7, sp, #0
   1467e:	6078      	str	r0, [r7, #4]
    if (timer == NULL)
   14680:	687b      	ldr	r3, [r7, #4]
   14682:	2b00      	cmp	r3, #0
   14684:	d006      	beq.n	14694 <TimerInit+0x1c>
    {
        return;
    }
    
	timer->end_time.tv_sec  = 0;
   14686:	687b      	ldr	r3, [r7, #4]
   14688:	2200      	movs	r2, #0
   1468a:	601a      	str	r2, [r3, #0]
	timer->end_time.tv_usec = 0;
   1468c:	687b      	ldr	r3, [r7, #4]
   1468e:	2200      	movs	r2, #0
   14690:	605a      	str	r2, [r3, #4]
   14692:	e000      	b.n	14696 <TimerInit+0x1e>
        return;
   14694:	46c0      	nop			; (mov r8, r8)
}
   14696:	46bd      	mov	sp, r7
   14698:	b002      	add	sp, #8
   1469a:	bd80      	pop	{r7, pc}

0001469c <TimerIsExpired>:
 * \return  Whether the timer has expired
 *            True  - The timer has expired
 *            False - The timer has not expired
 */
char TimerIsExpired(Timer *timer)
{
   1469c:	b580      	push	{r7, lr}
   1469e:	b086      	sub	sp, #24
   146a0:	af00      	add	r7, sp, #0
   146a2:	6078      	str	r0, [r7, #4]
	struct timeval time_now;
	struct timeval time_result;

    if (timer == NULL)
   146a4:	687b      	ldr	r3, [r7, #4]
   146a6:	2b00      	cmp	r3, #0
   146a8:	d101      	bne.n	146ae <TimerIsExpired+0x12>
    {
        return true;
   146aa:	2301      	movs	r3, #1
   146ac:	e03d      	b.n	1472a <TimerIsExpired+0x8e>
    }

	get_time_of_day(&time_now);
   146ae:	2310      	movs	r3, #16
   146b0:	18fb      	adds	r3, r7, r3
   146b2:	0018      	movs	r0, r3
   146b4:	4b1f      	ldr	r3, [pc, #124]	; (14734 <TimerIsExpired+0x98>)
   146b6:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
   146b8:	687b      	ldr	r3, [r7, #4]
   146ba:	681a      	ldr	r2, [r3, #0]
   146bc:	2310      	movs	r3, #16
   146be:	18fb      	adds	r3, r7, r3
   146c0:	681b      	ldr	r3, [r3, #0]
   146c2:	1ad2      	subs	r2, r2, r3
   146c4:	2308      	movs	r3, #8
   146c6:	18fb      	adds	r3, r7, r3
   146c8:	601a      	str	r2, [r3, #0]
   146ca:	687b      	ldr	r3, [r7, #4]
   146cc:	685a      	ldr	r2, [r3, #4]
   146ce:	2310      	movs	r3, #16
   146d0:	18fb      	adds	r3, r7, r3
   146d2:	685b      	ldr	r3, [r3, #4]
   146d4:	1ad2      	subs	r2, r2, r3
   146d6:	2308      	movs	r3, #8
   146d8:	18fb      	adds	r3, r7, r3
   146da:	605a      	str	r2, [r3, #4]
   146dc:	2308      	movs	r3, #8
   146de:	18fb      	adds	r3, r7, r3
   146e0:	685b      	ldr	r3, [r3, #4]
   146e2:	2b00      	cmp	r3, #0
   146e4:	da0e      	bge.n	14704 <TimerIsExpired+0x68>
   146e6:	2308      	movs	r3, #8
   146e8:	18fb      	adds	r3, r7, r3
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	1e5a      	subs	r2, r3, #1
   146ee:	2308      	movs	r3, #8
   146f0:	18fb      	adds	r3, r7, r3
   146f2:	601a      	str	r2, [r3, #0]
   146f4:	2308      	movs	r3, #8
   146f6:	18fb      	adds	r3, r7, r3
   146f8:	685b      	ldr	r3, [r3, #4]
   146fa:	4a0f      	ldr	r2, [pc, #60]	; (14738 <TimerIsExpired+0x9c>)
   146fc:	189a      	adds	r2, r3, r2
   146fe:	2308      	movs	r3, #8
   14700:	18fb      	adds	r3, r7, r3
   14702:	605a      	str	r2, [r3, #4]

	return (time_result.tv_sec < 0 || (time_result.tv_sec == 0 && time_result.tv_usec <= 0));
   14704:	2308      	movs	r3, #8
   14706:	18fb      	adds	r3, r7, r3
   14708:	681b      	ldr	r3, [r3, #0]
   1470a:	2b00      	cmp	r3, #0
   1470c:	db09      	blt.n	14722 <TimerIsExpired+0x86>
   1470e:	2308      	movs	r3, #8
   14710:	18fb      	adds	r3, r7, r3
   14712:	681b      	ldr	r3, [r3, #0]
   14714:	2b00      	cmp	r3, #0
   14716:	d106      	bne.n	14726 <TimerIsExpired+0x8a>
   14718:	2308      	movs	r3, #8
   1471a:	18fb      	adds	r3, r7, r3
   1471c:	685b      	ldr	r3, [r3, #4]
   1471e:	2b00      	cmp	r3, #0
   14720:	dc01      	bgt.n	14726 <TimerIsExpired+0x8a>
   14722:	2301      	movs	r3, #1
   14724:	e000      	b.n	14728 <TimerIsExpired+0x8c>
   14726:	2300      	movs	r3, #0
   14728:	b2db      	uxtb	r3, r3
}
   1472a:	0018      	movs	r0, r3
   1472c:	46bd      	mov	sp, r7
   1472e:	b006      	add	sp, #24
   14730:	bd80      	pop	{r7, pc}
   14732:	46c0      	nop			; (mov r8, r8)
   14734:	0001461d 	.word	0x0001461d
   14738:	000f4240 	.word	0x000f4240

0001473c <TimerCountdownMS>:
 * \param[out] timer       The timer set to expire in the specified number of
 *                         milliseconds
 * \param[in] timeout_ms   The timer expiration (in milliseconds)
 */
void TimerCountdownMS(Timer *timer, unsigned int timeout_ms)
{
   1473c:	b580      	push	{r7, lr}
   1473e:	b086      	sub	sp, #24
   14740:	af00      	add	r7, sp, #0
   14742:	6078      	str	r0, [r7, #4]
   14744:	6039      	str	r1, [r7, #0]
	struct timeval time_now;
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};
   14746:	6838      	ldr	r0, [r7, #0]
   14748:	4b22      	ldr	r3, [pc, #136]	; (147d4 <TimerCountdownMS+0x98>)
   1474a:	22fa      	movs	r2, #250	; 0xfa
   1474c:	0091      	lsls	r1, r2, #2
   1474e:	4798      	blx	r3
   14750:	0003      	movs	r3, r0
   14752:	001a      	movs	r2, r3
   14754:	2308      	movs	r3, #8
   14756:	18fb      	adds	r3, r7, r3
   14758:	601a      	str	r2, [r3, #0]
   1475a:	6838      	ldr	r0, [r7, #0]
   1475c:	4b1e      	ldr	r3, [pc, #120]	; (147d8 <TimerCountdownMS+0x9c>)
   1475e:	22fa      	movs	r2, #250	; 0xfa
   14760:	0091      	lsls	r1, r2, #2
   14762:	4798      	blx	r3
   14764:	000b      	movs	r3, r1
   14766:	001a      	movs	r2, r3
   14768:	23fa      	movs	r3, #250	; 0xfa
   1476a:	009b      	lsls	r3, r3, #2
   1476c:	4353      	muls	r3, r2
   1476e:	001a      	movs	r2, r3
   14770:	2308      	movs	r3, #8
   14772:	18fb      	adds	r3, r7, r3
   14774:	605a      	str	r2, [r3, #4]

    if (timer == NULL)
   14776:	687b      	ldr	r3, [r7, #4]
   14778:	2b00      	cmp	r3, #0
   1477a:	d027      	beq.n	147cc <TimerCountdownMS+0x90>
    {
        return;
    }

	get_time_of_day(&time_now);
   1477c:	2310      	movs	r3, #16
   1477e:	18fb      	adds	r3, r7, r3
   14780:	0018      	movs	r0, r3
   14782:	4b16      	ldr	r3, [pc, #88]	; (147dc <TimerCountdownMS+0xa0>)
   14784:	4798      	blx	r3
    
	timer_add(&time_now, &time_interval, &timer->end_time);
   14786:	2310      	movs	r3, #16
   14788:	18fb      	adds	r3, r7, r3
   1478a:	681a      	ldr	r2, [r3, #0]
   1478c:	2308      	movs	r3, #8
   1478e:	18fb      	adds	r3, r7, r3
   14790:	681b      	ldr	r3, [r3, #0]
   14792:	18d2      	adds	r2, r2, r3
   14794:	687b      	ldr	r3, [r7, #4]
   14796:	601a      	str	r2, [r3, #0]
   14798:	2310      	movs	r3, #16
   1479a:	18fb      	adds	r3, r7, r3
   1479c:	685a      	ldr	r2, [r3, #4]
   1479e:	2308      	movs	r3, #8
   147a0:	18fb      	adds	r3, r7, r3
   147a2:	685b      	ldr	r3, [r3, #4]
   147a4:	18d2      	adds	r2, r2, r3
   147a6:	687b      	ldr	r3, [r7, #4]
   147a8:	605a      	str	r2, [r3, #4]
   147aa:	687b      	ldr	r3, [r7, #4]
   147ac:	685b      	ldr	r3, [r3, #4]
   147ae:	4a0c      	ldr	r2, [pc, #48]	; (147e0 <TimerCountdownMS+0xa4>)
   147b0:	4293      	cmp	r3, r2
   147b2:	dd0c      	ble.n	147ce <TimerCountdownMS+0x92>
   147b4:	687b      	ldr	r3, [r7, #4]
   147b6:	681b      	ldr	r3, [r3, #0]
   147b8:	1c5a      	adds	r2, r3, #1
   147ba:	687b      	ldr	r3, [r7, #4]
   147bc:	601a      	str	r2, [r3, #0]
   147be:	687b      	ldr	r3, [r7, #4]
   147c0:	685b      	ldr	r3, [r3, #4]
   147c2:	4a08      	ldr	r2, [pc, #32]	; (147e4 <TimerCountdownMS+0xa8>)
   147c4:	189a      	adds	r2, r3, r2
   147c6:	687b      	ldr	r3, [r7, #4]
   147c8:	605a      	str	r2, [r3, #4]
   147ca:	e000      	b.n	147ce <TimerCountdownMS+0x92>
        return;
   147cc:	46c0      	nop			; (mov r8, r8)
}
   147ce:	46bd      	mov	sp, r7
   147d0:	b006      	add	sp, #24
   147d2:	bd80      	pop	{r7, pc}
   147d4:	00019d81 	.word	0x00019d81
   147d8:	00019e8d 	.word	0x00019e8d
   147dc:	0001461d 	.word	0x0001461d
   147e0:	000f423f 	.word	0x000f423f
   147e4:	fff0bdc0 	.word	0xfff0bdc0

000147e8 <TimerCountdown>:
 * \param[out] timer       The timer set to expire in the specified number of
 *                         seconds
 * \param[in] timeout_ms   The timer expiration (in seconds)
 */
void TimerCountdown(Timer *timer, unsigned int timeout)
{
   147e8:	b580      	push	{r7, lr}
   147ea:	b086      	sub	sp, #24
   147ec:	af00      	add	r7, sp, #0
   147ee:	6078      	str	r0, [r7, #4]
   147f0:	6039      	str	r1, [r7, #0]
	struct timeval time_now;
	struct timeval time_interval = {timeout, 0};
   147f2:	683a      	ldr	r2, [r7, #0]
   147f4:	2308      	movs	r3, #8
   147f6:	18fb      	adds	r3, r7, r3
   147f8:	601a      	str	r2, [r3, #0]
   147fa:	2308      	movs	r3, #8
   147fc:	18fb      	adds	r3, r7, r3
   147fe:	2200      	movs	r2, #0
   14800:	605a      	str	r2, [r3, #4]

    if (timer == NULL)
   14802:	687b      	ldr	r3, [r7, #4]
   14804:	2b00      	cmp	r3, #0
   14806:	d027      	beq.n	14858 <TimerCountdown+0x70>
    {
        return;
    }

	get_time_of_day(&time_now);
   14808:	2310      	movs	r3, #16
   1480a:	18fb      	adds	r3, r7, r3
   1480c:	0018      	movs	r0, r3
   1480e:	4b14      	ldr	r3, [pc, #80]	; (14860 <TimerCountdown+0x78>)
   14810:	4798      	blx	r3

	timer_add(&time_now, &time_interval, &timer->end_time);
   14812:	2310      	movs	r3, #16
   14814:	18fb      	adds	r3, r7, r3
   14816:	681a      	ldr	r2, [r3, #0]
   14818:	2308      	movs	r3, #8
   1481a:	18fb      	adds	r3, r7, r3
   1481c:	681b      	ldr	r3, [r3, #0]
   1481e:	18d2      	adds	r2, r2, r3
   14820:	687b      	ldr	r3, [r7, #4]
   14822:	601a      	str	r2, [r3, #0]
   14824:	2310      	movs	r3, #16
   14826:	18fb      	adds	r3, r7, r3
   14828:	685a      	ldr	r2, [r3, #4]
   1482a:	2308      	movs	r3, #8
   1482c:	18fb      	adds	r3, r7, r3
   1482e:	685b      	ldr	r3, [r3, #4]
   14830:	18d2      	adds	r2, r2, r3
   14832:	687b      	ldr	r3, [r7, #4]
   14834:	605a      	str	r2, [r3, #4]
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	685b      	ldr	r3, [r3, #4]
   1483a:	4a0a      	ldr	r2, [pc, #40]	; (14864 <TimerCountdown+0x7c>)
   1483c:	4293      	cmp	r3, r2
   1483e:	dd0c      	ble.n	1485a <TimerCountdown+0x72>
   14840:	687b      	ldr	r3, [r7, #4]
   14842:	681b      	ldr	r3, [r3, #0]
   14844:	1c5a      	adds	r2, r3, #1
   14846:	687b      	ldr	r3, [r7, #4]
   14848:	601a      	str	r2, [r3, #0]
   1484a:	687b      	ldr	r3, [r7, #4]
   1484c:	685b      	ldr	r3, [r3, #4]
   1484e:	4a06      	ldr	r2, [pc, #24]	; (14868 <TimerCountdown+0x80>)
   14850:	189a      	adds	r2, r3, r2
   14852:	687b      	ldr	r3, [r7, #4]
   14854:	605a      	str	r2, [r3, #4]
   14856:	e000      	b.n	1485a <TimerCountdown+0x72>
        return;
   14858:	46c0      	nop			; (mov r8, r8)
}
   1485a:	46bd      	mov	sp, r7
   1485c:	b006      	add	sp, #24
   1485e:	bd80      	pop	{r7, pc}
   14860:	0001461d 	.word	0x0001461d
   14864:	000f423f 	.word	0x000f423f
   14868:	fff0bdc0 	.word	0xfff0bdc0

0001486c <TimerLeftMS>:
 * \param[out] timer       The timer to be set to checked
 *
 * \return  The number of milliseconds left on the countdown timer
 */
int TimerLeftMS(Timer *timer)
{
   1486c:	b590      	push	{r4, r7, lr}
   1486e:	b089      	sub	sp, #36	; 0x24
   14870:	af00      	add	r7, sp, #0
   14872:	6078      	str	r0, [r7, #4]
	int result_ms = 0;
   14874:	2300      	movs	r3, #0
   14876:	61fb      	str	r3, [r7, #28]
	struct timeval time_now;
    struct timeval time_result;

    if (timer == NULL)
   14878:	687b      	ldr	r3, [r7, #4]
   1487a:	2b00      	cmp	r3, #0
   1487c:	d101      	bne.n	14882 <TimerLeftMS+0x16>
    {
        return 0;
   1487e:	2300      	movs	r3, #0
   14880:	e041      	b.n	14906 <TimerLeftMS+0x9a>
    }

	get_time_of_day(&time_now);
   14882:	2314      	movs	r3, #20
   14884:	18fb      	adds	r3, r7, r3
   14886:	0018      	movs	r0, r3
   14888:	4b21      	ldr	r3, [pc, #132]	; (14910 <TimerLeftMS+0xa4>)
   1488a:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
   1488c:	687b      	ldr	r3, [r7, #4]
   1488e:	681a      	ldr	r2, [r3, #0]
   14890:	2314      	movs	r3, #20
   14892:	18fb      	adds	r3, r7, r3
   14894:	681b      	ldr	r3, [r3, #0]
   14896:	1ad2      	subs	r2, r2, r3
   14898:	230c      	movs	r3, #12
   1489a:	18fb      	adds	r3, r7, r3
   1489c:	601a      	str	r2, [r3, #0]
   1489e:	687b      	ldr	r3, [r7, #4]
   148a0:	685a      	ldr	r2, [r3, #4]
   148a2:	2314      	movs	r3, #20
   148a4:	18fb      	adds	r3, r7, r3
   148a6:	685b      	ldr	r3, [r3, #4]
   148a8:	1ad2      	subs	r2, r2, r3
   148aa:	230c      	movs	r3, #12
   148ac:	18fb      	adds	r3, r7, r3
   148ae:	605a      	str	r2, [r3, #4]
   148b0:	230c      	movs	r3, #12
   148b2:	18fb      	adds	r3, r7, r3
   148b4:	685b      	ldr	r3, [r3, #4]
   148b6:	2b00      	cmp	r3, #0
   148b8:	da0e      	bge.n	148d8 <TimerLeftMS+0x6c>
   148ba:	230c      	movs	r3, #12
   148bc:	18fb      	adds	r3, r7, r3
   148be:	681b      	ldr	r3, [r3, #0]
   148c0:	1e5a      	subs	r2, r3, #1
   148c2:	230c      	movs	r3, #12
   148c4:	18fb      	adds	r3, r7, r3
   148c6:	601a      	str	r2, [r3, #0]
   148c8:	230c      	movs	r3, #12
   148ca:	18fb      	adds	r3, r7, r3
   148cc:	685b      	ldr	r3, [r3, #4]
   148ce:	4a11      	ldr	r2, [pc, #68]	; (14914 <TimerLeftMS+0xa8>)
   148d0:	189a      	adds	r2, r3, r2
   148d2:	230c      	movs	r3, #12
   148d4:	18fb      	adds	r3, r7, r3
   148d6:	605a      	str	r2, [r3, #4]
	if(time_result.tv_sec >= 0)
   148d8:	230c      	movs	r3, #12
   148da:	18fb      	adds	r3, r7, r3
   148dc:	681b      	ldr	r3, [r3, #0]
   148de:	2b00      	cmp	r3, #0
   148e0:	db10      	blt.n	14904 <TimerLeftMS+0x98>
    {
		result_ms = (int)((time_result.tv_sec * 1000) + (time_result.tv_usec / 1000));
   148e2:	230c      	movs	r3, #12
   148e4:	18fb      	adds	r3, r7, r3
   148e6:	681b      	ldr	r3, [r3, #0]
   148e8:	22fa      	movs	r2, #250	; 0xfa
   148ea:	0092      	lsls	r2, r2, #2
   148ec:	435a      	muls	r2, r3
   148ee:	0014      	movs	r4, r2
   148f0:	230c      	movs	r3, #12
   148f2:	18fb      	adds	r3, r7, r3
   148f4:	6858      	ldr	r0, [r3, #4]
   148f6:	4b08      	ldr	r3, [pc, #32]	; (14918 <TimerLeftMS+0xac>)
   148f8:	22fa      	movs	r2, #250	; 0xfa
   148fa:	0091      	lsls	r1, r2, #2
   148fc:	4798      	blx	r3
   148fe:	0003      	movs	r3, r0
   14900:	18e3      	adds	r3, r4, r3
   14902:	61fb      	str	r3, [r7, #28]
	}

	return result_ms;
   14904:	69fb      	ldr	r3, [r7, #28]
}
   14906:	0018      	movs	r0, r3
   14908:	46bd      	mov	sp, r7
   1490a:	b009      	add	sp, #36	; 0x24
   1490c:	bd90      	pop	{r4, r7, pc}
   1490e:	46c0      	nop			; (mov r8, r8)
   14910:	0001461d 	.word	0x0001461d
   14914:	000f4240 	.word	0x000f4240
   14918:	00019e95 	.word	0x00019e95

0001491c <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
   1491c:	b580      	push	{r7, lr}
   1491e:	b084      	sub	sp, #16
   14920:	af00      	add	r7, sp, #0
   14922:	6078      	str	r0, [r7, #4]
   14924:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
   14926:	4b0e      	ldr	r3, [pc, #56]	; (14960 <parson_strndup+0x44>)
   14928:	681b      	ldr	r3, [r3, #0]
   1492a:	683a      	ldr	r2, [r7, #0]
   1492c:	3201      	adds	r2, #1
   1492e:	0010      	movs	r0, r2
   14930:	4798      	blx	r3
   14932:	0003      	movs	r3, r0
   14934:	60fb      	str	r3, [r7, #12]
    if (!output_string)
   14936:	68fb      	ldr	r3, [r7, #12]
   14938:	2b00      	cmp	r3, #0
   1493a:	d101      	bne.n	14940 <parson_strndup+0x24>
        return NULL;
   1493c:	2300      	movs	r3, #0
   1493e:	e00b      	b.n	14958 <parson_strndup+0x3c>
    output_string[n] = '\0';
   14940:	68fa      	ldr	r2, [r7, #12]
   14942:	683b      	ldr	r3, [r7, #0]
   14944:	18d3      	adds	r3, r2, r3
   14946:	2200      	movs	r2, #0
   14948:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
   1494a:	683a      	ldr	r2, [r7, #0]
   1494c:	6879      	ldr	r1, [r7, #4]
   1494e:	68fb      	ldr	r3, [r7, #12]
   14950:	0018      	movs	r0, r3
   14952:	4b04      	ldr	r3, [pc, #16]	; (14964 <parson_strndup+0x48>)
   14954:	4798      	blx	r3
    return output_string;
   14956:	68fb      	ldr	r3, [r7, #12]
}
   14958:	0018      	movs	r0, r3
   1495a:	46bd      	mov	sp, r7
   1495c:	b004      	add	sp, #16
   1495e:	bd80      	pop	{r7, pc}
   14960:	20000158 	.word	0x20000158
   14964:	0001c803 	.word	0x0001c803

00014968 <parson_strdup>:

static char * parson_strdup(const char *string) {
   14968:	b580      	push	{r7, lr}
   1496a:	b082      	sub	sp, #8
   1496c:	af00      	add	r7, sp, #0
   1496e:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
   14970:	687b      	ldr	r3, [r7, #4]
   14972:	0018      	movs	r0, r3
   14974:	4b06      	ldr	r3, [pc, #24]	; (14990 <parson_strdup+0x28>)
   14976:	4798      	blx	r3
   14978:	0002      	movs	r2, r0
   1497a:	687b      	ldr	r3, [r7, #4]
   1497c:	0011      	movs	r1, r2
   1497e:	0018      	movs	r0, r3
   14980:	4b04      	ldr	r3, [pc, #16]	; (14994 <parson_strdup+0x2c>)
   14982:	4798      	blx	r3
   14984:	0003      	movs	r3, r0
}
   14986:	0018      	movs	r0, r3
   14988:	46bd      	mov	sp, r7
   1498a:	b002      	add	sp, #8
   1498c:	bd80      	pop	{r7, pc}
   1498e:	46c0      	nop			; (mov r8, r8)
   14990:	0001c7d3 	.word	0x0001c7d3
   14994:	0001491d 	.word	0x0001491d

00014998 <is_utf16_hex>:

static int is_utf16_hex(const unsigned char *s) {
   14998:	b580      	push	{r7, lr}
   1499a:	b082      	sub	sp, #8
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
    return isxdigit(s[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);
   149a0:	4b1c      	ldr	r3, [pc, #112]	; (14a14 <is_utf16_hex+0x7c>)
   149a2:	4798      	blx	r3
   149a4:	0002      	movs	r2, r0
   149a6:	687b      	ldr	r3, [r7, #4]
   149a8:	781b      	ldrb	r3, [r3, #0]
   149aa:	3301      	adds	r3, #1
   149ac:	18d3      	adds	r3, r2, r3
   149ae:	781b      	ldrb	r3, [r3, #0]
   149b0:	001a      	movs	r2, r3
   149b2:	2344      	movs	r3, #68	; 0x44
   149b4:	4013      	ands	r3, r2
   149b6:	d028      	beq.n	14a0a <is_utf16_hex+0x72>
   149b8:	4b16      	ldr	r3, [pc, #88]	; (14a14 <is_utf16_hex+0x7c>)
   149ba:	4798      	blx	r3
   149bc:	0002      	movs	r2, r0
   149be:	687b      	ldr	r3, [r7, #4]
   149c0:	3301      	adds	r3, #1
   149c2:	781b      	ldrb	r3, [r3, #0]
   149c4:	3301      	adds	r3, #1
   149c6:	18d3      	adds	r3, r2, r3
   149c8:	781b      	ldrb	r3, [r3, #0]
   149ca:	001a      	movs	r2, r3
   149cc:	2344      	movs	r3, #68	; 0x44
   149ce:	4013      	ands	r3, r2
   149d0:	d01b      	beq.n	14a0a <is_utf16_hex+0x72>
   149d2:	4b10      	ldr	r3, [pc, #64]	; (14a14 <is_utf16_hex+0x7c>)
   149d4:	4798      	blx	r3
   149d6:	0002      	movs	r2, r0
   149d8:	687b      	ldr	r3, [r7, #4]
   149da:	3302      	adds	r3, #2
   149dc:	781b      	ldrb	r3, [r3, #0]
   149de:	3301      	adds	r3, #1
   149e0:	18d3      	adds	r3, r2, r3
   149e2:	781b      	ldrb	r3, [r3, #0]
   149e4:	001a      	movs	r2, r3
   149e6:	2344      	movs	r3, #68	; 0x44
   149e8:	4013      	ands	r3, r2
   149ea:	d00e      	beq.n	14a0a <is_utf16_hex+0x72>
   149ec:	4b09      	ldr	r3, [pc, #36]	; (14a14 <is_utf16_hex+0x7c>)
   149ee:	4798      	blx	r3
   149f0:	0002      	movs	r2, r0
   149f2:	687b      	ldr	r3, [r7, #4]
   149f4:	3303      	adds	r3, #3
   149f6:	781b      	ldrb	r3, [r3, #0]
   149f8:	3301      	adds	r3, #1
   149fa:	18d3      	adds	r3, r2, r3
   149fc:	781b      	ldrb	r3, [r3, #0]
   149fe:	001a      	movs	r2, r3
   14a00:	2344      	movs	r3, #68	; 0x44
   14a02:	4013      	ands	r3, r2
   14a04:	d001      	beq.n	14a0a <is_utf16_hex+0x72>
   14a06:	2301      	movs	r3, #1
   14a08:	e000      	b.n	14a0c <is_utf16_hex+0x74>
   14a0a:	2300      	movs	r3, #0
}
   14a0c:	0018      	movs	r0, r3
   14a0e:	46bd      	mov	sp, r7
   14a10:	b002      	add	sp, #8
   14a12:	bd80      	pop	{r7, pc}
   14a14:	0001c071 	.word	0x0001c071

00014a18 <is_decimal>:
        string += len;
    }
    return 1;
}

static int is_decimal(const char *string, size_t length) {
   14a18:	b580      	push	{r7, lr}
   14a1a:	b082      	sub	sp, #8
   14a1c:	af00      	add	r7, sp, #0
   14a1e:	6078      	str	r0, [r7, #4]
   14a20:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.')
   14a22:	683b      	ldr	r3, [r7, #0]
   14a24:	2b01      	cmp	r3, #1
   14a26:	d90a      	bls.n	14a3e <is_decimal+0x26>
   14a28:	687b      	ldr	r3, [r7, #4]
   14a2a:	781b      	ldrb	r3, [r3, #0]
   14a2c:	2b30      	cmp	r3, #48	; 0x30
   14a2e:	d106      	bne.n	14a3e <is_decimal+0x26>
   14a30:	687b      	ldr	r3, [r7, #4]
   14a32:	3301      	adds	r3, #1
   14a34:	781b      	ldrb	r3, [r3, #0]
   14a36:	2b2e      	cmp	r3, #46	; 0x2e
   14a38:	d001      	beq.n	14a3e <is_decimal+0x26>
        return 0;
   14a3a:	2300      	movs	r3, #0
   14a3c:	e025      	b.n	14a8a <is_decimal+0x72>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.')
   14a3e:	683b      	ldr	r3, [r7, #0]
   14a40:	2b02      	cmp	r3, #2
   14a42:	d91c      	bls.n	14a7e <is_decimal+0x66>
   14a44:	4913      	ldr	r1, [pc, #76]	; (14a94 <is_decimal+0x7c>)
   14a46:	687b      	ldr	r3, [r7, #4]
   14a48:	2202      	movs	r2, #2
   14a4a:	0018      	movs	r0, r3
   14a4c:	4b12      	ldr	r3, [pc, #72]	; (14a98 <is_decimal+0x80>)
   14a4e:	4798      	blx	r3
   14a50:	1e03      	subs	r3, r0, #0
   14a52:	d114      	bne.n	14a7e <is_decimal+0x66>
   14a54:	687b      	ldr	r3, [r7, #4]
   14a56:	3302      	adds	r3, #2
   14a58:	781b      	ldrb	r3, [r3, #0]
   14a5a:	2b2e      	cmp	r3, #46	; 0x2e
   14a5c:	d00f      	beq.n	14a7e <is_decimal+0x66>
        return 0;
   14a5e:	2300      	movs	r3, #0
   14a60:	e013      	b.n	14a8a <is_decimal+0x72>
    while (length--)
        if (strchr("xX", string[length]))
   14a62:	687a      	ldr	r2, [r7, #4]
   14a64:	683b      	ldr	r3, [r7, #0]
   14a66:	18d3      	adds	r3, r2, r3
   14a68:	781b      	ldrb	r3, [r3, #0]
   14a6a:	001a      	movs	r2, r3
   14a6c:	4b0b      	ldr	r3, [pc, #44]	; (14a9c <is_decimal+0x84>)
   14a6e:	0011      	movs	r1, r2
   14a70:	0018      	movs	r0, r3
   14a72:	4b0b      	ldr	r3, [pc, #44]	; (14aa0 <is_decimal+0x88>)
   14a74:	4798      	blx	r3
   14a76:	1e03      	subs	r3, r0, #0
   14a78:	d001      	beq.n	14a7e <is_decimal+0x66>
            return 0;
   14a7a:	2300      	movs	r3, #0
   14a7c:	e005      	b.n	14a8a <is_decimal+0x72>
    while (length--)
   14a7e:	683b      	ldr	r3, [r7, #0]
   14a80:	1e5a      	subs	r2, r3, #1
   14a82:	603a      	str	r2, [r7, #0]
   14a84:	2b00      	cmp	r3, #0
   14a86:	d1ec      	bne.n	14a62 <is_decimal+0x4a>
    return 1;
   14a88:	2301      	movs	r3, #1
}
   14a8a:	0018      	movs	r0, r3
   14a8c:	46bd      	mov	sp, r7
   14a8e:	b002      	add	sp, #8
   14a90:	bd80      	pop	{r7, pc}
   14a92:	46c0      	nop			; (mov r8, r8)
   14a94:	00021090 	.word	0x00021090
   14a98:	0001c7e1 	.word	0x0001c7e1
   14a9c:	00021094 	.word	0x00021094
   14aa0:	0001c7a7 	.word	0x0001c7a7

00014aa4 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(void) {
   14aa4:	b580      	push	{r7, lr}
   14aa6:	b082      	sub	sp, #8
   14aa8:	af00      	add	r7, sp, #0
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
   14aaa:	4b0e      	ldr	r3, [pc, #56]	; (14ae4 <json_object_init+0x40>)
   14aac:	681b      	ldr	r3, [r3, #0]
   14aae:	2010      	movs	r0, #16
   14ab0:	4798      	blx	r3
   14ab2:	0003      	movs	r3, r0
   14ab4:	607b      	str	r3, [r7, #4]
    if (!new_obj)
   14ab6:	687b      	ldr	r3, [r7, #4]
   14ab8:	2b00      	cmp	r3, #0
   14aba:	d101      	bne.n	14ac0 <json_object_init+0x1c>
        return NULL;
   14abc:	2300      	movs	r3, #0
   14abe:	e00c      	b.n	14ada <json_object_init+0x36>
    new_obj->names = (char**)NULL;
   14ac0:	687b      	ldr	r3, [r7, #4]
   14ac2:	2200      	movs	r2, #0
   14ac4:	601a      	str	r2, [r3, #0]
    new_obj->values = (JSON_Value**)NULL;
   14ac6:	687b      	ldr	r3, [r7, #4]
   14ac8:	2200      	movs	r2, #0
   14aca:	605a      	str	r2, [r3, #4]
    new_obj->capacity = 0;
   14acc:	687b      	ldr	r3, [r7, #4]
   14ace:	2200      	movs	r2, #0
   14ad0:	60da      	str	r2, [r3, #12]
    new_obj->count = 0;
   14ad2:	687b      	ldr	r3, [r7, #4]
   14ad4:	2200      	movs	r2, #0
   14ad6:	609a      	str	r2, [r3, #8]
    return new_obj;
   14ad8:	687b      	ldr	r3, [r7, #4]
}
   14ada:	0018      	movs	r0, r3
   14adc:	46bd      	mov	sp, r7
   14ade:	b002      	add	sp, #8
   14ae0:	bd80      	pop	{r7, pc}
   14ae2:	46c0      	nop			; (mov r8, r8)
   14ae4:	20000158 	.word	0x20000158

00014ae8 <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
   14ae8:	b590      	push	{r4, r7, lr}
   14aea:	b087      	sub	sp, #28
   14aec:	af00      	add	r7, sp, #0
   14aee:	60f8      	str	r0, [r7, #12]
   14af0:	60b9      	str	r1, [r7, #8]
   14af2:	607a      	str	r2, [r7, #4]
    size_t index = 0;
   14af4:	2300      	movs	r3, #0
   14af6:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
   14af8:	68fb      	ldr	r3, [r7, #12]
   14afa:	2b00      	cmp	r3, #0
   14afc:	d005      	beq.n	14b0a <json_object_add+0x22>
   14afe:	68bb      	ldr	r3, [r7, #8]
   14b00:	2b00      	cmp	r3, #0
   14b02:	d002      	beq.n	14b0a <json_object_add+0x22>
   14b04:	687b      	ldr	r3, [r7, #4]
   14b06:	2b00      	cmp	r3, #0
   14b08:	d102      	bne.n	14b10 <json_object_add+0x28>
        return JSONFailure;
   14b0a:	2301      	movs	r3, #1
   14b0c:	425b      	negs	r3, r3
   14b0e:	e051      	b.n	14bb4 <json_object_add+0xcc>
    }
    if (object->count >= object->capacity) {
   14b10:	68fb      	ldr	r3, [r7, #12]
   14b12:	689a      	ldr	r2, [r3, #8]
   14b14:	68fb      	ldr	r3, [r7, #12]
   14b16:	68db      	ldr	r3, [r3, #12]
   14b18:	429a      	cmp	r2, r3
   14b1a:	d31a      	bcc.n	14b52 <json_object_add+0x6a>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
   14b1c:	68fb      	ldr	r3, [r7, #12]
   14b1e:	68db      	ldr	r3, [r3, #12]
   14b20:	005b      	lsls	r3, r3, #1
   14b22:	2b0f      	cmp	r3, #15
   14b24:	d200      	bcs.n	14b28 <json_object_add+0x40>
   14b26:	230f      	movs	r3, #15
   14b28:	613b      	str	r3, [r7, #16]
        if (new_capacity > OBJECT_MAX_CAPACITY)
   14b2a:	693a      	ldr	r2, [r7, #16]
   14b2c:	23f0      	movs	r3, #240	; 0xf0
   14b2e:	009b      	lsls	r3, r3, #2
   14b30:	429a      	cmp	r2, r3
   14b32:	d902      	bls.n	14b3a <json_object_add+0x52>
            return JSONFailure;
   14b34:	2301      	movs	r3, #1
   14b36:	425b      	negs	r3, r3
   14b38:	e03c      	b.n	14bb4 <json_object_add+0xcc>
        if (json_object_resize(object, new_capacity) == JSONFailure)
   14b3a:	693a      	ldr	r2, [r7, #16]
   14b3c:	68fb      	ldr	r3, [r7, #12]
   14b3e:	0011      	movs	r1, r2
   14b40:	0018      	movs	r0, r3
   14b42:	4b1e      	ldr	r3, [pc, #120]	; (14bbc <json_object_add+0xd4>)
   14b44:	4798      	blx	r3
   14b46:	0003      	movs	r3, r0
   14b48:	3301      	adds	r3, #1
   14b4a:	d102      	bne.n	14b52 <json_object_add+0x6a>
            return JSONFailure;
   14b4c:	2301      	movs	r3, #1
   14b4e:	425b      	negs	r3, r3
   14b50:	e030      	b.n	14bb4 <json_object_add+0xcc>
    }
    if (json_object_get_value(object, name) != NULL)
   14b52:	68ba      	ldr	r2, [r7, #8]
   14b54:	68fb      	ldr	r3, [r7, #12]
   14b56:	0011      	movs	r1, r2
   14b58:	0018      	movs	r0, r3
   14b5a:	4b19      	ldr	r3, [pc, #100]	; (14bc0 <json_object_add+0xd8>)
   14b5c:	4798      	blx	r3
   14b5e:	1e03      	subs	r3, r0, #0
   14b60:	d002      	beq.n	14b68 <json_object_add+0x80>
        return JSONFailure;
   14b62:	2301      	movs	r3, #1
   14b64:	425b      	negs	r3, r3
   14b66:	e025      	b.n	14bb4 <json_object_add+0xcc>
    index = object->count;
   14b68:	68fb      	ldr	r3, [r7, #12]
   14b6a:	689b      	ldr	r3, [r3, #8]
   14b6c:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strdup(name);
   14b6e:	68fb      	ldr	r3, [r7, #12]
   14b70:	681a      	ldr	r2, [r3, #0]
   14b72:	697b      	ldr	r3, [r7, #20]
   14b74:	009b      	lsls	r3, r3, #2
   14b76:	18d4      	adds	r4, r2, r3
   14b78:	68bb      	ldr	r3, [r7, #8]
   14b7a:	0018      	movs	r0, r3
   14b7c:	4b11      	ldr	r3, [pc, #68]	; (14bc4 <json_object_add+0xdc>)
   14b7e:	4798      	blx	r3
   14b80:	0003      	movs	r3, r0
   14b82:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL)
   14b84:	68fb      	ldr	r3, [r7, #12]
   14b86:	681a      	ldr	r2, [r3, #0]
   14b88:	697b      	ldr	r3, [r7, #20]
   14b8a:	009b      	lsls	r3, r3, #2
   14b8c:	18d3      	adds	r3, r2, r3
   14b8e:	681b      	ldr	r3, [r3, #0]
   14b90:	2b00      	cmp	r3, #0
   14b92:	d102      	bne.n	14b9a <json_object_add+0xb2>
        return JSONFailure;
   14b94:	2301      	movs	r3, #1
   14b96:	425b      	negs	r3, r3
   14b98:	e00c      	b.n	14bb4 <json_object_add+0xcc>
    object->values[index] = value;
   14b9a:	68fb      	ldr	r3, [r7, #12]
   14b9c:	685a      	ldr	r2, [r3, #4]
   14b9e:	697b      	ldr	r3, [r7, #20]
   14ba0:	009b      	lsls	r3, r3, #2
   14ba2:	18d3      	adds	r3, r2, r3
   14ba4:	687a      	ldr	r2, [r7, #4]
   14ba6:	601a      	str	r2, [r3, #0]
    object->count++;
   14ba8:	68fb      	ldr	r3, [r7, #12]
   14baa:	689b      	ldr	r3, [r3, #8]
   14bac:	1c5a      	adds	r2, r3, #1
   14bae:	68fb      	ldr	r3, [r7, #12]
   14bb0:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
   14bb2:	2300      	movs	r3, #0
}
   14bb4:	0018      	movs	r0, r3
   14bb6:	46bd      	mov	sp, r7
   14bb8:	b007      	add	sp, #28
   14bba:	bd90      	pop	{r4, r7, pc}
   14bbc:	00014bc9 	.word	0x00014bc9
   14bc0:	00015a65 	.word	0x00015a65
   14bc4:	00014969 	.word	0x00014969

00014bc8 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
   14bc8:	b580      	push	{r7, lr}
   14bca:	b084      	sub	sp, #16
   14bcc:	af00      	add	r7, sp, #0
   14bce:	6078      	str	r0, [r7, #4]
   14bd0:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
   14bd2:	2300      	movs	r3, #0
   14bd4:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
   14bd6:	2300      	movs	r3, #0
   14bd8:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
   14bda:	687b      	ldr	r3, [r7, #4]
   14bdc:	681b      	ldr	r3, [r3, #0]
   14bde:	2b00      	cmp	r3, #0
   14be0:	d103      	bne.n	14bea <json_object_resize+0x22>
   14be2:	687b      	ldr	r3, [r7, #4]
   14be4:	685b      	ldr	r3, [r3, #4]
   14be6:	2b00      	cmp	r3, #0
   14be8:	d10a      	bne.n	14c00 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
   14bea:	687b      	ldr	r3, [r7, #4]
   14bec:	681b      	ldr	r3, [r3, #0]
    if ((object->names == NULL && object->values != NULL) ||
   14bee:	2b00      	cmp	r3, #0
   14bf0:	d003      	beq.n	14bfa <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
   14bf2:	687b      	ldr	r3, [r7, #4]
   14bf4:	685b      	ldr	r3, [r3, #4]
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d002      	beq.n	14c00 <json_object_resize+0x38>
   14bfa:	683b      	ldr	r3, [r7, #0]
   14bfc:	2b00      	cmp	r3, #0
   14bfe:	d102      	bne.n	14c06 <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
   14c00:	2301      	movs	r3, #1
   14c02:	425b      	negs	r3, r3
   14c04:	e054      	b.n	14cb0 <json_object_resize+0xe8>
    }
    
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
   14c06:	4b2c      	ldr	r3, [pc, #176]	; (14cb8 <json_object_resize+0xf0>)
   14c08:	681b      	ldr	r3, [r3, #0]
   14c0a:	683a      	ldr	r2, [r7, #0]
   14c0c:	0092      	lsls	r2, r2, #2
   14c0e:	0010      	movs	r0, r2
   14c10:	4798      	blx	r3
   14c12:	0003      	movs	r3, r0
   14c14:	60fb      	str	r3, [r7, #12]
    if (temp_names == NULL)
   14c16:	68fb      	ldr	r3, [r7, #12]
   14c18:	2b00      	cmp	r3, #0
   14c1a:	d102      	bne.n	14c22 <json_object_resize+0x5a>
        return JSONFailure;
   14c1c:	2301      	movs	r3, #1
   14c1e:	425b      	negs	r3, r3
   14c20:	e046      	b.n	14cb0 <json_object_resize+0xe8>
    
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
   14c22:	4b25      	ldr	r3, [pc, #148]	; (14cb8 <json_object_resize+0xf0>)
   14c24:	681b      	ldr	r3, [r3, #0]
   14c26:	683a      	ldr	r2, [r7, #0]
   14c28:	0092      	lsls	r2, r2, #2
   14c2a:	0010      	movs	r0, r2
   14c2c:	4798      	blx	r3
   14c2e:	0003      	movs	r3, r0
   14c30:	60bb      	str	r3, [r7, #8]
    if (temp_names == NULL) {
   14c32:	68fb      	ldr	r3, [r7, #12]
   14c34:	2b00      	cmp	r3, #0
   14c36:	d107      	bne.n	14c48 <json_object_resize+0x80>
        parson_free(temp_names);
   14c38:	4b20      	ldr	r3, [pc, #128]	; (14cbc <json_object_resize+0xf4>)
   14c3a:	681b      	ldr	r3, [r3, #0]
   14c3c:	68fa      	ldr	r2, [r7, #12]
   14c3e:	0010      	movs	r0, r2
   14c40:	4798      	blx	r3
        return JSONFailure;
   14c42:	2301      	movs	r3, #1
   14c44:	425b      	negs	r3, r3
   14c46:	e033      	b.n	14cb0 <json_object_resize+0xe8>
    }
    
    if (object->names != NULL && object->values != NULL && object->count > 0) {
   14c48:	687b      	ldr	r3, [r7, #4]
   14c4a:	681b      	ldr	r3, [r3, #0]
   14c4c:	2b00      	cmp	r3, #0
   14c4e:	d019      	beq.n	14c84 <json_object_resize+0xbc>
   14c50:	687b      	ldr	r3, [r7, #4]
   14c52:	685b      	ldr	r3, [r3, #4]
   14c54:	2b00      	cmp	r3, #0
   14c56:	d015      	beq.n	14c84 <json_object_resize+0xbc>
   14c58:	687b      	ldr	r3, [r7, #4]
   14c5a:	689b      	ldr	r3, [r3, #8]
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d011      	beq.n	14c84 <json_object_resize+0xbc>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
   14c60:	687b      	ldr	r3, [r7, #4]
   14c62:	6819      	ldr	r1, [r3, #0]
   14c64:	687b      	ldr	r3, [r7, #4]
   14c66:	689b      	ldr	r3, [r3, #8]
   14c68:	009a      	lsls	r2, r3, #2
   14c6a:	68fb      	ldr	r3, [r7, #12]
   14c6c:	0018      	movs	r0, r3
   14c6e:	4b14      	ldr	r3, [pc, #80]	; (14cc0 <json_object_resize+0xf8>)
   14c70:	4798      	blx	r3
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
   14c72:	687b      	ldr	r3, [r7, #4]
   14c74:	6859      	ldr	r1, [r3, #4]
   14c76:	687b      	ldr	r3, [r7, #4]
   14c78:	689b      	ldr	r3, [r3, #8]
   14c7a:	009a      	lsls	r2, r3, #2
   14c7c:	68bb      	ldr	r3, [r7, #8]
   14c7e:	0018      	movs	r0, r3
   14c80:	4b0f      	ldr	r3, [pc, #60]	; (14cc0 <json_object_resize+0xf8>)
   14c82:	4798      	blx	r3
    }
    parson_free(object->names);
   14c84:	4b0d      	ldr	r3, [pc, #52]	; (14cbc <json_object_resize+0xf4>)
   14c86:	681a      	ldr	r2, [r3, #0]
   14c88:	687b      	ldr	r3, [r7, #4]
   14c8a:	681b      	ldr	r3, [r3, #0]
   14c8c:	0018      	movs	r0, r3
   14c8e:	4790      	blx	r2
    parson_free(object->values);
   14c90:	4b0a      	ldr	r3, [pc, #40]	; (14cbc <json_object_resize+0xf4>)
   14c92:	681a      	ldr	r2, [r3, #0]
   14c94:	687b      	ldr	r3, [r7, #4]
   14c96:	685b      	ldr	r3, [r3, #4]
   14c98:	0018      	movs	r0, r3
   14c9a:	4790      	blx	r2
    object->names = temp_names;
   14c9c:	687b      	ldr	r3, [r7, #4]
   14c9e:	68fa      	ldr	r2, [r7, #12]
   14ca0:	601a      	str	r2, [r3, #0]
    object->values = temp_values;
   14ca2:	687b      	ldr	r3, [r7, #4]
   14ca4:	68ba      	ldr	r2, [r7, #8]
   14ca6:	605a      	str	r2, [r3, #4]
    object->capacity = new_capacity;
   14ca8:	687b      	ldr	r3, [r7, #4]
   14caa:	683a      	ldr	r2, [r7, #0]
   14cac:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
   14cae:	2300      	movs	r3, #0
}
   14cb0:	0018      	movs	r0, r3
   14cb2:	46bd      	mov	sp, r7
   14cb4:	b004      	add	sp, #16
   14cb6:	bd80      	pop	{r7, pc}
   14cb8:	20000158 	.word	0x20000158
   14cbc:	2000015c 	.word	0x2000015c
   14cc0:	0001c1e5 	.word	0x0001c1e5

00014cc4 <json_object_nget_value>:

static JSON_Value * json_object_nget_value(const JSON_Object *object, const char *name, size_t n) {
   14cc4:	b580      	push	{r7, lr}
   14cc6:	b086      	sub	sp, #24
   14cc8:	af00      	add	r7, sp, #0
   14cca:	60f8      	str	r0, [r7, #12]
   14ccc:	60b9      	str	r1, [r7, #8]
   14cce:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
   14cd0:	2300      	movs	r3, #0
   14cd2:	617b      	str	r3, [r7, #20]
   14cd4:	e026      	b.n	14d24 <json_object_nget_value+0x60>
        name_length = strlen(object->names[i]);
   14cd6:	68fb      	ldr	r3, [r7, #12]
   14cd8:	681a      	ldr	r2, [r3, #0]
   14cda:	697b      	ldr	r3, [r7, #20]
   14cdc:	009b      	lsls	r3, r3, #2
   14cde:	18d3      	adds	r3, r2, r3
   14ce0:	681b      	ldr	r3, [r3, #0]
   14ce2:	0018      	movs	r0, r3
   14ce4:	4b16      	ldr	r3, [pc, #88]	; (14d40 <json_object_nget_value+0x7c>)
   14ce6:	4798      	blx	r3
   14ce8:	0003      	movs	r3, r0
   14cea:	613b      	str	r3, [r7, #16]
        if (name_length != n)
   14cec:	693a      	ldr	r2, [r7, #16]
   14cee:	687b      	ldr	r3, [r7, #4]
   14cf0:	429a      	cmp	r2, r3
   14cf2:	d113      	bne.n	14d1c <json_object_nget_value+0x58>
            continue;
        if (strncmp(object->names[i], name, n) == 0)
   14cf4:	68fb      	ldr	r3, [r7, #12]
   14cf6:	681a      	ldr	r2, [r3, #0]
   14cf8:	697b      	ldr	r3, [r7, #20]
   14cfa:	009b      	lsls	r3, r3, #2
   14cfc:	18d3      	adds	r3, r2, r3
   14cfe:	681b      	ldr	r3, [r3, #0]
   14d00:	687a      	ldr	r2, [r7, #4]
   14d02:	68b9      	ldr	r1, [r7, #8]
   14d04:	0018      	movs	r0, r3
   14d06:	4b0f      	ldr	r3, [pc, #60]	; (14d44 <json_object_nget_value+0x80>)
   14d08:	4798      	blx	r3
   14d0a:	1e03      	subs	r3, r0, #0
   14d0c:	d107      	bne.n	14d1e <json_object_nget_value+0x5a>
            return object->values[i];
   14d0e:	68fb      	ldr	r3, [r7, #12]
   14d10:	685a      	ldr	r2, [r3, #4]
   14d12:	697b      	ldr	r3, [r7, #20]
   14d14:	009b      	lsls	r3, r3, #2
   14d16:	18d3      	adds	r3, r2, r3
   14d18:	681b      	ldr	r3, [r3, #0]
   14d1a:	e00c      	b.n	14d36 <json_object_nget_value+0x72>
            continue;
   14d1c:	46c0      	nop			; (mov r8, r8)
    for (i = 0; i < json_object_get_count(object); i++) {
   14d1e:	697b      	ldr	r3, [r7, #20]
   14d20:	3301      	adds	r3, #1
   14d22:	617b      	str	r3, [r7, #20]
   14d24:	68fb      	ldr	r3, [r7, #12]
   14d26:	0018      	movs	r0, r3
   14d28:	4b07      	ldr	r3, [pc, #28]	; (14d48 <json_object_nget_value+0x84>)
   14d2a:	4798      	blx	r3
   14d2c:	0002      	movs	r2, r0
   14d2e:	697b      	ldr	r3, [r7, #20]
   14d30:	429a      	cmp	r2, r3
   14d32:	d8d0      	bhi.n	14cd6 <json_object_nget_value+0x12>
    }
    return NULL;
   14d34:	2300      	movs	r3, #0
}
   14d36:	0018      	movs	r0, r3
   14d38:	46bd      	mov	sp, r7
   14d3a:	b006      	add	sp, #24
   14d3c:	bd80      	pop	{r7, pc}
   14d3e:	46c0      	nop			; (mov r8, r8)
   14d40:	0001c7d3 	.word	0x0001c7d3
   14d44:	0001c7e1 	.word	0x0001c7e1
   14d48:	00015b39 	.word	0x00015b39

00014d4c <json_object_free>:

static void json_object_free(JSON_Object *object) {
   14d4c:	b580      	push	{r7, lr}
   14d4e:	b082      	sub	sp, #8
   14d50:	af00      	add	r7, sp, #0
   14d52:	6078      	str	r0, [r7, #4]
    while(object->count--) {
   14d54:	e014      	b.n	14d80 <json_object_free+0x34>
        parson_free(object->names[object->count]);
   14d56:	4b18      	ldr	r3, [pc, #96]	; (14db8 <json_object_free+0x6c>)
   14d58:	681a      	ldr	r2, [r3, #0]
   14d5a:	687b      	ldr	r3, [r7, #4]
   14d5c:	6819      	ldr	r1, [r3, #0]
   14d5e:	687b      	ldr	r3, [r7, #4]
   14d60:	689b      	ldr	r3, [r3, #8]
   14d62:	009b      	lsls	r3, r3, #2
   14d64:	18cb      	adds	r3, r1, r3
   14d66:	681b      	ldr	r3, [r3, #0]
   14d68:	0018      	movs	r0, r3
   14d6a:	4790      	blx	r2
        json_value_free(object->values[object->count]);
   14d6c:	687b      	ldr	r3, [r7, #4]
   14d6e:	685a      	ldr	r2, [r3, #4]
   14d70:	687b      	ldr	r3, [r7, #4]
   14d72:	689b      	ldr	r3, [r3, #8]
   14d74:	009b      	lsls	r3, r3, #2
   14d76:	18d3      	adds	r3, r2, r3
   14d78:	681b      	ldr	r3, [r3, #0]
   14d7a:	0018      	movs	r0, r3
   14d7c:	4b0f      	ldr	r3, [pc, #60]	; (14dbc <json_object_free+0x70>)
   14d7e:	4798      	blx	r3
    while(object->count--) {
   14d80:	687b      	ldr	r3, [r7, #4]
   14d82:	689b      	ldr	r3, [r3, #8]
   14d84:	1e59      	subs	r1, r3, #1
   14d86:	687a      	ldr	r2, [r7, #4]
   14d88:	6091      	str	r1, [r2, #8]
   14d8a:	2b00      	cmp	r3, #0
   14d8c:	d1e3      	bne.n	14d56 <json_object_free+0xa>
    }
    parson_free(object->names);
   14d8e:	4b0a      	ldr	r3, [pc, #40]	; (14db8 <json_object_free+0x6c>)
   14d90:	681a      	ldr	r2, [r3, #0]
   14d92:	687b      	ldr	r3, [r7, #4]
   14d94:	681b      	ldr	r3, [r3, #0]
   14d96:	0018      	movs	r0, r3
   14d98:	4790      	blx	r2
    parson_free(object->values);
   14d9a:	4b07      	ldr	r3, [pc, #28]	; (14db8 <json_object_free+0x6c>)
   14d9c:	681a      	ldr	r2, [r3, #0]
   14d9e:	687b      	ldr	r3, [r7, #4]
   14da0:	685b      	ldr	r3, [r3, #4]
   14da2:	0018      	movs	r0, r3
   14da4:	4790      	blx	r2
    parson_free(object);
   14da6:	4b04      	ldr	r3, [pc, #16]	; (14db8 <json_object_free+0x6c>)
   14da8:	681b      	ldr	r3, [r3, #0]
   14daa:	687a      	ldr	r2, [r7, #4]
   14dac:	0010      	movs	r0, r2
   14dae:	4798      	blx	r3
}
   14db0:	46c0      	nop			; (mov r8, r8)
   14db2:	46bd      	mov	sp, r7
   14db4:	b002      	add	sp, #8
   14db6:	bd80      	pop	{r7, pc}
   14db8:	2000015c 	.word	0x2000015c
   14dbc:	00015cbd 	.word	0x00015cbd

00014dc0 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(void) {
   14dc0:	b580      	push	{r7, lr}
   14dc2:	b082      	sub	sp, #8
   14dc4:	af00      	add	r7, sp, #0
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
   14dc6:	4b0c      	ldr	r3, [pc, #48]	; (14df8 <json_array_init+0x38>)
   14dc8:	681b      	ldr	r3, [r3, #0]
   14dca:	200c      	movs	r0, #12
   14dcc:	4798      	blx	r3
   14dce:	0003      	movs	r3, r0
   14dd0:	607b      	str	r3, [r7, #4]
    if (!new_array)
   14dd2:	687b      	ldr	r3, [r7, #4]
   14dd4:	2b00      	cmp	r3, #0
   14dd6:	d101      	bne.n	14ddc <json_array_init+0x1c>
        return NULL;
   14dd8:	2300      	movs	r3, #0
   14dda:	e009      	b.n	14df0 <json_array_init+0x30>
    new_array->items = (JSON_Value**)NULL;
   14ddc:	687b      	ldr	r3, [r7, #4]
   14dde:	2200      	movs	r2, #0
   14de0:	601a      	str	r2, [r3, #0]
    new_array->capacity = 0;
   14de2:	687b      	ldr	r3, [r7, #4]
   14de4:	2200      	movs	r2, #0
   14de6:	609a      	str	r2, [r3, #8]
    new_array->count = 0;
   14de8:	687b      	ldr	r3, [r7, #4]
   14dea:	2200      	movs	r2, #0
   14dec:	605a      	str	r2, [r3, #4]
    return new_array;
   14dee:	687b      	ldr	r3, [r7, #4]
}
   14df0:	0018      	movs	r0, r3
   14df2:	46bd      	mov	sp, r7
   14df4:	b002      	add	sp, #8
   14df6:	bd80      	pop	{r7, pc}
   14df8:	20000158 	.word	0x20000158

00014dfc <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
   14dfc:	b580      	push	{r7, lr}
   14dfe:	b084      	sub	sp, #16
   14e00:	af00      	add	r7, sp, #0
   14e02:	6078      	str	r0, [r7, #4]
   14e04:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
   14e06:	687b      	ldr	r3, [r7, #4]
   14e08:	685a      	ldr	r2, [r3, #4]
   14e0a:	687b      	ldr	r3, [r7, #4]
   14e0c:	689b      	ldr	r3, [r3, #8]
   14e0e:	429a      	cmp	r2, r3
   14e10:	d31a      	bcc.n	14e48 <json_array_add+0x4c>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
   14e12:	687b      	ldr	r3, [r7, #4]
   14e14:	689b      	ldr	r3, [r3, #8]
   14e16:	005b      	lsls	r3, r3, #1
   14e18:	2b0f      	cmp	r3, #15
   14e1a:	d200      	bcs.n	14e1e <json_array_add+0x22>
   14e1c:	230f      	movs	r3, #15
   14e1e:	60fb      	str	r3, [r7, #12]
        if (new_capacity > ARRAY_MAX_CAPACITY)
   14e20:	68fa      	ldr	r2, [r7, #12]
   14e22:	23f0      	movs	r3, #240	; 0xf0
   14e24:	025b      	lsls	r3, r3, #9
   14e26:	429a      	cmp	r2, r3
   14e28:	d902      	bls.n	14e30 <json_array_add+0x34>
            return JSONFailure;
   14e2a:	2301      	movs	r3, #1
   14e2c:	425b      	negs	r3, r3
   14e2e:	e019      	b.n	14e64 <json_array_add+0x68>
        if (json_array_resize(array, new_capacity) == JSONFailure)
   14e30:	68fa      	ldr	r2, [r7, #12]
   14e32:	687b      	ldr	r3, [r7, #4]
   14e34:	0011      	movs	r1, r2
   14e36:	0018      	movs	r0, r3
   14e38:	4b0c      	ldr	r3, [pc, #48]	; (14e6c <json_array_add+0x70>)
   14e3a:	4798      	blx	r3
   14e3c:	0003      	movs	r3, r0
   14e3e:	3301      	adds	r3, #1
   14e40:	d102      	bne.n	14e48 <json_array_add+0x4c>
            return JSONFailure;
   14e42:	2301      	movs	r3, #1
   14e44:	425b      	negs	r3, r3
   14e46:	e00d      	b.n	14e64 <json_array_add+0x68>
    }
    array->items[array->count] = value;
   14e48:	687b      	ldr	r3, [r7, #4]
   14e4a:	681a      	ldr	r2, [r3, #0]
   14e4c:	687b      	ldr	r3, [r7, #4]
   14e4e:	685b      	ldr	r3, [r3, #4]
   14e50:	009b      	lsls	r3, r3, #2
   14e52:	18d3      	adds	r3, r2, r3
   14e54:	683a      	ldr	r2, [r7, #0]
   14e56:	601a      	str	r2, [r3, #0]
    array->count++;
   14e58:	687b      	ldr	r3, [r7, #4]
   14e5a:	685b      	ldr	r3, [r3, #4]
   14e5c:	1c5a      	adds	r2, r3, #1
   14e5e:	687b      	ldr	r3, [r7, #4]
   14e60:	605a      	str	r2, [r3, #4]
    return JSONSuccess;
   14e62:	2300      	movs	r3, #0
}
   14e64:	0018      	movs	r0, r3
   14e66:	46bd      	mov	sp, r7
   14e68:	b004      	add	sp, #16
   14e6a:	bd80      	pop	{r7, pc}
   14e6c:	00014e71 	.word	0x00014e71

00014e70 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
   14e70:	b580      	push	{r7, lr}
   14e72:	b084      	sub	sp, #16
   14e74:	af00      	add	r7, sp, #0
   14e76:	6078      	str	r0, [r7, #4]
   14e78:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
   14e7a:	2300      	movs	r3, #0
   14e7c:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
   14e7e:	683b      	ldr	r3, [r7, #0]
   14e80:	2b00      	cmp	r3, #0
   14e82:	d102      	bne.n	14e8a <json_array_resize+0x1a>
        return JSONFailure;
   14e84:	2301      	movs	r3, #1
   14e86:	425b      	negs	r3, r3
   14e88:	e02b      	b.n	14ee2 <json_array_resize+0x72>
    }
    new_items = parson_malloc(new_capacity * sizeof(JSON_Value*));
   14e8a:	4b18      	ldr	r3, [pc, #96]	; (14eec <json_array_resize+0x7c>)
   14e8c:	681b      	ldr	r3, [r3, #0]
   14e8e:	683a      	ldr	r2, [r7, #0]
   14e90:	0092      	lsls	r2, r2, #2
   14e92:	0010      	movs	r0, r2
   14e94:	4798      	blx	r3
   14e96:	0003      	movs	r3, r0
   14e98:	60fb      	str	r3, [r7, #12]
    if (new_items == NULL) {
   14e9a:	68fb      	ldr	r3, [r7, #12]
   14e9c:	2b00      	cmp	r3, #0
   14e9e:	d102      	bne.n	14ea6 <json_array_resize+0x36>
        return JSONFailure;
   14ea0:	2301      	movs	r3, #1
   14ea2:	425b      	negs	r3, r3
   14ea4:	e01d      	b.n	14ee2 <json_array_resize+0x72>
    }
    if (array->items != NULL && array->count > 0) {
   14ea6:	687b      	ldr	r3, [r7, #4]
   14ea8:	681b      	ldr	r3, [r3, #0]
   14eaa:	2b00      	cmp	r3, #0
   14eac:	d00c      	beq.n	14ec8 <json_array_resize+0x58>
   14eae:	687b      	ldr	r3, [r7, #4]
   14eb0:	685b      	ldr	r3, [r3, #4]
   14eb2:	2b00      	cmp	r3, #0
   14eb4:	d008      	beq.n	14ec8 <json_array_resize+0x58>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
   14eb6:	687b      	ldr	r3, [r7, #4]
   14eb8:	6819      	ldr	r1, [r3, #0]
   14eba:	687b      	ldr	r3, [r7, #4]
   14ebc:	685b      	ldr	r3, [r3, #4]
   14ebe:	009a      	lsls	r2, r3, #2
   14ec0:	68fb      	ldr	r3, [r7, #12]
   14ec2:	0018      	movs	r0, r3
   14ec4:	4b0a      	ldr	r3, [pc, #40]	; (14ef0 <json_array_resize+0x80>)
   14ec6:	4798      	blx	r3
    }
    parson_free(array->items);
   14ec8:	4b0a      	ldr	r3, [pc, #40]	; (14ef4 <json_array_resize+0x84>)
   14eca:	681a      	ldr	r2, [r3, #0]
   14ecc:	687b      	ldr	r3, [r7, #4]
   14ece:	681b      	ldr	r3, [r3, #0]
   14ed0:	0018      	movs	r0, r3
   14ed2:	4790      	blx	r2
    array->items = new_items;
   14ed4:	687b      	ldr	r3, [r7, #4]
   14ed6:	68fa      	ldr	r2, [r7, #12]
   14ed8:	601a      	str	r2, [r3, #0]
    array->capacity = new_capacity;
   14eda:	687b      	ldr	r3, [r7, #4]
   14edc:	683a      	ldr	r2, [r7, #0]
   14ede:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
   14ee0:	2300      	movs	r3, #0
}
   14ee2:	0018      	movs	r0, r3
   14ee4:	46bd      	mov	sp, r7
   14ee6:	b004      	add	sp, #16
   14ee8:	bd80      	pop	{r7, pc}
   14eea:	46c0      	nop			; (mov r8, r8)
   14eec:	20000158 	.word	0x20000158
   14ef0:	0001c1e5 	.word	0x0001c1e5
   14ef4:	2000015c 	.word	0x2000015c

00014ef8 <json_array_free>:

static void json_array_free(JSON_Array *array) {
   14ef8:	b580      	push	{r7, lr}
   14efa:	b082      	sub	sp, #8
   14efc:	af00      	add	r7, sp, #0
   14efe:	6078      	str	r0, [r7, #4]
    while (array->count--)
   14f00:	e009      	b.n	14f16 <json_array_free+0x1e>
        json_value_free(array->items[array->count]);
   14f02:	687b      	ldr	r3, [r7, #4]
   14f04:	681a      	ldr	r2, [r3, #0]
   14f06:	687b      	ldr	r3, [r7, #4]
   14f08:	685b      	ldr	r3, [r3, #4]
   14f0a:	009b      	lsls	r3, r3, #2
   14f0c:	18d3      	adds	r3, r2, r3
   14f0e:	681b      	ldr	r3, [r3, #0]
   14f10:	0018      	movs	r0, r3
   14f12:	4b0c      	ldr	r3, [pc, #48]	; (14f44 <json_array_free+0x4c>)
   14f14:	4798      	blx	r3
    while (array->count--)
   14f16:	687b      	ldr	r3, [r7, #4]
   14f18:	685b      	ldr	r3, [r3, #4]
   14f1a:	1e59      	subs	r1, r3, #1
   14f1c:	687a      	ldr	r2, [r7, #4]
   14f1e:	6051      	str	r1, [r2, #4]
   14f20:	2b00      	cmp	r3, #0
   14f22:	d1ee      	bne.n	14f02 <json_array_free+0xa>
    parson_free(array->items);
   14f24:	4b08      	ldr	r3, [pc, #32]	; (14f48 <json_array_free+0x50>)
   14f26:	681a      	ldr	r2, [r3, #0]
   14f28:	687b      	ldr	r3, [r7, #4]
   14f2a:	681b      	ldr	r3, [r3, #0]
   14f2c:	0018      	movs	r0, r3
   14f2e:	4790      	blx	r2
    parson_free(array);
   14f30:	4b05      	ldr	r3, [pc, #20]	; (14f48 <json_array_free+0x50>)
   14f32:	681b      	ldr	r3, [r3, #0]
   14f34:	687a      	ldr	r2, [r7, #4]
   14f36:	0010      	movs	r0, r2
   14f38:	4798      	blx	r3
}
   14f3a:	46c0      	nop			; (mov r8, r8)
   14f3c:	46bd      	mov	sp, r7
   14f3e:	b002      	add	sp, #8
   14f40:	bd80      	pop	{r7, pc}
   14f42:	46c0      	nop			; (mov r8, r8)
   14f44:	00015cbd 	.word	0x00015cbd
   14f48:	2000015c 	.word	0x2000015c

00014f4c <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
   14f4c:	b580      	push	{r7, lr}
   14f4e:	b084      	sub	sp, #16
   14f50:	af00      	add	r7, sp, #0
   14f52:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   14f54:	4b0a      	ldr	r3, [pc, #40]	; (14f80 <json_value_init_string_no_copy+0x34>)
   14f56:	681b      	ldr	r3, [r3, #0]
   14f58:	2010      	movs	r0, #16
   14f5a:	4798      	blx	r3
   14f5c:	0003      	movs	r3, r0
   14f5e:	60fb      	str	r3, [r7, #12]
    if (!new_value)
   14f60:	68fb      	ldr	r3, [r7, #12]
   14f62:	2b00      	cmp	r3, #0
   14f64:	d101      	bne.n	14f6a <json_value_init_string_no_copy+0x1e>
        return NULL;
   14f66:	2300      	movs	r3, #0
   14f68:	e006      	b.n	14f78 <json_value_init_string_no_copy+0x2c>
    new_value->type = JSONString;
   14f6a:	68fb      	ldr	r3, [r7, #12]
   14f6c:	2202      	movs	r2, #2
   14f6e:	601a      	str	r2, [r3, #0]
    new_value->value.string = string;
   14f70:	68fb      	ldr	r3, [r7, #12]
   14f72:	687a      	ldr	r2, [r7, #4]
   14f74:	609a      	str	r2, [r3, #8]
    return new_value;
   14f76:	68fb      	ldr	r3, [r7, #12]
}
   14f78:	0018      	movs	r0, r3
   14f7a:	46bd      	mov	sp, r7
   14f7c:	b004      	add	sp, #16
   14f7e:	bd80      	pop	{r7, pc}
   14f80:	20000158 	.word	0x20000158

00014f84 <skip_quotes>:

/* Parser */
static void skip_quotes(const char **string) {
   14f84:	b580      	push	{r7, lr}
   14f86:	b082      	sub	sp, #8
   14f88:	af00      	add	r7, sp, #0
   14f8a:	6078      	str	r0, [r7, #4]
    SKIP_CHAR(string);
   14f8c:	687b      	ldr	r3, [r7, #4]
   14f8e:	681b      	ldr	r3, [r3, #0]
   14f90:	1c5a      	adds	r2, r3, #1
   14f92:	687b      	ldr	r3, [r7, #4]
   14f94:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
   14f96:	e018      	b.n	14fca <skip_quotes+0x46>
        if (**string == '\0')
   14f98:	687b      	ldr	r3, [r7, #4]
   14f9a:	681b      	ldr	r3, [r3, #0]
   14f9c:	781b      	ldrb	r3, [r3, #0]
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d01e      	beq.n	14fe0 <skip_quotes+0x5c>
            return;
        if (**string == '\\') {
   14fa2:	687b      	ldr	r3, [r7, #4]
   14fa4:	681b      	ldr	r3, [r3, #0]
   14fa6:	781b      	ldrb	r3, [r3, #0]
   14fa8:	2b5c      	cmp	r3, #92	; 0x5c
   14faa:	d109      	bne.n	14fc0 <skip_quotes+0x3c>
            SKIP_CHAR(string);
   14fac:	687b      	ldr	r3, [r7, #4]
   14fae:	681b      	ldr	r3, [r3, #0]
   14fb0:	1c5a      	adds	r2, r3, #1
   14fb2:	687b      	ldr	r3, [r7, #4]
   14fb4:	601a      	str	r2, [r3, #0]
            if (**string == '\0')
   14fb6:	687b      	ldr	r3, [r7, #4]
   14fb8:	681b      	ldr	r3, [r3, #0]
   14fba:	781b      	ldrb	r3, [r3, #0]
   14fbc:	2b00      	cmp	r3, #0
   14fbe:	d011      	beq.n	14fe4 <skip_quotes+0x60>
                return;
        }
        SKIP_CHAR(string);
   14fc0:	687b      	ldr	r3, [r7, #4]
   14fc2:	681b      	ldr	r3, [r3, #0]
   14fc4:	1c5a      	adds	r2, r3, #1
   14fc6:	687b      	ldr	r3, [r7, #4]
   14fc8:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
   14fca:	687b      	ldr	r3, [r7, #4]
   14fcc:	681b      	ldr	r3, [r3, #0]
   14fce:	781b      	ldrb	r3, [r3, #0]
   14fd0:	2b22      	cmp	r3, #34	; 0x22
   14fd2:	d1e1      	bne.n	14f98 <skip_quotes+0x14>
    }
    SKIP_CHAR(string);
   14fd4:	687b      	ldr	r3, [r7, #4]
   14fd6:	681b      	ldr	r3, [r3, #0]
   14fd8:	1c5a      	adds	r2, r3, #1
   14fda:	687b      	ldr	r3, [r7, #4]
   14fdc:	601a      	str	r2, [r3, #0]
   14fde:	e002      	b.n	14fe6 <skip_quotes+0x62>
            return;
   14fe0:	46c0      	nop			; (mov r8, r8)
   14fe2:	e000      	b.n	14fe6 <skip_quotes+0x62>
                return;
   14fe4:	46c0      	nop			; (mov r8, r8)
}
   14fe6:	46bd      	mov	sp, r7
   14fe8:	b002      	add	sp, #8
   14fea:	bd80      	pop	{r7, pc}

00014fec <parse_utf_16>:

static int parse_utf_16(const char **unprocessed, char **processed) {
   14fec:	b580      	push	{r7, lr}
   14fee:	b088      	sub	sp, #32
   14ff0:	af00      	add	r7, sp, #0
   14ff2:	6078      	str	r0, [r7, #4]
   14ff4:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
   14ff6:	683b      	ldr	r3, [r7, #0]
   14ff8:	681b      	ldr	r3, [r3, #0]
   14ffa:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
   14ffc:	687b      	ldr	r3, [r7, #4]
   14ffe:	681b      	ldr	r3, [r3, #0]
   15000:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
   15002:	69bb      	ldr	r3, [r7, #24]
   15004:	3301      	adds	r3, #1
   15006:	61bb      	str	r3, [r7, #24]
    if (!is_utf16_hex((const unsigned char*)unprocessed_ptr) || sscanf(unprocessed_ptr, "%4x", &cp) == EOF)
   15008:	69bb      	ldr	r3, [r7, #24]
   1500a:	0018      	movs	r0, r3
   1500c:	4b77      	ldr	r3, [pc, #476]	; (151ec <parse_utf_16+0x200>)
   1500e:	4798      	blx	r3
   15010:	1e03      	subs	r3, r0, #0
   15012:	d009      	beq.n	15028 <parse_utf_16+0x3c>
   15014:	2310      	movs	r3, #16
   15016:	18fa      	adds	r2, r7, r3
   15018:	4975      	ldr	r1, [pc, #468]	; (151f0 <parse_utf_16+0x204>)
   1501a:	69bb      	ldr	r3, [r7, #24]
   1501c:	0018      	movs	r0, r3
   1501e:	4b75      	ldr	r3, [pc, #468]	; (151f4 <parse_utf_16+0x208>)
   15020:	4798      	blx	r3
   15022:	0003      	movs	r3, r0
   15024:	3301      	adds	r3, #1
   15026:	d102      	bne.n	1502e <parse_utf_16+0x42>
            return JSONFailure;
   15028:	2301      	movs	r3, #1
   1502a:	425b      	negs	r3, r3
   1502c:	e0da      	b.n	151e4 <parse_utf_16+0x1f8>
    if (cp < 0x80) {
   1502e:	693b      	ldr	r3, [r7, #16]
   15030:	2b7f      	cmp	r3, #127	; 0x7f
   15032:	d804      	bhi.n	1503e <parse_utf_16+0x52>
        *processed_ptr = cp; /* 0xxxxxxx */
   15034:	693b      	ldr	r3, [r7, #16]
   15036:	b2da      	uxtb	r2, r3
   15038:	69fb      	ldr	r3, [r7, #28]
   1503a:	701a      	strb	r2, [r3, #0]
   1503c:	e0c8      	b.n	151d0 <parse_utf_16+0x1e4>
    } else if (cp < 0x800) {
   1503e:	693b      	ldr	r3, [r7, #16]
   15040:	4a6d      	ldr	r2, [pc, #436]	; (151f8 <parse_utf_16+0x20c>)
   15042:	4293      	cmp	r3, r2
   15044:	d819      	bhi.n	1507a <parse_utf_16+0x8e>
        *processed_ptr++ = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
   15046:	69fb      	ldr	r3, [r7, #28]
   15048:	1c5a      	adds	r2, r3, #1
   1504a:	61fa      	str	r2, [r7, #28]
   1504c:	693a      	ldr	r2, [r7, #16]
   1504e:	0992      	lsrs	r2, r2, #6
   15050:	b2d2      	uxtb	r2, r2
   15052:	211f      	movs	r1, #31
   15054:	400a      	ands	r2, r1
   15056:	b2d2      	uxtb	r2, r2
   15058:	2140      	movs	r1, #64	; 0x40
   1505a:	4249      	negs	r1, r1
   1505c:	430a      	orrs	r2, r1
   1505e:	b2d2      	uxtb	r2, r2
   15060:	701a      	strb	r2, [r3, #0]
        *processed_ptr   = ((cp     ) & 0x3F) | 0x80; /* 10xxxxxx */
   15062:	693b      	ldr	r3, [r7, #16]
   15064:	b2db      	uxtb	r3, r3
   15066:	223f      	movs	r2, #63	; 0x3f
   15068:	4013      	ands	r3, r2
   1506a:	b2db      	uxtb	r3, r3
   1506c:	2280      	movs	r2, #128	; 0x80
   1506e:	4252      	negs	r2, r2
   15070:	4313      	orrs	r3, r2
   15072:	b2da      	uxtb	r2, r3
   15074:	69fb      	ldr	r3, [r7, #28]
   15076:	701a      	strb	r2, [r3, #0]
   15078:	e0aa      	b.n	151d0 <parse_utf_16+0x1e4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
   1507a:	693b      	ldr	r3, [r7, #16]
   1507c:	4a5f      	ldr	r2, [pc, #380]	; (151fc <parse_utf_16+0x210>)
   1507e:	4293      	cmp	r3, r2
   15080:	d903      	bls.n	1508a <parse_utf_16+0x9e>
   15082:	693b      	ldr	r3, [r7, #16]
   15084:	4a5e      	ldr	r2, [pc, #376]	; (15200 <parse_utf_16+0x214>)
   15086:	4293      	cmp	r3, r2
   15088:	d927      	bls.n	150da <parse_utf_16+0xee>
        *processed_ptr++ = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
   1508a:	69fb      	ldr	r3, [r7, #28]
   1508c:	1c5a      	adds	r2, r3, #1
   1508e:	61fa      	str	r2, [r7, #28]
   15090:	693a      	ldr	r2, [r7, #16]
   15092:	0b12      	lsrs	r2, r2, #12
   15094:	b2d2      	uxtb	r2, r2
   15096:	210f      	movs	r1, #15
   15098:	400a      	ands	r2, r1
   1509a:	b2d2      	uxtb	r2, r2
   1509c:	2120      	movs	r1, #32
   1509e:	4249      	negs	r1, r1
   150a0:	430a      	orrs	r2, r1
   150a2:	b2d2      	uxtb	r2, r2
   150a4:	701a      	strb	r2, [r3, #0]
        *processed_ptr++ = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
   150a6:	69fb      	ldr	r3, [r7, #28]
   150a8:	1c5a      	adds	r2, r3, #1
   150aa:	61fa      	str	r2, [r7, #28]
   150ac:	693a      	ldr	r2, [r7, #16]
   150ae:	0992      	lsrs	r2, r2, #6
   150b0:	b2d2      	uxtb	r2, r2
   150b2:	213f      	movs	r1, #63	; 0x3f
   150b4:	400a      	ands	r2, r1
   150b6:	b2d2      	uxtb	r2, r2
   150b8:	2180      	movs	r1, #128	; 0x80
   150ba:	4249      	negs	r1, r1
   150bc:	430a      	orrs	r2, r1
   150be:	b2d2      	uxtb	r2, r2
   150c0:	701a      	strb	r2, [r3, #0]
        *processed_ptr   = ((cp     )  & 0x3F) | 0x80; /* 10xxxxxx */
   150c2:	693b      	ldr	r3, [r7, #16]
   150c4:	b2db      	uxtb	r3, r3
   150c6:	223f      	movs	r2, #63	; 0x3f
   150c8:	4013      	ands	r3, r2
   150ca:	b2db      	uxtb	r3, r3
   150cc:	2280      	movs	r2, #128	; 0x80
   150ce:	4252      	negs	r2, r2
   150d0:	4313      	orrs	r3, r2
   150d2:	b2da      	uxtb	r2, r3
   150d4:	69fb      	ldr	r3, [r7, #28]
   150d6:	701a      	strb	r2, [r3, #0]
   150d8:	e07a      	b.n	151d0 <parse_utf_16+0x1e4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
   150da:	693b      	ldr	r3, [r7, #16]
   150dc:	4a47      	ldr	r2, [pc, #284]	; (151fc <parse_utf_16+0x210>)
   150de:	4293      	cmp	r3, r2
   150e0:	d800      	bhi.n	150e4 <parse_utf_16+0xf8>
   150e2:	e072      	b.n	151ca <parse_utf_16+0x1de>
   150e4:	693b      	ldr	r3, [r7, #16]
   150e6:	4a47      	ldr	r2, [pc, #284]	; (15204 <parse_utf_16+0x218>)
   150e8:	4293      	cmp	r3, r2
   150ea:	d86e      	bhi.n	151ca <parse_utf_16+0x1de>
        lead = cp;
   150ec:	693b      	ldr	r3, [r7, #16]
   150ee:	617b      	str	r3, [r7, #20]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
   150f0:	69bb      	ldr	r3, [r7, #24]
   150f2:	3304      	adds	r3, #4
   150f4:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
   150f6:	69bb      	ldr	r3, [r7, #24]
   150f8:	1c5a      	adds	r2, r3, #1
   150fa:	61ba      	str	r2, [r7, #24]
   150fc:	781b      	ldrb	r3, [r3, #0]
   150fe:	2b5c      	cmp	r3, #92	; 0x5c
   15100:	d11d      	bne.n	1513e <parse_utf_16+0x152>
   15102:	69bb      	ldr	r3, [r7, #24]
   15104:	1c5a      	adds	r2, r3, #1
   15106:	61ba      	str	r2, [r7, #24]
   15108:	781b      	ldrb	r3, [r3, #0]
   1510a:	2b75      	cmp	r3, #117	; 0x75
   1510c:	d117      	bne.n	1513e <parse_utf_16+0x152>
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
   1510e:	69bb      	ldr	r3, [r7, #24]
   15110:	0018      	movs	r0, r3
   15112:	4b36      	ldr	r3, [pc, #216]	; (151ec <parse_utf_16+0x200>)
   15114:	4798      	blx	r3
   15116:	1e03      	subs	r3, r0, #0
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
   15118:	d011      	beq.n	1513e <parse_utf_16+0x152>
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
   1511a:	230c      	movs	r3, #12
   1511c:	18fa      	adds	r2, r7, r3
   1511e:	4934      	ldr	r1, [pc, #208]	; (151f0 <parse_utf_16+0x204>)
   15120:	69bb      	ldr	r3, [r7, #24]
   15122:	0018      	movs	r0, r3
   15124:	4b33      	ldr	r3, [pc, #204]	; (151f4 <parse_utf_16+0x208>)
   15126:	4798      	blx	r3
   15128:	0003      	movs	r3, r0
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
   1512a:	3301      	adds	r3, #1
   1512c:	d007      	beq.n	1513e <parse_utf_16+0x152>
            trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
   1512e:	68fb      	ldr	r3, [r7, #12]
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
   15130:	4a34      	ldr	r2, [pc, #208]	; (15204 <parse_utf_16+0x218>)
   15132:	4293      	cmp	r3, r2
   15134:	d903      	bls.n	1513e <parse_utf_16+0x152>
            trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
   15136:	68fb      	ldr	r3, [r7, #12]
   15138:	4a31      	ldr	r2, [pc, #196]	; (15200 <parse_utf_16+0x214>)
   1513a:	4293      	cmp	r3, r2
   1513c:	d902      	bls.n	15144 <parse_utf_16+0x158>
                return JSONFailure;
   1513e:	2301      	movs	r3, #1
   15140:	425b      	negs	r3, r3
   15142:	e04f      	b.n	151e4 <parse_utf_16+0x1f8>
        }
        cp = ((((lead-0xD800)&0x3FF)<<10)|((trail-0xDC00)&0x3FF))+0x010000;
   15144:	697b      	ldr	r3, [r7, #20]
   15146:	029b      	lsls	r3, r3, #10
   15148:	4a2f      	ldr	r2, [pc, #188]	; (15208 <parse_utf_16+0x21c>)
   1514a:	401a      	ands	r2, r3
   1514c:	68fb      	ldr	r3, [r7, #12]
   1514e:	059b      	lsls	r3, r3, #22
   15150:	0d9b      	lsrs	r3, r3, #22
   15152:	4313      	orrs	r3, r2
   15154:	2280      	movs	r2, #128	; 0x80
   15156:	0252      	lsls	r2, r2, #9
   15158:	4694      	mov	ip, r2
   1515a:	4463      	add	r3, ip
   1515c:	613b      	str	r3, [r7, #16]
        *processed_ptr++ = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
   1515e:	69fb      	ldr	r3, [r7, #28]
   15160:	1c5a      	adds	r2, r3, #1
   15162:	61fa      	str	r2, [r7, #28]
   15164:	693a      	ldr	r2, [r7, #16]
   15166:	0c92      	lsrs	r2, r2, #18
   15168:	b2d2      	uxtb	r2, r2
   1516a:	2107      	movs	r1, #7
   1516c:	400a      	ands	r2, r1
   1516e:	b2d2      	uxtb	r2, r2
   15170:	2110      	movs	r1, #16
   15172:	4249      	negs	r1, r1
   15174:	430a      	orrs	r2, r1
   15176:	b2d2      	uxtb	r2, r2
   15178:	701a      	strb	r2, [r3, #0]
        *processed_ptr++ = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
   1517a:	69fb      	ldr	r3, [r7, #28]
   1517c:	1c5a      	adds	r2, r3, #1
   1517e:	61fa      	str	r2, [r7, #28]
   15180:	693a      	ldr	r2, [r7, #16]
   15182:	0b12      	lsrs	r2, r2, #12
   15184:	b2d2      	uxtb	r2, r2
   15186:	213f      	movs	r1, #63	; 0x3f
   15188:	400a      	ands	r2, r1
   1518a:	b2d2      	uxtb	r2, r2
   1518c:	2180      	movs	r1, #128	; 0x80
   1518e:	4249      	negs	r1, r1
   15190:	430a      	orrs	r2, r1
   15192:	b2d2      	uxtb	r2, r2
   15194:	701a      	strb	r2, [r3, #0]
        *processed_ptr++ = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
   15196:	69fb      	ldr	r3, [r7, #28]
   15198:	1c5a      	adds	r2, r3, #1
   1519a:	61fa      	str	r2, [r7, #28]
   1519c:	693a      	ldr	r2, [r7, #16]
   1519e:	0992      	lsrs	r2, r2, #6
   151a0:	b2d2      	uxtb	r2, r2
   151a2:	213f      	movs	r1, #63	; 0x3f
   151a4:	400a      	ands	r2, r1
   151a6:	b2d2      	uxtb	r2, r2
   151a8:	2180      	movs	r1, #128	; 0x80
   151aa:	4249      	negs	r1, r1
   151ac:	430a      	orrs	r2, r1
   151ae:	b2d2      	uxtb	r2, r2
   151b0:	701a      	strb	r2, [r3, #0]
        *processed_ptr   = (((cp     )  & 0x3F) | 0x80); /* 10xxxxxx */
   151b2:	693b      	ldr	r3, [r7, #16]
   151b4:	b2db      	uxtb	r3, r3
   151b6:	223f      	movs	r2, #63	; 0x3f
   151b8:	4013      	ands	r3, r2
   151ba:	b2db      	uxtb	r3, r3
   151bc:	2280      	movs	r2, #128	; 0x80
   151be:	4252      	negs	r2, r2
   151c0:	4313      	orrs	r3, r2
   151c2:	b2da      	uxtb	r2, r3
   151c4:	69fb      	ldr	r3, [r7, #28]
   151c6:	701a      	strb	r2, [r3, #0]
   151c8:	e002      	b.n	151d0 <parse_utf_16+0x1e4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
   151ca:	2301      	movs	r3, #1
   151cc:	425b      	negs	r3, r3
   151ce:	e009      	b.n	151e4 <parse_utf_16+0x1f8>
    }
    unprocessed_ptr += 3;
   151d0:	69bb      	ldr	r3, [r7, #24]
   151d2:	3303      	adds	r3, #3
   151d4:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
   151d6:	683b      	ldr	r3, [r7, #0]
   151d8:	69fa      	ldr	r2, [r7, #28]
   151da:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
   151dc:	687b      	ldr	r3, [r7, #4]
   151de:	69ba      	ldr	r2, [r7, #24]
   151e0:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
   151e2:	2300      	movs	r3, #0
}
   151e4:	0018      	movs	r0, r3
   151e6:	46bd      	mov	sp, r7
   151e8:	b008      	add	sp, #32
   151ea:	bd80      	pop	{r7, pc}
   151ec:	00014999 	.word	0x00014999
   151f0:	0002109c 	.word	0x0002109c
   151f4:	0001c6a1 	.word	0x0001c6a1
   151f8:	000007ff 	.word	0x000007ff
   151fc:	0000d7ff 	.word	0x0000d7ff
   15200:	0000dfff 	.word	0x0000dfff
   15204:	0000dbff 	.word	0x0000dbff
   15208:	000ffc00 	.word	0x000ffc00

0001520c <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
   1520c:	b580      	push	{r7, lr}
   1520e:	b088      	sub	sp, #32
   15210:	af00      	add	r7, sp, #0
   15212:	6078      	str	r0, [r7, #4]
   15214:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
   15216:	687b      	ldr	r3, [r7, #4]
   15218:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
   1521a:	683b      	ldr	r3, [r7, #0]
   1521c:	3301      	adds	r3, #1
   1521e:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
   15220:	2300      	movs	r3, #0
   15222:	61bb      	str	r3, [r7, #24]
    char *output = (char*)parson_malloc(initial_size);
   15224:	4b4a      	ldr	r3, [pc, #296]	; (15350 <process_string+0x144>)
   15226:	681b      	ldr	r3, [r3, #0]
   15228:	69fa      	ldr	r2, [r7, #28]
   1522a:	0010      	movs	r0, r2
   1522c:	4798      	blx	r3
   1522e:	0003      	movs	r3, r0
   15230:	617b      	str	r3, [r7, #20]
    char *output_ptr = output;
   15232:	697b      	ldr	r3, [r7, #20]
   15234:	60bb      	str	r3, [r7, #8]
    char *resized_output = NULL;
   15236:	2300      	movs	r3, #0
   15238:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
   1523a:	e04d      	b.n	152d8 <process_string+0xcc>
        if (*input_ptr == '\\') {
   1523c:	68fb      	ldr	r3, [r7, #12]
   1523e:	781b      	ldrb	r3, [r3, #0]
   15240:	2b5c      	cmp	r3, #92	; 0x5c
   15242:	d139      	bne.n	152b8 <process_string+0xac>
            input_ptr++;
   15244:	68fb      	ldr	r3, [r7, #12]
   15246:	3301      	adds	r3, #1
   15248:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
   1524a:	68fb      	ldr	r3, [r7, #12]
   1524c:	781b      	ldrb	r3, [r3, #0]
   1524e:	3b22      	subs	r3, #34	; 0x22
   15250:	2b53      	cmp	r3, #83	; 0x53
   15252:	d900      	bls.n	15256 <process_string+0x4a>
   15254:	e06c      	b.n	15330 <process_string+0x124>
   15256:	009a      	lsls	r2, r3, #2
   15258:	4b3e      	ldr	r3, [pc, #248]	; (15354 <process_string+0x148>)
   1525a:	18d3      	adds	r3, r2, r3
   1525c:	681b      	ldr	r3, [r3, #0]
   1525e:	469f      	mov	pc, r3
                case '\"': *output_ptr = '\"'; break;
   15260:	68bb      	ldr	r3, [r7, #8]
   15262:	2222      	movs	r2, #34	; 0x22
   15264:	701a      	strb	r2, [r3, #0]
   15266:	e031      	b.n	152cc <process_string+0xc0>
                case '\\': *output_ptr = '\\'; break;
   15268:	68bb      	ldr	r3, [r7, #8]
   1526a:	225c      	movs	r2, #92	; 0x5c
   1526c:	701a      	strb	r2, [r3, #0]
   1526e:	e02d      	b.n	152cc <process_string+0xc0>
                case '/':  *output_ptr = '/';  break;
   15270:	68bb      	ldr	r3, [r7, #8]
   15272:	222f      	movs	r2, #47	; 0x2f
   15274:	701a      	strb	r2, [r3, #0]
   15276:	e029      	b.n	152cc <process_string+0xc0>
                case 'b':  *output_ptr = '\b'; break;
   15278:	68bb      	ldr	r3, [r7, #8]
   1527a:	2208      	movs	r2, #8
   1527c:	701a      	strb	r2, [r3, #0]
   1527e:	e025      	b.n	152cc <process_string+0xc0>
                case 'f':  *output_ptr = '\f'; break;
   15280:	68bb      	ldr	r3, [r7, #8]
   15282:	220c      	movs	r2, #12
   15284:	701a      	strb	r2, [r3, #0]
   15286:	e021      	b.n	152cc <process_string+0xc0>
                case 'n':  *output_ptr = '\n'; break;
   15288:	68bb      	ldr	r3, [r7, #8]
   1528a:	220a      	movs	r2, #10
   1528c:	701a      	strb	r2, [r3, #0]
   1528e:	e01d      	b.n	152cc <process_string+0xc0>
                case 'r':  *output_ptr = '\r'; break;
   15290:	68bb      	ldr	r3, [r7, #8]
   15292:	220d      	movs	r2, #13
   15294:	701a      	strb	r2, [r3, #0]
   15296:	e019      	b.n	152cc <process_string+0xc0>
                case 't':  *output_ptr = '\t'; break;
   15298:	68bb      	ldr	r3, [r7, #8]
   1529a:	2209      	movs	r2, #9
   1529c:	701a      	strb	r2, [r3, #0]
   1529e:	e015      	b.n	152cc <process_string+0xc0>
                case 'u':
                    if (parse_utf_16(&input_ptr, &output_ptr) == JSONFailure)
   152a0:	2308      	movs	r3, #8
   152a2:	18fa      	adds	r2, r7, r3
   152a4:	230c      	movs	r3, #12
   152a6:	18fb      	adds	r3, r7, r3
   152a8:	0011      	movs	r1, r2
   152aa:	0018      	movs	r0, r3
   152ac:	4b2a      	ldr	r3, [pc, #168]	; (15358 <process_string+0x14c>)
   152ae:	4798      	blx	r3
   152b0:	0003      	movs	r3, r0
   152b2:	3301      	adds	r3, #1
   152b4:	d109      	bne.n	152ca <process_string+0xbe>
                        goto error;
   152b6:	e040      	b.n	1533a <process_string+0x12e>
                    break;
                default:
                    goto error;
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
   152b8:	68fb      	ldr	r3, [r7, #12]
   152ba:	781b      	ldrb	r3, [r3, #0]
   152bc:	2b1f      	cmp	r3, #31
   152be:	d939      	bls.n	15334 <process_string+0x128>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
   152c0:	68bb      	ldr	r3, [r7, #8]
   152c2:	68fa      	ldr	r2, [r7, #12]
   152c4:	7812      	ldrb	r2, [r2, #0]
   152c6:	701a      	strb	r2, [r3, #0]
   152c8:	e000      	b.n	152cc <process_string+0xc0>
                    break;
   152ca:	46c0      	nop			; (mov r8, r8)
        }
        output_ptr++;
   152cc:	68bb      	ldr	r3, [r7, #8]
   152ce:	3301      	adds	r3, #1
   152d0:	60bb      	str	r3, [r7, #8]
        input_ptr++;
   152d2:	68fb      	ldr	r3, [r7, #12]
   152d4:	3301      	adds	r3, #1
   152d6:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
   152d8:	68fb      	ldr	r3, [r7, #12]
   152da:	781b      	ldrb	r3, [r3, #0]
   152dc:	2b00      	cmp	r3, #0
   152de:	d007      	beq.n	152f0 <process_string+0xe4>
   152e0:	68fb      	ldr	r3, [r7, #12]
   152e2:	001a      	movs	r2, r3
   152e4:	687b      	ldr	r3, [r7, #4]
   152e6:	1ad3      	subs	r3, r2, r3
   152e8:	001a      	movs	r2, r3
   152ea:	683b      	ldr	r3, [r7, #0]
   152ec:	429a      	cmp	r2, r3
   152ee:	d3a5      	bcc.n	1523c <process_string+0x30>
    }
    *output_ptr = '\0';
   152f0:	68bb      	ldr	r3, [r7, #8]
   152f2:	2200      	movs	r2, #0
   152f4:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
   152f6:	68bb      	ldr	r3, [r7, #8]
   152f8:	001a      	movs	r2, r3
   152fa:	697b      	ldr	r3, [r7, #20]
   152fc:	1ad3      	subs	r3, r2, r3
   152fe:	3301      	adds	r3, #1
   15300:	61bb      	str	r3, [r7, #24]
    resized_output = (char*)parson_malloc(final_size);
   15302:	4b13      	ldr	r3, [pc, #76]	; (15350 <process_string+0x144>)
   15304:	681b      	ldr	r3, [r3, #0]
   15306:	69ba      	ldr	r2, [r7, #24]
   15308:	0010      	movs	r0, r2
   1530a:	4798      	blx	r3
   1530c:	0003      	movs	r3, r0
   1530e:	613b      	str	r3, [r7, #16]
    if (resized_output == NULL)
   15310:	693b      	ldr	r3, [r7, #16]
   15312:	2b00      	cmp	r3, #0
   15314:	d010      	beq.n	15338 <process_string+0x12c>
        goto error;
    memcpy(resized_output, output, final_size);
   15316:	69ba      	ldr	r2, [r7, #24]
   15318:	6979      	ldr	r1, [r7, #20]
   1531a:	693b      	ldr	r3, [r7, #16]
   1531c:	0018      	movs	r0, r3
   1531e:	4b0f      	ldr	r3, [pc, #60]	; (1535c <process_string+0x150>)
   15320:	4798      	blx	r3
    parson_free(output);
   15322:	4b0f      	ldr	r3, [pc, #60]	; (15360 <process_string+0x154>)
   15324:	681b      	ldr	r3, [r3, #0]
   15326:	697a      	ldr	r2, [r7, #20]
   15328:	0010      	movs	r0, r2
   1532a:	4798      	blx	r3
    return resized_output;
   1532c:	693b      	ldr	r3, [r7, #16]
   1532e:	e00a      	b.n	15346 <process_string+0x13a>
                    goto error;
   15330:	46c0      	nop			; (mov r8, r8)
   15332:	e002      	b.n	1533a <process_string+0x12e>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
   15334:	46c0      	nop			; (mov r8, r8)
   15336:	e000      	b.n	1533a <process_string+0x12e>
        goto error;
   15338:	46c0      	nop			; (mov r8, r8)
error:
    parson_free(output);
   1533a:	4b09      	ldr	r3, [pc, #36]	; (15360 <process_string+0x154>)
   1533c:	681b      	ldr	r3, [r3, #0]
   1533e:	697a      	ldr	r2, [r7, #20]
   15340:	0010      	movs	r0, r2
   15342:	4798      	blx	r3
    return NULL;
   15344:	2300      	movs	r3, #0
}
   15346:	0018      	movs	r0, r3
   15348:	46bd      	mov	sp, r7
   1534a:	b008      	add	sp, #32
   1534c:	bd80      	pop	{r7, pc}
   1534e:	46c0      	nop			; (mov r8, r8)
   15350:	20000158 	.word	0x20000158
   15354:	0002111c 	.word	0x0002111c
   15358:	00014fed 	.word	0x00014fed
   1535c:	0001c1e5 	.word	0x0001c1e5
   15360:	2000015c 	.word	0x2000015c

00015364 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
   15364:	b580      	push	{r7, lr}
   15366:	b084      	sub	sp, #16
   15368:	af00      	add	r7, sp, #0
   1536a:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
   1536c:	687b      	ldr	r3, [r7, #4]
   1536e:	681b      	ldr	r3, [r3, #0]
   15370:	60fb      	str	r3, [r7, #12]
    size_t string_len = 0;
   15372:	2300      	movs	r3, #0
   15374:	60bb      	str	r3, [r7, #8]
    skip_quotes(string);
   15376:	687b      	ldr	r3, [r7, #4]
   15378:	0018      	movs	r0, r3
   1537a:	4b0e      	ldr	r3, [pc, #56]	; (153b4 <get_quoted_string+0x50>)
   1537c:	4798      	blx	r3
    if (**string == '\0')
   1537e:	687b      	ldr	r3, [r7, #4]
   15380:	681b      	ldr	r3, [r3, #0]
   15382:	781b      	ldrb	r3, [r3, #0]
   15384:	2b00      	cmp	r3, #0
   15386:	d101      	bne.n	1538c <get_quoted_string+0x28>
        return NULL;
   15388:	2300      	movs	r3, #0
   1538a:	e00e      	b.n	153aa <get_quoted_string+0x46>
    string_len = *string - string_start - 2; /* length without quotes */
   1538c:	687b      	ldr	r3, [r7, #4]
   1538e:	681b      	ldr	r3, [r3, #0]
   15390:	001a      	movs	r2, r3
   15392:	68fb      	ldr	r3, [r7, #12]
   15394:	1ad3      	subs	r3, r2, r3
   15396:	3b02      	subs	r3, #2
   15398:	60bb      	str	r3, [r7, #8]
    return process_string(string_start + 1, string_len);
   1539a:	68fb      	ldr	r3, [r7, #12]
   1539c:	3301      	adds	r3, #1
   1539e:	68ba      	ldr	r2, [r7, #8]
   153a0:	0011      	movs	r1, r2
   153a2:	0018      	movs	r0, r3
   153a4:	4b04      	ldr	r3, [pc, #16]	; (153b8 <get_quoted_string+0x54>)
   153a6:	4798      	blx	r3
   153a8:	0003      	movs	r3, r0
}
   153aa:	0018      	movs	r0, r3
   153ac:	46bd      	mov	sp, r7
   153ae:	b004      	add	sp, #16
   153b0:	bd80      	pop	{r7, pc}
   153b2:	46c0      	nop			; (mov r8, r8)
   153b4:	00014f85 	.word	0x00014f85
   153b8:	0001520d 	.word	0x0001520d

000153bc <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
   153bc:	b580      	push	{r7, lr}
   153be:	b082      	sub	sp, #8
   153c0:	af00      	add	r7, sp, #0
   153c2:	6078      	str	r0, [r7, #4]
   153c4:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING)
   153c6:	683b      	ldr	r3, [r7, #0]
   153c8:	2b13      	cmp	r3, #19
   153ca:	d906      	bls.n	153da <parse_value+0x1e>
        return NULL;
   153cc:	2300      	movs	r3, #0
   153ce:	e047      	b.n	15460 <parse_value+0xa4>
    SKIP_WHITESPACES(string);
   153d0:	687b      	ldr	r3, [r7, #4]
   153d2:	681b      	ldr	r3, [r3, #0]
   153d4:	1c5a      	adds	r2, r3, #1
   153d6:	687b      	ldr	r3, [r7, #4]
   153d8:	601a      	str	r2, [r3, #0]
   153da:	4b23      	ldr	r3, [pc, #140]	; (15468 <parse_value+0xac>)
   153dc:	4798      	blx	r3
   153de:	0002      	movs	r2, r0
   153e0:	687b      	ldr	r3, [r7, #4]
   153e2:	681b      	ldr	r3, [r3, #0]
   153e4:	781b      	ldrb	r3, [r3, #0]
   153e6:	3301      	adds	r3, #1
   153e8:	18d3      	adds	r3, r2, r3
   153ea:	781b      	ldrb	r3, [r3, #0]
   153ec:	001a      	movs	r2, r3
   153ee:	2308      	movs	r3, #8
   153f0:	4013      	ands	r3, r2
   153f2:	d1ed      	bne.n	153d0 <parse_value+0x14>
    switch (**string) {
   153f4:	687b      	ldr	r3, [r7, #4]
   153f6:	681b      	ldr	r3, [r3, #0]
   153f8:	781b      	ldrb	r3, [r3, #0]
   153fa:	3b22      	subs	r3, #34	; 0x22
   153fc:	2b59      	cmp	r3, #89	; 0x59
   153fe:	d82e      	bhi.n	1545e <parse_value+0xa2>
   15400:	009a      	lsls	r2, r3, #2
   15402:	4b1a      	ldr	r3, [pc, #104]	; (1546c <parse_value+0xb0>)
   15404:	18d3      	adds	r3, r2, r3
   15406:	681b      	ldr	r3, [r3, #0]
   15408:	469f      	mov	pc, r3
        case '{':
            return parse_object_value(string, nesting + 1);
   1540a:	683b      	ldr	r3, [r7, #0]
   1540c:	1c5a      	adds	r2, r3, #1
   1540e:	687b      	ldr	r3, [r7, #4]
   15410:	0011      	movs	r1, r2
   15412:	0018      	movs	r0, r3
   15414:	4b16      	ldr	r3, [pc, #88]	; (15470 <parse_value+0xb4>)
   15416:	4798      	blx	r3
   15418:	0003      	movs	r3, r0
   1541a:	e021      	b.n	15460 <parse_value+0xa4>
        case '[':
            return parse_array_value(string, nesting + 1);
   1541c:	683b      	ldr	r3, [r7, #0]
   1541e:	1c5a      	adds	r2, r3, #1
   15420:	687b      	ldr	r3, [r7, #4]
   15422:	0011      	movs	r1, r2
   15424:	0018      	movs	r0, r3
   15426:	4b13      	ldr	r3, [pc, #76]	; (15474 <parse_value+0xb8>)
   15428:	4798      	blx	r3
   1542a:	0003      	movs	r3, r0
   1542c:	e018      	b.n	15460 <parse_value+0xa4>
        case '\"':
            return parse_string_value(string);
   1542e:	687b      	ldr	r3, [r7, #4]
   15430:	0018      	movs	r0, r3
   15432:	4b11      	ldr	r3, [pc, #68]	; (15478 <parse_value+0xbc>)
   15434:	4798      	blx	r3
   15436:	0003      	movs	r3, r0
   15438:	e012      	b.n	15460 <parse_value+0xa4>
        case 'f': case 't':
            return parse_boolean_value(string);
   1543a:	687b      	ldr	r3, [r7, #4]
   1543c:	0018      	movs	r0, r3
   1543e:	4b0f      	ldr	r3, [pc, #60]	; (1547c <parse_value+0xc0>)
   15440:	4798      	blx	r3
   15442:	0003      	movs	r3, r0
   15444:	e00c      	b.n	15460 <parse_value+0xa4>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
   15446:	687b      	ldr	r3, [r7, #4]
   15448:	0018      	movs	r0, r3
   1544a:	4b0d      	ldr	r3, [pc, #52]	; (15480 <parse_value+0xc4>)
   1544c:	4798      	blx	r3
   1544e:	0003      	movs	r3, r0
   15450:	e006      	b.n	15460 <parse_value+0xa4>
        case 'n':
            return parse_null_value(string);
   15452:	687b      	ldr	r3, [r7, #4]
   15454:	0018      	movs	r0, r3
   15456:	4b0b      	ldr	r3, [pc, #44]	; (15484 <parse_value+0xc8>)
   15458:	4798      	blx	r3
   1545a:	0003      	movs	r3, r0
   1545c:	e000      	b.n	15460 <parse_value+0xa4>
        default:
            return NULL;
   1545e:	2300      	movs	r3, #0
    }
}
   15460:	0018      	movs	r0, r3
   15462:	46bd      	mov	sp, r7
   15464:	b002      	add	sp, #8
   15466:	bd80      	pop	{r7, pc}
   15468:	0001c071 	.word	0x0001c071
   1546c:	0002126c 	.word	0x0002126c
   15470:	00015489 	.word	0x00015489
   15474:	000156c5 	.word	0x000156c5
   15478:	0001587d 	.word	0x0001587d
   1547c:	000158d5 	.word	0x000158d5
   15480:	00015951 	.word	0x00015951
   15484:	000159bd 	.word	0x000159bd

00015488 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
   15488:	b580      	push	{r7, lr}
   1548a:	b086      	sub	sp, #24
   1548c:	af00      	add	r7, sp, #0
   1548e:	6078      	str	r0, [r7, #4]
   15490:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = json_value_init_object(), *new_value = NULL;
   15492:	4b82      	ldr	r3, [pc, #520]	; (1569c <parse_object_value+0x214>)
   15494:	4798      	blx	r3
   15496:	0003      	movs	r3, r0
   15498:	617b      	str	r3, [r7, #20]
   1549a:	2300      	movs	r3, #0
   1549c:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = json_value_get_object(output_value);
   1549e:	697b      	ldr	r3, [r7, #20]
   154a0:	0018      	movs	r0, r3
   154a2:	4b7f      	ldr	r3, [pc, #508]	; (156a0 <parse_object_value+0x218>)
   154a4:	4798      	blx	r3
   154a6:	0003      	movs	r3, r0
   154a8:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
   154aa:	2300      	movs	r3, #0
   154ac:	60bb      	str	r3, [r7, #8]
    if (output_value == NULL)
   154ae:	697b      	ldr	r3, [r7, #20]
   154b0:	2b00      	cmp	r3, #0
   154b2:	d101      	bne.n	154b8 <parse_object_value+0x30>
        return NULL;
   154b4:	2300      	movs	r3, #0
   154b6:	e0ed      	b.n	15694 <parse_object_value+0x20c>
    SKIP_CHAR(string);
   154b8:	687b      	ldr	r3, [r7, #4]
   154ba:	681b      	ldr	r3, [r3, #0]
   154bc:	1c5a      	adds	r2, r3, #1
   154be:	687b      	ldr	r3, [r7, #4]
   154c0:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
   154c2:	e004      	b.n	154ce <parse_object_value+0x46>
   154c4:	687b      	ldr	r3, [r7, #4]
   154c6:	681b      	ldr	r3, [r3, #0]
   154c8:	1c5a      	adds	r2, r3, #1
   154ca:	687b      	ldr	r3, [r7, #4]
   154cc:	601a      	str	r2, [r3, #0]
   154ce:	4b75      	ldr	r3, [pc, #468]	; (156a4 <parse_object_value+0x21c>)
   154d0:	4798      	blx	r3
   154d2:	0002      	movs	r2, r0
   154d4:	687b      	ldr	r3, [r7, #4]
   154d6:	681b      	ldr	r3, [r3, #0]
   154d8:	781b      	ldrb	r3, [r3, #0]
   154da:	3301      	adds	r3, #1
   154dc:	18d3      	adds	r3, r2, r3
   154de:	781b      	ldrb	r3, [r3, #0]
   154e0:	001a      	movs	r2, r3
   154e2:	2308      	movs	r3, #8
   154e4:	4013      	ands	r3, r2
   154e6:	d1ed      	bne.n	154c4 <parse_object_value+0x3c>
    if (**string == '}') { /* empty object */
   154e8:	687b      	ldr	r3, [r7, #4]
   154ea:	681b      	ldr	r3, [r3, #0]
   154ec:	781b      	ldrb	r3, [r3, #0]
   154ee:	2b7d      	cmp	r3, #125	; 0x7d
   154f0:	d000      	beq.n	154f4 <parse_object_value+0x6c>
   154f2:	e096      	b.n	15622 <parse_object_value+0x19a>
        SKIP_CHAR(string);
   154f4:	687b      	ldr	r3, [r7, #4]
   154f6:	681b      	ldr	r3, [r3, #0]
   154f8:	1c5a      	adds	r2, r3, #1
   154fa:	687b      	ldr	r3, [r7, #4]
   154fc:	601a      	str	r2, [r3, #0]
        return output_value;
   154fe:	697b      	ldr	r3, [r7, #20]
   15500:	e0c8      	b.n	15694 <parse_object_value+0x20c>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
   15502:	687b      	ldr	r3, [r7, #4]
   15504:	0018      	movs	r0, r3
   15506:	4b68      	ldr	r3, [pc, #416]	; (156a8 <parse_object_value+0x220>)
   15508:	4798      	blx	r3
   1550a:	0003      	movs	r3, r0
   1550c:	60bb      	str	r3, [r7, #8]
        SKIP_WHITESPACES(string);
   1550e:	e004      	b.n	1551a <parse_object_value+0x92>
   15510:	687b      	ldr	r3, [r7, #4]
   15512:	681b      	ldr	r3, [r3, #0]
   15514:	1c5a      	adds	r2, r3, #1
   15516:	687b      	ldr	r3, [r7, #4]
   15518:	601a      	str	r2, [r3, #0]
   1551a:	4b62      	ldr	r3, [pc, #392]	; (156a4 <parse_object_value+0x21c>)
   1551c:	4798      	blx	r3
   1551e:	0002      	movs	r2, r0
   15520:	687b      	ldr	r3, [r7, #4]
   15522:	681b      	ldr	r3, [r3, #0]
   15524:	781b      	ldrb	r3, [r3, #0]
   15526:	3301      	adds	r3, #1
   15528:	18d3      	adds	r3, r2, r3
   1552a:	781b      	ldrb	r3, [r3, #0]
   1552c:	001a      	movs	r2, r3
   1552e:	2308      	movs	r3, #8
   15530:	4013      	ands	r3, r2
   15532:	d1ed      	bne.n	15510 <parse_object_value+0x88>
        if (new_key == NULL || **string != ':') {
   15534:	68bb      	ldr	r3, [r7, #8]
   15536:	2b00      	cmp	r3, #0
   15538:	d004      	beq.n	15544 <parse_object_value+0xbc>
   1553a:	687b      	ldr	r3, [r7, #4]
   1553c:	681b      	ldr	r3, [r3, #0]
   1553e:	781b      	ldrb	r3, [r3, #0]
   15540:	2b3a      	cmp	r3, #58	; 0x3a
   15542:	d005      	beq.n	15550 <parse_object_value+0xc8>
            json_value_free(output_value);
   15544:	697b      	ldr	r3, [r7, #20]
   15546:	0018      	movs	r0, r3
   15548:	4b58      	ldr	r3, [pc, #352]	; (156ac <parse_object_value+0x224>)
   1554a:	4798      	blx	r3
            return NULL;
   1554c:	2300      	movs	r3, #0
   1554e:	e0a1      	b.n	15694 <parse_object_value+0x20c>
        }
        SKIP_CHAR(string);
   15550:	687b      	ldr	r3, [r7, #4]
   15552:	681b      	ldr	r3, [r3, #0]
   15554:	1c5a      	adds	r2, r3, #1
   15556:	687b      	ldr	r3, [r7, #4]
   15558:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
   1555a:	683a      	ldr	r2, [r7, #0]
   1555c:	687b      	ldr	r3, [r7, #4]
   1555e:	0011      	movs	r1, r2
   15560:	0018      	movs	r0, r3
   15562:	4b53      	ldr	r3, [pc, #332]	; (156b0 <parse_object_value+0x228>)
   15564:	4798      	blx	r3
   15566:	0003      	movs	r3, r0
   15568:	613b      	str	r3, [r7, #16]
        if (new_value == NULL) {
   1556a:	693b      	ldr	r3, [r7, #16]
   1556c:	2b00      	cmp	r3, #0
   1556e:	d10a      	bne.n	15586 <parse_object_value+0xfe>
            parson_free(new_key);
   15570:	4b50      	ldr	r3, [pc, #320]	; (156b4 <parse_object_value+0x22c>)
   15572:	681b      	ldr	r3, [r3, #0]
   15574:	68ba      	ldr	r2, [r7, #8]
   15576:	0010      	movs	r0, r2
   15578:	4798      	blx	r3
            json_value_free(output_value);
   1557a:	697b      	ldr	r3, [r7, #20]
   1557c:	0018      	movs	r0, r3
   1557e:	4b4b      	ldr	r3, [pc, #300]	; (156ac <parse_object_value+0x224>)
   15580:	4798      	blx	r3
            return NULL;
   15582:	2300      	movs	r3, #0
   15584:	e086      	b.n	15694 <parse_object_value+0x20c>
        }
        if(json_object_add(output_object, new_key, new_value) == JSONFailure) {
   15586:	693a      	ldr	r2, [r7, #16]
   15588:	68b9      	ldr	r1, [r7, #8]
   1558a:	68fb      	ldr	r3, [r7, #12]
   1558c:	0018      	movs	r0, r3
   1558e:	4b4a      	ldr	r3, [pc, #296]	; (156b8 <parse_object_value+0x230>)
   15590:	4798      	blx	r3
   15592:	0003      	movs	r3, r0
   15594:	3301      	adds	r3, #1
   15596:	d10f      	bne.n	155b8 <parse_object_value+0x130>
            parson_free(new_key);
   15598:	4b46      	ldr	r3, [pc, #280]	; (156b4 <parse_object_value+0x22c>)
   1559a:	681b      	ldr	r3, [r3, #0]
   1559c:	68ba      	ldr	r2, [r7, #8]
   1559e:	0010      	movs	r0, r2
   155a0:	4798      	blx	r3
            parson_free(new_value);
   155a2:	4b44      	ldr	r3, [pc, #272]	; (156b4 <parse_object_value+0x22c>)
   155a4:	681b      	ldr	r3, [r3, #0]
   155a6:	693a      	ldr	r2, [r7, #16]
   155a8:	0010      	movs	r0, r2
   155aa:	4798      	blx	r3
            json_value_free(output_value);
   155ac:	697b      	ldr	r3, [r7, #20]
   155ae:	0018      	movs	r0, r3
   155b0:	4b3e      	ldr	r3, [pc, #248]	; (156ac <parse_object_value+0x224>)
   155b2:	4798      	blx	r3
            return NULL;
   155b4:	2300      	movs	r3, #0
   155b6:	e06d      	b.n	15694 <parse_object_value+0x20c>
        }
        parson_free(new_key);
   155b8:	4b3e      	ldr	r3, [pc, #248]	; (156b4 <parse_object_value+0x22c>)
   155ba:	681b      	ldr	r3, [r3, #0]
   155bc:	68ba      	ldr	r2, [r7, #8]
   155be:	0010      	movs	r0, r2
   155c0:	4798      	blx	r3
        SKIP_WHITESPACES(string);
   155c2:	e004      	b.n	155ce <parse_object_value+0x146>
   155c4:	687b      	ldr	r3, [r7, #4]
   155c6:	681b      	ldr	r3, [r3, #0]
   155c8:	1c5a      	adds	r2, r3, #1
   155ca:	687b      	ldr	r3, [r7, #4]
   155cc:	601a      	str	r2, [r3, #0]
   155ce:	4b35      	ldr	r3, [pc, #212]	; (156a4 <parse_object_value+0x21c>)
   155d0:	4798      	blx	r3
   155d2:	0002      	movs	r2, r0
   155d4:	687b      	ldr	r3, [r7, #4]
   155d6:	681b      	ldr	r3, [r3, #0]
   155d8:	781b      	ldrb	r3, [r3, #0]
   155da:	3301      	adds	r3, #1
   155dc:	18d3      	adds	r3, r2, r3
   155de:	781b      	ldrb	r3, [r3, #0]
   155e0:	001a      	movs	r2, r3
   155e2:	2308      	movs	r3, #8
   155e4:	4013      	ands	r3, r2
   155e6:	d1ed      	bne.n	155c4 <parse_object_value+0x13c>
        if (**string != ',')
   155e8:	687b      	ldr	r3, [r7, #4]
   155ea:	681b      	ldr	r3, [r3, #0]
   155ec:	781b      	ldrb	r3, [r3, #0]
   155ee:	2b2c      	cmp	r3, #44	; 0x2c
   155f0:	d11e      	bne.n	15630 <parse_object_value+0x1a8>
            break;
        SKIP_CHAR(string);
   155f2:	687b      	ldr	r3, [r7, #4]
   155f4:	681b      	ldr	r3, [r3, #0]
   155f6:	1c5a      	adds	r2, r3, #1
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
   155fc:	e004      	b.n	15608 <parse_object_value+0x180>
   155fe:	687b      	ldr	r3, [r7, #4]
   15600:	681b      	ldr	r3, [r3, #0]
   15602:	1c5a      	adds	r2, r3, #1
   15604:	687b      	ldr	r3, [r7, #4]
   15606:	601a      	str	r2, [r3, #0]
   15608:	4b26      	ldr	r3, [pc, #152]	; (156a4 <parse_object_value+0x21c>)
   1560a:	4798      	blx	r3
   1560c:	0002      	movs	r2, r0
   1560e:	687b      	ldr	r3, [r7, #4]
   15610:	681b      	ldr	r3, [r3, #0]
   15612:	781b      	ldrb	r3, [r3, #0]
   15614:	3301      	adds	r3, #1
   15616:	18d3      	adds	r3, r2, r3
   15618:	781b      	ldrb	r3, [r3, #0]
   1561a:	001a      	movs	r2, r3
   1561c:	2308      	movs	r3, #8
   1561e:	4013      	ands	r3, r2
   15620:	d1ed      	bne.n	155fe <parse_object_value+0x176>
    while (**string != '\0') {
   15622:	687b      	ldr	r3, [r7, #4]
   15624:	681b      	ldr	r3, [r3, #0]
   15626:	781b      	ldrb	r3, [r3, #0]
   15628:	2b00      	cmp	r3, #0
   1562a:	d000      	beq.n	1562e <parse_object_value+0x1a6>
   1562c:	e769      	b.n	15502 <parse_object_value+0x7a>
   1562e:	e006      	b.n	1563e <parse_object_value+0x1b6>
            break;
   15630:	46c0      	nop			; (mov r8, r8)
    }
    SKIP_WHITESPACES(string);
   15632:	e004      	b.n	1563e <parse_object_value+0x1b6>
   15634:	687b      	ldr	r3, [r7, #4]
   15636:	681b      	ldr	r3, [r3, #0]
   15638:	1c5a      	adds	r2, r3, #1
   1563a:	687b      	ldr	r3, [r7, #4]
   1563c:	601a      	str	r2, [r3, #0]
   1563e:	4b19      	ldr	r3, [pc, #100]	; (156a4 <parse_object_value+0x21c>)
   15640:	4798      	blx	r3
   15642:	0002      	movs	r2, r0
   15644:	687b      	ldr	r3, [r7, #4]
   15646:	681b      	ldr	r3, [r3, #0]
   15648:	781b      	ldrb	r3, [r3, #0]
   1564a:	3301      	adds	r3, #1
   1564c:	18d3      	adds	r3, r2, r3
   1564e:	781b      	ldrb	r3, [r3, #0]
   15650:	001a      	movs	r2, r3
   15652:	2308      	movs	r3, #8
   15654:	4013      	ands	r3, r2
   15656:	d1ed      	bne.n	15634 <parse_object_value+0x1ac>
    if (**string != '}' || /* Trim object after parsing is over */
   15658:	687b      	ldr	r3, [r7, #4]
   1565a:	681b      	ldr	r3, [r3, #0]
   1565c:	781b      	ldrb	r3, [r3, #0]
   1565e:	2b7d      	cmp	r3, #125	; 0x7d
   15660:	d10c      	bne.n	1567c <parse_object_value+0x1f4>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
   15662:	68fb      	ldr	r3, [r7, #12]
   15664:	0018      	movs	r0, r3
   15666:	4b15      	ldr	r3, [pc, #84]	; (156bc <parse_object_value+0x234>)
   15668:	4798      	blx	r3
   1566a:	0002      	movs	r2, r0
   1566c:	68fb      	ldr	r3, [r7, #12]
   1566e:	0011      	movs	r1, r2
   15670:	0018      	movs	r0, r3
   15672:	4b13      	ldr	r3, [pc, #76]	; (156c0 <parse_object_value+0x238>)
   15674:	4798      	blx	r3
   15676:	0003      	movs	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
   15678:	3301      	adds	r3, #1
   1567a:	d105      	bne.n	15688 <parse_object_value+0x200>
            json_value_free(output_value);
   1567c:	697b      	ldr	r3, [r7, #20]
   1567e:	0018      	movs	r0, r3
   15680:	4b0a      	ldr	r3, [pc, #40]	; (156ac <parse_object_value+0x224>)
   15682:	4798      	blx	r3
            return NULL;
   15684:	2300      	movs	r3, #0
   15686:	e005      	b.n	15694 <parse_object_value+0x20c>
    }
    SKIP_CHAR(string);
   15688:	687b      	ldr	r3, [r7, #4]
   1568a:	681b      	ldr	r3, [r3, #0]
   1568c:	1c5a      	adds	r2, r3, #1
   1568e:	687b      	ldr	r3, [r7, #4]
   15690:	601a      	str	r2, [r3, #0]
    return output_value;
   15692:	697b      	ldr	r3, [r7, #20]
}
   15694:	0018      	movs	r0, r3
   15696:	46bd      	mov	sp, r7
   15698:	b006      	add	sp, #24
   1569a:	bd80      	pop	{r7, pc}
   1569c:	00015d31 	.word	0x00015d31
   156a0:	00015c35 	.word	0x00015c35
   156a4:	0001c071 	.word	0x0001c071
   156a8:	00015365 	.word	0x00015365
   156ac:	00015cbd 	.word	0x00015cbd
   156b0:	000153bd 	.word	0x000153bd
   156b4:	2000015c 	.word	0x2000015c
   156b8:	00014ae9 	.word	0x00014ae9
   156bc:	00015b39 	.word	0x00015b39
   156c0:	00014bc9 	.word	0x00014bc9

000156c4 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
   156c4:	b580      	push	{r7, lr}
   156c6:	b086      	sub	sp, #24
   156c8:	af00      	add	r7, sp, #0
   156ca:	6078      	str	r0, [r7, #4]
   156cc:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = json_value_init_array(), *new_array_value = NULL;
   156ce:	4b62      	ldr	r3, [pc, #392]	; (15858 <parse_array_value+0x194>)
   156d0:	4798      	blx	r3
   156d2:	0003      	movs	r3, r0
   156d4:	617b      	str	r3, [r7, #20]
   156d6:	2300      	movs	r3, #0
   156d8:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = json_value_get_array(output_value);
   156da:	697b      	ldr	r3, [r7, #20]
   156dc:	0018      	movs	r0, r3
   156de:	4b5f      	ldr	r3, [pc, #380]	; (1585c <parse_array_value+0x198>)
   156e0:	4798      	blx	r3
   156e2:	0003      	movs	r3, r0
   156e4:	60fb      	str	r3, [r7, #12]
    if (!output_value)
   156e6:	697b      	ldr	r3, [r7, #20]
   156e8:	2b00      	cmp	r3, #0
   156ea:	d101      	bne.n	156f0 <parse_array_value+0x2c>
        return NULL;
   156ec:	2300      	movs	r3, #0
   156ee:	e0af      	b.n	15850 <parse_array_value+0x18c>
    SKIP_CHAR(string);
   156f0:	687b      	ldr	r3, [r7, #4]
   156f2:	681b      	ldr	r3, [r3, #0]
   156f4:	1c5a      	adds	r2, r3, #1
   156f6:	687b      	ldr	r3, [r7, #4]
   156f8:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
   156fa:	e004      	b.n	15706 <parse_array_value+0x42>
   156fc:	687b      	ldr	r3, [r7, #4]
   156fe:	681b      	ldr	r3, [r3, #0]
   15700:	1c5a      	adds	r2, r3, #1
   15702:	687b      	ldr	r3, [r7, #4]
   15704:	601a      	str	r2, [r3, #0]
   15706:	4b56      	ldr	r3, [pc, #344]	; (15860 <parse_array_value+0x19c>)
   15708:	4798      	blx	r3
   1570a:	0002      	movs	r2, r0
   1570c:	687b      	ldr	r3, [r7, #4]
   1570e:	681b      	ldr	r3, [r3, #0]
   15710:	781b      	ldrb	r3, [r3, #0]
   15712:	3301      	adds	r3, #1
   15714:	18d3      	adds	r3, r2, r3
   15716:	781b      	ldrb	r3, [r3, #0]
   15718:	001a      	movs	r2, r3
   1571a:	2308      	movs	r3, #8
   1571c:	4013      	ands	r3, r2
   1571e:	d1ed      	bne.n	156fc <parse_array_value+0x38>
    if (**string == ']') { /* empty array */
   15720:	687b      	ldr	r3, [r7, #4]
   15722:	681b      	ldr	r3, [r3, #0]
   15724:	781b      	ldrb	r3, [r3, #0]
   15726:	2b5d      	cmp	r3, #93	; 0x5d
   15728:	d15a      	bne.n	157e0 <parse_array_value+0x11c>
        SKIP_CHAR(string);
   1572a:	687b      	ldr	r3, [r7, #4]
   1572c:	681b      	ldr	r3, [r3, #0]
   1572e:	1c5a      	adds	r2, r3, #1
   15730:	687b      	ldr	r3, [r7, #4]
   15732:	601a      	str	r2, [r3, #0]
        return output_value;
   15734:	697b      	ldr	r3, [r7, #20]
   15736:	e08b      	b.n	15850 <parse_array_value+0x18c>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
   15738:	683a      	ldr	r2, [r7, #0]
   1573a:	687b      	ldr	r3, [r7, #4]
   1573c:	0011      	movs	r1, r2
   1573e:	0018      	movs	r0, r3
   15740:	4b48      	ldr	r3, [pc, #288]	; (15864 <parse_array_value+0x1a0>)
   15742:	4798      	blx	r3
   15744:	0003      	movs	r3, r0
   15746:	613b      	str	r3, [r7, #16]
        if (!new_array_value) {
   15748:	693b      	ldr	r3, [r7, #16]
   1574a:	2b00      	cmp	r3, #0
   1574c:	d105      	bne.n	1575a <parse_array_value+0x96>
            json_value_free(output_value);
   1574e:	697b      	ldr	r3, [r7, #20]
   15750:	0018      	movs	r0, r3
   15752:	4b45      	ldr	r3, [pc, #276]	; (15868 <parse_array_value+0x1a4>)
   15754:	4798      	blx	r3
            return NULL;
   15756:	2300      	movs	r3, #0
   15758:	e07a      	b.n	15850 <parse_array_value+0x18c>
        }
        if(json_array_add(output_array, new_array_value) == JSONFailure) {
   1575a:	693a      	ldr	r2, [r7, #16]
   1575c:	68fb      	ldr	r3, [r7, #12]
   1575e:	0011      	movs	r1, r2
   15760:	0018      	movs	r0, r3
   15762:	4b42      	ldr	r3, [pc, #264]	; (1586c <parse_array_value+0x1a8>)
   15764:	4798      	blx	r3
   15766:	0003      	movs	r3, r0
   15768:	3301      	adds	r3, #1
   1576a:	d10f      	bne.n	1578c <parse_array_value+0xc8>
            parson_free(new_array_value);
   1576c:	4b40      	ldr	r3, [pc, #256]	; (15870 <parse_array_value+0x1ac>)
   1576e:	681b      	ldr	r3, [r3, #0]
   15770:	693a      	ldr	r2, [r7, #16]
   15772:	0010      	movs	r0, r2
   15774:	4798      	blx	r3
            json_value_free(output_value);
   15776:	697b      	ldr	r3, [r7, #20]
   15778:	0018      	movs	r0, r3
   1577a:	4b3b      	ldr	r3, [pc, #236]	; (15868 <parse_array_value+0x1a4>)
   1577c:	4798      	blx	r3
            return NULL;
   1577e:	2300      	movs	r3, #0
   15780:	e066      	b.n	15850 <parse_array_value+0x18c>
        }
        SKIP_WHITESPACES(string);
   15782:	687b      	ldr	r3, [r7, #4]
   15784:	681b      	ldr	r3, [r3, #0]
   15786:	1c5a      	adds	r2, r3, #1
   15788:	687b      	ldr	r3, [r7, #4]
   1578a:	601a      	str	r2, [r3, #0]
   1578c:	4b34      	ldr	r3, [pc, #208]	; (15860 <parse_array_value+0x19c>)
   1578e:	4798      	blx	r3
   15790:	0002      	movs	r2, r0
   15792:	687b      	ldr	r3, [r7, #4]
   15794:	681b      	ldr	r3, [r3, #0]
   15796:	781b      	ldrb	r3, [r3, #0]
   15798:	3301      	adds	r3, #1
   1579a:	18d3      	adds	r3, r2, r3
   1579c:	781b      	ldrb	r3, [r3, #0]
   1579e:	001a      	movs	r2, r3
   157a0:	2308      	movs	r3, #8
   157a2:	4013      	ands	r3, r2
   157a4:	d1ed      	bne.n	15782 <parse_array_value+0xbe>
        if (**string != ',')
   157a6:	687b      	ldr	r3, [r7, #4]
   157a8:	681b      	ldr	r3, [r3, #0]
   157aa:	781b      	ldrb	r3, [r3, #0]
   157ac:	2b2c      	cmp	r3, #44	; 0x2c
   157ae:	d11d      	bne.n	157ec <parse_array_value+0x128>
            break;
        SKIP_CHAR(string);
   157b0:	687b      	ldr	r3, [r7, #4]
   157b2:	681b      	ldr	r3, [r3, #0]
   157b4:	1c5a      	adds	r2, r3, #1
   157b6:	687b      	ldr	r3, [r7, #4]
   157b8:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
   157ba:	e004      	b.n	157c6 <parse_array_value+0x102>
   157bc:	687b      	ldr	r3, [r7, #4]
   157be:	681b      	ldr	r3, [r3, #0]
   157c0:	1c5a      	adds	r2, r3, #1
   157c2:	687b      	ldr	r3, [r7, #4]
   157c4:	601a      	str	r2, [r3, #0]
   157c6:	4b26      	ldr	r3, [pc, #152]	; (15860 <parse_array_value+0x19c>)
   157c8:	4798      	blx	r3
   157ca:	0002      	movs	r2, r0
   157cc:	687b      	ldr	r3, [r7, #4]
   157ce:	681b      	ldr	r3, [r3, #0]
   157d0:	781b      	ldrb	r3, [r3, #0]
   157d2:	3301      	adds	r3, #1
   157d4:	18d3      	adds	r3, r2, r3
   157d6:	781b      	ldrb	r3, [r3, #0]
   157d8:	001a      	movs	r2, r3
   157da:	2308      	movs	r3, #8
   157dc:	4013      	ands	r3, r2
   157de:	d1ed      	bne.n	157bc <parse_array_value+0xf8>
    while (**string != '\0') {
   157e0:	687b      	ldr	r3, [r7, #4]
   157e2:	681b      	ldr	r3, [r3, #0]
   157e4:	781b      	ldrb	r3, [r3, #0]
   157e6:	2b00      	cmp	r3, #0
   157e8:	d1a6      	bne.n	15738 <parse_array_value+0x74>
   157ea:	e006      	b.n	157fa <parse_array_value+0x136>
            break;
   157ec:	46c0      	nop			; (mov r8, r8)
    }
    SKIP_WHITESPACES(string);
   157ee:	e004      	b.n	157fa <parse_array_value+0x136>
   157f0:	687b      	ldr	r3, [r7, #4]
   157f2:	681b      	ldr	r3, [r3, #0]
   157f4:	1c5a      	adds	r2, r3, #1
   157f6:	687b      	ldr	r3, [r7, #4]
   157f8:	601a      	str	r2, [r3, #0]
   157fa:	4b19      	ldr	r3, [pc, #100]	; (15860 <parse_array_value+0x19c>)
   157fc:	4798      	blx	r3
   157fe:	0002      	movs	r2, r0
   15800:	687b      	ldr	r3, [r7, #4]
   15802:	681b      	ldr	r3, [r3, #0]
   15804:	781b      	ldrb	r3, [r3, #0]
   15806:	3301      	adds	r3, #1
   15808:	18d3      	adds	r3, r2, r3
   1580a:	781b      	ldrb	r3, [r3, #0]
   1580c:	001a      	movs	r2, r3
   1580e:	2308      	movs	r3, #8
   15810:	4013      	ands	r3, r2
   15812:	d1ed      	bne.n	157f0 <parse_array_value+0x12c>
    if (**string != ']' || /* Trim array after parsing is over */
   15814:	687b      	ldr	r3, [r7, #4]
   15816:	681b      	ldr	r3, [r3, #0]
   15818:	781b      	ldrb	r3, [r3, #0]
   1581a:	2b5d      	cmp	r3, #93	; 0x5d
   1581c:	d10c      	bne.n	15838 <parse_array_value+0x174>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
   1581e:	68fb      	ldr	r3, [r7, #12]
   15820:	0018      	movs	r0, r3
   15822:	4b14      	ldr	r3, [pc, #80]	; (15874 <parse_array_value+0x1b0>)
   15824:	4798      	blx	r3
   15826:	0002      	movs	r2, r0
   15828:	68fb      	ldr	r3, [r7, #12]
   1582a:	0011      	movs	r1, r2
   1582c:	0018      	movs	r0, r3
   1582e:	4b12      	ldr	r3, [pc, #72]	; (15878 <parse_array_value+0x1b4>)
   15830:	4798      	blx	r3
   15832:	0003      	movs	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
   15834:	3301      	adds	r3, #1
   15836:	d105      	bne.n	15844 <parse_array_value+0x180>
            json_value_free(output_value);
   15838:	697b      	ldr	r3, [r7, #20]
   1583a:	0018      	movs	r0, r3
   1583c:	4b0a      	ldr	r3, [pc, #40]	; (15868 <parse_array_value+0x1a4>)
   1583e:	4798      	blx	r3
            return NULL;
   15840:	2300      	movs	r3, #0
   15842:	e005      	b.n	15850 <parse_array_value+0x18c>
    }
    SKIP_CHAR(string);
   15844:	687b      	ldr	r3, [r7, #4]
   15846:	681b      	ldr	r3, [r3, #0]
   15848:	1c5a      	adds	r2, r3, #1
   1584a:	687b      	ldr	r3, [r7, #4]
   1584c:	601a      	str	r2, [r3, #0]
    return output_value;
   1584e:	697b      	ldr	r3, [r7, #20]
}
   15850:	0018      	movs	r0, r3
   15852:	46bd      	mov	sp, r7
   15854:	b006      	add	sp, #24
   15856:	bd80      	pop	{r7, pc}
   15858:	00015d89 	.word	0x00015d89
   1585c:	00015c61 	.word	0x00015c61
   15860:	0001c071 	.word	0x0001c071
   15864:	000153bd 	.word	0x000153bd
   15868:	00015cbd 	.word	0x00015cbd
   1586c:	00014dfd 	.word	0x00014dfd
   15870:	2000015c 	.word	0x2000015c
   15874:	00015bf5 	.word	0x00015bf5
   15878:	00014e71 	.word	0x00014e71

0001587c <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
   1587c:	b580      	push	{r7, lr}
   1587e:	b084      	sub	sp, #16
   15880:	af00      	add	r7, sp, #0
   15882:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
   15884:	2300      	movs	r3, #0
   15886:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
   15888:	687b      	ldr	r3, [r7, #4]
   1588a:	0018      	movs	r0, r3
   1588c:	4b0e      	ldr	r3, [pc, #56]	; (158c8 <parse_string_value+0x4c>)
   1588e:	4798      	blx	r3
   15890:	0003      	movs	r3, r0
   15892:	60bb      	str	r3, [r7, #8]
    if (new_string == NULL)
   15894:	68bb      	ldr	r3, [r7, #8]
   15896:	2b00      	cmp	r3, #0
   15898:	d101      	bne.n	1589e <parse_string_value+0x22>
        return NULL;
   1589a:	2300      	movs	r3, #0
   1589c:	e010      	b.n	158c0 <parse_string_value+0x44>
    value = json_value_init_string_no_copy(new_string);
   1589e:	68bb      	ldr	r3, [r7, #8]
   158a0:	0018      	movs	r0, r3
   158a2:	4b0a      	ldr	r3, [pc, #40]	; (158cc <parse_string_value+0x50>)
   158a4:	4798      	blx	r3
   158a6:	0003      	movs	r3, r0
   158a8:	60fb      	str	r3, [r7, #12]
    if (value == NULL) {
   158aa:	68fb      	ldr	r3, [r7, #12]
   158ac:	2b00      	cmp	r3, #0
   158ae:	d106      	bne.n	158be <parse_string_value+0x42>
        parson_free(new_string);
   158b0:	4b07      	ldr	r3, [pc, #28]	; (158d0 <parse_string_value+0x54>)
   158b2:	681b      	ldr	r3, [r3, #0]
   158b4:	68ba      	ldr	r2, [r7, #8]
   158b6:	0010      	movs	r0, r2
   158b8:	4798      	blx	r3
        return NULL;
   158ba:	2300      	movs	r3, #0
   158bc:	e000      	b.n	158c0 <parse_string_value+0x44>
    }
    return value;
   158be:	68fb      	ldr	r3, [r7, #12]
}
   158c0:	0018      	movs	r0, r3
   158c2:	46bd      	mov	sp, r7
   158c4:	b004      	add	sp, #16
   158c6:	bd80      	pop	{r7, pc}
   158c8:	00015365 	.word	0x00015365
   158cc:	00014f4d 	.word	0x00014f4d
   158d0:	2000015c 	.word	0x2000015c

000158d4 <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
   158d4:	b580      	push	{r7, lr}
   158d6:	b084      	sub	sp, #16
   158d8:	af00      	add	r7, sp, #0
   158da:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
   158dc:	2304      	movs	r3, #4
   158de:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
   158e0:	2305      	movs	r3, #5
   158e2:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
   158e4:	687b      	ldr	r3, [r7, #4]
   158e6:	6819      	ldr	r1, [r3, #0]
   158e8:	68fa      	ldr	r2, [r7, #12]
   158ea:	4b15      	ldr	r3, [pc, #84]	; (15940 <parse_boolean_value+0x6c>)
   158ec:	0018      	movs	r0, r3
   158ee:	4b15      	ldr	r3, [pc, #84]	; (15944 <parse_boolean_value+0x70>)
   158f0:	4798      	blx	r3
   158f2:	1e03      	subs	r3, r0, #0
   158f4:	d10a      	bne.n	1590c <parse_boolean_value+0x38>
        *string += true_token_size;
   158f6:	687b      	ldr	r3, [r7, #4]
   158f8:	681a      	ldr	r2, [r3, #0]
   158fa:	68fb      	ldr	r3, [r7, #12]
   158fc:	18d2      	adds	r2, r2, r3
   158fe:	687b      	ldr	r3, [r7, #4]
   15900:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
   15902:	2001      	movs	r0, #1
   15904:	4b10      	ldr	r3, [pc, #64]	; (15948 <parse_boolean_value+0x74>)
   15906:	4798      	blx	r3
   15908:	0003      	movs	r3, r0
   1590a:	e014      	b.n	15936 <parse_boolean_value+0x62>
    } else if (strncmp("false", *string, false_token_size) == 0) {
   1590c:	687b      	ldr	r3, [r7, #4]
   1590e:	6819      	ldr	r1, [r3, #0]
   15910:	68ba      	ldr	r2, [r7, #8]
   15912:	4b0e      	ldr	r3, [pc, #56]	; (1594c <parse_boolean_value+0x78>)
   15914:	0018      	movs	r0, r3
   15916:	4b0b      	ldr	r3, [pc, #44]	; (15944 <parse_boolean_value+0x70>)
   15918:	4798      	blx	r3
   1591a:	1e03      	subs	r3, r0, #0
   1591c:	d10a      	bne.n	15934 <parse_boolean_value+0x60>
        *string += false_token_size;
   1591e:	687b      	ldr	r3, [r7, #4]
   15920:	681a      	ldr	r2, [r3, #0]
   15922:	68bb      	ldr	r3, [r7, #8]
   15924:	18d2      	adds	r2, r2, r3
   15926:	687b      	ldr	r3, [r7, #4]
   15928:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
   1592a:	2000      	movs	r0, #0
   1592c:	4b06      	ldr	r3, [pc, #24]	; (15948 <parse_boolean_value+0x74>)
   1592e:	4798      	blx	r3
   15930:	0003      	movs	r3, r0
   15932:	e000      	b.n	15936 <parse_boolean_value+0x62>
    }
    return NULL;
   15934:	2300      	movs	r3, #0
}
   15936:	0018      	movs	r0, r3
   15938:	46bd      	mov	sp, r7
   1593a:	b004      	add	sp, #16
   1593c:	bd80      	pop	{r7, pc}
   1593e:	46c0      	nop			; (mov r8, r8)
   15940:	000210a0 	.word	0x000210a0
   15944:	0001c7e1 	.word	0x0001c7e1
   15948:	00015e21 	.word	0x00015e21
   1594c:	000210a8 	.word	0x000210a8

00015950 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
   15950:	b590      	push	{r4, r7, lr}
   15952:	b089      	sub	sp, #36	; 0x24
   15954:	af00      	add	r7, sp, #0
   15956:	6078      	str	r0, [r7, #4]
    char *end;
    double number = strtod(*string, &end);
   15958:	687b      	ldr	r3, [r7, #4]
   1595a:	681b      	ldr	r3, [r3, #0]
   1595c:	220c      	movs	r2, #12
   1595e:	18ba      	adds	r2, r7, r2
   15960:	0011      	movs	r1, r2
   15962:	0018      	movs	r0, r3
   15964:	4b12      	ldr	r3, [pc, #72]	; (159b0 <parse_number_value+0x60>)
   15966:	4798      	blx	r3
   15968:	0003      	movs	r3, r0
   1596a:	000c      	movs	r4, r1
   1596c:	613b      	str	r3, [r7, #16]
   1596e:	617c      	str	r4, [r7, #20]
    JSON_Value *output_value;
    if (is_decimal(*string, end - *string)) {
   15970:	687b      	ldr	r3, [r7, #4]
   15972:	681a      	ldr	r2, [r3, #0]
   15974:	68fb      	ldr	r3, [r7, #12]
   15976:	0019      	movs	r1, r3
   15978:	687b      	ldr	r3, [r7, #4]
   1597a:	681b      	ldr	r3, [r3, #0]
   1597c:	1acb      	subs	r3, r1, r3
   1597e:	0019      	movs	r1, r3
   15980:	0010      	movs	r0, r2
   15982:	4b0c      	ldr	r3, [pc, #48]	; (159b4 <parse_number_value+0x64>)
   15984:	4798      	blx	r3
   15986:	1e03      	subs	r3, r0, #0
   15988:	d00b      	beq.n	159a2 <parse_number_value+0x52>
        *string = end;
   1598a:	68fa      	ldr	r2, [r7, #12]
   1598c:	687b      	ldr	r3, [r7, #4]
   1598e:	601a      	str	r2, [r3, #0]
        output_value = json_value_init_number(number);
   15990:	693b      	ldr	r3, [r7, #16]
   15992:	697c      	ldr	r4, [r7, #20]
   15994:	0018      	movs	r0, r3
   15996:	0021      	movs	r1, r4
   15998:	4b07      	ldr	r3, [pc, #28]	; (159b8 <parse_number_value+0x68>)
   1599a:	4798      	blx	r3
   1599c:	0003      	movs	r3, r0
   1599e:	61fb      	str	r3, [r7, #28]
   159a0:	e001      	b.n	159a6 <parse_number_value+0x56>
    } else {
        output_value = NULL;
   159a2:	2300      	movs	r3, #0
   159a4:	61fb      	str	r3, [r7, #28]
    }
    return output_value;
   159a6:	69fb      	ldr	r3, [r7, #28]
}
   159a8:	0018      	movs	r0, r3
   159aa:	46bd      	mov	sp, r7
   159ac:	b009      	add	sp, #36	; 0x24
   159ae:	bd90      	pop	{r4, r7, pc}
   159b0:	0001d46d 	.word	0x0001d46d
   159b4:	00014a19 	.word	0x00014a19
   159b8:	00015de1 	.word	0x00015de1

000159bc <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
   159bc:	b580      	push	{r7, lr}
   159be:	b084      	sub	sp, #16
   159c0:	af00      	add	r7, sp, #0
   159c2:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
   159c4:	2304      	movs	r3, #4
   159c6:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
   159c8:	687b      	ldr	r3, [r7, #4]
   159ca:	6819      	ldr	r1, [r3, #0]
   159cc:	68fa      	ldr	r2, [r7, #12]
   159ce:	4b0a      	ldr	r3, [pc, #40]	; (159f8 <parse_null_value+0x3c>)
   159d0:	0018      	movs	r0, r3
   159d2:	4b0a      	ldr	r3, [pc, #40]	; (159fc <parse_null_value+0x40>)
   159d4:	4798      	blx	r3
   159d6:	1e03      	subs	r3, r0, #0
   159d8:	d109      	bne.n	159ee <parse_null_value+0x32>
        *string += token_size;
   159da:	687b      	ldr	r3, [r7, #4]
   159dc:	681a      	ldr	r2, [r3, #0]
   159de:	68fb      	ldr	r3, [r7, #12]
   159e0:	18d2      	adds	r2, r2, r3
   159e2:	687b      	ldr	r3, [r7, #4]
   159e4:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
   159e6:	4b06      	ldr	r3, [pc, #24]	; (15a00 <parse_null_value+0x44>)
   159e8:	4798      	blx	r3
   159ea:	0003      	movs	r3, r0
   159ec:	e000      	b.n	159f0 <parse_null_value+0x34>
    }
    return NULL;
   159ee:	2300      	movs	r3, #0
}
   159f0:	0018      	movs	r0, r3
   159f2:	46bd      	mov	sp, r7
   159f4:	b004      	add	sp, #16
   159f6:	bd80      	pop	{r7, pc}
   159f8:	000210b0 	.word	0x000210b0
   159fc:	0001c7e1 	.word	0x0001c7e1
   15a00:	00015e61 	.word	0x00015e61

00015a04 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
   15a04:	b580      	push	{r7, lr}
   15a06:	b082      	sub	sp, #8
   15a08:	af00      	add	r7, sp, #0
   15a0a:	6078      	str	r0, [r7, #4]
    if (string == NULL)
   15a0c:	687b      	ldr	r3, [r7, #4]
   15a0e:	2b00      	cmp	r3, #0
   15a10:	d104      	bne.n	15a1c <json_parse_string+0x18>
        return NULL;
   15a12:	2300      	movs	r3, #0
   15a14:	e01e      	b.n	15a54 <json_parse_string+0x50>
    SKIP_WHITESPACES(&string);
   15a16:	687b      	ldr	r3, [r7, #4]
   15a18:	3301      	adds	r3, #1
   15a1a:	607b      	str	r3, [r7, #4]
   15a1c:	4b0f      	ldr	r3, [pc, #60]	; (15a5c <json_parse_string+0x58>)
   15a1e:	4798      	blx	r3
   15a20:	0002      	movs	r2, r0
   15a22:	687b      	ldr	r3, [r7, #4]
   15a24:	781b      	ldrb	r3, [r3, #0]
   15a26:	3301      	adds	r3, #1
   15a28:	18d3      	adds	r3, r2, r3
   15a2a:	781b      	ldrb	r3, [r3, #0]
   15a2c:	001a      	movs	r2, r3
   15a2e:	2308      	movs	r3, #8
   15a30:	4013      	ands	r3, r2
   15a32:	d1f0      	bne.n	15a16 <json_parse_string+0x12>
    if (*string != '{' && *string != '[')
   15a34:	687b      	ldr	r3, [r7, #4]
   15a36:	781b      	ldrb	r3, [r3, #0]
   15a38:	2b7b      	cmp	r3, #123	; 0x7b
   15a3a:	d005      	beq.n	15a48 <json_parse_string+0x44>
   15a3c:	687b      	ldr	r3, [r7, #4]
   15a3e:	781b      	ldrb	r3, [r3, #0]
   15a40:	2b5b      	cmp	r3, #91	; 0x5b
   15a42:	d001      	beq.n	15a48 <json_parse_string+0x44>
        return NULL;
   15a44:	2300      	movs	r3, #0
   15a46:	e005      	b.n	15a54 <json_parse_string+0x50>
    return parse_value((const char**)&string, 0);
   15a48:	1d3b      	adds	r3, r7, #4
   15a4a:	2100      	movs	r1, #0
   15a4c:	0018      	movs	r0, r3
   15a4e:	4b04      	ldr	r3, [pc, #16]	; (15a60 <json_parse_string+0x5c>)
   15a50:	4798      	blx	r3
   15a52:	0003      	movs	r3, r0
}
   15a54:	0018      	movs	r0, r3
   15a56:	46bd      	mov	sp, r7
   15a58:	b002      	add	sp, #8
   15a5a:	bd80      	pop	{r7, pc}
   15a5c:	0001c071 	.word	0x0001c071
   15a60:	000153bd 	.word	0x000153bd

00015a64 <json_object_get_value>:
}


/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
   15a64:	b580      	push	{r7, lr}
   15a66:	b082      	sub	sp, #8
   15a68:	af00      	add	r7, sp, #0
   15a6a:	6078      	str	r0, [r7, #4]
   15a6c:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL)
   15a6e:	687b      	ldr	r3, [r7, #4]
   15a70:	2b00      	cmp	r3, #0
   15a72:	d002      	beq.n	15a7a <json_object_get_value+0x16>
   15a74:	683b      	ldr	r3, [r7, #0]
   15a76:	2b00      	cmp	r3, #0
   15a78:	d101      	bne.n	15a7e <json_object_get_value+0x1a>
        return NULL;
   15a7a:	2300      	movs	r3, #0
   15a7c:	e00a      	b.n	15a94 <json_object_get_value+0x30>
    return json_object_nget_value(object, name, strlen(name));
   15a7e:	683b      	ldr	r3, [r7, #0]
   15a80:	0018      	movs	r0, r3
   15a82:	4b06      	ldr	r3, [pc, #24]	; (15a9c <json_object_get_value+0x38>)
   15a84:	4798      	blx	r3
   15a86:	0002      	movs	r2, r0
   15a88:	6839      	ldr	r1, [r7, #0]
   15a8a:	687b      	ldr	r3, [r7, #4]
   15a8c:	0018      	movs	r0, r3
   15a8e:	4b04      	ldr	r3, [pc, #16]	; (15aa0 <json_object_get_value+0x3c>)
   15a90:	4798      	blx	r3
   15a92:	0003      	movs	r3, r0
}
   15a94:	0018      	movs	r0, r3
   15a96:	46bd      	mov	sp, r7
   15a98:	b002      	add	sp, #8
   15a9a:	bd80      	pop	{r7, pc}
   15a9c:	0001c7d3 	.word	0x0001c7d3
   15aa0:	00014cc5 	.word	0x00014cc5

00015aa4 <json_object_get_number>:

const char * json_object_get_string(const JSON_Object *object, const char *name) {
    return json_value_get_string(json_object_get_value(object, name));
}

double json_object_get_number(const JSON_Object *object, const char *name) {
   15aa4:	b590      	push	{r4, r7, lr}
   15aa6:	b083      	sub	sp, #12
   15aa8:	af00      	add	r7, sp, #0
   15aaa:	6078      	str	r0, [r7, #4]
   15aac:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_get_value(object, name));
   15aae:	683a      	ldr	r2, [r7, #0]
   15ab0:	687b      	ldr	r3, [r7, #4]
   15ab2:	0011      	movs	r1, r2
   15ab4:	0018      	movs	r0, r3
   15ab6:	4b06      	ldr	r3, [pc, #24]	; (15ad0 <json_object_get_number+0x2c>)
   15ab8:	4798      	blx	r3
   15aba:	0003      	movs	r3, r0
   15abc:	0018      	movs	r0, r3
   15abe:	4b05      	ldr	r3, [pc, #20]	; (15ad4 <json_object_get_number+0x30>)
   15ac0:	4798      	blx	r3
   15ac2:	0003      	movs	r3, r0
   15ac4:	000c      	movs	r4, r1
}
   15ac6:	0018      	movs	r0, r3
   15ac8:	0021      	movs	r1, r4
   15aca:	46bd      	mov	sp, r7
   15acc:	b003      	add	sp, #12
   15ace:	bd90      	pop	{r4, r7, pc}
   15ad0:	00015a65 	.word	0x00015a65
   15ad4:	00015c8d 	.word	0x00015c8d

00015ad8 <json_object_get_object>:

JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {
   15ad8:	b580      	push	{r7, lr}
   15ada:	b082      	sub	sp, #8
   15adc:	af00      	add	r7, sp, #0
   15ade:	6078      	str	r0, [r7, #4]
   15ae0:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_object_get_value(object, name));
   15ae2:	683a      	ldr	r2, [r7, #0]
   15ae4:	687b      	ldr	r3, [r7, #4]
   15ae6:	0011      	movs	r1, r2
   15ae8:	0018      	movs	r0, r3
   15aea:	4b05      	ldr	r3, [pc, #20]	; (15b00 <json_object_get_object+0x28>)
   15aec:	4798      	blx	r3
   15aee:	0003      	movs	r3, r0
   15af0:	0018      	movs	r0, r3
   15af2:	4b04      	ldr	r3, [pc, #16]	; (15b04 <json_object_get_object+0x2c>)
   15af4:	4798      	blx	r3
   15af6:	0003      	movs	r3, r0
}
   15af8:	0018      	movs	r0, r3
   15afa:	46bd      	mov	sp, r7
   15afc:	b002      	add	sp, #8
   15afe:	bd80      	pop	{r7, pc}
   15b00:	00015a65 	.word	0x00015a65
   15b04:	00015c35 	.word	0x00015c35

00015b08 <json_object_get_array>:

JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {
   15b08:	b580      	push	{r7, lr}
   15b0a:	b082      	sub	sp, #8
   15b0c:	af00      	add	r7, sp, #0
   15b0e:	6078      	str	r0, [r7, #4]
   15b10:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_get_value(object, name));
   15b12:	683a      	ldr	r2, [r7, #0]
   15b14:	687b      	ldr	r3, [r7, #4]
   15b16:	0011      	movs	r1, r2
   15b18:	0018      	movs	r0, r3
   15b1a:	4b05      	ldr	r3, [pc, #20]	; (15b30 <json_object_get_array+0x28>)
   15b1c:	4798      	blx	r3
   15b1e:	0003      	movs	r3, r0
   15b20:	0018      	movs	r0, r3
   15b22:	4b04      	ldr	r3, [pc, #16]	; (15b34 <json_object_get_array+0x2c>)
   15b24:	4798      	blx	r3
   15b26:	0003      	movs	r3, r0
}
   15b28:	0018      	movs	r0, r3
   15b2a:	46bd      	mov	sp, r7
   15b2c:	b002      	add	sp, #8
   15b2e:	bd80      	pop	{r7, pc}
   15b30:	00015a65 	.word	0x00015a65
   15b34:	00015c61 	.word	0x00015c61

00015b38 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
   15b38:	b580      	push	{r7, lr}
   15b3a:	b082      	sub	sp, #8
   15b3c:	af00      	add	r7, sp, #0
   15b3e:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
   15b40:	687b      	ldr	r3, [r7, #4]
   15b42:	2b00      	cmp	r3, #0
   15b44:	d002      	beq.n	15b4c <json_object_get_count+0x14>
   15b46:	687b      	ldr	r3, [r7, #4]
   15b48:	689b      	ldr	r3, [r3, #8]
   15b4a:	e000      	b.n	15b4e <json_object_get_count+0x16>
   15b4c:	2300      	movs	r3, #0
}
   15b4e:	0018      	movs	r0, r3
   15b50:	46bd      	mov	sp, r7
   15b52:	b002      	add	sp, #8
   15b54:	bd80      	pop	{r7, pc}
	...

00015b58 <json_array_get_value>:
        return NULL;
    return object->names[index];
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
   15b58:	b580      	push	{r7, lr}
   15b5a:	b082      	sub	sp, #8
   15b5c:	af00      	add	r7, sp, #0
   15b5e:	6078      	str	r0, [r7, #4]
   15b60:	6039      	str	r1, [r7, #0]
    if (index >= json_array_get_count(array))
   15b62:	687b      	ldr	r3, [r7, #4]
   15b64:	0018      	movs	r0, r3
   15b66:	4b09      	ldr	r3, [pc, #36]	; (15b8c <json_array_get_value+0x34>)
   15b68:	4798      	blx	r3
   15b6a:	0002      	movs	r2, r0
   15b6c:	683b      	ldr	r3, [r7, #0]
   15b6e:	429a      	cmp	r2, r3
   15b70:	d801      	bhi.n	15b76 <json_array_get_value+0x1e>
        return NULL;
   15b72:	2300      	movs	r3, #0
   15b74:	e005      	b.n	15b82 <json_array_get_value+0x2a>
    return array->items[index];
   15b76:	687b      	ldr	r3, [r7, #4]
   15b78:	681a      	ldr	r2, [r3, #0]
   15b7a:	683b      	ldr	r3, [r7, #0]
   15b7c:	009b      	lsls	r3, r3, #2
   15b7e:	18d3      	adds	r3, r2, r3
   15b80:	681b      	ldr	r3, [r3, #0]
}
   15b82:	0018      	movs	r0, r3
   15b84:	46bd      	mov	sp, r7
   15b86:	b002      	add	sp, #8
   15b88:	bd80      	pop	{r7, pc}
   15b8a:	46c0      	nop			; (mov r8, r8)
   15b8c:	00015bf5 	.word	0x00015bf5

00015b90 <json_array_get_number>:

const char * json_array_get_string(const JSON_Array *array, size_t index) {
    return json_value_get_string(json_array_get_value(array, index));
}

double json_array_get_number(const JSON_Array *array, size_t index) {
   15b90:	b590      	push	{r4, r7, lr}
   15b92:	b083      	sub	sp, #12
   15b94:	af00      	add	r7, sp, #0
   15b96:	6078      	str	r0, [r7, #4]
   15b98:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_array_get_value(array, index));
   15b9a:	683a      	ldr	r2, [r7, #0]
   15b9c:	687b      	ldr	r3, [r7, #4]
   15b9e:	0011      	movs	r1, r2
   15ba0:	0018      	movs	r0, r3
   15ba2:	4b06      	ldr	r3, [pc, #24]	; (15bbc <json_array_get_number+0x2c>)
   15ba4:	4798      	blx	r3
   15ba6:	0003      	movs	r3, r0
   15ba8:	0018      	movs	r0, r3
   15baa:	4b05      	ldr	r3, [pc, #20]	; (15bc0 <json_array_get_number+0x30>)
   15bac:	4798      	blx	r3
   15bae:	0003      	movs	r3, r0
   15bb0:	000c      	movs	r4, r1
}
   15bb2:	0018      	movs	r0, r3
   15bb4:	0021      	movs	r1, r4
   15bb6:	46bd      	mov	sp, r7
   15bb8:	b003      	add	sp, #12
   15bba:	bd90      	pop	{r4, r7, pc}
   15bbc:	00015b59 	.word	0x00015b59
   15bc0:	00015c8d 	.word	0x00015c8d

00015bc4 <json_array_get_array>:

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
    return json_value_get_object(json_array_get_value(array, index));
}

JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {
   15bc4:	b580      	push	{r7, lr}
   15bc6:	b082      	sub	sp, #8
   15bc8:	af00      	add	r7, sp, #0
   15bca:	6078      	str	r0, [r7, #4]
   15bcc:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_array_get_value(array, index));
   15bce:	683a      	ldr	r2, [r7, #0]
   15bd0:	687b      	ldr	r3, [r7, #4]
   15bd2:	0011      	movs	r1, r2
   15bd4:	0018      	movs	r0, r3
   15bd6:	4b05      	ldr	r3, [pc, #20]	; (15bec <json_array_get_array+0x28>)
   15bd8:	4798      	blx	r3
   15bda:	0003      	movs	r3, r0
   15bdc:	0018      	movs	r0, r3
   15bde:	4b04      	ldr	r3, [pc, #16]	; (15bf0 <json_array_get_array+0x2c>)
   15be0:	4798      	blx	r3
   15be2:	0003      	movs	r3, r0
}
   15be4:	0018      	movs	r0, r3
   15be6:	46bd      	mov	sp, r7
   15be8:	b002      	add	sp, #8
   15bea:	bd80      	pop	{r7, pc}
   15bec:	00015b59 	.word	0x00015b59
   15bf0:	00015c61 	.word	0x00015c61

00015bf4 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
   15bf4:	b580      	push	{r7, lr}
   15bf6:	b082      	sub	sp, #8
   15bf8:	af00      	add	r7, sp, #0
   15bfa:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
   15bfc:	687b      	ldr	r3, [r7, #4]
   15bfe:	2b00      	cmp	r3, #0
   15c00:	d002      	beq.n	15c08 <json_array_get_count+0x14>
   15c02:	687b      	ldr	r3, [r7, #4]
   15c04:	685b      	ldr	r3, [r3, #4]
   15c06:	e000      	b.n	15c0a <json_array_get_count+0x16>
   15c08:	2300      	movs	r3, #0
}
   15c0a:	0018      	movs	r0, r3
   15c0c:	46bd      	mov	sp, r7
   15c0e:	b002      	add	sp, #8
   15c10:	bd80      	pop	{r7, pc}

00015c12 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
   15c12:	b580      	push	{r7, lr}
   15c14:	b082      	sub	sp, #8
   15c16:	af00      	add	r7, sp, #0
   15c18:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
   15c1a:	687b      	ldr	r3, [r7, #4]
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d002      	beq.n	15c26 <json_value_get_type+0x14>
   15c20:	687b      	ldr	r3, [r7, #4]
   15c22:	681b      	ldr	r3, [r3, #0]
   15c24:	e001      	b.n	15c2a <json_value_get_type+0x18>
   15c26:	2301      	movs	r3, #1
   15c28:	425b      	negs	r3, r3
}
   15c2a:	0018      	movs	r0, r3
   15c2c:	46bd      	mov	sp, r7
   15c2e:	b002      	add	sp, #8
   15c30:	bd80      	pop	{r7, pc}
	...

00015c34 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
   15c34:	b580      	push	{r7, lr}
   15c36:	b082      	sub	sp, #8
   15c38:	af00      	add	r7, sp, #0
   15c3a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
   15c3c:	687b      	ldr	r3, [r7, #4]
   15c3e:	0018      	movs	r0, r3
   15c40:	4b06      	ldr	r3, [pc, #24]	; (15c5c <json_value_get_object+0x28>)
   15c42:	4798      	blx	r3
   15c44:	0003      	movs	r3, r0
   15c46:	2b04      	cmp	r3, #4
   15c48:	d102      	bne.n	15c50 <json_value_get_object+0x1c>
   15c4a:	687b      	ldr	r3, [r7, #4]
   15c4c:	689b      	ldr	r3, [r3, #8]
   15c4e:	e000      	b.n	15c52 <json_value_get_object+0x1e>
   15c50:	2300      	movs	r3, #0
}
   15c52:	0018      	movs	r0, r3
   15c54:	46bd      	mov	sp, r7
   15c56:	b002      	add	sp, #8
   15c58:	bd80      	pop	{r7, pc}
   15c5a:	46c0      	nop			; (mov r8, r8)
   15c5c:	00015c13 	.word	0x00015c13

00015c60 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
   15c60:	b580      	push	{r7, lr}
   15c62:	b082      	sub	sp, #8
   15c64:	af00      	add	r7, sp, #0
   15c66:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
   15c68:	687b      	ldr	r3, [r7, #4]
   15c6a:	0018      	movs	r0, r3
   15c6c:	4b06      	ldr	r3, [pc, #24]	; (15c88 <json_value_get_array+0x28>)
   15c6e:	4798      	blx	r3
   15c70:	0003      	movs	r3, r0
   15c72:	2b05      	cmp	r3, #5
   15c74:	d102      	bne.n	15c7c <json_value_get_array+0x1c>
   15c76:	687b      	ldr	r3, [r7, #4]
   15c78:	689b      	ldr	r3, [r3, #8]
   15c7a:	e000      	b.n	15c7e <json_value_get_array+0x1e>
   15c7c:	2300      	movs	r3, #0
}
   15c7e:	0018      	movs	r0, r3
   15c80:	46bd      	mov	sp, r7
   15c82:	b002      	add	sp, #8
   15c84:	bd80      	pop	{r7, pc}
   15c86:	46c0      	nop			; (mov r8, r8)
   15c88:	00015c13 	.word	0x00015c13

00015c8c <json_value_get_number>:

const char * json_value_get_string(const JSON_Value *value) {
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
}

double json_value_get_number(const JSON_Value *value) {
   15c8c:	b590      	push	{r4, r7, lr}
   15c8e:	b083      	sub	sp, #12
   15c90:	af00      	add	r7, sp, #0
   15c92:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
   15c94:	687b      	ldr	r3, [r7, #4]
   15c96:	0018      	movs	r0, r3
   15c98:	4b07      	ldr	r3, [pc, #28]	; (15cb8 <json_value_get_number+0x2c>)
   15c9a:	4798      	blx	r3
   15c9c:	0003      	movs	r3, r0
   15c9e:	2b03      	cmp	r3, #3
   15ca0:	d103      	bne.n	15caa <json_value_get_number+0x1e>
   15ca2:	687b      	ldr	r3, [r7, #4]
   15ca4:	68dc      	ldr	r4, [r3, #12]
   15ca6:	689b      	ldr	r3, [r3, #8]
   15ca8:	e001      	b.n	15cae <json_value_get_number+0x22>
   15caa:	2300      	movs	r3, #0
   15cac:	2400      	movs	r4, #0
}
   15cae:	0018      	movs	r0, r3
   15cb0:	0021      	movs	r1, r4
   15cb2:	46bd      	mov	sp, r7
   15cb4:	b003      	add	sp, #12
   15cb6:	bd90      	pop	{r4, r7, pc}
   15cb8:	00015c13 	.word	0x00015c13

00015cbc <json_value_free>:

int json_value_get_boolean(const JSON_Value *value) {
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
}

void json_value_free(JSON_Value *value) {
   15cbc:	b580      	push	{r7, lr}
   15cbe:	b082      	sub	sp, #8
   15cc0:	af00      	add	r7, sp, #0
   15cc2:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	0018      	movs	r0, r3
   15cc8:	4b15      	ldr	r3, [pc, #84]	; (15d20 <json_value_free+0x64>)
   15cca:	4798      	blx	r3
   15ccc:	0003      	movs	r3, r0
   15cce:	2b04      	cmp	r3, #4
   15cd0:	d004      	beq.n	15cdc <json_value_free+0x20>
   15cd2:	2b05      	cmp	r3, #5
   15cd4:	d013      	beq.n	15cfe <json_value_free+0x42>
   15cd6:	2b02      	cmp	r3, #2
   15cd8:	d006      	beq.n	15ce8 <json_value_free+0x2c>
            break;
        case JSONArray:
            json_array_free(value->value.array);
            break;
        default:
            break;
   15cda:	e017      	b.n	15d0c <json_value_free+0x50>
            json_object_free(value->value.object);
   15cdc:	687b      	ldr	r3, [r7, #4]
   15cde:	689b      	ldr	r3, [r3, #8]
   15ce0:	0018      	movs	r0, r3
   15ce2:	4b10      	ldr	r3, [pc, #64]	; (15d24 <json_value_free+0x68>)
   15ce4:	4798      	blx	r3
            break;
   15ce6:	e011      	b.n	15d0c <json_value_free+0x50>
            if (value->value.string) { parson_free(value->value.string); }
   15ce8:	687b      	ldr	r3, [r7, #4]
   15cea:	689b      	ldr	r3, [r3, #8]
   15cec:	2b00      	cmp	r3, #0
   15cee:	d00c      	beq.n	15d0a <json_value_free+0x4e>
   15cf0:	4b0d      	ldr	r3, [pc, #52]	; (15d28 <json_value_free+0x6c>)
   15cf2:	681a      	ldr	r2, [r3, #0]
   15cf4:	687b      	ldr	r3, [r7, #4]
   15cf6:	689b      	ldr	r3, [r3, #8]
   15cf8:	0018      	movs	r0, r3
   15cfa:	4790      	blx	r2
            break;
   15cfc:	e005      	b.n	15d0a <json_value_free+0x4e>
            json_array_free(value->value.array);
   15cfe:	687b      	ldr	r3, [r7, #4]
   15d00:	689b      	ldr	r3, [r3, #8]
   15d02:	0018      	movs	r0, r3
   15d04:	4b09      	ldr	r3, [pc, #36]	; (15d2c <json_value_free+0x70>)
   15d06:	4798      	blx	r3
            break;
   15d08:	e000      	b.n	15d0c <json_value_free+0x50>
            break;
   15d0a:	46c0      	nop			; (mov r8, r8)
    }
    parson_free(value);
   15d0c:	4b06      	ldr	r3, [pc, #24]	; (15d28 <json_value_free+0x6c>)
   15d0e:	681b      	ldr	r3, [r3, #0]
   15d10:	687a      	ldr	r2, [r7, #4]
   15d12:	0010      	movs	r0, r2
   15d14:	4798      	blx	r3
}
   15d16:	46c0      	nop			; (mov r8, r8)
   15d18:	46bd      	mov	sp, r7
   15d1a:	b002      	add	sp, #8
   15d1c:	bd80      	pop	{r7, pc}
   15d1e:	46c0      	nop			; (mov r8, r8)
   15d20:	00015c13 	.word	0x00015c13
   15d24:	00014d4d 	.word	0x00014d4d
   15d28:	2000015c 	.word	0x2000015c
   15d2c:	00014ef9 	.word	0x00014ef9

00015d30 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
   15d30:	b580      	push	{r7, lr}
   15d32:	b082      	sub	sp, #8
   15d34:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15d36:	4b11      	ldr	r3, [pc, #68]	; (15d7c <json_value_init_object+0x4c>)
   15d38:	681b      	ldr	r3, [r3, #0]
   15d3a:	2010      	movs	r0, #16
   15d3c:	4798      	blx	r3
   15d3e:	0003      	movs	r3, r0
   15d40:	607b      	str	r3, [r7, #4]
    if (!new_value)
   15d42:	687b      	ldr	r3, [r7, #4]
   15d44:	2b00      	cmp	r3, #0
   15d46:	d101      	bne.n	15d4c <json_value_init_object+0x1c>
        return NULL;
   15d48:	2300      	movs	r3, #0
   15d4a:	e013      	b.n	15d74 <json_value_init_object+0x44>
    new_value->type = JSONObject;
   15d4c:	687b      	ldr	r3, [r7, #4]
   15d4e:	2204      	movs	r2, #4
   15d50:	601a      	str	r2, [r3, #0]
    new_value->value.object = json_object_init();
   15d52:	4b0b      	ldr	r3, [pc, #44]	; (15d80 <json_value_init_object+0x50>)
   15d54:	4798      	blx	r3
   15d56:	0002      	movs	r2, r0
   15d58:	687b      	ldr	r3, [r7, #4]
   15d5a:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
   15d5c:	687b      	ldr	r3, [r7, #4]
   15d5e:	689b      	ldr	r3, [r3, #8]
   15d60:	2b00      	cmp	r3, #0
   15d62:	d106      	bne.n	15d72 <json_value_init_object+0x42>
        parson_free(new_value);
   15d64:	4b07      	ldr	r3, [pc, #28]	; (15d84 <json_value_init_object+0x54>)
   15d66:	681b      	ldr	r3, [r3, #0]
   15d68:	687a      	ldr	r2, [r7, #4]
   15d6a:	0010      	movs	r0, r2
   15d6c:	4798      	blx	r3
        return NULL;
   15d6e:	2300      	movs	r3, #0
   15d70:	e000      	b.n	15d74 <json_value_init_object+0x44>
    }
    return new_value;
   15d72:	687b      	ldr	r3, [r7, #4]
}
   15d74:	0018      	movs	r0, r3
   15d76:	46bd      	mov	sp, r7
   15d78:	b002      	add	sp, #8
   15d7a:	bd80      	pop	{r7, pc}
   15d7c:	20000158 	.word	0x20000158
   15d80:	00014aa5 	.word	0x00014aa5
   15d84:	2000015c 	.word	0x2000015c

00015d88 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
   15d88:	b580      	push	{r7, lr}
   15d8a:	b082      	sub	sp, #8
   15d8c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15d8e:	4b11      	ldr	r3, [pc, #68]	; (15dd4 <json_value_init_array+0x4c>)
   15d90:	681b      	ldr	r3, [r3, #0]
   15d92:	2010      	movs	r0, #16
   15d94:	4798      	blx	r3
   15d96:	0003      	movs	r3, r0
   15d98:	607b      	str	r3, [r7, #4]
    if (!new_value)
   15d9a:	687b      	ldr	r3, [r7, #4]
   15d9c:	2b00      	cmp	r3, #0
   15d9e:	d101      	bne.n	15da4 <json_value_init_array+0x1c>
        return NULL;
   15da0:	2300      	movs	r3, #0
   15da2:	e013      	b.n	15dcc <json_value_init_array+0x44>
    new_value->type = JSONArray;
   15da4:	687b      	ldr	r3, [r7, #4]
   15da6:	2205      	movs	r2, #5
   15da8:	601a      	str	r2, [r3, #0]
    new_value->value.array = json_array_init();
   15daa:	4b0b      	ldr	r3, [pc, #44]	; (15dd8 <json_value_init_array+0x50>)
   15dac:	4798      	blx	r3
   15dae:	0002      	movs	r2, r0
   15db0:	687b      	ldr	r3, [r7, #4]
   15db2:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
   15db4:	687b      	ldr	r3, [r7, #4]
   15db6:	689b      	ldr	r3, [r3, #8]
   15db8:	2b00      	cmp	r3, #0
   15dba:	d106      	bne.n	15dca <json_value_init_array+0x42>
        parson_free(new_value);
   15dbc:	4b07      	ldr	r3, [pc, #28]	; (15ddc <json_value_init_array+0x54>)
   15dbe:	681b      	ldr	r3, [r3, #0]
   15dc0:	687a      	ldr	r2, [r7, #4]
   15dc2:	0010      	movs	r0, r2
   15dc4:	4798      	blx	r3
        return NULL;
   15dc6:	2300      	movs	r3, #0
   15dc8:	e000      	b.n	15dcc <json_value_init_array+0x44>
    }
    return new_value;
   15dca:	687b      	ldr	r3, [r7, #4]
}
   15dcc:	0018      	movs	r0, r3
   15dce:	46bd      	mov	sp, r7
   15dd0:	b002      	add	sp, #8
   15dd2:	bd80      	pop	{r7, pc}
   15dd4:	20000158 	.word	0x20000158
   15dd8:	00014dc1 	.word	0x00014dc1
   15ddc:	2000015c 	.word	0x2000015c

00015de0 <json_value_init_number>:
    if (value == NULL)
        parson_free(copy);
    return value;
}

JSON_Value * json_value_init_number(double number) {
   15de0:	b590      	push	{r4, r7, lr}
   15de2:	b085      	sub	sp, #20
   15de4:	af00      	add	r7, sp, #0
   15de6:	6038      	str	r0, [r7, #0]
   15de8:	6079      	str	r1, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15dea:	4b0c      	ldr	r3, [pc, #48]	; (15e1c <json_value_init_number+0x3c>)
   15dec:	681b      	ldr	r3, [r3, #0]
   15dee:	2010      	movs	r0, #16
   15df0:	4798      	blx	r3
   15df2:	0003      	movs	r3, r0
   15df4:	60fb      	str	r3, [r7, #12]
    if (!new_value)
   15df6:	68fb      	ldr	r3, [r7, #12]
   15df8:	2b00      	cmp	r3, #0
   15dfa:	d101      	bne.n	15e00 <json_value_init_number+0x20>
        return NULL;
   15dfc:	2300      	movs	r3, #0
   15dfe:	e008      	b.n	15e12 <json_value_init_number+0x32>
    new_value->type = JSONNumber;
   15e00:	68fb      	ldr	r3, [r7, #12]
   15e02:	2203      	movs	r2, #3
   15e04:	601a      	str	r2, [r3, #0]
    new_value->value.number = number;
   15e06:	68fa      	ldr	r2, [r7, #12]
   15e08:	683b      	ldr	r3, [r7, #0]
   15e0a:	687c      	ldr	r4, [r7, #4]
   15e0c:	6093      	str	r3, [r2, #8]
   15e0e:	60d4      	str	r4, [r2, #12]
    return new_value;
   15e10:	68fb      	ldr	r3, [r7, #12]
}
   15e12:	0018      	movs	r0, r3
   15e14:	46bd      	mov	sp, r7
   15e16:	b005      	add	sp, #20
   15e18:	bd90      	pop	{r4, r7, pc}
   15e1a:	46c0      	nop			; (mov r8, r8)
   15e1c:	20000158 	.word	0x20000158

00015e20 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
   15e20:	b580      	push	{r7, lr}
   15e22:	b084      	sub	sp, #16
   15e24:	af00      	add	r7, sp, #0
   15e26:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15e28:	4b0c      	ldr	r3, [pc, #48]	; (15e5c <json_value_init_boolean+0x3c>)
   15e2a:	681b      	ldr	r3, [r3, #0]
   15e2c:	2010      	movs	r0, #16
   15e2e:	4798      	blx	r3
   15e30:	0003      	movs	r3, r0
   15e32:	60fb      	str	r3, [r7, #12]
    if (!new_value)
   15e34:	68fb      	ldr	r3, [r7, #12]
   15e36:	2b00      	cmp	r3, #0
   15e38:	d101      	bne.n	15e3e <json_value_init_boolean+0x1e>
        return NULL;
   15e3a:	2300      	movs	r3, #0
   15e3c:	e00a      	b.n	15e54 <json_value_init_boolean+0x34>
    new_value->type = JSONBoolean;
   15e3e:	68fb      	ldr	r3, [r7, #12]
   15e40:	2206      	movs	r2, #6
   15e42:	601a      	str	r2, [r3, #0]
    new_value->value.boolean = boolean ? 1 : 0;
   15e44:	687b      	ldr	r3, [r7, #4]
   15e46:	1e5a      	subs	r2, r3, #1
   15e48:	4193      	sbcs	r3, r2
   15e4a:	b2db      	uxtb	r3, r3
   15e4c:	001a      	movs	r2, r3
   15e4e:	68fb      	ldr	r3, [r7, #12]
   15e50:	609a      	str	r2, [r3, #8]
    return new_value;
   15e52:	68fb      	ldr	r3, [r7, #12]
}
   15e54:	0018      	movs	r0, r3
   15e56:	46bd      	mov	sp, r7
   15e58:	b004      	add	sp, #16
   15e5a:	bd80      	pop	{r7, pc}
   15e5c:	20000158 	.word	0x20000158

00015e60 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
   15e60:	b580      	push	{r7, lr}
   15e62:	b082      	sub	sp, #8
   15e64:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15e66:	4b09      	ldr	r3, [pc, #36]	; (15e8c <json_value_init_null+0x2c>)
   15e68:	681b      	ldr	r3, [r3, #0]
   15e6a:	2010      	movs	r0, #16
   15e6c:	4798      	blx	r3
   15e6e:	0003      	movs	r3, r0
   15e70:	607b      	str	r3, [r7, #4]
    if (!new_value)
   15e72:	687b      	ldr	r3, [r7, #4]
   15e74:	2b00      	cmp	r3, #0
   15e76:	d101      	bne.n	15e7c <json_value_init_null+0x1c>
        return NULL;
   15e78:	2300      	movs	r3, #0
   15e7a:	e003      	b.n	15e84 <json_value_init_null+0x24>
    new_value->type = JSONNull;
   15e7c:	687b      	ldr	r3, [r7, #4]
   15e7e:	2201      	movs	r2, #1
   15e80:	601a      	str	r2, [r3, #0]
    return new_value;
   15e82:	687b      	ldr	r3, [r7, #4]
}
   15e84:	0018      	movs	r0, r3
   15e86:	46bd      	mov	sp, r7
   15e88:	b002      	add	sp, #8
   15e8a:	bd80      	pop	{r7, pc}
   15e8c:	20000158 	.word	0x20000158

00015e90 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   15e90:	b580      	push	{r7, lr}
   15e92:	b084      	sub	sp, #16
   15e94:	af00      	add	r7, sp, #0
   15e96:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   15e98:	687b      	ldr	r3, [r7, #4]
   15e9a:	22a0      	movs	r2, #160	; 0xa0
   15e9c:	0112      	lsls	r2, r2, #4
   15e9e:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   15ea0:	687b      	ldr	r3, [r7, #4]
   15ea2:	2201      	movs	r2, #1
   15ea4:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   15ea6:	687b      	ldr	r3, [r7, #4]
   15ea8:	2200      	movs	r2, #0
   15eaa:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   15eac:	687b      	ldr	r3, [r7, #4]
   15eae:	2200      	movs	r2, #0
   15eb0:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   15eb2:	230f      	movs	r3, #15
   15eb4:	18fb      	adds	r3, r7, r3
   15eb6:	2200      	movs	r2, #0
   15eb8:	701a      	strb	r2, [r3, #0]
   15eba:	e00e      	b.n	15eda <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   15ebc:	230f      	movs	r3, #15
   15ebe:	18fb      	adds	r3, r7, r3
   15ec0:	781a      	ldrb	r2, [r3, #0]
   15ec2:	687b      	ldr	r3, [r7, #4]
   15ec4:	3202      	adds	r2, #2
   15ec6:	0092      	lsls	r2, r2, #2
   15ec8:	2100      	movs	r1, #0
   15eca:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   15ecc:	230f      	movs	r3, #15
   15ece:	18fb      	adds	r3, r7, r3
   15ed0:	781a      	ldrb	r2, [r3, #0]
   15ed2:	230f      	movs	r3, #15
   15ed4:	18fb      	adds	r3, r7, r3
   15ed6:	3201      	adds	r2, #1
   15ed8:	701a      	strb	r2, [r3, #0]
   15eda:	230f      	movs	r3, #15
   15edc:	18fb      	adds	r3, r7, r3
   15ede:	781b      	ldrb	r3, [r3, #0]
   15ee0:	2b01      	cmp	r3, #1
   15ee2:	d9eb      	bls.n	15ebc <rtc_count_get_config_defaults+0x2c>
	}
}
   15ee4:	46c0      	nop			; (mov r8, r8)
   15ee6:	46bd      	mov	sp, r7
   15ee8:	b004      	add	sp, #16
   15eea:	bd80      	pop	{r7, pc}

00015eec <system_interrupt_enable_global>:
{
   15eec:	b580      	push	{r7, lr}
   15eee:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   15ef0:	4b04      	ldr	r3, [pc, #16]	; (15f04 <system_interrupt_enable_global+0x18>)
   15ef2:	2201      	movs	r2, #1
   15ef4:	701a      	strb	r2, [r3, #0]
   15ef6:	f3bf 8f5f 	dmb	sy
   15efa:	b662      	cpsie	i
}
   15efc:	46c0      	nop			; (mov r8, r8)
   15efe:	46bd      	mov	sp, r7
   15f00:	bd80      	pop	{r7, pc}
   15f02:	46c0      	nop			; (mov r8, r8)
   15f04:	20000000 	.word	0x20000000

00015f08 <system_interrupt_enable>:
{
   15f08:	b580      	push	{r7, lr}
   15f0a:	b082      	sub	sp, #8
   15f0c:	af00      	add	r7, sp, #0
   15f0e:	0002      	movs	r2, r0
   15f10:	1dfb      	adds	r3, r7, #7
   15f12:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15f14:	4b06      	ldr	r3, [pc, #24]	; (15f30 <system_interrupt_enable+0x28>)
   15f16:	1dfa      	adds	r2, r7, #7
   15f18:	7812      	ldrb	r2, [r2, #0]
   15f1a:	0011      	movs	r1, r2
   15f1c:	221f      	movs	r2, #31
   15f1e:	400a      	ands	r2, r1
   15f20:	2101      	movs	r1, #1
   15f22:	4091      	lsls	r1, r2
   15f24:	000a      	movs	r2, r1
   15f26:	601a      	str	r2, [r3, #0]
}
   15f28:	46c0      	nop			; (mov r8, r8)
   15f2a:	46bd      	mov	sp, r7
   15f2c:	b002      	add	sp, #8
   15f2e:	bd80      	pop	{r7, pc}
   15f30:	e000e100 	.word	0xe000e100

00015f34 <usart_is_syncing>:
{
   15f34:	b580      	push	{r7, lr}
   15f36:	b084      	sub	sp, #16
   15f38:	af00      	add	r7, sp, #0
   15f3a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   15f3c:	687b      	ldr	r3, [r7, #4]
   15f3e:	681b      	ldr	r3, [r3, #0]
   15f40:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   15f42:	68fb      	ldr	r3, [r7, #12]
   15f44:	69db      	ldr	r3, [r3, #28]
   15f46:	1e5a      	subs	r2, r3, #1
   15f48:	4193      	sbcs	r3, r2
   15f4a:	b2db      	uxtb	r3, r3
}
   15f4c:	0018      	movs	r0, r3
   15f4e:	46bd      	mov	sp, r7
   15f50:	b004      	add	sp, #16
   15f52:	bd80      	pop	{r7, pc}

00015f54 <_usart_wait_for_sync>:
{
   15f54:	b580      	push	{r7, lr}
   15f56:	b082      	sub	sp, #8
   15f58:	af00      	add	r7, sp, #0
   15f5a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   15f5c:	46c0      	nop			; (mov r8, r8)
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	0018      	movs	r0, r3
   15f62:	4b04      	ldr	r3, [pc, #16]	; (15f74 <_usart_wait_for_sync+0x20>)
   15f64:	4798      	blx	r3
   15f66:	1e03      	subs	r3, r0, #0
   15f68:	d1f9      	bne.n	15f5e <_usart_wait_for_sync+0xa>
}
   15f6a:	46c0      	nop			; (mov r8, r8)
   15f6c:	46bd      	mov	sp, r7
   15f6e:	b002      	add	sp, #8
   15f70:	bd80      	pop	{r7, pc}
   15f72:	46c0      	nop			; (mov r8, r8)
   15f74:	00015f35 	.word	0x00015f35

00015f78 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   15f78:	b580      	push	{r7, lr}
   15f7a:	b082      	sub	sp, #8
   15f7c:	af00      	add	r7, sp, #0
   15f7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   15f80:	687b      	ldr	r3, [r7, #4]
   15f82:	2280      	movs	r2, #128	; 0x80
   15f84:	05d2      	lsls	r2, r2, #23
   15f86:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   15f88:	687b      	ldr	r3, [r7, #4]
   15f8a:	2200      	movs	r2, #0
   15f8c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   15f8e:	687b      	ldr	r3, [r7, #4]
   15f90:	22ff      	movs	r2, #255	; 0xff
   15f92:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   15f94:	687b      	ldr	r3, [r7, #4]
   15f96:	2200      	movs	r2, #0
   15f98:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   15f9a:	687b      	ldr	r3, [r7, #4]
   15f9c:	2200      	movs	r2, #0
   15f9e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   15fa0:	687b      	ldr	r3, [r7, #4]
   15fa2:	2296      	movs	r2, #150	; 0x96
   15fa4:	0192      	lsls	r2, r2, #6
   15fa6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   15fa8:	687b      	ldr	r3, [r7, #4]
   15faa:	2224      	movs	r2, #36	; 0x24
   15fac:	2101      	movs	r1, #1
   15fae:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   15fb0:	687b      	ldr	r3, [r7, #4]
   15fb2:	2225      	movs	r2, #37	; 0x25
   15fb4:	2101      	movs	r1, #1
   15fb6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   15fb8:	687b      	ldr	r3, [r7, #4]
   15fba:	2226      	movs	r2, #38	; 0x26
   15fbc:	2100      	movs	r1, #0
   15fbe:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   15fc0:	687b      	ldr	r3, [r7, #4]
   15fc2:	2227      	movs	r2, #39	; 0x27
   15fc4:	2100      	movs	r1, #0
   15fc6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   15fc8:	687b      	ldr	r3, [r7, #4]
   15fca:	2200      	movs	r2, #0
   15fcc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   15fce:	687b      	ldr	r3, [r7, #4]
   15fd0:	2288      	movs	r2, #136	; 0x88
   15fd2:	0352      	lsls	r2, r2, #13
   15fd4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   15fd6:	687b      	ldr	r3, [r7, #4]
   15fd8:	222c      	movs	r2, #44	; 0x2c
   15fda:	2100      	movs	r1, #0
   15fdc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   15fde:	687b      	ldr	r3, [r7, #4]
   15fe0:	222d      	movs	r2, #45	; 0x2d
   15fe2:	2100      	movs	r1, #0
   15fe4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15fe6:	687b      	ldr	r3, [r7, #4]
   15fe8:	2200      	movs	r2, #0
   15fea:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15fec:	687b      	ldr	r3, [r7, #4]
   15fee:	2200      	movs	r2, #0
   15ff0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   15ff2:	687b      	ldr	r3, [r7, #4]
   15ff4:	2200      	movs	r2, #0
   15ff6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   15ff8:	687b      	ldr	r3, [r7, #4]
   15ffa:	2200      	movs	r2, #0
   15ffc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   15ffe:	687b      	ldr	r3, [r7, #4]
   16000:	2200      	movs	r2, #0
   16002:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   16004:	687b      	ldr	r3, [r7, #4]
   16006:	2200      	movs	r2, #0
   16008:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1600a:	687b      	ldr	r3, [r7, #4]
   1600c:	2200      	movs	r2, #0
   1600e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   16010:	687b      	ldr	r3, [r7, #4]
   16012:	2200      	movs	r2, #0
   16014:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   16016:	687b      	ldr	r3, [r7, #4]
   16018:	2200      	movs	r2, #0
   1601a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1601c:	687b      	ldr	r3, [r7, #4]
   1601e:	2200      	movs	r2, #0
   16020:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   16022:	687b      	ldr	r3, [r7, #4]
   16024:	2213      	movs	r2, #19
   16026:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   16028:	687b      	ldr	r3, [r7, #4]
   1602a:	2200      	movs	r2, #0
   1602c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1602e:	46c0      	nop			; (mov r8, r8)
   16030:	46bd      	mov	sp, r7
   16032:	b002      	add	sp, #8
   16034:	bd80      	pop	{r7, pc}
	...

00016038 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   16038:	b580      	push	{r7, lr}
   1603a:	b084      	sub	sp, #16
   1603c:	af00      	add	r7, sp, #0
   1603e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   16040:	687b      	ldr	r3, [r7, #4]
   16042:	681b      	ldr	r3, [r3, #0]
   16044:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   16046:	687b      	ldr	r3, [r7, #4]
   16048:	681b      	ldr	r3, [r3, #0]
   1604a:	0018      	movs	r0, r3
   1604c:	4b09      	ldr	r3, [pc, #36]	; (16074 <usart_enable+0x3c>)
   1604e:	4798      	blx	r3
   16050:	0003      	movs	r3, r0
   16052:	0018      	movs	r0, r3
   16054:	4b08      	ldr	r3, [pc, #32]	; (16078 <usart_enable+0x40>)
   16056:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   16058:	687b      	ldr	r3, [r7, #4]
   1605a:	0018      	movs	r0, r3
   1605c:	4b07      	ldr	r3, [pc, #28]	; (1607c <usart_enable+0x44>)
   1605e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   16060:	68fb      	ldr	r3, [r7, #12]
   16062:	681b      	ldr	r3, [r3, #0]
   16064:	2202      	movs	r2, #2
   16066:	431a      	orrs	r2, r3
   16068:	68fb      	ldr	r3, [r7, #12]
   1606a:	601a      	str	r2, [r3, #0]
}
   1606c:	46c0      	nop			; (mov r8, r8)
   1606e:	46bd      	mov	sp, r7
   16070:	b004      	add	sp, #16
   16072:	bd80      	pop	{r7, pc}
   16074:	0000cec1 	.word	0x0000cec1
   16078:	00015f09 	.word	0x00015f09
   1607c:	00015f55 	.word	0x00015f55

00016080 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   16080:	b580      	push	{r7, lr}
   16082:	b084      	sub	sp, #16
   16084:	af00      	add	r7, sp, #0
   16086:	60f8      	str	r0, [r7, #12]
   16088:	60b9      	str	r1, [r7, #8]
   1608a:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
   1608c:	687a      	ldr	r2, [r7, #4]
   1608e:	68b9      	ldr	r1, [r7, #8]
   16090:	68fb      	ldr	r3, [r7, #12]
   16092:	0018      	movs	r0, r3
   16094:	4b05      	ldr	r3, [pc, #20]	; (160ac <usart_serial_init+0x2c>)
   16096:	4798      	blx	r3
   16098:	1e03      	subs	r3, r0, #0
   1609a:	d101      	bne.n	160a0 <usart_serial_init+0x20>
		return true;
   1609c:	2301      	movs	r3, #1
   1609e:	e000      	b.n	160a2 <usart_serial_init+0x22>
	}
	else {
		return false;
   160a0:	2300      	movs	r3, #0
	}
}
   160a2:	0018      	movs	r0, r3
   160a4:	46bd      	mov	sp, r7
   160a6:	b004      	add	sp, #16
   160a8:	bd80      	pop	{r7, pc}
   160aa:	46c0      	nop			; (mov r8, r8)
   160ac:	0000de8d 	.word	0x0000de8d

000160b0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
   160b0:	b580      	push	{r7, lr}
   160b2:	b082      	sub	sp, #8
   160b4:	af00      	add	r7, sp, #0
   160b6:	6078      	str	r0, [r7, #4]
   160b8:	000a      	movs	r2, r1
   160ba:	1cfb      	adds	r3, r7, #3
   160bc:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
   160be:	46c0      	nop			; (mov r8, r8)
   160c0:	1cfb      	adds	r3, r7, #3
   160c2:	781b      	ldrb	r3, [r3, #0]
   160c4:	b29a      	uxth	r2, r3
   160c6:	687b      	ldr	r3, [r7, #4]
   160c8:	0011      	movs	r1, r2
   160ca:	0018      	movs	r0, r3
   160cc:	4b04      	ldr	r3, [pc, #16]	; (160e0 <usart_serial_putchar+0x30>)
   160ce:	4798      	blx	r3
   160d0:	1e03      	subs	r3, r0, #0
   160d2:	d1f5      	bne.n	160c0 <usart_serial_putchar+0x10>

	return STATUS_OK;
   160d4:	2300      	movs	r3, #0
}
   160d6:	0018      	movs	r0, r3
   160d8:	46bd      	mov	sp, r7
   160da:	b002      	add	sp, #8
   160dc:	bd80      	pop	{r7, pc}
   160de:	46c0      	nop			; (mov r8, r8)
   160e0:	0000e101 	.word	0x0000e101

000160e4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   160e4:	b580      	push	{r7, lr}
   160e6:	b084      	sub	sp, #16
   160e8:	af00      	add	r7, sp, #0
   160ea:	6078      	str	r0, [r7, #4]
   160ec:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
   160ee:	230e      	movs	r3, #14
   160f0:	18fb      	adds	r3, r7, r3
   160f2:	2200      	movs	r2, #0
   160f4:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
   160f6:	46c0      	nop			; (mov r8, r8)
   160f8:	230e      	movs	r3, #14
   160fa:	18fa      	adds	r2, r7, r3
   160fc:	687b      	ldr	r3, [r7, #4]
   160fe:	0011      	movs	r1, r2
   16100:	0018      	movs	r0, r3
   16102:	4b07      	ldr	r3, [pc, #28]	; (16120 <usart_serial_getchar+0x3c>)
   16104:	4798      	blx	r3
   16106:	1e03      	subs	r3, r0, #0
   16108:	d1f6      	bne.n	160f8 <usart_serial_getchar+0x14>

	*c = temp;
   1610a:	230e      	movs	r3, #14
   1610c:	18fb      	adds	r3, r7, r3
   1610e:	881b      	ldrh	r3, [r3, #0]
   16110:	b2da      	uxtb	r2, r3
   16112:	683b      	ldr	r3, [r7, #0]
   16114:	701a      	strb	r2, [r3, #0]
}
   16116:	46c0      	nop			; (mov r8, r8)
   16118:	46bd      	mov	sp, r7
   1611a:	b004      	add	sp, #16
   1611c:	bd80      	pop	{r7, pc}
   1611e:	46c0      	nop			; (mov r8, r8)
   16120:	0000e165 	.word	0x0000e165

00016124 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   16124:	b580      	push	{r7, lr}
   16126:	b084      	sub	sp, #16
   16128:	af00      	add	r7, sp, #0
   1612a:	60f8      	str	r0, [r7, #12]
   1612c:	60b9      	str	r1, [r7, #8]
   1612e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
   16130:	4b10      	ldr	r3, [pc, #64]	; (16174 <stdio_serial_init+0x50>)
   16132:	68fa      	ldr	r2, [r7, #12]
   16134:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   16136:	4b10      	ldr	r3, [pc, #64]	; (16178 <stdio_serial_init+0x54>)
   16138:	4a10      	ldr	r2, [pc, #64]	; (1617c <stdio_serial_init+0x58>)
   1613a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   1613c:	4b10      	ldr	r3, [pc, #64]	; (16180 <stdio_serial_init+0x5c>)
   1613e:	4a11      	ldr	r2, [pc, #68]	; (16184 <stdio_serial_init+0x60>)
   16140:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
   16142:	687a      	ldr	r2, [r7, #4]
   16144:	68b9      	ldr	r1, [r7, #8]
   16146:	68fb      	ldr	r3, [r7, #12]
   16148:	0018      	movs	r0, r3
   1614a:	4b0f      	ldr	r3, [pc, #60]	; (16188 <stdio_serial_init+0x64>)
   1614c:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   1614e:	4b0f      	ldr	r3, [pc, #60]	; (1618c <stdio_serial_init+0x68>)
   16150:	681b      	ldr	r3, [r3, #0]
   16152:	689b      	ldr	r3, [r3, #8]
   16154:	2100      	movs	r1, #0
   16156:	0018      	movs	r0, r3
   16158:	4b0d      	ldr	r3, [pc, #52]	; (16190 <stdio_serial_init+0x6c>)
   1615a:	4798      	blx	r3
	setbuf(stdin, NULL);
   1615c:	4b0b      	ldr	r3, [pc, #44]	; (1618c <stdio_serial_init+0x68>)
   1615e:	681b      	ldr	r3, [r3, #0]
   16160:	685b      	ldr	r3, [r3, #4]
   16162:	2100      	movs	r1, #0
   16164:	0018      	movs	r0, r3
   16166:	4b0a      	ldr	r3, [pc, #40]	; (16190 <stdio_serial_init+0x6c>)
   16168:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
   1616a:	46c0      	nop			; (mov r8, r8)
   1616c:	46bd      	mov	sp, r7
   1616e:	b004      	add	sp, #16
   16170:	bd80      	pop	{r7, pc}
   16172:	46c0      	nop			; (mov r8, r8)
   16174:	20002b80 	.word	0x20002b80
   16178:	20002b7c 	.word	0x20002b7c
   1617c:	000160b1 	.word	0x000160b1
   16180:	20002b78 	.word	0x20002b78
   16184:	000160e5 	.word	0x000160e5
   16188:	00016081 	.word	0x00016081
   1618c:	2000022c 	.word	0x2000022c
   16190:	0001c4d1 	.word	0x0001c4d1

00016194 <tc_is_syncing>:
{
   16194:	b580      	push	{r7, lr}
   16196:	b084      	sub	sp, #16
   16198:	af00      	add	r7, sp, #0
   1619a:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   1619c:	687b      	ldr	r3, [r7, #4]
   1619e:	681b      	ldr	r3, [r3, #0]
   161a0:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
   161a2:	68fb      	ldr	r3, [r7, #12]
   161a4:	7bdb      	ldrb	r3, [r3, #15]
   161a6:	b2db      	uxtb	r3, r3
   161a8:	001a      	movs	r2, r3
   161aa:	2380      	movs	r3, #128	; 0x80
   161ac:	4013      	ands	r3, r2
   161ae:	1e5a      	subs	r2, r3, #1
   161b0:	4193      	sbcs	r3, r2
   161b2:	b2db      	uxtb	r3, r3
}
   161b4:	0018      	movs	r0, r3
   161b6:	46bd      	mov	sp, r7
   161b8:	b004      	add	sp, #16
   161ba:	bd80      	pop	{r7, pc}

000161bc <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
   161bc:	b580      	push	{r7, lr}
   161be:	b082      	sub	sp, #8
   161c0:	af00      	add	r7, sp, #0
   161c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
   161c4:	687b      	ldr	r3, [r7, #4]
   161c6:	2200      	movs	r2, #0
   161c8:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   161ca:	687b      	ldr	r3, [r7, #4]
   161cc:	2200      	movs	r2, #0
   161ce:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
   161d0:	687b      	ldr	r3, [r7, #4]
   161d2:	2200      	movs	r2, #0
   161d4:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   161d6:	687b      	ldr	r3, [r7, #4]
   161d8:	2200      	movs	r2, #0
   161da:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
   161dc:	687b      	ldr	r3, [r7, #4]
   161de:	2200      	movs	r2, #0
   161e0:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
   161e2:	687b      	ldr	r3, [r7, #4]
   161e4:	2200      	movs	r2, #0
   161e6:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   161e8:	687b      	ldr	r3, [r7, #4]
   161ea:	2200      	movs	r2, #0
   161ec:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   161ee:	687b      	ldr	r3, [r7, #4]
   161f0:	2200      	movs	r2, #0
   161f2:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   161f4:	687b      	ldr	r3, [r7, #4]
   161f6:	2200      	movs	r2, #0
   161f8:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
   161fa:	687b      	ldr	r3, [r7, #4]
   161fc:	2200      	movs	r2, #0
   161fe:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
   16200:	687b      	ldr	r3, [r7, #4]
   16202:	2200      	movs	r2, #0
   16204:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   16206:	687b      	ldr	r3, [r7, #4]
   16208:	2200      	movs	r2, #0
   1620a:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   1620c:	687b      	ldr	r3, [r7, #4]
   1620e:	2200      	movs	r2, #0
   16210:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   16212:	687b      	ldr	r3, [r7, #4]
   16214:	2200      	movs	r2, #0
   16216:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   16218:	687b      	ldr	r3, [r7, #4]
   1621a:	2200      	movs	r2, #0
   1621c:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   1621e:	687b      	ldr	r3, [r7, #4]
   16220:	2200      	movs	r2, #0
   16222:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
   16224:	687b      	ldr	r3, [r7, #4]
   16226:	2200      	movs	r2, #0
   16228:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
   1622a:	687b      	ldr	r3, [r7, #4]
   1622c:	2200      	movs	r2, #0
   1622e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   16230:	687b      	ldr	r3, [r7, #4]
   16232:	2200      	movs	r2, #0
   16234:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   16236:	687b      	ldr	r3, [r7, #4]
   16238:	2200      	movs	r2, #0
   1623a:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
   1623c:	46c0      	nop			; (mov r8, r8)
   1623e:	46bd      	mov	sp, r7
   16240:	b002      	add	sp, #8
   16242:	bd80      	pop	{r7, pc}

00016244 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
   16244:	b580      	push	{r7, lr}
   16246:	b084      	sub	sp, #16
   16248:	af00      	add	r7, sp, #0
   1624a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   1624c:	687b      	ldr	r3, [r7, #4]
   1624e:	681b      	ldr	r3, [r3, #0]
   16250:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   16252:	46c0      	nop			; (mov r8, r8)
   16254:	687b      	ldr	r3, [r7, #4]
   16256:	0018      	movs	r0, r3
   16258:	4b07      	ldr	r3, [pc, #28]	; (16278 <tc_enable+0x34>)
   1625a:	4798      	blx	r3
   1625c:	1e03      	subs	r3, r0, #0
   1625e:	d1f9      	bne.n	16254 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   16260:	68fb      	ldr	r3, [r7, #12]
   16262:	881b      	ldrh	r3, [r3, #0]
   16264:	b29b      	uxth	r3, r3
   16266:	2202      	movs	r2, #2
   16268:	4313      	orrs	r3, r2
   1626a:	b29a      	uxth	r2, r3
   1626c:	68fb      	ldr	r3, [r7, #12]
   1626e:	801a      	strh	r2, [r3, #0]
}
   16270:	46c0      	nop			; (mov r8, r8)
   16272:	46bd      	mov	sp, r7
   16274:	b004      	add	sp, #16
   16276:	bd80      	pop	{r7, pc}
   16278:	00016195 	.word	0x00016195

0001627c <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   1627c:	b580      	push	{r7, lr}
   1627e:	b082      	sub	sp, #8
   16280:	af00      	add	r7, sp, #0
   16282:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   16284:	4a04      	ldr	r2, [pc, #16]	; (16298 <_tc_interrupt_get_interrupt_vector+0x1c>)
   16286:	687b      	ldr	r3, [r7, #4]
   16288:	18d3      	adds	r3, r2, r3
   1628a:	781b      	ldrb	r3, [r3, #0]
   1628c:	b25b      	sxtb	r3, r3
}
   1628e:	0018      	movs	r0, r3
   16290:	46bd      	mov	sp, r7
   16292:	b002      	add	sp, #8
   16294:	bd80      	pop	{r7, pc}
   16296:	46c0      	nop			; (mov r8, r8)
   16298:	20000160 	.word	0x20000160

0001629c <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
   1629c:	b580      	push	{r7, lr}
   1629e:	b082      	sub	sp, #8
   162a0:	af00      	add	r7, sp, #0
   162a2:	6078      	str	r0, [r7, #4]
   162a4:	000a      	movs	r2, r1
   162a6:	1cfb      	adds	r3, r7, #3
   162a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   162aa:	687b      	ldr	r3, [r7, #4]
   162ac:	681b      	ldr	r3, [r3, #0]
   162ae:	0018      	movs	r0, r3
   162b0:	4b22      	ldr	r3, [pc, #136]	; (1633c <tc_enable_callback+0xa0>)
   162b2:	4798      	blx	r3
   162b4:	0003      	movs	r3, r0
   162b6:	0018      	movs	r0, r3
   162b8:	4b21      	ldr	r3, [pc, #132]	; (16340 <tc_enable_callback+0xa4>)
   162ba:	4798      	blx	r3
   162bc:	0003      	movs	r3, r0
   162be:	0018      	movs	r0, r3
   162c0:	4b20      	ldr	r3, [pc, #128]	; (16344 <tc_enable_callback+0xa8>)
   162c2:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
   162c4:	1cfb      	adds	r3, r7, #3
   162c6:	781b      	ldrb	r3, [r3, #0]
   162c8:	2b02      	cmp	r3, #2
   162ca:	d10b      	bne.n	162e4 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
   162cc:	687b      	ldr	r3, [r7, #4]
   162ce:	7e5b      	ldrb	r3, [r3, #25]
   162d0:	2210      	movs	r2, #16
   162d2:	4313      	orrs	r3, r2
   162d4:	b2da      	uxtb	r2, r3
   162d6:	687b      	ldr	r3, [r7, #4]
   162d8:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
   162da:	687b      	ldr	r3, [r7, #4]
   162dc:	681b      	ldr	r3, [r3, #0]
   162de:	2210      	movs	r2, #16
   162e0:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
   162e2:	e026      	b.n	16332 <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
   162e4:	1cfb      	adds	r3, r7, #3
   162e6:	781b      	ldrb	r3, [r3, #0]
   162e8:	2b03      	cmp	r3, #3
   162ea:	d10b      	bne.n	16304 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
   162ec:	687b      	ldr	r3, [r7, #4]
   162ee:	7e5b      	ldrb	r3, [r3, #25]
   162f0:	2220      	movs	r2, #32
   162f2:	4313      	orrs	r3, r2
   162f4:	b2da      	uxtb	r2, r3
   162f6:	687b      	ldr	r3, [r7, #4]
   162f8:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
   162fa:	687b      	ldr	r3, [r7, #4]
   162fc:	681b      	ldr	r3, [r3, #0]
   162fe:	2220      	movs	r2, #32
   16300:	735a      	strb	r2, [r3, #13]
}
   16302:	e016      	b.n	16332 <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
   16304:	687b      	ldr	r3, [r7, #4]
   16306:	7e5b      	ldrb	r3, [r3, #25]
   16308:	b25a      	sxtb	r2, r3
   1630a:	1cfb      	adds	r3, r7, #3
   1630c:	781b      	ldrb	r3, [r3, #0]
   1630e:	2101      	movs	r1, #1
   16310:	4099      	lsls	r1, r3
   16312:	000b      	movs	r3, r1
   16314:	b25b      	sxtb	r3, r3
   16316:	4313      	orrs	r3, r2
   16318:	b25b      	sxtb	r3, r3
   1631a:	b2da      	uxtb	r2, r3
   1631c:	687b      	ldr	r3, [r7, #4]
   1631e:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   16320:	687b      	ldr	r3, [r7, #4]
   16322:	681b      	ldr	r3, [r3, #0]
   16324:	1cfa      	adds	r2, r7, #3
   16326:	7812      	ldrb	r2, [r2, #0]
   16328:	2101      	movs	r1, #1
   1632a:	4091      	lsls	r1, r2
   1632c:	000a      	movs	r2, r1
   1632e:	b2d2      	uxtb	r2, r2
   16330:	735a      	strb	r2, [r3, #13]
}
   16332:	46c0      	nop			; (mov r8, r8)
   16334:	46bd      	mov	sp, r7
   16336:	b002      	add	sp, #8
   16338:	bd80      	pop	{r7, pc}
   1633a:	46c0      	nop			; (mov r8, r8)
   1633c:	000019f9 	.word	0x000019f9
   16340:	0001627d 	.word	0x0001627d
   16344:	00015f09 	.word	0x00015f09

00016348 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
   16348:	b580      	push	{r7, lr}
   1634a:	b090      	sub	sp, #64	; 0x40
   1634c:	af00      	add	r7, sp, #0
#if SAM0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
   1634e:	003b      	movs	r3, r7
   16350:	0018      	movs	r0, r3
   16352:	4b13      	ldr	r3, [pc, #76]	; (163a0 <configure_console+0x58>)
   16354:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   16356:	003b      	movs	r3, r7
   16358:	2280      	movs	r2, #128	; 0x80
   1635a:	0352      	lsls	r2, r2, #13
   1635c:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1635e:	003b      	movs	r3, r7
   16360:	4a10      	ldr	r2, [pc, #64]	; (163a4 <configure_console+0x5c>)
   16362:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   16364:	003b      	movs	r3, r7
   16366:	4a10      	ldr	r2, [pc, #64]	; (163a8 <configure_console+0x60>)
   16368:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1636a:	003b      	movs	r3, r7
   1636c:	2201      	movs	r2, #1
   1636e:	4252      	negs	r2, r2
   16370:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   16372:	003b      	movs	r3, r7
   16374:	2201      	movs	r2, #1
   16376:	4252      	negs	r2, r2
   16378:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   1637a:	003b      	movs	r3, r7
   1637c:	22e1      	movs	r2, #225	; 0xe1
   1637e:	0252      	lsls	r2, r2, #9
   16380:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
   16382:	003a      	movs	r2, r7
   16384:	4909      	ldr	r1, [pc, #36]	; (163ac <configure_console+0x64>)
   16386:	4b0a      	ldr	r3, [pc, #40]	; (163b0 <configure_console+0x68>)
   16388:	0018      	movs	r0, r3
   1638a:	4b0a      	ldr	r3, [pc, #40]	; (163b4 <configure_console+0x6c>)
   1638c:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
   1638e:	4b08      	ldr	r3, [pc, #32]	; (163b0 <configure_console+0x68>)
   16390:	0018      	movs	r0, r3
   16392:	4b09      	ldr	r3, [pc, #36]	; (163b8 <configure_console+0x70>)
   16394:	4798      	blx	r3
#elif SAM
#endif
}
   16396:	46c0      	nop			; (mov r8, r8)
   16398:	46bd      	mov	sp, r7
   1639a:	b010      	add	sp, #64	; 0x40
   1639c:	bd80      	pop	{r7, pc}
   1639e:	46c0      	nop			; (mov r8, r8)
   163a0:	00015f79 	.word	0x00015f79
   163a4:	00160002 	.word	0x00160002
   163a8:	00170002 	.word	0x00170002
   163ac:	42001400 	.word	0x42001400
   163b0:	20002ba4 	.word	0x20002ba4
   163b4:	00016125 	.word	0x00016125
   163b8:	00016039 	.word	0x00016039

000163bc <configure_rtc>:

/* Initialize an RTC (or 1 second timer) */
static void configure_rtc(void)
{
   163bc:	b580      	push	{r7, lr}
   163be:	b084      	sub	sp, #16
   163c0:	af00      	add	r7, sp, #0
#if SAM0
    struct rtc_count_config config_rtc_count;
    rtc_count_get_config_defaults(&config_rtc_count);
   163c2:	003b      	movs	r3, r7
   163c4:	0018      	movs	r0, r3
   163c6:	4b09      	ldr	r3, [pc, #36]	; (163ec <configure_rtc+0x30>)
   163c8:	4798      	blx	r3
    config_rtc_count.continuously_update = true;
   163ca:	003b      	movs	r3, r7
   163cc:	2201      	movs	r2, #1
   163ce:	711a      	strb	r2, [r3, #4]

    rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
   163d0:	003a      	movs	r2, r7
   163d2:	4907      	ldr	r1, [pc, #28]	; (163f0 <configure_rtc+0x34>)
   163d4:	4b07      	ldr	r3, [pc, #28]	; (163f4 <configure_rtc+0x38>)
   163d6:	0018      	movs	r0, r3
   163d8:	4b07      	ldr	r3, [pc, #28]	; (163f8 <configure_rtc+0x3c>)
   163da:	4798      	blx	r3

    rtc_count_enable(&rtc_instance);
   163dc:	4b05      	ldr	r3, [pc, #20]	; (163f4 <configure_rtc+0x38>)
   163de:	0018      	movs	r0, r3
   163e0:	4b06      	ldr	r3, [pc, #24]	; (163fc <configure_rtc+0x40>)
   163e2:	4798      	blx	r3
#elif SAM
    rtc_set_hour_mode(RTC, 0);
#endif
}
   163e4:	46c0      	nop			; (mov r8, r8)
   163e6:	46bd      	mov	sp, r7
   163e8:	b004      	add	sp, #16
   163ea:	bd80      	pop	{r7, pc}
   163ec:	00015e91 	.word	0x00015e91
   163f0:	40001400 	.word	0x40001400
   163f4:	20002b9c 	.word	0x20002b9c
   163f8:	00005481 	.word	0x00005481
   163fc:	00005291 	.word	0x00005291

00016400 <periodic_timer_cb>:

/* Timer callback function */
static void periodic_timer_cb(struct tc_module *const module)
{
   16400:	b580      	push	{r7, lr}
   16402:	b082      	sub	sp, #8
   16404:	af00      	add	r7, sp, #0
   16406:	6078      	str	r0, [r7, #4]
    wifi_timer_update();
   16408:	4b05      	ldr	r3, [pc, #20]	; (16420 <periodic_timer_cb+0x20>)
   1640a:	4798      	blx	r3
    client_timer_update();
   1640c:	4b05      	ldr	r3, [pc, #20]	; (16424 <periodic_timer_cb+0x24>)
   1640e:	4798      	blx	r3
    TimerCallback();
   16410:	4b05      	ldr	r3, [pc, #20]	; (16428 <periodic_timer_cb+0x28>)
   16412:	4798      	blx	r3
    atca_kit_timer_update();
   16414:	4b05      	ldr	r3, [pc, #20]	; (1642c <periodic_timer_cb+0x2c>)
   16416:	4798      	blx	r3
}
   16418:	46c0      	nop			; (mov r8, r8)
   1641a:	46bd      	mov	sp, r7
   1641c:	b002      	add	sp, #8
   1641e:	bd80      	pop	{r7, pc}
   16420:	00016811 	.word	0x00016811
   16424:	00017d81 	.word	0x00017d81
   16428:	00014601 	.word	0x00014601
   1642c:	000189cd 	.word	0x000189cd

00016430 <configure_periodic_timer>:

/* Configure a periodic timer for driving various counters */
static void configure_periodic_timer(void)
{
   16430:	b580      	push	{r7, lr}
   16432:	b08e      	sub	sp, #56	; 0x38
   16434:	af00      	add	r7, sp, #0
#if SAM0
    uint32_t counts;
    struct tc_config config_tc;
    tc_get_config_defaults(&config_tc);
   16436:	003b      	movs	r3, r7
   16438:	0018      	movs	r0, r3
   1643a:	4b1a      	ldr	r3, [pc, #104]	; (164a4 <configure_periodic_timer+0x74>)
   1643c:	4798      	blx	r3

    /* For ease connect to the 32kHz source rather than the PLL */
    config_tc.clock_source = GCLK_GENERATOR_1;
   1643e:	003b      	movs	r3, r7
   16440:	2201      	movs	r2, #1
   16442:	701a      	strb	r2, [r3, #0]
    config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
   16444:	003b      	movs	r3, r7
   16446:	2220      	movs	r2, #32
   16448:	719a      	strb	r2, [r3, #6]

    /* Calculate the match count required */
    counts = TIMER_UPDATE_PERIOD * system_gclk_gen_get_hz(config_tc.clock_source);
   1644a:	003b      	movs	r3, r7
   1644c:	781b      	ldrb	r3, [r3, #0]
   1644e:	0018      	movs	r0, r3
   16450:	4b15      	ldr	r3, [pc, #84]	; (164a8 <configure_periodic_timer+0x78>)
   16452:	4798      	blx	r3
   16454:	0002      	movs	r2, r0
   16456:	2364      	movs	r3, #100	; 0x64
   16458:	4353      	muls	r3, r2
   1645a:	637b      	str	r3, [r7, #52]	; 0x34
    counts /= 1000;
   1645c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1645e:	4b13      	ldr	r3, [pc, #76]	; (164ac <configure_periodic_timer+0x7c>)
   16460:	22fa      	movs	r2, #250	; 0xfa
   16462:	0091      	lsls	r1, r2, #2
   16464:	4798      	blx	r3
   16466:	0003      	movs	r3, r0
   16468:	637b      	str	r3, [r7, #52]	; 0x34

    /* Set the match value that will trigger the interrupt */
    config_tc.counter_16_bit.compare_capture_channel[0] = counts;
   1646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1646c:	b29a      	uxth	r2, r3
   1646e:	003b      	movs	r3, r7
   16470:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Set up the module */
    tc_init(&tc3_inst, TC3, &config_tc);
   16472:	003a      	movs	r2, r7
   16474:	490e      	ldr	r1, [pc, #56]	; (164b0 <configure_periodic_timer+0x80>)
   16476:	4b0f      	ldr	r3, [pc, #60]	; (164b4 <configure_periodic_timer+0x84>)
   16478:	0018      	movs	r0, r3
   1647a:	4b0f      	ldr	r3, [pc, #60]	; (164b8 <configure_periodic_timer+0x88>)
   1647c:	4798      	blx	r3

    /* Set up the interrupt */
    tc_register_callback(&tc3_inst, periodic_timer_cb, TC_CALLBACK_OVERFLOW);
   1647e:	490f      	ldr	r1, [pc, #60]	; (164bc <configure_periodic_timer+0x8c>)
   16480:	4b0c      	ldr	r3, [pc, #48]	; (164b4 <configure_periodic_timer+0x84>)
   16482:	2200      	movs	r2, #0
   16484:	0018      	movs	r0, r3
   16486:	4b0e      	ldr	r3, [pc, #56]	; (164c0 <configure_periodic_timer+0x90>)
   16488:	4798      	blx	r3
    tc_enable_callback(&tc3_inst, TC_CALLBACK_OVERFLOW);
   1648a:	4b0a      	ldr	r3, [pc, #40]	; (164b4 <configure_periodic_timer+0x84>)
   1648c:	2100      	movs	r1, #0
   1648e:	0018      	movs	r0, r3
   16490:	4b0c      	ldr	r3, [pc, #48]	; (164c4 <configure_periodic_timer+0x94>)
   16492:	4798      	blx	r3

    /* Enable the timer */
    tc_enable(&tc3_inst);
   16494:	4b07      	ldr	r3, [pc, #28]	; (164b4 <configure_periodic_timer+0x84>)
   16496:	0018      	movs	r0, r3
   16498:	4b0b      	ldr	r3, [pc, #44]	; (164c8 <configure_periodic_timer+0x98>)
   1649a:	4798      	blx	r3
#elif SAM

#endif
}
   1649c:	46c0      	nop			; (mov r8, r8)
   1649e:	46bd      	mov	sp, r7
   164a0:	b00e      	add	sp, #56	; 0x38
   164a2:	bd80      	pop	{r7, pc}
   164a4:	000161bd 	.word	0x000161bd
   164a8:	0000f181 	.word	0x0000f181
   164ac:	00019d81 	.word	0x00019d81
   164b0:	42002c00 	.word	0x42002c00
   164b4:	20002bd8 	.word	0x20002bd8
   164b8:	00001a45 	.word	0x00001a45
   164bc:	00016401 	.word	0x00016401
   164c0:	000017a5 	.word	0x000017a5
   164c4:	0001629d 	.word	0x0001629d
   164c8:	00016245 	.word	0x00016245

000164cc <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   164cc:	b580      	push	{r7, lr}
   164ce:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	system_init();
   164d0:	4b13      	ldr	r3, [pc, #76]	; (16520 <main+0x54>)
   164d2:	4798      	blx	r3

    /* Enable basic drivers */
    delay_init();
   164d4:	4b13      	ldr	r3, [pc, #76]	; (16524 <main+0x58>)
   164d6:	4798      	blx	r3
    system_interrupt_enable_global();
   164d8:	4b13      	ldr	r3, [pc, #76]	; (16528 <main+0x5c>)
   164da:	4798      	blx	r3

    /* Set the local configuration for the cryptographic device being used */
    config_crypto();
   164dc:	4b13      	ldr	r3, [pc, #76]	; (1652c <main+0x60>)
   164de:	4798      	blx	r3

    /* Initialize a periodic timer */
    configure_periodic_timer();
   164e0:	4b13      	ldr	r3, [pc, #76]	; (16530 <main+0x64>)
   164e2:	4798      	blx	r3

    /* Initialize the RTC */
    configure_rtc();
   164e4:	4b13      	ldr	r3, [pc, #76]	; (16534 <main+0x68>)
   164e6:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
   164e8:	4b13      	ldr	r3, [pc, #76]	; (16538 <main+0x6c>)
   164ea:	4798      	blx	r3

    /* Initialize the USB HID interface */
    usb_hid_init();
   164ec:	4b13      	ldr	r3, [pc, #76]	; (1653c <main+0x70>)
   164ee:	4798      	blx	r3

    /* Print a diagnostic message to the console */
    DEBUG_PRINTF("Starting Example...\r\n");
   164f0:	4b13      	ldr	r3, [pc, #76]	; (16540 <main+0x74>)
   164f2:	0018      	movs	r0, r3
   164f4:	4b13      	ldr	r3, [pc, #76]	; (16544 <main+0x78>)
   164f6:	4798      	blx	r3

    config_print_public_key();
   164f8:	4b13      	ldr	r3, [pc, #76]	; (16548 <main+0x7c>)
   164fa:	4798      	blx	r3

    for(;;)
    {
        /* Handle WIFI state machine */
        wifi_task();
   164fc:	4b13      	ldr	r3, [pc, #76]	; (1654c <main+0x80>)
   164fe:	4798      	blx	r3

        /* Handle Data Interface */
        atca_kit_main_handler();
   16500:	4b13      	ldr	r3, [pc, #76]	; (16550 <main+0x84>)
   16502:	4798      	blx	r3

        /* Allows the kit protocol interface to have exclusive control
         of the I2C bus when it needs it */
        if(!atca_kit_lock())
   16504:	4b13      	ldr	r3, [pc, #76]	; (16554 <main+0x88>)
   16506:	4798      	blx	r3
   16508:	0003      	movs	r3, r0
   1650a:	001a      	movs	r2, r3
   1650c:	2301      	movs	r3, #1
   1650e:	4053      	eors	r3, r2
   16510:	b2db      	uxtb	r3, r3
   16512:	2b00      	cmp	r3, #0
   16514:	d0f2      	beq.n	164fc <main+0x30>
        {
            /* Handle Client State Machine */
            client_task();
   16516:	4b10      	ldr	r3, [pc, #64]	; (16558 <main+0x8c>)
   16518:	4798      	blx	r3

            /* Handle Sensor State Machine */
            sensor_task();
   1651a:	4b10      	ldr	r3, [pc, #64]	; (1655c <main+0x90>)
   1651c:	4798      	blx	r3
        wifi_task();
   1651e:	e7ed      	b.n	164fc <main+0x30>
   16520:	0000f3e1 	.word	0x0000f3e1
   16524:	000004b1 	.word	0x000004b1
   16528:	00015eed 	.word	0x00015eed
   1652c:	000184b9 	.word	0x000184b9
   16530:	00016431 	.word	0x00016431
   16534:	000163bd 	.word	0x000163bd
   16538:	00016349 	.word	0x00016349
   1653c:	00017a25 	.word	0x00017a25
   16540:	000213d4 	.word	0x000213d4
   16544:	0001c499 	.word	0x0001c499
   16548:	00018869 	.word	0x00018869
   1654c:	00016e5d 	.word	0x00016e5d
   16550:	00019ce9 	.word	0x00019ce9
   16554:	00018975 	.word	0x00018975
   16558:	00018481 	.word	0x00018481
   1655c:	000179c1 	.word	0x000179c1

00016560 <time_utils_convert>:
#if SAM0
extern struct rtc_module    rtc_instance;
#endif

uint32_t time_utils_convert(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
   16560:	b590      	push	{r4, r7, lr}
   16562:	b087      	sub	sp, #28
   16564:	af00      	add	r7, sp, #0
   16566:	60f8      	str	r0, [r7, #12]
   16568:	60b9      	str	r1, [r7, #8]
   1656a:	607a      	str	r2, [r7, #4]
   1656c:	603b      	str	r3, [r7, #0]
    uint32_t ret = 0;
   1656e:	2300      	movs	r3, #0
   16570:	617b      	str	r3, [r7, #20]

    //January and February are counted as months 13 and 14 of the previous year
    if(month <= 2)
   16572:	68bb      	ldr	r3, [r7, #8]
   16574:	2b02      	cmp	r3, #2
   16576:	d805      	bhi.n	16584 <time_utils_convert+0x24>
    {
        month += 12;
   16578:	68bb      	ldr	r3, [r7, #8]
   1657a:	330c      	adds	r3, #12
   1657c:	60bb      	str	r3, [r7, #8]
        year -= 1;
   1657e:	68fb      	ldr	r3, [r7, #12]
   16580:	3b01      	subs	r3, #1
   16582:	60fb      	str	r3, [r7, #12]
    }
     
    //Convert years to days
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
   16584:	68fb      	ldr	r3, [r7, #12]
   16586:	226e      	movs	r2, #110	; 0x6e
   16588:	32ff      	adds	r2, #255	; 0xff
   1658a:	435a      	muls	r2, r3
   1658c:	68fb      	ldr	r3, [r7, #12]
   1658e:	089b      	lsrs	r3, r3, #2
   16590:	18d4      	adds	r4, r2, r3
   16592:	68fa      	ldr	r2, [r7, #12]
   16594:	4b20      	ldr	r3, [pc, #128]	; (16618 <time_utils_convert+0xb8>)
   16596:	2164      	movs	r1, #100	; 0x64
   16598:	0010      	movs	r0, r2
   1659a:	4798      	blx	r3
   1659c:	0003      	movs	r3, r0
   1659e:	1ae4      	subs	r4, r4, r3
   165a0:	68f8      	ldr	r0, [r7, #12]
   165a2:	4b1d      	ldr	r3, [pc, #116]	; (16618 <time_utils_convert+0xb8>)
   165a4:	22c8      	movs	r2, #200	; 0xc8
   165a6:	0051      	lsls	r1, r2, #1
   165a8:	4798      	blx	r3
   165aa:	0003      	movs	r3, r0
   165ac:	18e3      	adds	r3, r4, r3
   165ae:	617b      	str	r3, [r7, #20]
    //Convert months to days
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
   165b0:	68ba      	ldr	r2, [r7, #8]
   165b2:	0013      	movs	r3, r2
   165b4:	011b      	lsls	r3, r3, #4
   165b6:	1a9b      	subs	r3, r3, r2
   165b8:	005b      	lsls	r3, r3, #1
   165ba:	001c      	movs	r4, r3
   165bc:	68bb      	ldr	r3, [r7, #8]
   165be:	1c5a      	adds	r2, r3, #1
   165c0:	0013      	movs	r3, r2
   165c2:	005b      	lsls	r3, r3, #1
   165c4:	189a      	adds	r2, r3, r2
   165c6:	4b14      	ldr	r3, [pc, #80]	; (16618 <time_utils_convert+0xb8>)
   165c8:	2105      	movs	r1, #5
   165ca:	0010      	movs	r0, r2
   165cc:	4798      	blx	r3
   165ce:	0003      	movs	r3, r0
   165d0:	18e2      	adds	r2, r4, r3
   165d2:	687b      	ldr	r3, [r7, #4]
   165d4:	18d3      	adds	r3, r2, r3
   165d6:	697a      	ldr	r2, [r7, #20]
   165d8:	18d3      	adds	r3, r2, r3
   165da:	617b      	str	r3, [r7, #20]
    //Unix time starts on January 1st, 1970
    ret -= 719561;
   165dc:	697b      	ldr	r3, [r7, #20]
   165de:	4a0f      	ldr	r2, [pc, #60]	; (1661c <time_utils_convert+0xbc>)
   165e0:	4694      	mov	ip, r2
   165e2:	4463      	add	r3, ip
   165e4:	617b      	str	r3, [r7, #20]
    //Convert days to seconds
    ret *= 86400;
   165e6:	697b      	ldr	r3, [r7, #20]
   165e8:	4a0d      	ldr	r2, [pc, #52]	; (16620 <time_utils_convert+0xc0>)
   165ea:	4353      	muls	r3, r2
   165ec:	617b      	str	r3, [r7, #20]
    //Add hours, minutes and seconds
    ret += (3600 * hour) + (60 * minute) + second;
   165ee:	683b      	ldr	r3, [r7, #0]
   165f0:	22e1      	movs	r2, #225	; 0xe1
   165f2:	0112      	lsls	r2, r2, #4
   165f4:	435a      	muls	r2, r3
   165f6:	0011      	movs	r1, r2
   165f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   165fa:	0013      	movs	r3, r2
   165fc:	011b      	lsls	r3, r3, #4
   165fe:	1a9b      	subs	r3, r3, r2
   16600:	009b      	lsls	r3, r3, #2
   16602:	18ca      	adds	r2, r1, r3
   16604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16606:	18d3      	adds	r3, r2, r3
   16608:	697a      	ldr	r2, [r7, #20]
   1660a:	18d3      	adds	r3, r2, r3
   1660c:	617b      	str	r3, [r7, #20]
     
    return ret;
   1660e:	697b      	ldr	r3, [r7, #20]
}
   16610:	0018      	movs	r0, r3
   16612:	46bd      	mov	sp, r7
   16614:	b007      	add	sp, #28
   16616:	bd90      	pop	{r4, r7, pc}
   16618:	00019d81 	.word	0x00019d81
   1661c:	fff50537 	.word	0xfff50537
   16620:	00015180 	.word	0x00015180

00016624 <time_utils_get_utc>:

uint32_t time_utils_get_utc(void)
{
   16624:	b580      	push	{r7, lr}
   16626:	af00      	add	r7, sp, #0
    if(g_time_set)
   16628:	4b06      	ldr	r3, [pc, #24]	; (16644 <time_utils_get_utc+0x20>)
   1662a:	781b      	ldrb	r3, [r3, #0]
   1662c:	2b00      	cmp	r3, #0
   1662e:	d005      	beq.n	1663c <time_utils_get_utc+0x18>
    {
#if SAM0
        return rtc_count_get_count(&rtc_instance);
   16630:	4b05      	ldr	r3, [pc, #20]	; (16648 <time_utils_get_utc+0x24>)
   16632:	0018      	movs	r0, r3
   16634:	4b05      	ldr	r3, [pc, #20]	; (1664c <time_utils_get_utc+0x28>)
   16636:	4798      	blx	r3
   16638:	0003      	movs	r3, r0
   1663a:	e000      	b.n	1663e <time_utils_get_utc+0x1a>
        return util_convert_time(year, month, day, hour, minute, second);
#endif
    }
    else
    {
        return 0;
   1663c:	2300      	movs	r3, #0
    }
}
   1663e:	0018      	movs	r0, r3
   16640:	46bd      	mov	sp, r7
   16642:	bd80      	pop	{r7, pc}
   16644:	200005d4 	.word	0x200005d4
   16648:	20002b9c 	.word	0x20002b9c
   1664c:	00005571 	.word	0x00005571

00016650 <time_utils_set>:

void time_utils_set(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
   16650:	b590      	push	{r4, r7, lr}
   16652:	b089      	sub	sp, #36	; 0x24
   16654:	af02      	add	r7, sp, #8
   16656:	60f8      	str	r0, [r7, #12]
   16658:	60b9      	str	r1, [r7, #8]
   1665a:	607a      	str	r2, [r7, #4]
   1665c:	603b      	str	r3, [r7, #0]
#if SAM0
    uint32_t ts = time_utils_convert(year, month, day, hour, minute, second);
   1665e:	683c      	ldr	r4, [r7, #0]
   16660:	687a      	ldr	r2, [r7, #4]
   16662:	68b9      	ldr	r1, [r7, #8]
   16664:	68f8      	ldr	r0, [r7, #12]
   16666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16668:	9301      	str	r3, [sp, #4]
   1666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1666c:	9300      	str	r3, [sp, #0]
   1666e:	0023      	movs	r3, r4
   16670:	4c08      	ldr	r4, [pc, #32]	; (16694 <time_utils_set+0x44>)
   16672:	47a0      	blx	r4
   16674:	0003      	movs	r3, r0
   16676:	617b      	str	r3, [r7, #20]
    rtc_count_set_count(&rtc_instance, ts);
   16678:	697a      	ldr	r2, [r7, #20]
   1667a:	4b07      	ldr	r3, [pc, #28]	; (16698 <time_utils_set+0x48>)
   1667c:	0011      	movs	r1, r2
   1667e:	0018      	movs	r0, r3
   16680:	4b06      	ldr	r3, [pc, #24]	; (1669c <time_utils_set+0x4c>)
   16682:	4798      	blx	r3
#elif SAM
    rtc_set_date(RTC, year, month, day, 1);
    rtc_set_time(RTC, hour, minute, second);
#endif

    g_time_set = true;
   16684:	4b06      	ldr	r3, [pc, #24]	; (166a0 <time_utils_set+0x50>)
   16686:	2201      	movs	r2, #1
   16688:	701a      	strb	r2, [r3, #0]
}
   1668a:	46c0      	nop			; (mov r8, r8)
   1668c:	46bd      	mov	sp, r7
   1668e:	b007      	add	sp, #28
   16690:	bd90      	pop	{r4, r7, pc}
   16692:	46c0      	nop			; (mov r8, r8)
   16694:	00016561 	.word	0x00016561
   16698:	20002b9c 	.word	0x20002b9c
   1669c:	00005511 	.word	0x00005511
   166a0:	200005d4 	.word	0x200005d4

000166a4 <tiny_state_init>:
    tiny_state_def* states;
} tiny_state_ctx;

/* The most stripped down state machine driver you can create */
static void inline tiny_state_init(void* context, tiny_state_def *states, uint16_t count, uint16_t initial)
{
   166a4:	b580      	push	{r7, lr}
   166a6:	b084      	sub	sp, #16
   166a8:	af00      	add	r7, sp, #0
   166aa:	60f8      	str	r0, [r7, #12]
   166ac:	60b9      	str	r1, [r7, #8]
   166ae:	0019      	movs	r1, r3
   166b0:	1dbb      	adds	r3, r7, #6
   166b2:	801a      	strh	r2, [r3, #0]
   166b4:	1d3b      	adds	r3, r7, #4
   166b6:	1c0a      	adds	r2, r1, #0
   166b8:	801a      	strh	r2, [r3, #0]
    ((tiny_state_ctx*)context)->states = states;
   166ba:	68fb      	ldr	r3, [r7, #12]
   166bc:	68ba      	ldr	r2, [r7, #8]
   166be:	605a      	str	r2, [r3, #4]
    ((tiny_state_ctx*)context)->count = count;
   166c0:	68fb      	ldr	r3, [r7, #12]
   166c2:	1dba      	adds	r2, r7, #6
   166c4:	8812      	ldrh	r2, [r2, #0]
   166c6:	805a      	strh	r2, [r3, #2]
    ((tiny_state_ctx*)context)->state = initial;
   166c8:	68fb      	ldr	r3, [r7, #12]
   166ca:	1d3a      	adds	r2, r7, #4
   166cc:	8812      	ldrh	r2, [r2, #0]
   166ce:	801a      	strh	r2, [r3, #0]
}
   166d0:	46c0      	nop			; (mov r8, r8)
   166d2:	46bd      	mov	sp, r7
   166d4:	b004      	add	sp, #16
   166d6:	bd80      	pop	{r7, pc}

000166d8 <tiny_state_find>:

/* Search through a states list for the match */
static tiny_state_def * tiny_state_find(tiny_state_def *states, uint16_t count, uint16_t state)
{
   166d8:	b580      	push	{r7, lr}
   166da:	b084      	sub	sp, #16
   166dc:	af00      	add	r7, sp, #0
   166de:	6078      	str	r0, [r7, #4]
   166e0:	0008      	movs	r0, r1
   166e2:	0011      	movs	r1, r2
   166e4:	1cbb      	adds	r3, r7, #2
   166e6:	1c02      	adds	r2, r0, #0
   166e8:	801a      	strh	r2, [r3, #0]
   166ea:	003b      	movs	r3, r7
   166ec:	1c0a      	adds	r2, r1, #0
   166ee:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for(i=0;i<count;i++)
   166f0:	230e      	movs	r3, #14
   166f2:	18fb      	adds	r3, r7, r3
   166f4:	2200      	movs	r2, #0
   166f6:	801a      	strh	r2, [r3, #0]
   166f8:	e020      	b.n	1673c <tiny_state_find+0x64>
    {
        if(states[i]._s == state)
   166fa:	230e      	movs	r3, #14
   166fc:	18fb      	adds	r3, r7, r3
   166fe:	881a      	ldrh	r2, [r3, #0]
   16700:	0013      	movs	r3, r2
   16702:	005b      	lsls	r3, r3, #1
   16704:	189b      	adds	r3, r3, r2
   16706:	009b      	lsls	r3, r3, #2
   16708:	001a      	movs	r2, r3
   1670a:	687b      	ldr	r3, [r7, #4]
   1670c:	189b      	adds	r3, r3, r2
   1670e:	681a      	ldr	r2, [r3, #0]
   16710:	003b      	movs	r3, r7
   16712:	881b      	ldrh	r3, [r3, #0]
   16714:	429a      	cmp	r2, r3
   16716:	d10a      	bne.n	1672e <tiny_state_find+0x56>
        {
            return &states[i];
   16718:	230e      	movs	r3, #14
   1671a:	18fb      	adds	r3, r7, r3
   1671c:	881a      	ldrh	r2, [r3, #0]
   1671e:	0013      	movs	r3, r2
   16720:	005b      	lsls	r3, r3, #1
   16722:	189b      	adds	r3, r3, r2
   16724:	009b      	lsls	r3, r3, #2
   16726:	001a      	movs	r2, r3
   16728:	687b      	ldr	r3, [r7, #4]
   1672a:	189b      	adds	r3, r3, r2
   1672c:	e00e      	b.n	1674c <tiny_state_find+0x74>
    for(i=0;i<count;i++)
   1672e:	230e      	movs	r3, #14
   16730:	18fb      	adds	r3, r7, r3
   16732:	881a      	ldrh	r2, [r3, #0]
   16734:	230e      	movs	r3, #14
   16736:	18fb      	adds	r3, r7, r3
   16738:	3201      	adds	r2, #1
   1673a:	801a      	strh	r2, [r3, #0]
   1673c:	230e      	movs	r3, #14
   1673e:	18fa      	adds	r2, r7, r3
   16740:	1cbb      	adds	r3, r7, #2
   16742:	8812      	ldrh	r2, [r2, #0]
   16744:	881b      	ldrh	r3, [r3, #0]
   16746:	429a      	cmp	r2, r3
   16748:	d3d7      	bcc.n	166fa <tiny_state_find+0x22>
        }
    }
    return NULL;
   1674a:	2300      	movs	r3, #0
}
   1674c:	0018      	movs	r0, r3
   1674e:	46bd      	mov	sp, r7
   16750:	b004      	add	sp, #16
   16752:	bd80      	pop	{r7, pc}

00016754 <tiny_state_driver>:

/* Tiny state machine driver - doesn't require states to be ordered to be indexed */
static void inline tiny_state_driver(void* context)
{
   16754:	b580      	push	{r7, lr}
   16756:	b084      	sub	sp, #16
   16758:	af00      	add	r7, sp, #0
   1675a:	6078      	str	r0, [r7, #4]
    tiny_state_ctx * pCtx = (tiny_state_ctx*)context;
   1675c:	687b      	ldr	r3, [r7, #4]
   1675e:	60fb      	str	r3, [r7, #12]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
   16760:	68fb      	ldr	r3, [r7, #12]
   16762:	6858      	ldr	r0, [r3, #4]
   16764:	68fb      	ldr	r3, [r7, #12]
   16766:	8859      	ldrh	r1, [r3, #2]
   16768:	68fb      	ldr	r3, [r7, #12]
   1676a:	881b      	ldrh	r3, [r3, #0]
   1676c:	001a      	movs	r2, r3
   1676e:	4b0a      	ldr	r3, [pc, #40]	; (16798 <tiny_state_driver+0x44>)
   16770:	4798      	blx	r3
   16772:	0003      	movs	r3, r0
   16774:	60bb      	str	r3, [r7, #8]
    if(pState && pState->_f)
   16776:	68bb      	ldr	r3, [r7, #8]
   16778:	2b00      	cmp	r3, #0
   1677a:	d008      	beq.n	1678e <tiny_state_driver+0x3a>
   1677c:	68bb      	ldr	r3, [r7, #8]
   1677e:	689b      	ldr	r3, [r3, #8]
   16780:	2b00      	cmp	r3, #0
   16782:	d004      	beq.n	1678e <tiny_state_driver+0x3a>
    {
        pState->_f(context);
   16784:	68bb      	ldr	r3, [r7, #8]
   16786:	689b      	ldr	r3, [r3, #8]
   16788:	687a      	ldr	r2, [r7, #4]
   1678a:	0010      	movs	r0, r2
   1678c:	4798      	blx	r3
    }
}
   1678e:	46c0      	nop			; (mov r8, r8)
   16790:	46bd      	mov	sp, r7
   16792:	b004      	add	sp, #16
   16794:	bd80      	pop	{r7, pc}
   16796:	46c0      	nop			; (mov r8, r8)
   16798:	000166d9 	.word	0x000166d9

0001679c <tiny_state_update>:

/* Update the next state */
static void inline tiny_state_update(void* context, uint32_t next)
{
   1679c:	b580      	push	{r7, lr}
   1679e:	b082      	sub	sp, #8
   167a0:	af00      	add	r7, sp, #0
   167a2:	6078      	str	r0, [r7, #4]
   167a4:	6039      	str	r1, [r7, #0]
    ((tiny_state_ctx*)context)->state = next;
   167a6:	683b      	ldr	r3, [r7, #0]
   167a8:	b29a      	uxth	r2, r3
   167aa:	687b      	ldr	r3, [r7, #4]
   167ac:	801a      	strh	r2, [r3, #0]
}
   167ae:	46c0      	nop			; (mov r8, r8)
   167b0:	46bd      	mov	sp, r7
   167b2:	b002      	add	sp, #8
   167b4:	bd80      	pop	{r7, pc}
	...

000167b8 <wifi_counter_finished>:
    uint32_t            txlen;
} g_wifi_context;

/* Check if the timeout has elapsed */
static inline bool wifi_counter_finished(void)
{
   167b8:	b580      	push	{r7, lr}
   167ba:	af00      	add	r7, sp, #0
    return (0 == g_wifi_context.holdoff);
   167bc:	4b03      	ldr	r3, [pc, #12]	; (167cc <wifi_counter_finished+0x14>)
   167be:	689b      	ldr	r3, [r3, #8]
   167c0:	425a      	negs	r2, r3
   167c2:	4153      	adcs	r3, r2
   167c4:	b2db      	uxtb	r3, r3
}
   167c6:	0018      	movs	r0, r3
   167c8:	46bd      	mov	sp, r7
   167ca:	bd80      	pop	{r7, pc}
   167cc:	200005d8 	.word	0x200005d8

000167d0 <wifi_counter_set>:

/* Set timeout in milliseconds */
static void wifi_counter_set(uint32_t val)
{
   167d0:	b580      	push	{r7, lr}
   167d2:	b082      	sub	sp, #8
   167d4:	af00      	add	r7, sp, #0
   167d6:	6078      	str	r0, [r7, #4]
    /* Convert to loop time*/
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
   167d8:	687a      	ldr	r2, [r7, #4]
   167da:	4b0b      	ldr	r3, [pc, #44]	; (16808 <wifi_counter_set+0x38>)
   167dc:	2164      	movs	r1, #100	; 0x64
   167de:	0010      	movs	r0, r2
   167e0:	4798      	blx	r3
   167e2:	0003      	movs	r3, r0
   167e4:	001a      	movs	r2, r3
   167e6:	4b09      	ldr	r3, [pc, #36]	; (1680c <wifi_counter_set+0x3c>)
   167e8:	609a      	str	r2, [r3, #8]

    if(val && !g_wifi_context.holdoff)
   167ea:	687b      	ldr	r3, [r7, #4]
   167ec:	2b00      	cmp	r3, #0
   167ee:	d006      	beq.n	167fe <wifi_counter_set+0x2e>
   167f0:	4b06      	ldr	r3, [pc, #24]	; (1680c <wifi_counter_set+0x3c>)
   167f2:	689b      	ldr	r3, [r3, #8]
   167f4:	2b00      	cmp	r3, #0
   167f6:	d102      	bne.n	167fe <wifi_counter_set+0x2e>
    {
        g_wifi_context.holdoff = 1;
   167f8:	4b04      	ldr	r3, [pc, #16]	; (1680c <wifi_counter_set+0x3c>)
   167fa:	2201      	movs	r2, #1
   167fc:	609a      	str	r2, [r3, #8]
    }
}
   167fe:	46c0      	nop			; (mov r8, r8)
   16800:	46bd      	mov	sp, r7
   16802:	b002      	add	sp, #8
   16804:	bd80      	pop	{r7, pc}
   16806:	46c0      	nop			; (mov r8, r8)
   16808:	00019d81 	.word	0x00019d81
   1680c:	200005d8 	.word	0x200005d8

00016810 <wifi_timer_update>:

/* Must be called on the WIFI_UPDATE_PERIOD */
void wifi_timer_update(void)
{
   16810:	b580      	push	{r7, lr}
   16812:	af00      	add	r7, sp, #0
    if(g_wifi_context.holdoff)
   16814:	4b05      	ldr	r3, [pc, #20]	; (1682c <wifi_timer_update+0x1c>)
   16816:	689b      	ldr	r3, [r3, #8]
   16818:	2b00      	cmp	r3, #0
   1681a:	d004      	beq.n	16826 <wifi_timer_update+0x16>
    {
        g_wifi_context.holdoff--;
   1681c:	4b03      	ldr	r3, [pc, #12]	; (1682c <wifi_timer_update+0x1c>)
   1681e:	689b      	ldr	r3, [r3, #8]
   16820:	1e5a      	subs	r2, r3, #1
   16822:	4b02      	ldr	r3, [pc, #8]	; (1682c <wifi_timer_update+0x1c>)
   16824:	609a      	str	r2, [r3, #8]
    }
}
   16826:	46c0      	nop			; (mov r8, r8)
   16828:	46bd      	mov	sp, r7
   1682a:	bd80      	pop	{r7, pc}
   1682c:	200005d8 	.word	0x200005d8

00016830 <wifi_is_ready>:
    WIFI_STATE_TIMEOUT,
    WIFI_STATE_ERROR        /**< Error states can be anywhere but are recommended at the end */
} WIFI_STATES;

int wifi_is_ready(void)
{
   16830:	b580      	push	{r7, lr}
   16832:	af00      	add	r7, sp, #0
    return (WIFI_STATE_READY == g_wifi_context.state.state);
   16834:	4b04      	ldr	r3, [pc, #16]	; (16848 <wifi_is_ready+0x18>)
   16836:	881b      	ldrh	r3, [r3, #0]
   16838:	3b04      	subs	r3, #4
   1683a:	425a      	negs	r2, r3
   1683c:	4153      	adcs	r3, r2
   1683e:	b2db      	uxtb	r3, r3
}
   16840:	0018      	movs	r0, r3
   16842:	46bd      	mov	sp, r7
   16844:	bd80      	pop	{r7, pc}
   16846:	46c0      	nop			; (mov r8, r8)
   16848:	200005d8 	.word	0x200005d8

0001684c <wifi_is_busy>:

int wifi_is_busy(void)
{
   1684c:	b580      	push	{r7, lr}
   1684e:	af00      	add	r7, sp, #0
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
   16850:	4b04      	ldr	r3, [pc, #16]	; (16864 <wifi_is_busy+0x18>)
   16852:	881b      	ldrh	r3, [r3, #0]
   16854:	3b03      	subs	r3, #3
   16856:	425a      	negs	r2, r3
   16858:	4153      	adcs	r3, r2
   1685a:	b2db      	uxtb	r3, r3
}
   1685c:	0018      	movs	r0, r3
   1685e:	46bd      	mov	sp, r7
   16860:	bd80      	pop	{r7, pc}
   16862:	46c0      	nop			; (mov r8, r8)
   16864:	200005d8 	.word	0x200005d8

00016868 <wifi_has_error>:

int wifi_has_error(void)
{
   16868:	b580      	push	{r7, lr}
   1686a:	af00      	add	r7, sp, #0
    return (WIFI_STATE_ERROR == g_wifi_context.state.state);
   1686c:	4b04      	ldr	r3, [pc, #16]	; (16880 <wifi_has_error+0x18>)
   1686e:	881b      	ldrh	r3, [r3, #0]
   16870:	3b06      	subs	r3, #6
   16872:	425a      	negs	r2, r3
   16874:	4153      	adcs	r3, r2
   16876:	b2db      	uxtb	r3, r3
}
   16878:	0018      	movs	r0, r3
   1687a:	46bd      	mov	sp, r7
   1687c:	bd80      	pop	{r7, pc}
   1687e:	46c0      	nop			; (mov r8, r8)
   16880:	200005d8 	.word	0x200005d8

00016884 <wifi_state_update>:

static void wifi_state_update(void* ctx, uint32_t next, uint32_t wait)
{
   16884:	b580      	push	{r7, lr}
   16886:	b086      	sub	sp, #24
   16888:	af00      	add	r7, sp, #0
   1688a:	60f8      	str	r0, [r7, #12]
   1688c:	60b9      	str	r1, [r7, #8]
   1688e:	607a      	str	r2, [r7, #4]
    struct _g_wifi_context * pCtx = ctx;
   16890:	68fb      	ldr	r3, [r7, #12]
   16892:	617b      	str	r3, [r7, #20]
  __ASM volatile ("nop");
   16894:	46c0      	nop			; (mov r8, r8)

    WIFI_PRINTF("%s(%u) -> %s(%u)\r\n", tiny_state_name(ctx, pCtx->state.state), 
        pCtx->state.state, tiny_state_name(ctx, next), next);

    /* Set the new state */
    tiny_state_update(ctx, next);
   16896:	68ba      	ldr	r2, [r7, #8]
   16898:	68fb      	ldr	r3, [r7, #12]
   1689a:	0011      	movs	r1, r2
   1689c:	0018      	movs	r0, r3
   1689e:	4b05      	ldr	r3, [pc, #20]	; (168b4 <wifi_state_update+0x30>)
   168a0:	4798      	blx	r3

    /* Set the holdoff/wait */
    wifi_counter_set(wait);
   168a2:	687b      	ldr	r3, [r7, #4]
   168a4:	0018      	movs	r0, r3
   168a6:	4b04      	ldr	r3, [pc, #16]	; (168b8 <wifi_state_update+0x34>)
   168a8:	4798      	blx	r3
}
   168aa:	46c0      	nop			; (mov r8, r8)
   168ac:	46bd      	mov	sp, r7
   168ae:	b006      	add	sp, #24
   168b0:	bd80      	pop	{r7, pc}
   168b2:	46c0      	nop			; (mov r8, r8)
   168b4:	0001679d 	.word	0x0001679d
   168b8:	000167d1 	.word	0x000167d1

000168bc <wifi_print_winc_version>:

static sint8 wifi_print_winc_version(void)
{
   168bc:	b590      	push	{r4, r7, lr}
   168be:	b08d      	sub	sp, #52	; 0x34
   168c0:	af00      	add	r7, sp, #0
    sint8       status;
    tstrM2mRev  wifi_version;

    // Get the WINC1500 WIFI module firmware version information
    status = m2m_wifi_get_firmware_version(&wifi_version);
   168c2:	232f      	movs	r3, #47	; 0x2f
   168c4:	18fc      	adds	r4, r7, r3
   168c6:	1d3b      	adds	r3, r7, #4
   168c8:	0018      	movs	r0, r3
   168ca:	4b0b      	ldr	r3, [pc, #44]	; (168f8 <wifi_print_winc_version+0x3c>)
   168cc:	4798      	blx	r3
   168ce:	0003      	movs	r3, r0
   168d0:	7023      	strb	r3, [r4, #0]
    if(M2M_SUCCESS == status)
   168d2:	232f      	movs	r3, #47	; 0x2f
   168d4:	18fb      	adds	r3, r7, r3
   168d6:	781b      	ldrb	r3, [r3, #0]
   168d8:	b25b      	sxtb	r3, r3
   168da:	2b00      	cmp	r3, #0
   168dc:	d103      	bne.n	168e6 <wifi_print_winc_version+0x2a>
   168de:	46c0      	nop			; (mov r8, r8)
   168e0:	46c0      	nop			; (mov r8, r8)
   168e2:	46c0      	nop			; (mov r8, r8)
   168e4:	46c0      	nop			; (mov r8, r8)
            wifi_version.u8DriverPatch);
        WIFI_PRINTF("WINC1500: Driver Version: %d.%d.%d\r\n",
            M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,
            M2M_RELEASE_VERSION_PATCH_NO);
    }
    return status;
   168e6:	232f      	movs	r3, #47	; 0x2f
   168e8:	18fb      	adds	r3, r7, r3
   168ea:	781b      	ldrb	r3, [r3, #0]
   168ec:	b25b      	sxtb	r3, r3
}
   168ee:	0018      	movs	r0, r3
   168f0:	46bd      	mov	sp, r7
   168f2:	b00d      	add	sp, #52	; 0x34
   168f4:	bd90      	pop	{r4, r7, pc}
   168f6:	46c0      	nop			; (mov r8, r8)
   168f8:	000087a5 	.word	0x000087a5

000168fc <wifi_socket_handler_cb>:

static void wifi_socket_handler_cb(SOCKET sock, uint8 u8Msg, void * pvMsg)
{
   168fc:	b580      	push	{r7, lr}
   168fe:	b086      	sub	sp, #24
   16900:	af00      	add	r7, sp, #0
   16902:	603a      	str	r2, [r7, #0]
   16904:	1dfb      	adds	r3, r7, #7
   16906:	1c02      	adds	r2, r0, #0
   16908:	701a      	strb	r2, [r3, #0]
   1690a:	1dbb      	adds	r3, r7, #6
   1690c:	1c0a      	adds	r2, r1, #0
   1690e:	701a      	strb	r2, [r3, #0]
    tstrSocketConnectMsg *socket_connect_message = NULL;
   16910:	2300      	movs	r3, #0
   16912:	617b      	str	r3, [r7, #20]
    tstrSocketRecvMsg *socket_receive_message = NULL;
   16914:	2300      	movs	r3, #0
   16916:	613b      	str	r3, [r7, #16]
    sint16 *bytes_sent = NULL;
   16918:	2300      	movs	r3, #0
   1691a:	60fb      	str	r3, [r7, #12]
    
    // Check for the WINC1500 WIFI socket events
    switch (u8Msg)
   1691c:	1dbb      	adds	r3, r7, #6
   1691e:	781b      	ldrb	r3, [r3, #0]
   16920:	2b06      	cmp	r3, #6
   16922:	d020      	beq.n	16966 <wifi_socket_handler_cb+0x6a>
   16924:	dc02      	bgt.n	1692c <wifi_socket_handler_cb+0x30>
   16926:	2b05      	cmp	r3, #5
   16928:	d005      	beq.n	16936 <wifi_socket_handler_cb+0x3a>
        }
        break;

        default:
        // Do nothing
        break;
   1692a:	e070      	b.n	16a0e <wifi_socket_handler_cb+0x112>
    switch (u8Msg)
   1692c:	2b07      	cmp	r3, #7
   1692e:	d042      	beq.n	169b6 <wifi_socket_handler_cb+0xba>
   16930:	2b09      	cmp	r3, #9
   16932:	d018      	beq.n	16966 <wifi_socket_handler_cb+0x6a>
        break;
   16934:	e06b      	b.n	16a0e <wifi_socket_handler_cb+0x112>
        socket_connect_message = (tstrSocketConnectMsg*)pvMsg;
   16936:	683b      	ldr	r3, [r7, #0]
   16938:	617b      	str	r3, [r7, #20]
        if (socket_connect_message != NULL)
   1693a:	697b      	ldr	r3, [r7, #20]
   1693c:	2b00      	cmp	r3, #0
   1693e:	d061      	beq.n	16a04 <wifi_socket_handler_cb+0x108>
            if (socket_connect_message->s8Error != SOCK_ERR_NO_ERROR)
   16940:	697b      	ldr	r3, [r7, #20]
   16942:	785b      	ldrb	r3, [r3, #1]
   16944:	b25b      	sxtb	r3, r3
   16946:	2b00      	cmp	r3, #0
   16948:	d006      	beq.n	16958 <wifi_socket_handler_cb+0x5c>
                wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   1694a:	4a33      	ldr	r2, [pc, #204]	; (16a18 <wifi_socket_handler_cb+0x11c>)
   1694c:	4b33      	ldr	r3, [pc, #204]	; (16a1c <wifi_socket_handler_cb+0x120>)
   1694e:	2106      	movs	r1, #6
   16950:	0018      	movs	r0, r3
   16952:	4b33      	ldr	r3, [pc, #204]	; (16a20 <wifi_socket_handler_cb+0x124>)
   16954:	4798      	blx	r3
        break;
   16956:	e055      	b.n	16a04 <wifi_socket_handler_cb+0x108>
                wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16958:	4b30      	ldr	r3, [pc, #192]	; (16a1c <wifi_socket_handler_cb+0x120>)
   1695a:	2200      	movs	r2, #0
   1695c:	2104      	movs	r1, #4
   1695e:	0018      	movs	r0, r3
   16960:	4b2f      	ldr	r3, [pc, #188]	; (16a20 <wifi_socket_handler_cb+0x124>)
   16962:	4798      	blx	r3
        break;
   16964:	e04e      	b.n	16a04 <wifi_socket_handler_cb+0x108>
        socket_receive_message = (tstrSocketRecvMsg*)pvMsg;
   16966:	683b      	ldr	r3, [r7, #0]
   16968:	613b      	str	r3, [r7, #16]
        if (socket_receive_message != NULL)
   1696a:	693b      	ldr	r3, [r7, #16]
   1696c:	2b00      	cmp	r3, #0
   1696e:	d04b      	beq.n	16a08 <wifi_socket_handler_cb+0x10c>
            if (socket_receive_message->s16BufferSize >= 0)
   16970:	693b      	ldr	r3, [r7, #16]
   16972:	2204      	movs	r2, #4
   16974:	5e9b      	ldrsh	r3, [r3, r2]
   16976:	2b00      	cmp	r3, #0
   16978:	db0a      	blt.n	16990 <wifi_socket_handler_cb+0x94>
                if (socket_receive_message->u16RemainingSize == 0)
   1697a:	693b      	ldr	r3, [r7, #16]
   1697c:	88db      	ldrh	r3, [r3, #6]
   1697e:	2b00      	cmp	r3, #0
   16980:	d142      	bne.n	16a08 <wifi_socket_handler_cb+0x10c>
                    wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16982:	4b26      	ldr	r3, [pc, #152]	; (16a1c <wifi_socket_handler_cb+0x120>)
   16984:	2200      	movs	r2, #0
   16986:	2104      	movs	r1, #4
   16988:	0018      	movs	r0, r3
   1698a:	4b25      	ldr	r3, [pc, #148]	; (16a20 <wifi_socket_handler_cb+0x124>)
   1698c:	4798      	blx	r3
        break;
   1698e:	e03b      	b.n	16a08 <wifi_socket_handler_cb+0x10c>
                if (socket_receive_message->s16BufferSize == SOCK_ERR_TIMEOUT)
   16990:	693b      	ldr	r3, [r7, #16]
   16992:	2204      	movs	r2, #4
   16994:	5e9b      	ldrsh	r3, [r3, r2]
   16996:	330d      	adds	r3, #13
   16998:	d106      	bne.n	169a8 <wifi_socket_handler_cb+0xac>
                    wifi_state_update(&g_wifi_context, WIFI_STATE_TIMEOUT, WIFI_COUNTER_NO_WAIT);
   1699a:	4b20      	ldr	r3, [pc, #128]	; (16a1c <wifi_socket_handler_cb+0x120>)
   1699c:	2200      	movs	r2, #0
   1699e:	2105      	movs	r1, #5
   169a0:	0018      	movs	r0, r3
   169a2:	4b1f      	ldr	r3, [pc, #124]	; (16a20 <wifi_socket_handler_cb+0x124>)
   169a4:	4798      	blx	r3
        break;
   169a6:	e02f      	b.n	16a08 <wifi_socket_handler_cb+0x10c>
                    wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   169a8:	4a1b      	ldr	r2, [pc, #108]	; (16a18 <wifi_socket_handler_cb+0x11c>)
   169aa:	4b1c      	ldr	r3, [pc, #112]	; (16a1c <wifi_socket_handler_cb+0x120>)
   169ac:	2106      	movs	r1, #6
   169ae:	0018      	movs	r0, r3
   169b0:	4b1b      	ldr	r3, [pc, #108]	; (16a20 <wifi_socket_handler_cb+0x124>)
   169b2:	4798      	blx	r3
        break;
   169b4:	e028      	b.n	16a08 <wifi_socket_handler_cb+0x10c>
        bytes_sent = (sint16*)pvMsg;
   169b6:	683b      	ldr	r3, [r7, #0]
   169b8:	60fb      	str	r3, [r7, #12]
        if (*bytes_sent <= 0 || *bytes_sent > (int32_t)g_wifi_context.txlen)
   169ba:	68fb      	ldr	r3, [r7, #12]
   169bc:	2200      	movs	r2, #0
   169be:	5e9b      	ldrsh	r3, [r3, r2]
   169c0:	2b00      	cmp	r3, #0
   169c2:	dd08      	ble.n	169d6 <wifi_socket_handler_cb+0xda>
   169c4:	68fb      	ldr	r3, [r7, #12]
   169c6:	2200      	movs	r2, #0
   169c8:	5e9b      	ldrsh	r3, [r3, r2]
   169ca:	0019      	movs	r1, r3
   169cc:	4b13      	ldr	r3, [pc, #76]	; (16a1c <wifi_socket_handler_cb+0x120>)
   169ce:	4a15      	ldr	r2, [pc, #84]	; (16a24 <wifi_socket_handler_cb+0x128>)
   169d0:	589b      	ldr	r3, [r3, r2]
   169d2:	4299      	cmp	r1, r3
   169d4:	dd06      	ble.n	169e4 <wifi_socket_handler_cb+0xe8>
            wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   169d6:	4a10      	ldr	r2, [pc, #64]	; (16a18 <wifi_socket_handler_cb+0x11c>)
   169d8:	4b10      	ldr	r3, [pc, #64]	; (16a1c <wifi_socket_handler_cb+0x120>)
   169da:	2106      	movs	r1, #6
   169dc:	0018      	movs	r0, r3
   169de:	4b10      	ldr	r3, [pc, #64]	; (16a20 <wifi_socket_handler_cb+0x124>)
   169e0:	4798      	blx	r3
        break;
   169e2:	e013      	b.n	16a0c <wifi_socket_handler_cb+0x110>
        else if (*bytes_sent == g_wifi_context.txlen)
   169e4:	68fb      	ldr	r3, [r7, #12]
   169e6:	2200      	movs	r2, #0
   169e8:	5e9b      	ldrsh	r3, [r3, r2]
   169ea:	0019      	movs	r1, r3
   169ec:	4b0b      	ldr	r3, [pc, #44]	; (16a1c <wifi_socket_handler_cb+0x120>)
   169ee:	4a0d      	ldr	r2, [pc, #52]	; (16a24 <wifi_socket_handler_cb+0x128>)
   169f0:	589b      	ldr	r3, [r3, r2]
   169f2:	4299      	cmp	r1, r3
   169f4:	d10a      	bne.n	16a0c <wifi_socket_handler_cb+0x110>
            wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   169f6:	4b09      	ldr	r3, [pc, #36]	; (16a1c <wifi_socket_handler_cb+0x120>)
   169f8:	2200      	movs	r2, #0
   169fa:	2104      	movs	r1, #4
   169fc:	0018      	movs	r0, r3
   169fe:	4b08      	ldr	r3, [pc, #32]	; (16a20 <wifi_socket_handler_cb+0x124>)
   16a00:	4798      	blx	r3
        break;
   16a02:	e003      	b.n	16a0c <wifi_socket_handler_cb+0x110>
        break;
   16a04:	46c0      	nop			; (mov r8, r8)
   16a06:	e002      	b.n	16a0e <wifi_socket_handler_cb+0x112>
        break;
   16a08:	46c0      	nop			; (mov r8, r8)
   16a0a:	e000      	b.n	16a0e <wifi_socket_handler_cb+0x112>
        break;
   16a0c:	46c0      	nop			; (mov r8, r8)
    }
}
   16a0e:	46c0      	nop			; (mov r8, r8)
   16a10:	46bd      	mov	sp, r7
   16a12:	b006      	add	sp, #24
   16a14:	bd80      	pop	{r7, pc}
   16a16:	46c0      	nop			; (mov r8, r8)
   16a18:	00007530 	.word	0x00007530
   16a1c:	200005d8 	.word	0x200005d8
   16a20:	00016885 	.word	0x00016885
   16a24:	000005f4 	.word	0x000005f4

00016a28 <wifi_resolve_handler_cb>:

static void wifi_resolve_handler_cb(uint8* pu8DomainName, uint32 u32ServerIP)
{
   16a28:	b580      	push	{r7, lr}
   16a2a:	b082      	sub	sp, #8
   16a2c:	af00      	add	r7, sp, #0
   16a2e:	6078      	str	r0, [r7, #4]
   16a30:	6039      	str	r1, [r7, #0]
    if (u32ServerIP != 0)
   16a32:	683b      	ldr	r3, [r7, #0]
   16a34:	2b00      	cmp	r3, #0
   16a36:	d009      	beq.n	16a4c <wifi_resolve_handler_cb+0x24>
    {
        g_wifi_context.host = u32ServerIP;
   16a38:	4b09      	ldr	r3, [pc, #36]	; (16a60 <wifi_resolve_handler_cb+0x38>)
   16a3a:	683a      	ldr	r2, [r7, #0]
   16a3c:	60da      	str	r2, [r3, #12]

        /* Return to ready state */
        wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16a3e:	4b08      	ldr	r3, [pc, #32]	; (16a60 <wifi_resolve_handler_cb+0x38>)
   16a40:	2200      	movs	r2, #0
   16a42:	2104      	movs	r1, #4
   16a44:	0018      	movs	r0, r3
   16a46:	4b07      	ldr	r3, [pc, #28]	; (16a64 <wifi_resolve_handler_cb+0x3c>)
   16a48:	4798      	blx	r3
    else
    {
        /* Failed to Resolve */
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
    }
}
   16a4a:	e005      	b.n	16a58 <wifi_resolve_handler_cb+0x30>
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16a4c:	4a06      	ldr	r2, [pc, #24]	; (16a68 <wifi_resolve_handler_cb+0x40>)
   16a4e:	4b04      	ldr	r3, [pc, #16]	; (16a60 <wifi_resolve_handler_cb+0x38>)
   16a50:	2106      	movs	r1, #6
   16a52:	0018      	movs	r0, r3
   16a54:	4b03      	ldr	r3, [pc, #12]	; (16a64 <wifi_resolve_handler_cb+0x3c>)
   16a56:	4798      	blx	r3
}
   16a58:	46c0      	nop			; (mov r8, r8)
   16a5a:	46bd      	mov	sp, r7
   16a5c:	b002      	add	sp, #8
   16a5e:	bd80      	pop	{r7, pc}
   16a60:	200005d8 	.word	0x200005d8
   16a64:	00016885 	.word	0x00016885
   16a68:	00007530 	.word	0x00007530

00016a6c <wifi_tls_handler_cb>:

static void wifi_tls_handler_cb(uint8 u8MsgType, void * pvMsg)
{
   16a6c:	b580      	push	{r7, lr}
   16a6e:	b082      	sub	sp, #8
   16a70:	af00      	add	r7, sp, #0
   16a72:	0002      	movs	r2, r0
   16a74:	6039      	str	r1, [r7, #0]
   16a76:	1dfb      	adds	r3, r7, #7
   16a78:	701a      	strb	r2, [r3, #0]

}
   16a7a:	46c0      	nop			; (mov r8, r8)
   16a7c:	46bd      	mov	sp, r7
   16a7e:	b002      	add	sp, #8
   16a80:	bd80      	pop	{r7, pc}
	...

00016a84 <wifi_app_cb_process_connection>:

static void wifi_app_cb_process_connection(void *pvMsg)
{
   16a84:	b580      	push	{r7, lr}
   16a86:	b084      	sub	sp, #16
   16a88:	af00      	add	r7, sp, #0
   16a8a:	6078      	str	r0, [r7, #4]
    tstrM2mWifiStateChanged* msg = (tstrM2mWifiStateChanged*)pvMsg;
   16a8c:	687b      	ldr	r3, [r7, #4]
   16a8e:	60fb      	str	r3, [r7, #12]
    
    if(M2M_WIFI_CONNECTED == msg->u8CurrState)
   16a90:	68fb      	ldr	r3, [r7, #12]
   16a92:	781b      	ldrb	r3, [r3, #0]
   16a94:	2b01      	cmp	r3, #1
   16a96:	d104      	bne.n	16aa2 <wifi_app_cb_process_connection+0x1e>
    {
        m2m_wifi_enable_sntp(1);
   16a98:	2001      	movs	r0, #1
   16a9a:	4b0a      	ldr	r3, [pc, #40]	; (16ac4 <wifi_app_cb_process_connection+0x40>)
   16a9c:	4798      	blx	r3
   16a9e:	46c0      	nop			; (mov r8, r8)
    }
    else
    {
        WIFI_PRINTF("WINC1500 WIFI: Unknown connection status: %d\r\n", msg->u8ErrCode);
    }
}
   16aa0:	e00c      	b.n	16abc <wifi_app_cb_process_connection+0x38>
    else if(M2M_WIFI_DISCONNECTED == msg->u8CurrState)
   16aa2:	68fb      	ldr	r3, [r7, #12]
   16aa4:	781b      	ldrb	r3, [r3, #0]
   16aa6:	2b00      	cmp	r3, #0
   16aa8:	d107      	bne.n	16aba <wifi_app_cb_process_connection+0x36>
   16aaa:	46c0      	nop			; (mov r8, r8)
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16aac:	4a06      	ldr	r2, [pc, #24]	; (16ac8 <wifi_app_cb_process_connection+0x44>)
   16aae:	4b07      	ldr	r3, [pc, #28]	; (16acc <wifi_app_cb_process_connection+0x48>)
   16ab0:	2106      	movs	r1, #6
   16ab2:	0018      	movs	r0, r3
   16ab4:	4b06      	ldr	r3, [pc, #24]	; (16ad0 <wifi_app_cb_process_connection+0x4c>)
   16ab6:	4798      	blx	r3
}
   16ab8:	e000      	b.n	16abc <wifi_app_cb_process_connection+0x38>
   16aba:	46c0      	nop			; (mov r8, r8)
   16abc:	46c0      	nop			; (mov r8, r8)
   16abe:	46bd      	mov	sp, r7
   16ac0:	b004      	add	sp, #16
   16ac2:	bd80      	pop	{r7, pc}
   16ac4:	00008829 	.word	0x00008829
   16ac8:	00007530 	.word	0x00007530
   16acc:	200005d8 	.word	0x200005d8
   16ad0:	00016885 	.word	0x00016885

00016ad4 <wifi_app_cb_process_dhcp>:

static void wifi_app_cb_process_dhcp(void *pvMsg)
{
   16ad4:	b580      	push	{r7, lr}
   16ad6:	b084      	sub	sp, #16
   16ad8:	af00      	add	r7, sp, #0
   16ada:	6078      	str	r0, [r7, #4]
    tstrM2MIPConfig* ip_config = (tstrM2MIPConfig*)pvMsg;
   16adc:	687b      	ldr	r3, [r7, #4]
   16ade:	60fb      	str	r3, [r7, #12]
    uint8_t * ip_address = (uint8_t*)&ip_config->u32StaticIP;
   16ae0:	68fb      	ldr	r3, [r7, #12]
   16ae2:	60bb      	str	r3, [r7, #8]
   16ae4:	46c0      	nop			; (mov r8, r8)
    
    WIFI_PRINTF("WINC1500 WIFI: Device IP Address: %u.%u.%u.%u\r\n",
        ip_address[0], ip_address[1], ip_address[3], ip_address[4]);

    /* Transition to ready state */
    wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16ae6:	4b05      	ldr	r3, [pc, #20]	; (16afc <wifi_app_cb_process_dhcp+0x28>)
   16ae8:	2200      	movs	r2, #0
   16aea:	2104      	movs	r1, #4
   16aec:	0018      	movs	r0, r3
   16aee:	4b04      	ldr	r3, [pc, #16]	; (16b00 <wifi_app_cb_process_dhcp+0x2c>)
   16af0:	4798      	blx	r3
}
   16af2:	46c0      	nop			; (mov r8, r8)
   16af4:	46bd      	mov	sp, r7
   16af6:	b004      	add	sp, #16
   16af8:	bd80      	pop	{r7, pc}
   16afa:	46c0      	nop			; (mov r8, r8)
   16afc:	200005d8 	.word	0x200005d8
   16b00:	00016885 	.word	0x00016885

00016b04 <wifi_app_cb_process_time>:

static void wifi_app_cb_process_time(void *pvMsg)
{
   16b04:	b5b0      	push	{r4, r5, r7, lr}
   16b06:	b086      	sub	sp, #24
   16b08:	af02      	add	r7, sp, #8
   16b0a:	6078      	str	r0, [r7, #4]
    tstrSystemTime * msg = (tstrSystemTime *)pvMsg;
   16b0c:	687b      	ldr	r3, [r7, #4]
   16b0e:	60fb      	str	r3, [r7, #12]
   16b10:	46c0      	nop			; (mov r8, r8)

    WIFI_PRINTF("WINC1500 WIFI: Device Time:       %02d/%02d/%02d %02d:%02d:%02d\r\n",
        msg->u16Year, msg->u8Month, msg->u8Day,
        msg->u8Hour, msg->u8Minute, msg->u8Second);

    if(msg->u16Year && msg->u8Month && msg->u8Day)
   16b12:	68fb      	ldr	r3, [r7, #12]
   16b14:	881b      	ldrh	r3, [r3, #0]
   16b16:	2b00      	cmp	r3, #0
   16b18:	d022      	beq.n	16b60 <wifi_app_cb_process_time+0x5c>
   16b1a:	68fb      	ldr	r3, [r7, #12]
   16b1c:	789b      	ldrb	r3, [r3, #2]
   16b1e:	2b00      	cmp	r3, #0
   16b20:	d01e      	beq.n	16b60 <wifi_app_cb_process_time+0x5c>
   16b22:	68fb      	ldr	r3, [r7, #12]
   16b24:	78db      	ldrb	r3, [r3, #3]
   16b26:	2b00      	cmp	r3, #0
   16b28:	d01a      	beq.n	16b60 <wifi_app_cb_process_time+0x5c>
    {
        /* Check if it has already been set before */
        if(!time_utils_get_utc())
   16b2a:	4b12      	ldr	r3, [pc, #72]	; (16b74 <wifi_app_cb_process_time+0x70>)
   16b2c:	4798      	blx	r3
   16b2e:	1e03      	subs	r3, r0, #0
   16b30:	d116      	bne.n	16b60 <wifi_app_cb_process_time+0x5c>
        {
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16b32:	68fb      	ldr	r3, [r7, #12]
   16b34:	881b      	ldrh	r3, [r3, #0]
   16b36:	0018      	movs	r0, r3
   16b38:	68fb      	ldr	r3, [r7, #12]
   16b3a:	789b      	ldrb	r3, [r3, #2]
   16b3c:	0019      	movs	r1, r3
   16b3e:	68fb      	ldr	r3, [r7, #12]
   16b40:	78db      	ldrb	r3, [r3, #3]
   16b42:	001c      	movs	r4, r3
            msg->u8Hour, msg->u8Minute, msg->u8Second);
   16b44:	68fb      	ldr	r3, [r7, #12]
   16b46:	791b      	ldrb	r3, [r3, #4]
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16b48:	001d      	movs	r5, r3
            msg->u8Hour, msg->u8Minute, msg->u8Second);
   16b4a:	68fb      	ldr	r3, [r7, #12]
   16b4c:	795b      	ldrb	r3, [r3, #5]
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16b4e:	001a      	movs	r2, r3
            msg->u8Hour, msg->u8Minute, msg->u8Second);
   16b50:	68fb      	ldr	r3, [r7, #12]
   16b52:	799b      	ldrb	r3, [r3, #6]
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16b54:	9301      	str	r3, [sp, #4]
   16b56:	9200      	str	r2, [sp, #0]
   16b58:	002b      	movs	r3, r5
   16b5a:	0022      	movs	r2, r4
   16b5c:	4c06      	ldr	r4, [pc, #24]	; (16b78 <wifi_app_cb_process_time+0x74>)
   16b5e:	47a0      	blx	r4
        }
    }

    /* Return to ready state */
    wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16b60:	4b06      	ldr	r3, [pc, #24]	; (16b7c <wifi_app_cb_process_time+0x78>)
   16b62:	2200      	movs	r2, #0
   16b64:	2104      	movs	r1, #4
   16b66:	0018      	movs	r0, r3
   16b68:	4b05      	ldr	r3, [pc, #20]	; (16b80 <wifi_app_cb_process_time+0x7c>)
   16b6a:	4798      	blx	r3
}
   16b6c:	46c0      	nop			; (mov r8, r8)
   16b6e:	46bd      	mov	sp, r7
   16b70:	b004      	add	sp, #16
   16b72:	bdb0      	pop	{r4, r5, r7, pc}
   16b74:	00016625 	.word	0x00016625
   16b78:	00016651 	.word	0x00016651
   16b7c:	200005d8 	.word	0x200005d8
   16b80:	00016885 	.word	0x00016885

00016b84 <wifi_app_cb>:

/* WIFI's main callback function handler, for handling the M2M_WIFI events 
   received on the WIFI interface. Such notifications are received in response 
   to WIFI/P2P operations */
static void wifi_app_cb(uint8 u8MsgType, void * pvMsg)
{
   16b84:	b580      	push	{r7, lr}
   16b86:	b084      	sub	sp, #16
   16b88:	af00      	add	r7, sp, #0
   16b8a:	0002      	movs	r2, r0
   16b8c:	6039      	str	r1, [r7, #0]
   16b8e:	1dfb      	adds	r3, r7, #7
   16b90:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for(i=0; i<sizeof(wifi_app_cb_list)/sizeof(wifi_app_cb_list[0]); i++)
   16b92:	230f      	movs	r3, #15
   16b94:	18fb      	adds	r3, r7, r3
   16b96:	2200      	movs	r2, #0
   16b98:	701a      	strb	r2, [r3, #0]
   16b9a:	e026      	b.n	16bea <wifi_app_cb+0x66>
    {
        if(u8MsgType == wifi_app_cb_list[i]._id)
   16b9c:	230f      	movs	r3, #15
   16b9e:	18fb      	adds	r3, r7, r3
   16ba0:	781a      	ldrb	r2, [r3, #0]
   16ba2:	4b17      	ldr	r3, [pc, #92]	; (16c00 <wifi_app_cb+0x7c>)
   16ba4:	00d2      	lsls	r2, r2, #3
   16ba6:	5cd3      	ldrb	r3, [r2, r3]
   16ba8:	1dfa      	adds	r2, r7, #7
   16baa:	7812      	ldrb	r2, [r2, #0]
   16bac:	429a      	cmp	r2, r3
   16bae:	d115      	bne.n	16bdc <wifi_app_cb+0x58>
        {
            if(wifi_app_cb_list[i]._func)
   16bb0:	230f      	movs	r3, #15
   16bb2:	18fb      	adds	r3, r7, r3
   16bb4:	781b      	ldrb	r3, [r3, #0]
   16bb6:	4a12      	ldr	r2, [pc, #72]	; (16c00 <wifi_app_cb+0x7c>)
   16bb8:	00db      	lsls	r3, r3, #3
   16bba:	18d3      	adds	r3, r2, r3
   16bbc:	3304      	adds	r3, #4
   16bbe:	681b      	ldr	r3, [r3, #0]
   16bc0:	2b00      	cmp	r3, #0
   16bc2:	d018      	beq.n	16bf6 <wifi_app_cb+0x72>
            {
                wifi_app_cb_list[i]._func(pvMsg);
   16bc4:	230f      	movs	r3, #15
   16bc6:	18fb      	adds	r3, r7, r3
   16bc8:	781b      	ldrb	r3, [r3, #0]
   16bca:	4a0d      	ldr	r2, [pc, #52]	; (16c00 <wifi_app_cb+0x7c>)
   16bcc:	00db      	lsls	r3, r3, #3
   16bce:	18d3      	adds	r3, r2, r3
   16bd0:	3304      	adds	r3, #4
   16bd2:	681b      	ldr	r3, [r3, #0]
   16bd4:	683a      	ldr	r2, [r7, #0]
   16bd6:	0010      	movs	r0, r2
   16bd8:	4798      	blx	r3
            }
            break;
   16bda:	e00c      	b.n	16bf6 <wifi_app_cb+0x72>
    for(i=0; i<sizeof(wifi_app_cb_list)/sizeof(wifi_app_cb_list[0]); i++)
   16bdc:	230f      	movs	r3, #15
   16bde:	18fb      	adds	r3, r7, r3
   16be0:	781a      	ldrb	r2, [r3, #0]
   16be2:	230f      	movs	r3, #15
   16be4:	18fb      	adds	r3, r7, r3
   16be6:	3201      	adds	r2, #1
   16be8:	701a      	strb	r2, [r3, #0]
   16bea:	230f      	movs	r3, #15
   16bec:	18fb      	adds	r3, r7, r3
   16bee:	781b      	ldrb	r3, [r3, #0]
   16bf0:	2b02      	cmp	r3, #2
   16bf2:	d9d3      	bls.n	16b9c <wifi_app_cb+0x18>
        }
    }
}
   16bf4:	e000      	b.n	16bf8 <wifi_app_cb+0x74>
            break;
   16bf6:	46c0      	nop			; (mov r8, r8)
}
   16bf8:	46c0      	nop			; (mov r8, r8)
   16bfa:	46bd      	mov	sp, r7
   16bfc:	b004      	add	sp, #16
   16bfe:	bd80      	pop	{r7, pc}
   16c00:	20000168 	.word	0x20000168

00016c04 <wifi_state_init>:

/* Handle the WIFI initialization state */
static void wifi_state_init(void * ctx)
{
   16c04:	b580      	push	{r7, lr}
   16c06:	b088      	sub	sp, #32
   16c08:	af00      	add	r7, sp, #0
   16c0a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam wifi_paramaters;

    /* Wait until the device has been "provisioned" or is configured to run */
    if(!config_ready())
   16c0c:	4b1e      	ldr	r3, [pc, #120]	; (16c88 <wifi_state_init+0x84>)
   16c0e:	4798      	blx	r3
   16c10:	0003      	movs	r3, r0
   16c12:	001a      	movs	r2, r3
   16c14:	2301      	movs	r3, #1
   16c16:	4053      	eors	r3, r2
   16c18:	b2db      	uxtb	r3, r3
   16c1a:	2b00      	cmp	r3, #0
   16c1c:	d12f      	bne.n	16c7e <wifi_state_init+0x7a>
    {
        return;
    }

    /* Perform the BSP Initialization for the WIFI module */
    nm_bsp_init();
   16c1e:	4b1b      	ldr	r3, [pc, #108]	; (16c8c <wifi_state_init+0x88>)
   16c20:	4798      	blx	r3

    /* Set the WIFI configuration attributes */
    m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
   16c22:	2308      	movs	r3, #8
   16c24:	18fb      	adds	r3, r7, r3
   16c26:	2218      	movs	r2, #24
   16c28:	2100      	movs	r1, #0
   16c2a:	0018      	movs	r0, r3
   16c2c:	4b18      	ldr	r3, [pc, #96]	; (16c90 <wifi_state_init+0x8c>)
   16c2e:	4798      	blx	r3
    wifi_paramaters.pfAppWifiCb = wifi_app_cb;
   16c30:	2308      	movs	r3, #8
   16c32:	18fb      	adds	r3, r7, r3
   16c34:	4a17      	ldr	r2, [pc, #92]	; (16c94 <wifi_state_init+0x90>)
   16c36:	601a      	str	r2, [r3, #0]

    /* Initialize the WINC1500 WIFI module */
    if(M2M_SUCCESS != m2m_wifi_init(&wifi_paramaters))
   16c38:	2308      	movs	r3, #8
   16c3a:	18fb      	adds	r3, r7, r3
   16c3c:	0018      	movs	r0, r3
   16c3e:	4b16      	ldr	r3, [pc, #88]	; (16c98 <wifi_state_init+0x94>)
   16c40:	4798      	blx	r3
   16c42:	1e03      	subs	r3, r0, #0
   16c44:	d001      	beq.n	16c4a <wifi_state_init+0x46>
   16c46:	46c0      	nop			; (mov r8, r8)
    {
        WIFI_PRINTF("m2m_wifi_init failed\n");
        return;
   16c48:	e01a      	b.n	16c80 <wifi_state_init+0x7c>
    }

    /* Configure the WIFI IO lines */
    m2m_periph_pullup_ctrl( M2M_PERIPH_PULLUP_DIS_HOST_WAKEUP |
   16c4a:	4b14      	ldr	r3, [pc, #80]	; (16c9c <wifi_state_init+0x98>)
   16c4c:	2100      	movs	r1, #0
   16c4e:	0018      	movs	r0, r3
   16c50:	4b13      	ldr	r3, [pc, #76]	; (16ca0 <wifi_state_init+0x9c>)
   16c52:	4798      	blx	r3
                            M2M_PERIPH_PULLUP_DIS_SD_CMD_SPI_SCK |
                            M2M_PERIPH_PULLUP_DIS_SD_DAT0_SPI_TXD, false);

    /* Initialize the WINC1500 WIFI socket handler */
    socketInit();
   16c54:	4b13      	ldr	r3, [pc, #76]	; (16ca4 <wifi_state_init+0xa0>)
   16c56:	4798      	blx	r3

    /* Register the WIFI socket callbacks */
    registerSocketCallback(wifi_socket_handler_cb, wifi_resolve_handler_cb);
   16c58:	4a13      	ldr	r2, [pc, #76]	; (16ca8 <wifi_state_init+0xa4>)
   16c5a:	4b14      	ldr	r3, [pc, #80]	; (16cac <wifi_state_init+0xa8>)
   16c5c:	0011      	movs	r1, r2
   16c5e:	0018      	movs	r0, r3
   16c60:	4b13      	ldr	r3, [pc, #76]	; (16cb0 <wifi_state_init+0xac>)
   16c62:	4798      	blx	r3

    /* Print the current WINC software */
    if(M2M_SUCCESS != wifi_print_winc_version())
   16c64:	4b13      	ldr	r3, [pc, #76]	; (16cb4 <wifi_state_init+0xb0>)
   16c66:	4798      	blx	r3
   16c68:	1e03      	subs	r3, r0, #0
   16c6a:	d001      	beq.n	16c70 <wifi_state_init+0x6c>
   16c6c:	46c0      	nop			; (mov r8, r8)
    {
        WIFI_PRINTF("Failed to retrieve WINC firmware version\r\n");
        return;
   16c6e:	e007      	b.n	16c80 <wifi_state_init+0x7c>
    }

    /* Move to the next state */
    wifi_state_update(ctx, WIFI_STATE_TLS_INIT, WIFI_COUNTER_NO_WAIT);
   16c70:	687b      	ldr	r3, [r7, #4]
   16c72:	2200      	movs	r2, #0
   16c74:	2101      	movs	r1, #1
   16c76:	0018      	movs	r0, r3
   16c78:	4b0f      	ldr	r3, [pc, #60]	; (16cb8 <wifi_state_init+0xb4>)
   16c7a:	4798      	blx	r3
   16c7c:	e000      	b.n	16c80 <wifi_state_init+0x7c>
        return;
   16c7e:	46c0      	nop			; (mov r8, r8)
}
   16c80:	46bd      	mov	sp, r7
   16c82:	b008      	add	sp, #32
   16c84:	bd80      	pop	{r7, pc}
   16c86:	46c0      	nop			; (mov r8, r8)
   16c88:	000184cd 	.word	0x000184cd
   16c8c:	0000640d 	.word	0x0000640d
   16c90:	00006d91 	.word	0x00006d91
   16c94:	00016b85 	.word	0x00016b85
   16c98:	000080d5 	.word	0x000080d5
   16c9c:	00000c01 	.word	0x00000c01
   16ca0:	00007b21 	.word	0x00007b21
   16ca4:	0000b481 	.word	0x0000b481
   16ca8:	00016a29 	.word	0x00016a29
   16cac:	000168fd 	.word	0x000168fd
   16cb0:	0000b4d1 	.word	0x0000b4d1
   16cb4:	000168bd 	.word	0x000168bd
   16cb8:	00016885 	.word	0x00016885

00016cbc <wifi_state_tls_init>:

/* Handle the TLS setup state */
static void wifi_state_tls_init(void * ctx)
{
   16cbc:	b580      	push	{r7, lr}
   16cbe:	b082      	sub	sp, #8
   16cc0:	af00      	add	r7, sp, #0
   16cc2:	6078      	str	r0, [r7, #4]
    // Initialize the WINC1500 SSL module
    if(M2M_SUCCESS != m2m_ssl_init(wifi_tls_handler_cb))
   16cc4:	4b0b      	ldr	r3, [pc, #44]	; (16cf4 <wifi_state_tls_init+0x38>)
   16cc6:	0018      	movs	r0, r3
   16cc8:	4b0b      	ldr	r3, [pc, #44]	; (16cf8 <wifi_state_tls_init+0x3c>)
   16cca:	4798      	blx	r3
   16ccc:	1e03      	subs	r3, r0, #0
   16cce:	d001      	beq.n	16cd4 <wifi_state_tls_init+0x18>
   16cd0:	46c0      	nop			; (mov r8, r8)
    {
        WIFI_PRINTF("m2m_ssl_init failed\r\n");
        return;
   16cd2:	e00c      	b.n	16cee <wifi_state_tls_init+0x32>
    }

    // Set the active WINC1500 TLS cipher suites
    //         wifi_status = m2m_ssl_set_active_ciphersuites(SSL_ECC_ONLY_CIPHERS);
    if(M2M_SUCCESS != m2m_ssl_set_active_ciphersuites(SSL_ENABLE_ALL_SUITES))
   16cd4:	203f      	movs	r0, #63	; 0x3f
   16cd6:	4b09      	ldr	r3, [pc, #36]	; (16cfc <wifi_state_tls_init+0x40>)
   16cd8:	4798      	blx	r3
   16cda:	1e03      	subs	r3, r0, #0
   16cdc:	d001      	beq.n	16ce2 <wifi_state_tls_init+0x26>
   16cde:	46c0      	nop			; (mov r8, r8)
    {
        WIFI_PRINTF("m2m_ssl_set_active_ciphersuites failed\r\n");
        return;
   16ce0:	e005      	b.n	16cee <wifi_state_tls_init+0x32>
    }

    /* Move to the next state */
    wifi_state_update(ctx, WIFI_STATE_CONNECT, WIFI_COUNTER_NO_WAIT);
   16ce2:	687b      	ldr	r3, [r7, #4]
   16ce4:	2200      	movs	r2, #0
   16ce6:	2102      	movs	r1, #2
   16ce8:	0018      	movs	r0, r3
   16cea:	4b05      	ldr	r3, [pc, #20]	; (16d00 <wifi_state_tls_init+0x44>)
   16cec:	4798      	blx	r3
}
   16cee:	46bd      	mov	sp, r7
   16cf0:	b002      	add	sp, #8
   16cf2:	bd80      	pop	{r7, pc}
   16cf4:	00016a6d 	.word	0x00016a6d
   16cf8:	00007c99 	.word	0x00007c99
   16cfc:	00007c4d 	.word	0x00007c4d
   16d00:	00016885 	.word	0x00016885

00016d04 <wifi_state_connect>:

/* Initialize the network connection */
static void wifi_state_connect(void * ctx)
{
   16d04:	b590      	push	{r4, r7, lr}
   16d06:	b09f      	sub	sp, #124	; 0x7c
   16d08:	af02      	add	r7, sp, #8
   16d0a:	6078      	str	r0, [r7, #4]
    int32_t status;

    do
    {
        /* Get the WIFI SSID */
        status = config_get_ssid(ssid, sizeof(ssid));
   16d0c:	234c      	movs	r3, #76	; 0x4c
   16d0e:	18fb      	adds	r3, r7, r3
   16d10:	2120      	movs	r1, #32
   16d12:	0018      	movs	r0, r3
   16d14:	4b2a      	ldr	r3, [pc, #168]	; (16dc0 <wifi_state_connect+0xbc>)
   16d16:	4798      	blx	r3
   16d18:	0003      	movs	r3, r0
   16d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
        if(status)
   16d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16d1e:	2b00      	cmp	r3, #0
   16d20:	d001      	beq.n	16d26 <wifi_state_connect+0x22>
   16d22:	46c0      	nop			; (mov r8, r8)
        {
            WIFI_PRINTF("Failed to get SSID: %d\r\n", status);
            break;
   16d24:	e038      	b.n	16d98 <wifi_state_connect+0x94>
        }

        /* Get the WIFI Password */
        status = config_get_password(pass, sizeof(pass));
   16d26:	230c      	movs	r3, #12
   16d28:	18fb      	adds	r3, r7, r3
   16d2a:	2140      	movs	r1, #64	; 0x40
   16d2c:	0018      	movs	r0, r3
   16d2e:	4b25      	ldr	r3, [pc, #148]	; (16dc4 <wifi_state_connect+0xc0>)
   16d30:	4798      	blx	r3
   16d32:	0003      	movs	r3, r0
   16d34:	66fb      	str	r3, [r7, #108]	; 0x6c
        if(status)
   16d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16d38:	2b00      	cmp	r3, #0
   16d3a:	d12c      	bne.n	16d96 <wifi_state_connect+0x92>
        {
            break;
        }

        /* Check the password length returned. If it's non zero then use it - if not assume an open AP */
        if (strlen(pass) > 0)
   16d3c:	230c      	movs	r3, #12
   16d3e:	18fb      	adds	r3, r7, r3
   16d40:	781b      	ldrb	r3, [r3, #0]
   16d42:	2b00      	cmp	r3, #0
   16d44:	d013      	beq.n	16d6e <wifi_state_connect+0x6a>
        {
            status = m2m_wifi_connect(ssid, strlen(ssid), M2M_WIFI_SEC_WPA_PSK, pass, M2M_WIFI_CH_ALL);
   16d46:	234c      	movs	r3, #76	; 0x4c
   16d48:	18fb      	adds	r3, r7, r3
   16d4a:	0018      	movs	r0, r3
   16d4c:	4b1e      	ldr	r3, [pc, #120]	; (16dc8 <wifi_state_connect+0xc4>)
   16d4e:	4798      	blx	r3
   16d50:	0003      	movs	r3, r0
   16d52:	b2d9      	uxtb	r1, r3
   16d54:	230c      	movs	r3, #12
   16d56:	18fa      	adds	r2, r7, r3
   16d58:	234c      	movs	r3, #76	; 0x4c
   16d5a:	18f8      	adds	r0, r7, r3
   16d5c:	23ff      	movs	r3, #255	; 0xff
   16d5e:	9300      	str	r3, [sp, #0]
   16d60:	0013      	movs	r3, r2
   16d62:	2202      	movs	r2, #2
   16d64:	4c19      	ldr	r4, [pc, #100]	; (16dcc <wifi_state_connect+0xc8>)
   16d66:	47a0      	blx	r4
   16d68:	0003      	movs	r3, r0
   16d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   16d6c:	e014      	b.n	16d98 <wifi_state_connect+0x94>
        }
        else
        {
            status = m2m_wifi_connect(ssid, strlen(ssid), M2M_WIFI_SEC_OPEN, pass, M2M_WIFI_CH_ALL);
   16d6e:	234c      	movs	r3, #76	; 0x4c
   16d70:	18fb      	adds	r3, r7, r3
   16d72:	0018      	movs	r0, r3
   16d74:	4b14      	ldr	r3, [pc, #80]	; (16dc8 <wifi_state_connect+0xc4>)
   16d76:	4798      	blx	r3
   16d78:	0003      	movs	r3, r0
   16d7a:	b2d9      	uxtb	r1, r3
   16d7c:	230c      	movs	r3, #12
   16d7e:	18fa      	adds	r2, r7, r3
   16d80:	234c      	movs	r3, #76	; 0x4c
   16d82:	18f8      	adds	r0, r7, r3
   16d84:	23ff      	movs	r3, #255	; 0xff
   16d86:	9300      	str	r3, [sp, #0]
   16d88:	0013      	movs	r3, r2
   16d8a:	2201      	movs	r2, #1
   16d8c:	4c0f      	ldr	r4, [pc, #60]	; (16dcc <wifi_state_connect+0xc8>)
   16d8e:	47a0      	blx	r4
   16d90:	0003      	movs	r3, r0
   16d92:	66fb      	str	r3, [r7, #108]	; 0x6c
   16d94:	e000      	b.n	16d98 <wifi_state_connect+0x94>
            break;
   16d96:	46c0      	nop			; (mov r8, r8)
        }
    } while(false);

    if (M2M_SUCCESS == status)
   16d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16d9a:	2b00      	cmp	r3, #0
   16d9c:	d106      	bne.n	16dac <wifi_state_connect+0xa8>
    {
        /* Move to the next state */
        wifi_state_update(ctx, WIFI_STATE_WAIT, WIFI_COUNTER_CONNECT_WAIT);
   16d9e:	4a0c      	ldr	r2, [pc, #48]	; (16dd0 <wifi_state_connect+0xcc>)
   16da0:	687b      	ldr	r3, [r7, #4]
   16da2:	2103      	movs	r1, #3
   16da4:	0018      	movs	r0, r3
   16da6:	4b0b      	ldr	r3, [pc, #44]	; (16dd4 <wifi_state_connect+0xd0>)
   16da8:	4798      	blx	r3
    else
    {
        /* Go to the error state */
        wifi_state_update(ctx, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
    }
}
   16daa:	e005      	b.n	16db8 <wifi_state_connect+0xb4>
        wifi_state_update(ctx, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16dac:	4a0a      	ldr	r2, [pc, #40]	; (16dd8 <wifi_state_connect+0xd4>)
   16dae:	687b      	ldr	r3, [r7, #4]
   16db0:	2106      	movs	r1, #6
   16db2:	0018      	movs	r0, r3
   16db4:	4b07      	ldr	r3, [pc, #28]	; (16dd4 <wifi_state_connect+0xd0>)
   16db6:	4798      	blx	r3
}
   16db8:	46c0      	nop			; (mov r8, r8)
   16dba:	46bd      	mov	sp, r7
   16dbc:	b01d      	add	sp, #116	; 0x74
   16dbe:	bd90      	pop	{r4, r7, pc}
   16dc0:	000184d9 	.word	0x000184d9
   16dc4:	00018521 	.word	0x00018521
   16dc8:	0001c7d3 	.word	0x0001c7d3
   16dcc:	000082dd 	.word	0x000082dd
   16dd0:	00002710 	.word	0x00002710
   16dd4:	00016885 	.word	0x00016885
   16dd8:	00007530 	.word	0x00007530

00016ddc <wifi_state_wait>:

/* Wait last command to finish */
static void wifi_state_wait(void * ctx)
{
   16ddc:	b580      	push	{r7, lr}
   16dde:	b082      	sub	sp, #8
   16de0:	af00      	add	r7, sp, #0
   16de2:	6078      	str	r0, [r7, #4]
    if(wifi_counter_finished())
   16de4:	4b06      	ldr	r3, [pc, #24]	; (16e00 <wifi_state_wait+0x24>)
   16de6:	4798      	blx	r3
   16de8:	1e03      	subs	r3, r0, #0
   16dea:	d005      	beq.n	16df8 <wifi_state_wait+0x1c>
    {
        /* Command failed to finish in the given timeout */
        wifi_state_update(ctx, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16dec:	4a05      	ldr	r2, [pc, #20]	; (16e04 <wifi_state_wait+0x28>)
   16dee:	687b      	ldr	r3, [r7, #4]
   16df0:	2106      	movs	r1, #6
   16df2:	0018      	movs	r0, r3
   16df4:	4b04      	ldr	r3, [pc, #16]	; (16e08 <wifi_state_wait+0x2c>)
   16df6:	4798      	blx	r3
    }
}
   16df8:	46c0      	nop			; (mov r8, r8)
   16dfa:	46bd      	mov	sp, r7
   16dfc:	b002      	add	sp, #8
   16dfe:	bd80      	pop	{r7, pc}
   16e00:	000167b9 	.word	0x000167b9
   16e04:	00007530 	.word	0x00007530
   16e08:	00016885 	.word	0x00016885

00016e0c <wifi_state_ready>:

/* Idle state - Run when no commands are pending  */
static void wifi_state_ready(void * ctx)
{
   16e0c:	b580      	push	{r7, lr}
   16e0e:	b082      	sub	sp, #8
   16e10:	af00      	add	r7, sp, #0
   16e12:	6078      	str	r0, [r7, #4]
    /* Do Nothing */
}
   16e14:	46c0      	nop			; (mov r8, r8)
   16e16:	46bd      	mov	sp, r7
   16e18:	b002      	add	sp, #8
   16e1a:	bd80      	pop	{r7, pc}

00016e1c <wifi_state_timeout>:

/* Last command timed out */
static void wifi_state_timeout(void * ctx)
{
   16e1c:	b580      	push	{r7, lr}
   16e1e:	b082      	sub	sp, #8
   16e20:	af00      	add	r7, sp, #0
   16e22:	6078      	str	r0, [r7, #4]
    /* Do Nothing */
}
   16e24:	46c0      	nop			; (mov r8, r8)
   16e26:	46bd      	mov	sp, r7
   16e28:	b002      	add	sp, #8
   16e2a:	bd80      	pop	{r7, pc}

00016e2c <wifi_state_error>:

/* Handle the generic error state */
static void wifi_state_error(void * ctx)
{
   16e2c:	b580      	push	{r7, lr}
   16e2e:	b082      	sub	sp, #8
   16e30:	af00      	add	r7, sp, #0
   16e32:	6078      	str	r0, [r7, #4]
    if(wifi_counter_finished())
   16e34:	4b07      	ldr	r3, [pc, #28]	; (16e54 <wifi_state_error+0x28>)
   16e36:	4798      	blx	r3
   16e38:	1e03      	subs	r3, r0, #0
   16e3a:	d006      	beq.n	16e4a <wifi_state_error+0x1e>
   16e3c:	46c0      	nop			; (mov r8, r8)
    {
        WIFI_PRINTF("Retrying Connection\r\n");
        wifi_state_update(ctx, WIFI_STATE_CONNECT, WIFI_COUNTER_NO_WAIT);
   16e3e:	687b      	ldr	r3, [r7, #4]
   16e40:	2200      	movs	r2, #0
   16e42:	2102      	movs	r1, #2
   16e44:	0018      	movs	r0, r3
   16e46:	4b04      	ldr	r3, [pc, #16]	; (16e58 <wifi_state_error+0x2c>)
   16e48:	4798      	blx	r3
    }
}
   16e4a:	46c0      	nop			; (mov r8, r8)
   16e4c:	46bd      	mov	sp, r7
   16e4e:	b002      	add	sp, #8
   16e50:	bd80      	pop	{r7, pc}
   16e52:	46c0      	nop			; (mov r8, r8)
   16e54:	000167b9 	.word	0x000167b9
   16e58:	00016885 	.word	0x00016885

00016e5c <wifi_task>:
    TINY_STATE_DEF(WIFI_STATE_ERROR,            &wifi_state_error)
};

/* WIFI State Controller */
void wifi_task(void)
{
   16e5c:	b5b0      	push	{r4, r5, r7, lr}
   16e5e:	af00      	add	r7, sp, #0
    if(!g_wifi_context.state.count)
   16e60:	4b09      	ldr	r3, [pc, #36]	; (16e88 <wifi_task+0x2c>)
   16e62:	885b      	ldrh	r3, [r3, #2]
   16e64:	2b00      	cmp	r3, #0
   16e66:	d105      	bne.n	16e74 <wifi_task+0x18>
    {
        /* Perform the Initialization */
        tiny_state_init(&g_wifi_context, g_wifi_states, sizeof(g_wifi_states)/sizeof(g_wifi_states[0]), WIFI_STATE_INIT);
   16e68:	4908      	ldr	r1, [pc, #32]	; (16e8c <wifi_task+0x30>)
   16e6a:	4807      	ldr	r0, [pc, #28]	; (16e88 <wifi_task+0x2c>)
   16e6c:	2300      	movs	r3, #0
   16e6e:	2207      	movs	r2, #7
   16e70:	4c07      	ldr	r4, [pc, #28]	; (16e90 <wifi_task+0x34>)
   16e72:	47a0      	blx	r4
    }

    /* Run the state machine*/
    tiny_state_driver(&g_wifi_context);
   16e74:	4b04      	ldr	r3, [pc, #16]	; (16e88 <wifi_task+0x2c>)
   16e76:	0018      	movs	r0, r3
   16e78:	4b06      	ldr	r3, [pc, #24]	; (16e94 <wifi_task+0x38>)
   16e7a:	4798      	blx	r3

    /* Handle WINC1500 pending events */
    m2m_wifi_handle_events(NULL);
   16e7c:	2000      	movs	r0, #0
   16e7e:	4b06      	ldr	r3, [pc, #24]	; (16e98 <wifi_task+0x3c>)
   16e80:	4798      	blx	r3
}
   16e82:	46c0      	nop			; (mov r8, r8)
   16e84:	46bd      	mov	sp, r7
   16e86:	bdb0      	pop	{r4, r5, r7, pc}
   16e88:	200005d8 	.word	0x200005d8
   16e8c:	20000180 	.word	0x20000180
   16e90:	000166a5 	.word	0x000166a5
   16e94:	00016755 	.word	0x00016755
   16e98:	000082c1 	.word	0x000082c1

00016e9c <wifi_task_block_until_done>:

/* Used internally for blocking calls */
static inline void wifi_task_block_until_done(void)
{
   16e9c:	b580      	push	{r7, lr}
   16e9e:	af00      	add	r7, sp, #0
    do
    {
        wifi_task();
   16ea0:	4b04      	ldr	r3, [pc, #16]	; (16eb4 <wifi_task_block_until_done+0x18>)
   16ea2:	4798      	blx	r3
    } while (wifi_is_busy());
   16ea4:	4b04      	ldr	r3, [pc, #16]	; (16eb8 <wifi_task_block_until_done+0x1c>)
   16ea6:	4798      	blx	r3
   16ea8:	1e03      	subs	r3, r0, #0
   16eaa:	d1f9      	bne.n	16ea0 <wifi_task_block_until_done+0x4>
}
   16eac:	46c0      	nop			; (mov r8, r8)
   16eae:	46bd      	mov	sp, r7
   16eb0:	bd80      	pop	{r7, pc}
   16eb2:	46c0      	nop			; (mov r8, r8)
   16eb4:	00016e5d 	.word	0x00016e5d
   16eb8:	0001684d 	.word	0x0001684d

00016ebc <wifi_request_time>:

/* Request Time from NTP servers and update clock */
void wifi_request_time(void)
{
   16ebc:	b580      	push	{r7, lr}
   16ebe:	af00      	add	r7, sp, #0
    if(wifi_is_ready())
   16ec0:	4b07      	ldr	r3, [pc, #28]	; (16ee0 <wifi_request_time+0x24>)
   16ec2:	4798      	blx	r3
   16ec4:	1e03      	subs	r3, r0, #0
   16ec6:	d007      	beq.n	16ed8 <wifi_request_time+0x1c>
    {
        m2m_wifi_get_sytem_time();
   16ec8:	4b06      	ldr	r3, [pc, #24]	; (16ee4 <wifi_request_time+0x28>)
   16eca:	4798      	blx	r3
        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
   16ecc:	4a06      	ldr	r2, [pc, #24]	; (16ee8 <wifi_request_time+0x2c>)
   16ece:	4b07      	ldr	r3, [pc, #28]	; (16eec <wifi_request_time+0x30>)
   16ed0:	2103      	movs	r1, #3
   16ed2:	0018      	movs	r0, r3
   16ed4:	4b06      	ldr	r3, [pc, #24]	; (16ef0 <wifi_request_time+0x34>)
   16ed6:	4798      	blx	r3
    }
}
   16ed8:	46c0      	nop			; (mov r8, r8)
   16eda:	46bd      	mov	sp, r7
   16edc:	bd80      	pop	{r7, pc}
   16ede:	46c0      	nop			; (mov r8, r8)
   16ee0:	00016831 	.word	0x00016831
   16ee4:	000087fd 	.word	0x000087fd
   16ee8:	00002710 	.word	0x00002710
   16eec:	200005d8 	.word	0x200005d8
   16ef0:	00016885 	.word	0x00016885

00016ef4 <wifi_resolve_host>:

/* Request the winc to resolve a name */
static void wifi_resolve_host(char * host)
{
   16ef4:	b580      	push	{r7, lr}
   16ef6:	b082      	sub	sp, #8
   16ef8:	af00      	add	r7, sp, #0
   16efa:	6078      	str	r0, [r7, #4]
    g_wifi_context.host = 0;
   16efc:	4b0c      	ldr	r3, [pc, #48]	; (16f30 <wifi_resolve_host+0x3c>)
   16efe:	2200      	movs	r2, #0
   16f00:	60da      	str	r2, [r3, #12]

    if(MQTTCLIENT_SUCCESS == gethostbyname((uint8*)host))
   16f02:	687b      	ldr	r3, [r7, #4]
   16f04:	0018      	movs	r0, r3
   16f06:	4b0b      	ldr	r3, [pc, #44]	; (16f34 <wifi_resolve_host+0x40>)
   16f08:	4798      	blx	r3
   16f0a:	1e03      	subs	r3, r0, #0
   16f0c:	d106      	bne.n	16f1c <wifi_resolve_host+0x28>
    {
        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
   16f0e:	4a0a      	ldr	r2, [pc, #40]	; (16f38 <wifi_resolve_host+0x44>)
   16f10:	4b07      	ldr	r3, [pc, #28]	; (16f30 <wifi_resolve_host+0x3c>)
   16f12:	2103      	movs	r1, #3
   16f14:	0018      	movs	r0, r3
   16f16:	4b09      	ldr	r3, [pc, #36]	; (16f3c <wifi_resolve_host+0x48>)
   16f18:	4798      	blx	r3
    }
    else
    {
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
    }
}
   16f1a:	e005      	b.n	16f28 <wifi_resolve_host+0x34>
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16f1c:	4a08      	ldr	r2, [pc, #32]	; (16f40 <wifi_resolve_host+0x4c>)
   16f1e:	4b04      	ldr	r3, [pc, #16]	; (16f30 <wifi_resolve_host+0x3c>)
   16f20:	2106      	movs	r1, #6
   16f22:	0018      	movs	r0, r3
   16f24:	4b05      	ldr	r3, [pc, #20]	; (16f3c <wifi_resolve_host+0x48>)
   16f26:	4798      	blx	r3
}
   16f28:	46c0      	nop			; (mov r8, r8)
   16f2a:	46bd      	mov	sp, r7
   16f2c:	b002      	add	sp, #8
   16f2e:	bd80      	pop	{r7, pc}
   16f30:	200005d8 	.word	0x200005d8
   16f34:	0000bc3d 	.word	0x0000bc3d
   16f38:	00002710 	.word	0x00002710
   16f3c:	00016885 	.word	0x00016885
   16f40:	00007530 	.word	0x00007530

00016f44 <wifi_connect>:

/* Connect to a host and create a socket - blocking call */
int wifi_connect(char * host, int port)
{
   16f44:	b590      	push	{r4, r7, lr}
   16f46:	b08d      	sub	sp, #52	; 0x34
   16f48:	af02      	add	r7, sp, #8
   16f4a:	6078      	str	r0, [r7, #4]
   16f4c:	6039      	str	r1, [r7, #0]
    int status = MQTTCLIENT_FAILURE;
   16f4e:	2301      	movs	r3, #1
   16f50:	425b      	negs	r3, r3
   16f52:	627b      	str	r3, [r7, #36]	; 0x24
    SOCKET new_socket = SOCK_ERR_INVALID;
   16f54:	2323      	movs	r3, #35	; 0x23
   16f56:	18fb      	adds	r3, r7, r3
   16f58:	22f7      	movs	r2, #247	; 0xf7
   16f5a:	701a      	strb	r2, [r3, #0]
    struct sockaddr_in socket_address;
    int optval;

    if(!wifi_is_ready())
   16f5c:	4b40      	ldr	r3, [pc, #256]	; (17060 <wifi_connect+0x11c>)
   16f5e:	4798      	blx	r3
   16f60:	1e03      	subs	r3, r0, #0
   16f62:	d101      	bne.n	16f68 <wifi_connect+0x24>
    {
        return status;
   16f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f66:	e076      	b.n	17056 <wifi_connect+0x112>
    }

    /* Send the resolve command */
    wifi_resolve_host(host);
   16f68:	687b      	ldr	r3, [r7, #4]
   16f6a:	0018      	movs	r0, r3
   16f6c:	4b3d      	ldr	r3, [pc, #244]	; (17064 <wifi_connect+0x120>)
   16f6e:	4798      	blx	r3

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();
   16f70:	4b3d      	ldr	r3, [pc, #244]	; (17068 <wifi_connect+0x124>)
   16f72:	4798      	blx	r3

    /* Check for failures */
    if(!wifi_is_ready())
   16f74:	4b3a      	ldr	r3, [pc, #232]	; (17060 <wifi_connect+0x11c>)
   16f76:	4798      	blx	r3
   16f78:	1e03      	subs	r3, r0, #0
   16f7a:	d101      	bne.n	16f80 <wifi_connect+0x3c>
    {
        return status;
   16f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f7e:	e06a      	b.n	17056 <wifi_connect+0x112>
    }

    // Create the socket
    new_socket = socket(AF_INET, SOCK_STREAM, 1);
   16f80:	2323      	movs	r3, #35	; 0x23
   16f82:	18fc      	adds	r4, r7, r3
   16f84:	2201      	movs	r2, #1
   16f86:	2101      	movs	r1, #1
   16f88:	2002      	movs	r0, #2
   16f8a:	4b38      	ldr	r3, [pc, #224]	; (1706c <wifi_connect+0x128>)
   16f8c:	4798      	blx	r3
   16f8e:	0003      	movs	r3, r0
   16f90:	7023      	strb	r3, [r4, #0]
    if (new_socket < 0)
   16f92:	2323      	movs	r3, #35	; 0x23
   16f94:	18fb      	adds	r3, r7, r3
   16f96:	781b      	ldrb	r3, [r3, #0]
   16f98:	2b7f      	cmp	r3, #127	; 0x7f
   16f9a:	d901      	bls.n	16fa0 <wifi_connect+0x5c>
    {
        /* Failed to create the socket */
        return status;
   16f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f9e:	e05a      	b.n	17056 <wifi_connect+0x112>
    }
        
    /* Set the socket information */
    socket_address.sin_family      = AF_INET;
   16fa0:	2310      	movs	r3, #16
   16fa2:	18fb      	adds	r3, r7, r3
   16fa4:	2202      	movs	r2, #2
   16fa6:	801a      	strh	r2, [r3, #0]
    socket_address.sin_addr.s_addr = g_wifi_context.host;
   16fa8:	4b31      	ldr	r3, [pc, #196]	; (17070 <wifi_connect+0x12c>)
   16faa:	68da      	ldr	r2, [r3, #12]
   16fac:	2310      	movs	r3, #16
   16fae:	18fb      	adds	r3, r7, r3
   16fb0:	605a      	str	r2, [r3, #4]
    socket_address.sin_port        = _htons(port);
   16fb2:	683b      	ldr	r3, [r7, #0]
   16fb4:	b29b      	uxth	r3, r3
   16fb6:	021b      	lsls	r3, r3, #8
   16fb8:	b21a      	sxth	r2, r3
   16fba:	683b      	ldr	r3, [r7, #0]
   16fbc:	b29b      	uxth	r3, r3
   16fbe:	0a1b      	lsrs	r3, r3, #8
   16fc0:	b29b      	uxth	r3, r3
   16fc2:	b21b      	sxth	r3, r3
   16fc4:	4313      	orrs	r3, r2
   16fc6:	b21b      	sxth	r3, r3
   16fc8:	b29a      	uxth	r2, r3
   16fca:	2310      	movs	r3, #16
   16fcc:	18fb      	adds	r3, r7, r3
   16fce:	805a      	strh	r2, [r3, #2]

    optval = 1;
   16fd0:	2301      	movs	r3, #1
   16fd2:	60fb      	str	r3, [r7, #12]
    setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_ENABLE_SESSION_CACHING,
   16fd4:	230c      	movs	r3, #12
   16fd6:	18fa      	adds	r2, r7, r3
   16fd8:	2323      	movs	r3, #35	; 0x23
   16fda:	18fb      	adds	r3, r7, r3
   16fdc:	2000      	movs	r0, #0
   16fde:	5618      	ldrsb	r0, [r3, r0]
   16fe0:	2304      	movs	r3, #4
   16fe2:	9300      	str	r3, [sp, #0]
   16fe4:	0013      	movs	r3, r2
   16fe6:	2203      	movs	r2, #3
   16fe8:	2102      	movs	r1, #2
   16fea:	4c22      	ldr	r4, [pc, #136]	; (17074 <wifi_connect+0x130>)
   16fec:	47a0      	blx	r4
    setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_BYPASS_X509_VERIF,
        &optval, sizeof(optval));
#endif

    /* Connect to the specified host */
    status = connect(new_socket, (struct sockaddr*)&socket_address,
   16fee:	2310      	movs	r3, #16
   16ff0:	18f9      	adds	r1, r7, r3
   16ff2:	2323      	movs	r3, #35	; 0x23
   16ff4:	18fb      	adds	r3, r7, r3
   16ff6:	781b      	ldrb	r3, [r3, #0]
   16ff8:	b25b      	sxtb	r3, r3
   16ffa:	2210      	movs	r2, #16
   16ffc:	0018      	movs	r0, r3
   16ffe:	4b1e      	ldr	r3, [pc, #120]	; (17078 <wifi_connect+0x134>)
   17000:	4798      	blx	r3
   17002:	0003      	movs	r3, r0
   17004:	627b      	str	r3, [r7, #36]	; 0x24
        sizeof(socket_address));
    if (status != SOCK_ERR_NO_ERROR)
   17006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17008:	2b00      	cmp	r3, #0
   1700a:	d008      	beq.n	1701e <wifi_connect+0xda>
    {
        /* Close the socket */
        close(new_socket);
   1700c:	2323      	movs	r3, #35	; 0x23
   1700e:	18fb      	adds	r3, r7, r3
   17010:	781b      	ldrb	r3, [r3, #0]
   17012:	b25b      	sxtb	r3, r3
   17014:	0018      	movs	r0, r3
   17016:	4b19      	ldr	r3, [pc, #100]	; (1707c <wifi_connect+0x138>)
   17018:	4798      	blx	r3
        return status;
   1701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1701c:	e01b      	b.n	17056 <wifi_connect+0x112>
    }

    /* */
    wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_CONNECT_WAIT);
   1701e:	4a18      	ldr	r2, [pc, #96]	; (17080 <wifi_connect+0x13c>)
   17020:	4b13      	ldr	r3, [pc, #76]	; (17070 <wifi_connect+0x12c>)
   17022:	2103      	movs	r1, #3
   17024:	0018      	movs	r0, r3
   17026:	4b17      	ldr	r3, [pc, #92]	; (17084 <wifi_connect+0x140>)
   17028:	4798      	blx	r3

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();
   1702a:	4b0f      	ldr	r3, [pc, #60]	; (17068 <wifi_connect+0x124>)
   1702c:	4798      	blx	r3

    /* Check for failures */
    if(!wifi_is_ready())
   1702e:	4b0c      	ldr	r3, [pc, #48]	; (17060 <wifi_connect+0x11c>)
   17030:	4798      	blx	r3
   17032:	1e03      	subs	r3, r0, #0
   17034:	d109      	bne.n	1704a <wifi_connect+0x106>
    {
        /* Close the socket */
        close(new_socket);
   17036:	2323      	movs	r3, #35	; 0x23
   17038:	18fb      	adds	r3, r7, r3
   1703a:	781b      	ldrb	r3, [r3, #0]
   1703c:	b25b      	sxtb	r3, r3
   1703e:	0018      	movs	r0, r3
   17040:	4b0e      	ldr	r3, [pc, #56]	; (1707c <wifi_connect+0x138>)
   17042:	4798      	blx	r3
        return MQTTCLIENT_FAILURE;
   17044:	2301      	movs	r3, #1
   17046:	425b      	negs	r3, r3
   17048:	e005      	b.n	17056 <wifi_connect+0x112>
    }

    /* Save the socket for use */
    g_wifi_context.sock = new_socket;
   1704a:	4b09      	ldr	r3, [pc, #36]	; (17070 <wifi_connect+0x12c>)
   1704c:	2223      	movs	r2, #35	; 0x23
   1704e:	18ba      	adds	r2, r7, r2
   17050:	7812      	ldrb	r2, [r2, #0]
   17052:	741a      	strb	r2, [r3, #16]

    return MQTTCLIENT_SUCCESS;
   17054:	2300      	movs	r3, #0
}
   17056:	0018      	movs	r0, r3
   17058:	46bd      	mov	sp, r7
   1705a:	b00b      	add	sp, #44	; 0x2c
   1705c:	bd90      	pop	{r4, r7, pc}
   1705e:	46c0      	nop			; (mov r8, r8)
   17060:	00016831 	.word	0x00016831
   17064:	00016ef5 	.word	0x00016ef5
   17068:	00016e9d 	.word	0x00016e9d
   1706c:	0000b4f9 	.word	0x0000b4f9
   17070:	200005d8 	.word	0x200005d8
   17074:	0000bfa1 	.word	0x0000bfa1
   17078:	0000b709 	.word	0x0000b709
   1707c:	0000bb01 	.word	0x0000bb01
   17080:	00002710 	.word	0x00002710
   17084:	00016885 	.word	0x00016885

00017088 <wifi_read_data>:

/* Read data from a socket - blocking call */
int wifi_read_data(uint8_t *read_buffer, uint32_t read_length, uint32_t timeout_ms)
{
   17088:	b590      	push	{r4, r7, lr}
   1708a:	b087      	sub	sp, #28
   1708c:	af00      	add	r7, sp, #0
   1708e:	60f8      	str	r0, [r7, #12]
   17090:	60b9      	str	r1, [r7, #8]
   17092:	607a      	str	r2, [r7, #4]
    int status = MQTTCLIENT_FAILURE;
   17094:	2301      	movs	r3, #1
   17096:	425b      	negs	r3, r3
   17098:	617b      	str	r3, [r7, #20]
    
    if(!wifi_is_ready())
   1709a:	4b3e      	ldr	r3, [pc, #248]	; (17194 <wifi_read_data+0x10c>)
   1709c:	4798      	blx	r3
   1709e:	1e03      	subs	r3, r0, #0
   170a0:	d101      	bne.n	170a6 <wifi_read_data+0x1e>
    {
        return status;
   170a2:	697b      	ldr	r3, [r7, #20]
   170a4:	e071      	b.n	1718a <wifi_read_data+0x102>
    }

    if ((WIFI_BUFFER_SIZE - g_wifi_context.rxloc) >= read_length)
   170a6:	4a3c      	ldr	r2, [pc, #240]	; (17198 <wifi_read_data+0x110>)
   170a8:	23be      	movs	r3, #190	; 0xbe
   170aa:	00db      	lsls	r3, r3, #3
   170ac:	58d3      	ldr	r3, [r2, r3]
   170ae:	4a3b      	ldr	r2, [pc, #236]	; (1719c <wifi_read_data+0x114>)
   170b0:	1ad2      	subs	r2, r2, r3
   170b2:	68bb      	ldr	r3, [r7, #8]
   170b4:	429a      	cmp	r2, r3
   170b6:	d31a      	bcc.n	170ee <wifi_read_data+0x66>
    {
        status = MQTTCLIENT_SUCCESS;
   170b8:	2300      	movs	r3, #0
   170ba:	617b      	str	r3, [r7, #20]

        /* Get the data from the existing received buffer */
        memcpy(&read_buffer[0], &g_wifi_context.rxbuf[g_wifi_context.rxloc], read_length);
   170bc:	4a36      	ldr	r2, [pc, #216]	; (17198 <wifi_read_data+0x110>)
   170be:	23be      	movs	r3, #190	; 0xbe
   170c0:	00db      	lsls	r3, r3, #3
   170c2:	58d3      	ldr	r3, [r2, r3]
   170c4:	3310      	adds	r3, #16
   170c6:	001a      	movs	r2, r3
   170c8:	4b33      	ldr	r3, [pc, #204]	; (17198 <wifi_read_data+0x110>)
   170ca:	18d3      	adds	r3, r2, r3
   170cc:	1c59      	adds	r1, r3, #1
   170ce:	68ba      	ldr	r2, [r7, #8]
   170d0:	68fb      	ldr	r3, [r7, #12]
   170d2:	0018      	movs	r0, r3
   170d4:	4b32      	ldr	r3, [pc, #200]	; (171a0 <wifi_read_data+0x118>)
   170d6:	4798      	blx	r3

        g_wifi_context.rxloc += read_length;
   170d8:	4a2f      	ldr	r2, [pc, #188]	; (17198 <wifi_read_data+0x110>)
   170da:	23be      	movs	r3, #190	; 0xbe
   170dc:	00db      	lsls	r3, r3, #3
   170de:	58d2      	ldr	r2, [r2, r3]
   170e0:	68bb      	ldr	r3, [r7, #8]
   170e2:	18d1      	adds	r1, r2, r3
   170e4:	4a2c      	ldr	r2, [pc, #176]	; (17198 <wifi_read_data+0x110>)
   170e6:	23be      	movs	r3, #190	; 0xbe
   170e8:	00db      	lsls	r3, r3, #3
   170ea:	50d1      	str	r1, [r2, r3]
   170ec:	e047      	b.n	1717e <wifi_read_data+0xf6>
    }
    else
    {
        g_wifi_context.rxloc = 0;
   170ee:	4a2a      	ldr	r2, [pc, #168]	; (17198 <wifi_read_data+0x110>)
   170f0:	23be      	movs	r3, #190	; 0xbe
   170f2:	00db      	lsls	r3, r3, #3
   170f4:	2100      	movs	r1, #0
   170f6:	50d1      	str	r1, [r2, r3]
        memset(&g_wifi_context.rxbuf[0], 0, WIFI_BUFFER_SIZE);
   170f8:	4a28      	ldr	r2, [pc, #160]	; (1719c <wifi_read_data+0x114>)
   170fa:	4b2a      	ldr	r3, [pc, #168]	; (171a4 <wifi_read_data+0x11c>)
   170fc:	2100      	movs	r1, #0
   170fe:	0018      	movs	r0, r3
   17100:	4b29      	ldr	r3, [pc, #164]	; (171a8 <wifi_read_data+0x120>)
   17102:	4798      	blx	r3

        /* Receive the incoming message */
        if(MQTTCLIENT_SUCCESS != (status = recv(g_wifi_context.sock, g_wifi_context.rxbuf, WIFI_BUFFER_SIZE, timeout_ms)))
   17104:	4b24      	ldr	r3, [pc, #144]	; (17198 <wifi_read_data+0x110>)
   17106:	2010      	movs	r0, #16
   17108:	5618      	ldrsb	r0, [r3, r0]
   1710a:	687b      	ldr	r3, [r7, #4]
   1710c:	4a23      	ldr	r2, [pc, #140]	; (1719c <wifi_read_data+0x114>)
   1710e:	4925      	ldr	r1, [pc, #148]	; (171a4 <wifi_read_data+0x11c>)
   17110:	4c26      	ldr	r4, [pc, #152]	; (171ac <wifi_read_data+0x124>)
   17112:	47a0      	blx	r4
   17114:	0003      	movs	r3, r0
   17116:	617b      	str	r3, [r7, #20]
   17118:	697b      	ldr	r3, [r7, #20]
   1711a:	2b00      	cmp	r3, #0
   1711c:	d001      	beq.n	17122 <wifi_read_data+0x9a>
        {
            return status;
   1711e:	697b      	ldr	r3, [r7, #20]
   17120:	e033      	b.n	1718a <wifi_read_data+0x102>
        }

        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, timeout_ms + WIFI_UPDATE_PERIOD);
   17122:	687b      	ldr	r3, [r7, #4]
   17124:	3364      	adds	r3, #100	; 0x64
   17126:	001a      	movs	r2, r3
   17128:	4b1b      	ldr	r3, [pc, #108]	; (17198 <wifi_read_data+0x110>)
   1712a:	2103      	movs	r1, #3
   1712c:	0018      	movs	r0, r3
   1712e:	4b20      	ldr	r3, [pc, #128]	; (171b0 <wifi_read_data+0x128>)
   17130:	4798      	blx	r3

        /* Wait for the command to complete or timeout */
        wifi_task_block_until_done();
   17132:	4b20      	ldr	r3, [pc, #128]	; (171b4 <wifi_read_data+0x12c>)
   17134:	4798      	blx	r3

        /* Check for failures */
        if(!wifi_is_ready())
   17136:	4b17      	ldr	r3, [pc, #92]	; (17194 <wifi_read_data+0x10c>)
   17138:	4798      	blx	r3
   1713a:	1e03      	subs	r3, r0, #0
   1713c:	d10d      	bne.n	1715a <wifi_read_data+0xd2>
        {
            status = MQTTCLIENT_FAILURE;
   1713e:	2301      	movs	r3, #1
   17140:	425b      	negs	r3, r3
   17142:	617b      	str	r3, [r7, #20]
            if(!wifi_has_error())
   17144:	4b1c      	ldr	r3, [pc, #112]	; (171b8 <wifi_read_data+0x130>)
   17146:	4798      	blx	r3
   17148:	1e03      	subs	r3, r0, #0
   1714a:	d118      	bne.n	1717e <wifi_read_data+0xf6>
            {
                /* Timed out but we aren't going to retry */
                wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   1714c:	4b12      	ldr	r3, [pc, #72]	; (17198 <wifi_read_data+0x110>)
   1714e:	2200      	movs	r2, #0
   17150:	2104      	movs	r1, #4
   17152:	0018      	movs	r0, r3
   17154:	4b16      	ldr	r3, [pc, #88]	; (171b0 <wifi_read_data+0x128>)
   17156:	4798      	blx	r3
   17158:	e011      	b.n	1717e <wifi_read_data+0xf6>
            }
        }
        else
        {
            status = MQTTCLIENT_SUCCESS;
   1715a:	2300      	movs	r3, #0
   1715c:	617b      	str	r3, [r7, #20]
            memcpy(&read_buffer[0], &g_wifi_context.rxbuf[0], read_length);
   1715e:	68ba      	ldr	r2, [r7, #8]
   17160:	4910      	ldr	r1, [pc, #64]	; (171a4 <wifi_read_data+0x11c>)
   17162:	68fb      	ldr	r3, [r7, #12]
   17164:	0018      	movs	r0, r3
   17166:	4b0e      	ldr	r3, [pc, #56]	; (171a0 <wifi_read_data+0x118>)
   17168:	4798      	blx	r3
            g_wifi_context.rxloc += read_length;
   1716a:	4a0b      	ldr	r2, [pc, #44]	; (17198 <wifi_read_data+0x110>)
   1716c:	23be      	movs	r3, #190	; 0xbe
   1716e:	00db      	lsls	r3, r3, #3
   17170:	58d2      	ldr	r2, [r2, r3]
   17172:	68bb      	ldr	r3, [r7, #8]
   17174:	18d1      	adds	r1, r2, r3
   17176:	4a08      	ldr	r2, [pc, #32]	; (17198 <wifi_read_data+0x110>)
   17178:	23be      	movs	r3, #190	; 0xbe
   1717a:	00db      	lsls	r3, r3, #3
   1717c:	50d1      	str	r1, [r2, r3]
        }
    }
    
    return ((status == MQTTCLIENT_SUCCESS) ? (int)read_length : status);
   1717e:	697b      	ldr	r3, [r7, #20]
   17180:	2b00      	cmp	r3, #0
   17182:	d101      	bne.n	17188 <wifi_read_data+0x100>
   17184:	68bb      	ldr	r3, [r7, #8]
   17186:	e000      	b.n	1718a <wifi_read_data+0x102>
   17188:	697b      	ldr	r3, [r7, #20]
}
   1718a:	0018      	movs	r0, r3
   1718c:	46bd      	mov	sp, r7
   1718e:	b007      	add	sp, #28
   17190:	bd90      	pop	{r4, r7, pc}
   17192:	46c0      	nop			; (mov r8, r8)
   17194:	00016831 	.word	0x00016831
   17198:	200005d8 	.word	0x200005d8
   1719c:	000005dc 	.word	0x000005dc
   171a0:	0001c1e5 	.word	0x0001c1e5
   171a4:	200005e9 	.word	0x200005e9
   171a8:	0001c21b 	.word	0x0001c21b
   171ac:	0000b981 	.word	0x0000b981
   171b0:	00016885 	.word	0x00016885
   171b4:	00016e9d 	.word	0x00016e9d
   171b8:	00016869 	.word	0x00016869

000171bc <wifi_send_data>:

/* Send data to a socket - blocking call */
int wifi_send_data(uint8_t *send_buffer, uint32_t send_length, uint32_t timeout_ms)
{
   171bc:	b590      	push	{r4, r7, lr}
   171be:	b087      	sub	sp, #28
   171c0:	af00      	add	r7, sp, #0
   171c2:	60f8      	str	r0, [r7, #12]
   171c4:	60b9      	str	r1, [r7, #8]
   171c6:	607a      	str	r2, [r7, #4]
    int status = MQTTCLIENT_FAILURE;
   171c8:	2301      	movs	r3, #1
   171ca:	425b      	negs	r3, r3
   171cc:	617b      	str	r3, [r7, #20]
    
    if(!wifi_is_ready())
   171ce:	4b1c      	ldr	r3, [pc, #112]	; (17240 <wifi_send_data+0x84>)
   171d0:	4798      	blx	r3
   171d2:	1e03      	subs	r3, r0, #0
   171d4:	d101      	bne.n	171da <wifi_send_data+0x1e>
    {
        return status;
   171d6:	697b      	ldr	r3, [r7, #20]
   171d8:	e02d      	b.n	17236 <wifi_send_data+0x7a>
    }

    status = send(g_wifi_context.sock, send_buffer, send_length, 0);
   171da:	4b1a      	ldr	r3, [pc, #104]	; (17244 <wifi_send_data+0x88>)
   171dc:	2010      	movs	r0, #16
   171de:	5618      	ldrsb	r0, [r3, r0]
   171e0:	68bb      	ldr	r3, [r7, #8]
   171e2:	b29a      	uxth	r2, r3
   171e4:	68f9      	ldr	r1, [r7, #12]
   171e6:	2300      	movs	r3, #0
   171e8:	4c17      	ldr	r4, [pc, #92]	; (17248 <wifi_send_data+0x8c>)
   171ea:	47a0      	blx	r4
   171ec:	0003      	movs	r3, r0
   171ee:	617b      	str	r3, [r7, #20]
    g_wifi_context.txlen = send_length;
   171f0:	4b14      	ldr	r3, [pc, #80]	; (17244 <wifi_send_data+0x88>)
   171f2:	4916      	ldr	r1, [pc, #88]	; (1724c <wifi_send_data+0x90>)
   171f4:	68ba      	ldr	r2, [r7, #8]
   171f6:	505a      	str	r2, [r3, r1]

    wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
   171f8:	4a15      	ldr	r2, [pc, #84]	; (17250 <wifi_send_data+0x94>)
   171fa:	4b12      	ldr	r3, [pc, #72]	; (17244 <wifi_send_data+0x88>)
   171fc:	2103      	movs	r1, #3
   171fe:	0018      	movs	r0, r3
   17200:	4b14      	ldr	r3, [pc, #80]	; (17254 <wifi_send_data+0x98>)
   17202:	4798      	blx	r3

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();
   17204:	4b14      	ldr	r3, [pc, #80]	; (17258 <wifi_send_data+0x9c>)
   17206:	4798      	blx	r3

    /* Check for failures */
    if(!wifi_is_ready())
   17208:	4b0d      	ldr	r3, [pc, #52]	; (17240 <wifi_send_data+0x84>)
   1720a:	4798      	blx	r3
   1720c:	1e03      	subs	r3, r0, #0
   1720e:	d10c      	bne.n	1722a <wifi_send_data+0x6e>
    {
        status = MQTTCLIENT_FAILURE;
   17210:	2301      	movs	r3, #1
   17212:	425b      	negs	r3, r3
   17214:	617b      	str	r3, [r7, #20]
        if(!wifi_has_error())
   17216:	4b11      	ldr	r3, [pc, #68]	; (1725c <wifi_send_data+0xa0>)
   17218:	4798      	blx	r3
   1721a:	1e03      	subs	r3, r0, #0
   1721c:	d105      	bne.n	1722a <wifi_send_data+0x6e>
        {
            /* Timed out but we aren't going to retry */
            wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   1721e:	4b09      	ldr	r3, [pc, #36]	; (17244 <wifi_send_data+0x88>)
   17220:	2200      	movs	r2, #0
   17222:	2104      	movs	r1, #4
   17224:	0018      	movs	r0, r3
   17226:	4b0b      	ldr	r3, [pc, #44]	; (17254 <wifi_send_data+0x98>)
   17228:	4798      	blx	r3
        }
    }
    
    return ((status == MQTTCLIENT_SUCCESS) ? (int)send_length : status);
   1722a:	697b      	ldr	r3, [r7, #20]
   1722c:	2b00      	cmp	r3, #0
   1722e:	d101      	bne.n	17234 <wifi_send_data+0x78>
   17230:	68bb      	ldr	r3, [r7, #8]
   17232:	e000      	b.n	17236 <wifi_send_data+0x7a>
   17234:	697b      	ldr	r3, [r7, #20]
}
   17236:	0018      	movs	r0, r3
   17238:	46bd      	mov	sp, r7
   1723a:	b007      	add	sp, #28
   1723c:	bd90      	pop	{r4, r7, pc}
   1723e:	46c0      	nop			; (mov r8, r8)
   17240:	00016831 	.word	0x00016831
   17244:	200005d8 	.word	0x200005d8
   17248:	0000b81d 	.word	0x0000b81d
   1724c:	000005f4 	.word	0x000005f4
   17250:	00002710 	.word	0x00002710
   17254:	00016885 	.word	0x00016885
   17258:	00016e9d 	.word	0x00016e9d
   1725c:	00016869 	.word	0x00016869

00017260 <fan_read_reg>:
#include "cryptoauthlib.h"
#include "hal/hal_samd21_i2c_asf.h"
extern ATCAI2CMaster_t *i2c_hal_data[MAX_I2C_BUSES];

static uint8_t fan_read_reg(uint8_t reg)
{
   17260:	b580      	push	{r7, lr}
   17262:	b086      	sub	sp, #24
   17264:	af00      	add	r7, sp, #0
   17266:	0002      	movs	r2, r0
   17268:	1dfb      	adds	r3, r7, #7
   1726a:	701a      	strb	r2, [r3, #0]
    struct i2c_master_packet packet = {
   1726c:	230c      	movs	r3, #12
   1726e:	18fb      	adds	r3, r7, r3
   17270:	222f      	movs	r2, #47	; 0x2f
   17272:	801a      	strh	r2, [r3, #0]
   17274:	230c      	movs	r3, #12
   17276:	18fb      	adds	r3, r7, r3
   17278:	2201      	movs	r2, #1
   1727a:	805a      	strh	r2, [r3, #2]
   1727c:	230c      	movs	r3, #12
   1727e:	18fb      	adds	r3, r7, r3
   17280:	1dfa      	adds	r2, r7, #7
   17282:	605a      	str	r2, [r3, #4]
   17284:	230c      	movs	r3, #12
   17286:	18fb      	adds	r3, r7, r3
   17288:	2200      	movs	r2, #0
   1728a:	721a      	strb	r2, [r3, #8]
   1728c:	230c      	movs	r3, #12
   1728e:	18fb      	adds	r3, r7, r3
   17290:	2200      	movs	r2, #0
   17292:	725a      	strb	r2, [r3, #9]
   17294:	230c      	movs	r3, #12
   17296:	18fb      	adds	r3, r7, r3
   17298:	2200      	movs	r2, #0
   1729a:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    /* Write Register Address */
    i2c_master_write_packet_wait_no_stop(&(i2c_hal_data[cfg_ateccx08a_i2c_default.atcai2c.bus]->i2c_master_instance), &packet);
   1729c:	4b0f      	ldr	r3, [pc, #60]	; (172dc <fan_read_reg+0x7c>)
   1729e:	795b      	ldrb	r3, [r3, #5]
   172a0:	001a      	movs	r2, r3
   172a2:	4b0f      	ldr	r3, [pc, #60]	; (172e0 <fan_read_reg+0x80>)
   172a4:	0092      	lsls	r2, r2, #2
   172a6:	58d3      	ldr	r3, [r2, r3]
   172a8:	001a      	movs	r2, r3
   172aa:	230c      	movs	r3, #12
   172ac:	18fb      	adds	r3, r7, r3
   172ae:	0019      	movs	r1, r3
   172b0:	0010      	movs	r0, r2
   172b2:	4b0c      	ldr	r3, [pc, #48]	; (172e4 <fan_read_reg+0x84>)
   172b4:	4798      	blx	r3

    /* Read data from Register */
    i2c_master_read_packet_wait(&(i2c_hal_data[cfg_ateccx08a_i2c_default.atcai2c.bus]->i2c_master_instance), &packet);
   172b6:	4b09      	ldr	r3, [pc, #36]	; (172dc <fan_read_reg+0x7c>)
   172b8:	795b      	ldrb	r3, [r3, #5]
   172ba:	001a      	movs	r2, r3
   172bc:	4b08      	ldr	r3, [pc, #32]	; (172e0 <fan_read_reg+0x80>)
   172be:	0092      	lsls	r2, r2, #2
   172c0:	58d3      	ldr	r3, [r2, r3]
   172c2:	001a      	movs	r2, r3
   172c4:	230c      	movs	r3, #12
   172c6:	18fb      	adds	r3, r7, r3
   172c8:	0019      	movs	r1, r3
   172ca:	0010      	movs	r0, r2
   172cc:	4b06      	ldr	r3, [pc, #24]	; (172e8 <fan_read_reg+0x88>)
   172ce:	4798      	blx	r3

    return reg;
   172d0:	1dfb      	adds	r3, r7, #7
   172d2:	781b      	ldrb	r3, [r3, #0]
}
   172d4:	0018      	movs	r0, r3
   172d6:	46bd      	mov	sp, r7
   172d8:	b006      	add	sp, #24
   172da:	bd80      	pop	{r7, pc}
   172dc:	20000120 	.word	0x20000120
   172e0:	20002b84 	.word	0x20002b84
   172e4:	00006251 	.word	0x00006251
   172e8:	00006079 	.word	0x00006079

000172ec <fan_write_reg>:

static void fan_write_reg(uint8_t reg, uint8_t txdata)
{
   172ec:	b580      	push	{r7, lr}
   172ee:	b086      	sub	sp, #24
   172f0:	af00      	add	r7, sp, #0
   172f2:	0002      	movs	r2, r0
   172f4:	1dfb      	adds	r3, r7, #7
   172f6:	701a      	strb	r2, [r3, #0]
   172f8:	1dbb      	adds	r3, r7, #6
   172fa:	1c0a      	adds	r2, r1, #0
   172fc:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2];


    struct i2c_master_packet packet = {
   172fe:	2308      	movs	r3, #8
   17300:	18fb      	adds	r3, r7, r3
   17302:	222f      	movs	r2, #47	; 0x2f
   17304:	801a      	strh	r2, [r3, #0]
   17306:	2308      	movs	r3, #8
   17308:	18fb      	adds	r3, r7, r3
   1730a:	2202      	movs	r2, #2
   1730c:	805a      	strh	r2, [r3, #2]
   1730e:	2308      	movs	r3, #8
   17310:	18fb      	adds	r3, r7, r3
   17312:	2214      	movs	r2, #20
   17314:	18ba      	adds	r2, r7, r2
   17316:	605a      	str	r2, [r3, #4]
   17318:	2308      	movs	r3, #8
   1731a:	18fb      	adds	r3, r7, r3
   1731c:	2200      	movs	r2, #0
   1731e:	721a      	strb	r2, [r3, #8]
   17320:	2308      	movs	r3, #8
   17322:	18fb      	adds	r3, r7, r3
   17324:	2200      	movs	r2, #0
   17326:	725a      	strb	r2, [r3, #9]
   17328:	2308      	movs	r3, #8
   1732a:	18fb      	adds	r3, r7, r3
   1732c:	2200      	movs	r2, #0
   1732e:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    buf[0] = reg;
   17330:	2314      	movs	r3, #20
   17332:	18fb      	adds	r3, r7, r3
   17334:	1dfa      	adds	r2, r7, #7
   17336:	7812      	ldrb	r2, [r2, #0]
   17338:	701a      	strb	r2, [r3, #0]
    buf[1] = txdata;
   1733a:	2314      	movs	r3, #20
   1733c:	18fb      	adds	r3, r7, r3
   1733e:	1dba      	adds	r2, r7, #6
   17340:	7812      	ldrb	r2, [r2, #0]
   17342:	705a      	strb	r2, [r3, #1]

    /* Write Data to Register */
    i2c_master_write_packet_wait(&(i2c_hal_data[cfg_ateccx08a_i2c_default.atcai2c.bus]->i2c_master_instance), &packet);
   17344:	4b08      	ldr	r3, [pc, #32]	; (17368 <fan_write_reg+0x7c>)
   17346:	795b      	ldrb	r3, [r3, #5]
   17348:	001a      	movs	r2, r3
   1734a:	4b08      	ldr	r3, [pc, #32]	; (1736c <fan_write_reg+0x80>)
   1734c:	0092      	lsls	r2, r2, #2
   1734e:	58d3      	ldr	r3, [r2, r3]
   17350:	001a      	movs	r2, r3
   17352:	2308      	movs	r3, #8
   17354:	18fb      	adds	r3, r7, r3
   17356:	0019      	movs	r1, r3
   17358:	0010      	movs	r0, r2
   1735a:	4b05      	ldr	r3, [pc, #20]	; (17370 <fan_write_reg+0x84>)
   1735c:	4798      	blx	r3
}
   1735e:	46c0      	nop			; (mov r8, r8)
   17360:	46bd      	mov	sp, r7
   17362:	b006      	add	sp, #24
   17364:	bd80      	pop	{r7, pc}
   17366:	46c0      	nop			; (mov r8, r8)
   17368:	20000120 	.word	0x20000120
   1736c:	20002b84 	.word	0x20002b84
   17370:	00006221 	.word	0x00006221

00017374 <fan_click_init>:
}
#endif


int fan_click_init( void )
{
   17374:	b590      	push	{r4, r7, lr}
   17376:	b083      	sub	sp, #12
   17378:	af00      	add	r7, sp, #0
    uint8_t pid = fan_read_reg(EMC2301_PRODUCT_ID);
   1737a:	1dfc      	adds	r4, r7, #7
   1737c:	20fd      	movs	r0, #253	; 0xfd
   1737e:	4b1c      	ldr	r3, [pc, #112]	; (173f0 <fan_click_init+0x7c>)
   17380:	4798      	blx	r3
   17382:	0003      	movs	r3, r0
   17384:	7023      	strb	r3, [r4, #0]
    uint8_t mid = fan_read_reg(EMC2301_MANUFACTUERE_ID);
   17386:	1dbc      	adds	r4, r7, #6
   17388:	20fe      	movs	r0, #254	; 0xfe
   1738a:	4b19      	ldr	r3, [pc, #100]	; (173f0 <fan_click_init+0x7c>)
   1738c:	4798      	blx	r3
   1738e:	0003      	movs	r3, r0
   17390:	7023      	strb	r3, [r4, #0]

    if(0x37 != pid || 0x5D != mid)
   17392:	1dfb      	adds	r3, r7, #7
   17394:	781b      	ldrb	r3, [r3, #0]
   17396:	2b37      	cmp	r3, #55	; 0x37
   17398:	d103      	bne.n	173a2 <fan_click_init+0x2e>
   1739a:	1dbb      	adds	r3, r7, #6
   1739c:	781b      	ldrb	r3, [r3, #0]
   1739e:	2b5d      	cmp	r3, #93	; 0x5d
   173a0:	d002      	beq.n	173a8 <fan_click_init+0x34>
    {
        return -1;
   173a2:	2301      	movs	r3, #1
   173a4:	425b      	negs	r3, r3
   173a6:	e01e      	b.n	173e6 <fan_click_init+0x72>
            ranges (500, 1k, 2k, 4k).
        6. Set the TACH Target Register to the desired tachometer count.
        7. Enable the RPM-based Fan Speed Control Algorithm by setting the EN_ALGO bit. */

    //fan_write_reg(EMC2301_FAN_SETTING, 0xFF);
    fan_write_reg(EMC2301_FAN_CONFIG1, 0xAE);
   173a8:	21ae      	movs	r1, #174	; 0xae
   173aa:	2032      	movs	r0, #50	; 0x32
   173ac:	4b11      	ldr	r3, [pc, #68]	; (173f4 <fan_click_init+0x80>)
   173ae:	4798      	blx	r3

    fan_write_reg(EMC2301_FAN_MIN_DRIVE, 0x35);
   173b0:	2135      	movs	r1, #53	; 0x35
   173b2:	2038      	movs	r0, #56	; 0x38
   173b4:	4b0f      	ldr	r3, [pc, #60]	; (173f4 <fan_click_init+0x80>)
   173b6:	4798      	blx	r3

    fan_write_reg(EMC2301_FAN_VALID_TACH, 0xF6);
   173b8:	21f6      	movs	r1, #246	; 0xf6
   173ba:	2039      	movs	r0, #57	; 0x39
   173bc:	4b0d      	ldr	r3, [pc, #52]	; (173f4 <fan_click_init+0x80>)
   173be:	4798      	blx	r3

    fan_write_reg(EMC2301_FAN_SPINUP, 0xE8);
   173c0:	21e8      	movs	r1, #232	; 0xe8
   173c2:	2036      	movs	r0, #54	; 0x36
   173c4:	4b0b      	ldr	r3, [pc, #44]	; (173f4 <fan_click_init+0x80>)
   173c6:	4798      	blx	r3

    fan_write_reg(EMC2301_PWM_POLARITY, 0x00);
   173c8:	2100      	movs	r1, #0
   173ca:	202a      	movs	r0, #42	; 0x2a
   173cc:	4b09      	ldr	r3, [pc, #36]	; (173f4 <fan_click_init+0x80>)
   173ce:	4798      	blx	r3

    g_fan_click_cfg1_cached = fan_read_reg(EMC2301_FAN_CONFIG1);
   173d0:	2032      	movs	r0, #50	; 0x32
   173d2:	4b07      	ldr	r3, [pc, #28]	; (173f0 <fan_click_init+0x7c>)
   173d4:	4798      	blx	r3
   173d6:	0003      	movs	r3, r0
   173d8:	001a      	movs	r2, r3
   173da:	4b07      	ldr	r3, [pc, #28]	; (173f8 <fan_click_init+0x84>)
   173dc:	701a      	strb	r2, [r3, #0]

    g_fan_click_ready = true;
   173de:	4b07      	ldr	r3, [pc, #28]	; (173fc <fan_click_init+0x88>)
   173e0:	2201      	movs	r2, #1
   173e2:	701a      	strb	r2, [r3, #0]
    return 0;
   173e4:	2300      	movs	r3, #0
}
   173e6:	0018      	movs	r0, r3
   173e8:	46bd      	mov	sp, r7
   173ea:	b003      	add	sp, #12
   173ec:	bd90      	pop	{r4, r7, pc}
   173ee:	46c0      	nop			; (mov r8, r8)
   173f0:	00017261 	.word	0x00017261
   173f4:	000172ed 	.word	0x000172ed
   173f8:	20002bf4 	.word	0x20002bf4
   173fc:	20000bd0 	.word	0x20000bd0

00017400 <fan_click_count_to_rpm>:
        fan_write_reg(EMC2301_FAN_CONFIG1, fan_config);
    }
}

static uint16_t fan_click_count_to_rpm(uint32_t count)
{
   17400:	b580      	push	{r7, lr}
   17402:	b084      	sub	sp, #16
   17404:	af00      	add	r7, sp, #0
   17406:	6078      	str	r0, [r7, #4]
        
        RPM = (n - 1) * m * f * 60 / (p * c)
    */

    /* Load the constants */
    uint32_t rpm = EMC2301_CLOCK_FREQ_HZ * 60 / EMC2301_FAN_POLES;
   17408:	23f0      	movs	r3, #240	; 0xf0
   1740a:	031b      	lsls	r3, r3, #12
   1740c:	60fb      	str	r3, [r7, #12]

    /* Edges */
    rpm *= 2 * (1 + EMC2301_FAN_CONFIG1_EDGES_VALUE(g_fan_click_cfg1_cached));
   1740e:	4b10      	ldr	r3, [pc, #64]	; (17450 <fan_click_count_to_rpm+0x50>)
   17410:	781b      	ldrb	r3, [r3, #0]
   17412:	10db      	asrs	r3, r3, #3
   17414:	2203      	movs	r2, #3
   17416:	4013      	ands	r3, r2
   17418:	3301      	adds	r3, #1
   1741a:	001a      	movs	r2, r3
   1741c:	68fb      	ldr	r3, [r7, #12]
   1741e:	4353      	muls	r3, r2
   17420:	005b      	lsls	r3, r3, #1
   17422:	60fb      	str	r3, [r7, #12]
    
    /* Multiplier */
    rpm *= 1 << EMC2301_FAN_CONFIG1_RANGE_VALUE(g_fan_click_cfg1_cached);
   17424:	4b0a      	ldr	r3, [pc, #40]	; (17450 <fan_click_count_to_rpm+0x50>)
   17426:	781b      	ldrb	r3, [r3, #0]
   17428:	115b      	asrs	r3, r3, #5
   1742a:	2203      	movs	r2, #3
   1742c:	4013      	ands	r3, r2
   1742e:	68fa      	ldr	r2, [r7, #12]
   17430:	409a      	lsls	r2, r3
   17432:	0013      	movs	r3, r2
   17434:	60fb      	str	r3, [r7, #12]

    /* Convert */
    rpm /= count;
   17436:	4b07      	ldr	r3, [pc, #28]	; (17454 <fan_click_count_to_rpm+0x54>)
   17438:	6879      	ldr	r1, [r7, #4]
   1743a:	68f8      	ldr	r0, [r7, #12]
   1743c:	4798      	blx	r3
   1743e:	0003      	movs	r3, r0
   17440:	60fb      	str	r3, [r7, #12]

    return (uint16_t)rpm;
   17442:	68fb      	ldr	r3, [r7, #12]
   17444:	b29b      	uxth	r3, r3
}
   17446:	0018      	movs	r0, r3
   17448:	46bd      	mov	sp, r7
   1744a:	b004      	add	sp, #16
   1744c:	bd80      	pop	{r7, pc}
   1744e:	46c0      	nop			; (mov r8, r8)
   17450:	20002bf4 	.word	0x20002bf4
   17454:	00019d81 	.word	0x00019d81

00017458 <fan_click_rpm_to_count>:

static uint16_t fan_click_rpm_to_count(uint32_t rpm)
{
   17458:	b580      	push	{r7, lr}
   1745a:	b084      	sub	sp, #16
   1745c:	af00      	add	r7, sp, #0
   1745e:	6078      	str	r0, [r7, #4]
        f = measurement frequency
        
        RPM = (n - 1) * m * f * 60 / (p * c)
    */
    /* Load the constants */
    uint32_t count = EMC2301_CLOCK_FREQ_HZ * 60 / EMC2301_FAN_POLES;
   17460:	23f0      	movs	r3, #240	; 0xf0
   17462:	031b      	lsls	r3, r3, #12
   17464:	60fb      	str	r3, [r7, #12]

    /* Edges */
    count *= 2 * (1 + EMC2301_FAN_CONFIG1_EDGES_VALUE(g_fan_click_cfg1_cached));
   17466:	4b10      	ldr	r3, [pc, #64]	; (174a8 <fan_click_rpm_to_count+0x50>)
   17468:	781b      	ldrb	r3, [r3, #0]
   1746a:	10db      	asrs	r3, r3, #3
   1746c:	2203      	movs	r2, #3
   1746e:	4013      	ands	r3, r2
   17470:	3301      	adds	r3, #1
   17472:	001a      	movs	r2, r3
   17474:	68fb      	ldr	r3, [r7, #12]
   17476:	4353      	muls	r3, r2
   17478:	005b      	lsls	r3, r3, #1
   1747a:	60fb      	str	r3, [r7, #12]
    
    /* Multiplier */
    count *= 1 << EMC2301_FAN_CONFIG1_RANGE_VALUE(g_fan_click_cfg1_cached);
   1747c:	4b0a      	ldr	r3, [pc, #40]	; (174a8 <fan_click_rpm_to_count+0x50>)
   1747e:	781b      	ldrb	r3, [r3, #0]
   17480:	115b      	asrs	r3, r3, #5
   17482:	2203      	movs	r2, #3
   17484:	4013      	ands	r3, r2
   17486:	68fa      	ldr	r2, [r7, #12]
   17488:	409a      	lsls	r2, r3
   1748a:	0013      	movs	r3, r2
   1748c:	60fb      	str	r3, [r7, #12]

    /* Convert */
    count /= rpm;
   1748e:	4b07      	ldr	r3, [pc, #28]	; (174ac <fan_click_rpm_to_count+0x54>)
   17490:	6879      	ldr	r1, [r7, #4]
   17492:	68f8      	ldr	r0, [r7, #12]
   17494:	4798      	blx	r3
   17496:	0003      	movs	r3, r0
   17498:	60fb      	str	r3, [r7, #12]

    return (uint16_t)count;
   1749a:	68fb      	ldr	r3, [r7, #12]
   1749c:	b29b      	uxth	r3, r3
}
   1749e:	0018      	movs	r0, r3
   174a0:	46bd      	mov	sp, r7
   174a2:	b004      	add	sp, #16
   174a4:	bd80      	pop	{r7, pc}
   174a6:	46c0      	nop			; (mov r8, r8)
   174a8:	20002bf4 	.word	0x20002bf4
   174ac:	00019d81 	.word	0x00019d81

000174b0 <fan_click_set_target_tach>:

void fan_click_set_target_tach( uint16_t tach )
{
   174b0:	b590      	push	{r4, r7, lr}
   174b2:	b085      	sub	sp, #20
   174b4:	af00      	add	r7, sp, #0
   174b6:	0002      	movs	r2, r0
   174b8:	1dbb      	adds	r3, r7, #6
   174ba:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = atcab_init(&cfg_ateccx08a_i2c_default);
   174bc:	230f      	movs	r3, #15
   174be:	18fc      	adds	r4, r7, r3
   174c0:	4b1f      	ldr	r3, [pc, #124]	; (17540 <fan_click_set_target_tach+0x90>)
   174c2:	0018      	movs	r0, r3
   174c4:	4b1f      	ldr	r3, [pc, #124]	; (17544 <fan_click_set_target_tach+0x94>)
   174c6:	4798      	blx	r3
   174c8:	0003      	movs	r3, r0
   174ca:	7023      	strb	r3, [r4, #0]
    if(ATCA_SUCCESS != status)
   174cc:	230f      	movs	r3, #15
   174ce:	18fb      	adds	r3, r7, r3
   174d0:	781b      	ldrb	r3, [r3, #0]
   174d2:	2b00      	cmp	r3, #0
   174d4:	d130      	bne.n	17538 <fan_click_set_target_tach+0x88>
    {
        return;
    }

    if(g_fan_click_ready)
   174d6:	4b1c      	ldr	r3, [pc, #112]	; (17548 <fan_click_set_target_tach+0x98>)
   174d8:	781b      	ldrb	r3, [r3, #0]
   174da:	2b00      	cmp	r3, #0
   174dc:	d027      	beq.n	1752e <fan_click_set_target_tach+0x7e>
    {
        if(0 == tach)
   174de:	1dbb      	adds	r3, r7, #6
   174e0:	881b      	ldrh	r3, [r3, #0]
   174e2:	2b00      	cmp	r3, #0
   174e4:	d108      	bne.n	174f8 <fan_click_set_target_tach+0x48>
        {
            fan_write_reg(EMC2301_TACH_TARGET_LOW, 0xFF);
   174e6:	21ff      	movs	r1, #255	; 0xff
   174e8:	203c      	movs	r0, #60	; 0x3c
   174ea:	4b18      	ldr	r3, [pc, #96]	; (1754c <fan_click_set_target_tach+0x9c>)
   174ec:	4798      	blx	r3
            fan_write_reg(EMC2301_TACH_TARGET_HIGH, 0xFF);
   174ee:	21ff      	movs	r1, #255	; 0xff
   174f0:	203d      	movs	r0, #61	; 0x3d
   174f2:	4b16      	ldr	r3, [pc, #88]	; (1754c <fan_click_set_target_tach+0x9c>)
   174f4:	4798      	blx	r3
   174f6:	e01c      	b.n	17532 <fan_click_set_target_tach+0x82>
        }
        else
        {
            tach = fan_click_rpm_to_count(tach);
   174f8:	1dbb      	adds	r3, r7, #6
   174fa:	881b      	ldrh	r3, [r3, #0]
   174fc:	1dbc      	adds	r4, r7, #6
   174fe:	0018      	movs	r0, r3
   17500:	4b13      	ldr	r3, [pc, #76]	; (17550 <fan_click_set_target_tach+0xa0>)
   17502:	4798      	blx	r3
   17504:	0003      	movs	r3, r0
   17506:	8023      	strh	r3, [r4, #0]

            fan_write_reg(EMC2301_TACH_TARGET_LOW, tach << 3);
   17508:	1dbb      	adds	r3, r7, #6
   1750a:	881b      	ldrh	r3, [r3, #0]
   1750c:	b2db      	uxtb	r3, r3
   1750e:	00db      	lsls	r3, r3, #3
   17510:	b2db      	uxtb	r3, r3
   17512:	0019      	movs	r1, r3
   17514:	203c      	movs	r0, #60	; 0x3c
   17516:	4b0d      	ldr	r3, [pc, #52]	; (1754c <fan_click_set_target_tach+0x9c>)
   17518:	4798      	blx	r3
            fan_write_reg(EMC2301_TACH_TARGET_HIGH, tach >> 5);
   1751a:	1dbb      	adds	r3, r7, #6
   1751c:	881b      	ldrh	r3, [r3, #0]
   1751e:	095b      	lsrs	r3, r3, #5
   17520:	b29b      	uxth	r3, r3
   17522:	b2db      	uxtb	r3, r3
   17524:	0019      	movs	r1, r3
   17526:	203d      	movs	r0, #61	; 0x3d
   17528:	4b08      	ldr	r3, [pc, #32]	; (1754c <fan_click_set_target_tach+0x9c>)
   1752a:	4798      	blx	r3
   1752c:	e001      	b.n	17532 <fan_click_set_target_tach+0x82>
        }
    }
    else
    {
        fan_click_init();
   1752e:	4b09      	ldr	r3, [pc, #36]	; (17554 <fan_click_set_target_tach+0xa4>)
   17530:	4798      	blx	r3
    }

    atcab_release();
   17532:	4b09      	ldr	r3, [pc, #36]	; (17558 <fan_click_set_target_tach+0xa8>)
   17534:	4798      	blx	r3
   17536:	e000      	b.n	1753a <fan_click_set_target_tach+0x8a>
        return;
   17538:	46c0      	nop			; (mov r8, r8)
}
   1753a:	46bd      	mov	sp, r7
   1753c:	b005      	add	sp, #20
   1753e:	bd90      	pop	{r4, r7, pc}
   17540:	20000120 	.word	0x20000120
   17544:	0000fe99 	.word	0x0000fe99
   17548:	20000bd0 	.word	0x20000bd0
   1754c:	000172ed 	.word	0x000172ed
   17550:	00017459 	.word	0x00017459
   17554:	00017375 	.word	0x00017375
   17558:	0000ff4d 	.word	0x0000ff4d

0001755c <fan_click_get_tach>:

uint16_t fan_click_get_tach( void )
{
   1755c:	b590      	push	{r4, r7, lr}
   1755e:	b083      	sub	sp, #12
   17560:	af00      	add	r7, sp, #0
    uint16_t ret = UINT16_MAX;
   17562:	1dbb      	adds	r3, r7, #6
   17564:	2201      	movs	r2, #1
   17566:	4252      	negs	r2, r2
   17568:	801a      	strh	r2, [r3, #0]

    ATCA_STATUS status = atcab_init(&cfg_ateccx08a_i2c_default);
   1756a:	1d7c      	adds	r4, r7, #5
   1756c:	4b1e      	ldr	r3, [pc, #120]	; (175e8 <fan_click_get_tach+0x8c>)
   1756e:	0018      	movs	r0, r3
   17570:	4b1e      	ldr	r3, [pc, #120]	; (175ec <fan_click_get_tach+0x90>)
   17572:	4798      	blx	r3
   17574:	0003      	movs	r3, r0
   17576:	7023      	strb	r3, [r4, #0]
    if(ATCA_SUCCESS != status)
   17578:	1d7b      	adds	r3, r7, #5
   1757a:	781b      	ldrb	r3, [r3, #0]
   1757c:	2b00      	cmp	r3, #0
   1757e:	d002      	beq.n	17586 <fan_click_get_tach+0x2a>
    {
        return ret;
   17580:	1dbb      	adds	r3, r7, #6
   17582:	881b      	ldrh	r3, [r3, #0]
   17584:	e02c      	b.n	175e0 <fan_click_get_tach+0x84>
    }

    if(g_fan_click_ready)
   17586:	4b1a      	ldr	r3, [pc, #104]	; (175f0 <fan_click_get_tach+0x94>)
   17588:	781b      	ldrb	r3, [r3, #0]
   1758a:	2b00      	cmp	r3, #0
   1758c:	d022      	beq.n	175d4 <fan_click_get_tach+0x78>
    {
        /* Check if the fan is spinning first */
        ret = fan_read_reg(EMC2301_FAN_SETTING);
   1758e:	2030      	movs	r0, #48	; 0x30
   17590:	4b18      	ldr	r3, [pc, #96]	; (175f4 <fan_click_get_tach+0x98>)
   17592:	4798      	blx	r3
   17594:	0003      	movs	r3, r0
   17596:	001a      	movs	r2, r3
   17598:	1dbb      	adds	r3, r7, #6
   1759a:	801a      	strh	r2, [r3, #0]

        if (ret)
   1759c:	1dbb      	adds	r3, r7, #6
   1759e:	881b      	ldrh	r3, [r3, #0]
   175a0:	2b00      	cmp	r3, #0
   175a2:	d019      	beq.n	175d8 <fan_click_get_tach+0x7c>
        {
            uint32_t speed;

            speed = fan_read_reg(EMC2301_TACH_READING_HIGH) << 5;
   175a4:	203e      	movs	r0, #62	; 0x3e
   175a6:	4b13      	ldr	r3, [pc, #76]	; (175f4 <fan_click_get_tach+0x98>)
   175a8:	4798      	blx	r3
   175aa:	0003      	movs	r3, r0
   175ac:	015b      	lsls	r3, r3, #5
   175ae:	603b      	str	r3, [r7, #0]
            speed |= fan_read_reg(EMC2301_TACH_READING_LOW) >> 3;
   175b0:	203f      	movs	r0, #63	; 0x3f
   175b2:	4b10      	ldr	r3, [pc, #64]	; (175f4 <fan_click_get_tach+0x98>)
   175b4:	4798      	blx	r3
   175b6:	0003      	movs	r3, r0
   175b8:	08db      	lsrs	r3, r3, #3
   175ba:	b2db      	uxtb	r3, r3
   175bc:	001a      	movs	r2, r3
   175be:	683b      	ldr	r3, [r7, #0]
   175c0:	4313      	orrs	r3, r2
   175c2:	603b      	str	r3, [r7, #0]

            ret = fan_click_count_to_rpm(speed);
   175c4:	1dbc      	adds	r4, r7, #6
   175c6:	683b      	ldr	r3, [r7, #0]
   175c8:	0018      	movs	r0, r3
   175ca:	4b0b      	ldr	r3, [pc, #44]	; (175f8 <fan_click_get_tach+0x9c>)
   175cc:	4798      	blx	r3
   175ce:	0003      	movs	r3, r0
   175d0:	8023      	strh	r3, [r4, #0]
   175d2:	e001      	b.n	175d8 <fan_click_get_tach+0x7c>
        }
    }
    else
    {
        fan_click_init();
   175d4:	4b09      	ldr	r3, [pc, #36]	; (175fc <fan_click_get_tach+0xa0>)
   175d6:	4798      	blx	r3
    }

    atcab_release();
   175d8:	4b09      	ldr	r3, [pc, #36]	; (17600 <fan_click_get_tach+0xa4>)
   175da:	4798      	blx	r3
    return ret;
   175dc:	1dbb      	adds	r3, r7, #6
   175de:	881b      	ldrh	r3, [r3, #0]
   175e0:	0018      	movs	r0, r3
   175e2:	46bd      	mov	sp, r7
   175e4:	b003      	add	sp, #12
   175e6:	bd90      	pop	{r4, r7, pc}
   175e8:	20000120 	.word	0x20000120
   175ec:	0000fe99 	.word	0x0000fe99
   175f0:	20000bd0 	.word	0x20000bd0
   175f4:	00017261 	.word	0x00017261
   175f8:	00017401 	.word	0x00017401
   175fc:	00017375 	.word	0x00017375
   17600:	0000ff4d 	.word	0x0000ff4d

00017604 <th5_read_reg>:
#include "cryptoauthlib.h"
#include "hal/hal_samd21_i2c_asf.h"
extern ATCAI2CMaster_t *i2c_hal_data[MAX_I2C_BUSES];

static uint8_t th5_read_reg(uint8_t reg)
{
   17604:	b580      	push	{r7, lr}
   17606:	b086      	sub	sp, #24
   17608:	af00      	add	r7, sp, #0
   1760a:	0002      	movs	r2, r0
   1760c:	1dfb      	adds	r3, r7, #7
   1760e:	701a      	strb	r2, [r3, #0]
    struct i2c_master_packet packet = {
   17610:	230c      	movs	r3, #12
   17612:	18fb      	adds	r3, r7, r3
   17614:	224c      	movs	r2, #76	; 0x4c
   17616:	801a      	strh	r2, [r3, #0]
   17618:	230c      	movs	r3, #12
   1761a:	18fb      	adds	r3, r7, r3
   1761c:	2201      	movs	r2, #1
   1761e:	805a      	strh	r2, [r3, #2]
   17620:	230c      	movs	r3, #12
   17622:	18fb      	adds	r3, r7, r3
   17624:	1dfa      	adds	r2, r7, #7
   17626:	605a      	str	r2, [r3, #4]
   17628:	230c      	movs	r3, #12
   1762a:	18fb      	adds	r3, r7, r3
   1762c:	2200      	movs	r2, #0
   1762e:	721a      	strb	r2, [r3, #8]
   17630:	230c      	movs	r3, #12
   17632:	18fb      	adds	r3, r7, r3
   17634:	2200      	movs	r2, #0
   17636:	725a      	strb	r2, [r3, #9]
   17638:	230c      	movs	r3, #12
   1763a:	18fb      	adds	r3, r7, r3
   1763c:	2200      	movs	r2, #0
   1763e:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    /* Write Register Address */
    i2c_master_write_packet_wait_no_stop(&(i2c_hal_data[cfg_ateccx08a_i2c_default.atcai2c.bus]->i2c_master_instance), &packet);
   17640:	4b0f      	ldr	r3, [pc, #60]	; (17680 <th5_read_reg+0x7c>)
   17642:	795b      	ldrb	r3, [r3, #5]
   17644:	001a      	movs	r2, r3
   17646:	4b0f      	ldr	r3, [pc, #60]	; (17684 <th5_read_reg+0x80>)
   17648:	0092      	lsls	r2, r2, #2
   1764a:	58d3      	ldr	r3, [r2, r3]
   1764c:	001a      	movs	r2, r3
   1764e:	230c      	movs	r3, #12
   17650:	18fb      	adds	r3, r7, r3
   17652:	0019      	movs	r1, r3
   17654:	0010      	movs	r0, r2
   17656:	4b0c      	ldr	r3, [pc, #48]	; (17688 <th5_read_reg+0x84>)
   17658:	4798      	blx	r3

    /* Read data from Register */
    i2c_master_read_packet_wait(&(i2c_hal_data[cfg_ateccx08a_i2c_default.atcai2c.bus]->i2c_master_instance), &packet);
   1765a:	4b09      	ldr	r3, [pc, #36]	; (17680 <th5_read_reg+0x7c>)
   1765c:	795b      	ldrb	r3, [r3, #5]
   1765e:	001a      	movs	r2, r3
   17660:	4b08      	ldr	r3, [pc, #32]	; (17684 <th5_read_reg+0x80>)
   17662:	0092      	lsls	r2, r2, #2
   17664:	58d3      	ldr	r3, [r2, r3]
   17666:	001a      	movs	r2, r3
   17668:	230c      	movs	r3, #12
   1766a:	18fb      	adds	r3, r7, r3
   1766c:	0019      	movs	r1, r3
   1766e:	0010      	movs	r0, r2
   17670:	4b06      	ldr	r3, [pc, #24]	; (1768c <th5_read_reg+0x88>)
   17672:	4798      	blx	r3

    return reg;
   17674:	1dfb      	adds	r3, r7, #7
   17676:	781b      	ldrb	r3, [r3, #0]
}
   17678:	0018      	movs	r0, r3
   1767a:	46bd      	mov	sp, r7
   1767c:	b006      	add	sp, #24
   1767e:	bd80      	pop	{r7, pc}
   17680:	20000120 	.word	0x20000120
   17684:	20002b84 	.word	0x20002b84
   17688:	00006251 	.word	0x00006251
   1768c:	00006079 	.word	0x00006079

00017690 <th5_read_sensor>:
    EXT_DIODE2,
    EXT_DIODE3
};

uint32_t th5_read_sensor(uint8_t sensor)
{
   17690:	b590      	push	{r4, r7, lr}
   17692:	b085      	sub	sp, #20
   17694:	af00      	add	r7, sp, #0
   17696:	0002      	movs	r2, r0
   17698:	1dfb      	adds	r3, r7, #7
   1769a:	701a      	strb	r2, [r3, #0]
    uint16_t temp_raw;
    uint32_t temp = UINT32_MAX;
   1769c:	2301      	movs	r3, #1
   1769e:	425b      	negs	r3, r3
   176a0:	60fb      	str	r3, [r7, #12]

    ATCA_STATUS status = atcab_init(&cfg_ateccx08a_i2c_default);
   176a2:	230b      	movs	r3, #11
   176a4:	18fc      	adds	r4, r7, r3
   176a6:	4b25      	ldr	r3, [pc, #148]	; (1773c <th5_read_sensor+0xac>)
   176a8:	0018      	movs	r0, r3
   176aa:	4b25      	ldr	r3, [pc, #148]	; (17740 <th5_read_sensor+0xb0>)
   176ac:	4798      	blx	r3
   176ae:	0003      	movs	r3, r0
   176b0:	7023      	strb	r3, [r4, #0]
    if(ATCA_SUCCESS != status)
   176b2:	230b      	movs	r3, #11
   176b4:	18fb      	adds	r3, r7, r3
   176b6:	781b      	ldrb	r3, [r3, #0]
   176b8:	2b00      	cmp	r3, #0
   176ba:	d001      	beq.n	176c0 <th5_read_sensor+0x30>
    {
        return temp;
   176bc:	68fb      	ldr	r3, [r7, #12]
   176be:	e038      	b.n	17732 <th5_read_sensor+0xa2>
    }

    if(sensor < 4)
   176c0:	1dfb      	adds	r3, r7, #7
   176c2:	781b      	ldrb	r3, [r3, #0]
   176c4:	2b03      	cmp	r3, #3
   176c6:	d831      	bhi.n	1772c <th5_read_sensor+0x9c>
    {
        temp_raw = th5_read_reg(diode_sensors[sensor] & 0xFF);
   176c8:	1dfb      	adds	r3, r7, #7
   176ca:	781a      	ldrb	r2, [r3, #0]
   176cc:	4b1d      	ldr	r3, [pc, #116]	; (17744 <th5_read_sensor+0xb4>)
   176ce:	0052      	lsls	r2, r2, #1
   176d0:	5ad3      	ldrh	r3, [r2, r3]
   176d2:	b2db      	uxtb	r3, r3
   176d4:	0018      	movs	r0, r3
   176d6:	4b1c      	ldr	r3, [pc, #112]	; (17748 <th5_read_sensor+0xb8>)
   176d8:	4798      	blx	r3
   176da:	0003      	movs	r3, r0
   176dc:	001a      	movs	r2, r3
   176de:	2308      	movs	r3, #8
   176e0:	18fb      	adds	r3, r7, r3
   176e2:	801a      	strh	r2, [r3, #0]
        temp_raw |= th5_read_reg(diode_sensors[sensor] >> 8) << 8;
   176e4:	1dfb      	adds	r3, r7, #7
   176e6:	781a      	ldrb	r2, [r3, #0]
   176e8:	4b16      	ldr	r3, [pc, #88]	; (17744 <th5_read_sensor+0xb4>)
   176ea:	0052      	lsls	r2, r2, #1
   176ec:	5ad3      	ldrh	r3, [r2, r3]
   176ee:	0a1b      	lsrs	r3, r3, #8
   176f0:	b29b      	uxth	r3, r3
   176f2:	b2db      	uxtb	r3, r3
   176f4:	0018      	movs	r0, r3
   176f6:	4b14      	ldr	r3, [pc, #80]	; (17748 <th5_read_sensor+0xb8>)
   176f8:	4798      	blx	r3
   176fa:	0003      	movs	r3, r0
   176fc:	021b      	lsls	r3, r3, #8
   176fe:	b21a      	sxth	r2, r3
   17700:	2308      	movs	r3, #8
   17702:	18fb      	adds	r3, r7, r3
   17704:	2100      	movs	r1, #0
   17706:	5e5b      	ldrsh	r3, [r3, r1]
   17708:	4313      	orrs	r3, r2
   1770a:	b21a      	sxth	r2, r3
   1770c:	2308      	movs	r3, #8
   1770e:	18fb      	adds	r3, r7, r3
   17710:	801a      	strh	r2, [r3, #0]

        temp = (temp_raw >> 5);
   17712:	2308      	movs	r3, #8
   17714:	18fb      	adds	r3, r7, r3
   17716:	881b      	ldrh	r3, [r3, #0]
   17718:	095b      	lsrs	r3, r3, #5
   1771a:	b29b      	uxth	r3, r3
   1771c:	60fb      	str	r3, [r7, #12]
        temp *= 125;
   1771e:	68fa      	ldr	r2, [r7, #12]
   17720:	0013      	movs	r3, r2
   17722:	015b      	lsls	r3, r3, #5
   17724:	1a9b      	subs	r3, r3, r2
   17726:	009b      	lsls	r3, r3, #2
   17728:	189b      	adds	r3, r3, r2
   1772a:	60fb      	str	r3, [r7, #12]
    }

    atcab_release();
   1772c:	4b07      	ldr	r3, [pc, #28]	; (1774c <th5_read_sensor+0xbc>)
   1772e:	4798      	blx	r3
    return temp;
   17730:	68fb      	ldr	r3, [r7, #12]
}
   17732:	0018      	movs	r0, r3
   17734:	46bd      	mov	sp, r7
   17736:	b005      	add	sp, #20
   17738:	bd90      	pop	{r4, r7, pc}
   1773a:	46c0      	nop			; (mov r8, r8)
   1773c:	20000120 	.word	0x20000120
   17740:	0000fe99 	.word	0x0000fe99
   17744:	00021474 	.word	0x00021474
   17748:	00017605 	.word	0x00017605
   1774c:	0000ff4d 	.word	0x0000ff4d

00017750 <get_speed_from_map>:

static uint16_t override_speed;
static uint32_t override_end;

static uint16_t get_speed_from_map(uint16_t temp)
{
   17750:	b580      	push	{r7, lr}
   17752:	b084      	sub	sp, #16
   17754:	af00      	add	r7, sp, #0
   17756:	0002      	movs	r2, r0
   17758:	1dbb      	adds	r3, r7, #6
   1775a:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    uint16_t target;
    for(i=0; i < sizeof(g_temp_speed_map)/sizeof(g_temp_speed_map[0]); i += 2 )
   1775c:	230e      	movs	r3, #14
   1775e:	18fb      	adds	r3, r7, r3
   17760:	2200      	movs	r2, #0
   17762:	801a      	strh	r2, [r3, #0]
   17764:	e01a      	b.n	1779c <get_speed_from_map+0x4c>
    {
        if(temp > g_temp_speed_map[i])
   17766:	230e      	movs	r3, #14
   17768:	18fb      	adds	r3, r7, r3
   1776a:	881a      	ldrh	r2, [r3, #0]
   1776c:	4b11      	ldr	r3, [pc, #68]	; (177b4 <get_speed_from_map+0x64>)
   1776e:	0052      	lsls	r2, r2, #1
   17770:	5ad3      	ldrh	r3, [r2, r3]
   17772:	1dba      	adds	r2, r7, #6
   17774:	8812      	ldrh	r2, [r2, #0]
   17776:	429a      	cmp	r2, r3
   17778:	d909      	bls.n	1778e <get_speed_from_map+0x3e>
        {
            target = g_temp_speed_map[i+1];
   1777a:	230e      	movs	r3, #14
   1777c:	18fb      	adds	r3, r7, r3
   1777e:	881b      	ldrh	r3, [r3, #0]
   17780:	1c59      	adds	r1, r3, #1
   17782:	230c      	movs	r3, #12
   17784:	18fb      	adds	r3, r7, r3
   17786:	4a0b      	ldr	r2, [pc, #44]	; (177b4 <get_speed_from_map+0x64>)
   17788:	0049      	lsls	r1, r1, #1
   1778a:	5a8a      	ldrh	r2, [r1, r2]
   1778c:	801a      	strh	r2, [r3, #0]
    for(i=0; i < sizeof(g_temp_speed_map)/sizeof(g_temp_speed_map[0]); i += 2 )
   1778e:	230e      	movs	r3, #14
   17790:	18fb      	adds	r3, r7, r3
   17792:	220e      	movs	r2, #14
   17794:	18ba      	adds	r2, r7, r2
   17796:	8812      	ldrh	r2, [r2, #0]
   17798:	3202      	adds	r2, #2
   1779a:	801a      	strh	r2, [r3, #0]
   1779c:	230e      	movs	r3, #14
   1779e:	18fb      	adds	r3, r7, r3
   177a0:	881b      	ldrh	r3, [r3, #0]
   177a2:	2b0d      	cmp	r3, #13
   177a4:	d9df      	bls.n	17766 <get_speed_from_map+0x16>
        }
    }
    return target;
   177a6:	230c      	movs	r3, #12
   177a8:	18fb      	adds	r3, r7, r3
   177aa:	881b      	ldrh	r3, [r3, #0]
}
   177ac:	0018      	movs	r0, r3
   177ae:	46bd      	mov	sp, r7
   177b0:	b004      	add	sp, #16
   177b2:	bd80      	pop	{r7, pc}
   177b4:	200001d4 	.word	0x200001d4

000177b8 <update_settings_from_json>:

#ifdef CONFIG_USE_JSON_LIB
bool update_settings_from_json(JSON_Array * json_map)
{
   177b8:	b590      	push	{r4, r7, lr}
   177ba:	b085      	sub	sp, #20
   177bc:	af00      	add	r7, sp, #0
   177be:	6078      	str	r0, [r7, #4]
    JSON_Array * json_array_element = NULL;
   177c0:	2300      	movs	r3, #0
   177c2:	60bb      	str	r3, [r7, #8]
    uint8_t i;

    for(i=0; i< json_array_get_count(json_map); i++)
   177c4:	230f      	movs	r3, #15
   177c6:	18fb      	adds	r3, r7, r3
   177c8:	2200      	movs	r2, #0
   177ca:	701a      	strb	r2, [r3, #0]
   177cc:	e039      	b.n	17842 <update_settings_from_json+0x8a>
    {
        json_array_element = json_array_get_array(json_map,i);
   177ce:	230f      	movs	r3, #15
   177d0:	18fb      	adds	r3, r7, r3
   177d2:	781a      	ldrb	r2, [r3, #0]
   177d4:	687b      	ldr	r3, [r7, #4]
   177d6:	0011      	movs	r1, r2
   177d8:	0018      	movs	r0, r3
   177da:	4b2f      	ldr	r3, [pc, #188]	; (17898 <update_settings_from_json+0xe0>)
   177dc:	4798      	blx	r3
   177de:	0003      	movs	r3, r0
   177e0:	60bb      	str	r3, [r7, #8]
        g_temp_speed_map[i*2] = json_array_get_number(json_array_element, 0);
   177e2:	230f      	movs	r3, #15
   177e4:	18fb      	adds	r3, r7, r3
   177e6:	781b      	ldrb	r3, [r3, #0]
   177e8:	005c      	lsls	r4, r3, #1
   177ea:	68bb      	ldr	r3, [r7, #8]
   177ec:	2100      	movs	r1, #0
   177ee:	0018      	movs	r0, r3
   177f0:	4b2a      	ldr	r3, [pc, #168]	; (1789c <update_settings_from_json+0xe4>)
   177f2:	4798      	blx	r3
   177f4:	000a      	movs	r2, r1
   177f6:	0001      	movs	r1, r0
   177f8:	4b29      	ldr	r3, [pc, #164]	; (178a0 <update_settings_from_json+0xe8>)
   177fa:	0008      	movs	r0, r1
   177fc:	0011      	movs	r1, r2
   177fe:	4798      	blx	r3
   17800:	0003      	movs	r3, r0
   17802:	b299      	uxth	r1, r3
   17804:	4b27      	ldr	r3, [pc, #156]	; (178a4 <update_settings_from_json+0xec>)
   17806:	0062      	lsls	r2, r4, #1
   17808:	52d1      	strh	r1, [r2, r3]
        g_temp_speed_map[i*2+1] = json_array_get_number(json_array_element, 1);
   1780a:	230f      	movs	r3, #15
   1780c:	18fb      	adds	r3, r7, r3
   1780e:	781b      	ldrb	r3, [r3, #0]
   17810:	005b      	lsls	r3, r3, #1
   17812:	1c5c      	adds	r4, r3, #1
   17814:	68bb      	ldr	r3, [r7, #8]
   17816:	2101      	movs	r1, #1
   17818:	0018      	movs	r0, r3
   1781a:	4b20      	ldr	r3, [pc, #128]	; (1789c <update_settings_from_json+0xe4>)
   1781c:	4798      	blx	r3
   1781e:	000a      	movs	r2, r1
   17820:	0001      	movs	r1, r0
   17822:	4b1f      	ldr	r3, [pc, #124]	; (178a0 <update_settings_from_json+0xe8>)
   17824:	0008      	movs	r0, r1
   17826:	0011      	movs	r1, r2
   17828:	4798      	blx	r3
   1782a:	0003      	movs	r3, r0
   1782c:	b299      	uxth	r1, r3
   1782e:	4b1d      	ldr	r3, [pc, #116]	; (178a4 <update_settings_from_json+0xec>)
   17830:	0062      	lsls	r2, r4, #1
   17832:	52d1      	strh	r1, [r2, r3]
    for(i=0; i< json_array_get_count(json_map); i++)
   17834:	230f      	movs	r3, #15
   17836:	18fb      	adds	r3, r7, r3
   17838:	781a      	ldrb	r2, [r3, #0]
   1783a:	230f      	movs	r3, #15
   1783c:	18fb      	adds	r3, r7, r3
   1783e:	3201      	adds	r2, #1
   17840:	701a      	strb	r2, [r3, #0]
   17842:	230f      	movs	r3, #15
   17844:	18fb      	adds	r3, r7, r3
   17846:	781c      	ldrb	r4, [r3, #0]
   17848:	687b      	ldr	r3, [r7, #4]
   1784a:	0018      	movs	r0, r3
   1784c:	4b16      	ldr	r3, [pc, #88]	; (178a8 <update_settings_from_json+0xf0>)
   1784e:	4798      	blx	r3
   17850:	0003      	movs	r3, r0
   17852:	429c      	cmp	r4, r3
   17854:	d3bb      	bcc.n	177ce <update_settings_from_json+0x16>
    }
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
   17856:	230f      	movs	r3, #15
   17858:	18fa      	adds	r2, r7, r3
   1785a:	230f      	movs	r3, #15
   1785c:	18fb      	adds	r3, r7, r3
   1785e:	781b      	ldrb	r3, [r3, #0]
   17860:	18db      	adds	r3, r3, r3
   17862:	7013      	strb	r3, [r2, #0]
   17864:	e00e      	b.n	17884 <update_settings_from_json+0xcc>
    {
        g_temp_speed_map[i] = UINT16_MAX;
   17866:	230f      	movs	r3, #15
   17868:	18fb      	adds	r3, r7, r3
   1786a:	781a      	ldrb	r2, [r3, #0]
   1786c:	4b0d      	ldr	r3, [pc, #52]	; (178a4 <update_settings_from_json+0xec>)
   1786e:	0052      	lsls	r2, r2, #1
   17870:	2101      	movs	r1, #1
   17872:	4249      	negs	r1, r1
   17874:	52d1      	strh	r1, [r2, r3]
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
   17876:	230f      	movs	r3, #15
   17878:	18fb      	adds	r3, r7, r3
   1787a:	220f      	movs	r2, #15
   1787c:	18ba      	adds	r2, r7, r2
   1787e:	7812      	ldrb	r2, [r2, #0]
   17880:	3202      	adds	r2, #2
   17882:	701a      	strb	r2, [r3, #0]
   17884:	230f      	movs	r3, #15
   17886:	18fb      	adds	r3, r7, r3
   17888:	781b      	ldrb	r3, [r3, #0]
   1788a:	2b0d      	cmp	r3, #13
   1788c:	d9eb      	bls.n	17866 <update_settings_from_json+0xae>
    }
}
   1788e:	46c0      	nop			; (mov r8, r8)
   17890:	0018      	movs	r0, r3
   17892:	46bd      	mov	sp, r7
   17894:	b005      	add	sp, #20
   17896:	bd90      	pop	{r4, r7, pc}
   17898:	00015bc5 	.word	0x00015bc5
   1789c:	00015b91 	.word	0x00015b91
   178a0:	0001a1b9 	.word	0x0001a1b9
   178a4:	200001d4 	.word	0x200001d4
   178a8:	00015bf5 	.word	0x00015bf5

000178ac <override_from_json>:

bool override_from_json(JSON_Object * json_override_object)
{
   178ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   178ae:	b083      	sub	sp, #12
   178b0:	af00      	add	r7, sp, #0
   178b2:	6078      	str	r0, [r7, #4]

    override_speed = json_object_get_number(json_override_object, "fan-speed");
   178b4:	4a19      	ldr	r2, [pc, #100]	; (1791c <override_from_json+0x70>)
   178b6:	687b      	ldr	r3, [r7, #4]
   178b8:	0011      	movs	r1, r2
   178ba:	0018      	movs	r0, r3
   178bc:	4b18      	ldr	r3, [pc, #96]	; (17920 <override_from_json+0x74>)
   178be:	4798      	blx	r3
   178c0:	000a      	movs	r2, r1
   178c2:	0001      	movs	r1, r0
   178c4:	4b17      	ldr	r3, [pc, #92]	; (17924 <override_from_json+0x78>)
   178c6:	0008      	movs	r0, r1
   178c8:	0011      	movs	r1, r2
   178ca:	4798      	blx	r3
   178cc:	0003      	movs	r3, r0
   178ce:	b29a      	uxth	r2, r3
   178d0:	4b15      	ldr	r3, [pc, #84]	; (17928 <override_from_json+0x7c>)
   178d2:	801a      	strh	r2, [r3, #0]
    override_end = time_utils_get_utc() + json_object_get_number(json_override_object, "duration");
   178d4:	4b15      	ldr	r3, [pc, #84]	; (1792c <override_from_json+0x80>)
   178d6:	4798      	blx	r3
   178d8:	0002      	movs	r2, r0
   178da:	4b15      	ldr	r3, [pc, #84]	; (17930 <override_from_json+0x84>)
   178dc:	0010      	movs	r0, r2
   178de:	4798      	blx	r3
   178e0:	0005      	movs	r5, r0
   178e2:	000e      	movs	r6, r1
   178e4:	4a13      	ldr	r2, [pc, #76]	; (17934 <override_from_json+0x88>)
   178e6:	687b      	ldr	r3, [r7, #4]
   178e8:	0011      	movs	r1, r2
   178ea:	0018      	movs	r0, r3
   178ec:	4b0c      	ldr	r3, [pc, #48]	; (17920 <override_from_json+0x74>)
   178ee:	4798      	blx	r3
   178f0:	0002      	movs	r2, r0
   178f2:	000b      	movs	r3, r1
   178f4:	4c10      	ldr	r4, [pc, #64]	; (17938 <override_from_json+0x8c>)
   178f6:	0028      	movs	r0, r5
   178f8:	0031      	movs	r1, r6
   178fa:	47a0      	blx	r4
   178fc:	0003      	movs	r3, r0
   178fe:	000c      	movs	r4, r1
   17900:	0019      	movs	r1, r3
   17902:	0022      	movs	r2, r4
   17904:	4b07      	ldr	r3, [pc, #28]	; (17924 <override_from_json+0x78>)
   17906:	0008      	movs	r0, r1
   17908:	0011      	movs	r1, r2
   1790a:	4798      	blx	r3
   1790c:	0002      	movs	r2, r0
   1790e:	4b0b      	ldr	r3, [pc, #44]	; (1793c <override_from_json+0x90>)
   17910:	601a      	str	r2, [r3, #0]
}
   17912:	46c0      	nop			; (mov r8, r8)
   17914:	0018      	movs	r0, r3
   17916:	46bd      	mov	sp, r7
   17918:	b003      	add	sp, #12
   1791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1791c:	0002147c 	.word	0x0002147c
   17920:	00015aa5 	.word	0x00015aa5
   17924:	0001a1b9 	.word	0x0001a1b9
   17928:	20000bd2 	.word	0x20000bd2
   1792c:	00016625 	.word	0x00016625
   17930:	0001bc95 	.word	0x0001bc95
   17934:	00021488 	.word	0x00021488
   17938:	0001a1f5 	.word	0x0001a1f5
   1793c:	20000bd4 	.word	0x20000bd4

00017940 <get_averaged_temp>:
#define TEMP_SENSOR_SAMPLES    4
static uint16_t g_temp_buffer[TEMP_SENSOR_SAMPLES];
static uint8_t g_temp_buf_idx;

static uint16_t get_averaged_temp(void)
{
   17940:	b590      	push	{r4, r7, lr}
   17942:	b083      	sub	sp, #12
   17944:	af00      	add	r7, sp, #0
    uint32_t avg;
    uint8_t i;

    g_temp_buffer[g_temp_buf_idx++] = th5_read_sensor(0);
   17946:	4b1b      	ldr	r3, [pc, #108]	; (179b4 <get_averaged_temp+0x74>)
   17948:	781b      	ldrb	r3, [r3, #0]
   1794a:	1c5a      	adds	r2, r3, #1
   1794c:	b2d1      	uxtb	r1, r2
   1794e:	4a19      	ldr	r2, [pc, #100]	; (179b4 <get_averaged_temp+0x74>)
   17950:	7011      	strb	r1, [r2, #0]
   17952:	001c      	movs	r4, r3
   17954:	2000      	movs	r0, #0
   17956:	4b18      	ldr	r3, [pc, #96]	; (179b8 <get_averaged_temp+0x78>)
   17958:	4798      	blx	r3
   1795a:	0003      	movs	r3, r0
   1795c:	b299      	uxth	r1, r3
   1795e:	4b17      	ldr	r3, [pc, #92]	; (179bc <get_averaged_temp+0x7c>)
   17960:	0062      	lsls	r2, r4, #1
   17962:	52d1      	strh	r1, [r2, r3]
    if(TEMP_SENSOR_SAMPLES <= g_temp_buf_idx)
   17964:	4b13      	ldr	r3, [pc, #76]	; (179b4 <get_averaged_temp+0x74>)
   17966:	781b      	ldrb	r3, [r3, #0]
   17968:	2b03      	cmp	r3, #3
   1796a:	d902      	bls.n	17972 <get_averaged_temp+0x32>
    {
        g_temp_buf_idx = 0;
   1796c:	4b11      	ldr	r3, [pc, #68]	; (179b4 <get_averaged_temp+0x74>)
   1796e:	2200      	movs	r2, #0
   17970:	701a      	strb	r2, [r3, #0]
    }
    avg = g_temp_buffer[0];
   17972:	4b12      	ldr	r3, [pc, #72]	; (179bc <get_averaged_temp+0x7c>)
   17974:	881b      	ldrh	r3, [r3, #0]
   17976:	607b      	str	r3, [r7, #4]
    for(i=1; i<TEMP_SENSOR_SAMPLES; i++ )
   17978:	1cfb      	adds	r3, r7, #3
   1797a:	2201      	movs	r2, #1
   1797c:	701a      	strb	r2, [r3, #0]
   1797e:	e00d      	b.n	1799c <get_averaged_temp+0x5c>
    {
        avg += g_temp_buffer[i];
   17980:	1cfb      	adds	r3, r7, #3
   17982:	781a      	ldrb	r2, [r3, #0]
   17984:	4b0d      	ldr	r3, [pc, #52]	; (179bc <get_averaged_temp+0x7c>)
   17986:	0052      	lsls	r2, r2, #1
   17988:	5ad3      	ldrh	r3, [r2, r3]
   1798a:	001a      	movs	r2, r3
   1798c:	687b      	ldr	r3, [r7, #4]
   1798e:	189b      	adds	r3, r3, r2
   17990:	607b      	str	r3, [r7, #4]
    for(i=1; i<TEMP_SENSOR_SAMPLES; i++ )
   17992:	1cfb      	adds	r3, r7, #3
   17994:	781a      	ldrb	r2, [r3, #0]
   17996:	1cfb      	adds	r3, r7, #3
   17998:	3201      	adds	r2, #1
   1799a:	701a      	strb	r2, [r3, #0]
   1799c:	1cfb      	adds	r3, r7, #3
   1799e:	781b      	ldrb	r3, [r3, #0]
   179a0:	2b03      	cmp	r3, #3
   179a2:	d9ed      	bls.n	17980 <get_averaged_temp+0x40>
    }
    
    return (avg / TEMP_SENSOR_SAMPLES);
   179a4:	687b      	ldr	r3, [r7, #4]
   179a6:	089b      	lsrs	r3, r3, #2
   179a8:	b29b      	uxth	r3, r3
}
   179aa:	0018      	movs	r0, r3
   179ac:	46bd      	mov	sp, r7
   179ae:	b003      	add	sp, #12
   179b0:	bd90      	pop	{r4, r7, pc}
   179b2:	46c0      	nop			; (mov r8, r8)
   179b4:	20000be0 	.word	0x20000be0
   179b8:	00017691 	.word	0x00017691
   179bc:	20000bd8 	.word	0x20000bd8

000179c0 <sensor_task>:
        *buffer = ']';
    }
}

 void sensor_task(void)
{
   179c0:	b590      	push	{r4, r7, lr}
   179c2:	b083      	sub	sp, #12
   179c4:	af00      	add	r7, sp, #0
    uint16_t temp;
    uint16_t speed;

    if(override_end <= time_utils_get_utc())
   179c6:	4b11      	ldr	r3, [pc, #68]	; (17a0c <sensor_task+0x4c>)
   179c8:	4798      	blx	r3
   179ca:	0002      	movs	r2, r0
   179cc:	4b10      	ldr	r3, [pc, #64]	; (17a10 <sensor_task+0x50>)
   179ce:	681b      	ldr	r3, [r3, #0]
   179d0:	429a      	cmp	r2, r3
   179d2:	d30d      	bcc.n	179f0 <sensor_task+0x30>
    {
        /* Get new sensor reading and target */
        temp = get_averaged_temp();
   179d4:	1d3c      	adds	r4, r7, #4
   179d6:	4b0f      	ldr	r3, [pc, #60]	; (17a14 <sensor_task+0x54>)
   179d8:	4798      	blx	r3
   179da:	0003      	movs	r3, r0
   179dc:	8023      	strh	r3, [r4, #0]
        speed = get_speed_from_map(temp);
   179de:	1dbc      	adds	r4, r7, #6
   179e0:	1d3b      	adds	r3, r7, #4
   179e2:	881b      	ldrh	r3, [r3, #0]
   179e4:	0018      	movs	r0, r3
   179e6:	4b0c      	ldr	r3, [pc, #48]	; (17a18 <sensor_task+0x58>)
   179e8:	4798      	blx	r3
   179ea:	0003      	movs	r3, r0
   179ec:	8023      	strh	r3, [r4, #0]
   179ee:	e003      	b.n	179f8 <sensor_task+0x38>
    }
    else
    {
        speed = override_speed;
   179f0:	1dbb      	adds	r3, r7, #6
   179f2:	4a0a      	ldr	r2, [pc, #40]	; (17a1c <sensor_task+0x5c>)
   179f4:	8812      	ldrh	r2, [r2, #0]
   179f6:	801a      	strh	r2, [r3, #0]
    }

    /* Set new target */
    fan_click_set_target_tach(speed);
   179f8:	1dbb      	adds	r3, r7, #6
   179fa:	881b      	ldrh	r3, [r3, #0]
   179fc:	0018      	movs	r0, r3
   179fe:	4b08      	ldr	r3, [pc, #32]	; (17a20 <sensor_task+0x60>)
   17a00:	4798      	blx	r3
   17a02:	46c0      	nop			; (mov r8, r8)
   17a04:	46bd      	mov	sp, r7
   17a06:	b003      	add	sp, #12
   17a08:	bd90      	pop	{r4, r7, pc}
   17a0a:	46c0      	nop			; (mov r8, r8)
   17a0c:	00016625 	.word	0x00016625
   17a10:	20000bd4 	.word	0x20000bd4
   17a14:	00017941 	.word	0x00017941
   17a18:	00017751 	.word	0x00017751
   17a1c:	20000bd2 	.word	0x20000bd2
   17a20:	000174b1 	.word	0x000174b1

00017a24 <usb_hid_init>:

/**
 * \brief Initializes the USB HID interface.
 */
void usb_hid_init(void)
{
   17a24:	b580      	push	{r7, lr}
   17a26:	af00      	add	r7, sp, #0
    // Start the USB device stack
    udc_start();
   17a28:	4b02      	ldr	r3, [pc, #8]	; (17a34 <usb_hid_init+0x10>)
   17a2a:	4798      	blx	r3
}
   17a2c:	46c0      	nop			; (mov r8, r8)
   17a2e:	46bd      	mov	sp, r7
   17a30:	bd80      	pop	{r7, pc}
   17a32:	46c0      	nop			; (mov r8, r8)
   17a34:	00000c75 	.word	0x00000c75

00017a38 <usb_send_response_message>:

bool usb_send_response_message(uint8_t *response, uint16_t response_length)
{
   17a38:	b590      	push	{r4, r7, lr}
   17a3a:	b095      	sub	sp, #84	; 0x54
   17a3c:	af00      	add	r7, sp, #0
   17a3e:	6078      	str	r0, [r7, #4]
   17a40:	000a      	movs	r2, r1
   17a42:	1cbb      	adds	r3, r7, #2
   17a44:	801a      	strh	r2, [r3, #0]
    bool usb_report_sent = false;
   17a46:	234f      	movs	r3, #79	; 0x4f
   17a48:	18fb      	adds	r3, r7, r3
   17a4a:	2200      	movs	r2, #0
   17a4c:	701a      	strb	r2, [r3, #0]
    uint16_t current_response_location = 0;
   17a4e:	234c      	movs	r3, #76	; 0x4c
   17a50:	18fb      	adds	r3, r7, r3
   17a52:	2200      	movs	r2, #0
   17a54:	801a      	strh	r2, [r3, #0]
    uint8_t usb_report[UDI_HID_REPORT_OUT_SIZE];
    uint8_t usb_report_length = 0;
   17a56:	234a      	movs	r3, #74	; 0x4a
   17a58:	18fb      	adds	r3, r7, r3
   17a5a:	2200      	movs	r2, #0
   17a5c:	701a      	strb	r2, [r3, #0]
    uint8_t send_retries = 5;
   17a5e:	234b      	movs	r3, #75	; 0x4b
   17a60:	18fb      	adds	r3, r7, r3
   17a62:	2205      	movs	r2, #5
   17a64:	701a      	strb	r2, [r3, #0]
    
    if (response == NULL)
   17a66:	687b      	ldr	r3, [r7, #4]
   17a68:	2b00      	cmp	r3, #0
   17a6a:	d166      	bne.n	17b3a <usb_send_response_message+0x102>
    {
        return false;
   17a6c:	2300      	movs	r3, #0
   17a6e:	e06d      	b.n	17b4c <usb_send_response_message+0x114>

    // Send the USB response message
    while (response_length > 0)
    {
        // Create the USB report
        usb_report_length = min(UDI_HID_REPORT_OUT_SIZE, response_length);
   17a70:	1cbb      	adds	r3, r7, #2
   17a72:	881b      	ldrh	r3, [r3, #0]
   17a74:	2b40      	cmp	r3, #64	; 0x40
   17a76:	d803      	bhi.n	17a80 <usb_send_response_message+0x48>
   17a78:	1cbb      	adds	r3, r7, #2
   17a7a:	881b      	ldrh	r3, [r3, #0]
   17a7c:	b2da      	uxtb	r2, r3
   17a7e:	e000      	b.n	17a82 <usb_send_response_message+0x4a>
   17a80:	2240      	movs	r2, #64	; 0x40
   17a82:	234a      	movs	r3, #74	; 0x4a
   17a84:	18fb      	adds	r3, r7, r3
   17a86:	701a      	strb	r2, [r3, #0]
        
        memset(&usb_report[0], 0, sizeof(usb_report));
   17a88:	2308      	movs	r3, #8
   17a8a:	18fb      	adds	r3, r7, r3
   17a8c:	2240      	movs	r2, #64	; 0x40
   17a8e:	2100      	movs	r1, #0
   17a90:	0018      	movs	r0, r3
   17a92:	4b30      	ldr	r3, [pc, #192]	; (17b54 <usb_send_response_message+0x11c>)
   17a94:	4798      	blx	r3
        memcpy(&usb_report[0], &response[current_response_location], 
   17a96:	234c      	movs	r3, #76	; 0x4c
   17a98:	18fb      	adds	r3, r7, r3
   17a9a:	881b      	ldrh	r3, [r3, #0]
   17a9c:	687a      	ldr	r2, [r7, #4]
   17a9e:	18d1      	adds	r1, r2, r3
   17aa0:	234a      	movs	r3, #74	; 0x4a
   17aa2:	18fb      	adds	r3, r7, r3
   17aa4:	781a      	ldrb	r2, [r3, #0]
   17aa6:	2308      	movs	r3, #8
   17aa8:	18fb      	adds	r3, r7, r3
   17aaa:	0018      	movs	r0, r3
   17aac:	4b2a      	ldr	r3, [pc, #168]	; (17b58 <usb_send_response_message+0x120>)
   17aae:	4798      	blx	r3
               usb_report_length);
        
        usb_report_sent = udi_hid_generic_send_report_in(usb_report);
   17ab0:	234f      	movs	r3, #79	; 0x4f
   17ab2:	18fc      	adds	r4, r7, r3
   17ab4:	2308      	movs	r3, #8
   17ab6:	18fb      	adds	r3, r7, r3
   17ab8:	0018      	movs	r0, r3
   17aba:	4b28      	ldr	r3, [pc, #160]	; (17b5c <usb_send_response_message+0x124>)
   17abc:	4798      	blx	r3
   17abe:	0003      	movs	r3, r0
   17ac0:	7023      	strb	r3, [r4, #0]
        if (usb_report_sent == true)
   17ac2:	234f      	movs	r3, #79	; 0x4f
   17ac4:	18fb      	adds	r3, r7, r3
   17ac6:	781b      	ldrb	r3, [r3, #0]
   17ac8:	2b00      	cmp	r3, #0
   17aca:	d01d      	beq.n	17b08 <usb_send_response_message+0xd0>
        {
            current_response_location += usb_report_length;
   17acc:	234a      	movs	r3, #74	; 0x4a
   17ace:	18fb      	adds	r3, r7, r3
   17ad0:	781b      	ldrb	r3, [r3, #0]
   17ad2:	b299      	uxth	r1, r3
   17ad4:	234c      	movs	r3, #76	; 0x4c
   17ad6:	18fb      	adds	r3, r7, r3
   17ad8:	224c      	movs	r2, #76	; 0x4c
   17ada:	18ba      	adds	r2, r7, r2
   17adc:	8812      	ldrh	r2, [r2, #0]
   17ade:	188a      	adds	r2, r1, r2
   17ae0:	801a      	strh	r2, [r3, #0]
            response_length -= usb_report_length;            
   17ae2:	234a      	movs	r3, #74	; 0x4a
   17ae4:	18fb      	adds	r3, r7, r3
   17ae6:	781b      	ldrb	r3, [r3, #0]
   17ae8:	b29a      	uxth	r2, r3
   17aea:	1cbb      	adds	r3, r7, #2
   17aec:	1cb9      	adds	r1, r7, #2
   17aee:	8809      	ldrh	r1, [r1, #0]
   17af0:	1a8a      	subs	r2, r1, r2
   17af2:	801a      	strh	r2, [r3, #0]

            // Delay for 50ms
            delay_ms(USB_DELAY);
   17af4:	2032      	movs	r0, #50	; 0x32
   17af6:	4b1a      	ldr	r3, [pc, #104]	; (17b60 <usb_send_response_message+0x128>)
   17af8:	4798      	blx	r3
   17afa:	234b      	movs	r3, #75	; 0x4b
   17afc:	18fb      	adds	r3, r7, r3
   17afe:	224b      	movs	r2, #75	; 0x4b
   17b00:	18ba      	adds	r2, r7, r2
   17b02:	7812      	ldrb	r2, [r2, #0]
   17b04:	701a      	strb	r2, [r3, #0]
   17b06:	e018      	b.n	17b3a <usb_send_response_message+0x102>
        }
        else
        {
            if (send_retries > 0)
   17b08:	234b      	movs	r3, #75	; 0x4b
   17b0a:	18fb      	adds	r3, r7, r3
   17b0c:	781b      	ldrb	r3, [r3, #0]
   17b0e:	2b00      	cmp	r3, #0
   17b10:	d018      	beq.n	17b44 <usb_send_response_message+0x10c>
            {
                // Delay for 50ms
                delay_ms(USB_DELAY);
   17b12:	2032      	movs	r0, #50	; 0x32
   17b14:	4b12      	ldr	r3, [pc, #72]	; (17b60 <usb_send_response_message+0x128>)
   17b16:	4798      	blx	r3
                
                // Decrement the send retries
                send_retries--; 
   17b18:	234b      	movs	r3, #75	; 0x4b
   17b1a:	18fb      	adds	r3, r7, r3
   17b1c:	781a      	ldrb	r2, [r3, #0]
   17b1e:	234b      	movs	r3, #75	; 0x4b
   17b20:	18fb      	adds	r3, r7, r3
   17b22:	3a01      	subs	r2, #1
   17b24:	701a      	strb	r2, [r3, #0]
   17b26:	1cbb      	adds	r3, r7, #2
   17b28:	1cba      	adds	r2, r7, #2
   17b2a:	8812      	ldrh	r2, [r2, #0]
   17b2c:	801a      	strh	r2, [r3, #0]
   17b2e:	234c      	movs	r3, #76	; 0x4c
   17b30:	18fb      	adds	r3, r7, r3
   17b32:	224c      	movs	r2, #76	; 0x4c
   17b34:	18ba      	adds	r2, r7, r2
   17b36:	8812      	ldrh	r2, [r2, #0]
   17b38:	801a      	strh	r2, [r3, #0]
    while (response_length > 0)
   17b3a:	1cbb      	adds	r3, r7, #2
   17b3c:	881b      	ldrh	r3, [r3, #0]
   17b3e:	2b00      	cmp	r3, #0
   17b40:	d196      	bne.n	17a70 <usb_send_response_message+0x38>
   17b42:	e000      	b.n	17b46 <usb_send_response_message+0x10e>
            }
            else
            {
                // Break the while loop
                break;
   17b44:	46c0      	nop			; (mov r8, r8)
            }
        }  
    }
    
    return usb_report_sent;
   17b46:	234f      	movs	r3, #79	; 0x4f
   17b48:	18fb      	adds	r3, r7, r3
   17b4a:	781b      	ldrb	r3, [r3, #0]
}
   17b4c:	0018      	movs	r0, r3
   17b4e:	46bd      	mov	sp, r7
   17b50:	b015      	add	sp, #84	; 0x54
   17b52:	bd90      	pop	{r4, r7, pc}
   17b54:	0001c21b 	.word	0x0001c21b
   17b58:	0001c1e5 	.word	0x0001c1e5
   17b5c:	000006c9 	.word	0x000006c9
   17b60:	00000539 	.word	0x00000539

00017b64 <usb_hid_enable_callback>:
 * \return    Whether the USB interface should be enabled
 *                TRUE  - The USB interface should be enabled
 *                FALSE - The USB interface should not be enabled
 */
bool usb_hid_enable_callback(void)
{
   17b64:	b580      	push	{r7, lr}
   17b66:	af00      	add	r7, sp, #0
    return true;
   17b68:	2301      	movs	r3, #1
}
   17b6a:	0018      	movs	r0, r3
   17b6c:	46bd      	mov	sp, r7
   17b6e:	bd80      	pop	{r7, pc}

00017b70 <usb_hid_disable_callback>:

/**
 * \brief Callback called when the USB host disables the USB interface.
 */
void usb_hid_disable_callback(void)
{
   17b70:	b580      	push	{r7, lr}
   17b72:	af00      	add	r7, sp, #0
}
   17b74:	46c0      	nop			; (mov r8, r8)
   17b76:	46bd      	mov	sp, r7
   17b78:	bd80      	pop	{r7, pc}

00017b7a <usb_hid_wakeup_callback>:

/**
 * \brief Callback called when the USB endpoint wakeup event occurs.
 */
void usb_hid_wakeup_callback(void)
{
   17b7a:	b580      	push	{r7, lr}
   17b7c:	af00      	add	r7, sp, #0
}
   17b7e:	46c0      	nop			; (mov r8, r8)
   17b80:	46bd      	mov	sp, r7
   17b82:	bd80      	pop	{r7, pc}

00017b84 <usb_hid_report_out_callback>:
 * \brief Handles the incoming USB report.
 *
 * \param[in] report                The incoming USB report
 */
void usb_hid_report_out_callback(uint8_t *report)
{
   17b84:	b580      	push	{r7, lr}
   17b86:	b084      	sub	sp, #16
   17b88:	af00      	add	r7, sp, #0
   17b8a:	6078      	str	r0, [r7, #4]
    // Handle incoming USB report
    uint8_t * pRxBuf = atca_kit_get_rx_buffer();
   17b8c:	4b19      	ldr	r3, [pc, #100]	; (17bf4 <usb_hid_report_out_callback+0x70>)
   17b8e:	4798      	blx	r3
   17b90:	0003      	movs	r3, r0
   17b92:	60bb      	str	r3, [r7, #8]

    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
   17b94:	2300      	movs	r3, #0
   17b96:	60fb      	str	r3, [r7, #12]
   17b98:	e025      	b.n	17be6 <usb_hid_report_out_callback+0x62>
    {
        // Save the incoming USB packet
        pRxBuf[g_usb_buffer_length] = report[index];
   17b9a:	4b17      	ldr	r3, [pc, #92]	; (17bf8 <usb_hid_report_out_callback+0x74>)
   17b9c:	881b      	ldrh	r3, [r3, #0]
   17b9e:	001a      	movs	r2, r3
   17ba0:	68bb      	ldr	r3, [r7, #8]
   17ba2:	189b      	adds	r3, r3, r2
   17ba4:	6879      	ldr	r1, [r7, #4]
   17ba6:	68fa      	ldr	r2, [r7, #12]
   17ba8:	188a      	adds	r2, r1, r2
   17baa:	7812      	ldrb	r2, [r2, #0]
   17bac:	701a      	strb	r2, [r3, #0]
        g_usb_buffer_length++;
   17bae:	4b12      	ldr	r3, [pc, #72]	; (17bf8 <usb_hid_report_out_callback+0x74>)
   17bb0:	881b      	ldrh	r3, [r3, #0]
   17bb2:	3301      	adds	r3, #1
   17bb4:	b29a      	uxth	r2, r3
   17bb6:	4b10      	ldr	r3, [pc, #64]	; (17bf8 <usb_hid_report_out_callback+0x74>)
   17bb8:	801a      	strh	r2, [r3, #0]

        // Check if the USB message was received
        if (report[index] == USB_MESSAGE_DELIMITER)
   17bba:	687a      	ldr	r2, [r7, #4]
   17bbc:	68fb      	ldr	r3, [r7, #12]
   17bbe:	18d3      	adds	r3, r2, r3
   17bc0:	781b      	ldrb	r3, [r3, #0]
   17bc2:	2b0a      	cmp	r3, #10
   17bc4:	d10c      	bne.n	17be0 <usb_hid_report_out_callback+0x5c>
        {
            pRxBuf[g_usb_buffer_length] = 0;
   17bc6:	4b0c      	ldr	r3, [pc, #48]	; (17bf8 <usb_hid_report_out_callback+0x74>)
   17bc8:	881b      	ldrh	r3, [r3, #0]
   17bca:	001a      	movs	r2, r3
   17bcc:	68bb      	ldr	r3, [r7, #8]
   17bce:	189b      	adds	r3, r3, r2
   17bd0:	2200      	movs	r2, #0
   17bd2:	701a      	strb	r2, [r3, #0]
            g_usb_message_received++;
   17bd4:	4b09      	ldr	r3, [pc, #36]	; (17bfc <usb_hid_report_out_callback+0x78>)
   17bd6:	681b      	ldr	r3, [r3, #0]
   17bd8:	1c5a      	adds	r2, r3, #1
   17bda:	4b08      	ldr	r3, [pc, #32]	; (17bfc <usb_hid_report_out_callback+0x78>)
   17bdc:	601a      	str	r2, [r3, #0]
            break;
   17bde:	e005      	b.n	17bec <usb_hid_report_out_callback+0x68>
    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
   17be0:	68fb      	ldr	r3, [r7, #12]
   17be2:	3301      	adds	r3, #1
   17be4:	60fb      	str	r3, [r7, #12]
   17be6:	68fb      	ldr	r3, [r7, #12]
   17be8:	2b3f      	cmp	r3, #63	; 0x3f
   17bea:	d9d6      	bls.n	17b9a <usb_hid_report_out_callback+0x16>
        }
    }
}
   17bec:	46c0      	nop			; (mov r8, r8)
   17bee:	46bd      	mov	sp, r7
   17bf0:	b004      	add	sp, #16
   17bf2:	bd80      	pop	{r7, pc}
   17bf4:	00018955 	.word	0x00018955
   17bf8:	20000be2 	.word	0x20000be2
   17bfc:	20002bf8 	.word	0x20002bf8

00017c00 <usb_hid_set_feature_callback>:
 * \brief Handles the incoming USB feature request.
 *
 * \param[in] report                The incoming USB report
 */
void usb_hid_set_feature_callback(uint8_t *report)
{
   17c00:	b580      	push	{r7, lr}
   17c02:	b082      	sub	sp, #8
   17c04:	af00      	add	r7, sp, #0
   17c06:	6078      	str	r0, [r7, #4]
    // Do nothing with the incoming feature request
}
   17c08:	46c0      	nop			; (mov r8, r8)
   17c0a:	46bd      	mov	sp, r7
   17c0c:	b002      	add	sp, #8
   17c0e:	bd80      	pop	{r7, pc}

00017c10 <tiny_state_init>:
{
   17c10:	b580      	push	{r7, lr}
   17c12:	b084      	sub	sp, #16
   17c14:	af00      	add	r7, sp, #0
   17c16:	60f8      	str	r0, [r7, #12]
   17c18:	60b9      	str	r1, [r7, #8]
   17c1a:	0019      	movs	r1, r3
   17c1c:	1dbb      	adds	r3, r7, #6
   17c1e:	801a      	strh	r2, [r3, #0]
   17c20:	1d3b      	adds	r3, r7, #4
   17c22:	1c0a      	adds	r2, r1, #0
   17c24:	801a      	strh	r2, [r3, #0]
    ((tiny_state_ctx*)context)->states = states;
   17c26:	68fb      	ldr	r3, [r7, #12]
   17c28:	68ba      	ldr	r2, [r7, #8]
   17c2a:	605a      	str	r2, [r3, #4]
    ((tiny_state_ctx*)context)->count = count;
   17c2c:	68fb      	ldr	r3, [r7, #12]
   17c2e:	1dba      	adds	r2, r7, #6
   17c30:	8812      	ldrh	r2, [r2, #0]
   17c32:	805a      	strh	r2, [r3, #2]
    ((tiny_state_ctx*)context)->state = initial;
   17c34:	68fb      	ldr	r3, [r7, #12]
   17c36:	1d3a      	adds	r2, r7, #4
   17c38:	8812      	ldrh	r2, [r2, #0]
   17c3a:	801a      	strh	r2, [r3, #0]
}
   17c3c:	46c0      	nop			; (mov r8, r8)
   17c3e:	46bd      	mov	sp, r7
   17c40:	b004      	add	sp, #16
   17c42:	bd80      	pop	{r7, pc}

00017c44 <tiny_state_find>:
{
   17c44:	b580      	push	{r7, lr}
   17c46:	b084      	sub	sp, #16
   17c48:	af00      	add	r7, sp, #0
   17c4a:	6078      	str	r0, [r7, #4]
   17c4c:	0008      	movs	r0, r1
   17c4e:	0011      	movs	r1, r2
   17c50:	1cbb      	adds	r3, r7, #2
   17c52:	1c02      	adds	r2, r0, #0
   17c54:	801a      	strh	r2, [r3, #0]
   17c56:	003b      	movs	r3, r7
   17c58:	1c0a      	adds	r2, r1, #0
   17c5a:	801a      	strh	r2, [r3, #0]
    for(i=0;i<count;i++)
   17c5c:	230e      	movs	r3, #14
   17c5e:	18fb      	adds	r3, r7, r3
   17c60:	2200      	movs	r2, #0
   17c62:	801a      	strh	r2, [r3, #0]
   17c64:	e020      	b.n	17ca8 <tiny_state_find+0x64>
        if(states[i]._s == state)
   17c66:	230e      	movs	r3, #14
   17c68:	18fb      	adds	r3, r7, r3
   17c6a:	881a      	ldrh	r2, [r3, #0]
   17c6c:	0013      	movs	r3, r2
   17c6e:	005b      	lsls	r3, r3, #1
   17c70:	189b      	adds	r3, r3, r2
   17c72:	009b      	lsls	r3, r3, #2
   17c74:	001a      	movs	r2, r3
   17c76:	687b      	ldr	r3, [r7, #4]
   17c78:	189b      	adds	r3, r3, r2
   17c7a:	681a      	ldr	r2, [r3, #0]
   17c7c:	003b      	movs	r3, r7
   17c7e:	881b      	ldrh	r3, [r3, #0]
   17c80:	429a      	cmp	r2, r3
   17c82:	d10a      	bne.n	17c9a <tiny_state_find+0x56>
            return &states[i];
   17c84:	230e      	movs	r3, #14
   17c86:	18fb      	adds	r3, r7, r3
   17c88:	881a      	ldrh	r2, [r3, #0]
   17c8a:	0013      	movs	r3, r2
   17c8c:	005b      	lsls	r3, r3, #1
   17c8e:	189b      	adds	r3, r3, r2
   17c90:	009b      	lsls	r3, r3, #2
   17c92:	001a      	movs	r2, r3
   17c94:	687b      	ldr	r3, [r7, #4]
   17c96:	189b      	adds	r3, r3, r2
   17c98:	e00e      	b.n	17cb8 <tiny_state_find+0x74>
    for(i=0;i<count;i++)
   17c9a:	230e      	movs	r3, #14
   17c9c:	18fb      	adds	r3, r7, r3
   17c9e:	881a      	ldrh	r2, [r3, #0]
   17ca0:	230e      	movs	r3, #14
   17ca2:	18fb      	adds	r3, r7, r3
   17ca4:	3201      	adds	r2, #1
   17ca6:	801a      	strh	r2, [r3, #0]
   17ca8:	230e      	movs	r3, #14
   17caa:	18fa      	adds	r2, r7, r3
   17cac:	1cbb      	adds	r3, r7, #2
   17cae:	8812      	ldrh	r2, [r2, #0]
   17cb0:	881b      	ldrh	r3, [r3, #0]
   17cb2:	429a      	cmp	r2, r3
   17cb4:	d3d7      	bcc.n	17c66 <tiny_state_find+0x22>
    return NULL;
   17cb6:	2300      	movs	r3, #0
}
   17cb8:	0018      	movs	r0, r3
   17cba:	46bd      	mov	sp, r7
   17cbc:	b004      	add	sp, #16
   17cbe:	bd80      	pop	{r7, pc}

00017cc0 <tiny_state_driver>:
{
   17cc0:	b580      	push	{r7, lr}
   17cc2:	b084      	sub	sp, #16
   17cc4:	af00      	add	r7, sp, #0
   17cc6:	6078      	str	r0, [r7, #4]
    tiny_state_ctx * pCtx = (tiny_state_ctx*)context;
   17cc8:	687b      	ldr	r3, [r7, #4]
   17cca:	60fb      	str	r3, [r7, #12]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
   17ccc:	68fb      	ldr	r3, [r7, #12]
   17cce:	6858      	ldr	r0, [r3, #4]
   17cd0:	68fb      	ldr	r3, [r7, #12]
   17cd2:	8859      	ldrh	r1, [r3, #2]
   17cd4:	68fb      	ldr	r3, [r7, #12]
   17cd6:	881b      	ldrh	r3, [r3, #0]
   17cd8:	001a      	movs	r2, r3
   17cda:	4b0a      	ldr	r3, [pc, #40]	; (17d04 <tiny_state_driver+0x44>)
   17cdc:	4798      	blx	r3
   17cde:	0003      	movs	r3, r0
   17ce0:	60bb      	str	r3, [r7, #8]
    if(pState && pState->_f)
   17ce2:	68bb      	ldr	r3, [r7, #8]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	d008      	beq.n	17cfa <tiny_state_driver+0x3a>
   17ce8:	68bb      	ldr	r3, [r7, #8]
   17cea:	689b      	ldr	r3, [r3, #8]
   17cec:	2b00      	cmp	r3, #0
   17cee:	d004      	beq.n	17cfa <tiny_state_driver+0x3a>
        pState->_f(context);
   17cf0:	68bb      	ldr	r3, [r7, #8]
   17cf2:	689b      	ldr	r3, [r3, #8]
   17cf4:	687a      	ldr	r2, [r7, #4]
   17cf6:	0010      	movs	r0, r2
   17cf8:	4798      	blx	r3
}
   17cfa:	46c0      	nop			; (mov r8, r8)
   17cfc:	46bd      	mov	sp, r7
   17cfe:	b004      	add	sp, #16
   17d00:	bd80      	pop	{r7, pc}
   17d02:	46c0      	nop			; (mov r8, r8)
   17d04:	00017c45 	.word	0x00017c45

00017d08 <tiny_state_update>:
{
   17d08:	b580      	push	{r7, lr}
   17d0a:	b082      	sub	sp, #8
   17d0c:	af00      	add	r7, sp, #0
   17d0e:	6078      	str	r0, [r7, #4]
   17d10:	6039      	str	r1, [r7, #0]
    ((tiny_state_ctx*)context)->state = next;
   17d12:	683b      	ldr	r3, [r7, #0]
   17d14:	b29a      	uxth	r2, r3
   17d16:	687b      	ldr	r3, [r7, #4]
   17d18:	801a      	strh	r2, [r3, #0]
}
   17d1a:	46c0      	nop			; (mov r8, r8)
   17d1c:	46bd      	mov	sp, r7
   17d1e:	b002      	add	sp, #8
   17d20:	bd80      	pop	{r7, pc}

00017d22 <client_counter_finished>:
    uint16_t            update_period;
} g_client_context;

/* Helper functions */
static bool client_counter_finished(void* pCtx)
{
   17d22:	b580      	push	{r7, lr}
   17d24:	b084      	sub	sp, #16
   17d26:	af00      	add	r7, sp, #0
   17d28:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   17d2a:	687b      	ldr	r3, [r7, #4]
   17d2c:	60fb      	str	r3, [r7, #12]

    return (0 == ctx->holdoff);
   17d2e:	68fb      	ldr	r3, [r7, #12]
   17d30:	689b      	ldr	r3, [r3, #8]
   17d32:	425a      	negs	r2, r3
   17d34:	4153      	adcs	r3, r2
   17d36:	b2db      	uxtb	r3, r3
}
   17d38:	0018      	movs	r0, r3
   17d3a:	46bd      	mov	sp, r7
   17d3c:	b004      	add	sp, #16
   17d3e:	bd80      	pop	{r7, pc}

00017d40 <client_counter_set>:

static void client_counter_set(void* pCtx, uint32_t val)
{
   17d40:	b580      	push	{r7, lr}
   17d42:	b084      	sub	sp, #16
   17d44:	af00      	add	r7, sp, #0
   17d46:	6078      	str	r0, [r7, #4]
   17d48:	6039      	str	r1, [r7, #0]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   17d4a:	687b      	ldr	r3, [r7, #4]
   17d4c:	60fb      	str	r3, [r7, #12]

    /* Convert to loop time*/
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
   17d4e:	683a      	ldr	r2, [r7, #0]
   17d50:	4b0a      	ldr	r3, [pc, #40]	; (17d7c <client_counter_set+0x3c>)
   17d52:	2164      	movs	r1, #100	; 0x64
   17d54:	0010      	movs	r0, r2
   17d56:	4798      	blx	r3
   17d58:	0003      	movs	r3, r0
   17d5a:	001a      	movs	r2, r3
   17d5c:	68fb      	ldr	r3, [r7, #12]
   17d5e:	609a      	str	r2, [r3, #8]

    if(val && !ctx->holdoff)
   17d60:	683b      	ldr	r3, [r7, #0]
   17d62:	2b00      	cmp	r3, #0
   17d64:	d006      	beq.n	17d74 <client_counter_set+0x34>
   17d66:	68fb      	ldr	r3, [r7, #12]
   17d68:	689b      	ldr	r3, [r3, #8]
   17d6a:	2b00      	cmp	r3, #0
   17d6c:	d102      	bne.n	17d74 <client_counter_set+0x34>
    {
        ctx->holdoff = 1;
   17d6e:	68fb      	ldr	r3, [r7, #12]
   17d70:	2201      	movs	r2, #1
   17d72:	609a      	str	r2, [r3, #8]
    }
}
   17d74:	46c0      	nop			; (mov r8, r8)
   17d76:	46bd      	mov	sp, r7
   17d78:	b004      	add	sp, #16
   17d7a:	bd80      	pop	{r7, pc}
   17d7c:	00019d81 	.word	0x00019d81

00017d80 <client_timer_update>:

/* Must be called on the CLIENT_UPDATE_PERIOD */
void client_timer_update(void)
{
   17d80:	b580      	push	{r7, lr}
   17d82:	af00      	add	r7, sp, #0
    if(g_client_context.holdoff)
   17d84:	4b05      	ldr	r3, [pc, #20]	; (17d9c <client_timer_update+0x1c>)
   17d86:	689b      	ldr	r3, [r3, #8]
   17d88:	2b00      	cmp	r3, #0
   17d8a:	d004      	beq.n	17d96 <client_timer_update+0x16>
    {
        g_client_context.holdoff--;
   17d8c:	4b03      	ldr	r3, [pc, #12]	; (17d9c <client_timer_update+0x1c>)
   17d8e:	689b      	ldr	r3, [r3, #8]
   17d90:	1e5a      	subs	r2, r3, #1
   17d92:	4b02      	ldr	r3, [pc, #8]	; (17d9c <client_timer_update+0x1c>)
   17d94:	609a      	str	r2, [r3, #8]
    }
}
   17d96:	46c0      	nop			; (mov r8, r8)
   17d98:	46bd      	mov	sp, r7
   17d9a:	bd80      	pop	{r7, pc}
   17d9c:	20000be4 	.word	0x20000be4

00017da0 <client_get_message_id>:

/** \brief Get a unique message id - Simply implemented as a counter */
static uint16_t client_get_message_id(void)
{
   17da0:	b580      	push	{r7, lr}
   17da2:	af00      	add	r7, sp, #0
    static uint16_t message_id = 0;

    message_id++;
   17da4:	4b09      	ldr	r3, [pc, #36]	; (17dcc <client_get_message_id+0x2c>)
   17da6:	881b      	ldrh	r3, [r3, #0]
   17da8:	3301      	adds	r3, #1
   17daa:	b29a      	uxth	r2, r3
   17dac:	4b07      	ldr	r3, [pc, #28]	; (17dcc <client_get_message_id+0x2c>)
   17dae:	801a      	strh	r2, [r3, #0]
    
    if (message_id == (UINT16_MAX - 1))
   17db0:	4b06      	ldr	r3, [pc, #24]	; (17dcc <client_get_message_id+0x2c>)
   17db2:	881b      	ldrh	r3, [r3, #0]
   17db4:	4a06      	ldr	r2, [pc, #24]	; (17dd0 <client_get_message_id+0x30>)
   17db6:	4293      	cmp	r3, r2
   17db8:	d102      	bne.n	17dc0 <client_get_message_id+0x20>
    {
        message_id = 1;
   17dba:	4b04      	ldr	r3, [pc, #16]	; (17dcc <client_get_message_id+0x2c>)
   17dbc:	2201      	movs	r2, #1
   17dbe:	801a      	strh	r2, [r3, #0]
    }

    return message_id;
   17dc0:	4b02      	ldr	r3, [pc, #8]	; (17dcc <client_get_message_id+0x2c>)
   17dc2:	881b      	ldrh	r3, [r3, #0]
}
   17dc4:	0018      	movs	r0, r3
   17dc6:	46bd      	mov	sp, r7
   17dc8:	bd80      	pop	{r7, pc}
   17dca:	46c0      	nop			; (mov r8, r8)
   17dcc:	200014bc 	.word	0x200014bc
   17dd0:	0000fffe 	.word	0x0000fffe

00017dd4 <client_publish_message>:

/** \brief Publish a telemetry event */
static void client_publish_message(MQTTClient* mqtt_client)
{
   17dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dd6:	b0e9      	sub	sp, #420	; 0x1a4
   17dd8:	af04      	add	r7, sp, #16
   17dda:	6078      	str	r0, [r7, #4]
    int status = MQTTCLIENT_FAILURE;
   17ddc:	2301      	movs	r3, #1
   17dde:	425b      	negs	r3, r3
   17de0:	22c6      	movs	r2, #198	; 0xc6
   17de2:	0052      	lsls	r2, r2, #1
   17de4:	18ba      	adds	r2, r7, r2
   17de6:	6013      	str	r3, [r2, #0]
    MQTTMessage message;
    char json_message[256];
    uint32_t ts = time_utils_get_utc();
   17de8:	4b4b      	ldr	r3, [pc, #300]	; (17f18 <client_publish_message+0x144>)
   17dea:	4798      	blx	r3
   17dec:	0003      	movs	r3, r0
   17dee:	22c4      	movs	r2, #196	; 0xc4
   17df0:	0052      	lsls	r2, r2, #1
   17df2:	18ba      	adds	r2, r7, r2
   17df4:	6013      	str	r3, [r2, #0]
    uint32_t temp = th5_read_sensor(0);
   17df6:	2000      	movs	r0, #0
   17df8:	4b48      	ldr	r3, [pc, #288]	; (17f1c <client_publish_message+0x148>)
   17dfa:	4798      	blx	r3
   17dfc:	0003      	movs	r3, r0
   17dfe:	22c2      	movs	r2, #194	; 0xc2
   17e00:	0052      	lsls	r2, r2, #1
   17e02:	18ba      	adds	r2, r7, r2
   17e04:	6013      	str	r3, [r2, #0]
    uint32_t speed = fan_click_get_tach();
   17e06:	4b46      	ldr	r3, [pc, #280]	; (17f20 <client_publish_message+0x14c>)
   17e08:	4798      	blx	r3
   17e0a:	0003      	movs	r3, r0
   17e0c:	22c0      	movs	r2, #192	; 0xc0
   17e0e:	0052      	lsls	r2, r2, #1
   17e10:	18ba      	adds	r2, r7, r2
   17e12:	6013      	str	r3, [r2, #0]
    char topic[100];

    if(config_get_client_pub_topic(topic, sizeof(topic)))
   17e14:	230c      	movs	r3, #12
   17e16:	18fb      	adds	r3, r7, r3
   17e18:	2164      	movs	r1, #100	; 0x64
   17e1a:	0018      	movs	r0, r3
   17e1c:	4b41      	ldr	r3, [pc, #260]	; (17f24 <client_publish_message+0x150>)
   17e1e:	4798      	blx	r3
   17e20:	1e03      	subs	r3, r0, #0
   17e22:	d004      	beq.n	17e2e <client_publish_message+0x5a>
    {
        CLIENT_PRINTF("Failed to get topic string");
   17e24:	4b40      	ldr	r3, [pc, #256]	; (17f28 <client_publish_message+0x154>)
   17e26:	0018      	movs	r0, r3
   17e28:	4b40      	ldr	r3, [pc, #256]	; (17f2c <client_publish_message+0x158>)
   17e2a:	4798      	blx	r3
   17e2c:	e071      	b.n	17f12 <client_publish_message+0x13e>
        return;
    }

    snprintf(json_message, sizeof(json_message), "{ \"timestamp\": %u, \"temperature\": %d.%02d, \"fan-speed\": %d }", ts, temp/1000, temp % 1000,  speed);
   17e2e:	23c2      	movs	r3, #194	; 0xc2
   17e30:	005b      	lsls	r3, r3, #1
   17e32:	18fb      	adds	r3, r7, r3
   17e34:	6818      	ldr	r0, [r3, #0]
   17e36:	4b3e      	ldr	r3, [pc, #248]	; (17f30 <client_publish_message+0x15c>)
   17e38:	22fa      	movs	r2, #250	; 0xfa
   17e3a:	0091      	lsls	r1, r2, #2
   17e3c:	4798      	blx	r3
   17e3e:	0003      	movs	r3, r0
   17e40:	001d      	movs	r5, r3
   17e42:	23c2      	movs	r3, #194	; 0xc2
   17e44:	005b      	lsls	r3, r3, #1
   17e46:	18fb      	adds	r3, r7, r3
   17e48:	6818      	ldr	r0, [r3, #0]
   17e4a:	4b3a      	ldr	r3, [pc, #232]	; (17f34 <client_publish_message+0x160>)
   17e4c:	22fa      	movs	r2, #250	; 0xfa
   17e4e:	0091      	lsls	r1, r2, #2
   17e50:	4798      	blx	r3
   17e52:	000b      	movs	r3, r1
   17e54:	001e      	movs	r6, r3
   17e56:	23c4      	movs	r3, #196	; 0xc4
   17e58:	005b      	lsls	r3, r3, #1
   17e5a:	18fb      	adds	r3, r7, r3
   17e5c:	681c      	ldr	r4, [r3, #0]
   17e5e:	4a36      	ldr	r2, [pc, #216]	; (17f38 <client_publish_message+0x164>)
   17e60:	2380      	movs	r3, #128	; 0x80
   17e62:	0059      	lsls	r1, r3, #1
   17e64:	2370      	movs	r3, #112	; 0x70
   17e66:	18f8      	adds	r0, r7, r3
   17e68:	23c0      	movs	r3, #192	; 0xc0
   17e6a:	005b      	lsls	r3, r3, #1
   17e6c:	18fb      	adds	r3, r7, r3
   17e6e:	681b      	ldr	r3, [r3, #0]
   17e70:	9302      	str	r3, [sp, #8]
   17e72:	9601      	str	r6, [sp, #4]
   17e74:	9500      	str	r5, [sp, #0]
   17e76:	0023      	movs	r3, r4
   17e78:	4c30      	ldr	r4, [pc, #192]	; (17f3c <client_publish_message+0x168>)
   17e7a:	47a0      	blx	r4

    message.qos      = QOS1;
   17e7c:	23b8      	movs	r3, #184	; 0xb8
   17e7e:	005b      	lsls	r3, r3, #1
   17e80:	18fb      	adds	r3, r7, r3
   17e82:	2201      	movs	r2, #1
   17e84:	701a      	strb	r2, [r3, #0]
    message.retained = 0;
   17e86:	23b8      	movs	r3, #184	; 0xb8
   17e88:	005b      	lsls	r3, r3, #1
   17e8a:	18fb      	adds	r3, r7, r3
   17e8c:	2200      	movs	r2, #0
   17e8e:	705a      	strb	r2, [r3, #1]
    message.dup      = 0;
   17e90:	23b8      	movs	r3, #184	; 0xb8
   17e92:	005b      	lsls	r3, r3, #1
   17e94:	18fb      	adds	r3, r7, r3
   17e96:	2200      	movs	r2, #0
   17e98:	709a      	strb	r2, [r3, #2]
    message.id       = client_get_message_id();
   17e9a:	4b29      	ldr	r3, [pc, #164]	; (17f40 <client_publish_message+0x16c>)
   17e9c:	4798      	blx	r3
   17e9e:	0003      	movs	r3, r0
   17ea0:	001a      	movs	r2, r3
   17ea2:	23b8      	movs	r3, #184	; 0xb8
   17ea4:	005b      	lsls	r3, r3, #1
   17ea6:	18fb      	adds	r3, r7, r3
   17ea8:	809a      	strh	r2, [r3, #4]
    
    message.payload = (void*)json_message;
   17eaa:	23b8      	movs	r3, #184	; 0xb8
   17eac:	005b      	lsls	r3, r3, #1
   17eae:	18fb      	adds	r3, r7, r3
   17eb0:	2270      	movs	r2, #112	; 0x70
   17eb2:	18ba      	adds	r2, r7, r2
   17eb4:	609a      	str	r2, [r3, #8]
    message.payloadlen = strlen(json_message);
   17eb6:	2370      	movs	r3, #112	; 0x70
   17eb8:	18fb      	adds	r3, r7, r3
   17eba:	0018      	movs	r0, r3
   17ebc:	4b21      	ldr	r3, [pc, #132]	; (17f44 <client_publish_message+0x170>)
   17ebe:	4798      	blx	r3
   17ec0:	0002      	movs	r2, r0
   17ec2:	23b8      	movs	r3, #184	; 0xb8
   17ec4:	005b      	lsls	r3, r3, #1
   17ec6:	18fb      	adds	r3, r7, r3
   17ec8:	60da      	str	r2, [r3, #12]

    CLIENT_PRINTF("Publishing MQTT Message %s\r\n", json_message);
   17eca:	2370      	movs	r3, #112	; 0x70
   17ecc:	18fa      	adds	r2, r7, r3
   17ece:	4b1e      	ldr	r3, [pc, #120]	; (17f48 <client_publish_message+0x174>)
   17ed0:	0011      	movs	r1, r2
   17ed2:	0018      	movs	r0, r3
   17ed4:	4b15      	ldr	r3, [pc, #84]	; (17f2c <client_publish_message+0x158>)
   17ed6:	4798      	blx	r3

    status = MQTTPublish(mqtt_client, topic, &message);
   17ed8:	23b8      	movs	r3, #184	; 0xb8
   17eda:	005b      	lsls	r3, r3, #1
   17edc:	18fa      	adds	r2, r7, r3
   17ede:	230c      	movs	r3, #12
   17ee0:	18f9      	adds	r1, r7, r3
   17ee2:	687b      	ldr	r3, [r7, #4]
   17ee4:	0018      	movs	r0, r3
   17ee6:	4b19      	ldr	r3, [pc, #100]	; (17f4c <client_publish_message+0x178>)
   17ee8:	4798      	blx	r3
   17eea:	0003      	movs	r3, r0
   17eec:	22c6      	movs	r2, #198	; 0xc6
   17eee:	0052      	lsls	r2, r2, #1
   17ef0:	18ba      	adds	r2, r7, r2
   17ef2:	6013      	str	r3, [r2, #0]
    if (status != MQTTCLIENT_SUCCESS)
   17ef4:	23c6      	movs	r3, #198	; 0xc6
   17ef6:	005b      	lsls	r3, r3, #1
   17ef8:	18fb      	adds	r3, r7, r3
   17efa:	681b      	ldr	r3, [r3, #0]
   17efc:	2b00      	cmp	r3, #0
   17efe:	d008      	beq.n	17f12 <client_publish_message+0x13e>
    {
        CLIENT_PRINTF("Failed to publish the MQTT message: %d\r\n", status);
   17f00:	23c6      	movs	r3, #198	; 0xc6
   17f02:	005b      	lsls	r3, r3, #1
   17f04:	18fb      	adds	r3, r7, r3
   17f06:	681a      	ldr	r2, [r3, #0]
   17f08:	4b11      	ldr	r3, [pc, #68]	; (17f50 <client_publish_message+0x17c>)
   17f0a:	0011      	movs	r1, r2
   17f0c:	0018      	movs	r0, r3
   17f0e:	4b07      	ldr	r3, [pc, #28]	; (17f2c <client_publish_message+0x158>)
   17f10:	4798      	blx	r3
    }
}
   17f12:	46bd      	mov	sp, r7
   17f14:	b065      	add	sp, #404	; 0x194
   17f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f18:	00016625 	.word	0x00016625
   17f1c:	00017691 	.word	0x00017691
   17f20:	0001755d 	.word	0x0001755d
   17f24:	0001873d 	.word	0x0001873d
   17f28:	000214a4 	.word	0x000214a4
   17f2c:	0001c37d 	.word	0x0001c37d
   17f30:	00019d81 	.word	0x00019d81
   17f34:	00019e8d 	.word	0x00019e8d
   17f38:	000214c0 	.word	0x000214c0
   17f3c:	0001c63d 	.word	0x0001c63d
   17f40:	00017da1 	.word	0x00017da1
   17f44:	0001c7d3 	.word	0x0001c7d3
   17f48:	00021500 	.word	0x00021500
   17f4c:	000133bd 	.word	0x000133bd
   17f50:	00021520 	.word	0x00021520

00017f54 <client_process_message>:

/** \brief Receive and process a message from the host */
static void client_process_message(MessageData *data)
{
   17f54:	b580      	push	{r7, lr}
   17f56:	b088      	sub	sp, #32
   17f58:	af00      	add	r7, sp, #0
   17f5a:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_USE_JSON_LIB
    JSON_Value *json_message_value = NULL;
   17f5c:	2300      	movs	r3, #0
   17f5e:	61fb      	str	r3, [r7, #28]
    JSON_Object *json_message_object = NULL;
   17f60:	2300      	movs	r3, #0
   17f62:	61bb      	str	r3, [r7, #24]
    JSON_Object *json_override_object = NULL;
   17f64:	2300      	movs	r3, #0
   17f66:	617b      	str	r3, [r7, #20]
    JSON_Array * json_array_settings = NULL;
   17f68:	2300      	movs	r3, #0
   17f6a:	613b      	str	r3, [r7, #16]
    uint32_t update_rate;

    json_message_value   = json_parse_string((char*)data->message->payload);
   17f6c:	687b      	ldr	r3, [r7, #4]
   17f6e:	681b      	ldr	r3, [r3, #0]
   17f70:	689b      	ldr	r3, [r3, #8]
   17f72:	0018      	movs	r0, r3
   17f74:	4b21      	ldr	r3, [pc, #132]	; (17ffc <client_process_message+0xa8>)
   17f76:	4798      	blx	r3
   17f78:	0003      	movs	r3, r0
   17f7a:	61fb      	str	r3, [r7, #28]
    json_message_object  = json_value_get_object(json_message_value);
   17f7c:	69fb      	ldr	r3, [r7, #28]
   17f7e:	0018      	movs	r0, r3
   17f80:	4b1f      	ldr	r3, [pc, #124]	; (18000 <client_process_message+0xac>)
   17f82:	4798      	blx	r3
   17f84:	0003      	movs	r3, r0
   17f86:	61bb      	str	r3, [r7, #24]

    json_array_settings = json_object_get_array(json_message_object, "fan-speed-map");
   17f88:	4a1e      	ldr	r2, [pc, #120]	; (18004 <client_process_message+0xb0>)
   17f8a:	69bb      	ldr	r3, [r7, #24]
   17f8c:	0011      	movs	r1, r2
   17f8e:	0018      	movs	r0, r3
   17f90:	4b1d      	ldr	r3, [pc, #116]	; (18008 <client_process_message+0xb4>)
   17f92:	4798      	blx	r3
   17f94:	0003      	movs	r3, r0
   17f96:	613b      	str	r3, [r7, #16]

    if(json_array_settings)
   17f98:	693b      	ldr	r3, [r7, #16]
   17f9a:	2b00      	cmp	r3, #0
   17f9c:	d003      	beq.n	17fa6 <client_process_message+0x52>
    {
        update_settings_from_json(json_array_settings);
   17f9e:	693b      	ldr	r3, [r7, #16]
   17fa0:	0018      	movs	r0, r3
   17fa2:	4b1a      	ldr	r3, [pc, #104]	; (1800c <client_process_message+0xb8>)
   17fa4:	4798      	blx	r3
    }

    json_override_object = json_object_get_object(json_message_object, "override");
   17fa6:	4a1a      	ldr	r2, [pc, #104]	; (18010 <client_process_message+0xbc>)
   17fa8:	69bb      	ldr	r3, [r7, #24]
   17faa:	0011      	movs	r1, r2
   17fac:	0018      	movs	r0, r3
   17fae:	4b19      	ldr	r3, [pc, #100]	; (18014 <client_process_message+0xc0>)
   17fb0:	4798      	blx	r3
   17fb2:	0003      	movs	r3, r0
   17fb4:	617b      	str	r3, [r7, #20]

    if(json_override_object)
   17fb6:	697b      	ldr	r3, [r7, #20]
   17fb8:	2b00      	cmp	r3, #0
   17fba:	d003      	beq.n	17fc4 <client_process_message+0x70>
    {
        override_from_json(json_override_object);
   17fbc:	697b      	ldr	r3, [r7, #20]
   17fbe:	0018      	movs	r0, r3
   17fc0:	4b15      	ldr	r3, [pc, #84]	; (18018 <client_process_message+0xc4>)
   17fc2:	4798      	blx	r3
    }

    update_rate = json_object_get_number(json_message_object, "update-rate");
   17fc4:	4a15      	ldr	r2, [pc, #84]	; (1801c <client_process_message+0xc8>)
   17fc6:	69bb      	ldr	r3, [r7, #24]
   17fc8:	0011      	movs	r1, r2
   17fca:	0018      	movs	r0, r3
   17fcc:	4b14      	ldr	r3, [pc, #80]	; (18020 <client_process_message+0xcc>)
   17fce:	4798      	blx	r3
   17fd0:	000a      	movs	r2, r1
   17fd2:	0001      	movs	r1, r0
   17fd4:	4b13      	ldr	r3, [pc, #76]	; (18024 <client_process_message+0xd0>)
   17fd6:	0008      	movs	r0, r1
   17fd8:	0011      	movs	r1, r2
   17fda:	4798      	blx	r3
   17fdc:	0003      	movs	r3, r0
   17fde:	60fb      	str	r3, [r7, #12]

    if(1000 < update_rate)
   17fe0:	68fa      	ldr	r2, [r7, #12]
   17fe2:	23fa      	movs	r3, #250	; 0xfa
   17fe4:	009b      	lsls	r3, r3, #2
   17fe6:	429a      	cmp	r2, r3
   17fe8:	d904      	bls.n	17ff4 <client_process_message+0xa0>
    {
        g_client_context.update_period = update_rate;
   17fea:	68fb      	ldr	r3, [r7, #12]
   17fec:	b299      	uxth	r1, r3
   17fee:	4b0e      	ldr	r3, [pc, #56]	; (18028 <client_process_message+0xd4>)
   17ff0:	4a0e      	ldr	r2, [pc, #56]	; (1802c <client_process_message+0xd8>)
   17ff2:	5299      	strh	r1, [r3, r2]
    }
#endif
}
   17ff4:	46c0      	nop			; (mov r8, r8)
   17ff6:	46bd      	mov	sp, r7
   17ff8:	b008      	add	sp, #32
   17ffa:	bd80      	pop	{r7, pc}
   17ffc:	00015a05 	.word	0x00015a05
   18000:	00015c35 	.word	0x00015c35
   18004:	0002154c 	.word	0x0002154c
   18008:	00015b09 	.word	0x00015b09
   1800c:	000177b9 	.word	0x000177b9
   18010:	0002155c 	.word	0x0002155c
   18014:	00015ad9 	.word	0x00015ad9
   18018:	000178ad 	.word	0x000178ad
   1801c:	00021568 	.word	0x00021568
   18020:	00015aa5 	.word	0x00015aa5
   18024:	0001a1b9 	.word	0x0001a1b9
   18028:	20000be4 	.word	0x20000be4
   1802c:	000008d4 	.word	0x000008d4

00018030 <client_state_update>:
    CLIENT_STATE_RUN,
    CLIENT_STATE_ERROR        /**< Error states can be anywhere but are recommended at the end */
} CLIENT_STATES;

static void client_state_update(void* pCtx, uint32_t next, uint32_t wait)
{
   18030:	b580      	push	{r7, lr}
   18032:	b086      	sub	sp, #24
   18034:	af00      	add	r7, sp, #0
   18036:	60f8      	str	r0, [r7, #12]
   18038:	60b9      	str	r1, [r7, #8]
   1803a:	607a      	str	r2, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   1803c:	68fb      	ldr	r3, [r7, #12]
   1803e:	617b      	str	r3, [r7, #20]

    //CLIENT_PRINTF("%s(%u) -> %s(%u)\r\n", tiny_state_name(ctx, ctx->state.state),
    //      ctx->state.state, tiny_state_name(ctx, next), next);

    /* Set the new state */
    tiny_state_update(ctx, next);
   18040:	68ba      	ldr	r2, [r7, #8]
   18042:	697b      	ldr	r3, [r7, #20]
   18044:	0011      	movs	r1, r2
   18046:	0018      	movs	r0, r3
   18048:	4b05      	ldr	r3, [pc, #20]	; (18060 <client_state_update+0x30>)
   1804a:	4798      	blx	r3

    /* Set the holdoff/wait */
    client_counter_set(pCtx, wait);
   1804c:	687a      	ldr	r2, [r7, #4]
   1804e:	68fb      	ldr	r3, [r7, #12]
   18050:	0011      	movs	r1, r2
   18052:	0018      	movs	r0, r3
   18054:	4b03      	ldr	r3, [pc, #12]	; (18064 <client_state_update+0x34>)
   18056:	4798      	blx	r3
}
   18058:	46c0      	nop			; (mov r8, r8)
   1805a:	46bd      	mov	sp, r7
   1805c:	b006      	add	sp, #24
   1805e:	bd80      	pop	{r7, pc}
   18060:	00017d09 	.word	0x00017d09
   18064:	00017d41 	.word	0x00017d41

00018068 <client_state_init>:

/* Initialize the client */
static void client_state_init(void * pCtx)
{
   18068:	b5b0      	push	{r4, r5, r7, lr}
   1806a:	b088      	sub	sp, #32
   1806c:	af04      	add	r7, sp, #16
   1806e:	6078      	str	r0, [r7, #4]
    struct _g_client_context * ctx = (struct _g_client_context *)pCtx;
   18070:	687b      	ldr	r3, [r7, #4]
   18072:	60fb      	str	r3, [r7, #12]
    
    /* Initialize the Paho MQTT Network Structure */
    ctx->mqtt_net.mqttread  = &mqtt_packet_read;
   18074:	68fb      	ldr	r3, [r7, #12]
   18076:	4a16      	ldr	r2, [pc, #88]	; (180d0 <client_state_init+0x68>)
   18078:	60da      	str	r2, [r3, #12]
    ctx->mqtt_net.mqttwrite = &mqtt_packet_write;
   1807a:	68fb      	ldr	r3, [r7, #12]
   1807c:	4a15      	ldr	r2, [pc, #84]	; (180d4 <client_state_init+0x6c>)
   1807e:	611a      	str	r2, [r3, #16]

    /* Initialize the Paho MQTT Client Structure */
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
   18080:	68fb      	ldr	r3, [r7, #12]
   18082:	3314      	adds	r3, #20
   18084:	0018      	movs	r0, r3
   18086:	68fb      	ldr	r3, [r7, #12]
   18088:	330c      	adds	r3, #12
   1808a:	0019      	movs	r1, r3
        ctx->mqtt_tx_buf, CLIENT_MQTT_TX_BUF_SIZE,
   1808c:	68fb      	ldr	r3, [r7, #12]
   1808e:	228e      	movs	r2, #142	; 0x8e
   18090:	00d2      	lsls	r2, r2, #3
   18092:	189d      	adds	r5, r3, r2
        ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE);
   18094:	68fb      	ldr	r3, [r7, #12]
   18096:	3370      	adds	r3, #112	; 0x70
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
   18098:	22fa      	movs	r2, #250	; 0xfa
   1809a:	00d4      	lsls	r4, r2, #3
   1809c:	2280      	movs	r2, #128	; 0x80
   1809e:	00d2      	lsls	r2, r2, #3
   180a0:	9202      	str	r2, [sp, #8]
   180a2:	9301      	str	r3, [sp, #4]
   180a4:	2380      	movs	r3, #128	; 0x80
   180a6:	00db      	lsls	r3, r3, #3
   180a8:	9300      	str	r3, [sp, #0]
   180aa:	002b      	movs	r3, r5
   180ac:	0022      	movs	r2, r4
   180ae:	4c0a      	ldr	r4, [pc, #40]	; (180d8 <client_state_init+0x70>)
   180b0:	47a0      	blx	r4

    ctx->update_period = CLIENT_REPORT_PERIOD_DEFAULT;
   180b2:	68fb      	ldr	r3, [r7, #12]
   180b4:	4a09      	ldr	r2, [pc, #36]	; (180dc <client_state_init+0x74>)
   180b6:	490a      	ldr	r1, [pc, #40]	; (180e0 <client_state_init+0x78>)
   180b8:	5299      	strh	r1, [r3, r2]

    /* Move to the next state */
    client_state_update(pCtx, CLIENT_STATE_GET_TIME, 0);
   180ba:	687b      	ldr	r3, [r7, #4]
   180bc:	2200      	movs	r2, #0
   180be:	2101      	movs	r1, #1
   180c0:	0018      	movs	r0, r3
   180c2:	4b08      	ldr	r3, [pc, #32]	; (180e4 <client_state_init+0x7c>)
   180c4:	4798      	blx	r3
}
   180c6:	46c0      	nop			; (mov r8, r8)
   180c8:	46bd      	mov	sp, r7
   180ca:	b004      	add	sp, #16
   180cc:	bdb0      	pop	{r4, r5, r7, pc}
   180ce:	46c0      	nop			; (mov r8, r8)
   180d0:	000145b1 	.word	0x000145b1
   180d4:	000145d9 	.word	0x000145d9
   180d8:	000129e1 	.word	0x000129e1
   180dc:	000008d4 	.word	0x000008d4
   180e0:	00001388 	.word	0x00001388
   180e4:	00018031 	.word	0x00018031

000180e8 <client_state_get_time>:

/* Check/Get Time */
static void client_state_get_time(void* pCtx)
{
   180e8:	b580      	push	{r7, lr}
   180ea:	b082      	sub	sp, #8
   180ec:	af00      	add	r7, sp, #0
   180ee:	6078      	str	r0, [r7, #4]
    if(client_counter_finished(pCtx))
   180f0:	687b      	ldr	r3, [r7, #4]
   180f2:	0018      	movs	r0, r3
   180f4:	4b0d      	ldr	r3, [pc, #52]	; (1812c <client_state_get_time+0x44>)
   180f6:	4798      	blx	r3
   180f8:	1e03      	subs	r3, r0, #0
   180fa:	d012      	beq.n	18122 <client_state_get_time+0x3a>
    {
        if(!time_utils_get_utc())
   180fc:	4b0c      	ldr	r3, [pc, #48]	; (18130 <client_state_get_time+0x48>)
   180fe:	4798      	blx	r3
   18100:	1e03      	subs	r3, r0, #0
   18102:	d108      	bne.n	18116 <client_state_get_time+0x2e>
        {
            wifi_request_time();
   18104:	4b0b      	ldr	r3, [pc, #44]	; (18134 <client_state_get_time+0x4c>)
   18106:	4798      	blx	r3
            client_counter_set(pCtx, WIFI_COUNTER_GET_TIME_WAIT);
   18108:	4a0b      	ldr	r2, [pc, #44]	; (18138 <client_state_get_time+0x50>)
   1810a:	687b      	ldr	r3, [r7, #4]
   1810c:	0011      	movs	r1, r2
   1810e:	0018      	movs	r0, r3
   18110:	4b0a      	ldr	r3, [pc, #40]	; (1813c <client_state_get_time+0x54>)
   18112:	4798      	blx	r3
        else
        {
            client_state_update(pCtx, CLIENT_STATE_CONNECT, 0);
        }
    }
}
   18114:	e005      	b.n	18122 <client_state_get_time+0x3a>
            client_state_update(pCtx, CLIENT_STATE_CONNECT, 0);
   18116:	687b      	ldr	r3, [r7, #4]
   18118:	2200      	movs	r2, #0
   1811a:	2102      	movs	r1, #2
   1811c:	0018      	movs	r0, r3
   1811e:	4b08      	ldr	r3, [pc, #32]	; (18140 <client_state_get_time+0x58>)
   18120:	4798      	blx	r3
}
   18122:	46c0      	nop			; (mov r8, r8)
   18124:	46bd      	mov	sp, r7
   18126:	b002      	add	sp, #8
   18128:	bd80      	pop	{r7, pc}
   1812a:	46c0      	nop			; (mov r8, r8)
   1812c:	00017d23 	.word	0x00017d23
   18130:	00016625 	.word	0x00016625
   18134:	00016ebd 	.word	0x00016ebd
   18138:	00002710 	.word	0x00002710
   1813c:	00017d41 	.word	0x00017d41
   18140:	00018031 	.word	0x00018031

00018144 <client_connect_socket>:

static int client_connect_socket(void* pCtx)
{
   18144:	b580      	push	{r7, lr}
   18146:	b084      	sub	sp, #16
   18148:	af00      	add	r7, sp, #0
   1814a:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   1814c:	687b      	ldr	r3, [r7, #4]
   1814e:	60fb      	str	r3, [r7, #12]
    uint16_t port;

    if(config_get_host_info((char*)ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE, &port))
   18150:	68fb      	ldr	r3, [r7, #12]
   18152:	3370      	adds	r3, #112	; 0x70
   18154:	0018      	movs	r0, r3
   18156:	230a      	movs	r3, #10
   18158:	18fa      	adds	r2, r7, r3
   1815a:	2380      	movs	r3, #128	; 0x80
   1815c:	00db      	lsls	r3, r3, #3
   1815e:	0019      	movs	r1, r3
   18160:	4b0d      	ldr	r3, [pc, #52]	; (18198 <client_connect_socket+0x54>)
   18162:	4798      	blx	r3
   18164:	1e03      	subs	r3, r0, #0
   18166:	d002      	beq.n	1816e <client_connect_socket+0x2a>
    {
        /* Failed */
        return -1;
   18168:	2301      	movs	r3, #1
   1816a:	425b      	negs	r3, r3
   1816c:	e00f      	b.n	1818e <client_connect_socket+0x4a>
    }

    if(wifi_connect((char*)ctx->mqtt_rx_buf, port))
   1816e:	68fb      	ldr	r3, [r7, #12]
   18170:	3370      	adds	r3, #112	; 0x70
   18172:	001a      	movs	r2, r3
   18174:	230a      	movs	r3, #10
   18176:	18fb      	adds	r3, r7, r3
   18178:	881b      	ldrh	r3, [r3, #0]
   1817a:	0019      	movs	r1, r3
   1817c:	0010      	movs	r0, r2
   1817e:	4b07      	ldr	r3, [pc, #28]	; (1819c <client_connect_socket+0x58>)
   18180:	4798      	blx	r3
   18182:	1e03      	subs	r3, r0, #0
   18184:	d002      	beq.n	1818c <client_connect_socket+0x48>
    {
        /* Failed */
        return -1;
   18186:	2301      	movs	r3, #1
   18188:	425b      	negs	r3, r3
   1818a:	e000      	b.n	1818e <client_connect_socket+0x4a>
    }

    return 0;
   1818c:	2300      	movs	r3, #0
}
   1818e:	0018      	movs	r0, r3
   18190:	46bd      	mov	sp, r7
   18192:	b004      	add	sp, #16
   18194:	bd80      	pop	{r7, pc}
   18196:	46c0      	nop			; (mov r8, r8)
   18198:	000187f5 	.word	0x000187f5
   1819c:	00016f45 	.word	0x00016f45

000181a0 <client_connect>:

/* Connect the MQTT Client to the host */
static int client_connect(void* pCtx)
{
   181a0:	b590      	push	{r4, r7, lr}
   181a2:	b09b      	sub	sp, #108	; 0x6c
   181a4:	af00      	add	r7, sp, #0
   181a6:	6078      	str	r0, [r7, #4]
    MQTTPacket_connectData mqtt_options = MQTTPacket_connectData_initializer;
   181a8:	2308      	movs	r3, #8
   181aa:	18fa      	adds	r2, r7, r3
   181ac:	4b42      	ldr	r3, [pc, #264]	; (182b8 <client_connect+0x118>)
   181ae:	0010      	movs	r0, r2
   181b0:	0019      	movs	r1, r3
   181b2:	2358      	movs	r3, #88	; 0x58
   181b4:	001a      	movs	r2, r3
   181b6:	4b41      	ldr	r3, [pc, #260]	; (182bc <client_connect+0x11c>)
   181b8:	4798      	blx	r3
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   181ba:	687b      	ldr	r3, [r7, #4]
   181bc:	667b      	str	r3, [r7, #100]	; 0x64
    size_t buf_bytes_remaining = CLIENT_MQTT_RX_BUF_SIZE;
   181be:	2380      	movs	r3, #128	; 0x80
   181c0:	00db      	lsls	r3, r3, #3
   181c2:	663b      	str	r3, [r7, #96]	; 0x60

    mqtt_options.keepAliveInterval = MQTT_KEEP_ALIVE_INTERVAL_S;
   181c4:	2308      	movs	r3, #8
   181c6:	18fb      	adds	r3, r7, r3
   181c8:	22e1      	movs	r2, #225	; 0xe1
   181ca:	0092      	lsls	r2, r2, #2
   181cc:	831a      	strh	r2, [r3, #24]
    mqtt_options.cleansession = 1;
   181ce:	2308      	movs	r3, #8
   181d0:	18fb      	adds	r3, r7, r3
   181d2:	2201      	movs	r2, #1
   181d4:	769a      	strb	r2, [r3, #26]

    /* Client ID String */
    mqtt_options.clientID.cstring = (char*)&ctx->mqtt_rx_buf[0];
   181d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   181d8:	3370      	adds	r3, #112	; 0x70
   181da:	001a      	movs	r2, r3
   181dc:	2308      	movs	r3, #8
   181de:	18fb      	adds	r3, r7, r3
   181e0:	60da      	str	r2, [r3, #12]
    if(config_get_client_id(mqtt_options.clientID.cstring, buf_bytes_remaining))
   181e2:	2308      	movs	r3, #8
   181e4:	18fb      	adds	r3, r7, r3
   181e6:	68db      	ldr	r3, [r3, #12]
   181e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   181ea:	0011      	movs	r1, r2
   181ec:	0018      	movs	r0, r3
   181ee:	4b34      	ldr	r3, [pc, #208]	; (182c0 <client_connect+0x120>)
   181f0:	4798      	blx	r3
   181f2:	1e03      	subs	r3, r0, #0
   181f4:	d002      	beq.n	181fc <client_connect+0x5c>
    {
        return MQTTCLIENT_FAILURE;
   181f6:	2301      	movs	r3, #1
   181f8:	425b      	negs	r3, r3
   181fa:	e058      	b.n	182ae <client_connect+0x10e>
    }

    /* Username String */
    mqtt_options.username.cstring = mqtt_options.clientID.cstring + strlen(mqtt_options.clientID.cstring) + 1;
   181fc:	2308      	movs	r3, #8
   181fe:	18fb      	adds	r3, r7, r3
   18200:	68dc      	ldr	r4, [r3, #12]
   18202:	2308      	movs	r3, #8
   18204:	18fb      	adds	r3, r7, r3
   18206:	68db      	ldr	r3, [r3, #12]
   18208:	0018      	movs	r0, r3
   1820a:	4b2e      	ldr	r3, [pc, #184]	; (182c4 <client_connect+0x124>)
   1820c:	4798      	blx	r3
   1820e:	0003      	movs	r3, r0
   18210:	3301      	adds	r3, #1
   18212:	18e2      	adds	r2, r4, r3
   18214:	2308      	movs	r3, #8
   18216:	18fb      	adds	r3, r7, r3
   18218:	641a      	str	r2, [r3, #64]	; 0x40
    buf_bytes_remaining -= (mqtt_options.username.cstring - mqtt_options.clientID.cstring);
   1821a:	2308      	movs	r3, #8
   1821c:	18fb      	adds	r3, r7, r3
   1821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18220:	001a      	movs	r2, r3
   18222:	2308      	movs	r3, #8
   18224:	18fb      	adds	r3, r7, r3
   18226:	68db      	ldr	r3, [r3, #12]
   18228:	1ad3      	subs	r3, r2, r3
   1822a:	001a      	movs	r2, r3
   1822c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1822e:	1a9b      	subs	r3, r3, r2
   18230:	663b      	str	r3, [r7, #96]	; 0x60
    if(config_get_client_username(mqtt_options.username.cstring, buf_bytes_remaining))
   18232:	2308      	movs	r3, #8
   18234:	18fb      	adds	r3, r7, r3
   18236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1823a:	0011      	movs	r1, r2
   1823c:	0018      	movs	r0, r3
   1823e:	4b22      	ldr	r3, [pc, #136]	; (182c8 <client_connect+0x128>)
   18240:	4798      	blx	r3
   18242:	1e03      	subs	r3, r0, #0
   18244:	d002      	beq.n	1824c <client_connect+0xac>
    {
        return MQTTCLIENT_FAILURE;
   18246:	2301      	movs	r3, #1
   18248:	425b      	negs	r3, r3
   1824a:	e030      	b.n	182ae <client_connect+0x10e>
    }

    /* Password String */
    mqtt_options.password.cstring = mqtt_options.username.cstring + strlen(mqtt_options.username.cstring) + 1;
   1824c:	2308      	movs	r3, #8
   1824e:	18fb      	adds	r3, r7, r3
   18250:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   18252:	2308      	movs	r3, #8
   18254:	18fb      	adds	r3, r7, r3
   18256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18258:	0018      	movs	r0, r3
   1825a:	4b1a      	ldr	r3, [pc, #104]	; (182c4 <client_connect+0x124>)
   1825c:	4798      	blx	r3
   1825e:	0003      	movs	r3, r0
   18260:	3301      	adds	r3, #1
   18262:	18e2      	adds	r2, r4, r3
   18264:	2308      	movs	r3, #8
   18266:	18fb      	adds	r3, r7, r3
   18268:	64da      	str	r2, [r3, #76]	; 0x4c
    buf_bytes_remaining -= (mqtt_options.password.cstring - mqtt_options.username.cstring);
   1826a:	2308      	movs	r3, #8
   1826c:	18fb      	adds	r3, r7, r3
   1826e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18270:	001a      	movs	r2, r3
   18272:	2308      	movs	r3, #8
   18274:	18fb      	adds	r3, r7, r3
   18276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18278:	1ad3      	subs	r3, r2, r3
   1827a:	001a      	movs	r2, r3
   1827c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1827e:	1a9b      	subs	r3, r3, r2
   18280:	663b      	str	r3, [r7, #96]	; 0x60
    if(config_get_client_password(mqtt_options.password.cstring, buf_bytes_remaining))
   18282:	2308      	movs	r3, #8
   18284:	18fb      	adds	r3, r7, r3
   18286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1828a:	0011      	movs	r1, r2
   1828c:	0018      	movs	r0, r3
   1828e:	4b0f      	ldr	r3, [pc, #60]	; (182cc <client_connect+0x12c>)
   18290:	4798      	blx	r3
   18292:	1e03      	subs	r3, r0, #0
   18294:	d002      	beq.n	1829c <client_connect+0xfc>
    {
        return MQTTCLIENT_FAILURE;
   18296:	2301      	movs	r3, #1
   18298:	425b      	negs	r3, r3
   1829a:	e008      	b.n	182ae <client_connect+0x10e>
    }

    return MQTTConnect(&ctx->mqtt_client, &mqtt_options);
   1829c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1829e:	3314      	adds	r3, #20
   182a0:	2208      	movs	r2, #8
   182a2:	18ba      	adds	r2, r7, r2
   182a4:	0011      	movs	r1, r2
   182a6:	0018      	movs	r0, r3
   182a8:	4b09      	ldr	r3, [pc, #36]	; (182d0 <client_connect+0x130>)
   182aa:	4798      	blx	r3
   182ac:	0003      	movs	r3, r0
}
   182ae:	0018      	movs	r0, r3
   182b0:	46bd      	mov	sp, r7
   182b2:	b01b      	add	sp, #108	; 0x6c
   182b4:	bd90      	pop	{r4, r7, pc}
   182b6:	46c0      	nop			; (mov r8, r8)
   182b8:	00021574 	.word	0x00021574
   182bc:	0001c1e5 	.word	0x0001c1e5
   182c0:	00018569 	.word	0x00018569
   182c4:	0001c7d3 	.word	0x0001c7d3
   182c8:	000185dd 	.word	0x000185dd
   182cc:	00018635 	.word	0x00018635
   182d0:	000130f1 	.word	0x000130f1

000182d4 <client_subscribe>:

/* Subscribe to a topic */
static int client_subscribe(void* pCtx)
{
   182d4:	b590      	push	{r4, r7, lr}
   182d6:	b085      	sub	sp, #20
   182d8:	af00      	add	r7, sp, #0
   182da:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   182dc:	687b      	ldr	r3, [r7, #4]
   182de:	60fb      	str	r3, [r7, #12]
    int status = MQTTCLIENT_FAILURE;
   182e0:	2301      	movs	r3, #1
   182e2:	425b      	negs	r3, r3
   182e4:	60bb      	str	r3, [r7, #8]

    status = config_get_client_sub_topic((char*)ctx->sub_topic, sizeof(ctx->sub_topic));
   182e6:	68fb      	ldr	r3, [r7, #12]
   182e8:	2287      	movs	r2, #135	; 0x87
   182ea:	0112      	lsls	r2, r2, #4
   182ec:	4694      	mov	ip, r2
   182ee:	4463      	add	r3, ip
   182f0:	2164      	movs	r1, #100	; 0x64
   182f2:	0018      	movs	r0, r3
   182f4:	4b0f      	ldr	r3, [pc, #60]	; (18334 <client_subscribe+0x60>)
   182f6:	4798      	blx	r3
   182f8:	0003      	movs	r3, r0
   182fa:	60bb      	str	r3, [r7, #8]
    if (status != MQTTCLIENT_SUCCESS)
   182fc:	68bb      	ldr	r3, [r7, #8]
   182fe:	2b00      	cmp	r3, #0
   18300:	d005      	beq.n	1830e <client_subscribe+0x3a>
    {
        CLIENT_PRINTF("Failed to load the subscription topic name");
   18302:	4b0d      	ldr	r3, [pc, #52]	; (18338 <client_subscribe+0x64>)
   18304:	0018      	movs	r0, r3
   18306:	4b0d      	ldr	r3, [pc, #52]	; (1833c <client_subscribe+0x68>)
   18308:	4798      	blx	r3
        return status;
   1830a:	68bb      	ldr	r3, [r7, #8]
   1830c:	e00d      	b.n	1832a <client_subscribe+0x56>
    }

    status = MQTTSubscribe(&ctx->mqtt_client, ctx->sub_topic, QOS1, &client_process_message);
   1830e:	68fb      	ldr	r3, [r7, #12]
   18310:	3314      	adds	r3, #20
   18312:	0018      	movs	r0, r3
   18314:	68fb      	ldr	r3, [r7, #12]
   18316:	2287      	movs	r2, #135	; 0x87
   18318:	0112      	lsls	r2, r2, #4
   1831a:	1899      	adds	r1, r3, r2
   1831c:	4b08      	ldr	r3, [pc, #32]	; (18340 <client_subscribe+0x6c>)
   1831e:	2201      	movs	r2, #1
   18320:	4c08      	ldr	r4, [pc, #32]	; (18344 <client_subscribe+0x70>)
   18322:	47a0      	blx	r4
   18324:	0003      	movs	r3, r0
   18326:	60bb      	str	r3, [r7, #8]

    return status;
   18328:	68bb      	ldr	r3, [r7, #8]
}
   1832a:	0018      	movs	r0, r3
   1832c:	46bd      	mov	sp, r7
   1832e:	b005      	add	sp, #20
   18330:	bd90      	pop	{r4, r7, pc}
   18332:	46c0      	nop			; (mov r8, r8)
   18334:	00018799 	.word	0x00018799
   18338:	000215cc 	.word	0x000215cc
   1833c:	0001c37d 	.word	0x0001c37d
   18340:	00017f55 	.word	0x00017f55
   18344:	00013231 	.word	0x00013231

00018348 <client_state_connect>:

/* Connect to the host */
static void client_state_connect(void* pCtx)
{
   18348:	b580      	push	{r7, lr}
   1834a:	b082      	sub	sp, #8
   1834c:	af00      	add	r7, sp, #0
   1834e:	6078      	str	r0, [r7, #4]
    if(client_counter_finished(pCtx))
   18350:	687b      	ldr	r3, [r7, #4]
   18352:	0018      	movs	r0, r3
   18354:	4b18      	ldr	r3, [pc, #96]	; (183b8 <client_state_connect+0x70>)
   18356:	4798      	blx	r3
   18358:	1e03      	subs	r3, r0, #0
   1835a:	d029      	beq.n	183b0 <client_state_connect+0x68>
    {
        /* Update Hold-off */
        client_counter_set(pCtx, WIFI_COUNTER_GET_TIME_WAIT);
   1835c:	4a17      	ldr	r2, [pc, #92]	; (183bc <client_state_connect+0x74>)
   1835e:	687b      	ldr	r3, [r7, #4]
   18360:	0011      	movs	r1, r2
   18362:	0018      	movs	r0, r3
   18364:	4b16      	ldr	r3, [pc, #88]	; (183c0 <client_state_connect+0x78>)
   18366:	4798      	blx	r3

        /* Resolve the host and connect the socket */
        if(client_connect_socket(pCtx))
   18368:	687b      	ldr	r3, [r7, #4]
   1836a:	0018      	movs	r0, r3
   1836c:	4b15      	ldr	r3, [pc, #84]	; (183c4 <client_state_connect+0x7c>)
   1836e:	4798      	blx	r3
   18370:	1e03      	subs	r3, r0, #0
   18372:	d11c      	bne.n	183ae <client_state_connect+0x66>
        {
            return;
        }

        /* Connect the MQTT client */
        if(client_connect(pCtx))
   18374:	687b      	ldr	r3, [r7, #4]
   18376:	0018      	movs	r0, r3
   18378:	4b13      	ldr	r3, [pc, #76]	; (183c8 <client_state_connect+0x80>)
   1837a:	4798      	blx	r3
   1837c:	1e03      	subs	r3, r0, #0
   1837e:	d004      	beq.n	1838a <client_state_connect+0x42>
        {
            CLIENT_PRINTF("MQTT Client Failed to Connect\r\n");
   18380:	4b12      	ldr	r3, [pc, #72]	; (183cc <client_state_connect+0x84>)
   18382:	0018      	movs	r0, r3
   18384:	4b12      	ldr	r3, [pc, #72]	; (183d0 <client_state_connect+0x88>)
   18386:	4798      	blx	r3
            return;
   18388:	e012      	b.n	183b0 <client_state_connect+0x68>
        }
                        
        /* Connect the MQTT client */
        if(client_subscribe(pCtx))
   1838a:	687b      	ldr	r3, [r7, #4]
   1838c:	0018      	movs	r0, r3
   1838e:	4b11      	ldr	r3, [pc, #68]	; (183d4 <client_state_connect+0x8c>)
   18390:	4798      	blx	r3
   18392:	1e03      	subs	r3, r0, #0
   18394:	d004      	beq.n	183a0 <client_state_connect+0x58>
        {
            CLIENT_PRINTF("MQTT Subscription Failed\r\n");
   18396:	4b10      	ldr	r3, [pc, #64]	; (183d8 <client_state_connect+0x90>)
   18398:	0018      	movs	r0, r3
   1839a:	4b0d      	ldr	r3, [pc, #52]	; (183d0 <client_state_connect+0x88>)
   1839c:	4798      	blx	r3
            return;
   1839e:	e007      	b.n	183b0 <client_state_connect+0x68>
        }

        /* Move to the next state */
        client_state_update(pCtx, CLIENT_STATE_RUN, 0);
   183a0:	687b      	ldr	r3, [r7, #4]
   183a2:	2200      	movs	r2, #0
   183a4:	2103      	movs	r1, #3
   183a6:	0018      	movs	r0, r3
   183a8:	4b0c      	ldr	r3, [pc, #48]	; (183dc <client_state_connect+0x94>)
   183aa:	4798      	blx	r3
   183ac:	e000      	b.n	183b0 <client_state_connect+0x68>
            return;
   183ae:	46c0      	nop			; (mov r8, r8)
    }
}
   183b0:	46bd      	mov	sp, r7
   183b2:	b002      	add	sp, #8
   183b4:	bd80      	pop	{r7, pc}
   183b6:	46c0      	nop			; (mov r8, r8)
   183b8:	00017d23 	.word	0x00017d23
   183bc:	00002710 	.word	0x00002710
   183c0:	00017d41 	.word	0x00017d41
   183c4:	00018145 	.word	0x00018145
   183c8:	000181a1 	.word	0x000181a1
   183cc:	000215f8 	.word	0x000215f8
   183d0:	0001c499 	.word	0x0001c499
   183d4:	000182d5 	.word	0x000182d5
   183d8:	00021618 	.word	0x00021618
   183dc:	00018031 	.word	0x00018031

000183e0 <client_state_run>:

/* Client is connected */
static void client_state_run(void * pCtx)
{
   183e0:	b580      	push	{r7, lr}
   183e2:	b084      	sub	sp, #16
   183e4:	af00      	add	r7, sp, #0
   183e6:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   183e8:	687b      	ldr	r3, [r7, #4]
   183ea:	60fb      	str	r3, [r7, #12]

    if(wifi_has_error())
   183ec:	4b15      	ldr	r3, [pc, #84]	; (18444 <client_state_run+0x64>)
   183ee:	4798      	blx	r3
   183f0:	1e03      	subs	r3, r0, #0
   183f2:	d005      	beq.n	18400 <client_state_run+0x20>
    {
        client_state_update(pCtx, CLIENT_STATE_INIT, 0);
   183f4:	687b      	ldr	r3, [r7, #4]
   183f6:	2200      	movs	r2, #0
   183f8:	2100      	movs	r1, #0
   183fa:	0018      	movs	r0, r3
   183fc:	4b12      	ldr	r3, [pc, #72]	; (18448 <client_state_run+0x68>)
   183fe:	4798      	blx	r3
    }

    if(client_counter_finished(pCtx))
   18400:	687b      	ldr	r3, [r7, #4]
   18402:	0018      	movs	r0, r3
   18404:	4b11      	ldr	r3, [pc, #68]	; (1844c <client_state_run+0x6c>)
   18406:	4798      	blx	r3
   18408:	1e03      	subs	r3, r0, #0
   1840a:	d00e      	beq.n	1842a <client_state_run+0x4a>
    {
        client_counter_set(pCtx, ctx->update_period);
   1840c:	68fb      	ldr	r3, [r7, #12]
   1840e:	4a10      	ldr	r2, [pc, #64]	; (18450 <client_state_run+0x70>)
   18410:	5a9b      	ldrh	r3, [r3, r2]
   18412:	001a      	movs	r2, r3
   18414:	687b      	ldr	r3, [r7, #4]
   18416:	0011      	movs	r1, r2
   18418:	0018      	movs	r0, r3
   1841a:	4b0e      	ldr	r3, [pc, #56]	; (18454 <client_state_run+0x74>)
   1841c:	4798      	blx	r3

        client_publish_message(&ctx->mqtt_client);
   1841e:	68fb      	ldr	r3, [r7, #12]
   18420:	3314      	adds	r3, #20
   18422:	0018      	movs	r0, r3
   18424:	4b0c      	ldr	r3, [pc, #48]	; (18458 <client_state_run+0x78>)
   18426:	4798      	blx	r3
        if(MQTTYield(&ctx->mqtt_client, MQTT_YEILD_TIMEOUT_MS))
        {
            /* Failure */
        }
   }
}
   18428:	e008      	b.n	1843c <client_state_run+0x5c>
        if(MQTTYield(&ctx->mqtt_client, MQTT_YEILD_TIMEOUT_MS))
   1842a:	68fb      	ldr	r3, [r7, #12]
   1842c:	3314      	adds	r3, #20
   1842e:	001a      	movs	r2, r3
   18430:	23fa      	movs	r3, #250	; 0xfa
   18432:	005b      	lsls	r3, r3, #1
   18434:	0019      	movs	r1, r3
   18436:	0010      	movs	r0, r2
   18438:	4b08      	ldr	r3, [pc, #32]	; (1845c <client_state_run+0x7c>)
   1843a:	4798      	blx	r3
}
   1843c:	46c0      	nop			; (mov r8, r8)
   1843e:	46bd      	mov	sp, r7
   18440:	b004      	add	sp, #16
   18442:	bd80      	pop	{r7, pc}
   18444:	00016869 	.word	0x00016869
   18448:	00018031 	.word	0x00018031
   1844c:	00017d23 	.word	0x00017d23
   18450:	000008d4 	.word	0x000008d4
   18454:	00017d41 	.word	0x00017d41
   18458:	00017dd5 	.word	0x00017dd5
   1845c:	00013039 	.word	0x00013039

00018460 <client_state_error>:

/* Wait for the client to connect successfully */
static void client_state_error(void * pCtx)
{
   18460:	b580      	push	{r7, lr}
   18462:	b082      	sub	sp, #8
   18464:	af00      	add	r7, sp, #0
   18466:	6078      	str	r0, [r7, #4]

    /* Move to the next state */
    client_state_update(pCtx, CLIENT_STATE_INIT, 0);
   18468:	687b      	ldr	r3, [r7, #4]
   1846a:	2200      	movs	r2, #0
   1846c:	2100      	movs	r1, #0
   1846e:	0018      	movs	r0, r3
   18470:	4b02      	ldr	r3, [pc, #8]	; (1847c <client_state_error+0x1c>)
   18472:	4798      	blx	r3
}
   18474:	46c0      	nop			; (mov r8, r8)
   18476:	46bd      	mov	sp, r7
   18478:	b002      	add	sp, #8
   1847a:	bd80      	pop	{r7, pc}
   1847c:	00018031 	.word	0x00018031

00018480 <client_task>:
    TINY_STATE_DEF(CLIENT_STATE_ERROR,      &client_state_error),
};

/* Assume a 100ms time basis */
void client_task(void)
{
   18480:	b5b0      	push	{r4, r5, r7, lr}
   18482:	af00      	add	r7, sp, #0
    if(!g_client_context.state.count)
   18484:	4b08      	ldr	r3, [pc, #32]	; (184a8 <client_task+0x28>)
   18486:	885b      	ldrh	r3, [r3, #2]
   18488:	2b00      	cmp	r3, #0
   1848a:	d105      	bne.n	18498 <client_task+0x18>
    {
	    /* Perform the Initialization */
	    tiny_state_init(&g_client_context, g_client_states, sizeof(g_client_states)/sizeof(g_client_states[0]), CLIENT_STATE_INIT);
   1848c:	4907      	ldr	r1, [pc, #28]	; (184ac <client_task+0x2c>)
   1848e:	4806      	ldr	r0, [pc, #24]	; (184a8 <client_task+0x28>)
   18490:	2300      	movs	r3, #0
   18492:	2205      	movs	r2, #5
   18494:	4c06      	ldr	r4, [pc, #24]	; (184b0 <client_task+0x30>)
   18496:	47a0      	blx	r4
    }

    /* Run the state machine*/
    tiny_state_driver(&g_client_context);
   18498:	4b03      	ldr	r3, [pc, #12]	; (184a8 <client_task+0x28>)
   1849a:	0018      	movs	r0, r3
   1849c:	4b05      	ldr	r3, [pc, #20]	; (184b4 <client_task+0x34>)
   1849e:	4798      	blx	r3
}
   184a0:	46c0      	nop			; (mov r8, r8)
   184a2:	46bd      	mov	sp, r7
   184a4:	bdb0      	pop	{r4, r5, r7, pc}
   184a6:	46c0      	nop			; (mov r8, r8)
   184a8:	20000be4 	.word	0x20000be4
   184ac:	200001f0 	.word	0x200001f0
   184b0:	00017c11 	.word	0x00017c11
   184b4:	00017cc1 	.word	0x00017cc1

000184b8 <config_crypto>:


#endif /* CONFIG_USE_STATIC_CONFIG */

void config_crypto(void)
{
   184b8:	b580      	push	{r7, lr}
   184ba:	af00      	add	r7, sp, #0
    cfg_ateccx08a_i2c_default.atcai2c.slave_address  = 0xB0;
   184bc:	4b02      	ldr	r3, [pc, #8]	; (184c8 <config_crypto+0x10>)
   184be:	22b0      	movs	r2, #176	; 0xb0
   184c0:	711a      	strb	r2, [r3, #4]

#ifdef __SAMD21G18A__
    /* For the SAMW25 */
    cfg_ateccx08a_i2c_default.atcai2c.bus            = 0;
#endif
}
   184c2:	46c0      	nop			; (mov r8, r8)
   184c4:	46bd      	mov	sp, r7
   184c6:	bd80      	pop	{r7, pc}
   184c8:	20000120 	.word	0x20000120

000184cc <config_ready>:

bool config_ready(void)
{
   184cc:	b580      	push	{r7, lr}
   184ce:	af00      	add	r7, sp, #0
    return true;
   184d0:	2301      	movs	r3, #1
}
   184d2:	0018      	movs	r0, r3
   184d4:	46bd      	mov	sp, r7
   184d6:	bd80      	pop	{r7, pc}

000184d8 <config_get_ssid>:

/** \brief Populate the buffer with the wifi access point ssid */
int config_get_ssid(char* buf, size_t buflen)
{
   184d8:	b580      	push	{r7, lr}
   184da:	b084      	sub	sp, #16
   184dc:	af00      	add	r7, sp, #0
   184de:	6078      	str	r0, [r7, #4]
   184e0:	6039      	str	r1, [r7, #0]
    int status = -1;
   184e2:	2301      	movs	r3, #1
   184e4:	425b      	negs	r3, r3
   184e6:	60fb      	str	r3, [r7, #12]

    if(buf && buflen)
   184e8:	687b      	ldr	r3, [r7, #4]
   184ea:	2b00      	cmp	r3, #0
   184ec:	d00f      	beq.n	1850e <config_get_ssid+0x36>
   184ee:	683b      	ldr	r3, [r7, #0]
   184f0:	2b00      	cmp	r3, #0
   184f2:	d00c      	beq.n	1850e <config_get_ssid+0x36>
    {
        /* Copy the demo ssid into the buffer */
        if(sizeof(config_demo_ssid) <= buflen)
   184f4:	683b      	ldr	r3, [r7, #0]
   184f6:	2b0a      	cmp	r3, #10
   184f8:	d909      	bls.n	1850e <config_get_ssid+0x36>
        {
            memcpy(buf, config_demo_ssid, sizeof(config_demo_ssid));
   184fa:	687a      	ldr	r2, [r7, #4]
   184fc:	4b06      	ldr	r3, [pc, #24]	; (18518 <config_get_ssid+0x40>)
   184fe:	0010      	movs	r0, r2
   18500:	0019      	movs	r1, r3
   18502:	230b      	movs	r3, #11
   18504:	001a      	movs	r2, r3
   18506:	4b05      	ldr	r3, [pc, #20]	; (1851c <config_get_ssid+0x44>)
   18508:	4798      	blx	r3
            status = 0;
   1850a:	2300      	movs	r3, #0
   1850c:	60fb      	str	r3, [r7, #12]
        }
    }

    return status;
   1850e:	68fb      	ldr	r3, [r7, #12]
}
   18510:	0018      	movs	r0, r3
   18512:	46bd      	mov	sp, r7
   18514:	b004      	add	sp, #16
   18516:	bd80      	pop	{r7, pc}
   18518:	000216b4 	.word	0x000216b4
   1851c:	0001c1e5 	.word	0x0001c1e5

00018520 <config_get_password>:

/** \brief Populate the buffer with the wifi access point password */
int config_get_password(char* buf, size_t buflen)
{
   18520:	b580      	push	{r7, lr}
   18522:	b084      	sub	sp, #16
   18524:	af00      	add	r7, sp, #0
   18526:	6078      	str	r0, [r7, #4]
   18528:	6039      	str	r1, [r7, #0]
    int status = -1;
   1852a:	2301      	movs	r3, #1
   1852c:	425b      	negs	r3, r3
   1852e:	60fb      	str	r3, [r7, #12]

    if(buf && buflen)
   18530:	687b      	ldr	r3, [r7, #4]
   18532:	2b00      	cmp	r3, #0
   18534:	d00f      	beq.n	18556 <config_get_password+0x36>
   18536:	683b      	ldr	r3, [r7, #0]
   18538:	2b00      	cmp	r3, #0
   1853a:	d00c      	beq.n	18556 <config_get_password+0x36>
    {
        /* Copy the demo password into the buffer*/
        if(sizeof(config_demo_pass) <= buflen)
   1853c:	683b      	ldr	r3, [r7, #0]
   1853e:	2b0a      	cmp	r3, #10
   18540:	d909      	bls.n	18556 <config_get_password+0x36>
        {
            memcpy(buf, config_demo_pass, sizeof(config_demo_pass));
   18542:	687a      	ldr	r2, [r7, #4]
   18544:	4b06      	ldr	r3, [pc, #24]	; (18560 <config_get_password+0x40>)
   18546:	0010      	movs	r0, r2
   18548:	0019      	movs	r1, r3
   1854a:	230b      	movs	r3, #11
   1854c:	001a      	movs	r2, r3
   1854e:	4b05      	ldr	r3, [pc, #20]	; (18564 <config_get_password+0x44>)
   18550:	4798      	blx	r3
            status = 0;
   18552:	2300      	movs	r3, #0
   18554:	60fb      	str	r3, [r7, #12]
        }
    }

    return status;
   18556:	68fb      	ldr	r3, [r7, #12]
}
   18558:	0018      	movs	r0, r3
   1855a:	46bd      	mov	sp, r7
   1855c:	b004      	add	sp, #16
   1855e:	bd80      	pop	{r7, pc}
   18560:	000216c0 	.word	0x000216c0
   18564:	0001c1e5 	.word	0x0001c1e5

00018568 <config_get_client_id>:

/** \brief Populate the buffer with the client id */
int config_get_client_id(char* buf, size_t buflen)
{
   18568:	b590      	push	{r4, r7, lr}
   1856a:	b089      	sub	sp, #36	; 0x24
   1856c:	af04      	add	r7, sp, #16
   1856e:	6078      	str	r0, [r7, #4]
   18570:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   18572:	687b      	ldr	r3, [r7, #4]
   18574:	2b00      	cmp	r3, #0
   18576:	d01f      	beq.n	185b8 <config_get_client_id+0x50>
   18578:	683b      	ldr	r3, [r7, #0]
   1857a:	2b00      	cmp	r3, #0
   1857c:	d01c      	beq.n	185b8 <config_get_client_id+0x50>
    {
        int rv;

        rv = snprintf(buf, buflen, "projects/%s/locations/%s/registries/%s/devices/%s", 
   1857e:	4c11      	ldr	r4, [pc, #68]	; (185c4 <config_get_client_id+0x5c>)
   18580:	4a11      	ldr	r2, [pc, #68]	; (185c8 <config_get_client_id+0x60>)
   18582:	6839      	ldr	r1, [r7, #0]
   18584:	6878      	ldr	r0, [r7, #4]
   18586:	4b11      	ldr	r3, [pc, #68]	; (185cc <config_get_client_id+0x64>)
   18588:	9302      	str	r3, [sp, #8]
   1858a:	4b11      	ldr	r3, [pc, #68]	; (185d0 <config_get_client_id+0x68>)
   1858c:	9301      	str	r3, [sp, #4]
   1858e:	4b11      	ldr	r3, [pc, #68]	; (185d4 <config_get_client_id+0x6c>)
   18590:	9300      	str	r3, [sp, #0]
   18592:	0023      	movs	r3, r4
   18594:	4c10      	ldr	r4, [pc, #64]	; (185d8 <config_get_client_id+0x70>)
   18596:	47a0      	blx	r4
   18598:	0003      	movs	r3, r0
   1859a:	60fb      	str	r3, [r7, #12]
            config_gcp_project_id, config_gcp_region_id, config_gcp_registry_id, config_gcp_thing_id);

        if(0 < rv && rv < buflen)
   1859c:	68fb      	ldr	r3, [r7, #12]
   1859e:	2b00      	cmp	r3, #0
   185a0:	dd0a      	ble.n	185b8 <config_get_client_id+0x50>
   185a2:	68fa      	ldr	r2, [r7, #12]
   185a4:	683b      	ldr	r3, [r7, #0]
   185a6:	429a      	cmp	r2, r3
   185a8:	d206      	bcs.n	185b8 <config_get_client_id+0x50>
        {
            buf[rv] = 0;
   185aa:	68fb      	ldr	r3, [r7, #12]
   185ac:	687a      	ldr	r2, [r7, #4]
   185ae:	18d3      	adds	r3, r2, r3
   185b0:	2200      	movs	r2, #0
   185b2:	701a      	strb	r2, [r3, #0]
            return 0;
   185b4:	2300      	movs	r3, #0
   185b6:	e001      	b.n	185bc <config_get_client_id+0x54>
        }
    }
    return -1;
   185b8:	2301      	movs	r3, #1
   185ba:	425b      	negs	r3, r3
}
   185bc:	0018      	movs	r0, r3
   185be:	46bd      	mov	sp, r7
   185c0:	b005      	add	sp, #20
   185c2:	bd90      	pop	{r4, r7, pc}
   185c4:	000216cc 	.word	0x000216cc
   185c8:	00021708 	.word	0x00021708
   185cc:	000216f8 	.word	0x000216f8
   185d0:	000216ec 	.word	0x000216ec
   185d4:	000216e0 	.word	0x000216e0
   185d8:	0001c63d 	.word	0x0001c63d

000185dc <config_get_client_username>:

/* Populate the buffer with the username */
int config_get_client_username(char* buf, size_t buflen)
{
   185dc:	b580      	push	{r7, lr}
   185de:	b084      	sub	sp, #16
   185e0:	af00      	add	r7, sp, #0
   185e2:	6078      	str	r0, [r7, #4]
   185e4:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   185e6:	687b      	ldr	r3, [r7, #4]
   185e8:	2b00      	cmp	r3, #0
   185ea:	d018      	beq.n	1861e <config_get_client_username+0x42>
   185ec:	683b      	ldr	r3, [r7, #0]
   185ee:	2b00      	cmp	r3, #0
   185f0:	d015      	beq.n	1861e <config_get_client_username+0x42>
    {
        int rv = snprintf(buf, buflen, "unused");
   185f2:	4a0e      	ldr	r2, [pc, #56]	; (1862c <config_get_client_username+0x50>)
   185f4:	6839      	ldr	r1, [r7, #0]
   185f6:	687b      	ldr	r3, [r7, #4]
   185f8:	0018      	movs	r0, r3
   185fa:	4b0d      	ldr	r3, [pc, #52]	; (18630 <config_get_client_username+0x54>)
   185fc:	4798      	blx	r3
   185fe:	0003      	movs	r3, r0
   18600:	60fb      	str	r3, [r7, #12]

        if(0 < rv && rv < buflen)
   18602:	68fb      	ldr	r3, [r7, #12]
   18604:	2b00      	cmp	r3, #0
   18606:	dd0a      	ble.n	1861e <config_get_client_username+0x42>
   18608:	68fa      	ldr	r2, [r7, #12]
   1860a:	683b      	ldr	r3, [r7, #0]
   1860c:	429a      	cmp	r2, r3
   1860e:	d206      	bcs.n	1861e <config_get_client_username+0x42>
        {
            buf[rv] = 0;
   18610:	68fb      	ldr	r3, [r7, #12]
   18612:	687a      	ldr	r2, [r7, #4]
   18614:	18d3      	adds	r3, r2, r3
   18616:	2200      	movs	r2, #0
   18618:	701a      	strb	r2, [r3, #0]
            return 0;
   1861a:	2300      	movs	r3, #0
   1861c:	e001      	b.n	18622 <config_get_client_username+0x46>
        }
    }
    return -1;
   1861e:	2301      	movs	r3, #1
   18620:	425b      	negs	r3, r3
}
   18622:	0018      	movs	r0, r3
   18624:	46bd      	mov	sp, r7
   18626:	b004      	add	sp, #16
   18628:	bd80      	pop	{r7, pc}
   1862a:	46c0      	nop			; (mov r8, r8)
   1862c:	0002173c 	.word	0x0002173c
   18630:	0001c63d 	.word	0x0001c63d

00018634 <config_get_client_password>:

/* Populate the buffer with the user's password */
int config_get_client_password(char* buf, size_t buflen)
{
   18634:	b580      	push	{r7, lr}
   18636:	b086      	sub	sp, #24
   18638:	af00      	add	r7, sp, #0
   1863a:	6078      	str	r0, [r7, #4]
   1863c:	6039      	str	r1, [r7, #0]
    int rv = -1;
   1863e:	2301      	movs	r3, #1
   18640:	425b      	negs	r3, r3
   18642:	617b      	str	r3, [r7, #20]

    if(buf && buflen)
   18644:	687b      	ldr	r3, [r7, #4]
   18646:	2b00      	cmp	r3, #0
   18648:	d058      	beq.n	186fc <config_get_client_password+0xc8>
   1864a:	683b      	ldr	r3, [r7, #0]
   1864c:	2b00      	cmp	r3, #0
   1864e:	d055      	beq.n	186fc <config_get_client_password+0xc8>
    {
        atca_jwt_t jwt;
        
        uint32_t ts = time_utils_get_utc();
   18650:	4b2d      	ldr	r3, [pc, #180]	; (18708 <config_get_client_password+0xd4>)
   18652:	4798      	blx	r3
   18654:	0003      	movs	r3, r0
   18656:	613b      	str	r3, [r7, #16]

        rv = atcab_init(&cfg_ateccx08a_i2c_default);
   18658:	4b2c      	ldr	r3, [pc, #176]	; (1870c <config_get_client_password+0xd8>)
   1865a:	0018      	movs	r0, r3
   1865c:	4b2c      	ldr	r3, [pc, #176]	; (18710 <config_get_client_password+0xdc>)
   1865e:	4798      	blx	r3
   18660:	0003      	movs	r3, r0
   18662:	617b      	str	r3, [r7, #20]
        if(ATCA_SUCCESS != rv)
   18664:	697b      	ldr	r3, [r7, #20]
   18666:	2b00      	cmp	r3, #0
   18668:	d001      	beq.n	1866e <config_get_client_password+0x3a>
        {
            return rv;
   1866a:	697b      	ldr	r3, [r7, #20]
   1866c:	e047      	b.n	186fe <config_get_client_password+0xca>
        }

        /* Build the JWT */
        rv = atca_jwt_init(&jwt, buf, buflen);
   1866e:	683b      	ldr	r3, [r7, #0]
   18670:	b29a      	uxth	r2, r3
   18672:	6879      	ldr	r1, [r7, #4]
   18674:	2308      	movs	r3, #8
   18676:	18fb      	adds	r3, r7, r3
   18678:	0018      	movs	r0, r3
   1867a:	4b26      	ldr	r3, [pc, #152]	; (18714 <config_get_client_password+0xe0>)
   1867c:	4798      	blx	r3
   1867e:	0003      	movs	r3, r0
   18680:	617b      	str	r3, [r7, #20]
        if(ATCA_SUCCESS != rv)
   18682:	697b      	ldr	r3, [r7, #20]
   18684:	2b00      	cmp	r3, #0
   18686:	d001      	beq.n	1868c <config_get_client_password+0x58>
        {
            return rv;
   18688:	697b      	ldr	r3, [r7, #20]
   1868a:	e038      	b.n	186fe <config_get_client_password+0xca>
        }

        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "iat", ts)))
   1868c:	693a      	ldr	r2, [r7, #16]
   1868e:	4922      	ldr	r1, [pc, #136]	; (18718 <config_get_client_password+0xe4>)
   18690:	2308      	movs	r3, #8
   18692:	18fb      	adds	r3, r7, r3
   18694:	0018      	movs	r0, r3
   18696:	4b21      	ldr	r3, [pc, #132]	; (1871c <config_get_client_password+0xe8>)
   18698:	4798      	blx	r3
   1869a:	0003      	movs	r3, r0
   1869c:	617b      	str	r3, [r7, #20]
   1869e:	697b      	ldr	r3, [r7, #20]
   186a0:	2b00      	cmp	r3, #0
   186a2:	d001      	beq.n	186a8 <config_get_client_password+0x74>
        {
            return rv;
   186a4:	697b      	ldr	r3, [r7, #20]
   186a6:	e02a      	b.n	186fe <config_get_client_password+0xca>
        }

        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "exp", ts + 86400)))
   186a8:	693b      	ldr	r3, [r7, #16]
   186aa:	4a1d      	ldr	r2, [pc, #116]	; (18720 <config_get_client_password+0xec>)
   186ac:	4694      	mov	ip, r2
   186ae:	4463      	add	r3, ip
   186b0:	001a      	movs	r2, r3
   186b2:	491c      	ldr	r1, [pc, #112]	; (18724 <config_get_client_password+0xf0>)
   186b4:	2308      	movs	r3, #8
   186b6:	18fb      	adds	r3, r7, r3
   186b8:	0018      	movs	r0, r3
   186ba:	4b18      	ldr	r3, [pc, #96]	; (1871c <config_get_client_password+0xe8>)
   186bc:	4798      	blx	r3
   186be:	0003      	movs	r3, r0
   186c0:	617b      	str	r3, [r7, #20]
   186c2:	697b      	ldr	r3, [r7, #20]
   186c4:	2b00      	cmp	r3, #0
   186c6:	d001      	beq.n	186cc <config_get_client_password+0x98>
        {
            return rv;
   186c8:	697b      	ldr	r3, [r7, #20]
   186ca:	e018      	b.n	186fe <config_get_client_password+0xca>
        }

        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_string(&jwt, "aud", config_gcp_project_id)))
   186cc:	4a16      	ldr	r2, [pc, #88]	; (18728 <config_get_client_password+0xf4>)
   186ce:	4917      	ldr	r1, [pc, #92]	; (1872c <config_get_client_password+0xf8>)
   186d0:	2308      	movs	r3, #8
   186d2:	18fb      	adds	r3, r7, r3
   186d4:	0018      	movs	r0, r3
   186d6:	4b16      	ldr	r3, [pc, #88]	; (18730 <config_get_client_password+0xfc>)
   186d8:	4798      	blx	r3
   186da:	0003      	movs	r3, r0
   186dc:	617b      	str	r3, [r7, #20]
   186de:	697b      	ldr	r3, [r7, #20]
   186e0:	2b00      	cmp	r3, #0
   186e2:	d001      	beq.n	186e8 <config_get_client_password+0xb4>
        {
            return rv;
   186e4:	697b      	ldr	r3, [r7, #20]
   186e6:	e00a      	b.n	186fe <config_get_client_password+0xca>
        }

        rv = atca_jwt_finalize(&jwt, 0);
   186e8:	2308      	movs	r3, #8
   186ea:	18fb      	adds	r3, r7, r3
   186ec:	2100      	movs	r1, #0
   186ee:	0018      	movs	r0, r3
   186f0:	4b10      	ldr	r3, [pc, #64]	; (18734 <config_get_client_password+0x100>)
   186f2:	4798      	blx	r3
   186f4:	0003      	movs	r3, r0
   186f6:	617b      	str	r3, [r7, #20]

        atcab_release();
   186f8:	4b0f      	ldr	r3, [pc, #60]	; (18738 <config_get_client_password+0x104>)
   186fa:	4798      	blx	r3
    }
    return rv;
   186fc:	697b      	ldr	r3, [r7, #20]
}
   186fe:	0018      	movs	r0, r3
   18700:	46bd      	mov	sp, r7
   18702:	b006      	add	sp, #24
   18704:	bd80      	pop	{r7, pc}
   18706:	46c0      	nop			; (mov r8, r8)
   18708:	00016625 	.word	0x00016625
   1870c:	20000120 	.word	0x20000120
   18710:	0000fe99 	.word	0x0000fe99
   18714:	00012451 	.word	0x00012451
   18718:	00021744 	.word	0x00021744
   1871c:	00012855 	.word	0x00012855
   18720:	00015180 	.word	0x00015180
   18724:	00021748 	.word	0x00021748
   18728:	000216cc 	.word	0x000216cc
   1872c:	0002174c 	.word	0x0002174c
   18730:	000127b5 	.word	0x000127b5
   18734:	00012519 	.word	0x00012519
   18738:	0000ff4d 	.word	0x0000ff4d

0001873c <config_get_client_pub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_pub_topic(char* buf, size_t buflen)
{
   1873c:	b590      	push	{r4, r7, lr}
   1873e:	b085      	sub	sp, #20
   18740:	af00      	add	r7, sp, #0
   18742:	6078      	str	r0, [r7, #4]
   18744:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   18746:	687b      	ldr	r3, [r7, #4]
   18748:	2b00      	cmp	r3, #0
   1874a:	d018      	beq.n	1877e <config_get_client_pub_topic+0x42>
   1874c:	683b      	ldr	r3, [r7, #0]
   1874e:	2b00      	cmp	r3, #0
   18750:	d015      	beq.n	1877e <config_get_client_pub_topic+0x42>
    {
        int rv = snprintf(buf, buflen, "/devices/%s/events", config_gcp_thing_id);
   18752:	4b0e      	ldr	r3, [pc, #56]	; (1878c <config_get_client_pub_topic+0x50>)
   18754:	4a0e      	ldr	r2, [pc, #56]	; (18790 <config_get_client_pub_topic+0x54>)
   18756:	6839      	ldr	r1, [r7, #0]
   18758:	6878      	ldr	r0, [r7, #4]
   1875a:	4c0e      	ldr	r4, [pc, #56]	; (18794 <config_get_client_pub_topic+0x58>)
   1875c:	47a0      	blx	r4
   1875e:	0003      	movs	r3, r0
   18760:	60fb      	str	r3, [r7, #12]

        if(0 < rv && rv < buflen)
   18762:	68fb      	ldr	r3, [r7, #12]
   18764:	2b00      	cmp	r3, #0
   18766:	dd0a      	ble.n	1877e <config_get_client_pub_topic+0x42>
   18768:	68fa      	ldr	r2, [r7, #12]
   1876a:	683b      	ldr	r3, [r7, #0]
   1876c:	429a      	cmp	r2, r3
   1876e:	d206      	bcs.n	1877e <config_get_client_pub_topic+0x42>
        {
            buf[rv] = 0;
   18770:	68fb      	ldr	r3, [r7, #12]
   18772:	687a      	ldr	r2, [r7, #4]
   18774:	18d3      	adds	r3, r2, r3
   18776:	2200      	movs	r2, #0
   18778:	701a      	strb	r2, [r3, #0]
            return 0;
   1877a:	2300      	movs	r3, #0
   1877c:	e001      	b.n	18782 <config_get_client_pub_topic+0x46>
        }
    }
    return -1;
   1877e:	2301      	movs	r3, #1
   18780:	425b      	negs	r3, r3
}
   18782:	0018      	movs	r0, r3
   18784:	46bd      	mov	sp, r7
   18786:	b005      	add	sp, #20
   18788:	bd90      	pop	{r4, r7, pc}
   1878a:	46c0      	nop			; (mov r8, r8)
   1878c:	000216f8 	.word	0x000216f8
   18790:	00021750 	.word	0x00021750
   18794:	0001c63d 	.word	0x0001c63d

00018798 <config_get_client_sub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_sub_topic(char* buf, size_t buflen)
{
   18798:	b590      	push	{r4, r7, lr}
   1879a:	b085      	sub	sp, #20
   1879c:	af00      	add	r7, sp, #0
   1879e:	6078      	str	r0, [r7, #4]
   187a0:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   187a2:	687b      	ldr	r3, [r7, #4]
   187a4:	2b00      	cmp	r3, #0
   187a6:	d018      	beq.n	187da <config_get_client_sub_topic+0x42>
   187a8:	683b      	ldr	r3, [r7, #0]
   187aa:	2b00      	cmp	r3, #0
   187ac:	d015      	beq.n	187da <config_get_client_sub_topic+0x42>
    {
        int rv = snprintf(buf, buflen, "/devices/%s/config", config_gcp_thing_id);
   187ae:	4b0e      	ldr	r3, [pc, #56]	; (187e8 <config_get_client_sub_topic+0x50>)
   187b0:	4a0e      	ldr	r2, [pc, #56]	; (187ec <config_get_client_sub_topic+0x54>)
   187b2:	6839      	ldr	r1, [r7, #0]
   187b4:	6878      	ldr	r0, [r7, #4]
   187b6:	4c0e      	ldr	r4, [pc, #56]	; (187f0 <config_get_client_sub_topic+0x58>)
   187b8:	47a0      	blx	r4
   187ba:	0003      	movs	r3, r0
   187bc:	60fb      	str	r3, [r7, #12]

        if(0 < rv && rv < buflen)
   187be:	68fb      	ldr	r3, [r7, #12]
   187c0:	2b00      	cmp	r3, #0
   187c2:	dd0a      	ble.n	187da <config_get_client_sub_topic+0x42>
   187c4:	68fa      	ldr	r2, [r7, #12]
   187c6:	683b      	ldr	r3, [r7, #0]
   187c8:	429a      	cmp	r2, r3
   187ca:	d206      	bcs.n	187da <config_get_client_sub_topic+0x42>
        {
            buf[rv] = 0;
   187cc:	68fb      	ldr	r3, [r7, #12]
   187ce:	687a      	ldr	r2, [r7, #4]
   187d0:	18d3      	adds	r3, r2, r3
   187d2:	2200      	movs	r2, #0
   187d4:	701a      	strb	r2, [r3, #0]
            return 0;
   187d6:	2300      	movs	r3, #0
   187d8:	e001      	b.n	187de <config_get_client_sub_topic+0x46>
        }
    }
    return -1;
   187da:	2301      	movs	r3, #1
   187dc:	425b      	negs	r3, r3
}
   187de:	0018      	movs	r0, r3
   187e0:	46bd      	mov	sp, r7
   187e2:	b005      	add	sp, #20
   187e4:	bd90      	pop	{r4, r7, pc}
   187e6:	46c0      	nop			; (mov r8, r8)
   187e8:	000216f8 	.word	0x000216f8
   187ec:	00021764 	.word	0x00021764
   187f0:	0001c63d 	.word	0x0001c63d

000187f4 <config_get_host_info>:

/* Retrieve the host connection information */
int config_get_host_info(char* buf, size_t buflen, uint16_t * port)
{
   187f4:	b590      	push	{r4, r7, lr}
   187f6:	b087      	sub	sp, #28
   187f8:	af00      	add	r7, sp, #0
   187fa:	60f8      	str	r0, [r7, #12]
   187fc:	60b9      	str	r1, [r7, #8]
   187fe:	607a      	str	r2, [r7, #4]
    int rv;

    if(!buf || !buflen || !port)
   18800:	68fb      	ldr	r3, [r7, #12]
   18802:	2b00      	cmp	r3, #0
   18804:	d005      	beq.n	18812 <config_get_host_info+0x1e>
   18806:	68bb      	ldr	r3, [r7, #8]
   18808:	2b00      	cmp	r3, #0
   1880a:	d002      	beq.n	18812 <config_get_host_info+0x1e>
   1880c:	687b      	ldr	r3, [r7, #4]
   1880e:	2b00      	cmp	r3, #0
   18810:	d102      	bne.n	18818 <config_get_host_info+0x24>
    {
        return -1;
   18812:	2301      	movs	r3, #1
   18814:	425b      	negs	r3, r3
   18816:	e01c      	b.n	18852 <config_get_host_info+0x5e>
    }

    *port = config_gcp_mqtt_port;
   18818:	23bc      	movs	r3, #188	; 0xbc
   1881a:	33ff      	adds	r3, #255	; 0xff
   1881c:	b29a      	uxth	r2, r3
   1881e:	687b      	ldr	r3, [r7, #4]
   18820:	801a      	strh	r2, [r3, #0]

    rv = snprintf(buf, buflen, "%s", config_gcp_host_name);
   18822:	4b0e      	ldr	r3, [pc, #56]	; (1885c <config_get_host_info+0x68>)
   18824:	4a0e      	ldr	r2, [pc, #56]	; (18860 <config_get_host_info+0x6c>)
   18826:	68b9      	ldr	r1, [r7, #8]
   18828:	68f8      	ldr	r0, [r7, #12]
   1882a:	4c0e      	ldr	r4, [pc, #56]	; (18864 <config_get_host_info+0x70>)
   1882c:	47a0      	blx	r4
   1882e:	0003      	movs	r3, r0
   18830:	617b      	str	r3, [r7, #20]

    if(0 < rv && rv < buflen)
   18832:	697b      	ldr	r3, [r7, #20]
   18834:	2b00      	cmp	r3, #0
   18836:	dd0a      	ble.n	1884e <config_get_host_info+0x5a>
   18838:	697a      	ldr	r2, [r7, #20]
   1883a:	68bb      	ldr	r3, [r7, #8]
   1883c:	429a      	cmp	r2, r3
   1883e:	d206      	bcs.n	1884e <config_get_host_info+0x5a>
    {
        buf[rv] = 0;
   18840:	697b      	ldr	r3, [r7, #20]
   18842:	68fa      	ldr	r2, [r7, #12]
   18844:	18d3      	adds	r3, r2, r3
   18846:	2200      	movs	r2, #0
   18848:	701a      	strb	r2, [r3, #0]
        return 0;
   1884a:	2300      	movs	r3, #0
   1884c:	e001      	b.n	18852 <config_get_host_info+0x5e>
    }
    else
    {
        /* Failed */
        return -1;
   1884e:	2301      	movs	r3, #1
   18850:	425b      	negs	r3, r3
    }
}
   18852:	0018      	movs	r0, r3
   18854:	46bd      	mov	sp, r7
   18856:	b007      	add	sp, #28
   18858:	bd90      	pop	{r4, r7, pc}
   1885a:	46c0      	nop			; (mov r8, r8)
   1885c:	000216a0 	.word	0x000216a0
   18860:	00021778 	.word	0x00021778
   18864:	0001c63d 	.word	0x0001c63d

00018868 <config_print_public_key>:
const uint8_t public_key_x509_header[] = { 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86,
                                           0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A,
                                           0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 
                                           0x42, 0x00, 0x04 };
int config_print_public_key(void)
{
   18868:	b5b0      	push	{r4, r5, r7, lr}
   1886a:	b0a4      	sub	sp, #144	; 0x90
   1886c:	af00      	add	r7, sp, #0
    uint8_t buf[128];
    uint8_t * tmp;
    size_t buf_len = sizeof(buf);
   1886e:	2380      	movs	r3, #128	; 0x80
   18870:	607b      	str	r3, [r7, #4]
    int i;

    ATCA_STATUS rv = atcab_init(&cfg_ateccx08a_i2c_default);
   18872:	238f      	movs	r3, #143	; 0x8f
   18874:	18fc      	adds	r4, r7, r3
   18876:	4b2e      	ldr	r3, [pc, #184]	; (18930 <config_print_public_key+0xc8>)
   18878:	0018      	movs	r0, r3
   1887a:	4b2e      	ldr	r3, [pc, #184]	; (18934 <config_print_public_key+0xcc>)
   1887c:	4798      	blx	r3
   1887e:	0003      	movs	r3, r0
   18880:	7023      	strb	r3, [r4, #0]
    if(ATCA_SUCCESS != rv)
   18882:	238f      	movs	r3, #143	; 0x8f
   18884:	18fb      	adds	r3, r7, r3
   18886:	781b      	ldrb	r3, [r3, #0]
   18888:	2b00      	cmp	r3, #0
   1888a:	d003      	beq.n	18894 <config_print_public_key+0x2c>
    {
        return rv;
   1888c:	238f      	movs	r3, #143	; 0x8f
   1888e:	18fb      	adds	r3, r7, r3
   18890:	781b      	ldrb	r3, [r3, #0]
   18892:	e048      	b.n	18926 <config_print_public_key+0xbe>
    }

    /* Calculate where the raw data will fit into the buffer */
    tmp = buf + sizeof(buf) - ATCA_PUB_KEY_SIZE - sizeof(public_key_x509_header);
   18894:	2308      	movs	r3, #8
   18896:	18fb      	adds	r3, r7, r3
   18898:	3325      	adds	r3, #37	; 0x25
   1889a:	2288      	movs	r2, #136	; 0x88
   1889c:	18ba      	adds	r2, r7, r2
   1889e:	6013      	str	r3, [r2, #0]

    /* Copy the header */
    memcpy(tmp, public_key_x509_header, sizeof(public_key_x509_header));
   188a0:	2388      	movs	r3, #136	; 0x88
   188a2:	18fb      	adds	r3, r7, r3
   188a4:	681a      	ldr	r2, [r3, #0]
   188a6:	4b24      	ldr	r3, [pc, #144]	; (18938 <config_print_public_key+0xd0>)
   188a8:	0010      	movs	r0, r2
   188aa:	0019      	movs	r1, r3
   188ac:	231b      	movs	r3, #27
   188ae:	001a      	movs	r2, r3
   188b0:	4b22      	ldr	r3, [pc, #136]	; (1893c <config_print_public_key+0xd4>)
   188b2:	4798      	blx	r3

    /* Get public key without private key generation */
    rv = atcab_get_pubkey(0, tmp + sizeof(public_key_x509_header));
   188b4:	2388      	movs	r3, #136	; 0x88
   188b6:	18fb      	adds	r3, r7, r3
   188b8:	681b      	ldr	r3, [r3, #0]
   188ba:	331b      	adds	r3, #27
   188bc:	228f      	movs	r2, #143	; 0x8f
   188be:	18bc      	adds	r4, r7, r2
   188c0:	0019      	movs	r1, r3
   188c2:	2000      	movs	r0, #0
   188c4:	4b1e      	ldr	r3, [pc, #120]	; (18940 <config_print_public_key+0xd8>)
   188c6:	4798      	blx	r3
   188c8:	0003      	movs	r3, r0
   188ca:	7023      	strb	r3, [r4, #0]

    atcab_release();
   188cc:	4b1d      	ldr	r3, [pc, #116]	; (18944 <config_print_public_key+0xdc>)
   188ce:	4798      	blx	r3

    if (ATCA_SUCCESS != rv ) {
   188d0:	238f      	movs	r3, #143	; 0x8f
   188d2:	18fb      	adds	r3, r7, r3
   188d4:	781b      	ldrb	r3, [r3, #0]
   188d6:	2b00      	cmp	r3, #0
   188d8:	d003      	beq.n	188e2 <config_print_public_key+0x7a>
        return rv;
   188da:	238f      	movs	r3, #143	; 0x8f
   188dc:	18fb      	adds	r3, r7, r3
   188de:	781b      	ldrb	r3, [r3, #0]
   188e0:	e021      	b.n	18926 <config_print_public_key+0xbe>
    }

    /* Convert to base 64 */
    rv = atcab_base64encode(tmp, ATCA_PUB_KEY_SIZE + sizeof(public_key_x509_header), buf, &buf_len);
   188e2:	238f      	movs	r3, #143	; 0x8f
   188e4:	18fc      	adds	r4, r7, r3
   188e6:	1d3b      	adds	r3, r7, #4
   188e8:	2208      	movs	r2, #8
   188ea:	18ba      	adds	r2, r7, r2
   188ec:	2188      	movs	r1, #136	; 0x88
   188ee:	1879      	adds	r1, r7, r1
   188f0:	6808      	ldr	r0, [r1, #0]
   188f2:	215b      	movs	r1, #91	; 0x5b
   188f4:	4d14      	ldr	r5, [pc, #80]	; (18948 <config_print_public_key+0xe0>)
   188f6:	47a8      	blx	r5
   188f8:	0003      	movs	r3, r0
   188fa:	7023      	strb	r3, [r4, #0]

    if(ATCA_SUCCESS != rv)
   188fc:	238f      	movs	r3, #143	; 0x8f
   188fe:	18fb      	adds	r3, r7, r3
   18900:	781b      	ldrb	r3, [r3, #0]
   18902:	2b00      	cmp	r3, #0
   18904:	d003      	beq.n	1890e <config_print_public_key+0xa6>
    {
        return rv;
   18906:	238f      	movs	r3, #143	; 0x8f
   18908:	18fb      	adds	r3, r7, r3
   1890a:	781b      	ldrb	r3, [r3, #0]
   1890c:	e00b      	b.n	18926 <config_print_public_key+0xbe>
    }

    /* Add a null terminator */
    buf[buf_len] = 0;
   1890e:	687b      	ldr	r3, [r7, #4]
   18910:	2208      	movs	r2, #8
   18912:	18ba      	adds	r2, r7, r2
   18914:	2100      	movs	r1, #0
   18916:	54d1      	strb	r1, [r2, r3]

    /* Print out the key */
    DEBUG_PRINTF("-----BEGIN PUBLIC KEY-----\r\n%s\r\n-----END PUBLIC KEY-----\r\n", buf);
   18918:	2308      	movs	r3, #8
   1891a:	18fa      	adds	r2, r7, r3
   1891c:	4b0b      	ldr	r3, [pc, #44]	; (1894c <config_print_public_key+0xe4>)
   1891e:	0011      	movs	r1, r2
   18920:	0018      	movs	r0, r3
   18922:	4b0b      	ldr	r3, [pc, #44]	; (18950 <config_print_public_key+0xe8>)
   18924:	4798      	blx	r3

   18926:	0018      	movs	r0, r3
   18928:	46bd      	mov	sp, r7
   1892a:	b024      	add	sp, #144	; 0x90
   1892c:	bdb0      	pop	{r4, r5, r7, pc}
   1892e:	46c0      	nop			; (mov r8, r8)
   18930:	20000120 	.word	0x20000120
   18934:	0000fe99 	.word	0x0000fe99
   18938:	000217b8 	.word	0x000217b8
   1893c:	0001c1e5 	.word	0x0001c1e5
   18940:	00011249 	.word	0x00011249
   18944:	0000ff4d 	.word	0x0000ff4d
   18948:	000106dd 	.word	0x000106dd
   1894c:	0002177c 	.word	0x0002177c
   18950:	0001c37d 	.word	0x0001c37d

00018954 <atca_kit_get_rx_buffer>:

/** \brief This function returns the rx buffer.
 *  \return pointer to the current rx buffer index
 */
uint8_t* atca_kit_get_rx_buffer(void)
{
   18954:	b580      	push	{r7, lr}
   18956:	af00      	add	r7, sp, #0
	return pucUsbRxBuffer;
   18958:	4b01      	ldr	r3, [pc, #4]	; (18960 <atca_kit_get_rx_buffer+0xc>)
}
   1895a:	0018      	movs	r0, r3
   1895c:	46bd      	mov	sp, r7
   1895e:	bd80      	pop	{r7, pc}
   18960:	200014c0 	.word	0x200014c0

00018964 <atca_kit_get_tx_buffer>:

uint8_t* atca_kit_get_tx_buffer(void)
{
   18964:	b580      	push	{r7, lr}
   18966:	af00      	add	r7, sp, #0
	return pucUsbTxBuffer;
   18968:	4b01      	ldr	r3, [pc, #4]	; (18970 <atca_kit_get_tx_buffer+0xc>)
}
   1896a:	0018      	movs	r0, r3
   1896c:	46bd      	mov	sp, r7
   1896e:	bd80      	pop	{r7, pc}
   18970:	20001dbc 	.word	0x20001dbc

00018974 <atca_kit_lock>:

bool atca_kit_lock(void)
{
   18974:	b580      	push	{r7, lr}
   18976:	af00      	add	r7, sp, #0
    return atca_kit_holdoff;
   18978:	4b03      	ldr	r3, [pc, #12]	; (18988 <atca_kit_lock+0x14>)
   1897a:	681b      	ldr	r3, [r3, #0]
   1897c:	1e5a      	subs	r2, r3, #1
   1897e:	4193      	sbcs	r3, r2
   18980:	b2db      	uxtb	r3, r3
}
   18982:	0018      	movs	r0, r3
   18984:	46bd      	mov	sp, r7
   18986:	bd80      	pop	{r7, pc}
   18988:	200026bc 	.word	0x200026bc

0001898c <atca_kit_counter_set>:

static void atca_kit_counter_set(uint32_t val)
{
   1898c:	b580      	push	{r7, lr}
   1898e:	b082      	sub	sp, #8
   18990:	af00      	add	r7, sp, #0
   18992:	6078      	str	r0, [r7, #4]
    /* Convert to loop time*/
    atca_kit_holdoff = val / TIMER_UPDATE_PERIOD;
   18994:	687a      	ldr	r2, [r7, #4]
   18996:	4b0b      	ldr	r3, [pc, #44]	; (189c4 <atca_kit_counter_set+0x38>)
   18998:	2164      	movs	r1, #100	; 0x64
   1899a:	0010      	movs	r0, r2
   1899c:	4798      	blx	r3
   1899e:	0003      	movs	r3, r0
   189a0:	001a      	movs	r2, r3
   189a2:	4b09      	ldr	r3, [pc, #36]	; (189c8 <atca_kit_counter_set+0x3c>)
   189a4:	601a      	str	r2, [r3, #0]

    if(val && !atca_kit_holdoff)
   189a6:	687b      	ldr	r3, [r7, #4]
   189a8:	2b00      	cmp	r3, #0
   189aa:	d006      	beq.n	189ba <atca_kit_counter_set+0x2e>
   189ac:	4b06      	ldr	r3, [pc, #24]	; (189c8 <atca_kit_counter_set+0x3c>)
   189ae:	681b      	ldr	r3, [r3, #0]
   189b0:	2b00      	cmp	r3, #0
   189b2:	d102      	bne.n	189ba <atca_kit_counter_set+0x2e>
    {
        atca_kit_holdoff = 1;
   189b4:	4b04      	ldr	r3, [pc, #16]	; (189c8 <atca_kit_counter_set+0x3c>)
   189b6:	2201      	movs	r2, #1
   189b8:	601a      	str	r2, [r3, #0]
    }
}
   189ba:	46c0      	nop			; (mov r8, r8)
   189bc:	46bd      	mov	sp, r7
   189be:	b002      	add	sp, #8
   189c0:	bd80      	pop	{r7, pc}
   189c2:	46c0      	nop			; (mov r8, r8)
   189c4:	00019d81 	.word	0x00019d81
   189c8:	200026bc 	.word	0x200026bc

000189cc <atca_kit_timer_update>:

/* Must be called on the TIMER_UPDATE_PERIOD */
void atca_kit_timer_update(void)
{
   189cc:	b580      	push	{r7, lr}
   189ce:	af00      	add	r7, sp, #0
    if(atca_kit_holdoff)
   189d0:	4b05      	ldr	r3, [pc, #20]	; (189e8 <atca_kit_timer_update+0x1c>)
   189d2:	681b      	ldr	r3, [r3, #0]
   189d4:	2b00      	cmp	r3, #0
   189d6:	d004      	beq.n	189e2 <atca_kit_timer_update+0x16>
    {
        atca_kit_holdoff--;
   189d8:	4b03      	ldr	r3, [pc, #12]	; (189e8 <atca_kit_timer_update+0x1c>)
   189da:	681b      	ldr	r3, [r3, #0]
   189dc:	1e5a      	subs	r2, r3, #1
   189de:	4b02      	ldr	r3, [pc, #8]	; (189e8 <atca_kit_timer_update+0x1c>)
   189e0:	601a      	str	r2, [r3, #0]
    }
}
   189e2:	46c0      	nop			; (mov r8, r8)
   189e4:	46bd      	mov	sp, r7
   189e6:	bd80      	pop	{r7, pc}
   189e8:	200026bc 	.word	0x200026bc

000189ec <atca_kit_convert_nibble_to_ascii>:
/** \brief This function converts a nibble to Hex-ASCII.
 * \param[in] nibble nibble value to be converted
 * \return ASCII value
**/
uint8_t atca_kit_convert_nibble_to_ascii(uint8_t nibble)
{
   189ec:	b580      	push	{r7, lr}
   189ee:	b082      	sub	sp, #8
   189f0:	af00      	add	r7, sp, #0
   189f2:	0002      	movs	r2, r0
   189f4:	1dfb      	adds	r3, r7, #7
   189f6:	701a      	strb	r2, [r3, #0]
    nibble &= 0x0F;
   189f8:	1dfb      	adds	r3, r7, #7
   189fa:	1dfa      	adds	r2, r7, #7
   189fc:	7812      	ldrb	r2, [r2, #0]
   189fe:	210f      	movs	r1, #15
   18a00:	400a      	ands	r2, r1
   18a02:	701a      	strb	r2, [r3, #0]
    if (nibble <= 0x09 )
   18a04:	1dfb      	adds	r3, r7, #7
   18a06:	781b      	ldrb	r3, [r3, #0]
   18a08:	2b09      	cmp	r3, #9
   18a0a:	d805      	bhi.n	18a18 <atca_kit_convert_nibble_to_ascii+0x2c>
        nibble += '0';
   18a0c:	1dfb      	adds	r3, r7, #7
   18a0e:	1dfa      	adds	r2, r7, #7
   18a10:	7812      	ldrb	r2, [r2, #0]
   18a12:	3230      	adds	r2, #48	; 0x30
   18a14:	701a      	strb	r2, [r3, #0]
   18a16:	e004      	b.n	18a22 <atca_kit_convert_nibble_to_ascii+0x36>
    else
        nibble += ('A' - 10);
   18a18:	1dfb      	adds	r3, r7, #7
   18a1a:	1dfa      	adds	r2, r7, #7
   18a1c:	7812      	ldrb	r2, [r2, #0]
   18a1e:	3237      	adds	r2, #55	; 0x37
   18a20:	701a      	strb	r2, [r3, #0]
    return nibble;
   18a22:	1dfb      	adds	r3, r7, #7
   18a24:	781b      	ldrb	r3, [r3, #0]
}
   18a26:	0018      	movs	r0, r3
   18a28:	46bd      	mov	sp, r7
   18a2a:	b002      	add	sp, #8
   18a2c:	bd80      	pop	{r7, pc}

00018a2e <atca_kit_convert_ascii_to_nibble>:
/** \brief This function converts an ASCII character to a nibble.
 * \param[in] ascii ASCII value to be converted
 * \return nibble value
**/
uint8_t atca_kit_convert_ascii_to_nibble(uint8_t ascii)
{
   18a2e:	b580      	push	{r7, lr}
   18a30:	b082      	sub	sp, #8
   18a32:	af00      	add	r7, sp, #0
   18a34:	0002      	movs	r2, r0
   18a36:	1dfb      	adds	r3, r7, #7
   18a38:	701a      	strb	r2, [r3, #0]
    if ((ascii <= '9') && (ascii >= '0'))
   18a3a:	1dfb      	adds	r3, r7, #7
   18a3c:	781b      	ldrb	r3, [r3, #0]
   18a3e:	2b39      	cmp	r3, #57	; 0x39
   18a40:	d809      	bhi.n	18a56 <atca_kit_convert_ascii_to_nibble+0x28>
   18a42:	1dfb      	adds	r3, r7, #7
   18a44:	781b      	ldrb	r3, [r3, #0]
   18a46:	2b2f      	cmp	r3, #47	; 0x2f
   18a48:	d905      	bls.n	18a56 <atca_kit_convert_ascii_to_nibble+0x28>
        ascii -= '0';
   18a4a:	1dfb      	adds	r3, r7, #7
   18a4c:	1dfa      	adds	r2, r7, #7
   18a4e:	7812      	ldrb	r2, [r2, #0]
   18a50:	3a30      	subs	r2, #48	; 0x30
   18a52:	701a      	strb	r2, [r3, #0]
   18a54:	e01e      	b.n	18a94 <atca_kit_convert_ascii_to_nibble+0x66>
    else if ((ascii <= 'F' ) && (ascii >= 'A'))
   18a56:	1dfb      	adds	r3, r7, #7
   18a58:	781b      	ldrb	r3, [r3, #0]
   18a5a:	2b46      	cmp	r3, #70	; 0x46
   18a5c:	d809      	bhi.n	18a72 <atca_kit_convert_ascii_to_nibble+0x44>
   18a5e:	1dfb      	adds	r3, r7, #7
   18a60:	781b      	ldrb	r3, [r3, #0]
   18a62:	2b40      	cmp	r3, #64	; 0x40
   18a64:	d905      	bls.n	18a72 <atca_kit_convert_ascii_to_nibble+0x44>
        ascii -= ('A' - 10);
   18a66:	1dfb      	adds	r3, r7, #7
   18a68:	1dfa      	adds	r2, r7, #7
   18a6a:	7812      	ldrb	r2, [r2, #0]
   18a6c:	3a37      	subs	r2, #55	; 0x37
   18a6e:	701a      	strb	r2, [r3, #0]
   18a70:	e010      	b.n	18a94 <atca_kit_convert_ascii_to_nibble+0x66>
    else if ((ascii <= 'f') && (ascii >= 'a'))
   18a72:	1dfb      	adds	r3, r7, #7
   18a74:	781b      	ldrb	r3, [r3, #0]
   18a76:	2b66      	cmp	r3, #102	; 0x66
   18a78:	d809      	bhi.n	18a8e <atca_kit_convert_ascii_to_nibble+0x60>
   18a7a:	1dfb      	adds	r3, r7, #7
   18a7c:	781b      	ldrb	r3, [r3, #0]
   18a7e:	2b60      	cmp	r3, #96	; 0x60
   18a80:	d905      	bls.n	18a8e <atca_kit_convert_ascii_to_nibble+0x60>
        ascii -= ('a' - 10);
   18a82:	1dfb      	adds	r3, r7, #7
   18a84:	1dfa      	adds	r2, r7, #7
   18a86:	7812      	ldrb	r2, [r2, #0]
   18a88:	3a57      	subs	r2, #87	; 0x57
   18a8a:	701a      	strb	r2, [r3, #0]
   18a8c:	e002      	b.n	18a94 <atca_kit_convert_ascii_to_nibble+0x66>
    else
        ascii = 0;
   18a8e:	1dfb      	adds	r3, r7, #7
   18a90:	2200      	movs	r2, #0
   18a92:	701a      	strb	r2, [r3, #0]
    return ascii;
   18a94:	1dfb      	adds	r3, r7, #7
   18a96:	781b      	ldrb	r3, [r3, #0]
}
   18a98:	0018      	movs	r0, r3
   18a9a:	46bd      	mov	sp, r7
   18a9c:	b002      	add	sp, #8
   18a9e:	bd80      	pop	{r7, pc}

00018aa0 <atca_kit_convert_ascii_to_binary>:
 * \param[in] length number of bytes in buffer
 * \param[in, out] buffer pointer to buffer
 * \return number of bytes in buffer
 */
uint16_t atca_kit_convert_ascii_to_binary(uint16_t length, uint8_t *buffer)
{
   18aa0:	b590      	push	{r4, r7, lr}
   18aa2:	b085      	sub	sp, #20
   18aa4:	af00      	add	r7, sp, #0
   18aa6:	0002      	movs	r2, r0
   18aa8:	6039      	str	r1, [r7, #0]
   18aaa:	1dbb      	adds	r3, r7, #6
   18aac:	801a      	strh	r2, [r3, #0]
	if (length < 2)
   18aae:	1dbb      	adds	r3, r7, #6
   18ab0:	881b      	ldrh	r3, [r3, #0]
   18ab2:	2b01      	cmp	r3, #1
   18ab4:	d801      	bhi.n	18aba <atca_kit_convert_ascii_to_binary+0x1a>
		return 0;
   18ab6:	2300      	movs	r3, #0
   18ab8:	e048      	b.n	18b4c <atca_kit_convert_ascii_to_binary+0xac>

	uint16_t i, binIndex;

	for (i = 0, binIndex = 0; i < length; i += 2)
   18aba:	230e      	movs	r3, #14
   18abc:	18fb      	adds	r3, r7, r3
   18abe:	2200      	movs	r2, #0
   18ac0:	801a      	strh	r2, [r3, #0]
   18ac2:	230c      	movs	r3, #12
   18ac4:	18fb      	adds	r3, r7, r3
   18ac6:	2200      	movs	r2, #0
   18ac8:	801a      	strh	r2, [r3, #0]
   18aca:	e035      	b.n	18b38 <atca_kit_convert_ascii_to_binary+0x98>
	{
		buffer[binIndex] = atca_kit_convert_ascii_to_nibble(buffer[i]) << 4;
   18acc:	230c      	movs	r3, #12
   18ace:	18fb      	adds	r3, r7, r3
   18ad0:	881b      	ldrh	r3, [r3, #0]
   18ad2:	683a      	ldr	r2, [r7, #0]
   18ad4:	18d4      	adds	r4, r2, r3
   18ad6:	230e      	movs	r3, #14
   18ad8:	18fb      	adds	r3, r7, r3
   18ada:	881b      	ldrh	r3, [r3, #0]
   18adc:	683a      	ldr	r2, [r7, #0]
   18ade:	18d3      	adds	r3, r2, r3
   18ae0:	781b      	ldrb	r3, [r3, #0]
   18ae2:	0018      	movs	r0, r3
   18ae4:	4b1b      	ldr	r3, [pc, #108]	; (18b54 <atca_kit_convert_ascii_to_binary+0xb4>)
   18ae6:	4798      	blx	r3
   18ae8:	0003      	movs	r3, r0
   18aea:	011b      	lsls	r3, r3, #4
   18aec:	b2db      	uxtb	r3, r3
   18aee:	7023      	strb	r3, [r4, #0]
		buffer[binIndex++] |= atca_kit_convert_ascii_to_nibble(buffer[i + 1]);
   18af0:	230e      	movs	r3, #14
   18af2:	18fb      	adds	r3, r7, r3
   18af4:	881b      	ldrh	r3, [r3, #0]
   18af6:	3301      	adds	r3, #1
   18af8:	683a      	ldr	r2, [r7, #0]
   18afa:	18d3      	adds	r3, r2, r3
   18afc:	781b      	ldrb	r3, [r3, #0]
   18afe:	0018      	movs	r0, r3
   18b00:	4b14      	ldr	r3, [pc, #80]	; (18b54 <atca_kit_convert_ascii_to_binary+0xb4>)
   18b02:	4798      	blx	r3
   18b04:	0003      	movs	r3, r0
   18b06:	0019      	movs	r1, r3
   18b08:	230c      	movs	r3, #12
   18b0a:	18fb      	adds	r3, r7, r3
   18b0c:	881b      	ldrh	r3, [r3, #0]
   18b0e:	220c      	movs	r2, #12
   18b10:	18ba      	adds	r2, r7, r2
   18b12:	1c58      	adds	r0, r3, #1
   18b14:	8010      	strh	r0, [r2, #0]
   18b16:	0018      	movs	r0, r3
   18b18:	683a      	ldr	r2, [r7, #0]
   18b1a:	1812      	adds	r2, r2, r0
   18b1c:	0018      	movs	r0, r3
   18b1e:	683b      	ldr	r3, [r7, #0]
   18b20:	181b      	adds	r3, r3, r0
   18b22:	781b      	ldrb	r3, [r3, #0]
   18b24:	430b      	orrs	r3, r1
   18b26:	b2db      	uxtb	r3, r3
   18b28:	7013      	strb	r3, [r2, #0]
	for (i = 0, binIndex = 0; i < length; i += 2)
   18b2a:	230e      	movs	r3, #14
   18b2c:	18fb      	adds	r3, r7, r3
   18b2e:	220e      	movs	r2, #14
   18b30:	18ba      	adds	r2, r7, r2
   18b32:	8812      	ldrh	r2, [r2, #0]
   18b34:	3202      	adds	r2, #2
   18b36:	801a      	strh	r2, [r3, #0]
   18b38:	230e      	movs	r3, #14
   18b3a:	18fa      	adds	r2, r7, r3
   18b3c:	1dbb      	adds	r3, r7, #6
   18b3e:	8812      	ldrh	r2, [r2, #0]
   18b40:	881b      	ldrh	r3, [r3, #0]
   18b42:	429a      	cmp	r2, r3
   18b44:	d3c2      	bcc.n	18acc <atca_kit_convert_ascii_to_binary+0x2c>
	}

	return binIndex;
   18b46:	230c      	movs	r3, #12
   18b48:	18fb      	adds	r3, r7, r3
   18b4a:	881b      	ldrh	r3, [r3, #0]
}
   18b4c:	0018      	movs	r0, r3
   18b4e:	46bd      	mov	sp, r7
   18b50:	b005      	add	sp, #20
   18b52:	bd90      	pop	{r4, r7, pc}
   18b54:	00018a2f 	.word	0x00018a2f

00018b58 <atca_kit_get_device_info>:

device_info_t* atca_kit_get_device_info(uint8_t index) 
{
   18b58:	b580      	push	{r7, lr}
   18b5a:	b082      	sub	sp, #8
   18b5c:	af00      	add	r7, sp, #0
   18b5e:	0002      	movs	r2, r0
   18b60:	1dfb      	adds	r3, r7, #7
   18b62:	701a      	strb	r2, [r3, #0]
	if (index >= device_count)
   18b64:	4b08      	ldr	r3, [pc, #32]	; (18b88 <atca_kit_get_device_info+0x30>)
   18b66:	781b      	ldrb	r3, [r3, #0]
   18b68:	1dfa      	adds	r2, r7, #7
   18b6a:	7812      	ldrb	r2, [r2, #0]
   18b6c:	429a      	cmp	r2, r3
   18b6e:	d301      	bcc.n	18b74 <atca_kit_get_device_info+0x1c>
		return NULL;
   18b70:	2300      	movs	r3, #0
   18b72:	e004      	b.n	18b7e <atca_kit_get_device_info+0x26>
	return &device_info[index];
   18b74:	1dfb      	adds	r3, r7, #7
   18b76:	781b      	ldrb	r3, [r3, #0]
   18b78:	00da      	lsls	r2, r3, #3
   18b7a:	4b04      	ldr	r3, [pc, #16]	; (18b8c <atca_kit_get_device_info+0x34>)
   18b7c:	18d3      	adds	r3, r2, r3
}
   18b7e:	0018      	movs	r0, r3
   18b80:	46bd      	mov	sp, r7
   18b82:	b002      	add	sp, #8
   18b84:	bd80      	pop	{r7, pc}
   18b86:	46c0      	nop			; (mov r8, r8)
   18b88:	200014be 	.word	0x200014be
   18b8c:	20002bfc 	.word	0x20002bfc

00018b90 <atca_kit_detect_I2c_devices>:
		return DEVICE_TYPE_UNKNOWN;
	return device_info[index].device_type;
}

ATCA_STATUS atca_kit_detect_I2c_devices()
{
   18b90:	b590      	push	{r4, r7, lr}
   18b92:	b083      	sub	sp, #12
   18b94:	af00      	add	r7, sp, #0
	ATCA_STATUS status = ATCA_NO_DEVICES;
   18b96:	1dfb      	adds	r3, r7, #7
   18b98:	22f9      	movs	r2, #249	; 0xf9
   18b9a:	701a      	strb	r2, [r3, #0]
	uint8_t revision[4];

	status = atcab_init( &cfg_ateccx08a_i2c_default );
   18b9c:	1dfc      	adds	r4, r7, #7
   18b9e:	4b27      	ldr	r3, [pc, #156]	; (18c3c <atca_kit_detect_I2c_devices+0xac>)
   18ba0:	0018      	movs	r0, r3
   18ba2:	4b27      	ldr	r3, [pc, #156]	; (18c40 <atca_kit_detect_I2c_devices+0xb0>)
   18ba4:	4798      	blx	r3
   18ba6:	0003      	movs	r3, r0
   18ba8:	7023      	strb	r3, [r4, #0]
	if (status != ATCA_SUCCESS) return status;
   18baa:	1dfb      	adds	r3, r7, #7
   18bac:	781b      	ldrb	r3, [r3, #0]
   18bae:	2b00      	cmp	r3, #0
   18bb0:	d002      	beq.n	18bb8 <atca_kit_detect_I2c_devices+0x28>
   18bb2:	1dfb      	adds	r3, r7, #7
   18bb4:	781b      	ldrb	r3, [r3, #0]
   18bb6:	e03c      	b.n	18c32 <atca_kit_detect_I2c_devices+0xa2>

	// Test the init
	status = atcab_info(revision);
   18bb8:	1dfc      	adds	r4, r7, #7
   18bba:	003b      	movs	r3, r7
   18bbc:	0018      	movs	r0, r3
   18bbe:	4b21      	ldr	r3, [pc, #132]	; (18c44 <atca_kit_detect_I2c_devices+0xb4>)
   18bc0:	4798      	blx	r3
   18bc2:	0003      	movs	r3, r0
   18bc4:	7023      	strb	r3, [r4, #0]
	if (status != ATCA_SUCCESS) {
   18bc6:	1dfb      	adds	r3, r7, #7
   18bc8:	781b      	ldrb	r3, [r3, #0]
   18bca:	2b00      	cmp	r3, #0
   18bcc:	d002      	beq.n	18bd4 <atca_kit_detect_I2c_devices+0x44>
		return status;
   18bce:	1dfb      	adds	r3, r7, #7
   18bd0:	781b      	ldrb	r3, [r3, #0]
   18bd2:	e02e      	b.n	18c32 <atca_kit_detect_I2c_devices+0xa2>
	}

	device_info[device_count].address = cfg_ateccx08a_i2c_default.atcai2c.slave_address;
   18bd4:	4b1c      	ldr	r3, [pc, #112]	; (18c48 <atca_kit_detect_I2c_devices+0xb8>)
   18bd6:	781b      	ldrb	r3, [r3, #0]
   18bd8:	0018      	movs	r0, r3
   18bda:	4b18      	ldr	r3, [pc, #96]	; (18c3c <atca_kit_detect_I2c_devices+0xac>)
   18bdc:	7919      	ldrb	r1, [r3, #4]
   18bde:	4a1b      	ldr	r2, [pc, #108]	; (18c4c <atca_kit_detect_I2c_devices+0xbc>)
   18be0:	00c3      	lsls	r3, r0, #3
   18be2:	18d3      	adds	r3, r2, r3
   18be4:	3302      	adds	r3, #2
   18be6:	1c0a      	adds	r2, r1, #0
   18be8:	701a      	strb	r2, [r3, #0]
	device_info[device_count].bus_type = DEVKIT_IF_I2C;
   18bea:	4b17      	ldr	r3, [pc, #92]	; (18c48 <atca_kit_detect_I2c_devices+0xb8>)
   18bec:	781b      	ldrb	r3, [r3, #0]
   18bee:	001a      	movs	r2, r3
   18bf0:	4b16      	ldr	r3, [pc, #88]	; (18c4c <atca_kit_detect_I2c_devices+0xbc>)
   18bf2:	00d2      	lsls	r2, r2, #3
   18bf4:	2102      	movs	r1, #2
   18bf6:	54d1      	strb	r1, [r2, r3]
	device_info[device_count].device_type = DEVICE_TYPE_ECC508A;
   18bf8:	4b13      	ldr	r3, [pc, #76]	; (18c48 <atca_kit_detect_I2c_devices+0xb8>)
   18bfa:	781b      	ldrb	r3, [r3, #0]
   18bfc:	4a13      	ldr	r2, [pc, #76]	; (18c4c <atca_kit_detect_I2c_devices+0xbc>)
   18bfe:	00db      	lsls	r3, r3, #3
   18c00:	18d3      	adds	r3, r2, r3
   18c02:	3301      	adds	r3, #1
   18c04:	220b      	movs	r2, #11
   18c06:	701a      	strb	r2, [r3, #0]
	memcpy(device_info[device_count].dev_rev, revision, sizeof(revision));
   18c08:	4b0f      	ldr	r3, [pc, #60]	; (18c48 <atca_kit_detect_I2c_devices+0xb8>)
   18c0a:	781b      	ldrb	r3, [r3, #0]
   18c0c:	00da      	lsls	r2, r3, #3
   18c0e:	4b0f      	ldr	r3, [pc, #60]	; (18c4c <atca_kit_detect_I2c_devices+0xbc>)
   18c10:	18d3      	adds	r3, r2, r3
   18c12:	1d1a      	adds	r2, r3, #4
   18c14:	003b      	movs	r3, r7
   18c16:	0010      	movs	r0, r2
   18c18:	0019      	movs	r1, r3
   18c1a:	2304      	movs	r3, #4
   18c1c:	001a      	movs	r2, r3
   18c1e:	4b0c      	ldr	r3, [pc, #48]	; (18c50 <atca_kit_detect_I2c_devices+0xc0>)
   18c20:	4798      	blx	r3

	device_count++;
   18c22:	4b09      	ldr	r3, [pc, #36]	; (18c48 <atca_kit_detect_I2c_devices+0xb8>)
   18c24:	781b      	ldrb	r3, [r3, #0]
   18c26:	3301      	adds	r3, #1
   18c28:	b2da      	uxtb	r2, r3
   18c2a:	4b07      	ldr	r3, [pc, #28]	; (18c48 <atca_kit_detect_I2c_devices+0xb8>)
   18c2c:	701a      	strb	r2, [r3, #0]
	
	return status;
   18c2e:	1dfb      	adds	r3, r7, #7
   18c30:	781b      	ldrb	r3, [r3, #0]
}
   18c32:	0018      	movs	r0, r3
   18c34:	46bd      	mov	sp, r7
   18c36:	b003      	add	sp, #12
   18c38:	bd90      	pop	{r4, r7, pc}
   18c3a:	46c0      	nop			; (mov r8, r8)
   18c3c:	20000120 	.word	0x20000120
   18c40:	0000fe99 	.word	0x0000fe99
   18c44:	00011339 	.word	0x00011339
   18c48:	200014be 	.word	0x200014be
   18c4c:	20002bfc 	.word	0x20002bfc
   18c50:	0001c1e5 	.word	0x0001c1e5

00018c54 <atca_kit_discover_devices>:
 *         SWI, I2C, and SPI. They in turn enter found
 *         devices into the #device_info array.
 * \return interface found
 */
interface_id_t atca_kit_discover_devices()
{
   18c54:	b590      	push	{r4, r7, lr}
   18c56:	b083      	sub	sp, #12
   18c58:	af00      	add	r7, sp, #0
	ATCA_STATUS status = ATCA_NO_DEVICES;
   18c5a:	1dfb      	adds	r3, r7, #7
   18c5c:	22f9      	movs	r2, #249	; 0xf9
   18c5e:	701a      	strb	r2, [r3, #0]
	interface_id_t bus_type;

	device_count = 0;
   18c60:	4b10      	ldr	r3, [pc, #64]	; (18ca4 <atca_kit_discover_devices+0x50>)
   18c62:	2200      	movs	r2, #0
   18c64:	701a      	strb	r2, [r3, #0]
	memset(device_info, 0, sizeof(device_info));
   18c66:	4b10      	ldr	r3, [pc, #64]	; (18ca8 <atca_kit_discover_devices+0x54>)
   18c68:	2208      	movs	r2, #8
   18c6a:	2100      	movs	r1, #0
   18c6c:	0018      	movs	r0, r3
   18c6e:	4b0f      	ldr	r3, [pc, #60]	; (18cac <atca_kit_discover_devices+0x58>)
   18c70:	4798      	blx	r3

	status = atca_kit_detect_I2c_devices();
   18c72:	1dfc      	adds	r4, r7, #7
   18c74:	4b0e      	ldr	r3, [pc, #56]	; (18cb0 <atca_kit_discover_devices+0x5c>)
   18c76:	4798      	blx	r3
   18c78:	0003      	movs	r3, r0
   18c7a:	7023      	strb	r3, [r4, #0]

	if (device_count == 0 || status != ATCA_SUCCESS)
   18c7c:	4b09      	ldr	r3, [pc, #36]	; (18ca4 <atca_kit_discover_devices+0x50>)
   18c7e:	781b      	ldrb	r3, [r3, #0]
   18c80:	2b00      	cmp	r3, #0
   18c82:	d003      	beq.n	18c8c <atca_kit_discover_devices+0x38>
   18c84:	1dfb      	adds	r3, r7, #7
   18c86:	781b      	ldrb	r3, [r3, #0]
   18c88:	2b00      	cmp	r3, #0
   18c8a:	d001      	beq.n	18c90 <atca_kit_discover_devices+0x3c>
		return DEVKIT_IF_UNKNOWN;
   18c8c:	2300      	movs	r3, #0
   18c8e:	e005      	b.n	18c9c <atca_kit_discover_devices+0x48>

	bus_type = device_info[0].bus_type;
   18c90:	1dbb      	adds	r3, r7, #6
   18c92:	4a05      	ldr	r2, [pc, #20]	; (18ca8 <atca_kit_discover_devices+0x54>)
   18c94:	7812      	ldrb	r2, [r2, #0]
   18c96:	701a      	strb	r2, [r3, #0]

	return bus_type;
   18c98:	1dbb      	adds	r3, r7, #6
   18c9a:	781b      	ldrb	r3, [r3, #0]
}
   18c9c:	0018      	movs	r0, r3
   18c9e:	46bd      	mov	sp, r7
   18ca0:	b003      	add	sp, #12
   18ca2:	bd90      	pop	{r4, r7, pc}
   18ca4:	200014be 	.word	0x200014be
   18ca8:	20002bfc 	.word	0x20002bfc
   18cac:	0001c21b 	.word	0x0001c21b
   18cb0:	00018b91 	.word	0x00018b91

00018cb4 <atca_kit_parse_board_commands>:
 * \param[out] responseIsAscii pointer to response type
 * \return the status of the operation
 */
uint8_t atca_kit_parse_board_commands(uint16_t commandLength, uint8_t *command, 
										uint16_t *responseLength, uint8_t *response, uint8_t *responseIsAscii)
{
   18cb4:	b590      	push	{r4, r7, lr}
   18cb6:	b091      	sub	sp, #68	; 0x44
   18cb8:	af00      	add	r7, sp, #0
   18cba:	60b9      	str	r1, [r7, #8]
   18cbc:	607a      	str	r2, [r7, #4]
   18cbe:	603b      	str	r3, [r7, #0]
   18cc0:	230e      	movs	r3, #14
   18cc2:	18fb      	adds	r3, r7, r3
   18cc4:	1c02      	adds	r2, r0, #0
   18cc6:	801a      	strh	r2, [r3, #0]
	uint8_t status = KIT_STATUS_UNKNOWN_COMMAND;
   18cc8:	233f      	movs	r3, #63	; 0x3f
   18cca:	18fb      	adds	r3, r7, r3
   18ccc:	22c0      	movs	r2, #192	; 0xc0
   18cce:	701a      	strb	r2, [r3, #0]
	uint16_t responseIndex = 0;
   18cd0:	233c      	movs	r3, #60	; 0x3c
   18cd2:	18fb      	adds	r3, r7, r3
   18cd4:	2200      	movs	r2, #0
   18cd6:	801a      	strh	r2, [r3, #0]
	uint16_t deviceIndex;
	uint16_t dataLength = 1;
   18cd8:	232a      	movs	r3, #42	; 0x2a
   18cda:	18fb      	adds	r3, r7, r3
   18cdc:	2201      	movs	r2, #1
   18cde:	801a      	strh	r2, [r3, #0]
	uint8_t *rxData[1];
	interface_id_t device_interface = DEVKIT_IF_UNKNOWN;
   18ce0:	233b      	movs	r3, #59	; 0x3b
   18ce2:	18fb      	adds	r3, r7, r3
   18ce4:	2200      	movs	r2, #0
   18ce6:	701a      	strb	r2, [r3, #0]
	device_info_t* dev_info;
	const char *StringInterface[] = {"no_device ", "SPI ", "TWI ", "SWI "};
   18ce8:	2314      	movs	r3, #20
   18cea:	18fb      	adds	r3, r7, r3
   18cec:	4acb      	ldr	r2, [pc, #812]	; (1901c <atca_kit_parse_board_commands+0x368>)
   18cee:	ca13      	ldmia	r2!, {r0, r1, r4}
   18cf0:	c313      	stmia	r3!, {r0, r1, r4}
   18cf2:	6812      	ldr	r2, [r2, #0]
   18cf4:	601a      	str	r2, [r3, #0]
	const char *pToken = strchr((char *) command, ':');
   18cf6:	68bb      	ldr	r3, [r7, #8]
   18cf8:	213a      	movs	r1, #58	; 0x3a
   18cfa:	0018      	movs	r0, r3
   18cfc:	4bc8      	ldr	r3, [pc, #800]	; (19020 <atca_kit_parse_board_commands+0x36c>)
   18cfe:	4798      	blx	r3
   18d00:	0003      	movs	r3, r0
   18d02:	637b      	str	r3, [r7, #52]	; 0x34

	if (!pToken)
   18d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18d06:	2b00      	cmp	r3, #0
   18d08:	d103      	bne.n	18d12 <atca_kit_parse_board_commands+0x5e>
		return status;
   18d0a:	233f      	movs	r3, #63	; 0x3f
   18d0c:	18fb      	adds	r3, r7, r3
   18d0e:	781b      	ldrb	r3, [r3, #0]
   18d10:	e17f      	b.n	19012 <atca_kit_parse_board_commands+0x35e>

	*responseIsAscii = 1;
   18d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18d14:	2201      	movs	r2, #1
   18d16:	701a      	strb	r2, [r3, #0]

	switch(pToken[1]) {
   18d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18d1a:	3301      	adds	r3, #1
   18d1c:	781b      	ldrb	r3, [r3, #0]
   18d1e:	2b66      	cmp	r3, #102	; 0x66
   18d20:	d006      	beq.n	18d30 <atca_kit_parse_board_commands+0x7c>
   18d22:	2b76      	cmp	r3, #118	; 0x76
   18d24:	d100      	bne.n	18d28 <atca_kit_parse_board_commands+0x74>
   18d26:	e14f      	b.n	18fc8 <atca_kit_parse_board_commands+0x314>
   18d28:	2b64      	cmp	r3, #100	; 0x64
   18d2a:	d100      	bne.n	18d2e <atca_kit_parse_board_commands+0x7a>
   18d2c:	e0a5      	b.n	18e7a <atca_kit_parse_board_commands+0x1c6>
   18d2e:	e146      	b.n	18fbe <atca_kit_parse_board_commands+0x30a>
			// response (no device): <kit version>, "no_devices"<status>()
			// response (device found): <kit version>, <device type>, <interface><status>(<address>)			
			break;
		
		case 'f':
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
   18d30:	233f      	movs	r3, #63	; 0x3f
   18d32:	18fc      	adds	r4, r7, r3
   18d34:	2324      	movs	r3, #36	; 0x24
   18d36:	18fa      	adds	r2, r7, r3
   18d38:	232a      	movs	r3, #42	; 0x2a
   18d3a:	18f9      	adds	r1, r7, r3
   18d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18d3e:	0018      	movs	r0, r3
   18d40:	4bb8      	ldr	r3, [pc, #736]	; (19024 <atca_kit_parse_board_commands+0x370>)
   18d42:	4798      	blx	r3
   18d44:	0003      	movs	r3, r0
   18d46:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   18d48:	233f      	movs	r3, #63	; 0x3f
   18d4a:	18fb      	adds	r3, r7, r3
   18d4c:	781b      	ldrb	r3, [r3, #0]
   18d4e:	2b00      	cmp	r3, #0
   18d50:	d000      	beq.n	18d54 <atca_kit_parse_board_commands+0xa0>
   18d52:	e13b      	b.n	18fcc <atca_kit_parse_board_commands+0x318>
				break;

			dataLength = 4; // size of versions + status byte
   18d54:	232a      	movs	r3, #42	; 0x2a
   18d56:	18fb      	adds	r3, r7, r3
   18d58:	2204      	movs	r2, #4
   18d5a:	801a      	strh	r2, [r3, #0]

			switch (*rxData[0]) {
   18d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18d5e:	781b      	ldrb	r3, [r3, #0]
   18d60:	2b01      	cmp	r3, #1
   18d62:	d027      	beq.n	18db4 <atca_kit_parse_board_commands+0x100>
   18d64:	dc02      	bgt.n	18d6c <atca_kit_parse_board_commands+0xb8>
   18d66:	2b00      	cmp	r3, #0
   18d68:	d005      	beq.n	18d76 <atca_kit_parse_board_commands+0xc2>
   18d6a:	e080      	b.n	18e6e <atca_kit_parse_board_commands+0x1ba>
   18d6c:	2b02      	cmp	r3, #2
   18d6e:	d040      	beq.n	18df2 <atca_kit_parse_board_commands+0x13e>
   18d70:	2b03      	cmp	r3, #3
   18d72:	d05d      	beq.n	18e30 <atca_kit_parse_board_commands+0x17c>
   18d74:	e07b      	b.n	18e6e <atca_kit_parse_board_commands+0x1ba>
				case 0: // kit version
					strcpy((char *) response, StringKit);
   18d76:	683a      	ldr	r2, [r7, #0]
   18d78:	4bab      	ldr	r3, [pc, #684]	; (19028 <atca_kit_parse_board_commands+0x374>)
   18d7a:	0010      	movs	r0, r2
   18d7c:	0019      	movs	r1, r3
   18d7e:	230b      	movs	r3, #11
   18d80:	001a      	movs	r2, r3
   18d82:	4baa      	ldr	r3, [pc, #680]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18d84:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18d86:	683b      	ldr	r3, [r7, #0]
   18d88:	0018      	movs	r0, r3
   18d8a:	4ba9      	ldr	r3, [pc, #676]	; (19030 <atca_kit_parse_board_commands+0x37c>)
   18d8c:	4798      	blx	r3
   18d8e:	0002      	movs	r2, r0
   18d90:	233c      	movs	r3, #60	; 0x3c
   18d92:	18fb      	adds	r3, r7, r3
   18d94:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionKit, dataLength);
   18d96:	233c      	movs	r3, #60	; 0x3c
   18d98:	18fb      	adds	r3, r7, r3
   18d9a:	881b      	ldrh	r3, [r3, #0]
   18d9c:	3301      	adds	r3, #1
   18d9e:	683a      	ldr	r2, [r7, #0]
   18da0:	18d0      	adds	r0, r2, r3
   18da2:	232a      	movs	r3, #42	; 0x2a
   18da4:	18fb      	adds	r3, r7, r3
   18da6:	881b      	ldrh	r3, [r3, #0]
   18da8:	001a      	movs	r2, r3
   18daa:	4ba2      	ldr	r3, [pc, #648]	; (19034 <atca_kit_parse_board_commands+0x380>)
   18dac:	0019      	movs	r1, r3
   18dae:	4b9f      	ldr	r3, [pc, #636]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18db0:	4798      	blx	r3
					break;
   18db2:	e061      	b.n	18e78 <atca_kit_parse_board_commands+0x1c4>

				case 1: // SHA204 library version
					strcpy((char *) response, StringSha204);
   18db4:	683a      	ldr	r2, [r7, #0]
   18db6:	4ba0      	ldr	r3, [pc, #640]	; (19038 <atca_kit_parse_board_commands+0x384>)
   18db8:	0010      	movs	r0, r2
   18dba:	0019      	movs	r1, r3
   18dbc:	2308      	movs	r3, #8
   18dbe:	001a      	movs	r2, r3
   18dc0:	4b9a      	ldr	r3, [pc, #616]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18dc2:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18dc4:	683b      	ldr	r3, [r7, #0]
   18dc6:	0018      	movs	r0, r3
   18dc8:	4b99      	ldr	r3, [pc, #612]	; (19030 <atca_kit_parse_board_commands+0x37c>)
   18dca:	4798      	blx	r3
   18dcc:	0002      	movs	r2, r0
   18dce:	233c      	movs	r3, #60	; 0x3c
   18dd0:	18fb      	adds	r3, r7, r3
   18dd2:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionSha204, dataLength);
   18dd4:	233c      	movs	r3, #60	; 0x3c
   18dd6:	18fb      	adds	r3, r7, r3
   18dd8:	881b      	ldrh	r3, [r3, #0]
   18dda:	3301      	adds	r3, #1
   18ddc:	683a      	ldr	r2, [r7, #0]
   18dde:	18d0      	adds	r0, r2, r3
   18de0:	232a      	movs	r3, #42	; 0x2a
   18de2:	18fb      	adds	r3, r7, r3
   18de4:	881b      	ldrh	r3, [r3, #0]
   18de6:	001a      	movs	r2, r3
   18de8:	4b94      	ldr	r3, [pc, #592]	; (1903c <atca_kit_parse_board_commands+0x388>)
   18dea:	0019      	movs	r1, r3
   18dec:	4b8f      	ldr	r3, [pc, #572]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18dee:	4798      	blx	r3
					break;
   18df0:	e042      	b.n	18e78 <atca_kit_parse_board_commands+0x1c4>

				case 2: // AES132 library version
					strcpy((char *) response, StringAes132);
   18df2:	683a      	ldr	r2, [r7, #0]
   18df4:	4b92      	ldr	r3, [pc, #584]	; (19040 <atca_kit_parse_board_commands+0x38c>)
   18df6:	0010      	movs	r0, r2
   18df8:	0019      	movs	r1, r3
   18dfa:	2308      	movs	r3, #8
   18dfc:	001a      	movs	r2, r3
   18dfe:	4b8b      	ldr	r3, [pc, #556]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18e00:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18e02:	683b      	ldr	r3, [r7, #0]
   18e04:	0018      	movs	r0, r3
   18e06:	4b8a      	ldr	r3, [pc, #552]	; (19030 <atca_kit_parse_board_commands+0x37c>)
   18e08:	4798      	blx	r3
   18e0a:	0002      	movs	r2, r0
   18e0c:	233c      	movs	r3, #60	; 0x3c
   18e0e:	18fb      	adds	r3, r7, r3
   18e10:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionAes132, dataLength);
   18e12:	233c      	movs	r3, #60	; 0x3c
   18e14:	18fb      	adds	r3, r7, r3
   18e16:	881b      	ldrh	r3, [r3, #0]
   18e18:	3301      	adds	r3, #1
   18e1a:	683a      	ldr	r2, [r7, #0]
   18e1c:	18d0      	adds	r0, r2, r3
   18e1e:	232a      	movs	r3, #42	; 0x2a
   18e20:	18fb      	adds	r3, r7, r3
   18e22:	881b      	ldrh	r3, [r3, #0]
   18e24:	001a      	movs	r2, r3
   18e26:	4b87      	ldr	r3, [pc, #540]	; (19044 <atca_kit_parse_board_commands+0x390>)
   18e28:	0019      	movs	r1, r3
   18e2a:	4b80      	ldr	r3, [pc, #512]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18e2c:	4798      	blx	r3
					break;
   18e2e:	e023      	b.n	18e78 <atca_kit_parse_board_commands+0x1c4>

				case 3: // ECC508 library version
					strcpy((char *) response, StringEcc508);
   18e30:	683a      	ldr	r2, [r7, #0]
   18e32:	4b85      	ldr	r3, [pc, #532]	; (19048 <atca_kit_parse_board_commands+0x394>)
   18e34:	0010      	movs	r0, r2
   18e36:	0019      	movs	r1, r3
   18e38:	2308      	movs	r3, #8
   18e3a:	001a      	movs	r2, r3
   18e3c:	4b7b      	ldr	r3, [pc, #492]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18e3e:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18e40:	683b      	ldr	r3, [r7, #0]
   18e42:	0018      	movs	r0, r3
   18e44:	4b7a      	ldr	r3, [pc, #488]	; (19030 <atca_kit_parse_board_commands+0x37c>)
   18e46:	4798      	blx	r3
   18e48:	0002      	movs	r2, r0
   18e4a:	233c      	movs	r3, #60	; 0x3c
   18e4c:	18fb      	adds	r3, r7, r3
   18e4e:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionEcc508, dataLength);
   18e50:	233c      	movs	r3, #60	; 0x3c
   18e52:	18fb      	adds	r3, r7, r3
   18e54:	881b      	ldrh	r3, [r3, #0]
   18e56:	3301      	adds	r3, #1
   18e58:	683a      	ldr	r2, [r7, #0]
   18e5a:	18d0      	adds	r0, r2, r3
   18e5c:	232a      	movs	r3, #42	; 0x2a
   18e5e:	18fb      	adds	r3, r7, r3
   18e60:	881b      	ldrh	r3, [r3, #0]
   18e62:	001a      	movs	r2, r3
   18e64:	4b79      	ldr	r3, [pc, #484]	; (1904c <atca_kit_parse_board_commands+0x398>)
   18e66:	0019      	movs	r1, r3
   18e68:	4b70      	ldr	r3, [pc, #448]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18e6a:	4798      	blx	r3
					break;
   18e6c:	e004      	b.n	18e78 <atca_kit_parse_board_commands+0x1c4>

				default:
					status = KIT_STATUS_INVALID_PARAMS;
   18e6e:	233f      	movs	r3, #63	; 0x3f
   18e70:	18fb      	adds	r3, r7, r3
   18e72:	22c3      	movs	r2, #195	; 0xc3
   18e74:	701a      	strb	r2, [r3, #0]
					break;
   18e76:	46c0      	nop			; (mov r8, r8)
			}
			break;
   18e78:	e0ab      	b.n	18fd2 <atca_kit_parse_board_commands+0x31e>

		case 'd':
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
   18e7a:	233f      	movs	r3, #63	; 0x3f
   18e7c:	18fc      	adds	r4, r7, r3
   18e7e:	2324      	movs	r3, #36	; 0x24
   18e80:	18fa      	adds	r2, r7, r3
   18e82:	232a      	movs	r3, #42	; 0x2a
   18e84:	18f9      	adds	r1, r7, r3
   18e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18e88:	0018      	movs	r0, r3
   18e8a:	4b66      	ldr	r3, [pc, #408]	; (19024 <atca_kit_parse_board_commands+0x370>)
   18e8c:	4798      	blx	r3
   18e8e:	0003      	movs	r3, r0
   18e90:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   18e92:	233f      	movs	r3, #63	; 0x3f
   18e94:	18fb      	adds	r3, r7, r3
   18e96:	781b      	ldrb	r3, [r3, #0]
   18e98:	2b00      	cmp	r3, #0
   18e9a:	d000      	beq.n	18e9e <atca_kit_parse_board_commands+0x1ea>
   18e9c:	e098      	b.n	18fd0 <atca_kit_parse_board_commands+0x31c>
				break;

			device_interface = atca_kit_discover_devices();
   18e9e:	233b      	movs	r3, #59	; 0x3b
   18ea0:	18fc      	adds	r4, r7, r3
   18ea2:	4b6b      	ldr	r3, [pc, #428]	; (19050 <atca_kit_parse_board_commands+0x39c>)
   18ea4:	4798      	blx	r3
   18ea6:	0003      	movs	r3, r0
   18ea8:	7023      	strb	r3, [r4, #0]
			deviceIndex = *rxData[0];
   18eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18eac:	781a      	ldrb	r2, [r3, #0]
   18eae:	2332      	movs	r3, #50	; 0x32
   18eb0:	18fb      	adds	r3, r7, r3
   18eb2:	801a      	strh	r2, [r3, #0]
			dev_info = atca_kit_get_device_info(deviceIndex);
   18eb4:	2332      	movs	r3, #50	; 0x32
   18eb6:	18fb      	adds	r3, r7, r3
   18eb8:	881b      	ldrh	r3, [r3, #0]
   18eba:	b2db      	uxtb	r3, r3
   18ebc:	0018      	movs	r0, r3
   18ebe:	4b65      	ldr	r3, [pc, #404]	; (19054 <atca_kit_parse_board_commands+0x3a0>)
   18ec0:	4798      	blx	r3
   18ec2:	0003      	movs	r3, r0
   18ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (!dev_info) {
   18ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18ec8:	2b00      	cmp	r3, #0
   18eca:	d104      	bne.n	18ed6 <atca_kit_parse_board_commands+0x222>
				status = KIT_STATUS_NO_DEVICE;
   18ecc:	233f      	movs	r3, #63	; 0x3f
   18ece:	18fb      	adds	r3, r7, r3
   18ed0:	22c5      	movs	r2, #197	; 0xc5
   18ed2:	701a      	strb	r2, [r3, #0]
				break;
   18ed4:	e07d      	b.n	18fd2 <atca_kit_parse_board_commands+0x31e>
			}

			switch (dev_info->device_type) {
   18ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18ed8:	785b      	ldrb	r3, [r3, #1]
   18eda:	2b0c      	cmp	r3, #12
   18edc:	d82c      	bhi.n	18f38 <atca_kit_parse_board_commands+0x284>
   18ede:	009a      	lsls	r2, r3, #2
   18ee0:	4b5d      	ldr	r3, [pc, #372]	; (19058 <atca_kit_parse_board_commands+0x3a4>)
   18ee2:	18d3      	adds	r3, r2, r3
   18ee4:	681b      	ldr	r3, [r3, #0]
   18ee6:	469f      	mov	pc, r3
				case DEVICE_TYPE_SHA204:
					strcpy((char *) response, StringSha204);
   18ee8:	683a      	ldr	r2, [r7, #0]
   18eea:	4b53      	ldr	r3, [pc, #332]	; (19038 <atca_kit_parse_board_commands+0x384>)
   18eec:	0010      	movs	r0, r2
   18eee:	0019      	movs	r1, r3
   18ef0:	2308      	movs	r3, #8
   18ef2:	001a      	movs	r2, r3
   18ef4:	4b4d      	ldr	r3, [pc, #308]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18ef6:	4798      	blx	r3
					break;
   18ef8:	e027      	b.n	18f4a <atca_kit_parse_board_commands+0x296>

				case DEVICE_TYPE_AES132:
					strcpy((char *) response, StringAes132);
   18efa:	683a      	ldr	r2, [r7, #0]
   18efc:	4b50      	ldr	r3, [pc, #320]	; (19040 <atca_kit_parse_board_commands+0x38c>)
   18efe:	0010      	movs	r0, r2
   18f00:	0019      	movs	r1, r3
   18f02:	2308      	movs	r3, #8
   18f04:	001a      	movs	r2, r3
   18f06:	4b49      	ldr	r3, [pc, #292]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18f08:	4798      	blx	r3
					break;
   18f0a:	e01e      	b.n	18f4a <atca_kit_parse_board_commands+0x296>

				case DEVICE_TYPE_ECC108:
                case DEVICE_TYPE_ECC508A:
                case DEVICE_TYPE_ECC608A:
					strcpy((char *) response, StringEcc508);
   18f0c:	683a      	ldr	r2, [r7, #0]
   18f0e:	4b4e      	ldr	r3, [pc, #312]	; (19048 <atca_kit_parse_board_commands+0x394>)
   18f10:	0010      	movs	r0, r2
   18f12:	0019      	movs	r1, r3
   18f14:	2308      	movs	r3, #8
   18f16:	001a      	movs	r2, r3
   18f18:	4b44      	ldr	r3, [pc, #272]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18f1a:	4798      	blx	r3
					break;
   18f1c:	e015      	b.n	18f4a <atca_kit_parse_board_commands+0x296>

				case DEVICE_TYPE_UNKNOWN:
					strcpy((char *) response, StringInterface[0]);
   18f1e:	2314      	movs	r3, #20
   18f20:	18fb      	adds	r3, r7, r3
   18f22:	681a      	ldr	r2, [r3, #0]
   18f24:	683b      	ldr	r3, [r7, #0]
   18f26:	0011      	movs	r1, r2
   18f28:	0018      	movs	r0, r3
   18f2a:	4b4c      	ldr	r3, [pc, #304]	; (1905c <atca_kit_parse_board_commands+0x3a8>)
   18f2c:	4798      	blx	r3
					status = KIT_STATUS_NO_DEVICE;
   18f2e:	233f      	movs	r3, #63	; 0x3f
   18f30:	18fb      	adds	r3, r7, r3
   18f32:	22c5      	movs	r2, #197	; 0xc5
   18f34:	701a      	strb	r2, [r3, #0]
					break;
   18f36:	e008      	b.n	18f4a <atca_kit_parse_board_commands+0x296>

				default:
					strcpy((char *) response, "unknown_device");
   18f38:	683a      	ldr	r2, [r7, #0]
   18f3a:	4b49      	ldr	r3, [pc, #292]	; (19060 <atca_kit_parse_board_commands+0x3ac>)
   18f3c:	0010      	movs	r0, r2
   18f3e:	0019      	movs	r1, r3
   18f40:	230f      	movs	r3, #15
   18f42:	001a      	movs	r2, r3
   18f44:	4b39      	ldr	r3, [pc, #228]	; (1902c <atca_kit_parse_board_commands+0x378>)
   18f46:	4798      	blx	r3
					break;
   18f48:	46c0      	nop			; (mov r8, r8)
			}


			if (dev_info->bus_type == DEVKIT_IF_UNKNOWN) {
   18f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18f4c:	781b      	ldrb	r3, [r3, #0]
   18f4e:	2b00      	cmp	r3, #0
   18f50:	d108      	bne.n	18f64 <atca_kit_parse_board_commands+0x2b0>
				responseIndex = strlen((char *) response);
   18f52:	683b      	ldr	r3, [r7, #0]
   18f54:	0018      	movs	r0, r3
   18f56:	4b36      	ldr	r3, [pc, #216]	; (19030 <atca_kit_parse_board_commands+0x37c>)
   18f58:	4798      	blx	r3
   18f5a:	0002      	movs	r2, r0
   18f5c:	233c      	movs	r3, #60	; 0x3c
   18f5e:	18fb      	adds	r3, r7, r3
   18f60:	801a      	strh	r2, [r3, #0]
				break;
   18f62:	e036      	b.n	18fd2 <atca_kit_parse_board_commands+0x31e>
			}
			
			// Append interface type to response.
			strcat((char *) response, StringInterface[device_interface]);
   18f64:	233b      	movs	r3, #59	; 0x3b
   18f66:	18fb      	adds	r3, r7, r3
   18f68:	781a      	ldrb	r2, [r3, #0]
   18f6a:	2314      	movs	r3, #20
   18f6c:	18fb      	adds	r3, r7, r3
   18f6e:	0092      	lsls	r2, r2, #2
   18f70:	58d2      	ldr	r2, [r2, r3]
   18f72:	683b      	ldr	r3, [r7, #0]
   18f74:	0011      	movs	r1, r2
   18f76:	0018      	movs	r0, r3
   18f78:	4b3a      	ldr	r3, [pc, #232]	; (19064 <atca_kit_parse_board_commands+0x3b0>)
   18f7a:	4798      	blx	r3
			responseIndex = strlen((char *) response);
   18f7c:	683b      	ldr	r3, [r7, #0]
   18f7e:	0018      	movs	r0, r3
   18f80:	4b2b      	ldr	r3, [pc, #172]	; (19030 <atca_kit_parse_board_commands+0x37c>)
   18f82:	4798      	blx	r3
   18f84:	0002      	movs	r2, r0
   18f86:	233c      	movs	r3, #60	; 0x3c
   18f88:	18fb      	adds	r3, r7, r3
   18f8a:	801a      	strh	r2, [r3, #0]

			// Append the address (TWI) / index (SWI) of the device.
			// Skip one byte for status.
			dataLength++;
   18f8c:	232a      	movs	r3, #42	; 0x2a
   18f8e:	18fb      	adds	r3, r7, r3
   18f90:	881b      	ldrh	r3, [r3, #0]
   18f92:	3301      	adds	r3, #1
   18f94:	b29a      	uxth	r2, r3
   18f96:	232a      	movs	r3, #42	; 0x2a
   18f98:	18fb      	adds	r3, r7, r3
   18f9a:	801a      	strh	r2, [r3, #0]
			response[responseIndex + 1] = dev_info->bus_type == DEVKIT_IF_I2C ? dev_info->address : dev_info->device_index;
   18f9c:	233c      	movs	r3, #60	; 0x3c
   18f9e:	18fb      	adds	r3, r7, r3
   18fa0:	881b      	ldrh	r3, [r3, #0]
   18fa2:	3301      	adds	r3, #1
   18fa4:	683a      	ldr	r2, [r7, #0]
   18fa6:	18d2      	adds	r2, r2, r3
   18fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18faa:	781b      	ldrb	r3, [r3, #0]
   18fac:	2b02      	cmp	r3, #2
   18fae:	d102      	bne.n	18fb6 <atca_kit_parse_board_commands+0x302>
   18fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18fb2:	789b      	ldrb	r3, [r3, #2]
   18fb4:	e001      	b.n	18fba <atca_kit_parse_board_commands+0x306>
   18fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18fb8:	78db      	ldrb	r3, [r3, #3]
   18fba:	7013      	strb	r3, [r2, #0]
			break;
   18fbc:	e009      	b.n	18fd2 <atca_kit_parse_board_commands+0x31e>

		default:
			status = KIT_STATUS_UNKNOWN_COMMAND;
   18fbe:	233f      	movs	r3, #63	; 0x3f
   18fc0:	18fb      	adds	r3, r7, r3
   18fc2:	22c0      	movs	r2, #192	; 0xc0
   18fc4:	701a      	strb	r2, [r3, #0]
			break;
   18fc6:	e004      	b.n	18fd2 <atca_kit_parse_board_commands+0x31e>
			break;
   18fc8:	46c0      	nop			; (mov r8, r8)
   18fca:	e002      	b.n	18fd2 <atca_kit_parse_board_commands+0x31e>
				break;
   18fcc:	46c0      	nop			; (mov r8, r8)
   18fce:	e000      	b.n	18fd2 <atca_kit_parse_board_commands+0x31e>
				break;
   18fd0:	46c0      	nop			; (mov r8, r8)
			
	}
	
	// Append <status>(<data>).
	response[responseIndex] = status;
   18fd2:	233c      	movs	r3, #60	; 0x3c
   18fd4:	18fb      	adds	r3, r7, r3
   18fd6:	881b      	ldrh	r3, [r3, #0]
   18fd8:	683a      	ldr	r2, [r7, #0]
   18fda:	18d3      	adds	r3, r2, r3
   18fdc:	223f      	movs	r2, #63	; 0x3f
   18fde:	18ba      	adds	r2, r7, r2
   18fe0:	7812      	ldrb	r2, [r2, #0]
   18fe2:	701a      	strb	r2, [r3, #0]
	*responseLength = atca_kit_create_usb_packet(dataLength, &response[responseIndex]) + responseIndex;
   18fe4:	232a      	movs	r3, #42	; 0x2a
   18fe6:	18fb      	adds	r3, r7, r3
   18fe8:	8818      	ldrh	r0, [r3, #0]
   18fea:	233c      	movs	r3, #60	; 0x3c
   18fec:	18fb      	adds	r3, r7, r3
   18fee:	881b      	ldrh	r3, [r3, #0]
   18ff0:	683a      	ldr	r2, [r7, #0]
   18ff2:	18d3      	adds	r3, r2, r3
   18ff4:	0019      	movs	r1, r3
   18ff6:	4b1c      	ldr	r3, [pc, #112]	; (19068 <atca_kit_parse_board_commands+0x3b4>)
   18ff8:	4798      	blx	r3
   18ffa:	0003      	movs	r3, r0
   18ffc:	001a      	movs	r2, r3
   18ffe:	233c      	movs	r3, #60	; 0x3c
   19000:	18fb      	adds	r3, r7, r3
   19002:	881b      	ldrh	r3, [r3, #0]
   19004:	18d3      	adds	r3, r2, r3
   19006:	b29a      	uxth	r2, r3
   19008:	687b      	ldr	r3, [r7, #4]
   1900a:	801a      	strh	r2, [r3, #0]
	
	return status;
   1900c:	233f      	movs	r3, #63	; 0x3f
   1900e:	18fb      	adds	r3, r7, r3
   19010:	781b      	ldrb	r3, [r3, #0]
}
   19012:	0018      	movs	r0, r3
   19014:	46bd      	mov	sp, r7
   19016:	b011      	add	sp, #68	; 0x44
   19018:	bd90      	pop	{r4, r7, pc}
   1901a:	46c0      	nop			; (mov r8, r8)
   1901c:	0002183c 	.word	0x0002183c
   19020:	0001c7a7 	.word	0x0001c7a7
   19024:	0001989d 	.word	0x0001989d
   19028:	000217fc 	.word	0x000217fc
   1902c:	0001c1e5 	.word	0x0001c1e5
   19030:	0001c7d3 	.word	0x0001c7d3
   19034:	000217d4 	.word	0x000217d4
   19038:	000217e4 	.word	0x000217e4
   1903c:	000217d8 	.word	0x000217d8
   19040:	000217ec 	.word	0x000217ec
   19044:	000217dc 	.word	0x000217dc
   19048:	000217f4 	.word	0x000217f4
   1904c:	000217e0 	.word	0x000217e0
   19050:	00018c55 	.word	0x00018c55
   19054:	00018b59 	.word	0x00018b59
   19058:	000218a0 	.word	0x000218a0
   1905c:	0001c7c3 	.word	0x0001c7c3
   19060:	00021808 	.word	0x00021808
   19064:	0001c78d 	.word	0x0001c78d
   19068:	00019959 	.word	0x00019959

0001906c <atca_kit_get_commands_info>:
 * \param[out] cmd_index is index corresponding to opcode
 * \param[out] rx_length is length of response to be came to device
 * \return ATCA_SUCCESS
 */
uint8_t atca_kit_get_commands_info(uint8_t *tx_buffer, uint8_t *cmd_index, uint16_t *rx_length)
{
   1906c:	b580      	push	{r7, lr}
   1906e:	b086      	sub	sp, #24
   19070:	af00      	add	r7, sp, #0
   19072:	60f8      	str	r0, [r7, #12]
   19074:	60b9      	str	r1, [r7, #8]
   19076:	607a      	str	r2, [r7, #4]
	uint8_t status = ATCA_SUCCESS;
   19078:	2317      	movs	r3, #23
   1907a:	18fb      	adds	r3, r7, r3
   1907c:	2200      	movs	r2, #0
   1907e:	701a      	strb	r2, [r3, #0]
	uint8_t opCode = tx_buffer[1];
   19080:	2316      	movs	r3, #22
   19082:	18fb      	adds	r3, r7, r3
   19084:	68fa      	ldr	r2, [r7, #12]
   19086:	7852      	ldrb	r2, [r2, #1]
   19088:	701a      	strb	r2, [r3, #0]
	uint8_t param1 = tx_buffer[2];
   1908a:	2315      	movs	r3, #21
   1908c:	18fb      	adds	r3, r7, r3
   1908e:	68fa      	ldr	r2, [r7, #12]
   19090:	7892      	ldrb	r2, [r2, #2]
   19092:	701a      	strb	r2, [r3, #0]
	
	switch (opCode) {
   19094:	2316      	movs	r3, #22
   19096:	18fb      	adds	r3, r7, r3
   19098:	781b      	ldrb	r3, [r3, #0]
   1909a:	2b47      	cmp	r3, #71	; 0x47
   1909c:	d900      	bls.n	190a0 <atca_kit_get_commands_info+0x34>
   1909e:	e0ad      	b.n	191fc <atca_kit_get_commands_info+0x190>
   190a0:	009a      	lsls	r2, r3, #2
   190a2:	4b5a      	ldr	r3, [pc, #360]	; (1920c <atca_kit_get_commands_info+0x1a0>)
   190a4:	18d3      	adds	r3, r2, r3
   190a6:	681b      	ldr	r3, [r3, #0]
   190a8:	469f      	mov	pc, r3
		
		case ATCA_CHECKMAC:
			*cmd_index = CMD_CHECKMAC;
   190aa:	68bb      	ldr	r3, [r7, #8]
   190ac:	2201      	movs	r2, #1
   190ae:	701a      	strb	r2, [r3, #0]
			*rx_length = CHECKMAC_RSP_SIZE;
   190b0:	687b      	ldr	r3, [r7, #4]
   190b2:	2204      	movs	r2, #4
   190b4:	801a      	strh	r2, [r3, #0]
			break;
   190b6:	e0a2      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_COUNTER:
			*cmd_index = CMD_COUNTER;
   190b8:	68bb      	ldr	r3, [r7, #8]
   190ba:	2202      	movs	r2, #2
   190bc:	701a      	strb	r2, [r3, #0]
			*rx_length = COUNTER_RSP_SIZE;
   190be:	687b      	ldr	r3, [r7, #4]
   190c0:	2207      	movs	r2, #7
   190c2:	801a      	strh	r2, [r3, #0]
			break;
   190c4:	e09b      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_DERIVE_KEY:
			*cmd_index = CMD_DERIVEKEY;
   190c6:	68bb      	ldr	r3, [r7, #8]
   190c8:	2203      	movs	r2, #3
   190ca:	701a      	strb	r2, [r3, #0]
			*rx_length = DERIVE_KEY_RSP_SIZE;
   190cc:	687b      	ldr	r3, [r7, #4]
   190ce:	2204      	movs	r2, #4
   190d0:	801a      	strh	r2, [r3, #0]
			break;
   190d2:	e094      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_ECDH:
			*cmd_index = CMD_ECDH;
   190d4:	68bb      	ldr	r3, [r7, #8]
   190d6:	2204      	movs	r2, #4
   190d8:	701a      	strb	r2, [r3, #0]
			*rx_length = ECDH_RSP_SIZE;
   190da:	687b      	ldr	r3, [r7, #4]
   190dc:	2243      	movs	r2, #67	; 0x43
   190de:	801a      	strh	r2, [r3, #0]
			break;
   190e0:	e08d      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_GENDIG:
			*cmd_index = CMD_GENDIG;
   190e2:	68bb      	ldr	r3, [r7, #8]
   190e4:	2205      	movs	r2, #5
   190e6:	701a      	strb	r2, [r3, #0]
			*rx_length = GENDIG_RSP_SIZE;
   190e8:	687b      	ldr	r3, [r7, #4]
   190ea:	2204      	movs	r2, #4
   190ec:	801a      	strh	r2, [r3, #0]
			break;
   190ee:	e086      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_GENKEY:
			*cmd_index = CMD_GENKEY;
   190f0:	68bb      	ldr	r3, [r7, #8]
   190f2:	2206      	movs	r2, #6
   190f4:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 == GENKEY_MODE_DIGEST)	? GENKEY_RSP_SIZE_SHORT : GENKEY_RSP_SIZE_LONG;
   190f6:	2315      	movs	r3, #21
   190f8:	18fb      	adds	r3, r7, r3
   190fa:	781b      	ldrb	r3, [r3, #0]
   190fc:	2b08      	cmp	r3, #8
   190fe:	d101      	bne.n	19104 <atca_kit_get_commands_info+0x98>
   19100:	2204      	movs	r2, #4
   19102:	e000      	b.n	19106 <atca_kit_get_commands_info+0x9a>
   19104:	224b      	movs	r2, #75	; 0x4b
   19106:	687b      	ldr	r3, [r7, #4]
   19108:	801a      	strh	r2, [r3, #0]
			break;
   1910a:	e078      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_HMAC:
			*cmd_index = CMD_HMAC;
   1910c:	68bb      	ldr	r3, [r7, #8]
   1910e:	2207      	movs	r2, #7
   19110:	701a      	strb	r2, [r3, #0]
			*rx_length = HMAC_RSP_SIZE;
   19112:	687b      	ldr	r3, [r7, #4]
   19114:	2223      	movs	r2, #35	; 0x23
   19116:	801a      	strh	r2, [r3, #0]
			break;
   19118:	e071      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_INFO:
			*cmd_index = CMD_INFO;
   1911a:	68bb      	ldr	r3, [r7, #8]
   1911c:	2208      	movs	r2, #8
   1911e:	701a      	strb	r2, [r3, #0]
			*rx_length = INFO_RSP_SIZE;
   19120:	687b      	ldr	r3, [r7, #4]
   19122:	2207      	movs	r2, #7
   19124:	801a      	strh	r2, [r3, #0]
			break;
   19126:	e06a      	b.n	191fe <atca_kit_get_commands_info+0x192>

		case ATCA_LOCK:
			*cmd_index = CMD_LOCK;
   19128:	68bb      	ldr	r3, [r7, #8]
   1912a:	2209      	movs	r2, #9
   1912c:	701a      	strb	r2, [r3, #0]
			*rx_length = LOCK_RSP_SIZE;
   1912e:	687b      	ldr	r3, [r7, #4]
   19130:	2204      	movs	r2, #4
   19132:	801a      	strh	r2, [r3, #0]
			break;
   19134:	e063      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_MAC:
			*cmd_index = CMD_MAC;
   19136:	68bb      	ldr	r3, [r7, #8]
   19138:	220a      	movs	r2, #10
   1913a:	701a      	strb	r2, [r3, #0]
			*rx_length = MAC_RSP_SIZE;
   1913c:	687b      	ldr	r3, [r7, #4]
   1913e:	2223      	movs	r2, #35	; 0x23
   19140:	801a      	strh	r2, [r3, #0]
			break;
   19142:	e05c      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_NONCE:
			*cmd_index = CMD_NONCE;
   19144:	68bb      	ldr	r3, [r7, #8]
   19146:	220b      	movs	r2, #11
   19148:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 == NONCE_MODE_PASSTHROUGH)	? NONCE_RSP_SIZE_SHORT : NONCE_RSP_SIZE_LONG;
   1914a:	2315      	movs	r3, #21
   1914c:	18fb      	adds	r3, r7, r3
   1914e:	781b      	ldrb	r3, [r3, #0]
   19150:	2b03      	cmp	r3, #3
   19152:	d101      	bne.n	19158 <atca_kit_get_commands_info+0xec>
   19154:	2204      	movs	r2, #4
   19156:	e000      	b.n	1915a <atca_kit_get_commands_info+0xee>
   19158:	2223      	movs	r2, #35	; 0x23
   1915a:	687b      	ldr	r3, [r7, #4]
   1915c:	801a      	strh	r2, [r3, #0]
			break;
   1915e:	e04e      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_PAUSE:
			*cmd_index = CMD_PAUSE;
   19160:	68bb      	ldr	r3, [r7, #8]
   19162:	220c      	movs	r2, #12
   19164:	701a      	strb	r2, [r3, #0]
			*rx_length = PAUSE_RSP_SIZE;
   19166:	687b      	ldr	r3, [r7, #4]
   19168:	2204      	movs	r2, #4
   1916a:	801a      	strh	r2, [r3, #0]
			break;
   1916c:	e047      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_PRIVWRITE:
			*cmd_index = CMD_PRIVWRITE;
   1916e:	68bb      	ldr	r3, [r7, #8]
   19170:	220d      	movs	r2, #13
   19172:	701a      	strb	r2, [r3, #0]
			*rx_length = PRIVWRITE_RSP_SIZE;
   19174:	687b      	ldr	r3, [r7, #4]
   19176:	2204      	movs	r2, #4
   19178:	801a      	strh	r2, [r3, #0]
			break;
   1917a:	e040      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_RANDOM:
			*cmd_index = CMD_RANDOM;
   1917c:	68bb      	ldr	r3, [r7, #8]
   1917e:	220e      	movs	r2, #14
   19180:	701a      	strb	r2, [r3, #0]
			*rx_length = RANDOM_RSP_SIZE;
   19182:	687b      	ldr	r3, [r7, #4]
   19184:	2223      	movs	r2, #35	; 0x23
   19186:	801a      	strh	r2, [r3, #0]
			break;
   19188:	e039      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_READ:
			*cmd_index = CMD_READMEM;
   1918a:	68bb      	ldr	r3, [r7, #8]
   1918c:	220f      	movs	r2, #15
   1918e:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 & 0x80)	? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
   19190:	2315      	movs	r3, #21
   19192:	18fb      	adds	r3, r7, r3
   19194:	781b      	ldrb	r3, [r3, #0]
   19196:	b25b      	sxtb	r3, r3
   19198:	2b00      	cmp	r3, #0
   1919a:	da01      	bge.n	191a0 <atca_kit_get_commands_info+0x134>
   1919c:	2223      	movs	r2, #35	; 0x23
   1919e:	e000      	b.n	191a2 <atca_kit_get_commands_info+0x136>
   191a0:	2207      	movs	r2, #7
   191a2:	687b      	ldr	r3, [r7, #4]
   191a4:	801a      	strh	r2, [r3, #0]
			break;
   191a6:	e02a      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_SHA:
			*cmd_index = CMD_SHA;
   191a8:	68bb      	ldr	r3, [r7, #8]
   191aa:	2210      	movs	r2, #16
   191ac:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 == SHA_MODE_SHA256_END) ? ATCA_RSP_SIZE_32 : ATCA_RSP_SIZE_4;
   191ae:	2315      	movs	r3, #21
   191b0:	18fb      	adds	r3, r7, r3
   191b2:	781b      	ldrb	r3, [r3, #0]
   191b4:	2b02      	cmp	r3, #2
   191b6:	d101      	bne.n	191bc <atca_kit_get_commands_info+0x150>
   191b8:	2223      	movs	r2, #35	; 0x23
   191ba:	e000      	b.n	191be <atca_kit_get_commands_info+0x152>
   191bc:	2207      	movs	r2, #7
   191be:	687b      	ldr	r3, [r7, #4]
   191c0:	801a      	strh	r2, [r3, #0]
			break;
   191c2:	e01c      	b.n	191fe <atca_kit_get_commands_info+0x192>

		case ATCA_SIGN:
			*cmd_index = CMD_SIGN;
   191c4:	68bb      	ldr	r3, [r7, #8]
   191c6:	2211      	movs	r2, #17
   191c8:	701a      	strb	r2, [r3, #0]
			*rx_length = SIGN_RSP_SIZE;
   191ca:	687b      	ldr	r3, [r7, #4]
   191cc:	224b      	movs	r2, #75	; 0x4b
   191ce:	801a      	strh	r2, [r3, #0]
			break;
   191d0:	e015      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_UPDATE_EXTRA:
			*cmd_index = CMD_UPDATEEXTRA;
   191d2:	68bb      	ldr	r3, [r7, #8]
   191d4:	2212      	movs	r2, #18
   191d6:	701a      	strb	r2, [r3, #0]
			*rx_length = UPDATE_RSP_SIZE;
   191d8:	687b      	ldr	r3, [r7, #4]
   191da:	2204      	movs	r2, #4
   191dc:	801a      	strh	r2, [r3, #0]
			break;
   191de:	e00e      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_VERIFY:
			*cmd_index = CMD_VERIFY;
   191e0:	68bb      	ldr	r3, [r7, #8]
   191e2:	2213      	movs	r2, #19
   191e4:	701a      	strb	r2, [r3, #0]
			*rx_length = VERIFY_RSP_SIZE;
   191e6:	687b      	ldr	r3, [r7, #4]
   191e8:	2204      	movs	r2, #4
   191ea:	801a      	strh	r2, [r3, #0]
			break;
   191ec:	e007      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		case ATCA_WRITE:
			*cmd_index = CMD_WRITEMEM;
   191ee:	68bb      	ldr	r3, [r7, #8]
   191f0:	2214      	movs	r2, #20
   191f2:	701a      	strb	r2, [r3, #0]
			*rx_length = WRITE_RSP_SIZE;
   191f4:	687b      	ldr	r3, [r7, #4]
   191f6:	2204      	movs	r2, #4
   191f8:	801a      	strh	r2, [r3, #0]
			break;
   191fa:	e000      	b.n	191fe <atca_kit_get_commands_info+0x192>
		
		default:
			break;
   191fc:	46c0      	nop			; (mov r8, r8)
		
	}

	return status;
   191fe:	2317      	movs	r3, #23
   19200:	18fb      	adds	r3, r7, r3
   19202:	781b      	ldrb	r3, [r3, #0]
}
   19204:	0018      	movs	r0, r3
   19206:	46bd      	mov	sp, r7
   19208:	b006      	add	sp, #24
   1920a:	bd80      	pop	{r7, pc}
   1920c:	000218d4 	.word	0x000218d4

00019210 <atca_kit_send_and_receive>:
 * \param[in] tx_buffer is buffer to be sent
 * \param[in] rx_buffer is buffer to be received
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_and_receive(uint8_t *tx_buffer, uint8_t *rx_buffer)
{
   19210:	b590      	push	{r4, r7, lr}
   19212:	b089      	sub	sp, #36	; 0x24
   19214:	af00      	add	r7, sp, #0
   19216:	6078      	str	r0, [r7, #4]
   19218:	6039      	str	r1, [r7, #0]
	uint8_t status = ATCA_SUCCESS;
   1921a:	231f      	movs	r3, #31
   1921c:	18fb      	adds	r3, r7, r3
   1921e:	2200      	movs	r2, #0
   19220:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_index;
	uint16_t rx_length;
	uint8_t *cmd_buffer;
	ATCADevice  _Device = NULL;
   19222:	2300      	movs	r3, #0
   19224:	61bb      	str	r3, [r7, #24]
	ATCACommand _CommandObj = NULL;
   19226:	2300      	movs	r3, #0
   19228:	617b      	str	r3, [r7, #20]
	ATCAIface   _Iface = NULL;
   1922a:	2300      	movs	r3, #0
   1922c:	613b      	str	r3, [r7, #16]

	do {

		if ( tx_buffer == NULL || rx_buffer == NULL )
   1922e:	687b      	ldr	r3, [r7, #4]
   19230:	2b00      	cmp	r3, #0
   19232:	d100      	bne.n	19236 <atca_kit_send_and_receive+0x26>
   19234:	e094      	b.n	19360 <atca_kit_send_and_receive+0x150>
   19236:	683b      	ldr	r3, [r7, #0]
   19238:	2b00      	cmp	r3, #0
   1923a:	d100      	bne.n	1923e <atca_kit_send_and_receive+0x2e>
   1923c:	e090      	b.n	19360 <atca_kit_send_and_receive+0x150>
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
   1923e:	2308      	movs	r3, #8
   19240:	18fa      	adds	r2, r7, r3
   19242:	230b      	movs	r3, #11
   19244:	18f9      	adds	r1, r7, r3
   19246:	687b      	ldr	r3, [r7, #4]
   19248:	0018      	movs	r0, r3
   1924a:	4b49      	ldr	r3, [pc, #292]	; (19370 <atca_kit_send_and_receive+0x160>)
   1924c:	4798      	blx	r3
   1924e:	1e03      	subs	r3, r0, #0
   19250:	d000      	beq.n	19254 <atca_kit_send_and_receive+0x44>
   19252:	e080      	b.n	19356 <atca_kit_send_and_receive+0x146>
			break;

		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
   19254:	687b      	ldr	r3, [r7, #4]
   19256:	781b      	ldrb	r3, [r3, #0]
   19258:	3301      	adds	r3, #1
   1925a:	0018      	movs	r0, r3
   1925c:	4b45      	ldr	r3, [pc, #276]	; (19374 <atca_kit_send_and_receive+0x164>)
   1925e:	4798      	blx	r3
   19260:	0003      	movs	r3, r0
   19262:	60fb      	str	r3, [r7, #12]
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
   19264:	68fb      	ldr	r3, [r7, #12]
   19266:	1c58      	adds	r0, r3, #1
   19268:	687b      	ldr	r3, [r7, #4]
   1926a:	781b      	ldrb	r3, [r3, #0]
   1926c:	001a      	movs	r2, r3
   1926e:	687b      	ldr	r3, [r7, #4]
   19270:	0019      	movs	r1, r3
   19272:	4b41      	ldr	r3, [pc, #260]	; (19378 <atca_kit_send_and_receive+0x168>)
   19274:	4798      	blx	r3
		
		_Device= atcab_get_device();
   19276:	4b41      	ldr	r3, [pc, #260]	; (1937c <atca_kit_send_and_receive+0x16c>)
   19278:	4798      	blx	r3
   1927a:	0003      	movs	r3, r0
   1927c:	61bb      	str	r3, [r7, #24]
		_CommandObj = atGetCommands(_gDevice);
   1927e:	4b40      	ldr	r3, [pc, #256]	; (19380 <atca_kit_send_and_receive+0x170>)
   19280:	681b      	ldr	r3, [r3, #0]
   19282:	0018      	movs	r0, r3
   19284:	4b3f      	ldr	r3, [pc, #252]	; (19384 <atca_kit_send_and_receive+0x174>)
   19286:	4798      	blx	r3
   19288:	0003      	movs	r3, r0
   1928a:	617b      	str	r3, [r7, #20]

        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
   1928c:	687b      	ldr	r3, [r7, #4]
   1928e:	3301      	adds	r3, #1
   19290:	781b      	ldrb	r3, [r3, #0]
   19292:	221f      	movs	r2, #31
   19294:	18bc      	adds	r4, r7, r2
   19296:	697a      	ldr	r2, [r7, #20]
   19298:	0011      	movs	r1, r2
   1929a:	0018      	movs	r0, r3
   1929c:	4b3a      	ldr	r3, [pc, #232]	; (19388 <atca_kit_send_and_receive+0x178>)
   1929e:	4798      	blx	r3
   192a0:	0003      	movs	r3, r0
   192a2:	7023      	strb	r3, [r4, #0]
   192a4:	231f      	movs	r3, #31
   192a6:	18fb      	adds	r3, r7, r3
   192a8:	781b      	ldrb	r3, [r3, #0]
   192aa:	2b00      	cmp	r3, #0
   192ac:	d155      	bne.n	1935a <atca_kit_send_and_receive+0x14a>
        {
            break;
        }

		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
   192ae:	231f      	movs	r3, #31
   192b0:	18fc      	adds	r4, r7, r3
   192b2:	4b36      	ldr	r3, [pc, #216]	; (1938c <atca_kit_send_and_receive+0x17c>)
   192b4:	4798      	blx	r3
   192b6:	0003      	movs	r3, r0
   192b8:	7023      	strb	r3, [r4, #0]
   192ba:	231f      	movs	r3, #31
   192bc:	18fb      	adds	r3, r7, r3
   192be:	781b      	ldrb	r3, [r3, #0]
   192c0:	2b00      	cmp	r3, #0
   192c2:	d14c      	bne.n	1935e <atca_kit_send_and_receive+0x14e>
			break;

		_Device= atcab_get_device();
   192c4:	4b2d      	ldr	r3, [pc, #180]	; (1937c <atca_kit_send_and_receive+0x16c>)
   192c6:	4798      	blx	r3
   192c8:	0003      	movs	r3, r0
   192ca:	61bb      	str	r3, [r7, #24]
		_Iface = atGetIFace(_Device);
   192cc:	69bb      	ldr	r3, [r7, #24]
   192ce:	0018      	movs	r0, r3
   192d0:	4b2f      	ldr	r3, [pc, #188]	; (19390 <atca_kit_send_and_receive+0x180>)
   192d2:	4798      	blx	r3
   192d4:	0003      	movs	r3, r0
   192d6:	613b      	str	r3, [r7, #16]
		
		// send the command
		if ((status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
   192d8:	687b      	ldr	r3, [r7, #4]
   192da:	781b      	ldrb	r3, [r3, #0]
   192dc:	001a      	movs	r2, r3
   192de:	231f      	movs	r3, #31
   192e0:	18fc      	adds	r4, r7, r3
   192e2:	68f9      	ldr	r1, [r7, #12]
   192e4:	693b      	ldr	r3, [r7, #16]
   192e6:	0018      	movs	r0, r3
   192e8:	4b2a      	ldr	r3, [pc, #168]	; (19394 <atca_kit_send_and_receive+0x184>)
   192ea:	4798      	blx	r3
   192ec:	0003      	movs	r3, r0
   192ee:	7023      	strb	r3, [r4, #0]
   192f0:	231f      	movs	r3, #31
   192f2:	18fb      	adds	r3, r7, r3
   192f4:	781b      	ldrb	r3, [r3, #0]
   192f6:	2b00      	cmp	r3, #0
   192f8:	d008      	beq.n	1930c <atca_kit_send_and_receive+0xfc>
        {
            printf("atsend failed: %x\r\n", status);
   192fa:	231f      	movs	r3, #31
   192fc:	18fb      	adds	r3, r7, r3
   192fe:	781a      	ldrb	r2, [r3, #0]
   19300:	4b25      	ldr	r3, [pc, #148]	; (19398 <atca_kit_send_and_receive+0x188>)
   19302:	0011      	movs	r1, r2
   19304:	0018      	movs	r0, r3
   19306:	4b25      	ldr	r3, [pc, #148]	; (1939c <atca_kit_send_and_receive+0x18c>)
   19308:	4798      	blx	r3
			break;
   1930a:	e029      	b.n	19360 <atca_kit_send_and_receive+0x150>
        }

		// delay the appropriate amount of time for command to execute
		atca_delay_ms(_CommandObj->execution_time_msec);
   1930c:	697b      	ldr	r3, [r7, #20]
   1930e:	885b      	ldrh	r3, [r3, #2]
   19310:	0018      	movs	r0, r3
   19312:	4b23      	ldr	r3, [pc, #140]	; (193a0 <atca_kit_send_and_receive+0x190>)
   19314:	4798      	blx	r3

		// receive the response
		if ((status = atreceive( _Iface, rx_buffer, &rx_length)) != ATCA_SUCCESS )
   19316:	231f      	movs	r3, #31
   19318:	18fc      	adds	r4, r7, r3
   1931a:	2308      	movs	r3, #8
   1931c:	18fa      	adds	r2, r7, r3
   1931e:	6839      	ldr	r1, [r7, #0]
   19320:	693b      	ldr	r3, [r7, #16]
   19322:	0018      	movs	r0, r3
   19324:	4b1f      	ldr	r3, [pc, #124]	; (193a4 <atca_kit_send_and_receive+0x194>)
   19326:	4798      	blx	r3
   19328:	0003      	movs	r3, r0
   1932a:	7023      	strb	r3, [r4, #0]
   1932c:	231f      	movs	r3, #31
   1932e:	18fb      	adds	r3, r7, r3
   19330:	781b      	ldrb	r3, [r3, #0]
   19332:	2b00      	cmp	r3, #0
   19334:	d008      	beq.n	19348 <atca_kit_send_and_receive+0x138>
        {
            printf("atreceive failed: %x\r\n", status);
   19336:	231f      	movs	r3, #31
   19338:	18fb      	adds	r3, r7, r3
   1933a:	781a      	ldrb	r2, [r3, #0]
   1933c:	4b1a      	ldr	r3, [pc, #104]	; (193a8 <atca_kit_send_and_receive+0x198>)
   1933e:	0011      	movs	r1, r2
   19340:	0018      	movs	r0, r3
   19342:	4b16      	ldr	r3, [pc, #88]	; (1939c <atca_kit_send_and_receive+0x18c>)
   19344:	4798      	blx	r3
			break;
   19346:	e00b      	b.n	19360 <atca_kit_send_and_receive+0x150>
        }

		atcab_idle();
   19348:	4b18      	ldr	r3, [pc, #96]	; (193ac <atca_kit_send_and_receive+0x19c>)
   1934a:	4798      	blx	r3

		free((void *)cmd_buffer);
   1934c:	68fb      	ldr	r3, [r7, #12]
   1934e:	0018      	movs	r0, r3
   19350:	4b17      	ldr	r3, [pc, #92]	; (193b0 <atca_kit_send_and_receive+0x1a0>)
   19352:	4798      	blx	r3
   19354:	e004      	b.n	19360 <atca_kit_send_and_receive+0x150>
			break;
   19356:	46c0      	nop			; (mov r8, r8)
   19358:	e002      	b.n	19360 <atca_kit_send_and_receive+0x150>
            break;
   1935a:	46c0      	nop			; (mov r8, r8)
   1935c:	e000      	b.n	19360 <atca_kit_send_and_receive+0x150>
			break;
   1935e:	46c0      	nop			; (mov r8, r8)

	} while(0);
	
	return status;
   19360:	231f      	movs	r3, #31
   19362:	18fb      	adds	r3, r7, r3
   19364:	781b      	ldrb	r3, [r3, #0]
	
}
   19366:	0018      	movs	r0, r3
   19368:	46bd      	mov	sp, r7
   1936a:	b009      	add	sp, #36	; 0x24
   1936c:	bd90      	pop	{r4, r7, pc}
   1936e:	46c0      	nop			; (mov r8, r8)
   19370:	0001906d 	.word	0x0001906d
   19374:	0001c165 	.word	0x0001c165
   19378:	0001c1e5 	.word	0x0001c1e5
   1937c:	0000ff69 	.word	0x0000ff69
   19380:	20000590 	.word	0x20000590
   19384:	0000fbdd 	.word	0x0000fbdd
   19388:	0000f815 	.word	0x0000f815
   1938c:	0000ff7d 	.word	0x0000ff7d
   19390:	0000fbf1 	.word	0x0000fbf1
   19394:	0000fd11 	.word	0x0000fd11
   19398:	0002184c 	.word	0x0002184c
   1939c:	0001c37d 	.word	0x0001c37d
   193a0:	00012395 	.word	0x00012395
   193a4:	0000fd33 	.word	0x0000fd33
   193a8:	00021860 	.word	0x00021860
   193ac:	0000ffa9 	.word	0x0000ffa9
   193b0:	0001c179 	.word	0x0001c179

000193b4 <atca_kit_send_command>:
/** \brief Only send a command array.
 * \param[in] tx_buffer is buffer to be sent
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_command(uint8_t *tx_buffer)
{
   193b4:	b590      	push	{r4, r7, lr}
   193b6:	b089      	sub	sp, #36	; 0x24
   193b8:	af00      	add	r7, sp, #0
   193ba:	6078      	str	r0, [r7, #4]
	uint8_t status = ATCA_SUCCESS;
   193bc:	231f      	movs	r3, #31
   193be:	18fb      	adds	r3, r7, r3
   193c0:	2200      	movs	r2, #0
   193c2:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_index;
	uint16_t rx_length;
	uint8_t *cmd_buffer;
	ATCADevice  _Device = NULL;
   193c4:	2300      	movs	r3, #0
   193c6:	61bb      	str	r3, [r7, #24]
	ATCACommand _CommandObj = NULL;
   193c8:	2300      	movs	r3, #0
   193ca:	617b      	str	r3, [r7, #20]
	ATCAIface   _Iface = NULL;
   193cc:	2300      	movs	r3, #0
   193ce:	613b      	str	r3, [r7, #16]

	do {

		if ( tx_buffer == NULL )
   193d0:	687b      	ldr	r3, [r7, #4]
   193d2:	2b00      	cmp	r3, #0
   193d4:	d067      	beq.n	194a6 <atca_kit_send_command+0xf2>
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
   193d6:	2308      	movs	r3, #8
   193d8:	18fa      	adds	r2, r7, r3
   193da:	230b      	movs	r3, #11
   193dc:	18f9      	adds	r1, r7, r3
   193de:	687b      	ldr	r3, [r7, #4]
   193e0:	0018      	movs	r0, r3
   193e2:	4b39      	ldr	r3, [pc, #228]	; (194c8 <atca_kit_send_command+0x114>)
   193e4:	4798      	blx	r3
   193e6:	1e03      	subs	r3, r0, #0
   193e8:	d15f      	bne.n	194aa <atca_kit_send_command+0xf6>
			break;

		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
   193ea:	687b      	ldr	r3, [r7, #4]
   193ec:	781b      	ldrb	r3, [r3, #0]
   193ee:	3301      	adds	r3, #1
   193f0:	0018      	movs	r0, r3
   193f2:	4b36      	ldr	r3, [pc, #216]	; (194cc <atca_kit_send_command+0x118>)
   193f4:	4798      	blx	r3
   193f6:	0003      	movs	r3, r0
   193f8:	60fb      	str	r3, [r7, #12]
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
   193fa:	68fb      	ldr	r3, [r7, #12]
   193fc:	1c58      	adds	r0, r3, #1
   193fe:	687b      	ldr	r3, [r7, #4]
   19400:	781b      	ldrb	r3, [r3, #0]
   19402:	001a      	movs	r2, r3
   19404:	687b      	ldr	r3, [r7, #4]
   19406:	0019      	movs	r1, r3
   19408:	4b31      	ldr	r3, [pc, #196]	; (194d0 <atca_kit_send_command+0x11c>)
   1940a:	4798      	blx	r3

		_Device= atcab_get_device();
   1940c:	4b31      	ldr	r3, [pc, #196]	; (194d4 <atca_kit_send_command+0x120>)
   1940e:	4798      	blx	r3
   19410:	0003      	movs	r3, r0
   19412:	61bb      	str	r3, [r7, #24]
		_CommandObj = atGetCommands(_Device);
   19414:	69bb      	ldr	r3, [r7, #24]
   19416:	0018      	movs	r0, r3
   19418:	4b2f      	ldr	r3, [pc, #188]	; (194d8 <atca_kit_send_command+0x124>)
   1941a:	4798      	blx	r3
   1941c:	0003      	movs	r3, r0
   1941e:	617b      	str	r3, [r7, #20]
		
        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
   19420:	687b      	ldr	r3, [r7, #4]
   19422:	3301      	adds	r3, #1
   19424:	781b      	ldrb	r3, [r3, #0]
   19426:	221f      	movs	r2, #31
   19428:	18bc      	adds	r4, r7, r2
   1942a:	697a      	ldr	r2, [r7, #20]
   1942c:	0011      	movs	r1, r2
   1942e:	0018      	movs	r0, r3
   19430:	4b2a      	ldr	r3, [pc, #168]	; (194dc <atca_kit_send_command+0x128>)
   19432:	4798      	blx	r3
   19434:	0003      	movs	r3, r0
   19436:	7023      	strb	r3, [r4, #0]
   19438:	231f      	movs	r3, #31
   1943a:	18fb      	adds	r3, r7, r3
   1943c:	781b      	ldrb	r3, [r3, #0]
   1943e:	2b00      	cmp	r3, #0
   19440:	d135      	bne.n	194ae <atca_kit_send_command+0xfa>
        {
            break;
        }

		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
   19442:	231f      	movs	r3, #31
   19444:	18fc      	adds	r4, r7, r3
   19446:	4b26      	ldr	r3, [pc, #152]	; (194e0 <atca_kit_send_command+0x12c>)
   19448:	4798      	blx	r3
   1944a:	0003      	movs	r3, r0
   1944c:	7023      	strb	r3, [r4, #0]
   1944e:	231f      	movs	r3, #31
   19450:	18fb      	adds	r3, r7, r3
   19452:	781b      	ldrb	r3, [r3, #0]
   19454:	2b00      	cmp	r3, #0
   19456:	d12c      	bne.n	194b2 <atca_kit_send_command+0xfe>
			break;

		_Device= atcab_get_device();
   19458:	4b1e      	ldr	r3, [pc, #120]	; (194d4 <atca_kit_send_command+0x120>)
   1945a:	4798      	blx	r3
   1945c:	0003      	movs	r3, r0
   1945e:	61bb      	str	r3, [r7, #24]
		_Iface = atGetIFace(_Device);
   19460:	69bb      	ldr	r3, [r7, #24]
   19462:	0018      	movs	r0, r3
   19464:	4b1f      	ldr	r3, [pc, #124]	; (194e4 <atca_kit_send_command+0x130>)
   19466:	4798      	blx	r3
   19468:	0003      	movs	r3, r0
   1946a:	613b      	str	r3, [r7, #16]
		
		// send the command
		if ( (status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
   1946c:	687b      	ldr	r3, [r7, #4]
   1946e:	781b      	ldrb	r3, [r3, #0]
   19470:	001a      	movs	r2, r3
   19472:	231f      	movs	r3, #31
   19474:	18fc      	adds	r4, r7, r3
   19476:	68f9      	ldr	r1, [r7, #12]
   19478:	693b      	ldr	r3, [r7, #16]
   1947a:	0018      	movs	r0, r3
   1947c:	4b1a      	ldr	r3, [pc, #104]	; (194e8 <atca_kit_send_command+0x134>)
   1947e:	4798      	blx	r3
   19480:	0003      	movs	r3, r0
   19482:	7023      	strb	r3, [r4, #0]
   19484:	231f      	movs	r3, #31
   19486:	18fb      	adds	r3, r7, r3
   19488:	781b      	ldrb	r3, [r3, #0]
   1948a:	2b00      	cmp	r3, #0
   1948c:	d113      	bne.n	194b6 <atca_kit_send_command+0x102>
			break;

		// delay the appropriate amount of time for command to execute
		atca_delay_ms(_CommandObj->execution_time_msec);
   1948e:	697b      	ldr	r3, [r7, #20]
   19490:	885b      	ldrh	r3, [r3, #2]
   19492:	0018      	movs	r0, r3
   19494:	4b15      	ldr	r3, [pc, #84]	; (194ec <atca_kit_send_command+0x138>)
   19496:	4798      	blx	r3

		atcab_idle();
   19498:	4b15      	ldr	r3, [pc, #84]	; (194f0 <atca_kit_send_command+0x13c>)
   1949a:	4798      	blx	r3

		free((void *)cmd_buffer);
   1949c:	68fb      	ldr	r3, [r7, #12]
   1949e:	0018      	movs	r0, r3
   194a0:	4b14      	ldr	r3, [pc, #80]	; (194f4 <atca_kit_send_command+0x140>)
   194a2:	4798      	blx	r3
   194a4:	e008      	b.n	194b8 <atca_kit_send_command+0x104>
			break;
   194a6:	46c0      	nop			; (mov r8, r8)
   194a8:	e006      	b.n	194b8 <atca_kit_send_command+0x104>
			break;
   194aa:	46c0      	nop			; (mov r8, r8)
   194ac:	e004      	b.n	194b8 <atca_kit_send_command+0x104>
            break;
   194ae:	46c0      	nop			; (mov r8, r8)
   194b0:	e002      	b.n	194b8 <atca_kit_send_command+0x104>
			break;
   194b2:	46c0      	nop			; (mov r8, r8)
   194b4:	e000      	b.n	194b8 <atca_kit_send_command+0x104>
			break;
   194b6:	46c0      	nop			; (mov r8, r8)

	} while(0);
	
	return status;
   194b8:	231f      	movs	r3, #31
   194ba:	18fb      	adds	r3, r7, r3
   194bc:	781b      	ldrb	r3, [r3, #0]
	
}
   194be:	0018      	movs	r0, r3
   194c0:	46bd      	mov	sp, r7
   194c2:	b009      	add	sp, #36	; 0x24
   194c4:	bd90      	pop	{r4, r7, pc}
   194c6:	46c0      	nop			; (mov r8, r8)
   194c8:	0001906d 	.word	0x0001906d
   194cc:	0001c165 	.word	0x0001c165
   194d0:	0001c1e5 	.word	0x0001c1e5
   194d4:	0000ff69 	.word	0x0000ff69
   194d8:	0000fbdd 	.word	0x0000fbdd
   194dc:	0000f815 	.word	0x0000f815
   194e0:	0000ff7d 	.word	0x0000ff7d
   194e4:	0000fbf1 	.word	0x0000fbf1
   194e8:	0000fd11 	.word	0x0000fd11
   194ec:	00012395 	.word	0x00012395
   194f0:	0000ffa9 	.word	0x0000ffa9
   194f4:	0001c179 	.word	0x0001c179

000194f8 <atca_kit_receive_response>:
 * \param[in] size is size to be received
 * \param[out] rx_buffer is buffer that includes data to be received from a device 
 * \return ATCA_STATUS
 */
uint8_t atca_kit_receive_response(uint8_t size, uint8_t *rx_buffer)
{
   194f8:	b590      	push	{r4, r7, lr}
   194fa:	b087      	sub	sp, #28
   194fc:	af00      	add	r7, sp, #0
   194fe:	0002      	movs	r2, r0
   19500:	6039      	str	r1, [r7, #0]
   19502:	1dfb      	adds	r3, r7, #7
   19504:	701a      	strb	r2, [r3, #0]
	uint8_t status = ATCA_SUCCESS;
   19506:	2317      	movs	r3, #23
   19508:	18fb      	adds	r3, r7, r3
   1950a:	2200      	movs	r2, #0
   1950c:	701a      	strb	r2, [r3, #0]
	uint16_t rxlength = size;	
   1950e:	1dfb      	adds	r3, r7, #7
   19510:	781b      	ldrb	r3, [r3, #0]
   19512:	b29a      	uxth	r2, r3
   19514:	230a      	movs	r3, #10
   19516:	18fb      	adds	r3, r7, r3
   19518:	801a      	strh	r2, [r3, #0]
	ATCADevice  _Device = NULL;
   1951a:	2300      	movs	r3, #0
   1951c:	613b      	str	r3, [r7, #16]
	ATCAIface   _Iface = NULL;
   1951e:	2300      	movs	r3, #0
   19520:	60fb      	str	r3, [r7, #12]

	do {

		if ( rx_buffer == NULL )
   19522:	683b      	ldr	r3, [r7, #0]
   19524:	2b00      	cmp	r3, #0
   19526:	d02b      	beq.n	19580 <atca_kit_receive_response+0x88>
			break;

		_Device= atcab_get_device();
   19528:	4b1b      	ldr	r3, [pc, #108]	; (19598 <atca_kit_receive_response+0xa0>)
   1952a:	4798      	blx	r3
   1952c:	0003      	movs	r3, r0
   1952e:	613b      	str	r3, [r7, #16]
		
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
   19530:	2317      	movs	r3, #23
   19532:	18fc      	adds	r4, r7, r3
   19534:	4b19      	ldr	r3, [pc, #100]	; (1959c <atca_kit_receive_response+0xa4>)
   19536:	4798      	blx	r3
   19538:	0003      	movs	r3, r0
   1953a:	7023      	strb	r3, [r4, #0]
   1953c:	2317      	movs	r3, #23
   1953e:	18fb      	adds	r3, r7, r3
   19540:	781b      	ldrb	r3, [r3, #0]
   19542:	2b00      	cmp	r3, #0
   19544:	d11e      	bne.n	19584 <atca_kit_receive_response+0x8c>
			break;

		_Device= atcab_get_device();
   19546:	4b14      	ldr	r3, [pc, #80]	; (19598 <atca_kit_receive_response+0xa0>)
   19548:	4798      	blx	r3
   1954a:	0003      	movs	r3, r0
   1954c:	613b      	str	r3, [r7, #16]
		_Iface = atGetIFace(_Device);
   1954e:	693b      	ldr	r3, [r7, #16]
   19550:	0018      	movs	r0, r3
   19552:	4b13      	ldr	r3, [pc, #76]	; (195a0 <atca_kit_receive_response+0xa8>)
   19554:	4798      	blx	r3
   19556:	0003      	movs	r3, r0
   19558:	60fb      	str	r3, [r7, #12]

		// receive the response
		if ( (status = atreceive( _Iface, rx_buffer, &rxlength)) != ATCA_SUCCESS )
   1955a:	2317      	movs	r3, #23
   1955c:	18fc      	adds	r4, r7, r3
   1955e:	230a      	movs	r3, #10
   19560:	18fa      	adds	r2, r7, r3
   19562:	6839      	ldr	r1, [r7, #0]
   19564:	68fb      	ldr	r3, [r7, #12]
   19566:	0018      	movs	r0, r3
   19568:	4b0e      	ldr	r3, [pc, #56]	; (195a4 <atca_kit_receive_response+0xac>)
   1956a:	4798      	blx	r3
   1956c:	0003      	movs	r3, r0
   1956e:	7023      	strb	r3, [r4, #0]
   19570:	2317      	movs	r3, #23
   19572:	18fb      	adds	r3, r7, r3
   19574:	781b      	ldrb	r3, [r3, #0]
   19576:	2b00      	cmp	r3, #0
   19578:	d106      	bne.n	19588 <atca_kit_receive_response+0x90>
			break;

		atcab_idle();
   1957a:	4b0b      	ldr	r3, [pc, #44]	; (195a8 <atca_kit_receive_response+0xb0>)
   1957c:	4798      	blx	r3
   1957e:	e004      	b.n	1958a <atca_kit_receive_response+0x92>
			break;
   19580:	46c0      	nop			; (mov r8, r8)
   19582:	e002      	b.n	1958a <atca_kit_receive_response+0x92>
			break;
   19584:	46c0      	nop			; (mov r8, r8)
   19586:	e000      	b.n	1958a <atca_kit_receive_response+0x92>
			break;
   19588:	46c0      	nop			; (mov r8, r8)

	} while(0);
	
	return status;
   1958a:	2317      	movs	r3, #23
   1958c:	18fb      	adds	r3, r7, r3
   1958e:	781b      	ldrb	r3, [r3, #0]
	
}
   19590:	0018      	movs	r0, r3
   19592:	46bd      	mov	sp, r7
   19594:	b007      	add	sp, #28
   19596:	bd90      	pop	{r4, r7, pc}
   19598:	0000ff69 	.word	0x0000ff69
   1959c:	0000ff7d 	.word	0x0000ff7d
   195a0:	0000fbf1 	.word	0x0000fbf1
   195a4:	0000fd33 	.word	0x0000fd33
   195a8:	0000ffa9 	.word	0x0000ffa9

000195ac <atca_kit_parse_ecc_commands>:
 * \param[out] responseLength pointer to number of bytes in response buffer
 * \param[out] response pointer to binary response buffer
 * \return the status of the operation
 */
uint8_t atca_kit_parse_ecc_commands(uint16_t commandLength, uint8_t *command, uint16_t *responseLength, uint8_t *response)
{
   195ac:	b590      	push	{r4, r7, lr}
   195ae:	b08b      	sub	sp, #44	; 0x2c
   195b0:	af00      	add	r7, sp, #0
   195b2:	60b9      	str	r1, [r7, #8]
   195b4:	607a      	str	r2, [r7, #4]
   195b6:	603b      	str	r3, [r7, #0]
   195b8:	230e      	movs	r3, #14
   195ba:	18fb      	adds	r3, r7, r3
   195bc:	1c02      	adds	r2, r0, #0
   195be:	801a      	strh	r2, [r3, #0]
	uint8_t status = KIT_STATUS_SUCCESS;
   195c0:	2327      	movs	r3, #39	; 0x27
   195c2:	18fb      	adds	r3, r7, r3
   195c4:	2200      	movs	r2, #0
   195c6:	701a      	strb	r2, [r3, #0]
	uint16_t dataLength;
	uint8_t *data_load[1];
	uint8_t *dataLoad;
	char *pToken = strchr((char *) command, ':');
   195c8:	68bb      	ldr	r3, [r7, #8]
   195ca:	213a      	movs	r1, #58	; 0x3a
   195cc:	0018      	movs	r0, r3
   195ce:	4baa      	ldr	r3, [pc, #680]	; (19878 <atca_kit_parse_ecc_commands+0x2cc>)
   195d0:	4798      	blx	r3
   195d2:	0003      	movs	r3, r0
   195d4:	623b      	str	r3, [r7, #32]

	*responseLength = 0;
   195d6:	687b      	ldr	r3, [r7, #4]
   195d8:	2200      	movs	r2, #0
   195da:	801a      	strh	r2, [r3, #0]

	if (!pToken)
   195dc:	6a3b      	ldr	r3, [r7, #32]
   195de:	2b00      	cmp	r3, #0
   195e0:	d103      	bne.n	195ea <atca_kit_parse_ecc_commands+0x3e>
		return status;
   195e2:	2327      	movs	r3, #39	; 0x27
   195e4:	18fb      	adds	r3, r7, r3
   195e6:	781b      	ldrb	r3, [r3, #0]
   195e8:	e141      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>

	switch (pToken[1]) {
   195ea:	6a3b      	ldr	r3, [r7, #32]
   195ec:	3301      	adds	r3, #1
   195ee:	781b      	ldrb	r3, [r3, #0]
   195f0:	3b61      	subs	r3, #97	; 0x61
   195f2:	2b16      	cmp	r3, #22
   195f4:	d900      	bls.n	195f8 <atca_kit_parse_ecc_commands+0x4c>
   195f6:	e12b      	b.n	19850 <atca_kit_parse_ecc_commands+0x2a4>
   195f8:	009a      	lsls	r2, r3, #2
   195fa:	4ba0      	ldr	r3, [pc, #640]	; (1987c <atca_kit_parse_ecc_commands+0x2d0>)
   195fc:	18d3      	adds	r3, r2, r3
   195fe:	681b      	ldr	r3, [r3, #0]
   19600:	469f      	mov	pc, r3
		// Talk (send command and receive response)		
		case 't':
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   19602:	6a3b      	ldr	r3, [r7, #32]
   19604:	3302      	adds	r3, #2
   19606:	2227      	movs	r2, #39	; 0x27
   19608:	18bc      	adds	r4, r7, r2
   1960a:	2214      	movs	r2, #20
   1960c:	18ba      	adds	r2, r7, r2
   1960e:	211a      	movs	r1, #26
   19610:	1879      	adds	r1, r7, r1
   19612:	0018      	movs	r0, r3
   19614:	4b9a      	ldr	r3, [pc, #616]	; (19880 <atca_kit_parse_ecc_commands+0x2d4>)
   19616:	4798      	blx	r3
   19618:	0003      	movs	r3, r0
   1961a:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   1961c:	2327      	movs	r3, #39	; 0x27
   1961e:	18fb      	adds	r3, r7, r3
   19620:	781b      	ldrb	r3, [r3, #0]
   19622:	2b00      	cmp	r3, #0
   19624:	d003      	beq.n	1962e <atca_kit_parse_ecc_commands+0x82>
				return status;
   19626:	2327      	movs	r3, #39	; 0x27
   19628:	18fb      	adds	r3, r7, r3
   1962a:	781b      	ldrb	r3, [r3, #0]
   1962c:	e11f      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>

			response[SHA204_BUFFER_POS_COUNT] = 0;
   1962e:	683b      	ldr	r3, [r7, #0]
   19630:	2200      	movs	r2, #0
   19632:	701a      	strb	r2, [r3, #0]
			status = atca_kit_send_and_receive(data_load[0], &response[0]);
   19634:	697b      	ldr	r3, [r7, #20]
   19636:	2227      	movs	r2, #39	; 0x27
   19638:	18bc      	adds	r4, r7, r2
   1963a:	683a      	ldr	r2, [r7, #0]
   1963c:	0011      	movs	r1, r2
   1963e:	0018      	movs	r0, r3
   19640:	4b90      	ldr	r3, [pc, #576]	; (19884 <atca_kit_parse_ecc_commands+0x2d8>)
   19642:	4798      	blx	r3
   19644:	0003      	movs	r3, r0
   19646:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   19648:	2327      	movs	r3, #39	; 0x27
   1964a:	18fb      	adds	r3, r7, r3
   1964c:	781b      	ldrb	r3, [r3, #0]
   1964e:	2b00      	cmp	r3, #0
   19650:	d003      	beq.n	1965a <atca_kit_parse_ecc_commands+0xae>
				return status;
   19652:	2327      	movs	r3, #39	; 0x27
   19654:	18fb      	adds	r3, r7, r3
   19656:	781b      	ldrb	r3, [r3, #0]
   19658:	e109      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>

			*responseLength = response[SHA204_BUFFER_POS_COUNT];
   1965a:	683b      	ldr	r3, [r7, #0]
   1965c:	781b      	ldrb	r3, [r3, #0]
   1965e:	b29a      	uxth	r2, r3
   19660:	687b      	ldr	r3, [r7, #4]
   19662:	801a      	strh	r2, [r3, #0]
			break;
   19664:	e100      	b.n	19868 <atca_kit_parse_ecc_commands+0x2bc>

		// Wakeup
		case 'w':
			status = atcab_wakeup();
   19666:	2327      	movs	r3, #39	; 0x27
   19668:	18fc      	adds	r4, r7, r3
   1966a:	4b87      	ldr	r3, [pc, #540]	; (19888 <atca_kit_parse_ecc_commands+0x2dc>)
   1966c:	4798      	blx	r3
   1966e:	0003      	movs	r3, r0
   19670:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   19672:	2327      	movs	r3, #39	; 0x27
   19674:	18fb      	adds	r3, r7, r3
   19676:	781b      	ldrb	r3, [r3, #0]
   19678:	2b00      	cmp	r3, #0
   1967a:	d100      	bne.n	1967e <atca_kit_parse_ecc_commands+0xd2>
   1967c:	e0ed      	b.n	1985a <atca_kit_parse_ecc_commands+0x2ae>
				return status;
   1967e:	2327      	movs	r3, #39	; 0x27
   19680:	18fb      	adds	r3, r7, r3
   19682:	781b      	ldrb	r3, [r3, #0]
   19684:	e0f3      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
			break;

		// Sleep
		case 's':
			status = atcab_sleep();
   19686:	2327      	movs	r3, #39	; 0x27
   19688:	18fc      	adds	r4, r7, r3
   1968a:	4b80      	ldr	r3, [pc, #512]	; (1988c <atca_kit_parse_ecc_commands+0x2e0>)
   1968c:	4798      	blx	r3
   1968e:	0003      	movs	r3, r0
   19690:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   19692:	2327      	movs	r3, #39	; 0x27
   19694:	18fb      	adds	r3, r7, r3
   19696:	781b      	ldrb	r3, [r3, #0]
   19698:	2b00      	cmp	r3, #0
   1969a:	d100      	bne.n	1969e <atca_kit_parse_ecc_commands+0xf2>
   1969c:	e0df      	b.n	1985e <atca_kit_parse_ecc_commands+0x2b2>
				return status;
   1969e:	2327      	movs	r3, #39	; 0x27
   196a0:	18fb      	adds	r3, r7, r3
   196a2:	781b      	ldrb	r3, [r3, #0]
   196a4:	e0e3      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
			break;

		// Idle
		case 'i':
			status = atcab_idle();
   196a6:	2327      	movs	r3, #39	; 0x27
   196a8:	18fc      	adds	r4, r7, r3
   196aa:	4b79      	ldr	r3, [pc, #484]	; (19890 <atca_kit_parse_ecc_commands+0x2e4>)
   196ac:	4798      	blx	r3
   196ae:	0003      	movs	r3, r0
   196b0:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   196b2:	2327      	movs	r3, #39	; 0x27
   196b4:	18fb      	adds	r3, r7, r3
   196b6:	781b      	ldrb	r3, [r3, #0]
   196b8:	2b00      	cmp	r3, #0
   196ba:	d100      	bne.n	196be <atca_kit_parse_ecc_commands+0x112>
   196bc:	e0d1      	b.n	19862 <atca_kit_parse_ecc_commands+0x2b6>
				return status;			
   196be:	2327      	movs	r3, #39	; 0x27
   196c0:	18fb      	adds	r3, r7, r3
   196c2:	781b      	ldrb	r3, [r3, #0]
   196c4:	e0d3      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
			break;
		
		// Switch whether to wrap a Wakeup / Idle around a "talk" message.
		case 'a':
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   196c6:	6a3b      	ldr	r3, [r7, #32]
   196c8:	3302      	adds	r3, #2
   196ca:	2227      	movs	r2, #39	; 0x27
   196cc:	18bc      	adds	r4, r7, r2
   196ce:	2214      	movs	r2, #20
   196d0:	18ba      	adds	r2, r7, r2
   196d2:	211a      	movs	r1, #26
   196d4:	1879      	adds	r1, r7, r1
   196d6:	0018      	movs	r0, r3
   196d8:	4b69      	ldr	r3, [pc, #420]	; (19880 <atca_kit_parse_ecc_commands+0x2d4>)
   196da:	4798      	blx	r3
   196dc:	0003      	movs	r3, r0
   196de:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   196e0:	2327      	movs	r3, #39	; 0x27
   196e2:	18fb      	adds	r3, r7, r3
   196e4:	781b      	ldrb	r3, [r3, #0]
   196e6:	2b00      	cmp	r3, #0
   196e8:	d100      	bne.n	196ec <atca_kit_parse_ecc_commands+0x140>
   196ea:	e0bc      	b.n	19866 <atca_kit_parse_ecc_commands+0x2ba>
				return status;
   196ec:	2327      	movs	r3, #39	; 0x27
   196ee:	18fb      	adds	r3, r7, r3
   196f0:	781b      	ldrb	r3, [r3, #0]
   196f2:	e0bc      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
			break;

		// --------- calls functions in sha204_i2c.c and sha204_swi.c  ------------------
		case 'p':
			// ----------------------- "s[ha204]:p[hysical]:" ---------------------------
			pToken = strchr(&pToken[1], ':');
   196f4:	6a3b      	ldr	r3, [r7, #32]
   196f6:	3301      	adds	r3, #1
   196f8:	213a      	movs	r1, #58	; 0x3a
   196fa:	0018      	movs	r0, r3
   196fc:	4b5e      	ldr	r3, [pc, #376]	; (19878 <atca_kit_parse_ecc_commands+0x2cc>)
   196fe:	4798      	blx	r3
   19700:	0003      	movs	r3, r0
   19702:	623b      	str	r3, [r7, #32]
			if (!pToken)
   19704:	6a3b      	ldr	r3, [r7, #32]
   19706:	2b00      	cmp	r3, #0
   19708:	d103      	bne.n	19712 <atca_kit_parse_ecc_commands+0x166>
				return status;
   1970a:	2327      	movs	r3, #39	; 0x27
   1970c:	18fb      	adds	r3, r7, r3
   1970e:	781b      	ldrb	r3, [r3, #0]
   19710:	e0ad      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>

			switch (pToken[1]) {
   19712:	6a3b      	ldr	r3, [r7, #32]
   19714:	3301      	adds	r3, #1
   19716:	781b      	ldrb	r3, [r3, #0]
   19718:	2b72      	cmp	r3, #114	; 0x72
   1971a:	d039      	beq.n	19790 <atca_kit_parse_ecc_commands+0x1e4>
   1971c:	dc02      	bgt.n	19724 <atca_kit_parse_ecc_commands+0x178>
   1971e:	2b63      	cmp	r3, #99	; 0x63
   19720:	d015      	beq.n	1974e <atca_kit_parse_ecc_commands+0x1a2>
   19722:	e08c      	b.n	1983e <atca_kit_parse_ecc_commands+0x292>
   19724:	2b73      	cmp	r3, #115	; 0x73
   19726:	d066      	beq.n	197f6 <atca_kit_parse_ecc_commands+0x24a>
   19728:	2b77      	cmp	r3, #119	; 0x77
   1972a:	d000      	beq.n	1972e <atca_kit_parse_ecc_commands+0x182>
   1972c:	e087      	b.n	1983e <atca_kit_parse_ecc_commands+0x292>
				// Wake-up without receive.
				case 'w':
					status = atcab_wakeup();
   1972e:	2327      	movs	r3, #39	; 0x27
   19730:	18fc      	adds	r4, r7, r3
   19732:	4b55      	ldr	r3, [pc, #340]	; (19888 <atca_kit_parse_ecc_commands+0x2dc>)
   19734:	4798      	blx	r3
   19736:	0003      	movs	r3, r0
   19738:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   1973a:	2327      	movs	r3, #39	; 0x27
   1973c:	18fb      	adds	r3, r7, r3
   1973e:	781b      	ldrb	r3, [r3, #0]
   19740:	2b00      	cmp	r3, #0
   19742:	d100      	bne.n	19746 <atca_kit_parse_ecc_commands+0x19a>
   19744:	e080      	b.n	19848 <atca_kit_parse_ecc_commands+0x29c>
						return status;					
   19746:	2327      	movs	r3, #39	; 0x27
   19748:	18fb      	adds	r3, r7, r3
   1974a:	781b      	ldrb	r3, [r3, #0]
   1974c:	e08f      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
					break;

				case 'c':
					// Send command.
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   1974e:	6a3b      	ldr	r3, [r7, #32]
   19750:	3302      	adds	r3, #2
   19752:	2227      	movs	r2, #39	; 0x27
   19754:	18bc      	adds	r4, r7, r2
   19756:	2214      	movs	r2, #20
   19758:	18ba      	adds	r2, r7, r2
   1975a:	211a      	movs	r1, #26
   1975c:	1879      	adds	r1, r7, r1
   1975e:	0018      	movs	r0, r3
   19760:	4b47      	ldr	r3, [pc, #284]	; (19880 <atca_kit_parse_ecc_commands+0x2d4>)
   19762:	4798      	blx	r3
   19764:	0003      	movs	r3, r0
   19766:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   19768:	2327      	movs	r3, #39	; 0x27
   1976a:	18fb      	adds	r3, r7, r3
   1976c:	781b      	ldrb	r3, [r3, #0]
   1976e:	2b00      	cmp	r3, #0
   19770:	d003      	beq.n	1977a <atca_kit_parse_ecc_commands+0x1ce>
						return status;
   19772:	2327      	movs	r3, #39	; 0x27
   19774:	18fb      	adds	r3, r7, r3
   19776:	781b      	ldrb	r3, [r3, #0]
   19778:	e079      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
					dataLoad = data_load[0];
   1977a:	697b      	ldr	r3, [r7, #20]
   1977c:	61fb      	str	r3, [r7, #28]
					status = atca_kit_send_command(dataLoad);				
   1977e:	2327      	movs	r3, #39	; 0x27
   19780:	18fc      	adds	r4, r7, r3
   19782:	69fb      	ldr	r3, [r7, #28]
   19784:	0018      	movs	r0, r3
   19786:	4b43      	ldr	r3, [pc, #268]	; (19894 <atca_kit_parse_ecc_commands+0x2e8>)
   19788:	4798      	blx	r3
   1978a:	0003      	movs	r3, r0
   1978c:	7023      	strb	r3, [r4, #0]
					break;
   1978e:	e05e      	b.n	1984e <atca_kit_parse_ecc_commands+0x2a2>

				// Receive response.
				case 'r':
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   19790:	6a3b      	ldr	r3, [r7, #32]
   19792:	3302      	adds	r3, #2
   19794:	2227      	movs	r2, #39	; 0x27
   19796:	18bc      	adds	r4, r7, r2
   19798:	2214      	movs	r2, #20
   1979a:	18ba      	adds	r2, r7, r2
   1979c:	211a      	movs	r1, #26
   1979e:	1879      	adds	r1, r7, r1
   197a0:	0018      	movs	r0, r3
   197a2:	4b37      	ldr	r3, [pc, #220]	; (19880 <atca_kit_parse_ecc_commands+0x2d4>)
   197a4:	4798      	blx	r3
   197a6:	0003      	movs	r3, r0
   197a8:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   197aa:	2327      	movs	r3, #39	; 0x27
   197ac:	18fb      	adds	r3, r7, r3
   197ae:	781b      	ldrb	r3, [r3, #0]
   197b0:	2b00      	cmp	r3, #0
   197b2:	d003      	beq.n	197bc <atca_kit_parse_ecc_commands+0x210>
						return status;
   197b4:	2327      	movs	r3, #39	; 0x27
   197b6:	18fb      	adds	r3, r7, r3
   197b8:	781b      	ldrb	r3, [r3, #0]
   197ba:	e058      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
					// Reset count byte.
					response[SHA204_BUFFER_POS_COUNT] = 0;
   197bc:	683b      	ldr	r3, [r7, #0]
   197be:	2200      	movs	r2, #0
   197c0:	701a      	strb	r2, [r3, #0]
					status = atca_kit_receive_response(*data_load[0], response);
   197c2:	697b      	ldr	r3, [r7, #20]
   197c4:	781b      	ldrb	r3, [r3, #0]
   197c6:	2227      	movs	r2, #39	; 0x27
   197c8:	18bc      	adds	r4, r7, r2
   197ca:	683a      	ldr	r2, [r7, #0]
   197cc:	0011      	movs	r1, r2
   197ce:	0018      	movs	r0, r3
   197d0:	4b31      	ldr	r3, [pc, #196]	; (19898 <atca_kit_parse_ecc_commands+0x2ec>)
   197d2:	4798      	blx	r3
   197d4:	0003      	movs	r3, r0
   197d6:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   197d8:	2327      	movs	r3, #39	; 0x27
   197da:	18fb      	adds	r3, r7, r3
   197dc:	781b      	ldrb	r3, [r3, #0]
   197de:	2b00      	cmp	r3, #0
   197e0:	d003      	beq.n	197ea <atca_kit_parse_ecc_commands+0x23e>
						return status;					
   197e2:	2327      	movs	r3, #39	; 0x27
   197e4:	18fb      	adds	r3, r7, r3
   197e6:	781b      	ldrb	r3, [r3, #0]
   197e8:	e041      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>
					*responseLength = response[SHA204_BUFFER_POS_COUNT];
   197ea:	683b      	ldr	r3, [r7, #0]
   197ec:	781b      	ldrb	r3, [r3, #0]
   197ee:	b29a      	uxth	r2, r3
   197f0:	687b      	ldr	r3, [r7, #4]
   197f2:	801a      	strh	r2, [r3, #0]
					break;
   197f4:	e02b      	b.n	1984e <atca_kit_parse_ecc_commands+0x2a2>

				case 's':
					// -- "s[elect](device index | TWI address)" or "s[leep]" ----------------
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   197f6:	6a3b      	ldr	r3, [r7, #32]
   197f8:	3302      	adds	r3, #2
   197fa:	2227      	movs	r2, #39	; 0x27
   197fc:	18bc      	adds	r4, r7, r2
   197fe:	2214      	movs	r2, #20
   19800:	18ba      	adds	r2, r7, r2
   19802:	211a      	movs	r1, #26
   19804:	1879      	adds	r1, r7, r1
   19806:	0018      	movs	r0, r3
   19808:	4b1d      	ldr	r3, [pc, #116]	; (19880 <atca_kit_parse_ecc_commands+0x2d4>)
   1980a:	4798      	blx	r3
   1980c:	0003      	movs	r3, r0
   1980e:	7023      	strb	r3, [r4, #0]
					if (status == KIT_STATUS_SUCCESS) {
   19810:	2327      	movs	r3, #39	; 0x27
   19812:	18fb      	adds	r3, r7, r3
   19814:	781b      	ldrb	r3, [r3, #0]
   19816:	2b00      	cmp	r3, #0
   19818:	d102      	bne.n	19820 <atca_kit_parse_ecc_commands+0x274>
						// Select device (I2C: address; SWI: index into GPIO array).
						dataLoad = data_load[0];
   1981a:	697b      	ldr	r3, [r7, #20]
   1981c:	61fb      	str	r3, [r7, #28]
						// Sleep command
						status = atcab_idle();
						if (status != KIT_STATUS_SUCCESS)
							return status;						
					}
					break;
   1981e:	e015      	b.n	1984c <atca_kit_parse_ecc_commands+0x2a0>
						status = atcab_idle();
   19820:	2327      	movs	r3, #39	; 0x27
   19822:	18fc      	adds	r4, r7, r3
   19824:	4b1a      	ldr	r3, [pc, #104]	; (19890 <atca_kit_parse_ecc_commands+0x2e4>)
   19826:	4798      	blx	r3
   19828:	0003      	movs	r3, r0
   1982a:	7023      	strb	r3, [r4, #0]
						if (status != KIT_STATUS_SUCCESS)
   1982c:	2327      	movs	r3, #39	; 0x27
   1982e:	18fb      	adds	r3, r7, r3
   19830:	781b      	ldrb	r3, [r3, #0]
   19832:	2b00      	cmp	r3, #0
   19834:	d00a      	beq.n	1984c <atca_kit_parse_ecc_commands+0x2a0>
							return status;						
   19836:	2327      	movs	r3, #39	; 0x27
   19838:	18fb      	adds	r3, r7, r3
   1983a:	781b      	ldrb	r3, [r3, #0]
   1983c:	e017      	b.n	1986e <atca_kit_parse_ecc_commands+0x2c2>

				default:
					status = KIT_STATUS_UNKNOWN_COMMAND;
   1983e:	2327      	movs	r3, #39	; 0x27
   19840:	18fb      	adds	r3, r7, r3
   19842:	22c0      	movs	r2, #192	; 0xc0
   19844:	701a      	strb	r2, [r3, #0]
					break;
   19846:	e002      	b.n	1984e <atca_kit_parse_ecc_commands+0x2a2>
					break;
   19848:	46c0      	nop			; (mov r8, r8)
   1984a:	e00d      	b.n	19868 <atca_kit_parse_ecc_commands+0x2bc>
					break;
   1984c:	46c0      	nop			; (mov r8, r8)
					
				} // end physical			
			break;
   1984e:	e00b      	b.n	19868 <atca_kit_parse_ecc_commands+0x2bc>
			
		default:
			status = KIT_STATUS_UNKNOWN_COMMAND;
   19850:	2327      	movs	r3, #39	; 0x27
   19852:	18fb      	adds	r3, r7, r3
   19854:	22c0      	movs	r2, #192	; 0xc0
   19856:	701a      	strb	r2, [r3, #0]
			break;
   19858:	e006      	b.n	19868 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   1985a:	46c0      	nop			; (mov r8, r8)
   1985c:	e004      	b.n	19868 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   1985e:	46c0      	nop			; (mov r8, r8)
   19860:	e002      	b.n	19868 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   19862:	46c0      	nop			; (mov r8, r8)
   19864:	e000      	b.n	19868 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   19866:	46c0      	nop			; (mov r8, r8)
	}
	
	return status;
   19868:	2327      	movs	r3, #39	; 0x27
   1986a:	18fb      	adds	r3, r7, r3
   1986c:	781b      	ldrb	r3, [r3, #0]
}
   1986e:	0018      	movs	r0, r3
   19870:	46bd      	mov	sp, r7
   19872:	b00b      	add	sp, #44	; 0x2c
   19874:	bd90      	pop	{r4, r7, pc}
   19876:	46c0      	nop			; (mov r8, r8)
   19878:	0001c7a7 	.word	0x0001c7a7
   1987c:	000219f4 	.word	0x000219f4
   19880:	0001989d 	.word	0x0001989d
   19884:	00019211 	.word	0x00019211
   19888:	0000ff7d 	.word	0x0000ff7d
   1988c:	0000ffd5 	.word	0x0000ffd5
   19890:	0000ffa9 	.word	0x0000ffa9
   19894:	000193b5 	.word	0x000193b5
   19898:	000194f9 	.word	0x000194f9

0001989c <atca_kit_extract_data_load>:
 * \param[out] dataLength number of bytes extracted
 * \param[out] data pointer to pointer to binary data
 * \return status: invalid parameters or success
 */
uint8_t atca_kit_extract_data_load(const char* command, uint16_t* dataLength, uint8_t** data)
{
   1989c:	b580      	push	{r7, lr}
   1989e:	b088      	sub	sp, #32
   198a0:	af00      	add	r7, sp, #0
   198a2:	60f8      	str	r0, [r7, #12]
   198a4:	60b9      	str	r1, [r7, #8]
   198a6:	607a      	str	r2, [r7, #4]
	uint8_t status = KIT_STATUS_INVALID_PARAMS;
   198a8:	231b      	movs	r3, #27
   198aa:	18fb      	adds	r3, r7, r3
   198ac:	22c3      	movs	r2, #195	; 0xc3
   198ae:	701a      	strb	r2, [r3, #0]
	if (!command || !dataLength || !data)
   198b0:	68fb      	ldr	r3, [r7, #12]
   198b2:	2b00      	cmp	r3, #0
   198b4:	d005      	beq.n	198c2 <atca_kit_extract_data_load+0x26>
   198b6:	68bb      	ldr	r3, [r7, #8]
   198b8:	2b00      	cmp	r3, #0
   198ba:	d002      	beq.n	198c2 <atca_kit_extract_data_load+0x26>
   198bc:	687b      	ldr	r3, [r7, #4]
   198be:	2b00      	cmp	r3, #0
   198c0:	d103      	bne.n	198ca <atca_kit_extract_data_load+0x2e>
		return status;
   198c2:	231b      	movs	r3, #27
   198c4:	18fb      	adds	r3, r7, r3
   198c6:	781b      	ldrb	r3, [r3, #0]
   198c8:	e03b      	b.n	19942 <atca_kit_extract_data_load+0xa6>

	char* pToken = strchr(command, '(');
   198ca:	68fb      	ldr	r3, [r7, #12]
   198cc:	2128      	movs	r1, #40	; 0x28
   198ce:	0018      	movs	r0, r3
   198d0:	4b1e      	ldr	r3, [pc, #120]	; (1994c <atca_kit_extract_data_load+0xb0>)
   198d2:	4798      	blx	r3
   198d4:	0003      	movs	r3, r0
   198d6:	617b      	str	r3, [r7, #20]
	if (!pToken)
   198d8:	697b      	ldr	r3, [r7, #20]
   198da:	2b00      	cmp	r3, #0
   198dc:	d103      	bne.n	198e6 <atca_kit_extract_data_load+0x4a>
		return status;
   198de:	231b      	movs	r3, #27
   198e0:	18fb      	adds	r3, r7, r3
   198e2:	781b      	ldrb	r3, [r3, #0]
   198e4:	e02d      	b.n	19942 <atca_kit_extract_data_load+0xa6>

	char* dataEnd = strchr(pToken, ')');
   198e6:	697b      	ldr	r3, [r7, #20]
   198e8:	2129      	movs	r1, #41	; 0x29
   198ea:	0018      	movs	r0, r3
   198ec:	4b17      	ldr	r3, [pc, #92]	; (1994c <atca_kit_extract_data_load+0xb0>)
   198ee:	4798      	blx	r3
   198f0:	0003      	movs	r3, r0
   198f2:	61fb      	str	r3, [r7, #28]
	if (!dataEnd)
   198f4:	69fb      	ldr	r3, [r7, #28]
   198f6:	2b00      	cmp	r3, #0
   198f8:	d108      	bne.n	1990c <atca_kit_extract_data_load+0x70>
		// Allow a missing closing parenthesis.
		dataEnd = (char *) command + strlen(command);
   198fa:	68fb      	ldr	r3, [r7, #12]
   198fc:	0018      	movs	r0, r3
   198fe:	4b14      	ldr	r3, [pc, #80]	; (19950 <atca_kit_extract_data_load+0xb4>)
   19900:	4798      	blx	r3
   19902:	0002      	movs	r2, r0
   19904:	68fb      	ldr	r3, [r7, #12]
   19906:	189b      	adds	r3, r3, r2
   19908:	61fb      	str	r3, [r7, #28]
   1990a:	e002      	b.n	19912 <atca_kit_extract_data_load+0x76>
	else
		dataEnd--;
   1990c:	69fb      	ldr	r3, [r7, #28]
   1990e:	3b01      	subs	r3, #1
   19910:	61fb      	str	r3, [r7, #28]

	uint16_t asciiLength = (uint16_t) (dataEnd - pToken);
   19912:	69fa      	ldr	r2, [r7, #28]
   19914:	697b      	ldr	r3, [r7, #20]
   19916:	1ad2      	subs	r2, r2, r3
   19918:	2312      	movs	r3, #18
   1991a:	18fb      	adds	r3, r7, r3
   1991c:	801a      	strh	r2, [r3, #0]
	*data = (uint8_t *) pToken + 1;
   1991e:	697b      	ldr	r3, [r7, #20]
   19920:	1c5a      	adds	r2, r3, #1
   19922:	687b      	ldr	r3, [r7, #4]
   19924:	601a      	str	r2, [r3, #0]
	*dataLength = atca_kit_convert_ascii_to_binary(asciiLength, *data);
   19926:	687b      	ldr	r3, [r7, #4]
   19928:	681a      	ldr	r2, [r3, #0]
   1992a:	2312      	movs	r3, #18
   1992c:	18fb      	adds	r3, r7, r3
   1992e:	881b      	ldrh	r3, [r3, #0]
   19930:	0011      	movs	r1, r2
   19932:	0018      	movs	r0, r3
   19934:	4b07      	ldr	r3, [pc, #28]	; (19954 <atca_kit_extract_data_load+0xb8>)
   19936:	4798      	blx	r3
   19938:	0003      	movs	r3, r0
   1993a:	001a      	movs	r2, r3
   1993c:	68bb      	ldr	r3, [r7, #8]
   1993e:	801a      	strh	r2, [r3, #0]

	return KIT_STATUS_SUCCESS;
   19940:	2300      	movs	r3, #0
}
   19942:	0018      	movs	r0, r3
   19944:	46bd      	mov	sp, r7
   19946:	b008      	add	sp, #32
   19948:	bd80      	pop	{r7, pc}
   1994a:	46c0      	nop			; (mov r8, r8)
   1994c:	0001c7a7 	.word	0x0001c7a7
   19950:	0001c7d3 	.word	0x0001c7d3
   19954:	00018aa1 	.word	0x00018aa1

00019958 <atca_kit_create_usb_packet>:
    \param[in] length number of bytes in data load plus one status byte
    \param[in] buffer pointer to data
    \return length of ASCII data
*/
uint16_t atca_kit_create_usb_packet(uint16_t length, uint8_t *buffer)
{
   19958:	b590      	push	{r4, r7, lr}
   1995a:	b085      	sub	sp, #20
   1995c:	af00      	add	r7, sp, #0
   1995e:	0002      	movs	r2, r0
   19960:	6039      	str	r1, [r7, #0]
   19962:	1dbb      	adds	r3, r7, #6
   19964:	801a      	strh	r2, [r3, #0]
	uint16_t binBufferIndex = length - 1;
   19966:	230e      	movs	r3, #14
   19968:	18fb      	adds	r3, r7, r3
   1996a:	1dba      	adds	r2, r7, #6
   1996c:	8812      	ldrh	r2, [r2, #0]
   1996e:	3a01      	subs	r2, #1
   19970:	801a      	strh	r2, [r3, #0]
	// Size of data load is length minus status byte.
	uint16_t asciiLength = 2 * (length - 1) + 5; // + 5: 2 status byte characters + '(' + ")\n"
   19972:	1dbb      	adds	r3, r7, #6
   19974:	881b      	ldrh	r3, [r3, #0]
   19976:	3b01      	subs	r3, #1
   19978:	b29b      	uxth	r3, r3
   1997a:	18db      	adds	r3, r3, r3
   1997c:	b29a      	uxth	r2, r3
   1997e:	230a      	movs	r3, #10
   19980:	18fb      	adds	r3, r7, r3
   19982:	3205      	adds	r2, #5
   19984:	801a      	strh	r2, [r3, #0]
	uint16_t asciiBufferIndex = asciiLength - 1;
   19986:	230c      	movs	r3, #12
   19988:	18fb      	adds	r3, r7, r3
   1998a:	220a      	movs	r2, #10
   1998c:	18ba      	adds	r2, r7, r2
   1998e:	8812      	ldrh	r2, [r2, #0]
   19990:	3a01      	subs	r2, #1
   19992:	801a      	strh	r2, [r3, #0]
	uint8_t byteValue;

	// Terminate ASCII packet.
	buffer[asciiBufferIndex--] = KIT_EOP;
   19994:	230c      	movs	r3, #12
   19996:	18fb      	adds	r3, r7, r3
   19998:	881b      	ldrh	r3, [r3, #0]
   1999a:	220c      	movs	r2, #12
   1999c:	18ba      	adds	r2, r7, r2
   1999e:	1e59      	subs	r1, r3, #1
   199a0:	8011      	strh	r1, [r2, #0]
   199a2:	001a      	movs	r2, r3
   199a4:	683b      	ldr	r3, [r7, #0]
   199a6:	189b      	adds	r3, r3, r2
   199a8:	220a      	movs	r2, #10
   199aa:	701a      	strb	r2, [r3, #0]

	// Append ')'.
	buffer[asciiBufferIndex--] = ')';
   199ac:	230c      	movs	r3, #12
   199ae:	18fb      	adds	r3, r7, r3
   199b0:	881b      	ldrh	r3, [r3, #0]
   199b2:	220c      	movs	r2, #12
   199b4:	18ba      	adds	r2, r7, r2
   199b6:	1e59      	subs	r1, r3, #1
   199b8:	8011      	strh	r1, [r2, #0]
   199ba:	001a      	movs	r2, r3
   199bc:	683b      	ldr	r3, [r7, #0]
   199be:	189b      	adds	r3, r3, r2
   199c0:	2229      	movs	r2, #41	; 0x29
   199c2:	701a      	strb	r2, [r3, #0]

	// Convert binary data to hex-ascii starting with the last byte of data.
	while (binBufferIndex)
   199c4:	e033      	b.n	19a2e <atca_kit_create_usb_packet+0xd6>
	{
		byteValue = buffer[binBufferIndex--];
   199c6:	230e      	movs	r3, #14
   199c8:	18fb      	adds	r3, r7, r3
   199ca:	881b      	ldrh	r3, [r3, #0]
   199cc:	220e      	movs	r2, #14
   199ce:	18ba      	adds	r2, r7, r2
   199d0:	1e59      	subs	r1, r3, #1
   199d2:	8011      	strh	r1, [r2, #0]
   199d4:	001a      	movs	r2, r3
   199d6:	683b      	ldr	r3, [r7, #0]
   199d8:	189a      	adds	r2, r3, r2
   199da:	2309      	movs	r3, #9
   199dc:	18fb      	adds	r3, r7, r3
   199de:	7812      	ldrb	r2, [r2, #0]
   199e0:	701a      	strb	r2, [r3, #0]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
   199e2:	230c      	movs	r3, #12
   199e4:	18fb      	adds	r3, r7, r3
   199e6:	881b      	ldrh	r3, [r3, #0]
   199e8:	220c      	movs	r2, #12
   199ea:	18ba      	adds	r2, r7, r2
   199ec:	1e59      	subs	r1, r3, #1
   199ee:	8011      	strh	r1, [r2, #0]
   199f0:	001a      	movs	r2, r3
   199f2:	683b      	ldr	r3, [r7, #0]
   199f4:	189c      	adds	r4, r3, r2
   199f6:	2309      	movs	r3, #9
   199f8:	18fb      	adds	r3, r7, r3
   199fa:	781b      	ldrb	r3, [r3, #0]
   199fc:	0018      	movs	r0, r3
   199fe:	4b2b      	ldr	r3, [pc, #172]	; (19aac <atca_kit_create_usb_packet+0x154>)
   19a00:	4798      	blx	r3
   19a02:	0003      	movs	r3, r0
   19a04:	7023      	strb	r3, [r4, #0]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
   19a06:	230c      	movs	r3, #12
   19a08:	18fb      	adds	r3, r7, r3
   19a0a:	881b      	ldrh	r3, [r3, #0]
   19a0c:	220c      	movs	r2, #12
   19a0e:	18ba      	adds	r2, r7, r2
   19a10:	1e59      	subs	r1, r3, #1
   19a12:	8011      	strh	r1, [r2, #0]
   19a14:	001a      	movs	r2, r3
   19a16:	683b      	ldr	r3, [r7, #0]
   19a18:	189c      	adds	r4, r3, r2
   19a1a:	2309      	movs	r3, #9
   19a1c:	18fb      	adds	r3, r7, r3
   19a1e:	781b      	ldrb	r3, [r3, #0]
   19a20:	091b      	lsrs	r3, r3, #4
   19a22:	b2db      	uxtb	r3, r3
   19a24:	0018      	movs	r0, r3
   19a26:	4b21      	ldr	r3, [pc, #132]	; (19aac <atca_kit_create_usb_packet+0x154>)
   19a28:	4798      	blx	r3
   19a2a:	0003      	movs	r3, r0
   19a2c:	7023      	strb	r3, [r4, #0]
	while (binBufferIndex)
   19a2e:	230e      	movs	r3, #14
   19a30:	18fb      	adds	r3, r7, r3
   19a32:	881b      	ldrh	r3, [r3, #0]
   19a34:	2b00      	cmp	r3, #0
   19a36:	d1c6      	bne.n	199c6 <atca_kit_create_usb_packet+0x6e>
	}

	// Start data load with open parenthesis.
	buffer[asciiBufferIndex--] = '(';
   19a38:	230c      	movs	r3, #12
   19a3a:	18fb      	adds	r3, r7, r3
   19a3c:	881b      	ldrh	r3, [r3, #0]
   19a3e:	220c      	movs	r2, #12
   19a40:	18ba      	adds	r2, r7, r2
   19a42:	1e59      	subs	r1, r3, #1
   19a44:	8011      	strh	r1, [r2, #0]
   19a46:	001a      	movs	r2, r3
   19a48:	683b      	ldr	r3, [r7, #0]
   19a4a:	189b      	adds	r3, r3, r2
   19a4c:	2228      	movs	r2, #40	; 0x28
   19a4e:	701a      	strb	r2, [r3, #0]

	// Convert first byte (function return value) to hex-ascii.
	byteValue = buffer[0];
   19a50:	2309      	movs	r3, #9
   19a52:	18fb      	adds	r3, r7, r3
   19a54:	683a      	ldr	r2, [r7, #0]
   19a56:	7812      	ldrb	r2, [r2, #0]
   19a58:	701a      	strb	r2, [r3, #0]
	buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
   19a5a:	230c      	movs	r3, #12
   19a5c:	18fb      	adds	r3, r7, r3
   19a5e:	881b      	ldrh	r3, [r3, #0]
   19a60:	220c      	movs	r2, #12
   19a62:	18ba      	adds	r2, r7, r2
   19a64:	1e59      	subs	r1, r3, #1
   19a66:	8011      	strh	r1, [r2, #0]
   19a68:	001a      	movs	r2, r3
   19a6a:	683b      	ldr	r3, [r7, #0]
   19a6c:	189c      	adds	r4, r3, r2
   19a6e:	2309      	movs	r3, #9
   19a70:	18fb      	adds	r3, r7, r3
   19a72:	781b      	ldrb	r3, [r3, #0]
   19a74:	0018      	movs	r0, r3
   19a76:	4b0d      	ldr	r3, [pc, #52]	; (19aac <atca_kit_create_usb_packet+0x154>)
   19a78:	4798      	blx	r3
   19a7a:	0003      	movs	r3, r0
   19a7c:	7023      	strb	r3, [r4, #0]
	buffer[asciiBufferIndex] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
   19a7e:	230c      	movs	r3, #12
   19a80:	18fb      	adds	r3, r7, r3
   19a82:	881b      	ldrh	r3, [r3, #0]
   19a84:	683a      	ldr	r2, [r7, #0]
   19a86:	18d4      	adds	r4, r2, r3
   19a88:	2309      	movs	r3, #9
   19a8a:	18fb      	adds	r3, r7, r3
   19a8c:	781b      	ldrb	r3, [r3, #0]
   19a8e:	091b      	lsrs	r3, r3, #4
   19a90:	b2db      	uxtb	r3, r3
   19a92:	0018      	movs	r0, r3
   19a94:	4b05      	ldr	r3, [pc, #20]	; (19aac <atca_kit_create_usb_packet+0x154>)
   19a96:	4798      	blx	r3
   19a98:	0003      	movs	r3, r0
   19a9a:	7023      	strb	r3, [r4, #0]

	return asciiLength;
   19a9c:	230a      	movs	r3, #10
   19a9e:	18fb      	adds	r3, r7, r3
   19aa0:	881b      	ldrh	r3, [r3, #0]
}
   19aa2:	0018      	movs	r0, r3
   19aa4:	46bd      	mov	sp, r7
   19aa6:	b005      	add	sp, #20
   19aa8:	bd90      	pop	{r4, r7, pc}
   19aaa:	46c0      	nop			; (mov r8, r8)
   19aac:	000189ed 	.word	0x000189ed

00019ab0 <atca_kit_convert_data>:
 * \param[in] length number of bytes to send
 * \param[in] buffer pointer to tx buffer
 * \return new length of data
 */
uint16_t atca_kit_convert_data(uint16_t length, uint8_t *buffer)
{
   19ab0:	b580      	push	{r7, lr}
   19ab2:	b082      	sub	sp, #8
   19ab4:	af00      	add	r7, sp, #0
   19ab6:	0002      	movs	r2, r0
   19ab8:	6039      	str	r1, [r7, #0]
   19aba:	1dbb      	adds	r3, r7, #6
   19abc:	801a      	strh	r2, [r3, #0]
	if (length > DEVICE_BUFFER_SIZE_MAX_RX) {
   19abe:	1dbb      	adds	r3, r7, #6
   19ac0:	881b      	ldrh	r3, [r3, #0]
   19ac2:	2b7b      	cmp	r3, #123	; 0x7b
   19ac4:	d905      	bls.n	19ad2 <atca_kit_convert_data+0x22>
		buffer[0] = KIT_STATUS_USB_TX_OVERFLOW;
   19ac6:	683b      	ldr	r3, [r7, #0]
   19ac8:	22c2      	movs	r2, #194	; 0xc2
   19aca:	701a      	strb	r2, [r3, #0]
		length = DEVICE_BUFFER_SIZE_MAX_RX;
   19acc:	1dbb      	adds	r3, r7, #6
   19ace:	227b      	movs	r2, #123	; 0x7b
   19ad0:	801a      	strh	r2, [r3, #0]
	}
	return atca_kit_create_usb_packet(length, buffer);
   19ad2:	683a      	ldr	r2, [r7, #0]
   19ad4:	1dbb      	adds	r3, r7, #6
   19ad6:	881b      	ldrh	r3, [r3, #0]
   19ad8:	0011      	movs	r1, r2
   19ada:	0018      	movs	r0, r3
   19adc:	4b03      	ldr	r3, [pc, #12]	; (19aec <atca_kit_convert_data+0x3c>)
   19ade:	4798      	blx	r3
   19ae0:	0003      	movs	r3, r0
}
   19ae2:	0018      	movs	r0, r3
   19ae4:	46bd      	mov	sp, r7
   19ae6:	b002      	add	sp, #8
   19ae8:	bd80      	pop	{r7, pc}
   19aea:	46c0      	nop			; (mov r8, r8)
   19aec:	00019959 	.word	0x00019959

00019af0 <atca_kit_process_usb_packet>:
 * \param[in] rx_length is length of received packet 
 * \param[in] txLength is Tx length to be sent to Host
 * returns pointer of buffer to be sent
 */
uint8_t* atca_kit_process_usb_packet(uint16_t rx_length, uint16_t *txLength)
{
   19af0:	b5b0      	push	{r4, r5, r7, lr}
   19af2:	b08a      	sub	sp, #40	; 0x28
   19af4:	af02      	add	r7, sp, #8
   19af6:	0002      	movs	r2, r0
   19af8:	6039      	str	r1, [r7, #0]
   19afa:	1dbb      	adds	r3, r7, #6
   19afc:	801a      	strh	r2, [r3, #0]
	uint8_t status = KIT_STATUS_SUCCESS;
   19afe:	231f      	movs	r3, #31
   19b00:	18fb      	adds	r3, r7, r3
   19b02:	2200      	movs	r2, #0
   19b04:	701a      	strb	r2, [r3, #0]
	uint8_t responseIsAscii = 0;
   19b06:	230e      	movs	r3, #14
   19b08:	18fb      	adds	r3, r7, r3
   19b0a:	2200      	movs	r2, #0
   19b0c:	701a      	strb	r2, [r3, #0]
	uint16_t rxLength = rx_length - 1;	// except for a line feed character
   19b0e:	2314      	movs	r3, #20
   19b10:	18fb      	adds	r3, r7, r3
   19b12:	1dba      	adds	r2, r7, #6
   19b14:	8812      	ldrh	r2, [r2, #0]
   19b16:	3a01      	subs	r2, #1
   19b18:	801a      	strh	r2, [r3, #0]
	uint8_t* txBuffer = atca_kit_get_tx_buffer();
   19b1a:	4b66      	ldr	r3, [pc, #408]	; (19cb4 <atca_kit_process_usb_packet+0x1c4>)
   19b1c:	4798      	blx	r3
   19b1e:	0003      	movs	r3, r0
   19b20:	613b      	str	r3, [r7, #16]
	uint8_t* pRxBuffer = atca_kit_get_rx_buffer();
   19b22:	4b65      	ldr	r3, [pc, #404]	; (19cb8 <atca_kit_process_usb_packet+0x1c8>)
   19b24:	4798      	blx	r3
   19b26:	0003      	movs	r3, r0
   19b28:	61bb      	str	r3, [r7, #24]

	if (rxPacketStatus != KIT_STATUS_SUCCESS) {
   19b2a:	4b64      	ldr	r3, [pc, #400]	; (19cbc <atca_kit_process_usb_packet+0x1cc>)
   19b2c:	781b      	ldrb	r3, [r3, #0]
   19b2e:	2b00      	cmp	r3, #0
   19b30:	d011      	beq.n	19b56 <atca_kit_process_usb_packet+0x66>
		pucUsbTxBuffer[0] = rxPacketStatus;
   19b32:	4b62      	ldr	r3, [pc, #392]	; (19cbc <atca_kit_process_usb_packet+0x1cc>)
   19b34:	781a      	ldrb	r2, [r3, #0]
   19b36:	4b62      	ldr	r3, [pc, #392]	; (19cc0 <atca_kit_process_usb_packet+0x1d0>)
   19b38:	701a      	strb	r2, [r3, #0]
		*txLength = 1;
   19b3a:	683b      	ldr	r3, [r7, #0]
   19b3c:	2201      	movs	r2, #1
   19b3e:	801a      	strh	r2, [r3, #0]
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
   19b40:	683b      	ldr	r3, [r7, #0]
   19b42:	881b      	ldrh	r3, [r3, #0]
   19b44:	4a5e      	ldr	r2, [pc, #376]	; (19cc0 <atca_kit_process_usb_packet+0x1d0>)
   19b46:	0011      	movs	r1, r2
   19b48:	0018      	movs	r0, r3
   19b4a:	4b5e      	ldr	r3, [pc, #376]	; (19cc4 <atca_kit_process_usb_packet+0x1d4>)
   19b4c:	4798      	blx	r3
   19b4e:	0003      	movs	r3, r0
   19b50:	001a      	movs	r2, r3
   19b52:	683b      	ldr	r3, [r7, #0]
   19b54:	801a      	strh	r2, [r3, #0]
	}

	memset(pucUsbTxBuffer, 0, sizeof(pucUsbTxBuffer));
   19b56:	4a5c      	ldr	r2, [pc, #368]	; (19cc8 <atca_kit_process_usb_packet+0x1d8>)
   19b58:	4b59      	ldr	r3, [pc, #356]	; (19cc0 <atca_kit_process_usb_packet+0x1d0>)
   19b5a:	2100      	movs	r1, #0
   19b5c:	0018      	movs	r0, r3
   19b5e:	4b5b      	ldr	r3, [pc, #364]	; (19ccc <atca_kit_process_usb_packet+0x1dc>)
   19b60:	4798      	blx	r3

	// Process packet.
	for (uint16_t i = 0; i < rxLength; i++)
   19b62:	2316      	movs	r3, #22
   19b64:	18fb      	adds	r3, r7, r3
   19b66:	2200      	movs	r2, #0
   19b68:	801a      	strh	r2, [r3, #0]
   19b6a:	e02c      	b.n	19bc6 <atca_kit_process_usb_packet+0xd6>
		pRxBuffer[i] = tolower(pRxBuffer[i]);
   19b6c:	2316      	movs	r3, #22
   19b6e:	18fb      	adds	r3, r7, r3
   19b70:	881b      	ldrh	r3, [r3, #0]
   19b72:	69ba      	ldr	r2, [r7, #24]
   19b74:	18d4      	adds	r4, r2, r3
   19b76:	2316      	movs	r3, #22
   19b78:	18fb      	adds	r3, r7, r3
   19b7a:	881b      	ldrh	r3, [r3, #0]
   19b7c:	69ba      	ldr	r2, [r7, #24]
   19b7e:	18d2      	adds	r2, r2, r3
   19b80:	230f      	movs	r3, #15
   19b82:	18fb      	adds	r3, r7, r3
   19b84:	7812      	ldrb	r2, [r2, #0]
   19b86:	701a      	strb	r2, [r3, #0]
   19b88:	4b51      	ldr	r3, [pc, #324]	; (19cd0 <atca_kit_process_usb_packet+0x1e0>)
   19b8a:	4798      	blx	r3
   19b8c:	0002      	movs	r2, r0
   19b8e:	230f      	movs	r3, #15
   19b90:	18fb      	adds	r3, r7, r3
   19b92:	781b      	ldrb	r3, [r3, #0]
   19b94:	3301      	adds	r3, #1
   19b96:	18d3      	adds	r3, r2, r3
   19b98:	781b      	ldrb	r3, [r3, #0]
   19b9a:	001a      	movs	r2, r3
   19b9c:	2303      	movs	r3, #3
   19b9e:	4013      	ands	r3, r2
   19ba0:	2b01      	cmp	r3, #1
   19ba2:	d104      	bne.n	19bae <atca_kit_process_usb_packet+0xbe>
   19ba4:	230f      	movs	r3, #15
   19ba6:	18fb      	adds	r3, r7, r3
   19ba8:	781b      	ldrb	r3, [r3, #0]
   19baa:	3320      	adds	r3, #32
   19bac:	e002      	b.n	19bb4 <atca_kit_process_usb_packet+0xc4>
   19bae:	230f      	movs	r3, #15
   19bb0:	18fb      	adds	r3, r7, r3
   19bb2:	781b      	ldrb	r3, [r3, #0]
   19bb4:	b2db      	uxtb	r3, r3
   19bb6:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < rxLength; i++)
   19bb8:	2316      	movs	r3, #22
   19bba:	18fb      	adds	r3, r7, r3
   19bbc:	881a      	ldrh	r2, [r3, #0]
   19bbe:	2316      	movs	r3, #22
   19bc0:	18fb      	adds	r3, r7, r3
   19bc2:	3201      	adds	r2, #1
   19bc4:	801a      	strh	r2, [r3, #0]
   19bc6:	2316      	movs	r3, #22
   19bc8:	18fa      	adds	r2, r7, r3
   19bca:	2314      	movs	r3, #20
   19bcc:	18fb      	adds	r3, r7, r3
   19bce:	8812      	ldrh	r2, [r2, #0]
   19bd0:	881b      	ldrh	r3, [r3, #0]
   19bd2:	429a      	cmp	r2, r3
   19bd4:	d3ca      	bcc.n	19b6c <atca_kit_process_usb_packet+0x7c>

	if (pRxBuffer[0] == 'l') {	// lib
   19bd6:	69bb      	ldr	r3, [r7, #24]
   19bd8:	781b      	ldrb	r3, [r3, #0]
   19bda:	2b6c      	cmp	r3, #108	; 0x6c
   19bdc:	d114      	bne.n	19c08 <atca_kit_process_usb_packet+0x118>
		// "lib" as the first field is optional. Move rx pointer to the next field.
		pRxBuffer = memchr(pRxBuffer, ':', rxBufferIndex);
   19bde:	4b3d      	ldr	r3, [pc, #244]	; (19cd4 <atca_kit_process_usb_packet+0x1e4>)
   19be0:	881b      	ldrh	r3, [r3, #0]
   19be2:	001a      	movs	r2, r3
   19be4:	69bb      	ldr	r3, [r7, #24]
   19be6:	213a      	movs	r1, #58	; 0x3a
   19be8:	0018      	movs	r0, r3
   19bea:	4b3b      	ldr	r3, [pc, #236]	; (19cd8 <atca_kit_process_usb_packet+0x1e8>)
   19bec:	4798      	blx	r3
   19bee:	0003      	movs	r3, r0
   19bf0:	61bb      	str	r3, [r7, #24]
		if (!pRxBuffer)
   19bf2:	69bb      	ldr	r3, [r7, #24]
   19bf4:	2b00      	cmp	r3, #0
   19bf6:	d104      	bne.n	19c02 <atca_kit_process_usb_packet+0x112>
			status = KIT_STATUS_UNKNOWN_COMMAND;
   19bf8:	231f      	movs	r3, #31
   19bfa:	18fb      	adds	r3, r7, r3
   19bfc:	22c0      	movs	r2, #192	; 0xc0
   19bfe:	701a      	strb	r2, [r3, #0]
   19c00:	e002      	b.n	19c08 <atca_kit_process_usb_packet+0x118>
		else
			pRxBuffer++;
   19c02:	69bb      	ldr	r3, [r7, #24]
   19c04:	3301      	adds	r3, #1
   19c06:	61bb      	str	r3, [r7, #24]
	}

	switch (pRxBuffer[0]) {
   19c08:	69bb      	ldr	r3, [r7, #24]
   19c0a:	781b      	ldrb	r3, [r3, #0]
   19c0c:	2b65      	cmp	r3, #101	; 0x65
   19c0e:	d004      	beq.n	19c1a <atca_kit_process_usb_packet+0x12a>
   19c10:	2b73      	cmp	r3, #115	; 0x73
   19c12:	d002      	beq.n	19c1a <atca_kit_process_usb_packet+0x12a>
   19c14:	2b62      	cmp	r3, #98	; 0x62
   19c16:	d00e      	beq.n	19c36 <atca_kit_process_usb_packet+0x146>
   19c18:	e020      	b.n	19c5c <atca_kit_process_usb_packet+0x16c>

		case 's':
		case 'e':			
			status = atca_kit_parse_ecc_commands(rxLength, (uint8_t *)pRxBuffer, txLength, pucUsbTxBuffer + 1);
   19c1a:	4d30      	ldr	r5, [pc, #192]	; (19cdc <atca_kit_process_usb_packet+0x1ec>)
   19c1c:	231f      	movs	r3, #31
   19c1e:	18fc      	adds	r4, r7, r3
   19c20:	683a      	ldr	r2, [r7, #0]
   19c22:	69b9      	ldr	r1, [r7, #24]
   19c24:	2314      	movs	r3, #20
   19c26:	18fb      	adds	r3, r7, r3
   19c28:	8818      	ldrh	r0, [r3, #0]
   19c2a:	002b      	movs	r3, r5
   19c2c:	4d2c      	ldr	r5, [pc, #176]	; (19ce0 <atca_kit_process_usb_packet+0x1f0>)
   19c2e:	47a8      	blx	r5
   19c30:	0003      	movs	r3, r0
   19c32:	7023      	strb	r3, [r4, #0]
			break;
   19c34:	e01a      	b.n	19c6c <atca_kit_process_usb_packet+0x17c>

		case 'b':
			// board level commands ("b[oard]")
			status = atca_kit_parse_board_commands((uint8_t) rxLength, (uint8_t *)pRxBuffer, txLength, txBuffer, &responseIsAscii);
   19c36:	2314      	movs	r3, #20
   19c38:	18fb      	adds	r3, r7, r3
   19c3a:	881b      	ldrh	r3, [r3, #0]
   19c3c:	b2db      	uxtb	r3, r3
   19c3e:	b298      	uxth	r0, r3
   19c40:	231f      	movs	r3, #31
   19c42:	18fc      	adds	r4, r7, r3
   19c44:	693d      	ldr	r5, [r7, #16]
   19c46:	683a      	ldr	r2, [r7, #0]
   19c48:	69b9      	ldr	r1, [r7, #24]
   19c4a:	230e      	movs	r3, #14
   19c4c:	18fb      	adds	r3, r7, r3
   19c4e:	9300      	str	r3, [sp, #0]
   19c50:	002b      	movs	r3, r5
   19c52:	4d24      	ldr	r5, [pc, #144]	; (19ce4 <atca_kit_process_usb_packet+0x1f4>)
   19c54:	47a8      	blx	r5
   19c56:	0003      	movs	r3, r0
   19c58:	7023      	strb	r3, [r4, #0]
			break;
   19c5a:	e007      	b.n	19c6c <atca_kit_process_usb_packet+0x17c>

		default :
			status = KIT_STATUS_UNKNOWN_COMMAND;
   19c5c:	231f      	movs	r3, #31
   19c5e:	18fb      	adds	r3, r7, r3
   19c60:	22c0      	movs	r2, #192	; 0xc0
   19c62:	701a      	strb	r2, [r3, #0]
			*txLength = 1;			
   19c64:	683b      	ldr	r3, [r7, #0]
   19c66:	2201      	movs	r2, #1
   19c68:	801a      	strh	r2, [r3, #0]
			break;
   19c6a:	46c0      	nop			; (mov r8, r8)
	}

	if (!responseIsAscii) {
   19c6c:	230e      	movs	r3, #14
   19c6e:	18fb      	adds	r3, r7, r3
   19c70:	781b      	ldrb	r3, [r3, #0]
   19c72:	2b00      	cmp	r3, #0
   19c74:	d119      	bne.n	19caa <atca_kit_process_usb_packet+0x1ba>
		// Copy leading function return byte.
		pucUsbTxBuffer[0] = status;
   19c76:	4b12      	ldr	r3, [pc, #72]	; (19cc0 <atca_kit_process_usb_packet+0x1d0>)
   19c78:	221f      	movs	r2, #31
   19c7a:	18ba      	adds	r2, r7, r2
   19c7c:	7812      	ldrb	r2, [r2, #0]
   19c7e:	701a      	strb	r2, [r3, #0]
		// Tell atca_kit_convert_data the correct txLength.
		if (*txLength < DEVICE_BUFFER_SIZE_MAX_RX)
   19c80:	683b      	ldr	r3, [r7, #0]
   19c82:	881b      	ldrh	r3, [r3, #0]
   19c84:	2b7a      	cmp	r3, #122	; 0x7a
   19c86:	d805      	bhi.n	19c94 <atca_kit_process_usb_packet+0x1a4>
			(*txLength)++;
   19c88:	683b      	ldr	r3, [r7, #0]
   19c8a:	881b      	ldrh	r3, [r3, #0]
   19c8c:	3301      	adds	r3, #1
   19c8e:	b29a      	uxth	r2, r3
   19c90:	683b      	ldr	r3, [r7, #0]
   19c92:	801a      	strh	r2, [r3, #0]
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
   19c94:	683b      	ldr	r3, [r7, #0]
   19c96:	881b      	ldrh	r3, [r3, #0]
   19c98:	4a09      	ldr	r2, [pc, #36]	; (19cc0 <atca_kit_process_usb_packet+0x1d0>)
   19c9a:	0011      	movs	r1, r2
   19c9c:	0018      	movs	r0, r3
   19c9e:	4b09      	ldr	r3, [pc, #36]	; (19cc4 <atca_kit_process_usb_packet+0x1d4>)
   19ca0:	4798      	blx	r3
   19ca2:	0003      	movs	r3, r0
   19ca4:	001a      	movs	r2, r3
   19ca6:	683b      	ldr	r3, [r7, #0]
   19ca8:	801a      	strh	r2, [r3, #0]
	}

	return txBuffer;
   19caa:	693b      	ldr	r3, [r7, #16]
}
   19cac:	0018      	movs	r0, r3
   19cae:	46bd      	mov	sp, r7
   19cb0:	b008      	add	sp, #32
   19cb2:	bdb0      	pop	{r4, r5, r7, pc}
   19cb4:	00018965 	.word	0x00018965
   19cb8:	00018955 	.word	0x00018955
   19cbc:	200026b8 	.word	0x200026b8
   19cc0:	20001dbc 	.word	0x20001dbc
   19cc4:	00019ab1 	.word	0x00019ab1
   19cc8:	000008fc 	.word	0x000008fc
   19ccc:	0001c21b 	.word	0x0001c21b
   19cd0:	0001c071 	.word	0x0001c071
   19cd4:	200026ba 	.word	0x200026ba
   19cd8:	0001c1b1 	.word	0x0001c1b1
   19cdc:	20001dbd 	.word	0x20001dbd
   19ce0:	000195ad 	.word	0x000195ad
   19ce4:	00018cb5 	.word	0x00018cb5

00019ce8 <atca_kit_main_handler>:

/** \brief This handler is to receive and send USB packets with Host over the HID interface.
 */
void atca_kit_main_handler(void)
{
   19ce8:	b580      	push	{r7, lr}
   19cea:	b082      	sub	sp, #8
   19cec:	af00      	add	r7, sp, #0
    uint16_t txlen;

    if(g_usb_message_received)
   19cee:	4b19      	ldr	r3, [pc, #100]	; (19d54 <atca_kit_main_handler+0x6c>)
   19cf0:	681b      	ldr	r3, [r3, #0]
   19cf2:	2b00      	cmp	r3, #0
   19cf4:	d029      	beq.n	19d4a <atca_kit_main_handler+0x62>
    {
        atca_kit_counter_set(5000);
   19cf6:	4b18      	ldr	r3, [pc, #96]	; (19d58 <atca_kit_main_handler+0x70>)
   19cf8:	0018      	movs	r0, r3
   19cfa:	4b18      	ldr	r3, [pc, #96]	; (19d5c <atca_kit_main_handler+0x74>)
   19cfc:	4798      	blx	r3

        DEBUG_PRINTF("Kit RX: %d, %s\r\n", g_usb_buffer_length, pucUsbRxBuffer);
   19cfe:	4b18      	ldr	r3, [pc, #96]	; (19d60 <atca_kit_main_handler+0x78>)
   19d00:	881b      	ldrh	r3, [r3, #0]
   19d02:	0019      	movs	r1, r3
   19d04:	4a17      	ldr	r2, [pc, #92]	; (19d64 <atca_kit_main_handler+0x7c>)
   19d06:	4b18      	ldr	r3, [pc, #96]	; (19d68 <atca_kit_main_handler+0x80>)
   19d08:	0018      	movs	r0, r3
   19d0a:	4b18      	ldr	r3, [pc, #96]	; (19d6c <atca_kit_main_handler+0x84>)
   19d0c:	4798      	blx	r3

        atca_kit_process_usb_packet(g_usb_buffer_length, &txlen);
   19d0e:	4b14      	ldr	r3, [pc, #80]	; (19d60 <atca_kit_main_handler+0x78>)
   19d10:	881b      	ldrh	r3, [r3, #0]
   19d12:	1dba      	adds	r2, r7, #6
   19d14:	0011      	movs	r1, r2
   19d16:	0018      	movs	r0, r3
   19d18:	4b15      	ldr	r3, [pc, #84]	; (19d70 <atca_kit_main_handler+0x88>)
   19d1a:	4798      	blx	r3
        g_usb_buffer_length = 0;
   19d1c:	4b10      	ldr	r3, [pc, #64]	; (19d60 <atca_kit_main_handler+0x78>)
   19d1e:	2200      	movs	r2, #0
   19d20:	801a      	strh	r2, [r3, #0]
        
        DEBUG_PRINTF("Kit TX: %d, %s\r\n", txlen, pucUsbTxBuffer);
   19d22:	1dbb      	adds	r3, r7, #6
   19d24:	881b      	ldrh	r3, [r3, #0]
   19d26:	0019      	movs	r1, r3
   19d28:	4a12      	ldr	r2, [pc, #72]	; (19d74 <atca_kit_main_handler+0x8c>)
   19d2a:	4b13      	ldr	r3, [pc, #76]	; (19d78 <atca_kit_main_handler+0x90>)
   19d2c:	0018      	movs	r0, r3
   19d2e:	4b0f      	ldr	r3, [pc, #60]	; (19d6c <atca_kit_main_handler+0x84>)
   19d30:	4798      	blx	r3
        usb_send_response_message(pucUsbTxBuffer, txlen);
   19d32:	1dbb      	adds	r3, r7, #6
   19d34:	881a      	ldrh	r2, [r3, #0]
   19d36:	4b0f      	ldr	r3, [pc, #60]	; (19d74 <atca_kit_main_handler+0x8c>)
   19d38:	0011      	movs	r1, r2
   19d3a:	0018      	movs	r0, r3
   19d3c:	4b0f      	ldr	r3, [pc, #60]	; (19d7c <atca_kit_main_handler+0x94>)
   19d3e:	4798      	blx	r3

        g_usb_message_received--;
   19d40:	4b04      	ldr	r3, [pc, #16]	; (19d54 <atca_kit_main_handler+0x6c>)
   19d42:	681b      	ldr	r3, [r3, #0]
   19d44:	1e5a      	subs	r2, r3, #1
   19d46:	4b03      	ldr	r3, [pc, #12]	; (19d54 <atca_kit_main_handler+0x6c>)
   19d48:	601a      	str	r2, [r3, #0]
    }
}
   19d4a:	46c0      	nop			; (mov r8, r8)
   19d4c:	46bd      	mov	sp, r7
   19d4e:	b002      	add	sp, #8
   19d50:	bd80      	pop	{r7, pc}
   19d52:	46c0      	nop			; (mov r8, r8)
   19d54:	20002bf8 	.word	0x20002bf8
   19d58:	00001388 	.word	0x00001388
   19d5c:	0001898d 	.word	0x0001898d
   19d60:	20000be2 	.word	0x20000be2
   19d64:	200014c0 	.word	0x200014c0
   19d68:	00021878 	.word	0x00021878
   19d6c:	0001c37d 	.word	0x0001c37d
   19d70:	00019af1 	.word	0x00019af1
   19d74:	20001dbc 	.word	0x20001dbc
   19d78:	0002188c 	.word	0x0002188c
   19d7c:	00017a39 	.word	0x00017a39

00019d80 <__udivsi3>:
   19d80:	2200      	movs	r2, #0
   19d82:	0843      	lsrs	r3, r0, #1
   19d84:	428b      	cmp	r3, r1
   19d86:	d374      	bcc.n	19e72 <__udivsi3+0xf2>
   19d88:	0903      	lsrs	r3, r0, #4
   19d8a:	428b      	cmp	r3, r1
   19d8c:	d35f      	bcc.n	19e4e <__udivsi3+0xce>
   19d8e:	0a03      	lsrs	r3, r0, #8
   19d90:	428b      	cmp	r3, r1
   19d92:	d344      	bcc.n	19e1e <__udivsi3+0x9e>
   19d94:	0b03      	lsrs	r3, r0, #12
   19d96:	428b      	cmp	r3, r1
   19d98:	d328      	bcc.n	19dec <__udivsi3+0x6c>
   19d9a:	0c03      	lsrs	r3, r0, #16
   19d9c:	428b      	cmp	r3, r1
   19d9e:	d30d      	bcc.n	19dbc <__udivsi3+0x3c>
   19da0:	22ff      	movs	r2, #255	; 0xff
   19da2:	0209      	lsls	r1, r1, #8
   19da4:	ba12      	rev	r2, r2
   19da6:	0c03      	lsrs	r3, r0, #16
   19da8:	428b      	cmp	r3, r1
   19daa:	d302      	bcc.n	19db2 <__udivsi3+0x32>
   19dac:	1212      	asrs	r2, r2, #8
   19dae:	0209      	lsls	r1, r1, #8
   19db0:	d065      	beq.n	19e7e <__udivsi3+0xfe>
   19db2:	0b03      	lsrs	r3, r0, #12
   19db4:	428b      	cmp	r3, r1
   19db6:	d319      	bcc.n	19dec <__udivsi3+0x6c>
   19db8:	e000      	b.n	19dbc <__udivsi3+0x3c>
   19dba:	0a09      	lsrs	r1, r1, #8
   19dbc:	0bc3      	lsrs	r3, r0, #15
   19dbe:	428b      	cmp	r3, r1
   19dc0:	d301      	bcc.n	19dc6 <__udivsi3+0x46>
   19dc2:	03cb      	lsls	r3, r1, #15
   19dc4:	1ac0      	subs	r0, r0, r3
   19dc6:	4152      	adcs	r2, r2
   19dc8:	0b83      	lsrs	r3, r0, #14
   19dca:	428b      	cmp	r3, r1
   19dcc:	d301      	bcc.n	19dd2 <__udivsi3+0x52>
   19dce:	038b      	lsls	r3, r1, #14
   19dd0:	1ac0      	subs	r0, r0, r3
   19dd2:	4152      	adcs	r2, r2
   19dd4:	0b43      	lsrs	r3, r0, #13
   19dd6:	428b      	cmp	r3, r1
   19dd8:	d301      	bcc.n	19dde <__udivsi3+0x5e>
   19dda:	034b      	lsls	r3, r1, #13
   19ddc:	1ac0      	subs	r0, r0, r3
   19dde:	4152      	adcs	r2, r2
   19de0:	0b03      	lsrs	r3, r0, #12
   19de2:	428b      	cmp	r3, r1
   19de4:	d301      	bcc.n	19dea <__udivsi3+0x6a>
   19de6:	030b      	lsls	r3, r1, #12
   19de8:	1ac0      	subs	r0, r0, r3
   19dea:	4152      	adcs	r2, r2
   19dec:	0ac3      	lsrs	r3, r0, #11
   19dee:	428b      	cmp	r3, r1
   19df0:	d301      	bcc.n	19df6 <__udivsi3+0x76>
   19df2:	02cb      	lsls	r3, r1, #11
   19df4:	1ac0      	subs	r0, r0, r3
   19df6:	4152      	adcs	r2, r2
   19df8:	0a83      	lsrs	r3, r0, #10
   19dfa:	428b      	cmp	r3, r1
   19dfc:	d301      	bcc.n	19e02 <__udivsi3+0x82>
   19dfe:	028b      	lsls	r3, r1, #10
   19e00:	1ac0      	subs	r0, r0, r3
   19e02:	4152      	adcs	r2, r2
   19e04:	0a43      	lsrs	r3, r0, #9
   19e06:	428b      	cmp	r3, r1
   19e08:	d301      	bcc.n	19e0e <__udivsi3+0x8e>
   19e0a:	024b      	lsls	r3, r1, #9
   19e0c:	1ac0      	subs	r0, r0, r3
   19e0e:	4152      	adcs	r2, r2
   19e10:	0a03      	lsrs	r3, r0, #8
   19e12:	428b      	cmp	r3, r1
   19e14:	d301      	bcc.n	19e1a <__udivsi3+0x9a>
   19e16:	020b      	lsls	r3, r1, #8
   19e18:	1ac0      	subs	r0, r0, r3
   19e1a:	4152      	adcs	r2, r2
   19e1c:	d2cd      	bcs.n	19dba <__udivsi3+0x3a>
   19e1e:	09c3      	lsrs	r3, r0, #7
   19e20:	428b      	cmp	r3, r1
   19e22:	d301      	bcc.n	19e28 <__udivsi3+0xa8>
   19e24:	01cb      	lsls	r3, r1, #7
   19e26:	1ac0      	subs	r0, r0, r3
   19e28:	4152      	adcs	r2, r2
   19e2a:	0983      	lsrs	r3, r0, #6
   19e2c:	428b      	cmp	r3, r1
   19e2e:	d301      	bcc.n	19e34 <__udivsi3+0xb4>
   19e30:	018b      	lsls	r3, r1, #6
   19e32:	1ac0      	subs	r0, r0, r3
   19e34:	4152      	adcs	r2, r2
   19e36:	0943      	lsrs	r3, r0, #5
   19e38:	428b      	cmp	r3, r1
   19e3a:	d301      	bcc.n	19e40 <__udivsi3+0xc0>
   19e3c:	014b      	lsls	r3, r1, #5
   19e3e:	1ac0      	subs	r0, r0, r3
   19e40:	4152      	adcs	r2, r2
   19e42:	0903      	lsrs	r3, r0, #4
   19e44:	428b      	cmp	r3, r1
   19e46:	d301      	bcc.n	19e4c <__udivsi3+0xcc>
   19e48:	010b      	lsls	r3, r1, #4
   19e4a:	1ac0      	subs	r0, r0, r3
   19e4c:	4152      	adcs	r2, r2
   19e4e:	08c3      	lsrs	r3, r0, #3
   19e50:	428b      	cmp	r3, r1
   19e52:	d301      	bcc.n	19e58 <__udivsi3+0xd8>
   19e54:	00cb      	lsls	r3, r1, #3
   19e56:	1ac0      	subs	r0, r0, r3
   19e58:	4152      	adcs	r2, r2
   19e5a:	0883      	lsrs	r3, r0, #2
   19e5c:	428b      	cmp	r3, r1
   19e5e:	d301      	bcc.n	19e64 <__udivsi3+0xe4>
   19e60:	008b      	lsls	r3, r1, #2
   19e62:	1ac0      	subs	r0, r0, r3
   19e64:	4152      	adcs	r2, r2
   19e66:	0843      	lsrs	r3, r0, #1
   19e68:	428b      	cmp	r3, r1
   19e6a:	d301      	bcc.n	19e70 <__udivsi3+0xf0>
   19e6c:	004b      	lsls	r3, r1, #1
   19e6e:	1ac0      	subs	r0, r0, r3
   19e70:	4152      	adcs	r2, r2
   19e72:	1a41      	subs	r1, r0, r1
   19e74:	d200      	bcs.n	19e78 <__udivsi3+0xf8>
   19e76:	4601      	mov	r1, r0
   19e78:	4152      	adcs	r2, r2
   19e7a:	4610      	mov	r0, r2
   19e7c:	4770      	bx	lr
   19e7e:	e7ff      	b.n	19e80 <__udivsi3+0x100>
   19e80:	b501      	push	{r0, lr}
   19e82:	2000      	movs	r0, #0
   19e84:	f000 f8f0 	bl	1a068 <__aeabi_idiv0>
   19e88:	bd02      	pop	{r1, pc}
   19e8a:	46c0      	nop			; (mov r8, r8)

00019e8c <__aeabi_uidivmod>:
   19e8c:	2900      	cmp	r1, #0
   19e8e:	d0f7      	beq.n	19e80 <__udivsi3+0x100>
   19e90:	e776      	b.n	19d80 <__udivsi3>
   19e92:	4770      	bx	lr

00019e94 <__divsi3>:
   19e94:	4603      	mov	r3, r0
   19e96:	430b      	orrs	r3, r1
   19e98:	d47f      	bmi.n	19f9a <__divsi3+0x106>
   19e9a:	2200      	movs	r2, #0
   19e9c:	0843      	lsrs	r3, r0, #1
   19e9e:	428b      	cmp	r3, r1
   19ea0:	d374      	bcc.n	19f8c <__divsi3+0xf8>
   19ea2:	0903      	lsrs	r3, r0, #4
   19ea4:	428b      	cmp	r3, r1
   19ea6:	d35f      	bcc.n	19f68 <__divsi3+0xd4>
   19ea8:	0a03      	lsrs	r3, r0, #8
   19eaa:	428b      	cmp	r3, r1
   19eac:	d344      	bcc.n	19f38 <__divsi3+0xa4>
   19eae:	0b03      	lsrs	r3, r0, #12
   19eb0:	428b      	cmp	r3, r1
   19eb2:	d328      	bcc.n	19f06 <__divsi3+0x72>
   19eb4:	0c03      	lsrs	r3, r0, #16
   19eb6:	428b      	cmp	r3, r1
   19eb8:	d30d      	bcc.n	19ed6 <__divsi3+0x42>
   19eba:	22ff      	movs	r2, #255	; 0xff
   19ebc:	0209      	lsls	r1, r1, #8
   19ebe:	ba12      	rev	r2, r2
   19ec0:	0c03      	lsrs	r3, r0, #16
   19ec2:	428b      	cmp	r3, r1
   19ec4:	d302      	bcc.n	19ecc <__divsi3+0x38>
   19ec6:	1212      	asrs	r2, r2, #8
   19ec8:	0209      	lsls	r1, r1, #8
   19eca:	d065      	beq.n	19f98 <__divsi3+0x104>
   19ecc:	0b03      	lsrs	r3, r0, #12
   19ece:	428b      	cmp	r3, r1
   19ed0:	d319      	bcc.n	19f06 <__divsi3+0x72>
   19ed2:	e000      	b.n	19ed6 <__divsi3+0x42>
   19ed4:	0a09      	lsrs	r1, r1, #8
   19ed6:	0bc3      	lsrs	r3, r0, #15
   19ed8:	428b      	cmp	r3, r1
   19eda:	d301      	bcc.n	19ee0 <__divsi3+0x4c>
   19edc:	03cb      	lsls	r3, r1, #15
   19ede:	1ac0      	subs	r0, r0, r3
   19ee0:	4152      	adcs	r2, r2
   19ee2:	0b83      	lsrs	r3, r0, #14
   19ee4:	428b      	cmp	r3, r1
   19ee6:	d301      	bcc.n	19eec <__divsi3+0x58>
   19ee8:	038b      	lsls	r3, r1, #14
   19eea:	1ac0      	subs	r0, r0, r3
   19eec:	4152      	adcs	r2, r2
   19eee:	0b43      	lsrs	r3, r0, #13
   19ef0:	428b      	cmp	r3, r1
   19ef2:	d301      	bcc.n	19ef8 <__divsi3+0x64>
   19ef4:	034b      	lsls	r3, r1, #13
   19ef6:	1ac0      	subs	r0, r0, r3
   19ef8:	4152      	adcs	r2, r2
   19efa:	0b03      	lsrs	r3, r0, #12
   19efc:	428b      	cmp	r3, r1
   19efe:	d301      	bcc.n	19f04 <__divsi3+0x70>
   19f00:	030b      	lsls	r3, r1, #12
   19f02:	1ac0      	subs	r0, r0, r3
   19f04:	4152      	adcs	r2, r2
   19f06:	0ac3      	lsrs	r3, r0, #11
   19f08:	428b      	cmp	r3, r1
   19f0a:	d301      	bcc.n	19f10 <__divsi3+0x7c>
   19f0c:	02cb      	lsls	r3, r1, #11
   19f0e:	1ac0      	subs	r0, r0, r3
   19f10:	4152      	adcs	r2, r2
   19f12:	0a83      	lsrs	r3, r0, #10
   19f14:	428b      	cmp	r3, r1
   19f16:	d301      	bcc.n	19f1c <__divsi3+0x88>
   19f18:	028b      	lsls	r3, r1, #10
   19f1a:	1ac0      	subs	r0, r0, r3
   19f1c:	4152      	adcs	r2, r2
   19f1e:	0a43      	lsrs	r3, r0, #9
   19f20:	428b      	cmp	r3, r1
   19f22:	d301      	bcc.n	19f28 <__divsi3+0x94>
   19f24:	024b      	lsls	r3, r1, #9
   19f26:	1ac0      	subs	r0, r0, r3
   19f28:	4152      	adcs	r2, r2
   19f2a:	0a03      	lsrs	r3, r0, #8
   19f2c:	428b      	cmp	r3, r1
   19f2e:	d301      	bcc.n	19f34 <__divsi3+0xa0>
   19f30:	020b      	lsls	r3, r1, #8
   19f32:	1ac0      	subs	r0, r0, r3
   19f34:	4152      	adcs	r2, r2
   19f36:	d2cd      	bcs.n	19ed4 <__divsi3+0x40>
   19f38:	09c3      	lsrs	r3, r0, #7
   19f3a:	428b      	cmp	r3, r1
   19f3c:	d301      	bcc.n	19f42 <__divsi3+0xae>
   19f3e:	01cb      	lsls	r3, r1, #7
   19f40:	1ac0      	subs	r0, r0, r3
   19f42:	4152      	adcs	r2, r2
   19f44:	0983      	lsrs	r3, r0, #6
   19f46:	428b      	cmp	r3, r1
   19f48:	d301      	bcc.n	19f4e <__divsi3+0xba>
   19f4a:	018b      	lsls	r3, r1, #6
   19f4c:	1ac0      	subs	r0, r0, r3
   19f4e:	4152      	adcs	r2, r2
   19f50:	0943      	lsrs	r3, r0, #5
   19f52:	428b      	cmp	r3, r1
   19f54:	d301      	bcc.n	19f5a <__divsi3+0xc6>
   19f56:	014b      	lsls	r3, r1, #5
   19f58:	1ac0      	subs	r0, r0, r3
   19f5a:	4152      	adcs	r2, r2
   19f5c:	0903      	lsrs	r3, r0, #4
   19f5e:	428b      	cmp	r3, r1
   19f60:	d301      	bcc.n	19f66 <__divsi3+0xd2>
   19f62:	010b      	lsls	r3, r1, #4
   19f64:	1ac0      	subs	r0, r0, r3
   19f66:	4152      	adcs	r2, r2
   19f68:	08c3      	lsrs	r3, r0, #3
   19f6a:	428b      	cmp	r3, r1
   19f6c:	d301      	bcc.n	19f72 <__divsi3+0xde>
   19f6e:	00cb      	lsls	r3, r1, #3
   19f70:	1ac0      	subs	r0, r0, r3
   19f72:	4152      	adcs	r2, r2
   19f74:	0883      	lsrs	r3, r0, #2
   19f76:	428b      	cmp	r3, r1
   19f78:	d301      	bcc.n	19f7e <__divsi3+0xea>
   19f7a:	008b      	lsls	r3, r1, #2
   19f7c:	1ac0      	subs	r0, r0, r3
   19f7e:	4152      	adcs	r2, r2
   19f80:	0843      	lsrs	r3, r0, #1
   19f82:	428b      	cmp	r3, r1
   19f84:	d301      	bcc.n	19f8a <__divsi3+0xf6>
   19f86:	004b      	lsls	r3, r1, #1
   19f88:	1ac0      	subs	r0, r0, r3
   19f8a:	4152      	adcs	r2, r2
   19f8c:	1a41      	subs	r1, r0, r1
   19f8e:	d200      	bcs.n	19f92 <__divsi3+0xfe>
   19f90:	4601      	mov	r1, r0
   19f92:	4152      	adcs	r2, r2
   19f94:	4610      	mov	r0, r2
   19f96:	4770      	bx	lr
   19f98:	e05d      	b.n	1a056 <__divsi3+0x1c2>
   19f9a:	0fca      	lsrs	r2, r1, #31
   19f9c:	d000      	beq.n	19fa0 <__divsi3+0x10c>
   19f9e:	4249      	negs	r1, r1
   19fa0:	1003      	asrs	r3, r0, #32
   19fa2:	d300      	bcc.n	19fa6 <__divsi3+0x112>
   19fa4:	4240      	negs	r0, r0
   19fa6:	4053      	eors	r3, r2
   19fa8:	2200      	movs	r2, #0
   19faa:	469c      	mov	ip, r3
   19fac:	0903      	lsrs	r3, r0, #4
   19fae:	428b      	cmp	r3, r1
   19fb0:	d32d      	bcc.n	1a00e <__divsi3+0x17a>
   19fb2:	0a03      	lsrs	r3, r0, #8
   19fb4:	428b      	cmp	r3, r1
   19fb6:	d312      	bcc.n	19fde <__divsi3+0x14a>
   19fb8:	22fc      	movs	r2, #252	; 0xfc
   19fba:	0189      	lsls	r1, r1, #6
   19fbc:	ba12      	rev	r2, r2
   19fbe:	0a03      	lsrs	r3, r0, #8
   19fc0:	428b      	cmp	r3, r1
   19fc2:	d30c      	bcc.n	19fde <__divsi3+0x14a>
   19fc4:	0189      	lsls	r1, r1, #6
   19fc6:	1192      	asrs	r2, r2, #6
   19fc8:	428b      	cmp	r3, r1
   19fca:	d308      	bcc.n	19fde <__divsi3+0x14a>
   19fcc:	0189      	lsls	r1, r1, #6
   19fce:	1192      	asrs	r2, r2, #6
   19fd0:	428b      	cmp	r3, r1
   19fd2:	d304      	bcc.n	19fde <__divsi3+0x14a>
   19fd4:	0189      	lsls	r1, r1, #6
   19fd6:	d03a      	beq.n	1a04e <__divsi3+0x1ba>
   19fd8:	1192      	asrs	r2, r2, #6
   19fda:	e000      	b.n	19fde <__divsi3+0x14a>
   19fdc:	0989      	lsrs	r1, r1, #6
   19fde:	09c3      	lsrs	r3, r0, #7
   19fe0:	428b      	cmp	r3, r1
   19fe2:	d301      	bcc.n	19fe8 <__divsi3+0x154>
   19fe4:	01cb      	lsls	r3, r1, #7
   19fe6:	1ac0      	subs	r0, r0, r3
   19fe8:	4152      	adcs	r2, r2
   19fea:	0983      	lsrs	r3, r0, #6
   19fec:	428b      	cmp	r3, r1
   19fee:	d301      	bcc.n	19ff4 <__divsi3+0x160>
   19ff0:	018b      	lsls	r3, r1, #6
   19ff2:	1ac0      	subs	r0, r0, r3
   19ff4:	4152      	adcs	r2, r2
   19ff6:	0943      	lsrs	r3, r0, #5
   19ff8:	428b      	cmp	r3, r1
   19ffa:	d301      	bcc.n	1a000 <__divsi3+0x16c>
   19ffc:	014b      	lsls	r3, r1, #5
   19ffe:	1ac0      	subs	r0, r0, r3
   1a000:	4152      	adcs	r2, r2
   1a002:	0903      	lsrs	r3, r0, #4
   1a004:	428b      	cmp	r3, r1
   1a006:	d301      	bcc.n	1a00c <__divsi3+0x178>
   1a008:	010b      	lsls	r3, r1, #4
   1a00a:	1ac0      	subs	r0, r0, r3
   1a00c:	4152      	adcs	r2, r2
   1a00e:	08c3      	lsrs	r3, r0, #3
   1a010:	428b      	cmp	r3, r1
   1a012:	d301      	bcc.n	1a018 <__divsi3+0x184>
   1a014:	00cb      	lsls	r3, r1, #3
   1a016:	1ac0      	subs	r0, r0, r3
   1a018:	4152      	adcs	r2, r2
   1a01a:	0883      	lsrs	r3, r0, #2
   1a01c:	428b      	cmp	r3, r1
   1a01e:	d301      	bcc.n	1a024 <__divsi3+0x190>
   1a020:	008b      	lsls	r3, r1, #2
   1a022:	1ac0      	subs	r0, r0, r3
   1a024:	4152      	adcs	r2, r2
   1a026:	d2d9      	bcs.n	19fdc <__divsi3+0x148>
   1a028:	0843      	lsrs	r3, r0, #1
   1a02a:	428b      	cmp	r3, r1
   1a02c:	d301      	bcc.n	1a032 <__divsi3+0x19e>
   1a02e:	004b      	lsls	r3, r1, #1
   1a030:	1ac0      	subs	r0, r0, r3
   1a032:	4152      	adcs	r2, r2
   1a034:	1a41      	subs	r1, r0, r1
   1a036:	d200      	bcs.n	1a03a <__divsi3+0x1a6>
   1a038:	4601      	mov	r1, r0
   1a03a:	4663      	mov	r3, ip
   1a03c:	4152      	adcs	r2, r2
   1a03e:	105b      	asrs	r3, r3, #1
   1a040:	4610      	mov	r0, r2
   1a042:	d301      	bcc.n	1a048 <__divsi3+0x1b4>
   1a044:	4240      	negs	r0, r0
   1a046:	2b00      	cmp	r3, #0
   1a048:	d500      	bpl.n	1a04c <__divsi3+0x1b8>
   1a04a:	4249      	negs	r1, r1
   1a04c:	4770      	bx	lr
   1a04e:	4663      	mov	r3, ip
   1a050:	105b      	asrs	r3, r3, #1
   1a052:	d300      	bcc.n	1a056 <__divsi3+0x1c2>
   1a054:	4240      	negs	r0, r0
   1a056:	b501      	push	{r0, lr}
   1a058:	2000      	movs	r0, #0
   1a05a:	f000 f805 	bl	1a068 <__aeabi_idiv0>
   1a05e:	bd02      	pop	{r1, pc}

0001a060 <__aeabi_idivmod>:
   1a060:	2900      	cmp	r1, #0
   1a062:	d0f8      	beq.n	1a056 <__divsi3+0x1c2>
   1a064:	e716      	b.n	19e94 <__divsi3>
   1a066:	4770      	bx	lr

0001a068 <__aeabi_idiv0>:
   1a068:	4770      	bx	lr
   1a06a:	46c0      	nop			; (mov r8, r8)

0001a06c <__aeabi_cdrcmple>:
   1a06c:	4684      	mov	ip, r0
   1a06e:	1c10      	adds	r0, r2, #0
   1a070:	4662      	mov	r2, ip
   1a072:	468c      	mov	ip, r1
   1a074:	1c19      	adds	r1, r3, #0
   1a076:	4663      	mov	r3, ip
   1a078:	e000      	b.n	1a07c <__aeabi_cdcmpeq>
   1a07a:	46c0      	nop			; (mov r8, r8)

0001a07c <__aeabi_cdcmpeq>:
   1a07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1a07e:	f000 ff9b 	bl	1afb8 <__ledf2>
   1a082:	2800      	cmp	r0, #0
   1a084:	d401      	bmi.n	1a08a <__aeabi_cdcmpeq+0xe>
   1a086:	2100      	movs	r1, #0
   1a088:	42c8      	cmn	r0, r1
   1a08a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001a08c <__aeabi_dcmpeq>:
   1a08c:	b510      	push	{r4, lr}
   1a08e:	f000 fef5 	bl	1ae7c <__eqdf2>
   1a092:	4240      	negs	r0, r0
   1a094:	3001      	adds	r0, #1
   1a096:	bd10      	pop	{r4, pc}

0001a098 <__aeabi_dcmplt>:
   1a098:	b510      	push	{r4, lr}
   1a09a:	f000 ff8d 	bl	1afb8 <__ledf2>
   1a09e:	2800      	cmp	r0, #0
   1a0a0:	db01      	blt.n	1a0a6 <__aeabi_dcmplt+0xe>
   1a0a2:	2000      	movs	r0, #0
   1a0a4:	bd10      	pop	{r4, pc}
   1a0a6:	2001      	movs	r0, #1
   1a0a8:	bd10      	pop	{r4, pc}
   1a0aa:	46c0      	nop			; (mov r8, r8)

0001a0ac <__aeabi_dcmple>:
   1a0ac:	b510      	push	{r4, lr}
   1a0ae:	f000 ff83 	bl	1afb8 <__ledf2>
   1a0b2:	2800      	cmp	r0, #0
   1a0b4:	dd01      	ble.n	1a0ba <__aeabi_dcmple+0xe>
   1a0b6:	2000      	movs	r0, #0
   1a0b8:	bd10      	pop	{r4, pc}
   1a0ba:	2001      	movs	r0, #1
   1a0bc:	bd10      	pop	{r4, pc}
   1a0be:	46c0      	nop			; (mov r8, r8)

0001a0c0 <__aeabi_dcmpgt>:
   1a0c0:	b510      	push	{r4, lr}
   1a0c2:	f000 ff15 	bl	1aef0 <__gedf2>
   1a0c6:	2800      	cmp	r0, #0
   1a0c8:	dc01      	bgt.n	1a0ce <__aeabi_dcmpgt+0xe>
   1a0ca:	2000      	movs	r0, #0
   1a0cc:	bd10      	pop	{r4, pc}
   1a0ce:	2001      	movs	r0, #1
   1a0d0:	bd10      	pop	{r4, pc}
   1a0d2:	46c0      	nop			; (mov r8, r8)

0001a0d4 <__aeabi_dcmpge>:
   1a0d4:	b510      	push	{r4, lr}
   1a0d6:	f000 ff0b 	bl	1aef0 <__gedf2>
   1a0da:	2800      	cmp	r0, #0
   1a0dc:	da01      	bge.n	1a0e2 <__aeabi_dcmpge+0xe>
   1a0de:	2000      	movs	r0, #0
   1a0e0:	bd10      	pop	{r4, pc}
   1a0e2:	2001      	movs	r0, #1
   1a0e4:	bd10      	pop	{r4, pc}
   1a0e6:	46c0      	nop			; (mov r8, r8)

0001a0e8 <__clzsi2>:
   1a0e8:	211c      	movs	r1, #28
   1a0ea:	2301      	movs	r3, #1
   1a0ec:	041b      	lsls	r3, r3, #16
   1a0ee:	4298      	cmp	r0, r3
   1a0f0:	d301      	bcc.n	1a0f6 <__clzsi2+0xe>
   1a0f2:	0c00      	lsrs	r0, r0, #16
   1a0f4:	3910      	subs	r1, #16
   1a0f6:	0a1b      	lsrs	r3, r3, #8
   1a0f8:	4298      	cmp	r0, r3
   1a0fa:	d301      	bcc.n	1a100 <__clzsi2+0x18>
   1a0fc:	0a00      	lsrs	r0, r0, #8
   1a0fe:	3908      	subs	r1, #8
   1a100:	091b      	lsrs	r3, r3, #4
   1a102:	4298      	cmp	r0, r3
   1a104:	d301      	bcc.n	1a10a <__clzsi2+0x22>
   1a106:	0900      	lsrs	r0, r0, #4
   1a108:	3904      	subs	r1, #4
   1a10a:	a202      	add	r2, pc, #8	; (adr r2, 1a114 <__clzsi2+0x2c>)
   1a10c:	5c10      	ldrb	r0, [r2, r0]
   1a10e:	1840      	adds	r0, r0, r1
   1a110:	4770      	bx	lr
   1a112:	46c0      	nop			; (mov r8, r8)
   1a114:	02020304 	.word	0x02020304
   1a118:	01010101 	.word	0x01010101
	...

0001a124 <__ctzsi2>:
   1a124:	4241      	negs	r1, r0
   1a126:	4008      	ands	r0, r1
   1a128:	211c      	movs	r1, #28
   1a12a:	2301      	movs	r3, #1
   1a12c:	041b      	lsls	r3, r3, #16
   1a12e:	4298      	cmp	r0, r3
   1a130:	d301      	bcc.n	1a136 <__ctzsi2+0x12>
   1a132:	0c00      	lsrs	r0, r0, #16
   1a134:	3910      	subs	r1, #16
   1a136:	0a1b      	lsrs	r3, r3, #8
   1a138:	4298      	cmp	r0, r3
   1a13a:	d301      	bcc.n	1a140 <__ctzsi2+0x1c>
   1a13c:	0a00      	lsrs	r0, r0, #8
   1a13e:	3908      	subs	r1, #8
   1a140:	091b      	lsrs	r3, r3, #4
   1a142:	4298      	cmp	r0, r3
   1a144:	d301      	bcc.n	1a14a <__ctzsi2+0x26>
   1a146:	0900      	lsrs	r0, r0, #4
   1a148:	3904      	subs	r1, #4
   1a14a:	a202      	add	r2, pc, #8	; (adr r2, 1a154 <__ctzsi2+0x30>)
   1a14c:	5c10      	ldrb	r0, [r2, r0]
   1a14e:	1a40      	subs	r0, r0, r1
   1a150:	4770      	bx	lr
   1a152:	46c0      	nop			; (mov r8, r8)
   1a154:	1d1d1c1b 	.word	0x1d1d1c1b
   1a158:	1e1e1e1e 	.word	0x1e1e1e1e
   1a15c:	1f1f1f1f 	.word	0x1f1f1f1f
   1a160:	1f1f1f1f 	.word	0x1f1f1f1f

0001a164 <__aeabi_lmul>:
   1a164:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a166:	46ce      	mov	lr, r9
   1a168:	4647      	mov	r7, r8
   1a16a:	0415      	lsls	r5, r2, #16
   1a16c:	0c2d      	lsrs	r5, r5, #16
   1a16e:	002e      	movs	r6, r5
   1a170:	b580      	push	{r7, lr}
   1a172:	0407      	lsls	r7, r0, #16
   1a174:	0c14      	lsrs	r4, r2, #16
   1a176:	0c3f      	lsrs	r7, r7, #16
   1a178:	4699      	mov	r9, r3
   1a17a:	0c03      	lsrs	r3, r0, #16
   1a17c:	437e      	muls	r6, r7
   1a17e:	435d      	muls	r5, r3
   1a180:	4367      	muls	r7, r4
   1a182:	4363      	muls	r3, r4
   1a184:	197f      	adds	r7, r7, r5
   1a186:	0c34      	lsrs	r4, r6, #16
   1a188:	19e4      	adds	r4, r4, r7
   1a18a:	469c      	mov	ip, r3
   1a18c:	42a5      	cmp	r5, r4
   1a18e:	d903      	bls.n	1a198 <__aeabi_lmul+0x34>
   1a190:	2380      	movs	r3, #128	; 0x80
   1a192:	025b      	lsls	r3, r3, #9
   1a194:	4698      	mov	r8, r3
   1a196:	44c4      	add	ip, r8
   1a198:	464b      	mov	r3, r9
   1a19a:	4351      	muls	r1, r2
   1a19c:	4343      	muls	r3, r0
   1a19e:	0436      	lsls	r6, r6, #16
   1a1a0:	0c36      	lsrs	r6, r6, #16
   1a1a2:	0c25      	lsrs	r5, r4, #16
   1a1a4:	0424      	lsls	r4, r4, #16
   1a1a6:	4465      	add	r5, ip
   1a1a8:	19a4      	adds	r4, r4, r6
   1a1aa:	1859      	adds	r1, r3, r1
   1a1ac:	1949      	adds	r1, r1, r5
   1a1ae:	0020      	movs	r0, r4
   1a1b0:	bc0c      	pop	{r2, r3}
   1a1b2:	4690      	mov	r8, r2
   1a1b4:	4699      	mov	r9, r3
   1a1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a1b8 <__aeabi_d2uiz>:
   1a1b8:	b570      	push	{r4, r5, r6, lr}
   1a1ba:	2200      	movs	r2, #0
   1a1bc:	4b0c      	ldr	r3, [pc, #48]	; (1a1f0 <__aeabi_d2uiz+0x38>)
   1a1be:	0004      	movs	r4, r0
   1a1c0:	000d      	movs	r5, r1
   1a1c2:	f7ff ff87 	bl	1a0d4 <__aeabi_dcmpge>
   1a1c6:	2800      	cmp	r0, #0
   1a1c8:	d104      	bne.n	1a1d4 <__aeabi_d2uiz+0x1c>
   1a1ca:	0020      	movs	r0, r4
   1a1cc:	0029      	movs	r1, r5
   1a1ce:	f001 fceb 	bl	1bba8 <__aeabi_d2iz>
   1a1d2:	bd70      	pop	{r4, r5, r6, pc}
   1a1d4:	4b06      	ldr	r3, [pc, #24]	; (1a1f0 <__aeabi_d2uiz+0x38>)
   1a1d6:	2200      	movs	r2, #0
   1a1d8:	0020      	movs	r0, r4
   1a1da:	0029      	movs	r1, r5
   1a1dc:	f001 f9ce 	bl	1b57c <__aeabi_dsub>
   1a1e0:	f001 fce2 	bl	1bba8 <__aeabi_d2iz>
   1a1e4:	2380      	movs	r3, #128	; 0x80
   1a1e6:	061b      	lsls	r3, r3, #24
   1a1e8:	469c      	mov	ip, r3
   1a1ea:	4460      	add	r0, ip
   1a1ec:	e7f1      	b.n	1a1d2 <__aeabi_d2uiz+0x1a>
   1a1ee:	46c0      	nop			; (mov r8, r8)
   1a1f0:	41e00000 	.word	0x41e00000

0001a1f4 <__aeabi_dadd>:
   1a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1f6:	4645      	mov	r5, r8
   1a1f8:	46de      	mov	lr, fp
   1a1fa:	4657      	mov	r7, sl
   1a1fc:	464e      	mov	r6, r9
   1a1fe:	030c      	lsls	r4, r1, #12
   1a200:	b5e0      	push	{r5, r6, r7, lr}
   1a202:	004e      	lsls	r6, r1, #1
   1a204:	0fc9      	lsrs	r1, r1, #31
   1a206:	4688      	mov	r8, r1
   1a208:	000d      	movs	r5, r1
   1a20a:	0a61      	lsrs	r1, r4, #9
   1a20c:	0f44      	lsrs	r4, r0, #29
   1a20e:	430c      	orrs	r4, r1
   1a210:	00c7      	lsls	r7, r0, #3
   1a212:	0319      	lsls	r1, r3, #12
   1a214:	0058      	lsls	r0, r3, #1
   1a216:	0fdb      	lsrs	r3, r3, #31
   1a218:	469b      	mov	fp, r3
   1a21a:	0a4b      	lsrs	r3, r1, #9
   1a21c:	0f51      	lsrs	r1, r2, #29
   1a21e:	430b      	orrs	r3, r1
   1a220:	0d76      	lsrs	r6, r6, #21
   1a222:	0d40      	lsrs	r0, r0, #21
   1a224:	0019      	movs	r1, r3
   1a226:	00d2      	lsls	r2, r2, #3
   1a228:	45d8      	cmp	r8, fp
   1a22a:	d100      	bne.n	1a22e <__aeabi_dadd+0x3a>
   1a22c:	e0ae      	b.n	1a38c <__aeabi_dadd+0x198>
   1a22e:	1a35      	subs	r5, r6, r0
   1a230:	2d00      	cmp	r5, #0
   1a232:	dc00      	bgt.n	1a236 <__aeabi_dadd+0x42>
   1a234:	e0f6      	b.n	1a424 <__aeabi_dadd+0x230>
   1a236:	2800      	cmp	r0, #0
   1a238:	d10f      	bne.n	1a25a <__aeabi_dadd+0x66>
   1a23a:	4313      	orrs	r3, r2
   1a23c:	d100      	bne.n	1a240 <__aeabi_dadd+0x4c>
   1a23e:	e0db      	b.n	1a3f8 <__aeabi_dadd+0x204>
   1a240:	1e6b      	subs	r3, r5, #1
   1a242:	2b00      	cmp	r3, #0
   1a244:	d000      	beq.n	1a248 <__aeabi_dadd+0x54>
   1a246:	e137      	b.n	1a4b8 <__aeabi_dadd+0x2c4>
   1a248:	1aba      	subs	r2, r7, r2
   1a24a:	4297      	cmp	r7, r2
   1a24c:	41bf      	sbcs	r7, r7
   1a24e:	1a64      	subs	r4, r4, r1
   1a250:	427f      	negs	r7, r7
   1a252:	1be4      	subs	r4, r4, r7
   1a254:	2601      	movs	r6, #1
   1a256:	0017      	movs	r7, r2
   1a258:	e024      	b.n	1a2a4 <__aeabi_dadd+0xb0>
   1a25a:	4bc6      	ldr	r3, [pc, #792]	; (1a574 <__aeabi_dadd+0x380>)
   1a25c:	429e      	cmp	r6, r3
   1a25e:	d04d      	beq.n	1a2fc <__aeabi_dadd+0x108>
   1a260:	2380      	movs	r3, #128	; 0x80
   1a262:	041b      	lsls	r3, r3, #16
   1a264:	4319      	orrs	r1, r3
   1a266:	2d38      	cmp	r5, #56	; 0x38
   1a268:	dd00      	ble.n	1a26c <__aeabi_dadd+0x78>
   1a26a:	e107      	b.n	1a47c <__aeabi_dadd+0x288>
   1a26c:	2d1f      	cmp	r5, #31
   1a26e:	dd00      	ble.n	1a272 <__aeabi_dadd+0x7e>
   1a270:	e138      	b.n	1a4e4 <__aeabi_dadd+0x2f0>
   1a272:	2020      	movs	r0, #32
   1a274:	1b43      	subs	r3, r0, r5
   1a276:	469a      	mov	sl, r3
   1a278:	000b      	movs	r3, r1
   1a27a:	4650      	mov	r0, sl
   1a27c:	4083      	lsls	r3, r0
   1a27e:	4699      	mov	r9, r3
   1a280:	0013      	movs	r3, r2
   1a282:	4648      	mov	r0, r9
   1a284:	40eb      	lsrs	r3, r5
   1a286:	4318      	orrs	r0, r3
   1a288:	0003      	movs	r3, r0
   1a28a:	4650      	mov	r0, sl
   1a28c:	4082      	lsls	r2, r0
   1a28e:	1e50      	subs	r0, r2, #1
   1a290:	4182      	sbcs	r2, r0
   1a292:	40e9      	lsrs	r1, r5
   1a294:	431a      	orrs	r2, r3
   1a296:	1aba      	subs	r2, r7, r2
   1a298:	1a61      	subs	r1, r4, r1
   1a29a:	4297      	cmp	r7, r2
   1a29c:	41a4      	sbcs	r4, r4
   1a29e:	0017      	movs	r7, r2
   1a2a0:	4264      	negs	r4, r4
   1a2a2:	1b0c      	subs	r4, r1, r4
   1a2a4:	0223      	lsls	r3, r4, #8
   1a2a6:	d562      	bpl.n	1a36e <__aeabi_dadd+0x17a>
   1a2a8:	0264      	lsls	r4, r4, #9
   1a2aa:	0a65      	lsrs	r5, r4, #9
   1a2ac:	2d00      	cmp	r5, #0
   1a2ae:	d100      	bne.n	1a2b2 <__aeabi_dadd+0xbe>
   1a2b0:	e0df      	b.n	1a472 <__aeabi_dadd+0x27e>
   1a2b2:	0028      	movs	r0, r5
   1a2b4:	f7ff ff18 	bl	1a0e8 <__clzsi2>
   1a2b8:	0003      	movs	r3, r0
   1a2ba:	3b08      	subs	r3, #8
   1a2bc:	2b1f      	cmp	r3, #31
   1a2be:	dd00      	ble.n	1a2c2 <__aeabi_dadd+0xce>
   1a2c0:	e0d2      	b.n	1a468 <__aeabi_dadd+0x274>
   1a2c2:	2220      	movs	r2, #32
   1a2c4:	003c      	movs	r4, r7
   1a2c6:	1ad2      	subs	r2, r2, r3
   1a2c8:	409d      	lsls	r5, r3
   1a2ca:	40d4      	lsrs	r4, r2
   1a2cc:	409f      	lsls	r7, r3
   1a2ce:	4325      	orrs	r5, r4
   1a2d0:	429e      	cmp	r6, r3
   1a2d2:	dd00      	ble.n	1a2d6 <__aeabi_dadd+0xe2>
   1a2d4:	e0c4      	b.n	1a460 <__aeabi_dadd+0x26c>
   1a2d6:	1b9e      	subs	r6, r3, r6
   1a2d8:	1c73      	adds	r3, r6, #1
   1a2da:	2b1f      	cmp	r3, #31
   1a2dc:	dd00      	ble.n	1a2e0 <__aeabi_dadd+0xec>
   1a2de:	e0f1      	b.n	1a4c4 <__aeabi_dadd+0x2d0>
   1a2e0:	2220      	movs	r2, #32
   1a2e2:	0038      	movs	r0, r7
   1a2e4:	0029      	movs	r1, r5
   1a2e6:	1ad2      	subs	r2, r2, r3
   1a2e8:	40d8      	lsrs	r0, r3
   1a2ea:	4091      	lsls	r1, r2
   1a2ec:	4097      	lsls	r7, r2
   1a2ee:	002c      	movs	r4, r5
   1a2f0:	4301      	orrs	r1, r0
   1a2f2:	1e78      	subs	r0, r7, #1
   1a2f4:	4187      	sbcs	r7, r0
   1a2f6:	40dc      	lsrs	r4, r3
   1a2f8:	2600      	movs	r6, #0
   1a2fa:	430f      	orrs	r7, r1
   1a2fc:	077b      	lsls	r3, r7, #29
   1a2fe:	d009      	beq.n	1a314 <__aeabi_dadd+0x120>
   1a300:	230f      	movs	r3, #15
   1a302:	403b      	ands	r3, r7
   1a304:	2b04      	cmp	r3, #4
   1a306:	d005      	beq.n	1a314 <__aeabi_dadd+0x120>
   1a308:	1d3b      	adds	r3, r7, #4
   1a30a:	42bb      	cmp	r3, r7
   1a30c:	41bf      	sbcs	r7, r7
   1a30e:	427f      	negs	r7, r7
   1a310:	19e4      	adds	r4, r4, r7
   1a312:	001f      	movs	r7, r3
   1a314:	0223      	lsls	r3, r4, #8
   1a316:	d52c      	bpl.n	1a372 <__aeabi_dadd+0x17e>
   1a318:	4b96      	ldr	r3, [pc, #600]	; (1a574 <__aeabi_dadd+0x380>)
   1a31a:	3601      	adds	r6, #1
   1a31c:	429e      	cmp	r6, r3
   1a31e:	d100      	bne.n	1a322 <__aeabi_dadd+0x12e>
   1a320:	e09a      	b.n	1a458 <__aeabi_dadd+0x264>
   1a322:	4645      	mov	r5, r8
   1a324:	4b94      	ldr	r3, [pc, #592]	; (1a578 <__aeabi_dadd+0x384>)
   1a326:	08ff      	lsrs	r7, r7, #3
   1a328:	401c      	ands	r4, r3
   1a32a:	0760      	lsls	r0, r4, #29
   1a32c:	0576      	lsls	r6, r6, #21
   1a32e:	0264      	lsls	r4, r4, #9
   1a330:	4307      	orrs	r7, r0
   1a332:	0b24      	lsrs	r4, r4, #12
   1a334:	0d76      	lsrs	r6, r6, #21
   1a336:	2100      	movs	r1, #0
   1a338:	0324      	lsls	r4, r4, #12
   1a33a:	0b23      	lsrs	r3, r4, #12
   1a33c:	0d0c      	lsrs	r4, r1, #20
   1a33e:	4a8f      	ldr	r2, [pc, #572]	; (1a57c <__aeabi_dadd+0x388>)
   1a340:	0524      	lsls	r4, r4, #20
   1a342:	431c      	orrs	r4, r3
   1a344:	4014      	ands	r4, r2
   1a346:	0533      	lsls	r3, r6, #20
   1a348:	4323      	orrs	r3, r4
   1a34a:	005b      	lsls	r3, r3, #1
   1a34c:	07ed      	lsls	r5, r5, #31
   1a34e:	085b      	lsrs	r3, r3, #1
   1a350:	432b      	orrs	r3, r5
   1a352:	0038      	movs	r0, r7
   1a354:	0019      	movs	r1, r3
   1a356:	bc3c      	pop	{r2, r3, r4, r5}
   1a358:	4690      	mov	r8, r2
   1a35a:	4699      	mov	r9, r3
   1a35c:	46a2      	mov	sl, r4
   1a35e:	46ab      	mov	fp, r5
   1a360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a362:	4664      	mov	r4, ip
   1a364:	4304      	orrs	r4, r0
   1a366:	d100      	bne.n	1a36a <__aeabi_dadd+0x176>
   1a368:	e211      	b.n	1a78e <__aeabi_dadd+0x59a>
   1a36a:	0004      	movs	r4, r0
   1a36c:	4667      	mov	r7, ip
   1a36e:	077b      	lsls	r3, r7, #29
   1a370:	d1c6      	bne.n	1a300 <__aeabi_dadd+0x10c>
   1a372:	4645      	mov	r5, r8
   1a374:	0760      	lsls	r0, r4, #29
   1a376:	08ff      	lsrs	r7, r7, #3
   1a378:	4307      	orrs	r7, r0
   1a37a:	08e4      	lsrs	r4, r4, #3
   1a37c:	4b7d      	ldr	r3, [pc, #500]	; (1a574 <__aeabi_dadd+0x380>)
   1a37e:	429e      	cmp	r6, r3
   1a380:	d030      	beq.n	1a3e4 <__aeabi_dadd+0x1f0>
   1a382:	0324      	lsls	r4, r4, #12
   1a384:	0576      	lsls	r6, r6, #21
   1a386:	0b24      	lsrs	r4, r4, #12
   1a388:	0d76      	lsrs	r6, r6, #21
   1a38a:	e7d4      	b.n	1a336 <__aeabi_dadd+0x142>
   1a38c:	1a33      	subs	r3, r6, r0
   1a38e:	469a      	mov	sl, r3
   1a390:	2b00      	cmp	r3, #0
   1a392:	dd78      	ble.n	1a486 <__aeabi_dadd+0x292>
   1a394:	2800      	cmp	r0, #0
   1a396:	d031      	beq.n	1a3fc <__aeabi_dadd+0x208>
   1a398:	4876      	ldr	r0, [pc, #472]	; (1a574 <__aeabi_dadd+0x380>)
   1a39a:	4286      	cmp	r6, r0
   1a39c:	d0ae      	beq.n	1a2fc <__aeabi_dadd+0x108>
   1a39e:	2080      	movs	r0, #128	; 0x80
   1a3a0:	0400      	lsls	r0, r0, #16
   1a3a2:	4301      	orrs	r1, r0
   1a3a4:	4653      	mov	r3, sl
   1a3a6:	2b38      	cmp	r3, #56	; 0x38
   1a3a8:	dc00      	bgt.n	1a3ac <__aeabi_dadd+0x1b8>
   1a3aa:	e0e9      	b.n	1a580 <__aeabi_dadd+0x38c>
   1a3ac:	430a      	orrs	r2, r1
   1a3ae:	1e51      	subs	r1, r2, #1
   1a3b0:	418a      	sbcs	r2, r1
   1a3b2:	2100      	movs	r1, #0
   1a3b4:	19d2      	adds	r2, r2, r7
   1a3b6:	42ba      	cmp	r2, r7
   1a3b8:	41bf      	sbcs	r7, r7
   1a3ba:	1909      	adds	r1, r1, r4
   1a3bc:	427c      	negs	r4, r7
   1a3be:	0017      	movs	r7, r2
   1a3c0:	190c      	adds	r4, r1, r4
   1a3c2:	0223      	lsls	r3, r4, #8
   1a3c4:	d5d3      	bpl.n	1a36e <__aeabi_dadd+0x17a>
   1a3c6:	4b6b      	ldr	r3, [pc, #428]	; (1a574 <__aeabi_dadd+0x380>)
   1a3c8:	3601      	adds	r6, #1
   1a3ca:	429e      	cmp	r6, r3
   1a3cc:	d100      	bne.n	1a3d0 <__aeabi_dadd+0x1dc>
   1a3ce:	e13a      	b.n	1a646 <__aeabi_dadd+0x452>
   1a3d0:	2001      	movs	r0, #1
   1a3d2:	4b69      	ldr	r3, [pc, #420]	; (1a578 <__aeabi_dadd+0x384>)
   1a3d4:	401c      	ands	r4, r3
   1a3d6:	087b      	lsrs	r3, r7, #1
   1a3d8:	4007      	ands	r7, r0
   1a3da:	431f      	orrs	r7, r3
   1a3dc:	07e0      	lsls	r0, r4, #31
   1a3de:	4307      	orrs	r7, r0
   1a3e0:	0864      	lsrs	r4, r4, #1
   1a3e2:	e78b      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a3e4:	0023      	movs	r3, r4
   1a3e6:	433b      	orrs	r3, r7
   1a3e8:	d100      	bne.n	1a3ec <__aeabi_dadd+0x1f8>
   1a3ea:	e1cb      	b.n	1a784 <__aeabi_dadd+0x590>
   1a3ec:	2280      	movs	r2, #128	; 0x80
   1a3ee:	0312      	lsls	r2, r2, #12
   1a3f0:	4314      	orrs	r4, r2
   1a3f2:	0324      	lsls	r4, r4, #12
   1a3f4:	0b24      	lsrs	r4, r4, #12
   1a3f6:	e79e      	b.n	1a336 <__aeabi_dadd+0x142>
   1a3f8:	002e      	movs	r6, r5
   1a3fa:	e77f      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a3fc:	0008      	movs	r0, r1
   1a3fe:	4310      	orrs	r0, r2
   1a400:	d100      	bne.n	1a404 <__aeabi_dadd+0x210>
   1a402:	e0b4      	b.n	1a56e <__aeabi_dadd+0x37a>
   1a404:	1e58      	subs	r0, r3, #1
   1a406:	2800      	cmp	r0, #0
   1a408:	d000      	beq.n	1a40c <__aeabi_dadd+0x218>
   1a40a:	e0de      	b.n	1a5ca <__aeabi_dadd+0x3d6>
   1a40c:	18ba      	adds	r2, r7, r2
   1a40e:	42ba      	cmp	r2, r7
   1a410:	419b      	sbcs	r3, r3
   1a412:	1864      	adds	r4, r4, r1
   1a414:	425b      	negs	r3, r3
   1a416:	18e4      	adds	r4, r4, r3
   1a418:	0017      	movs	r7, r2
   1a41a:	2601      	movs	r6, #1
   1a41c:	0223      	lsls	r3, r4, #8
   1a41e:	d5a6      	bpl.n	1a36e <__aeabi_dadd+0x17a>
   1a420:	2602      	movs	r6, #2
   1a422:	e7d5      	b.n	1a3d0 <__aeabi_dadd+0x1dc>
   1a424:	2d00      	cmp	r5, #0
   1a426:	d16e      	bne.n	1a506 <__aeabi_dadd+0x312>
   1a428:	1c70      	adds	r0, r6, #1
   1a42a:	0540      	lsls	r0, r0, #21
   1a42c:	0d40      	lsrs	r0, r0, #21
   1a42e:	2801      	cmp	r0, #1
   1a430:	dc00      	bgt.n	1a434 <__aeabi_dadd+0x240>
   1a432:	e0f9      	b.n	1a628 <__aeabi_dadd+0x434>
   1a434:	1ab8      	subs	r0, r7, r2
   1a436:	4684      	mov	ip, r0
   1a438:	4287      	cmp	r7, r0
   1a43a:	4180      	sbcs	r0, r0
   1a43c:	1ae5      	subs	r5, r4, r3
   1a43e:	4240      	negs	r0, r0
   1a440:	1a2d      	subs	r5, r5, r0
   1a442:	0228      	lsls	r0, r5, #8
   1a444:	d400      	bmi.n	1a448 <__aeabi_dadd+0x254>
   1a446:	e089      	b.n	1a55c <__aeabi_dadd+0x368>
   1a448:	1bd7      	subs	r7, r2, r7
   1a44a:	42ba      	cmp	r2, r7
   1a44c:	4192      	sbcs	r2, r2
   1a44e:	1b1c      	subs	r4, r3, r4
   1a450:	4252      	negs	r2, r2
   1a452:	1aa5      	subs	r5, r4, r2
   1a454:	46d8      	mov	r8, fp
   1a456:	e729      	b.n	1a2ac <__aeabi_dadd+0xb8>
   1a458:	4645      	mov	r5, r8
   1a45a:	2400      	movs	r4, #0
   1a45c:	2700      	movs	r7, #0
   1a45e:	e76a      	b.n	1a336 <__aeabi_dadd+0x142>
   1a460:	4c45      	ldr	r4, [pc, #276]	; (1a578 <__aeabi_dadd+0x384>)
   1a462:	1af6      	subs	r6, r6, r3
   1a464:	402c      	ands	r4, r5
   1a466:	e749      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a468:	003d      	movs	r5, r7
   1a46a:	3828      	subs	r0, #40	; 0x28
   1a46c:	4085      	lsls	r5, r0
   1a46e:	2700      	movs	r7, #0
   1a470:	e72e      	b.n	1a2d0 <__aeabi_dadd+0xdc>
   1a472:	0038      	movs	r0, r7
   1a474:	f7ff fe38 	bl	1a0e8 <__clzsi2>
   1a478:	3020      	adds	r0, #32
   1a47a:	e71d      	b.n	1a2b8 <__aeabi_dadd+0xc4>
   1a47c:	430a      	orrs	r2, r1
   1a47e:	1e51      	subs	r1, r2, #1
   1a480:	418a      	sbcs	r2, r1
   1a482:	2100      	movs	r1, #0
   1a484:	e707      	b.n	1a296 <__aeabi_dadd+0xa2>
   1a486:	2b00      	cmp	r3, #0
   1a488:	d000      	beq.n	1a48c <__aeabi_dadd+0x298>
   1a48a:	e0f3      	b.n	1a674 <__aeabi_dadd+0x480>
   1a48c:	1c70      	adds	r0, r6, #1
   1a48e:	0543      	lsls	r3, r0, #21
   1a490:	0d5b      	lsrs	r3, r3, #21
   1a492:	2b01      	cmp	r3, #1
   1a494:	dc00      	bgt.n	1a498 <__aeabi_dadd+0x2a4>
   1a496:	e0ad      	b.n	1a5f4 <__aeabi_dadd+0x400>
   1a498:	4b36      	ldr	r3, [pc, #216]	; (1a574 <__aeabi_dadd+0x380>)
   1a49a:	4298      	cmp	r0, r3
   1a49c:	d100      	bne.n	1a4a0 <__aeabi_dadd+0x2ac>
   1a49e:	e0d1      	b.n	1a644 <__aeabi_dadd+0x450>
   1a4a0:	18ba      	adds	r2, r7, r2
   1a4a2:	42ba      	cmp	r2, r7
   1a4a4:	41bf      	sbcs	r7, r7
   1a4a6:	1864      	adds	r4, r4, r1
   1a4a8:	427f      	negs	r7, r7
   1a4aa:	19e4      	adds	r4, r4, r7
   1a4ac:	07e7      	lsls	r7, r4, #31
   1a4ae:	0852      	lsrs	r2, r2, #1
   1a4b0:	4317      	orrs	r7, r2
   1a4b2:	0864      	lsrs	r4, r4, #1
   1a4b4:	0006      	movs	r6, r0
   1a4b6:	e721      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a4b8:	482e      	ldr	r0, [pc, #184]	; (1a574 <__aeabi_dadd+0x380>)
   1a4ba:	4285      	cmp	r5, r0
   1a4bc:	d100      	bne.n	1a4c0 <__aeabi_dadd+0x2cc>
   1a4be:	e093      	b.n	1a5e8 <__aeabi_dadd+0x3f4>
   1a4c0:	001d      	movs	r5, r3
   1a4c2:	e6d0      	b.n	1a266 <__aeabi_dadd+0x72>
   1a4c4:	0029      	movs	r1, r5
   1a4c6:	3e1f      	subs	r6, #31
   1a4c8:	40f1      	lsrs	r1, r6
   1a4ca:	2b20      	cmp	r3, #32
   1a4cc:	d100      	bne.n	1a4d0 <__aeabi_dadd+0x2dc>
   1a4ce:	e08d      	b.n	1a5ec <__aeabi_dadd+0x3f8>
   1a4d0:	2240      	movs	r2, #64	; 0x40
   1a4d2:	1ad3      	subs	r3, r2, r3
   1a4d4:	409d      	lsls	r5, r3
   1a4d6:	432f      	orrs	r7, r5
   1a4d8:	1e7d      	subs	r5, r7, #1
   1a4da:	41af      	sbcs	r7, r5
   1a4dc:	2400      	movs	r4, #0
   1a4de:	430f      	orrs	r7, r1
   1a4e0:	2600      	movs	r6, #0
   1a4e2:	e744      	b.n	1a36e <__aeabi_dadd+0x17a>
   1a4e4:	002b      	movs	r3, r5
   1a4e6:	0008      	movs	r0, r1
   1a4e8:	3b20      	subs	r3, #32
   1a4ea:	40d8      	lsrs	r0, r3
   1a4ec:	0003      	movs	r3, r0
   1a4ee:	2d20      	cmp	r5, #32
   1a4f0:	d100      	bne.n	1a4f4 <__aeabi_dadd+0x300>
   1a4f2:	e07d      	b.n	1a5f0 <__aeabi_dadd+0x3fc>
   1a4f4:	2040      	movs	r0, #64	; 0x40
   1a4f6:	1b45      	subs	r5, r0, r5
   1a4f8:	40a9      	lsls	r1, r5
   1a4fa:	430a      	orrs	r2, r1
   1a4fc:	1e51      	subs	r1, r2, #1
   1a4fe:	418a      	sbcs	r2, r1
   1a500:	2100      	movs	r1, #0
   1a502:	431a      	orrs	r2, r3
   1a504:	e6c7      	b.n	1a296 <__aeabi_dadd+0xa2>
   1a506:	2e00      	cmp	r6, #0
   1a508:	d050      	beq.n	1a5ac <__aeabi_dadd+0x3b8>
   1a50a:	4e1a      	ldr	r6, [pc, #104]	; (1a574 <__aeabi_dadd+0x380>)
   1a50c:	42b0      	cmp	r0, r6
   1a50e:	d057      	beq.n	1a5c0 <__aeabi_dadd+0x3cc>
   1a510:	2680      	movs	r6, #128	; 0x80
   1a512:	426b      	negs	r3, r5
   1a514:	4699      	mov	r9, r3
   1a516:	0436      	lsls	r6, r6, #16
   1a518:	4334      	orrs	r4, r6
   1a51a:	464b      	mov	r3, r9
   1a51c:	2b38      	cmp	r3, #56	; 0x38
   1a51e:	dd00      	ble.n	1a522 <__aeabi_dadd+0x32e>
   1a520:	e0d6      	b.n	1a6d0 <__aeabi_dadd+0x4dc>
   1a522:	2b1f      	cmp	r3, #31
   1a524:	dd00      	ble.n	1a528 <__aeabi_dadd+0x334>
   1a526:	e135      	b.n	1a794 <__aeabi_dadd+0x5a0>
   1a528:	2620      	movs	r6, #32
   1a52a:	1af5      	subs	r5, r6, r3
   1a52c:	0026      	movs	r6, r4
   1a52e:	40ae      	lsls	r6, r5
   1a530:	46b2      	mov	sl, r6
   1a532:	003e      	movs	r6, r7
   1a534:	40de      	lsrs	r6, r3
   1a536:	46ac      	mov	ip, r5
   1a538:	0035      	movs	r5, r6
   1a53a:	4656      	mov	r6, sl
   1a53c:	432e      	orrs	r6, r5
   1a53e:	4665      	mov	r5, ip
   1a540:	40af      	lsls	r7, r5
   1a542:	1e7d      	subs	r5, r7, #1
   1a544:	41af      	sbcs	r7, r5
   1a546:	40dc      	lsrs	r4, r3
   1a548:	4337      	orrs	r7, r6
   1a54a:	1bd7      	subs	r7, r2, r7
   1a54c:	42ba      	cmp	r2, r7
   1a54e:	4192      	sbcs	r2, r2
   1a550:	1b0c      	subs	r4, r1, r4
   1a552:	4252      	negs	r2, r2
   1a554:	1aa4      	subs	r4, r4, r2
   1a556:	0006      	movs	r6, r0
   1a558:	46d8      	mov	r8, fp
   1a55a:	e6a3      	b.n	1a2a4 <__aeabi_dadd+0xb0>
   1a55c:	4664      	mov	r4, ip
   1a55e:	4667      	mov	r7, ip
   1a560:	432c      	orrs	r4, r5
   1a562:	d000      	beq.n	1a566 <__aeabi_dadd+0x372>
   1a564:	e6a2      	b.n	1a2ac <__aeabi_dadd+0xb8>
   1a566:	2500      	movs	r5, #0
   1a568:	2600      	movs	r6, #0
   1a56a:	2700      	movs	r7, #0
   1a56c:	e706      	b.n	1a37c <__aeabi_dadd+0x188>
   1a56e:	001e      	movs	r6, r3
   1a570:	e6c4      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a572:	46c0      	nop			; (mov r8, r8)
   1a574:	000007ff 	.word	0x000007ff
   1a578:	ff7fffff 	.word	0xff7fffff
   1a57c:	800fffff 	.word	0x800fffff
   1a580:	2b1f      	cmp	r3, #31
   1a582:	dc63      	bgt.n	1a64c <__aeabi_dadd+0x458>
   1a584:	2020      	movs	r0, #32
   1a586:	1ac3      	subs	r3, r0, r3
   1a588:	0008      	movs	r0, r1
   1a58a:	4098      	lsls	r0, r3
   1a58c:	469c      	mov	ip, r3
   1a58e:	4683      	mov	fp, r0
   1a590:	4653      	mov	r3, sl
   1a592:	0010      	movs	r0, r2
   1a594:	40d8      	lsrs	r0, r3
   1a596:	0003      	movs	r3, r0
   1a598:	4658      	mov	r0, fp
   1a59a:	4318      	orrs	r0, r3
   1a59c:	4663      	mov	r3, ip
   1a59e:	409a      	lsls	r2, r3
   1a5a0:	1e53      	subs	r3, r2, #1
   1a5a2:	419a      	sbcs	r2, r3
   1a5a4:	4653      	mov	r3, sl
   1a5a6:	4302      	orrs	r2, r0
   1a5a8:	40d9      	lsrs	r1, r3
   1a5aa:	e703      	b.n	1a3b4 <__aeabi_dadd+0x1c0>
   1a5ac:	0026      	movs	r6, r4
   1a5ae:	433e      	orrs	r6, r7
   1a5b0:	d006      	beq.n	1a5c0 <__aeabi_dadd+0x3cc>
   1a5b2:	43eb      	mvns	r3, r5
   1a5b4:	4699      	mov	r9, r3
   1a5b6:	2b00      	cmp	r3, #0
   1a5b8:	d0c7      	beq.n	1a54a <__aeabi_dadd+0x356>
   1a5ba:	4e94      	ldr	r6, [pc, #592]	; (1a80c <__aeabi_dadd+0x618>)
   1a5bc:	42b0      	cmp	r0, r6
   1a5be:	d1ac      	bne.n	1a51a <__aeabi_dadd+0x326>
   1a5c0:	000c      	movs	r4, r1
   1a5c2:	0017      	movs	r7, r2
   1a5c4:	0006      	movs	r6, r0
   1a5c6:	46d8      	mov	r8, fp
   1a5c8:	e698      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a5ca:	4b90      	ldr	r3, [pc, #576]	; (1a80c <__aeabi_dadd+0x618>)
   1a5cc:	459a      	cmp	sl, r3
   1a5ce:	d00b      	beq.n	1a5e8 <__aeabi_dadd+0x3f4>
   1a5d0:	4682      	mov	sl, r0
   1a5d2:	e6e7      	b.n	1a3a4 <__aeabi_dadd+0x1b0>
   1a5d4:	2800      	cmp	r0, #0
   1a5d6:	d000      	beq.n	1a5da <__aeabi_dadd+0x3e6>
   1a5d8:	e09e      	b.n	1a718 <__aeabi_dadd+0x524>
   1a5da:	0018      	movs	r0, r3
   1a5dc:	4310      	orrs	r0, r2
   1a5de:	d100      	bne.n	1a5e2 <__aeabi_dadd+0x3ee>
   1a5e0:	e0e9      	b.n	1a7b6 <__aeabi_dadd+0x5c2>
   1a5e2:	001c      	movs	r4, r3
   1a5e4:	0017      	movs	r7, r2
   1a5e6:	46d8      	mov	r8, fp
   1a5e8:	4e88      	ldr	r6, [pc, #544]	; (1a80c <__aeabi_dadd+0x618>)
   1a5ea:	e687      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a5ec:	2500      	movs	r5, #0
   1a5ee:	e772      	b.n	1a4d6 <__aeabi_dadd+0x2e2>
   1a5f0:	2100      	movs	r1, #0
   1a5f2:	e782      	b.n	1a4fa <__aeabi_dadd+0x306>
   1a5f4:	0023      	movs	r3, r4
   1a5f6:	433b      	orrs	r3, r7
   1a5f8:	2e00      	cmp	r6, #0
   1a5fa:	d000      	beq.n	1a5fe <__aeabi_dadd+0x40a>
   1a5fc:	e0ab      	b.n	1a756 <__aeabi_dadd+0x562>
   1a5fe:	2b00      	cmp	r3, #0
   1a600:	d100      	bne.n	1a604 <__aeabi_dadd+0x410>
   1a602:	e0e7      	b.n	1a7d4 <__aeabi_dadd+0x5e0>
   1a604:	000b      	movs	r3, r1
   1a606:	4313      	orrs	r3, r2
   1a608:	d100      	bne.n	1a60c <__aeabi_dadd+0x418>
   1a60a:	e677      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a60c:	18ba      	adds	r2, r7, r2
   1a60e:	42ba      	cmp	r2, r7
   1a610:	41bf      	sbcs	r7, r7
   1a612:	1864      	adds	r4, r4, r1
   1a614:	427f      	negs	r7, r7
   1a616:	19e4      	adds	r4, r4, r7
   1a618:	0223      	lsls	r3, r4, #8
   1a61a:	d400      	bmi.n	1a61e <__aeabi_dadd+0x42a>
   1a61c:	e0f2      	b.n	1a804 <__aeabi_dadd+0x610>
   1a61e:	4b7c      	ldr	r3, [pc, #496]	; (1a810 <__aeabi_dadd+0x61c>)
   1a620:	0017      	movs	r7, r2
   1a622:	401c      	ands	r4, r3
   1a624:	0006      	movs	r6, r0
   1a626:	e669      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a628:	0020      	movs	r0, r4
   1a62a:	4338      	orrs	r0, r7
   1a62c:	2e00      	cmp	r6, #0
   1a62e:	d1d1      	bne.n	1a5d4 <__aeabi_dadd+0x3e0>
   1a630:	2800      	cmp	r0, #0
   1a632:	d15b      	bne.n	1a6ec <__aeabi_dadd+0x4f8>
   1a634:	001c      	movs	r4, r3
   1a636:	4314      	orrs	r4, r2
   1a638:	d100      	bne.n	1a63c <__aeabi_dadd+0x448>
   1a63a:	e0a8      	b.n	1a78e <__aeabi_dadd+0x59a>
   1a63c:	001c      	movs	r4, r3
   1a63e:	0017      	movs	r7, r2
   1a640:	46d8      	mov	r8, fp
   1a642:	e65b      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a644:	0006      	movs	r6, r0
   1a646:	2400      	movs	r4, #0
   1a648:	2700      	movs	r7, #0
   1a64a:	e697      	b.n	1a37c <__aeabi_dadd+0x188>
   1a64c:	4650      	mov	r0, sl
   1a64e:	000b      	movs	r3, r1
   1a650:	3820      	subs	r0, #32
   1a652:	40c3      	lsrs	r3, r0
   1a654:	4699      	mov	r9, r3
   1a656:	4653      	mov	r3, sl
   1a658:	2b20      	cmp	r3, #32
   1a65a:	d100      	bne.n	1a65e <__aeabi_dadd+0x46a>
   1a65c:	e095      	b.n	1a78a <__aeabi_dadd+0x596>
   1a65e:	2340      	movs	r3, #64	; 0x40
   1a660:	4650      	mov	r0, sl
   1a662:	1a1b      	subs	r3, r3, r0
   1a664:	4099      	lsls	r1, r3
   1a666:	430a      	orrs	r2, r1
   1a668:	1e51      	subs	r1, r2, #1
   1a66a:	418a      	sbcs	r2, r1
   1a66c:	464b      	mov	r3, r9
   1a66e:	2100      	movs	r1, #0
   1a670:	431a      	orrs	r2, r3
   1a672:	e69f      	b.n	1a3b4 <__aeabi_dadd+0x1c0>
   1a674:	2e00      	cmp	r6, #0
   1a676:	d130      	bne.n	1a6da <__aeabi_dadd+0x4e6>
   1a678:	0026      	movs	r6, r4
   1a67a:	433e      	orrs	r6, r7
   1a67c:	d067      	beq.n	1a74e <__aeabi_dadd+0x55a>
   1a67e:	43db      	mvns	r3, r3
   1a680:	469a      	mov	sl, r3
   1a682:	2b00      	cmp	r3, #0
   1a684:	d01c      	beq.n	1a6c0 <__aeabi_dadd+0x4cc>
   1a686:	4e61      	ldr	r6, [pc, #388]	; (1a80c <__aeabi_dadd+0x618>)
   1a688:	42b0      	cmp	r0, r6
   1a68a:	d060      	beq.n	1a74e <__aeabi_dadd+0x55a>
   1a68c:	4653      	mov	r3, sl
   1a68e:	2b38      	cmp	r3, #56	; 0x38
   1a690:	dd00      	ble.n	1a694 <__aeabi_dadd+0x4a0>
   1a692:	e096      	b.n	1a7c2 <__aeabi_dadd+0x5ce>
   1a694:	2b1f      	cmp	r3, #31
   1a696:	dd00      	ble.n	1a69a <__aeabi_dadd+0x4a6>
   1a698:	e09f      	b.n	1a7da <__aeabi_dadd+0x5e6>
   1a69a:	2620      	movs	r6, #32
   1a69c:	1af3      	subs	r3, r6, r3
   1a69e:	0026      	movs	r6, r4
   1a6a0:	409e      	lsls	r6, r3
   1a6a2:	469c      	mov	ip, r3
   1a6a4:	46b3      	mov	fp, r6
   1a6a6:	4653      	mov	r3, sl
   1a6a8:	003e      	movs	r6, r7
   1a6aa:	40de      	lsrs	r6, r3
   1a6ac:	0033      	movs	r3, r6
   1a6ae:	465e      	mov	r6, fp
   1a6b0:	431e      	orrs	r6, r3
   1a6b2:	4663      	mov	r3, ip
   1a6b4:	409f      	lsls	r7, r3
   1a6b6:	1e7b      	subs	r3, r7, #1
   1a6b8:	419f      	sbcs	r7, r3
   1a6ba:	4653      	mov	r3, sl
   1a6bc:	40dc      	lsrs	r4, r3
   1a6be:	4337      	orrs	r7, r6
   1a6c0:	18bf      	adds	r7, r7, r2
   1a6c2:	4297      	cmp	r7, r2
   1a6c4:	4192      	sbcs	r2, r2
   1a6c6:	1864      	adds	r4, r4, r1
   1a6c8:	4252      	negs	r2, r2
   1a6ca:	18a4      	adds	r4, r4, r2
   1a6cc:	0006      	movs	r6, r0
   1a6ce:	e678      	b.n	1a3c2 <__aeabi_dadd+0x1ce>
   1a6d0:	4327      	orrs	r7, r4
   1a6d2:	1e7c      	subs	r4, r7, #1
   1a6d4:	41a7      	sbcs	r7, r4
   1a6d6:	2400      	movs	r4, #0
   1a6d8:	e737      	b.n	1a54a <__aeabi_dadd+0x356>
   1a6da:	4e4c      	ldr	r6, [pc, #304]	; (1a80c <__aeabi_dadd+0x618>)
   1a6dc:	42b0      	cmp	r0, r6
   1a6de:	d036      	beq.n	1a74e <__aeabi_dadd+0x55a>
   1a6e0:	2680      	movs	r6, #128	; 0x80
   1a6e2:	425b      	negs	r3, r3
   1a6e4:	0436      	lsls	r6, r6, #16
   1a6e6:	469a      	mov	sl, r3
   1a6e8:	4334      	orrs	r4, r6
   1a6ea:	e7cf      	b.n	1a68c <__aeabi_dadd+0x498>
   1a6ec:	0018      	movs	r0, r3
   1a6ee:	4310      	orrs	r0, r2
   1a6f0:	d100      	bne.n	1a6f4 <__aeabi_dadd+0x500>
   1a6f2:	e603      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a6f4:	1ab8      	subs	r0, r7, r2
   1a6f6:	4684      	mov	ip, r0
   1a6f8:	4567      	cmp	r7, ip
   1a6fa:	41ad      	sbcs	r5, r5
   1a6fc:	1ae0      	subs	r0, r4, r3
   1a6fe:	426d      	negs	r5, r5
   1a700:	1b40      	subs	r0, r0, r5
   1a702:	0205      	lsls	r5, r0, #8
   1a704:	d400      	bmi.n	1a708 <__aeabi_dadd+0x514>
   1a706:	e62c      	b.n	1a362 <__aeabi_dadd+0x16e>
   1a708:	1bd7      	subs	r7, r2, r7
   1a70a:	42ba      	cmp	r2, r7
   1a70c:	4192      	sbcs	r2, r2
   1a70e:	1b1c      	subs	r4, r3, r4
   1a710:	4252      	negs	r2, r2
   1a712:	1aa4      	subs	r4, r4, r2
   1a714:	46d8      	mov	r8, fp
   1a716:	e5f1      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a718:	0018      	movs	r0, r3
   1a71a:	4310      	orrs	r0, r2
   1a71c:	d100      	bne.n	1a720 <__aeabi_dadd+0x52c>
   1a71e:	e763      	b.n	1a5e8 <__aeabi_dadd+0x3f4>
   1a720:	08f8      	lsrs	r0, r7, #3
   1a722:	0767      	lsls	r7, r4, #29
   1a724:	4307      	orrs	r7, r0
   1a726:	2080      	movs	r0, #128	; 0x80
   1a728:	08e4      	lsrs	r4, r4, #3
   1a72a:	0300      	lsls	r0, r0, #12
   1a72c:	4204      	tst	r4, r0
   1a72e:	d008      	beq.n	1a742 <__aeabi_dadd+0x54e>
   1a730:	08dd      	lsrs	r5, r3, #3
   1a732:	4205      	tst	r5, r0
   1a734:	d105      	bne.n	1a742 <__aeabi_dadd+0x54e>
   1a736:	08d2      	lsrs	r2, r2, #3
   1a738:	0759      	lsls	r1, r3, #29
   1a73a:	4311      	orrs	r1, r2
   1a73c:	000f      	movs	r7, r1
   1a73e:	002c      	movs	r4, r5
   1a740:	46d8      	mov	r8, fp
   1a742:	0f7b      	lsrs	r3, r7, #29
   1a744:	00e4      	lsls	r4, r4, #3
   1a746:	431c      	orrs	r4, r3
   1a748:	00ff      	lsls	r7, r7, #3
   1a74a:	4e30      	ldr	r6, [pc, #192]	; (1a80c <__aeabi_dadd+0x618>)
   1a74c:	e5d6      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a74e:	000c      	movs	r4, r1
   1a750:	0017      	movs	r7, r2
   1a752:	0006      	movs	r6, r0
   1a754:	e5d2      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a756:	2b00      	cmp	r3, #0
   1a758:	d038      	beq.n	1a7cc <__aeabi_dadd+0x5d8>
   1a75a:	000b      	movs	r3, r1
   1a75c:	4313      	orrs	r3, r2
   1a75e:	d100      	bne.n	1a762 <__aeabi_dadd+0x56e>
   1a760:	e742      	b.n	1a5e8 <__aeabi_dadd+0x3f4>
   1a762:	08f8      	lsrs	r0, r7, #3
   1a764:	0767      	lsls	r7, r4, #29
   1a766:	4307      	orrs	r7, r0
   1a768:	2080      	movs	r0, #128	; 0x80
   1a76a:	08e4      	lsrs	r4, r4, #3
   1a76c:	0300      	lsls	r0, r0, #12
   1a76e:	4204      	tst	r4, r0
   1a770:	d0e7      	beq.n	1a742 <__aeabi_dadd+0x54e>
   1a772:	08cb      	lsrs	r3, r1, #3
   1a774:	4203      	tst	r3, r0
   1a776:	d1e4      	bne.n	1a742 <__aeabi_dadd+0x54e>
   1a778:	08d2      	lsrs	r2, r2, #3
   1a77a:	0749      	lsls	r1, r1, #29
   1a77c:	4311      	orrs	r1, r2
   1a77e:	000f      	movs	r7, r1
   1a780:	001c      	movs	r4, r3
   1a782:	e7de      	b.n	1a742 <__aeabi_dadd+0x54e>
   1a784:	2700      	movs	r7, #0
   1a786:	2400      	movs	r4, #0
   1a788:	e5d5      	b.n	1a336 <__aeabi_dadd+0x142>
   1a78a:	2100      	movs	r1, #0
   1a78c:	e76b      	b.n	1a666 <__aeabi_dadd+0x472>
   1a78e:	2500      	movs	r5, #0
   1a790:	2700      	movs	r7, #0
   1a792:	e5f3      	b.n	1a37c <__aeabi_dadd+0x188>
   1a794:	464e      	mov	r6, r9
   1a796:	0025      	movs	r5, r4
   1a798:	3e20      	subs	r6, #32
   1a79a:	40f5      	lsrs	r5, r6
   1a79c:	464b      	mov	r3, r9
   1a79e:	002e      	movs	r6, r5
   1a7a0:	2b20      	cmp	r3, #32
   1a7a2:	d02d      	beq.n	1a800 <__aeabi_dadd+0x60c>
   1a7a4:	2540      	movs	r5, #64	; 0x40
   1a7a6:	1aed      	subs	r5, r5, r3
   1a7a8:	40ac      	lsls	r4, r5
   1a7aa:	4327      	orrs	r7, r4
   1a7ac:	1e7c      	subs	r4, r7, #1
   1a7ae:	41a7      	sbcs	r7, r4
   1a7b0:	2400      	movs	r4, #0
   1a7b2:	4337      	orrs	r7, r6
   1a7b4:	e6c9      	b.n	1a54a <__aeabi_dadd+0x356>
   1a7b6:	2480      	movs	r4, #128	; 0x80
   1a7b8:	2500      	movs	r5, #0
   1a7ba:	0324      	lsls	r4, r4, #12
   1a7bc:	4e13      	ldr	r6, [pc, #76]	; (1a80c <__aeabi_dadd+0x618>)
   1a7be:	2700      	movs	r7, #0
   1a7c0:	e5dc      	b.n	1a37c <__aeabi_dadd+0x188>
   1a7c2:	4327      	orrs	r7, r4
   1a7c4:	1e7c      	subs	r4, r7, #1
   1a7c6:	41a7      	sbcs	r7, r4
   1a7c8:	2400      	movs	r4, #0
   1a7ca:	e779      	b.n	1a6c0 <__aeabi_dadd+0x4cc>
   1a7cc:	000c      	movs	r4, r1
   1a7ce:	0017      	movs	r7, r2
   1a7d0:	4e0e      	ldr	r6, [pc, #56]	; (1a80c <__aeabi_dadd+0x618>)
   1a7d2:	e593      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a7d4:	000c      	movs	r4, r1
   1a7d6:	0017      	movs	r7, r2
   1a7d8:	e590      	b.n	1a2fc <__aeabi_dadd+0x108>
   1a7da:	4656      	mov	r6, sl
   1a7dc:	0023      	movs	r3, r4
   1a7de:	3e20      	subs	r6, #32
   1a7e0:	40f3      	lsrs	r3, r6
   1a7e2:	4699      	mov	r9, r3
   1a7e4:	4653      	mov	r3, sl
   1a7e6:	2b20      	cmp	r3, #32
   1a7e8:	d00e      	beq.n	1a808 <__aeabi_dadd+0x614>
   1a7ea:	2340      	movs	r3, #64	; 0x40
   1a7ec:	4656      	mov	r6, sl
   1a7ee:	1b9b      	subs	r3, r3, r6
   1a7f0:	409c      	lsls	r4, r3
   1a7f2:	4327      	orrs	r7, r4
   1a7f4:	1e7c      	subs	r4, r7, #1
   1a7f6:	41a7      	sbcs	r7, r4
   1a7f8:	464b      	mov	r3, r9
   1a7fa:	2400      	movs	r4, #0
   1a7fc:	431f      	orrs	r7, r3
   1a7fe:	e75f      	b.n	1a6c0 <__aeabi_dadd+0x4cc>
   1a800:	2400      	movs	r4, #0
   1a802:	e7d2      	b.n	1a7aa <__aeabi_dadd+0x5b6>
   1a804:	0017      	movs	r7, r2
   1a806:	e5b2      	b.n	1a36e <__aeabi_dadd+0x17a>
   1a808:	2400      	movs	r4, #0
   1a80a:	e7f2      	b.n	1a7f2 <__aeabi_dadd+0x5fe>
   1a80c:	000007ff 	.word	0x000007ff
   1a810:	ff7fffff 	.word	0xff7fffff

0001a814 <__aeabi_ddiv>:
   1a814:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a816:	4657      	mov	r7, sl
   1a818:	4645      	mov	r5, r8
   1a81a:	46de      	mov	lr, fp
   1a81c:	464e      	mov	r6, r9
   1a81e:	b5e0      	push	{r5, r6, r7, lr}
   1a820:	004c      	lsls	r4, r1, #1
   1a822:	030e      	lsls	r6, r1, #12
   1a824:	b087      	sub	sp, #28
   1a826:	4683      	mov	fp, r0
   1a828:	4692      	mov	sl, r2
   1a82a:	001d      	movs	r5, r3
   1a82c:	4680      	mov	r8, r0
   1a82e:	0b36      	lsrs	r6, r6, #12
   1a830:	0d64      	lsrs	r4, r4, #21
   1a832:	0fcf      	lsrs	r7, r1, #31
   1a834:	2c00      	cmp	r4, #0
   1a836:	d04f      	beq.n	1a8d8 <__aeabi_ddiv+0xc4>
   1a838:	4b6f      	ldr	r3, [pc, #444]	; (1a9f8 <__aeabi_ddiv+0x1e4>)
   1a83a:	429c      	cmp	r4, r3
   1a83c:	d035      	beq.n	1a8aa <__aeabi_ddiv+0x96>
   1a83e:	2380      	movs	r3, #128	; 0x80
   1a840:	0f42      	lsrs	r2, r0, #29
   1a842:	041b      	lsls	r3, r3, #16
   1a844:	00f6      	lsls	r6, r6, #3
   1a846:	4313      	orrs	r3, r2
   1a848:	4333      	orrs	r3, r6
   1a84a:	4699      	mov	r9, r3
   1a84c:	00c3      	lsls	r3, r0, #3
   1a84e:	4698      	mov	r8, r3
   1a850:	4b6a      	ldr	r3, [pc, #424]	; (1a9fc <__aeabi_ddiv+0x1e8>)
   1a852:	2600      	movs	r6, #0
   1a854:	469c      	mov	ip, r3
   1a856:	2300      	movs	r3, #0
   1a858:	4464      	add	r4, ip
   1a85a:	9303      	str	r3, [sp, #12]
   1a85c:	032b      	lsls	r3, r5, #12
   1a85e:	0b1b      	lsrs	r3, r3, #12
   1a860:	469b      	mov	fp, r3
   1a862:	006b      	lsls	r3, r5, #1
   1a864:	0fed      	lsrs	r5, r5, #31
   1a866:	4650      	mov	r0, sl
   1a868:	0d5b      	lsrs	r3, r3, #21
   1a86a:	9501      	str	r5, [sp, #4]
   1a86c:	d05e      	beq.n	1a92c <__aeabi_ddiv+0x118>
   1a86e:	4a62      	ldr	r2, [pc, #392]	; (1a9f8 <__aeabi_ddiv+0x1e4>)
   1a870:	4293      	cmp	r3, r2
   1a872:	d053      	beq.n	1a91c <__aeabi_ddiv+0x108>
   1a874:	465a      	mov	r2, fp
   1a876:	00d1      	lsls	r1, r2, #3
   1a878:	2280      	movs	r2, #128	; 0x80
   1a87a:	0f40      	lsrs	r0, r0, #29
   1a87c:	0412      	lsls	r2, r2, #16
   1a87e:	4302      	orrs	r2, r0
   1a880:	430a      	orrs	r2, r1
   1a882:	4693      	mov	fp, r2
   1a884:	4652      	mov	r2, sl
   1a886:	00d1      	lsls	r1, r2, #3
   1a888:	4a5c      	ldr	r2, [pc, #368]	; (1a9fc <__aeabi_ddiv+0x1e8>)
   1a88a:	4694      	mov	ip, r2
   1a88c:	2200      	movs	r2, #0
   1a88e:	4463      	add	r3, ip
   1a890:	0038      	movs	r0, r7
   1a892:	4068      	eors	r0, r5
   1a894:	4684      	mov	ip, r0
   1a896:	9002      	str	r0, [sp, #8]
   1a898:	1ae4      	subs	r4, r4, r3
   1a89a:	4316      	orrs	r6, r2
   1a89c:	2e0f      	cmp	r6, #15
   1a89e:	d900      	bls.n	1a8a2 <__aeabi_ddiv+0x8e>
   1a8a0:	e0b4      	b.n	1aa0c <__aeabi_ddiv+0x1f8>
   1a8a2:	4b57      	ldr	r3, [pc, #348]	; (1aa00 <__aeabi_ddiv+0x1ec>)
   1a8a4:	00b6      	lsls	r6, r6, #2
   1a8a6:	599b      	ldr	r3, [r3, r6]
   1a8a8:	469f      	mov	pc, r3
   1a8aa:	0003      	movs	r3, r0
   1a8ac:	4333      	orrs	r3, r6
   1a8ae:	4699      	mov	r9, r3
   1a8b0:	d16c      	bne.n	1a98c <__aeabi_ddiv+0x178>
   1a8b2:	2300      	movs	r3, #0
   1a8b4:	4698      	mov	r8, r3
   1a8b6:	3302      	adds	r3, #2
   1a8b8:	2608      	movs	r6, #8
   1a8ba:	9303      	str	r3, [sp, #12]
   1a8bc:	e7ce      	b.n	1a85c <__aeabi_ddiv+0x48>
   1a8be:	46cb      	mov	fp, r9
   1a8c0:	4641      	mov	r1, r8
   1a8c2:	9a03      	ldr	r2, [sp, #12]
   1a8c4:	9701      	str	r7, [sp, #4]
   1a8c6:	2a02      	cmp	r2, #2
   1a8c8:	d165      	bne.n	1a996 <__aeabi_ddiv+0x182>
   1a8ca:	9b01      	ldr	r3, [sp, #4]
   1a8cc:	4c4a      	ldr	r4, [pc, #296]	; (1a9f8 <__aeabi_ddiv+0x1e4>)
   1a8ce:	469c      	mov	ip, r3
   1a8d0:	2300      	movs	r3, #0
   1a8d2:	2200      	movs	r2, #0
   1a8d4:	4698      	mov	r8, r3
   1a8d6:	e06b      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1a8d8:	0003      	movs	r3, r0
   1a8da:	4333      	orrs	r3, r6
   1a8dc:	4699      	mov	r9, r3
   1a8de:	d04e      	beq.n	1a97e <__aeabi_ddiv+0x16a>
   1a8e0:	2e00      	cmp	r6, #0
   1a8e2:	d100      	bne.n	1a8e6 <__aeabi_ddiv+0xd2>
   1a8e4:	e1bc      	b.n	1ac60 <__aeabi_ddiv+0x44c>
   1a8e6:	0030      	movs	r0, r6
   1a8e8:	f7ff fbfe 	bl	1a0e8 <__clzsi2>
   1a8ec:	0003      	movs	r3, r0
   1a8ee:	3b0b      	subs	r3, #11
   1a8f0:	2b1c      	cmp	r3, #28
   1a8f2:	dd00      	ble.n	1a8f6 <__aeabi_ddiv+0xe2>
   1a8f4:	e1ac      	b.n	1ac50 <__aeabi_ddiv+0x43c>
   1a8f6:	221d      	movs	r2, #29
   1a8f8:	1ad3      	subs	r3, r2, r3
   1a8fa:	465a      	mov	r2, fp
   1a8fc:	0001      	movs	r1, r0
   1a8fe:	40da      	lsrs	r2, r3
   1a900:	3908      	subs	r1, #8
   1a902:	408e      	lsls	r6, r1
   1a904:	0013      	movs	r3, r2
   1a906:	4333      	orrs	r3, r6
   1a908:	4699      	mov	r9, r3
   1a90a:	465b      	mov	r3, fp
   1a90c:	408b      	lsls	r3, r1
   1a90e:	4698      	mov	r8, r3
   1a910:	2300      	movs	r3, #0
   1a912:	4c3c      	ldr	r4, [pc, #240]	; (1aa04 <__aeabi_ddiv+0x1f0>)
   1a914:	2600      	movs	r6, #0
   1a916:	1a24      	subs	r4, r4, r0
   1a918:	9303      	str	r3, [sp, #12]
   1a91a:	e79f      	b.n	1a85c <__aeabi_ddiv+0x48>
   1a91c:	4651      	mov	r1, sl
   1a91e:	465a      	mov	r2, fp
   1a920:	4311      	orrs	r1, r2
   1a922:	d129      	bne.n	1a978 <__aeabi_ddiv+0x164>
   1a924:	2200      	movs	r2, #0
   1a926:	4693      	mov	fp, r2
   1a928:	3202      	adds	r2, #2
   1a92a:	e7b1      	b.n	1a890 <__aeabi_ddiv+0x7c>
   1a92c:	4659      	mov	r1, fp
   1a92e:	4301      	orrs	r1, r0
   1a930:	d01e      	beq.n	1a970 <__aeabi_ddiv+0x15c>
   1a932:	465b      	mov	r3, fp
   1a934:	2b00      	cmp	r3, #0
   1a936:	d100      	bne.n	1a93a <__aeabi_ddiv+0x126>
   1a938:	e19e      	b.n	1ac78 <__aeabi_ddiv+0x464>
   1a93a:	4658      	mov	r0, fp
   1a93c:	f7ff fbd4 	bl	1a0e8 <__clzsi2>
   1a940:	0003      	movs	r3, r0
   1a942:	3b0b      	subs	r3, #11
   1a944:	2b1c      	cmp	r3, #28
   1a946:	dd00      	ble.n	1a94a <__aeabi_ddiv+0x136>
   1a948:	e18f      	b.n	1ac6a <__aeabi_ddiv+0x456>
   1a94a:	0002      	movs	r2, r0
   1a94c:	4659      	mov	r1, fp
   1a94e:	3a08      	subs	r2, #8
   1a950:	4091      	lsls	r1, r2
   1a952:	468b      	mov	fp, r1
   1a954:	211d      	movs	r1, #29
   1a956:	1acb      	subs	r3, r1, r3
   1a958:	4651      	mov	r1, sl
   1a95a:	40d9      	lsrs	r1, r3
   1a95c:	000b      	movs	r3, r1
   1a95e:	4659      	mov	r1, fp
   1a960:	430b      	orrs	r3, r1
   1a962:	4651      	mov	r1, sl
   1a964:	469b      	mov	fp, r3
   1a966:	4091      	lsls	r1, r2
   1a968:	4b26      	ldr	r3, [pc, #152]	; (1aa04 <__aeabi_ddiv+0x1f0>)
   1a96a:	2200      	movs	r2, #0
   1a96c:	1a1b      	subs	r3, r3, r0
   1a96e:	e78f      	b.n	1a890 <__aeabi_ddiv+0x7c>
   1a970:	2300      	movs	r3, #0
   1a972:	2201      	movs	r2, #1
   1a974:	469b      	mov	fp, r3
   1a976:	e78b      	b.n	1a890 <__aeabi_ddiv+0x7c>
   1a978:	4651      	mov	r1, sl
   1a97a:	2203      	movs	r2, #3
   1a97c:	e788      	b.n	1a890 <__aeabi_ddiv+0x7c>
   1a97e:	2300      	movs	r3, #0
   1a980:	4698      	mov	r8, r3
   1a982:	3301      	adds	r3, #1
   1a984:	2604      	movs	r6, #4
   1a986:	2400      	movs	r4, #0
   1a988:	9303      	str	r3, [sp, #12]
   1a98a:	e767      	b.n	1a85c <__aeabi_ddiv+0x48>
   1a98c:	2303      	movs	r3, #3
   1a98e:	46b1      	mov	r9, r6
   1a990:	9303      	str	r3, [sp, #12]
   1a992:	260c      	movs	r6, #12
   1a994:	e762      	b.n	1a85c <__aeabi_ddiv+0x48>
   1a996:	2a03      	cmp	r2, #3
   1a998:	d100      	bne.n	1a99c <__aeabi_ddiv+0x188>
   1a99a:	e25c      	b.n	1ae56 <__aeabi_ddiv+0x642>
   1a99c:	9b01      	ldr	r3, [sp, #4]
   1a99e:	2a01      	cmp	r2, #1
   1a9a0:	d000      	beq.n	1a9a4 <__aeabi_ddiv+0x190>
   1a9a2:	e1e4      	b.n	1ad6e <__aeabi_ddiv+0x55a>
   1a9a4:	4013      	ands	r3, r2
   1a9a6:	469c      	mov	ip, r3
   1a9a8:	2300      	movs	r3, #0
   1a9aa:	2400      	movs	r4, #0
   1a9ac:	2200      	movs	r2, #0
   1a9ae:	4698      	mov	r8, r3
   1a9b0:	2100      	movs	r1, #0
   1a9b2:	0312      	lsls	r2, r2, #12
   1a9b4:	0b13      	lsrs	r3, r2, #12
   1a9b6:	0d0a      	lsrs	r2, r1, #20
   1a9b8:	0512      	lsls	r2, r2, #20
   1a9ba:	431a      	orrs	r2, r3
   1a9bc:	0523      	lsls	r3, r4, #20
   1a9be:	4c12      	ldr	r4, [pc, #72]	; (1aa08 <__aeabi_ddiv+0x1f4>)
   1a9c0:	4640      	mov	r0, r8
   1a9c2:	4022      	ands	r2, r4
   1a9c4:	4313      	orrs	r3, r2
   1a9c6:	4662      	mov	r2, ip
   1a9c8:	005b      	lsls	r3, r3, #1
   1a9ca:	07d2      	lsls	r2, r2, #31
   1a9cc:	085b      	lsrs	r3, r3, #1
   1a9ce:	4313      	orrs	r3, r2
   1a9d0:	0019      	movs	r1, r3
   1a9d2:	b007      	add	sp, #28
   1a9d4:	bc3c      	pop	{r2, r3, r4, r5}
   1a9d6:	4690      	mov	r8, r2
   1a9d8:	4699      	mov	r9, r3
   1a9da:	46a2      	mov	sl, r4
   1a9dc:	46ab      	mov	fp, r5
   1a9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9e0:	2300      	movs	r3, #0
   1a9e2:	2280      	movs	r2, #128	; 0x80
   1a9e4:	469c      	mov	ip, r3
   1a9e6:	0312      	lsls	r2, r2, #12
   1a9e8:	4698      	mov	r8, r3
   1a9ea:	4c03      	ldr	r4, [pc, #12]	; (1a9f8 <__aeabi_ddiv+0x1e4>)
   1a9ec:	e7e0      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1a9ee:	2300      	movs	r3, #0
   1a9f0:	4c01      	ldr	r4, [pc, #4]	; (1a9f8 <__aeabi_ddiv+0x1e4>)
   1a9f2:	2200      	movs	r2, #0
   1a9f4:	4698      	mov	r8, r3
   1a9f6:	e7db      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1a9f8:	000007ff 	.word	0x000007ff
   1a9fc:	fffffc01 	.word	0xfffffc01
   1aa00:	00021a50 	.word	0x00021a50
   1aa04:	fffffc0d 	.word	0xfffffc0d
   1aa08:	800fffff 	.word	0x800fffff
   1aa0c:	45d9      	cmp	r9, fp
   1aa0e:	d900      	bls.n	1aa12 <__aeabi_ddiv+0x1fe>
   1aa10:	e139      	b.n	1ac86 <__aeabi_ddiv+0x472>
   1aa12:	d100      	bne.n	1aa16 <__aeabi_ddiv+0x202>
   1aa14:	e134      	b.n	1ac80 <__aeabi_ddiv+0x46c>
   1aa16:	2300      	movs	r3, #0
   1aa18:	4646      	mov	r6, r8
   1aa1a:	464d      	mov	r5, r9
   1aa1c:	469a      	mov	sl, r3
   1aa1e:	3c01      	subs	r4, #1
   1aa20:	465b      	mov	r3, fp
   1aa22:	0e0a      	lsrs	r2, r1, #24
   1aa24:	021b      	lsls	r3, r3, #8
   1aa26:	431a      	orrs	r2, r3
   1aa28:	020b      	lsls	r3, r1, #8
   1aa2a:	0c17      	lsrs	r7, r2, #16
   1aa2c:	9303      	str	r3, [sp, #12]
   1aa2e:	0413      	lsls	r3, r2, #16
   1aa30:	0c1b      	lsrs	r3, r3, #16
   1aa32:	0039      	movs	r1, r7
   1aa34:	0028      	movs	r0, r5
   1aa36:	4690      	mov	r8, r2
   1aa38:	9301      	str	r3, [sp, #4]
   1aa3a:	f7ff f9a1 	bl	19d80 <__udivsi3>
   1aa3e:	0002      	movs	r2, r0
   1aa40:	9b01      	ldr	r3, [sp, #4]
   1aa42:	4683      	mov	fp, r0
   1aa44:	435a      	muls	r2, r3
   1aa46:	0028      	movs	r0, r5
   1aa48:	0039      	movs	r1, r7
   1aa4a:	4691      	mov	r9, r2
   1aa4c:	f7ff fa1e 	bl	19e8c <__aeabi_uidivmod>
   1aa50:	0c35      	lsrs	r5, r6, #16
   1aa52:	0409      	lsls	r1, r1, #16
   1aa54:	430d      	orrs	r5, r1
   1aa56:	45a9      	cmp	r9, r5
   1aa58:	d90d      	bls.n	1aa76 <__aeabi_ddiv+0x262>
   1aa5a:	465b      	mov	r3, fp
   1aa5c:	4445      	add	r5, r8
   1aa5e:	3b01      	subs	r3, #1
   1aa60:	45a8      	cmp	r8, r5
   1aa62:	d900      	bls.n	1aa66 <__aeabi_ddiv+0x252>
   1aa64:	e13a      	b.n	1acdc <__aeabi_ddiv+0x4c8>
   1aa66:	45a9      	cmp	r9, r5
   1aa68:	d800      	bhi.n	1aa6c <__aeabi_ddiv+0x258>
   1aa6a:	e137      	b.n	1acdc <__aeabi_ddiv+0x4c8>
   1aa6c:	2302      	movs	r3, #2
   1aa6e:	425b      	negs	r3, r3
   1aa70:	469c      	mov	ip, r3
   1aa72:	4445      	add	r5, r8
   1aa74:	44e3      	add	fp, ip
   1aa76:	464b      	mov	r3, r9
   1aa78:	1aeb      	subs	r3, r5, r3
   1aa7a:	0039      	movs	r1, r7
   1aa7c:	0018      	movs	r0, r3
   1aa7e:	9304      	str	r3, [sp, #16]
   1aa80:	f7ff f97e 	bl	19d80 <__udivsi3>
   1aa84:	9b01      	ldr	r3, [sp, #4]
   1aa86:	0005      	movs	r5, r0
   1aa88:	4343      	muls	r3, r0
   1aa8a:	0039      	movs	r1, r7
   1aa8c:	9804      	ldr	r0, [sp, #16]
   1aa8e:	4699      	mov	r9, r3
   1aa90:	f7ff f9fc 	bl	19e8c <__aeabi_uidivmod>
   1aa94:	0433      	lsls	r3, r6, #16
   1aa96:	0409      	lsls	r1, r1, #16
   1aa98:	0c1b      	lsrs	r3, r3, #16
   1aa9a:	430b      	orrs	r3, r1
   1aa9c:	4599      	cmp	r9, r3
   1aa9e:	d909      	bls.n	1aab4 <__aeabi_ddiv+0x2a0>
   1aaa0:	4443      	add	r3, r8
   1aaa2:	1e6a      	subs	r2, r5, #1
   1aaa4:	4598      	cmp	r8, r3
   1aaa6:	d900      	bls.n	1aaaa <__aeabi_ddiv+0x296>
   1aaa8:	e11a      	b.n	1ace0 <__aeabi_ddiv+0x4cc>
   1aaaa:	4599      	cmp	r9, r3
   1aaac:	d800      	bhi.n	1aab0 <__aeabi_ddiv+0x29c>
   1aaae:	e117      	b.n	1ace0 <__aeabi_ddiv+0x4cc>
   1aab0:	3d02      	subs	r5, #2
   1aab2:	4443      	add	r3, r8
   1aab4:	464a      	mov	r2, r9
   1aab6:	1a9b      	subs	r3, r3, r2
   1aab8:	465a      	mov	r2, fp
   1aaba:	0412      	lsls	r2, r2, #16
   1aabc:	432a      	orrs	r2, r5
   1aabe:	9903      	ldr	r1, [sp, #12]
   1aac0:	4693      	mov	fp, r2
   1aac2:	0c10      	lsrs	r0, r2, #16
   1aac4:	0c0a      	lsrs	r2, r1, #16
   1aac6:	4691      	mov	r9, r2
   1aac8:	0409      	lsls	r1, r1, #16
   1aaca:	465a      	mov	r2, fp
   1aacc:	0c09      	lsrs	r1, r1, #16
   1aace:	464e      	mov	r6, r9
   1aad0:	000d      	movs	r5, r1
   1aad2:	0412      	lsls	r2, r2, #16
   1aad4:	0c12      	lsrs	r2, r2, #16
   1aad6:	4345      	muls	r5, r0
   1aad8:	9105      	str	r1, [sp, #20]
   1aada:	4351      	muls	r1, r2
   1aadc:	4372      	muls	r2, r6
   1aade:	4370      	muls	r0, r6
   1aae0:	1952      	adds	r2, r2, r5
   1aae2:	0c0e      	lsrs	r6, r1, #16
   1aae4:	18b2      	adds	r2, r6, r2
   1aae6:	4295      	cmp	r5, r2
   1aae8:	d903      	bls.n	1aaf2 <__aeabi_ddiv+0x2de>
   1aaea:	2580      	movs	r5, #128	; 0x80
   1aaec:	026d      	lsls	r5, r5, #9
   1aaee:	46ac      	mov	ip, r5
   1aaf0:	4460      	add	r0, ip
   1aaf2:	0c15      	lsrs	r5, r2, #16
   1aaf4:	0409      	lsls	r1, r1, #16
   1aaf6:	0412      	lsls	r2, r2, #16
   1aaf8:	0c09      	lsrs	r1, r1, #16
   1aafa:	1828      	adds	r0, r5, r0
   1aafc:	1852      	adds	r2, r2, r1
   1aafe:	4283      	cmp	r3, r0
   1ab00:	d200      	bcs.n	1ab04 <__aeabi_ddiv+0x2f0>
   1ab02:	e0ce      	b.n	1aca2 <__aeabi_ddiv+0x48e>
   1ab04:	d100      	bne.n	1ab08 <__aeabi_ddiv+0x2f4>
   1ab06:	e0c8      	b.n	1ac9a <__aeabi_ddiv+0x486>
   1ab08:	1a1d      	subs	r5, r3, r0
   1ab0a:	4653      	mov	r3, sl
   1ab0c:	1a9e      	subs	r6, r3, r2
   1ab0e:	45b2      	cmp	sl, r6
   1ab10:	4192      	sbcs	r2, r2
   1ab12:	4252      	negs	r2, r2
   1ab14:	1aab      	subs	r3, r5, r2
   1ab16:	469a      	mov	sl, r3
   1ab18:	4598      	cmp	r8, r3
   1ab1a:	d100      	bne.n	1ab1e <__aeabi_ddiv+0x30a>
   1ab1c:	e117      	b.n	1ad4e <__aeabi_ddiv+0x53a>
   1ab1e:	0039      	movs	r1, r7
   1ab20:	0018      	movs	r0, r3
   1ab22:	f7ff f92d 	bl	19d80 <__udivsi3>
   1ab26:	9b01      	ldr	r3, [sp, #4]
   1ab28:	0005      	movs	r5, r0
   1ab2a:	4343      	muls	r3, r0
   1ab2c:	0039      	movs	r1, r7
   1ab2e:	4650      	mov	r0, sl
   1ab30:	9304      	str	r3, [sp, #16]
   1ab32:	f7ff f9ab 	bl	19e8c <__aeabi_uidivmod>
   1ab36:	9804      	ldr	r0, [sp, #16]
   1ab38:	040b      	lsls	r3, r1, #16
   1ab3a:	0c31      	lsrs	r1, r6, #16
   1ab3c:	4319      	orrs	r1, r3
   1ab3e:	4288      	cmp	r0, r1
   1ab40:	d909      	bls.n	1ab56 <__aeabi_ddiv+0x342>
   1ab42:	4441      	add	r1, r8
   1ab44:	1e6b      	subs	r3, r5, #1
   1ab46:	4588      	cmp	r8, r1
   1ab48:	d900      	bls.n	1ab4c <__aeabi_ddiv+0x338>
   1ab4a:	e107      	b.n	1ad5c <__aeabi_ddiv+0x548>
   1ab4c:	4288      	cmp	r0, r1
   1ab4e:	d800      	bhi.n	1ab52 <__aeabi_ddiv+0x33e>
   1ab50:	e104      	b.n	1ad5c <__aeabi_ddiv+0x548>
   1ab52:	3d02      	subs	r5, #2
   1ab54:	4441      	add	r1, r8
   1ab56:	9b04      	ldr	r3, [sp, #16]
   1ab58:	1acb      	subs	r3, r1, r3
   1ab5a:	0018      	movs	r0, r3
   1ab5c:	0039      	movs	r1, r7
   1ab5e:	9304      	str	r3, [sp, #16]
   1ab60:	f7ff f90e 	bl	19d80 <__udivsi3>
   1ab64:	9b01      	ldr	r3, [sp, #4]
   1ab66:	4682      	mov	sl, r0
   1ab68:	4343      	muls	r3, r0
   1ab6a:	0039      	movs	r1, r7
   1ab6c:	9804      	ldr	r0, [sp, #16]
   1ab6e:	9301      	str	r3, [sp, #4]
   1ab70:	f7ff f98c 	bl	19e8c <__aeabi_uidivmod>
   1ab74:	9801      	ldr	r0, [sp, #4]
   1ab76:	040b      	lsls	r3, r1, #16
   1ab78:	0431      	lsls	r1, r6, #16
   1ab7a:	0c09      	lsrs	r1, r1, #16
   1ab7c:	4319      	orrs	r1, r3
   1ab7e:	4288      	cmp	r0, r1
   1ab80:	d90d      	bls.n	1ab9e <__aeabi_ddiv+0x38a>
   1ab82:	4653      	mov	r3, sl
   1ab84:	4441      	add	r1, r8
   1ab86:	3b01      	subs	r3, #1
   1ab88:	4588      	cmp	r8, r1
   1ab8a:	d900      	bls.n	1ab8e <__aeabi_ddiv+0x37a>
   1ab8c:	e0e8      	b.n	1ad60 <__aeabi_ddiv+0x54c>
   1ab8e:	4288      	cmp	r0, r1
   1ab90:	d800      	bhi.n	1ab94 <__aeabi_ddiv+0x380>
   1ab92:	e0e5      	b.n	1ad60 <__aeabi_ddiv+0x54c>
   1ab94:	2302      	movs	r3, #2
   1ab96:	425b      	negs	r3, r3
   1ab98:	469c      	mov	ip, r3
   1ab9a:	4441      	add	r1, r8
   1ab9c:	44e2      	add	sl, ip
   1ab9e:	9b01      	ldr	r3, [sp, #4]
   1aba0:	042d      	lsls	r5, r5, #16
   1aba2:	1ace      	subs	r6, r1, r3
   1aba4:	4651      	mov	r1, sl
   1aba6:	4329      	orrs	r1, r5
   1aba8:	9d05      	ldr	r5, [sp, #20]
   1abaa:	464f      	mov	r7, r9
   1abac:	002a      	movs	r2, r5
   1abae:	040b      	lsls	r3, r1, #16
   1abb0:	0c08      	lsrs	r0, r1, #16
   1abb2:	0c1b      	lsrs	r3, r3, #16
   1abb4:	435a      	muls	r2, r3
   1abb6:	4345      	muls	r5, r0
   1abb8:	437b      	muls	r3, r7
   1abba:	4378      	muls	r0, r7
   1abbc:	195b      	adds	r3, r3, r5
   1abbe:	0c17      	lsrs	r7, r2, #16
   1abc0:	18fb      	adds	r3, r7, r3
   1abc2:	429d      	cmp	r5, r3
   1abc4:	d903      	bls.n	1abce <__aeabi_ddiv+0x3ba>
   1abc6:	2580      	movs	r5, #128	; 0x80
   1abc8:	026d      	lsls	r5, r5, #9
   1abca:	46ac      	mov	ip, r5
   1abcc:	4460      	add	r0, ip
   1abce:	0c1d      	lsrs	r5, r3, #16
   1abd0:	0412      	lsls	r2, r2, #16
   1abd2:	041b      	lsls	r3, r3, #16
   1abd4:	0c12      	lsrs	r2, r2, #16
   1abd6:	1828      	adds	r0, r5, r0
   1abd8:	189b      	adds	r3, r3, r2
   1abda:	4286      	cmp	r6, r0
   1abdc:	d200      	bcs.n	1abe0 <__aeabi_ddiv+0x3cc>
   1abde:	e093      	b.n	1ad08 <__aeabi_ddiv+0x4f4>
   1abe0:	d100      	bne.n	1abe4 <__aeabi_ddiv+0x3d0>
   1abe2:	e08e      	b.n	1ad02 <__aeabi_ddiv+0x4ee>
   1abe4:	2301      	movs	r3, #1
   1abe6:	4319      	orrs	r1, r3
   1abe8:	4ba0      	ldr	r3, [pc, #640]	; (1ae6c <__aeabi_ddiv+0x658>)
   1abea:	18e3      	adds	r3, r4, r3
   1abec:	2b00      	cmp	r3, #0
   1abee:	dc00      	bgt.n	1abf2 <__aeabi_ddiv+0x3de>
   1abf0:	e099      	b.n	1ad26 <__aeabi_ddiv+0x512>
   1abf2:	074a      	lsls	r2, r1, #29
   1abf4:	d000      	beq.n	1abf8 <__aeabi_ddiv+0x3e4>
   1abf6:	e09e      	b.n	1ad36 <__aeabi_ddiv+0x522>
   1abf8:	465a      	mov	r2, fp
   1abfa:	01d2      	lsls	r2, r2, #7
   1abfc:	d506      	bpl.n	1ac0c <__aeabi_ddiv+0x3f8>
   1abfe:	465a      	mov	r2, fp
   1ac00:	4b9b      	ldr	r3, [pc, #620]	; (1ae70 <__aeabi_ddiv+0x65c>)
   1ac02:	401a      	ands	r2, r3
   1ac04:	2380      	movs	r3, #128	; 0x80
   1ac06:	4693      	mov	fp, r2
   1ac08:	00db      	lsls	r3, r3, #3
   1ac0a:	18e3      	adds	r3, r4, r3
   1ac0c:	4a99      	ldr	r2, [pc, #612]	; (1ae74 <__aeabi_ddiv+0x660>)
   1ac0e:	4293      	cmp	r3, r2
   1ac10:	dd68      	ble.n	1ace4 <__aeabi_ddiv+0x4d0>
   1ac12:	2301      	movs	r3, #1
   1ac14:	9a02      	ldr	r2, [sp, #8]
   1ac16:	4c98      	ldr	r4, [pc, #608]	; (1ae78 <__aeabi_ddiv+0x664>)
   1ac18:	401a      	ands	r2, r3
   1ac1a:	2300      	movs	r3, #0
   1ac1c:	4694      	mov	ip, r2
   1ac1e:	4698      	mov	r8, r3
   1ac20:	2200      	movs	r2, #0
   1ac22:	e6c5      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1ac24:	2280      	movs	r2, #128	; 0x80
   1ac26:	464b      	mov	r3, r9
   1ac28:	0312      	lsls	r2, r2, #12
   1ac2a:	4213      	tst	r3, r2
   1ac2c:	d00a      	beq.n	1ac44 <__aeabi_ddiv+0x430>
   1ac2e:	465b      	mov	r3, fp
   1ac30:	4213      	tst	r3, r2
   1ac32:	d106      	bne.n	1ac42 <__aeabi_ddiv+0x42e>
   1ac34:	431a      	orrs	r2, r3
   1ac36:	0312      	lsls	r2, r2, #12
   1ac38:	0b12      	lsrs	r2, r2, #12
   1ac3a:	46ac      	mov	ip, r5
   1ac3c:	4688      	mov	r8, r1
   1ac3e:	4c8e      	ldr	r4, [pc, #568]	; (1ae78 <__aeabi_ddiv+0x664>)
   1ac40:	e6b6      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1ac42:	464b      	mov	r3, r9
   1ac44:	431a      	orrs	r2, r3
   1ac46:	0312      	lsls	r2, r2, #12
   1ac48:	0b12      	lsrs	r2, r2, #12
   1ac4a:	46bc      	mov	ip, r7
   1ac4c:	4c8a      	ldr	r4, [pc, #552]	; (1ae78 <__aeabi_ddiv+0x664>)
   1ac4e:	e6af      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1ac50:	0003      	movs	r3, r0
   1ac52:	465a      	mov	r2, fp
   1ac54:	3b28      	subs	r3, #40	; 0x28
   1ac56:	409a      	lsls	r2, r3
   1ac58:	2300      	movs	r3, #0
   1ac5a:	4691      	mov	r9, r2
   1ac5c:	4698      	mov	r8, r3
   1ac5e:	e657      	b.n	1a910 <__aeabi_ddiv+0xfc>
   1ac60:	4658      	mov	r0, fp
   1ac62:	f7ff fa41 	bl	1a0e8 <__clzsi2>
   1ac66:	3020      	adds	r0, #32
   1ac68:	e640      	b.n	1a8ec <__aeabi_ddiv+0xd8>
   1ac6a:	0003      	movs	r3, r0
   1ac6c:	4652      	mov	r2, sl
   1ac6e:	3b28      	subs	r3, #40	; 0x28
   1ac70:	409a      	lsls	r2, r3
   1ac72:	2100      	movs	r1, #0
   1ac74:	4693      	mov	fp, r2
   1ac76:	e677      	b.n	1a968 <__aeabi_ddiv+0x154>
   1ac78:	f7ff fa36 	bl	1a0e8 <__clzsi2>
   1ac7c:	3020      	adds	r0, #32
   1ac7e:	e65f      	b.n	1a940 <__aeabi_ddiv+0x12c>
   1ac80:	4588      	cmp	r8, r1
   1ac82:	d200      	bcs.n	1ac86 <__aeabi_ddiv+0x472>
   1ac84:	e6c7      	b.n	1aa16 <__aeabi_ddiv+0x202>
   1ac86:	464b      	mov	r3, r9
   1ac88:	07de      	lsls	r6, r3, #31
   1ac8a:	085d      	lsrs	r5, r3, #1
   1ac8c:	4643      	mov	r3, r8
   1ac8e:	085b      	lsrs	r3, r3, #1
   1ac90:	431e      	orrs	r6, r3
   1ac92:	4643      	mov	r3, r8
   1ac94:	07db      	lsls	r3, r3, #31
   1ac96:	469a      	mov	sl, r3
   1ac98:	e6c2      	b.n	1aa20 <__aeabi_ddiv+0x20c>
   1ac9a:	2500      	movs	r5, #0
   1ac9c:	4592      	cmp	sl, r2
   1ac9e:	d300      	bcc.n	1aca2 <__aeabi_ddiv+0x48e>
   1aca0:	e733      	b.n	1ab0a <__aeabi_ddiv+0x2f6>
   1aca2:	9e03      	ldr	r6, [sp, #12]
   1aca4:	4659      	mov	r1, fp
   1aca6:	46b4      	mov	ip, r6
   1aca8:	44e2      	add	sl, ip
   1acaa:	45b2      	cmp	sl, r6
   1acac:	41ad      	sbcs	r5, r5
   1acae:	426d      	negs	r5, r5
   1acb0:	4445      	add	r5, r8
   1acb2:	18eb      	adds	r3, r5, r3
   1acb4:	3901      	subs	r1, #1
   1acb6:	4598      	cmp	r8, r3
   1acb8:	d207      	bcs.n	1acca <__aeabi_ddiv+0x4b6>
   1acba:	4298      	cmp	r0, r3
   1acbc:	d900      	bls.n	1acc0 <__aeabi_ddiv+0x4ac>
   1acbe:	e07f      	b.n	1adc0 <__aeabi_ddiv+0x5ac>
   1acc0:	d100      	bne.n	1acc4 <__aeabi_ddiv+0x4b0>
   1acc2:	e0bc      	b.n	1ae3e <__aeabi_ddiv+0x62a>
   1acc4:	1a1d      	subs	r5, r3, r0
   1acc6:	468b      	mov	fp, r1
   1acc8:	e71f      	b.n	1ab0a <__aeabi_ddiv+0x2f6>
   1acca:	4598      	cmp	r8, r3
   1accc:	d1fa      	bne.n	1acc4 <__aeabi_ddiv+0x4b0>
   1acce:	9d03      	ldr	r5, [sp, #12]
   1acd0:	4555      	cmp	r5, sl
   1acd2:	d9f2      	bls.n	1acba <__aeabi_ddiv+0x4a6>
   1acd4:	4643      	mov	r3, r8
   1acd6:	468b      	mov	fp, r1
   1acd8:	1a1d      	subs	r5, r3, r0
   1acda:	e716      	b.n	1ab0a <__aeabi_ddiv+0x2f6>
   1acdc:	469b      	mov	fp, r3
   1acde:	e6ca      	b.n	1aa76 <__aeabi_ddiv+0x262>
   1ace0:	0015      	movs	r5, r2
   1ace2:	e6e7      	b.n	1aab4 <__aeabi_ddiv+0x2a0>
   1ace4:	465a      	mov	r2, fp
   1ace6:	08c9      	lsrs	r1, r1, #3
   1ace8:	0752      	lsls	r2, r2, #29
   1acea:	430a      	orrs	r2, r1
   1acec:	055b      	lsls	r3, r3, #21
   1acee:	4690      	mov	r8, r2
   1acf0:	0d5c      	lsrs	r4, r3, #21
   1acf2:	465a      	mov	r2, fp
   1acf4:	2301      	movs	r3, #1
   1acf6:	9902      	ldr	r1, [sp, #8]
   1acf8:	0252      	lsls	r2, r2, #9
   1acfa:	4019      	ands	r1, r3
   1acfc:	0b12      	lsrs	r2, r2, #12
   1acfe:	468c      	mov	ip, r1
   1ad00:	e656      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1ad02:	2b00      	cmp	r3, #0
   1ad04:	d100      	bne.n	1ad08 <__aeabi_ddiv+0x4f4>
   1ad06:	e76f      	b.n	1abe8 <__aeabi_ddiv+0x3d4>
   1ad08:	4446      	add	r6, r8
   1ad0a:	1e4a      	subs	r2, r1, #1
   1ad0c:	45b0      	cmp	r8, r6
   1ad0e:	d929      	bls.n	1ad64 <__aeabi_ddiv+0x550>
   1ad10:	0011      	movs	r1, r2
   1ad12:	4286      	cmp	r6, r0
   1ad14:	d000      	beq.n	1ad18 <__aeabi_ddiv+0x504>
   1ad16:	e765      	b.n	1abe4 <__aeabi_ddiv+0x3d0>
   1ad18:	9a03      	ldr	r2, [sp, #12]
   1ad1a:	4293      	cmp	r3, r2
   1ad1c:	d000      	beq.n	1ad20 <__aeabi_ddiv+0x50c>
   1ad1e:	e761      	b.n	1abe4 <__aeabi_ddiv+0x3d0>
   1ad20:	e762      	b.n	1abe8 <__aeabi_ddiv+0x3d4>
   1ad22:	2101      	movs	r1, #1
   1ad24:	4249      	negs	r1, r1
   1ad26:	2001      	movs	r0, #1
   1ad28:	1ac2      	subs	r2, r0, r3
   1ad2a:	2a38      	cmp	r2, #56	; 0x38
   1ad2c:	dd21      	ble.n	1ad72 <__aeabi_ddiv+0x55e>
   1ad2e:	9b02      	ldr	r3, [sp, #8]
   1ad30:	4003      	ands	r3, r0
   1ad32:	469c      	mov	ip, r3
   1ad34:	e638      	b.n	1a9a8 <__aeabi_ddiv+0x194>
   1ad36:	220f      	movs	r2, #15
   1ad38:	400a      	ands	r2, r1
   1ad3a:	2a04      	cmp	r2, #4
   1ad3c:	d100      	bne.n	1ad40 <__aeabi_ddiv+0x52c>
   1ad3e:	e75b      	b.n	1abf8 <__aeabi_ddiv+0x3e4>
   1ad40:	000a      	movs	r2, r1
   1ad42:	1d11      	adds	r1, r2, #4
   1ad44:	4291      	cmp	r1, r2
   1ad46:	4192      	sbcs	r2, r2
   1ad48:	4252      	negs	r2, r2
   1ad4a:	4493      	add	fp, r2
   1ad4c:	e754      	b.n	1abf8 <__aeabi_ddiv+0x3e4>
   1ad4e:	4b47      	ldr	r3, [pc, #284]	; (1ae6c <__aeabi_ddiv+0x658>)
   1ad50:	18e3      	adds	r3, r4, r3
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	dde5      	ble.n	1ad22 <__aeabi_ddiv+0x50e>
   1ad56:	2201      	movs	r2, #1
   1ad58:	4252      	negs	r2, r2
   1ad5a:	e7f2      	b.n	1ad42 <__aeabi_ddiv+0x52e>
   1ad5c:	001d      	movs	r5, r3
   1ad5e:	e6fa      	b.n	1ab56 <__aeabi_ddiv+0x342>
   1ad60:	469a      	mov	sl, r3
   1ad62:	e71c      	b.n	1ab9e <__aeabi_ddiv+0x38a>
   1ad64:	42b0      	cmp	r0, r6
   1ad66:	d839      	bhi.n	1addc <__aeabi_ddiv+0x5c8>
   1ad68:	d06e      	beq.n	1ae48 <__aeabi_ddiv+0x634>
   1ad6a:	0011      	movs	r1, r2
   1ad6c:	e73a      	b.n	1abe4 <__aeabi_ddiv+0x3d0>
   1ad6e:	9302      	str	r3, [sp, #8]
   1ad70:	e73a      	b.n	1abe8 <__aeabi_ddiv+0x3d4>
   1ad72:	2a1f      	cmp	r2, #31
   1ad74:	dc3c      	bgt.n	1adf0 <__aeabi_ddiv+0x5dc>
   1ad76:	2320      	movs	r3, #32
   1ad78:	1a9b      	subs	r3, r3, r2
   1ad7a:	000c      	movs	r4, r1
   1ad7c:	4658      	mov	r0, fp
   1ad7e:	4099      	lsls	r1, r3
   1ad80:	4098      	lsls	r0, r3
   1ad82:	1e4b      	subs	r3, r1, #1
   1ad84:	4199      	sbcs	r1, r3
   1ad86:	465b      	mov	r3, fp
   1ad88:	40d4      	lsrs	r4, r2
   1ad8a:	40d3      	lsrs	r3, r2
   1ad8c:	4320      	orrs	r0, r4
   1ad8e:	4308      	orrs	r0, r1
   1ad90:	001a      	movs	r2, r3
   1ad92:	0743      	lsls	r3, r0, #29
   1ad94:	d009      	beq.n	1adaa <__aeabi_ddiv+0x596>
   1ad96:	230f      	movs	r3, #15
   1ad98:	4003      	ands	r3, r0
   1ad9a:	2b04      	cmp	r3, #4
   1ad9c:	d005      	beq.n	1adaa <__aeabi_ddiv+0x596>
   1ad9e:	0001      	movs	r1, r0
   1ada0:	1d08      	adds	r0, r1, #4
   1ada2:	4288      	cmp	r0, r1
   1ada4:	419b      	sbcs	r3, r3
   1ada6:	425b      	negs	r3, r3
   1ada8:	18d2      	adds	r2, r2, r3
   1adaa:	0213      	lsls	r3, r2, #8
   1adac:	d53a      	bpl.n	1ae24 <__aeabi_ddiv+0x610>
   1adae:	2301      	movs	r3, #1
   1adb0:	9a02      	ldr	r2, [sp, #8]
   1adb2:	2401      	movs	r4, #1
   1adb4:	401a      	ands	r2, r3
   1adb6:	2300      	movs	r3, #0
   1adb8:	4694      	mov	ip, r2
   1adba:	4698      	mov	r8, r3
   1adbc:	2200      	movs	r2, #0
   1adbe:	e5f7      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1adc0:	2102      	movs	r1, #2
   1adc2:	4249      	negs	r1, r1
   1adc4:	468c      	mov	ip, r1
   1adc6:	9d03      	ldr	r5, [sp, #12]
   1adc8:	44e3      	add	fp, ip
   1adca:	46ac      	mov	ip, r5
   1adcc:	44e2      	add	sl, ip
   1adce:	45aa      	cmp	sl, r5
   1add0:	41ad      	sbcs	r5, r5
   1add2:	426d      	negs	r5, r5
   1add4:	4445      	add	r5, r8
   1add6:	18ed      	adds	r5, r5, r3
   1add8:	1a2d      	subs	r5, r5, r0
   1adda:	e696      	b.n	1ab0a <__aeabi_ddiv+0x2f6>
   1addc:	1e8a      	subs	r2, r1, #2
   1adde:	9903      	ldr	r1, [sp, #12]
   1ade0:	004d      	lsls	r5, r1, #1
   1ade2:	428d      	cmp	r5, r1
   1ade4:	4189      	sbcs	r1, r1
   1ade6:	4249      	negs	r1, r1
   1ade8:	4441      	add	r1, r8
   1adea:	1876      	adds	r6, r6, r1
   1adec:	9503      	str	r5, [sp, #12]
   1adee:	e78f      	b.n	1ad10 <__aeabi_ddiv+0x4fc>
   1adf0:	201f      	movs	r0, #31
   1adf2:	4240      	negs	r0, r0
   1adf4:	1ac3      	subs	r3, r0, r3
   1adf6:	4658      	mov	r0, fp
   1adf8:	40d8      	lsrs	r0, r3
   1adfa:	0003      	movs	r3, r0
   1adfc:	2a20      	cmp	r2, #32
   1adfe:	d028      	beq.n	1ae52 <__aeabi_ddiv+0x63e>
   1ae00:	2040      	movs	r0, #64	; 0x40
   1ae02:	465d      	mov	r5, fp
   1ae04:	1a82      	subs	r2, r0, r2
   1ae06:	4095      	lsls	r5, r2
   1ae08:	4329      	orrs	r1, r5
   1ae0a:	1e4a      	subs	r2, r1, #1
   1ae0c:	4191      	sbcs	r1, r2
   1ae0e:	4319      	orrs	r1, r3
   1ae10:	2307      	movs	r3, #7
   1ae12:	2200      	movs	r2, #0
   1ae14:	400b      	ands	r3, r1
   1ae16:	d009      	beq.n	1ae2c <__aeabi_ddiv+0x618>
   1ae18:	230f      	movs	r3, #15
   1ae1a:	2200      	movs	r2, #0
   1ae1c:	400b      	ands	r3, r1
   1ae1e:	0008      	movs	r0, r1
   1ae20:	2b04      	cmp	r3, #4
   1ae22:	d1bd      	bne.n	1ada0 <__aeabi_ddiv+0x58c>
   1ae24:	0001      	movs	r1, r0
   1ae26:	0753      	lsls	r3, r2, #29
   1ae28:	0252      	lsls	r2, r2, #9
   1ae2a:	0b12      	lsrs	r2, r2, #12
   1ae2c:	08c9      	lsrs	r1, r1, #3
   1ae2e:	4319      	orrs	r1, r3
   1ae30:	2301      	movs	r3, #1
   1ae32:	4688      	mov	r8, r1
   1ae34:	9902      	ldr	r1, [sp, #8]
   1ae36:	2400      	movs	r4, #0
   1ae38:	4019      	ands	r1, r3
   1ae3a:	468c      	mov	ip, r1
   1ae3c:	e5b8      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1ae3e:	4552      	cmp	r2, sl
   1ae40:	d8be      	bhi.n	1adc0 <__aeabi_ddiv+0x5ac>
   1ae42:	468b      	mov	fp, r1
   1ae44:	2500      	movs	r5, #0
   1ae46:	e660      	b.n	1ab0a <__aeabi_ddiv+0x2f6>
   1ae48:	9d03      	ldr	r5, [sp, #12]
   1ae4a:	429d      	cmp	r5, r3
   1ae4c:	d3c6      	bcc.n	1addc <__aeabi_ddiv+0x5c8>
   1ae4e:	0011      	movs	r1, r2
   1ae50:	e762      	b.n	1ad18 <__aeabi_ddiv+0x504>
   1ae52:	2500      	movs	r5, #0
   1ae54:	e7d8      	b.n	1ae08 <__aeabi_ddiv+0x5f4>
   1ae56:	2280      	movs	r2, #128	; 0x80
   1ae58:	465b      	mov	r3, fp
   1ae5a:	0312      	lsls	r2, r2, #12
   1ae5c:	431a      	orrs	r2, r3
   1ae5e:	9b01      	ldr	r3, [sp, #4]
   1ae60:	0312      	lsls	r2, r2, #12
   1ae62:	0b12      	lsrs	r2, r2, #12
   1ae64:	469c      	mov	ip, r3
   1ae66:	4688      	mov	r8, r1
   1ae68:	4c03      	ldr	r4, [pc, #12]	; (1ae78 <__aeabi_ddiv+0x664>)
   1ae6a:	e5a1      	b.n	1a9b0 <__aeabi_ddiv+0x19c>
   1ae6c:	000003ff 	.word	0x000003ff
   1ae70:	feffffff 	.word	0xfeffffff
   1ae74:	000007fe 	.word	0x000007fe
   1ae78:	000007ff 	.word	0x000007ff

0001ae7c <__eqdf2>:
   1ae7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae7e:	464f      	mov	r7, r9
   1ae80:	4646      	mov	r6, r8
   1ae82:	46d6      	mov	lr, sl
   1ae84:	005c      	lsls	r4, r3, #1
   1ae86:	b5c0      	push	{r6, r7, lr}
   1ae88:	031f      	lsls	r7, r3, #12
   1ae8a:	0fdb      	lsrs	r3, r3, #31
   1ae8c:	469a      	mov	sl, r3
   1ae8e:	4b17      	ldr	r3, [pc, #92]	; (1aeec <__eqdf2+0x70>)
   1ae90:	030e      	lsls	r6, r1, #12
   1ae92:	004d      	lsls	r5, r1, #1
   1ae94:	4684      	mov	ip, r0
   1ae96:	4680      	mov	r8, r0
   1ae98:	0b36      	lsrs	r6, r6, #12
   1ae9a:	0d6d      	lsrs	r5, r5, #21
   1ae9c:	0fc9      	lsrs	r1, r1, #31
   1ae9e:	4691      	mov	r9, r2
   1aea0:	0b3f      	lsrs	r7, r7, #12
   1aea2:	0d64      	lsrs	r4, r4, #21
   1aea4:	2001      	movs	r0, #1
   1aea6:	429d      	cmp	r5, r3
   1aea8:	d008      	beq.n	1aebc <__eqdf2+0x40>
   1aeaa:	429c      	cmp	r4, r3
   1aeac:	d001      	beq.n	1aeb2 <__eqdf2+0x36>
   1aeae:	42a5      	cmp	r5, r4
   1aeb0:	d00b      	beq.n	1aeca <__eqdf2+0x4e>
   1aeb2:	bc1c      	pop	{r2, r3, r4}
   1aeb4:	4690      	mov	r8, r2
   1aeb6:	4699      	mov	r9, r3
   1aeb8:	46a2      	mov	sl, r4
   1aeba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aebc:	4663      	mov	r3, ip
   1aebe:	4333      	orrs	r3, r6
   1aec0:	d1f7      	bne.n	1aeb2 <__eqdf2+0x36>
   1aec2:	42ac      	cmp	r4, r5
   1aec4:	d1f5      	bne.n	1aeb2 <__eqdf2+0x36>
   1aec6:	433a      	orrs	r2, r7
   1aec8:	d1f3      	bne.n	1aeb2 <__eqdf2+0x36>
   1aeca:	2001      	movs	r0, #1
   1aecc:	42be      	cmp	r6, r7
   1aece:	d1f0      	bne.n	1aeb2 <__eqdf2+0x36>
   1aed0:	45c8      	cmp	r8, r9
   1aed2:	d1ee      	bne.n	1aeb2 <__eqdf2+0x36>
   1aed4:	4551      	cmp	r1, sl
   1aed6:	d007      	beq.n	1aee8 <__eqdf2+0x6c>
   1aed8:	2d00      	cmp	r5, #0
   1aeda:	d1ea      	bne.n	1aeb2 <__eqdf2+0x36>
   1aedc:	4663      	mov	r3, ip
   1aede:	431e      	orrs	r6, r3
   1aee0:	0030      	movs	r0, r6
   1aee2:	1e46      	subs	r6, r0, #1
   1aee4:	41b0      	sbcs	r0, r6
   1aee6:	e7e4      	b.n	1aeb2 <__eqdf2+0x36>
   1aee8:	2000      	movs	r0, #0
   1aeea:	e7e2      	b.n	1aeb2 <__eqdf2+0x36>
   1aeec:	000007ff 	.word	0x000007ff

0001aef0 <__gedf2>:
   1aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aef2:	4645      	mov	r5, r8
   1aef4:	46de      	mov	lr, fp
   1aef6:	4657      	mov	r7, sl
   1aef8:	464e      	mov	r6, r9
   1aefa:	b5e0      	push	{r5, r6, r7, lr}
   1aefc:	031f      	lsls	r7, r3, #12
   1aefe:	0b3d      	lsrs	r5, r7, #12
   1af00:	4f2c      	ldr	r7, [pc, #176]	; (1afb4 <__gedf2+0xc4>)
   1af02:	030e      	lsls	r6, r1, #12
   1af04:	004c      	lsls	r4, r1, #1
   1af06:	46ab      	mov	fp, r5
   1af08:	005d      	lsls	r5, r3, #1
   1af0a:	4684      	mov	ip, r0
   1af0c:	0b36      	lsrs	r6, r6, #12
   1af0e:	0d64      	lsrs	r4, r4, #21
   1af10:	0fc9      	lsrs	r1, r1, #31
   1af12:	4690      	mov	r8, r2
   1af14:	0d6d      	lsrs	r5, r5, #21
   1af16:	0fdb      	lsrs	r3, r3, #31
   1af18:	42bc      	cmp	r4, r7
   1af1a:	d02a      	beq.n	1af72 <__gedf2+0x82>
   1af1c:	4f25      	ldr	r7, [pc, #148]	; (1afb4 <__gedf2+0xc4>)
   1af1e:	42bd      	cmp	r5, r7
   1af20:	d02d      	beq.n	1af7e <__gedf2+0x8e>
   1af22:	2c00      	cmp	r4, #0
   1af24:	d10f      	bne.n	1af46 <__gedf2+0x56>
   1af26:	4330      	orrs	r0, r6
   1af28:	0007      	movs	r7, r0
   1af2a:	4681      	mov	r9, r0
   1af2c:	4278      	negs	r0, r7
   1af2e:	4178      	adcs	r0, r7
   1af30:	b2c0      	uxtb	r0, r0
   1af32:	2d00      	cmp	r5, #0
   1af34:	d117      	bne.n	1af66 <__gedf2+0x76>
   1af36:	465f      	mov	r7, fp
   1af38:	433a      	orrs	r2, r7
   1af3a:	d114      	bne.n	1af66 <__gedf2+0x76>
   1af3c:	464b      	mov	r3, r9
   1af3e:	2000      	movs	r0, #0
   1af40:	2b00      	cmp	r3, #0
   1af42:	d00a      	beq.n	1af5a <__gedf2+0x6a>
   1af44:	e006      	b.n	1af54 <__gedf2+0x64>
   1af46:	2d00      	cmp	r5, #0
   1af48:	d102      	bne.n	1af50 <__gedf2+0x60>
   1af4a:	4658      	mov	r0, fp
   1af4c:	4302      	orrs	r2, r0
   1af4e:	d001      	beq.n	1af54 <__gedf2+0x64>
   1af50:	4299      	cmp	r1, r3
   1af52:	d018      	beq.n	1af86 <__gedf2+0x96>
   1af54:	4248      	negs	r0, r1
   1af56:	2101      	movs	r1, #1
   1af58:	4308      	orrs	r0, r1
   1af5a:	bc3c      	pop	{r2, r3, r4, r5}
   1af5c:	4690      	mov	r8, r2
   1af5e:	4699      	mov	r9, r3
   1af60:	46a2      	mov	sl, r4
   1af62:	46ab      	mov	fp, r5
   1af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af66:	2800      	cmp	r0, #0
   1af68:	d0f2      	beq.n	1af50 <__gedf2+0x60>
   1af6a:	2001      	movs	r0, #1
   1af6c:	3b01      	subs	r3, #1
   1af6e:	4318      	orrs	r0, r3
   1af70:	e7f3      	b.n	1af5a <__gedf2+0x6a>
   1af72:	0037      	movs	r7, r6
   1af74:	4307      	orrs	r7, r0
   1af76:	d0d1      	beq.n	1af1c <__gedf2+0x2c>
   1af78:	2002      	movs	r0, #2
   1af7a:	4240      	negs	r0, r0
   1af7c:	e7ed      	b.n	1af5a <__gedf2+0x6a>
   1af7e:	465f      	mov	r7, fp
   1af80:	4317      	orrs	r7, r2
   1af82:	d0ce      	beq.n	1af22 <__gedf2+0x32>
   1af84:	e7f8      	b.n	1af78 <__gedf2+0x88>
   1af86:	42ac      	cmp	r4, r5
   1af88:	dce4      	bgt.n	1af54 <__gedf2+0x64>
   1af8a:	da03      	bge.n	1af94 <__gedf2+0xa4>
   1af8c:	1e48      	subs	r0, r1, #1
   1af8e:	2101      	movs	r1, #1
   1af90:	4308      	orrs	r0, r1
   1af92:	e7e2      	b.n	1af5a <__gedf2+0x6a>
   1af94:	455e      	cmp	r6, fp
   1af96:	d8dd      	bhi.n	1af54 <__gedf2+0x64>
   1af98:	d006      	beq.n	1afa8 <__gedf2+0xb8>
   1af9a:	2000      	movs	r0, #0
   1af9c:	455e      	cmp	r6, fp
   1af9e:	d2dc      	bcs.n	1af5a <__gedf2+0x6a>
   1afa0:	2301      	movs	r3, #1
   1afa2:	1e48      	subs	r0, r1, #1
   1afa4:	4318      	orrs	r0, r3
   1afa6:	e7d8      	b.n	1af5a <__gedf2+0x6a>
   1afa8:	45c4      	cmp	ip, r8
   1afaa:	d8d3      	bhi.n	1af54 <__gedf2+0x64>
   1afac:	2000      	movs	r0, #0
   1afae:	45c4      	cmp	ip, r8
   1afb0:	d3f6      	bcc.n	1afa0 <__gedf2+0xb0>
   1afb2:	e7d2      	b.n	1af5a <__gedf2+0x6a>
   1afb4:	000007ff 	.word	0x000007ff

0001afb8 <__ledf2>:
   1afb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afba:	464e      	mov	r6, r9
   1afbc:	4645      	mov	r5, r8
   1afbe:	46de      	mov	lr, fp
   1afc0:	4657      	mov	r7, sl
   1afc2:	005c      	lsls	r4, r3, #1
   1afc4:	b5e0      	push	{r5, r6, r7, lr}
   1afc6:	031f      	lsls	r7, r3, #12
   1afc8:	0fdb      	lsrs	r3, r3, #31
   1afca:	4699      	mov	r9, r3
   1afcc:	4b2a      	ldr	r3, [pc, #168]	; (1b078 <__ledf2+0xc0>)
   1afce:	030e      	lsls	r6, r1, #12
   1afd0:	004d      	lsls	r5, r1, #1
   1afd2:	0fc9      	lsrs	r1, r1, #31
   1afd4:	4684      	mov	ip, r0
   1afd6:	0b36      	lsrs	r6, r6, #12
   1afd8:	0d6d      	lsrs	r5, r5, #21
   1afda:	468b      	mov	fp, r1
   1afdc:	4690      	mov	r8, r2
   1afde:	0b3f      	lsrs	r7, r7, #12
   1afe0:	0d64      	lsrs	r4, r4, #21
   1afe2:	429d      	cmp	r5, r3
   1afe4:	d020      	beq.n	1b028 <__ledf2+0x70>
   1afe6:	4b24      	ldr	r3, [pc, #144]	; (1b078 <__ledf2+0xc0>)
   1afe8:	429c      	cmp	r4, r3
   1afea:	d022      	beq.n	1b032 <__ledf2+0x7a>
   1afec:	2d00      	cmp	r5, #0
   1afee:	d112      	bne.n	1b016 <__ledf2+0x5e>
   1aff0:	4330      	orrs	r0, r6
   1aff2:	4243      	negs	r3, r0
   1aff4:	4143      	adcs	r3, r0
   1aff6:	b2db      	uxtb	r3, r3
   1aff8:	2c00      	cmp	r4, #0
   1affa:	d01f      	beq.n	1b03c <__ledf2+0x84>
   1affc:	2b00      	cmp	r3, #0
   1affe:	d00c      	beq.n	1b01a <__ledf2+0x62>
   1b000:	464b      	mov	r3, r9
   1b002:	2001      	movs	r0, #1
   1b004:	3b01      	subs	r3, #1
   1b006:	4303      	orrs	r3, r0
   1b008:	0018      	movs	r0, r3
   1b00a:	bc3c      	pop	{r2, r3, r4, r5}
   1b00c:	4690      	mov	r8, r2
   1b00e:	4699      	mov	r9, r3
   1b010:	46a2      	mov	sl, r4
   1b012:	46ab      	mov	fp, r5
   1b014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b016:	2c00      	cmp	r4, #0
   1b018:	d016      	beq.n	1b048 <__ledf2+0x90>
   1b01a:	45cb      	cmp	fp, r9
   1b01c:	d017      	beq.n	1b04e <__ledf2+0x96>
   1b01e:	465b      	mov	r3, fp
   1b020:	4259      	negs	r1, r3
   1b022:	2301      	movs	r3, #1
   1b024:	430b      	orrs	r3, r1
   1b026:	e7ef      	b.n	1b008 <__ledf2+0x50>
   1b028:	0031      	movs	r1, r6
   1b02a:	2302      	movs	r3, #2
   1b02c:	4301      	orrs	r1, r0
   1b02e:	d1eb      	bne.n	1b008 <__ledf2+0x50>
   1b030:	e7d9      	b.n	1afe6 <__ledf2+0x2e>
   1b032:	0039      	movs	r1, r7
   1b034:	2302      	movs	r3, #2
   1b036:	4311      	orrs	r1, r2
   1b038:	d1e6      	bne.n	1b008 <__ledf2+0x50>
   1b03a:	e7d7      	b.n	1afec <__ledf2+0x34>
   1b03c:	433a      	orrs	r2, r7
   1b03e:	d1dd      	bne.n	1affc <__ledf2+0x44>
   1b040:	2300      	movs	r3, #0
   1b042:	2800      	cmp	r0, #0
   1b044:	d0e0      	beq.n	1b008 <__ledf2+0x50>
   1b046:	e7ea      	b.n	1b01e <__ledf2+0x66>
   1b048:	433a      	orrs	r2, r7
   1b04a:	d1e6      	bne.n	1b01a <__ledf2+0x62>
   1b04c:	e7e7      	b.n	1b01e <__ledf2+0x66>
   1b04e:	42a5      	cmp	r5, r4
   1b050:	dce5      	bgt.n	1b01e <__ledf2+0x66>
   1b052:	db05      	blt.n	1b060 <__ledf2+0xa8>
   1b054:	42be      	cmp	r6, r7
   1b056:	d8e2      	bhi.n	1b01e <__ledf2+0x66>
   1b058:	d007      	beq.n	1b06a <__ledf2+0xb2>
   1b05a:	2300      	movs	r3, #0
   1b05c:	42be      	cmp	r6, r7
   1b05e:	d2d3      	bcs.n	1b008 <__ledf2+0x50>
   1b060:	4659      	mov	r1, fp
   1b062:	2301      	movs	r3, #1
   1b064:	3901      	subs	r1, #1
   1b066:	430b      	orrs	r3, r1
   1b068:	e7ce      	b.n	1b008 <__ledf2+0x50>
   1b06a:	45c4      	cmp	ip, r8
   1b06c:	d8d7      	bhi.n	1b01e <__ledf2+0x66>
   1b06e:	2300      	movs	r3, #0
   1b070:	45c4      	cmp	ip, r8
   1b072:	d3f5      	bcc.n	1b060 <__ledf2+0xa8>
   1b074:	e7c8      	b.n	1b008 <__ledf2+0x50>
   1b076:	46c0      	nop			; (mov r8, r8)
   1b078:	000007ff 	.word	0x000007ff

0001b07c <__aeabi_dmul>:
   1b07c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b07e:	4657      	mov	r7, sl
   1b080:	4645      	mov	r5, r8
   1b082:	46de      	mov	lr, fp
   1b084:	464e      	mov	r6, r9
   1b086:	b5e0      	push	{r5, r6, r7, lr}
   1b088:	030c      	lsls	r4, r1, #12
   1b08a:	4698      	mov	r8, r3
   1b08c:	004e      	lsls	r6, r1, #1
   1b08e:	0b23      	lsrs	r3, r4, #12
   1b090:	b087      	sub	sp, #28
   1b092:	0007      	movs	r7, r0
   1b094:	4692      	mov	sl, r2
   1b096:	469b      	mov	fp, r3
   1b098:	0d76      	lsrs	r6, r6, #21
   1b09a:	0fcd      	lsrs	r5, r1, #31
   1b09c:	2e00      	cmp	r6, #0
   1b09e:	d06b      	beq.n	1b178 <__aeabi_dmul+0xfc>
   1b0a0:	4b6d      	ldr	r3, [pc, #436]	; (1b258 <__aeabi_dmul+0x1dc>)
   1b0a2:	429e      	cmp	r6, r3
   1b0a4:	d035      	beq.n	1b112 <__aeabi_dmul+0x96>
   1b0a6:	2480      	movs	r4, #128	; 0x80
   1b0a8:	465b      	mov	r3, fp
   1b0aa:	0f42      	lsrs	r2, r0, #29
   1b0ac:	0424      	lsls	r4, r4, #16
   1b0ae:	00db      	lsls	r3, r3, #3
   1b0b0:	4314      	orrs	r4, r2
   1b0b2:	431c      	orrs	r4, r3
   1b0b4:	00c3      	lsls	r3, r0, #3
   1b0b6:	4699      	mov	r9, r3
   1b0b8:	4b68      	ldr	r3, [pc, #416]	; (1b25c <__aeabi_dmul+0x1e0>)
   1b0ba:	46a3      	mov	fp, r4
   1b0bc:	469c      	mov	ip, r3
   1b0be:	2300      	movs	r3, #0
   1b0c0:	2700      	movs	r7, #0
   1b0c2:	4466      	add	r6, ip
   1b0c4:	9302      	str	r3, [sp, #8]
   1b0c6:	4643      	mov	r3, r8
   1b0c8:	031c      	lsls	r4, r3, #12
   1b0ca:	005a      	lsls	r2, r3, #1
   1b0cc:	0fdb      	lsrs	r3, r3, #31
   1b0ce:	4650      	mov	r0, sl
   1b0d0:	0b24      	lsrs	r4, r4, #12
   1b0d2:	0d52      	lsrs	r2, r2, #21
   1b0d4:	4698      	mov	r8, r3
   1b0d6:	d100      	bne.n	1b0da <__aeabi_dmul+0x5e>
   1b0d8:	e076      	b.n	1b1c8 <__aeabi_dmul+0x14c>
   1b0da:	4b5f      	ldr	r3, [pc, #380]	; (1b258 <__aeabi_dmul+0x1dc>)
   1b0dc:	429a      	cmp	r2, r3
   1b0de:	d06d      	beq.n	1b1bc <__aeabi_dmul+0x140>
   1b0e0:	2380      	movs	r3, #128	; 0x80
   1b0e2:	0f41      	lsrs	r1, r0, #29
   1b0e4:	041b      	lsls	r3, r3, #16
   1b0e6:	430b      	orrs	r3, r1
   1b0e8:	495c      	ldr	r1, [pc, #368]	; (1b25c <__aeabi_dmul+0x1e0>)
   1b0ea:	00e4      	lsls	r4, r4, #3
   1b0ec:	468c      	mov	ip, r1
   1b0ee:	431c      	orrs	r4, r3
   1b0f0:	00c3      	lsls	r3, r0, #3
   1b0f2:	2000      	movs	r0, #0
   1b0f4:	4462      	add	r2, ip
   1b0f6:	4641      	mov	r1, r8
   1b0f8:	18b6      	adds	r6, r6, r2
   1b0fa:	4069      	eors	r1, r5
   1b0fc:	1c72      	adds	r2, r6, #1
   1b0fe:	9101      	str	r1, [sp, #4]
   1b100:	4694      	mov	ip, r2
   1b102:	4307      	orrs	r7, r0
   1b104:	2f0f      	cmp	r7, #15
   1b106:	d900      	bls.n	1b10a <__aeabi_dmul+0x8e>
   1b108:	e0b0      	b.n	1b26c <__aeabi_dmul+0x1f0>
   1b10a:	4a55      	ldr	r2, [pc, #340]	; (1b260 <__aeabi_dmul+0x1e4>)
   1b10c:	00bf      	lsls	r7, r7, #2
   1b10e:	59d2      	ldr	r2, [r2, r7]
   1b110:	4697      	mov	pc, r2
   1b112:	465b      	mov	r3, fp
   1b114:	4303      	orrs	r3, r0
   1b116:	4699      	mov	r9, r3
   1b118:	d000      	beq.n	1b11c <__aeabi_dmul+0xa0>
   1b11a:	e087      	b.n	1b22c <__aeabi_dmul+0x1b0>
   1b11c:	2300      	movs	r3, #0
   1b11e:	469b      	mov	fp, r3
   1b120:	3302      	adds	r3, #2
   1b122:	2708      	movs	r7, #8
   1b124:	9302      	str	r3, [sp, #8]
   1b126:	e7ce      	b.n	1b0c6 <__aeabi_dmul+0x4a>
   1b128:	4642      	mov	r2, r8
   1b12a:	9201      	str	r2, [sp, #4]
   1b12c:	2802      	cmp	r0, #2
   1b12e:	d067      	beq.n	1b200 <__aeabi_dmul+0x184>
   1b130:	2803      	cmp	r0, #3
   1b132:	d100      	bne.n	1b136 <__aeabi_dmul+0xba>
   1b134:	e20e      	b.n	1b554 <__aeabi_dmul+0x4d8>
   1b136:	2801      	cmp	r0, #1
   1b138:	d000      	beq.n	1b13c <__aeabi_dmul+0xc0>
   1b13a:	e162      	b.n	1b402 <__aeabi_dmul+0x386>
   1b13c:	2300      	movs	r3, #0
   1b13e:	2400      	movs	r4, #0
   1b140:	2200      	movs	r2, #0
   1b142:	4699      	mov	r9, r3
   1b144:	9901      	ldr	r1, [sp, #4]
   1b146:	4001      	ands	r1, r0
   1b148:	b2cd      	uxtb	r5, r1
   1b14a:	2100      	movs	r1, #0
   1b14c:	0312      	lsls	r2, r2, #12
   1b14e:	0d0b      	lsrs	r3, r1, #20
   1b150:	0b12      	lsrs	r2, r2, #12
   1b152:	051b      	lsls	r3, r3, #20
   1b154:	4313      	orrs	r3, r2
   1b156:	4a43      	ldr	r2, [pc, #268]	; (1b264 <__aeabi_dmul+0x1e8>)
   1b158:	0524      	lsls	r4, r4, #20
   1b15a:	4013      	ands	r3, r2
   1b15c:	431c      	orrs	r4, r3
   1b15e:	0064      	lsls	r4, r4, #1
   1b160:	07ed      	lsls	r5, r5, #31
   1b162:	0864      	lsrs	r4, r4, #1
   1b164:	432c      	orrs	r4, r5
   1b166:	4648      	mov	r0, r9
   1b168:	0021      	movs	r1, r4
   1b16a:	b007      	add	sp, #28
   1b16c:	bc3c      	pop	{r2, r3, r4, r5}
   1b16e:	4690      	mov	r8, r2
   1b170:	4699      	mov	r9, r3
   1b172:	46a2      	mov	sl, r4
   1b174:	46ab      	mov	fp, r5
   1b176:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b178:	4303      	orrs	r3, r0
   1b17a:	4699      	mov	r9, r3
   1b17c:	d04f      	beq.n	1b21e <__aeabi_dmul+0x1a2>
   1b17e:	465b      	mov	r3, fp
   1b180:	2b00      	cmp	r3, #0
   1b182:	d100      	bne.n	1b186 <__aeabi_dmul+0x10a>
   1b184:	e189      	b.n	1b49a <__aeabi_dmul+0x41e>
   1b186:	4658      	mov	r0, fp
   1b188:	f7fe ffae 	bl	1a0e8 <__clzsi2>
   1b18c:	0003      	movs	r3, r0
   1b18e:	3b0b      	subs	r3, #11
   1b190:	2b1c      	cmp	r3, #28
   1b192:	dd00      	ble.n	1b196 <__aeabi_dmul+0x11a>
   1b194:	e17a      	b.n	1b48c <__aeabi_dmul+0x410>
   1b196:	221d      	movs	r2, #29
   1b198:	1ad3      	subs	r3, r2, r3
   1b19a:	003a      	movs	r2, r7
   1b19c:	0001      	movs	r1, r0
   1b19e:	465c      	mov	r4, fp
   1b1a0:	40da      	lsrs	r2, r3
   1b1a2:	3908      	subs	r1, #8
   1b1a4:	408c      	lsls	r4, r1
   1b1a6:	0013      	movs	r3, r2
   1b1a8:	408f      	lsls	r7, r1
   1b1aa:	4323      	orrs	r3, r4
   1b1ac:	469b      	mov	fp, r3
   1b1ae:	46b9      	mov	r9, r7
   1b1b0:	2300      	movs	r3, #0
   1b1b2:	4e2d      	ldr	r6, [pc, #180]	; (1b268 <__aeabi_dmul+0x1ec>)
   1b1b4:	2700      	movs	r7, #0
   1b1b6:	1a36      	subs	r6, r6, r0
   1b1b8:	9302      	str	r3, [sp, #8]
   1b1ba:	e784      	b.n	1b0c6 <__aeabi_dmul+0x4a>
   1b1bc:	4653      	mov	r3, sl
   1b1be:	4323      	orrs	r3, r4
   1b1c0:	d12a      	bne.n	1b218 <__aeabi_dmul+0x19c>
   1b1c2:	2400      	movs	r4, #0
   1b1c4:	2002      	movs	r0, #2
   1b1c6:	e796      	b.n	1b0f6 <__aeabi_dmul+0x7a>
   1b1c8:	4653      	mov	r3, sl
   1b1ca:	4323      	orrs	r3, r4
   1b1cc:	d020      	beq.n	1b210 <__aeabi_dmul+0x194>
   1b1ce:	2c00      	cmp	r4, #0
   1b1d0:	d100      	bne.n	1b1d4 <__aeabi_dmul+0x158>
   1b1d2:	e157      	b.n	1b484 <__aeabi_dmul+0x408>
   1b1d4:	0020      	movs	r0, r4
   1b1d6:	f7fe ff87 	bl	1a0e8 <__clzsi2>
   1b1da:	0003      	movs	r3, r0
   1b1dc:	3b0b      	subs	r3, #11
   1b1de:	2b1c      	cmp	r3, #28
   1b1e0:	dd00      	ble.n	1b1e4 <__aeabi_dmul+0x168>
   1b1e2:	e149      	b.n	1b478 <__aeabi_dmul+0x3fc>
   1b1e4:	211d      	movs	r1, #29
   1b1e6:	1acb      	subs	r3, r1, r3
   1b1e8:	4651      	mov	r1, sl
   1b1ea:	0002      	movs	r2, r0
   1b1ec:	40d9      	lsrs	r1, r3
   1b1ee:	4653      	mov	r3, sl
   1b1f0:	3a08      	subs	r2, #8
   1b1f2:	4094      	lsls	r4, r2
   1b1f4:	4093      	lsls	r3, r2
   1b1f6:	430c      	orrs	r4, r1
   1b1f8:	4a1b      	ldr	r2, [pc, #108]	; (1b268 <__aeabi_dmul+0x1ec>)
   1b1fa:	1a12      	subs	r2, r2, r0
   1b1fc:	2000      	movs	r0, #0
   1b1fe:	e77a      	b.n	1b0f6 <__aeabi_dmul+0x7a>
   1b200:	2501      	movs	r5, #1
   1b202:	9b01      	ldr	r3, [sp, #4]
   1b204:	4c14      	ldr	r4, [pc, #80]	; (1b258 <__aeabi_dmul+0x1dc>)
   1b206:	401d      	ands	r5, r3
   1b208:	2300      	movs	r3, #0
   1b20a:	2200      	movs	r2, #0
   1b20c:	4699      	mov	r9, r3
   1b20e:	e79c      	b.n	1b14a <__aeabi_dmul+0xce>
   1b210:	2400      	movs	r4, #0
   1b212:	2200      	movs	r2, #0
   1b214:	2001      	movs	r0, #1
   1b216:	e76e      	b.n	1b0f6 <__aeabi_dmul+0x7a>
   1b218:	4653      	mov	r3, sl
   1b21a:	2003      	movs	r0, #3
   1b21c:	e76b      	b.n	1b0f6 <__aeabi_dmul+0x7a>
   1b21e:	2300      	movs	r3, #0
   1b220:	469b      	mov	fp, r3
   1b222:	3301      	adds	r3, #1
   1b224:	2704      	movs	r7, #4
   1b226:	2600      	movs	r6, #0
   1b228:	9302      	str	r3, [sp, #8]
   1b22a:	e74c      	b.n	1b0c6 <__aeabi_dmul+0x4a>
   1b22c:	2303      	movs	r3, #3
   1b22e:	4681      	mov	r9, r0
   1b230:	270c      	movs	r7, #12
   1b232:	9302      	str	r3, [sp, #8]
   1b234:	e747      	b.n	1b0c6 <__aeabi_dmul+0x4a>
   1b236:	2280      	movs	r2, #128	; 0x80
   1b238:	2300      	movs	r3, #0
   1b23a:	2500      	movs	r5, #0
   1b23c:	0312      	lsls	r2, r2, #12
   1b23e:	4699      	mov	r9, r3
   1b240:	4c05      	ldr	r4, [pc, #20]	; (1b258 <__aeabi_dmul+0x1dc>)
   1b242:	e782      	b.n	1b14a <__aeabi_dmul+0xce>
   1b244:	465c      	mov	r4, fp
   1b246:	464b      	mov	r3, r9
   1b248:	9802      	ldr	r0, [sp, #8]
   1b24a:	e76f      	b.n	1b12c <__aeabi_dmul+0xb0>
   1b24c:	465c      	mov	r4, fp
   1b24e:	464b      	mov	r3, r9
   1b250:	9501      	str	r5, [sp, #4]
   1b252:	9802      	ldr	r0, [sp, #8]
   1b254:	e76a      	b.n	1b12c <__aeabi_dmul+0xb0>
   1b256:	46c0      	nop			; (mov r8, r8)
   1b258:	000007ff 	.word	0x000007ff
   1b25c:	fffffc01 	.word	0xfffffc01
   1b260:	00021a90 	.word	0x00021a90
   1b264:	800fffff 	.word	0x800fffff
   1b268:	fffffc0d 	.word	0xfffffc0d
   1b26c:	464a      	mov	r2, r9
   1b26e:	4649      	mov	r1, r9
   1b270:	0c17      	lsrs	r7, r2, #16
   1b272:	0c1a      	lsrs	r2, r3, #16
   1b274:	041b      	lsls	r3, r3, #16
   1b276:	0c1b      	lsrs	r3, r3, #16
   1b278:	0408      	lsls	r0, r1, #16
   1b27a:	0019      	movs	r1, r3
   1b27c:	0c00      	lsrs	r0, r0, #16
   1b27e:	4341      	muls	r1, r0
   1b280:	0015      	movs	r5, r2
   1b282:	4688      	mov	r8, r1
   1b284:	0019      	movs	r1, r3
   1b286:	437d      	muls	r5, r7
   1b288:	4379      	muls	r1, r7
   1b28a:	9503      	str	r5, [sp, #12]
   1b28c:	4689      	mov	r9, r1
   1b28e:	0029      	movs	r1, r5
   1b290:	0015      	movs	r5, r2
   1b292:	4345      	muls	r5, r0
   1b294:	444d      	add	r5, r9
   1b296:	9502      	str	r5, [sp, #8]
   1b298:	4645      	mov	r5, r8
   1b29a:	0c2d      	lsrs	r5, r5, #16
   1b29c:	46aa      	mov	sl, r5
   1b29e:	9d02      	ldr	r5, [sp, #8]
   1b2a0:	4455      	add	r5, sl
   1b2a2:	45a9      	cmp	r9, r5
   1b2a4:	d906      	bls.n	1b2b4 <__aeabi_dmul+0x238>
   1b2a6:	468a      	mov	sl, r1
   1b2a8:	2180      	movs	r1, #128	; 0x80
   1b2aa:	0249      	lsls	r1, r1, #9
   1b2ac:	4689      	mov	r9, r1
   1b2ae:	44ca      	add	sl, r9
   1b2b0:	4651      	mov	r1, sl
   1b2b2:	9103      	str	r1, [sp, #12]
   1b2b4:	0c29      	lsrs	r1, r5, #16
   1b2b6:	9104      	str	r1, [sp, #16]
   1b2b8:	4641      	mov	r1, r8
   1b2ba:	0409      	lsls	r1, r1, #16
   1b2bc:	042d      	lsls	r5, r5, #16
   1b2be:	0c09      	lsrs	r1, r1, #16
   1b2c0:	4688      	mov	r8, r1
   1b2c2:	0029      	movs	r1, r5
   1b2c4:	0c25      	lsrs	r5, r4, #16
   1b2c6:	0424      	lsls	r4, r4, #16
   1b2c8:	4441      	add	r1, r8
   1b2ca:	0c24      	lsrs	r4, r4, #16
   1b2cc:	9105      	str	r1, [sp, #20]
   1b2ce:	0021      	movs	r1, r4
   1b2d0:	4341      	muls	r1, r0
   1b2d2:	4688      	mov	r8, r1
   1b2d4:	0021      	movs	r1, r4
   1b2d6:	4379      	muls	r1, r7
   1b2d8:	468a      	mov	sl, r1
   1b2da:	4368      	muls	r0, r5
   1b2dc:	4641      	mov	r1, r8
   1b2de:	4450      	add	r0, sl
   1b2e0:	4681      	mov	r9, r0
   1b2e2:	0c08      	lsrs	r0, r1, #16
   1b2e4:	4448      	add	r0, r9
   1b2e6:	436f      	muls	r7, r5
   1b2e8:	4582      	cmp	sl, r0
   1b2ea:	d903      	bls.n	1b2f4 <__aeabi_dmul+0x278>
   1b2ec:	2180      	movs	r1, #128	; 0x80
   1b2ee:	0249      	lsls	r1, r1, #9
   1b2f0:	4689      	mov	r9, r1
   1b2f2:	444f      	add	r7, r9
   1b2f4:	0c01      	lsrs	r1, r0, #16
   1b2f6:	4689      	mov	r9, r1
   1b2f8:	0039      	movs	r1, r7
   1b2fa:	4449      	add	r1, r9
   1b2fc:	9102      	str	r1, [sp, #8]
   1b2fe:	4641      	mov	r1, r8
   1b300:	040f      	lsls	r7, r1, #16
   1b302:	9904      	ldr	r1, [sp, #16]
   1b304:	0c3f      	lsrs	r7, r7, #16
   1b306:	4688      	mov	r8, r1
   1b308:	0400      	lsls	r0, r0, #16
   1b30a:	19c0      	adds	r0, r0, r7
   1b30c:	4480      	add	r8, r0
   1b30e:	4641      	mov	r1, r8
   1b310:	9104      	str	r1, [sp, #16]
   1b312:	4659      	mov	r1, fp
   1b314:	0c0f      	lsrs	r7, r1, #16
   1b316:	0409      	lsls	r1, r1, #16
   1b318:	0c09      	lsrs	r1, r1, #16
   1b31a:	4688      	mov	r8, r1
   1b31c:	4359      	muls	r1, r3
   1b31e:	468a      	mov	sl, r1
   1b320:	0039      	movs	r1, r7
   1b322:	4351      	muls	r1, r2
   1b324:	4689      	mov	r9, r1
   1b326:	4641      	mov	r1, r8
   1b328:	434a      	muls	r2, r1
   1b32a:	4651      	mov	r1, sl
   1b32c:	0c09      	lsrs	r1, r1, #16
   1b32e:	468b      	mov	fp, r1
   1b330:	437b      	muls	r3, r7
   1b332:	18d2      	adds	r2, r2, r3
   1b334:	445a      	add	r2, fp
   1b336:	4293      	cmp	r3, r2
   1b338:	d903      	bls.n	1b342 <__aeabi_dmul+0x2c6>
   1b33a:	2380      	movs	r3, #128	; 0x80
   1b33c:	025b      	lsls	r3, r3, #9
   1b33e:	469b      	mov	fp, r3
   1b340:	44d9      	add	r9, fp
   1b342:	4651      	mov	r1, sl
   1b344:	0409      	lsls	r1, r1, #16
   1b346:	0c09      	lsrs	r1, r1, #16
   1b348:	468a      	mov	sl, r1
   1b34a:	4641      	mov	r1, r8
   1b34c:	4361      	muls	r1, r4
   1b34e:	437c      	muls	r4, r7
   1b350:	0c13      	lsrs	r3, r2, #16
   1b352:	0412      	lsls	r2, r2, #16
   1b354:	444b      	add	r3, r9
   1b356:	4452      	add	r2, sl
   1b358:	46a1      	mov	r9, r4
   1b35a:	468a      	mov	sl, r1
   1b35c:	003c      	movs	r4, r7
   1b35e:	4641      	mov	r1, r8
   1b360:	436c      	muls	r4, r5
   1b362:	434d      	muls	r5, r1
   1b364:	4651      	mov	r1, sl
   1b366:	444d      	add	r5, r9
   1b368:	0c0f      	lsrs	r7, r1, #16
   1b36a:	197d      	adds	r5, r7, r5
   1b36c:	45a9      	cmp	r9, r5
   1b36e:	d903      	bls.n	1b378 <__aeabi_dmul+0x2fc>
   1b370:	2180      	movs	r1, #128	; 0x80
   1b372:	0249      	lsls	r1, r1, #9
   1b374:	4688      	mov	r8, r1
   1b376:	4444      	add	r4, r8
   1b378:	9f04      	ldr	r7, [sp, #16]
   1b37a:	9903      	ldr	r1, [sp, #12]
   1b37c:	46b8      	mov	r8, r7
   1b37e:	4441      	add	r1, r8
   1b380:	468b      	mov	fp, r1
   1b382:	4583      	cmp	fp, r0
   1b384:	4180      	sbcs	r0, r0
   1b386:	4241      	negs	r1, r0
   1b388:	4688      	mov	r8, r1
   1b38a:	4651      	mov	r1, sl
   1b38c:	0408      	lsls	r0, r1, #16
   1b38e:	042f      	lsls	r7, r5, #16
   1b390:	0c00      	lsrs	r0, r0, #16
   1b392:	183f      	adds	r7, r7, r0
   1b394:	4658      	mov	r0, fp
   1b396:	9902      	ldr	r1, [sp, #8]
   1b398:	1810      	adds	r0, r2, r0
   1b39a:	4689      	mov	r9, r1
   1b39c:	4290      	cmp	r0, r2
   1b39e:	4192      	sbcs	r2, r2
   1b3a0:	444f      	add	r7, r9
   1b3a2:	46ba      	mov	sl, r7
   1b3a4:	4252      	negs	r2, r2
   1b3a6:	4699      	mov	r9, r3
   1b3a8:	4693      	mov	fp, r2
   1b3aa:	44c2      	add	sl, r8
   1b3ac:	44d1      	add	r9, sl
   1b3ae:	44cb      	add	fp, r9
   1b3b0:	428f      	cmp	r7, r1
   1b3b2:	41bf      	sbcs	r7, r7
   1b3b4:	45c2      	cmp	sl, r8
   1b3b6:	4189      	sbcs	r1, r1
   1b3b8:	4599      	cmp	r9, r3
   1b3ba:	419b      	sbcs	r3, r3
   1b3bc:	4593      	cmp	fp, r2
   1b3be:	4192      	sbcs	r2, r2
   1b3c0:	427f      	negs	r7, r7
   1b3c2:	4249      	negs	r1, r1
   1b3c4:	0c2d      	lsrs	r5, r5, #16
   1b3c6:	4252      	negs	r2, r2
   1b3c8:	430f      	orrs	r7, r1
   1b3ca:	425b      	negs	r3, r3
   1b3cc:	4313      	orrs	r3, r2
   1b3ce:	197f      	adds	r7, r7, r5
   1b3d0:	18ff      	adds	r7, r7, r3
   1b3d2:	465b      	mov	r3, fp
   1b3d4:	193c      	adds	r4, r7, r4
   1b3d6:	0ddb      	lsrs	r3, r3, #23
   1b3d8:	9a05      	ldr	r2, [sp, #20]
   1b3da:	0264      	lsls	r4, r4, #9
   1b3dc:	431c      	orrs	r4, r3
   1b3de:	0243      	lsls	r3, r0, #9
   1b3e0:	4313      	orrs	r3, r2
   1b3e2:	1e5d      	subs	r5, r3, #1
   1b3e4:	41ab      	sbcs	r3, r5
   1b3e6:	465a      	mov	r2, fp
   1b3e8:	0dc0      	lsrs	r0, r0, #23
   1b3ea:	4303      	orrs	r3, r0
   1b3ec:	0252      	lsls	r2, r2, #9
   1b3ee:	4313      	orrs	r3, r2
   1b3f0:	01e2      	lsls	r2, r4, #7
   1b3f2:	d556      	bpl.n	1b4a2 <__aeabi_dmul+0x426>
   1b3f4:	2001      	movs	r0, #1
   1b3f6:	085a      	lsrs	r2, r3, #1
   1b3f8:	4003      	ands	r3, r0
   1b3fa:	4313      	orrs	r3, r2
   1b3fc:	07e2      	lsls	r2, r4, #31
   1b3fe:	4313      	orrs	r3, r2
   1b400:	0864      	lsrs	r4, r4, #1
   1b402:	485a      	ldr	r0, [pc, #360]	; (1b56c <__aeabi_dmul+0x4f0>)
   1b404:	4460      	add	r0, ip
   1b406:	2800      	cmp	r0, #0
   1b408:	dd4d      	ble.n	1b4a6 <__aeabi_dmul+0x42a>
   1b40a:	075a      	lsls	r2, r3, #29
   1b40c:	d009      	beq.n	1b422 <__aeabi_dmul+0x3a6>
   1b40e:	220f      	movs	r2, #15
   1b410:	401a      	ands	r2, r3
   1b412:	2a04      	cmp	r2, #4
   1b414:	d005      	beq.n	1b422 <__aeabi_dmul+0x3a6>
   1b416:	1d1a      	adds	r2, r3, #4
   1b418:	429a      	cmp	r2, r3
   1b41a:	419b      	sbcs	r3, r3
   1b41c:	425b      	negs	r3, r3
   1b41e:	18e4      	adds	r4, r4, r3
   1b420:	0013      	movs	r3, r2
   1b422:	01e2      	lsls	r2, r4, #7
   1b424:	d504      	bpl.n	1b430 <__aeabi_dmul+0x3b4>
   1b426:	2080      	movs	r0, #128	; 0x80
   1b428:	4a51      	ldr	r2, [pc, #324]	; (1b570 <__aeabi_dmul+0x4f4>)
   1b42a:	00c0      	lsls	r0, r0, #3
   1b42c:	4014      	ands	r4, r2
   1b42e:	4460      	add	r0, ip
   1b430:	4a50      	ldr	r2, [pc, #320]	; (1b574 <__aeabi_dmul+0x4f8>)
   1b432:	4290      	cmp	r0, r2
   1b434:	dd00      	ble.n	1b438 <__aeabi_dmul+0x3bc>
   1b436:	e6e3      	b.n	1b200 <__aeabi_dmul+0x184>
   1b438:	2501      	movs	r5, #1
   1b43a:	08db      	lsrs	r3, r3, #3
   1b43c:	0762      	lsls	r2, r4, #29
   1b43e:	431a      	orrs	r2, r3
   1b440:	0264      	lsls	r4, r4, #9
   1b442:	9b01      	ldr	r3, [sp, #4]
   1b444:	4691      	mov	r9, r2
   1b446:	0b22      	lsrs	r2, r4, #12
   1b448:	0544      	lsls	r4, r0, #21
   1b44a:	0d64      	lsrs	r4, r4, #21
   1b44c:	401d      	ands	r5, r3
   1b44e:	e67c      	b.n	1b14a <__aeabi_dmul+0xce>
   1b450:	2280      	movs	r2, #128	; 0x80
   1b452:	4659      	mov	r1, fp
   1b454:	0312      	lsls	r2, r2, #12
   1b456:	4211      	tst	r1, r2
   1b458:	d008      	beq.n	1b46c <__aeabi_dmul+0x3f0>
   1b45a:	4214      	tst	r4, r2
   1b45c:	d106      	bne.n	1b46c <__aeabi_dmul+0x3f0>
   1b45e:	4322      	orrs	r2, r4
   1b460:	0312      	lsls	r2, r2, #12
   1b462:	0b12      	lsrs	r2, r2, #12
   1b464:	4645      	mov	r5, r8
   1b466:	4699      	mov	r9, r3
   1b468:	4c43      	ldr	r4, [pc, #268]	; (1b578 <__aeabi_dmul+0x4fc>)
   1b46a:	e66e      	b.n	1b14a <__aeabi_dmul+0xce>
   1b46c:	465b      	mov	r3, fp
   1b46e:	431a      	orrs	r2, r3
   1b470:	0312      	lsls	r2, r2, #12
   1b472:	0b12      	lsrs	r2, r2, #12
   1b474:	4c40      	ldr	r4, [pc, #256]	; (1b578 <__aeabi_dmul+0x4fc>)
   1b476:	e668      	b.n	1b14a <__aeabi_dmul+0xce>
   1b478:	0003      	movs	r3, r0
   1b47a:	4654      	mov	r4, sl
   1b47c:	3b28      	subs	r3, #40	; 0x28
   1b47e:	409c      	lsls	r4, r3
   1b480:	2300      	movs	r3, #0
   1b482:	e6b9      	b.n	1b1f8 <__aeabi_dmul+0x17c>
   1b484:	f7fe fe30 	bl	1a0e8 <__clzsi2>
   1b488:	3020      	adds	r0, #32
   1b48a:	e6a6      	b.n	1b1da <__aeabi_dmul+0x15e>
   1b48c:	0003      	movs	r3, r0
   1b48e:	3b28      	subs	r3, #40	; 0x28
   1b490:	409f      	lsls	r7, r3
   1b492:	2300      	movs	r3, #0
   1b494:	46bb      	mov	fp, r7
   1b496:	4699      	mov	r9, r3
   1b498:	e68a      	b.n	1b1b0 <__aeabi_dmul+0x134>
   1b49a:	f7fe fe25 	bl	1a0e8 <__clzsi2>
   1b49e:	3020      	adds	r0, #32
   1b4a0:	e674      	b.n	1b18c <__aeabi_dmul+0x110>
   1b4a2:	46b4      	mov	ip, r6
   1b4a4:	e7ad      	b.n	1b402 <__aeabi_dmul+0x386>
   1b4a6:	2501      	movs	r5, #1
   1b4a8:	1a2a      	subs	r2, r5, r0
   1b4aa:	2a38      	cmp	r2, #56	; 0x38
   1b4ac:	dd06      	ble.n	1b4bc <__aeabi_dmul+0x440>
   1b4ae:	9b01      	ldr	r3, [sp, #4]
   1b4b0:	2400      	movs	r4, #0
   1b4b2:	401d      	ands	r5, r3
   1b4b4:	2300      	movs	r3, #0
   1b4b6:	2200      	movs	r2, #0
   1b4b8:	4699      	mov	r9, r3
   1b4ba:	e646      	b.n	1b14a <__aeabi_dmul+0xce>
   1b4bc:	2a1f      	cmp	r2, #31
   1b4be:	dc21      	bgt.n	1b504 <__aeabi_dmul+0x488>
   1b4c0:	2520      	movs	r5, #32
   1b4c2:	0020      	movs	r0, r4
   1b4c4:	1aad      	subs	r5, r5, r2
   1b4c6:	001e      	movs	r6, r3
   1b4c8:	40ab      	lsls	r3, r5
   1b4ca:	40a8      	lsls	r0, r5
   1b4cc:	40d6      	lsrs	r6, r2
   1b4ce:	1e5d      	subs	r5, r3, #1
   1b4d0:	41ab      	sbcs	r3, r5
   1b4d2:	4330      	orrs	r0, r6
   1b4d4:	4318      	orrs	r0, r3
   1b4d6:	40d4      	lsrs	r4, r2
   1b4d8:	0743      	lsls	r3, r0, #29
   1b4da:	d009      	beq.n	1b4f0 <__aeabi_dmul+0x474>
   1b4dc:	230f      	movs	r3, #15
   1b4de:	4003      	ands	r3, r0
   1b4e0:	2b04      	cmp	r3, #4
   1b4e2:	d005      	beq.n	1b4f0 <__aeabi_dmul+0x474>
   1b4e4:	0003      	movs	r3, r0
   1b4e6:	1d18      	adds	r0, r3, #4
   1b4e8:	4298      	cmp	r0, r3
   1b4ea:	419b      	sbcs	r3, r3
   1b4ec:	425b      	negs	r3, r3
   1b4ee:	18e4      	adds	r4, r4, r3
   1b4f0:	0223      	lsls	r3, r4, #8
   1b4f2:	d521      	bpl.n	1b538 <__aeabi_dmul+0x4bc>
   1b4f4:	2501      	movs	r5, #1
   1b4f6:	9b01      	ldr	r3, [sp, #4]
   1b4f8:	2401      	movs	r4, #1
   1b4fa:	401d      	ands	r5, r3
   1b4fc:	2300      	movs	r3, #0
   1b4fe:	2200      	movs	r2, #0
   1b500:	4699      	mov	r9, r3
   1b502:	e622      	b.n	1b14a <__aeabi_dmul+0xce>
   1b504:	251f      	movs	r5, #31
   1b506:	0021      	movs	r1, r4
   1b508:	426d      	negs	r5, r5
   1b50a:	1a28      	subs	r0, r5, r0
   1b50c:	40c1      	lsrs	r1, r0
   1b50e:	0008      	movs	r0, r1
   1b510:	2a20      	cmp	r2, #32
   1b512:	d01d      	beq.n	1b550 <__aeabi_dmul+0x4d4>
   1b514:	355f      	adds	r5, #95	; 0x5f
   1b516:	1aaa      	subs	r2, r5, r2
   1b518:	4094      	lsls	r4, r2
   1b51a:	4323      	orrs	r3, r4
   1b51c:	1e5c      	subs	r4, r3, #1
   1b51e:	41a3      	sbcs	r3, r4
   1b520:	2507      	movs	r5, #7
   1b522:	4303      	orrs	r3, r0
   1b524:	401d      	ands	r5, r3
   1b526:	2200      	movs	r2, #0
   1b528:	2d00      	cmp	r5, #0
   1b52a:	d009      	beq.n	1b540 <__aeabi_dmul+0x4c4>
   1b52c:	220f      	movs	r2, #15
   1b52e:	2400      	movs	r4, #0
   1b530:	401a      	ands	r2, r3
   1b532:	0018      	movs	r0, r3
   1b534:	2a04      	cmp	r2, #4
   1b536:	d1d6      	bne.n	1b4e6 <__aeabi_dmul+0x46a>
   1b538:	0003      	movs	r3, r0
   1b53a:	0765      	lsls	r5, r4, #29
   1b53c:	0264      	lsls	r4, r4, #9
   1b53e:	0b22      	lsrs	r2, r4, #12
   1b540:	08db      	lsrs	r3, r3, #3
   1b542:	432b      	orrs	r3, r5
   1b544:	2501      	movs	r5, #1
   1b546:	4699      	mov	r9, r3
   1b548:	9b01      	ldr	r3, [sp, #4]
   1b54a:	2400      	movs	r4, #0
   1b54c:	401d      	ands	r5, r3
   1b54e:	e5fc      	b.n	1b14a <__aeabi_dmul+0xce>
   1b550:	2400      	movs	r4, #0
   1b552:	e7e2      	b.n	1b51a <__aeabi_dmul+0x49e>
   1b554:	2280      	movs	r2, #128	; 0x80
   1b556:	2501      	movs	r5, #1
   1b558:	0312      	lsls	r2, r2, #12
   1b55a:	4322      	orrs	r2, r4
   1b55c:	9901      	ldr	r1, [sp, #4]
   1b55e:	0312      	lsls	r2, r2, #12
   1b560:	0b12      	lsrs	r2, r2, #12
   1b562:	400d      	ands	r5, r1
   1b564:	4699      	mov	r9, r3
   1b566:	4c04      	ldr	r4, [pc, #16]	; (1b578 <__aeabi_dmul+0x4fc>)
   1b568:	e5ef      	b.n	1b14a <__aeabi_dmul+0xce>
   1b56a:	46c0      	nop			; (mov r8, r8)
   1b56c:	000003ff 	.word	0x000003ff
   1b570:	feffffff 	.word	0xfeffffff
   1b574:	000007fe 	.word	0x000007fe
   1b578:	000007ff 	.word	0x000007ff

0001b57c <__aeabi_dsub>:
   1b57c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b57e:	4646      	mov	r6, r8
   1b580:	46d6      	mov	lr, sl
   1b582:	464f      	mov	r7, r9
   1b584:	030c      	lsls	r4, r1, #12
   1b586:	b5c0      	push	{r6, r7, lr}
   1b588:	0fcd      	lsrs	r5, r1, #31
   1b58a:	004e      	lsls	r6, r1, #1
   1b58c:	0a61      	lsrs	r1, r4, #9
   1b58e:	0f44      	lsrs	r4, r0, #29
   1b590:	430c      	orrs	r4, r1
   1b592:	00c1      	lsls	r1, r0, #3
   1b594:	0058      	lsls	r0, r3, #1
   1b596:	0d40      	lsrs	r0, r0, #21
   1b598:	4684      	mov	ip, r0
   1b59a:	468a      	mov	sl, r1
   1b59c:	000f      	movs	r7, r1
   1b59e:	0319      	lsls	r1, r3, #12
   1b5a0:	0f50      	lsrs	r0, r2, #29
   1b5a2:	0a49      	lsrs	r1, r1, #9
   1b5a4:	4301      	orrs	r1, r0
   1b5a6:	48c6      	ldr	r0, [pc, #792]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b5a8:	0d76      	lsrs	r6, r6, #21
   1b5aa:	46a8      	mov	r8, r5
   1b5ac:	0fdb      	lsrs	r3, r3, #31
   1b5ae:	00d2      	lsls	r2, r2, #3
   1b5b0:	4584      	cmp	ip, r0
   1b5b2:	d100      	bne.n	1b5b6 <__aeabi_dsub+0x3a>
   1b5b4:	e0d8      	b.n	1b768 <__aeabi_dsub+0x1ec>
   1b5b6:	2001      	movs	r0, #1
   1b5b8:	4043      	eors	r3, r0
   1b5ba:	42ab      	cmp	r3, r5
   1b5bc:	d100      	bne.n	1b5c0 <__aeabi_dsub+0x44>
   1b5be:	e0a6      	b.n	1b70e <__aeabi_dsub+0x192>
   1b5c0:	4660      	mov	r0, ip
   1b5c2:	1a35      	subs	r5, r6, r0
   1b5c4:	2d00      	cmp	r5, #0
   1b5c6:	dc00      	bgt.n	1b5ca <__aeabi_dsub+0x4e>
   1b5c8:	e105      	b.n	1b7d6 <__aeabi_dsub+0x25a>
   1b5ca:	2800      	cmp	r0, #0
   1b5cc:	d110      	bne.n	1b5f0 <__aeabi_dsub+0x74>
   1b5ce:	000b      	movs	r3, r1
   1b5d0:	4313      	orrs	r3, r2
   1b5d2:	d100      	bne.n	1b5d6 <__aeabi_dsub+0x5a>
   1b5d4:	e0d7      	b.n	1b786 <__aeabi_dsub+0x20a>
   1b5d6:	1e6b      	subs	r3, r5, #1
   1b5d8:	2b00      	cmp	r3, #0
   1b5da:	d000      	beq.n	1b5de <__aeabi_dsub+0x62>
   1b5dc:	e14b      	b.n	1b876 <__aeabi_dsub+0x2fa>
   1b5de:	4653      	mov	r3, sl
   1b5e0:	1a9f      	subs	r7, r3, r2
   1b5e2:	45ba      	cmp	sl, r7
   1b5e4:	4180      	sbcs	r0, r0
   1b5e6:	1a64      	subs	r4, r4, r1
   1b5e8:	4240      	negs	r0, r0
   1b5ea:	1a24      	subs	r4, r4, r0
   1b5ec:	2601      	movs	r6, #1
   1b5ee:	e01e      	b.n	1b62e <__aeabi_dsub+0xb2>
   1b5f0:	4bb3      	ldr	r3, [pc, #716]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b5f2:	429e      	cmp	r6, r3
   1b5f4:	d048      	beq.n	1b688 <__aeabi_dsub+0x10c>
   1b5f6:	2380      	movs	r3, #128	; 0x80
   1b5f8:	041b      	lsls	r3, r3, #16
   1b5fa:	4319      	orrs	r1, r3
   1b5fc:	2d38      	cmp	r5, #56	; 0x38
   1b5fe:	dd00      	ble.n	1b602 <__aeabi_dsub+0x86>
   1b600:	e119      	b.n	1b836 <__aeabi_dsub+0x2ba>
   1b602:	2d1f      	cmp	r5, #31
   1b604:	dd00      	ble.n	1b608 <__aeabi_dsub+0x8c>
   1b606:	e14c      	b.n	1b8a2 <__aeabi_dsub+0x326>
   1b608:	2320      	movs	r3, #32
   1b60a:	000f      	movs	r7, r1
   1b60c:	1b5b      	subs	r3, r3, r5
   1b60e:	0010      	movs	r0, r2
   1b610:	409a      	lsls	r2, r3
   1b612:	409f      	lsls	r7, r3
   1b614:	40e8      	lsrs	r0, r5
   1b616:	1e53      	subs	r3, r2, #1
   1b618:	419a      	sbcs	r2, r3
   1b61a:	40e9      	lsrs	r1, r5
   1b61c:	4307      	orrs	r7, r0
   1b61e:	4317      	orrs	r7, r2
   1b620:	4653      	mov	r3, sl
   1b622:	1bdf      	subs	r7, r3, r7
   1b624:	1a61      	subs	r1, r4, r1
   1b626:	45ba      	cmp	sl, r7
   1b628:	41a4      	sbcs	r4, r4
   1b62a:	4264      	negs	r4, r4
   1b62c:	1b0c      	subs	r4, r1, r4
   1b62e:	0223      	lsls	r3, r4, #8
   1b630:	d400      	bmi.n	1b634 <__aeabi_dsub+0xb8>
   1b632:	e0c5      	b.n	1b7c0 <__aeabi_dsub+0x244>
   1b634:	0264      	lsls	r4, r4, #9
   1b636:	0a65      	lsrs	r5, r4, #9
   1b638:	2d00      	cmp	r5, #0
   1b63a:	d100      	bne.n	1b63e <__aeabi_dsub+0xc2>
   1b63c:	e0f6      	b.n	1b82c <__aeabi_dsub+0x2b0>
   1b63e:	0028      	movs	r0, r5
   1b640:	f7fe fd52 	bl	1a0e8 <__clzsi2>
   1b644:	0003      	movs	r3, r0
   1b646:	3b08      	subs	r3, #8
   1b648:	2b1f      	cmp	r3, #31
   1b64a:	dd00      	ble.n	1b64e <__aeabi_dsub+0xd2>
   1b64c:	e0e9      	b.n	1b822 <__aeabi_dsub+0x2a6>
   1b64e:	2220      	movs	r2, #32
   1b650:	003c      	movs	r4, r7
   1b652:	1ad2      	subs	r2, r2, r3
   1b654:	409d      	lsls	r5, r3
   1b656:	40d4      	lsrs	r4, r2
   1b658:	409f      	lsls	r7, r3
   1b65a:	4325      	orrs	r5, r4
   1b65c:	429e      	cmp	r6, r3
   1b65e:	dd00      	ble.n	1b662 <__aeabi_dsub+0xe6>
   1b660:	e0db      	b.n	1b81a <__aeabi_dsub+0x29e>
   1b662:	1b9e      	subs	r6, r3, r6
   1b664:	1c73      	adds	r3, r6, #1
   1b666:	2b1f      	cmp	r3, #31
   1b668:	dd00      	ble.n	1b66c <__aeabi_dsub+0xf0>
   1b66a:	e10a      	b.n	1b882 <__aeabi_dsub+0x306>
   1b66c:	2220      	movs	r2, #32
   1b66e:	0038      	movs	r0, r7
   1b670:	1ad2      	subs	r2, r2, r3
   1b672:	0029      	movs	r1, r5
   1b674:	4097      	lsls	r7, r2
   1b676:	002c      	movs	r4, r5
   1b678:	4091      	lsls	r1, r2
   1b67a:	40d8      	lsrs	r0, r3
   1b67c:	1e7a      	subs	r2, r7, #1
   1b67e:	4197      	sbcs	r7, r2
   1b680:	40dc      	lsrs	r4, r3
   1b682:	2600      	movs	r6, #0
   1b684:	4301      	orrs	r1, r0
   1b686:	430f      	orrs	r7, r1
   1b688:	077b      	lsls	r3, r7, #29
   1b68a:	d009      	beq.n	1b6a0 <__aeabi_dsub+0x124>
   1b68c:	230f      	movs	r3, #15
   1b68e:	403b      	ands	r3, r7
   1b690:	2b04      	cmp	r3, #4
   1b692:	d005      	beq.n	1b6a0 <__aeabi_dsub+0x124>
   1b694:	1d3b      	adds	r3, r7, #4
   1b696:	42bb      	cmp	r3, r7
   1b698:	41bf      	sbcs	r7, r7
   1b69a:	427f      	negs	r7, r7
   1b69c:	19e4      	adds	r4, r4, r7
   1b69e:	001f      	movs	r7, r3
   1b6a0:	0223      	lsls	r3, r4, #8
   1b6a2:	d525      	bpl.n	1b6f0 <__aeabi_dsub+0x174>
   1b6a4:	4b86      	ldr	r3, [pc, #536]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b6a6:	3601      	adds	r6, #1
   1b6a8:	429e      	cmp	r6, r3
   1b6aa:	d100      	bne.n	1b6ae <__aeabi_dsub+0x132>
   1b6ac:	e0af      	b.n	1b80e <__aeabi_dsub+0x292>
   1b6ae:	4b85      	ldr	r3, [pc, #532]	; (1b8c4 <__aeabi_dsub+0x348>)
   1b6b0:	2501      	movs	r5, #1
   1b6b2:	401c      	ands	r4, r3
   1b6b4:	4643      	mov	r3, r8
   1b6b6:	0762      	lsls	r2, r4, #29
   1b6b8:	08ff      	lsrs	r7, r7, #3
   1b6ba:	0264      	lsls	r4, r4, #9
   1b6bc:	0576      	lsls	r6, r6, #21
   1b6be:	4317      	orrs	r7, r2
   1b6c0:	0b24      	lsrs	r4, r4, #12
   1b6c2:	0d76      	lsrs	r6, r6, #21
   1b6c4:	401d      	ands	r5, r3
   1b6c6:	2100      	movs	r1, #0
   1b6c8:	0324      	lsls	r4, r4, #12
   1b6ca:	0b23      	lsrs	r3, r4, #12
   1b6cc:	0d0c      	lsrs	r4, r1, #20
   1b6ce:	4a7e      	ldr	r2, [pc, #504]	; (1b8c8 <__aeabi_dsub+0x34c>)
   1b6d0:	0524      	lsls	r4, r4, #20
   1b6d2:	431c      	orrs	r4, r3
   1b6d4:	4014      	ands	r4, r2
   1b6d6:	0533      	lsls	r3, r6, #20
   1b6d8:	4323      	orrs	r3, r4
   1b6da:	005b      	lsls	r3, r3, #1
   1b6dc:	07ed      	lsls	r5, r5, #31
   1b6de:	085b      	lsrs	r3, r3, #1
   1b6e0:	432b      	orrs	r3, r5
   1b6e2:	0038      	movs	r0, r7
   1b6e4:	0019      	movs	r1, r3
   1b6e6:	bc1c      	pop	{r2, r3, r4}
   1b6e8:	4690      	mov	r8, r2
   1b6ea:	4699      	mov	r9, r3
   1b6ec:	46a2      	mov	sl, r4
   1b6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b6f0:	2501      	movs	r5, #1
   1b6f2:	4643      	mov	r3, r8
   1b6f4:	0762      	lsls	r2, r4, #29
   1b6f6:	08ff      	lsrs	r7, r7, #3
   1b6f8:	4317      	orrs	r7, r2
   1b6fa:	08e4      	lsrs	r4, r4, #3
   1b6fc:	401d      	ands	r5, r3
   1b6fe:	4b70      	ldr	r3, [pc, #448]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b700:	429e      	cmp	r6, r3
   1b702:	d036      	beq.n	1b772 <__aeabi_dsub+0x1f6>
   1b704:	0324      	lsls	r4, r4, #12
   1b706:	0576      	lsls	r6, r6, #21
   1b708:	0b24      	lsrs	r4, r4, #12
   1b70a:	0d76      	lsrs	r6, r6, #21
   1b70c:	e7db      	b.n	1b6c6 <__aeabi_dsub+0x14a>
   1b70e:	4663      	mov	r3, ip
   1b710:	1af3      	subs	r3, r6, r3
   1b712:	2b00      	cmp	r3, #0
   1b714:	dc00      	bgt.n	1b718 <__aeabi_dsub+0x19c>
   1b716:	e094      	b.n	1b842 <__aeabi_dsub+0x2c6>
   1b718:	4660      	mov	r0, ip
   1b71a:	2800      	cmp	r0, #0
   1b71c:	d035      	beq.n	1b78a <__aeabi_dsub+0x20e>
   1b71e:	4868      	ldr	r0, [pc, #416]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b720:	4286      	cmp	r6, r0
   1b722:	d0b1      	beq.n	1b688 <__aeabi_dsub+0x10c>
   1b724:	2780      	movs	r7, #128	; 0x80
   1b726:	043f      	lsls	r7, r7, #16
   1b728:	4339      	orrs	r1, r7
   1b72a:	2b38      	cmp	r3, #56	; 0x38
   1b72c:	dc00      	bgt.n	1b730 <__aeabi_dsub+0x1b4>
   1b72e:	e0fd      	b.n	1b92c <__aeabi_dsub+0x3b0>
   1b730:	430a      	orrs	r2, r1
   1b732:	0017      	movs	r7, r2
   1b734:	2100      	movs	r1, #0
   1b736:	1e7a      	subs	r2, r7, #1
   1b738:	4197      	sbcs	r7, r2
   1b73a:	4457      	add	r7, sl
   1b73c:	4557      	cmp	r7, sl
   1b73e:	4180      	sbcs	r0, r0
   1b740:	1909      	adds	r1, r1, r4
   1b742:	4244      	negs	r4, r0
   1b744:	190c      	adds	r4, r1, r4
   1b746:	0223      	lsls	r3, r4, #8
   1b748:	d53a      	bpl.n	1b7c0 <__aeabi_dsub+0x244>
   1b74a:	4b5d      	ldr	r3, [pc, #372]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b74c:	3601      	adds	r6, #1
   1b74e:	429e      	cmp	r6, r3
   1b750:	d100      	bne.n	1b754 <__aeabi_dsub+0x1d8>
   1b752:	e14b      	b.n	1b9ec <__aeabi_dsub+0x470>
   1b754:	2201      	movs	r2, #1
   1b756:	4b5b      	ldr	r3, [pc, #364]	; (1b8c4 <__aeabi_dsub+0x348>)
   1b758:	401c      	ands	r4, r3
   1b75a:	087b      	lsrs	r3, r7, #1
   1b75c:	4017      	ands	r7, r2
   1b75e:	431f      	orrs	r7, r3
   1b760:	07e2      	lsls	r2, r4, #31
   1b762:	4317      	orrs	r7, r2
   1b764:	0864      	lsrs	r4, r4, #1
   1b766:	e78f      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b768:	0008      	movs	r0, r1
   1b76a:	4310      	orrs	r0, r2
   1b76c:	d000      	beq.n	1b770 <__aeabi_dsub+0x1f4>
   1b76e:	e724      	b.n	1b5ba <__aeabi_dsub+0x3e>
   1b770:	e721      	b.n	1b5b6 <__aeabi_dsub+0x3a>
   1b772:	0023      	movs	r3, r4
   1b774:	433b      	orrs	r3, r7
   1b776:	d100      	bne.n	1b77a <__aeabi_dsub+0x1fe>
   1b778:	e1b9      	b.n	1baee <__aeabi_dsub+0x572>
   1b77a:	2280      	movs	r2, #128	; 0x80
   1b77c:	0312      	lsls	r2, r2, #12
   1b77e:	4314      	orrs	r4, r2
   1b780:	0324      	lsls	r4, r4, #12
   1b782:	0b24      	lsrs	r4, r4, #12
   1b784:	e79f      	b.n	1b6c6 <__aeabi_dsub+0x14a>
   1b786:	002e      	movs	r6, r5
   1b788:	e77e      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b78a:	0008      	movs	r0, r1
   1b78c:	4310      	orrs	r0, r2
   1b78e:	d100      	bne.n	1b792 <__aeabi_dsub+0x216>
   1b790:	e0ca      	b.n	1b928 <__aeabi_dsub+0x3ac>
   1b792:	1e58      	subs	r0, r3, #1
   1b794:	4684      	mov	ip, r0
   1b796:	2800      	cmp	r0, #0
   1b798:	d000      	beq.n	1b79c <__aeabi_dsub+0x220>
   1b79a:	e0e7      	b.n	1b96c <__aeabi_dsub+0x3f0>
   1b79c:	4452      	add	r2, sl
   1b79e:	4552      	cmp	r2, sl
   1b7a0:	4180      	sbcs	r0, r0
   1b7a2:	1864      	adds	r4, r4, r1
   1b7a4:	4240      	negs	r0, r0
   1b7a6:	1824      	adds	r4, r4, r0
   1b7a8:	0017      	movs	r7, r2
   1b7aa:	2601      	movs	r6, #1
   1b7ac:	0223      	lsls	r3, r4, #8
   1b7ae:	d507      	bpl.n	1b7c0 <__aeabi_dsub+0x244>
   1b7b0:	2602      	movs	r6, #2
   1b7b2:	e7cf      	b.n	1b754 <__aeabi_dsub+0x1d8>
   1b7b4:	4664      	mov	r4, ip
   1b7b6:	432c      	orrs	r4, r5
   1b7b8:	d100      	bne.n	1b7bc <__aeabi_dsub+0x240>
   1b7ba:	e1b3      	b.n	1bb24 <__aeabi_dsub+0x5a8>
   1b7bc:	002c      	movs	r4, r5
   1b7be:	4667      	mov	r7, ip
   1b7c0:	077b      	lsls	r3, r7, #29
   1b7c2:	d000      	beq.n	1b7c6 <__aeabi_dsub+0x24a>
   1b7c4:	e762      	b.n	1b68c <__aeabi_dsub+0x110>
   1b7c6:	0763      	lsls	r3, r4, #29
   1b7c8:	08ff      	lsrs	r7, r7, #3
   1b7ca:	431f      	orrs	r7, r3
   1b7cc:	2501      	movs	r5, #1
   1b7ce:	4643      	mov	r3, r8
   1b7d0:	08e4      	lsrs	r4, r4, #3
   1b7d2:	401d      	ands	r5, r3
   1b7d4:	e793      	b.n	1b6fe <__aeabi_dsub+0x182>
   1b7d6:	2d00      	cmp	r5, #0
   1b7d8:	d178      	bne.n	1b8cc <__aeabi_dsub+0x350>
   1b7da:	1c75      	adds	r5, r6, #1
   1b7dc:	056d      	lsls	r5, r5, #21
   1b7de:	0d6d      	lsrs	r5, r5, #21
   1b7e0:	2d01      	cmp	r5, #1
   1b7e2:	dc00      	bgt.n	1b7e6 <__aeabi_dsub+0x26a>
   1b7e4:	e0f2      	b.n	1b9cc <__aeabi_dsub+0x450>
   1b7e6:	4650      	mov	r0, sl
   1b7e8:	1a80      	subs	r0, r0, r2
   1b7ea:	4582      	cmp	sl, r0
   1b7ec:	41bf      	sbcs	r7, r7
   1b7ee:	1a65      	subs	r5, r4, r1
   1b7f0:	427f      	negs	r7, r7
   1b7f2:	1bed      	subs	r5, r5, r7
   1b7f4:	4684      	mov	ip, r0
   1b7f6:	0228      	lsls	r0, r5, #8
   1b7f8:	d400      	bmi.n	1b7fc <__aeabi_dsub+0x280>
   1b7fa:	e08c      	b.n	1b916 <__aeabi_dsub+0x39a>
   1b7fc:	4650      	mov	r0, sl
   1b7fe:	1a17      	subs	r7, r2, r0
   1b800:	42ba      	cmp	r2, r7
   1b802:	4192      	sbcs	r2, r2
   1b804:	1b0c      	subs	r4, r1, r4
   1b806:	4255      	negs	r5, r2
   1b808:	1b65      	subs	r5, r4, r5
   1b80a:	4698      	mov	r8, r3
   1b80c:	e714      	b.n	1b638 <__aeabi_dsub+0xbc>
   1b80e:	2501      	movs	r5, #1
   1b810:	4643      	mov	r3, r8
   1b812:	2400      	movs	r4, #0
   1b814:	401d      	ands	r5, r3
   1b816:	2700      	movs	r7, #0
   1b818:	e755      	b.n	1b6c6 <__aeabi_dsub+0x14a>
   1b81a:	4c2a      	ldr	r4, [pc, #168]	; (1b8c4 <__aeabi_dsub+0x348>)
   1b81c:	1af6      	subs	r6, r6, r3
   1b81e:	402c      	ands	r4, r5
   1b820:	e732      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b822:	003d      	movs	r5, r7
   1b824:	3828      	subs	r0, #40	; 0x28
   1b826:	4085      	lsls	r5, r0
   1b828:	2700      	movs	r7, #0
   1b82a:	e717      	b.n	1b65c <__aeabi_dsub+0xe0>
   1b82c:	0038      	movs	r0, r7
   1b82e:	f7fe fc5b 	bl	1a0e8 <__clzsi2>
   1b832:	3020      	adds	r0, #32
   1b834:	e706      	b.n	1b644 <__aeabi_dsub+0xc8>
   1b836:	430a      	orrs	r2, r1
   1b838:	0017      	movs	r7, r2
   1b83a:	2100      	movs	r1, #0
   1b83c:	1e7a      	subs	r2, r7, #1
   1b83e:	4197      	sbcs	r7, r2
   1b840:	e6ee      	b.n	1b620 <__aeabi_dsub+0xa4>
   1b842:	2b00      	cmp	r3, #0
   1b844:	d000      	beq.n	1b848 <__aeabi_dsub+0x2cc>
   1b846:	e0e5      	b.n	1ba14 <__aeabi_dsub+0x498>
   1b848:	1c73      	adds	r3, r6, #1
   1b84a:	469c      	mov	ip, r3
   1b84c:	055b      	lsls	r3, r3, #21
   1b84e:	0d5b      	lsrs	r3, r3, #21
   1b850:	2b01      	cmp	r3, #1
   1b852:	dc00      	bgt.n	1b856 <__aeabi_dsub+0x2da>
   1b854:	e09f      	b.n	1b996 <__aeabi_dsub+0x41a>
   1b856:	4b1a      	ldr	r3, [pc, #104]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b858:	459c      	cmp	ip, r3
   1b85a:	d100      	bne.n	1b85e <__aeabi_dsub+0x2e2>
   1b85c:	e0c5      	b.n	1b9ea <__aeabi_dsub+0x46e>
   1b85e:	4452      	add	r2, sl
   1b860:	4552      	cmp	r2, sl
   1b862:	4180      	sbcs	r0, r0
   1b864:	1864      	adds	r4, r4, r1
   1b866:	4240      	negs	r0, r0
   1b868:	1824      	adds	r4, r4, r0
   1b86a:	07e7      	lsls	r7, r4, #31
   1b86c:	0852      	lsrs	r2, r2, #1
   1b86e:	4317      	orrs	r7, r2
   1b870:	0864      	lsrs	r4, r4, #1
   1b872:	4666      	mov	r6, ip
   1b874:	e708      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b876:	4812      	ldr	r0, [pc, #72]	; (1b8c0 <__aeabi_dsub+0x344>)
   1b878:	4285      	cmp	r5, r0
   1b87a:	d100      	bne.n	1b87e <__aeabi_dsub+0x302>
   1b87c:	e085      	b.n	1b98a <__aeabi_dsub+0x40e>
   1b87e:	001d      	movs	r5, r3
   1b880:	e6bc      	b.n	1b5fc <__aeabi_dsub+0x80>
   1b882:	0029      	movs	r1, r5
   1b884:	3e1f      	subs	r6, #31
   1b886:	40f1      	lsrs	r1, r6
   1b888:	2b20      	cmp	r3, #32
   1b88a:	d100      	bne.n	1b88e <__aeabi_dsub+0x312>
   1b88c:	e07f      	b.n	1b98e <__aeabi_dsub+0x412>
   1b88e:	2240      	movs	r2, #64	; 0x40
   1b890:	1ad3      	subs	r3, r2, r3
   1b892:	409d      	lsls	r5, r3
   1b894:	432f      	orrs	r7, r5
   1b896:	1e7d      	subs	r5, r7, #1
   1b898:	41af      	sbcs	r7, r5
   1b89a:	2400      	movs	r4, #0
   1b89c:	430f      	orrs	r7, r1
   1b89e:	2600      	movs	r6, #0
   1b8a0:	e78e      	b.n	1b7c0 <__aeabi_dsub+0x244>
   1b8a2:	002b      	movs	r3, r5
   1b8a4:	000f      	movs	r7, r1
   1b8a6:	3b20      	subs	r3, #32
   1b8a8:	40df      	lsrs	r7, r3
   1b8aa:	2d20      	cmp	r5, #32
   1b8ac:	d071      	beq.n	1b992 <__aeabi_dsub+0x416>
   1b8ae:	2340      	movs	r3, #64	; 0x40
   1b8b0:	1b5d      	subs	r5, r3, r5
   1b8b2:	40a9      	lsls	r1, r5
   1b8b4:	430a      	orrs	r2, r1
   1b8b6:	1e51      	subs	r1, r2, #1
   1b8b8:	418a      	sbcs	r2, r1
   1b8ba:	2100      	movs	r1, #0
   1b8bc:	4317      	orrs	r7, r2
   1b8be:	e6af      	b.n	1b620 <__aeabi_dsub+0xa4>
   1b8c0:	000007ff 	.word	0x000007ff
   1b8c4:	ff7fffff 	.word	0xff7fffff
   1b8c8:	800fffff 	.word	0x800fffff
   1b8cc:	2e00      	cmp	r6, #0
   1b8ce:	d03e      	beq.n	1b94e <__aeabi_dsub+0x3d2>
   1b8d0:	4eb3      	ldr	r6, [pc, #716]	; (1bba0 <__aeabi_dsub+0x624>)
   1b8d2:	45b4      	cmp	ip, r6
   1b8d4:	d045      	beq.n	1b962 <__aeabi_dsub+0x3e6>
   1b8d6:	2680      	movs	r6, #128	; 0x80
   1b8d8:	0436      	lsls	r6, r6, #16
   1b8da:	426d      	negs	r5, r5
   1b8dc:	4334      	orrs	r4, r6
   1b8de:	2d38      	cmp	r5, #56	; 0x38
   1b8e0:	dd00      	ble.n	1b8e4 <__aeabi_dsub+0x368>
   1b8e2:	e0a8      	b.n	1ba36 <__aeabi_dsub+0x4ba>
   1b8e4:	2d1f      	cmp	r5, #31
   1b8e6:	dd00      	ble.n	1b8ea <__aeabi_dsub+0x36e>
   1b8e8:	e11f      	b.n	1bb2a <__aeabi_dsub+0x5ae>
   1b8ea:	2620      	movs	r6, #32
   1b8ec:	0027      	movs	r7, r4
   1b8ee:	4650      	mov	r0, sl
   1b8f0:	1b76      	subs	r6, r6, r5
   1b8f2:	40b7      	lsls	r7, r6
   1b8f4:	40e8      	lsrs	r0, r5
   1b8f6:	4307      	orrs	r7, r0
   1b8f8:	4650      	mov	r0, sl
   1b8fa:	40b0      	lsls	r0, r6
   1b8fc:	1e46      	subs	r6, r0, #1
   1b8fe:	41b0      	sbcs	r0, r6
   1b900:	40ec      	lsrs	r4, r5
   1b902:	4338      	orrs	r0, r7
   1b904:	1a17      	subs	r7, r2, r0
   1b906:	42ba      	cmp	r2, r7
   1b908:	4192      	sbcs	r2, r2
   1b90a:	1b0c      	subs	r4, r1, r4
   1b90c:	4252      	negs	r2, r2
   1b90e:	1aa4      	subs	r4, r4, r2
   1b910:	4666      	mov	r6, ip
   1b912:	4698      	mov	r8, r3
   1b914:	e68b      	b.n	1b62e <__aeabi_dsub+0xb2>
   1b916:	4664      	mov	r4, ip
   1b918:	4667      	mov	r7, ip
   1b91a:	432c      	orrs	r4, r5
   1b91c:	d000      	beq.n	1b920 <__aeabi_dsub+0x3a4>
   1b91e:	e68b      	b.n	1b638 <__aeabi_dsub+0xbc>
   1b920:	2500      	movs	r5, #0
   1b922:	2600      	movs	r6, #0
   1b924:	2700      	movs	r7, #0
   1b926:	e6ea      	b.n	1b6fe <__aeabi_dsub+0x182>
   1b928:	001e      	movs	r6, r3
   1b92a:	e6ad      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b92c:	2b1f      	cmp	r3, #31
   1b92e:	dc60      	bgt.n	1b9f2 <__aeabi_dsub+0x476>
   1b930:	2720      	movs	r7, #32
   1b932:	1af8      	subs	r0, r7, r3
   1b934:	000f      	movs	r7, r1
   1b936:	4684      	mov	ip, r0
   1b938:	4087      	lsls	r7, r0
   1b93a:	0010      	movs	r0, r2
   1b93c:	40d8      	lsrs	r0, r3
   1b93e:	4307      	orrs	r7, r0
   1b940:	4660      	mov	r0, ip
   1b942:	4082      	lsls	r2, r0
   1b944:	1e50      	subs	r0, r2, #1
   1b946:	4182      	sbcs	r2, r0
   1b948:	40d9      	lsrs	r1, r3
   1b94a:	4317      	orrs	r7, r2
   1b94c:	e6f5      	b.n	1b73a <__aeabi_dsub+0x1be>
   1b94e:	0026      	movs	r6, r4
   1b950:	4650      	mov	r0, sl
   1b952:	4306      	orrs	r6, r0
   1b954:	d005      	beq.n	1b962 <__aeabi_dsub+0x3e6>
   1b956:	43ed      	mvns	r5, r5
   1b958:	2d00      	cmp	r5, #0
   1b95a:	d0d3      	beq.n	1b904 <__aeabi_dsub+0x388>
   1b95c:	4e90      	ldr	r6, [pc, #576]	; (1bba0 <__aeabi_dsub+0x624>)
   1b95e:	45b4      	cmp	ip, r6
   1b960:	d1bd      	bne.n	1b8de <__aeabi_dsub+0x362>
   1b962:	000c      	movs	r4, r1
   1b964:	0017      	movs	r7, r2
   1b966:	4666      	mov	r6, ip
   1b968:	4698      	mov	r8, r3
   1b96a:	e68d      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b96c:	488c      	ldr	r0, [pc, #560]	; (1bba0 <__aeabi_dsub+0x624>)
   1b96e:	4283      	cmp	r3, r0
   1b970:	d00b      	beq.n	1b98a <__aeabi_dsub+0x40e>
   1b972:	4663      	mov	r3, ip
   1b974:	e6d9      	b.n	1b72a <__aeabi_dsub+0x1ae>
   1b976:	2d00      	cmp	r5, #0
   1b978:	d000      	beq.n	1b97c <__aeabi_dsub+0x400>
   1b97a:	e096      	b.n	1baaa <__aeabi_dsub+0x52e>
   1b97c:	0008      	movs	r0, r1
   1b97e:	4310      	orrs	r0, r2
   1b980:	d100      	bne.n	1b984 <__aeabi_dsub+0x408>
   1b982:	e0e2      	b.n	1bb4a <__aeabi_dsub+0x5ce>
   1b984:	000c      	movs	r4, r1
   1b986:	0017      	movs	r7, r2
   1b988:	4698      	mov	r8, r3
   1b98a:	4e85      	ldr	r6, [pc, #532]	; (1bba0 <__aeabi_dsub+0x624>)
   1b98c:	e67c      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b98e:	2500      	movs	r5, #0
   1b990:	e780      	b.n	1b894 <__aeabi_dsub+0x318>
   1b992:	2100      	movs	r1, #0
   1b994:	e78e      	b.n	1b8b4 <__aeabi_dsub+0x338>
   1b996:	0023      	movs	r3, r4
   1b998:	4650      	mov	r0, sl
   1b99a:	4303      	orrs	r3, r0
   1b99c:	2e00      	cmp	r6, #0
   1b99e:	d000      	beq.n	1b9a2 <__aeabi_dsub+0x426>
   1b9a0:	e0a8      	b.n	1baf4 <__aeabi_dsub+0x578>
   1b9a2:	2b00      	cmp	r3, #0
   1b9a4:	d100      	bne.n	1b9a8 <__aeabi_dsub+0x42c>
   1b9a6:	e0de      	b.n	1bb66 <__aeabi_dsub+0x5ea>
   1b9a8:	000b      	movs	r3, r1
   1b9aa:	4313      	orrs	r3, r2
   1b9ac:	d100      	bne.n	1b9b0 <__aeabi_dsub+0x434>
   1b9ae:	e66b      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b9b0:	4452      	add	r2, sl
   1b9b2:	4552      	cmp	r2, sl
   1b9b4:	4180      	sbcs	r0, r0
   1b9b6:	1864      	adds	r4, r4, r1
   1b9b8:	4240      	negs	r0, r0
   1b9ba:	1824      	adds	r4, r4, r0
   1b9bc:	0017      	movs	r7, r2
   1b9be:	0223      	lsls	r3, r4, #8
   1b9c0:	d400      	bmi.n	1b9c4 <__aeabi_dsub+0x448>
   1b9c2:	e6fd      	b.n	1b7c0 <__aeabi_dsub+0x244>
   1b9c4:	4b77      	ldr	r3, [pc, #476]	; (1bba4 <__aeabi_dsub+0x628>)
   1b9c6:	4666      	mov	r6, ip
   1b9c8:	401c      	ands	r4, r3
   1b9ca:	e65d      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b9cc:	0025      	movs	r5, r4
   1b9ce:	4650      	mov	r0, sl
   1b9d0:	4305      	orrs	r5, r0
   1b9d2:	2e00      	cmp	r6, #0
   1b9d4:	d1cf      	bne.n	1b976 <__aeabi_dsub+0x3fa>
   1b9d6:	2d00      	cmp	r5, #0
   1b9d8:	d14f      	bne.n	1ba7a <__aeabi_dsub+0x4fe>
   1b9da:	000c      	movs	r4, r1
   1b9dc:	4314      	orrs	r4, r2
   1b9de:	d100      	bne.n	1b9e2 <__aeabi_dsub+0x466>
   1b9e0:	e0a0      	b.n	1bb24 <__aeabi_dsub+0x5a8>
   1b9e2:	000c      	movs	r4, r1
   1b9e4:	0017      	movs	r7, r2
   1b9e6:	4698      	mov	r8, r3
   1b9e8:	e64e      	b.n	1b688 <__aeabi_dsub+0x10c>
   1b9ea:	4666      	mov	r6, ip
   1b9ec:	2400      	movs	r4, #0
   1b9ee:	2700      	movs	r7, #0
   1b9f0:	e685      	b.n	1b6fe <__aeabi_dsub+0x182>
   1b9f2:	001f      	movs	r7, r3
   1b9f4:	0008      	movs	r0, r1
   1b9f6:	3f20      	subs	r7, #32
   1b9f8:	40f8      	lsrs	r0, r7
   1b9fa:	0007      	movs	r7, r0
   1b9fc:	2b20      	cmp	r3, #32
   1b9fe:	d100      	bne.n	1ba02 <__aeabi_dsub+0x486>
   1ba00:	e08e      	b.n	1bb20 <__aeabi_dsub+0x5a4>
   1ba02:	2040      	movs	r0, #64	; 0x40
   1ba04:	1ac3      	subs	r3, r0, r3
   1ba06:	4099      	lsls	r1, r3
   1ba08:	430a      	orrs	r2, r1
   1ba0a:	1e51      	subs	r1, r2, #1
   1ba0c:	418a      	sbcs	r2, r1
   1ba0e:	2100      	movs	r1, #0
   1ba10:	4317      	orrs	r7, r2
   1ba12:	e692      	b.n	1b73a <__aeabi_dsub+0x1be>
   1ba14:	2e00      	cmp	r6, #0
   1ba16:	d114      	bne.n	1ba42 <__aeabi_dsub+0x4c6>
   1ba18:	0026      	movs	r6, r4
   1ba1a:	4650      	mov	r0, sl
   1ba1c:	4306      	orrs	r6, r0
   1ba1e:	d062      	beq.n	1bae6 <__aeabi_dsub+0x56a>
   1ba20:	43db      	mvns	r3, r3
   1ba22:	2b00      	cmp	r3, #0
   1ba24:	d15c      	bne.n	1bae0 <__aeabi_dsub+0x564>
   1ba26:	1887      	adds	r7, r0, r2
   1ba28:	4297      	cmp	r7, r2
   1ba2a:	4192      	sbcs	r2, r2
   1ba2c:	1864      	adds	r4, r4, r1
   1ba2e:	4252      	negs	r2, r2
   1ba30:	18a4      	adds	r4, r4, r2
   1ba32:	4666      	mov	r6, ip
   1ba34:	e687      	b.n	1b746 <__aeabi_dsub+0x1ca>
   1ba36:	4650      	mov	r0, sl
   1ba38:	4320      	orrs	r0, r4
   1ba3a:	1e44      	subs	r4, r0, #1
   1ba3c:	41a0      	sbcs	r0, r4
   1ba3e:	2400      	movs	r4, #0
   1ba40:	e760      	b.n	1b904 <__aeabi_dsub+0x388>
   1ba42:	4e57      	ldr	r6, [pc, #348]	; (1bba0 <__aeabi_dsub+0x624>)
   1ba44:	45b4      	cmp	ip, r6
   1ba46:	d04e      	beq.n	1bae6 <__aeabi_dsub+0x56a>
   1ba48:	2680      	movs	r6, #128	; 0x80
   1ba4a:	0436      	lsls	r6, r6, #16
   1ba4c:	425b      	negs	r3, r3
   1ba4e:	4334      	orrs	r4, r6
   1ba50:	2b38      	cmp	r3, #56	; 0x38
   1ba52:	dd00      	ble.n	1ba56 <__aeabi_dsub+0x4da>
   1ba54:	e07f      	b.n	1bb56 <__aeabi_dsub+0x5da>
   1ba56:	2b1f      	cmp	r3, #31
   1ba58:	dd00      	ble.n	1ba5c <__aeabi_dsub+0x4e0>
   1ba5a:	e08b      	b.n	1bb74 <__aeabi_dsub+0x5f8>
   1ba5c:	2620      	movs	r6, #32
   1ba5e:	0027      	movs	r7, r4
   1ba60:	4650      	mov	r0, sl
   1ba62:	1af6      	subs	r6, r6, r3
   1ba64:	40b7      	lsls	r7, r6
   1ba66:	40d8      	lsrs	r0, r3
   1ba68:	4307      	orrs	r7, r0
   1ba6a:	4650      	mov	r0, sl
   1ba6c:	40b0      	lsls	r0, r6
   1ba6e:	1e46      	subs	r6, r0, #1
   1ba70:	41b0      	sbcs	r0, r6
   1ba72:	4307      	orrs	r7, r0
   1ba74:	40dc      	lsrs	r4, r3
   1ba76:	18bf      	adds	r7, r7, r2
   1ba78:	e7d6      	b.n	1ba28 <__aeabi_dsub+0x4ac>
   1ba7a:	000d      	movs	r5, r1
   1ba7c:	4315      	orrs	r5, r2
   1ba7e:	d100      	bne.n	1ba82 <__aeabi_dsub+0x506>
   1ba80:	e602      	b.n	1b688 <__aeabi_dsub+0x10c>
   1ba82:	4650      	mov	r0, sl
   1ba84:	1a80      	subs	r0, r0, r2
   1ba86:	4582      	cmp	sl, r0
   1ba88:	41bf      	sbcs	r7, r7
   1ba8a:	1a65      	subs	r5, r4, r1
   1ba8c:	427f      	negs	r7, r7
   1ba8e:	1bed      	subs	r5, r5, r7
   1ba90:	4684      	mov	ip, r0
   1ba92:	0228      	lsls	r0, r5, #8
   1ba94:	d400      	bmi.n	1ba98 <__aeabi_dsub+0x51c>
   1ba96:	e68d      	b.n	1b7b4 <__aeabi_dsub+0x238>
   1ba98:	4650      	mov	r0, sl
   1ba9a:	1a17      	subs	r7, r2, r0
   1ba9c:	42ba      	cmp	r2, r7
   1ba9e:	4192      	sbcs	r2, r2
   1baa0:	1b0c      	subs	r4, r1, r4
   1baa2:	4252      	negs	r2, r2
   1baa4:	1aa4      	subs	r4, r4, r2
   1baa6:	4698      	mov	r8, r3
   1baa8:	e5ee      	b.n	1b688 <__aeabi_dsub+0x10c>
   1baaa:	000d      	movs	r5, r1
   1baac:	4315      	orrs	r5, r2
   1baae:	d100      	bne.n	1bab2 <__aeabi_dsub+0x536>
   1bab0:	e76b      	b.n	1b98a <__aeabi_dsub+0x40e>
   1bab2:	4650      	mov	r0, sl
   1bab4:	0767      	lsls	r7, r4, #29
   1bab6:	08c0      	lsrs	r0, r0, #3
   1bab8:	4307      	orrs	r7, r0
   1baba:	2080      	movs	r0, #128	; 0x80
   1babc:	08e4      	lsrs	r4, r4, #3
   1babe:	0300      	lsls	r0, r0, #12
   1bac0:	4204      	tst	r4, r0
   1bac2:	d007      	beq.n	1bad4 <__aeabi_dsub+0x558>
   1bac4:	08cd      	lsrs	r5, r1, #3
   1bac6:	4205      	tst	r5, r0
   1bac8:	d104      	bne.n	1bad4 <__aeabi_dsub+0x558>
   1baca:	002c      	movs	r4, r5
   1bacc:	4698      	mov	r8, r3
   1bace:	08d7      	lsrs	r7, r2, #3
   1bad0:	0749      	lsls	r1, r1, #29
   1bad2:	430f      	orrs	r7, r1
   1bad4:	0f7b      	lsrs	r3, r7, #29
   1bad6:	00e4      	lsls	r4, r4, #3
   1bad8:	431c      	orrs	r4, r3
   1bada:	00ff      	lsls	r7, r7, #3
   1badc:	4e30      	ldr	r6, [pc, #192]	; (1bba0 <__aeabi_dsub+0x624>)
   1bade:	e5d3      	b.n	1b688 <__aeabi_dsub+0x10c>
   1bae0:	4e2f      	ldr	r6, [pc, #188]	; (1bba0 <__aeabi_dsub+0x624>)
   1bae2:	45b4      	cmp	ip, r6
   1bae4:	d1b4      	bne.n	1ba50 <__aeabi_dsub+0x4d4>
   1bae6:	000c      	movs	r4, r1
   1bae8:	0017      	movs	r7, r2
   1baea:	4666      	mov	r6, ip
   1baec:	e5cc      	b.n	1b688 <__aeabi_dsub+0x10c>
   1baee:	2700      	movs	r7, #0
   1baf0:	2400      	movs	r4, #0
   1baf2:	e5e8      	b.n	1b6c6 <__aeabi_dsub+0x14a>
   1baf4:	2b00      	cmp	r3, #0
   1baf6:	d039      	beq.n	1bb6c <__aeabi_dsub+0x5f0>
   1baf8:	000b      	movs	r3, r1
   1bafa:	4313      	orrs	r3, r2
   1bafc:	d100      	bne.n	1bb00 <__aeabi_dsub+0x584>
   1bafe:	e744      	b.n	1b98a <__aeabi_dsub+0x40e>
   1bb00:	08c0      	lsrs	r0, r0, #3
   1bb02:	0767      	lsls	r7, r4, #29
   1bb04:	4307      	orrs	r7, r0
   1bb06:	2080      	movs	r0, #128	; 0x80
   1bb08:	08e4      	lsrs	r4, r4, #3
   1bb0a:	0300      	lsls	r0, r0, #12
   1bb0c:	4204      	tst	r4, r0
   1bb0e:	d0e1      	beq.n	1bad4 <__aeabi_dsub+0x558>
   1bb10:	08cb      	lsrs	r3, r1, #3
   1bb12:	4203      	tst	r3, r0
   1bb14:	d1de      	bne.n	1bad4 <__aeabi_dsub+0x558>
   1bb16:	08d7      	lsrs	r7, r2, #3
   1bb18:	0749      	lsls	r1, r1, #29
   1bb1a:	430f      	orrs	r7, r1
   1bb1c:	001c      	movs	r4, r3
   1bb1e:	e7d9      	b.n	1bad4 <__aeabi_dsub+0x558>
   1bb20:	2100      	movs	r1, #0
   1bb22:	e771      	b.n	1ba08 <__aeabi_dsub+0x48c>
   1bb24:	2500      	movs	r5, #0
   1bb26:	2700      	movs	r7, #0
   1bb28:	e5e9      	b.n	1b6fe <__aeabi_dsub+0x182>
   1bb2a:	002e      	movs	r6, r5
   1bb2c:	0027      	movs	r7, r4
   1bb2e:	3e20      	subs	r6, #32
   1bb30:	40f7      	lsrs	r7, r6
   1bb32:	2d20      	cmp	r5, #32
   1bb34:	d02f      	beq.n	1bb96 <__aeabi_dsub+0x61a>
   1bb36:	2640      	movs	r6, #64	; 0x40
   1bb38:	1b75      	subs	r5, r6, r5
   1bb3a:	40ac      	lsls	r4, r5
   1bb3c:	4650      	mov	r0, sl
   1bb3e:	4320      	orrs	r0, r4
   1bb40:	1e44      	subs	r4, r0, #1
   1bb42:	41a0      	sbcs	r0, r4
   1bb44:	2400      	movs	r4, #0
   1bb46:	4338      	orrs	r0, r7
   1bb48:	e6dc      	b.n	1b904 <__aeabi_dsub+0x388>
   1bb4a:	2480      	movs	r4, #128	; 0x80
   1bb4c:	2500      	movs	r5, #0
   1bb4e:	0324      	lsls	r4, r4, #12
   1bb50:	4e13      	ldr	r6, [pc, #76]	; (1bba0 <__aeabi_dsub+0x624>)
   1bb52:	2700      	movs	r7, #0
   1bb54:	e5d3      	b.n	1b6fe <__aeabi_dsub+0x182>
   1bb56:	4650      	mov	r0, sl
   1bb58:	4320      	orrs	r0, r4
   1bb5a:	0007      	movs	r7, r0
   1bb5c:	1e78      	subs	r0, r7, #1
   1bb5e:	4187      	sbcs	r7, r0
   1bb60:	2400      	movs	r4, #0
   1bb62:	18bf      	adds	r7, r7, r2
   1bb64:	e760      	b.n	1ba28 <__aeabi_dsub+0x4ac>
   1bb66:	000c      	movs	r4, r1
   1bb68:	0017      	movs	r7, r2
   1bb6a:	e58d      	b.n	1b688 <__aeabi_dsub+0x10c>
   1bb6c:	000c      	movs	r4, r1
   1bb6e:	0017      	movs	r7, r2
   1bb70:	4e0b      	ldr	r6, [pc, #44]	; (1bba0 <__aeabi_dsub+0x624>)
   1bb72:	e589      	b.n	1b688 <__aeabi_dsub+0x10c>
   1bb74:	001e      	movs	r6, r3
   1bb76:	0027      	movs	r7, r4
   1bb78:	3e20      	subs	r6, #32
   1bb7a:	40f7      	lsrs	r7, r6
   1bb7c:	2b20      	cmp	r3, #32
   1bb7e:	d00c      	beq.n	1bb9a <__aeabi_dsub+0x61e>
   1bb80:	2640      	movs	r6, #64	; 0x40
   1bb82:	1af3      	subs	r3, r6, r3
   1bb84:	409c      	lsls	r4, r3
   1bb86:	4650      	mov	r0, sl
   1bb88:	4320      	orrs	r0, r4
   1bb8a:	1e44      	subs	r4, r0, #1
   1bb8c:	41a0      	sbcs	r0, r4
   1bb8e:	4307      	orrs	r7, r0
   1bb90:	2400      	movs	r4, #0
   1bb92:	18bf      	adds	r7, r7, r2
   1bb94:	e748      	b.n	1ba28 <__aeabi_dsub+0x4ac>
   1bb96:	2400      	movs	r4, #0
   1bb98:	e7d0      	b.n	1bb3c <__aeabi_dsub+0x5c0>
   1bb9a:	2400      	movs	r4, #0
   1bb9c:	e7f3      	b.n	1bb86 <__aeabi_dsub+0x60a>
   1bb9e:	46c0      	nop			; (mov r8, r8)
   1bba0:	000007ff 	.word	0x000007ff
   1bba4:	ff7fffff 	.word	0xff7fffff

0001bba8 <__aeabi_d2iz>:
   1bba8:	b530      	push	{r4, r5, lr}
   1bbaa:	4d13      	ldr	r5, [pc, #76]	; (1bbf8 <__aeabi_d2iz+0x50>)
   1bbac:	030a      	lsls	r2, r1, #12
   1bbae:	004b      	lsls	r3, r1, #1
   1bbb0:	0b12      	lsrs	r2, r2, #12
   1bbb2:	0d5b      	lsrs	r3, r3, #21
   1bbb4:	0fc9      	lsrs	r1, r1, #31
   1bbb6:	2400      	movs	r4, #0
   1bbb8:	42ab      	cmp	r3, r5
   1bbba:	dd10      	ble.n	1bbde <__aeabi_d2iz+0x36>
   1bbbc:	4c0f      	ldr	r4, [pc, #60]	; (1bbfc <__aeabi_d2iz+0x54>)
   1bbbe:	42a3      	cmp	r3, r4
   1bbc0:	dc0f      	bgt.n	1bbe2 <__aeabi_d2iz+0x3a>
   1bbc2:	2480      	movs	r4, #128	; 0x80
   1bbc4:	4d0e      	ldr	r5, [pc, #56]	; (1bc00 <__aeabi_d2iz+0x58>)
   1bbc6:	0364      	lsls	r4, r4, #13
   1bbc8:	4322      	orrs	r2, r4
   1bbca:	1aed      	subs	r5, r5, r3
   1bbcc:	2d1f      	cmp	r5, #31
   1bbce:	dd0b      	ble.n	1bbe8 <__aeabi_d2iz+0x40>
   1bbd0:	480c      	ldr	r0, [pc, #48]	; (1bc04 <__aeabi_d2iz+0x5c>)
   1bbd2:	1ac3      	subs	r3, r0, r3
   1bbd4:	40da      	lsrs	r2, r3
   1bbd6:	4254      	negs	r4, r2
   1bbd8:	2900      	cmp	r1, #0
   1bbda:	d100      	bne.n	1bbde <__aeabi_d2iz+0x36>
   1bbdc:	0014      	movs	r4, r2
   1bbde:	0020      	movs	r0, r4
   1bbe0:	bd30      	pop	{r4, r5, pc}
   1bbe2:	4b09      	ldr	r3, [pc, #36]	; (1bc08 <__aeabi_d2iz+0x60>)
   1bbe4:	18cc      	adds	r4, r1, r3
   1bbe6:	e7fa      	b.n	1bbde <__aeabi_d2iz+0x36>
   1bbe8:	4c08      	ldr	r4, [pc, #32]	; (1bc0c <__aeabi_d2iz+0x64>)
   1bbea:	40e8      	lsrs	r0, r5
   1bbec:	46a4      	mov	ip, r4
   1bbee:	4463      	add	r3, ip
   1bbf0:	409a      	lsls	r2, r3
   1bbf2:	4302      	orrs	r2, r0
   1bbf4:	e7ef      	b.n	1bbd6 <__aeabi_d2iz+0x2e>
   1bbf6:	46c0      	nop			; (mov r8, r8)
   1bbf8:	000003fe 	.word	0x000003fe
   1bbfc:	0000041d 	.word	0x0000041d
   1bc00:	00000433 	.word	0x00000433
   1bc04:	00000413 	.word	0x00000413
   1bc08:	7fffffff 	.word	0x7fffffff
   1bc0c:	fffffbed 	.word	0xfffffbed

0001bc10 <__aeabi_i2d>:
   1bc10:	b570      	push	{r4, r5, r6, lr}
   1bc12:	2800      	cmp	r0, #0
   1bc14:	d030      	beq.n	1bc78 <__aeabi_i2d+0x68>
   1bc16:	17c3      	asrs	r3, r0, #31
   1bc18:	18c4      	adds	r4, r0, r3
   1bc1a:	405c      	eors	r4, r3
   1bc1c:	0fc5      	lsrs	r5, r0, #31
   1bc1e:	0020      	movs	r0, r4
   1bc20:	f7fe fa62 	bl	1a0e8 <__clzsi2>
   1bc24:	4b17      	ldr	r3, [pc, #92]	; (1bc84 <__aeabi_i2d+0x74>)
   1bc26:	4a18      	ldr	r2, [pc, #96]	; (1bc88 <__aeabi_i2d+0x78>)
   1bc28:	1a1b      	subs	r3, r3, r0
   1bc2a:	1ad2      	subs	r2, r2, r3
   1bc2c:	2a1f      	cmp	r2, #31
   1bc2e:	dd18      	ble.n	1bc62 <__aeabi_i2d+0x52>
   1bc30:	4a16      	ldr	r2, [pc, #88]	; (1bc8c <__aeabi_i2d+0x7c>)
   1bc32:	1ad2      	subs	r2, r2, r3
   1bc34:	4094      	lsls	r4, r2
   1bc36:	2200      	movs	r2, #0
   1bc38:	0324      	lsls	r4, r4, #12
   1bc3a:	055b      	lsls	r3, r3, #21
   1bc3c:	0b24      	lsrs	r4, r4, #12
   1bc3e:	0d5b      	lsrs	r3, r3, #21
   1bc40:	2100      	movs	r1, #0
   1bc42:	0010      	movs	r0, r2
   1bc44:	0324      	lsls	r4, r4, #12
   1bc46:	0d0a      	lsrs	r2, r1, #20
   1bc48:	0b24      	lsrs	r4, r4, #12
   1bc4a:	0512      	lsls	r2, r2, #20
   1bc4c:	4322      	orrs	r2, r4
   1bc4e:	4c10      	ldr	r4, [pc, #64]	; (1bc90 <__aeabi_i2d+0x80>)
   1bc50:	051b      	lsls	r3, r3, #20
   1bc52:	4022      	ands	r2, r4
   1bc54:	4313      	orrs	r3, r2
   1bc56:	005b      	lsls	r3, r3, #1
   1bc58:	07ed      	lsls	r5, r5, #31
   1bc5a:	085b      	lsrs	r3, r3, #1
   1bc5c:	432b      	orrs	r3, r5
   1bc5e:	0019      	movs	r1, r3
   1bc60:	bd70      	pop	{r4, r5, r6, pc}
   1bc62:	0021      	movs	r1, r4
   1bc64:	4091      	lsls	r1, r2
   1bc66:	000a      	movs	r2, r1
   1bc68:	210b      	movs	r1, #11
   1bc6a:	1a08      	subs	r0, r1, r0
   1bc6c:	40c4      	lsrs	r4, r0
   1bc6e:	055b      	lsls	r3, r3, #21
   1bc70:	0324      	lsls	r4, r4, #12
   1bc72:	0b24      	lsrs	r4, r4, #12
   1bc74:	0d5b      	lsrs	r3, r3, #21
   1bc76:	e7e3      	b.n	1bc40 <__aeabi_i2d+0x30>
   1bc78:	2500      	movs	r5, #0
   1bc7a:	2300      	movs	r3, #0
   1bc7c:	2400      	movs	r4, #0
   1bc7e:	2200      	movs	r2, #0
   1bc80:	e7de      	b.n	1bc40 <__aeabi_i2d+0x30>
   1bc82:	46c0      	nop			; (mov r8, r8)
   1bc84:	0000041e 	.word	0x0000041e
   1bc88:	00000433 	.word	0x00000433
   1bc8c:	00000413 	.word	0x00000413
   1bc90:	800fffff 	.word	0x800fffff

0001bc94 <__aeabi_ui2d>:
   1bc94:	b510      	push	{r4, lr}
   1bc96:	1e04      	subs	r4, r0, #0
   1bc98:	d028      	beq.n	1bcec <__aeabi_ui2d+0x58>
   1bc9a:	f7fe fa25 	bl	1a0e8 <__clzsi2>
   1bc9e:	4b15      	ldr	r3, [pc, #84]	; (1bcf4 <__aeabi_ui2d+0x60>)
   1bca0:	4a15      	ldr	r2, [pc, #84]	; (1bcf8 <__aeabi_ui2d+0x64>)
   1bca2:	1a1b      	subs	r3, r3, r0
   1bca4:	1ad2      	subs	r2, r2, r3
   1bca6:	2a1f      	cmp	r2, #31
   1bca8:	dd15      	ble.n	1bcd6 <__aeabi_ui2d+0x42>
   1bcaa:	4a14      	ldr	r2, [pc, #80]	; (1bcfc <__aeabi_ui2d+0x68>)
   1bcac:	1ad2      	subs	r2, r2, r3
   1bcae:	4094      	lsls	r4, r2
   1bcb0:	2200      	movs	r2, #0
   1bcb2:	0324      	lsls	r4, r4, #12
   1bcb4:	055b      	lsls	r3, r3, #21
   1bcb6:	0b24      	lsrs	r4, r4, #12
   1bcb8:	0d5b      	lsrs	r3, r3, #21
   1bcba:	2100      	movs	r1, #0
   1bcbc:	0010      	movs	r0, r2
   1bcbe:	0324      	lsls	r4, r4, #12
   1bcc0:	0d0a      	lsrs	r2, r1, #20
   1bcc2:	0b24      	lsrs	r4, r4, #12
   1bcc4:	0512      	lsls	r2, r2, #20
   1bcc6:	4322      	orrs	r2, r4
   1bcc8:	4c0d      	ldr	r4, [pc, #52]	; (1bd00 <__aeabi_ui2d+0x6c>)
   1bcca:	051b      	lsls	r3, r3, #20
   1bccc:	4022      	ands	r2, r4
   1bcce:	4313      	orrs	r3, r2
   1bcd0:	005b      	lsls	r3, r3, #1
   1bcd2:	0859      	lsrs	r1, r3, #1
   1bcd4:	bd10      	pop	{r4, pc}
   1bcd6:	0021      	movs	r1, r4
   1bcd8:	4091      	lsls	r1, r2
   1bcda:	000a      	movs	r2, r1
   1bcdc:	210b      	movs	r1, #11
   1bcde:	1a08      	subs	r0, r1, r0
   1bce0:	40c4      	lsrs	r4, r0
   1bce2:	055b      	lsls	r3, r3, #21
   1bce4:	0324      	lsls	r4, r4, #12
   1bce6:	0b24      	lsrs	r4, r4, #12
   1bce8:	0d5b      	lsrs	r3, r3, #21
   1bcea:	e7e6      	b.n	1bcba <__aeabi_ui2d+0x26>
   1bcec:	2300      	movs	r3, #0
   1bcee:	2400      	movs	r4, #0
   1bcf0:	2200      	movs	r2, #0
   1bcf2:	e7e2      	b.n	1bcba <__aeabi_ui2d+0x26>
   1bcf4:	0000041e 	.word	0x0000041e
   1bcf8:	00000433 	.word	0x00000433
   1bcfc:	00000413 	.word	0x00000413
   1bd00:	800fffff 	.word	0x800fffff

0001bd04 <__sflush_r>:
   1bd04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bd06:	898a      	ldrh	r2, [r1, #12]
   1bd08:	0005      	movs	r5, r0
   1bd0a:	000c      	movs	r4, r1
   1bd0c:	0713      	lsls	r3, r2, #28
   1bd0e:	d460      	bmi.n	1bdd2 <__sflush_r+0xce>
   1bd10:	684b      	ldr	r3, [r1, #4]
   1bd12:	2b00      	cmp	r3, #0
   1bd14:	dc04      	bgt.n	1bd20 <__sflush_r+0x1c>
   1bd16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1bd18:	2b00      	cmp	r3, #0
   1bd1a:	dc01      	bgt.n	1bd20 <__sflush_r+0x1c>
   1bd1c:	2000      	movs	r0, #0
   1bd1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bd20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1bd22:	2f00      	cmp	r7, #0
   1bd24:	d0fa      	beq.n	1bd1c <__sflush_r+0x18>
   1bd26:	2300      	movs	r3, #0
   1bd28:	682e      	ldr	r6, [r5, #0]
   1bd2a:	602b      	str	r3, [r5, #0]
   1bd2c:	2380      	movs	r3, #128	; 0x80
   1bd2e:	015b      	lsls	r3, r3, #5
   1bd30:	401a      	ands	r2, r3
   1bd32:	d034      	beq.n	1bd9e <__sflush_r+0x9a>
   1bd34:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1bd36:	89a3      	ldrh	r3, [r4, #12]
   1bd38:	075b      	lsls	r3, r3, #29
   1bd3a:	d506      	bpl.n	1bd4a <__sflush_r+0x46>
   1bd3c:	6863      	ldr	r3, [r4, #4]
   1bd3e:	1ac0      	subs	r0, r0, r3
   1bd40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bd42:	2b00      	cmp	r3, #0
   1bd44:	d001      	beq.n	1bd4a <__sflush_r+0x46>
   1bd46:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1bd48:	1ac0      	subs	r0, r0, r3
   1bd4a:	0002      	movs	r2, r0
   1bd4c:	6a21      	ldr	r1, [r4, #32]
   1bd4e:	2300      	movs	r3, #0
   1bd50:	0028      	movs	r0, r5
   1bd52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1bd54:	47b8      	blx	r7
   1bd56:	89a1      	ldrh	r1, [r4, #12]
   1bd58:	1c43      	adds	r3, r0, #1
   1bd5a:	d106      	bne.n	1bd6a <__sflush_r+0x66>
   1bd5c:	682b      	ldr	r3, [r5, #0]
   1bd5e:	2b1d      	cmp	r3, #29
   1bd60:	d831      	bhi.n	1bdc6 <__sflush_r+0xc2>
   1bd62:	4a2c      	ldr	r2, [pc, #176]	; (1be14 <__sflush_r+0x110>)
   1bd64:	40da      	lsrs	r2, r3
   1bd66:	07d3      	lsls	r3, r2, #31
   1bd68:	d52d      	bpl.n	1bdc6 <__sflush_r+0xc2>
   1bd6a:	2300      	movs	r3, #0
   1bd6c:	6063      	str	r3, [r4, #4]
   1bd6e:	6923      	ldr	r3, [r4, #16]
   1bd70:	6023      	str	r3, [r4, #0]
   1bd72:	04cb      	lsls	r3, r1, #19
   1bd74:	d505      	bpl.n	1bd82 <__sflush_r+0x7e>
   1bd76:	1c43      	adds	r3, r0, #1
   1bd78:	d102      	bne.n	1bd80 <__sflush_r+0x7c>
   1bd7a:	682b      	ldr	r3, [r5, #0]
   1bd7c:	2b00      	cmp	r3, #0
   1bd7e:	d100      	bne.n	1bd82 <__sflush_r+0x7e>
   1bd80:	6560      	str	r0, [r4, #84]	; 0x54
   1bd82:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1bd84:	602e      	str	r6, [r5, #0]
   1bd86:	2900      	cmp	r1, #0
   1bd88:	d0c8      	beq.n	1bd1c <__sflush_r+0x18>
   1bd8a:	0023      	movs	r3, r4
   1bd8c:	3344      	adds	r3, #68	; 0x44
   1bd8e:	4299      	cmp	r1, r3
   1bd90:	d002      	beq.n	1bd98 <__sflush_r+0x94>
   1bd92:	0028      	movs	r0, r5
   1bd94:	f000 fa4a 	bl	1c22c <_free_r>
   1bd98:	2000      	movs	r0, #0
   1bd9a:	6360      	str	r0, [r4, #52]	; 0x34
   1bd9c:	e7bf      	b.n	1bd1e <__sflush_r+0x1a>
   1bd9e:	2301      	movs	r3, #1
   1bda0:	6a21      	ldr	r1, [r4, #32]
   1bda2:	0028      	movs	r0, r5
   1bda4:	47b8      	blx	r7
   1bda6:	1c43      	adds	r3, r0, #1
   1bda8:	d1c5      	bne.n	1bd36 <__sflush_r+0x32>
   1bdaa:	682b      	ldr	r3, [r5, #0]
   1bdac:	2b00      	cmp	r3, #0
   1bdae:	d0c2      	beq.n	1bd36 <__sflush_r+0x32>
   1bdb0:	2b1d      	cmp	r3, #29
   1bdb2:	d001      	beq.n	1bdb8 <__sflush_r+0xb4>
   1bdb4:	2b16      	cmp	r3, #22
   1bdb6:	d101      	bne.n	1bdbc <__sflush_r+0xb8>
   1bdb8:	602e      	str	r6, [r5, #0]
   1bdba:	e7af      	b.n	1bd1c <__sflush_r+0x18>
   1bdbc:	2340      	movs	r3, #64	; 0x40
   1bdbe:	89a2      	ldrh	r2, [r4, #12]
   1bdc0:	4313      	orrs	r3, r2
   1bdc2:	81a3      	strh	r3, [r4, #12]
   1bdc4:	e7ab      	b.n	1bd1e <__sflush_r+0x1a>
   1bdc6:	2340      	movs	r3, #64	; 0x40
   1bdc8:	430b      	orrs	r3, r1
   1bdca:	2001      	movs	r0, #1
   1bdcc:	81a3      	strh	r3, [r4, #12]
   1bdce:	4240      	negs	r0, r0
   1bdd0:	e7a5      	b.n	1bd1e <__sflush_r+0x1a>
   1bdd2:	690f      	ldr	r7, [r1, #16]
   1bdd4:	2f00      	cmp	r7, #0
   1bdd6:	d0a1      	beq.n	1bd1c <__sflush_r+0x18>
   1bdd8:	680b      	ldr	r3, [r1, #0]
   1bdda:	600f      	str	r7, [r1, #0]
   1bddc:	1bdb      	subs	r3, r3, r7
   1bdde:	9301      	str	r3, [sp, #4]
   1bde0:	2300      	movs	r3, #0
   1bde2:	0792      	lsls	r2, r2, #30
   1bde4:	d100      	bne.n	1bde8 <__sflush_r+0xe4>
   1bde6:	694b      	ldr	r3, [r1, #20]
   1bde8:	60a3      	str	r3, [r4, #8]
   1bdea:	9b01      	ldr	r3, [sp, #4]
   1bdec:	2b00      	cmp	r3, #0
   1bdee:	dc00      	bgt.n	1bdf2 <__sflush_r+0xee>
   1bdf0:	e794      	b.n	1bd1c <__sflush_r+0x18>
   1bdf2:	9b01      	ldr	r3, [sp, #4]
   1bdf4:	003a      	movs	r2, r7
   1bdf6:	6a21      	ldr	r1, [r4, #32]
   1bdf8:	0028      	movs	r0, r5
   1bdfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1bdfc:	47b0      	blx	r6
   1bdfe:	2800      	cmp	r0, #0
   1be00:	dc03      	bgt.n	1be0a <__sflush_r+0x106>
   1be02:	2340      	movs	r3, #64	; 0x40
   1be04:	89a2      	ldrh	r2, [r4, #12]
   1be06:	4313      	orrs	r3, r2
   1be08:	e7df      	b.n	1bdca <__sflush_r+0xc6>
   1be0a:	9b01      	ldr	r3, [sp, #4]
   1be0c:	183f      	adds	r7, r7, r0
   1be0e:	1a1b      	subs	r3, r3, r0
   1be10:	9301      	str	r3, [sp, #4]
   1be12:	e7ea      	b.n	1bdea <__sflush_r+0xe6>
   1be14:	20400001 	.word	0x20400001

0001be18 <_fflush_r>:
   1be18:	690b      	ldr	r3, [r1, #16]
   1be1a:	b570      	push	{r4, r5, r6, lr}
   1be1c:	0005      	movs	r5, r0
   1be1e:	000c      	movs	r4, r1
   1be20:	2b00      	cmp	r3, #0
   1be22:	d101      	bne.n	1be28 <_fflush_r+0x10>
   1be24:	2000      	movs	r0, #0
   1be26:	bd70      	pop	{r4, r5, r6, pc}
   1be28:	2800      	cmp	r0, #0
   1be2a:	d004      	beq.n	1be36 <_fflush_r+0x1e>
   1be2c:	6983      	ldr	r3, [r0, #24]
   1be2e:	2b00      	cmp	r3, #0
   1be30:	d101      	bne.n	1be36 <_fflush_r+0x1e>
   1be32:	f000 f85f 	bl	1bef4 <__sinit>
   1be36:	4b0b      	ldr	r3, [pc, #44]	; (1be64 <_fflush_r+0x4c>)
   1be38:	429c      	cmp	r4, r3
   1be3a:	d109      	bne.n	1be50 <_fflush_r+0x38>
   1be3c:	686c      	ldr	r4, [r5, #4]
   1be3e:	220c      	movs	r2, #12
   1be40:	5ea3      	ldrsh	r3, [r4, r2]
   1be42:	2b00      	cmp	r3, #0
   1be44:	d0ee      	beq.n	1be24 <_fflush_r+0xc>
   1be46:	0021      	movs	r1, r4
   1be48:	0028      	movs	r0, r5
   1be4a:	f7ff ff5b 	bl	1bd04 <__sflush_r>
   1be4e:	e7ea      	b.n	1be26 <_fflush_r+0xe>
   1be50:	4b05      	ldr	r3, [pc, #20]	; (1be68 <_fflush_r+0x50>)
   1be52:	429c      	cmp	r4, r3
   1be54:	d101      	bne.n	1be5a <_fflush_r+0x42>
   1be56:	68ac      	ldr	r4, [r5, #8]
   1be58:	e7f1      	b.n	1be3e <_fflush_r+0x26>
   1be5a:	4b04      	ldr	r3, [pc, #16]	; (1be6c <_fflush_r+0x54>)
   1be5c:	429c      	cmp	r4, r3
   1be5e:	d1ee      	bne.n	1be3e <_fflush_r+0x26>
   1be60:	68ec      	ldr	r4, [r5, #12]
   1be62:	e7ec      	b.n	1be3e <_fflush_r+0x26>
   1be64:	00021af0 	.word	0x00021af0
   1be68:	00021b10 	.word	0x00021b10
   1be6c:	00021ad0 	.word	0x00021ad0

0001be70 <_cleanup_r>:
   1be70:	b510      	push	{r4, lr}
   1be72:	4902      	ldr	r1, [pc, #8]	; (1be7c <_cleanup_r+0xc>)
   1be74:	f000 f8b2 	bl	1bfdc <_fwalk_reent>
   1be78:	bd10      	pop	{r4, pc}
   1be7a:	46c0      	nop			; (mov r8, r8)
   1be7c:	0001be19 	.word	0x0001be19

0001be80 <std.isra.0>:
   1be80:	2300      	movs	r3, #0
   1be82:	b510      	push	{r4, lr}
   1be84:	0004      	movs	r4, r0
   1be86:	6003      	str	r3, [r0, #0]
   1be88:	6043      	str	r3, [r0, #4]
   1be8a:	6083      	str	r3, [r0, #8]
   1be8c:	8181      	strh	r1, [r0, #12]
   1be8e:	6643      	str	r3, [r0, #100]	; 0x64
   1be90:	81c2      	strh	r2, [r0, #14]
   1be92:	6103      	str	r3, [r0, #16]
   1be94:	6143      	str	r3, [r0, #20]
   1be96:	6183      	str	r3, [r0, #24]
   1be98:	0019      	movs	r1, r3
   1be9a:	2208      	movs	r2, #8
   1be9c:	305c      	adds	r0, #92	; 0x5c
   1be9e:	f000 f9bc 	bl	1c21a <memset>
   1bea2:	4b05      	ldr	r3, [pc, #20]	; (1beb8 <std.isra.0+0x38>)
   1bea4:	6224      	str	r4, [r4, #32]
   1bea6:	6263      	str	r3, [r4, #36]	; 0x24
   1bea8:	4b04      	ldr	r3, [pc, #16]	; (1bebc <std.isra.0+0x3c>)
   1beaa:	62a3      	str	r3, [r4, #40]	; 0x28
   1beac:	4b04      	ldr	r3, [pc, #16]	; (1bec0 <std.isra.0+0x40>)
   1beae:	62e3      	str	r3, [r4, #44]	; 0x2c
   1beb0:	4b04      	ldr	r3, [pc, #16]	; (1bec4 <std.isra.0+0x44>)
   1beb2:	6323      	str	r3, [r4, #48]	; 0x30
   1beb4:	bd10      	pop	{r4, pc}
   1beb6:	46c0      	nop			; (mov r8, r8)
   1beb8:	0001c6f1 	.word	0x0001c6f1
   1bebc:	0001c71d 	.word	0x0001c71d
   1bec0:	0001c755 	.word	0x0001c755
   1bec4:	0001c781 	.word	0x0001c781

0001bec8 <__sfmoreglue>:
   1bec8:	b570      	push	{r4, r5, r6, lr}
   1beca:	2568      	movs	r5, #104	; 0x68
   1becc:	1e4a      	subs	r2, r1, #1
   1bece:	4355      	muls	r5, r2
   1bed0:	000e      	movs	r6, r1
   1bed2:	0029      	movs	r1, r5
   1bed4:	3174      	adds	r1, #116	; 0x74
   1bed6:	f000 f9f3 	bl	1c2c0 <_malloc_r>
   1beda:	1e04      	subs	r4, r0, #0
   1bedc:	d008      	beq.n	1bef0 <__sfmoreglue+0x28>
   1bede:	2100      	movs	r1, #0
   1bee0:	002a      	movs	r2, r5
   1bee2:	6001      	str	r1, [r0, #0]
   1bee4:	6046      	str	r6, [r0, #4]
   1bee6:	300c      	adds	r0, #12
   1bee8:	60a0      	str	r0, [r4, #8]
   1beea:	3268      	adds	r2, #104	; 0x68
   1beec:	f000 f995 	bl	1c21a <memset>
   1bef0:	0020      	movs	r0, r4
   1bef2:	bd70      	pop	{r4, r5, r6, pc}

0001bef4 <__sinit>:
   1bef4:	6983      	ldr	r3, [r0, #24]
   1bef6:	b513      	push	{r0, r1, r4, lr}
   1bef8:	0004      	movs	r4, r0
   1befa:	2b00      	cmp	r3, #0
   1befc:	d128      	bne.n	1bf50 <__sinit+0x5c>
   1befe:	6483      	str	r3, [r0, #72]	; 0x48
   1bf00:	64c3      	str	r3, [r0, #76]	; 0x4c
   1bf02:	6503      	str	r3, [r0, #80]	; 0x50
   1bf04:	4b13      	ldr	r3, [pc, #76]	; (1bf54 <__sinit+0x60>)
   1bf06:	4a14      	ldr	r2, [pc, #80]	; (1bf58 <__sinit+0x64>)
   1bf08:	681b      	ldr	r3, [r3, #0]
   1bf0a:	6282      	str	r2, [r0, #40]	; 0x28
   1bf0c:	9301      	str	r3, [sp, #4]
   1bf0e:	4298      	cmp	r0, r3
   1bf10:	d101      	bne.n	1bf16 <__sinit+0x22>
   1bf12:	2301      	movs	r3, #1
   1bf14:	6183      	str	r3, [r0, #24]
   1bf16:	0020      	movs	r0, r4
   1bf18:	f000 f820 	bl	1bf5c <__sfp>
   1bf1c:	6060      	str	r0, [r4, #4]
   1bf1e:	0020      	movs	r0, r4
   1bf20:	f000 f81c 	bl	1bf5c <__sfp>
   1bf24:	60a0      	str	r0, [r4, #8]
   1bf26:	0020      	movs	r0, r4
   1bf28:	f000 f818 	bl	1bf5c <__sfp>
   1bf2c:	2200      	movs	r2, #0
   1bf2e:	60e0      	str	r0, [r4, #12]
   1bf30:	2104      	movs	r1, #4
   1bf32:	6860      	ldr	r0, [r4, #4]
   1bf34:	f7ff ffa4 	bl	1be80 <std.isra.0>
   1bf38:	2201      	movs	r2, #1
   1bf3a:	2109      	movs	r1, #9
   1bf3c:	68a0      	ldr	r0, [r4, #8]
   1bf3e:	f7ff ff9f 	bl	1be80 <std.isra.0>
   1bf42:	2202      	movs	r2, #2
   1bf44:	2112      	movs	r1, #18
   1bf46:	68e0      	ldr	r0, [r4, #12]
   1bf48:	f7ff ff9a 	bl	1be80 <std.isra.0>
   1bf4c:	2301      	movs	r3, #1
   1bf4e:	61a3      	str	r3, [r4, #24]
   1bf50:	bd13      	pop	{r0, r1, r4, pc}
   1bf52:	46c0      	nop			; (mov r8, r8)
   1bf54:	00021b30 	.word	0x00021b30
   1bf58:	0001be71 	.word	0x0001be71

0001bf5c <__sfp>:
   1bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf5e:	4b1e      	ldr	r3, [pc, #120]	; (1bfd8 <__sfp+0x7c>)
   1bf60:	0007      	movs	r7, r0
   1bf62:	681e      	ldr	r6, [r3, #0]
   1bf64:	69b3      	ldr	r3, [r6, #24]
   1bf66:	2b00      	cmp	r3, #0
   1bf68:	d102      	bne.n	1bf70 <__sfp+0x14>
   1bf6a:	0030      	movs	r0, r6
   1bf6c:	f7ff ffc2 	bl	1bef4 <__sinit>
   1bf70:	3648      	adds	r6, #72	; 0x48
   1bf72:	68b4      	ldr	r4, [r6, #8]
   1bf74:	6873      	ldr	r3, [r6, #4]
   1bf76:	3b01      	subs	r3, #1
   1bf78:	d504      	bpl.n	1bf84 <__sfp+0x28>
   1bf7a:	6833      	ldr	r3, [r6, #0]
   1bf7c:	2b00      	cmp	r3, #0
   1bf7e:	d007      	beq.n	1bf90 <__sfp+0x34>
   1bf80:	6836      	ldr	r6, [r6, #0]
   1bf82:	e7f6      	b.n	1bf72 <__sfp+0x16>
   1bf84:	220c      	movs	r2, #12
   1bf86:	5ea5      	ldrsh	r5, [r4, r2]
   1bf88:	2d00      	cmp	r5, #0
   1bf8a:	d00d      	beq.n	1bfa8 <__sfp+0x4c>
   1bf8c:	3468      	adds	r4, #104	; 0x68
   1bf8e:	e7f2      	b.n	1bf76 <__sfp+0x1a>
   1bf90:	2104      	movs	r1, #4
   1bf92:	0038      	movs	r0, r7
   1bf94:	f7ff ff98 	bl	1bec8 <__sfmoreglue>
   1bf98:	6030      	str	r0, [r6, #0]
   1bf9a:	2800      	cmp	r0, #0
   1bf9c:	d1f0      	bne.n	1bf80 <__sfp+0x24>
   1bf9e:	230c      	movs	r3, #12
   1bfa0:	0004      	movs	r4, r0
   1bfa2:	603b      	str	r3, [r7, #0]
   1bfa4:	0020      	movs	r0, r4
   1bfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfa8:	2301      	movs	r3, #1
   1bfaa:	0020      	movs	r0, r4
   1bfac:	425b      	negs	r3, r3
   1bfae:	81e3      	strh	r3, [r4, #14]
   1bfb0:	3302      	adds	r3, #2
   1bfb2:	81a3      	strh	r3, [r4, #12]
   1bfb4:	6665      	str	r5, [r4, #100]	; 0x64
   1bfb6:	6025      	str	r5, [r4, #0]
   1bfb8:	60a5      	str	r5, [r4, #8]
   1bfba:	6065      	str	r5, [r4, #4]
   1bfbc:	6125      	str	r5, [r4, #16]
   1bfbe:	6165      	str	r5, [r4, #20]
   1bfc0:	61a5      	str	r5, [r4, #24]
   1bfc2:	2208      	movs	r2, #8
   1bfc4:	0029      	movs	r1, r5
   1bfc6:	305c      	adds	r0, #92	; 0x5c
   1bfc8:	f000 f927 	bl	1c21a <memset>
   1bfcc:	6365      	str	r5, [r4, #52]	; 0x34
   1bfce:	63a5      	str	r5, [r4, #56]	; 0x38
   1bfd0:	64a5      	str	r5, [r4, #72]	; 0x48
   1bfd2:	64e5      	str	r5, [r4, #76]	; 0x4c
   1bfd4:	e7e6      	b.n	1bfa4 <__sfp+0x48>
   1bfd6:	46c0      	nop			; (mov r8, r8)
   1bfd8:	00021b30 	.word	0x00021b30

0001bfdc <_fwalk_reent>:
   1bfdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bfde:	0004      	movs	r4, r0
   1bfe0:	0007      	movs	r7, r0
   1bfe2:	2600      	movs	r6, #0
   1bfe4:	9101      	str	r1, [sp, #4]
   1bfe6:	3448      	adds	r4, #72	; 0x48
   1bfe8:	2c00      	cmp	r4, #0
   1bfea:	d101      	bne.n	1bff0 <_fwalk_reent+0x14>
   1bfec:	0030      	movs	r0, r6
   1bfee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bff0:	6863      	ldr	r3, [r4, #4]
   1bff2:	68a5      	ldr	r5, [r4, #8]
   1bff4:	9300      	str	r3, [sp, #0]
   1bff6:	9b00      	ldr	r3, [sp, #0]
   1bff8:	3b01      	subs	r3, #1
   1bffa:	9300      	str	r3, [sp, #0]
   1bffc:	d501      	bpl.n	1c002 <_fwalk_reent+0x26>
   1bffe:	6824      	ldr	r4, [r4, #0]
   1c000:	e7f2      	b.n	1bfe8 <_fwalk_reent+0xc>
   1c002:	89ab      	ldrh	r3, [r5, #12]
   1c004:	2b01      	cmp	r3, #1
   1c006:	d908      	bls.n	1c01a <_fwalk_reent+0x3e>
   1c008:	220e      	movs	r2, #14
   1c00a:	5eab      	ldrsh	r3, [r5, r2]
   1c00c:	3301      	adds	r3, #1
   1c00e:	d004      	beq.n	1c01a <_fwalk_reent+0x3e>
   1c010:	0029      	movs	r1, r5
   1c012:	0038      	movs	r0, r7
   1c014:	9b01      	ldr	r3, [sp, #4]
   1c016:	4798      	blx	r3
   1c018:	4306      	orrs	r6, r0
   1c01a:	3568      	adds	r5, #104	; 0x68
   1c01c:	e7eb      	b.n	1bff6 <_fwalk_reent+0x1a>
	...

0001c020 <__libc_init_array>:
   1c020:	b570      	push	{r4, r5, r6, lr}
   1c022:	2600      	movs	r6, #0
   1c024:	4d0c      	ldr	r5, [pc, #48]	; (1c058 <__libc_init_array+0x38>)
   1c026:	4c0d      	ldr	r4, [pc, #52]	; (1c05c <__libc_init_array+0x3c>)
   1c028:	1b64      	subs	r4, r4, r5
   1c02a:	10a4      	asrs	r4, r4, #2
   1c02c:	42a6      	cmp	r6, r4
   1c02e:	d109      	bne.n	1c044 <__libc_init_array+0x24>
   1c030:	2600      	movs	r6, #0
   1c032:	f005 fee5 	bl	21e00 <_init>
   1c036:	4d0a      	ldr	r5, [pc, #40]	; (1c060 <__libc_init_array+0x40>)
   1c038:	4c0a      	ldr	r4, [pc, #40]	; (1c064 <__libc_init_array+0x44>)
   1c03a:	1b64      	subs	r4, r4, r5
   1c03c:	10a4      	asrs	r4, r4, #2
   1c03e:	42a6      	cmp	r6, r4
   1c040:	d105      	bne.n	1c04e <__libc_init_array+0x2e>
   1c042:	bd70      	pop	{r4, r5, r6, pc}
   1c044:	00b3      	lsls	r3, r6, #2
   1c046:	58eb      	ldr	r3, [r5, r3]
   1c048:	4798      	blx	r3
   1c04a:	3601      	adds	r6, #1
   1c04c:	e7ee      	b.n	1c02c <__libc_init_array+0xc>
   1c04e:	00b3      	lsls	r3, r6, #2
   1c050:	58eb      	ldr	r3, [r5, r3]
   1c052:	4798      	blx	r3
   1c054:	3601      	adds	r6, #1
   1c056:	e7f2      	b.n	1c03e <__libc_init_array+0x1e>
   1c058:	00021e0c 	.word	0x00021e0c
   1c05c:	00021e0c 	.word	0x00021e0c
   1c060:	00021e0c 	.word	0x00021e0c
   1c064:	00021e10 	.word	0x00021e10

0001c068 <__locale_ctype_ptr_l>:
   1c068:	30ec      	adds	r0, #236	; 0xec
   1c06a:	6800      	ldr	r0, [r0, #0]
   1c06c:	4770      	bx	lr
	...

0001c070 <__locale_ctype_ptr>:
   1c070:	4b04      	ldr	r3, [pc, #16]	; (1c084 <__locale_ctype_ptr+0x14>)
   1c072:	681b      	ldr	r3, [r3, #0]
   1c074:	6a1b      	ldr	r3, [r3, #32]
   1c076:	2b00      	cmp	r3, #0
   1c078:	d100      	bne.n	1c07c <__locale_ctype_ptr+0xc>
   1c07a:	4b03      	ldr	r3, [pc, #12]	; (1c088 <__locale_ctype_ptr+0x18>)
   1c07c:	33ec      	adds	r3, #236	; 0xec
   1c07e:	6818      	ldr	r0, [r3, #0]
   1c080:	4770      	bx	lr
   1c082:	46c0      	nop			; (mov r8, r8)
   1c084:	2000022c 	.word	0x2000022c
   1c088:	20000290 	.word	0x20000290

0001c08c <__swhatbuf_r>:
   1c08c:	b570      	push	{r4, r5, r6, lr}
   1c08e:	000e      	movs	r6, r1
   1c090:	001d      	movs	r5, r3
   1c092:	230e      	movs	r3, #14
   1c094:	5ec9      	ldrsh	r1, [r1, r3]
   1c096:	b090      	sub	sp, #64	; 0x40
   1c098:	0014      	movs	r4, r2
   1c09a:	2900      	cmp	r1, #0
   1c09c:	da07      	bge.n	1c0ae <__swhatbuf_r+0x22>
   1c09e:	2300      	movs	r3, #0
   1c0a0:	602b      	str	r3, [r5, #0]
   1c0a2:	89b3      	ldrh	r3, [r6, #12]
   1c0a4:	061b      	lsls	r3, r3, #24
   1c0a6:	d411      	bmi.n	1c0cc <__swhatbuf_r+0x40>
   1c0a8:	2380      	movs	r3, #128	; 0x80
   1c0aa:	00db      	lsls	r3, r3, #3
   1c0ac:	e00f      	b.n	1c0ce <__swhatbuf_r+0x42>
   1c0ae:	aa01      	add	r2, sp, #4
   1c0b0:	f001 faec 	bl	1d68c <_fstat_r>
   1c0b4:	2800      	cmp	r0, #0
   1c0b6:	dbf2      	blt.n	1c09e <__swhatbuf_r+0x12>
   1c0b8:	22f0      	movs	r2, #240	; 0xf0
   1c0ba:	9b02      	ldr	r3, [sp, #8]
   1c0bc:	0212      	lsls	r2, r2, #8
   1c0be:	4013      	ands	r3, r2
   1c0c0:	4a05      	ldr	r2, [pc, #20]	; (1c0d8 <__swhatbuf_r+0x4c>)
   1c0c2:	189b      	adds	r3, r3, r2
   1c0c4:	425a      	negs	r2, r3
   1c0c6:	4153      	adcs	r3, r2
   1c0c8:	602b      	str	r3, [r5, #0]
   1c0ca:	e7ed      	b.n	1c0a8 <__swhatbuf_r+0x1c>
   1c0cc:	2340      	movs	r3, #64	; 0x40
   1c0ce:	2000      	movs	r0, #0
   1c0d0:	6023      	str	r3, [r4, #0]
   1c0d2:	b010      	add	sp, #64	; 0x40
   1c0d4:	bd70      	pop	{r4, r5, r6, pc}
   1c0d6:	46c0      	nop			; (mov r8, r8)
   1c0d8:	ffffe000 	.word	0xffffe000

0001c0dc <__smakebuf_r>:
   1c0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c0de:	2602      	movs	r6, #2
   1c0e0:	898b      	ldrh	r3, [r1, #12]
   1c0e2:	0005      	movs	r5, r0
   1c0e4:	000c      	movs	r4, r1
   1c0e6:	4233      	tst	r3, r6
   1c0e8:	d006      	beq.n	1c0f8 <__smakebuf_r+0x1c>
   1c0ea:	0023      	movs	r3, r4
   1c0ec:	3347      	adds	r3, #71	; 0x47
   1c0ee:	6023      	str	r3, [r4, #0]
   1c0f0:	6123      	str	r3, [r4, #16]
   1c0f2:	2301      	movs	r3, #1
   1c0f4:	6163      	str	r3, [r4, #20]
   1c0f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1c0f8:	ab01      	add	r3, sp, #4
   1c0fa:	466a      	mov	r2, sp
   1c0fc:	f7ff ffc6 	bl	1c08c <__swhatbuf_r>
   1c100:	9900      	ldr	r1, [sp, #0]
   1c102:	0007      	movs	r7, r0
   1c104:	0028      	movs	r0, r5
   1c106:	f000 f8db 	bl	1c2c0 <_malloc_r>
   1c10a:	2800      	cmp	r0, #0
   1c10c:	d108      	bne.n	1c120 <__smakebuf_r+0x44>
   1c10e:	220c      	movs	r2, #12
   1c110:	5ea3      	ldrsh	r3, [r4, r2]
   1c112:	059a      	lsls	r2, r3, #22
   1c114:	d4ef      	bmi.n	1c0f6 <__smakebuf_r+0x1a>
   1c116:	2203      	movs	r2, #3
   1c118:	4393      	bics	r3, r2
   1c11a:	431e      	orrs	r6, r3
   1c11c:	81a6      	strh	r6, [r4, #12]
   1c11e:	e7e4      	b.n	1c0ea <__smakebuf_r+0xe>
   1c120:	4b0f      	ldr	r3, [pc, #60]	; (1c160 <__smakebuf_r+0x84>)
   1c122:	62ab      	str	r3, [r5, #40]	; 0x28
   1c124:	2380      	movs	r3, #128	; 0x80
   1c126:	89a2      	ldrh	r2, [r4, #12]
   1c128:	6020      	str	r0, [r4, #0]
   1c12a:	4313      	orrs	r3, r2
   1c12c:	81a3      	strh	r3, [r4, #12]
   1c12e:	9b00      	ldr	r3, [sp, #0]
   1c130:	6120      	str	r0, [r4, #16]
   1c132:	6163      	str	r3, [r4, #20]
   1c134:	9b01      	ldr	r3, [sp, #4]
   1c136:	2b00      	cmp	r3, #0
   1c138:	d00d      	beq.n	1c156 <__smakebuf_r+0x7a>
   1c13a:	230e      	movs	r3, #14
   1c13c:	5ee1      	ldrsh	r1, [r4, r3]
   1c13e:	0028      	movs	r0, r5
   1c140:	f001 fde2 	bl	1dd08 <_isatty_r>
   1c144:	2800      	cmp	r0, #0
   1c146:	d006      	beq.n	1c156 <__smakebuf_r+0x7a>
   1c148:	2203      	movs	r2, #3
   1c14a:	89a3      	ldrh	r3, [r4, #12]
   1c14c:	4393      	bics	r3, r2
   1c14e:	001a      	movs	r2, r3
   1c150:	2301      	movs	r3, #1
   1c152:	4313      	orrs	r3, r2
   1c154:	81a3      	strh	r3, [r4, #12]
   1c156:	89a0      	ldrh	r0, [r4, #12]
   1c158:	4338      	orrs	r0, r7
   1c15a:	81a0      	strh	r0, [r4, #12]
   1c15c:	e7cb      	b.n	1c0f6 <__smakebuf_r+0x1a>
   1c15e:	46c0      	nop			; (mov r8, r8)
   1c160:	0001be71 	.word	0x0001be71

0001c164 <malloc>:
   1c164:	b510      	push	{r4, lr}
   1c166:	4b03      	ldr	r3, [pc, #12]	; (1c174 <malloc+0x10>)
   1c168:	0001      	movs	r1, r0
   1c16a:	6818      	ldr	r0, [r3, #0]
   1c16c:	f000 f8a8 	bl	1c2c0 <_malloc_r>
   1c170:	bd10      	pop	{r4, pc}
   1c172:	46c0      	nop			; (mov r8, r8)
   1c174:	2000022c 	.word	0x2000022c

0001c178 <free>:
   1c178:	b510      	push	{r4, lr}
   1c17a:	4b03      	ldr	r3, [pc, #12]	; (1c188 <free+0x10>)
   1c17c:	0001      	movs	r1, r0
   1c17e:	6818      	ldr	r0, [r3, #0]
   1c180:	f000 f854 	bl	1c22c <_free_r>
   1c184:	bd10      	pop	{r4, pc}
   1c186:	46c0      	nop			; (mov r8, r8)
   1c188:	2000022c 	.word	0x2000022c

0001c18c <__ascii_mbtowc>:
   1c18c:	b082      	sub	sp, #8
   1c18e:	2900      	cmp	r1, #0
   1c190:	d100      	bne.n	1c194 <__ascii_mbtowc+0x8>
   1c192:	a901      	add	r1, sp, #4
   1c194:	1e10      	subs	r0, r2, #0
   1c196:	d006      	beq.n	1c1a6 <__ascii_mbtowc+0x1a>
   1c198:	2b00      	cmp	r3, #0
   1c19a:	d006      	beq.n	1c1aa <__ascii_mbtowc+0x1e>
   1c19c:	7813      	ldrb	r3, [r2, #0]
   1c19e:	600b      	str	r3, [r1, #0]
   1c1a0:	7810      	ldrb	r0, [r2, #0]
   1c1a2:	1e43      	subs	r3, r0, #1
   1c1a4:	4198      	sbcs	r0, r3
   1c1a6:	b002      	add	sp, #8
   1c1a8:	4770      	bx	lr
   1c1aa:	2002      	movs	r0, #2
   1c1ac:	4240      	negs	r0, r0
   1c1ae:	e7fa      	b.n	1c1a6 <__ascii_mbtowc+0x1a>

0001c1b0 <memchr>:
   1c1b0:	b2c9      	uxtb	r1, r1
   1c1b2:	1882      	adds	r2, r0, r2
   1c1b4:	4290      	cmp	r0, r2
   1c1b6:	d101      	bne.n	1c1bc <memchr+0xc>
   1c1b8:	2000      	movs	r0, #0
   1c1ba:	4770      	bx	lr
   1c1bc:	7803      	ldrb	r3, [r0, #0]
   1c1be:	428b      	cmp	r3, r1
   1c1c0:	d0fb      	beq.n	1c1ba <memchr+0xa>
   1c1c2:	3001      	adds	r0, #1
   1c1c4:	e7f6      	b.n	1c1b4 <memchr+0x4>

0001c1c6 <memcmp>:
   1c1c6:	b530      	push	{r4, r5, lr}
   1c1c8:	2400      	movs	r4, #0
   1c1ca:	42a2      	cmp	r2, r4
   1c1cc:	d101      	bne.n	1c1d2 <memcmp+0xc>
   1c1ce:	2000      	movs	r0, #0
   1c1d0:	e005      	b.n	1c1de <memcmp+0x18>
   1c1d2:	5d03      	ldrb	r3, [r0, r4]
   1c1d4:	1c65      	adds	r5, r4, #1
   1c1d6:	5d0c      	ldrb	r4, [r1, r4]
   1c1d8:	42a3      	cmp	r3, r4
   1c1da:	d001      	beq.n	1c1e0 <memcmp+0x1a>
   1c1dc:	1b18      	subs	r0, r3, r4
   1c1de:	bd30      	pop	{r4, r5, pc}
   1c1e0:	002c      	movs	r4, r5
   1c1e2:	e7f2      	b.n	1c1ca <memcmp+0x4>

0001c1e4 <memcpy>:
   1c1e4:	2300      	movs	r3, #0
   1c1e6:	b510      	push	{r4, lr}
   1c1e8:	429a      	cmp	r2, r3
   1c1ea:	d100      	bne.n	1c1ee <memcpy+0xa>
   1c1ec:	bd10      	pop	{r4, pc}
   1c1ee:	5ccc      	ldrb	r4, [r1, r3]
   1c1f0:	54c4      	strb	r4, [r0, r3]
   1c1f2:	3301      	adds	r3, #1
   1c1f4:	e7f8      	b.n	1c1e8 <memcpy+0x4>

0001c1f6 <memmove>:
   1c1f6:	b510      	push	{r4, lr}
   1c1f8:	4288      	cmp	r0, r1
   1c1fa:	d902      	bls.n	1c202 <memmove+0xc>
   1c1fc:	188b      	adds	r3, r1, r2
   1c1fe:	4298      	cmp	r0, r3
   1c200:	d308      	bcc.n	1c214 <memmove+0x1e>
   1c202:	2300      	movs	r3, #0
   1c204:	429a      	cmp	r2, r3
   1c206:	d007      	beq.n	1c218 <memmove+0x22>
   1c208:	5ccc      	ldrb	r4, [r1, r3]
   1c20a:	54c4      	strb	r4, [r0, r3]
   1c20c:	3301      	adds	r3, #1
   1c20e:	e7f9      	b.n	1c204 <memmove+0xe>
   1c210:	5c8b      	ldrb	r3, [r1, r2]
   1c212:	5483      	strb	r3, [r0, r2]
   1c214:	3a01      	subs	r2, #1
   1c216:	d2fb      	bcs.n	1c210 <memmove+0x1a>
   1c218:	bd10      	pop	{r4, pc}

0001c21a <memset>:
   1c21a:	0003      	movs	r3, r0
   1c21c:	1882      	adds	r2, r0, r2
   1c21e:	4293      	cmp	r3, r2
   1c220:	d100      	bne.n	1c224 <memset+0xa>
   1c222:	4770      	bx	lr
   1c224:	7019      	strb	r1, [r3, #0]
   1c226:	3301      	adds	r3, #1
   1c228:	e7f9      	b.n	1c21e <memset+0x4>
	...

0001c22c <_free_r>:
   1c22c:	b570      	push	{r4, r5, r6, lr}
   1c22e:	0005      	movs	r5, r0
   1c230:	2900      	cmp	r1, #0
   1c232:	d010      	beq.n	1c256 <_free_r+0x2a>
   1c234:	1f0c      	subs	r4, r1, #4
   1c236:	6823      	ldr	r3, [r4, #0]
   1c238:	2b00      	cmp	r3, #0
   1c23a:	da00      	bge.n	1c23e <_free_r+0x12>
   1c23c:	18e4      	adds	r4, r4, r3
   1c23e:	0028      	movs	r0, r5
   1c240:	f001 fd8a 	bl	1dd58 <__malloc_lock>
   1c244:	4a1d      	ldr	r2, [pc, #116]	; (1c2bc <_free_r+0x90>)
   1c246:	6813      	ldr	r3, [r2, #0]
   1c248:	2b00      	cmp	r3, #0
   1c24a:	d105      	bne.n	1c258 <_free_r+0x2c>
   1c24c:	6063      	str	r3, [r4, #4]
   1c24e:	6014      	str	r4, [r2, #0]
   1c250:	0028      	movs	r0, r5
   1c252:	f001 fd82 	bl	1dd5a <__malloc_unlock>
   1c256:	bd70      	pop	{r4, r5, r6, pc}
   1c258:	42a3      	cmp	r3, r4
   1c25a:	d909      	bls.n	1c270 <_free_r+0x44>
   1c25c:	6821      	ldr	r1, [r4, #0]
   1c25e:	1860      	adds	r0, r4, r1
   1c260:	4283      	cmp	r3, r0
   1c262:	d1f3      	bne.n	1c24c <_free_r+0x20>
   1c264:	6818      	ldr	r0, [r3, #0]
   1c266:	685b      	ldr	r3, [r3, #4]
   1c268:	1841      	adds	r1, r0, r1
   1c26a:	6021      	str	r1, [r4, #0]
   1c26c:	e7ee      	b.n	1c24c <_free_r+0x20>
   1c26e:	0013      	movs	r3, r2
   1c270:	685a      	ldr	r2, [r3, #4]
   1c272:	2a00      	cmp	r2, #0
   1c274:	d001      	beq.n	1c27a <_free_r+0x4e>
   1c276:	42a2      	cmp	r2, r4
   1c278:	d9f9      	bls.n	1c26e <_free_r+0x42>
   1c27a:	6819      	ldr	r1, [r3, #0]
   1c27c:	1858      	adds	r0, r3, r1
   1c27e:	42a0      	cmp	r0, r4
   1c280:	d10b      	bne.n	1c29a <_free_r+0x6e>
   1c282:	6820      	ldr	r0, [r4, #0]
   1c284:	1809      	adds	r1, r1, r0
   1c286:	1858      	adds	r0, r3, r1
   1c288:	6019      	str	r1, [r3, #0]
   1c28a:	4282      	cmp	r2, r0
   1c28c:	d1e0      	bne.n	1c250 <_free_r+0x24>
   1c28e:	6810      	ldr	r0, [r2, #0]
   1c290:	6852      	ldr	r2, [r2, #4]
   1c292:	1841      	adds	r1, r0, r1
   1c294:	6019      	str	r1, [r3, #0]
   1c296:	605a      	str	r2, [r3, #4]
   1c298:	e7da      	b.n	1c250 <_free_r+0x24>
   1c29a:	42a0      	cmp	r0, r4
   1c29c:	d902      	bls.n	1c2a4 <_free_r+0x78>
   1c29e:	230c      	movs	r3, #12
   1c2a0:	602b      	str	r3, [r5, #0]
   1c2a2:	e7d5      	b.n	1c250 <_free_r+0x24>
   1c2a4:	6821      	ldr	r1, [r4, #0]
   1c2a6:	1860      	adds	r0, r4, r1
   1c2a8:	4282      	cmp	r2, r0
   1c2aa:	d103      	bne.n	1c2b4 <_free_r+0x88>
   1c2ac:	6810      	ldr	r0, [r2, #0]
   1c2ae:	6852      	ldr	r2, [r2, #4]
   1c2b0:	1841      	adds	r1, r0, r1
   1c2b2:	6021      	str	r1, [r4, #0]
   1c2b4:	6062      	str	r2, [r4, #4]
   1c2b6:	605c      	str	r4, [r3, #4]
   1c2b8:	e7ca      	b.n	1c250 <_free_r+0x24>
   1c2ba:	46c0      	nop			; (mov r8, r8)
   1c2bc:	200026c0 	.word	0x200026c0

0001c2c0 <_malloc_r>:
   1c2c0:	2303      	movs	r3, #3
   1c2c2:	b570      	push	{r4, r5, r6, lr}
   1c2c4:	1ccd      	adds	r5, r1, #3
   1c2c6:	439d      	bics	r5, r3
   1c2c8:	3508      	adds	r5, #8
   1c2ca:	0006      	movs	r6, r0
   1c2cc:	2d0c      	cmp	r5, #12
   1c2ce:	d21e      	bcs.n	1c30e <_malloc_r+0x4e>
   1c2d0:	250c      	movs	r5, #12
   1c2d2:	42a9      	cmp	r1, r5
   1c2d4:	d81d      	bhi.n	1c312 <_malloc_r+0x52>
   1c2d6:	0030      	movs	r0, r6
   1c2d8:	f001 fd3e 	bl	1dd58 <__malloc_lock>
   1c2dc:	4a25      	ldr	r2, [pc, #148]	; (1c374 <_malloc_r+0xb4>)
   1c2de:	6814      	ldr	r4, [r2, #0]
   1c2e0:	0021      	movs	r1, r4
   1c2e2:	2900      	cmp	r1, #0
   1c2e4:	d119      	bne.n	1c31a <_malloc_r+0x5a>
   1c2e6:	4c24      	ldr	r4, [pc, #144]	; (1c378 <_malloc_r+0xb8>)
   1c2e8:	6823      	ldr	r3, [r4, #0]
   1c2ea:	2b00      	cmp	r3, #0
   1c2ec:	d103      	bne.n	1c2f6 <_malloc_r+0x36>
   1c2ee:	0030      	movs	r0, r6
   1c2f0:	f000 f8dc 	bl	1c4ac <_sbrk_r>
   1c2f4:	6020      	str	r0, [r4, #0]
   1c2f6:	0029      	movs	r1, r5
   1c2f8:	0030      	movs	r0, r6
   1c2fa:	f000 f8d7 	bl	1c4ac <_sbrk_r>
   1c2fe:	1c43      	adds	r3, r0, #1
   1c300:	d12c      	bne.n	1c35c <_malloc_r+0x9c>
   1c302:	230c      	movs	r3, #12
   1c304:	0030      	movs	r0, r6
   1c306:	6033      	str	r3, [r6, #0]
   1c308:	f001 fd27 	bl	1dd5a <__malloc_unlock>
   1c30c:	e003      	b.n	1c316 <_malloc_r+0x56>
   1c30e:	2d00      	cmp	r5, #0
   1c310:	dadf      	bge.n	1c2d2 <_malloc_r+0x12>
   1c312:	230c      	movs	r3, #12
   1c314:	6033      	str	r3, [r6, #0]
   1c316:	2000      	movs	r0, #0
   1c318:	bd70      	pop	{r4, r5, r6, pc}
   1c31a:	680b      	ldr	r3, [r1, #0]
   1c31c:	1b5b      	subs	r3, r3, r5
   1c31e:	d41a      	bmi.n	1c356 <_malloc_r+0x96>
   1c320:	2b0b      	cmp	r3, #11
   1c322:	d903      	bls.n	1c32c <_malloc_r+0x6c>
   1c324:	600b      	str	r3, [r1, #0]
   1c326:	18cc      	adds	r4, r1, r3
   1c328:	6025      	str	r5, [r4, #0]
   1c32a:	e003      	b.n	1c334 <_malloc_r+0x74>
   1c32c:	428c      	cmp	r4, r1
   1c32e:	d10e      	bne.n	1c34e <_malloc_r+0x8e>
   1c330:	6863      	ldr	r3, [r4, #4]
   1c332:	6013      	str	r3, [r2, #0]
   1c334:	0030      	movs	r0, r6
   1c336:	f001 fd10 	bl	1dd5a <__malloc_unlock>
   1c33a:	0020      	movs	r0, r4
   1c33c:	2207      	movs	r2, #7
   1c33e:	300b      	adds	r0, #11
   1c340:	1d23      	adds	r3, r4, #4
   1c342:	4390      	bics	r0, r2
   1c344:	1ac3      	subs	r3, r0, r3
   1c346:	d0e7      	beq.n	1c318 <_malloc_r+0x58>
   1c348:	425a      	negs	r2, r3
   1c34a:	50e2      	str	r2, [r4, r3]
   1c34c:	e7e4      	b.n	1c318 <_malloc_r+0x58>
   1c34e:	684b      	ldr	r3, [r1, #4]
   1c350:	6063      	str	r3, [r4, #4]
   1c352:	000c      	movs	r4, r1
   1c354:	e7ee      	b.n	1c334 <_malloc_r+0x74>
   1c356:	000c      	movs	r4, r1
   1c358:	6849      	ldr	r1, [r1, #4]
   1c35a:	e7c2      	b.n	1c2e2 <_malloc_r+0x22>
   1c35c:	2303      	movs	r3, #3
   1c35e:	1cc4      	adds	r4, r0, #3
   1c360:	439c      	bics	r4, r3
   1c362:	42a0      	cmp	r0, r4
   1c364:	d0e0      	beq.n	1c328 <_malloc_r+0x68>
   1c366:	1a21      	subs	r1, r4, r0
   1c368:	0030      	movs	r0, r6
   1c36a:	f000 f89f 	bl	1c4ac <_sbrk_r>
   1c36e:	1c43      	adds	r3, r0, #1
   1c370:	d1da      	bne.n	1c328 <_malloc_r+0x68>
   1c372:	e7c6      	b.n	1c302 <_malloc_r+0x42>
   1c374:	200026c0 	.word	0x200026c0
   1c378:	200026c4 	.word	0x200026c4

0001c37c <iprintf>:
   1c37c:	b40f      	push	{r0, r1, r2, r3}
   1c37e:	4b0b      	ldr	r3, [pc, #44]	; (1c3ac <iprintf+0x30>)
   1c380:	b513      	push	{r0, r1, r4, lr}
   1c382:	681c      	ldr	r4, [r3, #0]
   1c384:	2c00      	cmp	r4, #0
   1c386:	d005      	beq.n	1c394 <iprintf+0x18>
   1c388:	69a3      	ldr	r3, [r4, #24]
   1c38a:	2b00      	cmp	r3, #0
   1c38c:	d102      	bne.n	1c394 <iprintf+0x18>
   1c38e:	0020      	movs	r0, r4
   1c390:	f7ff fdb0 	bl	1bef4 <__sinit>
   1c394:	ab05      	add	r3, sp, #20
   1c396:	9a04      	ldr	r2, [sp, #16]
   1c398:	68a1      	ldr	r1, [r4, #8]
   1c39a:	0020      	movs	r0, r4
   1c39c:	9301      	str	r3, [sp, #4]
   1c39e:	f002 fc4f 	bl	1ec40 <_vfiprintf_r>
   1c3a2:	bc16      	pop	{r1, r2, r4}
   1c3a4:	bc08      	pop	{r3}
   1c3a6:	b004      	add	sp, #16
   1c3a8:	4718      	bx	r3
   1c3aa:	46c0      	nop			; (mov r8, r8)
   1c3ac:	2000022c 	.word	0x2000022c

0001c3b0 <putchar>:
   1c3b0:	4b08      	ldr	r3, [pc, #32]	; (1c3d4 <putchar+0x24>)
   1c3b2:	b570      	push	{r4, r5, r6, lr}
   1c3b4:	681c      	ldr	r4, [r3, #0]
   1c3b6:	0005      	movs	r5, r0
   1c3b8:	2c00      	cmp	r4, #0
   1c3ba:	d005      	beq.n	1c3c8 <putchar+0x18>
   1c3bc:	69a3      	ldr	r3, [r4, #24]
   1c3be:	2b00      	cmp	r3, #0
   1c3c0:	d102      	bne.n	1c3c8 <putchar+0x18>
   1c3c2:	0020      	movs	r0, r4
   1c3c4:	f7ff fd96 	bl	1bef4 <__sinit>
   1c3c8:	0029      	movs	r1, r5
   1c3ca:	68a2      	ldr	r2, [r4, #8]
   1c3cc:	0020      	movs	r0, r4
   1c3ce:	f003 f83f 	bl	1f450 <_putc_r>
   1c3d2:	bd70      	pop	{r4, r5, r6, pc}
   1c3d4:	2000022c 	.word	0x2000022c

0001c3d8 <_puts_r>:
   1c3d8:	b570      	push	{r4, r5, r6, lr}
   1c3da:	0005      	movs	r5, r0
   1c3dc:	000e      	movs	r6, r1
   1c3de:	2800      	cmp	r0, #0
   1c3e0:	d004      	beq.n	1c3ec <_puts_r+0x14>
   1c3e2:	6983      	ldr	r3, [r0, #24]
   1c3e4:	2b00      	cmp	r3, #0
   1c3e6:	d101      	bne.n	1c3ec <_puts_r+0x14>
   1c3e8:	f7ff fd84 	bl	1bef4 <__sinit>
   1c3ec:	69ab      	ldr	r3, [r5, #24]
   1c3ee:	68ac      	ldr	r4, [r5, #8]
   1c3f0:	2b00      	cmp	r3, #0
   1c3f2:	d102      	bne.n	1c3fa <_puts_r+0x22>
   1c3f4:	0028      	movs	r0, r5
   1c3f6:	f7ff fd7d 	bl	1bef4 <__sinit>
   1c3fa:	4b24      	ldr	r3, [pc, #144]	; (1c48c <_puts_r+0xb4>)
   1c3fc:	429c      	cmp	r4, r3
   1c3fe:	d10f      	bne.n	1c420 <_puts_r+0x48>
   1c400:	686c      	ldr	r4, [r5, #4]
   1c402:	89a3      	ldrh	r3, [r4, #12]
   1c404:	071b      	lsls	r3, r3, #28
   1c406:	d502      	bpl.n	1c40e <_puts_r+0x36>
   1c408:	6923      	ldr	r3, [r4, #16]
   1c40a:	2b00      	cmp	r3, #0
   1c40c:	d120      	bne.n	1c450 <_puts_r+0x78>
   1c40e:	0021      	movs	r1, r4
   1c410:	0028      	movs	r0, r5
   1c412:	f001 f8b3 	bl	1d57c <__swsetup_r>
   1c416:	2800      	cmp	r0, #0
   1c418:	d01a      	beq.n	1c450 <_puts_r+0x78>
   1c41a:	2001      	movs	r0, #1
   1c41c:	4240      	negs	r0, r0
   1c41e:	bd70      	pop	{r4, r5, r6, pc}
   1c420:	4b1b      	ldr	r3, [pc, #108]	; (1c490 <_puts_r+0xb8>)
   1c422:	429c      	cmp	r4, r3
   1c424:	d101      	bne.n	1c42a <_puts_r+0x52>
   1c426:	68ac      	ldr	r4, [r5, #8]
   1c428:	e7eb      	b.n	1c402 <_puts_r+0x2a>
   1c42a:	4b1a      	ldr	r3, [pc, #104]	; (1c494 <_puts_r+0xbc>)
   1c42c:	429c      	cmp	r4, r3
   1c42e:	d1e8      	bne.n	1c402 <_puts_r+0x2a>
   1c430:	68ec      	ldr	r4, [r5, #12]
   1c432:	e7e6      	b.n	1c402 <_puts_r+0x2a>
   1c434:	3b01      	subs	r3, #1
   1c436:	3601      	adds	r6, #1
   1c438:	60a3      	str	r3, [r4, #8]
   1c43a:	2b00      	cmp	r3, #0
   1c43c:	da04      	bge.n	1c448 <_puts_r+0x70>
   1c43e:	69a2      	ldr	r2, [r4, #24]
   1c440:	4293      	cmp	r3, r2
   1c442:	db16      	blt.n	1c472 <_puts_r+0x9a>
   1c444:	290a      	cmp	r1, #10
   1c446:	d014      	beq.n	1c472 <_puts_r+0x9a>
   1c448:	6823      	ldr	r3, [r4, #0]
   1c44a:	1c5a      	adds	r2, r3, #1
   1c44c:	6022      	str	r2, [r4, #0]
   1c44e:	7019      	strb	r1, [r3, #0]
   1c450:	7831      	ldrb	r1, [r6, #0]
   1c452:	68a3      	ldr	r3, [r4, #8]
   1c454:	2900      	cmp	r1, #0
   1c456:	d1ed      	bne.n	1c434 <_puts_r+0x5c>
   1c458:	3b01      	subs	r3, #1
   1c45a:	60a3      	str	r3, [r4, #8]
   1c45c:	2b00      	cmp	r3, #0
   1c45e:	da0f      	bge.n	1c480 <_puts_r+0xa8>
   1c460:	0022      	movs	r2, r4
   1c462:	310a      	adds	r1, #10
   1c464:	0028      	movs	r0, r5
   1c466:	f001 f813 	bl	1d490 <__swbuf_r>
   1c46a:	1c43      	adds	r3, r0, #1
   1c46c:	d0d5      	beq.n	1c41a <_puts_r+0x42>
   1c46e:	200a      	movs	r0, #10
   1c470:	e7d5      	b.n	1c41e <_puts_r+0x46>
   1c472:	0022      	movs	r2, r4
   1c474:	0028      	movs	r0, r5
   1c476:	f001 f80b 	bl	1d490 <__swbuf_r>
   1c47a:	1c43      	adds	r3, r0, #1
   1c47c:	d1e8      	bne.n	1c450 <_puts_r+0x78>
   1c47e:	e7cc      	b.n	1c41a <_puts_r+0x42>
   1c480:	200a      	movs	r0, #10
   1c482:	6823      	ldr	r3, [r4, #0]
   1c484:	1c5a      	adds	r2, r3, #1
   1c486:	6022      	str	r2, [r4, #0]
   1c488:	7018      	strb	r0, [r3, #0]
   1c48a:	e7c8      	b.n	1c41e <_puts_r+0x46>
   1c48c:	00021af0 	.word	0x00021af0
   1c490:	00021b10 	.word	0x00021b10
   1c494:	00021ad0 	.word	0x00021ad0

0001c498 <puts>:
   1c498:	b510      	push	{r4, lr}
   1c49a:	4b03      	ldr	r3, [pc, #12]	; (1c4a8 <puts+0x10>)
   1c49c:	0001      	movs	r1, r0
   1c49e:	6818      	ldr	r0, [r3, #0]
   1c4a0:	f7ff ff9a 	bl	1c3d8 <_puts_r>
   1c4a4:	bd10      	pop	{r4, pc}
   1c4a6:	46c0      	nop			; (mov r8, r8)
   1c4a8:	2000022c 	.word	0x2000022c

0001c4ac <_sbrk_r>:
   1c4ac:	2300      	movs	r3, #0
   1c4ae:	b570      	push	{r4, r5, r6, lr}
   1c4b0:	4c06      	ldr	r4, [pc, #24]	; (1c4cc <_sbrk_r+0x20>)
   1c4b2:	0005      	movs	r5, r0
   1c4b4:	0008      	movs	r0, r1
   1c4b6:	6023      	str	r3, [r4, #0]
   1c4b8:	f7e3 ff96 	bl	3e8 <_sbrk>
   1c4bc:	1c43      	adds	r3, r0, #1
   1c4be:	d103      	bne.n	1c4c8 <_sbrk_r+0x1c>
   1c4c0:	6823      	ldr	r3, [r4, #0]
   1c4c2:	2b00      	cmp	r3, #0
   1c4c4:	d000      	beq.n	1c4c8 <_sbrk_r+0x1c>
   1c4c6:	602b      	str	r3, [r5, #0]
   1c4c8:	bd70      	pop	{r4, r5, r6, pc}
   1c4ca:	46c0      	nop			; (mov r8, r8)
   1c4cc:	20002c04 	.word	0x20002c04

0001c4d0 <setbuf>:
   1c4d0:	424a      	negs	r2, r1
   1c4d2:	414a      	adcs	r2, r1
   1c4d4:	2380      	movs	r3, #128	; 0x80
   1c4d6:	b510      	push	{r4, lr}
   1c4d8:	0052      	lsls	r2, r2, #1
   1c4da:	00db      	lsls	r3, r3, #3
   1c4dc:	f000 f802 	bl	1c4e4 <setvbuf>
   1c4e0:	bd10      	pop	{r4, pc}
	...

0001c4e4 <setvbuf>:
   1c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4e6:	001d      	movs	r5, r3
   1c4e8:	4b4f      	ldr	r3, [pc, #316]	; (1c628 <setvbuf+0x144>)
   1c4ea:	b085      	sub	sp, #20
   1c4ec:	681e      	ldr	r6, [r3, #0]
   1c4ee:	0004      	movs	r4, r0
   1c4f0:	000f      	movs	r7, r1
   1c4f2:	9200      	str	r2, [sp, #0]
   1c4f4:	2e00      	cmp	r6, #0
   1c4f6:	d005      	beq.n	1c504 <setvbuf+0x20>
   1c4f8:	69b3      	ldr	r3, [r6, #24]
   1c4fa:	2b00      	cmp	r3, #0
   1c4fc:	d102      	bne.n	1c504 <setvbuf+0x20>
   1c4fe:	0030      	movs	r0, r6
   1c500:	f7ff fcf8 	bl	1bef4 <__sinit>
   1c504:	4b49      	ldr	r3, [pc, #292]	; (1c62c <setvbuf+0x148>)
   1c506:	429c      	cmp	r4, r3
   1c508:	d150      	bne.n	1c5ac <setvbuf+0xc8>
   1c50a:	6874      	ldr	r4, [r6, #4]
   1c50c:	9b00      	ldr	r3, [sp, #0]
   1c50e:	2b02      	cmp	r3, #2
   1c510:	d005      	beq.n	1c51e <setvbuf+0x3a>
   1c512:	2b01      	cmp	r3, #1
   1c514:	d900      	bls.n	1c518 <setvbuf+0x34>
   1c516:	e084      	b.n	1c622 <setvbuf+0x13e>
   1c518:	2d00      	cmp	r5, #0
   1c51a:	da00      	bge.n	1c51e <setvbuf+0x3a>
   1c51c:	e081      	b.n	1c622 <setvbuf+0x13e>
   1c51e:	0021      	movs	r1, r4
   1c520:	0030      	movs	r0, r6
   1c522:	f7ff fc79 	bl	1be18 <_fflush_r>
   1c526:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1c528:	2900      	cmp	r1, #0
   1c52a:	d008      	beq.n	1c53e <setvbuf+0x5a>
   1c52c:	0023      	movs	r3, r4
   1c52e:	3344      	adds	r3, #68	; 0x44
   1c530:	4299      	cmp	r1, r3
   1c532:	d002      	beq.n	1c53a <setvbuf+0x56>
   1c534:	0030      	movs	r0, r6
   1c536:	f7ff fe79 	bl	1c22c <_free_r>
   1c53a:	2300      	movs	r3, #0
   1c53c:	6363      	str	r3, [r4, #52]	; 0x34
   1c53e:	2300      	movs	r3, #0
   1c540:	61a3      	str	r3, [r4, #24]
   1c542:	6063      	str	r3, [r4, #4]
   1c544:	89a3      	ldrh	r3, [r4, #12]
   1c546:	061b      	lsls	r3, r3, #24
   1c548:	d503      	bpl.n	1c552 <setvbuf+0x6e>
   1c54a:	6921      	ldr	r1, [r4, #16]
   1c54c:	0030      	movs	r0, r6
   1c54e:	f7ff fe6d 	bl	1c22c <_free_r>
   1c552:	89a3      	ldrh	r3, [r4, #12]
   1c554:	4a36      	ldr	r2, [pc, #216]	; (1c630 <setvbuf+0x14c>)
   1c556:	4013      	ands	r3, r2
   1c558:	81a3      	strh	r3, [r4, #12]
   1c55a:	9b00      	ldr	r3, [sp, #0]
   1c55c:	2b02      	cmp	r3, #2
   1c55e:	d05a      	beq.n	1c616 <setvbuf+0x132>
   1c560:	ab03      	add	r3, sp, #12
   1c562:	aa02      	add	r2, sp, #8
   1c564:	0021      	movs	r1, r4
   1c566:	0030      	movs	r0, r6
   1c568:	f7ff fd90 	bl	1c08c <__swhatbuf_r>
   1c56c:	89a3      	ldrh	r3, [r4, #12]
   1c56e:	4318      	orrs	r0, r3
   1c570:	81a0      	strh	r0, [r4, #12]
   1c572:	2d00      	cmp	r5, #0
   1c574:	d124      	bne.n	1c5c0 <setvbuf+0xdc>
   1c576:	9d02      	ldr	r5, [sp, #8]
   1c578:	0028      	movs	r0, r5
   1c57a:	f7ff fdf3 	bl	1c164 <malloc>
   1c57e:	9501      	str	r5, [sp, #4]
   1c580:	1e07      	subs	r7, r0, #0
   1c582:	d142      	bne.n	1c60a <setvbuf+0x126>
   1c584:	9b02      	ldr	r3, [sp, #8]
   1c586:	9301      	str	r3, [sp, #4]
   1c588:	42ab      	cmp	r3, r5
   1c58a:	d139      	bne.n	1c600 <setvbuf+0x11c>
   1c58c:	2001      	movs	r0, #1
   1c58e:	4240      	negs	r0, r0
   1c590:	2302      	movs	r3, #2
   1c592:	89a2      	ldrh	r2, [r4, #12]
   1c594:	4313      	orrs	r3, r2
   1c596:	81a3      	strh	r3, [r4, #12]
   1c598:	2300      	movs	r3, #0
   1c59a:	60a3      	str	r3, [r4, #8]
   1c59c:	0023      	movs	r3, r4
   1c59e:	3347      	adds	r3, #71	; 0x47
   1c5a0:	6023      	str	r3, [r4, #0]
   1c5a2:	6123      	str	r3, [r4, #16]
   1c5a4:	2301      	movs	r3, #1
   1c5a6:	6163      	str	r3, [r4, #20]
   1c5a8:	b005      	add	sp, #20
   1c5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c5ac:	4b21      	ldr	r3, [pc, #132]	; (1c634 <setvbuf+0x150>)
   1c5ae:	429c      	cmp	r4, r3
   1c5b0:	d101      	bne.n	1c5b6 <setvbuf+0xd2>
   1c5b2:	68b4      	ldr	r4, [r6, #8]
   1c5b4:	e7aa      	b.n	1c50c <setvbuf+0x28>
   1c5b6:	4b20      	ldr	r3, [pc, #128]	; (1c638 <setvbuf+0x154>)
   1c5b8:	429c      	cmp	r4, r3
   1c5ba:	d1a7      	bne.n	1c50c <setvbuf+0x28>
   1c5bc:	68f4      	ldr	r4, [r6, #12]
   1c5be:	e7a5      	b.n	1c50c <setvbuf+0x28>
   1c5c0:	2f00      	cmp	r7, #0
   1c5c2:	d0d9      	beq.n	1c578 <setvbuf+0x94>
   1c5c4:	69b3      	ldr	r3, [r6, #24]
   1c5c6:	2b00      	cmp	r3, #0
   1c5c8:	d102      	bne.n	1c5d0 <setvbuf+0xec>
   1c5ca:	0030      	movs	r0, r6
   1c5cc:	f7ff fc92 	bl	1bef4 <__sinit>
   1c5d0:	9b00      	ldr	r3, [sp, #0]
   1c5d2:	2b01      	cmp	r3, #1
   1c5d4:	d103      	bne.n	1c5de <setvbuf+0xfa>
   1c5d6:	89a3      	ldrh	r3, [r4, #12]
   1c5d8:	9a00      	ldr	r2, [sp, #0]
   1c5da:	431a      	orrs	r2, r3
   1c5dc:	81a2      	strh	r2, [r4, #12]
   1c5de:	2008      	movs	r0, #8
   1c5e0:	89a3      	ldrh	r3, [r4, #12]
   1c5e2:	6027      	str	r7, [r4, #0]
   1c5e4:	6127      	str	r7, [r4, #16]
   1c5e6:	6165      	str	r5, [r4, #20]
   1c5e8:	4018      	ands	r0, r3
   1c5ea:	d018      	beq.n	1c61e <setvbuf+0x13a>
   1c5ec:	2001      	movs	r0, #1
   1c5ee:	4018      	ands	r0, r3
   1c5f0:	2300      	movs	r3, #0
   1c5f2:	4298      	cmp	r0, r3
   1c5f4:	d011      	beq.n	1c61a <setvbuf+0x136>
   1c5f6:	426d      	negs	r5, r5
   1c5f8:	60a3      	str	r3, [r4, #8]
   1c5fa:	61a5      	str	r5, [r4, #24]
   1c5fc:	0018      	movs	r0, r3
   1c5fe:	e7d3      	b.n	1c5a8 <setvbuf+0xc4>
   1c600:	9801      	ldr	r0, [sp, #4]
   1c602:	f7ff fdaf 	bl	1c164 <malloc>
   1c606:	1e07      	subs	r7, r0, #0
   1c608:	d0c0      	beq.n	1c58c <setvbuf+0xa8>
   1c60a:	2380      	movs	r3, #128	; 0x80
   1c60c:	89a2      	ldrh	r2, [r4, #12]
   1c60e:	9d01      	ldr	r5, [sp, #4]
   1c610:	4313      	orrs	r3, r2
   1c612:	81a3      	strh	r3, [r4, #12]
   1c614:	e7d6      	b.n	1c5c4 <setvbuf+0xe0>
   1c616:	2000      	movs	r0, #0
   1c618:	e7ba      	b.n	1c590 <setvbuf+0xac>
   1c61a:	60a5      	str	r5, [r4, #8]
   1c61c:	e7c4      	b.n	1c5a8 <setvbuf+0xc4>
   1c61e:	60a0      	str	r0, [r4, #8]
   1c620:	e7c2      	b.n	1c5a8 <setvbuf+0xc4>
   1c622:	2001      	movs	r0, #1
   1c624:	4240      	negs	r0, r0
   1c626:	e7bf      	b.n	1c5a8 <setvbuf+0xc4>
   1c628:	2000022c 	.word	0x2000022c
   1c62c:	00021af0 	.word	0x00021af0
   1c630:	fffff35c 	.word	0xfffff35c
   1c634:	00021b10 	.word	0x00021b10
   1c638:	00021ad0 	.word	0x00021ad0

0001c63c <sniprintf>:
   1c63c:	b40c      	push	{r2, r3}
   1c63e:	b530      	push	{r4, r5, lr}
   1c640:	4b16      	ldr	r3, [pc, #88]	; (1c69c <sniprintf+0x60>)
   1c642:	b09d      	sub	sp, #116	; 0x74
   1c644:	1e0c      	subs	r4, r1, #0
   1c646:	681d      	ldr	r5, [r3, #0]
   1c648:	da08      	bge.n	1c65c <sniprintf+0x20>
   1c64a:	238b      	movs	r3, #139	; 0x8b
   1c64c:	2001      	movs	r0, #1
   1c64e:	602b      	str	r3, [r5, #0]
   1c650:	4240      	negs	r0, r0
   1c652:	b01d      	add	sp, #116	; 0x74
   1c654:	bc30      	pop	{r4, r5}
   1c656:	bc08      	pop	{r3}
   1c658:	b002      	add	sp, #8
   1c65a:	4718      	bx	r3
   1c65c:	2382      	movs	r3, #130	; 0x82
   1c65e:	a902      	add	r1, sp, #8
   1c660:	009b      	lsls	r3, r3, #2
   1c662:	818b      	strh	r3, [r1, #12]
   1c664:	2300      	movs	r3, #0
   1c666:	9002      	str	r0, [sp, #8]
   1c668:	6108      	str	r0, [r1, #16]
   1c66a:	429c      	cmp	r4, r3
   1c66c:	d000      	beq.n	1c670 <sniprintf+0x34>
   1c66e:	1e63      	subs	r3, r4, #1
   1c670:	608b      	str	r3, [r1, #8]
   1c672:	614b      	str	r3, [r1, #20]
   1c674:	2301      	movs	r3, #1
   1c676:	425b      	negs	r3, r3
   1c678:	81cb      	strh	r3, [r1, #14]
   1c67a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1c67c:	ab21      	add	r3, sp, #132	; 0x84
   1c67e:	0028      	movs	r0, r5
   1c680:	9301      	str	r3, [sp, #4]
   1c682:	f001 ffcf 	bl	1e624 <_svfiprintf_r>
   1c686:	1c43      	adds	r3, r0, #1
   1c688:	da01      	bge.n	1c68e <sniprintf+0x52>
   1c68a:	238b      	movs	r3, #139	; 0x8b
   1c68c:	602b      	str	r3, [r5, #0]
   1c68e:	2c00      	cmp	r4, #0
   1c690:	d0df      	beq.n	1c652 <sniprintf+0x16>
   1c692:	2300      	movs	r3, #0
   1c694:	9a02      	ldr	r2, [sp, #8]
   1c696:	7013      	strb	r3, [r2, #0]
   1c698:	e7db      	b.n	1c652 <sniprintf+0x16>
   1c69a:	46c0      	nop			; (mov r8, r8)
   1c69c:	2000022c 	.word	0x2000022c

0001c6a0 <siscanf>:
   1c6a0:	b40e      	push	{r1, r2, r3}
   1c6a2:	2381      	movs	r3, #129	; 0x81
   1c6a4:	b570      	push	{r4, r5, r6, lr}
   1c6a6:	b09d      	sub	sp, #116	; 0x74
   1c6a8:	ac02      	add	r4, sp, #8
   1c6aa:	ad21      	add	r5, sp, #132	; 0x84
   1c6ac:	009b      	lsls	r3, r3, #2
   1c6ae:	cd40      	ldmia	r5!, {r6}
   1c6b0:	81a3      	strh	r3, [r4, #12]
   1c6b2:	9002      	str	r0, [sp, #8]
   1c6b4:	9006      	str	r0, [sp, #24]
   1c6b6:	f000 f88c 	bl	1c7d2 <strlen>
   1c6ba:	4b0b      	ldr	r3, [pc, #44]	; (1c6e8 <siscanf+0x48>)
   1c6bc:	6060      	str	r0, [r4, #4]
   1c6be:	6263      	str	r3, [r4, #36]	; 0x24
   1c6c0:	2300      	movs	r3, #0
   1c6c2:	6160      	str	r0, [r4, #20]
   1c6c4:	4809      	ldr	r0, [pc, #36]	; (1c6ec <siscanf+0x4c>)
   1c6c6:	6363      	str	r3, [r4, #52]	; 0x34
   1c6c8:	64a3      	str	r3, [r4, #72]	; 0x48
   1c6ca:	3b01      	subs	r3, #1
   1c6cc:	81e3      	strh	r3, [r4, #14]
   1c6ce:	0032      	movs	r2, r6
   1c6d0:	002b      	movs	r3, r5
   1c6d2:	0021      	movs	r1, r4
   1c6d4:	6800      	ldr	r0, [r0, #0]
   1c6d6:	9501      	str	r5, [sp, #4]
   1c6d8:	f002 f904 	bl	1e8e4 <__ssvfiscanf_r>
   1c6dc:	b01d      	add	sp, #116	; 0x74
   1c6de:	bc70      	pop	{r4, r5, r6}
   1c6e0:	bc08      	pop	{r3}
   1c6e2:	b003      	add	sp, #12
   1c6e4:	4718      	bx	r3
   1c6e6:	46c0      	nop			; (mov r8, r8)
   1c6e8:	0001c719 	.word	0x0001c719
   1c6ec:	2000022c 	.word	0x2000022c

0001c6f0 <__sread>:
   1c6f0:	b570      	push	{r4, r5, r6, lr}
   1c6f2:	000c      	movs	r4, r1
   1c6f4:	250e      	movs	r5, #14
   1c6f6:	5f49      	ldrsh	r1, [r1, r5]
   1c6f8:	f002 fee0 	bl	1f4bc <_read_r>
   1c6fc:	2800      	cmp	r0, #0
   1c6fe:	db03      	blt.n	1c708 <__sread+0x18>
   1c700:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1c702:	181b      	adds	r3, r3, r0
   1c704:	6563      	str	r3, [r4, #84]	; 0x54
   1c706:	bd70      	pop	{r4, r5, r6, pc}
   1c708:	89a3      	ldrh	r3, [r4, #12]
   1c70a:	4a02      	ldr	r2, [pc, #8]	; (1c714 <__sread+0x24>)
   1c70c:	4013      	ands	r3, r2
   1c70e:	81a3      	strh	r3, [r4, #12]
   1c710:	e7f9      	b.n	1c706 <__sread+0x16>
   1c712:	46c0      	nop			; (mov r8, r8)
   1c714:	ffffefff 	.word	0xffffefff

0001c718 <__seofread>:
   1c718:	2000      	movs	r0, #0
   1c71a:	4770      	bx	lr

0001c71c <__swrite>:
   1c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c71e:	001f      	movs	r7, r3
   1c720:	898b      	ldrh	r3, [r1, #12]
   1c722:	0005      	movs	r5, r0
   1c724:	000c      	movs	r4, r1
   1c726:	0016      	movs	r6, r2
   1c728:	05db      	lsls	r3, r3, #23
   1c72a:	d505      	bpl.n	1c738 <__swrite+0x1c>
   1c72c:	230e      	movs	r3, #14
   1c72e:	5ec9      	ldrsh	r1, [r1, r3]
   1c730:	2200      	movs	r2, #0
   1c732:	2302      	movs	r3, #2
   1c734:	f001 fafc 	bl	1dd30 <_lseek_r>
   1c738:	89a3      	ldrh	r3, [r4, #12]
   1c73a:	4a05      	ldr	r2, [pc, #20]	; (1c750 <__swrite+0x34>)
   1c73c:	0028      	movs	r0, r5
   1c73e:	4013      	ands	r3, r2
   1c740:	81a3      	strh	r3, [r4, #12]
   1c742:	0032      	movs	r2, r6
   1c744:	230e      	movs	r3, #14
   1c746:	5ee1      	ldrsh	r1, [r4, r3]
   1c748:	003b      	movs	r3, r7
   1c74a:	f000 ff03 	bl	1d554 <_write_r>
   1c74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c750:	ffffefff 	.word	0xffffefff

0001c754 <__sseek>:
   1c754:	b570      	push	{r4, r5, r6, lr}
   1c756:	000c      	movs	r4, r1
   1c758:	250e      	movs	r5, #14
   1c75a:	5f49      	ldrsh	r1, [r1, r5]
   1c75c:	f001 fae8 	bl	1dd30 <_lseek_r>
   1c760:	89a3      	ldrh	r3, [r4, #12]
   1c762:	1c42      	adds	r2, r0, #1
   1c764:	d103      	bne.n	1c76e <__sseek+0x1a>
   1c766:	4a05      	ldr	r2, [pc, #20]	; (1c77c <__sseek+0x28>)
   1c768:	4013      	ands	r3, r2
   1c76a:	81a3      	strh	r3, [r4, #12]
   1c76c:	bd70      	pop	{r4, r5, r6, pc}
   1c76e:	2280      	movs	r2, #128	; 0x80
   1c770:	0152      	lsls	r2, r2, #5
   1c772:	4313      	orrs	r3, r2
   1c774:	81a3      	strh	r3, [r4, #12]
   1c776:	6560      	str	r0, [r4, #84]	; 0x54
   1c778:	e7f8      	b.n	1c76c <__sseek+0x18>
   1c77a:	46c0      	nop			; (mov r8, r8)
   1c77c:	ffffefff 	.word	0xffffefff

0001c780 <__sclose>:
   1c780:	b510      	push	{r4, lr}
   1c782:	230e      	movs	r3, #14
   1c784:	5ec9      	ldrsh	r1, [r1, r3]
   1c786:	f000 ff6f 	bl	1d668 <_close_r>
   1c78a:	bd10      	pop	{r4, pc}

0001c78c <strcat>:
   1c78c:	0002      	movs	r2, r0
   1c78e:	b510      	push	{r4, lr}
   1c790:	7813      	ldrb	r3, [r2, #0]
   1c792:	2b00      	cmp	r3, #0
   1c794:	d105      	bne.n	1c7a2 <strcat+0x16>
   1c796:	5ccc      	ldrb	r4, [r1, r3]
   1c798:	54d4      	strb	r4, [r2, r3]
   1c79a:	3301      	adds	r3, #1
   1c79c:	2c00      	cmp	r4, #0
   1c79e:	d1fa      	bne.n	1c796 <strcat+0xa>
   1c7a0:	bd10      	pop	{r4, pc}
   1c7a2:	3201      	adds	r2, #1
   1c7a4:	e7f4      	b.n	1c790 <strcat+0x4>

0001c7a6 <strchr>:
   1c7a6:	b2c9      	uxtb	r1, r1
   1c7a8:	7803      	ldrb	r3, [r0, #0]
   1c7aa:	2b00      	cmp	r3, #0
   1c7ac:	d004      	beq.n	1c7b8 <strchr+0x12>
   1c7ae:	4299      	cmp	r1, r3
   1c7b0:	d100      	bne.n	1c7b4 <strchr+0xe>
   1c7b2:	4770      	bx	lr
   1c7b4:	3001      	adds	r0, #1
   1c7b6:	e7f7      	b.n	1c7a8 <strchr+0x2>
   1c7b8:	424b      	negs	r3, r1
   1c7ba:	4159      	adcs	r1, r3
   1c7bc:	4249      	negs	r1, r1
   1c7be:	4008      	ands	r0, r1
   1c7c0:	e7f7      	b.n	1c7b2 <strchr+0xc>

0001c7c2 <strcpy>:
   1c7c2:	1c03      	adds	r3, r0, #0
   1c7c4:	780a      	ldrb	r2, [r1, #0]
   1c7c6:	3101      	adds	r1, #1
   1c7c8:	701a      	strb	r2, [r3, #0]
   1c7ca:	3301      	adds	r3, #1
   1c7cc:	2a00      	cmp	r2, #0
   1c7ce:	d1f9      	bne.n	1c7c4 <strcpy+0x2>
   1c7d0:	4770      	bx	lr

0001c7d2 <strlen>:
   1c7d2:	2300      	movs	r3, #0
   1c7d4:	5cc2      	ldrb	r2, [r0, r3]
   1c7d6:	3301      	adds	r3, #1
   1c7d8:	2a00      	cmp	r2, #0
   1c7da:	d1fb      	bne.n	1c7d4 <strlen+0x2>
   1c7dc:	1e58      	subs	r0, r3, #1
   1c7de:	4770      	bx	lr

0001c7e0 <strncmp>:
   1c7e0:	2300      	movs	r3, #0
   1c7e2:	b530      	push	{r4, r5, lr}
   1c7e4:	429a      	cmp	r2, r3
   1c7e6:	d00a      	beq.n	1c7fe <strncmp+0x1e>
   1c7e8:	3a01      	subs	r2, #1
   1c7ea:	5cc4      	ldrb	r4, [r0, r3]
   1c7ec:	5ccd      	ldrb	r5, [r1, r3]
   1c7ee:	42ac      	cmp	r4, r5
   1c7f0:	d104      	bne.n	1c7fc <strncmp+0x1c>
   1c7f2:	429a      	cmp	r2, r3
   1c7f4:	d002      	beq.n	1c7fc <strncmp+0x1c>
   1c7f6:	3301      	adds	r3, #1
   1c7f8:	2c00      	cmp	r4, #0
   1c7fa:	d1f6      	bne.n	1c7ea <strncmp+0xa>
   1c7fc:	1b63      	subs	r3, r4, r5
   1c7fe:	0018      	movs	r0, r3
   1c800:	bd30      	pop	{r4, r5, pc}

0001c802 <strncpy>:
   1c802:	b570      	push	{r4, r5, r6, lr}
   1c804:	0004      	movs	r4, r0
   1c806:	2a00      	cmp	r2, #0
   1c808:	d100      	bne.n	1c80c <strncpy+0xa>
   1c80a:	bd70      	pop	{r4, r5, r6, pc}
   1c80c:	780d      	ldrb	r5, [r1, #0]
   1c80e:	1e56      	subs	r6, r2, #1
   1c810:	1c63      	adds	r3, r4, #1
   1c812:	7025      	strb	r5, [r4, #0]
   1c814:	3101      	adds	r1, #1
   1c816:	2d00      	cmp	r5, #0
   1c818:	d105      	bne.n	1c826 <strncpy+0x24>
   1c81a:	18a4      	adds	r4, r4, r2
   1c81c:	429c      	cmp	r4, r3
   1c81e:	d0f4      	beq.n	1c80a <strncpy+0x8>
   1c820:	701d      	strb	r5, [r3, #0]
   1c822:	3301      	adds	r3, #1
   1c824:	e7fa      	b.n	1c81c <strncpy+0x1a>
   1c826:	001c      	movs	r4, r3
   1c828:	0032      	movs	r2, r6
   1c82a:	e7ec      	b.n	1c806 <strncpy+0x4>

0001c82c <sulp>:
   1c82c:	b570      	push	{r4, r5, r6, lr}
   1c82e:	0016      	movs	r6, r2
   1c830:	000d      	movs	r5, r1
   1c832:	f001 fd61 	bl	1e2f8 <__ulp>
   1c836:	2e00      	cmp	r6, #0
   1c838:	d00d      	beq.n	1c856 <sulp+0x2a>
   1c83a:	236b      	movs	r3, #107	; 0x6b
   1c83c:	006a      	lsls	r2, r5, #1
   1c83e:	0d52      	lsrs	r2, r2, #21
   1c840:	1a9b      	subs	r3, r3, r2
   1c842:	2b00      	cmp	r3, #0
   1c844:	dd07      	ble.n	1c856 <sulp+0x2a>
   1c846:	2400      	movs	r4, #0
   1c848:	4a03      	ldr	r2, [pc, #12]	; (1c858 <sulp+0x2c>)
   1c84a:	051b      	lsls	r3, r3, #20
   1c84c:	189d      	adds	r5, r3, r2
   1c84e:	002b      	movs	r3, r5
   1c850:	0022      	movs	r2, r4
   1c852:	f7fe fc13 	bl	1b07c <__aeabi_dmul>
   1c856:	bd70      	pop	{r4, r5, r6, pc}
   1c858:	3ff00000 	.word	0x3ff00000

0001c85c <_strtod_l>:
   1c85c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c85e:	b0a5      	sub	sp, #148	; 0x94
   1c860:	9307      	str	r3, [sp, #28]
   1c862:	2300      	movs	r3, #0
   1c864:	9004      	str	r0, [sp, #16]
   1c866:	9807      	ldr	r0, [sp, #28]
   1c868:	9320      	str	r3, [sp, #128]	; 0x80
   1c86a:	9106      	str	r1, [sp, #24]
   1c86c:	921a      	str	r2, [sp, #104]	; 0x68
   1c86e:	f001 fa5d 	bl	1dd2c <__localeconv_l>
   1c872:	0005      	movs	r5, r0
   1c874:	6800      	ldr	r0, [r0, #0]
   1c876:	f7ff ffac 	bl	1c7d2 <strlen>
   1c87a:	2600      	movs	r6, #0
   1c87c:	2700      	movs	r7, #0
   1c87e:	9b06      	ldr	r3, [sp, #24]
   1c880:	9005      	str	r0, [sp, #20]
   1c882:	931f      	str	r3, [sp, #124]	; 0x7c
   1c884:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c886:	781a      	ldrb	r2, [r3, #0]
   1c888:	2a0d      	cmp	r2, #13
   1c88a:	d839      	bhi.n	1c900 <_strtod_l+0xa4>
   1c88c:	2a09      	cmp	r2, #9
   1c88e:	d23d      	bcs.n	1c90c <_strtod_l+0xb0>
   1c890:	2a00      	cmp	r2, #0
   1c892:	d044      	beq.n	1c91e <_strtod_l+0xc2>
   1c894:	2300      	movs	r3, #0
   1c896:	9312      	str	r3, [sp, #72]	; 0x48
   1c898:	2200      	movs	r2, #0
   1c89a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1c89c:	920c      	str	r2, [sp, #48]	; 0x30
   1c89e:	7823      	ldrb	r3, [r4, #0]
   1c8a0:	2b30      	cmp	r3, #48	; 0x30
   1c8a2:	d000      	beq.n	1c8a6 <_strtod_l+0x4a>
   1c8a4:	e07e      	b.n	1c9a4 <_strtod_l+0x148>
   1c8a6:	7863      	ldrb	r3, [r4, #1]
   1c8a8:	2b58      	cmp	r3, #88	; 0x58
   1c8aa:	d002      	beq.n	1c8b2 <_strtod_l+0x56>
   1c8ac:	2b78      	cmp	r3, #120	; 0x78
   1c8ae:	d000      	beq.n	1c8b2 <_strtod_l+0x56>
   1c8b0:	e06e      	b.n	1c990 <_strtod_l+0x134>
   1c8b2:	9b07      	ldr	r3, [sp, #28]
   1c8b4:	4ab7      	ldr	r2, [pc, #732]	; (1cb94 <_strtod_l+0x338>)
   1c8b6:	9302      	str	r3, [sp, #8]
   1c8b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c8ba:	a91f      	add	r1, sp, #124	; 0x7c
   1c8bc:	9301      	str	r3, [sp, #4]
   1c8be:	ab20      	add	r3, sp, #128	; 0x80
   1c8c0:	9300      	str	r3, [sp, #0]
   1c8c2:	9804      	ldr	r0, [sp, #16]
   1c8c4:	ab21      	add	r3, sp, #132	; 0x84
   1c8c6:	f000 ff3a 	bl	1d73e <__gethex>
   1c8ca:	2507      	movs	r5, #7
   1c8cc:	9005      	str	r0, [sp, #20]
   1c8ce:	4005      	ands	r5, r0
   1c8d0:	d005      	beq.n	1c8de <_strtod_l+0x82>
   1c8d2:	2d06      	cmp	r5, #6
   1c8d4:	d12f      	bne.n	1c936 <_strtod_l+0xda>
   1c8d6:	2300      	movs	r3, #0
   1c8d8:	3401      	adds	r4, #1
   1c8da:	941f      	str	r4, [sp, #124]	; 0x7c
   1c8dc:	9312      	str	r3, [sp, #72]	; 0x48
   1c8de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	d002      	beq.n	1c8ea <_strtod_l+0x8e>
   1c8e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c8e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1c8e8:	601a      	str	r2, [r3, #0]
   1c8ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c8ec:	2b00      	cmp	r3, #0
   1c8ee:	d01d      	beq.n	1c92c <_strtod_l+0xd0>
   1c8f0:	2380      	movs	r3, #128	; 0x80
   1c8f2:	0032      	movs	r2, r6
   1c8f4:	061b      	lsls	r3, r3, #24
   1c8f6:	18fb      	adds	r3, r7, r3
   1c8f8:	0010      	movs	r0, r2
   1c8fa:	0019      	movs	r1, r3
   1c8fc:	b025      	add	sp, #148	; 0x94
   1c8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c900:	2a2b      	cmp	r2, #43	; 0x2b
   1c902:	d005      	beq.n	1c910 <_strtod_l+0xb4>
   1c904:	2a2d      	cmp	r2, #45	; 0x2d
   1c906:	d014      	beq.n	1c932 <_strtod_l+0xd6>
   1c908:	2a20      	cmp	r2, #32
   1c90a:	d1c3      	bne.n	1c894 <_strtod_l+0x38>
   1c90c:	3301      	adds	r3, #1
   1c90e:	e7b8      	b.n	1c882 <_strtod_l+0x26>
   1c910:	2200      	movs	r2, #0
   1c912:	9212      	str	r2, [sp, #72]	; 0x48
   1c914:	1c5a      	adds	r2, r3, #1
   1c916:	921f      	str	r2, [sp, #124]	; 0x7c
   1c918:	785b      	ldrb	r3, [r3, #1]
   1c91a:	2b00      	cmp	r3, #0
   1c91c:	d1bc      	bne.n	1c898 <_strtod_l+0x3c>
   1c91e:	9b06      	ldr	r3, [sp, #24]
   1c920:	931f      	str	r3, [sp, #124]	; 0x7c
   1c922:	2300      	movs	r3, #0
   1c924:	9312      	str	r3, [sp, #72]	; 0x48
   1c926:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c928:	2b00      	cmp	r3, #0
   1c92a:	d1db      	bne.n	1c8e4 <_strtod_l+0x88>
   1c92c:	0032      	movs	r2, r6
   1c92e:	003b      	movs	r3, r7
   1c930:	e7e2      	b.n	1c8f8 <_strtod_l+0x9c>
   1c932:	2201      	movs	r2, #1
   1c934:	e7ed      	b.n	1c912 <_strtod_l+0xb6>
   1c936:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1c938:	2a00      	cmp	r2, #0
   1c93a:	d007      	beq.n	1c94c <_strtod_l+0xf0>
   1c93c:	2135      	movs	r1, #53	; 0x35
   1c93e:	a822      	add	r0, sp, #136	; 0x88
   1c940:	f001 fdc7 	bl	1e4d2 <__copybits>
   1c944:	9920      	ldr	r1, [sp, #128]	; 0x80
   1c946:	9804      	ldr	r0, [sp, #16]
   1c948:	f001 fa40 	bl	1ddcc <_Bfree>
   1c94c:	1e68      	subs	r0, r5, #1
   1c94e:	2804      	cmp	r0, #4
   1c950:	d806      	bhi.n	1c960 <_strtod_l+0x104>
   1c952:	f002 ff93 	bl	1f87c <__gnu_thumb1_case_uqi>
   1c956:	030c      	.short	0x030c
   1c958:	1917      	.short	0x1917
   1c95a:	0c          	.byte	0x0c
   1c95b:	00          	.byte	0x00
   1c95c:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1c95e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
   1c960:	9b05      	ldr	r3, [sp, #20]
   1c962:	071b      	lsls	r3, r3, #28
   1c964:	d5bb      	bpl.n	1c8de <_strtod_l+0x82>
   1c966:	2380      	movs	r3, #128	; 0x80
   1c968:	061b      	lsls	r3, r3, #24
   1c96a:	431f      	orrs	r7, r3
   1c96c:	e7b7      	b.n	1c8de <_strtod_l+0x82>
   1c96e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c970:	4a89      	ldr	r2, [pc, #548]	; (1cb98 <_strtod_l+0x33c>)
   1c972:	498a      	ldr	r1, [pc, #552]	; (1cb9c <_strtod_l+0x340>)
   1c974:	401a      	ands	r2, r3
   1c976:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1c978:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1c97a:	185b      	adds	r3, r3, r1
   1c97c:	051b      	lsls	r3, r3, #20
   1c97e:	431a      	orrs	r2, r3
   1c980:	0017      	movs	r7, r2
   1c982:	e7ed      	b.n	1c960 <_strtod_l+0x104>
   1c984:	4f86      	ldr	r7, [pc, #536]	; (1cba0 <_strtod_l+0x344>)
   1c986:	e7eb      	b.n	1c960 <_strtod_l+0x104>
   1c988:	2601      	movs	r6, #1
   1c98a:	4f86      	ldr	r7, [pc, #536]	; (1cba4 <_strtod_l+0x348>)
   1c98c:	4276      	negs	r6, r6
   1c98e:	e7e7      	b.n	1c960 <_strtod_l+0x104>
   1c990:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c992:	1c5a      	adds	r2, r3, #1
   1c994:	921f      	str	r2, [sp, #124]	; 0x7c
   1c996:	785b      	ldrb	r3, [r3, #1]
   1c998:	2b30      	cmp	r3, #48	; 0x30
   1c99a:	d0f9      	beq.n	1c990 <_strtod_l+0x134>
   1c99c:	2b00      	cmp	r3, #0
   1c99e:	d09e      	beq.n	1c8de <_strtod_l+0x82>
   1c9a0:	2301      	movs	r3, #1
   1c9a2:	930c      	str	r3, [sp, #48]	; 0x30
   1c9a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c9a6:	220a      	movs	r2, #10
   1c9a8:	9313      	str	r3, [sp, #76]	; 0x4c
   1c9aa:	2300      	movs	r3, #0
   1c9ac:	930b      	str	r3, [sp, #44]	; 0x2c
   1c9ae:	930a      	str	r3, [sp, #40]	; 0x28
   1c9b0:	9308      	str	r3, [sp, #32]
   1c9b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1c9b4:	7804      	ldrb	r4, [r0, #0]
   1c9b6:	0023      	movs	r3, r4
   1c9b8:	3b30      	subs	r3, #48	; 0x30
   1c9ba:	b2d9      	uxtb	r1, r3
   1c9bc:	2909      	cmp	r1, #9
   1c9be:	d926      	bls.n	1ca0e <_strtod_l+0x1b2>
   1c9c0:	9a05      	ldr	r2, [sp, #20]
   1c9c2:	6829      	ldr	r1, [r5, #0]
   1c9c4:	f7ff ff0c 	bl	1c7e0 <strncmp>
   1c9c8:	2800      	cmp	r0, #0
   1c9ca:	d032      	beq.n	1ca32 <_strtod_l+0x1d6>
   1c9cc:	2000      	movs	r0, #0
   1c9ce:	0023      	movs	r3, r4
   1c9d0:	4684      	mov	ip, r0
   1c9d2:	9a08      	ldr	r2, [sp, #32]
   1c9d4:	9007      	str	r0, [sp, #28]
   1c9d6:	9205      	str	r2, [sp, #20]
   1c9d8:	2220      	movs	r2, #32
   1c9da:	0019      	movs	r1, r3
   1c9dc:	4391      	bics	r1, r2
   1c9de:	000a      	movs	r2, r1
   1c9e0:	2100      	movs	r1, #0
   1c9e2:	2a45      	cmp	r2, #69	; 0x45
   1c9e4:	d000      	beq.n	1c9e8 <_strtod_l+0x18c>
   1c9e6:	e0a8      	b.n	1cb3a <_strtod_l+0x2de>
   1c9e8:	9b05      	ldr	r3, [sp, #20]
   1c9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c9ec:	4303      	orrs	r3, r0
   1c9ee:	4313      	orrs	r3, r2
   1c9f0:	428b      	cmp	r3, r1
   1c9f2:	d094      	beq.n	1c91e <_strtod_l+0xc2>
   1c9f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c9f6:	9306      	str	r3, [sp, #24]
   1c9f8:	3301      	adds	r3, #1
   1c9fa:	931f      	str	r3, [sp, #124]	; 0x7c
   1c9fc:	9b06      	ldr	r3, [sp, #24]
   1c9fe:	785b      	ldrb	r3, [r3, #1]
   1ca00:	2b2b      	cmp	r3, #43	; 0x2b
   1ca02:	d072      	beq.n	1caea <_strtod_l+0x28e>
   1ca04:	000c      	movs	r4, r1
   1ca06:	2b2d      	cmp	r3, #45	; 0x2d
   1ca08:	d175      	bne.n	1caf6 <_strtod_l+0x29a>
   1ca0a:	2401      	movs	r4, #1
   1ca0c:	e06e      	b.n	1caec <_strtod_l+0x290>
   1ca0e:	9908      	ldr	r1, [sp, #32]
   1ca10:	2908      	cmp	r1, #8
   1ca12:	dc09      	bgt.n	1ca28 <_strtod_l+0x1cc>
   1ca14:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ca16:	4351      	muls	r1, r2
   1ca18:	185b      	adds	r3, r3, r1
   1ca1a:	930a      	str	r3, [sp, #40]	; 0x28
   1ca1c:	9b08      	ldr	r3, [sp, #32]
   1ca1e:	3001      	adds	r0, #1
   1ca20:	3301      	adds	r3, #1
   1ca22:	9308      	str	r3, [sp, #32]
   1ca24:	901f      	str	r0, [sp, #124]	; 0x7c
   1ca26:	e7c4      	b.n	1c9b2 <_strtod_l+0x156>
   1ca28:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ca2a:	4351      	muls	r1, r2
   1ca2c:	185b      	adds	r3, r3, r1
   1ca2e:	930b      	str	r3, [sp, #44]	; 0x2c
   1ca30:	e7f4      	b.n	1ca1c <_strtod_l+0x1c0>
   1ca32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1ca34:	9b05      	ldr	r3, [sp, #20]
   1ca36:	4694      	mov	ip, r2
   1ca38:	9a08      	ldr	r2, [sp, #32]
   1ca3a:	4463      	add	r3, ip
   1ca3c:	931f      	str	r3, [sp, #124]	; 0x7c
   1ca3e:	781b      	ldrb	r3, [r3, #0]
   1ca40:	2a00      	cmp	r2, #0
   1ca42:	d149      	bne.n	1cad8 <_strtod_l+0x27c>
   1ca44:	0010      	movs	r0, r2
   1ca46:	2b30      	cmp	r3, #48	; 0x30
   1ca48:	d028      	beq.n	1ca9c <_strtod_l+0x240>
   1ca4a:	001a      	movs	r2, r3
   1ca4c:	3a31      	subs	r2, #49	; 0x31
   1ca4e:	2a08      	cmp	r2, #8
   1ca50:	d846      	bhi.n	1cae0 <_strtod_l+0x284>
   1ca52:	4684      	mov	ip, r0
   1ca54:	2000      	movs	r0, #0
   1ca56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1ca58:	9005      	str	r0, [sp, #20]
   1ca5a:	9213      	str	r2, [sp, #76]	; 0x4c
   1ca5c:	3b30      	subs	r3, #48	; 0x30
   1ca5e:	1c42      	adds	r2, r0, #1
   1ca60:	2b00      	cmp	r3, #0
   1ca62:	d00f      	beq.n	1ca84 <_strtod_l+0x228>
   1ca64:	210a      	movs	r1, #10
   1ca66:	4494      	add	ip, r2
   1ca68:	9a05      	ldr	r2, [sp, #20]
   1ca6a:	1810      	adds	r0, r2, r0
   1ca6c:	4282      	cmp	r2, r0
   1ca6e:	d11b      	bne.n	1caa8 <_strtod_l+0x24c>
   1ca70:	1c51      	adds	r1, r2, #1
   1ca72:	9105      	str	r1, [sp, #20]
   1ca74:	2a08      	cmp	r2, #8
   1ca76:	dc25      	bgt.n	1cac4 <_strtod_l+0x268>
   1ca78:	220a      	movs	r2, #10
   1ca7a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ca7c:	434a      	muls	r2, r1
   1ca7e:	189b      	adds	r3, r3, r2
   1ca80:	2200      	movs	r2, #0
   1ca82:	930a      	str	r3, [sp, #40]	; 0x28
   1ca84:	0010      	movs	r0, r2
   1ca86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ca88:	1c59      	adds	r1, r3, #1
   1ca8a:	911f      	str	r1, [sp, #124]	; 0x7c
   1ca8c:	785b      	ldrb	r3, [r3, #1]
   1ca8e:	001a      	movs	r2, r3
   1ca90:	3a30      	subs	r2, #48	; 0x30
   1ca92:	2a09      	cmp	r2, #9
   1ca94:	d9e2      	bls.n	1ca5c <_strtod_l+0x200>
   1ca96:	2201      	movs	r2, #1
   1ca98:	9207      	str	r2, [sp, #28]
   1ca9a:	e79d      	b.n	1c9d8 <_strtod_l+0x17c>
   1ca9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ca9e:	3001      	adds	r0, #1
   1caa0:	1c5a      	adds	r2, r3, #1
   1caa2:	921f      	str	r2, [sp, #124]	; 0x7c
   1caa4:	785b      	ldrb	r3, [r3, #1]
   1caa6:	e7ce      	b.n	1ca46 <_strtod_l+0x1ea>
   1caa8:	3201      	adds	r2, #1
   1caaa:	1e54      	subs	r4, r2, #1
   1caac:	2c08      	cmp	r4, #8
   1caae:	dc03      	bgt.n	1cab8 <_strtod_l+0x25c>
   1cab0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1cab2:	434c      	muls	r4, r1
   1cab4:	940a      	str	r4, [sp, #40]	; 0x28
   1cab6:	e7d9      	b.n	1ca6c <_strtod_l+0x210>
   1cab8:	2a10      	cmp	r2, #16
   1caba:	dcd7      	bgt.n	1ca6c <_strtod_l+0x210>
   1cabc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1cabe:	434c      	muls	r4, r1
   1cac0:	940b      	str	r4, [sp, #44]	; 0x2c
   1cac2:	e7d3      	b.n	1ca6c <_strtod_l+0x210>
   1cac4:	9905      	ldr	r1, [sp, #20]
   1cac6:	2200      	movs	r2, #0
   1cac8:	2910      	cmp	r1, #16
   1caca:	dcdb      	bgt.n	1ca84 <_strtod_l+0x228>
   1cacc:	210a      	movs	r1, #10
   1cace:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cad0:	4341      	muls	r1, r0
   1cad2:	185b      	adds	r3, r3, r1
   1cad4:	930b      	str	r3, [sp, #44]	; 0x2c
   1cad6:	e7d5      	b.n	1ca84 <_strtod_l+0x228>
   1cad8:	9a08      	ldr	r2, [sp, #32]
   1cada:	4684      	mov	ip, r0
   1cadc:	9205      	str	r2, [sp, #20]
   1cade:	e7d6      	b.n	1ca8e <_strtod_l+0x232>
   1cae0:	2200      	movs	r2, #0
   1cae2:	4694      	mov	ip, r2
   1cae4:	9205      	str	r2, [sp, #20]
   1cae6:	3201      	adds	r2, #1
   1cae8:	e7d6      	b.n	1ca98 <_strtod_l+0x23c>
   1caea:	000c      	movs	r4, r1
   1caec:	9b06      	ldr	r3, [sp, #24]
   1caee:	3302      	adds	r3, #2
   1caf0:	931f      	str	r3, [sp, #124]	; 0x7c
   1caf2:	9b06      	ldr	r3, [sp, #24]
   1caf4:	789b      	ldrb	r3, [r3, #2]
   1caf6:	001a      	movs	r2, r3
   1caf8:	3a30      	subs	r2, #48	; 0x30
   1cafa:	2a09      	cmp	r2, #9
   1cafc:	d861      	bhi.n	1cbc2 <_strtod_l+0x366>
   1cafe:	2b30      	cmp	r3, #48	; 0x30
   1cb00:	d042      	beq.n	1cb88 <_strtod_l+0x32c>
   1cb02:	001a      	movs	r2, r3
   1cb04:	3a31      	subs	r2, #49	; 0x31
   1cb06:	2100      	movs	r1, #0
   1cb08:	2a08      	cmp	r2, #8
   1cb0a:	d816      	bhi.n	1cb3a <_strtod_l+0x2de>
   1cb0c:	3b30      	subs	r3, #48	; 0x30
   1cb0e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1cb10:	930e      	str	r3, [sp, #56]	; 0x38
   1cb12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cb14:	1c59      	adds	r1, r3, #1
   1cb16:	911f      	str	r1, [sp, #124]	; 0x7c
   1cb18:	785b      	ldrb	r3, [r3, #1]
   1cb1a:	001a      	movs	r2, r3
   1cb1c:	3a30      	subs	r2, #48	; 0x30
   1cb1e:	2a09      	cmp	r2, #9
   1cb20:	d948      	bls.n	1cbb4 <_strtod_l+0x358>
   1cb22:	1b4a      	subs	r2, r1, r5
   1cb24:	4d20      	ldr	r5, [pc, #128]	; (1cba8 <_strtod_l+0x34c>)
   1cb26:	0029      	movs	r1, r5
   1cb28:	2a08      	cmp	r2, #8
   1cb2a:	dc03      	bgt.n	1cb34 <_strtod_l+0x2d8>
   1cb2c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1cb2e:	42a9      	cmp	r1, r5
   1cb30:	dd00      	ble.n	1cb34 <_strtod_l+0x2d8>
   1cb32:	0029      	movs	r1, r5
   1cb34:	2c00      	cmp	r4, #0
   1cb36:	d000      	beq.n	1cb3a <_strtod_l+0x2de>
   1cb38:	4249      	negs	r1, r1
   1cb3a:	9a05      	ldr	r2, [sp, #20]
   1cb3c:	2a00      	cmp	r2, #0
   1cb3e:	d163      	bne.n	1cc08 <_strtod_l+0x3ac>
   1cb40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cb42:	4310      	orrs	r0, r2
   1cb44:	d000      	beq.n	1cb48 <_strtod_l+0x2ec>
   1cb46:	e6ca      	b.n	1c8de <_strtod_l+0x82>
   1cb48:	9a07      	ldr	r2, [sp, #28]
   1cb4a:	2a00      	cmp	r2, #0
   1cb4c:	d000      	beq.n	1cb50 <_strtod_l+0x2f4>
   1cb4e:	e6e6      	b.n	1c91e <_strtod_l+0xc2>
   1cb50:	2b4e      	cmp	r3, #78	; 0x4e
   1cb52:	d03f      	beq.n	1cbd4 <_strtod_l+0x378>
   1cb54:	dc39      	bgt.n	1cbca <_strtod_l+0x36e>
   1cb56:	2b49      	cmp	r3, #73	; 0x49
   1cb58:	d000      	beq.n	1cb5c <_strtod_l+0x300>
   1cb5a:	e6e0      	b.n	1c91e <_strtod_l+0xc2>
   1cb5c:	4913      	ldr	r1, [pc, #76]	; (1cbac <_strtod_l+0x350>)
   1cb5e:	a81f      	add	r0, sp, #124	; 0x7c
   1cb60:	f001 f826 	bl	1dbb0 <__match>
   1cb64:	2800      	cmp	r0, #0
   1cb66:	d100      	bne.n	1cb6a <_strtod_l+0x30e>
   1cb68:	e6d9      	b.n	1c91e <_strtod_l+0xc2>
   1cb6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cb6c:	4910      	ldr	r1, [pc, #64]	; (1cbb0 <_strtod_l+0x354>)
   1cb6e:	3b01      	subs	r3, #1
   1cb70:	a81f      	add	r0, sp, #124	; 0x7c
   1cb72:	931f      	str	r3, [sp, #124]	; 0x7c
   1cb74:	f001 f81c 	bl	1dbb0 <__match>
   1cb78:	2800      	cmp	r0, #0
   1cb7a:	d102      	bne.n	1cb82 <_strtod_l+0x326>
   1cb7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cb7e:	3301      	adds	r3, #1
   1cb80:	931f      	str	r3, [sp, #124]	; 0x7c
   1cb82:	4f07      	ldr	r7, [pc, #28]	; (1cba0 <_strtod_l+0x344>)
   1cb84:	2600      	movs	r6, #0
   1cb86:	e6aa      	b.n	1c8de <_strtod_l+0x82>
   1cb88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cb8a:	1c5a      	adds	r2, r3, #1
   1cb8c:	921f      	str	r2, [sp, #124]	; 0x7c
   1cb8e:	785b      	ldrb	r3, [r3, #1]
   1cb90:	e7b5      	b.n	1cafe <_strtod_l+0x2a2>
   1cb92:	46c0      	nop			; (mov r8, r8)
   1cb94:	00021b4c 	.word	0x00021b4c
   1cb98:	ffefffff 	.word	0xffefffff
   1cb9c:	00000433 	.word	0x00000433
   1cba0:	7ff00000 	.word	0x7ff00000
   1cba4:	7fffffff 	.word	0x7fffffff
   1cba8:	00004e1f 	.word	0x00004e1f
   1cbac:	00021b3e 	.word	0x00021b3e
   1cbb0:	00021b41 	.word	0x00021b41
   1cbb4:	220a      	movs	r2, #10
   1cbb6:	990e      	ldr	r1, [sp, #56]	; 0x38
   1cbb8:	434a      	muls	r2, r1
   1cbba:	18d2      	adds	r2, r2, r3
   1cbbc:	3a30      	subs	r2, #48	; 0x30
   1cbbe:	920e      	str	r2, [sp, #56]	; 0x38
   1cbc0:	e7a7      	b.n	1cb12 <_strtod_l+0x2b6>
   1cbc2:	9a06      	ldr	r2, [sp, #24]
   1cbc4:	2100      	movs	r1, #0
   1cbc6:	921f      	str	r2, [sp, #124]	; 0x7c
   1cbc8:	e7b7      	b.n	1cb3a <_strtod_l+0x2de>
   1cbca:	2b69      	cmp	r3, #105	; 0x69
   1cbcc:	d0c6      	beq.n	1cb5c <_strtod_l+0x300>
   1cbce:	2b6e      	cmp	r3, #110	; 0x6e
   1cbd0:	d000      	beq.n	1cbd4 <_strtod_l+0x378>
   1cbd2:	e6a4      	b.n	1c91e <_strtod_l+0xc2>
   1cbd4:	498b      	ldr	r1, [pc, #556]	; (1ce04 <_strtod_l+0x5a8>)
   1cbd6:	a81f      	add	r0, sp, #124	; 0x7c
   1cbd8:	f000 ffea 	bl	1dbb0 <__match>
   1cbdc:	2800      	cmp	r0, #0
   1cbde:	d100      	bne.n	1cbe2 <_strtod_l+0x386>
   1cbe0:	e69d      	b.n	1c91e <_strtod_l+0xc2>
   1cbe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cbe4:	781b      	ldrb	r3, [r3, #0]
   1cbe6:	2b28      	cmp	r3, #40	; 0x28
   1cbe8:	d10c      	bne.n	1cc04 <_strtod_l+0x3a8>
   1cbea:	aa22      	add	r2, sp, #136	; 0x88
   1cbec:	4986      	ldr	r1, [pc, #536]	; (1ce08 <_strtod_l+0x5ac>)
   1cbee:	a81f      	add	r0, sp, #124	; 0x7c
   1cbf0:	f000 fff2 	bl	1dbd8 <__hexnan>
   1cbf4:	2805      	cmp	r0, #5
   1cbf6:	d105      	bne.n	1cc04 <_strtod_l+0x3a8>
   1cbf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cbfa:	4a84      	ldr	r2, [pc, #528]	; (1ce0c <_strtod_l+0x5b0>)
   1cbfc:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1cbfe:	431a      	orrs	r2, r3
   1cc00:	0017      	movs	r7, r2
   1cc02:	e66c      	b.n	1c8de <_strtod_l+0x82>
   1cc04:	4f82      	ldr	r7, [pc, #520]	; (1ce10 <_strtod_l+0x5b4>)
   1cc06:	e7bd      	b.n	1cb84 <_strtod_l+0x328>
   1cc08:	4663      	mov	r3, ip
   1cc0a:	1acb      	subs	r3, r1, r3
   1cc0c:	9307      	str	r3, [sp, #28]
   1cc0e:	9b08      	ldr	r3, [sp, #32]
   1cc10:	2b00      	cmp	r3, #0
   1cc12:	d101      	bne.n	1cc18 <_strtod_l+0x3bc>
   1cc14:	9b05      	ldr	r3, [sp, #20]
   1cc16:	9308      	str	r3, [sp, #32]
   1cc18:	9c05      	ldr	r4, [sp, #20]
   1cc1a:	2c10      	cmp	r4, #16
   1cc1c:	dd00      	ble.n	1cc20 <_strtod_l+0x3c4>
   1cc1e:	2410      	movs	r4, #16
   1cc20:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cc22:	f7ff f837 	bl	1bc94 <__aeabi_ui2d>
   1cc26:	0006      	movs	r6, r0
   1cc28:	000f      	movs	r7, r1
   1cc2a:	2c09      	cmp	r4, #9
   1cc2c:	dd15      	ble.n	1cc5a <_strtod_l+0x3fe>
   1cc2e:	0022      	movs	r2, r4
   1cc30:	4b78      	ldr	r3, [pc, #480]	; (1ce14 <_strtod_l+0x5b8>)
   1cc32:	3a09      	subs	r2, #9
   1cc34:	00d2      	lsls	r2, r2, #3
   1cc36:	189b      	adds	r3, r3, r2
   1cc38:	681a      	ldr	r2, [r3, #0]
   1cc3a:	685b      	ldr	r3, [r3, #4]
   1cc3c:	f7fe fa1e 	bl	1b07c <__aeabi_dmul>
   1cc40:	0006      	movs	r6, r0
   1cc42:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cc44:	000f      	movs	r7, r1
   1cc46:	f7ff f825 	bl	1bc94 <__aeabi_ui2d>
   1cc4a:	0002      	movs	r2, r0
   1cc4c:	000b      	movs	r3, r1
   1cc4e:	0030      	movs	r0, r6
   1cc50:	0039      	movs	r1, r7
   1cc52:	f7fd facf 	bl	1a1f4 <__aeabi_dadd>
   1cc56:	0006      	movs	r6, r0
   1cc58:	000f      	movs	r7, r1
   1cc5a:	9b05      	ldr	r3, [sp, #20]
   1cc5c:	2b0f      	cmp	r3, #15
   1cc5e:	dc39      	bgt.n	1ccd4 <_strtod_l+0x478>
   1cc60:	9b07      	ldr	r3, [sp, #28]
   1cc62:	2b00      	cmp	r3, #0
   1cc64:	d100      	bne.n	1cc68 <_strtod_l+0x40c>
   1cc66:	e63a      	b.n	1c8de <_strtod_l+0x82>
   1cc68:	dd26      	ble.n	1ccb8 <_strtod_l+0x45c>
   1cc6a:	2b16      	cmp	r3, #22
   1cc6c:	dc0b      	bgt.n	1cc86 <_strtod_l+0x42a>
   1cc6e:	4969      	ldr	r1, [pc, #420]	; (1ce14 <_strtod_l+0x5b8>)
   1cc70:	00db      	lsls	r3, r3, #3
   1cc72:	18c9      	adds	r1, r1, r3
   1cc74:	0032      	movs	r2, r6
   1cc76:	6808      	ldr	r0, [r1, #0]
   1cc78:	6849      	ldr	r1, [r1, #4]
   1cc7a:	003b      	movs	r3, r7
   1cc7c:	f7fe f9fe 	bl	1b07c <__aeabi_dmul>
   1cc80:	0006      	movs	r6, r0
   1cc82:	000f      	movs	r7, r1
   1cc84:	e62b      	b.n	1c8de <_strtod_l+0x82>
   1cc86:	2325      	movs	r3, #37	; 0x25
   1cc88:	9a05      	ldr	r2, [sp, #20]
   1cc8a:	1a9b      	subs	r3, r3, r2
   1cc8c:	9a07      	ldr	r2, [sp, #28]
   1cc8e:	429a      	cmp	r2, r3
   1cc90:	dc20      	bgt.n	1ccd4 <_strtod_l+0x478>
   1cc92:	240f      	movs	r4, #15
   1cc94:	9b05      	ldr	r3, [sp, #20]
   1cc96:	4d5f      	ldr	r5, [pc, #380]	; (1ce14 <_strtod_l+0x5b8>)
   1cc98:	1ae4      	subs	r4, r4, r3
   1cc9a:	00e1      	lsls	r1, r4, #3
   1cc9c:	1869      	adds	r1, r5, r1
   1cc9e:	0032      	movs	r2, r6
   1cca0:	6808      	ldr	r0, [r1, #0]
   1cca2:	6849      	ldr	r1, [r1, #4]
   1cca4:	003b      	movs	r3, r7
   1cca6:	f7fe f9e9 	bl	1b07c <__aeabi_dmul>
   1ccaa:	9b07      	ldr	r3, [sp, #28]
   1ccac:	1b1c      	subs	r4, r3, r4
   1ccae:	00e4      	lsls	r4, r4, #3
   1ccb0:	192c      	adds	r4, r5, r4
   1ccb2:	6822      	ldr	r2, [r4, #0]
   1ccb4:	6863      	ldr	r3, [r4, #4]
   1ccb6:	e7e1      	b.n	1cc7c <_strtod_l+0x420>
   1ccb8:	9b07      	ldr	r3, [sp, #28]
   1ccba:	3316      	adds	r3, #22
   1ccbc:	db0a      	blt.n	1ccd4 <_strtod_l+0x478>
   1ccbe:	9b07      	ldr	r3, [sp, #28]
   1ccc0:	0030      	movs	r0, r6
   1ccc2:	00da      	lsls	r2, r3, #3
   1ccc4:	4b53      	ldr	r3, [pc, #332]	; (1ce14 <_strtod_l+0x5b8>)
   1ccc6:	0039      	movs	r1, r7
   1ccc8:	1a9b      	subs	r3, r3, r2
   1ccca:	681a      	ldr	r2, [r3, #0]
   1cccc:	685b      	ldr	r3, [r3, #4]
   1ccce:	f7fd fda1 	bl	1a814 <__aeabi_ddiv>
   1ccd2:	e7d5      	b.n	1cc80 <_strtod_l+0x424>
   1ccd4:	9b05      	ldr	r3, [sp, #20]
   1ccd6:	1b1c      	subs	r4, r3, r4
   1ccd8:	9b07      	ldr	r3, [sp, #28]
   1ccda:	18e4      	adds	r4, r4, r3
   1ccdc:	2c00      	cmp	r4, #0
   1ccde:	dd6e      	ble.n	1cdbe <_strtod_l+0x562>
   1cce0:	230f      	movs	r3, #15
   1cce2:	4023      	ands	r3, r4
   1cce4:	d00a      	beq.n	1ccfc <_strtod_l+0x4a0>
   1cce6:	494b      	ldr	r1, [pc, #300]	; (1ce14 <_strtod_l+0x5b8>)
   1cce8:	00db      	lsls	r3, r3, #3
   1ccea:	18c9      	adds	r1, r1, r3
   1ccec:	0032      	movs	r2, r6
   1ccee:	6808      	ldr	r0, [r1, #0]
   1ccf0:	6849      	ldr	r1, [r1, #4]
   1ccf2:	003b      	movs	r3, r7
   1ccf4:	f7fe f9c2 	bl	1b07c <__aeabi_dmul>
   1ccf8:	0006      	movs	r6, r0
   1ccfa:	000f      	movs	r7, r1
   1ccfc:	230f      	movs	r3, #15
   1ccfe:	439c      	bics	r4, r3
   1cd00:	d048      	beq.n	1cd94 <_strtod_l+0x538>
   1cd02:	3326      	adds	r3, #38	; 0x26
   1cd04:	33ff      	adds	r3, #255	; 0xff
   1cd06:	429c      	cmp	r4, r3
   1cd08:	dd21      	ble.n	1cd4e <_strtod_l+0x4f2>
   1cd0a:	2400      	movs	r4, #0
   1cd0c:	9405      	str	r4, [sp, #20]
   1cd0e:	940a      	str	r4, [sp, #40]	; 0x28
   1cd10:	9407      	str	r4, [sp, #28]
   1cd12:	2322      	movs	r3, #34	; 0x22
   1cd14:	2600      	movs	r6, #0
   1cd16:	9a04      	ldr	r2, [sp, #16]
   1cd18:	4f3c      	ldr	r7, [pc, #240]	; (1ce0c <_strtod_l+0x5b0>)
   1cd1a:	6013      	str	r3, [r2, #0]
   1cd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cd1e:	42b3      	cmp	r3, r6
   1cd20:	d100      	bne.n	1cd24 <_strtod_l+0x4c8>
   1cd22:	e5dc      	b.n	1c8de <_strtod_l+0x82>
   1cd24:	9920      	ldr	r1, [sp, #128]	; 0x80
   1cd26:	9804      	ldr	r0, [sp, #16]
   1cd28:	f001 f850 	bl	1ddcc <_Bfree>
   1cd2c:	9907      	ldr	r1, [sp, #28]
   1cd2e:	9804      	ldr	r0, [sp, #16]
   1cd30:	f001 f84c 	bl	1ddcc <_Bfree>
   1cd34:	9905      	ldr	r1, [sp, #20]
   1cd36:	9804      	ldr	r0, [sp, #16]
   1cd38:	f001 f848 	bl	1ddcc <_Bfree>
   1cd3c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cd3e:	9804      	ldr	r0, [sp, #16]
   1cd40:	f001 f844 	bl	1ddcc <_Bfree>
   1cd44:	0021      	movs	r1, r4
   1cd46:	9804      	ldr	r0, [sp, #16]
   1cd48:	f001 f840 	bl	1ddcc <_Bfree>
   1cd4c:	e5c7      	b.n	1c8de <_strtod_l+0x82>
   1cd4e:	2300      	movs	r3, #0
   1cd50:	0030      	movs	r0, r6
   1cd52:	0039      	movs	r1, r7
   1cd54:	001d      	movs	r5, r3
   1cd56:	1124      	asrs	r4, r4, #4
   1cd58:	2c01      	cmp	r4, #1
   1cd5a:	dc1e      	bgt.n	1cd9a <_strtod_l+0x53e>
   1cd5c:	2b00      	cmp	r3, #0
   1cd5e:	d001      	beq.n	1cd64 <_strtod_l+0x508>
   1cd60:	0006      	movs	r6, r0
   1cd62:	000f      	movs	r7, r1
   1cd64:	4b2c      	ldr	r3, [pc, #176]	; (1ce18 <_strtod_l+0x5bc>)
   1cd66:	00ed      	lsls	r5, r5, #3
   1cd68:	18ff      	adds	r7, r7, r3
   1cd6a:	4b2c      	ldr	r3, [pc, #176]	; (1ce1c <_strtod_l+0x5c0>)
   1cd6c:	0032      	movs	r2, r6
   1cd6e:	195d      	adds	r5, r3, r5
   1cd70:	6828      	ldr	r0, [r5, #0]
   1cd72:	6869      	ldr	r1, [r5, #4]
   1cd74:	003b      	movs	r3, r7
   1cd76:	f7fe f981 	bl	1b07c <__aeabi_dmul>
   1cd7a:	4b24      	ldr	r3, [pc, #144]	; (1ce0c <_strtod_l+0x5b0>)
   1cd7c:	000f      	movs	r7, r1
   1cd7e:	400b      	ands	r3, r1
   1cd80:	4927      	ldr	r1, [pc, #156]	; (1ce20 <_strtod_l+0x5c4>)
   1cd82:	0006      	movs	r6, r0
   1cd84:	428b      	cmp	r3, r1
   1cd86:	d8c0      	bhi.n	1cd0a <_strtod_l+0x4ae>
   1cd88:	4926      	ldr	r1, [pc, #152]	; (1ce24 <_strtod_l+0x5c8>)
   1cd8a:	428b      	cmp	r3, r1
   1cd8c:	d913      	bls.n	1cdb6 <_strtod_l+0x55a>
   1cd8e:	2601      	movs	r6, #1
   1cd90:	4f25      	ldr	r7, [pc, #148]	; (1ce28 <_strtod_l+0x5cc>)
   1cd92:	4276      	negs	r6, r6
   1cd94:	2300      	movs	r3, #0
   1cd96:	9306      	str	r3, [sp, #24]
   1cd98:	e074      	b.n	1ce84 <_strtod_l+0x628>
   1cd9a:	2201      	movs	r2, #1
   1cd9c:	4214      	tst	r4, r2
   1cd9e:	d007      	beq.n	1cdb0 <_strtod_l+0x554>
   1cda0:	4a1e      	ldr	r2, [pc, #120]	; (1ce1c <_strtod_l+0x5c0>)
   1cda2:	00eb      	lsls	r3, r5, #3
   1cda4:	189b      	adds	r3, r3, r2
   1cda6:	681a      	ldr	r2, [r3, #0]
   1cda8:	685b      	ldr	r3, [r3, #4]
   1cdaa:	f7fe f967 	bl	1b07c <__aeabi_dmul>
   1cdae:	2301      	movs	r3, #1
   1cdb0:	3501      	adds	r5, #1
   1cdb2:	1064      	asrs	r4, r4, #1
   1cdb4:	e7d0      	b.n	1cd58 <_strtod_l+0x4fc>
   1cdb6:	23d4      	movs	r3, #212	; 0xd4
   1cdb8:	049b      	lsls	r3, r3, #18
   1cdba:	18ff      	adds	r7, r7, r3
   1cdbc:	e7ea      	b.n	1cd94 <_strtod_l+0x538>
   1cdbe:	2c00      	cmp	r4, #0
   1cdc0:	d0e8      	beq.n	1cd94 <_strtod_l+0x538>
   1cdc2:	230f      	movs	r3, #15
   1cdc4:	4264      	negs	r4, r4
   1cdc6:	4023      	ands	r3, r4
   1cdc8:	d00a      	beq.n	1cde0 <_strtod_l+0x584>
   1cdca:	4a12      	ldr	r2, [pc, #72]	; (1ce14 <_strtod_l+0x5b8>)
   1cdcc:	00db      	lsls	r3, r3, #3
   1cdce:	18d3      	adds	r3, r2, r3
   1cdd0:	0030      	movs	r0, r6
   1cdd2:	681a      	ldr	r2, [r3, #0]
   1cdd4:	685b      	ldr	r3, [r3, #4]
   1cdd6:	0039      	movs	r1, r7
   1cdd8:	f7fd fd1c 	bl	1a814 <__aeabi_ddiv>
   1cddc:	0006      	movs	r6, r0
   1cdde:	000f      	movs	r7, r1
   1cde0:	1124      	asrs	r4, r4, #4
   1cde2:	d0d7      	beq.n	1cd94 <_strtod_l+0x538>
   1cde4:	2c1f      	cmp	r4, #31
   1cde6:	dd21      	ble.n	1ce2c <_strtod_l+0x5d0>
   1cde8:	2400      	movs	r4, #0
   1cdea:	9405      	str	r4, [sp, #20]
   1cdec:	940a      	str	r4, [sp, #40]	; 0x28
   1cdee:	9407      	str	r4, [sp, #28]
   1cdf0:	2322      	movs	r3, #34	; 0x22
   1cdf2:	9a04      	ldr	r2, [sp, #16]
   1cdf4:	2600      	movs	r6, #0
   1cdf6:	6013      	str	r3, [r2, #0]
   1cdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cdfa:	2700      	movs	r7, #0
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d191      	bne.n	1cd24 <_strtod_l+0x4c8>
   1ce00:	e56d      	b.n	1c8de <_strtod_l+0x82>
   1ce02:	46c0      	nop			; (mov r8, r8)
   1ce04:	00021b47 	.word	0x00021b47
   1ce08:	00021b60 	.word	0x00021b60
   1ce0c:	7ff00000 	.word	0x7ff00000
   1ce10:	fff80000 	.word	0xfff80000
   1ce14:	00021cd0 	.word	0x00021cd0
   1ce18:	fcb00000 	.word	0xfcb00000
   1ce1c:	00021ca8 	.word	0x00021ca8
   1ce20:	7ca00000 	.word	0x7ca00000
   1ce24:	7c900000 	.word	0x7c900000
   1ce28:	7fefffff 	.word	0x7fefffff
   1ce2c:	2310      	movs	r3, #16
   1ce2e:	4023      	ands	r3, r4
   1ce30:	9306      	str	r3, [sp, #24]
   1ce32:	d001      	beq.n	1ce38 <_strtod_l+0x5dc>
   1ce34:	236a      	movs	r3, #106	; 0x6a
   1ce36:	9306      	str	r3, [sp, #24]
   1ce38:	0030      	movs	r0, r6
   1ce3a:	0039      	movs	r1, r7
   1ce3c:	2300      	movs	r3, #0
   1ce3e:	4dca      	ldr	r5, [pc, #808]	; (1d168 <_strtod_l+0x90c>)
   1ce40:	2c00      	cmp	r4, #0
   1ce42:	dd00      	ble.n	1ce46 <_strtod_l+0x5ea>
   1ce44:	e103      	b.n	1d04e <_strtod_l+0x7f2>
   1ce46:	2b00      	cmp	r3, #0
   1ce48:	d001      	beq.n	1ce4e <_strtod_l+0x5f2>
   1ce4a:	0006      	movs	r6, r0
   1ce4c:	000f      	movs	r7, r1
   1ce4e:	9b06      	ldr	r3, [sp, #24]
   1ce50:	2b00      	cmp	r3, #0
   1ce52:	d00f      	beq.n	1ce74 <_strtod_l+0x618>
   1ce54:	236b      	movs	r3, #107	; 0x6b
   1ce56:	0079      	lsls	r1, r7, #1
   1ce58:	0d49      	lsrs	r1, r1, #21
   1ce5a:	003a      	movs	r2, r7
   1ce5c:	1a5b      	subs	r3, r3, r1
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	dd08      	ble.n	1ce74 <_strtod_l+0x618>
   1ce62:	2b1f      	cmp	r3, #31
   1ce64:	dc00      	bgt.n	1ce68 <_strtod_l+0x60c>
   1ce66:	e104      	b.n	1d072 <_strtod_l+0x816>
   1ce68:	2600      	movs	r6, #0
   1ce6a:	2b34      	cmp	r3, #52	; 0x34
   1ce6c:	dc00      	bgt.n	1ce70 <_strtod_l+0x614>
   1ce6e:	e0f9      	b.n	1d064 <_strtod_l+0x808>
   1ce70:	27dc      	movs	r7, #220	; 0xdc
   1ce72:	04bf      	lsls	r7, r7, #18
   1ce74:	2200      	movs	r2, #0
   1ce76:	2300      	movs	r3, #0
   1ce78:	0030      	movs	r0, r6
   1ce7a:	0039      	movs	r1, r7
   1ce7c:	f7fd f906 	bl	1a08c <__aeabi_dcmpeq>
   1ce80:	2800      	cmp	r0, #0
   1ce82:	d1b1      	bne.n	1cde8 <_strtod_l+0x58c>
   1ce84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce86:	9a08      	ldr	r2, [sp, #32]
   1ce88:	9300      	str	r3, [sp, #0]
   1ce8a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1ce8c:	9b05      	ldr	r3, [sp, #20]
   1ce8e:	9804      	ldr	r0, [sp, #16]
   1ce90:	f000 fff1 	bl	1de76 <__s2b>
   1ce94:	900a      	str	r0, [sp, #40]	; 0x28
   1ce96:	2800      	cmp	r0, #0
   1ce98:	d100      	bne.n	1ce9c <_strtod_l+0x640>
   1ce9a:	e736      	b.n	1cd0a <_strtod_l+0x4ae>
   1ce9c:	9b07      	ldr	r3, [sp, #28]
   1ce9e:	2400      	movs	r4, #0
   1cea0:	17da      	asrs	r2, r3, #31
   1cea2:	425b      	negs	r3, r3
   1cea4:	401a      	ands	r2, r3
   1cea6:	9b07      	ldr	r3, [sp, #28]
   1cea8:	9215      	str	r2, [sp, #84]	; 0x54
   1ceaa:	43db      	mvns	r3, r3
   1ceac:	9a07      	ldr	r2, [sp, #28]
   1ceae:	17db      	asrs	r3, r3, #31
   1ceb0:	401a      	ands	r2, r3
   1ceb2:	9213      	str	r2, [sp, #76]	; 0x4c
   1ceb4:	9405      	str	r4, [sp, #20]
   1ceb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ceb8:	9804      	ldr	r0, [sp, #16]
   1ceba:	6859      	ldr	r1, [r3, #4]
   1cebc:	f000 ff4e 	bl	1dd5c <_Balloc>
   1cec0:	9007      	str	r0, [sp, #28]
   1cec2:	2800      	cmp	r0, #0
   1cec4:	d100      	bne.n	1cec8 <_strtod_l+0x66c>
   1cec6:	e724      	b.n	1cd12 <_strtod_l+0x4b6>
   1cec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ceca:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cecc:	691b      	ldr	r3, [r3, #16]
   1cece:	310c      	adds	r1, #12
   1ced0:	1c9a      	adds	r2, r3, #2
   1ced2:	0092      	lsls	r2, r2, #2
   1ced4:	300c      	adds	r0, #12
   1ced6:	9308      	str	r3, [sp, #32]
   1ced8:	f7ff f984 	bl	1c1e4 <memcpy>
   1cedc:	ab22      	add	r3, sp, #136	; 0x88
   1cede:	9301      	str	r3, [sp, #4]
   1cee0:	ab21      	add	r3, sp, #132	; 0x84
   1cee2:	9300      	str	r3, [sp, #0]
   1cee4:	0032      	movs	r2, r6
   1cee6:	003b      	movs	r3, r7
   1cee8:	9804      	ldr	r0, [sp, #16]
   1ceea:	960e      	str	r6, [sp, #56]	; 0x38
   1ceec:	970f      	str	r7, [sp, #60]	; 0x3c
   1ceee:	f001 fa75 	bl	1e3dc <__d2b>
   1cef2:	9020      	str	r0, [sp, #128]	; 0x80
   1cef4:	2800      	cmp	r0, #0
   1cef6:	d100      	bne.n	1cefa <_strtod_l+0x69e>
   1cef8:	e70b      	b.n	1cd12 <_strtod_l+0x4b6>
   1cefa:	2101      	movs	r1, #1
   1cefc:	9804      	ldr	r0, [sp, #16]
   1cefe:	f001 f842 	bl	1df86 <__i2b>
   1cf02:	9005      	str	r0, [sp, #20]
   1cf04:	2800      	cmp	r0, #0
   1cf06:	d100      	bne.n	1cf0a <_strtod_l+0x6ae>
   1cf08:	e703      	b.n	1cd12 <_strtod_l+0x4b6>
   1cf0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1cf0c:	2b00      	cmp	r3, #0
   1cf0e:	da00      	bge.n	1cf12 <_strtod_l+0x6b6>
   1cf10:	e0b4      	b.n	1d07c <_strtod_l+0x820>
   1cf12:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1cf14:	18d5      	adds	r5, r2, r3
   1cf16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cf18:	4694      	mov	ip, r2
   1cf1a:	9906      	ldr	r1, [sp, #24]
   1cf1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1cf1e:	1a5b      	subs	r3, r3, r1
   1cf20:	2136      	movs	r1, #54	; 0x36
   1cf22:	189b      	adds	r3, r3, r2
   1cf24:	1a8a      	subs	r2, r1, r2
   1cf26:	4991      	ldr	r1, [pc, #580]	; (1d16c <_strtod_l+0x910>)
   1cf28:	3b01      	subs	r3, #1
   1cf2a:	2001      	movs	r0, #1
   1cf2c:	428b      	cmp	r3, r1
   1cf2e:	db00      	blt.n	1cf32 <_strtod_l+0x6d6>
   1cf30:	e0b0      	b.n	1d094 <_strtod_l+0x838>
   1cf32:	1ac9      	subs	r1, r1, r3
   1cf34:	1a52      	subs	r2, r2, r1
   1cf36:	291f      	cmp	r1, #31
   1cf38:	dd00      	ble.n	1cf3c <_strtod_l+0x6e0>
   1cf3a:	e0a4      	b.n	1d086 <_strtod_l+0x82a>
   1cf3c:	4088      	lsls	r0, r1
   1cf3e:	2300      	movs	r3, #0
   1cf40:	9014      	str	r0, [sp, #80]	; 0x50
   1cf42:	930c      	str	r3, [sp, #48]	; 0x30
   1cf44:	18ab      	adds	r3, r5, r2
   1cf46:	9308      	str	r3, [sp, #32]
   1cf48:	0013      	movs	r3, r2
   1cf4a:	9a06      	ldr	r2, [sp, #24]
   1cf4c:	4463      	add	r3, ip
   1cf4e:	18d3      	adds	r3, r2, r3
   1cf50:	9a08      	ldr	r2, [sp, #32]
   1cf52:	930b      	str	r3, [sp, #44]	; 0x2c
   1cf54:	002b      	movs	r3, r5
   1cf56:	4295      	cmp	r5, r2
   1cf58:	dd00      	ble.n	1cf5c <_strtod_l+0x700>
   1cf5a:	0013      	movs	r3, r2
   1cf5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1cf5e:	4293      	cmp	r3, r2
   1cf60:	dd00      	ble.n	1cf64 <_strtod_l+0x708>
   1cf62:	0013      	movs	r3, r2
   1cf64:	2b00      	cmp	r3, #0
   1cf66:	dd06      	ble.n	1cf76 <_strtod_l+0x71a>
   1cf68:	9a08      	ldr	r2, [sp, #32]
   1cf6a:	1aed      	subs	r5, r5, r3
   1cf6c:	1ad2      	subs	r2, r2, r3
   1cf6e:	9208      	str	r2, [sp, #32]
   1cf70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1cf72:	1ad2      	subs	r2, r2, r3
   1cf74:	920b      	str	r2, [sp, #44]	; 0x2c
   1cf76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cf78:	2b00      	cmp	r3, #0
   1cf7a:	d017      	beq.n	1cfac <_strtod_l+0x750>
   1cf7c:	001a      	movs	r2, r3
   1cf7e:	9905      	ldr	r1, [sp, #20]
   1cf80:	9804      	ldr	r0, [sp, #16]
   1cf82:	f001 f899 	bl	1e0b8 <__pow5mult>
   1cf86:	9005      	str	r0, [sp, #20]
   1cf88:	2800      	cmp	r0, #0
   1cf8a:	d100      	bne.n	1cf8e <_strtod_l+0x732>
   1cf8c:	e6c1      	b.n	1cd12 <_strtod_l+0x4b6>
   1cf8e:	0001      	movs	r1, r0
   1cf90:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1cf92:	9804      	ldr	r0, [sp, #16]
   1cf94:	f001 f800 	bl	1df98 <__multiply>
   1cf98:	901b      	str	r0, [sp, #108]	; 0x6c
   1cf9a:	2800      	cmp	r0, #0
   1cf9c:	d100      	bne.n	1cfa0 <_strtod_l+0x744>
   1cf9e:	e6b8      	b.n	1cd12 <_strtod_l+0x4b6>
   1cfa0:	9920      	ldr	r1, [sp, #128]	; 0x80
   1cfa2:	9804      	ldr	r0, [sp, #16]
   1cfa4:	f000 ff12 	bl	1ddcc <_Bfree>
   1cfa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1cfaa:	9320      	str	r3, [sp, #128]	; 0x80
   1cfac:	9b08      	ldr	r3, [sp, #32]
   1cfae:	2b00      	cmp	r3, #0
   1cfb0:	dc73      	bgt.n	1d09a <_strtod_l+0x83e>
   1cfb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cfb4:	2b00      	cmp	r3, #0
   1cfb6:	d179      	bne.n	1d0ac <_strtod_l+0x850>
   1cfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cfba:	2b00      	cmp	r3, #0
   1cfbc:	dd08      	ble.n	1cfd0 <_strtod_l+0x774>
   1cfbe:	001a      	movs	r2, r3
   1cfc0:	9907      	ldr	r1, [sp, #28]
   1cfc2:	9804      	ldr	r0, [sp, #16]
   1cfc4:	f001 f8ca 	bl	1e15c <__lshift>
   1cfc8:	9007      	str	r0, [sp, #28]
   1cfca:	2800      	cmp	r0, #0
   1cfcc:	d100      	bne.n	1cfd0 <_strtod_l+0x774>
   1cfce:	e6a0      	b.n	1cd12 <_strtod_l+0x4b6>
   1cfd0:	2d00      	cmp	r5, #0
   1cfd2:	dd08      	ble.n	1cfe6 <_strtod_l+0x78a>
   1cfd4:	002a      	movs	r2, r5
   1cfd6:	9905      	ldr	r1, [sp, #20]
   1cfd8:	9804      	ldr	r0, [sp, #16]
   1cfda:	f001 f8bf 	bl	1e15c <__lshift>
   1cfde:	9005      	str	r0, [sp, #20]
   1cfe0:	2800      	cmp	r0, #0
   1cfe2:	d100      	bne.n	1cfe6 <_strtod_l+0x78a>
   1cfe4:	e695      	b.n	1cd12 <_strtod_l+0x4b6>
   1cfe6:	9a07      	ldr	r2, [sp, #28]
   1cfe8:	9920      	ldr	r1, [sp, #128]	; 0x80
   1cfea:	9804      	ldr	r0, [sp, #16]
   1cfec:	f001 f920 	bl	1e230 <__mdiff>
   1cff0:	1e04      	subs	r4, r0, #0
   1cff2:	d100      	bne.n	1cff6 <_strtod_l+0x79a>
   1cff4:	e68d      	b.n	1cd12 <_strtod_l+0x4b6>
   1cff6:	2500      	movs	r5, #0
   1cff8:	68c3      	ldr	r3, [r0, #12]
   1cffa:	9905      	ldr	r1, [sp, #20]
   1cffc:	60c5      	str	r5, [r0, #12]
   1cffe:	930b      	str	r3, [sp, #44]	; 0x2c
   1d000:	f001 f8fd 	bl	1e1fe <__mcmp>
   1d004:	42a8      	cmp	r0, r5
   1d006:	da5b      	bge.n	1d0c0 <_strtod_l+0x864>
   1d008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d00a:	42ab      	cmp	r3, r5
   1d00c:	d11b      	bne.n	1d046 <_strtod_l+0x7ea>
   1d00e:	42ae      	cmp	r6, r5
   1d010:	d119      	bne.n	1d046 <_strtod_l+0x7ea>
   1d012:	033b      	lsls	r3, r7, #12
   1d014:	42ab      	cmp	r3, r5
   1d016:	d116      	bne.n	1d046 <_strtod_l+0x7ea>
   1d018:	22d6      	movs	r2, #214	; 0xd6
   1d01a:	4b55      	ldr	r3, [pc, #340]	; (1d170 <_strtod_l+0x914>)
   1d01c:	04d2      	lsls	r2, r2, #19
   1d01e:	403b      	ands	r3, r7
   1d020:	4293      	cmp	r3, r2
   1d022:	d910      	bls.n	1d046 <_strtod_l+0x7ea>
   1d024:	6963      	ldr	r3, [r4, #20]
   1d026:	42ab      	cmp	r3, r5
   1d028:	d102      	bne.n	1d030 <_strtod_l+0x7d4>
   1d02a:	6923      	ldr	r3, [r4, #16]
   1d02c:	2b01      	cmp	r3, #1
   1d02e:	dd0a      	ble.n	1d046 <_strtod_l+0x7ea>
   1d030:	0021      	movs	r1, r4
   1d032:	2201      	movs	r2, #1
   1d034:	9804      	ldr	r0, [sp, #16]
   1d036:	f001 f891 	bl	1e15c <__lshift>
   1d03a:	9905      	ldr	r1, [sp, #20]
   1d03c:	0004      	movs	r4, r0
   1d03e:	f001 f8de 	bl	1e1fe <__mcmp>
   1d042:	2800      	cmp	r0, #0
   1d044:	dc6c      	bgt.n	1d120 <_strtod_l+0x8c4>
   1d046:	9b06      	ldr	r3, [sp, #24]
   1d048:	2b00      	cmp	r3, #0
   1d04a:	d178      	bne.n	1d13e <_strtod_l+0x8e2>
   1d04c:	e66a      	b.n	1cd24 <_strtod_l+0x4c8>
   1d04e:	2201      	movs	r2, #1
   1d050:	4214      	tst	r4, r2
   1d052:	d004      	beq.n	1d05e <_strtod_l+0x802>
   1d054:	682a      	ldr	r2, [r5, #0]
   1d056:	686b      	ldr	r3, [r5, #4]
   1d058:	f7fe f810 	bl	1b07c <__aeabi_dmul>
   1d05c:	2301      	movs	r3, #1
   1d05e:	1064      	asrs	r4, r4, #1
   1d060:	3508      	adds	r5, #8
   1d062:	e6ed      	b.n	1ce40 <_strtod_l+0x5e4>
   1d064:	2101      	movs	r1, #1
   1d066:	3b20      	subs	r3, #32
   1d068:	4249      	negs	r1, r1
   1d06a:	4099      	lsls	r1, r3
   1d06c:	400a      	ands	r2, r1
   1d06e:	0017      	movs	r7, r2
   1d070:	e700      	b.n	1ce74 <_strtod_l+0x618>
   1d072:	2201      	movs	r2, #1
   1d074:	4252      	negs	r2, r2
   1d076:	409a      	lsls	r2, r3
   1d078:	4016      	ands	r6, r2
   1d07a:	e6fb      	b.n	1ce74 <_strtod_l+0x618>
   1d07c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1d07e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1d080:	1ad2      	subs	r2, r2, r3
   1d082:	4694      	mov	ip, r2
   1d084:	e749      	b.n	1cf1a <_strtod_l+0x6be>
   1d086:	493b      	ldr	r1, [pc, #236]	; (1d174 <_strtod_l+0x918>)
   1d088:	1acb      	subs	r3, r1, r3
   1d08a:	0001      	movs	r1, r0
   1d08c:	4099      	lsls	r1, r3
   1d08e:	910c      	str	r1, [sp, #48]	; 0x30
   1d090:	9014      	str	r0, [sp, #80]	; 0x50
   1d092:	e757      	b.n	1cf44 <_strtod_l+0x6e8>
   1d094:	2300      	movs	r3, #0
   1d096:	930c      	str	r3, [sp, #48]	; 0x30
   1d098:	e7fa      	b.n	1d090 <_strtod_l+0x834>
   1d09a:	9a08      	ldr	r2, [sp, #32]
   1d09c:	9920      	ldr	r1, [sp, #128]	; 0x80
   1d09e:	9804      	ldr	r0, [sp, #16]
   1d0a0:	f001 f85c 	bl	1e15c <__lshift>
   1d0a4:	9020      	str	r0, [sp, #128]	; 0x80
   1d0a6:	2800      	cmp	r0, #0
   1d0a8:	d183      	bne.n	1cfb2 <_strtod_l+0x756>
   1d0aa:	e632      	b.n	1cd12 <_strtod_l+0x4b6>
   1d0ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1d0ae:	9907      	ldr	r1, [sp, #28]
   1d0b0:	9804      	ldr	r0, [sp, #16]
   1d0b2:	f001 f801 	bl	1e0b8 <__pow5mult>
   1d0b6:	9007      	str	r0, [sp, #28]
   1d0b8:	2800      	cmp	r0, #0
   1d0ba:	d000      	beq.n	1d0be <_strtod_l+0x862>
   1d0bc:	e77c      	b.n	1cfb8 <_strtod_l+0x75c>
   1d0be:	e628      	b.n	1cd12 <_strtod_l+0x4b6>
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	d000      	beq.n	1d0c6 <_strtod_l+0x86a>
   1d0c4:	e095      	b.n	1d1f2 <_strtod_l+0x996>
   1d0c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d0c8:	033b      	lsls	r3, r7, #12
   1d0ca:	2a00      	cmp	r2, #0
   1d0cc:	d024      	beq.n	1d118 <_strtod_l+0x8bc>
   1d0ce:	492a      	ldr	r1, [pc, #168]	; (1d178 <_strtod_l+0x91c>)
   1d0d0:	003a      	movs	r2, r7
   1d0d2:	0b1b      	lsrs	r3, r3, #12
   1d0d4:	428b      	cmp	r3, r1
   1d0d6:	d15e      	bne.n	1d196 <_strtod_l+0x93a>
   1d0d8:	9b06      	ldr	r3, [sp, #24]
   1d0da:	3801      	subs	r0, #1
   1d0dc:	46b4      	mov	ip, r6
   1d0de:	0001      	movs	r1, r0
   1d0e0:	2b00      	cmp	r3, #0
   1d0e2:	d00a      	beq.n	1d0fa <_strtod_l+0x89e>
   1d0e4:	25d4      	movs	r5, #212	; 0xd4
   1d0e6:	4b22      	ldr	r3, [pc, #136]	; (1d170 <_strtod_l+0x914>)
   1d0e8:	04ed      	lsls	r5, r5, #19
   1d0ea:	403b      	ands	r3, r7
   1d0ec:	42ab      	cmp	r3, r5
   1d0ee:	d804      	bhi.n	1d0fa <_strtod_l+0x89e>
   1d0f0:	316c      	adds	r1, #108	; 0x6c
   1d0f2:	0d1b      	lsrs	r3, r3, #20
   1d0f4:	1acb      	subs	r3, r1, r3
   1d0f6:	0001      	movs	r1, r0
   1d0f8:	4099      	lsls	r1, r3
   1d0fa:	4561      	cmp	r1, ip
   1d0fc:	d14b      	bne.n	1d196 <_strtod_l+0x93a>
   1d0fe:	4b1f      	ldr	r3, [pc, #124]	; (1d17c <_strtod_l+0x920>)
   1d100:	429a      	cmp	r2, r3
   1d102:	d102      	bne.n	1d10a <_strtod_l+0x8ae>
   1d104:	1c4b      	adds	r3, r1, #1
   1d106:	d100      	bne.n	1d10a <_strtod_l+0x8ae>
   1d108:	e603      	b.n	1cd12 <_strtod_l+0x4b6>
   1d10a:	4b19      	ldr	r3, [pc, #100]	; (1d170 <_strtod_l+0x914>)
   1d10c:	2600      	movs	r6, #0
   1d10e:	401a      	ands	r2, r3
   1d110:	2380      	movs	r3, #128	; 0x80
   1d112:	035b      	lsls	r3, r3, #13
   1d114:	18d7      	adds	r7, r2, r3
   1d116:	e796      	b.n	1d046 <_strtod_l+0x7ea>
   1d118:	2b00      	cmp	r3, #0
   1d11a:	d13c      	bne.n	1d196 <_strtod_l+0x93a>
   1d11c:	2e00      	cmp	r6, #0
   1d11e:	d13a      	bne.n	1d196 <_strtod_l+0x93a>
   1d120:	9a06      	ldr	r2, [sp, #24]
   1d122:	4b13      	ldr	r3, [pc, #76]	; (1d170 <_strtod_l+0x914>)
   1d124:	2a00      	cmp	r2, #0
   1d126:	d02d      	beq.n	1d184 <_strtod_l+0x928>
   1d128:	001a      	movs	r2, r3
   1d12a:	21d6      	movs	r1, #214	; 0xd6
   1d12c:	403a      	ands	r2, r7
   1d12e:	04c9      	lsls	r1, r1, #19
   1d130:	428a      	cmp	r2, r1
   1d132:	dc27      	bgt.n	1d184 <_strtod_l+0x928>
   1d134:	23dc      	movs	r3, #220	; 0xdc
   1d136:	049b      	lsls	r3, r3, #18
   1d138:	429a      	cmp	r2, r3
   1d13a:	dc00      	bgt.n	1d13e <_strtod_l+0x8e2>
   1d13c:	e658      	b.n	1cdf0 <_strtod_l+0x594>
   1d13e:	4b10      	ldr	r3, [pc, #64]	; (1d180 <_strtod_l+0x924>)
   1d140:	0030      	movs	r0, r6
   1d142:	9311      	str	r3, [sp, #68]	; 0x44
   1d144:	2300      	movs	r3, #0
   1d146:	9310      	str	r3, [sp, #64]	; 0x40
   1d148:	0039      	movs	r1, r7
   1d14a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d14c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d14e:	f7fd ff95 	bl	1b07c <__aeabi_dmul>
   1d152:	0006      	movs	r6, r0
   1d154:	1e0f      	subs	r7, r1, #0
   1d156:	d000      	beq.n	1d15a <_strtod_l+0x8fe>
   1d158:	e5e4      	b.n	1cd24 <_strtod_l+0x4c8>
   1d15a:	2800      	cmp	r0, #0
   1d15c:	d000      	beq.n	1d160 <_strtod_l+0x904>
   1d15e:	e5e1      	b.n	1cd24 <_strtod_l+0x4c8>
   1d160:	2322      	movs	r3, #34	; 0x22
   1d162:	9a04      	ldr	r2, [sp, #16]
   1d164:	6013      	str	r3, [r2, #0]
   1d166:	e5dd      	b.n	1cd24 <_strtod_l+0x4c8>
   1d168:	00021b78 	.word	0x00021b78
   1d16c:	fffffc02 	.word	0xfffffc02
   1d170:	7ff00000 	.word	0x7ff00000
   1d174:	fffffbe2 	.word	0xfffffbe2
   1d178:	000fffff 	.word	0x000fffff
   1d17c:	7fefffff 	.word	0x7fefffff
   1d180:	39500000 	.word	0x39500000
   1d184:	2601      	movs	r6, #1
   1d186:	4aa9      	ldr	r2, [pc, #676]	; (1d42c <_strtod_l+0xbd0>)
   1d188:	403b      	ands	r3, r7
   1d18a:	189b      	adds	r3, r3, r2
   1d18c:	4aa8      	ldr	r2, [pc, #672]	; (1d430 <_strtod_l+0xbd4>)
   1d18e:	4276      	negs	r6, r6
   1d190:	431a      	orrs	r2, r3
   1d192:	0017      	movs	r7, r2
   1d194:	e757      	b.n	1d046 <_strtod_l+0x7ea>
   1d196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d198:	2b00      	cmp	r3, #0
   1d19a:	d013      	beq.n	1d1c4 <_strtod_l+0x968>
   1d19c:	423b      	tst	r3, r7
   1d19e:	d100      	bne.n	1d1a2 <_strtod_l+0x946>
   1d1a0:	e751      	b.n	1d046 <_strtod_l+0x7ea>
   1d1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d1a4:	9a06      	ldr	r2, [sp, #24]
   1d1a6:	0030      	movs	r0, r6
   1d1a8:	0039      	movs	r1, r7
   1d1aa:	2b00      	cmp	r3, #0
   1d1ac:	d00f      	beq.n	1d1ce <_strtod_l+0x972>
   1d1ae:	f7ff fb3d 	bl	1c82c <sulp>
   1d1b2:	0002      	movs	r2, r0
   1d1b4:	000b      	movs	r3, r1
   1d1b6:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d1b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d1ba:	f7fd f81b 	bl	1a1f4 <__aeabi_dadd>
   1d1be:	0006      	movs	r6, r0
   1d1c0:	000f      	movs	r7, r1
   1d1c2:	e740      	b.n	1d046 <_strtod_l+0x7ea>
   1d1c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d1c6:	4233      	tst	r3, r6
   1d1c8:	d100      	bne.n	1d1cc <_strtod_l+0x970>
   1d1ca:	e73c      	b.n	1d046 <_strtod_l+0x7ea>
   1d1cc:	e7e9      	b.n	1d1a2 <_strtod_l+0x946>
   1d1ce:	f7ff fb2d 	bl	1c82c <sulp>
   1d1d2:	0002      	movs	r2, r0
   1d1d4:	000b      	movs	r3, r1
   1d1d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d1d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d1da:	f7fe f9cf 	bl	1b57c <__aeabi_dsub>
   1d1de:	2200      	movs	r2, #0
   1d1e0:	2300      	movs	r3, #0
   1d1e2:	0006      	movs	r6, r0
   1d1e4:	000f      	movs	r7, r1
   1d1e6:	f7fc ff51 	bl	1a08c <__aeabi_dcmpeq>
   1d1ea:	2800      	cmp	r0, #0
   1d1ec:	d000      	beq.n	1d1f0 <_strtod_l+0x994>
   1d1ee:	e5ff      	b.n	1cdf0 <_strtod_l+0x594>
   1d1f0:	e729      	b.n	1d046 <_strtod_l+0x7ea>
   1d1f2:	9905      	ldr	r1, [sp, #20]
   1d1f4:	0020      	movs	r0, r4
   1d1f6:	f001 f945 	bl	1e484 <__ratio>
   1d1fa:	2380      	movs	r3, #128	; 0x80
   1d1fc:	2200      	movs	r2, #0
   1d1fe:	05db      	lsls	r3, r3, #23
   1d200:	9008      	str	r0, [sp, #32]
   1d202:	9109      	str	r1, [sp, #36]	; 0x24
   1d204:	f7fc ff52 	bl	1a0ac <__aeabi_dcmple>
   1d208:	2800      	cmp	r0, #0
   1d20a:	d075      	beq.n	1d2f8 <_strtod_l+0xa9c>
   1d20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d20e:	2b00      	cmp	r3, #0
   1d210:	d043      	beq.n	1d29a <_strtod_l+0xa3e>
   1d212:	2200      	movs	r2, #0
   1d214:	4b87      	ldr	r3, [pc, #540]	; (1d434 <_strtod_l+0xbd8>)
   1d216:	920c      	str	r2, [sp, #48]	; 0x30
   1d218:	930d      	str	r3, [sp, #52]	; 0x34
   1d21a:	4b86      	ldr	r3, [pc, #536]	; (1d434 <_strtod_l+0xbd8>)
   1d21c:	9308      	str	r3, [sp, #32]
   1d21e:	4b86      	ldr	r3, [pc, #536]	; (1d438 <_strtod_l+0xbdc>)
   1d220:	403b      	ands	r3, r7
   1d222:	9314      	str	r3, [sp, #80]	; 0x50
   1d224:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d226:	4b85      	ldr	r3, [pc, #532]	; (1d43c <_strtod_l+0xbe0>)
   1d228:	429a      	cmp	r2, r3
   1d22a:	d000      	beq.n	1d22e <_strtod_l+0x9d2>
   1d22c:	e0b1      	b.n	1d392 <_strtod_l+0xb36>
   1d22e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d232:	9210      	str	r2, [sp, #64]	; 0x40
   1d234:	9311      	str	r3, [sp, #68]	; 0x44
   1d236:	4b82      	ldr	r3, [pc, #520]	; (1d440 <_strtod_l+0xbe4>)
   1d238:	0030      	movs	r0, r6
   1d23a:	18ff      	adds	r7, r7, r3
   1d23c:	0039      	movs	r1, r7
   1d23e:	f001 f85b 	bl	1e2f8 <__ulp>
   1d242:	0002      	movs	r2, r0
   1d244:	000b      	movs	r3, r1
   1d246:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d248:	990d      	ldr	r1, [sp, #52]	; 0x34
   1d24a:	f7fd ff17 	bl	1b07c <__aeabi_dmul>
   1d24e:	0032      	movs	r2, r6
   1d250:	003b      	movs	r3, r7
   1d252:	f7fc ffcf 	bl	1a1f4 <__aeabi_dadd>
   1d256:	4a78      	ldr	r2, [pc, #480]	; (1d438 <_strtod_l+0xbdc>)
   1d258:	4b7a      	ldr	r3, [pc, #488]	; (1d444 <_strtod_l+0xbe8>)
   1d25a:	0006      	movs	r6, r0
   1d25c:	400a      	ands	r2, r1
   1d25e:	429a      	cmp	r2, r3
   1d260:	d962      	bls.n	1d328 <_strtod_l+0xacc>
   1d262:	4b79      	ldr	r3, [pc, #484]	; (1d448 <_strtod_l+0xbec>)
   1d264:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1d266:	429a      	cmp	r2, r3
   1d268:	d103      	bne.n	1d272 <_strtod_l+0xa16>
   1d26a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d26c:	3301      	adds	r3, #1
   1d26e:	d100      	bne.n	1d272 <_strtod_l+0xa16>
   1d270:	e54f      	b.n	1cd12 <_strtod_l+0x4b6>
   1d272:	2601      	movs	r6, #1
   1d274:	4f74      	ldr	r7, [pc, #464]	; (1d448 <_strtod_l+0xbec>)
   1d276:	4276      	negs	r6, r6
   1d278:	9920      	ldr	r1, [sp, #128]	; 0x80
   1d27a:	9804      	ldr	r0, [sp, #16]
   1d27c:	f000 fda6 	bl	1ddcc <_Bfree>
   1d280:	9907      	ldr	r1, [sp, #28]
   1d282:	9804      	ldr	r0, [sp, #16]
   1d284:	f000 fda2 	bl	1ddcc <_Bfree>
   1d288:	9905      	ldr	r1, [sp, #20]
   1d28a:	9804      	ldr	r0, [sp, #16]
   1d28c:	f000 fd9e 	bl	1ddcc <_Bfree>
   1d290:	0021      	movs	r1, r4
   1d292:	9804      	ldr	r0, [sp, #16]
   1d294:	f000 fd9a 	bl	1ddcc <_Bfree>
   1d298:	e60d      	b.n	1ceb6 <_strtod_l+0x65a>
   1d29a:	2e00      	cmp	r6, #0
   1d29c:	d11d      	bne.n	1d2da <_strtod_l+0xa7e>
   1d29e:	033b      	lsls	r3, r7, #12
   1d2a0:	d120      	bne.n	1d2e4 <_strtod_l+0xa88>
   1d2a2:	9808      	ldr	r0, [sp, #32]
   1d2a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d2a6:	2200      	movs	r2, #0
   1d2a8:	4b62      	ldr	r3, [pc, #392]	; (1d434 <_strtod_l+0xbd8>)
   1d2aa:	f7fc fef5 	bl	1a098 <__aeabi_dcmplt>
   1d2ae:	2800      	cmp	r0, #0
   1d2b0:	d11e      	bne.n	1d2f0 <_strtod_l+0xa94>
   1d2b2:	9808      	ldr	r0, [sp, #32]
   1d2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d2b6:	2200      	movs	r2, #0
   1d2b8:	4b64      	ldr	r3, [pc, #400]	; (1d44c <_strtod_l+0xbf0>)
   1d2ba:	f7fd fedf 	bl	1b07c <__aeabi_dmul>
   1d2be:	0005      	movs	r5, r0
   1d2c0:	9108      	str	r1, [sp, #32]
   1d2c2:	2280      	movs	r2, #128	; 0x80
   1d2c4:	0612      	lsls	r2, r2, #24
   1d2c6:	4694      	mov	ip, r2
   1d2c8:	9b08      	ldr	r3, [sp, #32]
   1d2ca:	951c      	str	r5, [sp, #112]	; 0x70
   1d2cc:	4463      	add	r3, ip
   1d2ce:	931d      	str	r3, [sp, #116]	; 0x74
   1d2d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1d2d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d2d4:	920c      	str	r2, [sp, #48]	; 0x30
   1d2d6:	930d      	str	r3, [sp, #52]	; 0x34
   1d2d8:	e7a1      	b.n	1d21e <_strtod_l+0x9c2>
   1d2da:	2e01      	cmp	r6, #1
   1d2dc:	d102      	bne.n	1d2e4 <_strtod_l+0xa88>
   1d2de:	2f00      	cmp	r7, #0
   1d2e0:	d100      	bne.n	1d2e4 <_strtod_l+0xa88>
   1d2e2:	e585      	b.n	1cdf0 <_strtod_l+0x594>
   1d2e4:	2200      	movs	r2, #0
   1d2e6:	4b5a      	ldr	r3, [pc, #360]	; (1d450 <_strtod_l+0xbf4>)
   1d2e8:	2500      	movs	r5, #0
   1d2ea:	920c      	str	r2, [sp, #48]	; 0x30
   1d2ec:	930d      	str	r3, [sp, #52]	; 0x34
   1d2ee:	e794      	b.n	1d21a <_strtod_l+0x9be>
   1d2f0:	4b56      	ldr	r3, [pc, #344]	; (1d44c <_strtod_l+0xbf0>)
   1d2f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1d2f4:	9308      	str	r3, [sp, #32]
   1d2f6:	e7e4      	b.n	1d2c2 <_strtod_l+0xa66>
   1d2f8:	4b54      	ldr	r3, [pc, #336]	; (1d44c <_strtod_l+0xbf0>)
   1d2fa:	9808      	ldr	r0, [sp, #32]
   1d2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d2fe:	2200      	movs	r2, #0
   1d300:	f7fd febc 	bl	1b07c <__aeabi_dmul>
   1d304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d306:	0005      	movs	r5, r0
   1d308:	9108      	str	r1, [sp, #32]
   1d30a:	2b00      	cmp	r3, #0
   1d30c:	d107      	bne.n	1d31e <_strtod_l+0xac2>
   1d30e:	2380      	movs	r3, #128	; 0x80
   1d310:	061b      	lsls	r3, r3, #24
   1d312:	18cb      	adds	r3, r1, r3
   1d314:	9016      	str	r0, [sp, #88]	; 0x58
   1d316:	9317      	str	r3, [sp, #92]	; 0x5c
   1d318:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d31a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d31c:	e7da      	b.n	1d2d4 <_strtod_l+0xa78>
   1d31e:	0002      	movs	r2, r0
   1d320:	9b08      	ldr	r3, [sp, #32]
   1d322:	9216      	str	r2, [sp, #88]	; 0x58
   1d324:	9317      	str	r3, [sp, #92]	; 0x5c
   1d326:	e7f7      	b.n	1d318 <_strtod_l+0xabc>
   1d328:	23d4      	movs	r3, #212	; 0xd4
   1d32a:	049b      	lsls	r3, r3, #18
   1d32c:	18cf      	adds	r7, r1, r3
   1d32e:	9b06      	ldr	r3, [sp, #24]
   1d330:	2b00      	cmp	r3, #0
   1d332:	d1a1      	bne.n	1d278 <_strtod_l+0xa1c>
   1d334:	4b40      	ldr	r3, [pc, #256]	; (1d438 <_strtod_l+0xbdc>)
   1d336:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d338:	970c      	str	r7, [sp, #48]	; 0x30
   1d33a:	403b      	ands	r3, r7
   1d33c:	429a      	cmp	r2, r3
   1d33e:	d19b      	bne.n	1d278 <_strtod_l+0xa1c>
   1d340:	9908      	ldr	r1, [sp, #32]
   1d342:	0028      	movs	r0, r5
   1d344:	f7fe fc30 	bl	1bba8 <__aeabi_d2iz>
   1d348:	f7fe fc62 	bl	1bc10 <__aeabi_i2d>
   1d34c:	000b      	movs	r3, r1
   1d34e:	0002      	movs	r2, r0
   1d350:	9908      	ldr	r1, [sp, #32]
   1d352:	0028      	movs	r0, r5
   1d354:	f7fe f912 	bl	1b57c <__aeabi_dsub>
   1d358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d35a:	9008      	str	r0, [sp, #32]
   1d35c:	9109      	str	r1, [sp, #36]	; 0x24
   1d35e:	2b00      	cmp	r3, #0
   1d360:	d104      	bne.n	1d36c <_strtod_l+0xb10>
   1d362:	2e00      	cmp	r6, #0
   1d364:	d102      	bne.n	1d36c <_strtod_l+0xb10>
   1d366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d368:	031b      	lsls	r3, r3, #12
   1d36a:	d058      	beq.n	1d41e <_strtod_l+0xbc2>
   1d36c:	9808      	ldr	r0, [sp, #32]
   1d36e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d370:	4a38      	ldr	r2, [pc, #224]	; (1d454 <_strtod_l+0xbf8>)
   1d372:	4b39      	ldr	r3, [pc, #228]	; (1d458 <_strtod_l+0xbfc>)
   1d374:	f7fc fe90 	bl	1a098 <__aeabi_dcmplt>
   1d378:	2800      	cmp	r0, #0
   1d37a:	d000      	beq.n	1d37e <_strtod_l+0xb22>
   1d37c:	e4d2      	b.n	1cd24 <_strtod_l+0x4c8>
   1d37e:	9808      	ldr	r0, [sp, #32]
   1d380:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d382:	4a36      	ldr	r2, [pc, #216]	; (1d45c <_strtod_l+0xc00>)
   1d384:	4b31      	ldr	r3, [pc, #196]	; (1d44c <_strtod_l+0xbf0>)
   1d386:	f7fc fe9b 	bl	1a0c0 <__aeabi_dcmpgt>
   1d38a:	2800      	cmp	r0, #0
   1d38c:	d100      	bne.n	1d390 <_strtod_l+0xb34>
   1d38e:	e773      	b.n	1d278 <_strtod_l+0xa1c>
   1d390:	e4c8      	b.n	1cd24 <_strtod_l+0x4c8>
   1d392:	9b06      	ldr	r3, [sp, #24]
   1d394:	2b00      	cmp	r3, #0
   1d396:	d02a      	beq.n	1d3ee <_strtod_l+0xb92>
   1d398:	23d4      	movs	r3, #212	; 0xd4
   1d39a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d39c:	04db      	lsls	r3, r3, #19
   1d39e:	429a      	cmp	r2, r3
   1d3a0:	d825      	bhi.n	1d3ee <_strtod_l+0xb92>
   1d3a2:	4a2f      	ldr	r2, [pc, #188]	; (1d460 <_strtod_l+0xc04>)
   1d3a4:	4b2f      	ldr	r3, [pc, #188]	; (1d464 <_strtod_l+0xc08>)
   1d3a6:	0028      	movs	r0, r5
   1d3a8:	9908      	ldr	r1, [sp, #32]
   1d3aa:	f7fc fe7f 	bl	1a0ac <__aeabi_dcmple>
   1d3ae:	2800      	cmp	r0, #0
   1d3b0:	d016      	beq.n	1d3e0 <_strtod_l+0xb84>
   1d3b2:	0028      	movs	r0, r5
   1d3b4:	9908      	ldr	r1, [sp, #32]
   1d3b6:	f7fc feff 	bl	1a1b8 <__aeabi_d2uiz>
   1d3ba:	2800      	cmp	r0, #0
   1d3bc:	d100      	bne.n	1d3c0 <_strtod_l+0xb64>
   1d3be:	3001      	adds	r0, #1
   1d3c0:	f7fe fc68 	bl	1bc94 <__aeabi_ui2d>
   1d3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d3c6:	0005      	movs	r5, r0
   1d3c8:	9108      	str	r1, [sp, #32]
   1d3ca:	2b00      	cmp	r3, #0
   1d3cc:	d122      	bne.n	1d414 <_strtod_l+0xbb8>
   1d3ce:	2380      	movs	r3, #128	; 0x80
   1d3d0:	061b      	lsls	r3, r3, #24
   1d3d2:	18cb      	adds	r3, r1, r3
   1d3d4:	9018      	str	r0, [sp, #96]	; 0x60
   1d3d6:	9319      	str	r3, [sp, #100]	; 0x64
   1d3d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1d3da:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d3dc:	920c      	str	r2, [sp, #48]	; 0x30
   1d3de:	930d      	str	r3, [sp, #52]	; 0x34
   1d3e0:	22d6      	movs	r2, #214	; 0xd6
   1d3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d3e4:	04d2      	lsls	r2, r2, #19
   1d3e6:	189b      	adds	r3, r3, r2
   1d3e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d3ea:	1a9b      	subs	r3, r3, r2
   1d3ec:	930d      	str	r3, [sp, #52]	; 0x34
   1d3ee:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d3f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d3f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1d3f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d3f6:	f000 ff7f 	bl	1e2f8 <__ulp>
   1d3fa:	0002      	movs	r2, r0
   1d3fc:	000b      	movs	r3, r1
   1d3fe:	0030      	movs	r0, r6
   1d400:	0039      	movs	r1, r7
   1d402:	f7fd fe3b 	bl	1b07c <__aeabi_dmul>
   1d406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d40a:	f7fc fef3 	bl	1a1f4 <__aeabi_dadd>
   1d40e:	0006      	movs	r6, r0
   1d410:	000f      	movs	r7, r1
   1d412:	e78c      	b.n	1d32e <_strtod_l+0xad2>
   1d414:	0002      	movs	r2, r0
   1d416:	9b08      	ldr	r3, [sp, #32]
   1d418:	9218      	str	r2, [sp, #96]	; 0x60
   1d41a:	9319      	str	r3, [sp, #100]	; 0x64
   1d41c:	e7dc      	b.n	1d3d8 <_strtod_l+0xb7c>
   1d41e:	4a0d      	ldr	r2, [pc, #52]	; (1d454 <_strtod_l+0xbf8>)
   1d420:	4b11      	ldr	r3, [pc, #68]	; (1d468 <_strtod_l+0xc0c>)
   1d422:	9808      	ldr	r0, [sp, #32]
   1d424:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d426:	f7fc fe37 	bl	1a098 <__aeabi_dcmplt>
   1d42a:	e7ae      	b.n	1d38a <_strtod_l+0xb2e>
   1d42c:	fff00000 	.word	0xfff00000
   1d430:	000fffff 	.word	0x000fffff
   1d434:	3ff00000 	.word	0x3ff00000
   1d438:	7ff00000 	.word	0x7ff00000
   1d43c:	7fe00000 	.word	0x7fe00000
   1d440:	fcb00000 	.word	0xfcb00000
   1d444:	7c9fffff 	.word	0x7c9fffff
   1d448:	7fefffff 	.word	0x7fefffff
   1d44c:	3fe00000 	.word	0x3fe00000
   1d450:	bff00000 	.word	0xbff00000
   1d454:	94a03595 	.word	0x94a03595
   1d458:	3fdfffff 	.word	0x3fdfffff
   1d45c:	35afe535 	.word	0x35afe535
   1d460:	ffc00000 	.word	0xffc00000
   1d464:	41dfffff 	.word	0x41dfffff
   1d468:	3fcfffff 	.word	0x3fcfffff

0001d46c <strtod>:
   1d46c:	4b06      	ldr	r3, [pc, #24]	; (1d488 <strtod+0x1c>)
   1d46e:	b510      	push	{r4, lr}
   1d470:	0004      	movs	r4, r0
   1d472:	6818      	ldr	r0, [r3, #0]
   1d474:	000a      	movs	r2, r1
   1d476:	6a03      	ldr	r3, [r0, #32]
   1d478:	2b00      	cmp	r3, #0
   1d47a:	d100      	bne.n	1d47e <strtod+0x12>
   1d47c:	4b03      	ldr	r3, [pc, #12]	; (1d48c <strtod+0x20>)
   1d47e:	0021      	movs	r1, r4
   1d480:	f7ff f9ec 	bl	1c85c <_strtod_l>
   1d484:	bd10      	pop	{r4, pc}
   1d486:	46c0      	nop			; (mov r8, r8)
   1d488:	2000022c 	.word	0x2000022c
   1d48c:	20000290 	.word	0x20000290

0001d490 <__swbuf_r>:
   1d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d492:	0005      	movs	r5, r0
   1d494:	000e      	movs	r6, r1
   1d496:	0014      	movs	r4, r2
   1d498:	2800      	cmp	r0, #0
   1d49a:	d004      	beq.n	1d4a6 <__swbuf_r+0x16>
   1d49c:	6983      	ldr	r3, [r0, #24]
   1d49e:	2b00      	cmp	r3, #0
   1d4a0:	d101      	bne.n	1d4a6 <__swbuf_r+0x16>
   1d4a2:	f7fe fd27 	bl	1bef4 <__sinit>
   1d4a6:	4b22      	ldr	r3, [pc, #136]	; (1d530 <__swbuf_r+0xa0>)
   1d4a8:	429c      	cmp	r4, r3
   1d4aa:	d12d      	bne.n	1d508 <__swbuf_r+0x78>
   1d4ac:	686c      	ldr	r4, [r5, #4]
   1d4ae:	69a3      	ldr	r3, [r4, #24]
   1d4b0:	60a3      	str	r3, [r4, #8]
   1d4b2:	89a3      	ldrh	r3, [r4, #12]
   1d4b4:	071b      	lsls	r3, r3, #28
   1d4b6:	d531      	bpl.n	1d51c <__swbuf_r+0x8c>
   1d4b8:	6923      	ldr	r3, [r4, #16]
   1d4ba:	2b00      	cmp	r3, #0
   1d4bc:	d02e      	beq.n	1d51c <__swbuf_r+0x8c>
   1d4be:	6823      	ldr	r3, [r4, #0]
   1d4c0:	6922      	ldr	r2, [r4, #16]
   1d4c2:	b2f7      	uxtb	r7, r6
   1d4c4:	1a98      	subs	r0, r3, r2
   1d4c6:	6963      	ldr	r3, [r4, #20]
   1d4c8:	b2f6      	uxtb	r6, r6
   1d4ca:	4298      	cmp	r0, r3
   1d4cc:	db05      	blt.n	1d4da <__swbuf_r+0x4a>
   1d4ce:	0021      	movs	r1, r4
   1d4d0:	0028      	movs	r0, r5
   1d4d2:	f7fe fca1 	bl	1be18 <_fflush_r>
   1d4d6:	2800      	cmp	r0, #0
   1d4d8:	d126      	bne.n	1d528 <__swbuf_r+0x98>
   1d4da:	68a3      	ldr	r3, [r4, #8]
   1d4dc:	3001      	adds	r0, #1
   1d4de:	3b01      	subs	r3, #1
   1d4e0:	60a3      	str	r3, [r4, #8]
   1d4e2:	6823      	ldr	r3, [r4, #0]
   1d4e4:	1c5a      	adds	r2, r3, #1
   1d4e6:	6022      	str	r2, [r4, #0]
   1d4e8:	701f      	strb	r7, [r3, #0]
   1d4ea:	6963      	ldr	r3, [r4, #20]
   1d4ec:	4298      	cmp	r0, r3
   1d4ee:	d004      	beq.n	1d4fa <__swbuf_r+0x6a>
   1d4f0:	89a3      	ldrh	r3, [r4, #12]
   1d4f2:	07db      	lsls	r3, r3, #31
   1d4f4:	d51a      	bpl.n	1d52c <__swbuf_r+0x9c>
   1d4f6:	2e0a      	cmp	r6, #10
   1d4f8:	d118      	bne.n	1d52c <__swbuf_r+0x9c>
   1d4fa:	0021      	movs	r1, r4
   1d4fc:	0028      	movs	r0, r5
   1d4fe:	f7fe fc8b 	bl	1be18 <_fflush_r>
   1d502:	2800      	cmp	r0, #0
   1d504:	d012      	beq.n	1d52c <__swbuf_r+0x9c>
   1d506:	e00f      	b.n	1d528 <__swbuf_r+0x98>
   1d508:	4b0a      	ldr	r3, [pc, #40]	; (1d534 <__swbuf_r+0xa4>)
   1d50a:	429c      	cmp	r4, r3
   1d50c:	d101      	bne.n	1d512 <__swbuf_r+0x82>
   1d50e:	68ac      	ldr	r4, [r5, #8]
   1d510:	e7cd      	b.n	1d4ae <__swbuf_r+0x1e>
   1d512:	4b09      	ldr	r3, [pc, #36]	; (1d538 <__swbuf_r+0xa8>)
   1d514:	429c      	cmp	r4, r3
   1d516:	d1ca      	bne.n	1d4ae <__swbuf_r+0x1e>
   1d518:	68ec      	ldr	r4, [r5, #12]
   1d51a:	e7c8      	b.n	1d4ae <__swbuf_r+0x1e>
   1d51c:	0021      	movs	r1, r4
   1d51e:	0028      	movs	r0, r5
   1d520:	f000 f82c 	bl	1d57c <__swsetup_r>
   1d524:	2800      	cmp	r0, #0
   1d526:	d0ca      	beq.n	1d4be <__swbuf_r+0x2e>
   1d528:	2601      	movs	r6, #1
   1d52a:	4276      	negs	r6, r6
   1d52c:	0030      	movs	r0, r6
   1d52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d530:	00021af0 	.word	0x00021af0
   1d534:	00021b10 	.word	0x00021b10
   1d538:	00021ad0 	.word	0x00021ad0

0001d53c <__ascii_wctomb>:
   1d53c:	1e0b      	subs	r3, r1, #0
   1d53e:	d004      	beq.n	1d54a <__ascii_wctomb+0xe>
   1d540:	2aff      	cmp	r2, #255	; 0xff
   1d542:	d904      	bls.n	1d54e <__ascii_wctomb+0x12>
   1d544:	238a      	movs	r3, #138	; 0x8a
   1d546:	6003      	str	r3, [r0, #0]
   1d548:	3b8b      	subs	r3, #139	; 0x8b
   1d54a:	0018      	movs	r0, r3
   1d54c:	4770      	bx	lr
   1d54e:	700a      	strb	r2, [r1, #0]
   1d550:	2301      	movs	r3, #1
   1d552:	e7fa      	b.n	1d54a <__ascii_wctomb+0xe>

0001d554 <_write_r>:
   1d554:	b570      	push	{r4, r5, r6, lr}
   1d556:	0005      	movs	r5, r0
   1d558:	0008      	movs	r0, r1
   1d55a:	0011      	movs	r1, r2
   1d55c:	2200      	movs	r2, #0
   1d55e:	4c06      	ldr	r4, [pc, #24]	; (1d578 <_write_r+0x24>)
   1d560:	6022      	str	r2, [r4, #0]
   1d562:	001a      	movs	r2, r3
   1d564:	f7f2 f800 	bl	f568 <_write>
   1d568:	1c43      	adds	r3, r0, #1
   1d56a:	d103      	bne.n	1d574 <_write_r+0x20>
   1d56c:	6823      	ldr	r3, [r4, #0]
   1d56e:	2b00      	cmp	r3, #0
   1d570:	d000      	beq.n	1d574 <_write_r+0x20>
   1d572:	602b      	str	r3, [r5, #0]
   1d574:	bd70      	pop	{r4, r5, r6, pc}
   1d576:	46c0      	nop			; (mov r8, r8)
   1d578:	20002c04 	.word	0x20002c04

0001d57c <__swsetup_r>:
   1d57c:	4b36      	ldr	r3, [pc, #216]	; (1d658 <__swsetup_r+0xdc>)
   1d57e:	b570      	push	{r4, r5, r6, lr}
   1d580:	681d      	ldr	r5, [r3, #0]
   1d582:	0006      	movs	r6, r0
   1d584:	000c      	movs	r4, r1
   1d586:	2d00      	cmp	r5, #0
   1d588:	d005      	beq.n	1d596 <__swsetup_r+0x1a>
   1d58a:	69ab      	ldr	r3, [r5, #24]
   1d58c:	2b00      	cmp	r3, #0
   1d58e:	d102      	bne.n	1d596 <__swsetup_r+0x1a>
   1d590:	0028      	movs	r0, r5
   1d592:	f7fe fcaf 	bl	1bef4 <__sinit>
   1d596:	4b31      	ldr	r3, [pc, #196]	; (1d65c <__swsetup_r+0xe0>)
   1d598:	429c      	cmp	r4, r3
   1d59a:	d10f      	bne.n	1d5bc <__swsetup_r+0x40>
   1d59c:	686c      	ldr	r4, [r5, #4]
   1d59e:	230c      	movs	r3, #12
   1d5a0:	5ee2      	ldrsh	r2, [r4, r3]
   1d5a2:	b293      	uxth	r3, r2
   1d5a4:	0719      	lsls	r1, r3, #28
   1d5a6:	d42d      	bmi.n	1d604 <__swsetup_r+0x88>
   1d5a8:	06d9      	lsls	r1, r3, #27
   1d5aa:	d411      	bmi.n	1d5d0 <__swsetup_r+0x54>
   1d5ac:	2309      	movs	r3, #9
   1d5ae:	2001      	movs	r0, #1
   1d5b0:	6033      	str	r3, [r6, #0]
   1d5b2:	3337      	adds	r3, #55	; 0x37
   1d5b4:	4313      	orrs	r3, r2
   1d5b6:	81a3      	strh	r3, [r4, #12]
   1d5b8:	4240      	negs	r0, r0
   1d5ba:	bd70      	pop	{r4, r5, r6, pc}
   1d5bc:	4b28      	ldr	r3, [pc, #160]	; (1d660 <__swsetup_r+0xe4>)
   1d5be:	429c      	cmp	r4, r3
   1d5c0:	d101      	bne.n	1d5c6 <__swsetup_r+0x4a>
   1d5c2:	68ac      	ldr	r4, [r5, #8]
   1d5c4:	e7eb      	b.n	1d59e <__swsetup_r+0x22>
   1d5c6:	4b27      	ldr	r3, [pc, #156]	; (1d664 <__swsetup_r+0xe8>)
   1d5c8:	429c      	cmp	r4, r3
   1d5ca:	d1e8      	bne.n	1d59e <__swsetup_r+0x22>
   1d5cc:	68ec      	ldr	r4, [r5, #12]
   1d5ce:	e7e6      	b.n	1d59e <__swsetup_r+0x22>
   1d5d0:	075b      	lsls	r3, r3, #29
   1d5d2:	d513      	bpl.n	1d5fc <__swsetup_r+0x80>
   1d5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1d5d6:	2900      	cmp	r1, #0
   1d5d8:	d008      	beq.n	1d5ec <__swsetup_r+0x70>
   1d5da:	0023      	movs	r3, r4
   1d5dc:	3344      	adds	r3, #68	; 0x44
   1d5de:	4299      	cmp	r1, r3
   1d5e0:	d002      	beq.n	1d5e8 <__swsetup_r+0x6c>
   1d5e2:	0030      	movs	r0, r6
   1d5e4:	f7fe fe22 	bl	1c22c <_free_r>
   1d5e8:	2300      	movs	r3, #0
   1d5ea:	6363      	str	r3, [r4, #52]	; 0x34
   1d5ec:	2224      	movs	r2, #36	; 0x24
   1d5ee:	89a3      	ldrh	r3, [r4, #12]
   1d5f0:	4393      	bics	r3, r2
   1d5f2:	81a3      	strh	r3, [r4, #12]
   1d5f4:	2300      	movs	r3, #0
   1d5f6:	6063      	str	r3, [r4, #4]
   1d5f8:	6923      	ldr	r3, [r4, #16]
   1d5fa:	6023      	str	r3, [r4, #0]
   1d5fc:	2308      	movs	r3, #8
   1d5fe:	89a2      	ldrh	r2, [r4, #12]
   1d600:	4313      	orrs	r3, r2
   1d602:	81a3      	strh	r3, [r4, #12]
   1d604:	6923      	ldr	r3, [r4, #16]
   1d606:	2b00      	cmp	r3, #0
   1d608:	d10b      	bne.n	1d622 <__swsetup_r+0xa6>
   1d60a:	21a0      	movs	r1, #160	; 0xa0
   1d60c:	2280      	movs	r2, #128	; 0x80
   1d60e:	89a3      	ldrh	r3, [r4, #12]
   1d610:	0089      	lsls	r1, r1, #2
   1d612:	0092      	lsls	r2, r2, #2
   1d614:	400b      	ands	r3, r1
   1d616:	4293      	cmp	r3, r2
   1d618:	d003      	beq.n	1d622 <__swsetup_r+0xa6>
   1d61a:	0021      	movs	r1, r4
   1d61c:	0030      	movs	r0, r6
   1d61e:	f7fe fd5d 	bl	1c0dc <__smakebuf_r>
   1d622:	2301      	movs	r3, #1
   1d624:	89a2      	ldrh	r2, [r4, #12]
   1d626:	4013      	ands	r3, r2
   1d628:	d011      	beq.n	1d64e <__swsetup_r+0xd2>
   1d62a:	2300      	movs	r3, #0
   1d62c:	60a3      	str	r3, [r4, #8]
   1d62e:	6963      	ldr	r3, [r4, #20]
   1d630:	425b      	negs	r3, r3
   1d632:	61a3      	str	r3, [r4, #24]
   1d634:	2000      	movs	r0, #0
   1d636:	6923      	ldr	r3, [r4, #16]
   1d638:	4283      	cmp	r3, r0
   1d63a:	d1be      	bne.n	1d5ba <__swsetup_r+0x3e>
   1d63c:	230c      	movs	r3, #12
   1d63e:	5ee2      	ldrsh	r2, [r4, r3]
   1d640:	0613      	lsls	r3, r2, #24
   1d642:	d5ba      	bpl.n	1d5ba <__swsetup_r+0x3e>
   1d644:	2340      	movs	r3, #64	; 0x40
   1d646:	4313      	orrs	r3, r2
   1d648:	81a3      	strh	r3, [r4, #12]
   1d64a:	3801      	subs	r0, #1
   1d64c:	e7b5      	b.n	1d5ba <__swsetup_r+0x3e>
   1d64e:	0792      	lsls	r2, r2, #30
   1d650:	d400      	bmi.n	1d654 <__swsetup_r+0xd8>
   1d652:	6963      	ldr	r3, [r4, #20]
   1d654:	60a3      	str	r3, [r4, #8]
   1d656:	e7ed      	b.n	1d634 <__swsetup_r+0xb8>
   1d658:	2000022c 	.word	0x2000022c
   1d65c:	00021af0 	.word	0x00021af0
   1d660:	00021b10 	.word	0x00021b10
   1d664:	00021ad0 	.word	0x00021ad0

0001d668 <_close_r>:
   1d668:	2300      	movs	r3, #0
   1d66a:	b570      	push	{r4, r5, r6, lr}
   1d66c:	4c06      	ldr	r4, [pc, #24]	; (1d688 <_close_r+0x20>)
   1d66e:	0005      	movs	r5, r0
   1d670:	0008      	movs	r0, r1
   1d672:	6023      	str	r3, [r4, #0]
   1d674:	f7e2 fed6 	bl	424 <_close>
   1d678:	1c43      	adds	r3, r0, #1
   1d67a:	d103      	bne.n	1d684 <_close_r+0x1c>
   1d67c:	6823      	ldr	r3, [r4, #0]
   1d67e:	2b00      	cmp	r3, #0
   1d680:	d000      	beq.n	1d684 <_close_r+0x1c>
   1d682:	602b      	str	r3, [r5, #0]
   1d684:	bd70      	pop	{r4, r5, r6, pc}
   1d686:	46c0      	nop			; (mov r8, r8)
   1d688:	20002c04 	.word	0x20002c04

0001d68c <_fstat_r>:
   1d68c:	2300      	movs	r3, #0
   1d68e:	b570      	push	{r4, r5, r6, lr}
   1d690:	4c06      	ldr	r4, [pc, #24]	; (1d6ac <_fstat_r+0x20>)
   1d692:	0005      	movs	r5, r0
   1d694:	0008      	movs	r0, r1
   1d696:	0011      	movs	r1, r2
   1d698:	6023      	str	r3, [r4, #0]
   1d69a:	f7e2 fecd 	bl	438 <_fstat>
   1d69e:	1c43      	adds	r3, r0, #1
   1d6a0:	d103      	bne.n	1d6aa <_fstat_r+0x1e>
   1d6a2:	6823      	ldr	r3, [r4, #0]
   1d6a4:	2b00      	cmp	r3, #0
   1d6a6:	d000      	beq.n	1d6aa <_fstat_r+0x1e>
   1d6a8:	602b      	str	r3, [r5, #0]
   1d6aa:	bd70      	pop	{r4, r5, r6, pc}
   1d6ac:	20002c04 	.word	0x20002c04

0001d6b0 <rshift>:
   1d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6b2:	0006      	movs	r6, r0
   1d6b4:	6905      	ldr	r5, [r0, #16]
   1d6b6:	3614      	adds	r6, #20
   1d6b8:	114b      	asrs	r3, r1, #5
   1d6ba:	0034      	movs	r4, r6
   1d6bc:	42ab      	cmp	r3, r5
   1d6be:	da1a      	bge.n	1d6f6 <rshift+0x46>
   1d6c0:	221f      	movs	r2, #31
   1d6c2:	00ad      	lsls	r5, r5, #2
   1d6c4:	009b      	lsls	r3, r3, #2
   1d6c6:	1975      	adds	r5, r6, r5
   1d6c8:	18f3      	adds	r3, r6, r3
   1d6ca:	4011      	ands	r1, r2
   1d6cc:	d107      	bne.n	1d6de <rshift+0x2e>
   1d6ce:	001a      	movs	r2, r3
   1d6d0:	0033      	movs	r3, r6
   1d6d2:	001c      	movs	r4, r3
   1d6d4:	4295      	cmp	r5, r2
   1d6d6:	d90e      	bls.n	1d6f6 <rshift+0x46>
   1d6d8:	ca02      	ldmia	r2!, {r1}
   1d6da:	c302      	stmia	r3!, {r1}
   1d6dc:	e7f9      	b.n	1d6d2 <rshift+0x22>
   1d6de:	cb04      	ldmia	r3!, {r2}
   1d6e0:	2720      	movs	r7, #32
   1d6e2:	40ca      	lsrs	r2, r1
   1d6e4:	46b4      	mov	ip, r6
   1d6e6:	1a7f      	subs	r7, r7, r1
   1d6e8:	4664      	mov	r4, ip
   1d6ea:	429d      	cmp	r5, r3
   1d6ec:	d809      	bhi.n	1d702 <rshift+0x52>
   1d6ee:	6022      	str	r2, [r4, #0]
   1d6f0:	2a00      	cmp	r2, #0
   1d6f2:	d000      	beq.n	1d6f6 <rshift+0x46>
   1d6f4:	3404      	adds	r4, #4
   1d6f6:	1ba3      	subs	r3, r4, r6
   1d6f8:	109b      	asrs	r3, r3, #2
   1d6fa:	6103      	str	r3, [r0, #16]
   1d6fc:	d100      	bne.n	1d700 <rshift+0x50>
   1d6fe:	6143      	str	r3, [r0, #20]
   1d700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d702:	681c      	ldr	r4, [r3, #0]
   1d704:	40bc      	lsls	r4, r7
   1d706:	4322      	orrs	r2, r4
   1d708:	4664      	mov	r4, ip
   1d70a:	c404      	stmia	r4!, {r2}
   1d70c:	cb04      	ldmia	r3!, {r2}
   1d70e:	46a4      	mov	ip, r4
   1d710:	40ca      	lsrs	r2, r1
   1d712:	e7e9      	b.n	1d6e8 <rshift+0x38>

0001d714 <__hexdig_fun>:
   1d714:	0003      	movs	r3, r0
   1d716:	3b30      	subs	r3, #48	; 0x30
   1d718:	2b09      	cmp	r3, #9
   1d71a:	d803      	bhi.n	1d724 <__hexdig_fun+0x10>
   1d71c:	3820      	subs	r0, #32
   1d71e:	b2c3      	uxtb	r3, r0
   1d720:	0018      	movs	r0, r3
   1d722:	4770      	bx	lr
   1d724:	0003      	movs	r3, r0
   1d726:	3b61      	subs	r3, #97	; 0x61
   1d728:	2b05      	cmp	r3, #5
   1d72a:	d801      	bhi.n	1d730 <__hexdig_fun+0x1c>
   1d72c:	3847      	subs	r0, #71	; 0x47
   1d72e:	e7f6      	b.n	1d71e <__hexdig_fun+0xa>
   1d730:	0002      	movs	r2, r0
   1d732:	3a41      	subs	r2, #65	; 0x41
   1d734:	2300      	movs	r3, #0
   1d736:	2a05      	cmp	r2, #5
   1d738:	d8f2      	bhi.n	1d720 <__hexdig_fun+0xc>
   1d73a:	3827      	subs	r0, #39	; 0x27
   1d73c:	e7ef      	b.n	1d71e <__hexdig_fun+0xa>

0001d73e <__gethex>:
   1d73e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d740:	b08d      	sub	sp, #52	; 0x34
   1d742:	9005      	str	r0, [sp, #20]
   1d744:	9814      	ldr	r0, [sp, #80]	; 0x50
   1d746:	9109      	str	r1, [sp, #36]	; 0x24
   1d748:	9202      	str	r2, [sp, #8]
   1d74a:	930a      	str	r3, [sp, #40]	; 0x28
   1d74c:	f000 faee 	bl	1dd2c <__localeconv_l>
   1d750:	6803      	ldr	r3, [r0, #0]
   1d752:	0018      	movs	r0, r3
   1d754:	9307      	str	r3, [sp, #28]
   1d756:	f7ff f83c 	bl	1c7d2 <strlen>
   1d75a:	2202      	movs	r2, #2
   1d75c:	9b07      	ldr	r3, [sp, #28]
   1d75e:	4252      	negs	r2, r2
   1d760:	181b      	adds	r3, r3, r0
   1d762:	3b01      	subs	r3, #1
   1d764:	781b      	ldrb	r3, [r3, #0]
   1d766:	9004      	str	r0, [sp, #16]
   1d768:	930b      	str	r3, [sp, #44]	; 0x2c
   1d76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d76c:	6819      	ldr	r1, [r3, #0]
   1d76e:	1c8b      	adds	r3, r1, #2
   1d770:	1a52      	subs	r2, r2, r1
   1d772:	18d1      	adds	r1, r2, r3
   1d774:	9301      	str	r3, [sp, #4]
   1d776:	9108      	str	r1, [sp, #32]
   1d778:	9901      	ldr	r1, [sp, #4]
   1d77a:	3301      	adds	r3, #1
   1d77c:	7808      	ldrb	r0, [r1, #0]
   1d77e:	2830      	cmp	r0, #48	; 0x30
   1d780:	d0f7      	beq.n	1d772 <__gethex+0x34>
   1d782:	f7ff ffc7 	bl	1d714 <__hexdig_fun>
   1d786:	1e07      	subs	r7, r0, #0
   1d788:	d000      	beq.n	1d78c <__gethex+0x4e>
   1d78a:	e06b      	b.n	1d864 <__gethex+0x126>
   1d78c:	9a04      	ldr	r2, [sp, #16]
   1d78e:	9907      	ldr	r1, [sp, #28]
   1d790:	9801      	ldr	r0, [sp, #4]
   1d792:	f7ff f825 	bl	1c7e0 <strncmp>
   1d796:	2800      	cmp	r0, #0
   1d798:	d000      	beq.n	1d79c <__gethex+0x5e>
   1d79a:	e06b      	b.n	1d874 <__gethex+0x136>
   1d79c:	9b01      	ldr	r3, [sp, #4]
   1d79e:	9a04      	ldr	r2, [sp, #16]
   1d7a0:	189c      	adds	r4, r3, r2
   1d7a2:	7820      	ldrb	r0, [r4, #0]
   1d7a4:	f7ff ffb6 	bl	1d714 <__hexdig_fun>
   1d7a8:	2800      	cmp	r0, #0
   1d7aa:	d067      	beq.n	1d87c <__gethex+0x13e>
   1d7ac:	9401      	str	r4, [sp, #4]
   1d7ae:	9b01      	ldr	r3, [sp, #4]
   1d7b0:	7818      	ldrb	r0, [r3, #0]
   1d7b2:	2830      	cmp	r0, #48	; 0x30
   1d7b4:	d052      	beq.n	1d85c <__gethex+0x11e>
   1d7b6:	f7ff ffad 	bl	1d714 <__hexdig_fun>
   1d7ba:	4243      	negs	r3, r0
   1d7bc:	4143      	adcs	r3, r0
   1d7be:	9303      	str	r3, [sp, #12]
   1d7c0:	2301      	movs	r3, #1
   1d7c2:	0026      	movs	r6, r4
   1d7c4:	9308      	str	r3, [sp, #32]
   1d7c6:	9c01      	ldr	r4, [sp, #4]
   1d7c8:	7820      	ldrb	r0, [r4, #0]
   1d7ca:	f7ff ffa3 	bl	1d714 <__hexdig_fun>
   1d7ce:	2800      	cmp	r0, #0
   1d7d0:	d14c      	bne.n	1d86c <__gethex+0x12e>
   1d7d2:	9a04      	ldr	r2, [sp, #16]
   1d7d4:	9907      	ldr	r1, [sp, #28]
   1d7d6:	0020      	movs	r0, r4
   1d7d8:	f7ff f802 	bl	1c7e0 <strncmp>
   1d7dc:	2800      	cmp	r0, #0
   1d7de:	d109      	bne.n	1d7f4 <__gethex+0xb6>
   1d7e0:	2e00      	cmp	r6, #0
   1d7e2:	d109      	bne.n	1d7f8 <__gethex+0xba>
   1d7e4:	9b04      	ldr	r3, [sp, #16]
   1d7e6:	18e4      	adds	r4, r4, r3
   1d7e8:	0026      	movs	r6, r4
   1d7ea:	7820      	ldrb	r0, [r4, #0]
   1d7ec:	f7ff ff92 	bl	1d714 <__hexdig_fun>
   1d7f0:	2800      	cmp	r0, #0
   1d7f2:	d13d      	bne.n	1d870 <__gethex+0x132>
   1d7f4:	1e37      	subs	r7, r6, #0
   1d7f6:	d001      	beq.n	1d7fc <__gethex+0xbe>
   1d7f8:	1b37      	subs	r7, r6, r4
   1d7fa:	00bf      	lsls	r7, r7, #2
   1d7fc:	7823      	ldrb	r3, [r4, #0]
   1d7fe:	2b50      	cmp	r3, #80	; 0x50
   1d800:	d001      	beq.n	1d806 <__gethex+0xc8>
   1d802:	2b70      	cmp	r3, #112	; 0x70
   1d804:	d147      	bne.n	1d896 <__gethex+0x158>
   1d806:	7863      	ldrb	r3, [r4, #1]
   1d808:	2b2b      	cmp	r3, #43	; 0x2b
   1d80a:	d03d      	beq.n	1d888 <__gethex+0x14a>
   1d80c:	2b2d      	cmp	r3, #45	; 0x2d
   1d80e:	d037      	beq.n	1d880 <__gethex+0x142>
   1d810:	2300      	movs	r3, #0
   1d812:	1c66      	adds	r6, r4, #1
   1d814:	9306      	str	r3, [sp, #24]
   1d816:	7830      	ldrb	r0, [r6, #0]
   1d818:	f7ff ff7c 	bl	1d714 <__hexdig_fun>
   1d81c:	1e43      	subs	r3, r0, #1
   1d81e:	b2db      	uxtb	r3, r3
   1d820:	2b18      	cmp	r3, #24
   1d822:	d838      	bhi.n	1d896 <__gethex+0x158>
   1d824:	3810      	subs	r0, #16
   1d826:	0005      	movs	r5, r0
   1d828:	3601      	adds	r6, #1
   1d82a:	7830      	ldrb	r0, [r6, #0]
   1d82c:	f7ff ff72 	bl	1d714 <__hexdig_fun>
   1d830:	1e43      	subs	r3, r0, #1
   1d832:	b2db      	uxtb	r3, r3
   1d834:	2b18      	cmp	r3, #24
   1d836:	d929      	bls.n	1d88c <__gethex+0x14e>
   1d838:	9b06      	ldr	r3, [sp, #24]
   1d83a:	2b00      	cmp	r3, #0
   1d83c:	d000      	beq.n	1d840 <__gethex+0x102>
   1d83e:	426d      	negs	r5, r5
   1d840:	197f      	adds	r7, r7, r5
   1d842:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d844:	601e      	str	r6, [r3, #0]
   1d846:	9b03      	ldr	r3, [sp, #12]
   1d848:	2b00      	cmp	r3, #0
   1d84a:	d026      	beq.n	1d89a <__gethex+0x15c>
   1d84c:	2600      	movs	r6, #0
   1d84e:	9b08      	ldr	r3, [sp, #32]
   1d850:	42b3      	cmp	r3, r6
   1d852:	d100      	bne.n	1d856 <__gethex+0x118>
   1d854:	3606      	adds	r6, #6
   1d856:	0030      	movs	r0, r6
   1d858:	b00d      	add	sp, #52	; 0x34
   1d85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d85c:	9b01      	ldr	r3, [sp, #4]
   1d85e:	3301      	adds	r3, #1
   1d860:	9301      	str	r3, [sp, #4]
   1d862:	e7a4      	b.n	1d7ae <__gethex+0x70>
   1d864:	2300      	movs	r3, #0
   1d866:	9303      	str	r3, [sp, #12]
   1d868:	001e      	movs	r6, r3
   1d86a:	e7ac      	b.n	1d7c6 <__gethex+0x88>
   1d86c:	3401      	adds	r4, #1
   1d86e:	e7ab      	b.n	1d7c8 <__gethex+0x8a>
   1d870:	3401      	adds	r4, #1
   1d872:	e7ba      	b.n	1d7ea <__gethex+0xac>
   1d874:	9c01      	ldr	r4, [sp, #4]
   1d876:	2301      	movs	r3, #1
   1d878:	9303      	str	r3, [sp, #12]
   1d87a:	e7bf      	b.n	1d7fc <__gethex+0xbe>
   1d87c:	0007      	movs	r7, r0
   1d87e:	e7fa      	b.n	1d876 <__gethex+0x138>
   1d880:	2301      	movs	r3, #1
   1d882:	9306      	str	r3, [sp, #24]
   1d884:	1ca6      	adds	r6, r4, #2
   1d886:	e7c6      	b.n	1d816 <__gethex+0xd8>
   1d888:	2300      	movs	r3, #0
   1d88a:	e7fa      	b.n	1d882 <__gethex+0x144>
   1d88c:	230a      	movs	r3, #10
   1d88e:	435d      	muls	r5, r3
   1d890:	182d      	adds	r5, r5, r0
   1d892:	3d10      	subs	r5, #16
   1d894:	e7c8      	b.n	1d828 <__gethex+0xea>
   1d896:	0026      	movs	r6, r4
   1d898:	e7d3      	b.n	1d842 <__gethex+0x104>
   1d89a:	9b01      	ldr	r3, [sp, #4]
   1d89c:	9903      	ldr	r1, [sp, #12]
   1d89e:	1ae3      	subs	r3, r4, r3
   1d8a0:	3b01      	subs	r3, #1
   1d8a2:	2b07      	cmp	r3, #7
   1d8a4:	dc47      	bgt.n	1d936 <__gethex+0x1f8>
   1d8a6:	9805      	ldr	r0, [sp, #20]
   1d8a8:	f000 fa58 	bl	1dd5c <_Balloc>
   1d8ac:	0003      	movs	r3, r0
   1d8ae:	3314      	adds	r3, #20
   1d8b0:	9303      	str	r3, [sp, #12]
   1d8b2:	9308      	str	r3, [sp, #32]
   1d8b4:	2300      	movs	r3, #0
   1d8b6:	0005      	movs	r5, r0
   1d8b8:	001e      	movs	r6, r3
   1d8ba:	9306      	str	r3, [sp, #24]
   1d8bc:	9b01      	ldr	r3, [sp, #4]
   1d8be:	42a3      	cmp	r3, r4
   1d8c0:	d33c      	bcc.n	1d93c <__gethex+0x1fe>
   1d8c2:	9c08      	ldr	r4, [sp, #32]
   1d8c4:	9b03      	ldr	r3, [sp, #12]
   1d8c6:	c440      	stmia	r4!, {r6}
   1d8c8:	1ae4      	subs	r4, r4, r3
   1d8ca:	10a4      	asrs	r4, r4, #2
   1d8cc:	612c      	str	r4, [r5, #16]
   1d8ce:	0030      	movs	r0, r6
   1d8d0:	f000 fb10 	bl	1def4 <__hi0bits>
   1d8d4:	9b02      	ldr	r3, [sp, #8]
   1d8d6:	0164      	lsls	r4, r4, #5
   1d8d8:	681b      	ldr	r3, [r3, #0]
   1d8da:	1a26      	subs	r6, r4, r0
   1d8dc:	9301      	str	r3, [sp, #4]
   1d8de:	429e      	cmp	r6, r3
   1d8e0:	dd5f      	ble.n	1d9a2 <__gethex+0x264>
   1d8e2:	1af6      	subs	r6, r6, r3
   1d8e4:	0031      	movs	r1, r6
   1d8e6:	0028      	movs	r0, r5
   1d8e8:	f000 fe09 	bl	1e4fe <__any_on>
   1d8ec:	1e04      	subs	r4, r0, #0
   1d8ee:	d00f      	beq.n	1d910 <__gethex+0x1d2>
   1d8f0:	2401      	movs	r4, #1
   1d8f2:	211f      	movs	r1, #31
   1d8f4:	0020      	movs	r0, r4
   1d8f6:	1e73      	subs	r3, r6, #1
   1d8f8:	4019      	ands	r1, r3
   1d8fa:	4088      	lsls	r0, r1
   1d8fc:	0001      	movs	r1, r0
   1d8fe:	115a      	asrs	r2, r3, #5
   1d900:	9803      	ldr	r0, [sp, #12]
   1d902:	0092      	lsls	r2, r2, #2
   1d904:	5812      	ldr	r2, [r2, r0]
   1d906:	420a      	tst	r2, r1
   1d908:	d002      	beq.n	1d910 <__gethex+0x1d2>
   1d90a:	42a3      	cmp	r3, r4
   1d90c:	dc41      	bgt.n	1d992 <__gethex+0x254>
   1d90e:	2402      	movs	r4, #2
   1d910:	0031      	movs	r1, r6
   1d912:	0028      	movs	r0, r5
   1d914:	f7ff fecc 	bl	1d6b0 <rshift>
   1d918:	19bf      	adds	r7, r7, r6
   1d91a:	9b02      	ldr	r3, [sp, #8]
   1d91c:	689b      	ldr	r3, [r3, #8]
   1d91e:	9304      	str	r3, [sp, #16]
   1d920:	429f      	cmp	r7, r3
   1d922:	dd4e      	ble.n	1d9c2 <__gethex+0x284>
   1d924:	0029      	movs	r1, r5
   1d926:	9805      	ldr	r0, [sp, #20]
   1d928:	f000 fa50 	bl	1ddcc <_Bfree>
   1d92c:	2300      	movs	r3, #0
   1d92e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1d930:	26a3      	movs	r6, #163	; 0xa3
   1d932:	6013      	str	r3, [r2, #0]
   1d934:	e78f      	b.n	1d856 <__gethex+0x118>
   1d936:	3101      	adds	r1, #1
   1d938:	105b      	asrs	r3, r3, #1
   1d93a:	e7b2      	b.n	1d8a2 <__gethex+0x164>
   1d93c:	1e63      	subs	r3, r4, #1
   1d93e:	9309      	str	r3, [sp, #36]	; 0x24
   1d940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d942:	781b      	ldrb	r3, [r3, #0]
   1d944:	4293      	cmp	r3, r2
   1d946:	d015      	beq.n	1d974 <__gethex+0x236>
   1d948:	9b06      	ldr	r3, [sp, #24]
   1d94a:	2b20      	cmp	r3, #32
   1d94c:	d105      	bne.n	1d95a <__gethex+0x21c>
   1d94e:	9b08      	ldr	r3, [sp, #32]
   1d950:	601e      	str	r6, [r3, #0]
   1d952:	2600      	movs	r6, #0
   1d954:	3304      	adds	r3, #4
   1d956:	9308      	str	r3, [sp, #32]
   1d958:	9606      	str	r6, [sp, #24]
   1d95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d95c:	7818      	ldrb	r0, [r3, #0]
   1d95e:	f7ff fed9 	bl	1d714 <__hexdig_fun>
   1d962:	230f      	movs	r3, #15
   1d964:	4018      	ands	r0, r3
   1d966:	9b06      	ldr	r3, [sp, #24]
   1d968:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1d96a:	4098      	lsls	r0, r3
   1d96c:	3304      	adds	r3, #4
   1d96e:	4306      	orrs	r6, r0
   1d970:	9306      	str	r3, [sp, #24]
   1d972:	e7a3      	b.n	1d8bc <__gethex+0x17e>
   1d974:	2301      	movs	r3, #1
   1d976:	9a04      	ldr	r2, [sp, #16]
   1d978:	1a9c      	subs	r4, r3, r2
   1d97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d97c:	191c      	adds	r4, r3, r4
   1d97e:	9b01      	ldr	r3, [sp, #4]
   1d980:	42a3      	cmp	r3, r4
   1d982:	d8e1      	bhi.n	1d948 <__gethex+0x20a>
   1d984:	9907      	ldr	r1, [sp, #28]
   1d986:	0020      	movs	r0, r4
   1d988:	f7fe ff2a 	bl	1c7e0 <strncmp>
   1d98c:	2800      	cmp	r0, #0
   1d98e:	d095      	beq.n	1d8bc <__gethex+0x17e>
   1d990:	e7da      	b.n	1d948 <__gethex+0x20a>
   1d992:	1eb1      	subs	r1, r6, #2
   1d994:	0028      	movs	r0, r5
   1d996:	f000 fdb2 	bl	1e4fe <__any_on>
   1d99a:	2800      	cmp	r0, #0
   1d99c:	d0b7      	beq.n	1d90e <__gethex+0x1d0>
   1d99e:	2403      	movs	r4, #3
   1d9a0:	e7b6      	b.n	1d910 <__gethex+0x1d2>
   1d9a2:	9b01      	ldr	r3, [sp, #4]
   1d9a4:	2400      	movs	r4, #0
   1d9a6:	429e      	cmp	r6, r3
   1d9a8:	dab7      	bge.n	1d91a <__gethex+0x1dc>
   1d9aa:	1b9e      	subs	r6, r3, r6
   1d9ac:	0029      	movs	r1, r5
   1d9ae:	0032      	movs	r2, r6
   1d9b0:	9805      	ldr	r0, [sp, #20]
   1d9b2:	f000 fbd3 	bl	1e15c <__lshift>
   1d9b6:	0003      	movs	r3, r0
   1d9b8:	3314      	adds	r3, #20
   1d9ba:	0005      	movs	r5, r0
   1d9bc:	1bbf      	subs	r7, r7, r6
   1d9be:	9303      	str	r3, [sp, #12]
   1d9c0:	e7ab      	b.n	1d91a <__gethex+0x1dc>
   1d9c2:	9b02      	ldr	r3, [sp, #8]
   1d9c4:	685e      	ldr	r6, [r3, #4]
   1d9c6:	42b7      	cmp	r7, r6
   1d9c8:	da6b      	bge.n	1daa2 <__gethex+0x364>
   1d9ca:	9b01      	ldr	r3, [sp, #4]
   1d9cc:	1bf6      	subs	r6, r6, r7
   1d9ce:	42b3      	cmp	r3, r6
   1d9d0:	dc32      	bgt.n	1da38 <__gethex+0x2fa>
   1d9d2:	9b02      	ldr	r3, [sp, #8]
   1d9d4:	68db      	ldr	r3, [r3, #12]
   1d9d6:	2b02      	cmp	r3, #2
   1d9d8:	d026      	beq.n	1da28 <__gethex+0x2ea>
   1d9da:	2b03      	cmp	r3, #3
   1d9dc:	d028      	beq.n	1da30 <__gethex+0x2f2>
   1d9de:	2b01      	cmp	r3, #1
   1d9e0:	d119      	bne.n	1da16 <__gethex+0x2d8>
   1d9e2:	9b01      	ldr	r3, [sp, #4]
   1d9e4:	42b3      	cmp	r3, r6
   1d9e6:	d116      	bne.n	1da16 <__gethex+0x2d8>
   1d9e8:	2b01      	cmp	r3, #1
   1d9ea:	dc0d      	bgt.n	1da08 <__gethex+0x2ca>
   1d9ec:	9b02      	ldr	r3, [sp, #8]
   1d9ee:	2662      	movs	r6, #98	; 0x62
   1d9f0:	685b      	ldr	r3, [r3, #4]
   1d9f2:	9301      	str	r3, [sp, #4]
   1d9f4:	9a01      	ldr	r2, [sp, #4]
   1d9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d9f8:	601a      	str	r2, [r3, #0]
   1d9fa:	2301      	movs	r3, #1
   1d9fc:	9a03      	ldr	r2, [sp, #12]
   1d9fe:	612b      	str	r3, [r5, #16]
   1da00:	6013      	str	r3, [r2, #0]
   1da02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1da04:	601d      	str	r5, [r3, #0]
   1da06:	e726      	b.n	1d856 <__gethex+0x118>
   1da08:	9901      	ldr	r1, [sp, #4]
   1da0a:	0028      	movs	r0, r5
   1da0c:	3901      	subs	r1, #1
   1da0e:	f000 fd76 	bl	1e4fe <__any_on>
   1da12:	2800      	cmp	r0, #0
   1da14:	d1ea      	bne.n	1d9ec <__gethex+0x2ae>
   1da16:	0029      	movs	r1, r5
   1da18:	9805      	ldr	r0, [sp, #20]
   1da1a:	f000 f9d7 	bl	1ddcc <_Bfree>
   1da1e:	2300      	movs	r3, #0
   1da20:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1da22:	2650      	movs	r6, #80	; 0x50
   1da24:	6013      	str	r3, [r2, #0]
   1da26:	e716      	b.n	1d856 <__gethex+0x118>
   1da28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1da2a:	2b00      	cmp	r3, #0
   1da2c:	d0de      	beq.n	1d9ec <__gethex+0x2ae>
   1da2e:	e7f2      	b.n	1da16 <__gethex+0x2d8>
   1da30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1da32:	2b00      	cmp	r3, #0
   1da34:	d1da      	bne.n	1d9ec <__gethex+0x2ae>
   1da36:	e7ee      	b.n	1da16 <__gethex+0x2d8>
   1da38:	1e77      	subs	r7, r6, #1
   1da3a:	2c00      	cmp	r4, #0
   1da3c:	d12f      	bne.n	1da9e <__gethex+0x360>
   1da3e:	2f00      	cmp	r7, #0
   1da40:	d004      	beq.n	1da4c <__gethex+0x30e>
   1da42:	0039      	movs	r1, r7
   1da44:	0028      	movs	r0, r5
   1da46:	f000 fd5a 	bl	1e4fe <__any_on>
   1da4a:	0004      	movs	r4, r0
   1da4c:	231f      	movs	r3, #31
   1da4e:	117a      	asrs	r2, r7, #5
   1da50:	401f      	ands	r7, r3
   1da52:	3b1e      	subs	r3, #30
   1da54:	40bb      	lsls	r3, r7
   1da56:	9903      	ldr	r1, [sp, #12]
   1da58:	0092      	lsls	r2, r2, #2
   1da5a:	5852      	ldr	r2, [r2, r1]
   1da5c:	421a      	tst	r2, r3
   1da5e:	d001      	beq.n	1da64 <__gethex+0x326>
   1da60:	2302      	movs	r3, #2
   1da62:	431c      	orrs	r4, r3
   1da64:	9b01      	ldr	r3, [sp, #4]
   1da66:	0031      	movs	r1, r6
   1da68:	1b9b      	subs	r3, r3, r6
   1da6a:	2602      	movs	r6, #2
   1da6c:	0028      	movs	r0, r5
   1da6e:	9301      	str	r3, [sp, #4]
   1da70:	f7ff fe1e 	bl	1d6b0 <rshift>
   1da74:	9b02      	ldr	r3, [sp, #8]
   1da76:	685f      	ldr	r7, [r3, #4]
   1da78:	2c00      	cmp	r4, #0
   1da7a:	d041      	beq.n	1db00 <__gethex+0x3c2>
   1da7c:	9b02      	ldr	r3, [sp, #8]
   1da7e:	68db      	ldr	r3, [r3, #12]
   1da80:	2b02      	cmp	r3, #2
   1da82:	d010      	beq.n	1daa6 <__gethex+0x368>
   1da84:	2b03      	cmp	r3, #3
   1da86:	d012      	beq.n	1daae <__gethex+0x370>
   1da88:	2b01      	cmp	r3, #1
   1da8a:	d106      	bne.n	1da9a <__gethex+0x35c>
   1da8c:	07a2      	lsls	r2, r4, #30
   1da8e:	d504      	bpl.n	1da9a <__gethex+0x35c>
   1da90:	9a03      	ldr	r2, [sp, #12]
   1da92:	6812      	ldr	r2, [r2, #0]
   1da94:	4314      	orrs	r4, r2
   1da96:	421c      	tst	r4, r3
   1da98:	d10c      	bne.n	1dab4 <__gethex+0x376>
   1da9a:	2310      	movs	r3, #16
   1da9c:	e02f      	b.n	1dafe <__gethex+0x3c0>
   1da9e:	2401      	movs	r4, #1
   1daa0:	e7d4      	b.n	1da4c <__gethex+0x30e>
   1daa2:	2601      	movs	r6, #1
   1daa4:	e7e8      	b.n	1da78 <__gethex+0x33a>
   1daa6:	2301      	movs	r3, #1
   1daa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1daaa:	1a9b      	subs	r3, r3, r2
   1daac:	9313      	str	r3, [sp, #76]	; 0x4c
   1daae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1dab0:	2b00      	cmp	r3, #0
   1dab2:	d0f2      	beq.n	1da9a <__gethex+0x35c>
   1dab4:	692c      	ldr	r4, [r5, #16]
   1dab6:	00a3      	lsls	r3, r4, #2
   1dab8:	9304      	str	r3, [sp, #16]
   1daba:	002b      	movs	r3, r5
   1dabc:	00a2      	lsls	r2, r4, #2
   1dabe:	3314      	adds	r3, #20
   1dac0:	1899      	adds	r1, r3, r2
   1dac2:	2200      	movs	r2, #0
   1dac4:	4694      	mov	ip, r2
   1dac6:	681a      	ldr	r2, [r3, #0]
   1dac8:	1c50      	adds	r0, r2, #1
   1daca:	d01e      	beq.n	1db0a <__gethex+0x3cc>
   1dacc:	3201      	adds	r2, #1
   1dace:	601a      	str	r2, [r3, #0]
   1dad0:	002b      	movs	r3, r5
   1dad2:	3314      	adds	r3, #20
   1dad4:	2e02      	cmp	r6, #2
   1dad6:	d13b      	bne.n	1db50 <__gethex+0x412>
   1dad8:	9a02      	ldr	r2, [sp, #8]
   1dada:	9901      	ldr	r1, [sp, #4]
   1dadc:	6812      	ldr	r2, [r2, #0]
   1dade:	3a01      	subs	r2, #1
   1dae0:	4291      	cmp	r1, r2
   1dae2:	d10b      	bne.n	1dafc <__gethex+0x3be>
   1dae4:	114a      	asrs	r2, r1, #5
   1dae6:	211f      	movs	r1, #31
   1dae8:	9801      	ldr	r0, [sp, #4]
   1daea:	0092      	lsls	r2, r2, #2
   1daec:	4001      	ands	r1, r0
   1daee:	2001      	movs	r0, #1
   1daf0:	0004      	movs	r4, r0
   1daf2:	408c      	lsls	r4, r1
   1daf4:	58d3      	ldr	r3, [r2, r3]
   1daf6:	4223      	tst	r3, r4
   1daf8:	d000      	beq.n	1dafc <__gethex+0x3be>
   1dafa:	2601      	movs	r6, #1
   1dafc:	2320      	movs	r3, #32
   1dafe:	431e      	orrs	r6, r3
   1db00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1db02:	601d      	str	r5, [r3, #0]
   1db04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1db06:	601f      	str	r7, [r3, #0]
   1db08:	e6a5      	b.n	1d856 <__gethex+0x118>
   1db0a:	4662      	mov	r2, ip
   1db0c:	c304      	stmia	r3!, {r2}
   1db0e:	4299      	cmp	r1, r3
   1db10:	d8d9      	bhi.n	1dac6 <__gethex+0x388>
   1db12:	68ab      	ldr	r3, [r5, #8]
   1db14:	429c      	cmp	r4, r3
   1db16:	db12      	blt.n	1db3e <__gethex+0x400>
   1db18:	686b      	ldr	r3, [r5, #4]
   1db1a:	9805      	ldr	r0, [sp, #20]
   1db1c:	1c59      	adds	r1, r3, #1
   1db1e:	f000 f91d 	bl	1dd5c <_Balloc>
   1db22:	0029      	movs	r1, r5
   1db24:	692b      	ldr	r3, [r5, #16]
   1db26:	9003      	str	r0, [sp, #12]
   1db28:	1c9a      	adds	r2, r3, #2
   1db2a:	0092      	lsls	r2, r2, #2
   1db2c:	310c      	adds	r1, #12
   1db2e:	300c      	adds	r0, #12
   1db30:	f7fe fb58 	bl	1c1e4 <memcpy>
   1db34:	0029      	movs	r1, r5
   1db36:	9805      	ldr	r0, [sp, #20]
   1db38:	f000 f948 	bl	1ddcc <_Bfree>
   1db3c:	9d03      	ldr	r5, [sp, #12]
   1db3e:	692b      	ldr	r3, [r5, #16]
   1db40:	1c5a      	adds	r2, r3, #1
   1db42:	612a      	str	r2, [r5, #16]
   1db44:	2201      	movs	r2, #1
   1db46:	3304      	adds	r3, #4
   1db48:	009b      	lsls	r3, r3, #2
   1db4a:	18eb      	adds	r3, r5, r3
   1db4c:	605a      	str	r2, [r3, #4]
   1db4e:	e7bf      	b.n	1dad0 <__gethex+0x392>
   1db50:	692a      	ldr	r2, [r5, #16]
   1db52:	4294      	cmp	r4, r2
   1db54:	da0a      	bge.n	1db6c <__gethex+0x42e>
   1db56:	2101      	movs	r1, #1
   1db58:	0028      	movs	r0, r5
   1db5a:	f7ff fda9 	bl	1d6b0 <rshift>
   1db5e:	9b02      	ldr	r3, [sp, #8]
   1db60:	3701      	adds	r7, #1
   1db62:	689b      	ldr	r3, [r3, #8]
   1db64:	429f      	cmp	r7, r3
   1db66:	dd00      	ble.n	1db6a <__gethex+0x42c>
   1db68:	e6dc      	b.n	1d924 <__gethex+0x1e6>
   1db6a:	e7c6      	b.n	1dafa <__gethex+0x3bc>
   1db6c:	241f      	movs	r4, #31
   1db6e:	9a01      	ldr	r2, [sp, #4]
   1db70:	2601      	movs	r6, #1
   1db72:	4022      	ands	r2, r4
   1db74:	1e14      	subs	r4, r2, #0
   1db76:	d0c1      	beq.n	1dafc <__gethex+0x3be>
   1db78:	9a04      	ldr	r2, [sp, #16]
   1db7a:	189b      	adds	r3, r3, r2
   1db7c:	3b04      	subs	r3, #4
   1db7e:	6818      	ldr	r0, [r3, #0]
   1db80:	f000 f9b8 	bl	1def4 <__hi0bits>
   1db84:	2120      	movs	r1, #32
   1db86:	1b0c      	subs	r4, r1, r4
   1db88:	42a0      	cmp	r0, r4
   1db8a:	dbe4      	blt.n	1db56 <__gethex+0x418>
   1db8c:	e7b6      	b.n	1dafc <__gethex+0x3be>

0001db8e <L_shift>:
   1db8e:	2308      	movs	r3, #8
   1db90:	b570      	push	{r4, r5, r6, lr}
   1db92:	2520      	movs	r5, #32
   1db94:	1a9a      	subs	r2, r3, r2
   1db96:	0092      	lsls	r2, r2, #2
   1db98:	1aad      	subs	r5, r5, r2
   1db9a:	6843      	ldr	r3, [r0, #4]
   1db9c:	6806      	ldr	r6, [r0, #0]
   1db9e:	001c      	movs	r4, r3
   1dba0:	40ac      	lsls	r4, r5
   1dba2:	40d3      	lsrs	r3, r2
   1dba4:	4334      	orrs	r4, r6
   1dba6:	c010      	stmia	r0!, {r4}
   1dba8:	6003      	str	r3, [r0, #0]
   1dbaa:	4288      	cmp	r0, r1
   1dbac:	d3f5      	bcc.n	1db9a <L_shift+0xc>
   1dbae:	bd70      	pop	{r4, r5, r6, pc}

0001dbb0 <__match>:
   1dbb0:	b530      	push	{r4, r5, lr}
   1dbb2:	6803      	ldr	r3, [r0, #0]
   1dbb4:	780c      	ldrb	r4, [r1, #0]
   1dbb6:	3301      	adds	r3, #1
   1dbb8:	2c00      	cmp	r4, #0
   1dbba:	d102      	bne.n	1dbc2 <__match+0x12>
   1dbbc:	6003      	str	r3, [r0, #0]
   1dbbe:	2001      	movs	r0, #1
   1dbc0:	bd30      	pop	{r4, r5, pc}
   1dbc2:	781a      	ldrb	r2, [r3, #0]
   1dbc4:	0015      	movs	r5, r2
   1dbc6:	3d41      	subs	r5, #65	; 0x41
   1dbc8:	2d19      	cmp	r5, #25
   1dbca:	d800      	bhi.n	1dbce <__match+0x1e>
   1dbcc:	3220      	adds	r2, #32
   1dbce:	3101      	adds	r1, #1
   1dbd0:	42a2      	cmp	r2, r4
   1dbd2:	d0ef      	beq.n	1dbb4 <__match+0x4>
   1dbd4:	2000      	movs	r0, #0
   1dbd6:	e7f3      	b.n	1dbc0 <__match+0x10>

0001dbd8 <__hexnan>:
   1dbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dbda:	b08b      	sub	sp, #44	; 0x2c
   1dbdc:	9201      	str	r2, [sp, #4]
   1dbde:	680a      	ldr	r2, [r1, #0]
   1dbe0:	9901      	ldr	r1, [sp, #4]
   1dbe2:	1153      	asrs	r3, r2, #5
   1dbe4:	009b      	lsls	r3, r3, #2
   1dbe6:	18cb      	adds	r3, r1, r3
   1dbe8:	9303      	str	r3, [sp, #12]
   1dbea:	231f      	movs	r3, #31
   1dbec:	401a      	ands	r2, r3
   1dbee:	9008      	str	r0, [sp, #32]
   1dbf0:	9206      	str	r2, [sp, #24]
   1dbf2:	d002      	beq.n	1dbfa <__hexnan+0x22>
   1dbf4:	9b03      	ldr	r3, [sp, #12]
   1dbf6:	3304      	adds	r3, #4
   1dbf8:	9303      	str	r3, [sp, #12]
   1dbfa:	9b03      	ldr	r3, [sp, #12]
   1dbfc:	2500      	movs	r5, #0
   1dbfe:	1f1e      	subs	r6, r3, #4
   1dc00:	0037      	movs	r7, r6
   1dc02:	0034      	movs	r4, r6
   1dc04:	9b08      	ldr	r3, [sp, #32]
   1dc06:	6035      	str	r5, [r6, #0]
   1dc08:	681b      	ldr	r3, [r3, #0]
   1dc0a:	9507      	str	r5, [sp, #28]
   1dc0c:	9304      	str	r3, [sp, #16]
   1dc0e:	9502      	str	r5, [sp, #8]
   1dc10:	9b04      	ldr	r3, [sp, #16]
   1dc12:	3301      	adds	r3, #1
   1dc14:	9309      	str	r3, [sp, #36]	; 0x24
   1dc16:	9b04      	ldr	r3, [sp, #16]
   1dc18:	785b      	ldrb	r3, [r3, #1]
   1dc1a:	9305      	str	r3, [sp, #20]
   1dc1c:	2b00      	cmp	r3, #0
   1dc1e:	d028      	beq.n	1dc72 <__hexnan+0x9a>
   1dc20:	9805      	ldr	r0, [sp, #20]
   1dc22:	f7ff fd77 	bl	1d714 <__hexdig_fun>
   1dc26:	2800      	cmp	r0, #0
   1dc28:	d145      	bne.n	1dcb6 <__hexnan+0xde>
   1dc2a:	9b05      	ldr	r3, [sp, #20]
   1dc2c:	2b20      	cmp	r3, #32
   1dc2e:	d819      	bhi.n	1dc64 <__hexnan+0x8c>
   1dc30:	9b02      	ldr	r3, [sp, #8]
   1dc32:	9a07      	ldr	r2, [sp, #28]
   1dc34:	4293      	cmp	r3, r2
   1dc36:	dd12      	ble.n	1dc5e <__hexnan+0x86>
   1dc38:	42bc      	cmp	r4, r7
   1dc3a:	d206      	bcs.n	1dc4a <__hexnan+0x72>
   1dc3c:	2d07      	cmp	r5, #7
   1dc3e:	dc04      	bgt.n	1dc4a <__hexnan+0x72>
   1dc40:	002a      	movs	r2, r5
   1dc42:	0039      	movs	r1, r7
   1dc44:	0020      	movs	r0, r4
   1dc46:	f7ff ffa2 	bl	1db8e <L_shift>
   1dc4a:	9b01      	ldr	r3, [sp, #4]
   1dc4c:	2508      	movs	r5, #8
   1dc4e:	429c      	cmp	r4, r3
   1dc50:	d905      	bls.n	1dc5e <__hexnan+0x86>
   1dc52:	1f27      	subs	r7, r4, #4
   1dc54:	2500      	movs	r5, #0
   1dc56:	003c      	movs	r4, r7
   1dc58:	9b02      	ldr	r3, [sp, #8]
   1dc5a:	603d      	str	r5, [r7, #0]
   1dc5c:	9307      	str	r3, [sp, #28]
   1dc5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dc60:	9304      	str	r3, [sp, #16]
   1dc62:	e7d5      	b.n	1dc10 <__hexnan+0x38>
   1dc64:	9b05      	ldr	r3, [sp, #20]
   1dc66:	2b29      	cmp	r3, #41	; 0x29
   1dc68:	d14a      	bne.n	1dd00 <__hexnan+0x128>
   1dc6a:	9b04      	ldr	r3, [sp, #16]
   1dc6c:	9a08      	ldr	r2, [sp, #32]
   1dc6e:	3302      	adds	r3, #2
   1dc70:	6013      	str	r3, [r2, #0]
   1dc72:	9b02      	ldr	r3, [sp, #8]
   1dc74:	2b00      	cmp	r3, #0
   1dc76:	d043      	beq.n	1dd00 <__hexnan+0x128>
   1dc78:	42bc      	cmp	r4, r7
   1dc7a:	d206      	bcs.n	1dc8a <__hexnan+0xb2>
   1dc7c:	2d07      	cmp	r5, #7
   1dc7e:	dc04      	bgt.n	1dc8a <__hexnan+0xb2>
   1dc80:	002a      	movs	r2, r5
   1dc82:	0039      	movs	r1, r7
   1dc84:	0020      	movs	r0, r4
   1dc86:	f7ff ff82 	bl	1db8e <L_shift>
   1dc8a:	9b01      	ldr	r3, [sp, #4]
   1dc8c:	429c      	cmp	r4, r3
   1dc8e:	d926      	bls.n	1dcde <__hexnan+0x106>
   1dc90:	cc04      	ldmia	r4!, {r2}
   1dc92:	601a      	str	r2, [r3, #0]
   1dc94:	3304      	adds	r3, #4
   1dc96:	42a6      	cmp	r6, r4
   1dc98:	d2fa      	bcs.n	1dc90 <__hexnan+0xb8>
   1dc9a:	2200      	movs	r2, #0
   1dc9c:	c304      	stmia	r3!, {r2}
   1dc9e:	429e      	cmp	r6, r3
   1dca0:	d2fc      	bcs.n	1dc9c <__hexnan+0xc4>
   1dca2:	6833      	ldr	r3, [r6, #0]
   1dca4:	2b00      	cmp	r3, #0
   1dca6:	d104      	bne.n	1dcb2 <__hexnan+0xda>
   1dca8:	9b01      	ldr	r3, [sp, #4]
   1dcaa:	429e      	cmp	r6, r3
   1dcac:	d126      	bne.n	1dcfc <__hexnan+0x124>
   1dcae:	2301      	movs	r3, #1
   1dcb0:	6033      	str	r3, [r6, #0]
   1dcb2:	2005      	movs	r0, #5
   1dcb4:	e025      	b.n	1dd02 <__hexnan+0x12a>
   1dcb6:	9b02      	ldr	r3, [sp, #8]
   1dcb8:	3501      	adds	r5, #1
   1dcba:	3301      	adds	r3, #1
   1dcbc:	9302      	str	r3, [sp, #8]
   1dcbe:	2d08      	cmp	r5, #8
   1dcc0:	dd06      	ble.n	1dcd0 <__hexnan+0xf8>
   1dcc2:	9b01      	ldr	r3, [sp, #4]
   1dcc4:	429c      	cmp	r4, r3
   1dcc6:	d9ca      	bls.n	1dc5e <__hexnan+0x86>
   1dcc8:	2300      	movs	r3, #0
   1dcca:	2501      	movs	r5, #1
   1dccc:	3c04      	subs	r4, #4
   1dcce:	6023      	str	r3, [r4, #0]
   1dcd0:	220f      	movs	r2, #15
   1dcd2:	6823      	ldr	r3, [r4, #0]
   1dcd4:	4010      	ands	r0, r2
   1dcd6:	011b      	lsls	r3, r3, #4
   1dcd8:	4318      	orrs	r0, r3
   1dcda:	6020      	str	r0, [r4, #0]
   1dcdc:	e7bf      	b.n	1dc5e <__hexnan+0x86>
   1dcde:	9b06      	ldr	r3, [sp, #24]
   1dce0:	2b00      	cmp	r3, #0
   1dce2:	d0de      	beq.n	1dca2 <__hexnan+0xca>
   1dce4:	2120      	movs	r1, #32
   1dce6:	9a06      	ldr	r2, [sp, #24]
   1dce8:	9b03      	ldr	r3, [sp, #12]
   1dcea:	1a89      	subs	r1, r1, r2
   1dcec:	2201      	movs	r2, #1
   1dcee:	4252      	negs	r2, r2
   1dcf0:	40ca      	lsrs	r2, r1
   1dcf2:	3b04      	subs	r3, #4
   1dcf4:	6819      	ldr	r1, [r3, #0]
   1dcf6:	400a      	ands	r2, r1
   1dcf8:	601a      	str	r2, [r3, #0]
   1dcfa:	e7d2      	b.n	1dca2 <__hexnan+0xca>
   1dcfc:	3e04      	subs	r6, #4
   1dcfe:	e7d0      	b.n	1dca2 <__hexnan+0xca>
   1dd00:	2004      	movs	r0, #4
   1dd02:	b00b      	add	sp, #44	; 0x2c
   1dd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001dd08 <_isatty_r>:
   1dd08:	2300      	movs	r3, #0
   1dd0a:	b570      	push	{r4, r5, r6, lr}
   1dd0c:	4c06      	ldr	r4, [pc, #24]	; (1dd28 <_isatty_r+0x20>)
   1dd0e:	0005      	movs	r5, r0
   1dd10:	0008      	movs	r0, r1
   1dd12:	6023      	str	r3, [r4, #0]
   1dd14:	f7e2 fb9e 	bl	454 <_isatty>
   1dd18:	1c43      	adds	r3, r0, #1
   1dd1a:	d103      	bne.n	1dd24 <_isatty_r+0x1c>
   1dd1c:	6823      	ldr	r3, [r4, #0]
   1dd1e:	2b00      	cmp	r3, #0
   1dd20:	d000      	beq.n	1dd24 <_isatty_r+0x1c>
   1dd22:	602b      	str	r3, [r5, #0]
   1dd24:	bd70      	pop	{r4, r5, r6, pc}
   1dd26:	46c0      	nop			; (mov r8, r8)
   1dd28:	20002c04 	.word	0x20002c04

0001dd2c <__localeconv_l>:
   1dd2c:	30f0      	adds	r0, #240	; 0xf0
   1dd2e:	4770      	bx	lr

0001dd30 <_lseek_r>:
   1dd30:	b570      	push	{r4, r5, r6, lr}
   1dd32:	0005      	movs	r5, r0
   1dd34:	0008      	movs	r0, r1
   1dd36:	0011      	movs	r1, r2
   1dd38:	2200      	movs	r2, #0
   1dd3a:	4c06      	ldr	r4, [pc, #24]	; (1dd54 <_lseek_r+0x24>)
   1dd3c:	6022      	str	r2, [r4, #0]
   1dd3e:	001a      	movs	r2, r3
   1dd40:	f7e2 fb91 	bl	466 <_lseek>
   1dd44:	1c43      	adds	r3, r0, #1
   1dd46:	d103      	bne.n	1dd50 <_lseek_r+0x20>
   1dd48:	6823      	ldr	r3, [r4, #0]
   1dd4a:	2b00      	cmp	r3, #0
   1dd4c:	d000      	beq.n	1dd50 <_lseek_r+0x20>
   1dd4e:	602b      	str	r3, [r5, #0]
   1dd50:	bd70      	pop	{r4, r5, r6, pc}
   1dd52:	46c0      	nop			; (mov r8, r8)
   1dd54:	20002c04 	.word	0x20002c04

0001dd58 <__malloc_lock>:
   1dd58:	4770      	bx	lr

0001dd5a <__malloc_unlock>:
   1dd5a:	4770      	bx	lr

0001dd5c <_Balloc>:
   1dd5c:	b570      	push	{r4, r5, r6, lr}
   1dd5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1dd60:	0004      	movs	r4, r0
   1dd62:	000d      	movs	r5, r1
   1dd64:	2e00      	cmp	r6, #0
   1dd66:	d107      	bne.n	1dd78 <_Balloc+0x1c>
   1dd68:	2010      	movs	r0, #16
   1dd6a:	f7fe f9fb 	bl	1c164 <malloc>
   1dd6e:	6260      	str	r0, [r4, #36]	; 0x24
   1dd70:	6046      	str	r6, [r0, #4]
   1dd72:	6086      	str	r6, [r0, #8]
   1dd74:	6006      	str	r6, [r0, #0]
   1dd76:	60c6      	str	r6, [r0, #12]
   1dd78:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1dd7a:	68f3      	ldr	r3, [r6, #12]
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	d013      	beq.n	1dda8 <_Balloc+0x4c>
   1dd80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd82:	00aa      	lsls	r2, r5, #2
   1dd84:	68db      	ldr	r3, [r3, #12]
   1dd86:	189b      	adds	r3, r3, r2
   1dd88:	6818      	ldr	r0, [r3, #0]
   1dd8a:	2800      	cmp	r0, #0
   1dd8c:	d118      	bne.n	1ddc0 <_Balloc+0x64>
   1dd8e:	2101      	movs	r1, #1
   1dd90:	000e      	movs	r6, r1
   1dd92:	40ae      	lsls	r6, r5
   1dd94:	1d72      	adds	r2, r6, #5
   1dd96:	0092      	lsls	r2, r2, #2
   1dd98:	0020      	movs	r0, r4
   1dd9a:	f000 fbd2 	bl	1e542 <_calloc_r>
   1dd9e:	2800      	cmp	r0, #0
   1dda0:	d00c      	beq.n	1ddbc <_Balloc+0x60>
   1dda2:	6045      	str	r5, [r0, #4]
   1dda4:	6086      	str	r6, [r0, #8]
   1dda6:	e00d      	b.n	1ddc4 <_Balloc+0x68>
   1dda8:	2221      	movs	r2, #33	; 0x21
   1ddaa:	2104      	movs	r1, #4
   1ddac:	0020      	movs	r0, r4
   1ddae:	f000 fbc8 	bl	1e542 <_calloc_r>
   1ddb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ddb4:	60f0      	str	r0, [r6, #12]
   1ddb6:	68db      	ldr	r3, [r3, #12]
   1ddb8:	2b00      	cmp	r3, #0
   1ddba:	d1e1      	bne.n	1dd80 <_Balloc+0x24>
   1ddbc:	2000      	movs	r0, #0
   1ddbe:	bd70      	pop	{r4, r5, r6, pc}
   1ddc0:	6802      	ldr	r2, [r0, #0]
   1ddc2:	601a      	str	r2, [r3, #0]
   1ddc4:	2300      	movs	r3, #0
   1ddc6:	6103      	str	r3, [r0, #16]
   1ddc8:	60c3      	str	r3, [r0, #12]
   1ddca:	e7f8      	b.n	1ddbe <_Balloc+0x62>

0001ddcc <_Bfree>:
   1ddcc:	b570      	push	{r4, r5, r6, lr}
   1ddce:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1ddd0:	0006      	movs	r6, r0
   1ddd2:	000d      	movs	r5, r1
   1ddd4:	2c00      	cmp	r4, #0
   1ddd6:	d107      	bne.n	1dde8 <_Bfree+0x1c>
   1ddd8:	2010      	movs	r0, #16
   1ddda:	f7fe f9c3 	bl	1c164 <malloc>
   1ddde:	6270      	str	r0, [r6, #36]	; 0x24
   1dde0:	6044      	str	r4, [r0, #4]
   1dde2:	6084      	str	r4, [r0, #8]
   1dde4:	6004      	str	r4, [r0, #0]
   1dde6:	60c4      	str	r4, [r0, #12]
   1dde8:	2d00      	cmp	r5, #0
   1ddea:	d007      	beq.n	1ddfc <_Bfree+0x30>
   1ddec:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1ddee:	686a      	ldr	r2, [r5, #4]
   1ddf0:	68db      	ldr	r3, [r3, #12]
   1ddf2:	0092      	lsls	r2, r2, #2
   1ddf4:	189b      	adds	r3, r3, r2
   1ddf6:	681a      	ldr	r2, [r3, #0]
   1ddf8:	602a      	str	r2, [r5, #0]
   1ddfa:	601d      	str	r5, [r3, #0]
   1ddfc:	bd70      	pop	{r4, r5, r6, pc}

0001ddfe <__multadd>:
   1ddfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1de00:	001e      	movs	r6, r3
   1de02:	2314      	movs	r3, #20
   1de04:	469c      	mov	ip, r3
   1de06:	0007      	movs	r7, r0
   1de08:	000c      	movs	r4, r1
   1de0a:	2000      	movs	r0, #0
   1de0c:	690d      	ldr	r5, [r1, #16]
   1de0e:	448c      	add	ip, r1
   1de10:	4663      	mov	r3, ip
   1de12:	8819      	ldrh	r1, [r3, #0]
   1de14:	681b      	ldr	r3, [r3, #0]
   1de16:	4351      	muls	r1, r2
   1de18:	0c1b      	lsrs	r3, r3, #16
   1de1a:	4353      	muls	r3, r2
   1de1c:	1989      	adds	r1, r1, r6
   1de1e:	0c0e      	lsrs	r6, r1, #16
   1de20:	199b      	adds	r3, r3, r6
   1de22:	b289      	uxth	r1, r1
   1de24:	0c1e      	lsrs	r6, r3, #16
   1de26:	041b      	lsls	r3, r3, #16
   1de28:	185b      	adds	r3, r3, r1
   1de2a:	4661      	mov	r1, ip
   1de2c:	3001      	adds	r0, #1
   1de2e:	c108      	stmia	r1!, {r3}
   1de30:	468c      	mov	ip, r1
   1de32:	4285      	cmp	r5, r0
   1de34:	dcec      	bgt.n	1de10 <__multadd+0x12>
   1de36:	2e00      	cmp	r6, #0
   1de38:	d01b      	beq.n	1de72 <__multadd+0x74>
   1de3a:	68a3      	ldr	r3, [r4, #8]
   1de3c:	429d      	cmp	r5, r3
   1de3e:	db12      	blt.n	1de66 <__multadd+0x68>
   1de40:	6863      	ldr	r3, [r4, #4]
   1de42:	0038      	movs	r0, r7
   1de44:	1c59      	adds	r1, r3, #1
   1de46:	f7ff ff89 	bl	1dd5c <_Balloc>
   1de4a:	0021      	movs	r1, r4
   1de4c:	6923      	ldr	r3, [r4, #16]
   1de4e:	9001      	str	r0, [sp, #4]
   1de50:	1c9a      	adds	r2, r3, #2
   1de52:	0092      	lsls	r2, r2, #2
   1de54:	310c      	adds	r1, #12
   1de56:	300c      	adds	r0, #12
   1de58:	f7fe f9c4 	bl	1c1e4 <memcpy>
   1de5c:	0021      	movs	r1, r4
   1de5e:	0038      	movs	r0, r7
   1de60:	f7ff ffb4 	bl	1ddcc <_Bfree>
   1de64:	9c01      	ldr	r4, [sp, #4]
   1de66:	1d2b      	adds	r3, r5, #4
   1de68:	009b      	lsls	r3, r3, #2
   1de6a:	18e3      	adds	r3, r4, r3
   1de6c:	3501      	adds	r5, #1
   1de6e:	605e      	str	r6, [r3, #4]
   1de70:	6125      	str	r5, [r4, #16]
   1de72:	0020      	movs	r0, r4
   1de74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001de76 <__s2b>:
   1de76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1de78:	0006      	movs	r6, r0
   1de7a:	0018      	movs	r0, r3
   1de7c:	000c      	movs	r4, r1
   1de7e:	3008      	adds	r0, #8
   1de80:	2109      	movs	r1, #9
   1de82:	9301      	str	r3, [sp, #4]
   1de84:	0015      	movs	r5, r2
   1de86:	f7fc f805 	bl	19e94 <__divsi3>
   1de8a:	2301      	movs	r3, #1
   1de8c:	2100      	movs	r1, #0
   1de8e:	4283      	cmp	r3, r0
   1de90:	db20      	blt.n	1ded4 <__s2b+0x5e>
   1de92:	0030      	movs	r0, r6
   1de94:	f7ff ff62 	bl	1dd5c <_Balloc>
   1de98:	9b08      	ldr	r3, [sp, #32]
   1de9a:	6143      	str	r3, [r0, #20]
   1de9c:	2301      	movs	r3, #1
   1de9e:	6103      	str	r3, [r0, #16]
   1dea0:	2d09      	cmp	r5, #9
   1dea2:	dd1a      	ble.n	1deda <__s2b+0x64>
   1dea4:	0023      	movs	r3, r4
   1dea6:	3309      	adds	r3, #9
   1dea8:	001f      	movs	r7, r3
   1deaa:	9300      	str	r3, [sp, #0]
   1deac:	1964      	adds	r4, r4, r5
   1deae:	783b      	ldrb	r3, [r7, #0]
   1deb0:	0001      	movs	r1, r0
   1deb2:	3b30      	subs	r3, #48	; 0x30
   1deb4:	220a      	movs	r2, #10
   1deb6:	0030      	movs	r0, r6
   1deb8:	3701      	adds	r7, #1
   1deba:	f7ff ffa0 	bl	1ddfe <__multadd>
   1debe:	42a7      	cmp	r7, r4
   1dec0:	d1f5      	bne.n	1deae <__s2b+0x38>
   1dec2:	002c      	movs	r4, r5
   1dec4:	9b00      	ldr	r3, [sp, #0]
   1dec6:	3c08      	subs	r4, #8
   1dec8:	191c      	adds	r4, r3, r4
   1deca:	002f      	movs	r7, r5
   1decc:	9b01      	ldr	r3, [sp, #4]
   1dece:	429f      	cmp	r7, r3
   1ded0:	db06      	blt.n	1dee0 <__s2b+0x6a>
   1ded2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1ded4:	005b      	lsls	r3, r3, #1
   1ded6:	3101      	adds	r1, #1
   1ded8:	e7d9      	b.n	1de8e <__s2b+0x18>
   1deda:	340a      	adds	r4, #10
   1dedc:	2509      	movs	r5, #9
   1dede:	e7f4      	b.n	1deca <__s2b+0x54>
   1dee0:	1b63      	subs	r3, r4, r5
   1dee2:	5ddb      	ldrb	r3, [r3, r7]
   1dee4:	0001      	movs	r1, r0
   1dee6:	3b30      	subs	r3, #48	; 0x30
   1dee8:	220a      	movs	r2, #10
   1deea:	0030      	movs	r0, r6
   1deec:	f7ff ff87 	bl	1ddfe <__multadd>
   1def0:	3701      	adds	r7, #1
   1def2:	e7eb      	b.n	1decc <__s2b+0x56>

0001def4 <__hi0bits>:
   1def4:	0003      	movs	r3, r0
   1def6:	0c02      	lsrs	r2, r0, #16
   1def8:	2000      	movs	r0, #0
   1defa:	4282      	cmp	r2, r0
   1defc:	d101      	bne.n	1df02 <__hi0bits+0xe>
   1defe:	041b      	lsls	r3, r3, #16
   1df00:	3010      	adds	r0, #16
   1df02:	0e1a      	lsrs	r2, r3, #24
   1df04:	d101      	bne.n	1df0a <__hi0bits+0x16>
   1df06:	3008      	adds	r0, #8
   1df08:	021b      	lsls	r3, r3, #8
   1df0a:	0f1a      	lsrs	r2, r3, #28
   1df0c:	d101      	bne.n	1df12 <__hi0bits+0x1e>
   1df0e:	3004      	adds	r0, #4
   1df10:	011b      	lsls	r3, r3, #4
   1df12:	0f9a      	lsrs	r2, r3, #30
   1df14:	d101      	bne.n	1df1a <__hi0bits+0x26>
   1df16:	3002      	adds	r0, #2
   1df18:	009b      	lsls	r3, r3, #2
   1df1a:	2b00      	cmp	r3, #0
   1df1c:	db03      	blt.n	1df26 <__hi0bits+0x32>
   1df1e:	3001      	adds	r0, #1
   1df20:	005b      	lsls	r3, r3, #1
   1df22:	d400      	bmi.n	1df26 <__hi0bits+0x32>
   1df24:	2020      	movs	r0, #32
   1df26:	4770      	bx	lr

0001df28 <__lo0bits>:
   1df28:	2207      	movs	r2, #7
   1df2a:	6803      	ldr	r3, [r0, #0]
   1df2c:	b510      	push	{r4, lr}
   1df2e:	0001      	movs	r1, r0
   1df30:	401a      	ands	r2, r3
   1df32:	d00d      	beq.n	1df50 <__lo0bits+0x28>
   1df34:	2401      	movs	r4, #1
   1df36:	2000      	movs	r0, #0
   1df38:	4223      	tst	r3, r4
   1df3a:	d105      	bne.n	1df48 <__lo0bits+0x20>
   1df3c:	3002      	adds	r0, #2
   1df3e:	4203      	tst	r3, r0
   1df40:	d003      	beq.n	1df4a <__lo0bits+0x22>
   1df42:	40e3      	lsrs	r3, r4
   1df44:	0020      	movs	r0, r4
   1df46:	600b      	str	r3, [r1, #0]
   1df48:	bd10      	pop	{r4, pc}
   1df4a:	089b      	lsrs	r3, r3, #2
   1df4c:	600b      	str	r3, [r1, #0]
   1df4e:	e7fb      	b.n	1df48 <__lo0bits+0x20>
   1df50:	b29c      	uxth	r4, r3
   1df52:	0010      	movs	r0, r2
   1df54:	2c00      	cmp	r4, #0
   1df56:	d101      	bne.n	1df5c <__lo0bits+0x34>
   1df58:	2010      	movs	r0, #16
   1df5a:	0c1b      	lsrs	r3, r3, #16
   1df5c:	b2da      	uxtb	r2, r3
   1df5e:	2a00      	cmp	r2, #0
   1df60:	d101      	bne.n	1df66 <__lo0bits+0x3e>
   1df62:	3008      	adds	r0, #8
   1df64:	0a1b      	lsrs	r3, r3, #8
   1df66:	071a      	lsls	r2, r3, #28
   1df68:	d101      	bne.n	1df6e <__lo0bits+0x46>
   1df6a:	3004      	adds	r0, #4
   1df6c:	091b      	lsrs	r3, r3, #4
   1df6e:	079a      	lsls	r2, r3, #30
   1df70:	d101      	bne.n	1df76 <__lo0bits+0x4e>
   1df72:	3002      	adds	r0, #2
   1df74:	089b      	lsrs	r3, r3, #2
   1df76:	07da      	lsls	r2, r3, #31
   1df78:	d4e8      	bmi.n	1df4c <__lo0bits+0x24>
   1df7a:	085b      	lsrs	r3, r3, #1
   1df7c:	d001      	beq.n	1df82 <__lo0bits+0x5a>
   1df7e:	3001      	adds	r0, #1
   1df80:	e7e4      	b.n	1df4c <__lo0bits+0x24>
   1df82:	2020      	movs	r0, #32
   1df84:	e7e0      	b.n	1df48 <__lo0bits+0x20>

0001df86 <__i2b>:
   1df86:	b510      	push	{r4, lr}
   1df88:	000c      	movs	r4, r1
   1df8a:	2101      	movs	r1, #1
   1df8c:	f7ff fee6 	bl	1dd5c <_Balloc>
   1df90:	2301      	movs	r3, #1
   1df92:	6144      	str	r4, [r0, #20]
   1df94:	6103      	str	r3, [r0, #16]
   1df96:	bd10      	pop	{r4, pc}

0001df98 <__multiply>:
   1df98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df9a:	690b      	ldr	r3, [r1, #16]
   1df9c:	0015      	movs	r5, r2
   1df9e:	6912      	ldr	r2, [r2, #16]
   1dfa0:	b089      	sub	sp, #36	; 0x24
   1dfa2:	000c      	movs	r4, r1
   1dfa4:	4293      	cmp	r3, r2
   1dfa6:	da01      	bge.n	1dfac <__multiply+0x14>
   1dfa8:	002c      	movs	r4, r5
   1dfaa:	000d      	movs	r5, r1
   1dfac:	6927      	ldr	r7, [r4, #16]
   1dfae:	692e      	ldr	r6, [r5, #16]
   1dfb0:	68a2      	ldr	r2, [r4, #8]
   1dfb2:	19bb      	adds	r3, r7, r6
   1dfb4:	6861      	ldr	r1, [r4, #4]
   1dfb6:	9301      	str	r3, [sp, #4]
   1dfb8:	4293      	cmp	r3, r2
   1dfba:	dd00      	ble.n	1dfbe <__multiply+0x26>
   1dfbc:	3101      	adds	r1, #1
   1dfbe:	f7ff fecd 	bl	1dd5c <_Balloc>
   1dfc2:	0003      	movs	r3, r0
   1dfc4:	3314      	adds	r3, #20
   1dfc6:	9300      	str	r3, [sp, #0]
   1dfc8:	9a00      	ldr	r2, [sp, #0]
   1dfca:	19bb      	adds	r3, r7, r6
   1dfcc:	4694      	mov	ip, r2
   1dfce:	009b      	lsls	r3, r3, #2
   1dfd0:	449c      	add	ip, r3
   1dfd2:	0013      	movs	r3, r2
   1dfd4:	2200      	movs	r2, #0
   1dfd6:	9004      	str	r0, [sp, #16]
   1dfd8:	4563      	cmp	r3, ip
   1dfda:	d31c      	bcc.n	1e016 <__multiply+0x7e>
   1dfdc:	002a      	movs	r2, r5
   1dfde:	3414      	adds	r4, #20
   1dfe0:	00bf      	lsls	r7, r7, #2
   1dfe2:	19e3      	adds	r3, r4, r7
   1dfe4:	3214      	adds	r2, #20
   1dfe6:	00b6      	lsls	r6, r6, #2
   1dfe8:	9305      	str	r3, [sp, #20]
   1dfea:	1993      	adds	r3, r2, r6
   1dfec:	9402      	str	r4, [sp, #8]
   1dfee:	9306      	str	r3, [sp, #24]
   1dff0:	9b06      	ldr	r3, [sp, #24]
   1dff2:	429a      	cmp	r2, r3
   1dff4:	d311      	bcc.n	1e01a <__multiply+0x82>
   1dff6:	9b01      	ldr	r3, [sp, #4]
   1dff8:	2b00      	cmp	r3, #0
   1dffa:	dd06      	ble.n	1e00a <__multiply+0x72>
   1dffc:	2304      	movs	r3, #4
   1dffe:	425b      	negs	r3, r3
   1e000:	449c      	add	ip, r3
   1e002:	4663      	mov	r3, ip
   1e004:	681b      	ldr	r3, [r3, #0]
   1e006:	2b00      	cmp	r3, #0
   1e008:	d051      	beq.n	1e0ae <__multiply+0x116>
   1e00a:	9b04      	ldr	r3, [sp, #16]
   1e00c:	9a01      	ldr	r2, [sp, #4]
   1e00e:	0018      	movs	r0, r3
   1e010:	611a      	str	r2, [r3, #16]
   1e012:	b009      	add	sp, #36	; 0x24
   1e014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e016:	c304      	stmia	r3!, {r2}
   1e018:	e7de      	b.n	1dfd8 <__multiply+0x40>
   1e01a:	8814      	ldrh	r4, [r2, #0]
   1e01c:	2c00      	cmp	r4, #0
   1e01e:	d01e      	beq.n	1e05e <__multiply+0xc6>
   1e020:	2600      	movs	r6, #0
   1e022:	9d00      	ldr	r5, [sp, #0]
   1e024:	9f02      	ldr	r7, [sp, #8]
   1e026:	cf01      	ldmia	r7!, {r0}
   1e028:	9507      	str	r5, [sp, #28]
   1e02a:	cd08      	ldmia	r5!, {r3}
   1e02c:	9303      	str	r3, [sp, #12]
   1e02e:	b283      	uxth	r3, r0
   1e030:	4363      	muls	r3, r4
   1e032:	0019      	movs	r1, r3
   1e034:	466b      	mov	r3, sp
   1e036:	0c00      	lsrs	r0, r0, #16
   1e038:	899b      	ldrh	r3, [r3, #12]
   1e03a:	4360      	muls	r0, r4
   1e03c:	18cb      	adds	r3, r1, r3
   1e03e:	9903      	ldr	r1, [sp, #12]
   1e040:	199b      	adds	r3, r3, r6
   1e042:	0c09      	lsrs	r1, r1, #16
   1e044:	1841      	adds	r1, r0, r1
   1e046:	0c18      	lsrs	r0, r3, #16
   1e048:	1809      	adds	r1, r1, r0
   1e04a:	0c0e      	lsrs	r6, r1, #16
   1e04c:	b29b      	uxth	r3, r3
   1e04e:	0409      	lsls	r1, r1, #16
   1e050:	430b      	orrs	r3, r1
   1e052:	9907      	ldr	r1, [sp, #28]
   1e054:	600b      	str	r3, [r1, #0]
   1e056:	9b05      	ldr	r3, [sp, #20]
   1e058:	42bb      	cmp	r3, r7
   1e05a:	d8e4      	bhi.n	1e026 <__multiply+0x8e>
   1e05c:	602e      	str	r6, [r5, #0]
   1e05e:	6813      	ldr	r3, [r2, #0]
   1e060:	0c1b      	lsrs	r3, r3, #16
   1e062:	9303      	str	r3, [sp, #12]
   1e064:	d01e      	beq.n	1e0a4 <__multiply+0x10c>
   1e066:	2600      	movs	r6, #0
   1e068:	9b00      	ldr	r3, [sp, #0]
   1e06a:	9c02      	ldr	r4, [sp, #8]
   1e06c:	681b      	ldr	r3, [r3, #0]
   1e06e:	9800      	ldr	r0, [sp, #0]
   1e070:	0007      	movs	r7, r0
   1e072:	8821      	ldrh	r1, [r4, #0]
   1e074:	9d03      	ldr	r5, [sp, #12]
   1e076:	b29b      	uxth	r3, r3
   1e078:	4369      	muls	r1, r5
   1e07a:	c820      	ldmia	r0!, {r5}
   1e07c:	0c2d      	lsrs	r5, r5, #16
   1e07e:	1949      	adds	r1, r1, r5
   1e080:	198e      	adds	r6, r1, r6
   1e082:	0431      	lsls	r1, r6, #16
   1e084:	430b      	orrs	r3, r1
   1e086:	603b      	str	r3, [r7, #0]
   1e088:	cc08      	ldmia	r4!, {r3}
   1e08a:	9903      	ldr	r1, [sp, #12]
   1e08c:	0c1b      	lsrs	r3, r3, #16
   1e08e:	434b      	muls	r3, r1
   1e090:	6879      	ldr	r1, [r7, #4]
   1e092:	0c36      	lsrs	r6, r6, #16
   1e094:	b289      	uxth	r1, r1
   1e096:	185b      	adds	r3, r3, r1
   1e098:	9905      	ldr	r1, [sp, #20]
   1e09a:	199b      	adds	r3, r3, r6
   1e09c:	0c1e      	lsrs	r6, r3, #16
   1e09e:	42a1      	cmp	r1, r4
   1e0a0:	d8e6      	bhi.n	1e070 <__multiply+0xd8>
   1e0a2:	6003      	str	r3, [r0, #0]
   1e0a4:	9b00      	ldr	r3, [sp, #0]
   1e0a6:	3204      	adds	r2, #4
   1e0a8:	3304      	adds	r3, #4
   1e0aa:	9300      	str	r3, [sp, #0]
   1e0ac:	e7a0      	b.n	1dff0 <__multiply+0x58>
   1e0ae:	9b01      	ldr	r3, [sp, #4]
   1e0b0:	3b01      	subs	r3, #1
   1e0b2:	9301      	str	r3, [sp, #4]
   1e0b4:	e79f      	b.n	1dff6 <__multiply+0x5e>
	...

0001e0b8 <__pow5mult>:
   1e0b8:	2303      	movs	r3, #3
   1e0ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e0bc:	4013      	ands	r3, r2
   1e0be:	0005      	movs	r5, r0
   1e0c0:	000e      	movs	r6, r1
   1e0c2:	0014      	movs	r4, r2
   1e0c4:	2b00      	cmp	r3, #0
   1e0c6:	d008      	beq.n	1e0da <__pow5mult+0x22>
   1e0c8:	4922      	ldr	r1, [pc, #136]	; (1e154 <__pow5mult+0x9c>)
   1e0ca:	3b01      	subs	r3, #1
   1e0cc:	009a      	lsls	r2, r3, #2
   1e0ce:	5852      	ldr	r2, [r2, r1]
   1e0d0:	2300      	movs	r3, #0
   1e0d2:	0031      	movs	r1, r6
   1e0d4:	f7ff fe93 	bl	1ddfe <__multadd>
   1e0d8:	0006      	movs	r6, r0
   1e0da:	10a3      	asrs	r3, r4, #2
   1e0dc:	9301      	str	r3, [sp, #4]
   1e0de:	d036      	beq.n	1e14e <__pow5mult+0x96>
   1e0e0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1e0e2:	2c00      	cmp	r4, #0
   1e0e4:	d107      	bne.n	1e0f6 <__pow5mult+0x3e>
   1e0e6:	2010      	movs	r0, #16
   1e0e8:	f7fe f83c 	bl	1c164 <malloc>
   1e0ec:	6268      	str	r0, [r5, #36]	; 0x24
   1e0ee:	6044      	str	r4, [r0, #4]
   1e0f0:	6084      	str	r4, [r0, #8]
   1e0f2:	6004      	str	r4, [r0, #0]
   1e0f4:	60c4      	str	r4, [r0, #12]
   1e0f6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   1e0f8:	68bc      	ldr	r4, [r7, #8]
   1e0fa:	2c00      	cmp	r4, #0
   1e0fc:	d107      	bne.n	1e10e <__pow5mult+0x56>
   1e0fe:	4916      	ldr	r1, [pc, #88]	; (1e158 <__pow5mult+0xa0>)
   1e100:	0028      	movs	r0, r5
   1e102:	f7ff ff40 	bl	1df86 <__i2b>
   1e106:	2300      	movs	r3, #0
   1e108:	0004      	movs	r4, r0
   1e10a:	60b8      	str	r0, [r7, #8]
   1e10c:	6003      	str	r3, [r0, #0]
   1e10e:	2201      	movs	r2, #1
   1e110:	9b01      	ldr	r3, [sp, #4]
   1e112:	4213      	tst	r3, r2
   1e114:	d00a      	beq.n	1e12c <__pow5mult+0x74>
   1e116:	0031      	movs	r1, r6
   1e118:	0022      	movs	r2, r4
   1e11a:	0028      	movs	r0, r5
   1e11c:	f7ff ff3c 	bl	1df98 <__multiply>
   1e120:	0007      	movs	r7, r0
   1e122:	0031      	movs	r1, r6
   1e124:	0028      	movs	r0, r5
   1e126:	f7ff fe51 	bl	1ddcc <_Bfree>
   1e12a:	003e      	movs	r6, r7
   1e12c:	9b01      	ldr	r3, [sp, #4]
   1e12e:	105b      	asrs	r3, r3, #1
   1e130:	9301      	str	r3, [sp, #4]
   1e132:	d00c      	beq.n	1e14e <__pow5mult+0x96>
   1e134:	6820      	ldr	r0, [r4, #0]
   1e136:	2800      	cmp	r0, #0
   1e138:	d107      	bne.n	1e14a <__pow5mult+0x92>
   1e13a:	0022      	movs	r2, r4
   1e13c:	0021      	movs	r1, r4
   1e13e:	0028      	movs	r0, r5
   1e140:	f7ff ff2a 	bl	1df98 <__multiply>
   1e144:	2300      	movs	r3, #0
   1e146:	6020      	str	r0, [r4, #0]
   1e148:	6003      	str	r3, [r0, #0]
   1e14a:	0004      	movs	r4, r0
   1e14c:	e7df      	b.n	1e10e <__pow5mult+0x56>
   1e14e:	0030      	movs	r0, r6
   1e150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1e152:	46c0      	nop			; (mov r8, r8)
   1e154:	00021d98 	.word	0x00021d98
   1e158:	00000271 	.word	0x00000271

0001e15c <__lshift>:
   1e15c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e15e:	000d      	movs	r5, r1
   1e160:	0017      	movs	r7, r2
   1e162:	692b      	ldr	r3, [r5, #16]
   1e164:	1154      	asrs	r4, r2, #5
   1e166:	b085      	sub	sp, #20
   1e168:	18e3      	adds	r3, r4, r3
   1e16a:	9302      	str	r3, [sp, #8]
   1e16c:	3301      	adds	r3, #1
   1e16e:	9301      	str	r3, [sp, #4]
   1e170:	6849      	ldr	r1, [r1, #4]
   1e172:	68ab      	ldr	r3, [r5, #8]
   1e174:	9003      	str	r0, [sp, #12]
   1e176:	9a01      	ldr	r2, [sp, #4]
   1e178:	4293      	cmp	r3, r2
   1e17a:	db34      	blt.n	1e1e6 <__lshift+0x8a>
   1e17c:	9803      	ldr	r0, [sp, #12]
   1e17e:	f7ff fded 	bl	1dd5c <_Balloc>
   1e182:	2300      	movs	r3, #0
   1e184:	0002      	movs	r2, r0
   1e186:	0006      	movs	r6, r0
   1e188:	0019      	movs	r1, r3
   1e18a:	3214      	adds	r2, #20
   1e18c:	42a3      	cmp	r3, r4
   1e18e:	db2d      	blt.n	1e1ec <__lshift+0x90>
   1e190:	43e3      	mvns	r3, r4
   1e192:	17db      	asrs	r3, r3, #31
   1e194:	401c      	ands	r4, r3
   1e196:	002b      	movs	r3, r5
   1e198:	211f      	movs	r1, #31
   1e19a:	00a4      	lsls	r4, r4, #2
   1e19c:	1914      	adds	r4, r2, r4
   1e19e:	692a      	ldr	r2, [r5, #16]
   1e1a0:	3314      	adds	r3, #20
   1e1a2:	0092      	lsls	r2, r2, #2
   1e1a4:	189a      	adds	r2, r3, r2
   1e1a6:	400f      	ands	r7, r1
   1e1a8:	d024      	beq.n	1e1f4 <__lshift+0x98>
   1e1aa:	3101      	adds	r1, #1
   1e1ac:	1bc9      	subs	r1, r1, r7
   1e1ae:	468c      	mov	ip, r1
   1e1b0:	2100      	movs	r1, #0
   1e1b2:	6818      	ldr	r0, [r3, #0]
   1e1b4:	40b8      	lsls	r0, r7
   1e1b6:	4301      	orrs	r1, r0
   1e1b8:	4660      	mov	r0, ip
   1e1ba:	6021      	str	r1, [r4, #0]
   1e1bc:	cb02      	ldmia	r3!, {r1}
   1e1be:	3404      	adds	r4, #4
   1e1c0:	40c1      	lsrs	r1, r0
   1e1c2:	429a      	cmp	r2, r3
   1e1c4:	d8f5      	bhi.n	1e1b2 <__lshift+0x56>
   1e1c6:	6021      	str	r1, [r4, #0]
   1e1c8:	2900      	cmp	r1, #0
   1e1ca:	d002      	beq.n	1e1d2 <__lshift+0x76>
   1e1cc:	9b02      	ldr	r3, [sp, #8]
   1e1ce:	3302      	adds	r3, #2
   1e1d0:	9301      	str	r3, [sp, #4]
   1e1d2:	9b01      	ldr	r3, [sp, #4]
   1e1d4:	9803      	ldr	r0, [sp, #12]
   1e1d6:	3b01      	subs	r3, #1
   1e1d8:	6133      	str	r3, [r6, #16]
   1e1da:	0029      	movs	r1, r5
   1e1dc:	f7ff fdf6 	bl	1ddcc <_Bfree>
   1e1e0:	0030      	movs	r0, r6
   1e1e2:	b005      	add	sp, #20
   1e1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1e6:	3101      	adds	r1, #1
   1e1e8:	005b      	lsls	r3, r3, #1
   1e1ea:	e7c4      	b.n	1e176 <__lshift+0x1a>
   1e1ec:	0098      	lsls	r0, r3, #2
   1e1ee:	5011      	str	r1, [r2, r0]
   1e1f0:	3301      	adds	r3, #1
   1e1f2:	e7cb      	b.n	1e18c <__lshift+0x30>
   1e1f4:	cb02      	ldmia	r3!, {r1}
   1e1f6:	c402      	stmia	r4!, {r1}
   1e1f8:	429a      	cmp	r2, r3
   1e1fa:	d8fb      	bhi.n	1e1f4 <__lshift+0x98>
   1e1fc:	e7e9      	b.n	1e1d2 <__lshift+0x76>

0001e1fe <__mcmp>:
   1e1fe:	690a      	ldr	r2, [r1, #16]
   1e200:	6903      	ldr	r3, [r0, #16]
   1e202:	b530      	push	{r4, r5, lr}
   1e204:	1a9b      	subs	r3, r3, r2
   1e206:	d10e      	bne.n	1e226 <__mcmp+0x28>
   1e208:	0092      	lsls	r2, r2, #2
   1e20a:	3014      	adds	r0, #20
   1e20c:	3114      	adds	r1, #20
   1e20e:	1884      	adds	r4, r0, r2
   1e210:	1889      	adds	r1, r1, r2
   1e212:	3c04      	subs	r4, #4
   1e214:	3904      	subs	r1, #4
   1e216:	6822      	ldr	r2, [r4, #0]
   1e218:	680d      	ldr	r5, [r1, #0]
   1e21a:	42aa      	cmp	r2, r5
   1e21c:	d005      	beq.n	1e22a <__mcmp+0x2c>
   1e21e:	42aa      	cmp	r2, r5
   1e220:	4192      	sbcs	r2, r2
   1e222:	2301      	movs	r3, #1
   1e224:	4313      	orrs	r3, r2
   1e226:	0018      	movs	r0, r3
   1e228:	bd30      	pop	{r4, r5, pc}
   1e22a:	42a0      	cmp	r0, r4
   1e22c:	d3f1      	bcc.n	1e212 <__mcmp+0x14>
   1e22e:	e7fa      	b.n	1e226 <__mcmp+0x28>

0001e230 <__mdiff>:
   1e230:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e232:	000d      	movs	r5, r1
   1e234:	b085      	sub	sp, #20
   1e236:	0007      	movs	r7, r0
   1e238:	0011      	movs	r1, r2
   1e23a:	0028      	movs	r0, r5
   1e23c:	0014      	movs	r4, r2
   1e23e:	f7ff ffde 	bl	1e1fe <__mcmp>
   1e242:	1e06      	subs	r6, r0, #0
   1e244:	d108      	bne.n	1e258 <__mdiff+0x28>
   1e246:	0001      	movs	r1, r0
   1e248:	0038      	movs	r0, r7
   1e24a:	f7ff fd87 	bl	1dd5c <_Balloc>
   1e24e:	2301      	movs	r3, #1
   1e250:	6146      	str	r6, [r0, #20]
   1e252:	6103      	str	r3, [r0, #16]
   1e254:	b005      	add	sp, #20
   1e256:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e258:	2301      	movs	r3, #1
   1e25a:	9301      	str	r3, [sp, #4]
   1e25c:	2800      	cmp	r0, #0
   1e25e:	db04      	blt.n	1e26a <__mdiff+0x3a>
   1e260:	0023      	movs	r3, r4
   1e262:	002c      	movs	r4, r5
   1e264:	001d      	movs	r5, r3
   1e266:	2300      	movs	r3, #0
   1e268:	9301      	str	r3, [sp, #4]
   1e26a:	6861      	ldr	r1, [r4, #4]
   1e26c:	0038      	movs	r0, r7
   1e26e:	f7ff fd75 	bl	1dd5c <_Balloc>
   1e272:	002f      	movs	r7, r5
   1e274:	2200      	movs	r2, #0
   1e276:	9b01      	ldr	r3, [sp, #4]
   1e278:	6926      	ldr	r6, [r4, #16]
   1e27a:	60c3      	str	r3, [r0, #12]
   1e27c:	3414      	adds	r4, #20
   1e27e:	00b3      	lsls	r3, r6, #2
   1e280:	18e3      	adds	r3, r4, r3
   1e282:	9302      	str	r3, [sp, #8]
   1e284:	692b      	ldr	r3, [r5, #16]
   1e286:	3714      	adds	r7, #20
   1e288:	009b      	lsls	r3, r3, #2
   1e28a:	18fb      	adds	r3, r7, r3
   1e28c:	9303      	str	r3, [sp, #12]
   1e28e:	0003      	movs	r3, r0
   1e290:	4694      	mov	ip, r2
   1e292:	3314      	adds	r3, #20
   1e294:	cc20      	ldmia	r4!, {r5}
   1e296:	cf04      	ldmia	r7!, {r2}
   1e298:	9201      	str	r2, [sp, #4]
   1e29a:	b2aa      	uxth	r2, r5
   1e29c:	4494      	add	ip, r2
   1e29e:	466a      	mov	r2, sp
   1e2a0:	4661      	mov	r1, ip
   1e2a2:	8892      	ldrh	r2, [r2, #4]
   1e2a4:	0c2d      	lsrs	r5, r5, #16
   1e2a6:	1a8a      	subs	r2, r1, r2
   1e2a8:	9901      	ldr	r1, [sp, #4]
   1e2aa:	0c09      	lsrs	r1, r1, #16
   1e2ac:	1a69      	subs	r1, r5, r1
   1e2ae:	1415      	asrs	r5, r2, #16
   1e2b0:	1949      	adds	r1, r1, r5
   1e2b2:	140d      	asrs	r5, r1, #16
   1e2b4:	b292      	uxth	r2, r2
   1e2b6:	0409      	lsls	r1, r1, #16
   1e2b8:	430a      	orrs	r2, r1
   1e2ba:	601a      	str	r2, [r3, #0]
   1e2bc:	9a03      	ldr	r2, [sp, #12]
   1e2be:	46ac      	mov	ip, r5
   1e2c0:	3304      	adds	r3, #4
   1e2c2:	42ba      	cmp	r2, r7
   1e2c4:	d8e6      	bhi.n	1e294 <__mdiff+0x64>
   1e2c6:	9902      	ldr	r1, [sp, #8]
   1e2c8:	001a      	movs	r2, r3
   1e2ca:	428c      	cmp	r4, r1
   1e2cc:	d305      	bcc.n	1e2da <__mdiff+0xaa>
   1e2ce:	3a04      	subs	r2, #4
   1e2d0:	6813      	ldr	r3, [r2, #0]
   1e2d2:	2b00      	cmp	r3, #0
   1e2d4:	d00e      	beq.n	1e2f4 <__mdiff+0xc4>
   1e2d6:	6106      	str	r6, [r0, #16]
   1e2d8:	e7bc      	b.n	1e254 <__mdiff+0x24>
   1e2da:	cc04      	ldmia	r4!, {r2}
   1e2dc:	b291      	uxth	r1, r2
   1e2de:	4461      	add	r1, ip
   1e2e0:	140d      	asrs	r5, r1, #16
   1e2e2:	0c12      	lsrs	r2, r2, #16
   1e2e4:	1952      	adds	r2, r2, r5
   1e2e6:	1415      	asrs	r5, r2, #16
   1e2e8:	b289      	uxth	r1, r1
   1e2ea:	0412      	lsls	r2, r2, #16
   1e2ec:	430a      	orrs	r2, r1
   1e2ee:	46ac      	mov	ip, r5
   1e2f0:	c304      	stmia	r3!, {r2}
   1e2f2:	e7e8      	b.n	1e2c6 <__mdiff+0x96>
   1e2f4:	3e01      	subs	r6, #1
   1e2f6:	e7ea      	b.n	1e2ce <__mdiff+0x9e>

0001e2f8 <__ulp>:
   1e2f8:	000b      	movs	r3, r1
   1e2fa:	4910      	ldr	r1, [pc, #64]	; (1e33c <__ulp+0x44>)
   1e2fc:	b510      	push	{r4, lr}
   1e2fe:	4019      	ands	r1, r3
   1e300:	4b0f      	ldr	r3, [pc, #60]	; (1e340 <__ulp+0x48>)
   1e302:	18c9      	adds	r1, r1, r3
   1e304:	2900      	cmp	r1, #0
   1e306:	dd04      	ble.n	1e312 <__ulp+0x1a>
   1e308:	2200      	movs	r2, #0
   1e30a:	000b      	movs	r3, r1
   1e30c:	0010      	movs	r0, r2
   1e30e:	0019      	movs	r1, r3
   1e310:	bd10      	pop	{r4, pc}
   1e312:	4249      	negs	r1, r1
   1e314:	1509      	asrs	r1, r1, #20
   1e316:	2200      	movs	r2, #0
   1e318:	2300      	movs	r3, #0
   1e31a:	2913      	cmp	r1, #19
   1e31c:	dc04      	bgt.n	1e328 <__ulp+0x30>
   1e31e:	2080      	movs	r0, #128	; 0x80
   1e320:	0300      	lsls	r0, r0, #12
   1e322:	4108      	asrs	r0, r1
   1e324:	0003      	movs	r3, r0
   1e326:	e7f1      	b.n	1e30c <__ulp+0x14>
   1e328:	3914      	subs	r1, #20
   1e32a:	2001      	movs	r0, #1
   1e32c:	291e      	cmp	r1, #30
   1e32e:	dc02      	bgt.n	1e336 <__ulp+0x3e>
   1e330:	241f      	movs	r4, #31
   1e332:	1a61      	subs	r1, r4, r1
   1e334:	4088      	lsls	r0, r1
   1e336:	0002      	movs	r2, r0
   1e338:	e7e8      	b.n	1e30c <__ulp+0x14>
   1e33a:	46c0      	nop			; (mov r8, r8)
   1e33c:	7ff00000 	.word	0x7ff00000
   1e340:	fcc00000 	.word	0xfcc00000

0001e344 <__b2d>:
   1e344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e346:	0006      	movs	r6, r0
   1e348:	6903      	ldr	r3, [r0, #16]
   1e34a:	3614      	adds	r6, #20
   1e34c:	009b      	lsls	r3, r3, #2
   1e34e:	18f3      	adds	r3, r6, r3
   1e350:	1f1d      	subs	r5, r3, #4
   1e352:	682c      	ldr	r4, [r5, #0]
   1e354:	000f      	movs	r7, r1
   1e356:	0020      	movs	r0, r4
   1e358:	9301      	str	r3, [sp, #4]
   1e35a:	f7ff fdcb 	bl	1def4 <__hi0bits>
   1e35e:	2320      	movs	r3, #32
   1e360:	1a1b      	subs	r3, r3, r0
   1e362:	603b      	str	r3, [r7, #0]
   1e364:	491c      	ldr	r1, [pc, #112]	; (1e3d8 <__b2d+0x94>)
   1e366:	280a      	cmp	r0, #10
   1e368:	dc16      	bgt.n	1e398 <__b2d+0x54>
   1e36a:	230b      	movs	r3, #11
   1e36c:	0027      	movs	r7, r4
   1e36e:	1a1b      	subs	r3, r3, r0
   1e370:	40df      	lsrs	r7, r3
   1e372:	4339      	orrs	r1, r7
   1e374:	469c      	mov	ip, r3
   1e376:	000b      	movs	r3, r1
   1e378:	2100      	movs	r1, #0
   1e37a:	42ae      	cmp	r6, r5
   1e37c:	d202      	bcs.n	1e384 <__b2d+0x40>
   1e37e:	9901      	ldr	r1, [sp, #4]
   1e380:	3908      	subs	r1, #8
   1e382:	6809      	ldr	r1, [r1, #0]
   1e384:	3015      	adds	r0, #21
   1e386:	4084      	lsls	r4, r0
   1e388:	4660      	mov	r0, ip
   1e38a:	40c1      	lsrs	r1, r0
   1e38c:	430c      	orrs	r4, r1
   1e38e:	0022      	movs	r2, r4
   1e390:	0010      	movs	r0, r2
   1e392:	0019      	movs	r1, r3
   1e394:	b003      	add	sp, #12
   1e396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e398:	2700      	movs	r7, #0
   1e39a:	42ae      	cmp	r6, r5
   1e39c:	d202      	bcs.n	1e3a4 <__b2d+0x60>
   1e39e:	9d01      	ldr	r5, [sp, #4]
   1e3a0:	3d08      	subs	r5, #8
   1e3a2:	682f      	ldr	r7, [r5, #0]
   1e3a4:	380b      	subs	r0, #11
   1e3a6:	4684      	mov	ip, r0
   1e3a8:	1e03      	subs	r3, r0, #0
   1e3aa:	d012      	beq.n	1e3d2 <__b2d+0x8e>
   1e3ac:	409c      	lsls	r4, r3
   1e3ae:	2020      	movs	r0, #32
   1e3b0:	4321      	orrs	r1, r4
   1e3b2:	003c      	movs	r4, r7
   1e3b4:	1ac0      	subs	r0, r0, r3
   1e3b6:	40c4      	lsrs	r4, r0
   1e3b8:	4321      	orrs	r1, r4
   1e3ba:	000b      	movs	r3, r1
   1e3bc:	2100      	movs	r1, #0
   1e3be:	42b5      	cmp	r5, r6
   1e3c0:	d901      	bls.n	1e3c6 <__b2d+0x82>
   1e3c2:	3d04      	subs	r5, #4
   1e3c4:	6829      	ldr	r1, [r5, #0]
   1e3c6:	4664      	mov	r4, ip
   1e3c8:	40c1      	lsrs	r1, r0
   1e3ca:	40a7      	lsls	r7, r4
   1e3cc:	430f      	orrs	r7, r1
   1e3ce:	003a      	movs	r2, r7
   1e3d0:	e7de      	b.n	1e390 <__b2d+0x4c>
   1e3d2:	4321      	orrs	r1, r4
   1e3d4:	000b      	movs	r3, r1
   1e3d6:	e7fa      	b.n	1e3ce <__b2d+0x8a>
   1e3d8:	3ff00000 	.word	0x3ff00000

0001e3dc <__d2b>:
   1e3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e3de:	001d      	movs	r5, r3
   1e3e0:	2101      	movs	r1, #1
   1e3e2:	9f08      	ldr	r7, [sp, #32]
   1e3e4:	0014      	movs	r4, r2
   1e3e6:	f7ff fcb9 	bl	1dd5c <_Balloc>
   1e3ea:	032b      	lsls	r3, r5, #12
   1e3ec:	006d      	lsls	r5, r5, #1
   1e3ee:	0006      	movs	r6, r0
   1e3f0:	0b1b      	lsrs	r3, r3, #12
   1e3f2:	0d6d      	lsrs	r5, r5, #21
   1e3f4:	d124      	bne.n	1e440 <__d2b+0x64>
   1e3f6:	9301      	str	r3, [sp, #4]
   1e3f8:	2c00      	cmp	r4, #0
   1e3fa:	d027      	beq.n	1e44c <__d2b+0x70>
   1e3fc:	4668      	mov	r0, sp
   1e3fe:	9400      	str	r4, [sp, #0]
   1e400:	f7ff fd92 	bl	1df28 <__lo0bits>
   1e404:	9c00      	ldr	r4, [sp, #0]
   1e406:	2800      	cmp	r0, #0
   1e408:	d01e      	beq.n	1e448 <__d2b+0x6c>
   1e40a:	9b01      	ldr	r3, [sp, #4]
   1e40c:	2120      	movs	r1, #32
   1e40e:	001a      	movs	r2, r3
   1e410:	1a09      	subs	r1, r1, r0
   1e412:	408a      	lsls	r2, r1
   1e414:	40c3      	lsrs	r3, r0
   1e416:	4322      	orrs	r2, r4
   1e418:	6172      	str	r2, [r6, #20]
   1e41a:	9301      	str	r3, [sp, #4]
   1e41c:	9c01      	ldr	r4, [sp, #4]
   1e41e:	61b4      	str	r4, [r6, #24]
   1e420:	1e63      	subs	r3, r4, #1
   1e422:	419c      	sbcs	r4, r3
   1e424:	3401      	adds	r4, #1
   1e426:	6134      	str	r4, [r6, #16]
   1e428:	2d00      	cmp	r5, #0
   1e42a:	d018      	beq.n	1e45e <__d2b+0x82>
   1e42c:	4b12      	ldr	r3, [pc, #72]	; (1e478 <__d2b+0x9c>)
   1e42e:	18ed      	adds	r5, r5, r3
   1e430:	2335      	movs	r3, #53	; 0x35
   1e432:	182d      	adds	r5, r5, r0
   1e434:	603d      	str	r5, [r7, #0]
   1e436:	1a18      	subs	r0, r3, r0
   1e438:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e43a:	6018      	str	r0, [r3, #0]
   1e43c:	0030      	movs	r0, r6
   1e43e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1e440:	2280      	movs	r2, #128	; 0x80
   1e442:	0352      	lsls	r2, r2, #13
   1e444:	4313      	orrs	r3, r2
   1e446:	e7d6      	b.n	1e3f6 <__d2b+0x1a>
   1e448:	6174      	str	r4, [r6, #20]
   1e44a:	e7e7      	b.n	1e41c <__d2b+0x40>
   1e44c:	a801      	add	r0, sp, #4
   1e44e:	f7ff fd6b 	bl	1df28 <__lo0bits>
   1e452:	2401      	movs	r4, #1
   1e454:	9b01      	ldr	r3, [sp, #4]
   1e456:	6134      	str	r4, [r6, #16]
   1e458:	6173      	str	r3, [r6, #20]
   1e45a:	3020      	adds	r0, #32
   1e45c:	e7e4      	b.n	1e428 <__d2b+0x4c>
   1e45e:	4b07      	ldr	r3, [pc, #28]	; (1e47c <__d2b+0xa0>)
   1e460:	18c0      	adds	r0, r0, r3
   1e462:	4b07      	ldr	r3, [pc, #28]	; (1e480 <__d2b+0xa4>)
   1e464:	6038      	str	r0, [r7, #0]
   1e466:	18e3      	adds	r3, r4, r3
   1e468:	009b      	lsls	r3, r3, #2
   1e46a:	18f3      	adds	r3, r6, r3
   1e46c:	6958      	ldr	r0, [r3, #20]
   1e46e:	f7ff fd41 	bl	1def4 <__hi0bits>
   1e472:	0164      	lsls	r4, r4, #5
   1e474:	1a20      	subs	r0, r4, r0
   1e476:	e7df      	b.n	1e438 <__d2b+0x5c>
   1e478:	fffffbcd 	.word	0xfffffbcd
   1e47c:	fffffbce 	.word	0xfffffbce
   1e480:	3fffffff 	.word	0x3fffffff

0001e484 <__ratio>:
   1e484:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e486:	b085      	sub	sp, #20
   1e488:	000f      	movs	r7, r1
   1e48a:	a902      	add	r1, sp, #8
   1e48c:	0006      	movs	r6, r0
   1e48e:	f7ff ff59 	bl	1e344 <__b2d>
   1e492:	0004      	movs	r4, r0
   1e494:	000d      	movs	r5, r1
   1e496:	0038      	movs	r0, r7
   1e498:	a903      	add	r1, sp, #12
   1e49a:	9400      	str	r4, [sp, #0]
   1e49c:	9501      	str	r5, [sp, #4]
   1e49e:	f7ff ff51 	bl	1e344 <__b2d>
   1e4a2:	6936      	ldr	r6, [r6, #16]
   1e4a4:	693f      	ldr	r7, [r7, #16]
   1e4a6:	0002      	movs	r2, r0
   1e4a8:	1bf7      	subs	r7, r6, r7
   1e4aa:	017e      	lsls	r6, r7, #5
   1e4ac:	46b4      	mov	ip, r6
   1e4ae:	9f03      	ldr	r7, [sp, #12]
   1e4b0:	9e02      	ldr	r6, [sp, #8]
   1e4b2:	000b      	movs	r3, r1
   1e4b4:	1bf6      	subs	r6, r6, r7
   1e4b6:	4466      	add	r6, ip
   1e4b8:	0537      	lsls	r7, r6, #20
   1e4ba:	2e00      	cmp	r6, #0
   1e4bc:	dd07      	ble.n	1e4ce <__ratio+0x4a>
   1e4be:	1979      	adds	r1, r7, r5
   1e4c0:	9101      	str	r1, [sp, #4]
   1e4c2:	9800      	ldr	r0, [sp, #0]
   1e4c4:	9901      	ldr	r1, [sp, #4]
   1e4c6:	f7fc f9a5 	bl	1a814 <__aeabi_ddiv>
   1e4ca:	b005      	add	sp, #20
   1e4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4ce:	1bcb      	subs	r3, r1, r7
   1e4d0:	e7f7      	b.n	1e4c2 <__ratio+0x3e>

0001e4d2 <__copybits>:
   1e4d2:	0013      	movs	r3, r2
   1e4d4:	3901      	subs	r1, #1
   1e4d6:	b510      	push	{r4, lr}
   1e4d8:	1149      	asrs	r1, r1, #5
   1e4da:	6912      	ldr	r2, [r2, #16]
   1e4dc:	3101      	adds	r1, #1
   1e4de:	0089      	lsls	r1, r1, #2
   1e4e0:	3314      	adds	r3, #20
   1e4e2:	0092      	lsls	r2, r2, #2
   1e4e4:	1841      	adds	r1, r0, r1
   1e4e6:	189a      	adds	r2, r3, r2
   1e4e8:	429a      	cmp	r2, r3
   1e4ea:	d803      	bhi.n	1e4f4 <__copybits+0x22>
   1e4ec:	2300      	movs	r3, #0
   1e4ee:	4281      	cmp	r1, r0
   1e4f0:	d803      	bhi.n	1e4fa <__copybits+0x28>
   1e4f2:	bd10      	pop	{r4, pc}
   1e4f4:	cb10      	ldmia	r3!, {r4}
   1e4f6:	c010      	stmia	r0!, {r4}
   1e4f8:	e7f6      	b.n	1e4e8 <__copybits+0x16>
   1e4fa:	c008      	stmia	r0!, {r3}
   1e4fc:	e7f7      	b.n	1e4ee <__copybits+0x1c>

0001e4fe <__any_on>:
   1e4fe:	0002      	movs	r2, r0
   1e500:	6900      	ldr	r0, [r0, #16]
   1e502:	b510      	push	{r4, lr}
   1e504:	3214      	adds	r2, #20
   1e506:	114b      	asrs	r3, r1, #5
   1e508:	4298      	cmp	r0, r3
   1e50a:	db12      	blt.n	1e532 <__any_on+0x34>
   1e50c:	dd0b      	ble.n	1e526 <__any_on+0x28>
   1e50e:	201f      	movs	r0, #31
   1e510:	4001      	ands	r1, r0
   1e512:	d008      	beq.n	1e526 <__any_on+0x28>
   1e514:	0098      	lsls	r0, r3, #2
   1e516:	5884      	ldr	r4, [r0, r2]
   1e518:	0020      	movs	r0, r4
   1e51a:	40c8      	lsrs	r0, r1
   1e51c:	4088      	lsls	r0, r1
   1e51e:	0001      	movs	r1, r0
   1e520:	2001      	movs	r0, #1
   1e522:	428c      	cmp	r4, r1
   1e524:	d104      	bne.n	1e530 <__any_on+0x32>
   1e526:	009b      	lsls	r3, r3, #2
   1e528:	18d3      	adds	r3, r2, r3
   1e52a:	4293      	cmp	r3, r2
   1e52c:	d803      	bhi.n	1e536 <__any_on+0x38>
   1e52e:	2000      	movs	r0, #0
   1e530:	bd10      	pop	{r4, pc}
   1e532:	0003      	movs	r3, r0
   1e534:	e7f7      	b.n	1e526 <__any_on+0x28>
   1e536:	3b04      	subs	r3, #4
   1e538:	6819      	ldr	r1, [r3, #0]
   1e53a:	2900      	cmp	r1, #0
   1e53c:	d0f5      	beq.n	1e52a <__any_on+0x2c>
   1e53e:	2001      	movs	r0, #1
   1e540:	e7f6      	b.n	1e530 <__any_on+0x32>

0001e542 <_calloc_r>:
   1e542:	434a      	muls	r2, r1
   1e544:	b570      	push	{r4, r5, r6, lr}
   1e546:	0011      	movs	r1, r2
   1e548:	0014      	movs	r4, r2
   1e54a:	f7fd feb9 	bl	1c2c0 <_malloc_r>
   1e54e:	1e05      	subs	r5, r0, #0
   1e550:	d003      	beq.n	1e55a <_calloc_r+0x18>
   1e552:	0022      	movs	r2, r4
   1e554:	2100      	movs	r1, #0
   1e556:	f7fd fe60 	bl	1c21a <memset>
   1e55a:	0028      	movs	r0, r5
   1e55c:	bd70      	pop	{r4, r5, r6, pc}
	...

0001e560 <__ssputs_r>:
   1e560:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e562:	688e      	ldr	r6, [r1, #8]
   1e564:	b085      	sub	sp, #20
   1e566:	0007      	movs	r7, r0
   1e568:	000c      	movs	r4, r1
   1e56a:	9203      	str	r2, [sp, #12]
   1e56c:	9301      	str	r3, [sp, #4]
   1e56e:	429e      	cmp	r6, r3
   1e570:	d839      	bhi.n	1e5e6 <__ssputs_r+0x86>
   1e572:	2390      	movs	r3, #144	; 0x90
   1e574:	898a      	ldrh	r2, [r1, #12]
   1e576:	00db      	lsls	r3, r3, #3
   1e578:	421a      	tst	r2, r3
   1e57a:	d034      	beq.n	1e5e6 <__ssputs_r+0x86>
   1e57c:	2503      	movs	r5, #3
   1e57e:	6909      	ldr	r1, [r1, #16]
   1e580:	6823      	ldr	r3, [r4, #0]
   1e582:	1a5b      	subs	r3, r3, r1
   1e584:	9302      	str	r3, [sp, #8]
   1e586:	6963      	ldr	r3, [r4, #20]
   1e588:	9802      	ldr	r0, [sp, #8]
   1e58a:	435d      	muls	r5, r3
   1e58c:	0feb      	lsrs	r3, r5, #31
   1e58e:	195d      	adds	r5, r3, r5
   1e590:	9b01      	ldr	r3, [sp, #4]
   1e592:	106d      	asrs	r5, r5, #1
   1e594:	3301      	adds	r3, #1
   1e596:	181b      	adds	r3, r3, r0
   1e598:	42ab      	cmp	r3, r5
   1e59a:	d900      	bls.n	1e59e <__ssputs_r+0x3e>
   1e59c:	001d      	movs	r5, r3
   1e59e:	0553      	lsls	r3, r2, #21
   1e5a0:	d532      	bpl.n	1e608 <__ssputs_r+0xa8>
   1e5a2:	0029      	movs	r1, r5
   1e5a4:	0038      	movs	r0, r7
   1e5a6:	f7fd fe8b 	bl	1c2c0 <_malloc_r>
   1e5aa:	1e06      	subs	r6, r0, #0
   1e5ac:	d109      	bne.n	1e5c2 <__ssputs_r+0x62>
   1e5ae:	230c      	movs	r3, #12
   1e5b0:	603b      	str	r3, [r7, #0]
   1e5b2:	2340      	movs	r3, #64	; 0x40
   1e5b4:	2001      	movs	r0, #1
   1e5b6:	89a2      	ldrh	r2, [r4, #12]
   1e5b8:	4240      	negs	r0, r0
   1e5ba:	4313      	orrs	r3, r2
   1e5bc:	81a3      	strh	r3, [r4, #12]
   1e5be:	b005      	add	sp, #20
   1e5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5c2:	9a02      	ldr	r2, [sp, #8]
   1e5c4:	6921      	ldr	r1, [r4, #16]
   1e5c6:	f7fd fe0d 	bl	1c1e4 <memcpy>
   1e5ca:	89a3      	ldrh	r3, [r4, #12]
   1e5cc:	4a14      	ldr	r2, [pc, #80]	; (1e620 <__ssputs_r+0xc0>)
   1e5ce:	401a      	ands	r2, r3
   1e5d0:	2380      	movs	r3, #128	; 0x80
   1e5d2:	4313      	orrs	r3, r2
   1e5d4:	81a3      	strh	r3, [r4, #12]
   1e5d6:	9b02      	ldr	r3, [sp, #8]
   1e5d8:	6126      	str	r6, [r4, #16]
   1e5da:	18f6      	adds	r6, r6, r3
   1e5dc:	6026      	str	r6, [r4, #0]
   1e5de:	6165      	str	r5, [r4, #20]
   1e5e0:	9e01      	ldr	r6, [sp, #4]
   1e5e2:	1aed      	subs	r5, r5, r3
   1e5e4:	60a5      	str	r5, [r4, #8]
   1e5e6:	9b01      	ldr	r3, [sp, #4]
   1e5e8:	42b3      	cmp	r3, r6
   1e5ea:	d200      	bcs.n	1e5ee <__ssputs_r+0x8e>
   1e5ec:	001e      	movs	r6, r3
   1e5ee:	0032      	movs	r2, r6
   1e5f0:	9903      	ldr	r1, [sp, #12]
   1e5f2:	6820      	ldr	r0, [r4, #0]
   1e5f4:	f7fd fdff 	bl	1c1f6 <memmove>
   1e5f8:	68a3      	ldr	r3, [r4, #8]
   1e5fa:	2000      	movs	r0, #0
   1e5fc:	1b9b      	subs	r3, r3, r6
   1e5fe:	60a3      	str	r3, [r4, #8]
   1e600:	6823      	ldr	r3, [r4, #0]
   1e602:	199e      	adds	r6, r3, r6
   1e604:	6026      	str	r6, [r4, #0]
   1e606:	e7da      	b.n	1e5be <__ssputs_r+0x5e>
   1e608:	002a      	movs	r2, r5
   1e60a:	0038      	movs	r0, r7
   1e60c:	f001 f908 	bl	1f820 <_realloc_r>
   1e610:	1e06      	subs	r6, r0, #0
   1e612:	d1e0      	bne.n	1e5d6 <__ssputs_r+0x76>
   1e614:	6921      	ldr	r1, [r4, #16]
   1e616:	0038      	movs	r0, r7
   1e618:	f7fd fe08 	bl	1c22c <_free_r>
   1e61c:	e7c7      	b.n	1e5ae <__ssputs_r+0x4e>
   1e61e:	46c0      	nop			; (mov r8, r8)
   1e620:	fffffb7f 	.word	0xfffffb7f

0001e624 <_svfiprintf_r>:
   1e624:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e626:	b09f      	sub	sp, #124	; 0x7c
   1e628:	9002      	str	r0, [sp, #8]
   1e62a:	9305      	str	r3, [sp, #20]
   1e62c:	898b      	ldrh	r3, [r1, #12]
   1e62e:	000f      	movs	r7, r1
   1e630:	0016      	movs	r6, r2
   1e632:	061b      	lsls	r3, r3, #24
   1e634:	d511      	bpl.n	1e65a <_svfiprintf_r+0x36>
   1e636:	690b      	ldr	r3, [r1, #16]
   1e638:	2b00      	cmp	r3, #0
   1e63a:	d10e      	bne.n	1e65a <_svfiprintf_r+0x36>
   1e63c:	2140      	movs	r1, #64	; 0x40
   1e63e:	f7fd fe3f 	bl	1c2c0 <_malloc_r>
   1e642:	6038      	str	r0, [r7, #0]
   1e644:	6138      	str	r0, [r7, #16]
   1e646:	2800      	cmp	r0, #0
   1e648:	d105      	bne.n	1e656 <_svfiprintf_r+0x32>
   1e64a:	230c      	movs	r3, #12
   1e64c:	9a02      	ldr	r2, [sp, #8]
   1e64e:	3801      	subs	r0, #1
   1e650:	6013      	str	r3, [r2, #0]
   1e652:	b01f      	add	sp, #124	; 0x7c
   1e654:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e656:	2340      	movs	r3, #64	; 0x40
   1e658:	617b      	str	r3, [r7, #20]
   1e65a:	2300      	movs	r3, #0
   1e65c:	ad06      	add	r5, sp, #24
   1e65e:	616b      	str	r3, [r5, #20]
   1e660:	3320      	adds	r3, #32
   1e662:	766b      	strb	r3, [r5, #25]
   1e664:	3310      	adds	r3, #16
   1e666:	76ab      	strb	r3, [r5, #26]
   1e668:	0034      	movs	r4, r6
   1e66a:	7823      	ldrb	r3, [r4, #0]
   1e66c:	2b00      	cmp	r3, #0
   1e66e:	d147      	bne.n	1e700 <_svfiprintf_r+0xdc>
   1e670:	1ba3      	subs	r3, r4, r6
   1e672:	9304      	str	r3, [sp, #16]
   1e674:	d00d      	beq.n	1e692 <_svfiprintf_r+0x6e>
   1e676:	1ba3      	subs	r3, r4, r6
   1e678:	0032      	movs	r2, r6
   1e67a:	0039      	movs	r1, r7
   1e67c:	9802      	ldr	r0, [sp, #8]
   1e67e:	f7ff ff6f 	bl	1e560 <__ssputs_r>
   1e682:	1c43      	adds	r3, r0, #1
   1e684:	d100      	bne.n	1e688 <_svfiprintf_r+0x64>
   1e686:	e0b5      	b.n	1e7f4 <_svfiprintf_r+0x1d0>
   1e688:	696a      	ldr	r2, [r5, #20]
   1e68a:	9b04      	ldr	r3, [sp, #16]
   1e68c:	4694      	mov	ip, r2
   1e68e:	4463      	add	r3, ip
   1e690:	616b      	str	r3, [r5, #20]
   1e692:	7823      	ldrb	r3, [r4, #0]
   1e694:	2b00      	cmp	r3, #0
   1e696:	d100      	bne.n	1e69a <_svfiprintf_r+0x76>
   1e698:	e0ac      	b.n	1e7f4 <_svfiprintf_r+0x1d0>
   1e69a:	2201      	movs	r2, #1
   1e69c:	2300      	movs	r3, #0
   1e69e:	4252      	negs	r2, r2
   1e6a0:	606a      	str	r2, [r5, #4]
   1e6a2:	a902      	add	r1, sp, #8
   1e6a4:	3254      	adds	r2, #84	; 0x54
   1e6a6:	1852      	adds	r2, r2, r1
   1e6a8:	3401      	adds	r4, #1
   1e6aa:	602b      	str	r3, [r5, #0]
   1e6ac:	60eb      	str	r3, [r5, #12]
   1e6ae:	60ab      	str	r3, [r5, #8]
   1e6b0:	7013      	strb	r3, [r2, #0]
   1e6b2:	65ab      	str	r3, [r5, #88]	; 0x58
   1e6b4:	4e58      	ldr	r6, [pc, #352]	; (1e818 <_svfiprintf_r+0x1f4>)
   1e6b6:	2205      	movs	r2, #5
   1e6b8:	7821      	ldrb	r1, [r4, #0]
   1e6ba:	0030      	movs	r0, r6
   1e6bc:	f7fd fd78 	bl	1c1b0 <memchr>
   1e6c0:	1c62      	adds	r2, r4, #1
   1e6c2:	2800      	cmp	r0, #0
   1e6c4:	d120      	bne.n	1e708 <_svfiprintf_r+0xe4>
   1e6c6:	6829      	ldr	r1, [r5, #0]
   1e6c8:	06cb      	lsls	r3, r1, #27
   1e6ca:	d504      	bpl.n	1e6d6 <_svfiprintf_r+0xb2>
   1e6cc:	2353      	movs	r3, #83	; 0x53
   1e6ce:	ae02      	add	r6, sp, #8
   1e6d0:	3020      	adds	r0, #32
   1e6d2:	199b      	adds	r3, r3, r6
   1e6d4:	7018      	strb	r0, [r3, #0]
   1e6d6:	070b      	lsls	r3, r1, #28
   1e6d8:	d504      	bpl.n	1e6e4 <_svfiprintf_r+0xc0>
   1e6da:	2353      	movs	r3, #83	; 0x53
   1e6dc:	202b      	movs	r0, #43	; 0x2b
   1e6de:	ae02      	add	r6, sp, #8
   1e6e0:	199b      	adds	r3, r3, r6
   1e6e2:	7018      	strb	r0, [r3, #0]
   1e6e4:	7823      	ldrb	r3, [r4, #0]
   1e6e6:	2b2a      	cmp	r3, #42	; 0x2a
   1e6e8:	d016      	beq.n	1e718 <_svfiprintf_r+0xf4>
   1e6ea:	2000      	movs	r0, #0
   1e6ec:	210a      	movs	r1, #10
   1e6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e6f0:	7822      	ldrb	r2, [r4, #0]
   1e6f2:	3a30      	subs	r2, #48	; 0x30
   1e6f4:	2a09      	cmp	r2, #9
   1e6f6:	d955      	bls.n	1e7a4 <_svfiprintf_r+0x180>
   1e6f8:	2800      	cmp	r0, #0
   1e6fa:	d015      	beq.n	1e728 <_svfiprintf_r+0x104>
   1e6fc:	9309      	str	r3, [sp, #36]	; 0x24
   1e6fe:	e013      	b.n	1e728 <_svfiprintf_r+0x104>
   1e700:	2b25      	cmp	r3, #37	; 0x25
   1e702:	d0b5      	beq.n	1e670 <_svfiprintf_r+0x4c>
   1e704:	3401      	adds	r4, #1
   1e706:	e7b0      	b.n	1e66a <_svfiprintf_r+0x46>
   1e708:	2301      	movs	r3, #1
   1e70a:	1b80      	subs	r0, r0, r6
   1e70c:	4083      	lsls	r3, r0
   1e70e:	6829      	ldr	r1, [r5, #0]
   1e710:	0014      	movs	r4, r2
   1e712:	430b      	orrs	r3, r1
   1e714:	602b      	str	r3, [r5, #0]
   1e716:	e7cd      	b.n	1e6b4 <_svfiprintf_r+0x90>
   1e718:	9b05      	ldr	r3, [sp, #20]
   1e71a:	1d18      	adds	r0, r3, #4
   1e71c:	681b      	ldr	r3, [r3, #0]
   1e71e:	9005      	str	r0, [sp, #20]
   1e720:	2b00      	cmp	r3, #0
   1e722:	db39      	blt.n	1e798 <_svfiprintf_r+0x174>
   1e724:	9309      	str	r3, [sp, #36]	; 0x24
   1e726:	0014      	movs	r4, r2
   1e728:	7823      	ldrb	r3, [r4, #0]
   1e72a:	2b2e      	cmp	r3, #46	; 0x2e
   1e72c:	d10b      	bne.n	1e746 <_svfiprintf_r+0x122>
   1e72e:	7863      	ldrb	r3, [r4, #1]
   1e730:	1c62      	adds	r2, r4, #1
   1e732:	2b2a      	cmp	r3, #42	; 0x2a
   1e734:	d13e      	bne.n	1e7b4 <_svfiprintf_r+0x190>
   1e736:	9b05      	ldr	r3, [sp, #20]
   1e738:	3402      	adds	r4, #2
   1e73a:	1d1a      	adds	r2, r3, #4
   1e73c:	681b      	ldr	r3, [r3, #0]
   1e73e:	9205      	str	r2, [sp, #20]
   1e740:	2b00      	cmp	r3, #0
   1e742:	db34      	blt.n	1e7ae <_svfiprintf_r+0x18a>
   1e744:	9307      	str	r3, [sp, #28]
   1e746:	4e35      	ldr	r6, [pc, #212]	; (1e81c <_svfiprintf_r+0x1f8>)
   1e748:	7821      	ldrb	r1, [r4, #0]
   1e74a:	2203      	movs	r2, #3
   1e74c:	0030      	movs	r0, r6
   1e74e:	f7fd fd2f 	bl	1c1b0 <memchr>
   1e752:	2800      	cmp	r0, #0
   1e754:	d006      	beq.n	1e764 <_svfiprintf_r+0x140>
   1e756:	2340      	movs	r3, #64	; 0x40
   1e758:	1b80      	subs	r0, r0, r6
   1e75a:	4083      	lsls	r3, r0
   1e75c:	682a      	ldr	r2, [r5, #0]
   1e75e:	3401      	adds	r4, #1
   1e760:	4313      	orrs	r3, r2
   1e762:	602b      	str	r3, [r5, #0]
   1e764:	7821      	ldrb	r1, [r4, #0]
   1e766:	2206      	movs	r2, #6
   1e768:	482d      	ldr	r0, [pc, #180]	; (1e820 <_svfiprintf_r+0x1fc>)
   1e76a:	1c66      	adds	r6, r4, #1
   1e76c:	7629      	strb	r1, [r5, #24]
   1e76e:	f7fd fd1f 	bl	1c1b0 <memchr>
   1e772:	2800      	cmp	r0, #0
   1e774:	d046      	beq.n	1e804 <_svfiprintf_r+0x1e0>
   1e776:	4b2b      	ldr	r3, [pc, #172]	; (1e824 <_svfiprintf_r+0x200>)
   1e778:	2b00      	cmp	r3, #0
   1e77a:	d12f      	bne.n	1e7dc <_svfiprintf_r+0x1b8>
   1e77c:	6829      	ldr	r1, [r5, #0]
   1e77e:	9b05      	ldr	r3, [sp, #20]
   1e780:	2207      	movs	r2, #7
   1e782:	05c9      	lsls	r1, r1, #23
   1e784:	d528      	bpl.n	1e7d8 <_svfiprintf_r+0x1b4>
   1e786:	189b      	adds	r3, r3, r2
   1e788:	4393      	bics	r3, r2
   1e78a:	3308      	adds	r3, #8
   1e78c:	9305      	str	r3, [sp, #20]
   1e78e:	696b      	ldr	r3, [r5, #20]
   1e790:	9a03      	ldr	r2, [sp, #12]
   1e792:	189b      	adds	r3, r3, r2
   1e794:	616b      	str	r3, [r5, #20]
   1e796:	e767      	b.n	1e668 <_svfiprintf_r+0x44>
   1e798:	425b      	negs	r3, r3
   1e79a:	60eb      	str	r3, [r5, #12]
   1e79c:	2302      	movs	r3, #2
   1e79e:	430b      	orrs	r3, r1
   1e7a0:	602b      	str	r3, [r5, #0]
   1e7a2:	e7c0      	b.n	1e726 <_svfiprintf_r+0x102>
   1e7a4:	434b      	muls	r3, r1
   1e7a6:	3401      	adds	r4, #1
   1e7a8:	189b      	adds	r3, r3, r2
   1e7aa:	2001      	movs	r0, #1
   1e7ac:	e7a0      	b.n	1e6f0 <_svfiprintf_r+0xcc>
   1e7ae:	2301      	movs	r3, #1
   1e7b0:	425b      	negs	r3, r3
   1e7b2:	e7c7      	b.n	1e744 <_svfiprintf_r+0x120>
   1e7b4:	2300      	movs	r3, #0
   1e7b6:	0014      	movs	r4, r2
   1e7b8:	200a      	movs	r0, #10
   1e7ba:	001a      	movs	r2, r3
   1e7bc:	606b      	str	r3, [r5, #4]
   1e7be:	7821      	ldrb	r1, [r4, #0]
   1e7c0:	3930      	subs	r1, #48	; 0x30
   1e7c2:	2909      	cmp	r1, #9
   1e7c4:	d903      	bls.n	1e7ce <_svfiprintf_r+0x1aa>
   1e7c6:	2b00      	cmp	r3, #0
   1e7c8:	d0bd      	beq.n	1e746 <_svfiprintf_r+0x122>
   1e7ca:	9207      	str	r2, [sp, #28]
   1e7cc:	e7bb      	b.n	1e746 <_svfiprintf_r+0x122>
   1e7ce:	4342      	muls	r2, r0
   1e7d0:	3401      	adds	r4, #1
   1e7d2:	1852      	adds	r2, r2, r1
   1e7d4:	2301      	movs	r3, #1
   1e7d6:	e7f2      	b.n	1e7be <_svfiprintf_r+0x19a>
   1e7d8:	3307      	adds	r3, #7
   1e7da:	e7d5      	b.n	1e788 <_svfiprintf_r+0x164>
   1e7dc:	ab05      	add	r3, sp, #20
   1e7de:	9300      	str	r3, [sp, #0]
   1e7e0:	003a      	movs	r2, r7
   1e7e2:	4b11      	ldr	r3, [pc, #68]	; (1e828 <_svfiprintf_r+0x204>)
   1e7e4:	0029      	movs	r1, r5
   1e7e6:	9802      	ldr	r0, [sp, #8]
   1e7e8:	e000      	b.n	1e7ec <_svfiprintf_r+0x1c8>
   1e7ea:	bf00      	nop
   1e7ec:	9003      	str	r0, [sp, #12]
   1e7ee:	9b03      	ldr	r3, [sp, #12]
   1e7f0:	3301      	adds	r3, #1
   1e7f2:	d1cc      	bne.n	1e78e <_svfiprintf_r+0x16a>
   1e7f4:	89bb      	ldrh	r3, [r7, #12]
   1e7f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e7f8:	065b      	lsls	r3, r3, #25
   1e7fa:	d400      	bmi.n	1e7fe <_svfiprintf_r+0x1da>
   1e7fc:	e729      	b.n	1e652 <_svfiprintf_r+0x2e>
   1e7fe:	2001      	movs	r0, #1
   1e800:	4240      	negs	r0, r0
   1e802:	e726      	b.n	1e652 <_svfiprintf_r+0x2e>
   1e804:	ab05      	add	r3, sp, #20
   1e806:	9300      	str	r3, [sp, #0]
   1e808:	003a      	movs	r2, r7
   1e80a:	4b07      	ldr	r3, [pc, #28]	; (1e828 <_svfiprintf_r+0x204>)
   1e80c:	0029      	movs	r1, r5
   1e80e:	9802      	ldr	r0, [sp, #8]
   1e810:	f000 fba0 	bl	1ef54 <_printf_i>
   1e814:	e7ea      	b.n	1e7ec <_svfiprintf_r+0x1c8>
   1e816:	46c0      	nop			; (mov r8, r8)
   1e818:	00021da4 	.word	0x00021da4
   1e81c:	00021daa 	.word	0x00021daa
   1e820:	00021dae 	.word	0x00021dae
   1e824:	00000000 	.word	0x00000000
   1e828:	0001e561 	.word	0x0001e561

0001e82c <_sungetc_r>:
   1e82c:	b570      	push	{r4, r5, r6, lr}
   1e82e:	0014      	movs	r4, r2
   1e830:	1c4b      	adds	r3, r1, #1
   1e832:	d103      	bne.n	1e83c <_sungetc_r+0x10>
   1e834:	2501      	movs	r5, #1
   1e836:	426d      	negs	r5, r5
   1e838:	0028      	movs	r0, r5
   1e83a:	bd70      	pop	{r4, r5, r6, pc}
   1e83c:	8993      	ldrh	r3, [r2, #12]
   1e83e:	2220      	movs	r2, #32
   1e840:	4393      	bics	r3, r2
   1e842:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1e844:	81a3      	strh	r3, [r4, #12]
   1e846:	b2ce      	uxtb	r6, r1
   1e848:	b2cd      	uxtb	r5, r1
   1e84a:	6863      	ldr	r3, [r4, #4]
   1e84c:	2a00      	cmp	r2, #0
   1e84e:	d010      	beq.n	1e872 <_sungetc_r+0x46>
   1e850:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1e852:	4293      	cmp	r3, r2
   1e854:	da07      	bge.n	1e866 <_sungetc_r+0x3a>
   1e856:	6823      	ldr	r3, [r4, #0]
   1e858:	3b01      	subs	r3, #1
   1e85a:	6023      	str	r3, [r4, #0]
   1e85c:	701e      	strb	r6, [r3, #0]
   1e85e:	6863      	ldr	r3, [r4, #4]
   1e860:	3301      	adds	r3, #1
   1e862:	6063      	str	r3, [r4, #4]
   1e864:	e7e8      	b.n	1e838 <_sungetc_r+0xc>
   1e866:	0021      	movs	r1, r4
   1e868:	f000 ff9c 	bl	1f7a4 <__submore>
   1e86c:	2800      	cmp	r0, #0
   1e86e:	d0f2      	beq.n	1e856 <_sungetc_r+0x2a>
   1e870:	e7e0      	b.n	1e834 <_sungetc_r+0x8>
   1e872:	6921      	ldr	r1, [r4, #16]
   1e874:	6822      	ldr	r2, [r4, #0]
   1e876:	2900      	cmp	r1, #0
   1e878:	d007      	beq.n	1e88a <_sungetc_r+0x5e>
   1e87a:	4291      	cmp	r1, r2
   1e87c:	d205      	bcs.n	1e88a <_sungetc_r+0x5e>
   1e87e:	1e51      	subs	r1, r2, #1
   1e880:	7808      	ldrb	r0, [r1, #0]
   1e882:	4285      	cmp	r5, r0
   1e884:	d101      	bne.n	1e88a <_sungetc_r+0x5e>
   1e886:	6021      	str	r1, [r4, #0]
   1e888:	e7ea      	b.n	1e860 <_sungetc_r+0x34>
   1e88a:	6423      	str	r3, [r4, #64]	; 0x40
   1e88c:	0023      	movs	r3, r4
   1e88e:	3344      	adds	r3, #68	; 0x44
   1e890:	6363      	str	r3, [r4, #52]	; 0x34
   1e892:	2303      	movs	r3, #3
   1e894:	63a3      	str	r3, [r4, #56]	; 0x38
   1e896:	0023      	movs	r3, r4
   1e898:	3346      	adds	r3, #70	; 0x46
   1e89a:	63e2      	str	r2, [r4, #60]	; 0x3c
   1e89c:	701e      	strb	r6, [r3, #0]
   1e89e:	6023      	str	r3, [r4, #0]
   1e8a0:	2301      	movs	r3, #1
   1e8a2:	e7de      	b.n	1e862 <_sungetc_r+0x36>

0001e8a4 <__ssrefill_r>:
   1e8a4:	b510      	push	{r4, lr}
   1e8a6:	000c      	movs	r4, r1
   1e8a8:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1e8aa:	2900      	cmp	r1, #0
   1e8ac:	d00e      	beq.n	1e8cc <__ssrefill_r+0x28>
   1e8ae:	0023      	movs	r3, r4
   1e8b0:	3344      	adds	r3, #68	; 0x44
   1e8b2:	4299      	cmp	r1, r3
   1e8b4:	d001      	beq.n	1e8ba <__ssrefill_r+0x16>
   1e8b6:	f7fd fcb9 	bl	1c22c <_free_r>
   1e8ba:	2000      	movs	r0, #0
   1e8bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1e8be:	6360      	str	r0, [r4, #52]	; 0x34
   1e8c0:	6063      	str	r3, [r4, #4]
   1e8c2:	4283      	cmp	r3, r0
   1e8c4:	d002      	beq.n	1e8cc <__ssrefill_r+0x28>
   1e8c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e8c8:	6023      	str	r3, [r4, #0]
   1e8ca:	bd10      	pop	{r4, pc}
   1e8cc:	6923      	ldr	r3, [r4, #16]
   1e8ce:	2001      	movs	r0, #1
   1e8d0:	6023      	str	r3, [r4, #0]
   1e8d2:	2300      	movs	r3, #0
   1e8d4:	89a2      	ldrh	r2, [r4, #12]
   1e8d6:	6063      	str	r3, [r4, #4]
   1e8d8:	3320      	adds	r3, #32
   1e8da:	4313      	orrs	r3, r2
   1e8dc:	81a3      	strh	r3, [r4, #12]
   1e8de:	4240      	negs	r0, r0
   1e8e0:	e7f3      	b.n	1e8ca <__ssrefill_r+0x26>
	...

0001e8e4 <__ssvfiscanf_r>:
   1e8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8e6:	4cbd      	ldr	r4, [pc, #756]	; (1ebdc <__ssvfiscanf_r+0x2f8>)
   1e8e8:	2586      	movs	r5, #134	; 0x86
   1e8ea:	44a5      	add	sp, r4
   1e8ec:	9303      	str	r3, [sp, #12]
   1e8ee:	2300      	movs	r3, #0
   1e8f0:	9348      	str	r3, [sp, #288]	; 0x120
   1e8f2:	9349      	str	r3, [sp, #292]	; 0x124
   1e8f4:	ab05      	add	r3, sp, #20
   1e8f6:	934a      	str	r3, [sp, #296]	; 0x128
   1e8f8:	23be      	movs	r3, #190	; 0xbe
   1e8fa:	006d      	lsls	r5, r5, #1
   1e8fc:	9000      	str	r0, [sp, #0]
   1e8fe:	000c      	movs	r4, r1
   1e900:	a802      	add	r0, sp, #8
   1e902:	49b7      	ldr	r1, [pc, #732]	; (1ebe0 <__ssvfiscanf_r+0x2fc>)
   1e904:	005b      	lsls	r3, r3, #1
   1e906:	1940      	adds	r0, r0, r5
   1e908:	27c0      	movs	r7, #192	; 0xc0
   1e90a:	50c1      	str	r1, [r0, r3]
   1e90c:	ab02      	add	r3, sp, #8
   1e90e:	195b      	adds	r3, r3, r5
   1e910:	0015      	movs	r5, r2
   1e912:	49b4      	ldr	r1, [pc, #720]	; (1ebe4 <__ssvfiscanf_r+0x300>)
   1e914:	007f      	lsls	r7, r7, #1
   1e916:	51d9      	str	r1, [r3, r7]
   1e918:	782b      	ldrb	r3, [r5, #0]
   1e91a:	2b00      	cmp	r3, #0
   1e91c:	d100      	bne.n	1e920 <__ssvfiscanf_r+0x3c>
   1e91e:	e15b      	b.n	1ebd8 <__ssvfiscanf_r+0x2f4>
   1e920:	f7fd fba6 	bl	1c070 <__locale_ctype_ptr>
   1e924:	2208      	movs	r2, #8
   1e926:	782b      	ldrb	r3, [r5, #0]
   1e928:	18c0      	adds	r0, r0, r3
   1e92a:	9301      	str	r3, [sp, #4]
   1e92c:	7843      	ldrb	r3, [r0, #1]
   1e92e:	4013      	ands	r3, r2
   1e930:	d141      	bne.n	1e9b6 <__ssvfiscanf_r+0xd2>
   1e932:	9a01      	ldr	r2, [sp, #4]
   1e934:	1c6e      	adds	r6, r5, #1
   1e936:	2a25      	cmp	r2, #37	; 0x25
   1e938:	d000      	beq.n	1e93c <__ssvfiscanf_r+0x58>
   1e93a:	e0a8      	b.n	1ea8e <__ssvfiscanf_r+0x1aa>
   1e93c:	9347      	str	r3, [sp, #284]	; 0x11c
   1e93e:	9345      	str	r3, [sp, #276]	; 0x114
   1e940:	786b      	ldrb	r3, [r5, #1]
   1e942:	2b2a      	cmp	r3, #42	; 0x2a
   1e944:	d102      	bne.n	1e94c <__ssvfiscanf_r+0x68>
   1e946:	3b1a      	subs	r3, #26
   1e948:	9345      	str	r3, [sp, #276]	; 0x114
   1e94a:	1cae      	adds	r6, r5, #2
   1e94c:	0035      	movs	r5, r6
   1e94e:	220a      	movs	r2, #10
   1e950:	7829      	ldrb	r1, [r5, #0]
   1e952:	000b      	movs	r3, r1
   1e954:	3b30      	subs	r3, #48	; 0x30
   1e956:	2b09      	cmp	r3, #9
   1e958:	d948      	bls.n	1e9ec <__ssvfiscanf_r+0x108>
   1e95a:	4ea3      	ldr	r6, [pc, #652]	; (1ebe8 <__ssvfiscanf_r+0x304>)
   1e95c:	2203      	movs	r2, #3
   1e95e:	0030      	movs	r0, r6
   1e960:	f7fd fc26 	bl	1c1b0 <memchr>
   1e964:	2800      	cmp	r0, #0
   1e966:	d007      	beq.n	1e978 <__ssvfiscanf_r+0x94>
   1e968:	2301      	movs	r3, #1
   1e96a:	1b80      	subs	r0, r0, r6
   1e96c:	4083      	lsls	r3, r0
   1e96e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1e970:	3501      	adds	r5, #1
   1e972:	4313      	orrs	r3, r2
   1e974:	9202      	str	r2, [sp, #8]
   1e976:	9345      	str	r3, [sp, #276]	; 0x114
   1e978:	782b      	ldrb	r3, [r5, #0]
   1e97a:	1c6e      	adds	r6, r5, #1
   1e97c:	2b67      	cmp	r3, #103	; 0x67
   1e97e:	d858      	bhi.n	1ea32 <__ssvfiscanf_r+0x14e>
   1e980:	2b65      	cmp	r3, #101	; 0x65
   1e982:	d300      	bcc.n	1e986 <__ssvfiscanf_r+0xa2>
   1e984:	e0dd      	b.n	1eb42 <__ssvfiscanf_r+0x25e>
   1e986:	2b47      	cmp	r3, #71	; 0x47
   1e988:	d838      	bhi.n	1e9fc <__ssvfiscanf_r+0x118>
   1e98a:	2b45      	cmp	r3, #69	; 0x45
   1e98c:	d300      	bcc.n	1e990 <__ssvfiscanf_r+0xac>
   1e98e:	e0d8      	b.n	1eb42 <__ssvfiscanf_r+0x25e>
   1e990:	2b00      	cmp	r3, #0
   1e992:	d100      	bne.n	1e996 <__ssvfiscanf_r+0xb2>
   1e994:	e11d      	b.n	1ebd2 <__ssvfiscanf_r+0x2ee>
   1e996:	2b25      	cmp	r3, #37	; 0x25
   1e998:	d079      	beq.n	1ea8e <__ssvfiscanf_r+0x1aa>
   1e99a:	2303      	movs	r3, #3
   1e99c:	934b      	str	r3, [sp, #300]	; 0x12c
   1e99e:	3307      	adds	r3, #7
   1e9a0:	9346      	str	r3, [sp, #280]	; 0x118
   1e9a2:	e053      	b.n	1ea4c <__ssvfiscanf_r+0x168>
   1e9a4:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1e9a6:	3301      	adds	r3, #1
   1e9a8:	9201      	str	r2, [sp, #4]
   1e9aa:	3201      	adds	r2, #1
   1e9ac:	9249      	str	r2, [sp, #292]	; 0x124
   1e9ae:	6862      	ldr	r2, [r4, #4]
   1e9b0:	6023      	str	r3, [r4, #0]
   1e9b2:	3a01      	subs	r2, #1
   1e9b4:	6062      	str	r2, [r4, #4]
   1e9b6:	6863      	ldr	r3, [r4, #4]
   1e9b8:	2b00      	cmp	r3, #0
   1e9ba:	dd0b      	ble.n	1e9d4 <__ssvfiscanf_r+0xf0>
   1e9bc:	f7fd fb58 	bl	1c070 <__locale_ctype_ptr>
   1e9c0:	2108      	movs	r1, #8
   1e9c2:	6823      	ldr	r3, [r4, #0]
   1e9c4:	781a      	ldrb	r2, [r3, #0]
   1e9c6:	1880      	adds	r0, r0, r2
   1e9c8:	7842      	ldrb	r2, [r0, #1]
   1e9ca:	420a      	tst	r2, r1
   1e9cc:	d1ea      	bne.n	1e9a4 <__ssvfiscanf_r+0xc0>
   1e9ce:	1c6e      	adds	r6, r5, #1
   1e9d0:	0035      	movs	r5, r6
   1e9d2:	e7a1      	b.n	1e918 <__ssvfiscanf_r+0x34>
   1e9d4:	2286      	movs	r2, #134	; 0x86
   1e9d6:	ab02      	add	r3, sp, #8
   1e9d8:	0052      	lsls	r2, r2, #1
   1e9da:	189b      	adds	r3, r3, r2
   1e9dc:	59db      	ldr	r3, [r3, r7]
   1e9de:	0021      	movs	r1, r4
   1e9e0:	9800      	ldr	r0, [sp, #0]
   1e9e2:	9301      	str	r3, [sp, #4]
   1e9e4:	4798      	blx	r3
   1e9e6:	2800      	cmp	r0, #0
   1e9e8:	d0e8      	beq.n	1e9bc <__ssvfiscanf_r+0xd8>
   1e9ea:	e7f0      	b.n	1e9ce <__ssvfiscanf_r+0xea>
   1e9ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1e9ee:	3501      	adds	r5, #1
   1e9f0:	9302      	str	r3, [sp, #8]
   1e9f2:	4353      	muls	r3, r2
   1e9f4:	3b30      	subs	r3, #48	; 0x30
   1e9f6:	1859      	adds	r1, r3, r1
   1e9f8:	9147      	str	r1, [sp, #284]	; 0x11c
   1e9fa:	e7a9      	b.n	1e950 <__ssvfiscanf_r+0x6c>
   1e9fc:	2b5b      	cmp	r3, #91	; 0x5b
   1e9fe:	d100      	bne.n	1ea02 <__ssvfiscanf_r+0x11e>
   1ea00:	e077      	b.n	1eaf2 <__ssvfiscanf_r+0x20e>
   1ea02:	d80f      	bhi.n	1ea24 <__ssvfiscanf_r+0x140>
   1ea04:	2b58      	cmp	r3, #88	; 0x58
   1ea06:	d1c8      	bne.n	1e99a <__ssvfiscanf_r+0xb6>
   1ea08:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1ea0a:	9201      	str	r2, [sp, #4]
   1ea0c:	2280      	movs	r2, #128	; 0x80
   1ea0e:	9901      	ldr	r1, [sp, #4]
   1ea10:	0092      	lsls	r2, r2, #2
   1ea12:	430a      	orrs	r2, r1
   1ea14:	9245      	str	r2, [sp, #276]	; 0x114
   1ea16:	2210      	movs	r2, #16
   1ea18:	9246      	str	r2, [sp, #280]	; 0x118
   1ea1a:	2203      	movs	r2, #3
   1ea1c:	2b6e      	cmp	r3, #110	; 0x6e
   1ea1e:	dd14      	ble.n	1ea4a <__ssvfiscanf_r+0x166>
   1ea20:	3201      	adds	r2, #1
   1ea22:	e012      	b.n	1ea4a <__ssvfiscanf_r+0x166>
   1ea24:	2b63      	cmp	r3, #99	; 0x63
   1ea26:	d100      	bne.n	1ea2a <__ssvfiscanf_r+0x146>
   1ea28:	e071      	b.n	1eb0e <__ssvfiscanf_r+0x22a>
   1ea2a:	2b64      	cmp	r3, #100	; 0x64
   1ea2c:	d1b5      	bne.n	1e99a <__ssvfiscanf_r+0xb6>
   1ea2e:	220a      	movs	r2, #10
   1ea30:	e7f2      	b.n	1ea18 <__ssvfiscanf_r+0x134>
   1ea32:	2b70      	cmp	r3, #112	; 0x70
   1ea34:	d052      	beq.n	1eadc <__ssvfiscanf_r+0x1f8>
   1ea36:	d822      	bhi.n	1ea7e <__ssvfiscanf_r+0x19a>
   1ea38:	2b6e      	cmp	r3, #110	; 0x6e
   1ea3a:	d100      	bne.n	1ea3e <__ssvfiscanf_r+0x15a>
   1ea3c:	e06f      	b.n	1eb1e <__ssvfiscanf_r+0x23a>
   1ea3e:	d854      	bhi.n	1eaea <__ssvfiscanf_r+0x206>
   1ea40:	2b69      	cmp	r3, #105	; 0x69
   1ea42:	d1aa      	bne.n	1e99a <__ssvfiscanf_r+0xb6>
   1ea44:	2300      	movs	r3, #0
   1ea46:	2203      	movs	r2, #3
   1ea48:	9346      	str	r3, [sp, #280]	; 0x118
   1ea4a:	924b      	str	r2, [sp, #300]	; 0x12c
   1ea4c:	6863      	ldr	r3, [r4, #4]
   1ea4e:	2b00      	cmp	r3, #0
   1ea50:	dc00      	bgt.n	1ea54 <__ssvfiscanf_r+0x170>
   1ea52:	e078      	b.n	1eb46 <__ssvfiscanf_r+0x262>
   1ea54:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1ea56:	9301      	str	r3, [sp, #4]
   1ea58:	065b      	lsls	r3, r3, #25
   1ea5a:	d400      	bmi.n	1ea5e <__ssvfiscanf_r+0x17a>
   1ea5c:	e08b      	b.n	1eb76 <__ssvfiscanf_r+0x292>
   1ea5e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   1ea60:	2b02      	cmp	r3, #2
   1ea62:	dd00      	ble.n	1ea66 <__ssvfiscanf_r+0x182>
   1ea64:	e09d      	b.n	1eba2 <__ssvfiscanf_r+0x2be>
   1ea66:	ab03      	add	r3, sp, #12
   1ea68:	0022      	movs	r2, r4
   1ea6a:	a945      	add	r1, sp, #276	; 0x114
   1ea6c:	9800      	ldr	r0, [sp, #0]
   1ea6e:	f000 fb8b 	bl	1f188 <_scanf_chars>
   1ea72:	2801      	cmp	r0, #1
   1ea74:	d100      	bne.n	1ea78 <__ssvfiscanf_r+0x194>
   1ea76:	e0af      	b.n	1ebd8 <__ssvfiscanf_r+0x2f4>
   1ea78:	2802      	cmp	r0, #2
   1ea7a:	d1a9      	bne.n	1e9d0 <__ssvfiscanf_r+0xec>
   1ea7c:	e025      	b.n	1eaca <__ssvfiscanf_r+0x1e6>
   1ea7e:	2b75      	cmp	r3, #117	; 0x75
   1ea80:	d0d5      	beq.n	1ea2e <__ssvfiscanf_r+0x14a>
   1ea82:	2b78      	cmp	r3, #120	; 0x78
   1ea84:	d0c0      	beq.n	1ea08 <__ssvfiscanf_r+0x124>
   1ea86:	2b73      	cmp	r3, #115	; 0x73
   1ea88:	d187      	bne.n	1e99a <__ssvfiscanf_r+0xb6>
   1ea8a:	2302      	movs	r3, #2
   1ea8c:	e03d      	b.n	1eb0a <__ssvfiscanf_r+0x226>
   1ea8e:	6863      	ldr	r3, [r4, #4]
   1ea90:	2b00      	cmp	r3, #0
   1ea92:	dd0f      	ble.n	1eab4 <__ssvfiscanf_r+0x1d0>
   1ea94:	6823      	ldr	r3, [r4, #0]
   1ea96:	9901      	ldr	r1, [sp, #4]
   1ea98:	781a      	ldrb	r2, [r3, #0]
   1ea9a:	4291      	cmp	r1, r2
   1ea9c:	d000      	beq.n	1eaa0 <__ssvfiscanf_r+0x1bc>
   1ea9e:	e09b      	b.n	1ebd8 <__ssvfiscanf_r+0x2f4>
   1eaa0:	3301      	adds	r3, #1
   1eaa2:	6862      	ldr	r2, [r4, #4]
   1eaa4:	6023      	str	r3, [r4, #0]
   1eaa6:	9b49      	ldr	r3, [sp, #292]	; 0x124
   1eaa8:	3a01      	subs	r2, #1
   1eaaa:	9301      	str	r3, [sp, #4]
   1eaac:	3301      	adds	r3, #1
   1eaae:	6062      	str	r2, [r4, #4]
   1eab0:	9349      	str	r3, [sp, #292]	; 0x124
   1eab2:	e78d      	b.n	1e9d0 <__ssvfiscanf_r+0xec>
   1eab4:	2286      	movs	r2, #134	; 0x86
   1eab6:	ab02      	add	r3, sp, #8
   1eab8:	0052      	lsls	r2, r2, #1
   1eaba:	189b      	adds	r3, r3, r2
   1eabc:	59db      	ldr	r3, [r3, r7]
   1eabe:	0021      	movs	r1, r4
   1eac0:	9800      	ldr	r0, [sp, #0]
   1eac2:	9302      	str	r3, [sp, #8]
   1eac4:	4798      	blx	r3
   1eac6:	2800      	cmp	r0, #0
   1eac8:	d0e4      	beq.n	1ea94 <__ssvfiscanf_r+0x1b0>
   1eaca:	9848      	ldr	r0, [sp, #288]	; 0x120
   1eacc:	2800      	cmp	r0, #0
   1eace:	d000      	beq.n	1ead2 <__ssvfiscanf_r+0x1ee>
   1ead0:	e07b      	b.n	1ebca <__ssvfiscanf_r+0x2e6>
   1ead2:	3801      	subs	r0, #1
   1ead4:	23a7      	movs	r3, #167	; 0xa7
   1ead6:	009b      	lsls	r3, r3, #2
   1ead8:	449d      	add	sp, r3
   1eada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eadc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1eade:	9201      	str	r2, [sp, #4]
   1eae0:	2220      	movs	r2, #32
   1eae2:	9901      	ldr	r1, [sp, #4]
   1eae4:	430a      	orrs	r2, r1
   1eae6:	9245      	str	r2, [sp, #276]	; 0x114
   1eae8:	e78e      	b.n	1ea08 <__ssvfiscanf_r+0x124>
   1eaea:	2308      	movs	r3, #8
   1eaec:	2204      	movs	r2, #4
   1eaee:	9346      	str	r3, [sp, #280]	; 0x118
   1eaf0:	e7ab      	b.n	1ea4a <__ssvfiscanf_r+0x166>
   1eaf2:	0031      	movs	r1, r6
   1eaf4:	a805      	add	r0, sp, #20
   1eaf6:	f000 fcf5 	bl	1f4e4 <__sccl>
   1eafa:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1eafc:	0006      	movs	r6, r0
   1eafe:	9301      	str	r3, [sp, #4]
   1eb00:	2340      	movs	r3, #64	; 0x40
   1eb02:	9a01      	ldr	r2, [sp, #4]
   1eb04:	4313      	orrs	r3, r2
   1eb06:	9345      	str	r3, [sp, #276]	; 0x114
   1eb08:	2301      	movs	r3, #1
   1eb0a:	934b      	str	r3, [sp, #300]	; 0x12c
   1eb0c:	e79e      	b.n	1ea4c <__ssvfiscanf_r+0x168>
   1eb0e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1eb10:	9301      	str	r3, [sp, #4]
   1eb12:	2340      	movs	r3, #64	; 0x40
   1eb14:	9a01      	ldr	r2, [sp, #4]
   1eb16:	4313      	orrs	r3, r2
   1eb18:	9345      	str	r3, [sp, #276]	; 0x114
   1eb1a:	2300      	movs	r3, #0
   1eb1c:	e7f5      	b.n	1eb0a <__ssvfiscanf_r+0x226>
   1eb1e:	9945      	ldr	r1, [sp, #276]	; 0x114
   1eb20:	06cb      	lsls	r3, r1, #27
   1eb22:	d500      	bpl.n	1eb26 <__ssvfiscanf_r+0x242>
   1eb24:	e754      	b.n	1e9d0 <__ssvfiscanf_r+0xec>
   1eb26:	9b03      	ldr	r3, [sp, #12]
   1eb28:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1eb2a:	07c8      	lsls	r0, r1, #31
   1eb2c:	d504      	bpl.n	1eb38 <__ssvfiscanf_r+0x254>
   1eb2e:	1d19      	adds	r1, r3, #4
   1eb30:	9103      	str	r1, [sp, #12]
   1eb32:	681b      	ldr	r3, [r3, #0]
   1eb34:	801a      	strh	r2, [r3, #0]
   1eb36:	e74b      	b.n	1e9d0 <__ssvfiscanf_r+0xec>
   1eb38:	1d19      	adds	r1, r3, #4
   1eb3a:	9103      	str	r1, [sp, #12]
   1eb3c:	681b      	ldr	r3, [r3, #0]
   1eb3e:	601a      	str	r2, [r3, #0]
   1eb40:	e746      	b.n	1e9d0 <__ssvfiscanf_r+0xec>
   1eb42:	2305      	movs	r3, #5
   1eb44:	e7e1      	b.n	1eb0a <__ssvfiscanf_r+0x226>
   1eb46:	2286      	movs	r2, #134	; 0x86
   1eb48:	ab02      	add	r3, sp, #8
   1eb4a:	0052      	lsls	r2, r2, #1
   1eb4c:	189b      	adds	r3, r3, r2
   1eb4e:	59db      	ldr	r3, [r3, r7]
   1eb50:	0021      	movs	r1, r4
   1eb52:	9800      	ldr	r0, [sp, #0]
   1eb54:	9301      	str	r3, [sp, #4]
   1eb56:	4798      	blx	r3
   1eb58:	2800      	cmp	r0, #0
   1eb5a:	d100      	bne.n	1eb5e <__ssvfiscanf_r+0x27a>
   1eb5c:	e77a      	b.n	1ea54 <__ssvfiscanf_r+0x170>
   1eb5e:	e7b4      	b.n	1eaca <__ssvfiscanf_r+0x1e6>
   1eb60:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1eb62:	9201      	str	r2, [sp, #4]
   1eb64:	3201      	adds	r2, #1
   1eb66:	9249      	str	r2, [sp, #292]	; 0x124
   1eb68:	6862      	ldr	r2, [r4, #4]
   1eb6a:	3a01      	subs	r2, #1
   1eb6c:	6062      	str	r2, [r4, #4]
   1eb6e:	2a00      	cmp	r2, #0
   1eb70:	dd0b      	ble.n	1eb8a <__ssvfiscanf_r+0x2a6>
   1eb72:	3301      	adds	r3, #1
   1eb74:	6023      	str	r3, [r4, #0]
   1eb76:	f7fd fa7b 	bl	1c070 <__locale_ctype_ptr>
   1eb7a:	2108      	movs	r1, #8
   1eb7c:	6823      	ldr	r3, [r4, #0]
   1eb7e:	781a      	ldrb	r2, [r3, #0]
   1eb80:	1880      	adds	r0, r0, r2
   1eb82:	7842      	ldrb	r2, [r0, #1]
   1eb84:	420a      	tst	r2, r1
   1eb86:	d1eb      	bne.n	1eb60 <__ssvfiscanf_r+0x27c>
   1eb88:	e769      	b.n	1ea5e <__ssvfiscanf_r+0x17a>
   1eb8a:	2286      	movs	r2, #134	; 0x86
   1eb8c:	ab02      	add	r3, sp, #8
   1eb8e:	0052      	lsls	r2, r2, #1
   1eb90:	189b      	adds	r3, r3, r2
   1eb92:	59db      	ldr	r3, [r3, r7]
   1eb94:	0021      	movs	r1, r4
   1eb96:	9800      	ldr	r0, [sp, #0]
   1eb98:	9301      	str	r3, [sp, #4]
   1eb9a:	4798      	blx	r3
   1eb9c:	2800      	cmp	r0, #0
   1eb9e:	d0ea      	beq.n	1eb76 <__ssvfiscanf_r+0x292>
   1eba0:	e793      	b.n	1eaca <__ssvfiscanf_r+0x1e6>
   1eba2:	2b04      	cmp	r3, #4
   1eba4:	dc06      	bgt.n	1ebb4 <__ssvfiscanf_r+0x2d0>
   1eba6:	ab03      	add	r3, sp, #12
   1eba8:	0022      	movs	r2, r4
   1ebaa:	a945      	add	r1, sp, #276	; 0x114
   1ebac:	9800      	ldr	r0, [sp, #0]
   1ebae:	f000 fb4f 	bl	1f250 <_scanf_i>
   1ebb2:	e75e      	b.n	1ea72 <__ssvfiscanf_r+0x18e>
   1ebb4:	4b0d      	ldr	r3, [pc, #52]	; (1ebec <__ssvfiscanf_r+0x308>)
   1ebb6:	2b00      	cmp	r3, #0
   1ebb8:	d100      	bne.n	1ebbc <__ssvfiscanf_r+0x2d8>
   1ebba:	e709      	b.n	1e9d0 <__ssvfiscanf_r+0xec>
   1ebbc:	ab03      	add	r3, sp, #12
   1ebbe:	0022      	movs	r2, r4
   1ebc0:	a945      	add	r1, sp, #276	; 0x114
   1ebc2:	9800      	ldr	r0, [sp, #0]
   1ebc4:	e000      	b.n	1ebc8 <__ssvfiscanf_r+0x2e4>
   1ebc6:	bf00      	nop
   1ebc8:	e753      	b.n	1ea72 <__ssvfiscanf_r+0x18e>
   1ebca:	89a3      	ldrh	r3, [r4, #12]
   1ebcc:	065b      	lsls	r3, r3, #25
   1ebce:	d400      	bmi.n	1ebd2 <__ssvfiscanf_r+0x2ee>
   1ebd0:	e780      	b.n	1ead4 <__ssvfiscanf_r+0x1f0>
   1ebd2:	2001      	movs	r0, #1
   1ebd4:	4240      	negs	r0, r0
   1ebd6:	e77d      	b.n	1ead4 <__ssvfiscanf_r+0x1f0>
   1ebd8:	9848      	ldr	r0, [sp, #288]	; 0x120
   1ebda:	e77b      	b.n	1ead4 <__ssvfiscanf_r+0x1f0>
   1ebdc:	fffffd64 	.word	0xfffffd64
   1ebe0:	0001e82d 	.word	0x0001e82d
   1ebe4:	0001e8a5 	.word	0x0001e8a5
   1ebe8:	00021daa 	.word	0x00021daa
   1ebec:	00000000 	.word	0x00000000

0001ebf0 <__sfputc_r>:
   1ebf0:	6893      	ldr	r3, [r2, #8]
   1ebf2:	b510      	push	{r4, lr}
   1ebf4:	3b01      	subs	r3, #1
   1ebf6:	6093      	str	r3, [r2, #8]
   1ebf8:	2b00      	cmp	r3, #0
   1ebfa:	da05      	bge.n	1ec08 <__sfputc_r+0x18>
   1ebfc:	6994      	ldr	r4, [r2, #24]
   1ebfe:	42a3      	cmp	r3, r4
   1ec00:	db08      	blt.n	1ec14 <__sfputc_r+0x24>
   1ec02:	b2cb      	uxtb	r3, r1
   1ec04:	2b0a      	cmp	r3, #10
   1ec06:	d005      	beq.n	1ec14 <__sfputc_r+0x24>
   1ec08:	6813      	ldr	r3, [r2, #0]
   1ec0a:	1c58      	adds	r0, r3, #1
   1ec0c:	6010      	str	r0, [r2, #0]
   1ec0e:	7019      	strb	r1, [r3, #0]
   1ec10:	b2c8      	uxtb	r0, r1
   1ec12:	bd10      	pop	{r4, pc}
   1ec14:	f7fe fc3c 	bl	1d490 <__swbuf_r>
   1ec18:	e7fb      	b.n	1ec12 <__sfputc_r+0x22>

0001ec1a <__sfputs_r>:
   1ec1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec1c:	0006      	movs	r6, r0
   1ec1e:	000f      	movs	r7, r1
   1ec20:	0014      	movs	r4, r2
   1ec22:	18d5      	adds	r5, r2, r3
   1ec24:	42ac      	cmp	r4, r5
   1ec26:	d101      	bne.n	1ec2c <__sfputs_r+0x12>
   1ec28:	2000      	movs	r0, #0
   1ec2a:	e007      	b.n	1ec3c <__sfputs_r+0x22>
   1ec2c:	7821      	ldrb	r1, [r4, #0]
   1ec2e:	003a      	movs	r2, r7
   1ec30:	0030      	movs	r0, r6
   1ec32:	f7ff ffdd 	bl	1ebf0 <__sfputc_r>
   1ec36:	3401      	adds	r4, #1
   1ec38:	1c43      	adds	r3, r0, #1
   1ec3a:	d1f3      	bne.n	1ec24 <__sfputs_r+0xa>
   1ec3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001ec40 <_vfiprintf_r>:
   1ec40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec42:	b09f      	sub	sp, #124	; 0x7c
   1ec44:	0006      	movs	r6, r0
   1ec46:	000f      	movs	r7, r1
   1ec48:	0014      	movs	r4, r2
   1ec4a:	9305      	str	r3, [sp, #20]
   1ec4c:	2800      	cmp	r0, #0
   1ec4e:	d004      	beq.n	1ec5a <_vfiprintf_r+0x1a>
   1ec50:	6983      	ldr	r3, [r0, #24]
   1ec52:	2b00      	cmp	r3, #0
   1ec54:	d101      	bne.n	1ec5a <_vfiprintf_r+0x1a>
   1ec56:	f7fd f94d 	bl	1bef4 <__sinit>
   1ec5a:	4b7f      	ldr	r3, [pc, #508]	; (1ee58 <_vfiprintf_r+0x218>)
   1ec5c:	429f      	cmp	r7, r3
   1ec5e:	d15c      	bne.n	1ed1a <_vfiprintf_r+0xda>
   1ec60:	6877      	ldr	r7, [r6, #4]
   1ec62:	89bb      	ldrh	r3, [r7, #12]
   1ec64:	071b      	lsls	r3, r3, #28
   1ec66:	d562      	bpl.n	1ed2e <_vfiprintf_r+0xee>
   1ec68:	693b      	ldr	r3, [r7, #16]
   1ec6a:	2b00      	cmp	r3, #0
   1ec6c:	d05f      	beq.n	1ed2e <_vfiprintf_r+0xee>
   1ec6e:	2300      	movs	r3, #0
   1ec70:	ad06      	add	r5, sp, #24
   1ec72:	616b      	str	r3, [r5, #20]
   1ec74:	3320      	adds	r3, #32
   1ec76:	766b      	strb	r3, [r5, #25]
   1ec78:	3310      	adds	r3, #16
   1ec7a:	76ab      	strb	r3, [r5, #26]
   1ec7c:	9402      	str	r4, [sp, #8]
   1ec7e:	9c02      	ldr	r4, [sp, #8]
   1ec80:	7823      	ldrb	r3, [r4, #0]
   1ec82:	2b00      	cmp	r3, #0
   1ec84:	d15d      	bne.n	1ed42 <_vfiprintf_r+0x102>
   1ec86:	9b02      	ldr	r3, [sp, #8]
   1ec88:	1ae3      	subs	r3, r4, r3
   1ec8a:	9304      	str	r3, [sp, #16]
   1ec8c:	d00d      	beq.n	1ecaa <_vfiprintf_r+0x6a>
   1ec8e:	9b04      	ldr	r3, [sp, #16]
   1ec90:	9a02      	ldr	r2, [sp, #8]
   1ec92:	0039      	movs	r1, r7
   1ec94:	0030      	movs	r0, r6
   1ec96:	f7ff ffc0 	bl	1ec1a <__sfputs_r>
   1ec9a:	1c43      	adds	r3, r0, #1
   1ec9c:	d100      	bne.n	1eca0 <_vfiprintf_r+0x60>
   1ec9e:	e0cc      	b.n	1ee3a <_vfiprintf_r+0x1fa>
   1eca0:	696a      	ldr	r2, [r5, #20]
   1eca2:	9b04      	ldr	r3, [sp, #16]
   1eca4:	4694      	mov	ip, r2
   1eca6:	4463      	add	r3, ip
   1eca8:	616b      	str	r3, [r5, #20]
   1ecaa:	7823      	ldrb	r3, [r4, #0]
   1ecac:	2b00      	cmp	r3, #0
   1ecae:	d100      	bne.n	1ecb2 <_vfiprintf_r+0x72>
   1ecb0:	e0c3      	b.n	1ee3a <_vfiprintf_r+0x1fa>
   1ecb2:	2201      	movs	r2, #1
   1ecb4:	2300      	movs	r3, #0
   1ecb6:	4252      	negs	r2, r2
   1ecb8:	606a      	str	r2, [r5, #4]
   1ecba:	a902      	add	r1, sp, #8
   1ecbc:	3254      	adds	r2, #84	; 0x54
   1ecbe:	1852      	adds	r2, r2, r1
   1ecc0:	3401      	adds	r4, #1
   1ecc2:	602b      	str	r3, [r5, #0]
   1ecc4:	60eb      	str	r3, [r5, #12]
   1ecc6:	60ab      	str	r3, [r5, #8]
   1ecc8:	7013      	strb	r3, [r2, #0]
   1ecca:	65ab      	str	r3, [r5, #88]	; 0x58
   1eccc:	7821      	ldrb	r1, [r4, #0]
   1ecce:	2205      	movs	r2, #5
   1ecd0:	4862      	ldr	r0, [pc, #392]	; (1ee5c <_vfiprintf_r+0x21c>)
   1ecd2:	f7fd fa6d 	bl	1c1b0 <memchr>
   1ecd6:	1c63      	adds	r3, r4, #1
   1ecd8:	469c      	mov	ip, r3
   1ecda:	2800      	cmp	r0, #0
   1ecdc:	d135      	bne.n	1ed4a <_vfiprintf_r+0x10a>
   1ecde:	6829      	ldr	r1, [r5, #0]
   1ece0:	06cb      	lsls	r3, r1, #27
   1ece2:	d504      	bpl.n	1ecee <_vfiprintf_r+0xae>
   1ece4:	2353      	movs	r3, #83	; 0x53
   1ece6:	aa02      	add	r2, sp, #8
   1ece8:	3020      	adds	r0, #32
   1ecea:	189b      	adds	r3, r3, r2
   1ecec:	7018      	strb	r0, [r3, #0]
   1ecee:	070b      	lsls	r3, r1, #28
   1ecf0:	d504      	bpl.n	1ecfc <_vfiprintf_r+0xbc>
   1ecf2:	2353      	movs	r3, #83	; 0x53
   1ecf4:	202b      	movs	r0, #43	; 0x2b
   1ecf6:	aa02      	add	r2, sp, #8
   1ecf8:	189b      	adds	r3, r3, r2
   1ecfa:	7018      	strb	r0, [r3, #0]
   1ecfc:	7823      	ldrb	r3, [r4, #0]
   1ecfe:	2b2a      	cmp	r3, #42	; 0x2a
   1ed00:	d02c      	beq.n	1ed5c <_vfiprintf_r+0x11c>
   1ed02:	2000      	movs	r0, #0
   1ed04:	210a      	movs	r1, #10
   1ed06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ed08:	7822      	ldrb	r2, [r4, #0]
   1ed0a:	3a30      	subs	r2, #48	; 0x30
   1ed0c:	2a09      	cmp	r2, #9
   1ed0e:	d800      	bhi.n	1ed12 <_vfiprintf_r+0xd2>
   1ed10:	e06b      	b.n	1edea <_vfiprintf_r+0x1aa>
   1ed12:	2800      	cmp	r0, #0
   1ed14:	d02a      	beq.n	1ed6c <_vfiprintf_r+0x12c>
   1ed16:	9309      	str	r3, [sp, #36]	; 0x24
   1ed18:	e028      	b.n	1ed6c <_vfiprintf_r+0x12c>
   1ed1a:	4b51      	ldr	r3, [pc, #324]	; (1ee60 <_vfiprintf_r+0x220>)
   1ed1c:	429f      	cmp	r7, r3
   1ed1e:	d101      	bne.n	1ed24 <_vfiprintf_r+0xe4>
   1ed20:	68b7      	ldr	r7, [r6, #8]
   1ed22:	e79e      	b.n	1ec62 <_vfiprintf_r+0x22>
   1ed24:	4b4f      	ldr	r3, [pc, #316]	; (1ee64 <_vfiprintf_r+0x224>)
   1ed26:	429f      	cmp	r7, r3
   1ed28:	d19b      	bne.n	1ec62 <_vfiprintf_r+0x22>
   1ed2a:	68f7      	ldr	r7, [r6, #12]
   1ed2c:	e799      	b.n	1ec62 <_vfiprintf_r+0x22>
   1ed2e:	0039      	movs	r1, r7
   1ed30:	0030      	movs	r0, r6
   1ed32:	f7fe fc23 	bl	1d57c <__swsetup_r>
   1ed36:	2800      	cmp	r0, #0
   1ed38:	d099      	beq.n	1ec6e <_vfiprintf_r+0x2e>
   1ed3a:	2001      	movs	r0, #1
   1ed3c:	4240      	negs	r0, r0
   1ed3e:	b01f      	add	sp, #124	; 0x7c
   1ed40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed42:	2b25      	cmp	r3, #37	; 0x25
   1ed44:	d09f      	beq.n	1ec86 <_vfiprintf_r+0x46>
   1ed46:	3401      	adds	r4, #1
   1ed48:	e79a      	b.n	1ec80 <_vfiprintf_r+0x40>
   1ed4a:	4b44      	ldr	r3, [pc, #272]	; (1ee5c <_vfiprintf_r+0x21c>)
   1ed4c:	6829      	ldr	r1, [r5, #0]
   1ed4e:	1ac0      	subs	r0, r0, r3
   1ed50:	2301      	movs	r3, #1
   1ed52:	4083      	lsls	r3, r0
   1ed54:	430b      	orrs	r3, r1
   1ed56:	602b      	str	r3, [r5, #0]
   1ed58:	4664      	mov	r4, ip
   1ed5a:	e7b7      	b.n	1eccc <_vfiprintf_r+0x8c>
   1ed5c:	9b05      	ldr	r3, [sp, #20]
   1ed5e:	1d18      	adds	r0, r3, #4
   1ed60:	681b      	ldr	r3, [r3, #0]
   1ed62:	9005      	str	r0, [sp, #20]
   1ed64:	2b00      	cmp	r3, #0
   1ed66:	db3a      	blt.n	1edde <_vfiprintf_r+0x19e>
   1ed68:	9309      	str	r3, [sp, #36]	; 0x24
   1ed6a:	4664      	mov	r4, ip
   1ed6c:	7823      	ldrb	r3, [r4, #0]
   1ed6e:	2b2e      	cmp	r3, #46	; 0x2e
   1ed70:	d10b      	bne.n	1ed8a <_vfiprintf_r+0x14a>
   1ed72:	7863      	ldrb	r3, [r4, #1]
   1ed74:	1c62      	adds	r2, r4, #1
   1ed76:	2b2a      	cmp	r3, #42	; 0x2a
   1ed78:	d13f      	bne.n	1edfa <_vfiprintf_r+0x1ba>
   1ed7a:	9b05      	ldr	r3, [sp, #20]
   1ed7c:	3402      	adds	r4, #2
   1ed7e:	1d1a      	adds	r2, r3, #4
   1ed80:	681b      	ldr	r3, [r3, #0]
   1ed82:	9205      	str	r2, [sp, #20]
   1ed84:	2b00      	cmp	r3, #0
   1ed86:	db35      	blt.n	1edf4 <_vfiprintf_r+0x1b4>
   1ed88:	9307      	str	r3, [sp, #28]
   1ed8a:	7821      	ldrb	r1, [r4, #0]
   1ed8c:	2203      	movs	r2, #3
   1ed8e:	4836      	ldr	r0, [pc, #216]	; (1ee68 <_vfiprintf_r+0x228>)
   1ed90:	f7fd fa0e 	bl	1c1b0 <memchr>
   1ed94:	2800      	cmp	r0, #0
   1ed96:	d007      	beq.n	1eda8 <_vfiprintf_r+0x168>
   1ed98:	4b33      	ldr	r3, [pc, #204]	; (1ee68 <_vfiprintf_r+0x228>)
   1ed9a:	682a      	ldr	r2, [r5, #0]
   1ed9c:	1ac0      	subs	r0, r0, r3
   1ed9e:	2340      	movs	r3, #64	; 0x40
   1eda0:	4083      	lsls	r3, r0
   1eda2:	4313      	orrs	r3, r2
   1eda4:	602b      	str	r3, [r5, #0]
   1eda6:	3401      	adds	r4, #1
   1eda8:	7821      	ldrb	r1, [r4, #0]
   1edaa:	1c63      	adds	r3, r4, #1
   1edac:	2206      	movs	r2, #6
   1edae:	482f      	ldr	r0, [pc, #188]	; (1ee6c <_vfiprintf_r+0x22c>)
   1edb0:	9302      	str	r3, [sp, #8]
   1edb2:	7629      	strb	r1, [r5, #24]
   1edb4:	f7fd f9fc 	bl	1c1b0 <memchr>
   1edb8:	2800      	cmp	r0, #0
   1edba:	d044      	beq.n	1ee46 <_vfiprintf_r+0x206>
   1edbc:	4b2c      	ldr	r3, [pc, #176]	; (1ee70 <_vfiprintf_r+0x230>)
   1edbe:	2b00      	cmp	r3, #0
   1edc0:	d12f      	bne.n	1ee22 <_vfiprintf_r+0x1e2>
   1edc2:	6829      	ldr	r1, [r5, #0]
   1edc4:	9b05      	ldr	r3, [sp, #20]
   1edc6:	2207      	movs	r2, #7
   1edc8:	05c9      	lsls	r1, r1, #23
   1edca:	d528      	bpl.n	1ee1e <_vfiprintf_r+0x1de>
   1edcc:	189b      	adds	r3, r3, r2
   1edce:	4393      	bics	r3, r2
   1edd0:	3308      	adds	r3, #8
   1edd2:	9305      	str	r3, [sp, #20]
   1edd4:	696b      	ldr	r3, [r5, #20]
   1edd6:	9a03      	ldr	r2, [sp, #12]
   1edd8:	189b      	adds	r3, r3, r2
   1edda:	616b      	str	r3, [r5, #20]
   1eddc:	e74f      	b.n	1ec7e <_vfiprintf_r+0x3e>
   1edde:	425b      	negs	r3, r3
   1ede0:	60eb      	str	r3, [r5, #12]
   1ede2:	2302      	movs	r3, #2
   1ede4:	430b      	orrs	r3, r1
   1ede6:	602b      	str	r3, [r5, #0]
   1ede8:	e7bf      	b.n	1ed6a <_vfiprintf_r+0x12a>
   1edea:	434b      	muls	r3, r1
   1edec:	3401      	adds	r4, #1
   1edee:	189b      	adds	r3, r3, r2
   1edf0:	2001      	movs	r0, #1
   1edf2:	e789      	b.n	1ed08 <_vfiprintf_r+0xc8>
   1edf4:	2301      	movs	r3, #1
   1edf6:	425b      	negs	r3, r3
   1edf8:	e7c6      	b.n	1ed88 <_vfiprintf_r+0x148>
   1edfa:	2300      	movs	r3, #0
   1edfc:	0014      	movs	r4, r2
   1edfe:	200a      	movs	r0, #10
   1ee00:	001a      	movs	r2, r3
   1ee02:	606b      	str	r3, [r5, #4]
   1ee04:	7821      	ldrb	r1, [r4, #0]
   1ee06:	3930      	subs	r1, #48	; 0x30
   1ee08:	2909      	cmp	r1, #9
   1ee0a:	d903      	bls.n	1ee14 <_vfiprintf_r+0x1d4>
   1ee0c:	2b00      	cmp	r3, #0
   1ee0e:	d0bc      	beq.n	1ed8a <_vfiprintf_r+0x14a>
   1ee10:	9207      	str	r2, [sp, #28]
   1ee12:	e7ba      	b.n	1ed8a <_vfiprintf_r+0x14a>
   1ee14:	4342      	muls	r2, r0
   1ee16:	3401      	adds	r4, #1
   1ee18:	1852      	adds	r2, r2, r1
   1ee1a:	2301      	movs	r3, #1
   1ee1c:	e7f2      	b.n	1ee04 <_vfiprintf_r+0x1c4>
   1ee1e:	3307      	adds	r3, #7
   1ee20:	e7d5      	b.n	1edce <_vfiprintf_r+0x18e>
   1ee22:	ab05      	add	r3, sp, #20
   1ee24:	9300      	str	r3, [sp, #0]
   1ee26:	003a      	movs	r2, r7
   1ee28:	4b12      	ldr	r3, [pc, #72]	; (1ee74 <_vfiprintf_r+0x234>)
   1ee2a:	0029      	movs	r1, r5
   1ee2c:	0030      	movs	r0, r6
   1ee2e:	e000      	b.n	1ee32 <_vfiprintf_r+0x1f2>
   1ee30:	bf00      	nop
   1ee32:	9003      	str	r0, [sp, #12]
   1ee34:	9b03      	ldr	r3, [sp, #12]
   1ee36:	3301      	adds	r3, #1
   1ee38:	d1cc      	bne.n	1edd4 <_vfiprintf_r+0x194>
   1ee3a:	89bb      	ldrh	r3, [r7, #12]
   1ee3c:	065b      	lsls	r3, r3, #25
   1ee3e:	d500      	bpl.n	1ee42 <_vfiprintf_r+0x202>
   1ee40:	e77b      	b.n	1ed3a <_vfiprintf_r+0xfa>
   1ee42:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ee44:	e77b      	b.n	1ed3e <_vfiprintf_r+0xfe>
   1ee46:	ab05      	add	r3, sp, #20
   1ee48:	9300      	str	r3, [sp, #0]
   1ee4a:	003a      	movs	r2, r7
   1ee4c:	4b09      	ldr	r3, [pc, #36]	; (1ee74 <_vfiprintf_r+0x234>)
   1ee4e:	0029      	movs	r1, r5
   1ee50:	0030      	movs	r0, r6
   1ee52:	f000 f87f 	bl	1ef54 <_printf_i>
   1ee56:	e7ec      	b.n	1ee32 <_vfiprintf_r+0x1f2>
   1ee58:	00021af0 	.word	0x00021af0
   1ee5c:	00021da4 	.word	0x00021da4
   1ee60:	00021b10 	.word	0x00021b10
   1ee64:	00021ad0 	.word	0x00021ad0
   1ee68:	00021daa 	.word	0x00021daa
   1ee6c:	00021dae 	.word	0x00021dae
   1ee70:	00000000 	.word	0x00000000
   1ee74:	0001ec1b 	.word	0x0001ec1b

0001ee78 <_printf_common>:
   1ee78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ee7a:	0015      	movs	r5, r2
   1ee7c:	9301      	str	r3, [sp, #4]
   1ee7e:	688a      	ldr	r2, [r1, #8]
   1ee80:	690b      	ldr	r3, [r1, #16]
   1ee82:	9000      	str	r0, [sp, #0]
   1ee84:	000c      	movs	r4, r1
   1ee86:	4293      	cmp	r3, r2
   1ee88:	da00      	bge.n	1ee8c <_printf_common+0x14>
   1ee8a:	0013      	movs	r3, r2
   1ee8c:	0022      	movs	r2, r4
   1ee8e:	602b      	str	r3, [r5, #0]
   1ee90:	3243      	adds	r2, #67	; 0x43
   1ee92:	7812      	ldrb	r2, [r2, #0]
   1ee94:	2a00      	cmp	r2, #0
   1ee96:	d001      	beq.n	1ee9c <_printf_common+0x24>
   1ee98:	3301      	adds	r3, #1
   1ee9a:	602b      	str	r3, [r5, #0]
   1ee9c:	6823      	ldr	r3, [r4, #0]
   1ee9e:	069b      	lsls	r3, r3, #26
   1eea0:	d502      	bpl.n	1eea8 <_printf_common+0x30>
   1eea2:	682b      	ldr	r3, [r5, #0]
   1eea4:	3302      	adds	r3, #2
   1eea6:	602b      	str	r3, [r5, #0]
   1eea8:	2706      	movs	r7, #6
   1eeaa:	6823      	ldr	r3, [r4, #0]
   1eeac:	401f      	ands	r7, r3
   1eeae:	d027      	beq.n	1ef00 <_printf_common+0x88>
   1eeb0:	0023      	movs	r3, r4
   1eeb2:	3343      	adds	r3, #67	; 0x43
   1eeb4:	781b      	ldrb	r3, [r3, #0]
   1eeb6:	1e5a      	subs	r2, r3, #1
   1eeb8:	4193      	sbcs	r3, r2
   1eeba:	6822      	ldr	r2, [r4, #0]
   1eebc:	0692      	lsls	r2, r2, #26
   1eebe:	d430      	bmi.n	1ef22 <_printf_common+0xaa>
   1eec0:	0022      	movs	r2, r4
   1eec2:	9901      	ldr	r1, [sp, #4]
   1eec4:	3243      	adds	r2, #67	; 0x43
   1eec6:	9800      	ldr	r0, [sp, #0]
   1eec8:	9e08      	ldr	r6, [sp, #32]
   1eeca:	47b0      	blx	r6
   1eecc:	1c43      	adds	r3, r0, #1
   1eece:	d025      	beq.n	1ef1c <_printf_common+0xa4>
   1eed0:	2306      	movs	r3, #6
   1eed2:	6820      	ldr	r0, [r4, #0]
   1eed4:	682a      	ldr	r2, [r5, #0]
   1eed6:	68e1      	ldr	r1, [r4, #12]
   1eed8:	4003      	ands	r3, r0
   1eeda:	2500      	movs	r5, #0
   1eedc:	2b04      	cmp	r3, #4
   1eede:	d103      	bne.n	1eee8 <_printf_common+0x70>
   1eee0:	1a8d      	subs	r5, r1, r2
   1eee2:	43eb      	mvns	r3, r5
   1eee4:	17db      	asrs	r3, r3, #31
   1eee6:	401d      	ands	r5, r3
   1eee8:	68a3      	ldr	r3, [r4, #8]
   1eeea:	6922      	ldr	r2, [r4, #16]
   1eeec:	4293      	cmp	r3, r2
   1eeee:	dd01      	ble.n	1eef4 <_printf_common+0x7c>
   1eef0:	1a9b      	subs	r3, r3, r2
   1eef2:	18ed      	adds	r5, r5, r3
   1eef4:	2700      	movs	r7, #0
   1eef6:	42bd      	cmp	r5, r7
   1eef8:	d120      	bne.n	1ef3c <_printf_common+0xc4>
   1eefa:	2000      	movs	r0, #0
   1eefc:	e010      	b.n	1ef20 <_printf_common+0xa8>
   1eefe:	3701      	adds	r7, #1
   1ef00:	68e3      	ldr	r3, [r4, #12]
   1ef02:	682a      	ldr	r2, [r5, #0]
   1ef04:	1a9b      	subs	r3, r3, r2
   1ef06:	429f      	cmp	r7, r3
   1ef08:	dad2      	bge.n	1eeb0 <_printf_common+0x38>
   1ef0a:	0022      	movs	r2, r4
   1ef0c:	2301      	movs	r3, #1
   1ef0e:	3219      	adds	r2, #25
   1ef10:	9901      	ldr	r1, [sp, #4]
   1ef12:	9800      	ldr	r0, [sp, #0]
   1ef14:	9e08      	ldr	r6, [sp, #32]
   1ef16:	47b0      	blx	r6
   1ef18:	1c43      	adds	r3, r0, #1
   1ef1a:	d1f0      	bne.n	1eefe <_printf_common+0x86>
   1ef1c:	2001      	movs	r0, #1
   1ef1e:	4240      	negs	r0, r0
   1ef20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1ef22:	2030      	movs	r0, #48	; 0x30
   1ef24:	18e1      	adds	r1, r4, r3
   1ef26:	3143      	adds	r1, #67	; 0x43
   1ef28:	7008      	strb	r0, [r1, #0]
   1ef2a:	0021      	movs	r1, r4
   1ef2c:	1c5a      	adds	r2, r3, #1
   1ef2e:	3145      	adds	r1, #69	; 0x45
   1ef30:	7809      	ldrb	r1, [r1, #0]
   1ef32:	18a2      	adds	r2, r4, r2
   1ef34:	3243      	adds	r2, #67	; 0x43
   1ef36:	3302      	adds	r3, #2
   1ef38:	7011      	strb	r1, [r2, #0]
   1ef3a:	e7c1      	b.n	1eec0 <_printf_common+0x48>
   1ef3c:	0022      	movs	r2, r4
   1ef3e:	2301      	movs	r3, #1
   1ef40:	321a      	adds	r2, #26
   1ef42:	9901      	ldr	r1, [sp, #4]
   1ef44:	9800      	ldr	r0, [sp, #0]
   1ef46:	9e08      	ldr	r6, [sp, #32]
   1ef48:	47b0      	blx	r6
   1ef4a:	1c43      	adds	r3, r0, #1
   1ef4c:	d0e6      	beq.n	1ef1c <_printf_common+0xa4>
   1ef4e:	3701      	adds	r7, #1
   1ef50:	e7d1      	b.n	1eef6 <_printf_common+0x7e>
	...

0001ef54 <_printf_i>:
   1ef54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef56:	b08b      	sub	sp, #44	; 0x2c
   1ef58:	9206      	str	r2, [sp, #24]
   1ef5a:	000a      	movs	r2, r1
   1ef5c:	3243      	adds	r2, #67	; 0x43
   1ef5e:	9307      	str	r3, [sp, #28]
   1ef60:	9005      	str	r0, [sp, #20]
   1ef62:	9204      	str	r2, [sp, #16]
   1ef64:	7e0a      	ldrb	r2, [r1, #24]
   1ef66:	000c      	movs	r4, r1
   1ef68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ef6a:	2a6e      	cmp	r2, #110	; 0x6e
   1ef6c:	d100      	bne.n	1ef70 <_printf_i+0x1c>
   1ef6e:	e08f      	b.n	1f090 <_printf_i+0x13c>
   1ef70:	d817      	bhi.n	1efa2 <_printf_i+0x4e>
   1ef72:	2a63      	cmp	r2, #99	; 0x63
   1ef74:	d02c      	beq.n	1efd0 <_printf_i+0x7c>
   1ef76:	d808      	bhi.n	1ef8a <_printf_i+0x36>
   1ef78:	2a00      	cmp	r2, #0
   1ef7a:	d100      	bne.n	1ef7e <_printf_i+0x2a>
   1ef7c:	e099      	b.n	1f0b2 <_printf_i+0x15e>
   1ef7e:	2a58      	cmp	r2, #88	; 0x58
   1ef80:	d054      	beq.n	1f02c <_printf_i+0xd8>
   1ef82:	0026      	movs	r6, r4
   1ef84:	3642      	adds	r6, #66	; 0x42
   1ef86:	7032      	strb	r2, [r6, #0]
   1ef88:	e029      	b.n	1efde <_printf_i+0x8a>
   1ef8a:	2a64      	cmp	r2, #100	; 0x64
   1ef8c:	d001      	beq.n	1ef92 <_printf_i+0x3e>
   1ef8e:	2a69      	cmp	r2, #105	; 0x69
   1ef90:	d1f7      	bne.n	1ef82 <_printf_i+0x2e>
   1ef92:	6821      	ldr	r1, [r4, #0]
   1ef94:	681a      	ldr	r2, [r3, #0]
   1ef96:	0608      	lsls	r0, r1, #24
   1ef98:	d523      	bpl.n	1efe2 <_printf_i+0x8e>
   1ef9a:	1d11      	adds	r1, r2, #4
   1ef9c:	6019      	str	r1, [r3, #0]
   1ef9e:	6815      	ldr	r5, [r2, #0]
   1efa0:	e025      	b.n	1efee <_printf_i+0x9a>
   1efa2:	2a73      	cmp	r2, #115	; 0x73
   1efa4:	d100      	bne.n	1efa8 <_printf_i+0x54>
   1efa6:	e088      	b.n	1f0ba <_printf_i+0x166>
   1efa8:	d808      	bhi.n	1efbc <_printf_i+0x68>
   1efaa:	2a6f      	cmp	r2, #111	; 0x6f
   1efac:	d029      	beq.n	1f002 <_printf_i+0xae>
   1efae:	2a70      	cmp	r2, #112	; 0x70
   1efb0:	d1e7      	bne.n	1ef82 <_printf_i+0x2e>
   1efb2:	2220      	movs	r2, #32
   1efb4:	6809      	ldr	r1, [r1, #0]
   1efb6:	430a      	orrs	r2, r1
   1efb8:	6022      	str	r2, [r4, #0]
   1efba:	e003      	b.n	1efc4 <_printf_i+0x70>
   1efbc:	2a75      	cmp	r2, #117	; 0x75
   1efbe:	d020      	beq.n	1f002 <_printf_i+0xae>
   1efc0:	2a78      	cmp	r2, #120	; 0x78
   1efc2:	d1de      	bne.n	1ef82 <_printf_i+0x2e>
   1efc4:	0022      	movs	r2, r4
   1efc6:	2178      	movs	r1, #120	; 0x78
   1efc8:	3245      	adds	r2, #69	; 0x45
   1efca:	7011      	strb	r1, [r2, #0]
   1efcc:	4a6c      	ldr	r2, [pc, #432]	; (1f180 <_printf_i+0x22c>)
   1efce:	e030      	b.n	1f032 <_printf_i+0xde>
   1efd0:	000e      	movs	r6, r1
   1efd2:	681a      	ldr	r2, [r3, #0]
   1efd4:	3642      	adds	r6, #66	; 0x42
   1efd6:	1d11      	adds	r1, r2, #4
   1efd8:	6019      	str	r1, [r3, #0]
   1efda:	6813      	ldr	r3, [r2, #0]
   1efdc:	7033      	strb	r3, [r6, #0]
   1efde:	2301      	movs	r3, #1
   1efe0:	e079      	b.n	1f0d6 <_printf_i+0x182>
   1efe2:	0649      	lsls	r1, r1, #25
   1efe4:	d5d9      	bpl.n	1ef9a <_printf_i+0x46>
   1efe6:	1d11      	adds	r1, r2, #4
   1efe8:	6019      	str	r1, [r3, #0]
   1efea:	2300      	movs	r3, #0
   1efec:	5ed5      	ldrsh	r5, [r2, r3]
   1efee:	2d00      	cmp	r5, #0
   1eff0:	da03      	bge.n	1effa <_printf_i+0xa6>
   1eff2:	232d      	movs	r3, #45	; 0x2d
   1eff4:	9a04      	ldr	r2, [sp, #16]
   1eff6:	426d      	negs	r5, r5
   1eff8:	7013      	strb	r3, [r2, #0]
   1effa:	4b62      	ldr	r3, [pc, #392]	; (1f184 <_printf_i+0x230>)
   1effc:	270a      	movs	r7, #10
   1effe:	9303      	str	r3, [sp, #12]
   1f000:	e02f      	b.n	1f062 <_printf_i+0x10e>
   1f002:	6820      	ldr	r0, [r4, #0]
   1f004:	6819      	ldr	r1, [r3, #0]
   1f006:	0605      	lsls	r5, r0, #24
   1f008:	d503      	bpl.n	1f012 <_printf_i+0xbe>
   1f00a:	1d08      	adds	r0, r1, #4
   1f00c:	6018      	str	r0, [r3, #0]
   1f00e:	680d      	ldr	r5, [r1, #0]
   1f010:	e005      	b.n	1f01e <_printf_i+0xca>
   1f012:	0640      	lsls	r0, r0, #25
   1f014:	d5f9      	bpl.n	1f00a <_printf_i+0xb6>
   1f016:	680d      	ldr	r5, [r1, #0]
   1f018:	1d08      	adds	r0, r1, #4
   1f01a:	6018      	str	r0, [r3, #0]
   1f01c:	b2ad      	uxth	r5, r5
   1f01e:	4b59      	ldr	r3, [pc, #356]	; (1f184 <_printf_i+0x230>)
   1f020:	2708      	movs	r7, #8
   1f022:	9303      	str	r3, [sp, #12]
   1f024:	2a6f      	cmp	r2, #111	; 0x6f
   1f026:	d018      	beq.n	1f05a <_printf_i+0x106>
   1f028:	270a      	movs	r7, #10
   1f02a:	e016      	b.n	1f05a <_printf_i+0x106>
   1f02c:	3145      	adds	r1, #69	; 0x45
   1f02e:	700a      	strb	r2, [r1, #0]
   1f030:	4a54      	ldr	r2, [pc, #336]	; (1f184 <_printf_i+0x230>)
   1f032:	9203      	str	r2, [sp, #12]
   1f034:	681a      	ldr	r2, [r3, #0]
   1f036:	6821      	ldr	r1, [r4, #0]
   1f038:	1d10      	adds	r0, r2, #4
   1f03a:	6018      	str	r0, [r3, #0]
   1f03c:	6815      	ldr	r5, [r2, #0]
   1f03e:	0608      	lsls	r0, r1, #24
   1f040:	d522      	bpl.n	1f088 <_printf_i+0x134>
   1f042:	07cb      	lsls	r3, r1, #31
   1f044:	d502      	bpl.n	1f04c <_printf_i+0xf8>
   1f046:	2320      	movs	r3, #32
   1f048:	4319      	orrs	r1, r3
   1f04a:	6021      	str	r1, [r4, #0]
   1f04c:	2710      	movs	r7, #16
   1f04e:	2d00      	cmp	r5, #0
   1f050:	d103      	bne.n	1f05a <_printf_i+0x106>
   1f052:	2320      	movs	r3, #32
   1f054:	6822      	ldr	r2, [r4, #0]
   1f056:	439a      	bics	r2, r3
   1f058:	6022      	str	r2, [r4, #0]
   1f05a:	0023      	movs	r3, r4
   1f05c:	2200      	movs	r2, #0
   1f05e:	3343      	adds	r3, #67	; 0x43
   1f060:	701a      	strb	r2, [r3, #0]
   1f062:	6863      	ldr	r3, [r4, #4]
   1f064:	60a3      	str	r3, [r4, #8]
   1f066:	2b00      	cmp	r3, #0
   1f068:	db5c      	blt.n	1f124 <_printf_i+0x1d0>
   1f06a:	2204      	movs	r2, #4
   1f06c:	6821      	ldr	r1, [r4, #0]
   1f06e:	4391      	bics	r1, r2
   1f070:	6021      	str	r1, [r4, #0]
   1f072:	2d00      	cmp	r5, #0
   1f074:	d158      	bne.n	1f128 <_printf_i+0x1d4>
   1f076:	9e04      	ldr	r6, [sp, #16]
   1f078:	2b00      	cmp	r3, #0
   1f07a:	d064      	beq.n	1f146 <_printf_i+0x1f2>
   1f07c:	0026      	movs	r6, r4
   1f07e:	9b03      	ldr	r3, [sp, #12]
   1f080:	3642      	adds	r6, #66	; 0x42
   1f082:	781b      	ldrb	r3, [r3, #0]
   1f084:	7033      	strb	r3, [r6, #0]
   1f086:	e05e      	b.n	1f146 <_printf_i+0x1f2>
   1f088:	0648      	lsls	r0, r1, #25
   1f08a:	d5da      	bpl.n	1f042 <_printf_i+0xee>
   1f08c:	b2ad      	uxth	r5, r5
   1f08e:	e7d8      	b.n	1f042 <_printf_i+0xee>
   1f090:	6809      	ldr	r1, [r1, #0]
   1f092:	681a      	ldr	r2, [r3, #0]
   1f094:	0608      	lsls	r0, r1, #24
   1f096:	d505      	bpl.n	1f0a4 <_printf_i+0x150>
   1f098:	1d11      	adds	r1, r2, #4
   1f09a:	6019      	str	r1, [r3, #0]
   1f09c:	6813      	ldr	r3, [r2, #0]
   1f09e:	6962      	ldr	r2, [r4, #20]
   1f0a0:	601a      	str	r2, [r3, #0]
   1f0a2:	e006      	b.n	1f0b2 <_printf_i+0x15e>
   1f0a4:	0649      	lsls	r1, r1, #25
   1f0a6:	d5f7      	bpl.n	1f098 <_printf_i+0x144>
   1f0a8:	1d11      	adds	r1, r2, #4
   1f0aa:	6019      	str	r1, [r3, #0]
   1f0ac:	6813      	ldr	r3, [r2, #0]
   1f0ae:	8aa2      	ldrh	r2, [r4, #20]
   1f0b0:	801a      	strh	r2, [r3, #0]
   1f0b2:	2300      	movs	r3, #0
   1f0b4:	9e04      	ldr	r6, [sp, #16]
   1f0b6:	6123      	str	r3, [r4, #16]
   1f0b8:	e054      	b.n	1f164 <_printf_i+0x210>
   1f0ba:	681a      	ldr	r2, [r3, #0]
   1f0bc:	1d11      	adds	r1, r2, #4
   1f0be:	6019      	str	r1, [r3, #0]
   1f0c0:	6816      	ldr	r6, [r2, #0]
   1f0c2:	2100      	movs	r1, #0
   1f0c4:	6862      	ldr	r2, [r4, #4]
   1f0c6:	0030      	movs	r0, r6
   1f0c8:	f7fd f872 	bl	1c1b0 <memchr>
   1f0cc:	2800      	cmp	r0, #0
   1f0ce:	d001      	beq.n	1f0d4 <_printf_i+0x180>
   1f0d0:	1b80      	subs	r0, r0, r6
   1f0d2:	6060      	str	r0, [r4, #4]
   1f0d4:	6863      	ldr	r3, [r4, #4]
   1f0d6:	6123      	str	r3, [r4, #16]
   1f0d8:	2300      	movs	r3, #0
   1f0da:	9a04      	ldr	r2, [sp, #16]
   1f0dc:	7013      	strb	r3, [r2, #0]
   1f0de:	e041      	b.n	1f164 <_printf_i+0x210>
   1f0e0:	6923      	ldr	r3, [r4, #16]
   1f0e2:	0032      	movs	r2, r6
   1f0e4:	9906      	ldr	r1, [sp, #24]
   1f0e6:	9805      	ldr	r0, [sp, #20]
   1f0e8:	9d07      	ldr	r5, [sp, #28]
   1f0ea:	47a8      	blx	r5
   1f0ec:	1c43      	adds	r3, r0, #1
   1f0ee:	d043      	beq.n	1f178 <_printf_i+0x224>
   1f0f0:	6823      	ldr	r3, [r4, #0]
   1f0f2:	2500      	movs	r5, #0
   1f0f4:	079b      	lsls	r3, r3, #30
   1f0f6:	d40f      	bmi.n	1f118 <_printf_i+0x1c4>
   1f0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f0fa:	68e0      	ldr	r0, [r4, #12]
   1f0fc:	4298      	cmp	r0, r3
   1f0fe:	da3d      	bge.n	1f17c <_printf_i+0x228>
   1f100:	0018      	movs	r0, r3
   1f102:	e03b      	b.n	1f17c <_printf_i+0x228>
   1f104:	0022      	movs	r2, r4
   1f106:	2301      	movs	r3, #1
   1f108:	3219      	adds	r2, #25
   1f10a:	9906      	ldr	r1, [sp, #24]
   1f10c:	9805      	ldr	r0, [sp, #20]
   1f10e:	9e07      	ldr	r6, [sp, #28]
   1f110:	47b0      	blx	r6
   1f112:	1c43      	adds	r3, r0, #1
   1f114:	d030      	beq.n	1f178 <_printf_i+0x224>
   1f116:	3501      	adds	r5, #1
   1f118:	68e3      	ldr	r3, [r4, #12]
   1f11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f11c:	1a9b      	subs	r3, r3, r2
   1f11e:	429d      	cmp	r5, r3
   1f120:	dbf0      	blt.n	1f104 <_printf_i+0x1b0>
   1f122:	e7e9      	b.n	1f0f8 <_printf_i+0x1a4>
   1f124:	2d00      	cmp	r5, #0
   1f126:	d0a9      	beq.n	1f07c <_printf_i+0x128>
   1f128:	9e04      	ldr	r6, [sp, #16]
   1f12a:	0028      	movs	r0, r5
   1f12c:	0039      	movs	r1, r7
   1f12e:	f7fa fead 	bl	19e8c <__aeabi_uidivmod>
   1f132:	9b03      	ldr	r3, [sp, #12]
   1f134:	3e01      	subs	r6, #1
   1f136:	5c5b      	ldrb	r3, [r3, r1]
   1f138:	0028      	movs	r0, r5
   1f13a:	7033      	strb	r3, [r6, #0]
   1f13c:	0039      	movs	r1, r7
   1f13e:	f7fa fe1f 	bl	19d80 <__udivsi3>
   1f142:	1e05      	subs	r5, r0, #0
   1f144:	d1f1      	bne.n	1f12a <_printf_i+0x1d6>
   1f146:	2f08      	cmp	r7, #8
   1f148:	d109      	bne.n	1f15e <_printf_i+0x20a>
   1f14a:	6823      	ldr	r3, [r4, #0]
   1f14c:	07db      	lsls	r3, r3, #31
   1f14e:	d506      	bpl.n	1f15e <_printf_i+0x20a>
   1f150:	6863      	ldr	r3, [r4, #4]
   1f152:	6922      	ldr	r2, [r4, #16]
   1f154:	4293      	cmp	r3, r2
   1f156:	dc02      	bgt.n	1f15e <_printf_i+0x20a>
   1f158:	2330      	movs	r3, #48	; 0x30
   1f15a:	3e01      	subs	r6, #1
   1f15c:	7033      	strb	r3, [r6, #0]
   1f15e:	9b04      	ldr	r3, [sp, #16]
   1f160:	1b9b      	subs	r3, r3, r6
   1f162:	6123      	str	r3, [r4, #16]
   1f164:	9b07      	ldr	r3, [sp, #28]
   1f166:	aa09      	add	r2, sp, #36	; 0x24
   1f168:	9300      	str	r3, [sp, #0]
   1f16a:	0021      	movs	r1, r4
   1f16c:	9b06      	ldr	r3, [sp, #24]
   1f16e:	9805      	ldr	r0, [sp, #20]
   1f170:	f7ff fe82 	bl	1ee78 <_printf_common>
   1f174:	1c43      	adds	r3, r0, #1
   1f176:	d1b3      	bne.n	1f0e0 <_printf_i+0x18c>
   1f178:	2001      	movs	r0, #1
   1f17a:	4240      	negs	r0, r0
   1f17c:	b00b      	add	sp, #44	; 0x2c
   1f17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f180:	00021dc6 	.word	0x00021dc6
   1f184:	00021db5 	.word	0x00021db5

0001f188 <_scanf_chars>:
   1f188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f18a:	0015      	movs	r5, r2
   1f18c:	688a      	ldr	r2, [r1, #8]
   1f18e:	9001      	str	r0, [sp, #4]
   1f190:	000c      	movs	r4, r1
   1f192:	2a00      	cmp	r2, #0
   1f194:	d106      	bne.n	1f1a4 <_scanf_chars+0x1c>
   1f196:	698a      	ldr	r2, [r1, #24]
   1f198:	1e51      	subs	r1, r2, #1
   1f19a:	418a      	sbcs	r2, r1
   1f19c:	2101      	movs	r1, #1
   1f19e:	4252      	negs	r2, r2
   1f1a0:	430a      	orrs	r2, r1
   1f1a2:	60a2      	str	r2, [r4, #8]
   1f1a4:	6822      	ldr	r2, [r4, #0]
   1f1a6:	06d2      	lsls	r2, r2, #27
   1f1a8:	d403      	bmi.n	1f1b2 <_scanf_chars+0x2a>
   1f1aa:	681a      	ldr	r2, [r3, #0]
   1f1ac:	1d11      	adds	r1, r2, #4
   1f1ae:	6019      	str	r1, [r3, #0]
   1f1b0:	6817      	ldr	r7, [r2, #0]
   1f1b2:	2600      	movs	r6, #0
   1f1b4:	69a3      	ldr	r3, [r4, #24]
   1f1b6:	2b00      	cmp	r3, #0
   1f1b8:	d01c      	beq.n	1f1f4 <_scanf_chars+0x6c>
   1f1ba:	2b01      	cmp	r3, #1
   1f1bc:	d108      	bne.n	1f1d0 <_scanf_chars+0x48>
   1f1be:	682b      	ldr	r3, [r5, #0]
   1f1c0:	6962      	ldr	r2, [r4, #20]
   1f1c2:	781b      	ldrb	r3, [r3, #0]
   1f1c4:	5cd3      	ldrb	r3, [r2, r3]
   1f1c6:	2b00      	cmp	r3, #0
   1f1c8:	d114      	bne.n	1f1f4 <_scanf_chars+0x6c>
   1f1ca:	2e00      	cmp	r6, #0
   1f1cc:	d130      	bne.n	1f230 <_scanf_chars+0xa8>
   1f1ce:	e006      	b.n	1f1de <_scanf_chars+0x56>
   1f1d0:	2b02      	cmp	r3, #2
   1f1d2:	d006      	beq.n	1f1e2 <_scanf_chars+0x5a>
   1f1d4:	2e00      	cmp	r6, #0
   1f1d6:	d12b      	bne.n	1f230 <_scanf_chars+0xa8>
   1f1d8:	69a3      	ldr	r3, [r4, #24]
   1f1da:	2b01      	cmp	r3, #1
   1f1dc:	d128      	bne.n	1f230 <_scanf_chars+0xa8>
   1f1de:	2001      	movs	r0, #1
   1f1e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f1e2:	f7fc ff45 	bl	1c070 <__locale_ctype_ptr>
   1f1e6:	2208      	movs	r2, #8
   1f1e8:	682b      	ldr	r3, [r5, #0]
   1f1ea:	781b      	ldrb	r3, [r3, #0]
   1f1ec:	18c0      	adds	r0, r0, r3
   1f1ee:	7843      	ldrb	r3, [r0, #1]
   1f1f0:	4213      	tst	r3, r2
   1f1f2:	d1ef      	bne.n	1f1d4 <_scanf_chars+0x4c>
   1f1f4:	2210      	movs	r2, #16
   1f1f6:	6823      	ldr	r3, [r4, #0]
   1f1f8:	3601      	adds	r6, #1
   1f1fa:	4213      	tst	r3, r2
   1f1fc:	d103      	bne.n	1f206 <_scanf_chars+0x7e>
   1f1fe:	682b      	ldr	r3, [r5, #0]
   1f200:	781b      	ldrb	r3, [r3, #0]
   1f202:	703b      	strb	r3, [r7, #0]
   1f204:	3701      	adds	r7, #1
   1f206:	682a      	ldr	r2, [r5, #0]
   1f208:	686b      	ldr	r3, [r5, #4]
   1f20a:	3201      	adds	r2, #1
   1f20c:	602a      	str	r2, [r5, #0]
   1f20e:	68a2      	ldr	r2, [r4, #8]
   1f210:	3b01      	subs	r3, #1
   1f212:	3a01      	subs	r2, #1
   1f214:	606b      	str	r3, [r5, #4]
   1f216:	60a2      	str	r2, [r4, #8]
   1f218:	2a00      	cmp	r2, #0
   1f21a:	d009      	beq.n	1f230 <_scanf_chars+0xa8>
   1f21c:	2b00      	cmp	r3, #0
   1f21e:	dcc9      	bgt.n	1f1b4 <_scanf_chars+0x2c>
   1f220:	23c0      	movs	r3, #192	; 0xc0
   1f222:	005b      	lsls	r3, r3, #1
   1f224:	58e3      	ldr	r3, [r4, r3]
   1f226:	0029      	movs	r1, r5
   1f228:	9801      	ldr	r0, [sp, #4]
   1f22a:	4798      	blx	r3
   1f22c:	2800      	cmp	r0, #0
   1f22e:	d0c1      	beq.n	1f1b4 <_scanf_chars+0x2c>
   1f230:	2310      	movs	r3, #16
   1f232:	6822      	ldr	r2, [r4, #0]
   1f234:	4013      	ands	r3, r2
   1f236:	d106      	bne.n	1f246 <_scanf_chars+0xbe>
   1f238:	68e2      	ldr	r2, [r4, #12]
   1f23a:	3201      	adds	r2, #1
   1f23c:	60e2      	str	r2, [r4, #12]
   1f23e:	69a2      	ldr	r2, [r4, #24]
   1f240:	2a00      	cmp	r2, #0
   1f242:	d000      	beq.n	1f246 <_scanf_chars+0xbe>
   1f244:	703b      	strb	r3, [r7, #0]
   1f246:	6923      	ldr	r3, [r4, #16]
   1f248:	2000      	movs	r0, #0
   1f24a:	199e      	adds	r6, r3, r6
   1f24c:	6126      	str	r6, [r4, #16]
   1f24e:	e7c7      	b.n	1f1e0 <_scanf_chars+0x58>

0001f250 <_scanf_i>:
   1f250:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f252:	000c      	movs	r4, r1
   1f254:	b08d      	sub	sp, #52	; 0x34
   1f256:	9302      	str	r3, [sp, #8]
   1f258:	4b77      	ldr	r3, [pc, #476]	; (1f438 <_scanf_i+0x1e8>)
   1f25a:	9005      	str	r0, [sp, #20]
   1f25c:	0016      	movs	r6, r2
   1f25e:	aa09      	add	r2, sp, #36	; 0x24
   1f260:	cb23      	ldmia	r3!, {r0, r1, r5}
   1f262:	c223      	stmia	r2!, {r0, r1, r5}
   1f264:	4b75      	ldr	r3, [pc, #468]	; (1f43c <_scanf_i+0x1ec>)
   1f266:	9306      	str	r3, [sp, #24]
   1f268:	69a3      	ldr	r3, [r4, #24]
   1f26a:	2b03      	cmp	r3, #3
   1f26c:	d001      	beq.n	1f272 <_scanf_i+0x22>
   1f26e:	4b74      	ldr	r3, [pc, #464]	; (1f440 <_scanf_i+0x1f0>)
   1f270:	9306      	str	r3, [sp, #24]
   1f272:	22ae      	movs	r2, #174	; 0xae
   1f274:	2000      	movs	r0, #0
   1f276:	68a3      	ldr	r3, [r4, #8]
   1f278:	0052      	lsls	r2, r2, #1
   1f27a:	1e59      	subs	r1, r3, #1
   1f27c:	9004      	str	r0, [sp, #16]
   1f27e:	4291      	cmp	r1, r2
   1f280:	d905      	bls.n	1f28e <_scanf_i+0x3e>
   1f282:	3b5e      	subs	r3, #94	; 0x5e
   1f284:	3bff      	subs	r3, #255	; 0xff
   1f286:	9304      	str	r3, [sp, #16]
   1f288:	235e      	movs	r3, #94	; 0x5e
   1f28a:	33ff      	adds	r3, #255	; 0xff
   1f28c:	60a3      	str	r3, [r4, #8]
   1f28e:	0023      	movs	r3, r4
   1f290:	331c      	adds	r3, #28
   1f292:	9301      	str	r3, [sp, #4]
   1f294:	23d0      	movs	r3, #208	; 0xd0
   1f296:	2700      	movs	r7, #0
   1f298:	6822      	ldr	r2, [r4, #0]
   1f29a:	011b      	lsls	r3, r3, #4
   1f29c:	4313      	orrs	r3, r2
   1f29e:	6023      	str	r3, [r4, #0]
   1f2a0:	9b01      	ldr	r3, [sp, #4]
   1f2a2:	9303      	str	r3, [sp, #12]
   1f2a4:	6833      	ldr	r3, [r6, #0]
   1f2a6:	a809      	add	r0, sp, #36	; 0x24
   1f2a8:	7819      	ldrb	r1, [r3, #0]
   1f2aa:	00bb      	lsls	r3, r7, #2
   1f2ac:	2202      	movs	r2, #2
   1f2ae:	5818      	ldr	r0, [r3, r0]
   1f2b0:	f7fc ff7e 	bl	1c1b0 <memchr>
   1f2b4:	2800      	cmp	r0, #0
   1f2b6:	d02b      	beq.n	1f310 <_scanf_i+0xc0>
   1f2b8:	2f01      	cmp	r7, #1
   1f2ba:	d15f      	bne.n	1f37c <_scanf_i+0x12c>
   1f2bc:	6863      	ldr	r3, [r4, #4]
   1f2be:	2b00      	cmp	r3, #0
   1f2c0:	d106      	bne.n	1f2d0 <_scanf_i+0x80>
   1f2c2:	3308      	adds	r3, #8
   1f2c4:	6822      	ldr	r2, [r4, #0]
   1f2c6:	6063      	str	r3, [r4, #4]
   1f2c8:	33f9      	adds	r3, #249	; 0xf9
   1f2ca:	33ff      	adds	r3, #255	; 0xff
   1f2cc:	4313      	orrs	r3, r2
   1f2ce:	6023      	str	r3, [r4, #0]
   1f2d0:	4b5c      	ldr	r3, [pc, #368]	; (1f444 <_scanf_i+0x1f4>)
   1f2d2:	6822      	ldr	r2, [r4, #0]
   1f2d4:	4013      	ands	r3, r2
   1f2d6:	6023      	str	r3, [r4, #0]
   1f2d8:	68a3      	ldr	r3, [r4, #8]
   1f2da:	1e5a      	subs	r2, r3, #1
   1f2dc:	60a2      	str	r2, [r4, #8]
   1f2de:	2b00      	cmp	r3, #0
   1f2e0:	d016      	beq.n	1f310 <_scanf_i+0xc0>
   1f2e2:	9b03      	ldr	r3, [sp, #12]
   1f2e4:	1c5d      	adds	r5, r3, #1
   1f2e6:	6833      	ldr	r3, [r6, #0]
   1f2e8:	1c5a      	adds	r2, r3, #1
   1f2ea:	6032      	str	r2, [r6, #0]
   1f2ec:	781b      	ldrb	r3, [r3, #0]
   1f2ee:	9a03      	ldr	r2, [sp, #12]
   1f2f0:	9503      	str	r5, [sp, #12]
   1f2f2:	7013      	strb	r3, [r2, #0]
   1f2f4:	6873      	ldr	r3, [r6, #4]
   1f2f6:	3b01      	subs	r3, #1
   1f2f8:	6073      	str	r3, [r6, #4]
   1f2fa:	2b00      	cmp	r3, #0
   1f2fc:	dc08      	bgt.n	1f310 <_scanf_i+0xc0>
   1f2fe:	23c0      	movs	r3, #192	; 0xc0
   1f300:	005b      	lsls	r3, r3, #1
   1f302:	58e3      	ldr	r3, [r4, r3]
   1f304:	0031      	movs	r1, r6
   1f306:	9805      	ldr	r0, [sp, #20]
   1f308:	9307      	str	r3, [sp, #28]
   1f30a:	4798      	blx	r3
   1f30c:	2800      	cmp	r0, #0
   1f30e:	d17d      	bne.n	1f40c <_scanf_i+0x1bc>
   1f310:	3701      	adds	r7, #1
   1f312:	2f03      	cmp	r7, #3
   1f314:	d1c6      	bne.n	1f2a4 <_scanf_i+0x54>
   1f316:	6863      	ldr	r3, [r4, #4]
   1f318:	2b00      	cmp	r3, #0
   1f31a:	d101      	bne.n	1f320 <_scanf_i+0xd0>
   1f31c:	330a      	adds	r3, #10
   1f31e:	6063      	str	r3, [r4, #4]
   1f320:	2110      	movs	r1, #16
   1f322:	2700      	movs	r7, #0
   1f324:	6863      	ldr	r3, [r4, #4]
   1f326:	6960      	ldr	r0, [r4, #20]
   1f328:	1ac9      	subs	r1, r1, r3
   1f32a:	4b47      	ldr	r3, [pc, #284]	; (1f448 <_scanf_i+0x1f8>)
   1f32c:	18c9      	adds	r1, r1, r3
   1f32e:	f000 f8d9 	bl	1f4e4 <__sccl>
   1f332:	9d03      	ldr	r5, [sp, #12]
   1f334:	68a3      	ldr	r3, [r4, #8]
   1f336:	2b00      	cmp	r3, #0
   1f338:	d041      	beq.n	1f3be <_scanf_i+0x16e>
   1f33a:	6832      	ldr	r2, [r6, #0]
   1f33c:	6960      	ldr	r0, [r4, #20]
   1f33e:	7811      	ldrb	r1, [r2, #0]
   1f340:	5c40      	ldrb	r0, [r0, r1]
   1f342:	2800      	cmp	r0, #0
   1f344:	d03b      	beq.n	1f3be <_scanf_i+0x16e>
   1f346:	2930      	cmp	r1, #48	; 0x30
   1f348:	d128      	bne.n	1f39c <_scanf_i+0x14c>
   1f34a:	2080      	movs	r0, #128	; 0x80
   1f34c:	6821      	ldr	r1, [r4, #0]
   1f34e:	0100      	lsls	r0, r0, #4
   1f350:	4201      	tst	r1, r0
   1f352:	d023      	beq.n	1f39c <_scanf_i+0x14c>
   1f354:	9a04      	ldr	r2, [sp, #16]
   1f356:	3701      	adds	r7, #1
   1f358:	2a00      	cmp	r2, #0
   1f35a:	d003      	beq.n	1f364 <_scanf_i+0x114>
   1f35c:	3a01      	subs	r2, #1
   1f35e:	3301      	adds	r3, #1
   1f360:	9204      	str	r2, [sp, #16]
   1f362:	60a3      	str	r3, [r4, #8]
   1f364:	6873      	ldr	r3, [r6, #4]
   1f366:	3b01      	subs	r3, #1
   1f368:	6073      	str	r3, [r6, #4]
   1f36a:	2b00      	cmp	r3, #0
   1f36c:	dd1e      	ble.n	1f3ac <_scanf_i+0x15c>
   1f36e:	6833      	ldr	r3, [r6, #0]
   1f370:	3301      	adds	r3, #1
   1f372:	6033      	str	r3, [r6, #0]
   1f374:	68a3      	ldr	r3, [r4, #8]
   1f376:	3b01      	subs	r3, #1
   1f378:	60a3      	str	r3, [r4, #8]
   1f37a:	e7db      	b.n	1f334 <_scanf_i+0xe4>
   1f37c:	2f02      	cmp	r7, #2
   1f37e:	d1ab      	bne.n	1f2d8 <_scanf_i+0x88>
   1f380:	21c0      	movs	r1, #192	; 0xc0
   1f382:	2380      	movs	r3, #128	; 0x80
   1f384:	6822      	ldr	r2, [r4, #0]
   1f386:	00c9      	lsls	r1, r1, #3
   1f388:	4011      	ands	r1, r2
   1f38a:	009b      	lsls	r3, r3, #2
   1f38c:	4299      	cmp	r1, r3
   1f38e:	d1c2      	bne.n	1f316 <_scanf_i+0xc6>
   1f390:	3bf1      	subs	r3, #241	; 0xf1
   1f392:	3bff      	subs	r3, #255	; 0xff
   1f394:	6063      	str	r3, [r4, #4]
   1f396:	33f0      	adds	r3, #240	; 0xf0
   1f398:	4313      	orrs	r3, r2
   1f39a:	e79c      	b.n	1f2d6 <_scanf_i+0x86>
   1f39c:	6821      	ldr	r1, [r4, #0]
   1f39e:	4b2b      	ldr	r3, [pc, #172]	; (1f44c <_scanf_i+0x1fc>)
   1f3a0:	400b      	ands	r3, r1
   1f3a2:	6023      	str	r3, [r4, #0]
   1f3a4:	7813      	ldrb	r3, [r2, #0]
   1f3a6:	702b      	strb	r3, [r5, #0]
   1f3a8:	3501      	adds	r5, #1
   1f3aa:	e7db      	b.n	1f364 <_scanf_i+0x114>
   1f3ac:	23c0      	movs	r3, #192	; 0xc0
   1f3ae:	005b      	lsls	r3, r3, #1
   1f3b0:	58e3      	ldr	r3, [r4, r3]
   1f3b2:	0031      	movs	r1, r6
   1f3b4:	9805      	ldr	r0, [sp, #20]
   1f3b6:	9303      	str	r3, [sp, #12]
   1f3b8:	4798      	blx	r3
   1f3ba:	2800      	cmp	r0, #0
   1f3bc:	d0da      	beq.n	1f374 <_scanf_i+0x124>
   1f3be:	6823      	ldr	r3, [r4, #0]
   1f3c0:	05db      	lsls	r3, r3, #23
   1f3c2:	d50e      	bpl.n	1f3e2 <_scanf_i+0x192>
   1f3c4:	9b01      	ldr	r3, [sp, #4]
   1f3c6:	429d      	cmp	r5, r3
   1f3c8:	d907      	bls.n	1f3da <_scanf_i+0x18a>
   1f3ca:	23be      	movs	r3, #190	; 0xbe
   1f3cc:	3d01      	subs	r5, #1
   1f3ce:	005b      	lsls	r3, r3, #1
   1f3d0:	7829      	ldrb	r1, [r5, #0]
   1f3d2:	58e3      	ldr	r3, [r4, r3]
   1f3d4:	0032      	movs	r2, r6
   1f3d6:	9805      	ldr	r0, [sp, #20]
   1f3d8:	4798      	blx	r3
   1f3da:	9b01      	ldr	r3, [sp, #4]
   1f3dc:	2001      	movs	r0, #1
   1f3de:	429d      	cmp	r5, r3
   1f3e0:	d027      	beq.n	1f432 <_scanf_i+0x1e2>
   1f3e2:	2210      	movs	r2, #16
   1f3e4:	6823      	ldr	r3, [r4, #0]
   1f3e6:	401a      	ands	r2, r3
   1f3e8:	d11c      	bne.n	1f424 <_scanf_i+0x1d4>
   1f3ea:	702a      	strb	r2, [r5, #0]
   1f3ec:	6863      	ldr	r3, [r4, #4]
   1f3ee:	9901      	ldr	r1, [sp, #4]
   1f3f0:	9805      	ldr	r0, [sp, #20]
   1f3f2:	9e06      	ldr	r6, [sp, #24]
   1f3f4:	47b0      	blx	r6
   1f3f6:	9b02      	ldr	r3, [sp, #8]
   1f3f8:	6822      	ldr	r2, [r4, #0]
   1f3fa:	681b      	ldr	r3, [r3, #0]
   1f3fc:	0691      	lsls	r1, r2, #26
   1f3fe:	d507      	bpl.n	1f410 <_scanf_i+0x1c0>
   1f400:	9902      	ldr	r1, [sp, #8]
   1f402:	1d1a      	adds	r2, r3, #4
   1f404:	600a      	str	r2, [r1, #0]
   1f406:	681b      	ldr	r3, [r3, #0]
   1f408:	6018      	str	r0, [r3, #0]
   1f40a:	e008      	b.n	1f41e <_scanf_i+0x1ce>
   1f40c:	2700      	movs	r7, #0
   1f40e:	e7d6      	b.n	1f3be <_scanf_i+0x16e>
   1f410:	07d1      	lsls	r1, r2, #31
   1f412:	d5f5      	bpl.n	1f400 <_scanf_i+0x1b0>
   1f414:	9902      	ldr	r1, [sp, #8]
   1f416:	1d1a      	adds	r2, r3, #4
   1f418:	600a      	str	r2, [r1, #0]
   1f41a:	681b      	ldr	r3, [r3, #0]
   1f41c:	8018      	strh	r0, [r3, #0]
   1f41e:	68e3      	ldr	r3, [r4, #12]
   1f420:	3301      	adds	r3, #1
   1f422:	60e3      	str	r3, [r4, #12]
   1f424:	2000      	movs	r0, #0
   1f426:	9b01      	ldr	r3, [sp, #4]
   1f428:	1aed      	subs	r5, r5, r3
   1f42a:	6923      	ldr	r3, [r4, #16]
   1f42c:	19ef      	adds	r7, r5, r7
   1f42e:	19df      	adds	r7, r3, r7
   1f430:	6127      	str	r7, [r4, #16]
   1f432:	b00d      	add	sp, #52	; 0x34
   1f434:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f436:	46c0      	nop			; (mov r8, r8)
   1f438:	00021dd8 	.word	0x00021dd8
   1f43c:	0001f655 	.word	0x0001f655
   1f440:	0001f785 	.word	0x0001f785
   1f444:	fffffaff 	.word	0xfffffaff
   1f448:	00021de4 	.word	0x00021de4
   1f44c:	fffff6ff 	.word	0xfffff6ff

0001f450 <_putc_r>:
   1f450:	b570      	push	{r4, r5, r6, lr}
   1f452:	0006      	movs	r6, r0
   1f454:	000d      	movs	r5, r1
   1f456:	0014      	movs	r4, r2
   1f458:	2800      	cmp	r0, #0
   1f45a:	d004      	beq.n	1f466 <_putc_r+0x16>
   1f45c:	6983      	ldr	r3, [r0, #24]
   1f45e:	2b00      	cmp	r3, #0
   1f460:	d101      	bne.n	1f466 <_putc_r+0x16>
   1f462:	f7fc fd47 	bl	1bef4 <__sinit>
   1f466:	4b12      	ldr	r3, [pc, #72]	; (1f4b0 <_putc_r+0x60>)
   1f468:	429c      	cmp	r4, r3
   1f46a:	d111      	bne.n	1f490 <_putc_r+0x40>
   1f46c:	6874      	ldr	r4, [r6, #4]
   1f46e:	68a3      	ldr	r3, [r4, #8]
   1f470:	3b01      	subs	r3, #1
   1f472:	60a3      	str	r3, [r4, #8]
   1f474:	2b00      	cmp	r3, #0
   1f476:	da05      	bge.n	1f484 <_putc_r+0x34>
   1f478:	69a2      	ldr	r2, [r4, #24]
   1f47a:	4293      	cmp	r3, r2
   1f47c:	db12      	blt.n	1f4a4 <_putc_r+0x54>
   1f47e:	b2eb      	uxtb	r3, r5
   1f480:	2b0a      	cmp	r3, #10
   1f482:	d00f      	beq.n	1f4a4 <_putc_r+0x54>
   1f484:	6823      	ldr	r3, [r4, #0]
   1f486:	b2e8      	uxtb	r0, r5
   1f488:	1c5a      	adds	r2, r3, #1
   1f48a:	6022      	str	r2, [r4, #0]
   1f48c:	701d      	strb	r5, [r3, #0]
   1f48e:	bd70      	pop	{r4, r5, r6, pc}
   1f490:	4b08      	ldr	r3, [pc, #32]	; (1f4b4 <_putc_r+0x64>)
   1f492:	429c      	cmp	r4, r3
   1f494:	d101      	bne.n	1f49a <_putc_r+0x4a>
   1f496:	68b4      	ldr	r4, [r6, #8]
   1f498:	e7e9      	b.n	1f46e <_putc_r+0x1e>
   1f49a:	4b07      	ldr	r3, [pc, #28]	; (1f4b8 <_putc_r+0x68>)
   1f49c:	429c      	cmp	r4, r3
   1f49e:	d1e6      	bne.n	1f46e <_putc_r+0x1e>
   1f4a0:	68f4      	ldr	r4, [r6, #12]
   1f4a2:	e7e4      	b.n	1f46e <_putc_r+0x1e>
   1f4a4:	0022      	movs	r2, r4
   1f4a6:	0029      	movs	r1, r5
   1f4a8:	0030      	movs	r0, r6
   1f4aa:	f7fd fff1 	bl	1d490 <__swbuf_r>
   1f4ae:	e7ee      	b.n	1f48e <_putc_r+0x3e>
   1f4b0:	00021af0 	.word	0x00021af0
   1f4b4:	00021b10 	.word	0x00021b10
   1f4b8:	00021ad0 	.word	0x00021ad0

0001f4bc <_read_r>:
   1f4bc:	b570      	push	{r4, r5, r6, lr}
   1f4be:	0005      	movs	r5, r0
   1f4c0:	0008      	movs	r0, r1
   1f4c2:	0011      	movs	r1, r2
   1f4c4:	2200      	movs	r2, #0
   1f4c6:	4c06      	ldr	r4, [pc, #24]	; (1f4e0 <_read_r+0x24>)
   1f4c8:	6022      	str	r2, [r4, #0]
   1f4ca:	001a      	movs	r2, r3
   1f4cc:	f7f0 f822 	bl	f514 <_read>
   1f4d0:	1c43      	adds	r3, r0, #1
   1f4d2:	d103      	bne.n	1f4dc <_read_r+0x20>
   1f4d4:	6823      	ldr	r3, [r4, #0]
   1f4d6:	2b00      	cmp	r3, #0
   1f4d8:	d000      	beq.n	1f4dc <_read_r+0x20>
   1f4da:	602b      	str	r3, [r5, #0]
   1f4dc:	bd70      	pop	{r4, r5, r6, pc}
   1f4de:	46c0      	nop			; (mov r8, r8)
   1f4e0:	20002c04 	.word	0x20002c04

0001f4e4 <__sccl>:
   1f4e4:	b570      	push	{r4, r5, r6, lr}
   1f4e6:	780b      	ldrb	r3, [r1, #0]
   1f4e8:	2b5e      	cmp	r3, #94	; 0x5e
   1f4ea:	d00d      	beq.n	1f508 <__sccl+0x24>
   1f4ec:	1c4a      	adds	r2, r1, #1
   1f4ee:	2100      	movs	r1, #0
   1f4f0:	0004      	movs	r4, r0
   1f4f2:	1c45      	adds	r5, r0, #1
   1f4f4:	35ff      	adds	r5, #255	; 0xff
   1f4f6:	7021      	strb	r1, [r4, #0]
   1f4f8:	3401      	adds	r4, #1
   1f4fa:	42a5      	cmp	r5, r4
   1f4fc:	d1fb      	bne.n	1f4f6 <__sccl+0x12>
   1f4fe:	2b00      	cmp	r3, #0
   1f500:	d106      	bne.n	1f510 <__sccl+0x2c>
   1f502:	3a01      	subs	r2, #1
   1f504:	0010      	movs	r0, r2
   1f506:	bd70      	pop	{r4, r5, r6, pc}
   1f508:	1c8a      	adds	r2, r1, #2
   1f50a:	784b      	ldrb	r3, [r1, #1]
   1f50c:	2101      	movs	r1, #1
   1f50e:	e7ef      	b.n	1f4f0 <__sccl+0xc>
   1f510:	2401      	movs	r4, #1
   1f512:	404c      	eors	r4, r1
   1f514:	0011      	movs	r1, r2
   1f516:	54c4      	strb	r4, [r0, r3]
   1f518:	780d      	ldrb	r5, [r1, #0]
   1f51a:	1c4a      	adds	r2, r1, #1
   1f51c:	2d2d      	cmp	r5, #45	; 0x2d
   1f51e:	d007      	beq.n	1f530 <__sccl+0x4c>
   1f520:	2d5d      	cmp	r5, #93	; 0x5d
   1f522:	d0ef      	beq.n	1f504 <__sccl+0x20>
   1f524:	2d00      	cmp	r5, #0
   1f526:	d101      	bne.n	1f52c <__sccl+0x48>
   1f528:	000a      	movs	r2, r1
   1f52a:	e7eb      	b.n	1f504 <__sccl+0x20>
   1f52c:	002b      	movs	r3, r5
   1f52e:	e7f1      	b.n	1f514 <__sccl+0x30>
   1f530:	784e      	ldrb	r6, [r1, #1]
   1f532:	2e5d      	cmp	r6, #93	; 0x5d
   1f534:	d0fa      	beq.n	1f52c <__sccl+0x48>
   1f536:	42b3      	cmp	r3, r6
   1f538:	dcf8      	bgt.n	1f52c <__sccl+0x48>
   1f53a:	3102      	adds	r1, #2
   1f53c:	3301      	adds	r3, #1
   1f53e:	54c4      	strb	r4, [r0, r3]
   1f540:	429e      	cmp	r6, r3
   1f542:	dcfb      	bgt.n	1f53c <__sccl+0x58>
   1f544:	e7e8      	b.n	1f518 <__sccl+0x34>
	...

0001f548 <_strtol_l.isra.0>:
   1f548:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f54a:	001f      	movs	r7, r3
   1f54c:	000e      	movs	r6, r1
   1f54e:	b087      	sub	sp, #28
   1f550:	9005      	str	r0, [sp, #20]
   1f552:	9103      	str	r1, [sp, #12]
   1f554:	9202      	str	r2, [sp, #8]
   1f556:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f558:	7834      	ldrb	r4, [r6, #0]
   1f55a:	f7fc fd85 	bl	1c068 <__locale_ctype_ptr_l>
   1f55e:	2208      	movs	r2, #8
   1f560:	1900      	adds	r0, r0, r4
   1f562:	7843      	ldrb	r3, [r0, #1]
   1f564:	1c75      	adds	r5, r6, #1
   1f566:	4013      	ands	r3, r2
   1f568:	d10c      	bne.n	1f584 <_strtol_l.isra.0+0x3c>
   1f56a:	2c2d      	cmp	r4, #45	; 0x2d
   1f56c:	d10c      	bne.n	1f588 <_strtol_l.isra.0+0x40>
   1f56e:	3301      	adds	r3, #1
   1f570:	782c      	ldrb	r4, [r5, #0]
   1f572:	9301      	str	r3, [sp, #4]
   1f574:	1cb5      	adds	r5, r6, #2
   1f576:	2f00      	cmp	r7, #0
   1f578:	d00c      	beq.n	1f594 <_strtol_l.isra.0+0x4c>
   1f57a:	2f10      	cmp	r7, #16
   1f57c:	d114      	bne.n	1f5a8 <_strtol_l.isra.0+0x60>
   1f57e:	2c30      	cmp	r4, #48	; 0x30
   1f580:	d00a      	beq.n	1f598 <_strtol_l.isra.0+0x50>
   1f582:	e011      	b.n	1f5a8 <_strtol_l.isra.0+0x60>
   1f584:	002e      	movs	r6, r5
   1f586:	e7e6      	b.n	1f556 <_strtol_l.isra.0+0xe>
   1f588:	9301      	str	r3, [sp, #4]
   1f58a:	2c2b      	cmp	r4, #43	; 0x2b
   1f58c:	d1f3      	bne.n	1f576 <_strtol_l.isra.0+0x2e>
   1f58e:	782c      	ldrb	r4, [r5, #0]
   1f590:	1cb5      	adds	r5, r6, #2
   1f592:	e7f0      	b.n	1f576 <_strtol_l.isra.0+0x2e>
   1f594:	2c30      	cmp	r4, #48	; 0x30
   1f596:	d12f      	bne.n	1f5f8 <_strtol_l.isra.0+0xb0>
   1f598:	2220      	movs	r2, #32
   1f59a:	782b      	ldrb	r3, [r5, #0]
   1f59c:	4393      	bics	r3, r2
   1f59e:	2b58      	cmp	r3, #88	; 0x58
   1f5a0:	d151      	bne.n	1f646 <_strtol_l.isra.0+0xfe>
   1f5a2:	2710      	movs	r7, #16
   1f5a4:	786c      	ldrb	r4, [r5, #1]
   1f5a6:	3502      	adds	r5, #2
   1f5a8:	9b01      	ldr	r3, [sp, #4]
   1f5aa:	4a29      	ldr	r2, [pc, #164]	; (1f650 <_strtol_l.isra.0+0x108>)
   1f5ac:	0039      	movs	r1, r7
   1f5ae:	189e      	adds	r6, r3, r2
   1f5b0:	0030      	movs	r0, r6
   1f5b2:	f7fa fc6b 	bl	19e8c <__aeabi_uidivmod>
   1f5b6:	0030      	movs	r0, r6
   1f5b8:	9104      	str	r1, [sp, #16]
   1f5ba:	0039      	movs	r1, r7
   1f5bc:	f7fa fbe0 	bl	19d80 <__udivsi3>
   1f5c0:	2101      	movs	r1, #1
   1f5c2:	2300      	movs	r3, #0
   1f5c4:	4249      	negs	r1, r1
   1f5c6:	0002      	movs	r2, r0
   1f5c8:	468c      	mov	ip, r1
   1f5ca:	0018      	movs	r0, r3
   1f5cc:	0021      	movs	r1, r4
   1f5ce:	3930      	subs	r1, #48	; 0x30
   1f5d0:	2909      	cmp	r1, #9
   1f5d2:	d813      	bhi.n	1f5fc <_strtol_l.isra.0+0xb4>
   1f5d4:	000c      	movs	r4, r1
   1f5d6:	42a7      	cmp	r7, r4
   1f5d8:	dd1c      	ble.n	1f614 <_strtol_l.isra.0+0xcc>
   1f5da:	1c59      	adds	r1, r3, #1
   1f5dc:	d009      	beq.n	1f5f2 <_strtol_l.isra.0+0xaa>
   1f5de:	4663      	mov	r3, ip
   1f5e0:	4282      	cmp	r2, r0
   1f5e2:	d306      	bcc.n	1f5f2 <_strtol_l.isra.0+0xaa>
   1f5e4:	d102      	bne.n	1f5ec <_strtol_l.isra.0+0xa4>
   1f5e6:	9904      	ldr	r1, [sp, #16]
   1f5e8:	42a1      	cmp	r1, r4
   1f5ea:	db02      	blt.n	1f5f2 <_strtol_l.isra.0+0xaa>
   1f5ec:	2301      	movs	r3, #1
   1f5ee:	4378      	muls	r0, r7
   1f5f0:	1820      	adds	r0, r4, r0
   1f5f2:	782c      	ldrb	r4, [r5, #0]
   1f5f4:	3501      	adds	r5, #1
   1f5f6:	e7e9      	b.n	1f5cc <_strtol_l.isra.0+0x84>
   1f5f8:	270a      	movs	r7, #10
   1f5fa:	e7d5      	b.n	1f5a8 <_strtol_l.isra.0+0x60>
   1f5fc:	0021      	movs	r1, r4
   1f5fe:	3941      	subs	r1, #65	; 0x41
   1f600:	2919      	cmp	r1, #25
   1f602:	d801      	bhi.n	1f608 <_strtol_l.isra.0+0xc0>
   1f604:	3c37      	subs	r4, #55	; 0x37
   1f606:	e7e6      	b.n	1f5d6 <_strtol_l.isra.0+0x8e>
   1f608:	0021      	movs	r1, r4
   1f60a:	3961      	subs	r1, #97	; 0x61
   1f60c:	2919      	cmp	r1, #25
   1f60e:	d801      	bhi.n	1f614 <_strtol_l.isra.0+0xcc>
   1f610:	3c57      	subs	r4, #87	; 0x57
   1f612:	e7e0      	b.n	1f5d6 <_strtol_l.isra.0+0x8e>
   1f614:	1c5a      	adds	r2, r3, #1
   1f616:	d108      	bne.n	1f62a <_strtol_l.isra.0+0xe2>
   1f618:	9a05      	ldr	r2, [sp, #20]
   1f61a:	3323      	adds	r3, #35	; 0x23
   1f61c:	6013      	str	r3, [r2, #0]
   1f61e:	9b02      	ldr	r3, [sp, #8]
   1f620:	0030      	movs	r0, r6
   1f622:	2b00      	cmp	r3, #0
   1f624:	d10b      	bne.n	1f63e <_strtol_l.isra.0+0xf6>
   1f626:	b007      	add	sp, #28
   1f628:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f62a:	9a01      	ldr	r2, [sp, #4]
   1f62c:	2a00      	cmp	r2, #0
   1f62e:	d000      	beq.n	1f632 <_strtol_l.isra.0+0xea>
   1f630:	4240      	negs	r0, r0
   1f632:	9a02      	ldr	r2, [sp, #8]
   1f634:	2a00      	cmp	r2, #0
   1f636:	d0f6      	beq.n	1f626 <_strtol_l.isra.0+0xde>
   1f638:	9a03      	ldr	r2, [sp, #12]
   1f63a:	2b00      	cmp	r3, #0
   1f63c:	d000      	beq.n	1f640 <_strtol_l.isra.0+0xf8>
   1f63e:	1e6a      	subs	r2, r5, #1
   1f640:	9b02      	ldr	r3, [sp, #8]
   1f642:	601a      	str	r2, [r3, #0]
   1f644:	e7ef      	b.n	1f626 <_strtol_l.isra.0+0xde>
   1f646:	2430      	movs	r4, #48	; 0x30
   1f648:	2f00      	cmp	r7, #0
   1f64a:	d1ad      	bne.n	1f5a8 <_strtol_l.isra.0+0x60>
   1f64c:	3708      	adds	r7, #8
   1f64e:	e7ab      	b.n	1f5a8 <_strtol_l.isra.0+0x60>
   1f650:	7fffffff 	.word	0x7fffffff

0001f654 <_strtol_r>:
   1f654:	b513      	push	{r0, r1, r4, lr}
   1f656:	4c05      	ldr	r4, [pc, #20]	; (1f66c <_strtol_r+0x18>)
   1f658:	6824      	ldr	r4, [r4, #0]
   1f65a:	6a24      	ldr	r4, [r4, #32]
   1f65c:	2c00      	cmp	r4, #0
   1f65e:	d100      	bne.n	1f662 <_strtol_r+0xe>
   1f660:	4c03      	ldr	r4, [pc, #12]	; (1f670 <_strtol_r+0x1c>)
   1f662:	9400      	str	r4, [sp, #0]
   1f664:	f7ff ff70 	bl	1f548 <_strtol_l.isra.0>
   1f668:	bd16      	pop	{r1, r2, r4, pc}
   1f66a:	46c0      	nop			; (mov r8, r8)
   1f66c:	2000022c 	.word	0x2000022c
   1f670:	20000290 	.word	0x20000290

0001f674 <_strtoul_l.isra.0>:
   1f674:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f676:	001f      	movs	r7, r3
   1f678:	000e      	movs	r6, r1
   1f67a:	b087      	sub	sp, #28
   1f67c:	9005      	str	r0, [sp, #20]
   1f67e:	9103      	str	r1, [sp, #12]
   1f680:	9201      	str	r2, [sp, #4]
   1f682:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f684:	7834      	ldrb	r4, [r6, #0]
   1f686:	f7fc fcef 	bl	1c068 <__locale_ctype_ptr_l>
   1f68a:	2208      	movs	r2, #8
   1f68c:	1900      	adds	r0, r0, r4
   1f68e:	7843      	ldrb	r3, [r0, #1]
   1f690:	1c75      	adds	r5, r6, #1
   1f692:	4013      	ands	r3, r2
   1f694:	d10c      	bne.n	1f6b0 <_strtoul_l.isra.0+0x3c>
   1f696:	2c2d      	cmp	r4, #45	; 0x2d
   1f698:	d10c      	bne.n	1f6b4 <_strtoul_l.isra.0+0x40>
   1f69a:	3301      	adds	r3, #1
   1f69c:	782c      	ldrb	r4, [r5, #0]
   1f69e:	9302      	str	r3, [sp, #8]
   1f6a0:	1cb5      	adds	r5, r6, #2
   1f6a2:	2f00      	cmp	r7, #0
   1f6a4:	d00c      	beq.n	1f6c0 <_strtoul_l.isra.0+0x4c>
   1f6a6:	2f10      	cmp	r7, #16
   1f6a8:	d114      	bne.n	1f6d4 <_strtoul_l.isra.0+0x60>
   1f6aa:	2c30      	cmp	r4, #48	; 0x30
   1f6ac:	d00a      	beq.n	1f6c4 <_strtoul_l.isra.0+0x50>
   1f6ae:	e011      	b.n	1f6d4 <_strtoul_l.isra.0+0x60>
   1f6b0:	002e      	movs	r6, r5
   1f6b2:	e7e6      	b.n	1f682 <_strtoul_l.isra.0+0xe>
   1f6b4:	9302      	str	r3, [sp, #8]
   1f6b6:	2c2b      	cmp	r4, #43	; 0x2b
   1f6b8:	d1f3      	bne.n	1f6a2 <_strtoul_l.isra.0+0x2e>
   1f6ba:	782c      	ldrb	r4, [r5, #0]
   1f6bc:	1cb5      	adds	r5, r6, #2
   1f6be:	e7f0      	b.n	1f6a2 <_strtoul_l.isra.0+0x2e>
   1f6c0:	2c30      	cmp	r4, #48	; 0x30
   1f6c2:	d12f      	bne.n	1f724 <_strtoul_l.isra.0+0xb0>
   1f6c4:	2220      	movs	r2, #32
   1f6c6:	782b      	ldrb	r3, [r5, #0]
   1f6c8:	4393      	bics	r3, r2
   1f6ca:	2b58      	cmp	r3, #88	; 0x58
   1f6cc:	d154      	bne.n	1f778 <_strtoul_l.isra.0+0x104>
   1f6ce:	2710      	movs	r7, #16
   1f6d0:	786c      	ldrb	r4, [r5, #1]
   1f6d2:	3502      	adds	r5, #2
   1f6d4:	2001      	movs	r0, #1
   1f6d6:	0039      	movs	r1, r7
   1f6d8:	4240      	negs	r0, r0
   1f6da:	f7fa fb51 	bl	19d80 <__udivsi3>
   1f6de:	0006      	movs	r6, r0
   1f6e0:	2001      	movs	r0, #1
   1f6e2:	0039      	movs	r1, r7
   1f6e4:	4240      	negs	r0, r0
   1f6e6:	f7fa fbd1 	bl	19e8c <__aeabi_uidivmod>
   1f6ea:	2300      	movs	r3, #0
   1f6ec:	9104      	str	r1, [sp, #16]
   1f6ee:	2101      	movs	r1, #1
   1f6f0:	2201      	movs	r2, #1
   1f6f2:	0018      	movs	r0, r3
   1f6f4:	468c      	mov	ip, r1
   1f6f6:	4252      	negs	r2, r2
   1f6f8:	0021      	movs	r1, r4
   1f6fa:	3930      	subs	r1, #48	; 0x30
   1f6fc:	2909      	cmp	r1, #9
   1f6fe:	d813      	bhi.n	1f728 <_strtoul_l.isra.0+0xb4>
   1f700:	000c      	movs	r4, r1
   1f702:	42a7      	cmp	r7, r4
   1f704:	dd1e      	ble.n	1f744 <_strtoul_l.isra.0+0xd0>
   1f706:	2b00      	cmp	r3, #0
   1f708:	db1a      	blt.n	1f740 <_strtoul_l.isra.0+0xcc>
   1f70a:	0013      	movs	r3, r2
   1f70c:	4286      	cmp	r6, r0
   1f70e:	d306      	bcc.n	1f71e <_strtoul_l.isra.0+0xaa>
   1f710:	d102      	bne.n	1f718 <_strtoul_l.isra.0+0xa4>
   1f712:	9904      	ldr	r1, [sp, #16]
   1f714:	42a1      	cmp	r1, r4
   1f716:	db02      	blt.n	1f71e <_strtoul_l.isra.0+0xaa>
   1f718:	4663      	mov	r3, ip
   1f71a:	4378      	muls	r0, r7
   1f71c:	1820      	adds	r0, r4, r0
   1f71e:	782c      	ldrb	r4, [r5, #0]
   1f720:	3501      	adds	r5, #1
   1f722:	e7e9      	b.n	1f6f8 <_strtoul_l.isra.0+0x84>
   1f724:	270a      	movs	r7, #10
   1f726:	e7d5      	b.n	1f6d4 <_strtoul_l.isra.0+0x60>
   1f728:	0021      	movs	r1, r4
   1f72a:	3941      	subs	r1, #65	; 0x41
   1f72c:	2919      	cmp	r1, #25
   1f72e:	d801      	bhi.n	1f734 <_strtoul_l.isra.0+0xc0>
   1f730:	3c37      	subs	r4, #55	; 0x37
   1f732:	e7e6      	b.n	1f702 <_strtoul_l.isra.0+0x8e>
   1f734:	0021      	movs	r1, r4
   1f736:	3961      	subs	r1, #97	; 0x61
   1f738:	2919      	cmp	r1, #25
   1f73a:	d803      	bhi.n	1f744 <_strtoul_l.isra.0+0xd0>
   1f73c:	3c57      	subs	r4, #87	; 0x57
   1f73e:	e7e0      	b.n	1f702 <_strtoul_l.isra.0+0x8e>
   1f740:	0013      	movs	r3, r2
   1f742:	e7ec      	b.n	1f71e <_strtoul_l.isra.0+0xaa>
   1f744:	2b00      	cmp	r3, #0
   1f746:	da09      	bge.n	1f75c <_strtoul_l.isra.0+0xe8>
   1f748:	2322      	movs	r3, #34	; 0x22
   1f74a:	2001      	movs	r0, #1
   1f74c:	9a05      	ldr	r2, [sp, #20]
   1f74e:	4240      	negs	r0, r0
   1f750:	6013      	str	r3, [r2, #0]
   1f752:	9b01      	ldr	r3, [sp, #4]
   1f754:	2b00      	cmp	r3, #0
   1f756:	d10b      	bne.n	1f770 <_strtoul_l.isra.0+0xfc>
   1f758:	b007      	add	sp, #28
   1f75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f75c:	9a02      	ldr	r2, [sp, #8]
   1f75e:	2a00      	cmp	r2, #0
   1f760:	d000      	beq.n	1f764 <_strtoul_l.isra.0+0xf0>
   1f762:	4240      	negs	r0, r0
   1f764:	9a01      	ldr	r2, [sp, #4]
   1f766:	2a00      	cmp	r2, #0
   1f768:	d0f6      	beq.n	1f758 <_strtoul_l.isra.0+0xe4>
   1f76a:	9a03      	ldr	r2, [sp, #12]
   1f76c:	2b00      	cmp	r3, #0
   1f76e:	d000      	beq.n	1f772 <_strtoul_l.isra.0+0xfe>
   1f770:	1e6a      	subs	r2, r5, #1
   1f772:	9b01      	ldr	r3, [sp, #4]
   1f774:	601a      	str	r2, [r3, #0]
   1f776:	e7ef      	b.n	1f758 <_strtoul_l.isra.0+0xe4>
   1f778:	2430      	movs	r4, #48	; 0x30
   1f77a:	2f00      	cmp	r7, #0
   1f77c:	d1aa      	bne.n	1f6d4 <_strtoul_l.isra.0+0x60>
   1f77e:	3708      	adds	r7, #8
   1f780:	e7a8      	b.n	1f6d4 <_strtoul_l.isra.0+0x60>
	...

0001f784 <_strtoul_r>:
   1f784:	b513      	push	{r0, r1, r4, lr}
   1f786:	4c05      	ldr	r4, [pc, #20]	; (1f79c <_strtoul_r+0x18>)
   1f788:	6824      	ldr	r4, [r4, #0]
   1f78a:	6a24      	ldr	r4, [r4, #32]
   1f78c:	2c00      	cmp	r4, #0
   1f78e:	d100      	bne.n	1f792 <_strtoul_r+0xe>
   1f790:	4c03      	ldr	r4, [pc, #12]	; (1f7a0 <_strtoul_r+0x1c>)
   1f792:	9400      	str	r4, [sp, #0]
   1f794:	f7ff ff6e 	bl	1f674 <_strtoul_l.isra.0>
   1f798:	bd16      	pop	{r1, r2, r4, pc}
   1f79a:	46c0      	nop			; (mov r8, r8)
   1f79c:	2000022c 	.word	0x2000022c
   1f7a0:	20000290 	.word	0x20000290

0001f7a4 <__submore>:
   1f7a4:	000b      	movs	r3, r1
   1f7a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f7a8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   1f7aa:	3344      	adds	r3, #68	; 0x44
   1f7ac:	000c      	movs	r4, r1
   1f7ae:	429d      	cmp	r5, r3
   1f7b0:	d11c      	bne.n	1f7ec <__submore+0x48>
   1f7b2:	2680      	movs	r6, #128	; 0x80
   1f7b4:	00f6      	lsls	r6, r6, #3
   1f7b6:	0031      	movs	r1, r6
   1f7b8:	f7fc fd82 	bl	1c2c0 <_malloc_r>
   1f7bc:	2800      	cmp	r0, #0
   1f7be:	d102      	bne.n	1f7c6 <__submore+0x22>
   1f7c0:	2001      	movs	r0, #1
   1f7c2:	4240      	negs	r0, r0
   1f7c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f7c6:	0023      	movs	r3, r4
   1f7c8:	6360      	str	r0, [r4, #52]	; 0x34
   1f7ca:	63a6      	str	r6, [r4, #56]	; 0x38
   1f7cc:	3346      	adds	r3, #70	; 0x46
   1f7ce:	781a      	ldrb	r2, [r3, #0]
   1f7d0:	4b10      	ldr	r3, [pc, #64]	; (1f814 <__submore+0x70>)
   1f7d2:	54c2      	strb	r2, [r0, r3]
   1f7d4:	0023      	movs	r3, r4
   1f7d6:	3345      	adds	r3, #69	; 0x45
   1f7d8:	781a      	ldrb	r2, [r3, #0]
   1f7da:	4b0f      	ldr	r3, [pc, #60]	; (1f818 <__submore+0x74>)
   1f7dc:	54c2      	strb	r2, [r0, r3]
   1f7de:	782a      	ldrb	r2, [r5, #0]
   1f7e0:	4b0e      	ldr	r3, [pc, #56]	; (1f81c <__submore+0x78>)
   1f7e2:	54c2      	strb	r2, [r0, r3]
   1f7e4:	18c0      	adds	r0, r0, r3
   1f7e6:	6020      	str	r0, [r4, #0]
   1f7e8:	2000      	movs	r0, #0
   1f7ea:	e7eb      	b.n	1f7c4 <__submore+0x20>
   1f7ec:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   1f7ee:	0029      	movs	r1, r5
   1f7f0:	0073      	lsls	r3, r6, #1
   1f7f2:	001a      	movs	r2, r3
   1f7f4:	9301      	str	r3, [sp, #4]
   1f7f6:	f000 f813 	bl	1f820 <_realloc_r>
   1f7fa:	1e05      	subs	r5, r0, #0
   1f7fc:	d0e0      	beq.n	1f7c0 <__submore+0x1c>
   1f7fe:	1987      	adds	r7, r0, r6
   1f800:	0001      	movs	r1, r0
   1f802:	0032      	movs	r2, r6
   1f804:	0038      	movs	r0, r7
   1f806:	f7fc fced 	bl	1c1e4 <memcpy>
   1f80a:	9b01      	ldr	r3, [sp, #4]
   1f80c:	6027      	str	r7, [r4, #0]
   1f80e:	6365      	str	r5, [r4, #52]	; 0x34
   1f810:	63a3      	str	r3, [r4, #56]	; 0x38
   1f812:	e7e9      	b.n	1f7e8 <__submore+0x44>
   1f814:	000003ff 	.word	0x000003ff
   1f818:	000003fe 	.word	0x000003fe
   1f81c:	000003fd 	.word	0x000003fd

0001f820 <_realloc_r>:
   1f820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f822:	0007      	movs	r7, r0
   1f824:	000d      	movs	r5, r1
   1f826:	0016      	movs	r6, r2
   1f828:	2900      	cmp	r1, #0
   1f82a:	d105      	bne.n	1f838 <_realloc_r+0x18>
   1f82c:	0011      	movs	r1, r2
   1f82e:	f7fc fd47 	bl	1c2c0 <_malloc_r>
   1f832:	0004      	movs	r4, r0
   1f834:	0020      	movs	r0, r4
   1f836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f838:	2a00      	cmp	r2, #0
   1f83a:	d103      	bne.n	1f844 <_realloc_r+0x24>
   1f83c:	f7fc fcf6 	bl	1c22c <_free_r>
   1f840:	0034      	movs	r4, r6
   1f842:	e7f7      	b.n	1f834 <_realloc_r+0x14>
   1f844:	f000 f812 	bl	1f86c <_malloc_usable_size_r>
   1f848:	002c      	movs	r4, r5
   1f84a:	4286      	cmp	r6, r0
   1f84c:	d9f2      	bls.n	1f834 <_realloc_r+0x14>
   1f84e:	0031      	movs	r1, r6
   1f850:	0038      	movs	r0, r7
   1f852:	f7fc fd35 	bl	1c2c0 <_malloc_r>
   1f856:	1e04      	subs	r4, r0, #0
   1f858:	d0ec      	beq.n	1f834 <_realloc_r+0x14>
   1f85a:	0029      	movs	r1, r5
   1f85c:	0032      	movs	r2, r6
   1f85e:	f7fc fcc1 	bl	1c1e4 <memcpy>
   1f862:	0029      	movs	r1, r5
   1f864:	0038      	movs	r0, r7
   1f866:	f7fc fce1 	bl	1c22c <_free_r>
   1f86a:	e7e3      	b.n	1f834 <_realloc_r+0x14>

0001f86c <_malloc_usable_size_r>:
   1f86c:	1f0b      	subs	r3, r1, #4
   1f86e:	681b      	ldr	r3, [r3, #0]
   1f870:	1f18      	subs	r0, r3, #4
   1f872:	2b00      	cmp	r3, #0
   1f874:	da01      	bge.n	1f87a <_malloc_usable_size_r+0xe>
   1f876:	580b      	ldr	r3, [r1, r0]
   1f878:	18c0      	adds	r0, r0, r3
   1f87a:	4770      	bx	lr

0001f87c <__gnu_thumb1_case_uqi>:
   1f87c:	b402      	push	{r1}
   1f87e:	4671      	mov	r1, lr
   1f880:	0849      	lsrs	r1, r1, #1
   1f882:	0049      	lsls	r1, r1, #1
   1f884:	5c09      	ldrb	r1, [r1, r0]
   1f886:	0049      	lsls	r1, r1, #1
   1f888:	448e      	add	lr, r1
   1f88a:	bc02      	pop	{r1}
   1f88c:	4770      	bx	lr
   1f88e:	46c0      	nop			; (mov r8, r8)
   1f890:	000013f2 	.word	0x000013f2
   1f894:	000013da 	.word	0x000013da
   1f898:	000013f2 	.word	0x000013f2
   1f89c:	000013e2 	.word	0x000013e2
   1f8a0:	000013f2 	.word	0x000013f2
   1f8a4:	000013d2 	.word	0x000013d2
   1f8a8:	000013f2 	.word	0x000013f2
   1f8ac:	000013f2 	.word	0x000013f2
   1f8b0:	000013f2 	.word	0x000013f2
   1f8b4:	000013ea 	.word	0x000013ea
   1f8b8:	42002c00 	.word	0x42002c00
   1f8bc:	42003000 	.word	0x42003000
   1f8c0:	42003400 	.word	0x42003400
   1f8c4:	42003800 	.word	0x42003800
   1f8c8:	42003c00 	.word	0x42003c00
   1f8cc:	1d1c1c1b 	.word	0x1d1c1c1b
   1f8d0:	0000001d 	.word	0x0000001d
   1f8d4:	10000800 	.word	0x10000800
   1f8d8:	40002000 	.word	0x40002000
   1f8dc:	00008000 	.word	0x00008000
   1f8e0:	01020300 	.word	0x01020300

0001f8e4 <_usb_device_irq_bits>:
   1f8e4:	00080004 00800070 01000001 00000200     ....p...........

0001f8f4 <_usb_endpoint_irq_bits>:
   1f8f4:	60100c03 00003f9e 00003fb4 00004120     ...`.?...?.. A..
   1f904:	000041ee 000042bc 50504128 52452829     .A...B..(APP)(ER
   1f914:	255b2952 255b5d73 00005d64 61766e69     R)[%s][%d]..inva
   1f924:	6564696c 636f6920 6320746c 0000646d     lide ioclt cmd..

0001f934 <__FUNCTION__.15792>:
   1f934:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1f944:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   1f954:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   1f964:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1f974:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   1f984:	74207075 63206568 00706968 66696828     up the chip.(hif
   1f994:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   1f9a4:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   1f9b4:	66696828 64612029 73657264 75622073     (hif) address bu
   1f9c4:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   1f9d4:	70757272 20646574 6b636170 53207465     rrupted packet S
   1f9e4:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   1f9f4:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   1fa04:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   1fa14:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   1fa24:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   1fa34:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   1fa44:	73696765 65726574 00000064 2061744f     egistered...Ota 
   1fa54:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   1fa64:	69676572 72657473 00006465 70797243     registered..Cryp
   1fa74:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   1fa84:	7220746f 73696765 65726574 00000064     ot registered...
   1fa94:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   1faa4:	6f6e2073 65722074 74736967 64657265     s not registered
   1fab4:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   1fac4:	72672064 2070756f 00004449 66696828     d group ID..(hif
   1fad4:	6f682029 61207473 64207070 276e6469     ) host app didn'
   1fae4:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   1faf4:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   1fb04:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   1fb14:	61462029 2065736c 65746e69 70757272     ) False interrup
   1fb24:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   1fb34:	74206c69 6552206f 69206461 7265746e     il to Read inter
   1fb44:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   1fb54:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   1fb64:	746e6920 75727265 25207470 72742064      interrupt %d tr
   1fb74:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   1fb84:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   1fb94:	72612064 656d7567 0000746e 20505041     d argument..APP 
   1fba4:	75716552 65747365 69532064 6920657a     Requested Size i
   1fbb4:	616c2073 72656772 61687420 6874206e     s larger than th
   1fbc4:	65722065 65766963 75622064 72656666     e recived buffer
   1fbd4:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   1fbe4:	00000000 20505041 75716552 65747365     ....APP Requeste
   1fbf4:	64412064 73657264 65622073 646e6f79     d Address beyond
   1fc04:	65687420 63657220 64657669 66756220      the recived buf
   1fc14:	20726566 72646461 20737365 20646e61     fer address and 
   1fc24:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   1fc34:	0000000a 00007ac4 00007a94 00007a8c     .....z...z...z..
   1fc44:	00007aa4 00007a9c 00007abc 00007aac     .z...z...z...z..
   1fc54:	00007ab4                                .z..

0001fc58 <__FUNCTION__.13079>:
   1fc58:	5f666968 646e6573 00000000              hif_send....

0001fc64 <__FUNCTION__.13089>:
   1fc64:	5f666968 00727369                       hif_isr.

0001fc6c <__FUNCTION__.13095>:
   1fc6c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0001fc7c <__FUNCTION__.13107>:
   1fc7c:	5f666968 65636572 00657669              hif_receive.

0001fc88 <__FUNCTION__.13123>:
   1fc88:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1fc98:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1fca8:	00005d64 6f727245 65722072 76696563     d]..Error receiv
   1fcb8:	20676e69 204c5353 6d6f7266 65687420     ing SSL from the
   1fcc8:	46494820 00000000 5f666968 69676572      HIF....hif_regi
   1fcd8:	72657473 2862635f 61662029 64656c69     ster_cb() failed
   1fce8:	74697720 65722068 64253d74 00000000      with ret=%d....

0001fcf8 <__FUNCTION__.13094>:
   1fcf8:	5f6d326d 5f6c7373 00006263              m2m_ssl_cb..

0001fd04 <__FUNCTION__.13140>:
   1fd04:	5f6d326d 5f6c7373 74696e69 00000000     m2m_ssl_init....
   1fd14:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   1fd24:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   1fd34:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   1fd44:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1fd54:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   1fd64:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   1fd74:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   1fd84:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   1fd94:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   1fda4:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   1fdb4:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   1fdc4:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   1fdd4:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   1fde4:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   1fdf4:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   1fe04:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   1fe14:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   1fe24:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1fe34:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   1fe44:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   1fe54:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   1fe64:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   1fe74:	73747365 72657020 61637320 6c73206e     ests per scan sl
   1fe84:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   1fe94:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   1fea4:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   1feb4:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   1fec4:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   1fed4:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   1fee4:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   1fef4:	6e694d20 69726420 20726576 20726576      Min driver ver 
   1ff04:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   1ff14:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   1ff24:	0000000a 353a3631 37303a30 00000000     ....16:50:07....
   1ff34:	20766f4e 32203731 00373130 76697244     Nov 17 2017.Driv
   1ff44:	62207265 746c6975 20746120 25097325     er built at %s.%
   1ff54:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   1ff64:	7277616d 65562065 6f697372 0000006e     mawre Version...
   1ff74:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   1ff84:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   1ff94:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   1ffa4:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   1ffb4:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   1ffc4:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   1ffd4:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   1ffe4:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   1fff4:	53502074 656b204b 656c2079 6874676e     t PSK key length
   20004:	00000000 65646e75 656e6966 65732064     ....undefined se
   20014:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   20024:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   20034:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   20044:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   20054:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   20064:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   20074:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   20084:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   20094:	66754220 20726566 65637865 64656465      Buffer exceeded
   200a4:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   200b4:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   200c4:	00000000                                ....

000200c8 <__FUNCTION__.13058>:
   200c8:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000200d4 <__FUNCTION__.13087>:
   200d4:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000200e4 <__FUNCTION__.13115>:
   200e4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   200f4:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   20104:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   20114:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   20124:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   20134:	20656874 70696863 00000000 50504128     the chip....(APP
   20144:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   20154:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   20164:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   20174:	6c616974 00657a69 6c75705b 5f70756c     tialize.[pullup_
   20184:	6c727463 66203a5d 656c6961 6f742064     ctrl]: failed to
   20194:	61657220 00000064 6c75705b 5f70756c      read...[pullup_
   201a4:	6c727463 66203a5d 656c6961 6f742064     ctrl]: failed to
   201b4:	69727720 00006574                        write..

000201bc <__FUNCTION__.12921>:
   201bc:	70696863 6b61775f 00000065              chip_wake...

000201c8 <__FUNCTION__.12970>:
   201c8:	70696863 6965645f 0074696e              chip_deinit.

000201d4 <__FUNCTION__.12999>:
   201d4:	6c6c7570 635f7075 006c7274 50504128     pullup_ctrl.(APP
   201e4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   201f4:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   20204:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   20214:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   20224:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   20234:	6e65206f 656c6261 746e6920 75727265     o enable interru
   20244:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   20254:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   20264:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   20274:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   20284:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   20294:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   202a4:	75622074 00000073                       t bus...

000202ac <__FUNCTION__.12968>:
   202ac:	645f6d6e 695f7672 0074696e              nm_drv_init.

000202b8 <__FUNCTION__.12975>:
   202b8:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

000202c8 <crc7_syndrome_table>:
   202c8:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   202d8:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   202e8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   202f8:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   20308:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   20318:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   20328:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   20338:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   20348:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   20358:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   20368:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   20378:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   20388:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   20398:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   203a8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   203b8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   203c8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   203d8:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   203e8:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   203f8:	73756220 72726520 2e2e726f 0000002e      bus error......
   20408:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20418:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   20428:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20438:	61642064 72206174 6f707365 2065736e     d data response 
   20448:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   20458:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20468:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   20478:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   20488:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   20498:	656c6961 61642064 72206174 6f707365     ailed data respo
   204a8:	2065736e 64616572 7562202c 72652073     nse read, bus er
   204b8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   204c8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   204d8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   204e8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   204f8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   20508:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   20518:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   20528:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   20538:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   20548:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   20558:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   20568:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   20578:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   20588:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   20598:	656c6961 61642064 62206174 6b636f6c     ailed data block
   205a8:	69727720 202c6574 20737562 6f727265      write, bus erro
   205b8:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   205c8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   205d8:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   205e8:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   205f8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20608:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   20618:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   20628:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   20638:	65722064 6e6f7073 202c6573 74697277     d response, writ
   20648:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   20658:	00000000 65736552 6e612074 65722064     ....Reset and re
   20668:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   20678:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20688:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   20698:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   206a8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   206b8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   206c8:	69727720 62206574 6b636f6c 30252820      write block (%0
   206d8:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   206e8:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   206f8:	61746164 69727720 2e2e6574 0000002e     data write......
   20708:	65736552 6e612074 65722064 20797274     Reset and retry 
   20718:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   20728:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   20738:	72202c64 20646165 20676572 38302528     d, read reg (%08
   20748:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   20758:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   20768:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   20778:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   20788:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   20798:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   207a8:	6e612074 65722064 20797274 25206425     t and retry %d %
   207b8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   207c8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   207d8:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   207e8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   207f8:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   20808:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   20818:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   20828:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   20838:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   20848:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   20858:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   20868:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   20878:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   20888:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   20898:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   208a8:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   208b8:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   208c8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   208d8:	6e692064 6e726574 77206c61 65746972     d internal write
   208e8:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   208f8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   20908:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   20918:	64692070 002e2e2e 00009a38 00009a38     p id....8...8...
   20928:	00009ac8 0000998c 000099d2 000099f4     ................
   20938:	00009a7a 00009a7a 00009b34 00009960     z...z...4...`...
   20948:	00009b8e 00009b8e 00009b8e 00009b8e     ................
   20958:	00009a16                                ....

0002095c <__FUNCTION__.12274>:
   2095c:	5f697073 00646d63                       spi_cmd.

00020964 <__FUNCTION__.12281>:
   20964:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00020974 <__FUNCTION__.12290>:
   20974:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00020980 <__FUNCTION__.12306>:
   20980:	5f697073 61746164 6165725f 00000064     spi_data_read...

00020990 <__FUNCTION__.12321>:
   20990:	5f697073 61746164 6972775f 00006574     spi_data_write..

000209a0 <__FUNCTION__.12333>:
   209a0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000209b0 <__FUNCTION__.12344>:
   209b0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000209c0 <__FUNCTION__.12356>:
   209c0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

000209d0 <__FUNCTION__.12369>:
   209d0:	735f6d6e 725f6970 00646165              nm_spi_read.

000209dc <__FUNCTION__.12390>:
   209dc:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   209ec:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   209fc:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   20a0c:	25207465 65732064 6f697373 4449206e     et %d session ID
   20a1c:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   20a2c:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   20a3c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   20a4c:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   20a5c:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   20a6c:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   20a7c:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   20a8c:	204c5353 6b636f53 00007465              SSL Socket..

00020a98 <__FUNCTION__.13235>:
   20a98:	536c7373 6f537465 704f6b63 00000074     sslSetSockOpt...
   20aa8:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   20ab8:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   20ac8:	0000e7fa 0000e872 0000e872 0000e818     ....r...r.......
   20ad8:	0000e812 0000e81e 0000e800 0000e824     ............$...
   20ae8:	0000e858 0000eb3c 0000eb8c 0000eb8c     X...<...........
   20af8:	0000eb88 0000eb2e 0000eb4e 0000eb1e     ........N.......
   20b08:	0000eb60 0000eb72 0000ebda 0000ec08     `...r...........
   20b18:	0000ec08 0000ec04 0000ebd4 0000ebe0     ................
   20b28:	0000ebce 0000ebe6 0000ebec              ............

00020b34 <device_execution_time_204>:
   20b34:	00260028 003e001c 002b0015 00450011     (.&...>...+...E.
   20b44:	00020030 00180017 00230008 003c0016     0.........#...<.
   20b54:	00020001 0032001b 00050002 00160047     ......2.....G...
   20b64:	000c0020 002a0012                        .....*.

00020b6c <device_execution_time_108>:
   20b6c:	000d0028 00140024 0032001c 000b0015     (...$.....2.....
   20b7c:	00730040 00170011 00020030 00200017     @.s.....0..... .
   20b8c:	000e0008 001d0016 00030001 00300046     ............F.0.
   20b9c:	0017001b 00050002 00090047 003c0041     ........G...A.<.
   20bac:	000a0020 00480045 001a0012               ...E.H.....

00020bb8 <device_execution_time_508>:
   20bb8:	000d0028 00140024 0032001c 003a0043     (...$.....2.C.:.
   20bc8:	000b0015 00730040 00170011 00020030     ....@.s.....0...
   20bd8:	00200017 000e0008 001d0016 00030001     .. .............
   20be8:	00300046 0017001b 00050002 00090047     F.0.........G...
   20bf8:	003c0041 000a0020 00480045 001a0012     A.<. ...E.H.....

00020c08 <device_execution_time_608_m0>:
   20c08:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   20c18:	003c0043 00190015 00730040 00050030     C.<.....@.s.0...
   20c28:	00a50056 00230017 00370008 00140016     V.....#...7.....
   20c38:	00320046 0017001b 00050002 00500080     F.2...........P.
   20c48:	00fa0077 00240047 00730041 000a0020     w...G.$.A.s. ...
   20c58:	00690045 002d0012                       E.i...-.

00020c60 <device_execution_time_608_m1>:
   20c60:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   20c70:	008c0043 00230015 00d70040 00050030     C.....#.@...0...
   20c80:	00a50056 00230017 00370008 00140016     V.....#...7.....
   20c90:	00320046 0017001b 00050002 00970080     F.2.............
   20ca0:	024e0077 002a0047 00dc0041 000a0020     w.N.G.*.A... ...
   20cb0:	01270045 002d0012                       E.'...-.

00020cb8 <device_execution_time_608_m2>:
   20cb8:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   20cc8:	01c70043 00230015 02760040 00050030     C.....#.@.v.0...
   20cd8:	00a50056 00230017 00370008 00140016     V.....#...7.....
   20ce8:	00320046 0017001b 00050002 01c30080     F.2.............
   20cf8:	08980077 004b0047 02990041 000a0020     w...G.K.A... ...
   20d08:	043d0045 002d0012 40030004 00000a0d     E.=...-....@....
   20d18:	58323025 00000020 58323025 00000000     %02X ...%02X....
   20d28:	00007825 754e203a 69206c6c 7475706e     %x..: Null input
   20d38:	72617020 74656d61 2d207265 7453202d      parameter -- St
   20d48:	73757461 3025203a 0a0d5832 00000000     atus: %02X......
   20d58:	00007325 0000000d 6e49203a 696c6176     %s......: Invali
   20d68:	61622064 34366573 706e6920 2d207475     d base64 input -
   20d78:	7453202d 73757461 3025203a 0a0d5832     - Status: %02X..
   20d88:	00000000 654c203a 6874676e 20666f20     ....: Length of 
   20d98:	6f636564 20646564 66667562 74207265     decoded buffer t
   20da8:	73206f6f 6c6c616d 202d2d20 74617453     oo small -- Stat
   20db8:	203a7375 58323025 00000a0d 654c203a     us: %02X....: Le
   20dc8:	6874676e 20666f20 6f636e65 20646564     ngth of encoded 
   20dd8:	66667562 74207265 73206f6f 6c6c616d     buffer too small
   20de8:	202d2d20 74617453 203a7375 58323025      -- Status: %02X
   20df8:	00000a0d                                ....

00020dfc <k.4571>:
   20dfc:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   20e0c:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   20e1c:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   20e2c:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   20e3c:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   20e4c:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   20e5c:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   20e6c:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   20e7c:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   20e8c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   20e9c:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   20eac:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   20ebc:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   20ecc:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   20edc:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   20eec:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00020efc <hash_init.4603>:
   20efc:	6a09e667 bb67ae85 3c6ef372 a54ff53a     g..j..g.r.n<:.O.
   20f0c:	510e527f 9b05688c 1f83d9ab 5be0cd19     .R.Q.h.........[
   20f1c:	0001108c 000110d0 000110d0 000110d0     ................
   20f2c:	000110d0 000110d0 0001112c 00011142     ........,...B...
   20f3c:	00011142 00011142 00011142 00011142     B...B...B...B...
   20f4c:	6b636170 73207465 20646e65 6f727265     packet send erro
   20f5c:	00000d72 6d6d6f63 20646e61 70736572     r...command resp
   20f6c:	65736e6f 72726520 000d726f 01600000     onse error....`.
   20f7c:	01100080 08000200 09000200 00050400     ................
   20f8c:	43331104 00011cce 00011ce4 00011cfa     ..3C............
   20f9c:	00011d10 00011d26 00011d3c 00011fa8     ....&...<.......
   20fac:	00011fbe 00011fd4 00011fea 00012000     ............. ..
   20fbc:	00012016                                . ..

00020fc0 <g_jwt_header>:
   20fc0:	6c61227b 223a2267 35325345 222c2236     {"alg":"ES256","
   20fd0:	22707974 574a223a 007d2254 22732522     typ":"JWT"}."%s"
   20fe0:	7325223a 00000022 22732522 0064253a     :"%s"..."%s":%d.
   20ff0:	00012ff2 00012ff2 00012ff2 00012e80     ./.../.../......
   21000:	00012ff2 00012f6a 00012ff2 00012ff2     ./..j/.../.../..
   21010:	00012ff2 00012ff2 00012ff2 00012ff2     ./.../.../.../..
   21020:	00012ff2 00012fe4 4354514d 00000000     ./.../..MQTC....
   21030:	00000004 00000000 00000000 00000000     ................
   21040:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   21080:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   21090:	0000302d 00005878 00000072 00783425     -0..xX..r...%4x.
   210a0:	65757274 00000000 736c6166 00000065     true....false...
   210b0:	6c6c756e 00000000 0000005b 0000000a     null....[.......
   210c0:	0000002c 0000005d 0000007b 0000003a     ,...]...{...:...
   210d0:	00000020 0000007d 00006425 00006625      ...}...%d..%f..
   210e0:	00000022 0000225c 00005c5c 0000625c     "...\"..\\..\b..
   210f0:	0000665c 00006e5c 0000725c 0000745c     \f..\n..\r..\t..
   21100:	20202020 00000000 00007325 00002f2a         ....%s..*/..
   21110:	00002a2f 00002f2f 00000077 00015260     /*..//..w...`R..
   21120:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21130:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21140:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21150:	00015270 00015330 00015330 00015330     pR..0S..0S..0S..
   21160:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21170:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21180:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21190:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   211a0:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   211b0:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   211c0:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   211d0:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   211e0:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   211f0:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21200:	00015330 00015268 00015330 00015330     0S..hR..0S..0S..
   21210:	00015330 00015330 00015330 00015278     0S..0S..0S..xR..
   21220:	00015330 00015330 00015330 00015280     0S..0S..0S...R..
   21230:	00015330 00015330 00015330 00015330     0S..0S..0S..0S..
   21240:	00015330 00015330 00015330 00015288     0S..0S..0S...R..
   21250:	00015330 00015330 00015330 00015290     0S..0S..0S...R..
   21260:	00015330 00015298 000152a0 0001542e     0S...R...R...T..
   21270:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21280:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21290:	0001545e 0001545e 00015446 0001545e     ^T..^T..FT..^T..
   212a0:	0001545e 00015446 00015446 00015446     ^T..FT..FT..FT..
   212b0:	00015446 00015446 00015446 00015446     FT..FT..FT..FT..
   212c0:	00015446 00015446 00015446 0001545e     FT..FT..FT..^T..
   212d0:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   212e0:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   212f0:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21300:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21310:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21320:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21330:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21340:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21350:	0001541c 0001545e 0001545e 0001545e     .T..^T..^T..^T..
   21360:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21370:	0001545e 0001545e 0001545e 0001543a     ^T..^T..^T..:T..
   21380:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   21390:	0001545e 0001545e 0001545e 00015452     ^T..^T..^T..RT..
   213a0:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   213b0:	0001545e 0001543a 0001545e 0001545e     ^T..:T..^T..^T..
   213c0:	0001545e 0001545e 0001545e 0001545e     ^T..^T..^T..^T..
   213d0:	0001540a 72617453 676e6974 61784520     .T..Starting Exa
   213e0:	656c706d 0d2e2e2e 00000000 00000000     mple............
   213f0:	49464957 4154535f 495f4554 0054494e     WIFI_STATE_INIT.
   21400:	49464957 4154535f 545f4554 495f534c     WIFI_STATE_TLS_I
   21410:	0054494e 49464957 4154535f 435f4554     NIT.WIFI_STATE_C
   21420:	454e4e4f 00005443 49464957 4154535f     ONNECT..WIFI_STA
   21430:	575f4554 00544941 49464957 4154535f     TE_WAIT.WIFI_STA
   21440:	525f4554 59444145 00000000 49464957     TE_READY....WIFI
   21450:	4154535f 545f4554 4f454d49 00005455     _STATE_TIMEOUT..
   21460:	49464957 4154535f 455f4554 524f5252     WIFI_STATE_ERROR
   21470:	00000000                                ....

00021474 <diode_sensors>:
   21474:	01100029 2a2b2324 2d6e6166 65657073     )...$#+*fan-spee
   21484:	00000064 61727564 6e6f6974 00000000     d...duration....
   21494:	2c64255b 2c5d6425 00000000 00000000     [%d,%d],........
   214a4:	6c696146 74206465 6567206f 6f742074     Failed to get to
   214b4:	20636970 69727473 0000676e 7422207b     pic string..{ "t
   214c4:	73656d69 706d6174 25203a22 22202c75     imestamp": %u, "
   214d4:	706d6574 74617265 22657275 6425203a     temperature": %d
   214e4:	3230252e 22202c64 2d6e6166 65657073     .%02d, "fan-spee
   214f4:	203a2264 7d206425 00000000 6c627550     d": %d }....Publ
   21504:	69687369 4d20676e 20545451 7373654d     ishing MQTT Mess
   21514:	20656761 0a0d7325 00000000 6c696146     age %s......Fail
   21524:	74206465 7570206f 73696c62 68742068     ed to publish th
   21534:	514d2065 6d205454 61737365 203a6567     e MQTT message: 
   21544:	0a0d6425 00000000 2d6e6166 65657073     %d......fan-spee
   21554:	616d2d64 00000070 7265766f 65646972     d-map...override
   21564:	00000000 61647075 722d6574 00657461     ....update-rate.
   21574:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2158c:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   215cc:	6c696146 74206465 6f6c206f 74206461     Failed to load t
   215dc:	73206568 63736275 74706972 206e6f69     he subscription 
   215ec:	69706f74 616e2063 0000656d 5454514d     topic name..MQTT
   215fc:	696c4320 20746e65 6c696146 74206465      Client Failed t
   2160c:	6f43206f 63656e6e 00000d74 5454514d     o Connect...MQTT
   2161c:	62755320 69726373 6f697470 6146206e      Subscription Fa
   2162c:	64656c69 0000000d 45494c43 535f544e     iled....CLIENT_S
   2163c:	45544154 494e495f 00000054 45494c43     TATE_INIT...CLIE
   2164c:	535f544e 45544154 5445475f 4d49545f     NT_STATE_GET_TIM
   2165c:	00000045 45494c43 535f544e 45544154     E...CLIENT_STATE
   2166c:	4e4f435f 5443454e 00000000 45494c43     _CONNECT....CLIE
   2167c:	535f544e 45544154 4e55525f 00000000     NT_STATE_RUN....
   2168c:	45494c43 535f544e 45544154 5252455f     CLIENT_STATE_ERR
   2169c:	0000524f                                OR..

000216a0 <config_gcp_host_name>:
   216a0:	7474716d 6f6f672e 61656c67 2e736970     mqtt.googleapis.
   216b0:	006d6f63                                com.

000216b4 <config_demo_ssid>:
   216b4:	746e7548 326d6146 0000342e              HuntFam2.4..

000216c0 <config_demo_pass>:
   216c0:	32312121 6c656233 0000616c              !!123bella..

000216cc <config_gcp_project_id>:
   216cc:	2d6f7270 65657263 37312d6b 37313833     pro-creek-173817
   216dc:	00000000                                ....

000216e0 <config_gcp_region_id>:
   216e0:	632d7375 72746e65 00316c61              us-central1.

000216ec <config_gcp_registry_id>:
   216ec:	73746f69 30326377 00003731              iotswc2017..

000216f8 <config_gcp_thing_id>:
   216f8:	73746f69 645f6377 5f6f6d65 00000033     iotswc_demo_3...
   21708:	6a6f7270 73746365 2f73252f 61636f6c     projects/%s/loca
   21718:	6e6f6974 73252f73 6765722f 72747369     tions/%s/registr
   21728:	2f736569 642f7325 63697665 252f7365     ies/%s/devices/%
   21738:	00000073 73756e75 00006465 00746169     s...unused..iat.
   21748:	00707865 00647561 7665642f 73656369     exp.aud./devices
   21758:	2f73252f 6e657665 00007374 7665642f     /%s/events../dev
   21768:	73656369 2f73252f 666e6f63 00006769     ices/%s/config..
   21778:	00007325 2d2d2d2d 4745422d 50204e49     %s..-----BEGIN P
   21788:	494c4255 454b2043 2d2d2d59 0a0d2d2d     UBLIC KEY-----..
   21798:	0a0d7325 2d2d2d2d 444e452d 42555020     %s..-----END PUB
   217a8:	2043494c 2d59454b 2d2d2d2d 00000a0d     LIC KEY-----....

000217b8 <public_key_x509_header>:
   217b8:	13305930 862a0706 023dce48 2a080601     0Y0...*.H.=....*
   217c8:	3dce4886 03070103 00040042              .H.=....B...

000217d4 <VersionKit>:
   217d4:	00050001                                ....

000217d8 <VersionSha204>:
   217d8:	00000301                                ....

000217dc <VersionAes132>:
   217dc:	00000101                                ....

000217e0 <VersionEcc508>:
   217e0:	00000101                                ....

000217e4 <StringSha204>:
   217e4:	32414853 00203430                       SHA204 .

000217ec <StringAes132>:
   217ec:	31534541 00203233                       AES132 .

000217f4 <StringEcc508>:
   217f4:	31434345 00203830                       ECC108 .

000217fc <StringKit>:
   217fc:	38385441 39354b43 00002030 6e6b6e75     AT88CK590 ..unkn
   2180c:	5f6e776f 69766564 00006563 645f6f6e     own_device..no_d
   2181c:	63697665 00002065 20495053 00000000     evice ..SPI ....
   2182c:	20495754 00000000 20495753 00000000     TWI ....SWI ....
   2183c:	00021818 00021824 0002182c 00021834     ....$...,...4...
   2184c:	65737461 6620646e 656c6961 25203a64     atsend failed: %
   2185c:	000a0d78 65727461 76696563 61662065     x...atreceive fa
   2186c:	64656c69 7825203a 00000a0d 2074694b     iled: %x....Kit 
   2187c:	203a5852 202c6425 0a0d7325 00000000     RX: %d, %s......
   2188c:	2074694b 203a5854 202c6425 0a0d7325     Kit TX: %d, %s..
   2189c:	00000000 00018f1e 00018f38 00018f38     ........8...8...
   218ac:	00018f38 00018f38 00018f38 00018f38     8...8...8...8...
   218bc:	00018ee8 00018efa 00018f0c 00018f38     ............8...
   218cc:	00018f0c 00018f0c 000191fc 00019160     ............`...
   218dc:	0001918a 000191fc 000191fc 000191fc     ................
   218ec:	000191fc 000191fc 00019136 000191fc     ........6.......
   218fc:	000191fc 000191fc 000191fc 000191fc     ................
   2190c:	000191fc 000191fc 000191fc 0001910c     ................
   2191c:	000191ee 000191fc 000191fc 000190e2     ................
   2192c:	00019144 00019128 000191fc 000191fc     D...(...........
   2193c:	000191fc 0001917c 000190c6 000191fc     ....|...........
   2194c:	000191fc 000191fc 000191d2 000191fc     ................
   2195c:	000191fc 000191fc 000190b8 000191fc     ................
   2196c:	000191fc 000191fc 000190aa 000191fc     ................
   2197c:	000191fc 000191fc 000191fc 000191fc     ................
   2198c:	000191fc 000191fc 0001911a 000191fc     ................
   2199c:	000191fc 000191fc 000191fc 000191fc     ................
   219ac:	000191fc 000191fc 000191fc 000191fc     ................
   219bc:	000191fc 000191fc 000191fc 000191fc     ................
   219cc:	000191fc 000191fc 000190f0 000191c4     ................
   219dc:	000191fc 000190d4 000191fc 000191e0     ................
   219ec:	0001916e 000191a8 000196c6 00019850     n...........P...
   219fc:	00019850 00019850 00019850 00019850     P...P...P...P...
   21a0c:	00019850 00019850 000196a6 00019850     P...P.......P...
   21a1c:	00019850 00019850 00019850 00019850     P...P...P...P...
   21a2c:	00019850 000196f4 00019850 00019850     P.......P...P...
   21a3c:	00019686 00019602 00019850 00019850     ........P...P...
   21a4c:	00019666 0001aa0c 0001a9ee 0001a9a8     f...............
   21a5c:	0001a8c6 0001a9a8 0001a9e0 0001a9a8     ................
   21a6c:	0001a8c6 0001a9ee 0001a9ee 0001a9e0     ................
   21a7c:	0001a8c6 0001a8be 0001a8be 0001a8be     ................
   21a8c:	0001ac24 0001b26c 0001b12c 0001b12c     $...l...,...,...
   21a9c:	0001b128 0001b244 0001b244 0001b236     (...D...D...6...
   21aac:	0001b128 0001b244 0001b236 0001b244     (...D...6...D...
   21abc:	0001b128 0001b24c 0001b24c 0001b24c     (...L...L...L...
   21acc:	0001b450                                P...

00021ad0 <__sf_fake_stderr>:
	...

00021af0 <__sf_fake_stdin>:
	...

00021b10 <__sf_fake_stdout>:
	...

00021b30 <_global_impure_ptr>:
   21b30:	20000230 4f500043 00584953 666e002e     0.. C.POSIX...nf
   21b40:	696e6900 61007974 0000006e              .inity.an...

00021b4c <fpi.6129>:
   21b4c:	00000035 fffffbce 000003cb 00000001     5...............
   21b5c:	00000000                                ....

00021b60 <fpinan.6165>:
   21b60:	00000034 fffffbce 000003cb 00000001     4...............
	...

00021b78 <tinytens>:
   21b78:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   21b88:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   21b98:	64ac6f43 11680628                       Co.d(.h.

00021ba0 <_ctype_>:
   21ba0:	20202000 20202020 28282020 20282828     .         ((((( 
   21bb0:	20202020 20202020 20202020 20202020                     
   21bc0:	10108820 10101010 10101010 10101010      ...............
   21bd0:	04040410 04040404 10040404 10101010     ................
   21be0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   21bf0:	01010101 01010101 01010101 10101010     ................
   21c00:	42421010 42424242 02020202 02020202     ..BBBBBB........
   21c10:	02020202 02020202 02020202 10101010     ................
   21c20:	00000020 00000000 00000000 00000000      ...............
	...

00021ca8 <__mprec_bigtens>:
   21ca8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   21cb8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   21cc8:	7f73bf3c 75154fdd                       <.s..O.u

00021cd0 <__mprec_tens>:
   21cd0:	00000000 3ff00000 00000000 40240000     .......?......$@
   21ce0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   21cf0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   21d00:	00000000 412e8480 00000000 416312d0     .......A......cA
   21d10:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   21d20:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   21d30:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   21d40:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   21d50:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   21d60:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   21d70:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   21d80:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   21d90:	79d99db4 44ea7843                       ...yCx.D

00021d98 <p05.6047>:
   21d98:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   21da8:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
   21db8:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
   21dc8:	35343332 39383736 64636261 00006665     23456789abcdef..
   21dd8:	00021df6 00021df9 00021dfc 61462d41     ............A-Fa
   21de8:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
   21df8:	00303000 00005878                       .00.xX..

00021e00 <_init>:
   21e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e02:	46c0      	nop			; (mov r8, r8)
   21e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   21e06:	bc08      	pop	{r3}
   21e08:	469e      	mov	lr, r3
   21e0a:	4770      	bx	lr

00021e0c <__init_array_start>:
   21e0c:	000000dd 	.word	0x000000dd

00021e10 <_fini>:
   21e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e12:	46c0      	nop			; (mov r8, r8)
   21e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   21e16:	bc08      	pop	{r3}
   21e18:	469e      	mov	lr, r3
   21e1a:	4770      	bx	lr

00021e1c <__fini_array_start>:
   21e1c:	000000b5 	.word	0x000000b5
