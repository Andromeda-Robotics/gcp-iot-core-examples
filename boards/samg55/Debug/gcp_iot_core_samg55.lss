
gcp_iot_core_samg55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000178c0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004178c0  004178c0  000278c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c48  20000000  004178c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002430  20000c48  00418510  00030c48  2**2
                  ALLOC
  4 .stack        00003000  20003078  0041a940  00030c48  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00030c48  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030c76  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007a4e2  00000000  00000000  00030ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f01f  00000000  00000000  000ab1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0002a205  00000000  00000000  000ba1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002688  00000000  00000000  000e43d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002a68  00000000  00000000  000e6a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002ee64  00000000  00000000  000e94c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003c6e1  00000000  00000000  00118329  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006d9a4  00000000  00000000  00154a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00008698  00000000  00000000  001c23b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 60 00 20 c9 67 40 00 c5 67 40 00 c5 67 40 00     x`. .g@..g@..g@.
  400010:	c5 67 40 00 c5 67 40 00 c5 67 40 00 00 00 00 00     .g@..g@..g@.....
	...
  40002c:	c5 67 40 00 c5 67 40 00 00 00 00 00 c5 67 40 00     .g@..g@......g@.
  40003c:	c5 67 40 00 c5 67 40 00 c5 67 40 00 c5 67 40 00     .g@..g@..g@..g@.
  40004c:	c5 67 40 00 c5 67 40 00 c5 67 40 00 c5 67 40 00     .g@..g@..g@..g@.
  40005c:	c5 67 40 00 c5 67 40 00 c5 67 40 00 00 00 00 00     .g@..g@..g@.....
  40006c:	e9 45 40 00 fd 45 40 00 c5 67 40 00 c5 67 40 00     .E@..E@..g@..g@.
  40007c:	c5 67 40 00 c5 67 40 00 c5 67 40 00 c5 67 40 00     .g@..g@..g@..g@.
  40008c:	c5 67 40 00 c5 67 40 00 c5 67 40 00 c5 67 40 00     .g@..g@..g@..g@.
  40009c:	19 a3 40 00 c5 67 40 00 c5 67 40 00 c5 67 40 00     ..@..g@..g@..g@.
  4000ac:	c5 67 40 00 c5 67 40 00 c5 67 40 00 c5 67 40 00     .g@..g@..g@..g@.
	...
  4000fc:	c5 67 40 00 05 55 40 00 c5 67 40 00 00 00 00 00     .g@..U@..g@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000c48 	.word	0x20000c48
  400164:	00000000 	.word	0x00000000
  400168:	004178c8 	.word	0x004178c8

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	004178c8 	.word	0x004178c8
  4001a8:	20000c4c 	.word	0x20000c4c
  4001ac:	004178c8 	.word	0x004178c8
  4001b0:	00000000 	.word	0x00000000

004001b4 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4001b4:	280b      	cmp	r0, #11
  4001b6:	d000      	beq.n	4001ba <chip_isr+0x6>
  4001b8:	4770      	bx	lr
  4001ba:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  4001be:	d1fb      	bne.n	4001b8 <chip_isr+0x4>
{
  4001c0:	b508      	push	{r3, lr}
		if (gpfIsr) {
  4001c2:	4b02      	ldr	r3, [pc, #8]	; (4001cc <chip_isr+0x18>)
  4001c4:	681b      	ldr	r3, [r3, #0]
  4001c6:	b103      	cbz	r3, 4001ca <chip_isr+0x16>
			gpfIsr();
  4001c8:	4798      	blx	r3
  4001ca:	bd08      	pop	{r3, pc}
  4001cc:	20000c64 	.word	0x20000c64

004001d0 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001d0:	b158      	cbz	r0, 4001ea <nm_bsp_sleep+0x1a>
{
  4001d2:	b570      	push	{r4, r5, r6, lr}
  4001d4:	1e44      	subs	r4, r0, #1
		delay_ms(1);
  4001d6:	f242 167c 	movw	r6, #8572	; 0x217c
  4001da:	4d04      	ldr	r5, [pc, #16]	; (4001ec <nm_bsp_sleep+0x1c>)
  4001dc:	4630      	mov	r0, r6
  4001de:	47a8      	blx	r5
	while(u32TimeMsec--) {
  4001e0:	3c01      	subs	r4, #1
  4001e2:	f1b4 3fff 	cmp.w	r4, #4294967295
  4001e6:	d1f9      	bne.n	4001dc <nm_bsp_sleep+0xc>
  4001e8:	bd70      	pop	{r4, r5, r6, pc}
  4001ea:	4770      	bx	lr
  4001ec:	20000001 	.word	0x20000001

004001f0 <nm_bsp_reset>:
{
  4001f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001f2:	4c07      	ldr	r4, [pc, #28]	; (400210 <nm_bsp_reset+0x20>)
  4001f4:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
  4001f8:	6367      	str	r7, [r4, #52]	; 0x34
  4001fa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  4001fe:	6365      	str	r5, [r4, #52]	; 0x34
	nm_bsp_sleep(1);
  400200:	2001      	movs	r0, #1
  400202:	4e04      	ldr	r6, [pc, #16]	; (400214 <nm_bsp_reset+0x24>)
  400204:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400206:	6327      	str	r7, [r4, #48]	; 0x30
	nm_bsp_sleep(10);
  400208:	200a      	movs	r0, #10
  40020a:	47b0      	blx	r6
  40020c:	6325      	str	r5, [r4, #48]	; 0x30
  40020e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400210:	400e0e00 	.word	0x400e0e00
  400214:	004001d1 	.word	0x004001d1

00400218 <nm_bsp_init>:
{
  400218:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  40021a:	2200      	movs	r2, #0
  40021c:	4b0f      	ldr	r3, [pc, #60]	; (40025c <nm_bsp_init+0x44>)
  40021e:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400220:	200b      	movs	r0, #11
  400222:	4c0f      	ldr	r4, [pc, #60]	; (400260 <nm_bsp_init+0x48>)
  400224:	47a0      	blx	r4
  400226:	200c      	movs	r0, #12
  400228:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40022a:	4b0e      	ldr	r3, [pc, #56]	; (400264 <nm_bsp_init+0x4c>)
  40022c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400230:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400232:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400236:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400238:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40023c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40023e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400242:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400244:	4b08      	ldr	r3, [pc, #32]	; (400268 <nm_bsp_init+0x50>)
  400246:	681b      	ldr	r3, [r3, #0]
  400248:	f013 0f01 	tst.w	r3, #1
  40024c:	bf1c      	itt	ne
  40024e:	4b06      	ldrne	r3, [pc, #24]	; (400268 <nm_bsp_init+0x50>)
  400250:	681b      	ldrne	r3, [r3, #0]
	nm_bsp_reset();
  400252:	4b06      	ldr	r3, [pc, #24]	; (40026c <nm_bsp_init+0x54>)
  400254:	4798      	blx	r3
}
  400256:	2000      	movs	r0, #0
  400258:	bd10      	pop	{r4, pc}
  40025a:	bf00      	nop
  40025c:	20000c64 	.word	0x20000c64
  400260:	00404771 	.word	0x00404771
  400264:	400e0e00 	.word	0x400e0e00
  400268:	e000e010 	.word	0xe000e010
  40026c:	004001f1 	.word	0x004001f1

00400270 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400270:	b530      	push	{r4, r5, lr}
  400272:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400274:	4b16      	ldr	r3, [pc, #88]	; (4002d0 <nm_bsp_register_isr+0x60>)
  400276:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  400278:	200b      	movs	r0, #11
  40027a:	4b16      	ldr	r3, [pc, #88]	; (4002d4 <nm_bsp_register_isr+0x64>)
  40027c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40027e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400282:	2018      	movs	r0, #24
  400284:	4b14      	ldr	r3, [pc, #80]	; (4002d8 <nm_bsp_register_isr+0x68>)
  400286:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  400288:	4c14      	ldr	r4, [pc, #80]	; (4002dc <nm_bsp_register_isr+0x6c>)
  40028a:	2201      	movs	r2, #1
  40028c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  400290:	4620      	mov	r0, r4
  400292:	4b13      	ldr	r3, [pc, #76]	; (4002e0 <nm_bsp_register_isr+0x70>)
  400294:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  400296:	4b13      	ldr	r3, [pc, #76]	; (4002e4 <nm_bsp_register_isr+0x74>)
  400298:	9300      	str	r3, [sp, #0]
  40029a:	2351      	movs	r3, #81	; 0x51
  40029c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4002a0:	210b      	movs	r1, #11
  4002a2:	4620      	mov	r0, r4
  4002a4:	4d10      	ldr	r5, [pc, #64]	; (4002e8 <nm_bsp_register_isr+0x78>)
  4002a6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  4002a8:	4620      	mov	r0, r4
  4002aa:	4b10      	ldr	r3, [pc, #64]	; (4002ec <nm_bsp_register_isr+0x7c>)
  4002ac:	4798      	blx	r3
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4002ae:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  4002b2:	4620      	mov	r0, r4
  4002b4:	4b0e      	ldr	r3, [pc, #56]	; (4002f0 <nm_bsp_register_isr+0x80>)
  4002b6:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002bc:	4b0d      	ldr	r3, [pc, #52]	; (4002f4 <nm_bsp_register_isr+0x84>)
  4002be:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4002c0:	2200      	movs	r2, #0
  4002c2:	210b      	movs	r1, #11
  4002c4:	4620      	mov	r0, r4
  4002c6:	4b0c      	ldr	r3, [pc, #48]	; (4002f8 <nm_bsp_register_isr+0x88>)
  4002c8:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4002ca:	b003      	add	sp, #12
  4002cc:	bd30      	pop	{r4, r5, pc}
  4002ce:	bf00      	nop
  4002d0:	20000c64 	.word	0x20000c64
  4002d4:	00404771 	.word	0x00404771
  4002d8:	00404459 	.word	0x00404459
  4002dc:	400e0e00 	.word	0x400e0e00
  4002e0:	00404359 	.word	0x00404359
  4002e4:	004001b5 	.word	0x004001b5
  4002e8:	00404579 	.word	0x00404579
  4002ec:	00404451 	.word	0x00404451
  4002f0:	00404449 	.word	0x00404449
  4002f4:	e000e100 	.word	0xe000e100
  4002f8:	00404611 	.word	0x00404611

004002fc <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4002fc:	b510      	push	{r4, lr}
	if (u8Enable) {
  4002fe:	b928      	cbnz	r0, 40030c <nm_bsp_interrupt_ctrl+0x10>
		pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400300:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  400304:	4806      	ldr	r0, [pc, #24]	; (400320 <nm_bsp_interrupt_ctrl+0x24>)
  400306:	4b07      	ldr	r3, [pc, #28]	; (400324 <nm_bsp_interrupt_ctrl+0x28>)
  400308:	4798      	blx	r3
  40030a:	bd10      	pop	{r4, pc}
		pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  40030c:	4c04      	ldr	r4, [pc, #16]	; (400320 <nm_bsp_interrupt_ctrl+0x24>)
  40030e:	4620      	mov	r0, r4
  400310:	4b05      	ldr	r3, [pc, #20]	; (400328 <nm_bsp_interrupt_ctrl+0x2c>)
  400312:	4798      	blx	r3
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400314:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  400318:	4620      	mov	r0, r4
  40031a:	4b04      	ldr	r3, [pc, #16]	; (40032c <nm_bsp_interrupt_ctrl+0x30>)
  40031c:	4798      	blx	r3
  40031e:	bd10      	pop	{r4, pc}
  400320:	400e0e00 	.word	0x400e0e00
  400324:	0040444d 	.word	0x0040444d
  400328:	00404451 	.word	0x00404451
  40032c:	00404449 	.word	0x00404449

00400330 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  400330:	b538      	push	{r3, r4, r5, lr}
		base->PIO_PUDR = mask;
  400332:	4b4f      	ldr	r3, [pc, #316]	; (400470 <nm_bus_init+0x140>)
  400334:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  400338:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40033a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40033e:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400340:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400342:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400348:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40034c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40034e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400354:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  400356:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  40035a:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40035c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400360:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400362:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400364:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400368:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40036a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40036e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400370:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400376:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  400378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40037c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40037e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400382:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400384:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400386:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40038a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40038c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  400390:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400392:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400394:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  400398:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  40039a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40039e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003a6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003ac:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4003ae:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003b2:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b4:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4003b6:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003ba:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003bc:	605c      	str	r4, [r3, #4]
  4003be:	6058      	str	r0, [r3, #4]
  4003c0:	6059      	str	r1, [r3, #4]
  4003c2:	605a      	str	r2, [r3, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);

	/* Get the PIO instance used for CS. */
	p_pio_cs = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (CONF_WINC_SPI_CS_GPIO >> 5)));
  4003c4:	492b      	ldr	r1, [pc, #172]	; (400474 <nm_bus_init+0x144>)
  4003c6:	600b      	str	r3, [r1, #0]
	SPI_DEASSERT_CS();
  4003c8:	631a      	str	r2, [r3, #48]	; 0x30
 *
 * \return 1 if the SPI is enabled, otherwise 0.
 */
static inline uint32_t spi_is_enabled(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  4003ca:	4b2b      	ldr	r3, [pc, #172]	; (400478 <nm_bus_init+0x148>)
  4003cc:	691b      	ldr	r3, [r3, #16]

	/* Configure SPI module. */
	if (!spi_is_enabled(CONF_WINC_SPI)) {
  4003ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4003d2:	d043      	beq.n	40045c <nm_bus_init+0x12c>
		flexcom_enable(FLEXCOM5);
		flexcom_set_opmode(FLEXCOM5, FLEXCOM_SPI);
	}

	spi_enable_clock(CONF_WINC_SPI);
  4003d4:	4c28      	ldr	r4, [pc, #160]	; (400478 <nm_bus_init+0x148>)
  4003d6:	4620      	mov	r0, r4
  4003d8:	4b28      	ldr	r3, [pc, #160]	; (40047c <nm_bus_init+0x14c>)
  4003da:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4003dc:	2302      	movs	r3, #2
  4003de:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003e0:	2380      	movs	r3, #128	; 0x80
  4003e2:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003e4:	6863      	ldr	r3, [r4, #4]
  4003e6:	f043 0301 	orr.w	r3, r3, #1
  4003ea:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003ec:	6863      	ldr	r3, [r4, #4]
  4003ee:	f043 0310 	orr.w	r3, r3, #16
  4003f2:	6063      	str	r3, [r4, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4003f4:	2100      	movs	r1, #0
  4003f6:	4620      	mov	r0, r4
  4003f8:	4b21      	ldr	r3, [pc, #132]	; (400480 <nm_bus_init+0x150>)
  4003fa:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4003fc:	2200      	movs	r2, #0
  4003fe:	4611      	mov	r1, r2
  400400:	4620      	mov	r0, r4
  400402:	4b20      	ldr	r3, [pc, #128]	; (400484 <nm_bus_init+0x154>)
  400404:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  400406:	2201      	movs	r2, #1
  400408:	2100      	movs	r1, #0
  40040a:	4620      	mov	r0, r4
  40040c:	4b1e      	ldr	r3, [pc, #120]	; (400488 <nm_bus_init+0x158>)
  40040e:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  400410:	2200      	movs	r2, #0
  400412:	4611      	mov	r1, r2
  400414:	4620      	mov	r0, r4
  400416:	4b1d      	ldr	r3, [pc, #116]	; (40048c <nm_bus_init+0x15c>)
  400418:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  40041a:	491d      	ldr	r1, [pc, #116]	; (400490 <nm_bus_init+0x160>)
  40041c:	481d      	ldr	r0, [pc, #116]	; (400494 <nm_bus_init+0x164>)
  40041e:	4b1e      	ldr	r3, [pc, #120]	; (400498 <nm_bus_init+0x168>)
  400420:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  400422:	b2c2      	uxtb	r2, r0
  400424:	2100      	movs	r1, #0
  400426:	4620      	mov	r0, r4
  400428:	4b1c      	ldr	r3, [pc, #112]	; (40049c <nm_bus_init+0x16c>)
  40042a:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  40042c:	2300      	movs	r3, #0
  40042e:	461a      	mov	r2, r3
  400430:	4619      	mov	r1, r3
  400432:	4620      	mov	r0, r4
  400434:	4d1a      	ldr	r5, [pc, #104]	; (4004a0 <nm_bus_init+0x170>)
  400436:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400438:	2301      	movs	r3, #1
  40043a:	6023      	str	r3, [r4, #0]
 *
 * \return PDC registers base for PDC driver to access.
 */
static inline Pdc *spi_get_pdc_base(Spi *p_spi)
{
	return (Pdc *)&(p_spi->SPI_RPR);
  40043c:	4819      	ldr	r0, [pc, #100]	; (4004a4 <nm_bus_init+0x174>)
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);

	/* Get pointer to SPI master PDC register base. */
	g_p_pdc_spi = spi_get_pdc_base(CONF_WINC_SPI);
  40043e:	4b1a      	ldr	r3, [pc, #104]	; (4004a8 <nm_bus_init+0x178>)
  400440:	6018      	str	r0, [r3, #0]
	pdc_disable_transfer(g_p_pdc_spi, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  400442:	f240 2102 	movw	r1, #514	; 0x202
  400446:	4b19      	ldr	r3, [pc, #100]	; (4004ac <nm_bus_init+0x17c>)
  400448:	4798      	blx	r3

	nm_bsp_reset();
  40044a:	4b19      	ldr	r3, [pc, #100]	; (4004b0 <nm_bus_init+0x180>)
  40044c:	4798      	blx	r3
	SPI_DEASSERT_CS();
  40044e:	4b09      	ldr	r3, [pc, #36]	; (400474 <nm_bus_init+0x144>)
  400450:	681b      	ldr	r3, [r3, #0]
  400452:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400456:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	return result;
}
  400458:	2000      	movs	r0, #0
  40045a:	bd38      	pop	{r3, r4, r5, pc}
		flexcom_enable(FLEXCOM5);
  40045c:	4c15      	ldr	r4, [pc, #84]	; (4004b4 <nm_bus_init+0x184>)
  40045e:	4620      	mov	r0, r4
  400460:	4b15      	ldr	r3, [pc, #84]	; (4004b8 <nm_bus_init+0x188>)
  400462:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM5, FLEXCOM_SPI);
  400464:	2102      	movs	r1, #2
  400466:	4620      	mov	r0, r4
  400468:	4b14      	ldr	r3, [pc, #80]	; (4004bc <nm_bus_init+0x18c>)
  40046a:	4798      	blx	r3
  40046c:	e7b2      	b.n	4003d4 <nm_bus_init+0xa4>
  40046e:	bf00      	nop
  400470:	400e0e00 	.word	0x400e0e00
  400474:	20002f14 	.word	0x20002f14
  400478:	40008400 	.word	0x40008400
  40047c:	00404b29 	.word	0x00404b29
  400480:	00404bc1 	.word	0x00404bc1
  400484:	00404bd7 	.word	0x00404bd7
  400488:	00404bf5 	.word	0x00404bf5
  40048c:	00404c13 	.word	0x00404c13
  400490:	07270000 	.word	0x07270000
  400494:	0243d580 	.word	0x0243d580
  400498:	00404c27 	.word	0x00404c27
  40049c:	00404c3d 	.word	0x00404c3d
  4004a0:	00404c65 	.word	0x00404c65
  4004a4:	40008500 	.word	0x40008500
  4004a8:	20000c68 	.word	0x20000c68
  4004ac:	00404349 	.word	0x00404349
  4004b0:	004001f1 	.word	0x004001f1
  4004b4:	40008000 	.word	0x40008000
  4004b8:	00404169 	.word	0x00404169
  4004bc:	004042f5 	.word	0x004042f5

004004c0 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4004c0:	b510      	push	{r4, lr}
  4004c2:	b084      	sub	sp, #16
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4004c4:	2803      	cmp	r0, #3
  4004c6:	d13e      	bne.n	400546 <nm_bus_ioctl+0x86>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4004c8:	6808      	ldr	r0, [r1, #0]
  4004ca:	684a      	ldr	r2, [r1, #4]
  4004cc:	890b      	ldrh	r3, [r1, #8]
	if(((pu8Miso == NULL)&& (pu8Mosi == NULL)) ||(u16Sz == 0)) {
  4004ce:	2a00      	cmp	r2, #0
  4004d0:	d027      	beq.n	400522 <nm_bus_ioctl+0x62>
  4004d2:	2b00      	cmp	r3, #0
  4004d4:	d034      	beq.n	400540 <nm_bus_ioctl+0x80>
	pdc_spi_tx_packet.ul_addr = (uint32_t)pu8Mosi;;
  4004d6:	9000      	str	r0, [sp, #0]
	pdc_spi_rx_packet.ul_addr = (uint32_t)pu8Miso;
  4004d8:	9202      	str	r2, [sp, #8]
	pdc_spi_tx_packet.ul_size = u16Sz;
  4004da:	9301      	str	r3, [sp, #4]
	pdc_spi_rx_packet.ul_size = u16Sz;
  4004dc:	9303      	str	r3, [sp, #12]
	pdc_tx_init(g_p_pdc_spi, &pdc_spi_tx_packet, NULL);
  4004de:	4c20      	ldr	r4, [pc, #128]	; (400560 <nm_bus_ioctl+0xa0>)
  4004e0:	2200      	movs	r2, #0
  4004e2:	4669      	mov	r1, sp
  4004e4:	6820      	ldr	r0, [r4, #0]
  4004e6:	4b1f      	ldr	r3, [pc, #124]	; (400564 <nm_bus_ioctl+0xa4>)
  4004e8:	4798      	blx	r3
	pdc_rx_init(g_p_pdc_spi, &pdc_spi_rx_packet, NULL);
  4004ea:	2200      	movs	r2, #0
  4004ec:	a902      	add	r1, sp, #8
  4004ee:	6820      	ldr	r0, [r4, #0]
  4004f0:	4b1d      	ldr	r3, [pc, #116]	; (400568 <nm_bus_ioctl+0xa8>)
  4004f2:	4798      	blx	r3
	SPI_ASSERT_CS();
  4004f4:	4b1d      	ldr	r3, [pc, #116]	; (40056c <nm_bus_ioctl+0xac>)
  4004f6:	6818      	ldr	r0, [r3, #0]
  4004f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004fc:	6343      	str	r3, [r0, #52]	; 0x34
	g_p_pdc_spi->PERIPH_PTCR = PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN;
  4004fe:	6821      	ldr	r1, [r4, #0]
  400500:	f240 1301 	movw	r3, #257	; 0x101
  400504:	620b      	str	r3, [r1, #32]
	while ((CONF_WINC_SPI->SPI_SR & SPI_SR_RXBUFF) == 0)
  400506:	4a1a      	ldr	r2, [pc, #104]	; (400570 <nm_bus_ioctl+0xb0>)
  400508:	6913      	ldr	r3, [r2, #16]
  40050a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40050e:	d0fb      	beq.n	400508 <nm_bus_ioctl+0x48>
	SPI_DEASSERT_CS();
  400510:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400514:	6303      	str	r3, [r0, #48]	; 0x30
	g_p_pdc_spi->PERIPH_PTCR = PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS;
  400516:	f240 2302 	movw	r3, #514	; 0x202
  40051a:	620b      	str	r3, [r1, #32]
	return M2M_SUCCESS;
  40051c:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  40051e:	b004      	add	sp, #16
  400520:	bd10      	pop	{r4, pc}
	if(((pu8Miso == NULL)&& (pu8Mosi == NULL)) ||(u16Sz == 0)) {
  400522:	b138      	cbz	r0, 400534 <nm_bus_ioctl+0x74>
  400524:	b14b      	cbz	r3, 40053a <nm_bus_ioctl+0x7a>
	pdc_spi_tx_packet.ul_addr = (uint32_t)pu8Mosi;;
  400526:	9000      	str	r0, [sp, #0]
	pdc_spi_tx_packet.ul_size = u16Sz;
  400528:	9301      	str	r3, [sp, #4]
	pdc_spi_rx_packet.ul_size = u16Sz;
  40052a:	9303      	str	r3, [sp, #12]
		pdc_spi_rx_packet.ul_addr = (uint32_t)0x400000;
  40052c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400530:	9302      	str	r3, [sp, #8]
  400532:	e7d4      	b.n	4004de <nm_bus_ioctl+0x1e>
		return M2M_ERR_INVALID_ARG;
  400534:	f06f 000e 	mvn.w	r0, #14
  400538:	e7f1      	b.n	40051e <nm_bus_ioctl+0x5e>
  40053a:	f06f 000e 	mvn.w	r0, #14
  40053e:	e7ee      	b.n	40051e <nm_bus_ioctl+0x5e>
  400540:	f06f 000e 	mvn.w	r0, #14
		break;
  400544:	e7eb      	b.n	40051e <nm_bus_ioctl+0x5e>
			M2M_ERR("Invalid IOCTL command!\n");
  400546:	22df      	movs	r2, #223	; 0xdf
  400548:	490a      	ldr	r1, [pc, #40]	; (400574 <nm_bus_ioctl+0xb4>)
  40054a:	480b      	ldr	r0, [pc, #44]	; (400578 <nm_bus_ioctl+0xb8>)
  40054c:	4c0b      	ldr	r4, [pc, #44]	; (40057c <nm_bus_ioctl+0xbc>)
  40054e:	47a0      	blx	r4
  400550:	480b      	ldr	r0, [pc, #44]	; (400580 <nm_bus_ioctl+0xc0>)
  400552:	47a0      	blx	r4
  400554:	480b      	ldr	r0, [pc, #44]	; (400584 <nm_bus_ioctl+0xc4>)
  400556:	47a0      	blx	r4
			s8Ret = -1;
  400558:	f04f 30ff 	mov.w	r0, #4294967295
	return s8Ret;
  40055c:	e7df      	b.n	40051e <nm_bus_ioctl+0x5e>
  40055e:	bf00      	nop
  400560:	20000c68 	.word	0x20000c68
  400564:	00404319 	.word	0x00404319
  400568:	00404331 	.word	0x00404331
  40056c:	20002f14 	.word	0x20002f14
  400570:	40008400 	.word	0x40008400
  400574:	00415cac 	.word	0x00415cac
  400578:	00415cbc 	.word	0x00415cbc
  40057c:	0040d42d 	.word	0x0040d42d
  400580:	00415cd0 	.word	0x00415cd0
  400584:	00415ce8 	.word	0x00415ce8

00400588 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400588:	2202      	movs	r2, #2
  40058a:	4b0e      	ldr	r3, [pc, #56]	; (4005c4 <nm_bus_deinit+0x3c>)
  40058c:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40058e:	f503 2358 	add.w	r3, r3, #884736	; 0xd8000
  400592:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
  400596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40059a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40059c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4005a4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4005ae:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4005b8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
  4005be:	2000      	movs	r0, #0
  4005c0:	4770      	bx	lr
  4005c2:	bf00      	nop
  4005c4:	40008400 	.word	0x40008400

004005c8 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4005c8:	b13a      	cbz	r2, 4005da <m2m_memcpy+0x12>
  4005ca:	3901      	subs	r1, #1
  4005cc:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4005ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4005d2:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  4005d6:	4290      	cmp	r0, r2
  4005d8:	d1f9      	bne.n	4005ce <m2m_memcpy+0x6>
  4005da:	4770      	bx	lr

004005dc <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  4005dc:	b122      	cbz	r2, 4005e8 <m2m_memset+0xc>
  4005de:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  4005e0:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  4005e4:	4290      	cmp	r0, r2
  4005e6:	d1fb      	bne.n	4005e0 <m2m_memset+0x4>
  4005e8:	4770      	bx	lr

004005ea <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  4005ea:	7803      	ldrb	r3, [r0, #0]
  4005ec:	b143      	cbz	r3, 400600 <m2m_strlen+0x16>
  4005ee:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  4005f0:	3301      	adds	r3, #1
  4005f2:	b29b      	uxth	r3, r3
	while(*pcStr)
  4005f4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4005f8:	2a00      	cmp	r2, #0
  4005fa:	d1f9      	bne.n	4005f0 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  4005fc:	4618      	mov	r0, r3
  4005fe:	4770      	bx	lr
	uint16	u16StrLen = 0;
  400600:	2300      	movs	r3, #0
  400602:	e7fb      	b.n	4005fc <m2m_strlen+0x12>

00400604 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
  400604:	4a02      	ldr	r2, [pc, #8]	; (400610 <isr+0xc>)
  400606:	78d3      	ldrb	r3, [r2, #3]
  400608:	3301      	adds	r3, #1
  40060a:	b2db      	uxtb	r3, r3
  40060c:	70d3      	strb	r3, [r2, #3]
  40060e:	4770      	bx	lr
  400610:	20002f18 	.word	0x20002f18

00400614 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400614:	4770      	bx	lr
	...

00400618 <hif_set_rx_done>:
{
  400618:	b500      	push	{lr}
  40061a:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
  40061c:	2200      	movs	r2, #0
  40061e:	4b0d      	ldr	r3, [pc, #52]	; (400654 <hif_set_rx_done+0x3c>)
  400620:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
  400622:	2001      	movs	r0, #1
  400624:	4b0c      	ldr	r3, [pc, #48]	; (400658 <hif_set_rx_done+0x40>)
  400626:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400628:	a901      	add	r1, sp, #4
  40062a:	f241 0070 	movw	r0, #4208	; 0x1070
  40062e:	4b0b      	ldr	r3, [pc, #44]	; (40065c <hif_set_rx_done+0x44>)
  400630:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400632:	4603      	mov	r3, r0
  400634:	b118      	cbz	r0, 40063e <hif_set_rx_done+0x26>
}
  400636:	4618      	mov	r0, r3
  400638:	b003      	add	sp, #12
  40063a:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= NBIT1;
  40063e:	9901      	ldr	r1, [sp, #4]
  400640:	f041 0102 	orr.w	r1, r1, #2
  400644:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400646:	f241 0070 	movw	r0, #4208	; 0x1070
  40064a:	4b05      	ldr	r3, [pc, #20]	; (400660 <hif_set_rx_done+0x48>)
  40064c:	4798      	blx	r3
  40064e:	4603      	mov	r3, r0
  400650:	e7f1      	b.n	400636 <hif_set_rx_done+0x1e>
  400652:	bf00      	nop
  400654:	20002f18 	.word	0x20002f18
  400658:	004002fd 	.word	0x004002fd
  40065c:	00401b81 	.word	0x00401b81
  400660:	00401b8d 	.word	0x00401b8d

00400664 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  400664:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
  400666:	4b0c      	ldr	r3, [pc, #48]	; (400698 <hif_chip_wake+0x34>)
  400668:	789b      	ldrb	r3, [r3, #2]
  40066a:	b99b      	cbnz	r3, 400694 <hif_chip_wake+0x30>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
	}
	if(gstrHifCxt.u8ChipSleep == 0)
  40066c:	4b0a      	ldr	r3, [pc, #40]	; (400698 <hif_chip_wake+0x34>)
  40066e:	785b      	ldrb	r3, [r3, #1]
  400670:	b913      	cbnz	r3, 400678 <hif_chip_wake+0x14>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
  400672:	4b09      	ldr	r3, [pc, #36]	; (400698 <hif_chip_wake+0x34>)
  400674:	781b      	ldrb	r3, [r3, #0]
  400676:	b93b      	cbnz	r3, 400688 <hif_chip_wake+0x24>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
  400678:	4a07      	ldr	r2, [pc, #28]	; (400698 <hif_chip_wake+0x34>)
  40067a:	7853      	ldrb	r3, [r2, #1]
  40067c:	3301      	adds	r3, #1
  40067e:	b2db      	uxtb	r3, r3
  400680:	7053      	strb	r3, [r2, #1]
  400682:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  400684:	4618      	mov	r0, r3
  400686:	bd08      	pop	{r3, pc}
			ret = chip_wake();
  400688:	4b04      	ldr	r3, [pc, #16]	; (40069c <hif_chip_wake+0x38>)
  40068a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40068c:	4603      	mov	r3, r0
  40068e:	2800      	cmp	r0, #0
  400690:	d0f2      	beq.n	400678 <hif_chip_wake+0x14>
  400692:	e7f7      	b.n	400684 <hif_chip_wake+0x20>
		return ret;
  400694:	2300      	movs	r3, #0
  400696:	e7f5      	b.n	400684 <hif_chip_wake+0x20>
  400698:	20002f18 	.word	0x20002f18
  40069c:	004017f9 	.word	0x004017f9

004006a0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
  4006a0:	4b04      	ldr	r3, [pc, #16]	; (4006b4 <hif_chip_sleep_sc+0x14>)
  4006a2:	785b      	ldrb	r3, [r3, #1]
  4006a4:	b123      	cbz	r3, 4006b0 <hif_chip_sleep_sc+0x10>
	{
		gstrHifCxt.u8ChipSleep--;
  4006a6:	4a03      	ldr	r2, [pc, #12]	; (4006b4 <hif_chip_sleep_sc+0x14>)
  4006a8:	7853      	ldrb	r3, [r2, #1]
  4006aa:	3b01      	subs	r3, #1
  4006ac:	b2db      	uxtb	r3, r3
  4006ae:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
  4006b0:	2000      	movs	r0, #0
  4006b2:	4770      	bx	lr
  4006b4:	20002f18 	.word	0x20002f18

004006b8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  4006b8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
  4006ba:	4b0a      	ldr	r3, [pc, #40]	; (4006e4 <hif_chip_sleep+0x2c>)
  4006bc:	785b      	ldrb	r3, [r3, #1]
  4006be:	b123      	cbz	r3, 4006ca <hif_chip_sleep+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
  4006c0:	4a08      	ldr	r2, [pc, #32]	; (4006e4 <hif_chip_sleep+0x2c>)
  4006c2:	7853      	ldrb	r3, [r2, #1]
  4006c4:	3b01      	subs	r3, #1
  4006c6:	b2db      	uxtb	r3, r3
  4006c8:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
  4006ca:	4b06      	ldr	r3, [pc, #24]	; (4006e4 <hif_chip_sleep+0x2c>)
  4006cc:	785b      	ldrb	r3, [r3, #1]
  4006ce:	b93b      	cbnz	r3, 4006e0 <hif_chip_sleep+0x28>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
  4006d0:	4b04      	ldr	r3, [pc, #16]	; (4006e4 <hif_chip_sleep+0x2c>)
  4006d2:	781b      	ldrb	r3, [r3, #0]
  4006d4:	b90b      	cbnz	r3, 4006da <hif_chip_sleep+0x22>
	sint8 ret = M2M_SUCCESS;
  4006d6:	2000      	movs	r0, #0
		{
		}
	}
ERR1:
	return ret;
}
  4006d8:	bd08      	pop	{r3, pc}
			ret = chip_sleep();
  4006da:	4b03      	ldr	r3, [pc, #12]	; (4006e8 <hif_chip_sleep+0x30>)
  4006dc:	4798      	blx	r3
  4006de:	bd08      	pop	{r3, pc}
	sint8 ret = M2M_SUCCESS;
  4006e0:	2000      	movs	r0, #0
  4006e2:	bd08      	pop	{r3, pc}
  4006e4:	20002f18 	.word	0x20002f18
  4006e8:	00401789 	.word	0x00401789

004006ec <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4006ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006f0:	b087      	sub	sp, #28
  4006f2:	4606      	mov	r6, r0
  4006f4:	4689      	mov	r9, r1
  4006f6:	4690      	mov	r8, r2
  4006f8:	461f      	mov	r7, r3
  4006fa:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
  4006fe:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  400702:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  400706:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  40070a:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  40070e:	2308      	movs	r3, #8
  400710:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  400714:	9b10      	ldr	r3, [sp, #64]	; 0x40
  400716:	2b00      	cmp	r3, #0
  400718:	d045      	beq.n	4007a6 <hif_send+0xba>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  40071a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40071e:	fa15 f383 	uxtah	r3, r5, r3
  400722:	4423      	add	r3, r4
  400724:	b29b      	uxth	r3, r3
  400726:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  40072a:	4b6b      	ldr	r3, [pc, #428]	; (4008d8 <hif_send+0x1ec>)
  40072c:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  40072e:	4682      	mov	sl, r0
  400730:	2800      	cmp	r0, #0
  400732:	f040 80c6 	bne.w	4008c2 <hif_send+0x1d6>
	{
		volatile uint32 reg, dma_addr = 0;
  400736:	2300      	movs	r3, #0
  400738:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  40073a:	f8ad 3006 	strh.w	r3, [sp, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
  40073e:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  400740:	9b02      	ldr	r3, [sp, #8]
  400742:	431e      	orrs	r6, r3
  400744:	9602      	str	r6, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400746:	9b02      	ldr	r3, [sp, #8]
  400748:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
  40074c:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  40074e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400752:	9b02      	ldr	r3, [sp, #8]
  400754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400758:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40075a:	9902      	ldr	r1, [sp, #8]
  40075c:	f241 008c 	movw	r0, #4236	; 0x108c
  400760:	4b5e      	ldr	r3, [pc, #376]	; (4008dc <hif_send+0x1f0>)
  400762:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400764:	4682      	mov	sl, r0
  400766:	2800      	cmp	r0, #0
  400768:	d159      	bne.n	40081e <hif_send+0x132>

		reg = 0UL;
  40076a:	2300      	movs	r3, #0
  40076c:	9302      	str	r3, [sp, #8]
		reg |= NBIT1;
  40076e:	9b02      	ldr	r3, [sp, #8]
  400770:	f043 0302 	orr.w	r3, r3, #2
  400774:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400776:	9902      	ldr	r1, [sp, #8]
  400778:	f241 0078 	movw	r0, #4216	; 0x1078
  40077c:	4b57      	ldr	r3, [pc, #348]	; (4008dc <hif_send+0x1f0>)
  40077e:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400780:	4682      	mov	sl, r0
  400782:	2800      	cmp	r0, #0
  400784:	d14b      	bne.n	40081e <hif_send+0x132>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
  400786:	2300      	movs	r3, #0
  400788:	9303      	str	r3, [sp, #12]
		
		for(cnt = 0; cnt < 1000; cnt ++)
  40078a:	f8ad 3006 	strh.w	r3, [sp, #6]
  40078e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400792:	b29b      	uxth	r3, r3
  400794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400798:	d247      	bcs.n	40082a <hif_send+0x13e>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  40079a:	4e51      	ldr	r6, [pc, #324]	; (4008e0 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
  40079c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 40090c <hif_send+0x220>
					M2M_INFO("Slowing down...\n");
  4007a0:	f8df b16c 	ldr.w	fp, [pc, #364]	; 400910 <hif_send+0x224>
  4007a4:	e019      	b.n	4007da <hif_send+0xee>
		strHif.u16Length += u16CtrlBufSize;
  4007a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4007aa:	fa17 f383 	uxtah	r3, r7, r3
  4007ae:	b29b      	uxth	r3, r3
  4007b0:	f8ad 3016 	strh.w	r3, [sp, #22]
  4007b4:	e7b9      	b.n	40072a <hif_send+0x3e>
				nm_bsp_sleep(1);
  4007b6:	2001      	movs	r0, #1
  4007b8:	47c8      	blx	r9
			}
			if (!(reg & NBIT1))
  4007ba:	9b02      	ldr	r3, [sp, #8]
  4007bc:	f013 0f02 	tst.w	r3, #2
  4007c0:	d025      	beq.n	40080e <hif_send+0x122>
		for(cnt = 0; cnt < 1000; cnt ++)
  4007c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007c6:	3301      	adds	r3, #1
  4007c8:	b29b      	uxth	r3, r3
  4007ca:	f8ad 3006 	strh.w	r3, [sp, #6]
  4007ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007d2:	b29b      	uxth	r3, r3
  4007d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4007d8:	d227      	bcs.n	40082a <hif_send+0x13e>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  4007da:	a902      	add	r1, sp, #8
  4007dc:	f241 0078 	movw	r0, #4216	; 0x1078
  4007e0:	47b0      	blx	r6
			if(ret != M2M_SUCCESS) break;
  4007e2:	bb10      	cbnz	r0, 40082a <hif_send+0x13e>
			if(cnt >= 500) {
  4007e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007e8:	b29b      	uxth	r3, r3
  4007ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4007ee:	d3e4      	bcc.n	4007ba <hif_send+0xce>
				if(cnt < 501) {
  4007f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007f4:	b29b      	uxth	r3, r3
  4007f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4007fa:	d8dc      	bhi.n	4007b6 <hif_send+0xca>
					M2M_INFO("Slowing down...\n");
  4007fc:	4658      	mov	r0, fp
  4007fe:	f8df a104 	ldr.w	sl, [pc, #260]	; 400904 <hif_send+0x218>
  400802:	47d0      	blx	sl
  400804:	4837      	ldr	r0, [pc, #220]	; (4008e4 <hif_send+0x1f8>)
  400806:	47d0      	blx	sl
  400808:	4837      	ldr	r0, [pc, #220]	; (4008e8 <hif_send+0x1fc>)
  40080a:	47d0      	blx	sl
  40080c:	e7d3      	b.n	4007b6 <hif_send+0xca>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
  40080e:	a903      	add	r1, sp, #12
  400810:	4836      	ldr	r0, [pc, #216]	; (4008ec <hif_send+0x200>)
  400812:	4b33      	ldr	r3, [pc, #204]	; (4008e0 <hif_send+0x1f4>)
  400814:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  400816:	4682      	mov	sl, r0
  400818:	b138      	cbz	r0, 40082a <hif_send+0x13e>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
  40081a:	2300      	movs	r3, #0
  40081c:	9303      	str	r3, [sp, #12]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
  40081e:	4b34      	ldr	r3, [pc, #208]	; (4008f0 <hif_send+0x204>)
  400820:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
  400822:	4650      	mov	r0, sl
  400824:	b007      	add	sp, #28
  400826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dma_addr != 0)
  40082a:	9b03      	ldr	r3, [sp, #12]
  40082c:	2b00      	cmp	r3, #0
  40082e:	d043      	beq.n	4008b8 <hif_send+0x1cc>
			u32CurrAddr = dma_addr;
  400830:	9b03      	ldr	r3, [sp, #12]
  400832:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  400834:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400838:	b29b      	uxth	r3, r3
  40083a:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  40083e:	9804      	ldr	r0, [sp, #16]
  400840:	2208      	movs	r2, #8
  400842:	a905      	add	r1, sp, #20
  400844:	4b2b      	ldr	r3, [pc, #172]	; (4008f4 <hif_send+0x208>)
  400846:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400848:	4682      	mov	sl, r0
  40084a:	2800      	cmp	r0, #0
  40084c:	d1e7      	bne.n	40081e <hif_send+0x132>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  40084e:	9b04      	ldr	r3, [sp, #16]
  400850:	3308      	adds	r3, #8
  400852:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  400854:	f1b8 0f00 	cmp.w	r8, #0
  400858:	d00a      	beq.n	400870 <hif_send+0x184>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  40085a:	9804      	ldr	r0, [sp, #16]
  40085c:	463a      	mov	r2, r7
  40085e:	4641      	mov	r1, r8
  400860:	4b24      	ldr	r3, [pc, #144]	; (4008f4 <hif_send+0x208>)
  400862:	4798      	blx	r3
				if(M2M_SUCCESS != ret) goto ERR1;
  400864:	4682      	mov	sl, r0
  400866:	2800      	cmp	r0, #0
  400868:	d1d9      	bne.n	40081e <hif_send+0x132>
				u32CurrAddr += u16CtrlBufSize;
  40086a:	9b04      	ldr	r3, [sp, #16]
  40086c:	443b      	add	r3, r7
  40086e:	9304      	str	r3, [sp, #16]
			if(pu8DataBuf != NULL)
  400870:	9b10      	ldr	r3, [sp, #64]	; 0x40
  400872:	b173      	cbz	r3, 400892 <hif_send+0x1a6>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  400874:	9b04      	ldr	r3, [sp, #16]
  400876:	1be4      	subs	r4, r4, r7
  400878:	441c      	add	r4, r3
  40087a:	9404      	str	r4, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  40087c:	9804      	ldr	r0, [sp, #16]
  40087e:	462a      	mov	r2, r5
  400880:	9910      	ldr	r1, [sp, #64]	; 0x40
  400882:	4b1c      	ldr	r3, [pc, #112]	; (4008f4 <hif_send+0x208>)
  400884:	4798      	blx	r3
				if(M2M_SUCCESS != ret) goto ERR1;
  400886:	4682      	mov	sl, r0
  400888:	2800      	cmp	r0, #0
  40088a:	d1c8      	bne.n	40081e <hif_send+0x132>
				u32CurrAddr += u16DataSize;
  40088c:	9b04      	ldr	r3, [sp, #16]
  40088e:	441d      	add	r5, r3
  400890:	9504      	str	r5, [sp, #16]
			reg = dma_addr << 2;
  400892:	9b03      	ldr	r3, [sp, #12]
  400894:	009b      	lsls	r3, r3, #2
  400896:	9302      	str	r3, [sp, #8]
			reg |= NBIT1;
  400898:	9b02      	ldr	r3, [sp, #8]
  40089a:	f043 0302 	orr.w	r3, r3, #2
  40089e:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4008a0:	9902      	ldr	r1, [sp, #8]
  4008a2:	f241 006c 	movw	r0, #4204	; 0x106c
  4008a6:	4b0d      	ldr	r3, [pc, #52]	; (4008dc <hif_send+0x1f0>)
  4008a8:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4008aa:	4682      	mov	sl, r0
  4008ac:	2800      	cmp	r0, #0
  4008ae:	d1b6      	bne.n	40081e <hif_send+0x132>
 	ret = hif_chip_sleep();
  4008b0:	4b11      	ldr	r3, [pc, #68]	; (4008f8 <hif_send+0x20c>)
  4008b2:	4798      	blx	r3
  4008b4:	4682      	mov	sl, r0
	return ret;
  4008b6:	e7b4      	b.n	400822 <hif_send+0x136>
			ret = hif_chip_sleep();
  4008b8:	4b0f      	ldr	r3, [pc, #60]	; (4008f8 <hif_send+0x20c>)
  4008ba:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
  4008bc:	f06f 0a02 	mvn.w	sl, #2
			goto ERR2;
  4008c0:	e7af      	b.n	400822 <hif_send+0x136>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  4008c2:	f44f 72cb 	mov.w	r2, #406	; 0x196
  4008c6:	490d      	ldr	r1, [pc, #52]	; (4008fc <hif_send+0x210>)
  4008c8:	480d      	ldr	r0, [pc, #52]	; (400900 <hif_send+0x214>)
  4008ca:	4c0e      	ldr	r4, [pc, #56]	; (400904 <hif_send+0x218>)
  4008cc:	47a0      	blx	r4
  4008ce:	480e      	ldr	r0, [pc, #56]	; (400908 <hif_send+0x21c>)
  4008d0:	47a0      	blx	r4
  4008d2:	4805      	ldr	r0, [pc, #20]	; (4008e8 <hif_send+0x1fc>)
  4008d4:	47a0      	blx	r4
		goto ERR2;
  4008d6:	e7a4      	b.n	400822 <hif_send+0x136>
  4008d8:	00400665 	.word	0x00400665
  4008dc:	00401b8d 	.word	0x00401b8d
  4008e0:	00401b81 	.word	0x00401b81
  4008e4:	00415fe8 	.word	0x00415fe8
  4008e8:	00415ce8 	.word	0x00415ce8
  4008ec:	00150400 	.word	0x00150400
  4008f0:	004006a1 	.word	0x004006a1
  4008f4:	00401bf5 	.word	0x00401bf5
  4008f8:	004006b9 	.word	0x004006b9
  4008fc:	00415cec 	.word	0x00415cec
  400900:	00415cbc 	.word	0x00415cbc
  400904:	0040d42d 	.word	0x0040d42d
  400908:	00415ffc 	.word	0x00415ffc
  40090c:	004001d1 	.word	0x004001d1
  400910:	00415fdc 	.word	0x00415fdc

00400914 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  400914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400918:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
  40091a:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 400bf8 <hif_handle_isr+0x2e4>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  40091e:	4fa4      	ldr	r7, [pc, #656]	; (400bb0 <hif_handle_isr+0x29c>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400920:	4ea4      	ldr	r6, [pc, #656]	; (400bb4 <hif_handle_isr+0x2a0>)
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400922:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 400bfc <hif_handle_isr+0x2e8>
	while (gstrHifCxt.u8Interrupt) {
  400926:	e084      	b.n	400a32 <hif_handle_isr+0x11e>
				gstrHifCxt.u32RxAddr = address;
  400928:	9805      	ldr	r0, [sp, #20]
  40092a:	f8c8 0004 	str.w	r0, [r8, #4]
				gstrHifCxt.u32RxSize = size;
  40092e:	f8c8 4008 	str.w	r4, [r8, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  400932:	2204      	movs	r2, #4
  400934:	a904      	add	r1, sp, #16
  400936:	4ba0      	ldr	r3, [pc, #640]	; (400bb8 <hif_handle_isr+0x2a4>)
  400938:	4798      	blx	r3
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  40093a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40093e:	b29b      	uxth	r3, r3
  400940:	f8ad 3012 	strh.w	r3, [sp, #18]
				if(M2M_SUCCESS != ret)
  400944:	4605      	mov	r5, r0
  400946:	2800      	cmp	r0, #0
  400948:	d139      	bne.n	4009be <hif_handle_isr+0xaa>
				if(strHif.u16Length != size)
  40094a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40094e:	b29b      	uxth	r3, r3
  400950:	429c      	cmp	r4, r3
  400952:	d005      	beq.n	400960 <hif_handle_isr+0x4c>
					if((size - strHif.u16Length) > 4)
  400954:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400958:	b29b      	uxth	r3, r3
  40095a:	1ae3      	subs	r3, r4, r3
  40095c:	2b04      	cmp	r3, #4
  40095e:	dc3c      	bgt.n	4009da <hif_handle_isr+0xc6>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  400960:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400964:	b2db      	uxtb	r3, r3
  400966:	2b01      	cmp	r3, #1
  400968:	d050      	beq.n	400a0c <hif_handle_isr+0xf8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40096a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40096e:	b2db      	uxtb	r3, r3
  400970:	2b02      	cmp	r3, #2
  400972:	d075      	beq.n	400a60 <hif_handle_isr+0x14c>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  400974:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400978:	b2db      	uxtb	r3, r3
  40097a:	2b04      	cmp	r3, #4
  40097c:	f000 808a 	beq.w	400a94 <hif_handle_isr+0x180>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400980:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400984:	b2db      	uxtb	r3, r3
  400986:	2b06      	cmp	r3, #6
  400988:	f000 809e 	beq.w	400ac8 <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  40098c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400990:	b2db      	uxtb	r3, r3
  400992:	2b07      	cmp	r3, #7
  400994:	f000 80b2 	beq.w	400afc <hif_handle_isr+0x1e8>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
  400998:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40099c:	b2db      	uxtb	r3, r3
  40099e:	2b05      	cmp	r3, #5
  4009a0:	f000 80c6 	beq.w	400b30 <hif_handle_isr+0x21c>
					M2M_ERR("(hif) invalid group ID\n");
  4009a4:	f240 220f 	movw	r2, #527	; 0x20f
  4009a8:	4649      	mov	r1, r9
  4009aa:	4630      	mov	r0, r6
  4009ac:	4c83      	ldr	r4, [pc, #524]	; (400bbc <hif_handle_isr+0x2a8>)
  4009ae:	47a0      	blx	r4
  4009b0:	4883      	ldr	r0, [pc, #524]	; (400bc0 <hif_handle_isr+0x2ac>)
  4009b2:	47a0      	blx	r4
  4009b4:	4883      	ldr	r0, [pc, #524]	; (400bc4 <hif_handle_isr+0x2b0>)
  4009b6:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
  4009b8:	f06f 0505 	mvn.w	r5, #5
  4009bc:	e12a      	b.n	400c14 <hif_handle_isr+0x300>
					M2M_ERR("(hif) address bus fail\n");
  4009be:	f240 12d1 	movw	r2, #465	; 0x1d1
  4009c2:	4649      	mov	r1, r9
  4009c4:	4630      	mov	r0, r6
  4009c6:	4c7d      	ldr	r4, [pc, #500]	; (400bbc <hif_handle_isr+0x2a8>)
  4009c8:	47a0      	blx	r4
  4009ca:	487f      	ldr	r0, [pc, #508]	; (400bc8 <hif_handle_isr+0x2b4>)
  4009cc:	47a0      	blx	r4
  4009ce:	487d      	ldr	r0, [pc, #500]	; (400bc4 <hif_handle_isr+0x2b0>)
  4009d0:	47a0      	blx	r4
					nm_bsp_interrupt_ctrl(1);
  4009d2:	2001      	movs	r0, #1
  4009d4:	4b7d      	ldr	r3, [pc, #500]	; (400bcc <hif_handle_isr+0x2b8>)
  4009d6:	4798      	blx	r3
  4009d8:	e11c      	b.n	400c14 <hif_handle_isr+0x300>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  4009da:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  4009de:	4649      	mov	r1, r9
  4009e0:	4630      	mov	r0, r6
  4009e2:	4d76      	ldr	r5, [pc, #472]	; (400bbc <hif_handle_isr+0x2a8>)
  4009e4:	47a8      	blx	r5
  4009e6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4009ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009ee:	f89d 1011 	ldrb.w	r1, [sp, #17]
  4009f2:	9100      	str	r1, [sp, #0]
  4009f4:	b292      	uxth	r2, r2
  4009f6:	4621      	mov	r1, r4
  4009f8:	4875      	ldr	r0, [pc, #468]	; (400bd0 <hif_handle_isr+0x2bc>)
  4009fa:	47a8      	blx	r5
  4009fc:	4871      	ldr	r0, [pc, #452]	; (400bc4 <hif_handle_isr+0x2b0>)
  4009fe:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400a00:	2001      	movs	r0, #1
  400a02:	4b72      	ldr	r3, [pc, #456]	; (400bcc <hif_handle_isr+0x2b8>)
  400a04:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
  400a06:	f06f 0505 	mvn.w	r5, #5
  400a0a:	e103      	b.n	400c14 <hif_handle_isr+0x300>
					if(gstrHifCxt.pfWifiCb)
  400a0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400a10:	b1db      	cbz	r3, 400a4a <hif_handle_isr+0x136>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400a16:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a1a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a1e:	3908      	subs	r1, #8
  400a20:	9a05      	ldr	r2, [sp, #20]
  400a22:	3208      	adds	r2, #8
  400a24:	b289      	uxth	r1, r1
  400a26:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
  400a28:	f898 3002 	ldrb.w	r3, [r8, #2]
  400a2c:	2b00      	cmp	r3, #0
  400a2e:	f040 8090 	bne.w	400b52 <hif_handle_isr+0x23e>
	while (gstrHifCxt.u8Interrupt) {
  400a32:	f898 3003 	ldrb.w	r3, [r8, #3]
  400a36:	2b00      	cmp	r3, #0
  400a38:	f000 8130 	beq.w	400c9c <hif_handle_isr+0x388>
		gstrHifCxt.u8Interrupt--;
  400a3c:	f898 3003 	ldrb.w	r3, [r8, #3]
  400a40:	3b01      	subs	r3, #1
  400a42:	b2db      	uxtb	r3, r3
  400a44:	f888 3003 	strb.w	r3, [r8, #3]
  400a48:	e0ef      	b.n	400c2a <hif_handle_isr+0x316>
						M2M_ERR("WIFI callback is not registered\n");
  400a4a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
  400a4e:	4649      	mov	r1, r9
  400a50:	4630      	mov	r0, r6
  400a52:	4c5a      	ldr	r4, [pc, #360]	; (400bbc <hif_handle_isr+0x2a8>)
  400a54:	47a0      	blx	r4
  400a56:	485f      	ldr	r0, [pc, #380]	; (400bd4 <hif_handle_isr+0x2c0>)
  400a58:	47a0      	blx	r4
  400a5a:	485a      	ldr	r0, [pc, #360]	; (400bc4 <hif_handle_isr+0x2b0>)
  400a5c:	47a0      	blx	r4
  400a5e:	e7e3      	b.n	400a28 <hif_handle_isr+0x114>
					if(gstrHifCxt.pfIpCb)
  400a60:	f8d8 3010 	ldr.w	r3, [r8, #16]
  400a64:	b15b      	cbz	r3, 400a7e <hif_handle_isr+0x16a>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a66:	f8d8 3010 	ldr.w	r3, [r8, #16]
  400a6a:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a6e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a72:	3908      	subs	r1, #8
  400a74:	9a05      	ldr	r2, [sp, #20]
  400a76:	3208      	adds	r2, #8
  400a78:	b289      	uxth	r1, r1
  400a7a:	4798      	blx	r3
  400a7c:	e7d4      	b.n	400a28 <hif_handle_isr+0x114>
						M2M_ERR("Scoket callback is not registered\n");
  400a7e:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
  400a82:	4649      	mov	r1, r9
  400a84:	4630      	mov	r0, r6
  400a86:	4c4d      	ldr	r4, [pc, #308]	; (400bbc <hif_handle_isr+0x2a8>)
  400a88:	47a0      	blx	r4
  400a8a:	4853      	ldr	r0, [pc, #332]	; (400bd8 <hif_handle_isr+0x2c4>)
  400a8c:	47a0      	blx	r4
  400a8e:	484d      	ldr	r0, [pc, #308]	; (400bc4 <hif_handle_isr+0x2b0>)
  400a90:	47a0      	blx	r4
  400a92:	e7c9      	b.n	400a28 <hif_handle_isr+0x114>
					if(gstrHifCxt.pfOtaCb)
  400a94:	f8d8 3014 	ldr.w	r3, [r8, #20]
  400a98:	b15b      	cbz	r3, 400ab2 <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a9a:	f8d8 3014 	ldr.w	r3, [r8, #20]
  400a9e:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400aa2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400aa6:	3908      	subs	r1, #8
  400aa8:	9a05      	ldr	r2, [sp, #20]
  400aaa:	3208      	adds	r2, #8
  400aac:	b289      	uxth	r1, r1
  400aae:	4798      	blx	r3
  400ab0:	e7ba      	b.n	400a28 <hif_handle_isr+0x114>
						M2M_ERR("Ota callback is not registered\n");
  400ab2:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
  400ab6:	4649      	mov	r1, r9
  400ab8:	4630      	mov	r0, r6
  400aba:	4c40      	ldr	r4, [pc, #256]	; (400bbc <hif_handle_isr+0x2a8>)
  400abc:	47a0      	blx	r4
  400abe:	4847      	ldr	r0, [pc, #284]	; (400bdc <hif_handle_isr+0x2c8>)
  400ac0:	47a0      	blx	r4
  400ac2:	4840      	ldr	r0, [pc, #256]	; (400bc4 <hif_handle_isr+0x2b0>)
  400ac4:	47a0      	blx	r4
  400ac6:	e7af      	b.n	400a28 <hif_handle_isr+0x114>
					if(gstrHifCxt.pfCryptoCb)
  400ac8:	f8d8 3020 	ldr.w	r3, [r8, #32]
  400acc:	b15b      	cbz	r3, 400ae6 <hif_handle_isr+0x1d2>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400ace:	f8d8 3020 	ldr.w	r3, [r8, #32]
  400ad2:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400ad6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400ada:	3908      	subs	r1, #8
  400adc:	9a05      	ldr	r2, [sp, #20]
  400ade:	3208      	adds	r2, #8
  400ae0:	b289      	uxth	r1, r1
  400ae2:	4798      	blx	r3
  400ae4:	e7a0      	b.n	400a28 <hif_handle_isr+0x114>
						M2M_ERR("Crypto callback is not registered\n");
  400ae6:	f240 12ff 	movw	r2, #511	; 0x1ff
  400aea:	4649      	mov	r1, r9
  400aec:	4630      	mov	r0, r6
  400aee:	4c33      	ldr	r4, [pc, #204]	; (400bbc <hif_handle_isr+0x2a8>)
  400af0:	47a0      	blx	r4
  400af2:	483b      	ldr	r0, [pc, #236]	; (400be0 <hif_handle_isr+0x2cc>)
  400af4:	47a0      	blx	r4
  400af6:	4833      	ldr	r0, [pc, #204]	; (400bc4 <hif_handle_isr+0x2b0>)
  400af8:	47a0      	blx	r4
  400afa:	e795      	b.n	400a28 <hif_handle_isr+0x114>
					if(gstrHifCxt.pfSigmaCb)
  400afc:	f8d8 3018 	ldr.w	r3, [r8, #24]
  400b00:	b15b      	cbz	r3, 400b1a <hif_handle_isr+0x206>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400b02:	f8d8 3018 	ldr.w	r3, [r8, #24]
  400b06:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400b0a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400b0e:	3908      	subs	r1, #8
  400b10:	9a05      	ldr	r2, [sp, #20]
  400b12:	3208      	adds	r2, #8
  400b14:	b289      	uxth	r1, r1
  400b16:	4798      	blx	r3
  400b18:	e786      	b.n	400a28 <hif_handle_isr+0x114>
						M2M_ERR("Sigma callback is not registered\n");
  400b1a:	f240 2206 	movw	r2, #518	; 0x206
  400b1e:	4649      	mov	r1, r9
  400b20:	4630      	mov	r0, r6
  400b22:	4c26      	ldr	r4, [pc, #152]	; (400bbc <hif_handle_isr+0x2a8>)
  400b24:	47a0      	blx	r4
  400b26:	482f      	ldr	r0, [pc, #188]	; (400be4 <hif_handle_isr+0x2d0>)
  400b28:	47a0      	blx	r4
  400b2a:	4826      	ldr	r0, [pc, #152]	; (400bc4 <hif_handle_isr+0x2b0>)
  400b2c:	47a0      	blx	r4
  400b2e:	e77b      	b.n	400a28 <hif_handle_isr+0x114>
				    if(gstrHifCxt.pfSslCb)
  400b30:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  400b34:	2b00      	cmp	r3, #0
  400b36:	f43f af77 	beq.w	400a28 <hif_handle_isr+0x114>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400b3a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  400b3e:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400b42:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400b46:	3908      	subs	r1, #8
  400b48:	9a05      	ldr	r2, [sp, #20]
  400b4a:	3208      	adds	r2, #8
  400b4c:	b289      	uxth	r1, r1
  400b4e:	4798      	blx	r3
  400b50:	e76a      	b.n	400a28 <hif_handle_isr+0x114>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
  400b52:	f240 2215 	movw	r2, #533	; 0x215
  400b56:	4649      	mov	r1, r9
  400b58:	4630      	mov	r0, r6
  400b5a:	4c18      	ldr	r4, [pc, #96]	; (400bbc <hif_handle_isr+0x2a8>)
  400b5c:	47a0      	blx	r4
  400b5e:	f89d 1010 	ldrb.w	r1, [sp, #16]
  400b62:	f89d 2011 	ldrb.w	r2, [sp, #17]
  400b66:	4820      	ldr	r0, [pc, #128]	; (400be8 <hif_handle_isr+0x2d4>)
  400b68:	47a0      	blx	r4
  400b6a:	4816      	ldr	r0, [pc, #88]	; (400bc4 <hif_handle_isr+0x2b0>)
  400b6c:	47a0      	blx	r4
					ret = hif_set_rx_done();
  400b6e:	4b1f      	ldr	r3, [pc, #124]	; (400bec <hif_handle_isr+0x2d8>)
  400b70:	4798      	blx	r3
					if(ret != M2M_SUCCESS) goto ERR1;
  400b72:	4605      	mov	r5, r0
  400b74:	2800      	cmp	r0, #0
  400b76:	d14d      	bne.n	400c14 <hif_handle_isr+0x300>
  400b78:	e75b      	b.n	400a32 <hif_handle_isr+0x11e>
				M2M_ERR("(hif) Wrong Size\n");
  400b7a:	f44f 7207 	mov.w	r2, #540	; 0x21c
  400b7e:	4649      	mov	r1, r9
  400b80:	4630      	mov	r0, r6
  400b82:	4c0e      	ldr	r4, [pc, #56]	; (400bbc <hif_handle_isr+0x2a8>)
  400b84:	47a0      	blx	r4
  400b86:	481a      	ldr	r0, [pc, #104]	; (400bf0 <hif_handle_isr+0x2dc>)
  400b88:	47a0      	blx	r4
  400b8a:	480e      	ldr	r0, [pc, #56]	; (400bc4 <hif_handle_isr+0x2b0>)
  400b8c:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
  400b8e:	f06f 0501 	mvn.w	r5, #1
  400b92:	e03f      	b.n	400c14 <hif_handle_isr+0x300>
			M2M_ERR("(hif) False interrupt %lx",reg);
  400b94:	f44f 7209 	mov.w	r2, #548	; 0x224
  400b98:	4649      	mov	r1, r9
  400b9a:	4630      	mov	r0, r6
  400b9c:	4c07      	ldr	r4, [pc, #28]	; (400bbc <hif_handle_isr+0x2a8>)
  400b9e:	47a0      	blx	r4
  400ba0:	9903      	ldr	r1, [sp, #12]
  400ba2:	4814      	ldr	r0, [pc, #80]	; (400bf4 <hif_handle_isr+0x2e0>)
  400ba4:	47a0      	blx	r4
  400ba6:	4807      	ldr	r0, [pc, #28]	; (400bc4 <hif_handle_isr+0x2b0>)
  400ba8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  400baa:	f06f 050b 	mvn.w	r5, #11
  400bae:	e031      	b.n	400c14 <hif_handle_isr+0x300>
  400bb0:	00401b81 	.word	0x00401b81
  400bb4:	00415cbc 	.word	0x00415cbc
  400bb8:	00401b99 	.word	0x00401b99
  400bbc:	0040d42d 	.word	0x0040d42d
  400bc0:	00415e5c 	.word	0x00415e5c
  400bc4:	00415ce8 	.word	0x00415ce8
  400bc8:	00415d54 	.word	0x00415d54
  400bcc:	004002fd 	.word	0x004002fd
  400bd0:	00415d6c 	.word	0x00415d6c
  400bd4:	00415dac 	.word	0x00415dac
  400bd8:	00415dd0 	.word	0x00415dd0
  400bdc:	00415df4 	.word	0x00415df4
  400be0:	00415e14 	.word	0x00415e14
  400be4:	00415e38 	.word	0x00415e38
  400be8:	00415e74 	.word	0x00415e74
  400bec:	00400619 	.word	0x00400619
  400bf0:	00415ea0 	.word	0x00415ea0
  400bf4:	00415eb4 	.word	0x00415eb4
  400bf8:	20002f18 	.word	0x20002f18
  400bfc:	00415cf8 	.word	0x00415cf8
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400c00:	f240 222d 	movw	r2, #557	; 0x22d
  400c04:	4649      	mov	r1, r9
  400c06:	4630      	mov	r0, r6
  400c08:	4c26      	ldr	r4, [pc, #152]	; (400ca4 <hif_handle_isr+0x390>)
  400c0a:	47a0      	blx	r4
  400c0c:	4826      	ldr	r0, [pc, #152]	; (400ca8 <hif_handle_isr+0x394>)
  400c0e:	47a0      	blx	r4
  400c10:	4826      	ldr	r0, [pc, #152]	; (400cac <hif_handle_isr+0x398>)
  400c12:	47a0      	blx	r4
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400c14:	f240 224a 	movw	r2, #586	; 0x24a
  400c18:	4925      	ldr	r1, [pc, #148]	; (400cb0 <hif_handle_isr+0x39c>)
  400c1a:	4630      	mov	r0, r6
  400c1c:	4c21      	ldr	r4, [pc, #132]	; (400ca4 <hif_handle_isr+0x390>)
  400c1e:	47a0      	blx	r4
  400c20:	4629      	mov	r1, r5
  400c22:	4824      	ldr	r0, [pc, #144]	; (400cb4 <hif_handle_isr+0x3a0>)
  400c24:	47a0      	blx	r4
  400c26:	4821      	ldr	r0, [pc, #132]	; (400cac <hif_handle_isr+0x398>)
  400c28:	47a0      	blx	r4
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  400c2a:	a903      	add	r1, sp, #12
  400c2c:	f241 0070 	movw	r0, #4208	; 0x1070
  400c30:	47b8      	blx	r7
	if(M2M_SUCCESS == ret)
  400c32:	4605      	mov	r5, r0
  400c34:	2800      	cmp	r0, #0
  400c36:	d1e3      	bne.n	400c00 <hif_handle_isr+0x2ec>
		if(reg & 0x1)	/* New interrupt has been received */
  400c38:	9b03      	ldr	r3, [sp, #12]
  400c3a:	f013 0f01 	tst.w	r3, #1
  400c3e:	d0a9      	beq.n	400b94 <hif_handle_isr+0x280>
			nm_bsp_interrupt_ctrl(0);
  400c40:	4b1d      	ldr	r3, [pc, #116]	; (400cb8 <hif_handle_isr+0x3a4>)
  400c42:	4798      	blx	r3
			reg &= ~NBIT0;
  400c44:	9903      	ldr	r1, [sp, #12]
  400c46:	f021 0101 	bic.w	r1, r1, #1
  400c4a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400c4c:	f241 0070 	movw	r0, #4208	; 0x1070
  400c50:	4b1a      	ldr	r3, [pc, #104]	; (400cbc <hif_handle_isr+0x3a8>)
  400c52:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400c54:	4605      	mov	r5, r0
  400c56:	2800      	cmp	r0, #0
  400c58:	d1dc      	bne.n	400c14 <hif_handle_isr+0x300>
			gstrHifCxt.u8HifRXDone = 1;
  400c5a:	2301      	movs	r3, #1
  400c5c:	f888 3002 	strb.w	r3, [r8, #2]
			size = (uint16)((reg >> 2) & 0xfff);
  400c60:	9c03      	ldr	r4, [sp, #12]
  400c62:	f3c4 048b 	ubfx	r4, r4, #2, #12
			if (size > 0) {
  400c66:	2c00      	cmp	r4, #0
  400c68:	d087      	beq.n	400b7a <hif_handle_isr+0x266>
				uint32 address = 0;
  400c6a:	a906      	add	r1, sp, #24
  400c6c:	2300      	movs	r3, #0
  400c6e:	f841 3d04 	str.w	r3, [r1, #-4]!
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  400c72:	f241 0084 	movw	r0, #4228	; 0x1084
  400c76:	47b8      	blx	r7
				if(M2M_SUCCESS != ret)
  400c78:	4605      	mov	r5, r0
  400c7a:	2800      	cmp	r0, #0
  400c7c:	f43f ae54 	beq.w	400928 <hif_handle_isr+0x14>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  400c80:	f240 12c7 	movw	r2, #455	; 0x1c7
  400c84:	4649      	mov	r1, r9
  400c86:	4630      	mov	r0, r6
  400c88:	4c06      	ldr	r4, [pc, #24]	; (400ca4 <hif_handle_isr+0x390>)
  400c8a:	47a0      	blx	r4
  400c8c:	480c      	ldr	r0, [pc, #48]	; (400cc0 <hif_handle_isr+0x3ac>)
  400c8e:	47a0      	blx	r4
  400c90:	4806      	ldr	r0, [pc, #24]	; (400cac <hif_handle_isr+0x398>)
  400c92:	47a0      	blx	r4
					nm_bsp_interrupt_ctrl(1);
  400c94:	2001      	movs	r0, #1
  400c96:	4b08      	ldr	r3, [pc, #32]	; (400cb8 <hif_handle_isr+0x3a4>)
  400c98:	4798      	blx	r3
  400c9a:	e7bb      	b.n	400c14 <hif_handle_isr+0x300>
			}
		}
	}

	return ret;
}
  400c9c:	2000      	movs	r0, #0
  400c9e:	b007      	add	sp, #28
  400ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400ca4:	0040d42d 	.word	0x0040d42d
  400ca8:	00415ed0 	.word	0x00415ed0
  400cac:	00415ce8 	.word	0x00415ce8
  400cb0:	00415d00 	.word	0x00415d00
  400cb4:	00415ef4 	.word	0x00415ef4
  400cb8:	004002fd 	.word	0x004002fd
  400cbc:	00401b8d 	.word	0x00401b8d
  400cc0:	00415d2c 	.word	0x00415d2c

00400cc4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400cc4:	b570      	push	{r4, r5, r6, lr}
  400cc6:	461d      	mov	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
  400cc8:	b118      	cbz	r0, 400cd2 <hif_receive+0xe>
  400cca:	4614      	mov	r4, r2
  400ccc:	4603      	mov	r3, r0
  400cce:	b101      	cbz	r1, 400cd2 <hif_receive+0xe>
  400cd0:	b992      	cbnz	r2, 400cf8 <hif_receive+0x34>
	{
		if(isDone)
  400cd2:	b125      	cbz	r5, 400cde <hif_receive+0x1a>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
  400cd4:	4b28      	ldr	r3, [pc, #160]	; (400d78 <hif_receive+0xb4>)
  400cd6:	4798      	blx	r3
  400cd8:	4603      	mov	r3, r0
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
  400cda:	4618      	mov	r0, r3
  400cdc:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  400cde:	f240 226b 	movw	r2, #619	; 0x26b
  400ce2:	4926      	ldr	r1, [pc, #152]	; (400d7c <hif_receive+0xb8>)
  400ce4:	4826      	ldr	r0, [pc, #152]	; (400d80 <hif_receive+0xbc>)
  400ce6:	4c27      	ldr	r4, [pc, #156]	; (400d84 <hif_receive+0xc0>)
  400ce8:	47a0      	blx	r4
  400cea:	4827      	ldr	r0, [pc, #156]	; (400d88 <hif_receive+0xc4>)
  400cec:	47a0      	blx	r4
  400cee:	4827      	ldr	r0, [pc, #156]	; (400d8c <hif_receive+0xc8>)
  400cf0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  400cf2:	f06f 030b 	mvn.w	r3, #11
  400cf6:	e7f0      	b.n	400cda <hif_receive+0x16>
	if(u16Sz > gstrHifCxt.u32RxSize)
  400cf8:	4a25      	ldr	r2, [pc, #148]	; (400d90 <hif_receive+0xcc>)
  400cfa:	6892      	ldr	r2, [r2, #8]
  400cfc:	4294      	cmp	r4, r2
  400cfe:	d81d      	bhi.n	400d3c <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
  400d00:	4a23      	ldr	r2, [pc, #140]	; (400d90 <hif_receive+0xcc>)
  400d02:	6852      	ldr	r2, [r2, #4]
  400d04:	4290      	cmp	r0, r2
  400d06:	d329      	bcc.n	400d5c <hif_receive+0x98>
  400d08:	1906      	adds	r6, r0, r4
  400d0a:	4821      	ldr	r0, [pc, #132]	; (400d90 <hif_receive+0xcc>)
  400d0c:	6842      	ldr	r2, [r0, #4]
  400d0e:	6880      	ldr	r0, [r0, #8]
  400d10:	4402      	add	r2, r0
  400d12:	4296      	cmp	r6, r2
  400d14:	d822      	bhi.n	400d5c <hif_receive+0x98>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400d16:	4622      	mov	r2, r4
  400d18:	4618      	mov	r0, r3
  400d1a:	4b1e      	ldr	r3, [pc, #120]	; (400d94 <hif_receive+0xd0>)
  400d1c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400d1e:	4603      	mov	r3, r0
  400d20:	2800      	cmp	r0, #0
  400d22:	d1da      	bne.n	400cda <hif_receive+0x16>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
  400d24:	491a      	ldr	r1, [pc, #104]	; (400d90 <hif_receive+0xcc>)
  400d26:	684a      	ldr	r2, [r1, #4]
  400d28:	6889      	ldr	r1, [r1, #8]
  400d2a:	440a      	add	r2, r1
  400d2c:	4296      	cmp	r6, r2
  400d2e:	d001      	beq.n	400d34 <hif_receive+0x70>
  400d30:	2d00      	cmp	r5, #0
  400d32:	d0d2      	beq.n	400cda <hif_receive+0x16>
		ret = hif_set_rx_done();
  400d34:	4b10      	ldr	r3, [pc, #64]	; (400d78 <hif_receive+0xb4>)
  400d36:	4798      	blx	r3
  400d38:	4603      	mov	r3, r0
  400d3a:	e7ce      	b.n	400cda <hif_receive+0x16>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
  400d3c:	f240 2273 	movw	r2, #627	; 0x273
  400d40:	490e      	ldr	r1, [pc, #56]	; (400d7c <hif_receive+0xb8>)
  400d42:	480f      	ldr	r0, [pc, #60]	; (400d80 <hif_receive+0xbc>)
  400d44:	4d0f      	ldr	r5, [pc, #60]	; (400d84 <hif_receive+0xc0>)
  400d46:	47a8      	blx	r5
  400d48:	4b11      	ldr	r3, [pc, #68]	; (400d90 <hif_receive+0xcc>)
  400d4a:	689a      	ldr	r2, [r3, #8]
  400d4c:	4621      	mov	r1, r4
  400d4e:	4812      	ldr	r0, [pc, #72]	; (400d98 <hif_receive+0xd4>)
  400d50:	47a8      	blx	r5
  400d52:	480e      	ldr	r0, [pc, #56]	; (400d8c <hif_receive+0xc8>)
  400d54:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
  400d56:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  400d5a:	e7be      	b.n	400cda <hif_receive+0x16>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400d5c:	f240 2279 	movw	r2, #633	; 0x279
  400d60:	4906      	ldr	r1, [pc, #24]	; (400d7c <hif_receive+0xb8>)
  400d62:	4807      	ldr	r0, [pc, #28]	; (400d80 <hif_receive+0xbc>)
  400d64:	4c07      	ldr	r4, [pc, #28]	; (400d84 <hif_receive+0xc0>)
  400d66:	47a0      	blx	r4
  400d68:	480c      	ldr	r0, [pc, #48]	; (400d9c <hif_receive+0xd8>)
  400d6a:	47a0      	blx	r4
  400d6c:	4807      	ldr	r0, [pc, #28]	; (400d8c <hif_receive+0xc8>)
  400d6e:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  400d70:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  400d74:	e7b1      	b.n	400cda <hif_receive+0x16>
  400d76:	bf00      	nop
  400d78:	00400619 	.word	0x00400619
  400d7c:	00415d10 	.word	0x00415d10
  400d80:	00415cbc 	.word	0x00415cbc
  400d84:	0040d42d 	.word	0x0040d42d
  400d88:	00415f24 	.word	0x00415f24
  400d8c:	00415ce8 	.word	0x00415ce8
  400d90:	20002f18 	.word	0x20002f18
  400d94:	00401b99 	.word	0x00401b99
  400d98:	00415f44 	.word	0x00415f44
  400d9c:	00415f8c 	.word	0x00415f8c

00400da0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400da0:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400da2:	1e43      	subs	r3, r0, #1
  400da4:	2b06      	cmp	r3, #6
  400da6:	d821      	bhi.n	400dec <hif_register_cb+0x4c>
  400da8:	e8df f003 	tbb	[pc, r3]
  400dac:	0c100408 	.word	0x0c100408
  400db0:	141c      	.short	0x141c
  400db2:	18          	.byte	0x18
  400db3:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
  400db4:	4b15      	ldr	r3, [pc, #84]	; (400e0c <hif_register_cb+0x6c>)
  400db6:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
  400db8:	2000      	movs	r0, #0
			break;
  400dba:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
  400dbc:	4b13      	ldr	r3, [pc, #76]	; (400e0c <hif_register_cb+0x6c>)
  400dbe:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
  400dc0:	2000      	movs	r0, #0
			break;
  400dc2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
  400dc4:	4b11      	ldr	r3, [pc, #68]	; (400e0c <hif_register_cb+0x6c>)
  400dc6:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
  400dc8:	2000      	movs	r0, #0
			break;
  400dca:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
  400dcc:	4b0f      	ldr	r3, [pc, #60]	; (400e0c <hif_register_cb+0x6c>)
  400dce:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
  400dd0:	2000      	movs	r0, #0
			break;
  400dd2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
  400dd4:	4b0d      	ldr	r3, [pc, #52]	; (400e0c <hif_register_cb+0x6c>)
  400dd6:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
  400dd8:	2000      	movs	r0, #0
			break;
  400dda:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
  400ddc:	4b0b      	ldr	r3, [pc, #44]	; (400e0c <hif_register_cb+0x6c>)
  400dde:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
  400de0:	2000      	movs	r0, #0
			break;
  400de2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
  400de4:	4b09      	ldr	r3, [pc, #36]	; (400e0c <hif_register_cb+0x6c>)
  400de6:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
  400de8:	2000      	movs	r0, #0
			break;
  400dea:	bd38      	pop	{r3, r4, r5, pc}
  400dec:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  400dee:	f240 22b1 	movw	r2, #689	; 0x2b1
  400df2:	4907      	ldr	r1, [pc, #28]	; (400e10 <hif_register_cb+0x70>)
  400df4:	4807      	ldr	r0, [pc, #28]	; (400e14 <hif_register_cb+0x74>)
  400df6:	4d08      	ldr	r5, [pc, #32]	; (400e18 <hif_register_cb+0x78>)
  400df8:	47a8      	blx	r5
  400dfa:	4621      	mov	r1, r4
  400dfc:	4807      	ldr	r0, [pc, #28]	; (400e1c <hif_register_cb+0x7c>)
  400dfe:	47a8      	blx	r5
  400e00:	4807      	ldr	r0, [pc, #28]	; (400e20 <hif_register_cb+0x80>)
  400e02:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  400e04:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  400e08:	bd38      	pop	{r3, r4, r5, pc}
  400e0a:	bf00      	nop
  400e0c:	20002f18 	.word	0x20002f18
  400e10:	00415d1c 	.word	0x00415d1c
  400e14:	00415cbc 	.word	0x00415cbc
  400e18:	0040d42d 	.word	0x0040d42d
  400e1c:	00415fd0 	.word	0x00415fd0
  400e20:	00415ce8 	.word	0x00415ce8

00400e24 <hif_init>:
{
  400e24:	b508      	push	{r3, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
  400e26:	2228      	movs	r2, #40	; 0x28
  400e28:	2100      	movs	r1, #0
  400e2a:	4806      	ldr	r0, [pc, #24]	; (400e44 <hif_init+0x20>)
  400e2c:	4b06      	ldr	r3, [pc, #24]	; (400e48 <hif_init+0x24>)
  400e2e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
  400e30:	4806      	ldr	r0, [pc, #24]	; (400e4c <hif_init+0x28>)
  400e32:	4b07      	ldr	r3, [pc, #28]	; (400e50 <hif_init+0x2c>)
  400e34:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400e36:	4907      	ldr	r1, [pc, #28]	; (400e54 <hif_init+0x30>)
  400e38:	2003      	movs	r0, #3
  400e3a:	4b07      	ldr	r3, [pc, #28]	; (400e58 <hif_init+0x34>)
  400e3c:	4798      	blx	r3
}
  400e3e:	2000      	movs	r0, #0
  400e40:	bd08      	pop	{r3, pc}
  400e42:	bf00      	nop
  400e44:	20002f18 	.word	0x20002f18
  400e48:	004005dd 	.word	0x004005dd
  400e4c:	00400605 	.word	0x00400605
  400e50:	00400271 	.word	0x00400271
  400e54:	00400615 	.word	0x00400615
  400e58:	00400da1 	.word	0x00400da1

00400e5c <m2m_periph_pullup_ctrl>:
	return M2M_SUCCESS;
}


sint8 m2m_periph_pullup_ctrl(uint32 pinmask, uint8 enable)
{
  400e5c:	b508      	push	{r3, lr}
	return pullup_ctrl(pinmask, enable);
  400e5e:	4b01      	ldr	r3, [pc, #4]	; (400e64 <m2m_periph_pullup_ctrl+0x8>)
  400e60:	4798      	blx	r3
}
  400e62:	bd08      	pop	{r3, pc}
  400e64:	00401ac9 	.word	0x00401ac9

00400e68 <m2m_ssl_cb>:
				HIF data length.
	@param [in]	u32Addr
				HIF address.
*/
static void m2m_ssl_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400e68:	b530      	push	{r4, r5, lr}
  400e6a:	b09d      	sub	sp, #116	; 0x74
  400e6c:	4614      	mov	r4, r2
	sint8 s8tmp = M2M_SUCCESS;
	switch(u8OpCode)
  400e6e:	2801      	cmp	r0, #1
  400e70:	d005      	beq.n	400e7e <m2m_ssl_cb+0x16>
  400e72:	2806      	cmp	r0, #6
  400e74:	d017      	beq.n	400ea6 <m2m_ssl_cb+0x3e>
	sint8 s8tmp = M2M_SUCCESS;
  400e76:	2500      	movs	r5, #0
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
			}
		}
		break;
	}
	if(s8tmp != M2M_SUCCESS)
  400e78:	bb35      	cbnz	r5, 400ec8 <m2m_ssl_cb+0x60>
	{
		M2M_ERR("Error receiving SSL from the HIF\n");
	}
}
  400e7a:	b01d      	add	sp, #116	; 0x74
  400e7c:	bd30      	pop	{r4, r5, pc}
			s8tmp = hif_receive(u32Addr, (uint8*)&strEccREQ, sizeof(tstrEccReqInfo), 0);
  400e7e:	2300      	movs	r3, #0
  400e80:	2270      	movs	r2, #112	; 0x70
  400e82:	4669      	mov	r1, sp
  400e84:	4620      	mov	r0, r4
  400e86:	4d15      	ldr	r5, [pc, #84]	; (400edc <m2m_ssl_cb+0x74>)
  400e88:	47a8      	blx	r5
			if(s8tmp == M2M_SUCCESS)
  400e8a:	4605      	mov	r5, r0
  400e8c:	2800      	cmp	r0, #0
  400e8e:	d1f3      	bne.n	400e78 <m2m_ssl_cb+0x10>
				if (gpfAppSSLCb)
  400e90:	4b13      	ldr	r3, [pc, #76]	; (400ee0 <m2m_ssl_cb+0x78>)
  400e92:	681b      	ldr	r3, [r3, #0]
  400e94:	2b00      	cmp	r3, #0
  400e96:	d0ef      	beq.n	400e78 <m2m_ssl_cb+0x10>
					gu32HIFAddr = u32Addr + sizeof(tstrEccReqInfo);
  400e98:	3470      	adds	r4, #112	; 0x70
  400e9a:	4a12      	ldr	r2, [pc, #72]	; (400ee4 <m2m_ssl_cb+0x7c>)
  400e9c:	6014      	str	r4, [r2, #0]
					gpfAppSSLCb(M2M_SSL_REQ_ECC, &strEccREQ);
  400e9e:	4669      	mov	r1, sp
  400ea0:	2001      	movs	r0, #1
  400ea2:	4798      	blx	r3
		break;
  400ea4:	e7e8      	b.n	400e78 <m2m_ssl_cb+0x10>
			s8tmp = hif_receive(u32Addr, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), 0);
  400ea6:	2300      	movs	r3, #0
  400ea8:	2204      	movs	r2, #4
  400eaa:	4669      	mov	r1, sp
  400eac:	4620      	mov	r0, r4
  400eae:	4c0b      	ldr	r4, [pc, #44]	; (400edc <m2m_ssl_cb+0x74>)
  400eb0:	47a0      	blx	r4
			if(s8tmp == M2M_SUCCESS)
  400eb2:	4605      	mov	r5, r0
  400eb4:	2800      	cmp	r0, #0
  400eb6:	d1df      	bne.n	400e78 <m2m_ssl_cb+0x10>
				if (gpfAppSSLCb)
  400eb8:	4b09      	ldr	r3, [pc, #36]	; (400ee0 <m2m_ssl_cb+0x78>)
  400eba:	681b      	ldr	r3, [r3, #0]
  400ebc:	2b00      	cmp	r3, #0
  400ebe:	d0db      	beq.n	400e78 <m2m_ssl_cb+0x10>
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
  400ec0:	4669      	mov	r1, sp
  400ec2:	2006      	movs	r0, #6
  400ec4:	4798      	blx	r3
		break;
  400ec6:	e7d7      	b.n	400e78 <m2m_ssl_cb+0x10>
		M2M_ERR("Error receiving SSL from the HIF\n");
  400ec8:	226b      	movs	r2, #107	; 0x6b
  400eca:	4907      	ldr	r1, [pc, #28]	; (400ee8 <m2m_ssl_cb+0x80>)
  400ecc:	4807      	ldr	r0, [pc, #28]	; (400eec <m2m_ssl_cb+0x84>)
  400ece:	4c08      	ldr	r4, [pc, #32]	; (400ef0 <m2m_ssl_cb+0x88>)
  400ed0:	47a0      	blx	r4
  400ed2:	4808      	ldr	r0, [pc, #32]	; (400ef4 <m2m_ssl_cb+0x8c>)
  400ed4:	47a0      	blx	r4
  400ed6:	4808      	ldr	r0, [pc, #32]	; (400ef8 <m2m_ssl_cb+0x90>)
  400ed8:	47a0      	blx	r4
}
  400eda:	e7ce      	b.n	400e7a <m2m_ssl_cb+0x12>
  400edc:	00400cc5 	.word	0x00400cc5
  400ee0:	20000c6c 	.word	0x20000c6c
  400ee4:	20000c70 	.word	0x20000c70
  400ee8:	0041601c 	.word	0x0041601c
  400eec:	00415cbc 	.word	0x00415cbc
  400ef0:	0040d42d 	.word	0x0040d42d
  400ef4:	00416038 	.word	0x00416038
  400ef8:	00415ce8 	.word	0x00415ce8

00400efc <m2m_ssl_set_active_ciphersuites>:
@return		
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
  400efc:	b510      	push	{r4, lr}
  400efe:	b086      	sub	sp, #24
	sint8 s8Ret = M2M_SUCCESS;
	tstrSslSetActiveCsList	strCsList;
	
	strCsList.u32CsBMP = u32SslCsBMP;
  400f00:	aa06      	add	r2, sp, #24
  400f02:	f842 0d04 	str.w	r0, [r2, #-4]!
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
  400f06:	2300      	movs	r3, #0
  400f08:	9302      	str	r3, [sp, #8]
  400f0a:	9301      	str	r3, [sp, #4]
  400f0c:	9300      	str	r3, [sp, #0]
  400f0e:	2304      	movs	r3, #4
  400f10:	2105      	movs	r1, #5
  400f12:	4608      	mov	r0, r1
  400f14:	4c01      	ldr	r4, [pc, #4]	; (400f1c <m2m_ssl_set_active_ciphersuites+0x20>)
  400f16:	47a0      	blx	r4

	return s8Ret;
}
  400f18:	b006      	add	sp, #24
  400f1a:	bd10      	pop	{r4, pc}
  400f1c:	004006ed 	.word	0x004006ed

00400f20 <m2m_ssl_init>:
	@param [in]	pfAppSslCb
	Application SSL callback function.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_init(tpfAppSSLCb pfAppSSLCb)
{
  400f20:	b538      	push	{r3, r4, r5, lr}
	sint8 s8Ret = M2M_SUCCESS;

	gpfAppSSLCb = pfAppSSLCb;
  400f22:	4b0c      	ldr	r3, [pc, #48]	; (400f54 <m2m_ssl_init+0x34>)
  400f24:	6018      	str	r0, [r3, #0]
	gu32HIFAddr = 0;
  400f26:	2200      	movs	r2, #0
  400f28:	4b0b      	ldr	r3, [pc, #44]	; (400f58 <m2m_ssl_init+0x38>)
  400f2a:	601a      	str	r2, [r3, #0]

	s8Ret = hif_register_cb(M2M_REQ_GROUP_SSL,m2m_ssl_cb);
  400f2c:	490b      	ldr	r1, [pc, #44]	; (400f5c <m2m_ssl_init+0x3c>)
  400f2e:	2005      	movs	r0, #5
  400f30:	4b0b      	ldr	r3, [pc, #44]	; (400f60 <m2m_ssl_init+0x40>)
  400f32:	4798      	blx	r3
	if (s8Ret != M2M_SUCCESS)
  400f34:	4604      	mov	r4, r0
  400f36:	b908      	cbnz	r0, 400f3c <m2m_ssl_init+0x1c>
	{
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
	}
	return s8Ret;
  400f38:	4620      	mov	r0, r4
  400f3a:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
  400f3c:	f240 122f 	movw	r2, #303	; 0x12f
  400f40:	4908      	ldr	r1, [pc, #32]	; (400f64 <m2m_ssl_init+0x44>)
  400f42:	4809      	ldr	r0, [pc, #36]	; (400f68 <m2m_ssl_init+0x48>)
  400f44:	4d09      	ldr	r5, [pc, #36]	; (400f6c <m2m_ssl_init+0x4c>)
  400f46:	47a8      	blx	r5
  400f48:	4621      	mov	r1, r4
  400f4a:	4809      	ldr	r0, [pc, #36]	; (400f70 <m2m_ssl_init+0x50>)
  400f4c:	47a8      	blx	r5
  400f4e:	4809      	ldr	r0, [pc, #36]	; (400f74 <m2m_ssl_init+0x54>)
  400f50:	47a8      	blx	r5
  400f52:	e7f1      	b.n	400f38 <m2m_ssl_init+0x18>
  400f54:	20000c6c 	.word	0x20000c6c
  400f58:	20000c70 	.word	0x20000c70
  400f5c:	00400e69 	.word	0x00400e69
  400f60:	00400da1 	.word	0x00400da1
  400f64:	00416028 	.word	0x00416028
  400f68:	00415cbc 	.word	0x00415cbc
  400f6c:	0040d42d 	.word	0x0040d42d
  400f70:	0041605c 	.word	0x0041605c
  400f74:	00415ce8 	.word	0x00415ce8

00400f78 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400f78:	b530      	push	{r4, r5, lr}
  400f7a:	b09f      	sub	sp, #124	; 0x7c
  400f7c:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  400f7e:	282c      	cmp	r0, #44	; 0x2c
  400f80:	d02e      	beq.n	400fe0 <m2m_wifi_cb+0x68>
  400f82:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  400f84:	281b      	cmp	r0, #27
  400f86:	d03b      	beq.n	401000 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  400f88:	2806      	cmp	r0, #6
  400f8a:	d049      	beq.n	401020 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  400f8c:	280e      	cmp	r0, #14
  400f8e:	d025      	beq.n	400fdc <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  400f90:	2832      	cmp	r0, #50	; 0x32
  400f92:	d055      	beq.n	401040 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  400f94:	282f      	cmp	r0, #47	; 0x2f
  400f96:	d063      	beq.n	401060 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  400f98:	2834      	cmp	r0, #52	; 0x34
  400f9a:	d076      	beq.n	40108a <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  400f9c:	2811      	cmp	r0, #17
  400f9e:	f000 8093 	beq.w	4010c8 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  400fa2:	2813      	cmp	r0, #19
  400fa4:	f000 80a8 	beq.w	4010f8 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  400fa8:	2804      	cmp	r0, #4
  400faa:	f000 80b7 	beq.w	40111c <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  400fae:	2865      	cmp	r0, #101	; 0x65
  400fb0:	f000 80c6 	beq.w	401140 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  400fb4:	2809      	cmp	r0, #9
  400fb6:	f000 80d5 	beq.w	401164 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  400fba:	282a      	cmp	r0, #42	; 0x2a
  400fbc:	f000 80e4 	beq.w	401188 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  400fc0:	2820      	cmp	r0, #32
  400fc2:	f000 80f3 	beq.w	4011ac <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  400fc6:	f44f 7295 	mov.w	r2, #298	; 0x12a
  400fca:	4986      	ldr	r1, [pc, #536]	; (4011e4 <m2m_wifi_cb+0x26c>)
  400fcc:	4886      	ldr	r0, [pc, #536]	; (4011e8 <m2m_wifi_cb+0x270>)
  400fce:	4d87      	ldr	r5, [pc, #540]	; (4011ec <m2m_wifi_cb+0x274>)
  400fd0:	47a8      	blx	r5
  400fd2:	4621      	mov	r1, r4
  400fd4:	4886      	ldr	r0, [pc, #536]	; (4011f0 <m2m_wifi_cb+0x278>)
  400fd6:	47a8      	blx	r5
  400fd8:	4886      	ldr	r0, [pc, #536]	; (4011f4 <m2m_wifi_cb+0x27c>)
  400fda:	47a8      	blx	r5
	}
}
  400fdc:	b01f      	add	sp, #124	; 0x7c
  400fde:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  400fe0:	2300      	movs	r3, #0
  400fe2:	2204      	movs	r2, #4
  400fe4:	a903      	add	r1, sp, #12
  400fe6:	4628      	mov	r0, r5
  400fe8:	4c83      	ldr	r4, [pc, #524]	; (4011f8 <m2m_wifi_cb+0x280>)
  400fea:	47a0      	blx	r4
  400fec:	2800      	cmp	r0, #0
  400fee:	d1f5      	bne.n	400fdc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  400ff0:	4b82      	ldr	r3, [pc, #520]	; (4011fc <m2m_wifi_cb+0x284>)
  400ff2:	681b      	ldr	r3, [r3, #0]
  400ff4:	2b00      	cmp	r3, #0
  400ff6:	d0f1      	beq.n	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  400ff8:	a903      	add	r1, sp, #12
  400ffa:	202c      	movs	r0, #44	; 0x2c
  400ffc:	4798      	blx	r3
  400ffe:	e7ed      	b.n	400fdc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401000:	2300      	movs	r3, #0
  401002:	2208      	movs	r2, #8
  401004:	a903      	add	r1, sp, #12
  401006:	4628      	mov	r0, r5
  401008:	4c7b      	ldr	r4, [pc, #492]	; (4011f8 <m2m_wifi_cb+0x280>)
  40100a:	47a0      	blx	r4
  40100c:	2800      	cmp	r0, #0
  40100e:	d1e5      	bne.n	400fdc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401010:	4b7a      	ldr	r3, [pc, #488]	; (4011fc <m2m_wifi_cb+0x284>)
  401012:	681b      	ldr	r3, [r3, #0]
  401014:	2b00      	cmp	r3, #0
  401016:	d0e1      	beq.n	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401018:	a903      	add	r1, sp, #12
  40101a:	201b      	movs	r0, #27
  40101c:	4798      	blx	r3
  40101e:	e7dd      	b.n	400fdc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  401020:	2301      	movs	r3, #1
  401022:	2230      	movs	r2, #48	; 0x30
  401024:	a903      	add	r1, sp, #12
  401026:	4628      	mov	r0, r5
  401028:	4c73      	ldr	r4, [pc, #460]	; (4011f8 <m2m_wifi_cb+0x280>)
  40102a:	47a0      	blx	r4
  40102c:	2800      	cmp	r0, #0
  40102e:	d1d5      	bne.n	400fdc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  401030:	4b72      	ldr	r3, [pc, #456]	; (4011fc <m2m_wifi_cb+0x284>)
  401032:	681b      	ldr	r3, [r3, #0]
  401034:	2b00      	cmp	r3, #0
  401036:	d0d1      	beq.n	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  401038:	a903      	add	r1, sp, #12
  40103a:	2006      	movs	r0, #6
  40103c:	4798      	blx	r3
  40103e:	e7cd      	b.n	400fdc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  401040:	2300      	movs	r3, #0
  401042:	2214      	movs	r2, #20
  401044:	a903      	add	r1, sp, #12
  401046:	4628      	mov	r0, r5
  401048:	4c6b      	ldr	r4, [pc, #428]	; (4011f8 <m2m_wifi_cb+0x280>)
  40104a:	47a0      	blx	r4
  40104c:	2800      	cmp	r0, #0
  40104e:	d1c5      	bne.n	400fdc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401050:	4b6a      	ldr	r3, [pc, #424]	; (4011fc <m2m_wifi_cb+0x284>)
  401052:	681b      	ldr	r3, [r3, #0]
  401054:	2b00      	cmp	r3, #0
  401056:	d0c1      	beq.n	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  401058:	a903      	add	r1, sp, #12
  40105a:	2032      	movs	r0, #50	; 0x32
  40105c:	4798      	blx	r3
  40105e:	e7bd      	b.n	400fdc <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  401060:	2264      	movs	r2, #100	; 0x64
  401062:	2100      	movs	r1, #0
  401064:	a803      	add	r0, sp, #12
  401066:	4b66      	ldr	r3, [pc, #408]	; (401200 <m2m_wifi_cb+0x288>)
  401068:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  40106a:	2300      	movs	r3, #0
  40106c:	2264      	movs	r2, #100	; 0x64
  40106e:	a903      	add	r1, sp, #12
  401070:	4628      	mov	r0, r5
  401072:	4c61      	ldr	r4, [pc, #388]	; (4011f8 <m2m_wifi_cb+0x280>)
  401074:	47a0      	blx	r4
  401076:	2800      	cmp	r0, #0
  401078:	d1b0      	bne.n	400fdc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40107a:	4b60      	ldr	r3, [pc, #384]	; (4011fc <m2m_wifi_cb+0x284>)
  40107c:	681b      	ldr	r3, [r3, #0]
  40107e:	2b00      	cmp	r3, #0
  401080:	d0ac      	beq.n	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  401082:	a903      	add	r1, sp, #12
  401084:	202f      	movs	r0, #47	; 0x2f
  401086:	4798      	blx	r3
  401088:	e7a8      	b.n	400fdc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  40108a:	2300      	movs	r3, #0
  40108c:	2204      	movs	r2, #4
  40108e:	a903      	add	r1, sp, #12
  401090:	4628      	mov	r0, r5
  401092:	4c59      	ldr	r4, [pc, #356]	; (4011f8 <m2m_wifi_cb+0x280>)
  401094:	47a0      	blx	r4
  401096:	2800      	cmp	r0, #0
  401098:	d1a0      	bne.n	400fdc <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  40109a:	485a      	ldr	r0, [pc, #360]	; (401204 <m2m_wifi_cb+0x28c>)
  40109c:	4c53      	ldr	r4, [pc, #332]	; (4011ec <m2m_wifi_cb+0x274>)
  40109e:	47a0      	blx	r4
  4010a0:	9903      	ldr	r1, [sp, #12]
  4010a2:	b2cb      	uxtb	r3, r1
  4010a4:	9300      	str	r3, [sp, #0]
  4010a6:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4010aa:	f3c1 4207 	ubfx	r2, r1, #16, #8
  4010ae:	0e09      	lsrs	r1, r1, #24
  4010b0:	4855      	ldr	r0, [pc, #340]	; (401208 <m2m_wifi_cb+0x290>)
  4010b2:	47a0      	blx	r4
  4010b4:	484f      	ldr	r0, [pc, #316]	; (4011f4 <m2m_wifi_cb+0x27c>)
  4010b6:	47a0      	blx	r4
			if (gpfAppWifiCb)
  4010b8:	4b50      	ldr	r3, [pc, #320]	; (4011fc <m2m_wifi_cb+0x284>)
  4010ba:	681b      	ldr	r3, [r3, #0]
  4010bc:	2b00      	cmp	r3, #0
  4010be:	d08d      	beq.n	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  4010c0:	2100      	movs	r1, #0
  4010c2:	2034      	movs	r0, #52	; 0x34
  4010c4:	4798      	blx	r3
  4010c6:	e789      	b.n	400fdc <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  4010c8:	2300      	movs	r3, #0
  4010ca:	4a50      	ldr	r2, [pc, #320]	; (40120c <m2m_wifi_cb+0x294>)
  4010cc:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  4010ce:	2204      	movs	r2, #4
  4010d0:	a903      	add	r1, sp, #12
  4010d2:	4628      	mov	r0, r5
  4010d4:	4c48      	ldr	r4, [pc, #288]	; (4011f8 <m2m_wifi_cb+0x280>)
  4010d6:	47a0      	blx	r4
  4010d8:	2800      	cmp	r0, #0
  4010da:	f47f af7f 	bne.w	400fdc <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  4010de:	f89d 200c 	ldrb.w	r2, [sp, #12]
  4010e2:	4b4b      	ldr	r3, [pc, #300]	; (401210 <m2m_wifi_cb+0x298>)
  4010e4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  4010e6:	4b45      	ldr	r3, [pc, #276]	; (4011fc <m2m_wifi_cb+0x284>)
  4010e8:	681b      	ldr	r3, [r3, #0]
  4010ea:	2b00      	cmp	r3, #0
  4010ec:	f43f af76 	beq.w	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  4010f0:	a903      	add	r1, sp, #12
  4010f2:	2011      	movs	r0, #17
  4010f4:	4798      	blx	r3
  4010f6:	e771      	b.n	400fdc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  4010f8:	2300      	movs	r3, #0
  4010fa:	222c      	movs	r2, #44	; 0x2c
  4010fc:	a903      	add	r1, sp, #12
  4010fe:	4628      	mov	r0, r5
  401100:	4c3d      	ldr	r4, [pc, #244]	; (4011f8 <m2m_wifi_cb+0x280>)
  401102:	47a0      	blx	r4
  401104:	2800      	cmp	r0, #0
  401106:	f47f af69 	bne.w	400fdc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40110a:	4b3c      	ldr	r3, [pc, #240]	; (4011fc <m2m_wifi_cb+0x284>)
  40110c:	681b      	ldr	r3, [r3, #0]
  40110e:	2b00      	cmp	r3, #0
  401110:	f43f af64 	beq.w	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  401114:	a903      	add	r1, sp, #12
  401116:	2013      	movs	r0, #19
  401118:	4798      	blx	r3
  40111a:	e75f      	b.n	400fdc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  40111c:	2300      	movs	r3, #0
  40111e:	2204      	movs	r2, #4
  401120:	a91c      	add	r1, sp, #112	; 0x70
  401122:	4628      	mov	r0, r5
  401124:	4c34      	ldr	r4, [pc, #208]	; (4011f8 <m2m_wifi_cb+0x280>)
  401126:	47a0      	blx	r4
  401128:	2800      	cmp	r0, #0
  40112a:	f47f af57 	bne.w	400fdc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40112e:	4b33      	ldr	r3, [pc, #204]	; (4011fc <m2m_wifi_cb+0x284>)
  401130:	681b      	ldr	r3, [r3, #0]
  401132:	2b00      	cmp	r3, #0
  401134:	f43f af52 	beq.w	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  401138:	a91c      	add	r1, sp, #112	; 0x70
  40113a:	2004      	movs	r0, #4
  40113c:	4798      	blx	r3
  40113e:	e74d      	b.n	400fdc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401140:	2300      	movs	r3, #0
  401142:	2204      	movs	r2, #4
  401144:	a91c      	add	r1, sp, #112	; 0x70
  401146:	4628      	mov	r0, r5
  401148:	4c2b      	ldr	r4, [pc, #172]	; (4011f8 <m2m_wifi_cb+0x280>)
  40114a:	47a0      	blx	r4
  40114c:	2800      	cmp	r0, #0
  40114e:	f47f af45 	bne.w	400fdc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401152:	4b2a      	ldr	r3, [pc, #168]	; (4011fc <m2m_wifi_cb+0x284>)
  401154:	681b      	ldr	r3, [r3, #0]
  401156:	2b00      	cmp	r3, #0
  401158:	f43f af40 	beq.w	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  40115c:	a91c      	add	r1, sp, #112	; 0x70
  40115e:	2065      	movs	r0, #101	; 0x65
  401160:	4798      	blx	r3
  401162:	e73b      	b.n	400fdc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  401164:	2301      	movs	r3, #1
  401166:	2264      	movs	r2, #100	; 0x64
  401168:	a903      	add	r1, sp, #12
  40116a:	4628      	mov	r0, r5
  40116c:	4c22      	ldr	r4, [pc, #136]	; (4011f8 <m2m_wifi_cb+0x280>)
  40116e:	47a0      	blx	r4
  401170:	2800      	cmp	r0, #0
  401172:	f47f af33 	bne.w	400fdc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  401176:	4b21      	ldr	r3, [pc, #132]	; (4011fc <m2m_wifi_cb+0x284>)
  401178:	681b      	ldr	r3, [r3, #0]
  40117a:	2b00      	cmp	r3, #0
  40117c:	f43f af2e 	beq.w	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  401180:	a903      	add	r1, sp, #12
  401182:	2009      	movs	r0, #9
  401184:	4798      	blx	r3
  401186:	e729      	b.n	400fdc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  401188:	2301      	movs	r3, #1
  40118a:	2204      	movs	r2, #4
  40118c:	a903      	add	r1, sp, #12
  40118e:	4628      	mov	r0, r5
  401190:	4c19      	ldr	r4, [pc, #100]	; (4011f8 <m2m_wifi_cb+0x280>)
  401192:	47a0      	blx	r4
  401194:	2800      	cmp	r0, #0
  401196:	f47f af21 	bne.w	400fdc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  40119a:	4b18      	ldr	r3, [pc, #96]	; (4011fc <m2m_wifi_cb+0x284>)
  40119c:	681b      	ldr	r3, [r3, #0]
  40119e:	2b00      	cmp	r3, #0
  4011a0:	f43f af1c 	beq.w	400fdc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  4011a4:	a903      	add	r1, sp, #12
  4011a6:	202a      	movs	r0, #42	; 0x2a
  4011a8:	4798      	blx	r3
  4011aa:	e717      	b.n	400fdc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  4011ac:	2300      	movs	r3, #0
  4011ae:	2208      	movs	r2, #8
  4011b0:	a903      	add	r1, sp, #12
  4011b2:	4628      	mov	r0, r5
  4011b4:	4c10      	ldr	r4, [pc, #64]	; (4011f8 <m2m_wifi_cb+0x280>)
  4011b6:	47a0      	blx	r4
  4011b8:	2800      	cmp	r0, #0
  4011ba:	f47f af0f 	bne.w	400fdc <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  4011be:	2301      	movs	r3, #1
  4011c0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4011c4:	9903      	ldr	r1, [sp, #12]
  4011c6:	f105 0008 	add.w	r0, r5, #8
  4011ca:	47a0      	blx	r4
  4011cc:	2800      	cmp	r0, #0
  4011ce:	f47f af05 	bne.w	400fdc <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  4011d2:	4b0a      	ldr	r3, [pc, #40]	; (4011fc <m2m_wifi_cb+0x284>)
  4011d4:	681b      	ldr	r3, [r3, #0]
  4011d6:	2b00      	cmp	r3, #0
  4011d8:	f43f af00 	beq.w	400fdc <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  4011dc:	a903      	add	r1, sp, #12
  4011de:	2020      	movs	r0, #32
  4011e0:	4798      	blx	r3
  4011e2:	e6fb      	b.n	400fdc <m2m_wifi_cb+0x64>
  4011e4:	00416084 	.word	0x00416084
  4011e8:	00415cbc 	.word	0x00415cbc
  4011ec:	0040d42d 	.word	0x0040d42d
  4011f0:	004160d4 	.word	0x004160d4
  4011f4:	00415ce8 	.word	0x00415ce8
  4011f8:	00400cc5 	.word	0x00400cc5
  4011fc:	20000c74 	.word	0x20000c74
  401200:	004005dd 	.word	0x004005dd
  401204:	00415fdc 	.word	0x00415fdc
  401208:	004160b4 	.word	0x004160b4
  40120c:	20000c79 	.word	0x20000c79
  401210:	20000c78 	.word	0x20000c78

00401214 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401214:	b5f0      	push	{r4, r5, r6, r7, lr}
  401216:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401218:	2301      	movs	r3, #1
  40121a:	f88d 300f 	strb.w	r3, [sp, #15]
	
	if(param == NULL) {
  40121e:	2800      	cmp	r0, #0
  401220:	d065      	beq.n	4012ee <m2m_wifi_init+0xda>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401222:	6802      	ldr	r2, [r0, #0]
  401224:	4b33      	ldr	r3, [pc, #204]	; (4012f4 <m2m_wifi_init+0xe0>)
  401226:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401228:	2200      	movs	r2, #0
  40122a:	4b33      	ldr	r3, [pc, #204]	; (4012f8 <m2m_wifi_init+0xe4>)
  40122c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  40122e:	f10d 000f 	add.w	r0, sp, #15
  401232:	4b32      	ldr	r3, [pc, #200]	; (4012fc <m2m_wifi_init+0xe8>)
  401234:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401236:	4605      	mov	r5, r0
  401238:	b110      	cbz	r0, 401240 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40123a:	4628      	mov	r0, r5
  40123c:	b00f      	add	sp, #60	; 0x3c
  40123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  401240:	4b2f      	ldr	r3, [pc, #188]	; (401300 <m2m_wifi_init+0xec>)
  401242:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401244:	4605      	mov	r5, r0
  401246:	2800      	cmp	r0, #0
  401248:	d14d      	bne.n	4012e6 <m2m_wifi_init+0xd2>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40124a:	492e      	ldr	r1, [pc, #184]	; (401304 <m2m_wifi_init+0xf0>)
  40124c:	2001      	movs	r0, #1
  40124e:	4b2e      	ldr	r3, [pc, #184]	; (401308 <m2m_wifi_init+0xf4>)
  401250:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
  401252:	a804      	add	r0, sp, #16
  401254:	4b2d      	ldr	r3, [pc, #180]	; (40130c <m2m_wifi_init+0xf8>)
  401256:	4798      	blx	r3
  401258:	4605      	mov	r5, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
  40125a:	4f2d      	ldr	r7, [pc, #180]	; (401310 <m2m_wifi_init+0xfc>)
  40125c:	4638      	mov	r0, r7
  40125e:	4c2d      	ldr	r4, [pc, #180]	; (401314 <m2m_wifi_init+0x100>)
  401260:	47a0      	blx	r4
  401262:	f89d 3016 	ldrb.w	r3, [sp, #22]
  401266:	f89d 2015 	ldrb.w	r2, [sp, #21]
  40126a:	f89d 1014 	ldrb.w	r1, [sp, #20]
  40126e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
  401272:	9000      	str	r0, [sp, #0]
  401274:	4828      	ldr	r0, [pc, #160]	; (401318 <m2m_wifi_init+0x104>)
  401276:	47a0      	blx	r4
  401278:	4e28      	ldr	r6, [pc, #160]	; (40131c <m2m_wifi_init+0x108>)
  40127a:	4630      	mov	r0, r6
  40127c:	47a0      	blx	r4
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
  40127e:	4638      	mov	r0, r7
  401280:	47a0      	blx	r4
  401282:	f10d 0226 	add.w	r2, sp, #38	; 0x26
  401286:	f10d 011a 	add.w	r1, sp, #26
  40128a:	4825      	ldr	r0, [pc, #148]	; (401320 <m2m_wifi_init+0x10c>)
  40128c:	47a0      	blx	r4
  40128e:	4630      	mov	r0, r6
  401290:	47a0      	blx	r4
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401292:	4638      	mov	r0, r7
  401294:	47a0      	blx	r4
  401296:	f89d 3019 	ldrb.w	r3, [sp, #25]
  40129a:	f89d 2018 	ldrb.w	r2, [sp, #24]
  40129e:	f89d 1017 	ldrb.w	r1, [sp, #23]
  4012a2:	4820      	ldr	r0, [pc, #128]	; (401324 <m2m_wifi_init+0x110>)
  4012a4:	47a0      	blx	r4
  4012a6:	4630      	mov	r0, r6
  4012a8:	47a0      	blx	r4
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
  4012aa:	4638      	mov	r0, r7
  4012ac:	47a0      	blx	r4
  4012ae:	2302      	movs	r3, #2
  4012b0:	2205      	movs	r2, #5
  4012b2:	2113      	movs	r1, #19
  4012b4:	481c      	ldr	r0, [pc, #112]	; (401328 <m2m_wifi_init+0x114>)
  4012b6:	47a0      	blx	r4
  4012b8:	4630      	mov	r0, r6
  4012ba:	47a0      	blx	r4
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
  4012bc:	4638      	mov	r0, r7
  4012be:	47a0      	blx	r4
  4012c0:	4a1a      	ldr	r2, [pc, #104]	; (40132c <m2m_wifi_init+0x118>)
  4012c2:	491b      	ldr	r1, [pc, #108]	; (401330 <m2m_wifi_init+0x11c>)
  4012c4:	481b      	ldr	r0, [pc, #108]	; (401334 <m2m_wifi_init+0x120>)
  4012c6:	47a0      	blx	r4
  4012c8:	4630      	mov	r0, r6
  4012ca:	47a0      	blx	r4
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4012cc:	f115 0f0d 	cmn.w	r5, #13
  4012d0:	d1b3      	bne.n	40123a <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  4012d2:	f240 12ed 	movw	r2, #493	; 0x1ed
  4012d6:	4918      	ldr	r1, [pc, #96]	; (401338 <m2m_wifi_init+0x124>)
  4012d8:	4818      	ldr	r0, [pc, #96]	; (40133c <m2m_wifi_init+0x128>)
  4012da:	47a0      	blx	r4
  4012dc:	4818      	ldr	r0, [pc, #96]	; (401340 <m2m_wifi_init+0x12c>)
  4012de:	47a0      	blx	r4
  4012e0:	4630      	mov	r0, r6
  4012e2:	47a0      	blx	r4
  4012e4:	e7a9      	b.n	40123a <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  4012e6:	2000      	movs	r0, #0
  4012e8:	4b16      	ldr	r3, [pc, #88]	; (401344 <m2m_wifi_init+0x130>)
  4012ea:	4798      	blx	r3
  4012ec:	e7a5      	b.n	40123a <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  4012ee:	f06f 050b 	mvn.w	r5, #11
  4012f2:	e7a2      	b.n	40123a <m2m_wifi_init+0x26>
  4012f4:	20000c74 	.word	0x20000c74
  4012f8:	20000c79 	.word	0x20000c79
  4012fc:	00401d21 	.word	0x00401d21
  401300:	00400e25 	.word	0x00400e25
  401304:	00400f79 	.word	0x00400f79
  401308:	00400da1 	.word	0x00400da1
  40130c:	00401c51 	.word	0x00401c51
  401310:	00415fdc 	.word	0x00415fdc
  401314:	0040d42d 	.word	0x0040d42d
  401318:	00416194 	.word	0x00416194
  40131c:	00415ce8 	.word	0x00415ce8
  401320:	004161bc 	.word	0x004161bc
  401324:	004161d8 	.word	0x004161d8
  401328:	004161fc 	.word	0x004161fc
  40132c:	00416214 	.word	0x00416214
  401330:	00416220 	.word	0x00416220
  401334:	0041622c 	.word	0x0041622c
  401338:	00416090 	.word	0x00416090
  40133c:	00415cbc 	.word	0x00415cbc
  401340:	00416244 	.word	0x00416244
  401344:	00401ded 	.word	0x00401ded

00401348 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401348:	b508      	push	{r3, lr}
	return hif_handle_isr();
  40134a:	4b01      	ldr	r3, [pc, #4]	; (401350 <m2m_wifi_handle_events+0x8>)
  40134c:	4798      	blx	r3
}
  40134e:	bd08      	pop	{r3, pc}
  401350:	00400915 	.word	0x00400915

00401354 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  401354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401358:	b0a0      	sub	sp, #128	; 0x80
  40135a:	4680      	mov	r8, r0
  40135c:	460d      	mov	r5, r1
  40135e:	4614      	mov	r4, r2
  401360:	461f      	mov	r7, r3
  401362:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  401366:	2a01      	cmp	r2, #1
  401368:	d003      	beq.n	401372 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  40136a:	2b00      	cmp	r3, #0
  40136c:	d039      	beq.n	4013e2 <m2m_wifi_connect_sc+0x8e>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  40136e:	2a02      	cmp	r2, #2
  401370:	d044      	beq.n	4013fc <m2m_wifi_connect_sc+0xa8>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  401372:	1e6b      	subs	r3, r5, #1
  401374:	b2db      	uxtb	r3, r3
  401376:	2b1f      	cmp	r3, #31
  401378:	d877      	bhi.n	40146a <m2m_wifi_connect_sc+0x116>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
  40137a:	1e73      	subs	r3, r6, #1
  40137c:	b29b      	uxth	r3, r3
  40137e:	2b0d      	cmp	r3, #13
  401380:	d901      	bls.n	401386 <m2m_wifi_connect_sc+0x32>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401382:	2eff      	cmp	r6, #255	; 0xff
  401384:	d17e      	bne.n	401484 <m2m_wifi_connect_sc+0x130>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  401386:	462a      	mov	r2, r5
  401388:	4641      	mov	r1, r8
  40138a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  40138e:	4b77      	ldr	r3, [pc, #476]	; (40156c <m2m_wifi_connect_sc+0x218>)
  401390:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  401392:	ab20      	add	r3, sp, #128	; 0x80
  401394:	441d      	add	r5, r3
  401396:	2300      	movs	r3, #0
  401398:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  40139c:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4013a0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4013a4:	3300      	adds	r3, #0
  4013a6:	bf18      	it	ne
  4013a8:	2301      	movne	r3, #1
  4013aa:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4013ae:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4013b2:	2c03      	cmp	r4, #3
  4013b4:	d073      	beq.n	40149e <m2m_wifi_connect_sc+0x14a>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4013b6:	2c02      	cmp	r4, #2
  4013b8:	f000 80aa 	beq.w	401510 <m2m_wifi_connect_sc+0x1bc>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4013bc:	2c04      	cmp	r4, #4
  4013be:	f000 80c1 	beq.w	401544 <m2m_wifi_connect_sc+0x1f0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4013c2:	2c01      	cmp	r4, #1
  4013c4:	f040 80c4 	bne.w	401550 <m2m_wifi_connect_sc+0x1fc>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4013c8:	2300      	movs	r3, #0
  4013ca:	9302      	str	r3, [sp, #8]
  4013cc:	9301      	str	r3, [sp, #4]
  4013ce:	9300      	str	r3, [sp, #0]
  4013d0:	236c      	movs	r3, #108	; 0x6c
  4013d2:	aa05      	add	r2, sp, #20
  4013d4:	2128      	movs	r1, #40	; 0x28
  4013d6:	2001      	movs	r0, #1
  4013d8:	4c65      	ldr	r4, [pc, #404]	; (401570 <m2m_wifi_connect_sc+0x21c>)
  4013da:	47a0      	blx	r4

ERR1:
	return ret;
}
  4013dc:	b020      	add	sp, #128	; 0x80
  4013de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  4013e2:	f240 221b 	movw	r2, #539	; 0x21b
  4013e6:	4963      	ldr	r1, [pc, #396]	; (401574 <m2m_wifi_connect_sc+0x220>)
  4013e8:	4863      	ldr	r0, [pc, #396]	; (401578 <m2m_wifi_connect_sc+0x224>)
  4013ea:	4c64      	ldr	r4, [pc, #400]	; (40157c <m2m_wifi_connect_sc+0x228>)
  4013ec:	47a0      	blx	r4
  4013ee:	4864      	ldr	r0, [pc, #400]	; (401580 <m2m_wifi_connect_sc+0x22c>)
  4013f0:	47a0      	blx	r4
  4013f2:	4864      	ldr	r0, [pc, #400]	; (401584 <m2m_wifi_connect_sc+0x230>)
  4013f4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4013f6:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4013fa:	e7ef      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4013fc:	4618      	mov	r0, r3
  4013fe:	4b62      	ldr	r3, [pc, #392]	; (401588 <m2m_wifi_connect_sc+0x234>)
  401400:	4798      	blx	r3
  401402:	2840      	cmp	r0, #64	; 0x40
  401404:	d1b5      	bne.n	401372 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401406:	783b      	ldrb	r3, [r7, #0]
  401408:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40140c:	b2d2      	uxtb	r2, r2
  40140e:	2a36      	cmp	r2, #54	; 0x36
  401410:	d81e      	bhi.n	401450 <m2m_wifi_connect_sc+0xfc>
  401412:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401416:	b2d2      	uxtb	r2, r2
  401418:	2a06      	cmp	r2, #6
  40141a:	d919      	bls.n	401450 <m2m_wifi_connect_sc+0xfc>
  40141c:	3b47      	subs	r3, #71	; 0x47
  40141e:	b2db      	uxtb	r3, r3
  401420:	2b19      	cmp	r3, #25
  401422:	d915      	bls.n	401450 <m2m_wifi_connect_sc+0xfc>
  401424:	4639      	mov	r1, r7
  401426:	f107 003f 	add.w	r0, r7, #63	; 0x3f
  40142a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40142e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401432:	b2d2      	uxtb	r2, r2
  401434:	2a36      	cmp	r2, #54	; 0x36
  401436:	d80b      	bhi.n	401450 <m2m_wifi_connect_sc+0xfc>
  401438:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  40143c:	b2d2      	uxtb	r2, r2
  40143e:	2a06      	cmp	r2, #6
  401440:	d906      	bls.n	401450 <m2m_wifi_connect_sc+0xfc>
  401442:	3b47      	subs	r3, #71	; 0x47
  401444:	b2db      	uxtb	r3, r3
  401446:	2b19      	cmp	r3, #25
  401448:	d902      	bls.n	401450 <m2m_wifi_connect_sc+0xfc>
			while(i < (M2M_MAX_PSK_LEN-1))
  40144a:	4281      	cmp	r1, r0
  40144c:	d1ed      	bne.n	40142a <m2m_wifi_connect_sc+0xd6>
  40144e:	e790      	b.n	401372 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  401450:	f240 2227 	movw	r2, #551	; 0x227
  401454:	4947      	ldr	r1, [pc, #284]	; (401574 <m2m_wifi_connect_sc+0x220>)
  401456:	4848      	ldr	r0, [pc, #288]	; (401578 <m2m_wifi_connect_sc+0x224>)
  401458:	4c48      	ldr	r4, [pc, #288]	; (40157c <m2m_wifi_connect_sc+0x228>)
  40145a:	47a0      	blx	r4
  40145c:	484b      	ldr	r0, [pc, #300]	; (40158c <m2m_wifi_connect_sc+0x238>)
  40145e:	47a0      	blx	r4
  401460:	4848      	ldr	r0, [pc, #288]	; (401584 <m2m_wifi_connect_sc+0x230>)
  401462:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  401464:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  401468:	e7b8      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
		M2M_ERR("SSID LEN INVALID\n");
  40146a:	f240 2231 	movw	r2, #561	; 0x231
  40146e:	4941      	ldr	r1, [pc, #260]	; (401574 <m2m_wifi_connect_sc+0x220>)
  401470:	4841      	ldr	r0, [pc, #260]	; (401578 <m2m_wifi_connect_sc+0x224>)
  401472:	4c42      	ldr	r4, [pc, #264]	; (40157c <m2m_wifi_connect_sc+0x228>)
  401474:	47a0      	blx	r4
  401476:	4846      	ldr	r0, [pc, #280]	; (401590 <m2m_wifi_connect_sc+0x23c>)
  401478:	47a0      	blx	r4
  40147a:	4842      	ldr	r0, [pc, #264]	; (401584 <m2m_wifi_connect_sc+0x230>)
  40147c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  40147e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401482:	e7ab      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
			M2M_ERR("CH INVALID\n");
  401484:	f240 223a 	movw	r2, #570	; 0x23a
  401488:	493a      	ldr	r1, [pc, #232]	; (401574 <m2m_wifi_connect_sc+0x220>)
  40148a:	483b      	ldr	r0, [pc, #236]	; (401578 <m2m_wifi_connect_sc+0x224>)
  40148c:	4c3b      	ldr	r4, [pc, #236]	; (40157c <m2m_wifi_connect_sc+0x228>)
  40148e:	47a0      	blx	r4
  401490:	4840      	ldr	r0, [pc, #256]	; (401594 <m2m_wifi_connect_sc+0x240>)
  401492:	47a0      	blx	r4
  401494:	483b      	ldr	r0, [pc, #236]	; (401584 <m2m_wifi_connect_sc+0x230>)
  401496:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401498:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40149c:	e79e      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  40149e:	783b      	ldrb	r3, [r7, #0]
  4014a0:	3b01      	subs	r3, #1
  4014a2:	b2db      	uxtb	r3, r3
  4014a4:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4014a8:	2b03      	cmp	r3, #3
  4014aa:	d816      	bhi.n	4014da <m2m_wifi_connect_sc+0x186>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  4014ac:	787a      	ldrb	r2, [r7, #1]
  4014ae:	1e53      	subs	r3, r2, #1
  4014b0:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  4014b4:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  4014b8:	2b0b      	cmp	r3, #11
  4014ba:	d01d      	beq.n	4014f8 <m2m_wifi_connect_sc+0x1a4>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4014bc:	f44f 7216 	mov.w	r2, #600	; 0x258
  4014c0:	492c      	ldr	r1, [pc, #176]	; (401574 <m2m_wifi_connect_sc+0x220>)
  4014c2:	482d      	ldr	r0, [pc, #180]	; (401578 <m2m_wifi_connect_sc+0x224>)
  4014c4:	4c2d      	ldr	r4, [pc, #180]	; (40157c <m2m_wifi_connect_sc+0x228>)
  4014c6:	47a0      	blx	r4
  4014c8:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4014cc:	4832      	ldr	r0, [pc, #200]	; (401598 <m2m_wifi_connect_sc+0x244>)
  4014ce:	47a0      	blx	r4
  4014d0:	482c      	ldr	r0, [pc, #176]	; (401584 <m2m_wifi_connect_sc+0x230>)
  4014d2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4014d4:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4014d8:	e780      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4014da:	f240 2251 	movw	r2, #593	; 0x251
  4014de:	4925      	ldr	r1, [pc, #148]	; (401574 <m2m_wifi_connect_sc+0x220>)
  4014e0:	4825      	ldr	r0, [pc, #148]	; (401578 <m2m_wifi_connect_sc+0x224>)
  4014e2:	4c26      	ldr	r4, [pc, #152]	; (40157c <m2m_wifi_connect_sc+0x228>)
  4014e4:	47a0      	blx	r4
  4014e6:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4014ea:	482c      	ldr	r0, [pc, #176]	; (40159c <m2m_wifi_connect_sc+0x248>)
  4014ec:	47a0      	blx	r4
  4014ee:	4825      	ldr	r0, [pc, #148]	; (401584 <m2m_wifi_connect_sc+0x230>)
  4014f0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4014f2:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4014f6:	e771      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4014f8:	1cb9      	adds	r1, r7, #2
  4014fa:	f10d 0016 	add.w	r0, sp, #22
  4014fe:	4b1b      	ldr	r3, [pc, #108]	; (40156c <m2m_wifi_connect_sc+0x218>)
  401500:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  401502:	787b      	ldrb	r3, [r7, #1]
  401504:	aa20      	add	r2, sp, #128	; 0x80
  401506:	4413      	add	r3, r2
  401508:	2200      	movs	r2, #0
  40150a:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40150e:	e75b      	b.n	4013c8 <m2m_wifi_connect_sc+0x74>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  401510:	4638      	mov	r0, r7
  401512:	4b1d      	ldr	r3, [pc, #116]	; (401588 <m2m_wifi_connect_sc+0x234>)
  401514:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  401516:	1e43      	subs	r3, r0, #1
  401518:	b29b      	uxth	r3, r3
  40151a:	2b3f      	cmp	r3, #63	; 0x3f
  40151c:	d805      	bhi.n	40152a <m2m_wifi_connect_sc+0x1d6>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40151e:	1c42      	adds	r2, r0, #1
  401520:	4639      	mov	r1, r7
  401522:	a805      	add	r0, sp, #20
  401524:	4b11      	ldr	r3, [pc, #68]	; (40156c <m2m_wifi_connect_sc+0x218>)
  401526:	4798      	blx	r3
  401528:	e74e      	b.n	4013c8 <m2m_wifi_connect_sc+0x74>
			M2M_ERR("Incorrect PSK key length\n");
  40152a:	f240 2267 	movw	r2, #615	; 0x267
  40152e:	4911      	ldr	r1, [pc, #68]	; (401574 <m2m_wifi_connect_sc+0x220>)
  401530:	4811      	ldr	r0, [pc, #68]	; (401578 <m2m_wifi_connect_sc+0x224>)
  401532:	4c12      	ldr	r4, [pc, #72]	; (40157c <m2m_wifi_connect_sc+0x228>)
  401534:	47a0      	blx	r4
  401536:	481a      	ldr	r0, [pc, #104]	; (4015a0 <m2m_wifi_connect_sc+0x24c>)
  401538:	47a0      	blx	r4
  40153a:	4812      	ldr	r0, [pc, #72]	; (401584 <m2m_wifi_connect_sc+0x230>)
  40153c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40153e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401542:	e74b      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401544:	223e      	movs	r2, #62	; 0x3e
  401546:	4639      	mov	r1, r7
  401548:	a805      	add	r0, sp, #20
  40154a:	4b08      	ldr	r3, [pc, #32]	; (40156c <m2m_wifi_connect_sc+0x218>)
  40154c:	4798      	blx	r3
  40154e:	e73b      	b.n	4013c8 <m2m_wifi_connect_sc+0x74>
		M2M_ERR("undefined sec type\n");
  401550:	f240 2277 	movw	r2, #631	; 0x277
  401554:	4907      	ldr	r1, [pc, #28]	; (401574 <m2m_wifi_connect_sc+0x220>)
  401556:	4808      	ldr	r0, [pc, #32]	; (401578 <m2m_wifi_connect_sc+0x224>)
  401558:	4c08      	ldr	r4, [pc, #32]	; (40157c <m2m_wifi_connect_sc+0x228>)
  40155a:	47a0      	blx	r4
  40155c:	4811      	ldr	r0, [pc, #68]	; (4015a4 <m2m_wifi_connect_sc+0x250>)
  40155e:	47a0      	blx	r4
  401560:	4808      	ldr	r0, [pc, #32]	; (401584 <m2m_wifi_connect_sc+0x230>)
  401562:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401564:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401568:	e738      	b.n	4013dc <m2m_wifi_connect_sc+0x88>
  40156a:	bf00      	nop
  40156c:	004005c9 	.word	0x004005c9
  401570:	004006ed 	.word	0x004006ed
  401574:	004160a0 	.word	0x004160a0
  401578:	00415cbc 	.word	0x00415cbc
  40157c:	0040d42d 	.word	0x0040d42d
  401580:	004160e8 	.word	0x004160e8
  401584:	00415ce8 	.word	0x00415ce8
  401588:	004005eb 	.word	0x004005eb
  40158c:	004160fc 	.word	0x004160fc
  401590:	0041610c 	.word	0x0041610c
  401594:	00416120 	.word	0x00416120
  401598:	00416148 	.word	0x00416148
  40159c:	0041612c 	.word	0x0041612c
  4015a0:	00416164 	.word	0x00416164
  4015a4:	00416180 	.word	0x00416180

004015a8 <m2m_wifi_connect>:
{
  4015a8:	b510      	push	{r4, lr}
  4015aa:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  4015ac:	2400      	movs	r4, #0
  4015ae:	9401      	str	r4, [sp, #4]
  4015b0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4015b4:	9400      	str	r4, [sp, #0]
  4015b6:	4c02      	ldr	r4, [pc, #8]	; (4015c0 <m2m_wifi_connect+0x18>)
  4015b8:	47a0      	blx	r4
}
  4015ba:	b002      	add	sp, #8
  4015bc:	bd10      	pop	{r4, pc}
  4015be:	bf00      	nop
  4015c0:	00401355 	.word	0x00401355

004015c4 <m2m_wifi_get_firmware_version>:
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
sint8 m2m_wifi_get_firmware_version(tstrM2mRev *pstrRev)
{
  4015c4:	b538      	push	{r3, r4, r5, lr}
  4015c6:	4605      	mov	r5, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
  4015c8:	4b06      	ldr	r3, [pc, #24]	; (4015e4 <m2m_wifi_get_firmware_version+0x20>)
  4015ca:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4015cc:	4604      	mov	r4, r0
  4015ce:	b108      	cbz	r0, 4015d4 <m2m_wifi_get_firmware_version+0x10>
	{
    	ret = nm_get_firmware_full_info(pstrRev);
		hif_chip_sleep();
	}
	return ret;
}
  4015d0:	4620      	mov	r0, r4
  4015d2:	bd38      	pop	{r3, r4, r5, pc}
    	ret = nm_get_firmware_full_info(pstrRev);
  4015d4:	4628      	mov	r0, r5
  4015d6:	4b04      	ldr	r3, [pc, #16]	; (4015e8 <m2m_wifi_get_firmware_version+0x24>)
  4015d8:	4798      	blx	r3
  4015da:	4604      	mov	r4, r0
		hif_chip_sleep();
  4015dc:	4b03      	ldr	r3, [pc, #12]	; (4015ec <m2m_wifi_get_firmware_version+0x28>)
  4015de:	4798      	blx	r3
  4015e0:	e7f6      	b.n	4015d0 <m2m_wifi_get_firmware_version+0xc>
  4015e2:	bf00      	nop
  4015e4:	00400665 	.word	0x00400665
  4015e8:	00401c51 	.word	0x00401c51
  4015ec:	004006b9 	.word	0x004006b9

004015f0 <m2m_wifi_get_sytem_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_sytem_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_sytem_time(void)
{
  4015f0:	b510      	push	{r4, lr}
  4015f2:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
  4015f4:	2200      	movs	r2, #0
  4015f6:	9202      	str	r2, [sp, #8]
  4015f8:	9201      	str	r2, [sp, #4]
  4015fa:	9200      	str	r2, [sp, #0]
  4015fc:	4613      	mov	r3, r2
  4015fe:	211a      	movs	r1, #26
  401600:	2001      	movs	r0, #1
  401602:	4c02      	ldr	r4, [pc, #8]	; (40160c <m2m_wifi_get_sytem_time+0x1c>)
  401604:	47a0      	blx	r4
}
  401606:	b004      	add	sp, #16
  401608:	bd10      	pop	{r4, pc}
  40160a:	bf00      	nop
  40160c:	004006ed 	.word	0x004006ed

00401610 <m2m_wifi_enable_sntp>:

sint8 m2m_wifi_enable_sntp(uint8 bEnable)
{
  401610:	b510      	push	{r4, lr}
  401612:	b084      	sub	sp, #16
	uint8	u8Req;

	u8Req = bEnable ? M2M_WIFI_REQ_ENABLE_SNTP_CLIENT : M2M_WIFI_REQ_DISABLE_SNTP_CLIENT;
  401614:	2800      	cmp	r0, #0
	return hif_send(M2M_REQ_GROUP_WIFI, u8Req, NULL, 0, NULL, 0, 0);
  401616:	f04f 0200 	mov.w	r2, #0
  40161a:	9202      	str	r2, [sp, #8]
  40161c:	9201      	str	r2, [sp, #4]
  40161e:	9200      	str	r2, [sp, #0]
  401620:	4613      	mov	r3, r2
  401622:	bf14      	ite	ne
  401624:	210c      	movne	r1, #12
  401626:	210d      	moveq	r1, #13
  401628:	2001      	movs	r0, #1
  40162a:	4c02      	ldr	r4, [pc, #8]	; (401634 <m2m_wifi_enable_sntp+0x24>)
  40162c:	47a0      	blx	r4
}
  40162e:	b004      	add	sp, #16
  401630:	bd10      	pop	{r4, pc}
  401632:	bf00      	nop
  401634:	004006ed 	.word	0x004006ed

00401638 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
  401638:	b5f0      	push	{r4, r5, r6, r7, lr}
  40163a:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
  40163c:	f440 7580 	orr.w	r5, r0, #256	; 0x100
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  401640:	f44f 54a5 	mov.w	r4, #5280	; 0x14a0
  401644:	4f08      	ldr	r7, [pc, #32]	; (401668 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401646:	4e09      	ldr	r6, [pc, #36]	; (40166c <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  401648:	4629      	mov	r1, r5
  40164a:	4620      	mov	r0, r4
  40164c:	47b8      	blx	r7
			uint32 reg = 0;
  40164e:	a902      	add	r1, sp, #8
  401650:	2300      	movs	r3, #0
  401652:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401656:	4620      	mov	r0, r4
  401658:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
  40165a:	2800      	cmp	r0, #0
  40165c:	d1f4      	bne.n	401648 <chip_apply_conf+0x10>
				if(reg == val32)
  40165e:	9b01      	ldr	r3, [sp, #4]
  401660:	429d      	cmp	r5, r3
  401662:	d1f1      	bne.n	401648 <chip_apply_conf+0x10>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  401664:	b003      	add	sp, #12
  401666:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401668:	00401b8d 	.word	0x00401b8d
  40166c:	00401b81 	.word	0x00401b81

00401670 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
  401670:	b500      	push	{lr}
  401672:	b083      	sub	sp, #12
	uint32 reg = 0;
  401674:	a902      	add	r1, sp, #8
  401676:	2300      	movs	r3, #0
  401678:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  40167c:	f241 4008 	movw	r0, #5128	; 0x1408
  401680:	4b12      	ldr	r3, [pc, #72]	; (4016cc <enable_interrupts+0x5c>)
  401682:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
  401684:	4603      	mov	r3, r0
  401686:	b118      	cbz	r0, 401690 <enable_interrupts+0x20>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
  401688:	4618      	mov	r0, r3
  40168a:	b003      	add	sp, #12
  40168c:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= ((uint32) 1 << 8);
  401690:	9901      	ldr	r1, [sp, #4]
  401692:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401696:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  401698:	f241 4008 	movw	r0, #5128	; 0x1408
  40169c:	4b0c      	ldr	r3, [pc, #48]	; (4016d0 <enable_interrupts+0x60>)
  40169e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
  4016a0:	4603      	mov	r3, r0
  4016a2:	2800      	cmp	r0, #0
  4016a4:	d1f0      	bne.n	401688 <enable_interrupts+0x18>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  4016a6:	a901      	add	r1, sp, #4
  4016a8:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4016ac:	4b07      	ldr	r3, [pc, #28]	; (4016cc <enable_interrupts+0x5c>)
  4016ae:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
  4016b0:	4603      	mov	r3, r0
  4016b2:	2800      	cmp	r0, #0
  4016b4:	d1e8      	bne.n	401688 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
  4016b6:	9901      	ldr	r1, [sp, #4]
  4016b8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4016bc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  4016be:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4016c2:	4b03      	ldr	r3, [pc, #12]	; (4016d0 <enable_interrupts+0x60>)
  4016c4:	4798      	blx	r3
  4016c6:	4603      	mov	r3, r0
  4016c8:	e7de      	b.n	401688 <enable_interrupts+0x18>
  4016ca:	bf00      	nop
  4016cc:	00401b81 	.word	0x00401b81
  4016d0:	00401b8d 	.word	0x00401b8d

004016d4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4016d4:	b510      	push	{r4, lr}
  4016d6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4016d8:	4b25      	ldr	r3, [pc, #148]	; (401770 <nmi_get_chipid+0x9c>)
  4016da:	681c      	ldr	r4, [r3, #0]
  4016dc:	b124      	cbz	r4, 4016e8 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  4016de:	4b24      	ldr	r3, [pc, #144]	; (401770 <nmi_get_chipid+0x9c>)
  4016e0:	681c      	ldr	r4, [r3, #0]
}
  4016e2:	4620      	mov	r0, r4
  4016e4:	b002      	add	sp, #8
  4016e6:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4016e8:	4619      	mov	r1, r3
  4016ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4016ee:	4b21      	ldr	r3, [pc, #132]	; (401774 <nmi_get_chipid+0xa0>)
  4016f0:	4798      	blx	r3
  4016f2:	b118      	cbz	r0, 4016fc <nmi_get_chipid+0x28>
			chipid = 0;
  4016f4:	2200      	movs	r2, #0
  4016f6:	4b1e      	ldr	r3, [pc, #120]	; (401770 <nmi_get_chipid+0x9c>)
  4016f8:	601a      	str	r2, [r3, #0]
			return 0;
  4016fa:	e7f2      	b.n	4016e2 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4016fc:	a901      	add	r1, sp, #4
  4016fe:	f241 30f4 	movw	r0, #5108	; 0x13f4
  401702:	4b1c      	ldr	r3, [pc, #112]	; (401774 <nmi_get_chipid+0xa0>)
  401704:	4798      	blx	r3
  401706:	b118      	cbz	r0, 401710 <nmi_get_chipid+0x3c>
			chipid = 0;
  401708:	2200      	movs	r2, #0
  40170a:	4b19      	ldr	r3, [pc, #100]	; (401770 <nmi_get_chipid+0x9c>)
  40170c:	601a      	str	r2, [r3, #0]
			return 0;
  40170e:	e7e8      	b.n	4016e2 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  401710:	4b17      	ldr	r3, [pc, #92]	; (401770 <nmi_get_chipid+0x9c>)
  401712:	681b      	ldr	r3, [r3, #0]
  401714:	4a18      	ldr	r2, [pc, #96]	; (401778 <nmi_get_chipid+0xa4>)
  401716:	4293      	cmp	r3, r2
  401718:	d00d      	beq.n	401736 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  40171a:	4a18      	ldr	r2, [pc, #96]	; (40177c <nmi_get_chipid+0xa8>)
  40171c:	4293      	cmp	r3, r2
  40171e:	d011      	beq.n	401744 <nmi_get_chipid+0x70>
		}else if(chipid == 0x1000F0) { 
  401720:	4a17      	ldr	r2, [pc, #92]	; (401780 <nmi_get_chipid+0xac>)
  401722:	4293      	cmp	r3, r2
  401724:	d018      	beq.n	401758 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  401726:	4a12      	ldr	r2, [pc, #72]	; (401770 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  401728:	6813      	ldr	r3, [r2, #0]
  40172a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  40172e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  401732:	6013      	str	r3, [r2, #0]
  401734:	e7d3      	b.n	4016de <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  401736:	9b01      	ldr	r3, [sp, #4]
  401738:	2b01      	cmp	r3, #1
  40173a:	d0f4      	beq.n	401726 <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  40173c:	3201      	adds	r2, #1
  40173e:	4b0c      	ldr	r3, [pc, #48]	; (401770 <nmi_get_chipid+0x9c>)
  401740:	601a      	str	r2, [r3, #0]
  401742:	e7f0      	b.n	401726 <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  401744:	9b01      	ldr	r3, [sp, #4]
  401746:	2b03      	cmp	r3, #3
  401748:	d0ed      	beq.n	401726 <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  40174a:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40174c:	bf0c      	ite	eq
  40174e:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  401750:	4a0c      	ldrne	r2, [pc, #48]	; (401784 <nmi_get_chipid+0xb0>)
  401752:	4b07      	ldr	r3, [pc, #28]	; (401770 <nmi_get_chipid+0x9c>)
  401754:	601a      	str	r2, [r3, #0]
  401756:	e7e6      	b.n	401726 <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  401758:	4905      	ldr	r1, [pc, #20]	; (401770 <nmi_get_chipid+0x9c>)
  40175a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  40175e:	4b05      	ldr	r3, [pc, #20]	; (401774 <nmi_get_chipid+0xa0>)
  401760:	4798      	blx	r3
  401762:	2800      	cmp	r0, #0
  401764:	d0df      	beq.n	401726 <nmi_get_chipid+0x52>
			chipid = 0;
  401766:	2200      	movs	r2, #0
  401768:	4b01      	ldr	r3, [pc, #4]	; (401770 <nmi_get_chipid+0x9c>)
  40176a:	601a      	str	r2, [r3, #0]
			return 0;
  40176c:	e7b9      	b.n	4016e2 <nmi_get_chipid+0xe>
  40176e:	bf00      	nop
  401770:	20000c7c 	.word	0x20000c7c
  401774:	00401b81 	.word	0x00401b81
  401778:	001002a0 	.word	0x001002a0
  40177c:	001002b0 	.word	0x001002b0
  401780:	001000f0 	.word	0x001000f0
  401784:	001002b2 	.word	0x001002b2

00401788 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
  401788:	b530      	push	{r4, r5, lr}
  40178a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
  40178c:	2510      	movs	r5, #16
  40178e:	4c18      	ldr	r4, [pc, #96]	; (4017f0 <chip_sleep+0x68>)
  401790:	a901      	add	r1, sp, #4
  401792:	4628      	mov	r0, r5
  401794:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
  401796:	4603      	mov	r3, r0
  401798:	b9f8      	cbnz	r0, 4017da <chip_sleep+0x52>
		if((reg & NBIT0) == 0) break;
  40179a:	9b01      	ldr	r3, [sp, #4]
  40179c:	f013 0f01 	tst.w	r3, #1
  4017a0:	d1f6      	bne.n	401790 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
  4017a2:	a901      	add	r1, sp, #4
  4017a4:	2001      	movs	r0, #1
  4017a6:	4b12      	ldr	r3, [pc, #72]	; (4017f0 <chip_sleep+0x68>)
  4017a8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4017aa:	4603      	mov	r3, r0
  4017ac:	b9a8      	cbnz	r0, 4017da <chip_sleep+0x52>
	if(reg & NBIT1)
  4017ae:	9901      	ldr	r1, [sp, #4]
  4017b0:	f011 0f02 	tst.w	r1, #2
  4017b4:	d007      	beq.n	4017c6 <chip_sleep+0x3e>
	{
		reg &=~NBIT1;
  4017b6:	f021 0102 	bic.w	r1, r1, #2
  4017ba:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
  4017bc:	2001      	movs	r0, #1
  4017be:	4b0d      	ldr	r3, [pc, #52]	; (4017f4 <chip_sleep+0x6c>)
  4017c0:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
  4017c2:	4603      	mov	r3, r0
  4017c4:	b948      	cbnz	r0, 4017da <chip_sleep+0x52>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
  4017c6:	a901      	add	r1, sp, #4
  4017c8:	200b      	movs	r0, #11
  4017ca:	4b09      	ldr	r3, [pc, #36]	; (4017f0 <chip_sleep+0x68>)
  4017cc:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4017ce:	4603      	mov	r3, r0
  4017d0:	b918      	cbnz	r0, 4017da <chip_sleep+0x52>
	if(reg & NBIT0)
  4017d2:	9901      	ldr	r1, [sp, #4]
  4017d4:	f011 0f01 	tst.w	r1, #1
  4017d8:	d102      	bne.n	4017e0 <chip_sleep+0x58>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
  4017da:	4618      	mov	r0, r3
  4017dc:	b003      	add	sp, #12
  4017de:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
  4017e0:	f021 0101 	bic.w	r1, r1, #1
  4017e4:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
  4017e6:	200b      	movs	r0, #11
  4017e8:	4b02      	ldr	r3, [pc, #8]	; (4017f4 <chip_sleep+0x6c>)
  4017ea:	4798      	blx	r3
  4017ec:	4603      	mov	r3, r0
  4017ee:	e7f4      	b.n	4017da <chip_sleep+0x52>
  4017f0:	00401b81 	.word	0x00401b81
  4017f4:	00401b8d 	.word	0x00401b8d

004017f8 <chip_wake>:
sint8 chip_wake(void)
{
  4017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017fa:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
  4017fc:	2300      	movs	r3, #0
  4017fe:	9301      	str	r3, [sp, #4]
  401800:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
  401802:	a901      	add	r1, sp, #4
  401804:	200b      	movs	r0, #11
  401806:	4b29      	ldr	r3, [pc, #164]	; (4018ac <chip_wake+0xb4>)
  401808:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
  40180a:	4604      	mov	r4, r0
  40180c:	2800      	cmp	r0, #0
  40180e:	d130      	bne.n	401872 <chip_wake+0x7a>
	
	if(!(reg & NBIT0))
  401810:	9901      	ldr	r1, [sp, #4]
  401812:	f011 0f01 	tst.w	r1, #1
  401816:	d106      	bne.n	401826 <chip_wake+0x2e>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
  401818:	f041 0101 	orr.w	r1, r1, #1
  40181c:	200b      	movs	r0, #11
  40181e:	4b24      	ldr	r3, [pc, #144]	; (4018b0 <chip_wake+0xb8>)
  401820:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
  401822:	4604      	mov	r4, r0
  401824:	bb28      	cbnz	r0, 401872 <chip_wake+0x7a>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
  401826:	a901      	add	r1, sp, #4
  401828:	2001      	movs	r0, #1
  40182a:	4b20      	ldr	r3, [pc, #128]	; (4018ac <chip_wake+0xb4>)
  40182c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
  40182e:	4604      	mov	r4, r0
  401830:	b9f8      	cbnz	r0, 401872 <chip_wake+0x7a>
	/* Set bit 1 */
	if(!(reg & NBIT1))
  401832:	9901      	ldr	r1, [sp, #4]
  401834:	f011 0f02 	tst.w	r1, #2
  401838:	d01e      	beq.n	401878 <chip_wake+0x80>
{
  40183a:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
  40183c:	4e1b      	ldr	r6, [pc, #108]	; (4018ac <chip_wake+0xb4>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
  40183e:	4f1d      	ldr	r7, [pc, #116]	; (4018b4 <chip_wake+0xbc>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
  401840:	4669      	mov	r1, sp
  401842:	200f      	movs	r0, #15
  401844:	47b0      	blx	r6
		if(ret != M2M_SUCCESS) {
  401846:	4604      	mov	r4, r0
  401848:	b9f8      	cbnz	r0, 40188a <chip_wake+0x92>
		if(clk_status_reg & NBIT2) {
  40184a:	9b00      	ldr	r3, [sp, #0]
  40184c:	f013 0f04 	tst.w	r3, #4
  401850:	d128      	bne.n	4018a4 <chip_wake+0xac>
		nm_bsp_sleep(2);
  401852:	2002      	movs	r0, #2
  401854:	47b8      	blx	r7
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
  401856:	3d01      	subs	r5, #1
  401858:	d1f2      	bne.n	401840 <chip_wake+0x48>
		{
			M2M_ERR("Failed to wakup the chip\n");
  40185a:	f44f 72af 	mov.w	r2, #350	; 0x15e
  40185e:	4916      	ldr	r1, [pc, #88]	; (4018b8 <chip_wake+0xc0>)
  401860:	4816      	ldr	r0, [pc, #88]	; (4018bc <chip_wake+0xc4>)
  401862:	4c17      	ldr	r4, [pc, #92]	; (4018c0 <chip_wake+0xc8>)
  401864:	47a0      	blx	r4
  401866:	4817      	ldr	r0, [pc, #92]	; (4018c4 <chip_wake+0xcc>)
  401868:	47a0      	blx	r4
  40186a:	4817      	ldr	r0, [pc, #92]	; (4018c8 <chip_wake+0xd0>)
  40186c:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
  40186e:	f06f 0403 	mvn.w	r4, #3
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
  401872:	4620      	mov	r0, r4
  401874:	b003      	add	sp, #12
  401876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
  401878:	f041 0102 	orr.w	r1, r1, #2
  40187c:	2001      	movs	r0, #1
  40187e:	4b0c      	ldr	r3, [pc, #48]	; (4018b0 <chip_wake+0xb8>)
  401880:	4798      	blx	r3
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
  401882:	4604      	mov	r4, r0
  401884:	2800      	cmp	r0, #0
  401886:	d0d8      	beq.n	40183a <chip_wake+0x42>
  401888:	e7f3      	b.n	401872 <chip_wake+0x7a>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
  40188a:	f44f 72aa 	mov.w	r2, #340	; 0x154
  40188e:	490a      	ldr	r1, [pc, #40]	; (4018b8 <chip_wake+0xc0>)
  401890:	480a      	ldr	r0, [pc, #40]	; (4018bc <chip_wake+0xc4>)
  401892:	4d0b      	ldr	r5, [pc, #44]	; (4018c0 <chip_wake+0xc8>)
  401894:	47a8      	blx	r5
  401896:	9a00      	ldr	r2, [sp, #0]
  401898:	4621      	mov	r1, r4
  40189a:	480c      	ldr	r0, [pc, #48]	; (4018cc <chip_wake+0xd4>)
  40189c:	47a8      	blx	r5
  40189e:	480a      	ldr	r0, [pc, #40]	; (4018c8 <chip_wake+0xd0>)
  4018a0:	47a8      	blx	r5
			goto _WAKE_EXIT;
  4018a2:	e7e6      	b.n	401872 <chip_wake+0x7a>
	nm_bus_reset();
  4018a4:	4b0a      	ldr	r3, [pc, #40]	; (4018d0 <chip_wake+0xd8>)
  4018a6:	4798      	blx	r3
  4018a8:	e7e3      	b.n	401872 <chip_wake+0x7a>
  4018aa:	bf00      	nop
  4018ac:	00401b81 	.word	0x00401b81
  4018b0:	00401b8d 	.word	0x00401b8d
  4018b4:	004001d1 	.word	0x004001d1
  4018b8:	00416260 	.word	0x00416260
  4018bc:	00415cbc 	.word	0x00415cbc
  4018c0:	0040d42d 	.word	0x0040d42d
  4018c4:	004162b8 	.word	0x004162b8
  4018c8:	00415ce8 	.word	0x00415ce8
  4018cc:	004162a0 	.word	0x004162a0
  4018d0:	00401b69 	.word	0x00401b69

004018d4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  4018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018d6:	4607      	mov	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4018d8:	f241 0514 	movw	r5, #4116	; 0x1014
  4018dc:	4c2d      	ldr	r4, [pc, #180]	; (401994 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4018de:	4e2e      	ldr	r6, [pc, #184]	; (401998 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4018e0:	4628      	mov	r0, r5
  4018e2:	47a0      	blx	r4
		if (reg & 0x80000000) {
  4018e4:	2800      	cmp	r0, #0
  4018e6:	db02      	blt.n	4018ee <wait_for_bootrom+0x1a>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4018e8:	2001      	movs	r0, #1
  4018ea:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4018ec:	e7f8      	b.n	4018e0 <wait_for_bootrom+0xc>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4018ee:	482b      	ldr	r0, [pc, #172]	; (40199c <wait_for_bootrom+0xc8>)
  4018f0:	4b28      	ldr	r3, [pc, #160]	; (401994 <wait_for_bootrom+0xc0>)
  4018f2:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4018f4:	f010 0f01 	tst.w	r0, #1
  4018f8:	d109      	bne.n	40190e <wait_for_bootrom+0x3a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4018fa:	4e27      	ldr	r6, [pc, #156]	; (401998 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
  4018fc:	4d25      	ldr	r5, [pc, #148]	; (401994 <wait_for_bootrom+0xc0>)
		while(reg != M2M_FINISH_BOOT_ROM)
  4018fe:	4c28      	ldr	r4, [pc, #160]	; (4019a0 <wait_for_bootrom+0xcc>)
			nm_bsp_sleep(1);
  401900:	2001      	movs	r0, #1
  401902:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
  401904:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401908:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
  40190a:	42a0      	cmp	r0, r4
  40190c:	d1f8      	bne.n	401900 <wait_for_bootrom+0x2c>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  40190e:	2f02      	cmp	r7, #2
  401910:	d024      	beq.n	40195c <wait_for_bootrom+0x88>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  401912:	2f03      	cmp	r7, #3
  401914:	d02d      	beq.n	401972 <wait_for_bootrom+0x9e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
  401916:	2f04      	cmp	r7, #4
  401918:	d035      	beq.n	401986 <wait_for_bootrom+0xb2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
  40191a:	4922      	ldr	r1, [pc, #136]	; (4019a4 <wait_for_bootrom+0xd0>)
  40191c:	f241 008c 	movw	r0, #4236	; 0x108c
  401920:	4b21      	ldr	r3, [pc, #132]	; (4019a8 <wait_for_bootrom+0xd4>)
  401922:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
  401924:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
  401926:	4b21      	ldr	r3, [pc, #132]	; (4019ac <wait_for_bootrom+0xd8>)
  401928:	4798      	blx	r3
  40192a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40192e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  401932:	bf2c      	ite	cs
  401934:	f044 0002 	orrcs.w	r0, r4, #2
	} else {
		chip_apply_conf(u32GpReg1);
  401938:	4620      	movcc	r0, r4
  40193a:	4b1d      	ldr	r3, [pc, #116]	; (4019b0 <wait_for_bootrom+0xdc>)
  40193c:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
  40193e:	481d      	ldr	r0, [pc, #116]	; (4019b4 <wait_for_bootrom+0xe0>)
  401940:	4c1d      	ldr	r4, [pc, #116]	; (4019b8 <wait_for_bootrom+0xe4>)
  401942:	47a0      	blx	r4
  401944:	4917      	ldr	r1, [pc, #92]	; (4019a4 <wait_for_bootrom+0xd0>)
  401946:	481d      	ldr	r0, [pc, #116]	; (4019bc <wait_for_bootrom+0xe8>)
  401948:	47a0      	blx	r4
  40194a:	481d      	ldr	r0, [pc, #116]	; (4019c0 <wait_for_bootrom+0xec>)
  40194c:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40194e:	491d      	ldr	r1, [pc, #116]	; (4019c4 <wait_for_bootrom+0xf0>)
  401950:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401954:	4b14      	ldr	r3, [pc, #80]	; (4019a8 <wait_for_bootrom+0xd4>)
  401956:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  401958:	2000      	movs	r0, #0
  40195a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40195c:	491a      	ldr	r1, [pc, #104]	; (4019c8 <wait_for_bootrom+0xf4>)
  40195e:	481b      	ldr	r0, [pc, #108]	; (4019cc <wait_for_bootrom+0xf8>)
  401960:	4c11      	ldr	r4, [pc, #68]	; (4019a8 <wait_for_bootrom+0xd4>)
  401962:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  401964:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401968:	f241 008c 	movw	r0, #4236	; 0x108c
  40196c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  40196e:	2400      	movs	r4, #0
  401970:	e7d9      	b.n	401926 <wait_for_bootrom+0x52>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401972:	4915      	ldr	r1, [pc, #84]	; (4019c8 <wait_for_bootrom+0xf4>)
  401974:	4815      	ldr	r0, [pc, #84]	; (4019cc <wait_for_bootrom+0xf8>)
  401976:	4c0c      	ldr	r4, [pc, #48]	; (4019a8 <wait_for_bootrom+0xd4>)
  401978:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  40197a:	2100      	movs	r1, #0
  40197c:	f241 008c 	movw	r0, #4236	; 0x108c
  401980:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  401982:	2400      	movs	r4, #0
  401984:	e7cf      	b.n	401926 <wait_for_bootrom+0x52>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
  401986:	4907      	ldr	r1, [pc, #28]	; (4019a4 <wait_for_bootrom+0xd0>)
  401988:	f241 008c 	movw	r0, #4236	; 0x108c
  40198c:	4b06      	ldr	r3, [pc, #24]	; (4019a8 <wait_for_bootrom+0xd4>)
  40198e:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  401990:	2480      	movs	r4, #128	; 0x80
  401992:	e7c8      	b.n	401926 <wait_for_bootrom+0x52>
  401994:	00401b75 	.word	0x00401b75
  401998:	004001d1 	.word	0x004001d1
  40199c:	000207bc 	.word	0x000207bc
  4019a0:	10add09e 	.word	0x10add09e
  4019a4:	13521352 	.word	0x13521352
  4019a8:	00401b8d 	.word	0x00401b8d
  4019ac:	004016d5 	.word	0x004016d5
  4019b0:	00401639 	.word	0x00401639
  4019b4:	00415fdc 	.word	0x00415fdc
  4019b8:	0040d42d 	.word	0x0040d42d
  4019bc:	00416314 	.word	0x00416314
  4019c0:	00415ce8 	.word	0x00415ce8
  4019c4:	ef522f61 	.word	0xef522f61
  4019c8:	3c1cd57d 	.word	0x3c1cd57d
  4019cc:	000207ac 	.word	0x000207ac

004019d0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019d2:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4019d4:	f241 038c 	movw	r3, #4236	; 0x108c
  4019d8:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4019da:	4b18      	ldr	r3, [pc, #96]	; (401a3c <wait_for_firmware_start+0x6c>)
  4019dc:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4019de:	3802      	subs	r0, #2
  4019e0:	b2c0      	uxtb	r0, r0
  4019e2:	2801      	cmp	r0, #1
  4019e4:	d911      	bls.n	401a0a <wait_for_firmware_start+0x3a>
{
  4019e6:	f04f 34ff 	mov.w	r4, #4294967295
  4019ea:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4019ec:	2702      	movs	r7, #2
  4019ee:	4e14      	ldr	r6, [pc, #80]	; (401a40 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4019f0:	4d14      	ldr	r5, [pc, #80]	; (401a44 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  4019f2:	9b00      	ldr	r3, [sp, #0]
  4019f4:	4298      	cmp	r0, r3
  4019f6:	d012      	beq.n	401a1e <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4019f8:	4638      	mov	r0, r7
  4019fa:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  4019fc:	9801      	ldr	r0, [sp, #4]
  4019fe:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  401a00:	3c01      	subs	r4, #1
  401a02:	d1f6      	bne.n	4019f2 <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  401a04:	f06f 0004 	mvn.w	r0, #4
  401a08:	e00e      	b.n	401a28 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  401a0a:	4b0f      	ldr	r3, [pc, #60]	; (401a48 <wait_for_firmware_start+0x78>)
  401a0c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  401a0e:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  401a12:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401a16:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  401a1a:	9300      	str	r3, [sp, #0]
  401a1c:	e7e3      	b.n	4019e6 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  401a1e:	9a00      	ldr	r2, [sp, #0]
  401a20:	4b06      	ldr	r3, [pc, #24]	; (401a3c <wait_for_firmware_start+0x6c>)
  401a22:	429a      	cmp	r2, r3
  401a24:	d002      	beq.n	401a2c <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  401a26:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  401a28:	b003      	add	sp, #12
  401a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  401a2c:	2100      	movs	r1, #0
  401a2e:	f241 008c 	movw	r0, #4236	; 0x108c
  401a32:	4b06      	ldr	r3, [pc, #24]	; (401a4c <wait_for_firmware_start+0x7c>)
  401a34:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  401a36:	2000      	movs	r0, #0
  401a38:	e7f6      	b.n	401a28 <wait_for_firmware_start+0x58>
  401a3a:	bf00      	nop
  401a3c:	02532636 	.word	0x02532636
  401a40:	004001d1 	.word	0x004001d1
  401a44:	00401b75 	.word	0x00401b75
  401a48:	000207ac 	.word	0x000207ac
  401a4c:	00401b8d 	.word	0x00401b8d

00401a50 <chip_deinit>:

sint8 chip_deinit(void)
{
  401a50:	b530      	push	{r4, r5, lr}
  401a52:	b083      	sub	sp, #12
	uint32 reg = 0;
  401a54:	a902      	add	r1, sp, #8
  401a56:	2300      	movs	r3, #0
  401a58:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401a5c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401a60:	4b12      	ldr	r3, [pc, #72]	; (401aac <chip_deinit+0x5c>)
  401a62:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401a64:	b9a0      	cbnz	r0, 401a90 <chip_deinit+0x40>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
  401a66:	9901      	ldr	r1, [sp, #4]
  401a68:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401a6c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401a6e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401a72:	4b0f      	ldr	r3, [pc, #60]	; (401ab0 <chip_deinit+0x60>)
  401a74:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401a76:	4604      	mov	r4, r0
  401a78:	b1a8      	cbz	r0, 401aa6 <chip_deinit+0x56>
		M2M_ERR("failed to de-initialize\n");
  401a7a:	f240 220b 	movw	r2, #523	; 0x20b
  401a7e:	490d      	ldr	r1, [pc, #52]	; (401ab4 <chip_deinit+0x64>)
  401a80:	480d      	ldr	r0, [pc, #52]	; (401ab8 <chip_deinit+0x68>)
  401a82:	4d0e      	ldr	r5, [pc, #56]	; (401abc <chip_deinit+0x6c>)
  401a84:	47a8      	blx	r5
  401a86:	480e      	ldr	r0, [pc, #56]	; (401ac0 <chip_deinit+0x70>)
  401a88:	47a8      	blx	r5
  401a8a:	480e      	ldr	r0, [pc, #56]	; (401ac4 <chip_deinit+0x74>)
  401a8c:	47a8      	blx	r5
		goto ERR1;
  401a8e:	e00a      	b.n	401aa6 <chip_deinit+0x56>
  401a90:	4604      	mov	r4, r0
		M2M_ERR("failed to de-initialize\n");
  401a92:	f240 2205 	movw	r2, #517	; 0x205
  401a96:	4907      	ldr	r1, [pc, #28]	; (401ab4 <chip_deinit+0x64>)
  401a98:	4807      	ldr	r0, [pc, #28]	; (401ab8 <chip_deinit+0x68>)
  401a9a:	4d08      	ldr	r5, [pc, #32]	; (401abc <chip_deinit+0x6c>)
  401a9c:	47a8      	blx	r5
  401a9e:	4808      	ldr	r0, [pc, #32]	; (401ac0 <chip_deinit+0x70>)
  401aa0:	47a8      	blx	r5
  401aa2:	4808      	ldr	r0, [pc, #32]	; (401ac4 <chip_deinit+0x74>)
  401aa4:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
  401aa6:	4620      	mov	r0, r4
  401aa8:	b003      	add	sp, #12
  401aaa:	bd30      	pop	{r4, r5, pc}
  401aac:	00401b81 	.word	0x00401b81
  401ab0:	00401b8d 	.word	0x00401b8d
  401ab4:	0041626c 	.word	0x0041626c
  401ab8:	00415cbc 	.word	0x00415cbc
  401abc:	0040d42d 	.word	0x0040d42d
  401ac0:	00416284 	.word	0x00416284
  401ac4:	00415ce8 	.word	0x00415ce8

00401ac8 <pullup_ctrl>:
_EXIT:
	return ret;
}

sint8 pullup_ctrl(uint32 pinmask, uint8 enable)
{
  401ac8:	b570      	push	{r4, r5, r6, lr}
  401aca:	b082      	sub	sp, #8
  401acc:	4605      	mov	r5, r0
  401ace:	460e      	mov	r6, r1
	sint8 s8Ret;
	uint32 val32;
	s8Ret = nm_read_reg_with_ret(0x142c, &val32);
  401ad0:	a901      	add	r1, sp, #4
  401ad2:	f241 402c 	movw	r0, #5164	; 0x142c
  401ad6:	4b16      	ldr	r3, [pc, #88]	; (401b30 <pullup_ctrl+0x68>)
  401ad8:	4798      	blx	r3
	if(s8Ret != M2M_SUCCESS) {
  401ada:	b970      	cbnz	r0, 401afa <pullup_ctrl+0x32>
		M2M_ERR("[pullup_ctrl]: failed to read\n");
		goto _EXIT;
	}
	if(enable) {
  401adc:	b1ce      	cbz	r6, 401b12 <pullup_ctrl+0x4a>
		val32 &= ~pinmask;
  401ade:	9b01      	ldr	r3, [sp, #4]
  401ae0:	ea23 0505 	bic.w	r5, r3, r5
  401ae4:	9501      	str	r5, [sp, #4]
		} else {
		val32 |= pinmask;
	}
	s8Ret = nm_write_reg(0x142c, val32);
  401ae6:	9901      	ldr	r1, [sp, #4]
  401ae8:	f241 402c 	movw	r0, #5164	; 0x142c
  401aec:	4b11      	ldr	r3, [pc, #68]	; (401b34 <pullup_ctrl+0x6c>)
  401aee:	4798      	blx	r3
	if(s8Ret  != M2M_SUCCESS) {
  401af0:	4604      	mov	r4, r0
  401af2:	b990      	cbnz	r0, 401b1a <pullup_ctrl+0x52>
		M2M_ERR("[pullup_ctrl]: failed to write\n");
		goto _EXIT;
	}
_EXIT:
	return s8Ret;
}
  401af4:	4620      	mov	r0, r4
  401af6:	b002      	add	sp, #8
  401af8:	bd70      	pop	{r4, r5, r6, pc}
  401afa:	4604      	mov	r4, r0
		M2M_ERR("[pullup_ctrl]: failed to read\n");
  401afc:	f44f 7214 	mov.w	r2, #592	; 0x250
  401b00:	490d      	ldr	r1, [pc, #52]	; (401b38 <pullup_ctrl+0x70>)
  401b02:	480e      	ldr	r0, [pc, #56]	; (401b3c <pullup_ctrl+0x74>)
  401b04:	4d0e      	ldr	r5, [pc, #56]	; (401b40 <pullup_ctrl+0x78>)
  401b06:	47a8      	blx	r5
  401b08:	480e      	ldr	r0, [pc, #56]	; (401b44 <pullup_ctrl+0x7c>)
  401b0a:	47a8      	blx	r5
  401b0c:	480e      	ldr	r0, [pc, #56]	; (401b48 <pullup_ctrl+0x80>)
  401b0e:	47a8      	blx	r5
		goto _EXIT;
  401b10:	e7f0      	b.n	401af4 <pullup_ctrl+0x2c>
		val32 |= pinmask;
  401b12:	9b01      	ldr	r3, [sp, #4]
  401b14:	431d      	orrs	r5, r3
  401b16:	9501      	str	r5, [sp, #4]
  401b18:	e7e5      	b.n	401ae6 <pullup_ctrl+0x1e>
		M2M_ERR("[pullup_ctrl]: failed to write\n");
  401b1a:	f240 225a 	movw	r2, #602	; 0x25a
  401b1e:	4906      	ldr	r1, [pc, #24]	; (401b38 <pullup_ctrl+0x70>)
  401b20:	4806      	ldr	r0, [pc, #24]	; (401b3c <pullup_ctrl+0x74>)
  401b22:	4d07      	ldr	r5, [pc, #28]	; (401b40 <pullup_ctrl+0x78>)
  401b24:	47a8      	blx	r5
  401b26:	4809      	ldr	r0, [pc, #36]	; (401b4c <pullup_ctrl+0x84>)
  401b28:	47a8      	blx	r5
  401b2a:	4807      	ldr	r0, [pc, #28]	; (401b48 <pullup_ctrl+0x80>)
  401b2c:	47a8      	blx	r5
		goto _EXIT;
  401b2e:	e7e1      	b.n	401af4 <pullup_ctrl+0x2c>
  401b30:	00401b81 	.word	0x00401b81
  401b34:	00401b8d 	.word	0x00401b8d
  401b38:	00416278 	.word	0x00416278
  401b3c:	00415cbc 	.word	0x00415cbc
  401b40:	0040d42d 	.word	0x0040d42d
  401b44:	004162d4 	.word	0x004162d4
  401b48:	00415ce8 	.word	0x00415ce8
  401b4c:	004162f4 	.word	0x004162f4

00401b50 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  401b50:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  401b52:	4b01      	ldr	r3, [pc, #4]	; (401b58 <nm_bus_iface_init+0x8>)
  401b54:	4798      	blx	r3
	return ret;
}
  401b56:	bd08      	pop	{r3, pc}
  401b58:	00400331 	.word	0x00400331

00401b5c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401b5c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  401b5e:	4b01      	ldr	r3, [pc, #4]	; (401b64 <nm_bus_iface_deinit+0x8>)
  401b60:	4798      	blx	r3

	return ret;
}
  401b62:	bd08      	pop	{r3, pc}
  401b64:	00400589 	.word	0x00400589

00401b68 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
  401b68:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
  401b6a:	4b01      	ldr	r3, [pc, #4]	; (401b70 <nm_bus_reset+0x8>)
  401b6c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
  401b6e:	bd08      	pop	{r3, pc}
  401b70:	00402459 	.word	0x00402459

00401b74 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  401b74:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  401b76:	4b01      	ldr	r3, [pc, #4]	; (401b7c <nm_read_reg+0x8>)
  401b78:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  401b7a:	bd08      	pop	{r3, pc}
  401b7c:	0040248d 	.word	0x0040248d

00401b80 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  401b80:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  401b82:	4b01      	ldr	r3, [pc, #4]	; (401b88 <nm_read_reg_with_ret+0x8>)
  401b84:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  401b86:	bd08      	pop	{r3, pc}
  401b88:	004024a5 	.word	0x004024a5

00401b8c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  401b8c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  401b8e:	4b01      	ldr	r3, [pc, #4]	; (401b94 <nm_write_reg+0x8>)
  401b90:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  401b92:	bd08      	pop	{r3, pc}
  401b94:	004024bd 	.word	0x004024bd

00401b98 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b9c:	4607      	mov	r7, r0
  401b9e:	4689      	mov	r9, r1
  401ba0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401ba2:	4b12      	ldr	r3, [pc, #72]	; (401bec <nm_read_block+0x54>)
  401ba4:	f8b3 8000 	ldrh.w	r8, [r3]
  401ba8:	f1a8 0808 	sub.w	r8, r8, #8
  401bac:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401bb0:	4542      	cmp	r2, r8
  401bb2:	d919      	bls.n	401be8 <nm_read_block+0x50>
  401bb4:	4644      	mov	r4, r8
  401bb6:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401bb8:	f8df a034 	ldr.w	sl, [pc, #52]	; 401bf0 <nm_read_block+0x58>
  401bbc:	4642      	mov	r2, r8
  401bbe:	eb09 0106 	add.w	r1, r9, r6
  401bc2:	4638      	mov	r0, r7
  401bc4:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401bc6:	4603      	mov	r3, r0
  401bc8:	b958      	cbnz	r0, 401be2 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  401bca:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401bcc:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401bce:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  401bd0:	42a5      	cmp	r5, r4
  401bd2:	d8f3      	bhi.n	401bbc <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401bd4:	b2aa      	uxth	r2, r5
  401bd6:	eb09 0106 	add.w	r1, r9, r6
  401bda:	4638      	mov	r0, r7
  401bdc:	4b04      	ldr	r3, [pc, #16]	; (401bf0 <nm_read_block+0x58>)
  401bde:	4798      	blx	r3
  401be0:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  401be2:	4618      	mov	r0, r3
  401be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  401be8:	2600      	movs	r6, #0
  401bea:	e7f3      	b.n	401bd4 <nm_read_block+0x3c>
  401bec:	20000094 	.word	0x20000094
  401bf0:	004025e9 	.word	0x004025e9

00401bf4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bf8:	4607      	mov	r7, r0
  401bfa:	4689      	mov	r9, r1
  401bfc:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401bfe:	4b12      	ldr	r3, [pc, #72]	; (401c48 <nm_write_block+0x54>)
  401c00:	f8b3 8000 	ldrh.w	r8, [r3]
  401c04:	f1a8 0808 	sub.w	r8, r8, #8
  401c08:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401c0c:	4542      	cmp	r2, r8
  401c0e:	d919      	bls.n	401c44 <nm_write_block+0x50>
  401c10:	4644      	mov	r4, r8
  401c12:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401c14:	f8df a034 	ldr.w	sl, [pc, #52]	; 401c4c <nm_write_block+0x58>
  401c18:	4642      	mov	r2, r8
  401c1a:	eb09 0106 	add.w	r1, r9, r6
  401c1e:	4638      	mov	r0, r7
  401c20:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401c22:	4603      	mov	r3, r0
  401c24:	b958      	cbnz	r0, 401c3e <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  401c26:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401c28:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401c2a:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  401c2c:	42a5      	cmp	r5, r4
  401c2e:	d8f3      	bhi.n	401c18 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401c30:	b2aa      	uxth	r2, r5
  401c32:	eb09 0106 	add.w	r1, r9, r6
  401c36:	4638      	mov	r0, r7
  401c38:	4b04      	ldr	r3, [pc, #16]	; (401c4c <nm_write_block+0x58>)
  401c3a:	4798      	blx	r3
  401c3c:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  401c3e:	4618      	mov	r0, r3
  401c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  401c44:	2600      	movs	r6, #0
  401c46:	e7f3      	b.n	401c30 <nm_write_block+0x3c>
  401c48:	20000094 	.word	0x20000094
  401c4c:	00402709 	.word	0x00402709

00401c50 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
  401c50:	b530      	push	{r4, r5, lr}
  401c52:	b085      	sub	sp, #20
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  401c54:	2300      	movs	r3, #0
  401c56:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
  401c58:	9301      	str	r3, [sp, #4]
  401c5a:	9302      	str	r3, [sp, #8]
	if (pstrRev != NULL)
  401c5c:	2800      	cmp	r0, #0
  401c5e:	d043      	beq.n	401ce8 <nm_get_firmware_full_info+0x98>
  401c60:	4604      	mov	r4, r0
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
  401c62:	2228      	movs	r2, #40	; 0x28
  401c64:	4619      	mov	r1, r3
  401c66:	4b2a      	ldr	r3, [pc, #168]	; (401d10 <nm_get_firmware_full_info+0xc0>)
  401c68:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
  401c6a:	a903      	add	r1, sp, #12
  401c6c:	4829      	ldr	r0, [pc, #164]	; (401d14 <nm_get_firmware_full_info+0xc4>)
  401c6e:	4b2a      	ldr	r3, [pc, #168]	; (401d18 <nm_get_firmware_full_info+0xc8>)
  401c70:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
  401c72:	4603      	mov	r3, r0
  401c74:	2800      	cmp	r0, #0
  401c76:	d138      	bne.n	401cea <nm_get_firmware_full_info+0x9a>
		{
			if(reg != 0)
  401c78:	9803      	ldr	r0, [sp, #12]
  401c7a:	2800      	cmp	r0, #0
  401c7c:	d038      	beq.n	401cf0 <nm_get_firmware_full_info+0xa0>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
  401c7e:	2208      	movs	r2, #8
  401c80:	a901      	add	r1, sp, #4
  401c82:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
  401c86:	4b25      	ldr	r3, [pc, #148]	; (401d1c <nm_get_firmware_full_info+0xcc>)
  401c88:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
  401c8a:	4603      	mov	r3, r0
  401c8c:	bb68      	cbnz	r0, 401cea <nm_get_firmware_full_info+0x9a>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
  401c8e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
  401c92:	9003      	str	r0, [sp, #12]
					if(reg != 0)
  401c94:	b378      	cbz	r0, 401cf6 <nm_get_firmware_full_info+0xa6>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
  401c96:	2228      	movs	r2, #40	; 0x28
  401c98:	4621      	mov	r1, r4
  401c9a:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
  401c9e:	4b1f      	ldr	r3, [pc, #124]	; (401d1c <nm_get_firmware_full_info+0xcc>)
  401ca0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
  401ca2:	4603      	mov	r3, r0
  401ca4:	bb08      	cbnz	r0, 401cea <nm_get_firmware_full_info+0x9a>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
  401ca6:	7921      	ldrb	r1, [r4, #4]
  401ca8:	79a2      	ldrb	r2, [r4, #6]
  401caa:	f002 020f 	and.w	r2, r2, #15
  401cae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  401cb2:	7960      	ldrb	r0, [r4, #5]
  401cb4:	0100      	lsls	r0, r0, #4
  401cb6:	b2c0      	uxtb	r0, r0
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
  401cb8:	79e5      	ldrb	r5, [r4, #7]
  401cba:	7a61      	ldrb	r1, [r4, #9]
  401cbc:	f001 010f 	and.w	r1, r1, #15
  401cc0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  401cc4:	7a24      	ldrb	r4, [r4, #8]
  401cc6:	0124      	lsls	r4, r4, #4
  401cc8:	b2e4      	uxtb	r4, r4
  401cca:	4321      	orrs	r1, r4
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
  401ccc:	4302      	orrs	r2, r0
  401cce:	d015      	beq.n	401cfc <nm_get_firmware_full_info+0xac>
  401cd0:	b1b9      	cbz	r1, 401d02 <nm_get_firmware_full_info+0xb2>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
  401cd2:	f241 3052 	movw	r0, #4946	; 0x1352
  401cd6:	4281      	cmp	r1, r0
  401cd8:	d816      	bhi.n	401d08 <nm_get_firmware_full_info+0xb8>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
  401cda:	f241 3151 	movw	r1, #4945	; 0x1351
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
  401cde:	428a      	cmp	r2, r1
  401ce0:	bf98      	it	ls
  401ce2:	f06f 030c 	mvnls.w	r3, #12
  401ce6:	e000      	b.n	401cea <nm_get_firmware_full_info+0x9a>
	sint8	ret = M2M_SUCCESS;
  401ce8:	2300      	movs	r3, #0
			}
		}
	}
EXIT:
	return ret;
}
  401cea:	4618      	mov	r0, r3
  401cec:	b005      	add	sp, #20
  401cee:	bd30      	pop	{r4, r5, pc}
				ret = M2M_ERR_FAIL;
  401cf0:	f06f 030b 	mvn.w	r3, #11
  401cf4:	e7f9      	b.n	401cea <nm_get_firmware_full_info+0x9a>
						ret = M2M_ERR_FAIL;
  401cf6:	f06f 030b 	mvn.w	r3, #11
  401cfa:	e7f6      	b.n	401cea <nm_get_firmware_full_info+0x9a>
								ret = M2M_ERR_FAIL;
  401cfc:	f06f 030b 	mvn.w	r3, #11
  401d00:	e7f3      	b.n	401cea <nm_get_firmware_full_info+0x9a>
  401d02:	f06f 030b 	mvn.w	r3, #11
  401d06:	e7f0      	b.n	401cea <nm_get_firmware_full_info+0x9a>
								ret = M2M_ERR_FW_VER_MISMATCH;
  401d08:	f06f 030c 	mvn.w	r3, #12
  401d0c:	e7ed      	b.n	401cea <nm_get_firmware_full_info+0x9a>
  401d0e:	bf00      	nop
  401d10:	004005dd 	.word	0x004005dd
  401d14:	000c0008 	.word	0x000c0008
  401d18:	00401b81 	.word	0x00401b81
  401d1c:	00401b99 	.word	0x00401b99

00401d20 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  401d20:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  401d22:	2800      	cmp	r0, #0
  401d24:	d037      	beq.n	401d96 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  401d26:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  401d28:	1e63      	subs	r3, r4, #1
  401d2a:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  401d2c:	2b04      	cmp	r3, #4
  401d2e:	bf28      	it	cs
  401d30:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  401d32:	2000      	movs	r0, #0
  401d34:	4b1e      	ldr	r3, [pc, #120]	; (401db0 <nm_drv_init+0x90>)
  401d36:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d38:	4605      	mov	r5, r0
  401d3a:	2800      	cmp	r0, #0
  401d3c:	d12d      	bne.n	401d9a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401d3e:	481d      	ldr	r0, [pc, #116]	; (401db4 <nm_drv_init+0x94>)
  401d40:	4d1d      	ldr	r5, [pc, #116]	; (401db8 <nm_drv_init+0x98>)
  401d42:	47a8      	blx	r5
  401d44:	4b1d      	ldr	r3, [pc, #116]	; (401dbc <nm_drv_init+0x9c>)
  401d46:	4798      	blx	r3
  401d48:	4601      	mov	r1, r0
  401d4a:	481d      	ldr	r0, [pc, #116]	; (401dc0 <nm_drv_init+0xa0>)
  401d4c:	47a8      	blx	r5
  401d4e:	481d      	ldr	r0, [pc, #116]	; (401dc4 <nm_drv_init+0xa4>)
  401d50:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401d52:	4b1d      	ldr	r3, [pc, #116]	; (401dc8 <nm_drv_init+0xa8>)
  401d54:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
  401d56:	4620      	mov	r0, r4
  401d58:	4b1c      	ldr	r3, [pc, #112]	; (401dcc <nm_drv_init+0xac>)
  401d5a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d5c:	4605      	mov	r5, r0
  401d5e:	b9b0      	cbnz	r0, 401d8e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401d60:	4620      	mov	r0, r4
  401d62:	4b1b      	ldr	r3, [pc, #108]	; (401dd0 <nm_drv_init+0xb0>)
  401d64:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d66:	4605      	mov	r5, r0
  401d68:	b988      	cbnz	r0, 401d8e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401d6a:	3c02      	subs	r4, #2
  401d6c:	b2e4      	uxtb	r4, r4
  401d6e:	2c01      	cmp	r4, #1
  401d70:	d90f      	bls.n	401d92 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401d72:	4b18      	ldr	r3, [pc, #96]	; (401dd4 <nm_drv_init+0xb4>)
  401d74:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d76:	4605      	mov	r5, r0
  401d78:	b158      	cbz	r0, 401d92 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  401d7a:	f240 1255 	movw	r2, #341	; 0x155
  401d7e:	4916      	ldr	r1, [pc, #88]	; (401dd8 <nm_drv_init+0xb8>)
  401d80:	4816      	ldr	r0, [pc, #88]	; (401ddc <nm_drv_init+0xbc>)
  401d82:	4c0d      	ldr	r4, [pc, #52]	; (401db8 <nm_drv_init+0x98>)
  401d84:	47a0      	blx	r4
  401d86:	4816      	ldr	r0, [pc, #88]	; (401de0 <nm_drv_init+0xc0>)
  401d88:	47a0      	blx	r4
  401d8a:	480e      	ldr	r0, [pc, #56]	; (401dc4 <nm_drv_init+0xa4>)
  401d8c:	47a0      	blx	r4
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401d8e:	4b15      	ldr	r3, [pc, #84]	; (401de4 <nm_drv_init+0xc4>)
  401d90:	4798      	blx	r3
ERR1:
	return ret;
}
  401d92:	4628      	mov	r0, r5
  401d94:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401d96:	2401      	movs	r4, #1
  401d98:	e7cb      	b.n	401d32 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  401d9a:	f240 1227 	movw	r2, #295	; 0x127
  401d9e:	490e      	ldr	r1, [pc, #56]	; (401dd8 <nm_drv_init+0xb8>)
  401da0:	480e      	ldr	r0, [pc, #56]	; (401ddc <nm_drv_init+0xbc>)
  401da2:	4c05      	ldr	r4, [pc, #20]	; (401db8 <nm_drv_init+0x98>)
  401da4:	47a0      	blx	r4
  401da6:	4810      	ldr	r0, [pc, #64]	; (401de8 <nm_drv_init+0xc8>)
  401da8:	47a0      	blx	r4
  401daa:	4806      	ldr	r0, [pc, #24]	; (401dc4 <nm_drv_init+0xa4>)
  401dac:	47a0      	blx	r4
		goto ERR1;
  401dae:	e7f0      	b.n	401d92 <nm_drv_init+0x72>
  401db0:	00401b51 	.word	0x00401b51
  401db4:	00415fdc 	.word	0x00415fdc
  401db8:	0040d42d 	.word	0x0040d42d
  401dbc:	004016d5 	.word	0x004016d5
  401dc0:	004163e4 	.word	0x004163e4
  401dc4:	00415ce8 	.word	0x00415ce8
  401dc8:	004024d5 	.word	0x004024d5
  401dcc:	004018d5 	.word	0x004018d5
  401dd0:	004019d1 	.word	0x004019d1
  401dd4:	00401671 	.word	0x00401671
  401dd8:	0041632c 	.word	0x0041632c
  401ddc:	00415cbc 	.word	0x00415cbc
  401de0:	004163a8 	.word	0x004163a8
  401de4:	00401b5d 	.word	0x00401b5d
  401de8:	004163c8 	.word	0x004163c8

00401dec <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401dec:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401dee:	4b19      	ldr	r3, [pc, #100]	; (401e54 <nm_drv_deinit+0x68>)
  401df0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401df2:	b958      	cbnz	r0, 401e0c <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401df4:	2000      	movs	r0, #0
  401df6:	4b18      	ldr	r3, [pc, #96]	; (401e58 <nm_drv_deinit+0x6c>)
  401df8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401dfa:	4604      	mov	r4, r0
  401dfc:	b998      	cbnz	r0, 401e26 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  401dfe:	4b17      	ldr	r3, [pc, #92]	; (401e5c <nm_drv_deinit+0x70>)
  401e00:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e02:	4604      	mov	r4, r0
  401e04:	b9d0      	cbnz	r0, 401e3c <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401e06:	4b16      	ldr	r3, [pc, #88]	; (401e60 <nm_drv_deinit+0x74>)
  401e08:	4798      	blx	r3
  401e0a:	e00a      	b.n	401e22 <nm_drv_deinit+0x36>
  401e0c:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401e0e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  401e12:	4914      	ldr	r1, [pc, #80]	; (401e64 <nm_drv_deinit+0x78>)
  401e14:	4814      	ldr	r0, [pc, #80]	; (401e68 <nm_drv_deinit+0x7c>)
  401e16:	4d15      	ldr	r5, [pc, #84]	; (401e6c <nm_drv_deinit+0x80>)
  401e18:	47a8      	blx	r5
  401e1a:	4815      	ldr	r0, [pc, #84]	; (401e70 <nm_drv_deinit+0x84>)
  401e1c:	47a8      	blx	r5
  401e1e:	4815      	ldr	r0, [pc, #84]	; (401e74 <nm_drv_deinit+0x88>)
  401e20:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  401e22:	4620      	mov	r0, r4
  401e24:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401e26:	f240 1273 	movw	r2, #371	; 0x173
  401e2a:	490e      	ldr	r1, [pc, #56]	; (401e64 <nm_drv_deinit+0x78>)
  401e2c:	480e      	ldr	r0, [pc, #56]	; (401e68 <nm_drv_deinit+0x7c>)
  401e2e:	4d0f      	ldr	r5, [pc, #60]	; (401e6c <nm_drv_deinit+0x80>)
  401e30:	47a8      	blx	r5
  401e32:	4811      	ldr	r0, [pc, #68]	; (401e78 <nm_drv_deinit+0x8c>)
  401e34:	47a8      	blx	r5
  401e36:	480f      	ldr	r0, [pc, #60]	; (401e74 <nm_drv_deinit+0x88>)
  401e38:	47a8      	blx	r5
		goto ERR1;
  401e3a:	e7f2      	b.n	401e22 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401e3c:	f240 1279 	movw	r2, #377	; 0x179
  401e40:	4908      	ldr	r1, [pc, #32]	; (401e64 <nm_drv_deinit+0x78>)
  401e42:	4809      	ldr	r0, [pc, #36]	; (401e68 <nm_drv_deinit+0x7c>)
  401e44:	4d09      	ldr	r5, [pc, #36]	; (401e6c <nm_drv_deinit+0x80>)
  401e46:	47a8      	blx	r5
  401e48:	480c      	ldr	r0, [pc, #48]	; (401e7c <nm_drv_deinit+0x90>)
  401e4a:	47a8      	blx	r5
  401e4c:	4809      	ldr	r0, [pc, #36]	; (401e74 <nm_drv_deinit+0x88>)
  401e4e:	47a8      	blx	r5
		goto ERR1;
  401e50:	e7e7      	b.n	401e22 <nm_drv_deinit+0x36>
  401e52:	bf00      	nop
  401e54:	00401a51 	.word	0x00401a51
  401e58:	004033c5 	.word	0x004033c5
  401e5c:	00401b5d 	.word	0x00401b5d
  401e60:	00402481 	.word	0x00402481
  401e64:	00416338 	.word	0x00416338
  401e68:	00415cbc 	.word	0x00415cbc
  401e6c:	0040d42d 	.word	0x0040d42d
  401e70:	00416348 	.word	0x00416348
  401e74:	00415ce8 	.word	0x00415ce8
  401e78:	00416368 	.word	0x00416368
  401e7c:	0041638c 	.word	0x0041638c

00401e80 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  401e80:	b500      	push	{lr}
  401e82:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  401e84:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  401e86:	2300      	movs	r3, #0
  401e88:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  401e8a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401e8e:	a901      	add	r1, sp, #4
  401e90:	2003      	movs	r0, #3
  401e92:	4b02      	ldr	r3, [pc, #8]	; (401e9c <nmi_spi_write+0x1c>)
  401e94:	4798      	blx	r3
}
  401e96:	b005      	add	sp, #20
  401e98:	f85d fb04 	ldr.w	pc, [sp], #4
  401e9c:	004004c1 	.word	0x004004c1

00401ea0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  401ea0:	b570      	push	{r4, r5, r6, lr}
  401ea2:	b084      	sub	sp, #16
  401ea4:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  401ea8:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  401eac:	38c1      	subs	r0, #193	; 0xc1
  401eae:	280e      	cmp	r0, #14
  401eb0:	f200 80a2 	bhi.w	401ff8 <spi_cmd+0x158>
  401eb4:	e8df f000 	tbb	[pc, r0]
  401eb8:	19664545 	.word	0x19664545
  401ebc:	5454332a 	.word	0x5454332a
  401ec0:	a0a0087f 	.word	0xa0a0087f
  401ec4:	a0a0      	.short	0xa0a0
  401ec6:	3c          	.byte	0x3c
  401ec7:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  401ec8:	0c0b      	lsrs	r3, r1, #16
  401eca:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401ece:	0a0b      	lsrs	r3, r1, #8
  401ed0:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  401ed4:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  401ed8:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  401eda:	4b55      	ldr	r3, [pc, #340]	; (402030 <spi_cmd+0x190>)
  401edc:	781b      	ldrb	r3, [r3, #0]
  401ede:	2b00      	cmp	r3, #0
  401ee0:	f000 808c 	beq.w	401ffc <spi_cmd+0x15c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
  401ee4:	3901      	subs	r1, #1
  401ee6:	b2c9      	uxtb	r1, r1
  401ee8:	e09a      	b.n	402020 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  401eea:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401eee:	b944      	cbnz	r4, 401f02 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  401ef0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  401ef4:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  401ef8:	2300      	movs	r3, #0
  401efa:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401efe:	2105      	movs	r1, #5
		break;
  401f00:	e7eb      	b.n	401eda <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  401f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401f06:	f88d 3005 	strb.w	r3, [sp, #5]
  401f0a:	e7f3      	b.n	401ef4 <spi_cmd+0x54>
		bc[1] = 0x00;
  401f0c:	2300      	movs	r3, #0
  401f0e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401f12:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401f16:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401f1a:	2105      	movs	r1, #5
		break;
  401f1c:	e7dd      	b.n	401eda <spi_cmd+0x3a>
		bc[1] = 0x00;
  401f1e:	2300      	movs	r3, #0
  401f20:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401f24:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401f28:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401f2c:	2105      	movs	r1, #5
		break;
  401f2e:	e7d4      	b.n	401eda <spi_cmd+0x3a>
		bc[1] = 0xff;
  401f30:	23ff      	movs	r3, #255	; 0xff
  401f32:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  401f36:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  401f3a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401f3e:	2105      	movs	r1, #5
		break;
  401f40:	e7cb      	b.n	401eda <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  401f42:	0c0a      	lsrs	r2, r1, #16
  401f44:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401f48:	0a0a      	lsrs	r2, r1, #8
  401f4a:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401f4e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  401f52:	0a1a      	lsrs	r2, r3, #8
  401f54:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  401f58:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  401f5c:	2107      	movs	r1, #7
		break;
  401f5e:	e7bc      	b.n	401eda <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  401f60:	0c0a      	lsrs	r2, r1, #16
  401f62:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401f66:	0a0a      	lsrs	r2, r1, #8
  401f68:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401f6c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  401f70:	0c1a      	lsrs	r2, r3, #16
  401f72:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  401f76:	0a1a      	lsrs	r2, r3, #8
  401f78:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  401f7c:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  401f80:	2108      	movs	r1, #8
		break;
  401f82:	e7aa      	b.n	401eda <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  401f84:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401f88:	b984      	cbnz	r4, 401fac <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  401f8a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  401f8e:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  401f92:	0e13      	lsrs	r3, r2, #24
  401f94:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  401f98:	0c13      	lsrs	r3, r2, #16
  401f9a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  401f9e:	0a13      	lsrs	r3, r2, #8
  401fa0:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  401fa4:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  401fa8:	2108      	movs	r1, #8
		break;
  401faa:	e796      	b.n	401eda <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  401fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401fb0:	f88d 3005 	strb.w	r3, [sp, #5]
  401fb4:	e7eb      	b.n	401f8e <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  401fb6:	0c0b      	lsrs	r3, r1, #16
  401fb8:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401fbc:	0a0b      	lsrs	r3, r1, #8
  401fbe:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  401fc2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  401fc6:	0e13      	lsrs	r3, r2, #24
  401fc8:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  401fcc:	0c13      	lsrs	r3, r2, #16
  401fce:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  401fd2:	0a13      	lsrs	r3, r2, #8
  401fd4:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  401fd8:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  401fdc:	2109      	movs	r1, #9
		break;
  401fde:	e77c      	b.n	401eda <spi_cmd+0x3a>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  401fe0:	f240 1227 	movw	r2, #295	; 0x127
  401fe4:	4913      	ldr	r1, [pc, #76]	; (402034 <spi_cmd+0x194>)
  401fe6:	4814      	ldr	r0, [pc, #80]	; (402038 <spi_cmd+0x198>)
  401fe8:	4c14      	ldr	r4, [pc, #80]	; (40203c <spi_cmd+0x19c>)
  401fea:	47a0      	blx	r4
  401fec:	4814      	ldr	r0, [pc, #80]	; (402040 <spi_cmd+0x1a0>)
  401fee:	47a0      	blx	r4
  401ff0:	4814      	ldr	r0, [pc, #80]	; (402044 <spi_cmd+0x1a4>)
  401ff2:	47a0      	blx	r4
			result = N_FAIL;
  401ff4:	2000      	movs	r0, #0
  401ff6:	e019      	b.n	40202c <spi_cmd+0x18c>
	switch (cmd) {
  401ff8:	2000      	movs	r0, #0
  401ffa:	e017      	b.n	40202c <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401ffc:	1e4e      	subs	r6, r1, #1
  401ffe:	ab01      	add	r3, sp, #4
  402000:	199d      	adds	r5, r3, r6
  402002:	207f      	movs	r0, #127	; 0x7f
  402004:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  402006:	4c10      	ldr	r4, [pc, #64]	; (402048 <spi_cmd+0x1a8>)
  402008:	f812 3b01 	ldrb.w	r3, [r2], #1
  40200c:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  402010:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  402012:	4295      	cmp	r5, r2
  402014:	d1f8      	bne.n	402008 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402016:	ab04      	add	r3, sp, #16
  402018:	441e      	add	r6, r3
  40201a:	0043      	lsls	r3, r0, #1
  40201c:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402020:	a801      	add	r0, sp, #4
  402022:	4b0a      	ldr	r3, [pc, #40]	; (40204c <spi_cmd+0x1ac>)
  402024:	4798      	blx	r3
  402026:	2800      	cmp	r0, #0
  402028:	d1da      	bne.n	401fe0 <spi_cmd+0x140>
  40202a:	2001      	movs	r0, #1
		}
	}

	return result;
}
  40202c:	b004      	add	sp, #16
  40202e:	bd70      	pop	{r4, r5, r6, pc}
  402030:	20000c80 	.word	0x20000c80
  402034:	004163f4 	.word	0x004163f4
  402038:	00415cbc 	.word	0x00415cbc
  40203c:	0040d42d 	.word	0x0040d42d
  402040:	0041688c 	.word	0x0041688c
  402044:	00415ce8 	.word	0x00415ce8
  402048:	00416480 	.word	0x00416480
  40204c:	00401e81 	.word	0x00401e81

00402050 <nmi_spi_read>:
{
  402050:	b500      	push	{lr}
  402052:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
  402054:	2300      	movs	r3, #0
  402056:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  402058:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  40205a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  40205e:	a901      	add	r1, sp, #4
  402060:	2003      	movs	r0, #3
  402062:	4b02      	ldr	r3, [pc, #8]	; (40206c <nmi_spi_read+0x1c>)
  402064:	4798      	blx	r3
}
  402066:	b005      	add	sp, #20
  402068:	f85d fb04 	ldr.w	pc, [sp], #4
  40206c:	004004c1 	.word	0x004004c1

00402070 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402074:	b082      	sub	sp, #8
  402076:	4605      	mov	r5, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
  402078:	28cf      	cmp	r0, #207	; 0xcf
  40207a:	d02a      	beq.n	4020d2 <spi_cmd_rsp+0x62>
  40207c:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  402080:	b2db      	uxtb	r3, r3
  402082:	2b01      	cmp	r3, #1
  402084:	d925      	bls.n	4020d2 <spi_cmd_rsp+0x62>
{
  402086:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402088:	f04f 0801 	mov.w	r8, #1
  40208c:	4f23      	ldr	r7, [pc, #140]	; (40211c <spi_cmd_rsp+0xac>)
  40208e:	4641      	mov	r1, r8
  402090:	f10d 0007 	add.w	r0, sp, #7
  402094:	47b8      	blx	r7
  402096:	4606      	mov	r6, r0
  402098:	bb20      	cbnz	r0, 4020e4 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  40209a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40209e:	42ab      	cmp	r3, r5
  4020a0:	d02c      	beq.n	4020fc <spi_cmd_rsp+0x8c>
  4020a2:	1e63      	subs	r3, r4, #1
  4020a4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4020a8:	d1f1      	bne.n	40208e <spi_cmd_rsp+0x1e>
  4020aa:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4020ac:	2701      	movs	r7, #1
  4020ae:	4d1b      	ldr	r5, [pc, #108]	; (40211c <spi_cmd_rsp+0xac>)
  4020b0:	4639      	mov	r1, r7
  4020b2:	f10d 0007 	add.w	r0, sp, #7
  4020b6:	47a8      	blx	r5
  4020b8:	bb10      	cbnz	r0, 402100 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  4020ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4020be:	b353      	cbz	r3, 402116 <spi_cmd_rsp+0xa6>
  4020c0:	1e63      	subs	r3, r4, #1
  4020c2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4020c6:	d1f3      	bne.n	4020b0 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  4020c8:	2601      	movs	r6, #1

_fail_:

	return result;
}
  4020ca:	4630      	mov	r0, r6
  4020cc:	b002      	add	sp, #8
  4020ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4020d2:	2101      	movs	r1, #1
  4020d4:	f10d 0007 	add.w	r0, sp, #7
  4020d8:	4b10      	ldr	r3, [pc, #64]	; (40211c <spi_cmd_rsp+0xac>)
  4020da:	4798      	blx	r3
  4020dc:	2800      	cmp	r0, #0
  4020de:	d0d2      	beq.n	402086 <spi_cmd_rsp+0x16>
			result = N_FAIL;
  4020e0:	2600      	movs	r6, #0
  4020e2:	e7f2      	b.n	4020ca <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  4020e4:	f44f 72b1 	mov.w	r2, #354	; 0x162
  4020e8:	490d      	ldr	r1, [pc, #52]	; (402120 <spi_cmd_rsp+0xb0>)
  4020ea:	480e      	ldr	r0, [pc, #56]	; (402124 <spi_cmd_rsp+0xb4>)
  4020ec:	4c0e      	ldr	r4, [pc, #56]	; (402128 <spi_cmd_rsp+0xb8>)
  4020ee:	47a0      	blx	r4
  4020f0:	480e      	ldr	r0, [pc, #56]	; (40212c <spi_cmd_rsp+0xbc>)
  4020f2:	47a0      	blx	r4
  4020f4:	480e      	ldr	r0, [pc, #56]	; (402130 <spi_cmd_rsp+0xc0>)
  4020f6:	47a0      	blx	r4
			result = N_FAIL;
  4020f8:	2600      	movs	r6, #0
			goto _fail_;
  4020fa:	e7e6      	b.n	4020ca <spi_cmd_rsp+0x5a>
  4020fc:	240b      	movs	r4, #11
  4020fe:	e7d5      	b.n	4020ac <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402100:	f44f 72b8 	mov.w	r2, #368	; 0x170
  402104:	4906      	ldr	r1, [pc, #24]	; (402120 <spi_cmd_rsp+0xb0>)
  402106:	4807      	ldr	r0, [pc, #28]	; (402124 <spi_cmd_rsp+0xb4>)
  402108:	4c07      	ldr	r4, [pc, #28]	; (402128 <spi_cmd_rsp+0xb8>)
  40210a:	47a0      	blx	r4
  40210c:	4807      	ldr	r0, [pc, #28]	; (40212c <spi_cmd_rsp+0xbc>)
  40210e:	47a0      	blx	r4
  402110:	4807      	ldr	r0, [pc, #28]	; (402130 <spi_cmd_rsp+0xc0>)
  402112:	47a0      	blx	r4
			goto _fail_;
  402114:	e7d9      	b.n	4020ca <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  402116:	2601      	movs	r6, #1
  402118:	e7d7      	b.n	4020ca <spi_cmd_rsp+0x5a>
  40211a:	bf00      	nop
  40211c:	00402051 	.word	0x00402051
  402120:	0041640c 	.word	0x0041640c
  402124:	00415cbc 	.word	0x00415cbc
  402128:	0040d42d 	.word	0x0040d42d
  40212c:	004168b8 	.word	0x004168b8
  402130:	00415ce8 	.word	0x00415ce8

00402134 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  402134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402138:	b085      	sub	sp, #20
  40213a:	4683      	mov	fp, r0
  40213c:	468a      	mov	sl, r1
  40213e:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  402140:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402144:	4d37      	ldr	r5, [pc, #220]	; (402224 <spi_data_read+0xf0>)
  402146:	e027      	b.n	402198 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  402148:	f240 22ff 	movw	r2, #767	; 0x2ff
  40214c:	4936      	ldr	r1, [pc, #216]	; (402228 <spi_data_read+0xf4>)
  40214e:	4837      	ldr	r0, [pc, #220]	; (40222c <spi_data_read+0xf8>)
  402150:	4c37      	ldr	r4, [pc, #220]	; (402230 <spi_data_read+0xfc>)
  402152:	47a0      	blx	r4
  402154:	4837      	ldr	r0, [pc, #220]	; (402234 <spi_data_read+0x100>)
  402156:	47a0      	blx	r4
  402158:	4837      	ldr	r0, [pc, #220]	; (402238 <spi_data_read+0x104>)
  40215a:	47a0      	blx	r4
  40215c:	2300      	movs	r3, #0
  40215e:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  402160:	9801      	ldr	r0, [sp, #4]
  402162:	b005      	add	sp, #20
  402164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  402168:	2c00      	cmp	r4, #0
  40216a:	dd2e      	ble.n	4021ca <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  40216c:	4641      	mov	r1, r8
  40216e:	eb0b 0009 	add.w	r0, fp, r9
  402172:	47a8      	blx	r5
  402174:	4604      	mov	r4, r0
  402176:	2800      	cmp	r0, #0
  402178:	d134      	bne.n	4021e4 <spi_data_read+0xb0>
		if(!clockless)
  40217a:	b91f      	cbnz	r7, 402184 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  40217c:	4b2f      	ldr	r3, [pc, #188]	; (40223c <spi_data_read+0x108>)
  40217e:	781b      	ldrb	r3, [r3, #0]
  402180:	2b00      	cmp	r3, #0
  402182:	d03a      	beq.n	4021fa <spi_data_read+0xc6>
		ix += nbytes;
  402184:	44c1      	add	r9, r8
  402186:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  40218a:	ebaa 0a08 	sub.w	sl, sl, r8
  40218e:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  402192:	f1ba 0f00 	cmp.w	sl, #0
  402196:	d041      	beq.n	40221c <spi_data_read+0xe8>
  402198:	46d0      	mov	r8, sl
  40219a:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  40219e:	bf28      	it	cs
  4021a0:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = SPI_RESP_RETRY_COUNT;
  4021a4:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4021a6:	2601      	movs	r6, #1
  4021a8:	4631      	mov	r1, r6
  4021aa:	f10d 000b 	add.w	r0, sp, #11
  4021ae:	47a8      	blx	r5
  4021b0:	9001      	str	r0, [sp, #4]
  4021b2:	2800      	cmp	r0, #0
  4021b4:	d1c8      	bne.n	402148 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  4021b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4021ba:	091b      	lsrs	r3, r3, #4
  4021bc:	2b0f      	cmp	r3, #15
  4021be:	d0d3      	beq.n	402168 <spi_data_read+0x34>
  4021c0:	3c01      	subs	r4, #1
  4021c2:	b224      	sxth	r4, r4
		} while (retry--);
  4021c4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4021c8:	d1ee      	bne.n	4021a8 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  4021ca:	f240 320b 	movw	r2, #779	; 0x30b
  4021ce:	4916      	ldr	r1, [pc, #88]	; (402228 <spi_data_read+0xf4>)
  4021d0:	4816      	ldr	r0, [pc, #88]	; (40222c <spi_data_read+0xf8>)
  4021d2:	4c17      	ldr	r4, [pc, #92]	; (402230 <spi_data_read+0xfc>)
  4021d4:	47a0      	blx	r4
  4021d6:	f89d 100b 	ldrb.w	r1, [sp, #11]
  4021da:	4819      	ldr	r0, [pc, #100]	; (402240 <spi_data_read+0x10c>)
  4021dc:	47a0      	blx	r4
  4021de:	4816      	ldr	r0, [pc, #88]	; (402238 <spi_data_read+0x104>)
  4021e0:	47a0      	blx	r4
			break;
  4021e2:	e7bd      	b.n	402160 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  4021e4:	f44f 7245 	mov.w	r2, #788	; 0x314
  4021e8:	490f      	ldr	r1, [pc, #60]	; (402228 <spi_data_read+0xf4>)
  4021ea:	4810      	ldr	r0, [pc, #64]	; (40222c <spi_data_read+0xf8>)
  4021ec:	4c10      	ldr	r4, [pc, #64]	; (402230 <spi_data_read+0xfc>)
  4021ee:	47a0      	blx	r4
  4021f0:	4814      	ldr	r0, [pc, #80]	; (402244 <spi_data_read+0x110>)
  4021f2:	47a0      	blx	r4
  4021f4:	4810      	ldr	r0, [pc, #64]	; (402238 <spi_data_read+0x104>)
  4021f6:	47a0      	blx	r4
			break;
  4021f8:	e7b2      	b.n	402160 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  4021fa:	2102      	movs	r1, #2
  4021fc:	a803      	add	r0, sp, #12
  4021fe:	47a8      	blx	r5
  402200:	2800      	cmp	r0, #0
  402202:	d0bf      	beq.n	402184 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  402204:	f240 321f 	movw	r2, #799	; 0x31f
  402208:	4907      	ldr	r1, [pc, #28]	; (402228 <spi_data_read+0xf4>)
  40220a:	4808      	ldr	r0, [pc, #32]	; (40222c <spi_data_read+0xf8>)
  40220c:	4d08      	ldr	r5, [pc, #32]	; (402230 <spi_data_read+0xfc>)
  40220e:	47a8      	blx	r5
  402210:	480d      	ldr	r0, [pc, #52]	; (402248 <spi_data_read+0x114>)
  402212:	47a8      	blx	r5
  402214:	4808      	ldr	r0, [pc, #32]	; (402238 <spi_data_read+0x104>)
  402216:	47a8      	blx	r5
					result = N_FAIL;
  402218:	9401      	str	r4, [sp, #4]
					break;
  40221a:	e7a1      	b.n	402160 <spi_data_read+0x2c>
  40221c:	2301      	movs	r3, #1
  40221e:	9301      	str	r3, [sp, #4]
  402220:	e79e      	b.n	402160 <spi_data_read+0x2c>
  402222:	bf00      	nop
  402224:	00402051 	.word	0x00402051
  402228:	00416418 	.word	0x00416418
  40222c:	00415cbc 	.word	0x00415cbc
  402230:	0040d42d 	.word	0x0040d42d
  402234:	004168ec 	.word	0x004168ec
  402238:	00415ce8 	.word	0x00415ce8
  40223c:	20000c80 	.word	0x20000c80
  402240:	00416920 	.word	0x00416920
  402244:	00416950 	.word	0x00416950
  402248:	00416984 	.word	0x00416984

0040224c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  40224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402250:	b085      	sub	sp, #20
  402252:	4606      	mov	r6, r0
  402254:	9102      	str	r1, [sp, #8]
  402256:	2830      	cmp	r0, #48	; 0x30
  402258:	bf94      	ite	ls
  40225a:	23c3      	movls	r3, #195	; 0xc3
  40225c:	23c9      	movhi	r3, #201	; 0xc9
  40225e:	9303      	str	r3, [sp, #12]
  402260:	bf94      	ite	ls
  402262:	f04f 0b01 	movls.w	fp, #1
  402266:	f04f 0b00 	movhi.w	fp, #0
  40226a:	240a      	movs	r4, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  40226c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 402324 <spi_write_reg+0xd8>
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
  402270:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 402328 <spi_write_reg+0xdc>
  402274:	e02b      	b.n	4022ce <spi_write_reg+0x82>
  402276:	9803      	ldr	r0, [sp, #12]
  402278:	47d0      	blx	sl
  40227a:	4680      	mov	r8, r0
	if (result != N_OK) {
  40227c:	2801      	cmp	r0, #1
  40227e:	d03c      	beq.n	4022fa <spi_write_reg+0xae>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  402280:	f44f 7267 	mov.w	r2, #924	; 0x39c
  402284:	491f      	ldr	r1, [pc, #124]	; (402304 <spi_write_reg+0xb8>)
  402286:	4820      	ldr	r0, [pc, #128]	; (402308 <spi_write_reg+0xbc>)
  402288:	4d20      	ldr	r5, [pc, #128]	; (40230c <spi_write_reg+0xc0>)
  40228a:	47a8      	blx	r5
  40228c:	4631      	mov	r1, r6
  40228e:	4820      	ldr	r0, [pc, #128]	; (402310 <spi_write_reg+0xc4>)
  402290:	47a8      	blx	r5
  402292:	4820      	ldr	r0, [pc, #128]	; (402314 <spi_write_reg+0xc8>)
  402294:	47a8      	blx	r5

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
  402296:	2001      	movs	r0, #1
  402298:	4f1f      	ldr	r7, [pc, #124]	; (402318 <spi_write_reg+0xcc>)
  40229a:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40229c:	2100      	movs	r1, #0
  40229e:	9100      	str	r1, [sp, #0]
  4022a0:	460b      	mov	r3, r1
  4022a2:	460a      	mov	r2, r1
  4022a4:	20cf      	movs	r0, #207	; 0xcf
  4022a6:	47c8      	blx	r9
		spi_cmd_rsp(CMD_RESET);
  4022a8:	20cf      	movs	r0, #207	; 0xcf
  4022aa:	47d0      	blx	sl
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
  4022ac:	f240 32af 	movw	r2, #943	; 0x3af
  4022b0:	4914      	ldr	r1, [pc, #80]	; (402304 <spi_write_reg+0xb8>)
  4022b2:	4815      	ldr	r0, [pc, #84]	; (402308 <spi_write_reg+0xbc>)
  4022b4:	4d15      	ldr	r5, [pc, #84]	; (40230c <spi_write_reg+0xc0>)
  4022b6:	47a8      	blx	r5
  4022b8:	9b02      	ldr	r3, [sp, #8]
  4022ba:	4632      	mov	r2, r6
  4022bc:	4621      	mov	r1, r4
  4022be:	4817      	ldr	r0, [pc, #92]	; (40231c <spi_write_reg+0xd0>)
  4022c0:	47a8      	blx	r5
  4022c2:	4814      	ldr	r0, [pc, #80]	; (402314 <spi_write_reg+0xc8>)
  4022c4:	47a8      	blx	r5
		nm_bsp_sleep(1);
  4022c6:	2001      	movs	r0, #1
  4022c8:	47b8      	blx	r7
		retry--;
		if(retry) goto _RETRY_;
  4022ca:	3c01      	subs	r4, #1
  4022cc:	d015      	beq.n	4022fa <spi_write_reg+0xae>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  4022ce:	f8cd b000 	str.w	fp, [sp]
  4022d2:	2304      	movs	r3, #4
  4022d4:	9a02      	ldr	r2, [sp, #8]
  4022d6:	4631      	mov	r1, r6
  4022d8:	9803      	ldr	r0, [sp, #12]
  4022da:	47c8      	blx	r9
  4022dc:	4680      	mov	r8, r0
	if (result != N_OK) {
  4022de:	2801      	cmp	r0, #1
  4022e0:	d0c9      	beq.n	402276 <spi_write_reg+0x2a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  4022e2:	f240 3296 	movw	r2, #918	; 0x396
  4022e6:	4907      	ldr	r1, [pc, #28]	; (402304 <spi_write_reg+0xb8>)
  4022e8:	4807      	ldr	r0, [pc, #28]	; (402308 <spi_write_reg+0xbc>)
  4022ea:	4d08      	ldr	r5, [pc, #32]	; (40230c <spi_write_reg+0xc0>)
  4022ec:	47a8      	blx	r5
  4022ee:	4631      	mov	r1, r6
  4022f0:	480b      	ldr	r0, [pc, #44]	; (402320 <spi_write_reg+0xd4>)
  4022f2:	47a8      	blx	r5
  4022f4:	4807      	ldr	r0, [pc, #28]	; (402314 <spi_write_reg+0xc8>)
  4022f6:	47a8      	blx	r5
		goto _FAIL_;
  4022f8:	e7cd      	b.n	402296 <spi_write_reg+0x4a>
	}

	return result;
}
  4022fa:	4640      	mov	r0, r8
  4022fc:	b005      	add	sp, #20
  4022fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402302:	bf00      	nop
  402304:	00416438 	.word	0x00416438
  402308:	00415cbc 	.word	0x00415cbc
  40230c:	0040d42d 	.word	0x0040d42d
  402310:	00416a80 	.word	0x00416a80
  402314:	00415ce8 	.word	0x00415ce8
  402318:	004001d1 	.word	0x004001d1
  40231c:	00416ab8 	.word	0x00416ab8
  402320:	00416a54 	.word	0x00416a54
  402324:	00401ea1 	.word	0x00401ea1
  402328:	00402071 	.word	0x00402071

0040232c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  40232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402330:	b087      	sub	sp, #28
  402332:	9103      	str	r1, [sp, #12]
  402334:	28ff      	cmp	r0, #255	; 0xff
  402336:	bf94      	ite	ls
  402338:	23c4      	movls	r3, #196	; 0xc4
  40233a:	23ca      	movhi	r3, #202	; 0xca
  40233c:	9302      	str	r3, [sp, #8]
  40233e:	bf94      	ite	ls
  402340:	f04f 0b01 	movls.w	fp, #1
  402344:	f04f 0b00 	movhi.w	fp, #0
  402348:	240a      	movs	r4, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  40234a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 402450 <spi_read_reg+0x124>
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
  40234e:	f8df a104 	ldr.w	sl, [pc, #260]	; 402454 <spi_read_reg+0x128>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  402352:	465f      	mov	r7, fp
  402354:	4683      	mov	fp, r0
  402356:	e02a      	b.n	4023ae <spi_read_reg+0x82>
	result = spi_cmd_rsp(cmd);
  402358:	9802      	ldr	r0, [sp, #8]
  40235a:	47d0      	blx	sl
  40235c:	4680      	mov	r8, r0
	if (result != N_OK) {
  40235e:	2801      	cmp	r0, #1
  402360:	d03a      	beq.n	4023d8 <spi_read_reg+0xac>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  402362:	f240 421d 	movw	r2, #1053	; 0x41d
  402366:	4930      	ldr	r1, [pc, #192]	; (402428 <spi_read_reg+0xfc>)
  402368:	4830      	ldr	r0, [pc, #192]	; (40242c <spi_read_reg+0x100>)
  40236a:	4d31      	ldr	r5, [pc, #196]	; (402430 <spi_read_reg+0x104>)
  40236c:	47a8      	blx	r5
  40236e:	4659      	mov	r1, fp
  402370:	4830      	ldr	r0, [pc, #192]	; (402434 <spi_read_reg+0x108>)
  402372:	47a8      	blx	r5
  402374:	4830      	ldr	r0, [pc, #192]	; (402438 <spi_read_reg+0x10c>)
  402376:	47a8      	blx	r5
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
  402378:	2001      	movs	r0, #1
  40237a:	4d30      	ldr	r5, [pc, #192]	; (40243c <spi_read_reg+0x110>)
  40237c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40237e:	2100      	movs	r1, #0
  402380:	9100      	str	r1, [sp, #0]
  402382:	460b      	mov	r3, r1
  402384:	460a      	mov	r2, r1
  402386:	20cf      	movs	r0, #207	; 0xcf
  402388:	47c8      	blx	r9
		spi_cmd_rsp(CMD_RESET);
  40238a:	20cf      	movs	r0, #207	; 0xcf
  40238c:	47d0      	blx	sl
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
  40238e:	f240 423c 	movw	r2, #1084	; 0x43c
  402392:	4925      	ldr	r1, [pc, #148]	; (402428 <spi_read_reg+0xfc>)
  402394:	4825      	ldr	r0, [pc, #148]	; (40242c <spi_read_reg+0x100>)
  402396:	4e26      	ldr	r6, [pc, #152]	; (402430 <spi_read_reg+0x104>)
  402398:	47b0      	blx	r6
  40239a:	465a      	mov	r2, fp
  40239c:	4621      	mov	r1, r4
  40239e:	4828      	ldr	r0, [pc, #160]	; (402440 <spi_read_reg+0x114>)
  4023a0:	47b0      	blx	r6
  4023a2:	4825      	ldr	r0, [pc, #148]	; (402438 <spi_read_reg+0x10c>)
  4023a4:	47b0      	blx	r6
		nm_bsp_sleep(1);
  4023a6:	2001      	movs	r0, #1
  4023a8:	47a8      	blx	r5
		retry--;
		if(retry) goto _RETRY_;
  4023aa:	3c01      	subs	r4, #1
  4023ac:	d037      	beq.n	40241e <spi_read_reg+0xf2>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  4023ae:	9700      	str	r7, [sp, #0]
  4023b0:	2304      	movs	r3, #4
  4023b2:	2200      	movs	r2, #0
  4023b4:	4659      	mov	r1, fp
  4023b6:	9802      	ldr	r0, [sp, #8]
  4023b8:	47c8      	blx	r9
  4023ba:	4680      	mov	r8, r0
	if (result != N_OK) {
  4023bc:	2801      	cmp	r0, #1
  4023be:	d0cb      	beq.n	402358 <spi_read_reg+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  4023c0:	f240 4217 	movw	r2, #1047	; 0x417
  4023c4:	4918      	ldr	r1, [pc, #96]	; (402428 <spi_read_reg+0xfc>)
  4023c6:	4819      	ldr	r0, [pc, #100]	; (40242c <spi_read_reg+0x100>)
  4023c8:	4d19      	ldr	r5, [pc, #100]	; (402430 <spi_read_reg+0x104>)
  4023ca:	47a8      	blx	r5
  4023cc:	4659      	mov	r1, fp
  4023ce:	481d      	ldr	r0, [pc, #116]	; (402444 <spi_read_reg+0x118>)
  4023d0:	47a8      	blx	r5
  4023d2:	4819      	ldr	r0, [pc, #100]	; (402438 <spi_read_reg+0x10c>)
  4023d4:	47a8      	blx	r5
		goto _FAIL_;
  4023d6:	e7cf      	b.n	402378 <spi_read_reg+0x4c>
	result = spi_data_read(&tmp[0], 4, clockless);
  4023d8:	463a      	mov	r2, r7
  4023da:	2104      	movs	r1, #4
  4023dc:	a805      	add	r0, sp, #20
  4023de:	4b1a      	ldr	r3, [pc, #104]	; (402448 <spi_read_reg+0x11c>)
  4023e0:	4798      	blx	r3
  4023e2:	4680      	mov	r8, r0
	if (result != N_OK) {
  4023e4:	2801      	cmp	r0, #1
  4023e6:	d00a      	beq.n	4023fe <spi_read_reg+0xd2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  4023e8:	f240 4224 	movw	r2, #1060	; 0x424
  4023ec:	490e      	ldr	r1, [pc, #56]	; (402428 <spi_read_reg+0xfc>)
  4023ee:	480f      	ldr	r0, [pc, #60]	; (40242c <spi_read_reg+0x100>)
  4023f0:	4d0f      	ldr	r5, [pc, #60]	; (402430 <spi_read_reg+0x104>)
  4023f2:	47a8      	blx	r5
  4023f4:	4815      	ldr	r0, [pc, #84]	; (40244c <spi_read_reg+0x120>)
  4023f6:	47a8      	blx	r5
  4023f8:	480f      	ldr	r0, [pc, #60]	; (402438 <spi_read_reg+0x10c>)
  4023fa:	47a8      	blx	r5
		goto _FAIL_;
  4023fc:	e7bc      	b.n	402378 <spi_read_reg+0x4c>
		((uint32)tmp[1] << 8) |
  4023fe:	f89d 2015 	ldrb.w	r2, [sp, #21]
		((uint32)tmp[2] << 16) |
  402402:	f89d 3016 	ldrb.w	r3, [sp, #22]
  402406:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  402408:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  40240c:	f89d 2014 	ldrb.w	r2, [sp, #20]
		((uint32)tmp[1] << 8) |
  402410:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  402412:	f89d 2017 	ldrb.w	r2, [sp, #23]
		((uint32)tmp[2] << 16) |
  402416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  40241a:	9a03      	ldr	r2, [sp, #12]
  40241c:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
  40241e:	4640      	mov	r0, r8
  402420:	b007      	add	sp, #28
  402422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402426:	bf00      	nop
  402428:	00416458 	.word	0x00416458
  40242c:	00415cbc 	.word	0x00415cbc
  402430:	0040d42d 	.word	0x0040d42d
  402434:	004169e8 	.word	0x004169e8
  402438:	00415ce8 	.word	0x00415ce8
  40243c:	004001d1 	.word	0x004001d1
  402440:	00416a3c 	.word	0x00416a3c
  402444:	004169bc 	.word	0x004169bc
  402448:	00402135 	.word	0x00402135
  40244c:	00416a1c 	.word	0x00416a1c
  402450:	00401ea1 	.word	0x00401ea1
  402454:	00402071 	.word	0x00402071

00402458 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
  402458:	b530      	push	{r4, r5, lr}
  40245a:	b083      	sub	sp, #12
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40245c:	2400      	movs	r4, #0
  40245e:	9400      	str	r4, [sp, #0]
  402460:	4623      	mov	r3, r4
  402462:	4622      	mov	r2, r4
  402464:	4621      	mov	r1, r4
  402466:	20cf      	movs	r0, #207	; 0xcf
  402468:	4d03      	ldr	r5, [pc, #12]	; (402478 <nm_spi_reset+0x20>)
  40246a:	47a8      	blx	r5
	spi_cmd_rsp(CMD_RESET);
  40246c:	20cf      	movs	r0, #207	; 0xcf
  40246e:	4b03      	ldr	r3, [pc, #12]	; (40247c <nm_spi_reset+0x24>)
  402470:	4798      	blx	r3
	return M2M_SUCCESS;
}
  402472:	4620      	mov	r0, r4
  402474:	b003      	add	sp, #12
  402476:	bd30      	pop	{r4, r5, pc}
  402478:	00401ea1 	.word	0x00401ea1
  40247c:	00402071 	.word	0x00402071

00402480 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  402480:	2000      	movs	r0, #0
  402482:	4b01      	ldr	r3, [pc, #4]	; (402488 <nm_spi_deinit+0x8>)
  402484:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  402486:	4770      	bx	lr
  402488:	20000c80 	.word	0x20000c80

0040248c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  40248c:	b500      	push	{lr}
  40248e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  402490:	a901      	add	r1, sp, #4
  402492:	4b03      	ldr	r3, [pc, #12]	; (4024a0 <nm_spi_read_reg+0x14>)
  402494:	4798      	blx	r3

	return u32Val;
}
  402496:	9801      	ldr	r0, [sp, #4]
  402498:	b003      	add	sp, #12
  40249a:	f85d fb04 	ldr.w	pc, [sp], #4
  40249e:	bf00      	nop
  4024a0:	0040232d 	.word	0x0040232d

004024a4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4024a4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4024a6:	4b04      	ldr	r3, [pc, #16]	; (4024b8 <nm_spi_read_reg_with_ret+0x14>)
  4024a8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4024aa:	2801      	cmp	r0, #1

	return s8Ret;
}
  4024ac:	bf0c      	ite	eq
  4024ae:	2000      	moveq	r0, #0
  4024b0:	f06f 0005 	mvnne.w	r0, #5
  4024b4:	bd08      	pop	{r3, pc}
  4024b6:	bf00      	nop
  4024b8:	0040232d 	.word	0x0040232d

004024bc <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4024bc:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4024be:	4b04      	ldr	r3, [pc, #16]	; (4024d0 <nm_spi_write_reg+0x14>)
  4024c0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4024c2:	2801      	cmp	r0, #1

	return s8Ret;
}
  4024c4:	bf0c      	ite	eq
  4024c6:	2000      	moveq	r0, #0
  4024c8:	f06f 0005 	mvnne.w	r0, #5
  4024cc:	bd08      	pop	{r3, pc}
  4024ce:	bf00      	nop
  4024d0:	0040224d 	.word	0x0040224d

004024d4 <nm_spi_init>:
{
  4024d4:	b530      	push	{r4, r5, lr}
  4024d6:	b083      	sub	sp, #12
	uint32 reg = 0;
  4024d8:	2300      	movs	r3, #0
  4024da:	a902      	add	r1, sp, #8
  4024dc:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  4024e0:	4a34      	ldr	r2, [pc, #208]	; (4025b4 <nm_spi_init+0xe0>)
  4024e2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4024e4:	f64e 0024 	movw	r0, #59428	; 0xe824
  4024e8:	4b33      	ldr	r3, [pc, #204]	; (4025b8 <nm_spi_init+0xe4>)
  4024ea:	4798      	blx	r3
  4024ec:	b348      	cbz	r0, 402542 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  4024ee:	4b31      	ldr	r3, [pc, #196]	; (4025b4 <nm_spi_init+0xe0>)
  4024f0:	781b      	ldrb	r3, [r3, #0]
  4024f2:	b97b      	cbnz	r3, 402514 <nm_spi_init+0x40>
		reg &= ~0x70;
  4024f4:	9900      	ldr	r1, [sp, #0]
  4024f6:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  4024fa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4024fe:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  402500:	f64e 0024 	movw	r0, #59428	; 0xe824
  402504:	4b2d      	ldr	r3, [pc, #180]	; (4025bc <nm_spi_init+0xe8>)
  402506:	4798      	blx	r3
  402508:	4604      	mov	r4, r0
  40250a:	2800      	cmp	r0, #0
  40250c:	d039      	beq.n	402582 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  40250e:	2201      	movs	r2, #1
  402510:	4b28      	ldr	r3, [pc, #160]	; (4025b4 <nm_spi_init+0xe0>)
  402512:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  402514:	a901      	add	r1, sp, #4
  402516:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40251a:	4b27      	ldr	r3, [pc, #156]	; (4025b8 <nm_spi_init+0xe4>)
  40251c:	4798      	blx	r3
  40251e:	2800      	cmp	r0, #0
  402520:	d03a      	beq.n	402598 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  402522:	f64e 0024 	movw	r0, #59428	; 0xe824
  402526:	4b26      	ldr	r3, [pc, #152]	; (4025c0 <nm_spi_init+0xec>)
  402528:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40252a:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  40252e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402532:	f64e 0024 	movw	r0, #59428	; 0xe824
  402536:	4b23      	ldr	r3, [pc, #140]	; (4025c4 <nm_spi_init+0xf0>)
  402538:	4798      	blx	r3
	return M2M_SUCCESS;
  40253a:	2400      	movs	r4, #0
}
  40253c:	4620      	mov	r0, r4
  40253e:	b003      	add	sp, #12
  402540:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  402542:	2201      	movs	r2, #1
  402544:	4b1b      	ldr	r3, [pc, #108]	; (4025b4 <nm_spi_init+0xe0>)
  402546:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  402548:	f240 42c7 	movw	r2, #1223	; 0x4c7
  40254c:	491e      	ldr	r1, [pc, #120]	; (4025c8 <nm_spi_init+0xf4>)
  40254e:	481f      	ldr	r0, [pc, #124]	; (4025cc <nm_spi_init+0xf8>)
  402550:	4c1f      	ldr	r4, [pc, #124]	; (4025d0 <nm_spi_init+0xfc>)
  402552:	47a0      	blx	r4
  402554:	481f      	ldr	r0, [pc, #124]	; (4025d4 <nm_spi_init+0x100>)
  402556:	47a0      	blx	r4
  402558:	481f      	ldr	r0, [pc, #124]	; (4025d8 <nm_spi_init+0x104>)
  40255a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  40255c:	4669      	mov	r1, sp
  40255e:	f64e 0024 	movw	r0, #59428	; 0xe824
  402562:	4b15      	ldr	r3, [pc, #84]	; (4025b8 <nm_spi_init+0xe4>)
  402564:	4798      	blx	r3
  402566:	4604      	mov	r4, r0
  402568:	2800      	cmp	r0, #0
  40256a:	d1c0      	bne.n	4024ee <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  40256c:	f240 42ca 	movw	r2, #1226	; 0x4ca
  402570:	4915      	ldr	r1, [pc, #84]	; (4025c8 <nm_spi_init+0xf4>)
  402572:	4816      	ldr	r0, [pc, #88]	; (4025cc <nm_spi_init+0xf8>)
  402574:	4d16      	ldr	r5, [pc, #88]	; (4025d0 <nm_spi_init+0xfc>)
  402576:	47a8      	blx	r5
  402578:	4818      	ldr	r0, [pc, #96]	; (4025dc <nm_spi_init+0x108>)
  40257a:	47a8      	blx	r5
  40257c:	4816      	ldr	r0, [pc, #88]	; (4025d8 <nm_spi_init+0x104>)
  40257e:	47a8      	blx	r5
			return 0;
  402580:	e7dc      	b.n	40253c <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  402582:	f240 42d4 	movw	r2, #1236	; 0x4d4
  402586:	4910      	ldr	r1, [pc, #64]	; (4025c8 <nm_spi_init+0xf4>)
  402588:	4810      	ldr	r0, [pc, #64]	; (4025cc <nm_spi_init+0xf8>)
  40258a:	4d11      	ldr	r5, [pc, #68]	; (4025d0 <nm_spi_init+0xfc>)
  40258c:	47a8      	blx	r5
  40258e:	4814      	ldr	r0, [pc, #80]	; (4025e0 <nm_spi_init+0x10c>)
  402590:	47a8      	blx	r5
  402592:	4811      	ldr	r0, [pc, #68]	; (4025d8 <nm_spi_init+0x104>)
  402594:	47a8      	blx	r5
			return 0;
  402596:	e7d1      	b.n	40253c <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  402598:	f240 42de 	movw	r2, #1246	; 0x4de
  40259c:	490a      	ldr	r1, [pc, #40]	; (4025c8 <nm_spi_init+0xf4>)
  40259e:	480b      	ldr	r0, [pc, #44]	; (4025cc <nm_spi_init+0xf8>)
  4025a0:	4c0b      	ldr	r4, [pc, #44]	; (4025d0 <nm_spi_init+0xfc>)
  4025a2:	47a0      	blx	r4
  4025a4:	480f      	ldr	r0, [pc, #60]	; (4025e4 <nm_spi_init+0x110>)
  4025a6:	47a0      	blx	r4
  4025a8:	480b      	ldr	r0, [pc, #44]	; (4025d8 <nm_spi_init+0x104>)
  4025aa:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4025ac:	f06f 0405 	mvn.w	r4, #5
  4025b0:	e7c4      	b.n	40253c <nm_spi_init+0x68>
  4025b2:	bf00      	nop
  4025b4:	20000c80 	.word	0x20000c80
  4025b8:	0040232d 	.word	0x0040232d
  4025bc:	0040224d 	.word	0x0040224d
  4025c0:	0040248d 	.word	0x0040248d
  4025c4:	004024bd 	.word	0x004024bd
  4025c8:	00416474 	.word	0x00416474
  4025cc:	00415cbc 	.word	0x00415cbc
  4025d0:	0040d42d 	.word	0x0040d42d
  4025d4:	00416580 	.word	0x00416580
  4025d8:	00415ce8 	.word	0x00415ce8
  4025dc:	004165d0 	.word	0x004165d0
  4025e0:	00416600 	.word	0x00416600
  4025e4:	00416634 	.word	0x00416634

004025e8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025ec:	b087      	sub	sp, #28
  4025ee:	4681      	mov	r9, r0
  4025f0:	9103      	str	r1, [sp, #12]
  4025f2:	4616      	mov	r6, r2
  4025f4:	240a      	movs	r4, #10
	uint8 single_byte_workaround = 0;
  4025f6:	f04f 0b00 	mov.w	fp, #0
	result = spi_cmd(cmd, addr, 0, size,0);
  4025fa:	4f37      	ldr	r7, [pc, #220]	; (4026d8 <nm_spi_read_block+0xf0>)
	result = spi_cmd_rsp(cmd);
  4025fc:	f8df a104 	ldr.w	sl, [pc, #260]	; 402704 <nm_spi_read_block+0x11c>
  402600:	e02b      	b.n	40265a <nm_spi_read_block+0x72>
  402602:	20c8      	movs	r0, #200	; 0xc8
  402604:	47d0      	blx	sl
	if (result != N_OK) {
  402606:	2801      	cmp	r0, #1
  402608:	d040      	beq.n	40268c <nm_spi_read_block+0xa4>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  40260a:	f240 4263 	movw	r2, #1123	; 0x463
  40260e:	4933      	ldr	r1, [pc, #204]	; (4026dc <nm_spi_read_block+0xf4>)
  402610:	4833      	ldr	r0, [pc, #204]	; (4026e0 <nm_spi_read_block+0xf8>)
  402612:	4d34      	ldr	r5, [pc, #208]	; (4026e4 <nm_spi_read_block+0xfc>)
  402614:	47a8      	blx	r5
  402616:	4649      	mov	r1, r9
  402618:	4833      	ldr	r0, [pc, #204]	; (4026e8 <nm_spi_read_block+0x100>)
  40261a:	47a8      	blx	r5
  40261c:	4833      	ldr	r0, [pc, #204]	; (4026ec <nm_spi_read_block+0x104>)
  40261e:	47a8      	blx	r5
		nm_bsp_sleep(1);
  402620:	2001      	movs	r0, #1
  402622:	4d33      	ldr	r5, [pc, #204]	; (4026f0 <nm_spi_read_block+0x108>)
  402624:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402626:	2100      	movs	r1, #0
  402628:	9100      	str	r1, [sp, #0]
  40262a:	460b      	mov	r3, r1
  40262c:	460a      	mov	r2, r1
  40262e:	20cf      	movs	r0, #207	; 0xcf
  402630:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
  402632:	20cf      	movs	r0, #207	; 0xcf
  402634:	47d0      	blx	sl
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
  402636:	f240 4284 	movw	r2, #1156	; 0x484
  40263a:	4928      	ldr	r1, [pc, #160]	; (4026dc <nm_spi_read_block+0xf4>)
  40263c:	4828      	ldr	r0, [pc, #160]	; (4026e0 <nm_spi_read_block+0xf8>)
  40263e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4026e4 <nm_spi_read_block+0xfc>
  402642:	47c0      	blx	r8
  402644:	4633      	mov	r3, r6
  402646:	464a      	mov	r2, r9
  402648:	4621      	mov	r1, r4
  40264a:	482a      	ldr	r0, [pc, #168]	; (4026f4 <nm_spi_read_block+0x10c>)
  40264c:	47c0      	blx	r8
  40264e:	4827      	ldr	r0, [pc, #156]	; (4026ec <nm_spi_read_block+0x104>)
  402650:	47c0      	blx	r8
		nm_bsp_sleep(1);
  402652:	2001      	movs	r0, #1
  402654:	47a8      	blx	r5
		if(retry) goto _RETRY_;
  402656:	3c01      	subs	r4, #1
  402658:	d039      	beq.n	4026ce <nm_spi_read_block+0xe6>
	if (size == 1)
  40265a:	2e01      	cmp	r6, #1
		single_byte_workaround = 1;
  40265c:	bf04      	itt	eq
  40265e:	f04f 0b01 	moveq.w	fp, #1
		size = 2;
  402662:	2602      	moveq	r6, #2
	result = spi_cmd(cmd, addr, 0, size,0);
  402664:	2200      	movs	r2, #0
  402666:	9200      	str	r2, [sp, #0]
  402668:	4633      	mov	r3, r6
  40266a:	4649      	mov	r1, r9
  40266c:	20c8      	movs	r0, #200	; 0xc8
  40266e:	47b8      	blx	r7
	if (result != N_OK) {
  402670:	2801      	cmp	r0, #1
  402672:	d0c6      	beq.n	402602 <nm_spi_read_block+0x1a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  402674:	f240 425d 	movw	r2, #1117	; 0x45d
  402678:	4918      	ldr	r1, [pc, #96]	; (4026dc <nm_spi_read_block+0xf4>)
  40267a:	4819      	ldr	r0, [pc, #100]	; (4026e0 <nm_spi_read_block+0xf8>)
  40267c:	4d19      	ldr	r5, [pc, #100]	; (4026e4 <nm_spi_read_block+0xfc>)
  40267e:	47a8      	blx	r5
  402680:	4649      	mov	r1, r9
  402682:	481d      	ldr	r0, [pc, #116]	; (4026f8 <nm_spi_read_block+0x110>)
  402684:	47a8      	blx	r5
  402686:	4819      	ldr	r0, [pc, #100]	; (4026ec <nm_spi_read_block+0x104>)
  402688:	47a8      	blx	r5
  40268a:	e7c9      	b.n	402620 <nm_spi_read_block+0x38>
	if (single_byte_workaround)
  40268c:	f1bb 0f00 	cmp.w	fp, #0
  402690:	d015      	beq.n	4026be <nm_spi_read_block+0xd6>
		result = spi_data_read(tmp, size,0);
  402692:	2200      	movs	r2, #0
  402694:	4631      	mov	r1, r6
  402696:	a805      	add	r0, sp, #20
  402698:	4b18      	ldr	r3, [pc, #96]	; (4026fc <nm_spi_read_block+0x114>)
  40269a:	4798      	blx	r3
		buf[0] = tmp[0];
  40269c:	f89d 3014 	ldrb.w	r3, [sp, #20]
  4026a0:	9a03      	ldr	r2, [sp, #12]
  4026a2:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
  4026a4:	2801      	cmp	r0, #1
  4026a6:	d010      	beq.n	4026ca <nm_spi_read_block+0xe2>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  4026a8:	f240 4273 	movw	r2, #1139	; 0x473
  4026ac:	490b      	ldr	r1, [pc, #44]	; (4026dc <nm_spi_read_block+0xf4>)
  4026ae:	480c      	ldr	r0, [pc, #48]	; (4026e0 <nm_spi_read_block+0xf8>)
  4026b0:	4d0c      	ldr	r5, [pc, #48]	; (4026e4 <nm_spi_read_block+0xfc>)
  4026b2:	47a8      	blx	r5
  4026b4:	4812      	ldr	r0, [pc, #72]	; (402700 <nm_spi_read_block+0x118>)
  4026b6:	47a8      	blx	r5
  4026b8:	480c      	ldr	r0, [pc, #48]	; (4026ec <nm_spi_read_block+0x104>)
  4026ba:	47a8      	blx	r5
  4026bc:	e7b0      	b.n	402620 <nm_spi_read_block+0x38>
		result = spi_data_read(buf, size,0);
  4026be:	2200      	movs	r2, #0
  4026c0:	4631      	mov	r1, r6
  4026c2:	9803      	ldr	r0, [sp, #12]
  4026c4:	4b0d      	ldr	r3, [pc, #52]	; (4026fc <nm_spi_read_block+0x114>)
  4026c6:	4798      	blx	r3
  4026c8:	e7ec      	b.n	4026a4 <nm_spi_read_block+0xbc>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4026ca:	2000      	movs	r0, #0
  4026cc:	e001      	b.n	4026d2 <nm_spi_read_block+0xea>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4026ce:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4026d2:	b007      	add	sp, #28
  4026d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026d8:	00401ea1 	.word	0x00401ea1
  4026dc:	00416468 	.word	0x00416468
  4026e0:	00415cbc 	.word	0x00415cbc
  4026e4:	0040d42d 	.word	0x0040d42d
  4026e8:	0041668c 	.word	0x0041668c
  4026ec:	00415ce8 	.word	0x00415ce8
  4026f0:	004001d1 	.word	0x004001d1
  4026f4:	004166ec 	.word	0x004166ec
  4026f8:	0041665c 	.word	0x0041665c
  4026fc:	00402135 	.word	0x00402135
  402700:	004166c4 	.word	0x004166c4
  402704:	00402071 	.word	0x00402071

00402708 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40270c:	b089      	sub	sp, #36	; 0x24
  40270e:	9003      	str	r0, [sp, #12]
  402710:	9104      	str	r1, [sp, #16]
  402712:	4617      	mov	r7, r2
  402714:	f04f 080a 	mov.w	r8, #10
	result = spi_cmd(cmd, addr, 0, size,0);
  402718:	f8df a244 	ldr.w	sl, [pc, #580]	; 402960 <nm_spi_write_block+0x258>
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40271c:	f8df 9244 	ldr.w	r9, [pc, #580]	; 402964 <nm_spi_write_block+0x25c>
		if (!gu8Crc_off) {
  402720:	f8df b244 	ldr.w	fp, [pc, #580]	; 402968 <nm_spi_write_block+0x260>
  402724:	e029      	b.n	40277a <nm_spi_write_block+0x72>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  402726:	f240 32ca 	movw	r2, #970	; 0x3ca
  40272a:	497b      	ldr	r1, [pc, #492]	; (402918 <nm_spi_write_block+0x210>)
  40272c:	487b      	ldr	r0, [pc, #492]	; (40291c <nm_spi_write_block+0x214>)
  40272e:	4c7c      	ldr	r4, [pc, #496]	; (402920 <nm_spi_write_block+0x218>)
  402730:	47a0      	blx	r4
  402732:	4629      	mov	r1, r5
  402734:	487b      	ldr	r0, [pc, #492]	; (402924 <nm_spi_write_block+0x21c>)
  402736:	47a0      	blx	r4
  402738:	487b      	ldr	r0, [pc, #492]	; (402928 <nm_spi_write_block+0x220>)
  40273a:	47a0      	blx	r4
		nm_bsp_sleep(1);
  40273c:	2001      	movs	r0, #1
  40273e:	4d7b      	ldr	r5, [pc, #492]	; (40292c <nm_spi_write_block+0x224>)
  402740:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402742:	2100      	movs	r1, #0
  402744:	9100      	str	r1, [sp, #0]
  402746:	460b      	mov	r3, r1
  402748:	460a      	mov	r2, r1
  40274a:	20cf      	movs	r0, #207	; 0xcf
  40274c:	47d0      	blx	sl
		spi_cmd_rsp(CMD_RESET);
  40274e:	20cf      	movs	r0, #207	; 0xcf
  402750:	4b77      	ldr	r3, [pc, #476]	; (402930 <nm_spi_write_block+0x228>)
  402752:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
  402754:	f240 32f2 	movw	r2, #1010	; 0x3f2
  402758:	496f      	ldr	r1, [pc, #444]	; (402918 <nm_spi_write_block+0x210>)
  40275a:	4870      	ldr	r0, [pc, #448]	; (40291c <nm_spi_write_block+0x214>)
  40275c:	4c70      	ldr	r4, [pc, #448]	; (402920 <nm_spi_write_block+0x218>)
  40275e:	47a0      	blx	r4
  402760:	463b      	mov	r3, r7
  402762:	9a03      	ldr	r2, [sp, #12]
  402764:	4641      	mov	r1, r8
  402766:	4873      	ldr	r0, [pc, #460]	; (402934 <nm_spi_write_block+0x22c>)
  402768:	47a0      	blx	r4
  40276a:	486f      	ldr	r0, [pc, #444]	; (402928 <nm_spi_write_block+0x220>)
  40276c:	47a0      	blx	r4
		nm_bsp_sleep(1);
  40276e:	2001      	movs	r0, #1
  402770:	47a8      	blx	r5
		if(retry) goto _RETRY_;
  402772:	f1b8 0801 	subs.w	r8, r8, #1
  402776:	f000 80ca 	beq.w	40290e <nm_spi_write_block+0x206>
		size = 2;
  40277a:	2f01      	cmp	r7, #1
  40277c:	bf08      	it	eq
  40277e:	2702      	moveq	r7, #2
	result = spi_cmd(cmd, addr, 0, size,0);
  402780:	2200      	movs	r2, #0
  402782:	9200      	str	r2, [sp, #0]
  402784:	463b      	mov	r3, r7
  402786:	9d03      	ldr	r5, [sp, #12]
  402788:	4629      	mov	r1, r5
  40278a:	20c7      	movs	r0, #199	; 0xc7
  40278c:	47d0      	blx	sl
	if (result != N_OK) {
  40278e:	2801      	cmp	r0, #1
  402790:	d1c9      	bne.n	402726 <nm_spi_write_block+0x1e>
	result = spi_cmd_rsp(cmd);
  402792:	20c7      	movs	r0, #199	; 0xc7
  402794:	4b66      	ldr	r3, [pc, #408]	; (402930 <nm_spi_write_block+0x228>)
  402796:	4798      	blx	r3
	if (result != N_OK) {
  402798:	2801      	cmp	r0, #1
  40279a:	d00b      	beq.n	4027b4 <nm_spi_write_block+0xac>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  40279c:	f44f 7274 	mov.w	r2, #976	; 0x3d0
  4027a0:	495d      	ldr	r1, [pc, #372]	; (402918 <nm_spi_write_block+0x210>)
  4027a2:	485e      	ldr	r0, [pc, #376]	; (40291c <nm_spi_write_block+0x214>)
  4027a4:	4c5e      	ldr	r4, [pc, #376]	; (402920 <nm_spi_write_block+0x218>)
  4027a6:	47a0      	blx	r4
  4027a8:	9903      	ldr	r1, [sp, #12]
  4027aa:	4863      	ldr	r0, [pc, #396]	; (402938 <nm_spi_write_block+0x230>)
  4027ac:	47a0      	blx	r4
  4027ae:	485e      	ldr	r0, [pc, #376]	; (402928 <nm_spi_write_block+0x220>)
  4027b0:	47a0      	blx	r4
  4027b2:	e7c3      	b.n	40273c <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  4027b4:	2600      	movs	r6, #0
  4027b6:	f8ad 601c 	strh.w	r6, [sp, #28]
  4027ba:	463c      	mov	r4, r7
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4027bc:	f8cd 8014 	str.w	r8, [sp, #20]
  4027c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4027c4:	e01d      	b.n	402802 <nm_spi_write_block+0xfa>
				order = 0x2;
  4027c6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  4027ca:	bf94      	ite	ls
  4027cc:	2303      	movls	r3, #3
  4027ce:	2302      	movhi	r3, #2
		cmd |= order;
  4027d0:	f063 030f 	orn	r3, r3, #15
  4027d4:	f88d 301b 	strb.w	r3, [sp, #27]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4027d8:	2101      	movs	r1, #1
  4027da:	f10d 001b 	add.w	r0, sp, #27
  4027de:	47c8      	blx	r9
  4027e0:	b9f0      	cbnz	r0, 402820 <nm_spi_write_block+0x118>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4027e2:	4629      	mov	r1, r5
  4027e4:	eb08 0006 	add.w	r0, r8, r6
  4027e8:	47c8      	blx	r9
  4027ea:	2800      	cmp	r0, #0
  4027ec:	d12f      	bne.n	40284e <nm_spi_write_block+0x146>
		if (!gu8Crc_off) {
  4027ee:	f89b 3000 	ldrb.w	r3, [fp]
  4027f2:	2b00      	cmp	r3, #0
  4027f4:	d038      	beq.n	402868 <nm_spi_write_block+0x160>
		ix += nbytes;
  4027f6:	442e      	add	r6, r5
  4027f8:	b236      	sxth	r6, r6
		sz -= nbytes;
  4027fa:	1b64      	subs	r4, r4, r5
  4027fc:	b2a4      	uxth	r4, r4
	} while (sz);
  4027fe:	2c00      	cmp	r4, #0
  402800:	d04f      	beq.n	4028a2 <nm_spi_write_block+0x19a>
  402802:	4625      	mov	r5, r4
  402804:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  402808:	bf28      	it	cs
  40280a:	f44f 5500 	movcs.w	r5, #8192	; 0x2000
  40280e:	b2ad      	uxth	r5, r5
		if (ix == 0)  {
  402810:	2e00      	cmp	r6, #0
  402812:	d1d8      	bne.n	4027c6 <nm_spi_write_block+0xbe>
				order = 0x1;
  402814:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  402818:	bf94      	ite	ls
  40281a:	2303      	movls	r3, #3
  40281c:	2301      	movhi	r3, #1
  40281e:	e7d7      	b.n	4027d0 <nm_spi_write_block+0xc8>
  402820:	f8dd 8014 	ldr.w	r8, [sp, #20]
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  402824:	f44f 7254 	mov.w	r2, #848	; 0x350
  402828:	4944      	ldr	r1, [pc, #272]	; (40293c <nm_spi_write_block+0x234>)
  40282a:	483c      	ldr	r0, [pc, #240]	; (40291c <nm_spi_write_block+0x214>)
  40282c:	4c3c      	ldr	r4, [pc, #240]	; (402920 <nm_spi_write_block+0x218>)
  40282e:	47a0      	blx	r4
  402830:	4843      	ldr	r0, [pc, #268]	; (402940 <nm_spi_write_block+0x238>)
  402832:	47a0      	blx	r4
  402834:	483c      	ldr	r0, [pc, #240]	; (402928 <nm_spi_write_block+0x220>)
  402836:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  402838:	f44f 7278 	mov.w	r2, #992	; 0x3e0
  40283c:	4936      	ldr	r1, [pc, #216]	; (402918 <nm_spi_write_block+0x210>)
  40283e:	4837      	ldr	r0, [pc, #220]	; (40291c <nm_spi_write_block+0x214>)
  402840:	4c37      	ldr	r4, [pc, #220]	; (402920 <nm_spi_write_block+0x218>)
  402842:	47a0      	blx	r4
  402844:	483f      	ldr	r0, [pc, #252]	; (402944 <nm_spi_write_block+0x23c>)
  402846:	47a0      	blx	r4
  402848:	4837      	ldr	r0, [pc, #220]	; (402928 <nm_spi_write_block+0x220>)
  40284a:	47a0      	blx	r4
  40284c:	e776      	b.n	40273c <nm_spi_write_block+0x34>
  40284e:	f8dd 8014 	ldr.w	r8, [sp, #20]
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  402852:	f240 3259 	movw	r2, #857	; 0x359
  402856:	4939      	ldr	r1, [pc, #228]	; (40293c <nm_spi_write_block+0x234>)
  402858:	4830      	ldr	r0, [pc, #192]	; (40291c <nm_spi_write_block+0x214>)
  40285a:	4c31      	ldr	r4, [pc, #196]	; (402920 <nm_spi_write_block+0x218>)
  40285c:	47a0      	blx	r4
  40285e:	483a      	ldr	r0, [pc, #232]	; (402948 <nm_spi_write_block+0x240>)
  402860:	47a0      	blx	r4
  402862:	4831      	ldr	r0, [pc, #196]	; (402928 <nm_spi_write_block+0x220>)
  402864:	47a0      	blx	r4
  402866:	e7e7      	b.n	402838 <nm_spi_write_block+0x130>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  402868:	2102      	movs	r1, #2
  40286a:	a807      	add	r0, sp, #28
  40286c:	47c8      	blx	r9
  40286e:	2800      	cmp	r0, #0
  402870:	d0c1      	beq.n	4027f6 <nm_spi_write_block+0xee>
  402872:	f8dd 8014 	ldr.w	r8, [sp, #20]
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  402876:	f240 3263 	movw	r2, #867	; 0x363
  40287a:	4930      	ldr	r1, [pc, #192]	; (40293c <nm_spi_write_block+0x234>)
  40287c:	4827      	ldr	r0, [pc, #156]	; (40291c <nm_spi_write_block+0x214>)
  40287e:	4c28      	ldr	r4, [pc, #160]	; (402920 <nm_spi_write_block+0x218>)
  402880:	47a0      	blx	r4
  402882:	4832      	ldr	r0, [pc, #200]	; (40294c <nm_spi_write_block+0x244>)
  402884:	47a0      	blx	r4
  402886:	4828      	ldr	r0, [pc, #160]	; (402928 <nm_spi_write_block+0x220>)
  402888:	47a0      	blx	r4
  40288a:	e7d5      	b.n	402838 <nm_spi_write_block+0x130>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
  40288c:	f240 123b 	movw	r2, #315	; 0x13b
  402890:	492f      	ldr	r1, [pc, #188]	; (402950 <nm_spi_write_block+0x248>)
  402892:	4822      	ldr	r0, [pc, #136]	; (40291c <nm_spi_write_block+0x214>)
  402894:	4c22      	ldr	r4, [pc, #136]	; (402920 <nm_spi_write_block+0x218>)
  402896:	47a0      	blx	r4
  402898:	482e      	ldr	r0, [pc, #184]	; (402954 <nm_spi_write_block+0x24c>)
  40289a:	47a0      	blx	r4
  40289c:	4822      	ldr	r0, [pc, #136]	; (402928 <nm_spi_write_block+0x220>)
  40289e:	47a0      	blx	r4
  4028a0:	e028      	b.n	4028f4 <nm_spi_write_block+0x1ec>
  4028a2:	f8dd 8014 	ldr.w	r8, [sp, #20]
    if (!gu8Crc_off)
  4028a6:	f89b 3000 	ldrb.w	r3, [fp]
		len = 3;
  4028aa:	2b00      	cmp	r3, #0
  4028ac:	bf0c      	ite	eq
  4028ae:	2402      	moveq	r4, #2
  4028b0:	2403      	movne	r4, #3
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
  4028b2:	4621      	mov	r1, r4
  4028b4:	a807      	add	r0, sp, #28
  4028b6:	4b28      	ldr	r3, [pc, #160]	; (402958 <nm_spi_write_block+0x250>)
  4028b8:	4798      	blx	r3
  4028ba:	2800      	cmp	r0, #0
  4028bc:	d1e6      	bne.n	40288c <nm_spi_write_block+0x184>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
  4028be:	ab08      	add	r3, sp, #32
  4028c0:	4423      	add	r3, r4
  4028c2:	f813 3c05 	ldrb.w	r3, [r3, #-5]
  4028c6:	b92b      	cbnz	r3, 4028d4 <nm_spi_write_block+0x1cc>
  4028c8:	ab08      	add	r3, sp, #32
  4028ca:	441c      	add	r4, r3
  4028cc:	f814 3c06 	ldrb.w	r3, [r4, #-6]
  4028d0:	2bc3      	cmp	r3, #195	; 0xc3
  4028d2:	d01a      	beq.n	40290a <nm_spi_write_block+0x202>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
  4028d4:	f44f 72a1 	mov.w	r2, #322	; 0x142
  4028d8:	491d      	ldr	r1, [pc, #116]	; (402950 <nm_spi_write_block+0x248>)
  4028da:	4810      	ldr	r0, [pc, #64]	; (40291c <nm_spi_write_block+0x214>)
  4028dc:	4c10      	ldr	r4, [pc, #64]	; (402920 <nm_spi_write_block+0x218>)
  4028de:	47a0      	blx	r4
  4028e0:	f89d 301e 	ldrb.w	r3, [sp, #30]
  4028e4:	f89d 201d 	ldrb.w	r2, [sp, #29]
  4028e8:	f89d 101c 	ldrb.w	r1, [sp, #28]
  4028ec:	481b      	ldr	r0, [pc, #108]	; (40295c <nm_spi_write_block+0x254>)
  4028ee:	47a0      	blx	r4
  4028f0:	480d      	ldr	r0, [pc, #52]	; (402928 <nm_spi_write_block+0x220>)
  4028f2:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4028f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4028f8:	4907      	ldr	r1, [pc, #28]	; (402918 <nm_spi_write_block+0x210>)
  4028fa:	4808      	ldr	r0, [pc, #32]	; (40291c <nm_spi_write_block+0x214>)
  4028fc:	4c08      	ldr	r4, [pc, #32]	; (402920 <nm_spi_write_block+0x218>)
  4028fe:	47a0      	blx	r4
  402900:	4810      	ldr	r0, [pc, #64]	; (402944 <nm_spi_write_block+0x23c>)
  402902:	47a0      	blx	r4
  402904:	4808      	ldr	r0, [pc, #32]	; (402928 <nm_spi_write_block+0x220>)
  402906:	47a0      	blx	r4
  402908:	e718      	b.n	40273c <nm_spi_write_block+0x34>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40290a:	2000      	movs	r0, #0
  40290c:	e001      	b.n	402912 <nm_spi_write_block+0x20a>
	else s8Ret = M2M_ERR_BUS_FAIL;
  40290e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402912:	b009      	add	sp, #36	; 0x24
  402914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402918:	00416448 	.word	0x00416448
  40291c:	00415cbc 	.word	0x00415cbc
  402920:	0040d42d 	.word	0x0040d42d
  402924:	00416708 	.word	0x00416708
  402928:	00415ce8 	.word	0x00415ce8
  40292c:	004001d1 	.word	0x004001d1
  402930:	00402071 	.word	0x00402071
  402934:	004166ec 	.word	0x004166ec
  402938:	00416738 	.word	0x00416738
  40293c:	00416428 	.word	0x00416428
  402940:	00416770 	.word	0x00416770
  402944:	00416864 	.word	0x00416864
  402948:	004167a8 	.word	0x004167a8
  40294c:	004167dc 	.word	0x004167dc
  402950:	004163fc 	.word	0x004163fc
  402954:	00416814 	.word	0x00416814
  402958:	00402051 	.word	0x00402051
  40295c:	00416834 	.word	0x00416834
  402960:	00401ea1 	.word	0x00401ea1
  402964:	00401e81 	.word	0x00401e81
  402968:	20000c80 	.word	0x20000c80

0040296c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40296c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402970:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  402974:	2c00      	cmp	r4, #0
  402976:	d055      	beq.n	402a24 <Socket_ReadSocketData+0xb8>
  402978:	4681      	mov	r9, r0
  40297a:	460e      	mov	r6, r1
  40297c:	4692      	mov	sl, r2
  40297e:	4698      	mov	r8, r3
  402980:	0103      	lsls	r3, r0, #4
  402982:	4929      	ldr	r1, [pc, #164]	; (402a28 <Socket_ReadSocketData+0xbc>)
  402984:	58cb      	ldr	r3, [r1, r3]
  402986:	2b00      	cmp	r3, #0
  402988:	d04c      	beq.n	402a24 <Socket_ReadSocketData+0xb8>
  40298a:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40298e:	889b      	ldrh	r3, [r3, #4]
  402990:	b29b      	uxth	r3, r3
  402992:	2b00      	cmp	r3, #0
  402994:	d046      	beq.n	402a24 <Socket_ReadSocketData+0xb8>
  402996:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40299a:	7a9b      	ldrb	r3, [r3, #10]
  40299c:	b2db      	uxtb	r3, r3
  40299e:	2b01      	cmp	r3, #1
  4029a0:	d140      	bne.n	402a24 <Socket_ReadSocketData+0xb8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4029a2:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4029a4:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4029a8:	f8df b080 	ldr.w	fp, [pc, #128]	; 402a2c <Socket_ReadSocketData+0xc0>
  4029ac:	e015      	b.n	4029da <Socket_ReadSocketData+0x6e>
  4029ae:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4029b0:	2301      	movs	r3, #1
  4029b2:	e01a      	b.n	4029ea <Socket_ReadSocketData+0x7e>
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
  4029b4:	2301      	movs	r3, #1
  4029b6:	2200      	movs	r2, #0
  4029b8:	4611      	mov	r1, r2
  4029ba:	4610      	mov	r0, r2
  4029bc:	4c1b      	ldr	r4, [pc, #108]	; (402a2c <Socket_ReadSocketData+0xc0>)
  4029be:	47a0      	blx	r4
  4029c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4029c4:	481a      	ldr	r0, [pc, #104]	; (402a30 <Socket_ReadSocketData+0xc4>)
  4029c6:	4d1b      	ldr	r5, [pc, #108]	; (402a34 <Socket_ReadSocketData+0xc8>)
  4029c8:	47a8      	blx	r5
  4029ca:	4621      	mov	r1, r4
  4029cc:	481a      	ldr	r0, [pc, #104]	; (402a38 <Socket_ReadSocketData+0xcc>)
  4029ce:	47a8      	blx	r5
  4029d0:	481a      	ldr	r0, [pc, #104]	; (402a3c <Socket_ReadSocketData+0xd0>)
  4029d2:	47a8      	blx	r5
				break;
  4029d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
		}while(u16ReadCount != 0);
  4029d8:	b324      	cbz	r4, 402a24 <Socket_ReadSocketData+0xb8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4029da:	88bb      	ldrh	r3, [r7, #4]
  4029dc:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4029de:	b21b      	sxth	r3, r3
  4029e0:	2b00      	cmp	r3, #0
  4029e2:	dde4      	ble.n	4029ae <Socket_ReadSocketData+0x42>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4029e4:	88bd      	ldrh	r5, [r7, #4]
  4029e6:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4029e8:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4029ea:	6839      	ldr	r1, [r7, #0]
  4029ec:	462a      	mov	r2, r5
  4029ee:	4640      	mov	r0, r8
  4029f0:	47d8      	blx	fp
  4029f2:	2800      	cmp	r0, #0
  4029f4:	d1e6      	bne.n	4029c4 <Socket_ReadSocketData+0x58>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4029f6:	683b      	ldr	r3, [r7, #0]
  4029f8:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4029fa:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4029fc:	88f3      	ldrh	r3, [r6, #6]
  4029fe:	1b5b      	subs	r3, r3, r5
  402a00:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  402a02:	4b0f      	ldr	r3, [pc, #60]	; (402a40 <Socket_ReadSocketData+0xd4>)
  402a04:	681b      	ldr	r3, [r3, #0]
  402a06:	b12b      	cbz	r3, 402a14 <Socket_ReadSocketData+0xa8>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  402a08:	4b0d      	ldr	r3, [pc, #52]	; (402a40 <Socket_ReadSocketData+0xd4>)
  402a0a:	681b      	ldr	r3, [r3, #0]
  402a0c:	4632      	mov	r2, r6
  402a0e:	4651      	mov	r1, sl
  402a10:	4648      	mov	r0, r9
  402a12:	4798      	blx	r3
				u16ReadCount -= u16Read;
  402a14:	1b64      	subs	r4, r4, r5
  402a16:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  402a18:	44a8      	add	r8, r5
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
  402a1a:	7abb      	ldrb	r3, [r7, #10]
  402a1c:	2b00      	cmp	r3, #0
  402a1e:	d1db      	bne.n	4029d8 <Socket_ReadSocketData+0x6c>
  402a20:	2c00      	cmp	r4, #0
  402a22:	d1c7      	bne.n	4029b4 <Socket_ReadSocketData+0x48>
  402a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a28:	20002f44 	.word	0x20002f44
  402a2c:	00400cc5 	.word	0x00400cc5
  402a30:	00415fdc 	.word	0x00415fdc
  402a34:	0040d42d 	.word	0x0040d42d
  402a38:	00416ad4 	.word	0x00416ad4
  402a3c:	00415ce8 	.word	0x00415ce8
  402a40:	20002ff4 	.word	0x20002ff4

00402a44 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
  402a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a46:	b099      	sub	sp, #100	; 0x64
  402a48:	4614      	mov	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
  402a4a:	2841      	cmp	r0, #65	; 0x41
  402a4c:	d037      	beq.n	402abe <m2m_ip_cb+0x7a>
  402a4e:	460d      	mov	r5, r1
  402a50:	2854      	cmp	r0, #84	; 0x54
  402a52:	d034      	beq.n	402abe <m2m_ip_cb+0x7a>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  402a54:	2842      	cmp	r0, #66	; 0x42
  402a56:	d049      	beq.n	402aec <m2m_ip_cb+0xa8>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  402a58:	2843      	cmp	r0, #67	; 0x43
  402a5a:	d05f      	beq.n	402b1c <m2m_ip_cb+0xd8>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  402a5c:	2844      	cmp	r0, #68	; 0x44
  402a5e:	f000 80a5 	beq.w	402bac <m2m_ip_cb+0x168>
  402a62:	284b      	cmp	r0, #75	; 0x4b
  402a64:	f000 80a2 	beq.w	402bac <m2m_ip_cb+0x168>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402a68:	284a      	cmp	r0, #74	; 0x4a
  402a6a:	f000 80c2 	beq.w	402bf2 <m2m_ip_cb+0x1ae>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  402a6e:	2846      	cmp	r0, #70	; 0x46
  402a70:	f000 80d5 	beq.w	402c1e <m2m_ip_cb+0x1da>
  402a74:	2848      	cmp	r0, #72	; 0x48
  402a76:	f000 80fd 	beq.w	402c74 <m2m_ip_cb+0x230>
  402a7a:	284d      	cmp	r0, #77	; 0x4d
  402a7c:	f000 80cd 	beq.w	402c1a <m2m_ip_cb+0x1d6>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  402a80:	2845      	cmp	r0, #69	; 0x45
  402a82:	f000 8118 	beq.w	402cb6 <m2m_ip_cb+0x272>
  402a86:	2847      	cmp	r0, #71	; 0x47
  402a88:	f000 813a 	beq.w	402d00 <m2m_ip_cb+0x2bc>
  402a8c:	284c      	cmp	r0, #76	; 0x4c
  402a8e:	f000 8110 	beq.w	402cb2 <m2m_ip_cb+0x26e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  402a92:	2852      	cmp	r0, #82	; 0x52
  402a94:	d128      	bne.n	402ae8 <m2m_ip_cb+0xa4>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  402a96:	2301      	movs	r3, #1
  402a98:	2214      	movs	r2, #20
  402a9a:	a907      	add	r1, sp, #28
  402a9c:	4620      	mov	r0, r4
  402a9e:	4c99      	ldr	r4, [pc, #612]	; (402d04 <m2m_ip_cb+0x2c0>)
  402aa0:	47a0      	blx	r4
  402aa2:	bb08      	cbnz	r0, 402ae8 <m2m_ip_cb+0xa4>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  402aa4:	4b98      	ldr	r3, [pc, #608]	; (402d08 <m2m_ip_cb+0x2c4>)
  402aa6:	9a08      	ldr	r2, [sp, #32]
  402aa8:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  402aaa:	681b      	ldr	r3, [r3, #0]
  402aac:	b1e3      	cbz	r3, 402ae8 <m2m_ip_cb+0xa4>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  402aae:	4b96      	ldr	r3, [pc, #600]	; (402d08 <m2m_ip_cb+0x2c4>)
  402ab0:	681b      	ldr	r3, [r3, #0]
  402ab2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  402ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
  402ab8:	9807      	ldr	r0, [sp, #28]
  402aba:	4798      	blx	r3
			}
		}
	}
}
  402abc:	e014      	b.n	402ae8 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  402abe:	2300      	movs	r3, #0
  402ac0:	2204      	movs	r2, #4
  402ac2:	a907      	add	r1, sp, #28
  402ac4:	4620      	mov	r0, r4
  402ac6:	4c8f      	ldr	r4, [pc, #572]	; (402d04 <m2m_ip_cb+0x2c0>)
  402ac8:	47a0      	blx	r4
  402aca:	b968      	cbnz	r0, 402ae8 <m2m_ip_cb+0xa4>
			strBind.status = strBindReply.s8Status;
  402acc:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402ad0:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402ad4:	4b8d      	ldr	r3, [pc, #564]	; (402d0c <m2m_ip_cb+0x2c8>)
  402ad6:	681b      	ldr	r3, [r3, #0]
  402ad8:	b133      	cbz	r3, 402ae8 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  402ada:	4b8c      	ldr	r3, [pc, #560]	; (402d0c <m2m_ip_cb+0x2c8>)
  402adc:	681b      	ldr	r3, [r3, #0]
  402ade:	aa03      	add	r2, sp, #12
  402ae0:	2101      	movs	r1, #1
  402ae2:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402ae6:	4798      	blx	r3
}
  402ae8:	b019      	add	sp, #100	; 0x64
  402aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  402aec:	2300      	movs	r3, #0
  402aee:	2204      	movs	r2, #4
  402af0:	a907      	add	r1, sp, #28
  402af2:	4620      	mov	r0, r4
  402af4:	4c83      	ldr	r4, [pc, #524]	; (402d04 <m2m_ip_cb+0x2c0>)
  402af6:	47a0      	blx	r4
  402af8:	2800      	cmp	r0, #0
  402afa:	d1f5      	bne.n	402ae8 <m2m_ip_cb+0xa4>
			strListen.status = strListenReply.s8Status;
  402afc:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402b00:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402b04:	4b81      	ldr	r3, [pc, #516]	; (402d0c <m2m_ip_cb+0x2c8>)
  402b06:	681b      	ldr	r3, [r3, #0]
  402b08:	2b00      	cmp	r3, #0
  402b0a:	d0ed      	beq.n	402ae8 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  402b0c:	4b7f      	ldr	r3, [pc, #508]	; (402d0c <m2m_ip_cb+0x2c8>)
  402b0e:	681b      	ldr	r3, [r3, #0]
  402b10:	aa03      	add	r2, sp, #12
  402b12:	2102      	movs	r1, #2
  402b14:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402b18:	4798      	blx	r3
  402b1a:	e7e5      	b.n	402ae8 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402b1c:	2300      	movs	r3, #0
  402b1e:	220c      	movs	r2, #12
  402b20:	eb0d 0102 	add.w	r1, sp, r2
  402b24:	4620      	mov	r0, r4
  402b26:	4c77      	ldr	r4, [pc, #476]	; (402d04 <m2m_ip_cb+0x2c0>)
  402b28:	47a0      	blx	r4
  402b2a:	2800      	cmp	r0, #0
  402b2c:	d1dc      	bne.n	402ae8 <m2m_ip_cb+0xa4>
			if(strAcceptReply.sConnectedSock >= 0)
  402b2e:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  402b32:	2a00      	cmp	r2, #0
  402b34:	db23      	blt.n	402b7e <m2m_ip_cb+0x13a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
  402b36:	f99d 1014 	ldrsb.w	r1, [sp, #20]
  402b3a:	4b75      	ldr	r3, [pc, #468]	; (402d10 <m2m_ip_cb+0x2cc>)
  402b3c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
  402b40:	7ac9      	ldrb	r1, [r1, #11]
  402b42:	b2c9      	uxtb	r1, r1
  402b44:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402b48:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
  402b4a:	2101      	movs	r1, #1
  402b4c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  402b4e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  402b52:	3908      	subs	r1, #8
  402b54:	b289      	uxth	r1, r1
  402b56:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
  402b58:	496e      	ldr	r1, [pc, #440]	; (402d14 <m2m_ip_cb+0x2d0>)
  402b5a:	880b      	ldrh	r3, [r1, #0]
  402b5c:	3301      	adds	r3, #1
  402b5e:	b29b      	uxth	r3, r3
  402b60:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
  402b62:	880b      	ldrh	r3, [r1, #0]
  402b64:	b29b      	uxth	r3, r3
  402b66:	b91b      	cbnz	r3, 402b70 <m2m_ip_cb+0x12c>
					++gu16SessionID;
  402b68:	880b      	ldrh	r3, [r1, #0]
  402b6a:	3301      	adds	r3, #1
  402b6c:	b29b      	uxth	r3, r3
  402b6e:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  402b70:	4b68      	ldr	r3, [pc, #416]	; (402d14 <m2m_ip_cb+0x2d0>)
  402b72:	8819      	ldrh	r1, [r3, #0]
  402b74:	b289      	uxth	r1, r1
  402b76:	4b66      	ldr	r3, [pc, #408]	; (402d10 <m2m_ip_cb+0x2cc>)
  402b78:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402b7c:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  402b7e:	f88d 201c 	strb.w	r2, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  402b82:	2302      	movs	r3, #2
  402b84:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  402b88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  402b8c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  402b90:	9b04      	ldr	r3, [sp, #16]
  402b92:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  402b94:	4b5d      	ldr	r3, [pc, #372]	; (402d0c <m2m_ip_cb+0x2c8>)
  402b96:	681b      	ldr	r3, [r3, #0]
  402b98:	2b00      	cmp	r3, #0
  402b9a:	d0a5      	beq.n	402ae8 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  402b9c:	4b5b      	ldr	r3, [pc, #364]	; (402d0c <m2m_ip_cb+0x2c8>)
  402b9e:	681b      	ldr	r3, [r3, #0]
  402ba0:	aa07      	add	r2, sp, #28
  402ba2:	2104      	movs	r1, #4
  402ba4:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  402ba8:	4798      	blx	r3
  402baa:	e79d      	b.n	402ae8 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  402bac:	2300      	movs	r3, #0
  402bae:	2204      	movs	r2, #4
  402bb0:	a907      	add	r1, sp, #28
  402bb2:	4620      	mov	r0, r4
  402bb4:	4c53      	ldr	r4, [pc, #332]	; (402d04 <m2m_ip_cb+0x2c0>)
  402bb6:	47a0      	blx	r4
  402bb8:	2800      	cmp	r0, #0
  402bba:	d195      	bne.n	402ae8 <m2m_ip_cb+0xa4>
			strConnMsg.sock		= strConnectReply.sock;
  402bbc:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402bc0:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  402bc4:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  402bc8:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  402bcc:	b93b      	cbnz	r3, 402bde <m2m_ip_cb+0x19a>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  402bce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402bd2:	3b08      	subs	r3, #8
  402bd4:	b29b      	uxth	r3, r3
  402bd6:	4a4e      	ldr	r2, [pc, #312]	; (402d10 <m2m_ip_cb+0x2cc>)
  402bd8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402bdc:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  402bde:	4b4b      	ldr	r3, [pc, #300]	; (402d0c <m2m_ip_cb+0x2c8>)
  402be0:	681b      	ldr	r3, [r3, #0]
  402be2:	2b00      	cmp	r3, #0
  402be4:	d080      	beq.n	402ae8 <m2m_ip_cb+0xa4>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402be6:	4b49      	ldr	r3, [pc, #292]	; (402d0c <m2m_ip_cb+0x2c8>)
  402be8:	681b      	ldr	r3, [r3, #0]
  402bea:	aa03      	add	r2, sp, #12
  402bec:	2105      	movs	r1, #5
  402bee:	4798      	blx	r3
	{
  402bf0:	e77a      	b.n	402ae8 <m2m_ip_cb+0xa4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402bf2:	2300      	movs	r3, #0
  402bf4:	2244      	movs	r2, #68	; 0x44
  402bf6:	a907      	add	r1, sp, #28
  402bf8:	4620      	mov	r0, r4
  402bfa:	4c42      	ldr	r4, [pc, #264]	; (402d04 <m2m_ip_cb+0x2c0>)
  402bfc:	47a0      	blx	r4
  402bfe:	2800      	cmp	r0, #0
  402c00:	f47f af72 	bne.w	402ae8 <m2m_ip_cb+0xa4>
			if(gpfAppResolveCb)
  402c04:	4b44      	ldr	r3, [pc, #272]	; (402d18 <m2m_ip_cb+0x2d4>)
  402c06:	681b      	ldr	r3, [r3, #0]
  402c08:	2b00      	cmp	r3, #0
  402c0a:	f43f af6d 	beq.w	402ae8 <m2m_ip_cb+0xa4>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  402c0e:	4b42      	ldr	r3, [pc, #264]	; (402d18 <m2m_ip_cb+0x2d4>)
  402c10:	681b      	ldr	r3, [r3, #0]
  402c12:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402c14:	a807      	add	r0, sp, #28
  402c16:	4798      	blx	r3
  402c18:	e766      	b.n	402ae8 <m2m_ip_cb+0xa4>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
  402c1a:	2706      	movs	r7, #6
  402c1c:	e000      	b.n	402c20 <m2m_ip_cb+0x1dc>
  402c1e:	2706      	movs	r7, #6
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  402c20:	2300      	movs	r3, #0
  402c22:	2210      	movs	r2, #16
  402c24:	a903      	add	r1, sp, #12
  402c26:	4620      	mov	r0, r4
  402c28:	4e36      	ldr	r6, [pc, #216]	; (402d04 <m2m_ip_cb+0x2c0>)
  402c2a:	47b0      	blx	r6
  402c2c:	2800      	cmp	r0, #0
  402c2e:	f47f af5b 	bne.w	402ae8 <m2m_ip_cb+0xa4>
			sock			= strRecvReply.sock;
  402c32:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  402c36:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			gastrSockets[sock].bIsRecvPending = 0;
  402c3a:	4a35      	ldr	r2, [pc, #212]	; (402d10 <m2m_ip_cb+0x2cc>)
  402c3c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402c40:	2300      	movs	r3, #0
  402c42:	7313      	strb	r3, [r2, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  402c44:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  402c48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  402c4c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  402c50:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  402c54:	9e04      	ldr	r6, [sp, #16]
  402c56:	960a      	str	r6, [sp, #40]	; 0x28
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402c58:	88d2      	ldrh	r2, [r2, #6]
  402c5a:	b292      	uxth	r2, r2
  402c5c:	4291      	cmp	r1, r2
  402c5e:	d00b      	beq.n	402c78 <m2m_ip_cb+0x234>
				if(u16ReadSize < u16BufferSize)
  402c60:	2d10      	cmp	r5, #16
  402c62:	f67f af41 	bls.w	402ae8 <m2m_ip_cb+0xa4>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
  402c66:	2301      	movs	r3, #1
  402c68:	2200      	movs	r2, #0
  402c6a:	4611      	mov	r1, r2
  402c6c:	4610      	mov	r0, r2
  402c6e:	4c25      	ldr	r4, [pc, #148]	; (402d04 <m2m_ip_cb+0x2c0>)
  402c70:	47a0      	blx	r4
	{
  402c72:	e739      	b.n	402ae8 <m2m_ip_cb+0xa4>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  402c74:	2709      	movs	r7, #9
  402c76:	e7d3      	b.n	402c20 <m2m_ip_cb+0x1dc>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  402c78:	f1be 0f00 	cmp.w	lr, #0
  402c7c:	dd01      	ble.n	402c82 <m2m_ip_cb+0x23e>
  402c7e:	45ae      	cmp	lr, r5
  402c80:	db0e      	blt.n	402ca0 <m2m_ip_cb+0x25c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402c82:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  402c86:	2300      	movs	r3, #0
  402c88:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  402c8a:	4b20      	ldr	r3, [pc, #128]	; (402d0c <m2m_ip_cb+0x2c8>)
  402c8c:	681b      	ldr	r3, [r3, #0]
  402c8e:	2b00      	cmp	r3, #0
  402c90:	f43f af2a 	beq.w	402ae8 <m2m_ip_cb+0xa4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402c94:	4b1d      	ldr	r3, [pc, #116]	; (402d0c <m2m_ip_cb+0x2c8>)
  402c96:	681b      	ldr	r3, [r3, #0]
  402c98:	aa07      	add	r2, sp, #28
  402c9a:	4639      	mov	r1, r7
  402c9c:	4798      	blx	r3
  402c9e:	e723      	b.n	402ae8 <m2m_ip_cb+0xa4>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  402ca0:	fa1f f28e 	uxth.w	r2, lr
  402ca4:	9200      	str	r2, [sp, #0]
  402ca6:	4423      	add	r3, r4
  402ca8:	463a      	mov	r2, r7
  402caa:	a907      	add	r1, sp, #28
  402cac:	4c1b      	ldr	r4, [pc, #108]	; (402d1c <m2m_ip_cb+0x2d8>)
  402cae:	47a0      	blx	r4
  402cb0:	e71a      	b.n	402ae8 <m2m_ip_cb+0xa4>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
  402cb2:	2507      	movs	r5, #7
  402cb4:	e000      	b.n	402cb8 <m2m_ip_cb+0x274>
  402cb6:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  402cb8:	2300      	movs	r3, #0
  402cba:	2208      	movs	r2, #8
  402cbc:	a907      	add	r1, sp, #28
  402cbe:	4620      	mov	r0, r4
  402cc0:	4c10      	ldr	r4, [pc, #64]	; (402d04 <m2m_ip_cb+0x2c0>)
  402cc2:	47a0      	blx	r4
  402cc4:	2800      	cmp	r0, #0
  402cc6:	f47f af0f 	bne.w	402ae8 <m2m_ip_cb+0xa4>
			sock = strReply.sock;
  402cca:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  402cce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  402cd2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402cd6:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402cda:	4b0d      	ldr	r3, [pc, #52]	; (402d10 <m2m_ip_cb+0x2cc>)
  402cdc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402ce0:	88db      	ldrh	r3, [r3, #6]
  402ce2:	b29b      	uxth	r3, r3
  402ce4:	429a      	cmp	r2, r3
  402ce6:	f47f aeff 	bne.w	402ae8 <m2m_ip_cb+0xa4>
				if(gpfAppSocketCb)
  402cea:	4b08      	ldr	r3, [pc, #32]	; (402d0c <m2m_ip_cb+0x2c8>)
  402cec:	681b      	ldr	r3, [r3, #0]
  402cee:	2b00      	cmp	r3, #0
  402cf0:	f43f aefa 	beq.w	402ae8 <m2m_ip_cb+0xa4>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  402cf4:	4b05      	ldr	r3, [pc, #20]	; (402d0c <m2m_ip_cb+0x2c8>)
  402cf6:	681b      	ldr	r3, [r3, #0]
  402cf8:	aa03      	add	r2, sp, #12
  402cfa:	4629      	mov	r1, r5
  402cfc:	4798      	blx	r3
	{
  402cfe:	e6f3      	b.n	402ae8 <m2m_ip_cb+0xa4>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  402d00:	2508      	movs	r5, #8
  402d02:	e7d9      	b.n	402cb8 <m2m_ip_cb+0x274>
  402d04:	00400cc5 	.word	0x00400cc5
  402d08:	20002ff8 	.word	0x20002ff8
  402d0c:	20002ff4 	.word	0x20002ff4
  402d10:	20002f44 	.word	0x20002f44
  402d14:	20000c82 	.word	0x20000c82
  402d18:	20002ffc 	.word	0x20002ffc
  402d1c:	0040296d 	.word	0x0040296d

00402d20 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  402d20:	b508      	push	{r3, lr}
	if(gbSocketInit == 0)
  402d22:	4b0a      	ldr	r3, [pc, #40]	; (402d4c <socketInit+0x2c>)
  402d24:	781b      	ldrb	r3, [r3, #0]
  402d26:	b103      	cbz	r3, 402d2a <socketInit+0xa>
  402d28:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  402d2a:	22b0      	movs	r2, #176	; 0xb0
  402d2c:	2100      	movs	r1, #0
  402d2e:	4808      	ldr	r0, [pc, #32]	; (402d50 <socketInit+0x30>)
  402d30:	4b08      	ldr	r3, [pc, #32]	; (402d54 <socketInit+0x34>)
  402d32:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  402d34:	4908      	ldr	r1, [pc, #32]	; (402d58 <socketInit+0x38>)
  402d36:	2002      	movs	r0, #2
  402d38:	4b08      	ldr	r3, [pc, #32]	; (402d5c <socketInit+0x3c>)
  402d3a:	4798      	blx	r3
		gbSocketInit	= 1;
  402d3c:	2201      	movs	r2, #1
  402d3e:	4b03      	ldr	r3, [pc, #12]	; (402d4c <socketInit+0x2c>)
  402d40:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
  402d42:	2200      	movs	r2, #0
  402d44:	4b06      	ldr	r3, [pc, #24]	; (402d60 <socketInit+0x40>)
  402d46:	801a      	strh	r2, [r3, #0]
	}
}
  402d48:	e7ee      	b.n	402d28 <socketInit+0x8>
  402d4a:	bf00      	nop
  402d4c:	20000c81 	.word	0x20000c81
  402d50:	20002f44 	.word	0x20002f44
  402d54:	004005dd 	.word	0x004005dd
  402d58:	00402a45 	.word	0x00402a45
  402d5c:	00400da1 	.word	0x00400da1
  402d60:	20000c82 	.word	0x20000c82

00402d64 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  402d64:	4b02      	ldr	r3, [pc, #8]	; (402d70 <registerSocketCallback+0xc>)
  402d66:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  402d68:	4b02      	ldr	r3, [pc, #8]	; (402d74 <registerSocketCallback+0x10>)
  402d6a:	6019      	str	r1, [r3, #0]
  402d6c:	4770      	bx	lr
  402d6e:	bf00      	nop
  402d70:	20002ff4 	.word	0x20002ff4
  402d74:	20002ffc 	.word	0x20002ffc

00402d78 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  402d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d7c:	b086      	sub	sp, #24
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  402d7e:	2802      	cmp	r0, #2
  402d80:	f040 80b4 	bne.w	402eec <socket+0x174>
	{
		if(u8Type == SOCK_STREAM)
  402d84:	2901      	cmp	r1, #1
  402d86:	d007      	beq.n	402d98 <socket+0x20>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
  402d88:	2902      	cmp	r1, #2
  402d8a:	d07e      	beq.n	402e8a <socket+0x112>
	SOCKET					sock = -1;
  402d8c:	f04f 34ff 	mov.w	r4, #4294967295
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
  402d90:	4620      	mov	r0, r4
  402d92:	b006      	add	sp, #24
  402d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				u8SockID	= u8NextTcpSock;
  402d98:	4e56      	ldr	r6, [pc, #344]	; (402ef4 <socket+0x17c>)
  402d9a:	7834      	ldrb	r4, [r6, #0]
  402d9c:	b2e0      	uxtb	r0, r4
				pstrSock	= &gastrSockets[u8NextTcpSock];
  402d9e:	7835      	ldrb	r5, [r6, #0]
  402da0:	b2ed      	uxtb	r5, r5
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
  402da2:	7833      	ldrb	r3, [r6, #0]
  402da4:	3301      	adds	r3, #1
  402da6:	4954      	ldr	r1, [pc, #336]	; (402ef8 <socket+0x180>)
  402da8:	fb81 4103 	smull	r4, r1, r1, r3
  402dac:	18cc      	adds	r4, r1, r3
  402dae:	17d9      	asrs	r1, r3, #31
  402db0:	ebc1 01a4 	rsb	r1, r1, r4, asr #2
  402db4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
  402db8:	1a5b      	subs	r3, r3, r1
  402dba:	b2db      	uxtb	r3, r3
  402dbc:	7033      	strb	r3, [r6, #0]
				if(!pstrSock->bIsUsed)
  402dbe:	4b4f      	ldr	r3, [pc, #316]	; (402efc <socket+0x184>)
  402dc0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402dc4:	7a9b      	ldrb	r3, [r3, #10]
  402dc6:	b1fb      	cbz	r3, 402e08 <socket+0x90>
  402dc8:	2406      	movs	r4, #6
				u8SockID	= u8NextTcpSock;
  402dca:	4d4a      	ldr	r5, [pc, #296]	; (402ef4 <socket+0x17c>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
  402dcc:	f8df e128 	ldr.w	lr, [pc, #296]	; 402ef8 <socket+0x180>
				if(!pstrSock->bIsUsed)
  402dd0:	4f4a      	ldr	r7, [pc, #296]	; (402efc <socket+0x184>)
				u8SockID	= u8NextTcpSock;
  402dd2:	7828      	ldrb	r0, [r5, #0]
  402dd4:	b2c0      	uxtb	r0, r0
				pstrSock	= &gastrSockets[u8NextTcpSock];
  402dd6:	782e      	ldrb	r6, [r5, #0]
  402dd8:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
  402dda:	782b      	ldrb	r3, [r5, #0]
  402ddc:	3301      	adds	r3, #1
  402dde:	fb8e c103 	smull	ip, r1, lr, r3
  402de2:	eb01 0c03 	add.w	ip, r1, r3
  402de6:	17d9      	asrs	r1, r3, #31
  402de8:	ebc1 01ac 	rsb	r1, r1, ip, asr #2
  402dec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
  402df0:	1a5b      	subs	r3, r3, r1
  402df2:	b2db      	uxtb	r3, r3
  402df4:	702b      	strb	r3, [r5, #0]
				if(!pstrSock->bIsUsed)
  402df6:	eb07 1306 	add.w	r3, r7, r6, lsl #4
  402dfa:	7a9b      	ldrb	r3, [r3, #10]
  402dfc:	b143      	cbz	r3, 402e10 <socket+0x98>
  402dfe:	3c01      	subs	r4, #1
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
  402e00:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  402e04:	d1e5      	bne.n	402dd2 <socket+0x5a>
  402e06:	e7c1      	b.n	402d8c <socket+0x14>
				pstrSock	= &gastrSockets[u8NextTcpSock];
  402e08:	4b3c      	ldr	r3, [pc, #240]	; (402efc <socket+0x184>)
  402e0a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  402e0e:	e002      	b.n	402e16 <socket+0x9e>
  402e10:	4d3a      	ldr	r5, [pc, #232]	; (402efc <socket+0x184>)
  402e12:	eb05 1506 	add.w	r5, r5, r6, lsl #4
					sock = (SOCKET)u8SockID;
  402e16:	b244      	sxtb	r4, r0
		if(sock >= 0)
  402e18:	2c00      	cmp	r4, #0
  402e1a:	dbb9      	blt.n	402d90 <socket+0x18>
  402e1c:	4617      	mov	r7, r2
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  402e1e:	2210      	movs	r2, #16
  402e20:	2100      	movs	r1, #0
  402e22:	4628      	mov	r0, r5
  402e24:	4b36      	ldr	r3, [pc, #216]	; (402f00 <socket+0x188>)
  402e26:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
  402e28:	2301      	movs	r3, #1
  402e2a:	72ab      	strb	r3, [r5, #10]
			++gu16SessionID;
  402e2c:	4a35      	ldr	r2, [pc, #212]	; (402f04 <socket+0x18c>)
  402e2e:	8813      	ldrh	r3, [r2, #0]
  402e30:	3301      	adds	r3, #1
  402e32:	b29b      	uxth	r3, r3
  402e34:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
  402e36:	8813      	ldrh	r3, [r2, #0]
  402e38:	b29b      	uxth	r3, r3
  402e3a:	b91b      	cbnz	r3, 402e44 <socket+0xcc>
				++gu16SessionID;
  402e3c:	8813      	ldrh	r3, [r2, #0]
  402e3e:	3301      	adds	r3, #1
  402e40:	b29b      	uxth	r3, r3
  402e42:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
  402e44:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 402f04 <socket+0x18c>
  402e48:	f8b8 3000 	ldrh.w	r3, [r8]
  402e4c:	b29b      	uxth	r3, r3
  402e4e:	80eb      	strh	r3, [r5, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
  402e50:	482d      	ldr	r0, [pc, #180]	; (402f08 <socket+0x190>)
  402e52:	4e2e      	ldr	r6, [pc, #184]	; (402f0c <socket+0x194>)
  402e54:	47b0      	blx	r6
  402e56:	f8b8 2000 	ldrh.w	r2, [r8]
  402e5a:	b292      	uxth	r2, r2
  402e5c:	4621      	mov	r1, r4
  402e5e:	482c      	ldr	r0, [pc, #176]	; (402f10 <socket+0x198>)
  402e60:	47b0      	blx	r6
  402e62:	482c      	ldr	r0, [pc, #176]	; (402f14 <socket+0x19c>)
  402e64:	47b0      	blx	r6
			if(u8Flags & SOCKET_FLAGS_SSL)
  402e66:	f017 0f01 	tst.w	r7, #1
  402e6a:	d091      	beq.n	402d90 <socket+0x18>
				strSSLCreate.sslSock = sock;
  402e6c:	aa06      	add	r2, sp, #24
  402e6e:	f802 4d04 	strb.w	r4, [r2, #-4]!
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  402e72:	2321      	movs	r3, #33	; 0x21
  402e74:	72eb      	strb	r3, [r5, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  402e76:	2300      	movs	r3, #0
  402e78:	9302      	str	r3, [sp, #8]
  402e7a:	9301      	str	r3, [sp, #4]
  402e7c:	9300      	str	r3, [sp, #0]
  402e7e:	2304      	movs	r3, #4
  402e80:	2150      	movs	r1, #80	; 0x50
  402e82:	2002      	movs	r0, #2
  402e84:	4d24      	ldr	r5, [pc, #144]	; (402f18 <socket+0x1a0>)
  402e86:	47a8      	blx	r5
  402e88:	e782      	b.n	402d90 <socket+0x18>
				u8SockID		= u8NextUdpSock;
  402e8a:	4924      	ldr	r1, [pc, #144]	; (402f1c <socket+0x1a4>)
  402e8c:	780c      	ldrb	r4, [r1, #0]
  402e8e:	b2e4      	uxtb	r4, r4
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
  402e90:	780b      	ldrb	r3, [r1, #0]
  402e92:	4d23      	ldr	r5, [pc, #140]	; (402f20 <socket+0x1a8>)
  402e94:	eb05 1503 	add.w	r5, r5, r3, lsl #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
  402e98:	780b      	ldrb	r3, [r1, #0]
  402e9a:	3301      	adds	r3, #1
  402e9c:	4258      	negs	r0, r3
  402e9e:	f003 0303 	and.w	r3, r3, #3
  402ea2:	f000 0003 	and.w	r0, r0, #3
  402ea6:	bf58      	it	pl
  402ea8:	4243      	negpl	r3, r0
  402eaa:	b2db      	uxtb	r3, r3
  402eac:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
  402eae:	7aab      	ldrb	r3, [r5, #10]
  402eb0:	b1cb      	cbz	r3, 402ee6 <socket+0x16e>
  402eb2:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
  402eb4:	460e      	mov	r6, r1
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
  402eb6:	4f1a      	ldr	r7, [pc, #104]	; (402f20 <socket+0x1a8>)
				u8SockID		= u8NextUdpSock;
  402eb8:	7834      	ldrb	r4, [r6, #0]
  402eba:	b2e4      	uxtb	r4, r4
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
  402ebc:	7835      	ldrb	r5, [r6, #0]
  402ebe:	eb07 1505 	add.w	r5, r7, r5, lsl #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
  402ec2:	7833      	ldrb	r3, [r6, #0]
  402ec4:	3301      	adds	r3, #1
  402ec6:	4259      	negs	r1, r3
  402ec8:	f003 0303 	and.w	r3, r3, #3
  402ecc:	f001 0103 	and.w	r1, r1, #3
  402ed0:	bf58      	it	pl
  402ed2:	424b      	negpl	r3, r1
  402ed4:	b2db      	uxtb	r3, r3
  402ed6:	7033      	strb	r3, [r6, #0]
				if(!pstrSock->bIsUsed)
  402ed8:	7aab      	ldrb	r3, [r5, #10]
  402eda:	b123      	cbz	r3, 402ee6 <socket+0x16e>
  402edc:	1e43      	subs	r3, r0, #1
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
  402ede:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
  402ee2:	d1e9      	bne.n	402eb8 <socket+0x140>
  402ee4:	e752      	b.n	402d8c <socket+0x14>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
  402ee6:	3407      	adds	r4, #7
  402ee8:	b264      	sxtb	r4, r4
					break;
  402eea:	e795      	b.n	402e18 <socket+0xa0>
	SOCKET					sock = -1;
  402eec:	f04f 34ff 	mov.w	r4, #4294967295
  402ef0:	e74e      	b.n	402d90 <socket+0x18>
  402ef2:	bf00      	nop
  402ef4:	20000c84 	.word	0x20000c84
  402ef8:	92492493 	.word	0x92492493
  402efc:	20002f44 	.word	0x20002f44
  402f00:	004005dd 	.word	0x004005dd
  402f04:	20000c82 	.word	0x20000c82
  402f08:	00415fdc 	.word	0x00415fdc
  402f0c:	0040d42d 	.word	0x0040d42d
  402f10:	00416b58 	.word	0x00416b58
  402f14:	00415ce8 	.word	0x00415ce8
  402f18:	004006ed 	.word	0x004006ed
  402f1c:	20000c85 	.word	0x20000c85
  402f20:	20002fb4 	.word	0x20002fb4

00402f24 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  402f24:	b530      	push	{r4, r5, lr}
  402f26:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  402f28:	1e04      	subs	r4, r0, #0
  402f2a:	db36      	blt.n	402f9a <connect+0x76>
  402f2c:	2900      	cmp	r1, #0
  402f2e:	d037      	beq.n	402fa0 <connect+0x7c>
  402f30:	4b20      	ldr	r3, [pc, #128]	; (402fb4 <connect+0x90>)
  402f32:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402f36:	7a9b      	ldrb	r3, [r3, #10]
  402f38:	b2db      	uxtb	r3, r3
  402f3a:	2b01      	cmp	r3, #1
  402f3c:	d133      	bne.n	402fa6 <connect+0x82>
  402f3e:	2a00      	cmp	r2, #0
  402f40:	d034      	beq.n	402fac <connect+0x88>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  402f42:	4b1c      	ldr	r3, [pc, #112]	; (402fb4 <connect+0x90>)
  402f44:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402f48:	7adb      	ldrb	r3, [r3, #11]
  402f4a:	f013 0f01 	tst.w	r3, #1
  402f4e:	d007      	beq.n	402f60 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  402f50:	4b18      	ldr	r3, [pc, #96]	; (402fb4 <connect+0x90>)
  402f52:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402f56:	7adb      	ldrb	r3, [r3, #11]
  402f58:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  402f5c:	254b      	movs	r5, #75	; 0x4b
  402f5e:	e000      	b.n	402f62 <connect+0x3e>
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  402f60:	2544      	movs	r5, #68	; 0x44
		}
		strConnect.sock = sock;
  402f62:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  402f66:	2208      	movs	r2, #8
  402f68:	a805      	add	r0, sp, #20
  402f6a:	4b13      	ldr	r3, [pc, #76]	; (402fb8 <connect+0x94>)
  402f6c:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  402f6e:	4811      	ldr	r0, [pc, #68]	; (402fb4 <connect+0x90>)
  402f70:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402f74:	88c3      	ldrh	r3, [r0, #6]
  402f76:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  402f7a:	2300      	movs	r3, #0
  402f7c:	9302      	str	r3, [sp, #8]
  402f7e:	9301      	str	r3, [sp, #4]
  402f80:	9300      	str	r3, [sp, #0]
  402f82:	230c      	movs	r3, #12
  402f84:	aa05      	add	r2, sp, #20
  402f86:	4629      	mov	r1, r5
  402f88:	2002      	movs	r0, #2
  402f8a:	4c0c      	ldr	r4, [pc, #48]	; (402fbc <connect+0x98>)
  402f8c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402f8e:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402f90:	bf18      	it	ne
  402f92:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  402f96:	b009      	add	sp, #36	; 0x24
  402f98:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402f9a:	f06f 0005 	mvn.w	r0, #5
  402f9e:	e7fa      	b.n	402f96 <connect+0x72>
  402fa0:	f06f 0005 	mvn.w	r0, #5
  402fa4:	e7f7      	b.n	402f96 <connect+0x72>
  402fa6:	f06f 0005 	mvn.w	r0, #5
  402faa:	e7f4      	b.n	402f96 <connect+0x72>
  402fac:	f06f 0005 	mvn.w	r0, #5
  402fb0:	e7f1      	b.n	402f96 <connect+0x72>
  402fb2:	bf00      	nop
  402fb4:	20002f44 	.word	0x20002f44
  402fb8:	004005c9 	.word	0x004005c9
  402fbc:	004006ed 	.word	0x004006ed

00402fc0 <send>:
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  402fc0:	2800      	cmp	r0, #0
  402fc2:	db3c      	blt.n	40303e <send+0x7e>
  402fc4:	2900      	cmp	r1, #0
  402fc6:	d03d      	beq.n	403044 <send+0x84>
  402fc8:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  402fcc:	d83d      	bhi.n	40304a <send+0x8a>
  402fce:	4b22      	ldr	r3, [pc, #136]	; (403058 <send+0x98>)
  402fd0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402fd4:	7a9b      	ldrb	r3, [r3, #10]
  402fd6:	b2db      	uxtb	r3, r3
  402fd8:	2b01      	cmp	r3, #1
  402fda:	d139      	bne.n	403050 <send+0x90>
{
  402fdc:	b510      	push	{r4, lr}
  402fde:	b088      	sub	sp, #32
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  402fe0:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  402fe4:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  402fe8:	4b1b      	ldr	r3, [pc, #108]	; (403058 <send+0x98>)
  402fea:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402fee:	88db      	ldrh	r3, [r3, #6]
  402ff0:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  402ff4:	2807      	cmp	r0, #7
  402ff6:	bfb4      	ite	lt
  402ff8:	2450      	movlt	r4, #80	; 0x50
  402ffa:	2444      	movge	r4, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402ffc:	4b16      	ldr	r3, [pc, #88]	; (403058 <send+0x98>)
  402ffe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403002:	7adb      	ldrb	r3, [r3, #11]
  403004:	f013 0f01 	tst.w	r3, #1
  403008:	d006      	beq.n	403018 <send+0x58>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  40300a:	4b13      	ldr	r3, [pc, #76]	; (403058 <send+0x98>)
  40300c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403010:	8904      	ldrh	r4, [r0, #8]
  403012:	b2a4      	uxth	r4, r4
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  403014:	204c      	movs	r0, #76	; 0x4c
  403016:	e000      	b.n	40301a <send+0x5a>
		u8Cmd			= SOCKET_CMD_SEND;
  403018:	2045      	movs	r0, #69	; 0x45
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  40301a:	9402      	str	r4, [sp, #8]
  40301c:	9201      	str	r2, [sp, #4]
  40301e:	9100      	str	r1, [sp, #0]
  403020:	2310      	movs	r3, #16
  403022:	eb0d 0203 	add.w	r2, sp, r3
  403026:	f040 0180 	orr.w	r1, r0, #128	; 0x80
  40302a:	2002      	movs	r0, #2
  40302c:	4c0b      	ldr	r4, [pc, #44]	; (40305c <send+0x9c>)
  40302e:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  403030:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  403032:	bf0c      	ite	eq
  403034:	2000      	moveq	r0, #0
  403036:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  40303a:	b008      	add	sp, #32
  40303c:	bd10      	pop	{r4, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  40303e:	f06f 0005 	mvn.w	r0, #5
  403042:	4770      	bx	lr
  403044:	f06f 0005 	mvn.w	r0, #5
  403048:	4770      	bx	lr
  40304a:	f06f 0005 	mvn.w	r0, #5
  40304e:	4770      	bx	lr
  403050:	f06f 0005 	mvn.w	r0, #5
  403054:	4770      	bx	lr
  403056:	bf00      	nop
  403058:	20002f44 	.word	0x20002f44
  40305c:	004006ed 	.word	0x004006ed

00403060 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  403060:	2800      	cmp	r0, #0
  403062:	db3a      	blt.n	4030da <recv+0x7a>
  403064:	2900      	cmp	r1, #0
  403066:	d03b      	beq.n	4030e0 <recv+0x80>
  403068:	2a00      	cmp	r2, #0
  40306a:	d03c      	beq.n	4030e6 <recv+0x86>
{
  40306c:	b570      	push	{r4, r5, r6, lr}
  40306e:	b086      	sub	sp, #24
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  403070:	4c21      	ldr	r4, [pc, #132]	; (4030f8 <recv+0x98>)
  403072:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  403076:	7aa4      	ldrb	r4, [r4, #10]
  403078:	b2e4      	uxtb	r4, r4
  40307a:	2c01      	cmp	r4, #1
  40307c:	d136      	bne.n	4030ec <recv+0x8c>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  40307e:	4e1e      	ldr	r6, [pc, #120]	; (4030f8 <recv+0x98>)
  403080:	0105      	lsls	r5, r0, #4
  403082:	1974      	adds	r4, r6, r5
  403084:	5171      	str	r1, [r6, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  403086:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  403088:	7b22      	ldrb	r2, [r4, #12]
  40308a:	2a00      	cmp	r2, #0
  40308c:	d131      	bne.n	4030f2 <recv+0x92>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  40308e:	2101      	movs	r1, #1
  403090:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403092:	7ae2      	ldrb	r2, [r4, #11]
  403094:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  403096:	2a00      	cmp	r2, #0
  403098:	bf0c      	ite	eq
  40309a:	2146      	moveq	r1, #70	; 0x46
  40309c:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  40309e:	b9d3      	cbnz	r3, 4030d6 <recv+0x76>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  4030a0:	f04f 33ff 	mov.w	r3, #4294967295
  4030a4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  4030a6:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  4030aa:	4b13      	ldr	r3, [pc, #76]	; (4030f8 <recv+0x98>)
  4030ac:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4030b0:	88c3      	ldrh	r3, [r0, #6]
  4030b2:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  4030b6:	2300      	movs	r3, #0
  4030b8:	9302      	str	r3, [sp, #8]
  4030ba:	9301      	str	r3, [sp, #4]
  4030bc:	9300      	str	r3, [sp, #0]
  4030be:	2308      	movs	r3, #8
  4030c0:	aa04      	add	r2, sp, #16
  4030c2:	2002      	movs	r0, #2
  4030c4:	4c0d      	ldr	r4, [pc, #52]	; (4030fc <recv+0x9c>)
  4030c6:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  4030c8:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  4030ca:	bf0c      	ite	eq
  4030cc:	2000      	moveq	r0, #0
  4030ce:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  4030d2:	b006      	add	sp, #24
  4030d4:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  4030d6:	9304      	str	r3, [sp, #16]
  4030d8:	e7e5      	b.n	4030a6 <recv+0x46>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4030da:	f06f 0005 	mvn.w	r0, #5
  4030de:	4770      	bx	lr
  4030e0:	f06f 0005 	mvn.w	r0, #5
  4030e4:	4770      	bx	lr
  4030e6:	f06f 0005 	mvn.w	r0, #5
  4030ea:	4770      	bx	lr
  4030ec:	f06f 0005 	mvn.w	r0, #5
  4030f0:	e7ef      	b.n	4030d2 <recv+0x72>
		s16Ret = SOCK_ERR_NO_ERROR;
  4030f2:	2000      	movs	r0, #0
  4030f4:	e7ed      	b.n	4030d2 <recv+0x72>
  4030f6:	bf00      	nop
  4030f8:	20002f44 	.word	0x20002f44
  4030fc:	004006ed 	.word	0x004006ed

00403100 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  403100:	b530      	push	{r4, r5, lr}
  403102:	b087      	sub	sp, #28
  403104:	4604      	mov	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
  403106:	4820      	ldr	r0, [pc, #128]	; (403188 <close+0x88>)
  403108:	4d20      	ldr	r5, [pc, #128]	; (40318c <close+0x8c>)
  40310a:	47a8      	blx	r5
  40310c:	4621      	mov	r1, r4
  40310e:	4820      	ldr	r0, [pc, #128]	; (403190 <close+0x90>)
  403110:	47a8      	blx	r5
  403112:	4820      	ldr	r0, [pc, #128]	; (403194 <close+0x94>)
  403114:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  403116:	2c00      	cmp	r4, #0
  403118:	db2f      	blt.n	40317a <close+0x7a>
  40311a:	4b1f      	ldr	r3, [pc, #124]	; (403198 <close+0x98>)
  40311c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  403120:	7a9b      	ldrb	r3, [r3, #10]
  403122:	b2db      	uxtb	r3, r3
  403124:	2b01      	cmp	r3, #1
  403126:	d12b      	bne.n	403180 <close+0x80>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  403128:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  40312c:	4b1a      	ldr	r3, [pc, #104]	; (403198 <close+0x98>)
  40312e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  403132:	88da      	ldrh	r2, [r3, #6]
  403134:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  403138:	2200      	movs	r2, #0
  40313a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  40313c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40313e:	7adb      	ldrb	r3, [r3, #11]
  403140:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  403144:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  403146:	9202      	str	r2, [sp, #8]
  403148:	9201      	str	r2, [sp, #4]
  40314a:	9200      	str	r2, [sp, #0]
  40314c:	f04f 0304 	mov.w	r3, #4
  403150:	aa05      	add	r2, sp, #20
  403152:	bf0c      	ite	eq
  403154:	2149      	moveq	r1, #73	; 0x49
  403156:	214e      	movne	r1, #78	; 0x4e
  403158:	2002      	movs	r0, #2
  40315a:	4d10      	ldr	r5, [pc, #64]	; (40319c <close+0x9c>)
  40315c:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  40315e:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403160:	bf18      	it	ne
  403162:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  403166:	2210      	movs	r2, #16
  403168:	2100      	movs	r1, #0
  40316a:	480b      	ldr	r0, [pc, #44]	; (403198 <close+0x98>)
  40316c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403170:	4b0b      	ldr	r3, [pc, #44]	; (4031a0 <close+0xa0>)
  403172:	4798      	blx	r3
	}
	return s8Ret;
}
  403174:	4628      	mov	r0, r5
  403176:	b007      	add	sp, #28
  403178:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40317a:	f06f 0505 	mvn.w	r5, #5
  40317e:	e7f9      	b.n	403174 <close+0x74>
  403180:	f06f 0505 	mvn.w	r5, #5
  403184:	e7f6      	b.n	403174 <close+0x74>
  403186:	bf00      	nop
  403188:	00415fdc 	.word	0x00415fdc
  40318c:	0040d42d 	.word	0x0040d42d
  403190:	00416af8 	.word	0x00416af8
  403194:	00415ce8 	.word	0x00415ce8
  403198:	20002f44 	.word	0x20002f44
  40319c:	004006ed 	.word	0x004006ed
  4031a0:	004005dd 	.word	0x004005dd

004031a4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
  4031a4:	b510      	push	{r4, lr}
  4031a6:	b084      	sub	sp, #16
  4031a8:	4604      	mov	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
  4031aa:	4b0a      	ldr	r3, [pc, #40]	; (4031d4 <gethostbyname+0x30>)
  4031ac:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
  4031ae:	b2c3      	uxtb	r3, r0
  4031b0:	2b40      	cmp	r3, #64	; 0x40
  4031b2:	d80b      	bhi.n	4031cc <gethostbyname+0x28>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
  4031b4:	2200      	movs	r2, #0
  4031b6:	9202      	str	r2, [sp, #8]
  4031b8:	9201      	str	r2, [sp, #4]
  4031ba:	9200      	str	r2, [sp, #0]
  4031bc:	3301      	adds	r3, #1
  4031be:	4622      	mov	r2, r4
  4031c0:	214a      	movs	r1, #74	; 0x4a
  4031c2:	2002      	movs	r0, #2
  4031c4:	4c04      	ldr	r4, [pc, #16]	; (4031d8 <gethostbyname+0x34>)
  4031c6:	47a0      	blx	r4
	}
	return s8Err;
}
  4031c8:	b004      	add	sp, #16
  4031ca:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
  4031cc:	f06f 0005 	mvn.w	r0, #5
  4031d0:	e7fa      	b.n	4031c8 <gethostbyname+0x24>
  4031d2:	bf00      	nop
  4031d4:	004005eb 	.word	0x004005eb
  4031d8:	004006ed 	.word	0x004006ed

004031dc <setsockopt>:
Date
		9 September 2014
*********************************************************************/
sint8 setsockopt(SOCKET sock, uint8  u8Level, uint8  option_name,
       const void *option_value, uint16 u16OptionLen)
{
  4031dc:	b530      	push	{r4, r5, lr}
  4031de:	b097      	sub	sp, #92	; 0x5c
  4031e0:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
  4031e4:	2800      	cmp	r0, #0
  4031e6:	f2c0 80cc 	blt.w	403382 <setsockopt+0x1a6>
  4031ea:	2b00      	cmp	r3, #0
  4031ec:	f000 80cc 	beq.w	403388 <setsockopt+0x1ac>
  4031f0:	4c6a      	ldr	r4, [pc, #424]	; (40339c <setsockopt+0x1c0>)
  4031f2:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  4031f6:	7aa4      	ldrb	r4, [r4, #10]
  4031f8:	b2e4      	uxtb	r4, r4
  4031fa:	2c01      	cmp	r4, #1
  4031fc:	f040 80c7 	bne.w	40338e <setsockopt+0x1b2>
  403200:	4614      	mov	r4, r2
	{
		if(u8Level == SOL_SSL_SOCKET)
  403202:	2902      	cmp	r1, #2
  403204:	d01b      	beq.n	40323e <setsockopt+0x62>
		}
		else
		{
			uint8	u8Cmd = SOCKET_CMD_SET_SOCKET_OPTION;
			tstrSetSocketOptCmd strSetSockOpt;
			strSetSockOpt.u8Option=option_name;
  403206:	f88d 2015 	strb.w	r2, [sp, #21]
			strSetSockOpt.sock = sock; 
  40320a:	f88d 0014 	strb.w	r0, [sp, #20]
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
  40320e:	681b      	ldr	r3, [r3, #0]
  403210:	9304      	str	r3, [sp, #16]
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;
  403212:	4b62      	ldr	r3, [pc, #392]	; (40339c <setsockopt+0x1c0>)
  403214:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403218:	88c3      	ldrh	r3, [r0, #6]
  40321a:	f8ad 3016 	strh.w	r3, [sp, #22]

			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
  40321e:	2300      	movs	r3, #0
  403220:	9302      	str	r3, [sp, #8]
  403222:	9301      	str	r3, [sp, #4]
  403224:	9300      	str	r3, [sp, #0]
  403226:	2308      	movs	r3, #8
  403228:	aa04      	add	r2, sp, #16
  40322a:	214f      	movs	r1, #79	; 0x4f
  40322c:	2002      	movs	r0, #2
  40322e:	4c5c      	ldr	r4, [pc, #368]	; (4033a0 <setsockopt+0x1c4>)
  403230:	47a0      	blx	r4
			if(s8Ret != SOCK_ERR_NO_ERROR)
  403232:	2800      	cmp	r0, #0
			{
				s8Ret = SOCK_ERR_INVALID;
  403234:	bf18      	it	ne
  403236:	f06f 0008 	mvnne.w	r0, #8
			}
		}
	}
	return s8Ret;	
}
  40323a:	b017      	add	sp, #92	; 0x5c
  40323c:	bd30      	pop	{r4, r5, pc}
	if(sock < TCP_SOCK_MAX)
  40323e:	2806      	cmp	r0, #6
  403240:	f300 80a8 	bgt.w	403394 <setsockopt+0x1b8>
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403244:	4a55      	ldr	r2, [pc, #340]	; (40339c <setsockopt+0x1c0>)
  403246:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40324a:	7ad2      	ldrb	r2, [r2, #11]
  40324c:	f012 0f01 	tst.w	r2, #1
  403250:	f000 808a 	beq.w	403368 <setsockopt+0x18c>
			if(u8Opt == SO_SSL_BYPASS_X509_VERIF)
  403254:	2c01      	cmp	r4, #1
  403256:	d026      	beq.n	4032a6 <setsockopt+0xca>
			else if(u8Opt == SO_SSL_ENABLE_SESSION_CACHING)
  403258:	2c03      	cmp	r4, #3
  40325a:	d038      	beq.n	4032ce <setsockopt+0xf2>
			else if(u8Opt == SO_SSL_ENABLE_SNI_VALIDATION)
  40325c:	2c04      	cmp	r4, #4
  40325e:	d04a      	beq.n	4032f6 <setsockopt+0x11a>
			else if(u8Opt == SO_SSL_SNI)
  403260:	2c02      	cmp	r4, #2
  403262:	d173      	bne.n	40334c <setsockopt+0x170>
				if(u16OptLen < HOSTNAME_MAX_SIZE)
  403264:	2d3f      	cmp	r5, #63	; 0x3f
  403266:	d864      	bhi.n	403332 <setsockopt+0x156>
					strCmd.sock			= sock;
  403268:	f88d 0010 	strb.w	r0, [sp, #16]
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
  40326c:	4a4b      	ldr	r2, [pc, #300]	; (40339c <setsockopt+0x1c0>)
  40326e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
  403272:	88c2      	ldrh	r2, [r0, #6]
  403274:	f8ad 2012 	strh.w	r2, [sp, #18]
					strCmd.u8Option		= u8Opt;
  403278:	f88d 4011 	strb.w	r4, [sp, #17]
					strCmd.u32OptLen	= u16OptLen;
  40327c:	9505      	str	r5, [sp, #20]
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
  40327e:	2240      	movs	r2, #64	; 0x40
  403280:	4619      	mov	r1, r3
  403282:	a806      	add	r0, sp, #24
  403284:	4b47      	ldr	r3, [pc, #284]	; (4033a4 <setsockopt+0x1c8>)
  403286:	4798      	blx	r3
					if(SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT, (uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd),
  403288:	2300      	movs	r3, #0
  40328a:	9302      	str	r3, [sp, #8]
  40328c:	9301      	str	r3, [sp, #4]
  40328e:	9300      	str	r3, [sp, #0]
  403290:	2348      	movs	r3, #72	; 0x48
  403292:	aa04      	add	r2, sp, #16
  403294:	2151      	movs	r1, #81	; 0x51
  403296:	4620      	mov	r0, r4
  403298:	4c41      	ldr	r4, [pc, #260]	; (4033a0 <setsockopt+0x1c4>)
  40329a:	47a0      	blx	r4
  40329c:	f110 0f03 	cmn.w	r0, #3
  4032a0:	d03d      	beq.n	40331e <setsockopt+0x142>
					s8Ret = SOCK_ERR_NO_ERROR;
  4032a2:	2000      	movs	r0, #0
  4032a4:	e7c9      	b.n	40323a <setsockopt+0x5e>
				if(optVal)
  4032a6:	681b      	ldr	r3, [r3, #0]
  4032a8:	b143      	cbz	r3, 4032bc <setsockopt+0xe0>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
  4032aa:	4b3c      	ldr	r3, [pc, #240]	; (40339c <setsockopt+0x1c0>)
  4032ac:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4032b0:	7ac3      	ldrb	r3, [r0, #11]
  4032b2:	f043 0302 	orr.w	r3, r3, #2
  4032b6:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
  4032b8:	2000      	movs	r0, #0
  4032ba:	e7be      	b.n	40323a <setsockopt+0x5e>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_BYPASS_X509;
  4032bc:	4b37      	ldr	r3, [pc, #220]	; (40339c <setsockopt+0x1c0>)
  4032be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4032c2:	7ac3      	ldrb	r3, [r0, #11]
  4032c4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4032c8:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
  4032ca:	2000      	movs	r0, #0
  4032cc:	e7b5      	b.n	40323a <setsockopt+0x5e>
				if(optVal)
  4032ce:	681b      	ldr	r3, [r3, #0]
  4032d0:	b143      	cbz	r3, 4032e4 <setsockopt+0x108>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
  4032d2:	4b32      	ldr	r3, [pc, #200]	; (40339c <setsockopt+0x1c0>)
  4032d4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4032d8:	7ac3      	ldrb	r3, [r0, #11]
  4032da:	f043 0310 	orr.w	r3, r3, #16
  4032de:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
  4032e0:	2000      	movs	r0, #0
  4032e2:	e7aa      	b.n	40323a <setsockopt+0x5e>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CACHE_SESSION;
  4032e4:	4b2d      	ldr	r3, [pc, #180]	; (40339c <setsockopt+0x1c0>)
  4032e6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4032ea:	7ac3      	ldrb	r3, [r0, #11]
  4032ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
  4032f0:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
  4032f2:	2000      	movs	r0, #0
  4032f4:	e7a1      	b.n	40323a <setsockopt+0x5e>
				if(optVal)
  4032f6:	681b      	ldr	r3, [r3, #0]
  4032f8:	b143      	cbz	r3, 40330c <setsockopt+0x130>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
  4032fa:	4b28      	ldr	r3, [pc, #160]	; (40339c <setsockopt+0x1c0>)
  4032fc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403300:	7ac3      	ldrb	r3, [r0, #11]
  403302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403306:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
  403308:	2000      	movs	r0, #0
  40330a:	e796      	b.n	40323a <setsockopt+0x5e>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CHECK_SNI;
  40330c:	4b23      	ldr	r3, [pc, #140]	; (40339c <setsockopt+0x1c0>)
  40330e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403312:	7ac3      	ldrb	r3, [r0, #11]
  403314:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
  403318:	72c3      	strb	r3, [r0, #11]
				s8Ret = SOCK_ERR_NO_ERROR;
  40331a:	2000      	movs	r0, #0
  40331c:	e78d      	b.n	40323a <setsockopt+0x5e>
						s8Ret = SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT | M2M_REQ_DATA_PKT, 
  40331e:	2300      	movs	r3, #0
  403320:	9302      	str	r3, [sp, #8]
  403322:	9301      	str	r3, [sp, #4]
  403324:	9300      	str	r3, [sp, #0]
  403326:	2348      	movs	r3, #72	; 0x48
  403328:	aa04      	add	r2, sp, #16
  40332a:	21d1      	movs	r1, #209	; 0xd1
  40332c:	2002      	movs	r0, #2
  40332e:	47a0      	blx	r4
  403330:	e7b7      	b.n	4032a2 <setsockopt+0xc6>
					M2M_ERR("SNI Exceeds Max Length\n");
  403332:	f240 428f 	movw	r2, #1167	; 0x48f
  403336:	491c      	ldr	r1, [pc, #112]	; (4033a8 <setsockopt+0x1cc>)
  403338:	481c      	ldr	r0, [pc, #112]	; (4033ac <setsockopt+0x1d0>)
  40333a:	4c1d      	ldr	r4, [pc, #116]	; (4033b0 <setsockopt+0x1d4>)
  40333c:	47a0      	blx	r4
  40333e:	481d      	ldr	r0, [pc, #116]	; (4033b4 <setsockopt+0x1d8>)
  403340:	47a0      	blx	r4
  403342:	481d      	ldr	r0, [pc, #116]	; (4033b8 <setsockopt+0x1dc>)
  403344:	47a0      	blx	r4
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403346:	f06f 0005 	mvn.w	r0, #5
  40334a:	e776      	b.n	40323a <setsockopt+0x5e>
				M2M_ERR("Unknown SSL Socket Option %d\n",u8Opt);
  40334c:	f240 4294 	movw	r2, #1172	; 0x494
  403350:	4915      	ldr	r1, [pc, #84]	; (4033a8 <setsockopt+0x1cc>)
  403352:	4816      	ldr	r0, [pc, #88]	; (4033ac <setsockopt+0x1d0>)
  403354:	4d16      	ldr	r5, [pc, #88]	; (4033b0 <setsockopt+0x1d4>)
  403356:	47a8      	blx	r5
  403358:	4621      	mov	r1, r4
  40335a:	4818      	ldr	r0, [pc, #96]	; (4033bc <setsockopt+0x1e0>)
  40335c:	47a8      	blx	r5
  40335e:	4816      	ldr	r0, [pc, #88]	; (4033b8 <setsockopt+0x1dc>)
  403360:	47a8      	blx	r5
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403362:	f06f 0005 	mvn.w	r0, #5
  403366:	e768      	b.n	40323a <setsockopt+0x5e>
			M2M_ERR("Not SSL Socket\n");
  403368:	f240 4299 	movw	r2, #1177	; 0x499
  40336c:	490e      	ldr	r1, [pc, #56]	; (4033a8 <setsockopt+0x1cc>)
  40336e:	480f      	ldr	r0, [pc, #60]	; (4033ac <setsockopt+0x1d0>)
  403370:	4c0f      	ldr	r4, [pc, #60]	; (4033b0 <setsockopt+0x1d4>)
  403372:	47a0      	blx	r4
  403374:	4812      	ldr	r0, [pc, #72]	; (4033c0 <setsockopt+0x1e4>)
  403376:	47a0      	blx	r4
  403378:	480f      	ldr	r0, [pc, #60]	; (4033b8 <setsockopt+0x1dc>)
  40337a:	47a0      	blx	r4
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40337c:	f06f 0005 	mvn.w	r0, #5
  403380:	e75b      	b.n	40323a <setsockopt+0x5e>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403382:	f06f 0005 	mvn.w	r0, #5
  403386:	e758      	b.n	40323a <setsockopt+0x5e>
  403388:	f06f 0005 	mvn.w	r0, #5
  40338c:	e755      	b.n	40323a <setsockopt+0x5e>
  40338e:	f06f 0005 	mvn.w	r0, #5
  403392:	e752      	b.n	40323a <setsockopt+0x5e>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403394:	f06f 0005 	mvn.w	r0, #5
  403398:	e74f      	b.n	40323a <setsockopt+0x5e>
  40339a:	bf00      	nop
  40339c:	20002f44 	.word	0x20002f44
  4033a0:	004006ed 	.word	0x004006ed
  4033a4:	004005c9 	.word	0x004005c9
  4033a8:	00416ae8 	.word	0x00416ae8
  4033ac:	00415cbc 	.word	0x00415cbc
  4033b0:	0040d42d 	.word	0x0040d42d
  4033b4:	00416b10 	.word	0x00416b10
  4033b8:	00415ce8 	.word	0x00415ce8
  4033bc:	00416b28 	.word	0x00416b28
  4033c0:	00416b48 	.word	0x00416b48

004033c4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
  4033c4:	b570      	push	{r4, r5, r6, lr}
  4033c6:	b082      	sub	sp, #8
  4033c8:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  4033ca:	4b2e      	ldr	r3, [pc, #184]	; (403484 <spi_flash_enable+0xc0>)
  4033cc:	4798      	blx	r3
  4033ce:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4033d2:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  4033d6:	d203      	bcs.n	4033e0 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  4033d8:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  4033da:	4620      	mov	r0, r4
  4033dc:	b002      	add	sp, #8
  4033de:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  4033e0:	a901      	add	r1, sp, #4
  4033e2:	f241 4010 	movw	r0, #5136	; 0x1410
  4033e6:	4b28      	ldr	r3, [pc, #160]	; (403488 <spi_flash_enable+0xc4>)
  4033e8:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  4033ea:	4604      	mov	r4, r0
  4033ec:	2800      	cmp	r0, #0
  4033ee:	d1f4      	bne.n	4033da <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  4033f0:	9901      	ldr	r1, [sp, #4]
  4033f2:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
  4033f6:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
		u32Val |= ((0x1111ul) << 12);
  4033fa:	f041 7188 	orr.w	r1, r1, #17825792	; 0x1100000
  4033fe:	f441 3188 	orr.w	r1, r1, #69632	; 0x11000
  403402:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403404:	f241 4010 	movw	r0, #5136	; 0x1410
  403408:	4b20      	ldr	r3, [pc, #128]	; (40348c <spi_flash_enable+0xc8>)
  40340a:	4798      	blx	r3
		if(enable) {
  40340c:	b315      	cbz	r5, 403454 <spi_flash_enable+0x90>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  40340e:	2100      	movs	r1, #0
  403410:	481f      	ldr	r0, [pc, #124]	; (403490 <spi_flash_enable+0xcc>)
  403412:	4d1e      	ldr	r5, [pc, #120]	; (40348c <spi_flash_enable+0xc8>)
  403414:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403416:	21ab      	movs	r1, #171	; 0xab
  403418:	481e      	ldr	r0, [pc, #120]	; (403494 <spi_flash_enable+0xd0>)
  40341a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  40341c:	2101      	movs	r1, #1
  40341e:	481e      	ldr	r0, [pc, #120]	; (403498 <spi_flash_enable+0xd4>)
  403420:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403422:	2100      	movs	r1, #0
  403424:	481d      	ldr	r0, [pc, #116]	; (40349c <spi_flash_enable+0xd8>)
  403426:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  403428:	2181      	movs	r1, #129	; 0x81
  40342a:	481d      	ldr	r0, [pc, #116]	; (4034a0 <spi_flash_enable+0xdc>)
  40342c:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  40342e:	4e1d      	ldr	r6, [pc, #116]	; (4034a4 <spi_flash_enable+0xe0>)
  403430:	4d1d      	ldr	r5, [pc, #116]	; (4034a8 <spi_flash_enable+0xe4>)
  403432:	4630      	mov	r0, r6
  403434:	47a8      	blx	r5
  403436:	2801      	cmp	r0, #1
  403438:	d1fb      	bne.n	403432 <spi_flash_enable+0x6e>
		u32Val &= ~((0x7777ul) << 12);
  40343a:	9901      	ldr	r1, [sp, #4]
  40343c:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
  403440:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
		u32Val |= ((0x0010ul) << 12);
  403444:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403448:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  40344a:	f241 4010 	movw	r0, #5136	; 0x1410
  40344e:	4b0f      	ldr	r3, [pc, #60]	; (40348c <spi_flash_enable+0xc8>)
  403450:	4798      	blx	r3
  403452:	e7c2      	b.n	4033da <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403454:	2100      	movs	r1, #0
  403456:	480e      	ldr	r0, [pc, #56]	; (403490 <spi_flash_enable+0xcc>)
  403458:	4d0c      	ldr	r5, [pc, #48]	; (40348c <spi_flash_enable+0xc8>)
  40345a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  40345c:	21b9      	movs	r1, #185	; 0xb9
  40345e:	480d      	ldr	r0, [pc, #52]	; (403494 <spi_flash_enable+0xd0>)
  403460:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  403462:	2101      	movs	r1, #1
  403464:	480c      	ldr	r0, [pc, #48]	; (403498 <spi_flash_enable+0xd4>)
  403466:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403468:	2100      	movs	r1, #0
  40346a:	480c      	ldr	r0, [pc, #48]	; (40349c <spi_flash_enable+0xd8>)
  40346c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  40346e:	2181      	movs	r1, #129	; 0x81
  403470:	480b      	ldr	r0, [pc, #44]	; (4034a0 <spi_flash_enable+0xdc>)
  403472:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403474:	4e0b      	ldr	r6, [pc, #44]	; (4034a4 <spi_flash_enable+0xe0>)
  403476:	4d0c      	ldr	r5, [pc, #48]	; (4034a8 <spi_flash_enable+0xe4>)
  403478:	4630      	mov	r0, r6
  40347a:	47a8      	blx	r5
  40347c:	2801      	cmp	r0, #1
  40347e:	d1fb      	bne.n	403478 <spi_flash_enable+0xb4>
  403480:	e7db      	b.n	40343a <spi_flash_enable+0x76>
  403482:	bf00      	nop
  403484:	004016d5 	.word	0x004016d5
  403488:	00401b81 	.word	0x00401b81
  40348c:	00401b8d 	.word	0x00401b8d
  403490:	00010208 	.word	0x00010208
  403494:	0001020c 	.word	0x0001020c
  403498:	00010214 	.word	0x00010214
  40349c:	0001021c 	.word	0x0001021c
  4034a0:	00010204 	.word	0x00010204
  4034a4:	00010218 	.word	0x00010218
  4034a8:	00401b75 	.word	0x00401b75

004034ac <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4034ac:	b510      	push	{r4, lr}
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4034ae:	2000      	movs	r0, #0
  4034b0:	4b0a      	ldr	r3, [pc, #40]	; (4034dc <sysclk_enable_usb+0x30>)
  4034b2:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4034b4:	4c0a      	ldr	r4, [pc, #40]	; (4034e0 <sysclk_enable_usb+0x34>)
  4034b6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4034b8:	2800      	cmp	r0, #0
  4034ba:	d0fc      	beq.n	4034b6 <sysclk_enable_usb+0xa>
	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = p_cfg->ctrl;
#if SAMG55
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
  4034bc:	4b09      	ldr	r3, [pc, #36]	; (4034e4 <sysclk_enable_usb+0x38>)
  4034be:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4034c0:	4a09      	ldr	r2, [pc, #36]	; (4034e8 <sysclk_enable_usb+0x3c>)
  4034c2:	4b0a      	ldr	r3, [pc, #40]	; (4034ec <sysclk_enable_usb+0x40>)
  4034c4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
		return pmc_is_locked_pllbck();
  4034c6:	4c0a      	ldr	r4, [pc, #40]	; (4034f0 <sysclk_enable_usb+0x44>)
  4034c8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4034ca:	2800      	cmp	r0, #0
  4034cc:	d0fc      	beq.n	4034c8 <sysclk_enable_usb+0x1c>
		pll_wait_for_lock(1);
#ifdef UHD_ENABLE
		pmc_switch_uhpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_uhpck();
#else
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4034ce:	2000      	movs	r0, #0
  4034d0:	4b08      	ldr	r3, [pc, #32]	; (4034f4 <sysclk_enable_usb+0x48>)
  4034d2:	4798      	blx	r3
		pmc_enable_udpck();
  4034d4:	4b08      	ldr	r3, [pc, #32]	; (4034f8 <sysclk_enable_usb+0x4c>)
  4034d6:	4798      	blx	r3
  4034d8:	bd10      	pop	{r4, pc}
  4034da:	bf00      	nop
  4034dc:	004046f5 	.word	0x004046f5
  4034e0:	00404719 	.word	0x00404719
  4034e4:	00404755 	.word	0x00404755
  4034e8:	05b83f01 	.word	0x05b83f01
  4034ec:	400e0400 	.word	0x400e0400
  4034f0:	00404761 	.word	0x00404761
  4034f4:	004048b5 	.word	0x004048b5
  4034f8:	004048c9 	.word	0x004048c9

004034fc <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4034fc:	b510      	push	{r4, lr}
  4034fe:	b0a2      	sub	sp, #136	; 0x88
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403500:	4818      	ldr	r0, [pc, #96]	; (403564 <sysclk_init+0x68>)
  403502:	4b19      	ldr	r3, [pc, #100]	; (403568 <sysclk_init+0x6c>)
  403504:	4798      	blx	r3
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403506:	2000      	movs	r0, #0
  403508:	4b18      	ldr	r3, [pc, #96]	; (40356c <sysclk_init+0x70>)
  40350a:	4798      	blx	r3
		return pmc_osc_is_ready_32kxtal();
  40350c:	4c18      	ldr	r4, [pc, #96]	; (403570 <sysclk_init+0x74>)
  40350e:	47a0      	blx	r4
  403510:	2800      	cmp	r0, #0
  403512:	d0fc      	beq.n	40350e <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  403514:	4b17      	ldr	r3, [pc, #92]	; (403574 <sysclk_init+0x78>)
  403516:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  403518:	4a17      	ldr	r2, [pc, #92]	; (403578 <sysclk_init+0x7c>)
  40351a:	4b18      	ldr	r3, [pc, #96]	; (40357c <sysclk_init+0x80>)
  40351c:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  40351e:	4c18      	ldr	r4, [pc, #96]	; (403580 <sysclk_init+0x84>)
  403520:	47a0      	blx	r4
  403522:	2800      	cmp	r0, #0
  403524:	d0fc      	beq.n	403520 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403526:	2000      	movs	r0, #0
  403528:	4b16      	ldr	r3, [pc, #88]	; (403584 <sysclk_init+0x88>)
  40352a:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40352c:	4b16      	ldr	r3, [pc, #88]	; (403588 <sysclk_init+0x8c>)
  40352e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403530:	4816      	ldr	r0, [pc, #88]	; (40358c <sysclk_init+0x90>)
  403532:	4b0d      	ldr	r3, [pc, #52]	; (403568 <sysclk_init+0x6c>)
  403534:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  403536:	4b16      	ldr	r3, [pc, #88]	; (403590 <sysclk_init+0x94>)
  403538:	681a      	ldr	r2, [r3, #0]
  40353a:	4b16      	ldr	r3, [pc, #88]	; (403594 <sysclk_init+0x98>)
  40353c:	4413      	add	r3, r2
  40353e:	4a16      	ldr	r2, [pc, #88]	; (403598 <sysclk_init+0x9c>)
  403540:	4293      	cmp	r3, r2
  403542:	d901      	bls.n	403548 <sysclk_init+0x4c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  403544:	b022      	add	sp, #136	; 0x88
  403546:	bd10      	pop	{r4, pc}
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  403548:	2320      	movs	r3, #32
  40354a:	9300      	str	r3, [sp, #0]
  40354c:	ab02      	add	r3, sp, #8
  40354e:	220f      	movs	r2, #15
  403550:	210e      	movs	r1, #14
  403552:	4812      	ldr	r0, [pc, #72]	; (40359c <sysclk_init+0xa0>)
  403554:	4c12      	ldr	r4, [pc, #72]	; (4035a0 <sysclk_init+0xa4>)
  403556:	47a0      	blx	r4
		supc_set_regulator_trim_user(SUPC, trim_value);
  403558:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
  40355c:	4811      	ldr	r0, [pc, #68]	; (4035a4 <sysclk_init+0xa8>)
  40355e:	4b12      	ldr	r3, [pc, #72]	; (4035a8 <sysclk_init+0xac>)
  403560:	4798      	blx	r3
}
  403562:	e7ef      	b.n	403544 <sysclk_init+0x48>
  403564:	07270e00 	.word	0x07270e00
  403568:	0040698d 	.word	0x0040698d
  40356c:	004046f5 	.word	0x004046f5
  403570:	00404719 	.word	0x00404719
  403574:	00404739 	.word	0x00404739
  403578:	0e4d3f01 	.word	0x0e4d3f01
  40357c:	400e0400 	.word	0x400e0400
  403580:	00404745 	.word	0x00404745
  403584:	00404691 	.word	0x00404691
  403588:	004068a5 	.word	0x004068a5
  40358c:	07270000 	.word	0x07270000
  403590:	200001a8 	.word	0x200001a8
  403594:	f9bdd3c0 	.word	0xf9bdd3c0
  403598:	01c9c380 	.word	0x01c9c380
  40359c:	400e0a00 	.word	0x400e0a00
  4035a0:	2000000d 	.word	0x2000000d
  4035a4:	400e1410 	.word	0x400e1410
  4035a8:	00404c83 	.word	0x00404c83

004035ac <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
  4035ac:	2000      	movs	r0, #0
  4035ae:	4770      	bx	lr

004035b0 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
  4035b0:	4b0d      	ldr	r3, [pc, #52]	; (4035e8 <udi_hid_generic_setreport+0x38>)
  4035b2:	885b      	ldrh	r3, [r3, #2]
  4035b4:	0a1a      	lsrs	r2, r3, #8
  4035b6:	2a03      	cmp	r2, #3
  4035b8:	d001      	beq.n	4035be <udi_hid_generic_setreport+0xe>
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
  4035ba:	2000      	movs	r0, #0
  4035bc:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
  4035be:	f013 0fff 	tst.w	r3, #255	; 0xff
  4035c2:	d10e      	bne.n	4035e2 <udi_hid_generic_setreport+0x32>
					udd_g_ctrlreq.req.wLength)) {
  4035c4:	4b08      	ldr	r3, [pc, #32]	; (4035e8 <udi_hid_generic_setreport+0x38>)
			&& (sizeof(udi_hid_generic_report_feature) ==
  4035c6:	88db      	ldrh	r3, [r3, #6]
  4035c8:	2b04      	cmp	r3, #4
  4035ca:	d001      	beq.n	4035d0 <udi_hid_generic_setreport+0x20>
	return false;
  4035cc:	2000      	movs	r0, #0
}
  4035ce:	4770      	bx	lr
		udd_g_ctrlreq.payload =
  4035d0:	4b05      	ldr	r3, [pc, #20]	; (4035e8 <udi_hid_generic_setreport+0x38>)
  4035d2:	4a06      	ldr	r2, [pc, #24]	; (4035ec <udi_hid_generic_setreport+0x3c>)
  4035d4:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
  4035d6:	4a06      	ldr	r2, [pc, #24]	; (4035f0 <udi_hid_generic_setreport+0x40>)
  4035d8:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
  4035da:	2204      	movs	r2, #4
  4035dc:	819a      	strh	r2, [r3, #12]
		return true;
  4035de:	2001      	movs	r0, #1
  4035e0:	4770      	bx	lr
	return false;
  4035e2:	2000      	movs	r0, #0
  4035e4:	4770      	bx	lr
  4035e6:	bf00      	nop
  4035e8:	20003014 	.word	0x20003014
  4035ec:	20000c90 	.word	0x20000c90
  4035f0:	004036b5 	.word	0x004036b5

004035f4 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
  4035f4:	2201      	movs	r2, #1
  4035f6:	4b01      	ldr	r3, [pc, #4]	; (4035fc <udi_hid_generic_report_in_sent+0x8>)
  4035f8:	701a      	strb	r2, [r3, #0]
  4035fa:	4770      	bx	lr
  4035fc:	20000c86 	.word	0x20000c86

00403600 <udi_hid_generic_report_out_enable>:
{
  403600:	b510      	push	{r4, lr}
  403602:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
  403604:	4b04      	ldr	r3, [pc, #16]	; (403618 <udi_hid_generic_report_out_enable+0x18>)
  403606:	9300      	str	r3, [sp, #0]
  403608:	2340      	movs	r3, #64	; 0x40
  40360a:	4a04      	ldr	r2, [pc, #16]	; (40361c <udi_hid_generic_report_out_enable+0x1c>)
  40360c:	2100      	movs	r1, #0
  40360e:	2002      	movs	r0, #2
  403610:	4c03      	ldr	r4, [pc, #12]	; (403620 <udi_hid_generic_report_out_enable+0x20>)
  403612:	47a0      	blx	r4
}
  403614:	b002      	add	sp, #8
  403616:	bd10      	pop	{r4, pc}
  403618:	00403661 	.word	0x00403661
  40361c:	20000cd4 	.word	0x20000cd4
  403620:	004063d5 	.word	0x004063d5

00403624 <udi_hid_generic_enable>:
{
  403624:	b508      	push	{r3, lr}
	udi_hid_generic_rate = 0;
  403626:	2300      	movs	r3, #0
  403628:	4a08      	ldr	r2, [pc, #32]	; (40364c <udi_hid_generic_enable+0x28>)
  40362a:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
  40362c:	4a08      	ldr	r2, [pc, #32]	; (403650 <udi_hid_generic_enable+0x2c>)
  40362e:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
  403630:	2201      	movs	r2, #1
  403632:	4b08      	ldr	r3, [pc, #32]	; (403654 <udi_hid_generic_enable+0x30>)
  403634:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
  403636:	4b08      	ldr	r3, [pc, #32]	; (403658 <udi_hid_generic_enable+0x34>)
  403638:	4798      	blx	r3
  40363a:	4603      	mov	r3, r0
  40363c:	b908      	cbnz	r0, 403642 <udi_hid_generic_enable+0x1e>
}
  40363e:	4618      	mov	r0, r3
  403640:	bd08      	pop	{r3, pc}
	return UDI_HID_GENERIC_ENABLE_EXT();
  403642:	4b06      	ldr	r3, [pc, #24]	; (40365c <udi_hid_generic_enable+0x38>)
  403644:	4798      	blx	r3
  403646:	4603      	mov	r3, r0
  403648:	e7f9      	b.n	40363e <udi_hid_generic_enable+0x1a>
  40364a:	bf00      	nop
  40364c:	20000c8c 	.word	0x20000c8c
  403650:	20000c88 	.word	0x20000c88
  403654:	20000c86 	.word	0x20000c86
  403658:	00403601 	.word	0x00403601
  40365c:	0040b07d 	.word	0x0040b07d

00403660 <udi_hid_generic_report_out_received>:
	if (UDD_EP_TRANSFER_OK != status)
  403660:	b948      	cbnz	r0, 403676 <udi_hid_generic_report_out_received+0x16>
{
  403662:	b508      	push	{r3, lr}
	if (sizeof(udi_hid_generic_report_out) == nb_received) {
  403664:	2940      	cmp	r1, #64	; 0x40
  403666:	d002      	beq.n	40366e <udi_hid_generic_report_out_received+0xe>
	udi_hid_generic_report_out_enable();
  403668:	4b03      	ldr	r3, [pc, #12]	; (403678 <udi_hid_generic_report_out_received+0x18>)
  40366a:	4798      	blx	r3
  40366c:	bd08      	pop	{r3, pc}
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
  40366e:	4803      	ldr	r0, [pc, #12]	; (40367c <udi_hid_generic_report_out_received+0x1c>)
  403670:	4b03      	ldr	r3, [pc, #12]	; (403680 <udi_hid_generic_report_out_received+0x20>)
  403672:	4798      	blx	r3
  403674:	e7f8      	b.n	403668 <udi_hid_generic_report_out_received+0x8>
  403676:	4770      	bx	lr
  403678:	00403601 	.word	0x00403601
  40367c:	20000cd4 	.word	0x20000cd4
  403680:	0040b085 	.word	0x0040b085

00403684 <udi_hid_generic_disable>:
{
  403684:	b508      	push	{r3, lr}
	UDI_HID_GENERIC_DISABLE_EXT();
  403686:	4b01      	ldr	r3, [pc, #4]	; (40368c <udi_hid_generic_disable+0x8>)
  403688:	4798      	blx	r3
  40368a:	bd08      	pop	{r3, pc}
  40368c:	0040b081 	.word	0x0040b081

00403690 <udi_hid_generic_setup>:
{
  403690:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
  403692:	4b03      	ldr	r3, [pc, #12]	; (4036a0 <udi_hid_generic_setup+0x10>)
  403694:	4a03      	ldr	r2, [pc, #12]	; (4036a4 <udi_hid_generic_setup+0x14>)
  403696:	4904      	ldr	r1, [pc, #16]	; (4036a8 <udi_hid_generic_setup+0x18>)
  403698:	4804      	ldr	r0, [pc, #16]	; (4036ac <udi_hid_generic_setup+0x1c>)
  40369a:	4c05      	ldr	r4, [pc, #20]	; (4036b0 <udi_hid_generic_setup+0x20>)
  40369c:	47a0      	blx	r4
}
  40369e:	bd10      	pop	{r4, pc}
  4036a0:	004035b1 	.word	0x004035b1
  4036a4:	200000ac 	.word	0x200000ac
  4036a8:	20000c88 	.word	0x20000c88
  4036ac:	20000c8c 	.word	0x20000c8c
  4036b0:	00403779 	.word	0x00403779

004036b4 <udi_hid_generic_setfeature_valid>:
{
  4036b4:	b508      	push	{r3, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
  4036b6:	4b04      	ldr	r3, [pc, #16]	; (4036c8 <udi_hid_generic_setfeature_valid+0x14>)
  4036b8:	899b      	ldrh	r3, [r3, #12]
  4036ba:	2b04      	cmp	r3, #4
  4036bc:	d000      	beq.n	4036c0 <udi_hid_generic_setfeature_valid+0xc>
  4036be:	bd08      	pop	{r3, pc}
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
  4036c0:	4802      	ldr	r0, [pc, #8]	; (4036cc <udi_hid_generic_setfeature_valid+0x18>)
  4036c2:	4b03      	ldr	r3, [pc, #12]	; (4036d0 <udi_hid_generic_setfeature_valid+0x1c>)
  4036c4:	4798      	blx	r3
  4036c6:	e7fa      	b.n	4036be <udi_hid_generic_setfeature_valid+0xa>
  4036c8:	20003014 	.word	0x20003014
  4036cc:	20000c90 	.word	0x20000c90
  4036d0:	0040b0e1 	.word	0x0040b0e1

004036d4 <udi_hid_generic_send_report_in>:
	if (!udi_hid_generic_b_report_in_free)
  4036d4:	4b22      	ldr	r3, [pc, #136]	; (403760 <udi_hid_generic_send_report_in+0x8c>)
  4036d6:	781b      	ldrb	r3, [r3, #0]
  4036d8:	b90b      	cbnz	r3, 4036de <udi_hid_generic_send_report_in+0xa>
}
  4036da:	4618      	mov	r0, r3
  4036dc:	4770      	bx	lr
{
  4036de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036e2:	b084      	sub	sp, #16
  4036e4:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4036e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4036ea:	fab3 f383 	clz	r3, r3
  4036ee:	095b      	lsrs	r3, r3, #5
  4036f0:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  4036f2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4036f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4036f8:	2100      	movs	r1, #0
  4036fa:	4b1a      	ldr	r3, [pc, #104]	; (403764 <udi_hid_generic_send_report_in+0x90>)
  4036fc:	7019      	strb	r1, [r3, #0]
	return flags;
  4036fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
	memset(&udi_hid_generic_report_in, 0,
  403702:	4d19      	ldr	r5, [pc, #100]	; (403768 <udi_hid_generic_send_report_in+0x94>)
  403704:	2240      	movs	r2, #64	; 0x40
  403706:	4628      	mov	r0, r5
  403708:	4b18      	ldr	r3, [pc, #96]	; (40376c <udi_hid_generic_send_report_in+0x98>)
  40370a:	4798      	blx	r3
	memcpy(&udi_hid_generic_report_in, data,
  40370c:	463c      	mov	r4, r7
  40370e:	3740      	adds	r7, #64	; 0x40
  403710:	462e      	mov	r6, r5
  403712:	6820      	ldr	r0, [r4, #0]
  403714:	6861      	ldr	r1, [r4, #4]
  403716:	68a2      	ldr	r2, [r4, #8]
  403718:	68e3      	ldr	r3, [r4, #12]
  40371a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  40371c:	3410      	adds	r4, #16
  40371e:	4635      	mov	r5, r6
  403720:	42bc      	cmp	r4, r7
  403722:	d1f5      	bne.n	403710 <udi_hid_generic_send_report_in+0x3c>
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
  403724:	4b12      	ldr	r3, [pc, #72]	; (403770 <udi_hid_generic_send_report_in+0x9c>)
  403726:	9300      	str	r3, [sp, #0]
  403728:	2340      	movs	r3, #64	; 0x40
  40372a:	4a0f      	ldr	r2, [pc, #60]	; (403768 <udi_hid_generic_send_report_in+0x94>)
  40372c:	2100      	movs	r1, #0
  40372e:	2081      	movs	r0, #129	; 0x81
  403730:	4c10      	ldr	r4, [pc, #64]	; (403774 <udi_hid_generic_send_report_in+0xa0>)
  403732:	47a0      	blx	r4
							udi_hid_generic_report_in_sent);
  403734:	f080 0001 	eor.w	r0, r0, #1
	udi_hid_generic_b_report_in_free =
  403738:	4b09      	ldr	r3, [pc, #36]	; (403760 <udi_hid_generic_send_report_in+0x8c>)
  40373a:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40373c:	f1b8 0f00 	cmp.w	r8, #0
  403740:	d005      	beq.n	40374e <udi_hid_generic_send_report_in+0x7a>
		cpu_irq_enable();
  403742:	2201      	movs	r2, #1
  403744:	4b07      	ldr	r3, [pc, #28]	; (403764 <udi_hid_generic_send_report_in+0x90>)
  403746:	701a      	strb	r2, [r3, #0]
  403748:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40374c:	b662      	cpsie	i
	return !udi_hid_generic_b_report_in_free;
  40374e:	4b04      	ldr	r3, [pc, #16]	; (403760 <udi_hid_generic_send_report_in+0x8c>)
  403750:	781b      	ldrb	r3, [r3, #0]
  403752:	f083 0301 	eor.w	r3, r3, #1
}
  403756:	4618      	mov	r0, r3
  403758:	b004      	add	sp, #16
  40375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40375e:	bf00      	nop
  403760:	20000c86 	.word	0x20000c86
  403764:	200001a5 	.word	0x200001a5
  403768:	20000c94 	.word	0x20000c94
  40376c:	0040de3d 	.word	0x0040de3d
  403770:	004035f5 	.word	0x004035f5
  403774:	004063d5 	.word	0x004063d5

00403778 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
  403778:	b538      	push	{r3, r4, r5, lr}
  40377a:	4614      	mov	r4, r2
	if (Udd_setup_is_in()) {
  40377c:	4a37      	ldr	r2, [pc, #220]	; (40385c <udi_hid_setup+0xe4>)
  40377e:	7812      	ldrb	r2, [r2, #0]
  403780:	f012 0f80 	tst.w	r2, #128	; 0x80
  403784:	d105      	bne.n	403792 <udi_hid_setup+0x1a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  403786:	f002 0260 	and.w	r2, r2, #96	; 0x60
  40378a:	2a20      	cmp	r2, #32
  40378c:	d049      	beq.n	403822 <udi_hid_setup+0xaa>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
  40378e:	2000      	movs	r0, #0
  403790:	bd38      	pop	{r3, r4, r5, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  403792:	f012 0260 	ands.w	r2, r2, #96	; 0x60
  403796:	d103      	bne.n	4037a0 <udi_hid_setup+0x28>
			switch (udd_g_ctrlreq.req.bRequest) {
  403798:	4d30      	ldr	r5, [pc, #192]	; (40385c <udi_hid_setup+0xe4>)
  40379a:	786d      	ldrb	r5, [r5, #1]
  40379c:	2d06      	cmp	r5, #6
  40379e:	d003      	beq.n	4037a8 <udi_hid_setup+0x30>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4037a0:	2a20      	cmp	r2, #32
  4037a2:	d028      	beq.n	4037f6 <udi_hid_setup+0x7e>
	return false;	// Request not supported
  4037a4:	2000      	movs	r0, #0
  4037a6:	bd38      	pop	{r3, r4, r5, pc}
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
  4037a8:	4b2d      	ldr	r3, [pc, #180]	; (403860 <udi_hid_setup+0xe8>)
  4037aa:	4798      	blx	r3
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
  4037ac:	7a83      	ldrb	r3, [r0, #10]
  4037ae:	2b21      	cmp	r3, #33	; 0x21
  4037b0:	d001      	beq.n	4037b6 <udi_hid_setup+0x3e>
		return false;
  4037b2:	2000      	movs	r0, #0
  4037b4:	bd38      	pop	{r3, r4, r5, pc}

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4037b6:	4b29      	ldr	r3, [pc, #164]	; (40385c <udi_hid_setup+0xe4>)
  4037b8:	885b      	ldrh	r3, [r3, #2]
  4037ba:	0a1b      	lsrs	r3, r3, #8
  4037bc:	2b21      	cmp	r3, #33	; 0x21
  4037be:	d004      	beq.n	4037ca <udi_hid_setup+0x52>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
  4037c0:	7bc2      	ldrb	r2, [r0, #15]
  4037c2:	429a      	cmp	r2, r3
  4037c4:	d00d      	beq.n	4037e2 <udi_hid_setup+0x6a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
  4037c6:	2000      	movs	r0, #0
  4037c8:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
  4037ca:	4b24      	ldr	r3, [pc, #144]	; (40385c <udi_hid_setup+0xe4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
  4037cc:	f100 0209 	add.w	r2, r0, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
  4037d0:	609a      	str	r2, [r3, #8]
				min(udd_g_ctrlreq.req.wLength,
  4037d2:	7a42      	ldrb	r2, [r0, #9]
  4037d4:	88d9      	ldrh	r1, [r3, #6]
  4037d6:	428a      	cmp	r2, r1
  4037d8:	bf28      	it	cs
  4037da:	460a      	movcs	r2, r1
		udd_g_ctrlreq.payload_size =
  4037dc:	819a      	strh	r2, [r3, #12]
		return true;
  4037de:	2001      	movs	r0, #1
  4037e0:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload = report_desc;
  4037e2:	4b1e      	ldr	r3, [pc, #120]	; (40385c <udi_hid_setup+0xe4>)
  4037e4:	609c      	str	r4, [r3, #8]
		udd_g_ctrlreq.payload_size =
  4037e6:	8a02      	ldrh	r2, [r0, #16]
  4037e8:	88d9      	ldrh	r1, [r3, #6]
  4037ea:	428a      	cmp	r2, r1
  4037ec:	bf28      	it	cs
  4037ee:	460a      	movcs	r2, r1
  4037f0:	819a      	strh	r2, [r3, #12]
		return true;
  4037f2:	2001      	movs	r0, #1
  4037f4:	bd38      	pop	{r3, r4, r5, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
  4037f6:	4a19      	ldr	r2, [pc, #100]	; (40385c <udi_hid_setup+0xe4>)
  4037f8:	7852      	ldrb	r2, [r2, #1]
  4037fa:	2a02      	cmp	r2, #2
  4037fc:	d007      	beq.n	40380e <udi_hid_setup+0x96>
  4037fe:	2a03      	cmp	r2, #3
  403800:	d00a      	beq.n	403818 <udi_hid_setup+0xa0>
  403802:	2a01      	cmp	r2, #1
  403804:	d001      	beq.n	40380a <udi_hid_setup+0x92>
	return false;	// Request not supported
  403806:	2000      	movs	r0, #0
  403808:	bd38      	pop	{r3, r4, r5, pc}
				return setup_report();
  40380a:	4798      	blx	r3
  40380c:	bd38      	pop	{r3, r4, r5, pc}
				udd_g_ctrlreq.payload = rate;
  40380e:	4b13      	ldr	r3, [pc, #76]	; (40385c <udi_hid_setup+0xe4>)
  403810:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
  403812:	2001      	movs	r0, #1
  403814:	8198      	strh	r0, [r3, #12]
				return true;
  403816:	bd38      	pop	{r3, r4, r5, pc}
				udd_g_ctrlreq.payload = protocol;
  403818:	4b10      	ldr	r3, [pc, #64]	; (40385c <udi_hid_setup+0xe4>)
  40381a:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
  40381c:	2001      	movs	r0, #1
  40381e:	8198      	strh	r0, [r3, #12]
				return true;
  403820:	bd38      	pop	{r3, r4, r5, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
  403822:	4a0e      	ldr	r2, [pc, #56]	; (40385c <udi_hid_setup+0xe4>)
  403824:	7852      	ldrb	r2, [r2, #1]
  403826:	2a0a      	cmp	r2, #10
  403828:	d007      	beq.n	40383a <udi_hid_setup+0xc2>
  40382a:	2a0b      	cmp	r2, #11
  40382c:	d00b      	beq.n	403846 <udi_hid_setup+0xce>
  40382e:	2a09      	cmp	r2, #9
  403830:	d001      	beq.n	403836 <udi_hid_setup+0xbe>
	return false;	// Request not supported
  403832:	2000      	movs	r0, #0
  403834:	bd38      	pop	{r3, r4, r5, pc}
				return setup_report();
  403836:	4798      	blx	r3
  403838:	bd38      	pop	{r3, r4, r5, pc}
				*rate = udd_g_ctrlreq.req.wValue >> 8;
  40383a:	4b08      	ldr	r3, [pc, #32]	; (40385c <udi_hid_setup+0xe4>)
  40383c:	885b      	ldrh	r3, [r3, #2]
  40383e:	0a1b      	lsrs	r3, r3, #8
  403840:	7003      	strb	r3, [r0, #0]
				return true;
  403842:	2001      	movs	r0, #1
  403844:	bd38      	pop	{r3, r4, r5, pc}
				if (0 != udd_g_ctrlreq.req.wLength)
  403846:	4b05      	ldr	r3, [pc, #20]	; (40385c <udi_hid_setup+0xe4>)
  403848:	88db      	ldrh	r3, [r3, #6]
  40384a:	b923      	cbnz	r3, 403856 <udi_hid_setup+0xde>
				*protocol = udd_g_ctrlreq.req.wValue;
  40384c:	4b03      	ldr	r3, [pc, #12]	; (40385c <udi_hid_setup+0xe4>)
  40384e:	885b      	ldrh	r3, [r3, #2]
  403850:	700b      	strb	r3, [r1, #0]
				return true;
  403852:	2001      	movs	r0, #1
  403854:	bd38      	pop	{r3, r4, r5, pc}
					return false;
  403856:	2000      	movs	r0, #0
}
  403858:	bd38      	pop	{r3, r4, r5, pc}
  40385a:	bf00      	nop
  40385c:	20003014 	.word	0x20003014
  403860:	00403a01 	.word	0x00403a01

00403864 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  403864:	4b10      	ldr	r3, [pc, #64]	; (4038a8 <udc_next_desc_in_iface+0x44>)
  403866:	681b      	ldr	r3, [r3, #0]
  403868:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40386a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40386c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  40386e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  403870:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  403872:	4290      	cmp	r0, r2
  403874:	d211      	bcs.n	40389a <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  403876:	7843      	ldrb	r3, [r0, #1]
  403878:	2b04      	cmp	r3, #4
  40387a:	d010      	beq.n	40389e <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  40387c:	428b      	cmp	r3, r1
  40387e:	d009      	beq.n	403894 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  403880:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  403882:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  403884:	4290      	cmp	r0, r2
  403886:	d206      	bcs.n	403896 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  403888:	7843      	ldrb	r3, [r0, #1]
  40388a:	2b04      	cmp	r3, #4
  40388c:	d009      	beq.n	4038a2 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  40388e:	428b      	cmp	r3, r1
  403890:	d1f6      	bne.n	403880 <udc_next_desc_in_iface+0x1c>
  403892:	e007      	b.n	4038a4 <udc_next_desc_in_iface+0x40>
  403894:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  403896:	2000      	movs	r0, #0
  403898:	4770      	bx	lr
  40389a:	2000      	movs	r0, #0
  40389c:	4770      	bx	lr
  40389e:	2000      	movs	r0, #0
  4038a0:	4770      	bx	lr
  4038a2:	2000      	movs	r0, #0
}
  4038a4:	4770      	bx	lr
  4038a6:	bf00      	nop
  4038a8:	20000d20 	.word	0x20000d20

004038ac <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4038ac:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4038ae:	4b03      	ldr	r3, [pc, #12]	; (4038bc <udc_valid_address+0x10>)
  4038b0:	7898      	ldrb	r0, [r3, #2]
  4038b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4038b6:	4b02      	ldr	r3, [pc, #8]	; (4038c0 <udc_valid_address+0x14>)
  4038b8:	4798      	blx	r3
  4038ba:	bd08      	pop	{r3, pc}
  4038bc:	20003014 	.word	0x20003014
  4038c0:	00406025 	.word	0x00406025

004038c4 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  4038c4:	4b19      	ldr	r3, [pc, #100]	; (40392c <udc_update_iface_desc+0x68>)
  4038c6:	781b      	ldrb	r3, [r3, #0]
  4038c8:	b34b      	cbz	r3, 40391e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4038ca:	4b19      	ldr	r3, [pc, #100]	; (403930 <udc_update_iface_desc+0x6c>)
  4038cc:	681b      	ldr	r3, [r3, #0]
  4038ce:	681b      	ldr	r3, [r3, #0]
  4038d0:	791a      	ldrb	r2, [r3, #4]
  4038d2:	4282      	cmp	r2, r0
  4038d4:	d925      	bls.n	403922 <udc_update_iface_desc+0x5e>
{
  4038d6:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4038d8:	4a16      	ldr	r2, [pc, #88]	; (403934 <udc_update_iface_desc+0x70>)
  4038da:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4038dc:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4038de:	441c      	add	r4, r3
	while (ptr_end_desc >
  4038e0:	42a3      	cmp	r3, r4
  4038e2:	d220      	bcs.n	403926 <udc_update_iface_desc+0x62>
  4038e4:	2500      	movs	r5, #0
  4038e6:	2601      	movs	r6, #1
  4038e8:	e007      	b.n	4038fa <udc_update_iface_desc+0x36>
  4038ea:	4a12      	ldr	r2, [pc, #72]	; (403934 <udc_update_iface_desc+0x70>)
  4038ec:	6013      	str	r3, [r2, #0]
  4038ee:	e00f      	b.n	403910 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  4038f0:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4038f2:	4413      	add	r3, r2
  4038f4:	4635      	mov	r5, r6
	while (ptr_end_desc >
  4038f6:	42a3      	cmp	r3, r4
  4038f8:	d20c      	bcs.n	403914 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4038fa:	785a      	ldrb	r2, [r3, #1]
  4038fc:	2a04      	cmp	r2, #4
  4038fe:	d1f7      	bne.n	4038f0 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  403900:	789a      	ldrb	r2, [r3, #2]
  403902:	4282      	cmp	r2, r0
  403904:	d1f4      	bne.n	4038f0 <udc_update_iface_desc+0x2c>
  403906:	78da      	ldrb	r2, [r3, #3]
  403908:	428a      	cmp	r2, r1
  40390a:	d1f1      	bne.n	4038f0 <udc_update_iface_desc+0x2c>
  40390c:	2d00      	cmp	r5, #0
  40390e:	d1ec      	bne.n	4038ea <udc_update_iface_desc+0x26>
				return true; // Interface found
  403910:	2001      	movs	r0, #1
  403912:	e002      	b.n	40391a <udc_update_iface_desc+0x56>
  403914:	4a07      	ldr	r2, [pc, #28]	; (403934 <udc_update_iface_desc+0x70>)
  403916:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  403918:	2000      	movs	r0, #0
}
  40391a:	bc70      	pop	{r4, r5, r6}
  40391c:	4770      	bx	lr
		return false;
  40391e:	2000      	movs	r0, #0
  403920:	4770      	bx	lr
		return false;
  403922:	2000      	movs	r0, #0
  403924:	4770      	bx	lr
	return false; // Interface not found
  403926:	2000      	movs	r0, #0
  403928:	e7f7      	b.n	40391a <udc_update_iface_desc+0x56>
  40392a:	bf00      	nop
  40392c:	20000d1c 	.word	0x20000d1c
  403930:	20000d20 	.word	0x20000d20
  403934:	20000d24 	.word	0x20000d24

00403938 <udc_iface_disable>:
{
  403938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40393c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  40393e:	2100      	movs	r1, #0
  403940:	4b13      	ldr	r3, [pc, #76]	; (403990 <udc_iface_disable+0x58>)
  403942:	4798      	blx	r3
  403944:	4680      	mov	r8, r0
  403946:	b910      	cbnz	r0, 40394e <udc_iface_disable+0x16>
}
  403948:	4640      	mov	r0, r8
  40394a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40394e:	4b11      	ldr	r3, [pc, #68]	; (403994 <udc_iface_disable+0x5c>)
  403950:	681b      	ldr	r3, [r3, #0]
  403952:	685b      	ldr	r3, [r3, #4]
  403954:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403958:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40395c:	4798      	blx	r3
  40395e:	4601      	mov	r1, r0
  403960:	4620      	mov	r0, r4
  403962:	4b0b      	ldr	r3, [pc, #44]	; (403990 <udc_iface_disable+0x58>)
  403964:	4798      	blx	r3
  403966:	4680      	mov	r8, r0
  403968:	2800      	cmp	r0, #0
  40396a:	d0ed      	beq.n	403948 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40396c:	4b0a      	ldr	r3, [pc, #40]	; (403998 <udc_iface_disable+0x60>)
  40396e:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  403970:	2605      	movs	r6, #5
  403972:	4d0a      	ldr	r5, [pc, #40]	; (40399c <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  403974:	4f0a      	ldr	r7, [pc, #40]	; (4039a0 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  403976:	4631      	mov	r1, r6
  403978:	4620      	mov	r0, r4
  40397a:	47a8      	blx	r5
			if (NULL == ep_desc) {
  40397c:	4604      	mov	r4, r0
  40397e:	b110      	cbz	r0, 403986 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  403980:	7880      	ldrb	r0, [r0, #2]
  403982:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  403984:	e7f7      	b.n	403976 <udc_iface_disable+0x3e>
	udi_api->disable();
  403986:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40398a:	4798      	blx	r3
	return true;
  40398c:	e7dc      	b.n	403948 <udc_iface_disable+0x10>
  40398e:	bf00      	nop
  403990:	004038c5 	.word	0x004038c5
  403994:	20000d20 	.word	0x20000d20
  403998:	20000d24 	.word	0x20000d24
  40399c:	00403865 	.word	0x00403865
  4039a0:	00406181 	.word	0x00406181

004039a4 <udc_iface_enable>:
{
  4039a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039a8:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4039aa:	4b10      	ldr	r3, [pc, #64]	; (4039ec <udc_iface_enable+0x48>)
  4039ac:	4798      	blx	r3
  4039ae:	4603      	mov	r3, r0
  4039b0:	b1c8      	cbz	r0, 4039e6 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4039b2:	4b0f      	ldr	r3, [pc, #60]	; (4039f0 <udc_iface_enable+0x4c>)
  4039b4:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4039b6:	2605      	movs	r6, #5
  4039b8:	4d0e      	ldr	r5, [pc, #56]	; (4039f4 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4039ba:	4f0f      	ldr	r7, [pc, #60]	; (4039f8 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4039bc:	4631      	mov	r1, r6
  4039be:	4620      	mov	r0, r4
  4039c0:	47a8      	blx	r5
		if (NULL == ep_desc)
  4039c2:	4604      	mov	r4, r0
  4039c4:	b138      	cbz	r0, 4039d6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4039c6:	8882      	ldrh	r2, [r0, #4]
  4039c8:	78c1      	ldrb	r1, [r0, #3]
  4039ca:	7880      	ldrb	r0, [r0, #2]
  4039cc:	47b8      	blx	r7
  4039ce:	4603      	mov	r3, r0
  4039d0:	2800      	cmp	r0, #0
  4039d2:	d1f3      	bne.n	4039bc <udc_iface_enable+0x18>
  4039d4:	e007      	b.n	4039e6 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4039d6:	4b09      	ldr	r3, [pc, #36]	; (4039fc <udc_iface_enable+0x58>)
  4039d8:	681b      	ldr	r3, [r3, #0]
  4039da:	685b      	ldr	r3, [r3, #4]
  4039dc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  4039e0:	681b      	ldr	r3, [r3, #0]
  4039e2:	4798      	blx	r3
  4039e4:	4603      	mov	r3, r0
}
  4039e6:	4618      	mov	r0, r3
  4039e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039ec:	004038c5 	.word	0x004038c5
  4039f0:	20000d24 	.word	0x20000d24
  4039f4:	00403865 	.word	0x00403865
  4039f8:	00406089 	.word	0x00406089
  4039fc:	20000d20 	.word	0x20000d20

00403a00 <udc_get_interface_desc>:
}
  403a00:	4b01      	ldr	r3, [pc, #4]	; (403a08 <udc_get_interface_desc+0x8>)
  403a02:	6818      	ldr	r0, [r3, #0]
  403a04:	4770      	bx	lr
  403a06:	bf00      	nop
  403a08:	20000d24 	.word	0x20000d24

00403a0c <udc_start>:
{
  403a0c:	b508      	push	{r3, lr}
	udd_enable();
  403a0e:	4b01      	ldr	r3, [pc, #4]	; (403a14 <udc_start+0x8>)
  403a10:	4798      	blx	r3
  403a12:	bd08      	pop	{r3, pc}
  403a14:	00405f49 	.word	0x00405f49

00403a18 <udc_reset>:
{
  403a18:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  403a1a:	4b11      	ldr	r3, [pc, #68]	; (403a60 <udc_reset+0x48>)
  403a1c:	781b      	ldrb	r3, [r3, #0]
  403a1e:	b183      	cbz	r3, 403a42 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403a20:	4b10      	ldr	r3, [pc, #64]	; (403a64 <udc_reset+0x4c>)
  403a22:	681b      	ldr	r3, [r3, #0]
  403a24:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  403a26:	791b      	ldrb	r3, [r3, #4]
  403a28:	b15b      	cbz	r3, 403a42 <udc_reset+0x2a>
  403a2a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  403a2c:	4e0e      	ldr	r6, [pc, #56]	; (403a68 <udc_reset+0x50>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403a2e:	4d0d      	ldr	r5, [pc, #52]	; (403a64 <udc_reset+0x4c>)
			udc_iface_disable(iface_num);
  403a30:	4620      	mov	r0, r4
  403a32:	47b0      	blx	r6
				iface_num++) {
  403a34:	3401      	adds	r4, #1
  403a36:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403a38:	682b      	ldr	r3, [r5, #0]
  403a3a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  403a3c:	791b      	ldrb	r3, [r3, #4]
  403a3e:	42a3      	cmp	r3, r4
  403a40:	d8f6      	bhi.n	403a30 <udc_reset+0x18>
	udc_num_configuration = 0;
  403a42:	2200      	movs	r2, #0
  403a44:	4b06      	ldr	r3, [pc, #24]	; (403a60 <udc_reset+0x48>)
  403a46:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
  403a48:	4b08      	ldr	r3, [pc, #32]	; (403a6c <udc_reset+0x54>)
  403a4a:	881b      	ldrh	r3, [r3, #0]
  403a4c:	f013 0f02 	tst.w	r3, #2
  403a50:	d103      	bne.n	403a5a <udc_reset+0x42>
	udc_device_status =
  403a52:	2200      	movs	r2, #0
  403a54:	4b05      	ldr	r3, [pc, #20]	; (403a6c <udc_reset+0x54>)
  403a56:	801a      	strh	r2, [r3, #0]
  403a58:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
  403a5a:	4b05      	ldr	r3, [pc, #20]	; (403a70 <udc_reset+0x58>)
  403a5c:	4798      	blx	r3
  403a5e:	e7f8      	b.n	403a52 <udc_reset+0x3a>
  403a60:	20000d1c 	.word	0x20000d1c
  403a64:	20000d20 	.word	0x20000d20
  403a68:	00403939 	.word	0x00403939
  403a6c:	20000d14 	.word	0x20000d14
  403a70:	0040b081 	.word	0x0040b081

00403a74 <udc_sof_notify>:
{
  403a74:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  403a76:	4b0d      	ldr	r3, [pc, #52]	; (403aac <udc_sof_notify+0x38>)
  403a78:	781b      	ldrb	r3, [r3, #0]
  403a7a:	b1b3      	cbz	r3, 403aaa <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403a7c:	4b0c      	ldr	r3, [pc, #48]	; (403ab0 <udc_sof_notify+0x3c>)
  403a7e:	681b      	ldr	r3, [r3, #0]
  403a80:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  403a82:	7912      	ldrb	r2, [r2, #4]
  403a84:	b18a      	cbz	r2, 403aaa <udc_sof_notify+0x36>
  403a86:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403a88:	4d09      	ldr	r5, [pc, #36]	; (403ab0 <udc_sof_notify+0x3c>)
  403a8a:	e006      	b.n	403a9a <udc_sof_notify+0x26>
				iface_num++) {
  403a8c:	3401      	adds	r4, #1
  403a8e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403a90:	682b      	ldr	r3, [r5, #0]
  403a92:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  403a94:	7912      	ldrb	r2, [r2, #4]
  403a96:	42a2      	cmp	r2, r4
  403a98:	d907      	bls.n	403aaa <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  403a9a:	685b      	ldr	r3, [r3, #4]
  403a9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  403aa0:	691b      	ldr	r3, [r3, #16]
  403aa2:	2b00      	cmp	r3, #0
  403aa4:	d0f2      	beq.n	403a8c <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  403aa6:	4798      	blx	r3
  403aa8:	e7f0      	b.n	403a8c <udc_sof_notify+0x18>
  403aaa:	bd38      	pop	{r3, r4, r5, pc}
  403aac:	20000d1c 	.word	0x20000d1c
  403ab0:	20000d20 	.word	0x20000d20

00403ab4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  403ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  403ab6:	4b91      	ldr	r3, [pc, #580]	; (403cfc <udc_process_setup+0x248>)
  403ab8:	2200      	movs	r2, #0
  403aba:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  403abc:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  403abe:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  403ac0:	781b      	ldrb	r3, [r3, #0]
  403ac2:	f013 0f80 	tst.w	r3, #128	; 0x80
  403ac6:	d114      	bne.n	403af2 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  403ac8:	f013 0f60 	tst.w	r3, #96	; 0x60
  403acc:	f000 80d5 	beq.w	403c7a <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  403ad0:	4b8a      	ldr	r3, [pc, #552]	; (403cfc <udc_process_setup+0x248>)
  403ad2:	781b      	ldrb	r3, [r3, #0]
  403ad4:	f003 031f 	and.w	r3, r3, #31
  403ad8:	2b01      	cmp	r3, #1
  403ada:	f000 8185 	beq.w	403de8 <udc_process_setup+0x334>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  403ade:	4b87      	ldr	r3, [pc, #540]	; (403cfc <udc_process_setup+0x248>)
  403ae0:	781b      	ldrb	r3, [r3, #0]
  403ae2:	f003 031f 	and.w	r3, r3, #31
  403ae6:	2b02      	cmp	r3, #2
  403ae8:	f000 81db 	beq.w	403ea2 <udc_process_setup+0x3ee>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  403aec:	2300      	movs	r3, #0
#endif
}
  403aee:	4618      	mov	r0, r3
  403af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  403af2:	4a82      	ldr	r2, [pc, #520]	; (403cfc <udc_process_setup+0x248>)
  403af4:	88d2      	ldrh	r2, [r2, #6]
  403af6:	2a00      	cmp	r2, #0
  403af8:	f000 81fc 	beq.w	403ef4 <udc_process_setup+0x440>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  403afc:	f013 0f60 	tst.w	r3, #96	; 0x60
  403b00:	d1e6      	bne.n	403ad0 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  403b02:	f013 031f 	ands.w	r3, r3, #31
  403b06:	d106      	bne.n	403b16 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  403b08:	497c      	ldr	r1, [pc, #496]	; (403cfc <udc_process_setup+0x248>)
  403b0a:	7849      	ldrb	r1, [r1, #1]
  403b0c:	2906      	cmp	r1, #6
  403b0e:	d014      	beq.n	403b3a <udc_process_setup+0x86>
  403b10:	2908      	cmp	r1, #8
  403b12:	d074      	beq.n	403bfe <udc_process_setup+0x14a>
  403b14:	b151      	cbz	r1, 403b2c <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  403b16:	2b01      	cmp	r3, #1
  403b18:	d079      	beq.n	403c0e <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  403b1a:	2b02      	cmp	r3, #2
  403b1c:	d1d8      	bne.n	403ad0 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  403b1e:	4b77      	ldr	r3, [pc, #476]	; (403cfc <udc_process_setup+0x248>)
  403b20:	785b      	ldrb	r3, [r3, #1]
  403b22:	2b00      	cmp	r3, #0
  403b24:	f000 809b 	beq.w	403c5e <udc_process_setup+0x1aa>
	return false;
  403b28:	2300      	movs	r3, #0
  403b2a:	e14f      	b.n	403dcc <udc_process_setup+0x318>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  403b2c:	2a02      	cmp	r2, #2
  403b2e:	d1d6      	bne.n	403ade <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  403b30:	2102      	movs	r1, #2
  403b32:	4873      	ldr	r0, [pc, #460]	; (403d00 <udc_process_setup+0x24c>)
  403b34:	4b73      	ldr	r3, [pc, #460]	; (403d04 <udc_process_setup+0x250>)
  403b36:	4798      	blx	r3
  403b38:	e0b8      	b.n	403cac <udc_process_setup+0x1f8>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  403b3a:	4b70      	ldr	r3, [pc, #448]	; (403cfc <udc_process_setup+0x248>)
  403b3c:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  403b3e:	0a13      	lsrs	r3, r2, #8
  403b40:	3b01      	subs	r3, #1
  403b42:	2b0e      	cmp	r3, #14
  403b44:	f200 8191 	bhi.w	403e6a <udc_process_setup+0x3b6>
  403b48:	e8df f013 	tbh	[pc, r3, lsl #1]
  403b4c:	001d000f 	.word	0x001d000f
  403b50:	018f0037 	.word	0x018f0037
  403b54:	018f018f 	.word	0x018f018f
  403b58:	018f018f 	.word	0x018f018f
  403b5c:	018f018f 	.word	0x018f018f
  403b60:	018f018f 	.word	0x018f018f
  403b64:	018f018f 	.word	0x018f018f
  403b68:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  403b6a:	4b67      	ldr	r3, [pc, #412]	; (403d08 <udc_process_setup+0x254>)
  403b6c:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  403b6e:	7801      	ldrb	r1, [r0, #0]
  403b70:	4b64      	ldr	r3, [pc, #400]	; (403d04 <udc_process_setup+0x250>)
  403b72:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  403b74:	4b61      	ldr	r3, [pc, #388]	; (403cfc <udc_process_setup+0x248>)
  403b76:	88da      	ldrh	r2, [r3, #6]
  403b78:	899b      	ldrh	r3, [r3, #12]
  403b7a:	4293      	cmp	r3, r2
  403b7c:	f240 8096 	bls.w	403cac <udc_process_setup+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  403b80:	4b5e      	ldr	r3, [pc, #376]	; (403cfc <udc_process_setup+0x248>)
  403b82:	819a      	strh	r2, [r3, #12]
  403b84:	e092      	b.n	403cac <udc_process_setup+0x1f8>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  403b86:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  403b88:	4b5f      	ldr	r3, [pc, #380]	; (403d08 <udc_process_setup+0x254>)
  403b8a:	681b      	ldr	r3, [r3, #0]
  403b8c:	7c5b      	ldrb	r3, [r3, #17]
  403b8e:	4293      	cmp	r3, r2
  403b90:	d9a5      	bls.n	403ade <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  403b92:	4b5d      	ldr	r3, [pc, #372]	; (403d08 <udc_process_setup+0x254>)
  403b94:	685b      	ldr	r3, [r3, #4]
  403b96:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  403b9a:	8841      	ldrh	r1, [r0, #2]
  403b9c:	4b59      	ldr	r3, [pc, #356]	; (403d04 <udc_process_setup+0x250>)
  403b9e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  403ba0:	4b56      	ldr	r3, [pc, #344]	; (403cfc <udc_process_setup+0x248>)
  403ba2:	689b      	ldr	r3, [r3, #8]
  403ba4:	2202      	movs	r2, #2
  403ba6:	705a      	strb	r2, [r3, #1]
  403ba8:	e7e4      	b.n	403b74 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  403baa:	4b57      	ldr	r3, [pc, #348]	; (403d08 <udc_process_setup+0x254>)
  403bac:	6898      	ldr	r0, [r3, #8]
  403bae:	2800      	cmp	r0, #0
  403bb0:	d095      	beq.n	403ade <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  403bb2:	8841      	ldrh	r1, [r0, #2]
  403bb4:	4b53      	ldr	r3, [pc, #332]	; (403d04 <udc_process_setup+0x250>)
  403bb6:	4798      	blx	r3
  403bb8:	e7dc      	b.n	403b74 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  403bba:	b2d2      	uxtb	r2, r2
  403bbc:	2a01      	cmp	r2, #1
  403bbe:	d01b      	beq.n	403bf8 <udc_process_setup+0x144>
  403bc0:	b1aa      	cbz	r2, 403bee <udc_process_setup+0x13a>
  403bc2:	2a02      	cmp	r2, #2
  403bc4:	d184      	bne.n	403ad0 <udc_process_setup+0x1c>
		str = udc_string_product_name;
  403bc6:	4a51      	ldr	r2, [pc, #324]	; (403d0c <udc_process_setup+0x258>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  403bc8:	2414      	movs	r4, #20
  403bca:	3a01      	subs	r2, #1
  403bcc:	4950      	ldr	r1, [pc, #320]	; (403d10 <udc_process_setup+0x25c>)
  403bce:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  403bd0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403bd4:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
  403bd8:	3301      	adds	r3, #1
  403bda:	b2db      	uxtb	r3, r3
  403bdc:	42a3      	cmp	r3, r4
  403bde:	d3f7      	bcc.n	403bd0 <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  403be0:	0061      	lsls	r1, r4, #1
  403be2:	3102      	adds	r1, #2
  403be4:	484a      	ldr	r0, [pc, #296]	; (403d10 <udc_process_setup+0x25c>)
  403be6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  403be8:	4b46      	ldr	r3, [pc, #280]	; (403d04 <udc_process_setup+0x250>)
  403bea:	4798      	blx	r3
  403bec:	e7c2      	b.n	403b74 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  403bee:	2104      	movs	r1, #4
  403bf0:	4848      	ldr	r0, [pc, #288]	; (403d14 <udc_process_setup+0x260>)
  403bf2:	4b44      	ldr	r3, [pc, #272]	; (403d04 <udc_process_setup+0x250>)
  403bf4:	4798      	blx	r3
  403bf6:	e7bd      	b.n	403b74 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  403bf8:	4a47      	ldr	r2, [pc, #284]	; (403d18 <udc_process_setup+0x264>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  403bfa:	2419      	movs	r4, #25
  403bfc:	e7e5      	b.n	403bca <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
  403bfe:	2a01      	cmp	r2, #1
  403c00:	f47f af6d 	bne.w	403ade <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  403c04:	2101      	movs	r1, #1
  403c06:	4845      	ldr	r0, [pc, #276]	; (403d1c <udc_process_setup+0x268>)
  403c08:	4b3e      	ldr	r3, [pc, #248]	; (403d04 <udc_process_setup+0x250>)
  403c0a:	4798      	blx	r3
  403c0c:	e04e      	b.n	403cac <udc_process_setup+0x1f8>
			switch (udd_g_ctrlreq.req.bRequest) {
  403c0e:	493b      	ldr	r1, [pc, #236]	; (403cfc <udc_process_setup+0x248>)
  403c10:	7849      	ldrb	r1, [r1, #1]
  403c12:	290a      	cmp	r1, #10
  403c14:	d181      	bne.n	403b1a <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  403c16:	2a01      	cmp	r2, #1
  403c18:	f040 80e6 	bne.w	403de8 <udc_process_setup+0x334>
	if (!udc_num_configuration) {
  403c1c:	4b3f      	ldr	r3, [pc, #252]	; (403d1c <udc_process_setup+0x268>)
  403c1e:	781b      	ldrb	r3, [r3, #0]
  403c20:	2b00      	cmp	r3, #0
  403c22:	f000 80e1 	beq.w	403de8 <udc_process_setup+0x334>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403c26:	4b35      	ldr	r3, [pc, #212]	; (403cfc <udc_process_setup+0x248>)
  403c28:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  403c2a:	4b3d      	ldr	r3, [pc, #244]	; (403d20 <udc_process_setup+0x26c>)
  403c2c:	681d      	ldr	r5, [r3, #0]
  403c2e:	682b      	ldr	r3, [r5, #0]
  403c30:	791b      	ldrb	r3, [r3, #4]
  403c32:	42a3      	cmp	r3, r4
  403c34:	f240 80d8 	bls.w	403de8 <udc_process_setup+0x334>
	if (!udc_update_iface_desc(iface_num, 0)) {
  403c38:	2100      	movs	r1, #0
  403c3a:	4620      	mov	r0, r4
  403c3c:	4b39      	ldr	r3, [pc, #228]	; (403d24 <udc_process_setup+0x270>)
  403c3e:	4798      	blx	r3
  403c40:	2800      	cmp	r0, #0
  403c42:	f43f af45 	beq.w	403ad0 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  403c46:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  403c48:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  403c4c:	68db      	ldr	r3, [r3, #12]
  403c4e:	4798      	blx	r3
  403c50:	4b35      	ldr	r3, [pc, #212]	; (403d28 <udc_process_setup+0x274>)
  403c52:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  403c54:	2101      	movs	r1, #1
  403c56:	4618      	mov	r0, r3
  403c58:	4b2a      	ldr	r3, [pc, #168]	; (403d04 <udc_process_setup+0x250>)
  403c5a:	4798      	blx	r3
  403c5c:	e026      	b.n	403cac <udc_process_setup+0x1f8>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  403c5e:	2a02      	cmp	r2, #2
  403c60:	f47f af3d 	bne.w	403ade <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  403c64:	4b25      	ldr	r3, [pc, #148]	; (403cfc <udc_process_setup+0x248>)
  403c66:	7918      	ldrb	r0, [r3, #4]
  403c68:	4b30      	ldr	r3, [pc, #192]	; (403d2c <udc_process_setup+0x278>)
  403c6a:	4798      	blx	r3
  403c6c:	4b30      	ldr	r3, [pc, #192]	; (403d30 <udc_process_setup+0x27c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  403c6e:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  403c70:	2102      	movs	r1, #2
  403c72:	4618      	mov	r0, r3
  403c74:	4b23      	ldr	r3, [pc, #140]	; (403d04 <udc_process_setup+0x250>)
  403c76:	4798      	blx	r3
  403c78:	e018      	b.n	403cac <udc_process_setup+0x1f8>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  403c7a:	f013 031f 	ands.w	r3, r3, #31
  403c7e:	f040 8099 	bne.w	403db4 <udc_process_setup+0x300>
			switch (udd_g_ctrlreq.req.bRequest) {
  403c82:	4a1e      	ldr	r2, [pc, #120]	; (403cfc <udc_process_setup+0x248>)
  403c84:	7852      	ldrb	r2, [r2, #1]
  403c86:	3a01      	subs	r2, #1
  403c88:	2a08      	cmp	r2, #8
  403c8a:	f200 8093 	bhi.w	403db4 <udc_process_setup+0x300>
  403c8e:	e8df f002 	tbb	[pc, r2]
  403c92:	910f      	.short	0x910f
  403c94:	91059121 	.word	0x91059121
  403c98:	9191      	.short	0x9191
  403c9a:	57          	.byte	0x57
  403c9b:	00          	.byte	0x00
	if (udd_g_ctrlreq.req.wLength) {
  403c9c:	4b17      	ldr	r3, [pc, #92]	; (403cfc <udc_process_setup+0x248>)
  403c9e:	88db      	ldrh	r3, [r3, #6]
  403ca0:	2b00      	cmp	r3, #0
  403ca2:	f47f af1c 	bne.w	403ade <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  403ca6:	4a23      	ldr	r2, [pc, #140]	; (403d34 <udc_process_setup+0x280>)
  403ca8:	4b14      	ldr	r3, [pc, #80]	; (403cfc <udc_process_setup+0x248>)
  403caa:	611a      	str	r2, [r3, #16]
			return true;
  403cac:	2301      	movs	r3, #1
  403cae:	e71e      	b.n	403aee <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  403cb0:	4b12      	ldr	r3, [pc, #72]	; (403cfc <udc_process_setup+0x248>)
  403cb2:	88db      	ldrh	r3, [r3, #6]
  403cb4:	2b00      	cmp	r3, #0
  403cb6:	f47f af12 	bne.w	403ade <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  403cba:	4b10      	ldr	r3, [pc, #64]	; (403cfc <udc_process_setup+0x248>)
  403cbc:	885b      	ldrh	r3, [r3, #2]
  403cbe:	2b01      	cmp	r3, #1
  403cc0:	f47f af0d 	bne.w	403ade <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  403cc4:	4a0e      	ldr	r2, [pc, #56]	; (403d00 <udc_process_setup+0x24c>)
  403cc6:	8813      	ldrh	r3, [r2, #0]
  403cc8:	f023 0302 	bic.w	r3, r3, #2
  403ccc:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
  403cce:	4b1a      	ldr	r3, [pc, #104]	; (403d38 <udc_process_setup+0x284>)
  403cd0:	4798      	blx	r3
  403cd2:	e7eb      	b.n	403cac <udc_process_setup+0x1f8>
	if (udd_g_ctrlreq.req.wLength) {
  403cd4:	4b09      	ldr	r3, [pc, #36]	; (403cfc <udc_process_setup+0x248>)
  403cd6:	88db      	ldrh	r3, [r3, #6]
  403cd8:	2b00      	cmp	r3, #0
  403cda:	f47f af00 	bne.w	403ade <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
  403cde:	4b07      	ldr	r3, [pc, #28]	; (403cfc <udc_process_setup+0x248>)
  403ce0:	885b      	ldrh	r3, [r3, #2]
  403ce2:	2b01      	cmp	r3, #1
  403ce4:	d001      	beq.n	403cea <udc_process_setup+0x236>
	return false;
  403ce6:	2300      	movs	r3, #0
  403ce8:	e070      	b.n	403dcc <udc_process_setup+0x318>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
  403cea:	4a05      	ldr	r2, [pc, #20]	; (403d00 <udc_process_setup+0x24c>)
  403cec:	8813      	ldrh	r3, [r2, #0]
  403cee:	f043 0302 	orr.w	r3, r3, #2
  403cf2:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
  403cf4:	4b11      	ldr	r3, [pc, #68]	; (403d3c <udc_process_setup+0x288>)
  403cf6:	4798      	blx	r3
  403cf8:	e7d8      	b.n	403cac <udc_process_setup+0x1f8>
  403cfa:	bf00      	nop
  403cfc:	20003014 	.word	0x20003014
  403d00:	20000d14 	.word	0x20000d14
  403d04:	0040607d 	.word	0x0040607d
  403d08:	200000e4 	.word	0x200000e4
  403d0c:	20000190 	.word	0x20000190
  403d10:	2000013c 	.word	0x2000013c
  403d14:	20000170 	.word	0x20000170
  403d18:	20000174 	.word	0x20000174
  403d1c:	20000d1c 	.word	0x20000d1c
  403d20:	20000d20 	.word	0x20000d20
  403d24:	004038c5 	.word	0x004038c5
  403d28:	20000d18 	.word	0x20000d18
  403d2c:	004061d9 	.word	0x004061d9
  403d30:	20000d16 	.word	0x20000d16
  403d34:	004038ad 	.word	0x004038ad
  403d38:	0040b081 	.word	0x0040b081
  403d3c:	0040b083 	.word	0x0040b083
	if (udd_g_ctrlreq.req.wLength) {
  403d40:	4b6e      	ldr	r3, [pc, #440]	; (403efc <udc_process_setup+0x448>)
  403d42:	88db      	ldrh	r3, [r3, #6]
  403d44:	2b00      	cmp	r3, #0
  403d46:	f47f aeca 	bne.w	403ade <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  403d4a:	4b6d      	ldr	r3, [pc, #436]	; (403f00 <udc_process_setup+0x44c>)
  403d4c:	4798      	blx	r3
  403d4e:	2800      	cmp	r0, #0
  403d50:	f43f aebe 	beq.w	403ad0 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  403d54:	4b69      	ldr	r3, [pc, #420]	; (403efc <udc_process_setup+0x448>)
  403d56:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  403d58:	4b6a      	ldr	r3, [pc, #424]	; (403f04 <udc_process_setup+0x450>)
  403d5a:	681b      	ldr	r3, [r3, #0]
  403d5c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  403d5e:	429a      	cmp	r2, r3
  403d60:	f73f aeb6 	bgt.w	403ad0 <udc_process_setup+0x1c>
	udc_reset();
  403d64:	4b68      	ldr	r3, [pc, #416]	; (403f08 <udc_process_setup+0x454>)
  403d66:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  403d68:	4b64      	ldr	r3, [pc, #400]	; (403efc <udc_process_setup+0x448>)
  403d6a:	789b      	ldrb	r3, [r3, #2]
  403d6c:	4a67      	ldr	r2, [pc, #412]	; (403f0c <udc_process_setup+0x458>)
  403d6e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  403d70:	2b00      	cmp	r3, #0
  403d72:	d09b      	beq.n	403cac <udc_process_setup+0x1f8>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  403d74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  403d78:	3b01      	subs	r3, #1
  403d7a:	4a62      	ldr	r2, [pc, #392]	; (403f04 <udc_process_setup+0x450>)
  403d7c:	6852      	ldr	r2, [r2, #4]
  403d7e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  403d82:	4963      	ldr	r1, [pc, #396]	; (403f10 <udc_process_setup+0x45c>)
  403d84:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403d86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  403d8a:	791b      	ldrb	r3, [r3, #4]
  403d8c:	2b00      	cmp	r3, #0
  403d8e:	d08d      	beq.n	403cac <udc_process_setup+0x1f8>
  403d90:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  403d92:	4626      	mov	r6, r4
  403d94:	4d5f      	ldr	r5, [pc, #380]	; (403f14 <udc_process_setup+0x460>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403d96:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  403d98:	4631      	mov	r1, r6
  403d9a:	4620      	mov	r0, r4
  403d9c:	47a8      	blx	r5
  403d9e:	2800      	cmp	r0, #0
  403da0:	f43f ae96 	beq.w	403ad0 <udc_process_setup+0x1c>
			iface_num++) {
  403da4:	3401      	adds	r4, #1
  403da6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403da8:	683b      	ldr	r3, [r7, #0]
  403daa:	681b      	ldr	r3, [r3, #0]
  403dac:	791b      	ldrb	r3, [r3, #4]
  403dae:	42a3      	cmp	r3, r4
  403db0:	d8f2      	bhi.n	403d98 <udc_process_setup+0x2e4>
  403db2:	e77b      	b.n	403cac <udc_process_setup+0x1f8>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  403db4:	2b01      	cmp	r3, #1
  403db6:	d00d      	beq.n	403dd4 <udc_process_setup+0x320>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  403db8:	2b02      	cmp	r3, #2
  403dba:	f47f ae89 	bne.w	403ad0 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  403dbe:	4b4f      	ldr	r3, [pc, #316]	; (403efc <udc_process_setup+0x448>)
  403dc0:	785b      	ldrb	r3, [r3, #1]
  403dc2:	2b01      	cmp	r3, #1
  403dc4:	d02e      	beq.n	403e24 <udc_process_setup+0x370>
  403dc6:	2b03      	cmp	r3, #3
  403dc8:	d03c      	beq.n	403e44 <udc_process_setup+0x390>
	return false;
  403dca:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  403dcc:	2b00      	cmp	r3, #0
  403dce:	f47f ae8e 	bne.w	403aee <udc_process_setup+0x3a>
  403dd2:	e67d      	b.n	403ad0 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  403dd4:	4a49      	ldr	r2, [pc, #292]	; (403efc <udc_process_setup+0x448>)
  403dd6:	7852      	ldrb	r2, [r2, #1]
  403dd8:	2a0b      	cmp	r2, #11
  403dda:	d1ed      	bne.n	403db8 <udc_process_setup+0x304>
	if (udd_g_ctrlreq.req.wLength) {
  403ddc:	4b47      	ldr	r3, [pc, #284]	; (403efc <udc_process_setup+0x448>)
  403dde:	88db      	ldrh	r3, [r3, #6]
  403de0:	b913      	cbnz	r3, 403de8 <udc_process_setup+0x334>
	if (!udc_num_configuration) {
  403de2:	4b4a      	ldr	r3, [pc, #296]	; (403f0c <udc_process_setup+0x458>)
  403de4:	781b      	ldrb	r3, [r3, #0]
  403de6:	b973      	cbnz	r3, 403e06 <udc_process_setup+0x352>
	if (0 == udc_num_configuration) {
  403de8:	4b48      	ldr	r3, [pc, #288]	; (403f0c <udc_process_setup+0x458>)
  403dea:	781b      	ldrb	r3, [r3, #0]
  403dec:	2b00      	cmp	r3, #0
  403dee:	f000 8083 	beq.w	403ef8 <udc_process_setup+0x444>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403df2:	4b42      	ldr	r3, [pc, #264]	; (403efc <udc_process_setup+0x448>)
  403df4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  403df6:	4b46      	ldr	r3, [pc, #280]	; (403f10 <udc_process_setup+0x45c>)
  403df8:	681d      	ldr	r5, [r3, #0]
  403dfa:	682b      	ldr	r3, [r5, #0]
  403dfc:	791b      	ldrb	r3, [r3, #4]
  403dfe:	42a3      	cmp	r3, r4
  403e00:	d835      	bhi.n	403e6e <udc_process_setup+0x3ba>
	return false;
  403e02:	2300      	movs	r3, #0
  403e04:	e673      	b.n	403aee <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403e06:	4b3d      	ldr	r3, [pc, #244]	; (403efc <udc_process_setup+0x448>)
  403e08:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  403e0a:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  403e0c:	4620      	mov	r0, r4
  403e0e:	4b42      	ldr	r3, [pc, #264]	; (403f18 <udc_process_setup+0x464>)
  403e10:	4798      	blx	r3
  403e12:	2800      	cmp	r0, #0
  403e14:	f43f ae5c 	beq.w	403ad0 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  403e18:	b2e9      	uxtb	r1, r5
  403e1a:	4620      	mov	r0, r4
  403e1c:	4b3d      	ldr	r3, [pc, #244]	; (403f14 <udc_process_setup+0x460>)
  403e1e:	4798      	blx	r3
  403e20:	4603      	mov	r3, r0
  403e22:	e7d3      	b.n	403dcc <udc_process_setup+0x318>
	if (udd_g_ctrlreq.req.wLength) {
  403e24:	4b35      	ldr	r3, [pc, #212]	; (403efc <udc_process_setup+0x448>)
  403e26:	88db      	ldrh	r3, [r3, #6]
  403e28:	2b00      	cmp	r3, #0
  403e2a:	f47f ae58 	bne.w	403ade <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  403e2e:	4b33      	ldr	r3, [pc, #204]	; (403efc <udc_process_setup+0x448>)
  403e30:	885b      	ldrh	r3, [r3, #2]
  403e32:	2b00      	cmp	r3, #0
  403e34:	f47f ae53 	bne.w	403ade <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  403e38:	4b30      	ldr	r3, [pc, #192]	; (403efc <udc_process_setup+0x448>)
  403e3a:	7918      	ldrb	r0, [r3, #4]
  403e3c:	4b37      	ldr	r3, [pc, #220]	; (403f1c <udc_process_setup+0x468>)
  403e3e:	4798      	blx	r3
  403e40:	4603      	mov	r3, r0
  403e42:	e7c3      	b.n	403dcc <udc_process_setup+0x318>
	if (udd_g_ctrlreq.req.wLength) {
  403e44:	4b2d      	ldr	r3, [pc, #180]	; (403efc <udc_process_setup+0x448>)
  403e46:	88db      	ldrh	r3, [r3, #6]
  403e48:	2b00      	cmp	r3, #0
  403e4a:	f47f ae48 	bne.w	403ade <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  403e4e:	4b2b      	ldr	r3, [pc, #172]	; (403efc <udc_process_setup+0x448>)
  403e50:	885b      	ldrh	r3, [r3, #2]
  403e52:	2b00      	cmp	r3, #0
  403e54:	f47f ae43 	bne.w	403ade <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  403e58:	4c28      	ldr	r4, [pc, #160]	; (403efc <udc_process_setup+0x448>)
  403e5a:	7920      	ldrb	r0, [r4, #4]
  403e5c:	4b30      	ldr	r3, [pc, #192]	; (403f20 <udc_process_setup+0x46c>)
  403e5e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  403e60:	7920      	ldrb	r0, [r4, #4]
  403e62:	4b30      	ldr	r3, [pc, #192]	; (403f24 <udc_process_setup+0x470>)
  403e64:	4798      	blx	r3
  403e66:	4603      	mov	r3, r0
  403e68:	e7b0      	b.n	403dcc <udc_process_setup+0x318>
		return false;
  403e6a:	2300      	movs	r3, #0
  403e6c:	e7ae      	b.n	403dcc <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
  403e6e:	2100      	movs	r1, #0
  403e70:	4620      	mov	r0, r4
  403e72:	4b2d      	ldr	r3, [pc, #180]	; (403f28 <udc_process_setup+0x474>)
  403e74:	4798      	blx	r3
  403e76:	2800      	cmp	r0, #0
  403e78:	f43f ae31 	beq.w	403ade <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  403e7c:	686b      	ldr	r3, [r5, #4]
  403e7e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403e82:	68eb      	ldr	r3, [r5, #12]
  403e84:	4798      	blx	r3
  403e86:	4601      	mov	r1, r0
  403e88:	4620      	mov	r0, r4
  403e8a:	4b27      	ldr	r3, [pc, #156]	; (403f28 <udc_process_setup+0x474>)
  403e8c:	4798      	blx	r3
  403e8e:	2800      	cmp	r0, #0
  403e90:	f43f ae25 	beq.w	403ade <udc_process_setup+0x2a>
	return udi_api->setup();
  403e94:	68ab      	ldr	r3, [r5, #8]
  403e96:	4798      	blx	r3
		if (udc_req_iface()) {
  403e98:	4603      	mov	r3, r0
  403e9a:	2800      	cmp	r0, #0
  403e9c:	f47f ae27 	bne.w	403aee <udc_process_setup+0x3a>
  403ea0:	e61d      	b.n	403ade <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  403ea2:	4b1a      	ldr	r3, [pc, #104]	; (403f0c <udc_process_setup+0x458>)
  403ea4:	781b      	ldrb	r3, [r3, #0]
  403ea6:	b30b      	cbz	r3, 403eec <udc_process_setup+0x438>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403ea8:	4b19      	ldr	r3, [pc, #100]	; (403f10 <udc_process_setup+0x45c>)
  403eaa:	681a      	ldr	r2, [r3, #0]
  403eac:	6813      	ldr	r3, [r2, #0]
  403eae:	791b      	ldrb	r3, [r3, #4]
  403eb0:	b1f3      	cbz	r3, 403ef0 <udc_process_setup+0x43c>
  403eb2:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403eb4:	4e1c      	ldr	r6, [pc, #112]	; (403f28 <udc_process_setup+0x474>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403eb6:	4f16      	ldr	r7, [pc, #88]	; (403f10 <udc_process_setup+0x45c>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  403eb8:	6853      	ldr	r3, [r2, #4]
  403eba:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403ebe:	68eb      	ldr	r3, [r5, #12]
  403ec0:	4798      	blx	r3
  403ec2:	4601      	mov	r1, r0
  403ec4:	4620      	mov	r0, r4
  403ec6:	47b0      	blx	r6
  403ec8:	4603      	mov	r3, r0
  403eca:	2800      	cmp	r0, #0
  403ecc:	f43f ae0f 	beq.w	403aee <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  403ed0:	68ab      	ldr	r3, [r5, #8]
  403ed2:	4798      	blx	r3
  403ed4:	4603      	mov	r3, r0
  403ed6:	2800      	cmp	r0, #0
  403ed8:	f47f ae09 	bne.w	403aee <udc_process_setup+0x3a>
			iface_num++) {
  403edc:	3401      	adds	r4, #1
  403ede:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403ee0:	683a      	ldr	r2, [r7, #0]
  403ee2:	6811      	ldr	r1, [r2, #0]
  403ee4:	7909      	ldrb	r1, [r1, #4]
  403ee6:	42a1      	cmp	r1, r4
  403ee8:	d8e6      	bhi.n	403eb8 <udc_process_setup+0x404>
  403eea:	e600      	b.n	403aee <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  403eec:	2300      	movs	r3, #0
  403eee:	e5fe      	b.n	403aee <udc_process_setup+0x3a>
	return false;
  403ef0:	2300      	movs	r3, #0
  403ef2:	e5fc      	b.n	403aee <udc_process_setup+0x3a>
			return false; // Error from USB host
  403ef4:	2300      	movs	r3, #0
  403ef6:	e5fa      	b.n	403aee <udc_process_setup+0x3a>
	return false;
  403ef8:	2300      	movs	r3, #0
  403efa:	e5f8      	b.n	403aee <udc_process_setup+0x3a>
  403efc:	20003014 	.word	0x20003014
  403f00:	00406061 	.word	0x00406061
  403f04:	200000e4 	.word	0x200000e4
  403f08:	00403a19 	.word	0x00403a19
  403f0c:	20000d1c 	.word	0x20000d1c
  403f10:	20000d20 	.word	0x20000d20
  403f14:	004039a5 	.word	0x004039a5
  403f18:	00403939 	.word	0x00403939
  403f1c:	004062fd 	.word	0x004062fd
  403f20:	00406551 	.word	0x00406551
  403f24:	00406219 	.word	0x00406219
  403f28:	004038c5 	.word	0x004038c5

00403f2c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  403f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  403f30:	b980      	cbnz	r0, 403f54 <_read+0x28>
  403f32:	460c      	mov	r4, r1
  403f34:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  403f36:	2a00      	cmp	r2, #0
  403f38:	dd0f      	ble.n	403f5a <_read+0x2e>
  403f3a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  403f3c:	4e08      	ldr	r6, [pc, #32]	; (403f60 <_read+0x34>)
  403f3e:	4d09      	ldr	r5, [pc, #36]	; (403f64 <_read+0x38>)
  403f40:	6830      	ldr	r0, [r6, #0]
  403f42:	4621      	mov	r1, r4
  403f44:	682b      	ldr	r3, [r5, #0]
  403f46:	4798      	blx	r3
		ptr++;
  403f48:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  403f4a:	42bc      	cmp	r4, r7
  403f4c:	d1f8      	bne.n	403f40 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  403f4e:	4640      	mov	r0, r8
  403f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  403f54:	f04f 38ff 	mov.w	r8, #4294967295
  403f58:	e7f9      	b.n	403f4e <_read+0x22>
	for (; len > 0; --len) {
  403f5a:	4680      	mov	r8, r0
  403f5c:	e7f7      	b.n	403f4e <_read+0x22>
  403f5e:	bf00      	nop
  403f60:	20003010 	.word	0x20003010
  403f64:	20003008 	.word	0x20003008

00403f68 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  403f68:	3801      	subs	r0, #1
  403f6a:	2802      	cmp	r0, #2
  403f6c:	d815      	bhi.n	403f9a <_write+0x32>
{
  403f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f72:	460e      	mov	r6, r1
  403f74:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  403f76:	b19a      	cbz	r2, 403fa0 <_write+0x38>
  403f78:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  403f7a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403fb4 <_write+0x4c>
  403f7e:	4f0c      	ldr	r7, [pc, #48]	; (403fb0 <_write+0x48>)
  403f80:	f8d8 0000 	ldr.w	r0, [r8]
  403f84:	f815 1b01 	ldrb.w	r1, [r5], #1
  403f88:	683b      	ldr	r3, [r7, #0]
  403f8a:	4798      	blx	r3
  403f8c:	2800      	cmp	r0, #0
  403f8e:	db0a      	blt.n	403fa6 <_write+0x3e>
  403f90:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  403f92:	3c01      	subs	r4, #1
  403f94:	d1f4      	bne.n	403f80 <_write+0x18>
  403f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  403f9a:	f04f 30ff 	mov.w	r0, #4294967295
  403f9e:	4770      	bx	lr
	for (; len != 0; --len) {
  403fa0:	4610      	mov	r0, r2
  403fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  403fa6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  403faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fae:	bf00      	nop
  403fb0:	2000300c 	.word	0x2000300c
  403fb4:	20003010 	.word	0x20003010

00403fb8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
  403fb8:	b538      	push	{r3, r4, r5, lr}

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  403fba:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  403fbe:	4b66      	ldr	r3, [pc, #408]	; (404158 <system_board_init+0x1a0>)
  403fc0:	605c      	str	r4, [r3, #4]
  403fc2:	200b      	movs	r0, #11
  403fc4:	4d65      	ldr	r5, [pc, #404]	; (40415c <system_board_init+0x1a4>)
  403fc6:	47a8      	blx	r5
  403fc8:	200c      	movs	r0, #12
  403fca:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403fcc:	4b64      	ldr	r3, [pc, #400]	; (404160 <system_board_init+0x1a8>)
  403fce:	2240      	movs	r2, #64	; 0x40
  403fd0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403fd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403fd6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403fd8:	2204      	movs	r2, #4
  403fda:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403fdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  403fe0:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  403fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403fe6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  403fe8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  403fee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403ff0:	f022 0204 	bic.w	r2, r2, #4
  403ff4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403ff6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403ff8:	f022 0204 	bic.w	r2, r2, #4
  403ffc:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403ffe:	2202      	movs	r2, #2
  404000:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404002:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404004:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404008:	4a56      	ldr	r2, [pc, #344]	; (404164 <system_board_init+0x1ac>)
  40400a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40400e:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404010:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404012:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404016:	6314      	str	r4, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404018:	6114      	str	r4, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40401a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40401e:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
  404022:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404024:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404028:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40402a:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40402c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404030:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  404032:	4304      	orrs	r4, r0
  404034:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404036:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  404038:	f024 54c0 	bic.w	r4, r4, #402653184	; 0x18000000
  40403c:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40403e:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  404040:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  404044:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404046:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40404a:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40404c:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40404e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404052:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  404054:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  404058:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40405a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40405c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  404060:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404062:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  404064:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404066:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40406a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40406c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40406e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404072:	6f18      	ldr	r0, [r3, #112]	; 0x70
  404074:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  404078:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40407a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40407c:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  404080:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404082:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  404084:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  404088:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40408a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40408e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404090:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404092:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404096:	6f18      	ldr	r0, [r3, #112]	; 0x70
  404098:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
  40409c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40409e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4040a0:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
  4040a4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4040a6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4040a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4040ac:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4040ae:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4040b2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4040b4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4040b6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4040ba:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4040bc:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  4040c0:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4040c2:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4040c4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  4040c8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4040ca:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4040cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  4040d0:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4040d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4040d6:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4040d8:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4040da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4040de:	6f10      	ldr	r0, [r2, #112]	; 0x70
  4040e0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
  4040e4:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4040e6:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4040e8:	f420 7080 	bic.w	r0, r0, #256	; 0x100
  4040ec:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4040ee:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  4040f0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4040f4:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4040f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4040fa:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4040fc:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4040fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404102:	6f10      	ldr	r0, [r2, #112]	; 0x70
  404104:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  404108:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40410a:	6f50      	ldr	r0, [r2, #116]	; 0x74
  40410c:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  404110:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404112:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  404114:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404118:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40411a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40411e:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  404120:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404122:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404126:	6f10      	ldr	r0, [r2, #112]	; 0x70
  404128:	4318      	orrs	r0, r3
  40412a:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40412c:	6f50      	ldr	r0, [r2, #116]	; 0x74
  40412e:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
  404132:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404134:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  404136:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404138:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40413c:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40413e:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404140:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404144:	6f13      	ldr	r3, [r2, #112]	; 0x70
  404146:	430b      	orrs	r3, r1
  404148:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40414a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40414c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404150:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404152:	6051      	str	r1, [r2, #4]
  404154:	bd38      	pop	{r3, r4, r5, pc}
  404156:	bf00      	nop
  404158:	400e1450 	.word	0x400e1450
  40415c:	00404771 	.word	0x00404771
  404160:	400e0e00 	.word	0x400e0e00
  404164:	400e1000 	.word	0x400e1000

00404168 <flexcom_enable>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  404168:	4b54      	ldr	r3, [pc, #336]	; (4042bc <flexcom_enable+0x154>)
  40416a:	781b      	ldrb	r3, [r3, #0]
  40416c:	2bff      	cmp	r3, #255	; 0xff
  40416e:	d034      	beq.n	4041da <flexcom_enable+0x72>
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  404170:	b500      	push	{lr}
  404172:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404174:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404178:	fab3 f383 	clz	r3, r3
  40417c:	095b      	lsrs	r3, r3, #5
  40417e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404180:	b672      	cpsid	i
  404182:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404186:	2200      	movs	r2, #0
  404188:	4b4d      	ldr	r3, [pc, #308]	; (4042c0 <flexcom_enable+0x158>)
  40418a:	701a      	strb	r2, [r3, #0]
	return flags;
  40418c:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40418e:	4a4b      	ldr	r2, [pc, #300]	; (4042bc <flexcom_enable+0x154>)
  404190:	7813      	ldrb	r3, [r2, #0]
  404192:	3301      	adds	r3, #1
  404194:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  404196:	b129      	cbz	r1, 4041a4 <flexcom_enable+0x3c>
		cpu_irq_enable();
  404198:	2201      	movs	r2, #1
  40419a:	4b49      	ldr	r3, [pc, #292]	; (4042c0 <flexcom_enable+0x158>)
  40419c:	701a      	strb	r2, [r3, #0]
  40419e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4041a2:	b662      	cpsie	i
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  4041a4:	4a47      	ldr	r2, [pc, #284]	; (4042c4 <flexcom_enable+0x15c>)
  4041a6:	4290      	cmp	r0, r2
  4041a8:	d018      	beq.n	4041dc <flexcom_enable+0x74>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  4041aa:	4a47      	ldr	r2, [pc, #284]	; (4042c8 <flexcom_enable+0x160>)
  4041ac:	4290      	cmp	r0, r2
  4041ae:	d023      	beq.n	4041f8 <flexcom_enable+0x90>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  4041b0:	4a46      	ldr	r2, [pc, #280]	; (4042cc <flexcom_enable+0x164>)
  4041b2:	4290      	cmp	r0, r2
  4041b4:	d02e      	beq.n	404214 <flexcom_enable+0xac>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4041b6:	4a46      	ldr	r2, [pc, #280]	; (4042d0 <flexcom_enable+0x168>)
  4041b8:	4290      	cmp	r0, r2
  4041ba:	d039      	beq.n	404230 <flexcom_enable+0xc8>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  4041bc:	4a45      	ldr	r2, [pc, #276]	; (4042d4 <flexcom_enable+0x16c>)
  4041be:	4290      	cmp	r0, r2
  4041c0:	d044      	beq.n	40424c <flexcom_enable+0xe4>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  4041c2:	4a45      	ldr	r2, [pc, #276]	; (4042d8 <flexcom_enable+0x170>)
  4041c4:	4290      	cmp	r0, r2
  4041c6:	d04f      	beq.n	404268 <flexcom_enable+0x100>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  4041c8:	4a44      	ldr	r2, [pc, #272]	; (4042dc <flexcom_enable+0x174>)
  4041ca:	4290      	cmp	r0, r2
  4041cc:	d05a      	beq.n	404284 <flexcom_enable+0x11c>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  4041ce:	4a44      	ldr	r2, [pc, #272]	; (4042e0 <flexcom_enable+0x178>)
  4041d0:	4290      	cmp	r0, r2
  4041d2:	d065      	beq.n	4042a0 <flexcom_enable+0x138>
	} else
#endif
	{
		Assert(false);
	}
}
  4041d4:	b003      	add	sp, #12
  4041d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4041da:	e7fe      	b.n	4041da <flexcom_enable+0x72>
  4041dc:	2007      	movs	r0, #7
  4041de:	4b41      	ldr	r3, [pc, #260]	; (4042e4 <flexcom_enable+0x17c>)
  4041e0:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  4041e2:	2007      	movs	r0, #7
  4041e4:	4b40      	ldr	r3, [pc, #256]	; (4042e8 <flexcom_enable+0x180>)
  4041e6:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4041e8:	2100      	movs	r1, #0
  4041ea:	2007      	movs	r0, #7
  4041ec:	4b3f      	ldr	r3, [pc, #252]	; (4042ec <flexcom_enable+0x184>)
  4041ee:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4041f0:	2007      	movs	r0, #7
  4041f2:	4b3f      	ldr	r3, [pc, #252]	; (4042f0 <flexcom_enable+0x188>)
  4041f4:	4798      	blx	r3
  4041f6:	e7ed      	b.n	4041d4 <flexcom_enable+0x6c>
  4041f8:	2016      	movs	r0, #22
  4041fa:	4b3a      	ldr	r3, [pc, #232]	; (4042e4 <flexcom_enable+0x17c>)
  4041fc:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  4041fe:	2007      	movs	r0, #7
  404200:	4b39      	ldr	r3, [pc, #228]	; (4042e8 <flexcom_enable+0x180>)
  404202:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  404204:	2100      	movs	r1, #0
  404206:	2007      	movs	r0, #7
  404208:	4b38      	ldr	r3, [pc, #224]	; (4042ec <flexcom_enable+0x184>)
  40420a:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40420c:	2007      	movs	r0, #7
  40420e:	4b38      	ldr	r3, [pc, #224]	; (4042f0 <flexcom_enable+0x188>)
  404210:	4798      	blx	r3
  404212:	e7df      	b.n	4041d4 <flexcom_enable+0x6c>
  404214:	2015      	movs	r0, #21
  404216:	4b33      	ldr	r3, [pc, #204]	; (4042e4 <flexcom_enable+0x17c>)
  404218:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  40421a:	2007      	movs	r0, #7
  40421c:	4b32      	ldr	r3, [pc, #200]	; (4042e8 <flexcom_enable+0x180>)
  40421e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  404220:	2100      	movs	r1, #0
  404222:	2007      	movs	r0, #7
  404224:	4b31      	ldr	r3, [pc, #196]	; (4042ec <flexcom_enable+0x184>)
  404226:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  404228:	2007      	movs	r0, #7
  40422a:	4b31      	ldr	r3, [pc, #196]	; (4042f0 <flexcom_enable+0x188>)
  40422c:	4798      	blx	r3
  40422e:	e7d1      	b.n	4041d4 <flexcom_enable+0x6c>
  404230:	2014      	movs	r0, #20
  404232:	4b2c      	ldr	r3, [pc, #176]	; (4042e4 <flexcom_enable+0x17c>)
  404234:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  404236:	2007      	movs	r0, #7
  404238:	4b2b      	ldr	r3, [pc, #172]	; (4042e8 <flexcom_enable+0x180>)
  40423a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40423c:	2100      	movs	r1, #0
  40423e:	2007      	movs	r0, #7
  404240:	4b2a      	ldr	r3, [pc, #168]	; (4042ec <flexcom_enable+0x184>)
  404242:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  404244:	2007      	movs	r0, #7
  404246:	4b2a      	ldr	r3, [pc, #168]	; (4042f0 <flexcom_enable+0x188>)
  404248:	4798      	blx	r3
  40424a:	e7c3      	b.n	4041d4 <flexcom_enable+0x6c>
  40424c:	2013      	movs	r0, #19
  40424e:	4b25      	ldr	r3, [pc, #148]	; (4042e4 <flexcom_enable+0x17c>)
  404250:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  404252:	2006      	movs	r0, #6
  404254:	4b24      	ldr	r3, [pc, #144]	; (4042e8 <flexcom_enable+0x180>)
  404256:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  404258:	2100      	movs	r1, #0
  40425a:	2006      	movs	r0, #6
  40425c:	4b23      	ldr	r3, [pc, #140]	; (4042ec <flexcom_enable+0x184>)
  40425e:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  404260:	2006      	movs	r0, #6
  404262:	4b23      	ldr	r3, [pc, #140]	; (4042f0 <flexcom_enable+0x188>)
  404264:	4798      	blx	r3
  404266:	e7b5      	b.n	4041d4 <flexcom_enable+0x6c>
  404268:	200e      	movs	r0, #14
  40426a:	4b1e      	ldr	r3, [pc, #120]	; (4042e4 <flexcom_enable+0x17c>)
  40426c:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  40426e:	2006      	movs	r0, #6
  404270:	4b1d      	ldr	r3, [pc, #116]	; (4042e8 <flexcom_enable+0x180>)
  404272:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  404274:	2100      	movs	r1, #0
  404276:	2006      	movs	r0, #6
  404278:	4b1c      	ldr	r3, [pc, #112]	; (4042ec <flexcom_enable+0x184>)
  40427a:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40427c:	2006      	movs	r0, #6
  40427e:	4b1c      	ldr	r3, [pc, #112]	; (4042f0 <flexcom_enable+0x188>)
  404280:	4798      	blx	r3
  404282:	e7a7      	b.n	4041d4 <flexcom_enable+0x6c>
  404284:	2009      	movs	r0, #9
  404286:	4b17      	ldr	r3, [pc, #92]	; (4042e4 <flexcom_enable+0x17c>)
  404288:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  40428a:	2006      	movs	r0, #6
  40428c:	4b16      	ldr	r3, [pc, #88]	; (4042e8 <flexcom_enable+0x180>)
  40428e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  404290:	2100      	movs	r1, #0
  404292:	2006      	movs	r0, #6
  404294:	4b15      	ldr	r3, [pc, #84]	; (4042ec <flexcom_enable+0x184>)
  404296:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  404298:	2006      	movs	r0, #6
  40429a:	4b15      	ldr	r3, [pc, #84]	; (4042f0 <flexcom_enable+0x188>)
  40429c:	4798      	blx	r3
  40429e:	e799      	b.n	4041d4 <flexcom_enable+0x6c>
  4042a0:	2008      	movs	r0, #8
  4042a2:	4b10      	ldr	r3, [pc, #64]	; (4042e4 <flexcom_enable+0x17c>)
  4042a4:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  4042a6:	2006      	movs	r0, #6
  4042a8:	4b0f      	ldr	r3, [pc, #60]	; (4042e8 <flexcom_enable+0x180>)
  4042aa:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4042ac:	2100      	movs	r1, #0
  4042ae:	2006      	movs	r0, #6
  4042b0:	4b0e      	ldr	r3, [pc, #56]	; (4042ec <flexcom_enable+0x184>)
  4042b2:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4042b4:	2006      	movs	r0, #6
  4042b6:	4b0e      	ldr	r3, [pc, #56]	; (4042f0 <flexcom_enable+0x188>)
  4042b8:	4798      	blx	r3
}
  4042ba:	e78b      	b.n	4041d4 <flexcom_enable+0x6c>
  4042bc:	20003000 	.word	0x20003000
  4042c0:	200001a5 	.word	0x200001a5
  4042c4:	40034000 	.word	0x40034000
  4042c8:	40040000 	.word	0x40040000
  4042cc:	40008000 	.word	0x40008000
  4042d0:	4001c000 	.word	0x4001c000
  4042d4:	40018000 	.word	0x40018000
  4042d8:	40024000 	.word	0x40024000
  4042dc:	40020000 	.word	0x40020000
  4042e0:	4000c000 	.word	0x4000c000
  4042e4:	00404771 	.word	0x00404771
  4042e8:	004048a1 	.word	0x004048a1
  4042ec:	00404851 	.word	0x00404851
  4042f0:	0040488d 	.word	0x0040488d

004042f4 <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  4042f4:	6001      	str	r1, [r0, #0]
  4042f6:	4770      	bx	lr

004042f8 <matrix_set_usb_device>:
 */
void matrix_set_usb_device(void)
{
	Matrix *p_matrix = MATRIX;

	p_matrix->CCFG_SYSIO &= ~(CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11);
  4042f8:	4b06      	ldr	r3, [pc, #24]	; (404314 <matrix_set_usb_device+0x1c>)
  4042fa:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  4042fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
  404302:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	p_matrix->CCFG_USBMR |= CCFG_USBMR_DEVICE;
  404306:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
  40430a:	f042 0201 	orr.w	r2, r2, #1
  40430e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  404312:	4770      	bx	lr
  404314:	400e0200 	.word	0x400e0200

00404318 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  404318:	460b      	mov	r3, r1
  40431a:	b119      	cbz	r1, 404324 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  40431c:	6809      	ldr	r1, [r1, #0]
  40431e:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  404320:	685b      	ldr	r3, [r3, #4]
  404322:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  404324:	b11a      	cbz	r2, 40432e <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  404326:	6813      	ldr	r3, [r2, #0]
  404328:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  40432a:	6853      	ldr	r3, [r2, #4]
  40432c:	61c3      	str	r3, [r0, #28]
  40432e:	4770      	bx	lr

00404330 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  404330:	460b      	mov	r3, r1
  404332:	b119      	cbz	r1, 40433c <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  404334:	6809      	ldr	r1, [r1, #0]
  404336:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  404338:	685b      	ldr	r3, [r3, #4]
  40433a:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  40433c:	b11a      	cbz	r2, 404346 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  40433e:	6813      	ldr	r3, [r2, #0]
  404340:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  404342:	6853      	ldr	r3, [r2, #4]
  404344:	6143      	str	r3, [r0, #20]
  404346:	4770      	bx	lr

00404348 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  404348:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  40434c:	f021 0101 	bic.w	r1, r1, #1
  404350:	0589      	lsls	r1, r1, #22
  404352:	0d89      	lsrs	r1, r1, #22
	p_pdc->PERIPH_PTCR =
  404354:	6201      	str	r1, [r0, #32]
  404356:	4770      	bx	lr

00404358 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404358:	b90a      	cbnz	r2, 40435e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40435a:	6601      	str	r1, [r0, #96]	; 0x60
  40435c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40435e:	6641      	str	r1, [r0, #100]	; 0x64
  404360:	4770      	bx	lr

00404362 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404362:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404364:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404368:	d01f      	beq.n	4043aa <pio_set_peripheral+0x48>
  40436a:	d814      	bhi.n	404396 <pio_set_peripheral+0x34>
  40436c:	b191      	cbz	r1, 404394 <pio_set_peripheral+0x32>
  40436e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404372:	d123      	bne.n	4043bc <pio_set_peripheral+0x5a>
{
  404374:	b410      	push	{r4}
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404376:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404378:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40437a:	43d3      	mvns	r3, r2
  40437c:	4021      	ands	r1, r4
  40437e:	461c      	mov	r4, r3
  404380:	4019      	ands	r1, r3
  404382:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404384:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404386:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404388:	400b      	ands	r3, r1
  40438a:	4023      	ands	r3, r4
  40438c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40438e:	6042      	str	r2, [r0, #4]
}
  404390:	f85d 4b04 	ldr.w	r4, [sp], #4
  404394:	4770      	bx	lr
	switch (ul_type) {
  404396:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40439a:	d0fb      	beq.n	404394 <pio_set_peripheral+0x32>
  40439c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4043a0:	d0f8      	beq.n	404394 <pio_set_peripheral+0x32>
  4043a2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4043a6:	d109      	bne.n	4043bc <pio_set_peripheral+0x5a>
  4043a8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4043aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4043ac:	4313      	orrs	r3, r2
  4043ae:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4043b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4043b2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4043b4:	400b      	ands	r3, r1
  4043b6:	ea23 0302 	bic.w	r3, r3, r2
  4043ba:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4043bc:	6042      	str	r2, [r0, #4]
  4043be:	4770      	bx	lr

004043c0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4043c0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4043c2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4043c6:	bf14      	ite	ne
  4043c8:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4043ca:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4043cc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4043d0:	bf14      	ite	ne
  4043d2:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4043d4:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4043d6:	f012 0f02 	tst.w	r2, #2
  4043da:	d107      	bne.n	4043ec <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4043dc:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4043e0:	bf18      	it	ne
  4043e2:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  4043e6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4043e8:	6001      	str	r1, [r0, #0]
  4043ea:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  4043ec:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4043f0:	e7f9      	b.n	4043e6 <pio_set_input+0x26>

004043f2 <pio_set_output>:
{
  4043f2:	b410      	push	{r4}
  4043f4:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4043f6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4043f8:	b94c      	cbnz	r4, 40440e <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4043fa:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4043fc:	b14b      	cbz	r3, 404412 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4043fe:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404400:	b94a      	cbnz	r2, 404416 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  404402:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  404404:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  404406:	6001      	str	r1, [r0, #0]
}
  404408:	f85d 4b04 	ldr.w	r4, [sp], #4
  40440c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40440e:	6641      	str	r1, [r0, #100]	; 0x64
  404410:	e7f4      	b.n	4043fc <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404412:	6541      	str	r1, [r0, #84]	; 0x54
  404414:	e7f4      	b.n	404400 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  404416:	6301      	str	r1, [r0, #48]	; 0x30
  404418:	e7f4      	b.n	404404 <pio_set_output+0x12>

0040441a <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  40441a:	f012 0f10 	tst.w	r2, #16
  40441e:	d010      	beq.n	404442 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  404420:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404424:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  404428:	bf14      	ite	ne
  40442a:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  40442e:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  404432:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  404436:	bf14      	ite	ne
  404438:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  40443c:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  404440:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  404442:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  404446:	4770      	bx	lr

00404448 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  404448:	6401      	str	r1, [r0, #64]	; 0x40
  40444a:	4770      	bx	lr

0040444c <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  40444c:	6441      	str	r1, [r0, #68]	; 0x44
  40444e:	4770      	bx	lr

00404450 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404450:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  404452:	4770      	bx	lr

00404454 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  404454:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  404456:	4770      	bx	lr

00404458 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404458:	b570      	push	{r4, r5, r6, lr}
  40445a:	b082      	sub	sp, #8
  40445c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40445e:	0943      	lsrs	r3, r0, #5
  404460:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404464:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404468:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40446a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40446e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404472:	d031      	beq.n	4044d8 <pio_configure_pin+0x80>
  404474:	d816      	bhi.n	4044a4 <pio_configure_pin+0x4c>
  404476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40447a:	d01b      	beq.n	4044b4 <pio_configure_pin+0x5c>
  40447c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404480:	d116      	bne.n	4044b0 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404482:	f000 001f 	and.w	r0, r0, #31
  404486:	2601      	movs	r6, #1
  404488:	4086      	lsls	r6, r0
  40448a:	4632      	mov	r2, r6
  40448c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404490:	4620      	mov	r0, r4
  404492:	4b22      	ldr	r3, [pc, #136]	; (40451c <pio_configure_pin+0xc4>)
  404494:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404496:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40449a:	bf14      	ite	ne
  40449c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40449e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4044a0:	2001      	movs	r0, #1
  4044a2:	e017      	b.n	4044d4 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4044a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4044a8:	d021      	beq.n	4044ee <pio_configure_pin+0x96>
  4044aa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4044ae:	d01e      	beq.n	4044ee <pio_configure_pin+0x96>
		return 0;
  4044b0:	2000      	movs	r0, #0
  4044b2:	e00f      	b.n	4044d4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4044b4:	f000 001f 	and.w	r0, r0, #31
  4044b8:	2601      	movs	r6, #1
  4044ba:	4086      	lsls	r6, r0
  4044bc:	4632      	mov	r2, r6
  4044be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4044c2:	4620      	mov	r0, r4
  4044c4:	4b15      	ldr	r3, [pc, #84]	; (40451c <pio_configure_pin+0xc4>)
  4044c6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4044c8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4044cc:	bf14      	ite	ne
  4044ce:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4044d0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4044d2:	2001      	movs	r0, #1
}
  4044d4:	b002      	add	sp, #8
  4044d6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4044d8:	f000 011f 	and.w	r1, r0, #31
  4044dc:	2601      	movs	r6, #1
  4044de:	462a      	mov	r2, r5
  4044e0:	fa06 f101 	lsl.w	r1, r6, r1
  4044e4:	4620      	mov	r0, r4
  4044e6:	4b0e      	ldr	r3, [pc, #56]	; (404520 <pio_configure_pin+0xc8>)
  4044e8:	4798      	blx	r3
	return 1;
  4044ea:	4630      	mov	r0, r6
		break;
  4044ec:	e7f2      	b.n	4044d4 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4044ee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4044f2:	f000 011f 	and.w	r1, r0, #31
  4044f6:	2601      	movs	r6, #1
  4044f8:	ea05 0306 	and.w	r3, r5, r6
  4044fc:	9300      	str	r3, [sp, #0]
  4044fe:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404502:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404506:	bf14      	ite	ne
  404508:	2200      	movne	r2, #0
  40450a:	2201      	moveq	r2, #1
  40450c:	fa06 f101 	lsl.w	r1, r6, r1
  404510:	4620      	mov	r0, r4
  404512:	4c04      	ldr	r4, [pc, #16]	; (404524 <pio_configure_pin+0xcc>)
  404514:	47a0      	blx	r4
	return 1;
  404516:	4630      	mov	r0, r6
		break;
  404518:	e7dc      	b.n	4044d4 <pio_configure_pin+0x7c>
  40451a:	bf00      	nop
  40451c:	00404363 	.word	0x00404363
  404520:	004043c1 	.word	0x004043c1
  404524:	004043f3 	.word	0x004043f3

00404528 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40452c:	4604      	mov	r4, r0
  40452e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404530:	4b0e      	ldr	r3, [pc, #56]	; (40456c <pio_handler_process+0x44>)
  404532:	4798      	blx	r3
  404534:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404536:	4620      	mov	r0, r4
  404538:	4b0d      	ldr	r3, [pc, #52]	; (404570 <pio_handler_process+0x48>)
  40453a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40453c:	4005      	ands	r5, r0
  40453e:	d013      	beq.n	404568 <pio_handler_process+0x40>
  404540:	4c0c      	ldr	r4, [pc, #48]	; (404574 <pio_handler_process+0x4c>)
  404542:	f104 0660 	add.w	r6, r4, #96	; 0x60
  404546:	e003      	b.n	404550 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  404548:	42b4      	cmp	r4, r6
  40454a:	d00d      	beq.n	404568 <pio_handler_process+0x40>
  40454c:	3410      	adds	r4, #16
		while (status != 0) {
  40454e:	b15d      	cbz	r5, 404568 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  404550:	6820      	ldr	r0, [r4, #0]
  404552:	4540      	cmp	r0, r8
  404554:	d1f8      	bne.n	404548 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404556:	6861      	ldr	r1, [r4, #4]
  404558:	4229      	tst	r1, r5
  40455a:	d0f5      	beq.n	404548 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40455c:	68e3      	ldr	r3, [r4, #12]
  40455e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  404560:	6863      	ldr	r3, [r4, #4]
  404562:	ea25 0503 	bic.w	r5, r5, r3
  404566:	e7ef      	b.n	404548 <pio_handler_process+0x20>
  404568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40456c:	00404451 	.word	0x00404451
  404570:	00404455 	.word	0x00404455
  404574:	20000d28 	.word	0x20000d28

00404578 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40457a:	4c18      	ldr	r4, [pc, #96]	; (4045dc <pio_handler_set+0x64>)
  40457c:	6826      	ldr	r6, [r4, #0]
  40457e:	2e06      	cmp	r6, #6
  404580:	d829      	bhi.n	4045d6 <pio_handler_set+0x5e>
  404582:	f04f 0c00 	mov.w	ip, #0
  404586:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404588:	4f15      	ldr	r7, [pc, #84]	; (4045e0 <pio_handler_set+0x68>)
  40458a:	e004      	b.n	404596 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40458c:	3401      	adds	r4, #1
  40458e:	b2e4      	uxtb	r4, r4
  404590:	46a4      	mov	ip, r4
  404592:	42a6      	cmp	r6, r4
  404594:	d309      	bcc.n	4045aa <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  404596:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404598:	0125      	lsls	r5, r4, #4
  40459a:	597d      	ldr	r5, [r7, r5]
  40459c:	428d      	cmp	r5, r1
  40459e:	d1f5      	bne.n	40458c <pio_handler_set+0x14>
  4045a0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4045a4:	686d      	ldr	r5, [r5, #4]
  4045a6:	4295      	cmp	r5, r2
  4045a8:	d1f0      	bne.n	40458c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4045aa:	4d0d      	ldr	r5, [pc, #52]	; (4045e0 <pio_handler_set+0x68>)
  4045ac:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4045b0:	eb05 040e 	add.w	r4, r5, lr
  4045b4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4045b8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4045ba:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4045bc:	9906      	ldr	r1, [sp, #24]
  4045be:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4045c0:	3601      	adds	r6, #1
  4045c2:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4045c4:	bf04      	itt	eq
  4045c6:	4905      	ldreq	r1, [pc, #20]	; (4045dc <pio_handler_set+0x64>)
  4045c8:	600e      	streq	r6, [r1, #0]
  4045ca:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4045cc:	461a      	mov	r2, r3
  4045ce:	4b05      	ldr	r3, [pc, #20]	; (4045e4 <pio_handler_set+0x6c>)
  4045d0:	4798      	blx	r3

	return 0;
  4045d2:	2000      	movs	r0, #0
  4045d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4045d6:	2001      	movs	r0, #1
}
  4045d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4045da:	bf00      	nop
  4045dc:	20000d98 	.word	0x20000d98
  4045e0:	20000d28 	.word	0x20000d28
  4045e4:	0040441b 	.word	0x0040441b

004045e8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4045e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4045ea:	210b      	movs	r1, #11
  4045ec:	4801      	ldr	r0, [pc, #4]	; (4045f4 <PIOA_Handler+0xc>)
  4045ee:	4b02      	ldr	r3, [pc, #8]	; (4045f8 <PIOA_Handler+0x10>)
  4045f0:	4798      	blx	r3
  4045f2:	bd08      	pop	{r3, pc}
  4045f4:	400e0e00 	.word	0x400e0e00
  4045f8:	00404529 	.word	0x00404529

004045fc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4045fc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4045fe:	210c      	movs	r1, #12
  404600:	4801      	ldr	r0, [pc, #4]	; (404608 <PIOB_Handler+0xc>)
  404602:	4b02      	ldr	r3, [pc, #8]	; (40460c <PIOB_Handler+0x10>)
  404604:	4798      	blx	r3
  404606:	bd08      	pop	{r3, pc}
  404608:	400e1000 	.word	0x400e1000
  40460c:	00404529 	.word	0x00404529

00404610 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404612:	4605      	mov	r5, r0
  404614:	460c      	mov	r4, r1
  404616:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  404618:	4b18      	ldr	r3, [pc, #96]	; (40467c <pio_handler_set_priority+0x6c>)
  40461a:	4798      	blx	r3
  40461c:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40461e:	f04f 31ff 	mov.w	r1, #4294967295
  404622:	4628      	mov	r0, r5
  404624:	4b16      	ldr	r3, [pc, #88]	; (404680 <pio_handler_set_priority+0x70>)
  404626:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404628:	4628      	mov	r0, r5
  40462a:	4b16      	ldr	r3, [pc, #88]	; (404684 <pio_handler_set_priority+0x74>)
  40462c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40462e:	b2e2      	uxtb	r2, r4
  404630:	f002 031f 	and.w	r3, r2, #31
  404634:	2101      	movs	r1, #1
  404636:	4099      	lsls	r1, r3
  404638:	0963      	lsrs	r3, r4, #5
  40463a:	009b      	lsls	r3, r3, #2
  40463c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  404640:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  404644:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404648:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  40464c:	2c00      	cmp	r4, #0
  40464e:	db0d      	blt.n	40466c <pio_handler_set_priority+0x5c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  404650:	013f      	lsls	r7, r7, #4
  404652:	b2ff      	uxtb	r7, r7
  404654:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  404658:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  40465c:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404660:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404662:	4631      	mov	r1, r6
  404664:	4628      	mov	r0, r5
  404666:	4b08      	ldr	r3, [pc, #32]	; (404688 <pio_handler_set_priority+0x78>)
  404668:	4798      	blx	r3
  40466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40466c:	f002 020f 	and.w	r2, r2, #15
  404670:	013f      	lsls	r7, r7, #4
  404672:	b2ff      	uxtb	r7, r7
  404674:	4805      	ldr	r0, [pc, #20]	; (40468c <pio_handler_set_priority+0x7c>)
  404676:	5487      	strb	r7, [r0, r2]
  404678:	e7f2      	b.n	404660 <pio_handler_set_priority+0x50>
  40467a:	bf00      	nop
  40467c:	00404455 	.word	0x00404455
  404680:	0040444d 	.word	0x0040444d
  404684:	00404451 	.word	0x00404451
  404688:	00404449 	.word	0x00404449
  40468c:	e000ed14 	.word	0xe000ed14

00404690 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404690:	4a17      	ldr	r2, [pc, #92]	; (4046f0 <pmc_switch_mck_to_pllack+0x60>)
  404692:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404698:	4318      	orrs	r0, r3
  40469a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40469c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40469e:	f013 0f08 	tst.w	r3, #8
  4046a2:	d10a      	bne.n	4046ba <pmc_switch_mck_to_pllack+0x2a>
  4046a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4046a8:	4911      	ldr	r1, [pc, #68]	; (4046f0 <pmc_switch_mck_to_pllack+0x60>)
  4046aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4046ac:	f012 0f08 	tst.w	r2, #8
  4046b0:	d103      	bne.n	4046ba <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4046b2:	3b01      	subs	r3, #1
  4046b4:	d1f9      	bne.n	4046aa <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4046b6:	2001      	movs	r0, #1
  4046b8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4046ba:	4a0d      	ldr	r2, [pc, #52]	; (4046f0 <pmc_switch_mck_to_pllack+0x60>)
  4046bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4046be:	f023 0303 	bic.w	r3, r3, #3
  4046c2:	f043 0302 	orr.w	r3, r3, #2
  4046c6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4046c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4046ca:	f013 0f08 	tst.w	r3, #8
  4046ce:	d10a      	bne.n	4046e6 <pmc_switch_mck_to_pllack+0x56>
  4046d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4046d4:	4906      	ldr	r1, [pc, #24]	; (4046f0 <pmc_switch_mck_to_pllack+0x60>)
  4046d6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4046d8:	f012 0f08 	tst.w	r2, #8
  4046dc:	d105      	bne.n	4046ea <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4046de:	3b01      	subs	r3, #1
  4046e0:	d1f9      	bne.n	4046d6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4046e2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4046e4:	4770      	bx	lr
	return 0;
  4046e6:	2000      	movs	r0, #0
  4046e8:	4770      	bx	lr
  4046ea:	2000      	movs	r0, #0
  4046ec:	4770      	bx	lr
  4046ee:	bf00      	nop
  4046f0:	400e0400 	.word	0x400e0400

004046f4 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4046f4:	2801      	cmp	r0, #1
  4046f6:	d003      	beq.n	404700 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4046f8:	4a05      	ldr	r2, [pc, #20]	; (404710 <pmc_switch_sclk_to_32kxtal+0x1c>)
  4046fa:	4b06      	ldr	r3, [pc, #24]	; (404714 <pmc_switch_sclk_to_32kxtal+0x20>)
  4046fc:	601a      	str	r2, [r3, #0]
  4046fe:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  404700:	4a04      	ldr	r2, [pc, #16]	; (404714 <pmc_switch_sclk_to_32kxtal+0x20>)
  404702:	6893      	ldr	r3, [r2, #8]
  404704:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40470c:	6093      	str	r3, [r2, #8]
  40470e:	e7f3      	b.n	4046f8 <pmc_switch_sclk_to_32kxtal+0x4>
  404710:	a5000008 	.word	0xa5000008
  404714:	400e1410 	.word	0x400e1410

00404718 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404718:	4b05      	ldr	r3, [pc, #20]	; (404730 <pmc_osc_is_ready_32kxtal+0x18>)
  40471a:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40471c:	f013 0f80 	tst.w	r3, #128	; 0x80
  404720:	bf1d      	ittte	ne
  404722:	4b04      	ldrne	r3, [pc, #16]	; (404734 <pmc_osc_is_ready_32kxtal+0x1c>)
  404724:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  404726:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  40472a:	2000      	moveq	r0, #0
}
  40472c:	4770      	bx	lr
  40472e:	bf00      	nop
  404730:	400e1410 	.word	0x400e1410
  404734:	400e0400 	.word	0x400e0400

00404738 <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  404738:	2200      	movs	r2, #0
  40473a:	4b01      	ldr	r3, [pc, #4]	; (404740 <pmc_disable_pllack+0x8>)
  40473c:	629a      	str	r2, [r3, #40]	; 0x28
  40473e:	4770      	bx	lr
  404740:	400e0400 	.word	0x400e0400

00404744 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404744:	4b02      	ldr	r3, [pc, #8]	; (404750 <pmc_is_locked_pllack+0xc>)
  404746:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404748:	f000 0002 	and.w	r0, r0, #2
  40474c:	4770      	bx	lr
  40474e:	bf00      	nop
  404750:	400e0400 	.word	0x400e0400

00404754 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  404754:	2200      	movs	r2, #0
  404756:	4b01      	ldr	r3, [pc, #4]	; (40475c <pmc_disable_pllbck+0x8>)
  404758:	62da      	str	r2, [r3, #44]	; 0x2c
  40475a:	4770      	bx	lr
  40475c:	400e0400 	.word	0x400e0400

00404760 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  404760:	4b02      	ldr	r3, [pc, #8]	; (40476c <pmc_is_locked_pllbck+0xc>)
  404762:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404764:	f000 0004 	and.w	r0, r0, #4
  404768:	4770      	bx	lr
  40476a:	bf00      	nop
  40476c:	400e0400 	.word	0x400e0400

00404770 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404770:	2832      	cmp	r0, #50	; 0x32
  404772:	d81e      	bhi.n	4047b2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  404774:	281f      	cmp	r0, #31
  404776:	d80c      	bhi.n	404792 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404778:	4b11      	ldr	r3, [pc, #68]	; (4047c0 <pmc_enable_periph_clk+0x50>)
  40477a:	699a      	ldr	r2, [r3, #24]
  40477c:	2301      	movs	r3, #1
  40477e:	4083      	lsls	r3, r0
  404780:	4393      	bics	r3, r2
  404782:	d018      	beq.n	4047b6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  404784:	2301      	movs	r3, #1
  404786:	fa03 f000 	lsl.w	r0, r3, r0
  40478a:	4b0d      	ldr	r3, [pc, #52]	; (4047c0 <pmc_enable_periph_clk+0x50>)
  40478c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40478e:	2000      	movs	r0, #0
  404790:	4770      	bx	lr
		ul_id -= 32;
  404792:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404794:	4b0a      	ldr	r3, [pc, #40]	; (4047c0 <pmc_enable_periph_clk+0x50>)
  404796:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40479a:	2301      	movs	r3, #1
  40479c:	4083      	lsls	r3, r0
  40479e:	4393      	bics	r3, r2
  4047a0:	d00b      	beq.n	4047ba <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4047a2:	2301      	movs	r3, #1
  4047a4:	fa03 f000 	lsl.w	r0, r3, r0
  4047a8:	4b05      	ldr	r3, [pc, #20]	; (4047c0 <pmc_enable_periph_clk+0x50>)
  4047aa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4047ae:	2000      	movs	r0, #0
  4047b0:	4770      	bx	lr
		return 1;
  4047b2:	2001      	movs	r0, #1
  4047b4:	4770      	bx	lr
	return 0;
  4047b6:	2000      	movs	r0, #0
  4047b8:	4770      	bx	lr
  4047ba:	2000      	movs	r0, #0
}
  4047bc:	4770      	bx	lr
  4047be:	bf00      	nop
  4047c0:	400e0400 	.word	0x400e0400

004047c4 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4047c4:	2832      	cmp	r0, #50	; 0x32
  4047c6:	d822      	bhi.n	40480e <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  4047c8:	281f      	cmp	r0, #31
  4047ca:	d80e      	bhi.n	4047ea <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4047cc:	4b11      	ldr	r3, [pc, #68]	; (404814 <pmc_disable_periph_clk+0x50>)
  4047ce:	699a      	ldr	r2, [r3, #24]
  4047d0:	2301      	movs	r3, #1
  4047d2:	4083      	lsls	r3, r0
  4047d4:	4393      	bics	r3, r2
  4047d6:	d001      	beq.n	4047dc <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4047d8:	2000      	movs	r0, #0
  4047da:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  4047dc:	2301      	movs	r3, #1
  4047de:	fa03 f000 	lsl.w	r0, r3, r0
  4047e2:	4b0c      	ldr	r3, [pc, #48]	; (404814 <pmc_disable_periph_clk+0x50>)
  4047e4:	6158      	str	r0, [r3, #20]
	return 0;
  4047e6:	2000      	movs	r0, #0
  4047e8:	4770      	bx	lr
		ul_id -= 32;
  4047ea:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4047ec:	4b09      	ldr	r3, [pc, #36]	; (404814 <pmc_disable_periph_clk+0x50>)
  4047ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4047f2:	2301      	movs	r3, #1
  4047f4:	4083      	lsls	r3, r0
  4047f6:	4393      	bics	r3, r2
  4047f8:	d001      	beq.n	4047fe <pmc_disable_periph_clk+0x3a>
	return 0;
  4047fa:	2000      	movs	r0, #0
}
  4047fc:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  4047fe:	2301      	movs	r3, #1
  404800:	fa03 f000 	lsl.w	r0, r3, r0
  404804:	4b03      	ldr	r3, [pc, #12]	; (404814 <pmc_disable_periph_clk+0x50>)
  404806:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  40480a:	2000      	movs	r0, #0
  40480c:	4770      	bx	lr
		return 1;
  40480e:	2001      	movs	r0, #1
  404810:	4770      	bx	lr
  404812:	bf00      	nop
  404814:	400e0400 	.word	0x400e0400

00404818 <pmc_switch_pck_to_sclk>:
 */
uint32_t pmc_switch_pck_to_sclk(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_SLOW_CLK | ul_pres;
  404818:	4b0c      	ldr	r3, [pc, #48]	; (40484c <pmc_switch_pck_to_sclk+0x34>)
  40481a:	f100 0210 	add.w	r2, r0, #16
  40481e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  404822:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  404824:	f44f 7380 	mov.w	r3, #256	; 0x100
  404828:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  40482c:	4202      	tst	r2, r0
  40482e:	d109      	bne.n	404844 <pmc_switch_pck_to_sclk+0x2c>
  404830:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  404834:	4905      	ldr	r1, [pc, #20]	; (40484c <pmc_switch_pck_to_sclk+0x34>)
  404836:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  404838:	4202      	tst	r2, r0
  40483a:	d105      	bne.n	404848 <pmc_switch_pck_to_sclk+0x30>
		if (ul_timeout == 0) {
  40483c:	3b01      	subs	r3, #1
  40483e:	d1fa      	bne.n	404836 <pmc_switch_pck_to_sclk+0x1e>
			return 1;
  404840:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404842:	4770      	bx	lr
	return 0;
  404844:	2000      	movs	r0, #0
  404846:	4770      	bx	lr
  404848:	2000      	movs	r0, #0
  40484a:	4770      	bx	lr
  40484c:	400e0400 	.word	0x400e0400

00404850 <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  404850:	f041 0104 	orr.w	r1, r1, #4
  404854:	4b0c      	ldr	r3, [pc, #48]	; (404888 <pmc_switch_pck_to_mck+0x38>)
  404856:	f100 0210 	add.w	r2, r0, #16
  40485a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  40485e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  404860:	f44f 7380 	mov.w	r3, #256	; 0x100
  404864:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  404868:	4202      	tst	r2, r0
  40486a:	d109      	bne.n	404880 <pmc_switch_pck_to_mck+0x30>
  40486c:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  404870:	4905      	ldr	r1, [pc, #20]	; (404888 <pmc_switch_pck_to_mck+0x38>)
  404872:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  404874:	4202      	tst	r2, r0
  404876:	d105      	bne.n	404884 <pmc_switch_pck_to_mck+0x34>
		if (ul_timeout == 0) {
  404878:	3b01      	subs	r3, #1
  40487a:	d1fa      	bne.n	404872 <pmc_switch_pck_to_mck+0x22>
			return 1;
  40487c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40487e:	4770      	bx	lr
	return 0;
  404880:	2000      	movs	r0, #0
  404882:	4770      	bx	lr
  404884:	2000      	movs	r0, #0
  404886:	4770      	bx	lr
  404888:	400e0400 	.word	0x400e0400

0040488c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  40488c:	f44f 7380 	mov.w	r3, #256	; 0x100
  404890:	fa03 f000 	lsl.w	r0, r3, r0
  404894:	4b01      	ldr	r3, [pc, #4]	; (40489c <pmc_enable_pck+0x10>)
  404896:	6018      	str	r0, [r3, #0]
  404898:	4770      	bx	lr
  40489a:	bf00      	nop
  40489c:	400e0400 	.word	0x400e0400

004048a0 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4048a0:	f44f 7380 	mov.w	r3, #256	; 0x100
  4048a4:	fa03 f000 	lsl.w	r0, r3, r0
  4048a8:	4b01      	ldr	r3, [pc, #4]	; (4048b0 <pmc_disable_pck+0x10>)
  4048aa:	6058      	str	r0, [r3, #4]
  4048ac:	4770      	bx	lr
  4048ae:	bf00      	nop
  4048b0:	400e0400 	.word	0x400e0400

004048b4 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4048b4:	0200      	lsls	r0, r0, #8
  4048b6:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4048ba:	f040 0001 	orr.w	r0, r0, #1
  4048be:	4b01      	ldr	r3, [pc, #4]	; (4048c4 <pmc_switch_udpck_to_pllbck+0x10>)
  4048c0:	6398      	str	r0, [r3, #56]	; 0x38
  4048c2:	4770      	bx	lr
  4048c4:	400e0400 	.word	0x400e0400

004048c8 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4048c8:	2280      	movs	r2, #128	; 0x80
  4048ca:	4b01      	ldr	r3, [pc, #4]	; (4048d0 <pmc_enable_udpck+0x8>)
  4048cc:	601a      	str	r2, [r3, #0]
  4048ce:	4770      	bx	lr
  4048d0:	400e0400 	.word	0x400e0400

004048d4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4048d4:	4b03      	ldr	r3, [pc, #12]	; (4048e4 <pmc_set_fast_startup_input+0x10>)
  4048d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4048d8:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4048dc:	4310      	orrs	r0, r2
  4048de:	6718      	str	r0, [r3, #112]	; 0x70
  4048e0:	4770      	bx	lr
  4048e2:	bf00      	nop
  4048e4:	400e0400 	.word	0x400e0400

004048e8 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4048e8:	4b02      	ldr	r3, [pc, #8]	; (4048f4 <pmc_is_wakeup_clocks_restored+0xc>)
  4048ea:	7818      	ldrb	r0, [r3, #0]
}
  4048ec:	f080 0001 	eor.w	r0, r0, #1
  4048f0:	4770      	bx	lr
  4048f2:	bf00      	nop
  4048f4:	20000d9c 	.word	0x20000d9c

004048f8 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4048f8:	b921      	cbnz	r1, 404904 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4048fa:	6843      	ldr	r3, [r0, #4]
  4048fc:	f023 0301 	bic.w	r3, r3, #1
  404900:	6043      	str	r3, [r0, #4]
  404902:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  404904:	6843      	ldr	r3, [r0, #4]
  404906:	f043 0301 	orr.w	r3, r3, #1
  40490a:	6043      	str	r3, [r0, #4]
  40490c:	4770      	bx	lr

0040490e <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  40490e:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  404910:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  404912:	6884      	ldr	r4, [r0, #8]
  404914:	42a5      	cmp	r5, r4
  404916:	d003      	beq.n	404920 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  404918:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40491a:	6884      	ldr	r4, [r0, #8]
  40491c:	42ac      	cmp	r4, r5
  40491e:	d1fb      	bne.n	404918 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  404920:	b161      	cbz	r1, 40493c <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404922:	f3c4 5001 	ubfx	r0, r4, #20, #2
  404926:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40492a:	f3c4 4003 	ubfx	r0, r4, #16, #4
  40492e:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  404932:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  404936:	bf18      	it	ne
  404938:	300c      	addne	r0, #12
  40493a:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40493c:	b142      	cbz	r2, 404950 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  40493e:	f3c4 3102 	ubfx	r1, r4, #12, #3
  404942:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404946:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40494a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40494e:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  404950:	b143      	cbz	r3, 404964 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404952:	f3c4 1202 	ubfx	r2, r4, #4, #3
  404956:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40495a:	f004 040f 	and.w	r4, r4, #15
  40495e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  404962:	601c      	str	r4, [r3, #0]
	}
}
  404964:	bc30      	pop	{r4, r5}
  404966:	4770      	bx	lr

00404968 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  404968:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40496a:	6844      	ldr	r4, [r0, #4]
  40496c:	f014 0f01 	tst.w	r4, #1
  404970:	d005      	beq.n	40497e <rtc_set_time+0x16>
		if (ul_hour > 12) {
  404972:	290c      	cmp	r1, #12
  404974:	d93d      	bls.n	4049f2 <rtc_set_time+0x8a>
			ul_hour -= 12;
  404976:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  404978:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  40497c:	e000      	b.n	404980 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  40497e:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  404980:	4c1d      	ldr	r4, [pc, #116]	; (4049f8 <rtc_set_time+0x90>)
  404982:	fba4 5603 	umull	r5, r6, r4, r3
  404986:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  404988:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  40498c:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  404990:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  404994:	fba4 6502 	umull	r6, r5, r4, r2
  404998:	08ed      	lsrs	r5, r5, #3
  40499a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40499e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4049a2:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4049a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4049aa:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4049ac:	fba4 4201 	umull	r4, r2, r4, r1
  4049b0:	08d2      	lsrs	r2, r2, #3
  4049b2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4049b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4049ba:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4049be:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4049c2:	6983      	ldr	r3, [r0, #24]
  4049c4:	f013 0f04 	tst.w	r3, #4
  4049c8:	d0fb      	beq.n	4049c2 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4049ca:	6803      	ldr	r3, [r0, #0]
  4049cc:	f043 0301 	orr.w	r3, r3, #1
  4049d0:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4049d2:	6983      	ldr	r3, [r0, #24]
  4049d4:	f013 0f01 	tst.w	r3, #1
  4049d8:	d0fb      	beq.n	4049d2 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4049da:	2301      	movs	r3, #1
  4049dc:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  4049de:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  4049e0:	6803      	ldr	r3, [r0, #0]
  4049e2:	f023 0301 	bic.w	r3, r3, #1
  4049e6:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4049e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4049ea:	f000 0001 	and.w	r0, r0, #1
  4049ee:	bcf0      	pop	{r4, r5, r6, r7}
  4049f0:	4770      	bx	lr
	uint32_t ul_time = 0;
  4049f2:	2700      	movs	r7, #0
  4049f4:	e7c4      	b.n	404980 <rtc_set_time+0x18>
  4049f6:	bf00      	nop
  4049f8:	cccccccd 	.word	0xcccccccd

004049fc <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4049fc:	b4f0      	push	{r4, r5, r6, r7}
  4049fe:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  404a00:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  404a02:	68c4      	ldr	r4, [r0, #12]
  404a04:	42a5      	cmp	r5, r4
  404a06:	d003      	beq.n	404a10 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  404a08:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  404a0a:	68c4      	ldr	r4, [r0, #12]
  404a0c:	42ac      	cmp	r4, r5
  404a0e:	d1fb      	bne.n	404a08 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  404a10:	b199      	cbz	r1, 404a3a <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404a12:	f3c4 3003 	ubfx	r0, r4, #12, #4
  404a16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404a1a:	f3c4 2703 	ubfx	r7, r4, #8, #4
  404a1e:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404a22:	f3c4 1002 	ubfx	r0, r4, #4, #3
  404a26:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  404a2a:	f004 000f 	and.w	r0, r4, #15
  404a2e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404a32:	2564      	movs	r5, #100	; 0x64
  404a34:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  404a38:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  404a3a:	b142      	cbz	r2, 404a4e <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404a3c:	f3c4 5000 	ubfx	r0, r4, #20, #1
  404a40:	0081      	lsls	r1, r0, #2
  404a42:	4408      	add	r0, r1
  404a44:	f3c4 4103 	ubfx	r1, r4, #16, #4
  404a48:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  404a4c:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  404a4e:	b143      	cbz	r3, 404a62 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404a50:	f3c4 7201 	ubfx	r2, r4, #28, #2
  404a54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404a58:	f3c4 6103 	ubfx	r1, r4, #24, #4
  404a5c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  404a60:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  404a62:	b116      	cbz	r6, 404a6a <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  404a64:	f3c4 5442 	ubfx	r4, r4, #21, #3
  404a68:	6034      	str	r4, [r6, #0]
	}
}
  404a6a:	bcf0      	pop	{r4, r5, r6, r7}
  404a6c:	4770      	bx	lr
	...

00404a70 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  404a70:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404a72:	4d2a      	ldr	r5, [pc, #168]	; (404b1c <rtc_set_date+0xac>)
  404a74:	fba5 4603 	umull	r4, r6, r5, r3
  404a78:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  404a7a:	9c03      	ldr	r4, [sp, #12]
  404a7c:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404a7e:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  404a82:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404a86:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404a8a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  404a8e:	fba5 6402 	umull	r6, r4, r5, r2
  404a92:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404a94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  404a98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404a9c:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404aa0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  404aa4:	4b1e      	ldr	r3, [pc, #120]	; (404b20 <rtc_set_date+0xb0>)
  404aa6:	fba3 4301 	umull	r4, r3, r3, r1
  404aaa:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404aac:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  404ab0:	4b1c      	ldr	r3, [pc, #112]	; (404b24 <rtc_set_date+0xb4>)
  404ab2:	fba3 4301 	umull	r4, r3, r3, r1
  404ab6:	095b      	lsrs	r3, r3, #5
  404ab8:	fba5 6403 	umull	r6, r4, r5, r3
  404abc:	08e4      	lsrs	r4, r4, #3
  404abe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404ac2:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404ac6:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  404ac8:	fba5 4301 	umull	r4, r3, r5, r1
  404acc:	08db      	lsrs	r3, r3, #3
  404ace:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  404ad2:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404ad6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  404ada:	fba5 1503 	umull	r1, r5, r5, r3
  404ade:	08ed      	lsrs	r5, r5, #3
  404ae0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404ae4:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  404ae8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  404aec:	6983      	ldr	r3, [r0, #24]
  404aee:	f013 0f04 	tst.w	r3, #4
  404af2:	d0fb      	beq.n	404aec <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  404af4:	6803      	ldr	r3, [r0, #0]
  404af6:	f043 0302 	orr.w	r3, r3, #2
  404afa:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  404afc:	6983      	ldr	r3, [r0, #24]
  404afe:	f013 0f01 	tst.w	r3, #1
  404b02:	d0fb      	beq.n	404afc <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  404b04:	2301      	movs	r3, #1
  404b06:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  404b08:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  404b0a:	6803      	ldr	r3, [r0, #0]
  404b0c:	f023 0302 	bic.w	r3, r3, #2
  404b10:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  404b12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  404b14:	f000 0002 	and.w	r0, r0, #2
  404b18:	bc70      	pop	{r4, r5, r6}
  404b1a:	4770      	bx	lr
  404b1c:	cccccccd 	.word	0xcccccccd
  404b20:	10624dd3 	.word	0x10624dd3
  404b24:	51eb851f 	.word	0x51eb851f

00404b28 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  404b28:	b508      	push	{r3, lr}
	else if (p_spi == SPI1) {
		sysclk_enable_peripheral_clock(ID_SPI1);
	}
	#endif
#elif (SAMG55)
	if (p_spi == SPI0) {
  404b2a:	4b1c      	ldr	r3, [pc, #112]	; (404b9c <spi_enable_clock+0x74>)
  404b2c:	4298      	cmp	r0, r3
  404b2e:	d015      	beq.n	404b5c <spi_enable_clock+0x34>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  404b30:	4b1b      	ldr	r3, [pc, #108]	; (404ba0 <spi_enable_clock+0x78>)
  404b32:	4298      	cmp	r0, r3
  404b34:	d016      	beq.n	404b64 <spi_enable_clock+0x3c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
	}
	#endif
	#ifdef SPI2
	else if (p_spi == SPI2) {
  404b36:	4b1b      	ldr	r3, [pc, #108]	; (404ba4 <spi_enable_clock+0x7c>)
  404b38:	4298      	cmp	r0, r3
  404b3a:	d017      	beq.n	404b6c <spi_enable_clock+0x44>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
	}
	#endif
	#ifdef SPI3
	else if (p_spi == SPI3) {
  404b3c:	4b1a      	ldr	r3, [pc, #104]	; (404ba8 <spi_enable_clock+0x80>)
  404b3e:	4298      	cmp	r0, r3
  404b40:	d018      	beq.n	404b74 <spi_enable_clock+0x4c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
	}
	#endif
	#ifdef SPI4
	else if (p_spi == SPI4) {
  404b42:	4b1a      	ldr	r3, [pc, #104]	; (404bac <spi_enable_clock+0x84>)
  404b44:	4298      	cmp	r0, r3
  404b46:	d019      	beq.n	404b7c <spi_enable_clock+0x54>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
	}
	#endif
	#ifdef SPI5
	else if (p_spi == SPI5) {
  404b48:	4b19      	ldr	r3, [pc, #100]	; (404bb0 <spi_enable_clock+0x88>)
  404b4a:	4298      	cmp	r0, r3
  404b4c:	d01a      	beq.n	404b84 <spi_enable_clock+0x5c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
	}
	#endif
	#ifdef SPI6
	else if (p_spi == SPI6) {
  404b4e:	4b19      	ldr	r3, [pc, #100]	; (404bb4 <spi_enable_clock+0x8c>)
  404b50:	4298      	cmp	r0, r3
  404b52:	d01b      	beq.n	404b8c <spi_enable_clock+0x64>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
	}
	#endif
	#ifdef SPI7
	else if (p_spi == SPI7) {
  404b54:	4b18      	ldr	r3, [pc, #96]	; (404bb8 <spi_enable_clock+0x90>)
  404b56:	4298      	cmp	r0, r3
  404b58:	d01c      	beq.n	404b94 <spi_enable_clock+0x6c>
  404b5a:	bd08      	pop	{r3, pc}
  404b5c:	2008      	movs	r0, #8
  404b5e:	4b17      	ldr	r3, [pc, #92]	; (404bbc <spi_enable_clock+0x94>)
  404b60:	4798      	blx	r3
  404b62:	bd08      	pop	{r3, pc}
  404b64:	2009      	movs	r0, #9
  404b66:	4b15      	ldr	r3, [pc, #84]	; (404bbc <spi_enable_clock+0x94>)
  404b68:	4798      	blx	r3
  404b6a:	bd08      	pop	{r3, pc}
  404b6c:	200e      	movs	r0, #14
  404b6e:	4b13      	ldr	r3, [pc, #76]	; (404bbc <spi_enable_clock+0x94>)
  404b70:	4798      	blx	r3
  404b72:	bd08      	pop	{r3, pc}
  404b74:	2013      	movs	r0, #19
  404b76:	4b11      	ldr	r3, [pc, #68]	; (404bbc <spi_enable_clock+0x94>)
  404b78:	4798      	blx	r3
  404b7a:	bd08      	pop	{r3, pc}
  404b7c:	2014      	movs	r0, #20
  404b7e:	4b0f      	ldr	r3, [pc, #60]	; (404bbc <spi_enable_clock+0x94>)
  404b80:	4798      	blx	r3
  404b82:	bd08      	pop	{r3, pc}
  404b84:	2015      	movs	r0, #21
  404b86:	4b0d      	ldr	r3, [pc, #52]	; (404bbc <spi_enable_clock+0x94>)
  404b88:	4798      	blx	r3
  404b8a:	bd08      	pop	{r3, pc}
  404b8c:	2016      	movs	r0, #22
  404b8e:	4b0b      	ldr	r3, [pc, #44]	; (404bbc <spi_enable_clock+0x94>)
  404b90:	4798      	blx	r3
  404b92:	bd08      	pop	{r3, pc}
  404b94:	2007      	movs	r0, #7
  404b96:	4b09      	ldr	r3, [pc, #36]	; (404bbc <spi_enable_clock+0x94>)
  404b98:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  404b9a:	e7de      	b.n	404b5a <spi_enable_clock+0x32>
  404b9c:	4000c400 	.word	0x4000c400
  404ba0:	40020400 	.word	0x40020400
  404ba4:	40024400 	.word	0x40024400
  404ba8:	40018400 	.word	0x40018400
  404bac:	4001c400 	.word	0x4001c400
  404bb0:	40008400 	.word	0x40008400
  404bb4:	40040400 	.word	0x40040400
  404bb8:	40034400 	.word	0x40034400
  404bbc:	00404771 	.word	0x00404771

00404bc0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  404bc0:	6843      	ldr	r3, [r0, #4]
  404bc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  404bc6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  404bc8:	6843      	ldr	r3, [r0, #4]
  404bca:	0409      	lsls	r1, r1, #16
  404bcc:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  404bd0:	4319      	orrs	r1, r3
  404bd2:	6041      	str	r1, [r0, #4]
  404bd4:	4770      	bx	lr

00404bd6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  404bd6:	b932      	cbnz	r2, 404be6 <spi_set_clock_polarity+0x10>
  404bd8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  404bdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404bde:	f023 0301 	bic.w	r3, r3, #1
  404be2:	6303      	str	r3, [r0, #48]	; 0x30
  404be4:	4770      	bx	lr
  404be6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  404bea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404bec:	f043 0301 	orr.w	r3, r3, #1
  404bf0:	6303      	str	r3, [r0, #48]	; 0x30
  404bf2:	4770      	bx	lr

00404bf4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  404bf4:	b932      	cbnz	r2, 404c04 <spi_set_clock_phase+0x10>
  404bf6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  404bfa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404bfc:	f023 0302 	bic.w	r3, r3, #2
  404c00:	6303      	str	r3, [r0, #48]	; 0x30
  404c02:	4770      	bx	lr
  404c04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  404c08:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404c0a:	f043 0302 	orr.w	r3, r3, #2
  404c0e:	6303      	str	r3, [r0, #48]	; 0x30
  404c10:	4770      	bx	lr

00404c12 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  404c12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  404c16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404c18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  404c1c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  404c1e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404c20:	431a      	orrs	r2, r3
  404c22:	630a      	str	r2, [r1, #48]	; 0x30
  404c24:	4770      	bx	lr

00404c26 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  404c26:	1e43      	subs	r3, r0, #1
  404c28:	4419      	add	r1, r3
  404c2a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  404c2e:	1e43      	subs	r3, r0, #1
  404c30:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  404c32:	bf94      	ite	ls
  404c34:	b200      	sxthls	r0, r0
		return -1;
  404c36:	f04f 30ff 	movhi.w	r0, #4294967295
}
  404c3a:	4770      	bx	lr

00404c3c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  404c3c:	b17a      	cbz	r2, 404c5e <spi_set_baudrate_div+0x22>
{
  404c3e:	b410      	push	{r4}
  404c40:	4614      	mov	r4, r2
  404c42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  404c46:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404c48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  404c4c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  404c4e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  404c50:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  404c54:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  404c56:	2000      	movs	r0, #0
}
  404c58:	f85d 4b04 	ldr.w	r4, [sp], #4
  404c5c:	4770      	bx	lr
        return -1;
  404c5e:	f04f 30ff 	mov.w	r0, #4294967295
  404c62:	4770      	bx	lr

00404c64 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  404c64:	b410      	push	{r4}
  404c66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  404c6a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  404c6c:	b280      	uxth	r0, r0
  404c6e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  404c70:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  404c72:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  404c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404c7a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  404c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  404c80:	4770      	bx	lr

00404c82 <supc_set_regulator_trim_user>:
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  404c82:	69c3      	ldr	r3, [r0, #28]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  404c84:	0249      	lsls	r1, r1, #9
  404c86:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00
  404c8a:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
  404c8e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  404c92:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
		| ((value & 0xFu) << 9);
  404c96:	4319      	orrs	r1, r3
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  404c98:	61c1      	str	r1, [r0, #28]
  404c9a:	4770      	bx	lr

00404c9c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  404c9c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  404c9e:	0189      	lsls	r1, r1, #6
  404ca0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  404ca2:	2402      	movs	r4, #2
  404ca4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  404ca6:	f04f 31ff 	mov.w	r1, #4294967295
  404caa:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  404cac:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  404cae:	605a      	str	r2, [r3, #4]
}
  404cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  404cb4:	4770      	bx	lr

00404cb6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  404cb6:	0189      	lsls	r1, r1, #6
  404cb8:	2305      	movs	r3, #5
  404cba:	5043      	str	r3, [r0, r1]
  404cbc:	4770      	bx	lr

00404cbe <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  404cbe:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  404cc2:	61ca      	str	r2, [r1, #28]
  404cc4:	4770      	bx	lr

00404cc6 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  404cc6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  404cca:	624a      	str	r2, [r1, #36]	; 0x24
  404ccc:	4770      	bx	lr

00404cce <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  404cce:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  404cd2:	6a08      	ldr	r0, [r1, #32]
}
  404cd4:	4770      	bx	lr
	...

00404cd8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  404cd8:	4b2a      	ldr	r3, [pc, #168]	; (404d84 <twi_set_speed+0xac>)
  404cda:	4299      	cmp	r1, r3
  404cdc:	d84a      	bhi.n	404d74 <twi_set_speed+0x9c>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  404cde:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  404ce2:	4299      	cmp	r1, r3
  404ce4:	d92c      	bls.n	404d40 <twi_set_speed+0x68>
{
  404ce6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  404ce8:	4c27      	ldr	r4, [pc, #156]	; (404d88 <twi_set_speed+0xb0>)
  404cea:	fba4 3402 	umull	r3, r4, r4, r2
  404cee:	0ba4      	lsrs	r4, r4, #14
  404cf0:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  404cf2:	4b26      	ldr	r3, [pc, #152]	; (404d8c <twi_set_speed+0xb4>)
  404cf4:	440b      	add	r3, r1
  404cf6:	009b      	lsls	r3, r3, #2
  404cf8:	fbb2 f2f3 	udiv	r2, r2, r3
  404cfc:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404cfe:	2cff      	cmp	r4, #255	; 0xff
  404d00:	d93a      	bls.n	404d78 <twi_set_speed+0xa0>
  404d02:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  404d04:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  404d06:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404d08:	2cff      	cmp	r4, #255	; 0xff
  404d0a:	d90e      	bls.n	404d2a <twi_set_speed+0x52>
  404d0c:	2907      	cmp	r1, #7
  404d0e:	d1f9      	bne.n	404d04 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  404d10:	0213      	lsls	r3, r2, #8
  404d12:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  404d14:	0409      	lsls	r1, r1, #16
  404d16:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  404d1a:	430b      	orrs	r3, r1
  404d1c:	b2e4      	uxtb	r4, r4
  404d1e:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  404d20:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  404d22:	2000      	movs	r0, #0
}
  404d24:	f85d 4b04 	ldr.w	r4, [sp], #4
  404d28:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404d2a:	2aff      	cmp	r2, #255	; 0xff
  404d2c:	d9f0      	bls.n	404d10 <twi_set_speed+0x38>
  404d2e:	2906      	cmp	r1, #6
  404d30:	d8ee      	bhi.n	404d10 <twi_set_speed+0x38>
			ckdiv++;
  404d32:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  404d34:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404d36:	2aff      	cmp	r2, #255	; 0xff
  404d38:	d9ea      	bls.n	404d10 <twi_set_speed+0x38>
  404d3a:	2906      	cmp	r1, #6
  404d3c:	d9f9      	bls.n	404d32 <twi_set_speed+0x5a>
  404d3e:	e7e7      	b.n	404d10 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  404d40:	0049      	lsls	r1, r1, #1
  404d42:	fbb2 f2f1 	udiv	r2, r2, r1
  404d46:	3a03      	subs	r2, #3
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404d48:	2aff      	cmp	r2, #255	; 0xff
  404d4a:	d911      	bls.n	404d70 <twi_set_speed+0x98>
  404d4c:	2300      	movs	r3, #0
			ckdiv++;
  404d4e:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  404d50:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404d52:	2aff      	cmp	r2, #255	; 0xff
  404d54:	d901      	bls.n	404d5a <twi_set_speed+0x82>
  404d56:	2b07      	cmp	r3, #7
  404d58:	d1f9      	bne.n	404d4e <twi_set_speed+0x76>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  404d5a:	0211      	lsls	r1, r2, #8
  404d5c:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  404d5e:	041b      	lsls	r3, r3, #16
  404d60:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  404d64:	430b      	orrs	r3, r1
  404d66:	b2d2      	uxtb	r2, r2
  404d68:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  404d6a:	6102      	str	r2, [r0, #16]
	return PASS;
  404d6c:	2000      	movs	r0, #0
  404d6e:	4770      	bx	lr
	uint32_t ckdiv = 0;
  404d70:	2300      	movs	r3, #0
  404d72:	e7f2      	b.n	404d5a <twi_set_speed+0x82>
		return FAIL;
  404d74:	2001      	movs	r0, #1
  404d76:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404d78:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  404d7a:	bf88      	it	hi
  404d7c:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404d7e:	d8d8      	bhi.n	404d32 <twi_set_speed+0x5a>
	uint32_t ckdiv = 0;
  404d80:	2100      	movs	r1, #0
  404d82:	e7c5      	b.n	404d10 <twi_set_speed+0x38>
  404d84:	00061a80 	.word	0x00061a80
  404d88:	057619f1 	.word	0x057619f1
  404d8c:	3ffd1200 	.word	0x3ffd1200

00404d90 <twi_master_init>:
{
  404d90:	b538      	push	{r3, r4, r5, lr}
  404d92:	4604      	mov	r4, r0
  404d94:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  404d96:	f04f 33ff 	mov.w	r3, #4294967295
  404d9a:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  404d9c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  404d9e:	2380      	movs	r3, #128	; 0x80
  404da0:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  404da2:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  404da4:	2308      	movs	r3, #8
  404da6:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  404da8:	2320      	movs	r3, #32
  404daa:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  404dac:	2304      	movs	r3, #4
  404dae:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  404db0:	680a      	ldr	r2, [r1, #0]
  404db2:	6849      	ldr	r1, [r1, #4]
  404db4:	4b05      	ldr	r3, [pc, #20]	; (404dcc <twi_master_init+0x3c>)
  404db6:	4798      	blx	r3
  404db8:	2801      	cmp	r0, #1
  404dba:	bf14      	ite	ne
  404dbc:	2000      	movne	r0, #0
  404dbe:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  404dc0:	7a6b      	ldrb	r3, [r5, #9]
  404dc2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  404dc4:	bf04      	itt	eq
  404dc6:	2340      	moveq	r3, #64	; 0x40
  404dc8:	6023      	streq	r3, [r4, #0]
}
  404dca:	bd38      	pop	{r3, r4, r5, pc}
  404dcc:	00404cd9 	.word	0x00404cd9

00404dd0 <twi_mk_addr>:
	if (len == 0)
  404dd0:	460a      	mov	r2, r1
  404dd2:	b159      	cbz	r1, 404dec <twi_mk_addr+0x1c>
	val = addr[0];
  404dd4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  404dd6:	2901      	cmp	r1, #1
		val |= addr[1];
  404dd8:	bfc4      	itt	gt
  404dda:	7841      	ldrbgt	r1, [r0, #1]
  404ddc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  404de0:	2a02      	cmp	r2, #2
  404de2:	dd04      	ble.n	404dee <twi_mk_addr+0x1e>
		val |= addr[2];
  404de4:	7882      	ldrb	r2, [r0, #2]
  404de6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  404dea:	e000      	b.n	404dee <twi_mk_addr+0x1e>
		return 0;
  404dec:	2300      	movs	r3, #0
}
  404dee:	4618      	mov	r0, r3
  404df0:	4770      	bx	lr
	...

00404df4 <twi_master_read>:
{
  404df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  404df6:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  404df8:	2c00      	cmp	r4, #0
  404dfa:	d04f      	beq.n	404e9c <twi_master_read+0xa8>
  404dfc:	460b      	mov	r3, r1
  404dfe:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  404e00:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  404e02:	2000      	movs	r0, #0
  404e04:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  404e06:	684a      	ldr	r2, [r1, #4]
  404e08:	0212      	lsls	r2, r2, #8
  404e0a:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  404e0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  404e12:	7c09      	ldrb	r1, [r1, #16]
  404e14:	0409      	lsls	r1, r1, #16
  404e16:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  404e1a:	430a      	orrs	r2, r1
  404e1c:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  404e1e:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  404e20:	6859      	ldr	r1, [r3, #4]
  404e22:	4618      	mov	r0, r3
  404e24:	4b22      	ldr	r3, [pc, #136]	; (404eb0 <twi_master_read+0xbc>)
  404e26:	4798      	blx	r3
  404e28:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  404e2a:	2c01      	cmp	r4, #1
  404e2c:	d00f      	beq.n	404e4e <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  404e2e:	2301      	movs	r3, #1
  404e30:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  404e32:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  404e34:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  404e36:	f413 7f80 	tst.w	r3, #256	; 0x100
  404e3a:	d136      	bne.n	404eaa <twi_master_read+0xb6>
  404e3c:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  404e40:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  404e44:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  404e48:	f04f 0c02 	mov.w	ip, #2
  404e4c:	e019      	b.n	404e82 <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  404e4e:	2303      	movs	r3, #3
  404e50:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  404e52:	2001      	movs	r0, #1
  404e54:	e7ee      	b.n	404e34 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  404e56:	460a      	mov	r2, r1
  404e58:	4670      	mov	r0, lr
  404e5a:	e00c      	b.n	404e76 <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  404e5c:	b908      	cbnz	r0, 404e62 <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  404e5e:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  404e62:	f013 0f02 	tst.w	r3, #2
  404e66:	d0f6      	beq.n	404e56 <twi_master_read+0x62>
  404e68:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  404e6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404e6c:	7033      	strb	r3, [r6, #0]
		cnt--;
  404e6e:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  404e70:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  404e72:	463a      	mov	r2, r7
	while (cnt > 0) {
  404e74:	b164      	cbz	r4, 404e90 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  404e76:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  404e78:	f413 7f80 	tst.w	r3, #256	; 0x100
  404e7c:	d111      	bne.n	404ea2 <twi_master_read+0xae>
		if (!timeout--) {
  404e7e:	1e51      	subs	r1, r2, #1
  404e80:	b18a      	cbz	r2, 404ea6 <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
  404e82:	2c01      	cmp	r4, #1
  404e84:	d0ea      	beq.n	404e5c <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  404e86:	f013 0f02 	tst.w	r3, #2
  404e8a:	d1ee      	bne.n	404e6a <twi_master_read+0x76>
  404e8c:	460a      	mov	r2, r1
  404e8e:	e7f1      	b.n	404e74 <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  404e90:	6a2b      	ldr	r3, [r5, #32]
  404e92:	f013 0f01 	tst.w	r3, #1
  404e96:	d0fb      	beq.n	404e90 <twi_master_read+0x9c>
	p_twi->TWI_SR;
  404e98:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
  404e9a:	e000      	b.n	404e9e <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
  404e9c:	2401      	movs	r4, #1
}
  404e9e:	4620      	mov	r0, r4
  404ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  404ea2:	2405      	movs	r4, #5
  404ea4:	e7fb      	b.n	404e9e <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
  404ea6:	2409      	movs	r4, #9
  404ea8:	e7f9      	b.n	404e9e <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
  404eaa:	2405      	movs	r4, #5
  404eac:	e7f7      	b.n	404e9e <twi_master_read+0xaa>
  404eae:	bf00      	nop
  404eb0:	00404dd1 	.word	0x00404dd1

00404eb4 <twi_master_write>:
{
  404eb4:	b570      	push	{r4, r5, r6, lr}
	uint32_t cnt = p_packet->length;
  404eb6:	68cd      	ldr	r5, [r1, #12]
	if (cnt == 0) {
  404eb8:	2d00      	cmp	r5, #0
  404eba:	d035      	beq.n	404f28 <twi_master_write+0x74>
  404ebc:	460b      	mov	r3, r1
  404ebe:	4604      	mov	r4, r0
	uint8_t *buffer = p_packet->buffer;
  404ec0:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  404ec2:	2000      	movs	r0, #0
  404ec4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  404ec6:	7c0a      	ldrb	r2, [r1, #16]
  404ec8:	0412      	lsls	r2, r2, #16
  404eca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  404ece:	6849      	ldr	r1, [r1, #4]
  404ed0:	0209      	lsls	r1, r1, #8
  404ed2:	f401 7140 	and.w	r1, r1, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  404ed6:	430a      	orrs	r2, r1
  404ed8:	6062      	str	r2, [r4, #4]
	p_twi->TWI_IADR = 0;
  404eda:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  404edc:	6859      	ldr	r1, [r3, #4]
  404ede:	4618      	mov	r0, r3
  404ee0:	4b15      	ldr	r3, [pc, #84]	; (404f38 <twi_master_write+0x84>)
  404ee2:	4798      	blx	r3
  404ee4:	60e0      	str	r0, [r4, #12]
		status = p_twi->TWI_SR;
  404ee6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  404ee8:	f413 7f80 	tst.w	r3, #256	; 0x100
  404eec:	d006      	beq.n	404efc <twi_master_write+0x48>
			return TWI_RECEIVE_NACK;
  404eee:	2505      	movs	r5, #5
  404ef0:	e01b      	b.n	404f2a <twi_master_write+0x76>
	while (cnt > 0) {
  404ef2:	b15d      	cbz	r5, 404f0c <twi_master_write+0x58>
		status = p_twi->TWI_SR;
  404ef4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  404ef6:	f413 7f80 	tst.w	r3, #256	; 0x100
  404efa:	d118      	bne.n	404f2e <twi_master_write+0x7a>
		if (!(status & TWI_SR_TXRDY)) {
  404efc:	f013 0f04 	tst.w	r3, #4
  404f00:	d0f7      	beq.n	404ef2 <twi_master_write+0x3e>
		p_twi->TWI_THR = *buffer++;
  404f02:	7833      	ldrb	r3, [r6, #0]
  404f04:	6363      	str	r3, [r4, #52]	; 0x34
		cnt--;
  404f06:	3d01      	subs	r5, #1
		p_twi->TWI_THR = *buffer++;
  404f08:	3601      	adds	r6, #1
  404f0a:	e7f2      	b.n	404ef2 <twi_master_write+0x3e>
		status = p_twi->TWI_SR;
  404f0c:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  404f0e:	f413 7f80 	tst.w	r3, #256	; 0x100
  404f12:	d10e      	bne.n	404f32 <twi_master_write+0x7e>
		if (status & TWI_SR_TXRDY) {
  404f14:	f013 0f04 	tst.w	r3, #4
  404f18:	d0f8      	beq.n	404f0c <twi_master_write+0x58>
	p_twi->TWI_CR = TWI_CR_STOP;
  404f1a:	2302      	movs	r3, #2
  404f1c:	6023      	str	r3, [r4, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  404f1e:	6a23      	ldr	r3, [r4, #32]
  404f20:	f013 0f01 	tst.w	r3, #1
  404f24:	d0fb      	beq.n	404f1e <twi_master_write+0x6a>
  404f26:	e000      	b.n	404f2a <twi_master_write+0x76>
		return TWI_INVALID_ARGUMENT;
  404f28:	2501      	movs	r5, #1
}
  404f2a:	4628      	mov	r0, r5
  404f2c:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
  404f2e:	2505      	movs	r5, #5
  404f30:	e7fb      	b.n	404f2a <twi_master_write+0x76>
			return TWI_RECEIVE_NACK;
  404f32:	2505      	movs	r5, #5
  404f34:	e7f9      	b.n	404f2a <twi_master_write+0x76>
  404f36:	bf00      	nop
  404f38:	00404dd1 	.word	0x00404dd1

00404f3c <twi_write_byte>:
	p_twi->TWI_THR = uc_byte;
  404f3c:	6341      	str	r1, [r0, #52]	; 0x34
  404f3e:	4770      	bx	lr

00404f40 <twi_reset>:
	p_twi->TWI_CR = TWI_CR_SWRST;
  404f40:	2380      	movs	r3, #128	; 0x80
  404f42:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  404f44:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404f46:	4770      	bx	lr

00404f48 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  404f48:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  404f4a:	4601      	mov	r1, r0
  404f4c:	bb28      	cbnz	r0, 404f9a <udd_sleep_mode+0x52>
  404f4e:	4b24      	ldr	r3, [pc, #144]	; (404fe0 <udd_sleep_mode+0x98>)
  404f50:	781b      	ldrb	r3, [r3, #0]
  404f52:	b91b      	cbnz	r3, 404f5c <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  404f54:	4b22      	ldr	r3, [pc, #136]	; (404fe0 <udd_sleep_mode+0x98>)
  404f56:	7019      	strb	r1, [r3, #0]
}
  404f58:	b002      	add	sp, #8
  404f5a:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  404f5c:	4b21      	ldr	r3, [pc, #132]	; (404fe4 <udd_sleep_mode+0x9c>)
  404f5e:	781b      	ldrb	r3, [r3, #0]
  404f60:	b903      	cbnz	r3, 404f64 <udd_sleep_mode+0x1c>
  404f62:	e7fe      	b.n	404f62 <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404f64:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404f68:	fab3 f383 	clz	r3, r3
  404f6c:	095b      	lsrs	r3, r3, #5
  404f6e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  404f70:	b672      	cpsid	i
  404f72:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404f76:	2200      	movs	r2, #0
  404f78:	4b1b      	ldr	r3, [pc, #108]	; (404fe8 <udd_sleep_mode+0xa0>)
  404f7a:	701a      	strb	r2, [r3, #0]
	return flags;
  404f7c:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  404f7e:	4a19      	ldr	r2, [pc, #100]	; (404fe4 <udd_sleep_mode+0x9c>)
  404f80:	7813      	ldrb	r3, [r2, #0]
  404f82:	3b01      	subs	r3, #1
  404f84:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  404f86:	2800      	cmp	r0, #0
  404f88:	d0e4      	beq.n	404f54 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  404f8a:	2201      	movs	r2, #1
  404f8c:	4b16      	ldr	r3, [pc, #88]	; (404fe8 <udd_sleep_mode+0xa0>)
  404f8e:	701a      	strb	r2, [r3, #0]
  404f90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404f94:	b662      	cpsie	i
  404f96:	e7dd      	b.n	404f54 <udd_sleep_mode+0xc>
  404f98:	e7fe      	b.n	404f98 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  404f9a:	4b11      	ldr	r3, [pc, #68]	; (404fe0 <udd_sleep_mode+0x98>)
  404f9c:	781b      	ldrb	r3, [r3, #0]
  404f9e:	2b00      	cmp	r3, #0
  404fa0:	d1d8      	bne.n	404f54 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  404fa2:	4b10      	ldr	r3, [pc, #64]	; (404fe4 <udd_sleep_mode+0x9c>)
  404fa4:	781b      	ldrb	r3, [r3, #0]
  404fa6:	2bff      	cmp	r3, #255	; 0xff
  404fa8:	d0f6      	beq.n	404f98 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404faa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404fae:	fab3 f383 	clz	r3, r3
  404fb2:	095b      	lsrs	r3, r3, #5
  404fb4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404fb6:	b672      	cpsid	i
  404fb8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404fbc:	2200      	movs	r2, #0
  404fbe:	4b0a      	ldr	r3, [pc, #40]	; (404fe8 <udd_sleep_mode+0xa0>)
  404fc0:	701a      	strb	r2, [r3, #0]
	return flags;
  404fc2:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  404fc4:	4a07      	ldr	r2, [pc, #28]	; (404fe4 <udd_sleep_mode+0x9c>)
  404fc6:	7813      	ldrb	r3, [r2, #0]
  404fc8:	3301      	adds	r3, #1
  404fca:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  404fcc:	2800      	cmp	r0, #0
  404fce:	d0c1      	beq.n	404f54 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  404fd0:	2201      	movs	r2, #1
  404fd2:	4b05      	ldr	r3, [pc, #20]	; (404fe8 <udd_sleep_mode+0xa0>)
  404fd4:	701a      	strb	r2, [r3, #0]
  404fd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404fda:	b662      	cpsie	i
  404fdc:	e7ba      	b.n	404f54 <udd_sleep_mode+0xc>
  404fde:	bf00      	nop
  404fe0:	20000d9e 	.word	0x20000d9e
  404fe4:	20003000 	.word	0x20003000
  404fe8:	200001a5 	.word	0x200001a5

00404fec <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  404fec:	4a03      	ldr	r2, [pc, #12]	; (404ffc <udd_ctrl_init+0x10>)
  404fee:	2300      	movs	r3, #0
  404ff0:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  404ff2:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  404ff4:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  404ff6:	4a02      	ldr	r2, [pc, #8]	; (405000 <udd_ctrl_init+0x14>)
  404ff8:	7013      	strb	r3, [r2, #0]
  404ffa:	4770      	bx	lr
  404ffc:	20003014 	.word	0x20003014
  405000:	20000da4 	.word	0x20000da4

00405004 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  405004:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  405006:	2205      	movs	r2, #5
  405008:	4b0a      	ldr	r3, [pc, #40]	; (405034 <udd_ctrl_stall_data+0x30>)
  40500a:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  40500c:	4a0a      	ldr	r2, [pc, #40]	; (405038 <udd_ctrl_stall_data+0x34>)
  40500e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405010:	9301      	str	r3, [sp, #4]
  405012:	9b01      	ldr	r3, [sp, #4]
  405014:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405018:	9301      	str	r3, [sp, #4]
  40501a:	9b01      	ldr	r3, [sp, #4]
  40501c:	f043 0320 	orr.w	r3, r3, #32
  405020:	9301      	str	r3, [sp, #4]
  405022:	9b01      	ldr	r3, [sp, #4]
  405024:	6313      	str	r3, [r2, #48]	; 0x30
  405026:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405028:	f013 0f20 	tst.w	r3, #32
  40502c:	d0fb      	beq.n	405026 <udd_ctrl_stall_data+0x22>
}
  40502e:	b002      	add	sp, #8
  405030:	4770      	bx	lr
  405032:	bf00      	nop
  405034:	20000da4 	.word	0x20000da4
  405038:	40044000 	.word	0x40044000

0040503c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  40503c:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40503e:	2203      	movs	r2, #3
  405040:	4b0a      	ldr	r3, [pc, #40]	; (40506c <udd_ctrl_send_zlp_in+0x30>)
  405042:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  405044:	4a0a      	ldr	r2, [pc, #40]	; (405070 <udd_ctrl_send_zlp_in+0x34>)
  405046:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405048:	9301      	str	r3, [sp, #4]
  40504a:	9b01      	ldr	r3, [sp, #4]
  40504c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405050:	9301      	str	r3, [sp, #4]
  405052:	9b01      	ldr	r3, [sp, #4]
  405054:	f043 0310 	orr.w	r3, r3, #16
  405058:	9301      	str	r3, [sp, #4]
  40505a:	9b01      	ldr	r3, [sp, #4]
  40505c:	6313      	str	r3, [r2, #48]	; 0x30
  40505e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405060:	f013 0f10 	tst.w	r3, #16
  405064:	d0fb      	beq.n	40505e <udd_ctrl_send_zlp_in+0x22>
}
  405066:	b002      	add	sp, #8
  405068:	4770      	bx	lr
  40506a:	bf00      	nop
  40506c:	20000da4 	.word	0x20000da4
  405070:	40044000 	.word	0x40044000

00405074 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  405074:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  405076:	4b02      	ldr	r3, [pc, #8]	; (405080 <udd_ctrl_endofrequest+0xc>)
  405078:	691b      	ldr	r3, [r3, #16]
  40507a:	b103      	cbz	r3, 40507e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  40507c:	4798      	blx	r3
  40507e:	bd08      	pop	{r3, pc}
  405080:	20003014 	.word	0x20003014

00405084 <udd_ctrl_in_sent>:
{
  405084:	b530      	push	{r4, r5, lr}
  405086:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  405088:	4b63      	ldr	r3, [pc, #396]	; (405218 <udd_ctrl_in_sent+0x194>)
  40508a:	781b      	ldrb	r3, [r3, #0]
  40508c:	2b03      	cmp	r3, #3
  40508e:	d029      	beq.n	4050e4 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  405090:	4b62      	ldr	r3, [pc, #392]	; (40521c <udd_ctrl_in_sent+0x198>)
  405092:	881b      	ldrh	r3, [r3, #0]
  405094:	4a62      	ldr	r2, [pc, #392]	; (405220 <udd_ctrl_in_sent+0x19c>)
  405096:	8994      	ldrh	r4, [r2, #12]
  405098:	1ae4      	subs	r4, r4, r3
  40509a:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  40509c:	2c00      	cmp	r4, #0
  40509e:	d144      	bne.n	40512a <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4050a0:	4a60      	ldr	r2, [pc, #384]	; (405224 <udd_ctrl_in_sent+0x1a0>)
  4050a2:	8811      	ldrh	r1, [r2, #0]
  4050a4:	440b      	add	r3, r1
  4050a6:	b29b      	uxth	r3, r3
  4050a8:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4050aa:	4a5d      	ldr	r2, [pc, #372]	; (405220 <udd_ctrl_in_sent+0x19c>)
  4050ac:	88d2      	ldrh	r2, [r2, #6]
  4050ae:	429a      	cmp	r2, r3
  4050b0:	d003      	beq.n	4050ba <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  4050b2:	4b5d      	ldr	r3, [pc, #372]	; (405228 <udd_ctrl_in_sent+0x1a4>)
  4050b4:	781b      	ldrb	r3, [r3, #0]
  4050b6:	2b00      	cmp	r3, #0
  4050b8:	d02b      	beq.n	405112 <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4050ba:	2204      	movs	r2, #4
  4050bc:	4b56      	ldr	r3, [pc, #344]	; (405218 <udd_ctrl_in_sent+0x194>)
  4050be:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  4050c0:	4a5a      	ldr	r2, [pc, #360]	; (40522c <udd_ctrl_in_sent+0x1a8>)
  4050c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4050c4:	9301      	str	r3, [sp, #4]
  4050c6:	9b01      	ldr	r3, [sp, #4]
  4050c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4050cc:	9301      	str	r3, [sp, #4]
  4050ce:	9b01      	ldr	r3, [sp, #4]
  4050d0:	f023 0301 	bic.w	r3, r3, #1
  4050d4:	9301      	str	r3, [sp, #4]
  4050d6:	9b01      	ldr	r3, [sp, #4]
  4050d8:	6313      	str	r3, [r2, #48]	; 0x30
  4050da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4050dc:	f013 0f01 	tst.w	r3, #1
  4050e0:	d1fb      	bne.n	4050da <udd_ctrl_in_sent+0x56>
  4050e2:	e014      	b.n	40510e <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  4050e4:	4a51      	ldr	r2, [pc, #324]	; (40522c <udd_ctrl_in_sent+0x1a8>)
  4050e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4050e8:	9300      	str	r3, [sp, #0]
  4050ea:	9b00      	ldr	r3, [sp, #0]
  4050ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4050f0:	9300      	str	r3, [sp, #0]
  4050f2:	9b00      	ldr	r3, [sp, #0]
  4050f4:	f023 0301 	bic.w	r3, r3, #1
  4050f8:	9300      	str	r3, [sp, #0]
  4050fa:	9b00      	ldr	r3, [sp, #0]
  4050fc:	6313      	str	r3, [r2, #48]	; 0x30
  4050fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405100:	f013 0f01 	tst.w	r3, #1
  405104:	d1fb      	bne.n	4050fe <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  405106:	4b4a      	ldr	r3, [pc, #296]	; (405230 <udd_ctrl_in_sent+0x1ac>)
  405108:	4798      	blx	r3
		udd_ctrl_init();
  40510a:	4b4a      	ldr	r3, [pc, #296]	; (405234 <udd_ctrl_in_sent+0x1b0>)
  40510c:	4798      	blx	r3
}
  40510e:	b007      	add	sp, #28
  405110:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  405112:	4b43      	ldr	r3, [pc, #268]	; (405220 <udd_ctrl_in_sent+0x19c>)
  405114:	695b      	ldr	r3, [r3, #20]
  405116:	2b00      	cmp	r3, #0
  405118:	d05d      	beq.n	4051d6 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40511a:	4798      	blx	r3
  40511c:	2800      	cmp	r0, #0
  40511e:	d05a      	beq.n	4051d6 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  405120:	2200      	movs	r2, #0
  405122:	4b3e      	ldr	r3, [pc, #248]	; (40521c <udd_ctrl_in_sent+0x198>)
  405124:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  405126:	4b3e      	ldr	r3, [pc, #248]	; (405220 <udd_ctrl_in_sent+0x19c>)
  405128:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  40512a:	2c07      	cmp	r4, #7
  40512c:	d953      	bls.n	4051d6 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  40512e:	2200      	movs	r2, #0
  405130:	4b3d      	ldr	r3, [pc, #244]	; (405228 <udd_ctrl_in_sent+0x1a4>)
  405132:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  405134:	2408      	movs	r4, #8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  405136:	4b3a      	ldr	r3, [pc, #232]	; (405220 <udd_ctrl_in_sent+0x19c>)
  405138:	6899      	ldr	r1, [r3, #8]
  40513a:	4b38      	ldr	r3, [pc, #224]	; (40521c <udd_ctrl_in_sent+0x198>)
  40513c:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40513e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405142:	fab3 f383 	clz	r3, r3
  405146:	095b      	lsrs	r3, r3, #5
  405148:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  40514a:	b672      	cpsid	i
  40514c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405150:	2200      	movs	r2, #0
  405152:	4b39      	ldr	r3, [pc, #228]	; (405238 <udd_ctrl_in_sent+0x1b4>)
  405154:	701a      	strb	r2, [r3, #0]
	return flags;
  405156:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  405158:	4b34      	ldr	r3, [pc, #208]	; (40522c <udd_ctrl_in_sent+0x1a8>)
  40515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40515c:	f013 0f02 	tst.w	r3, #2
  405160:	d13d      	bne.n	4051de <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  405162:	b14c      	cbz	r4, 405178 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  405164:	4401      	add	r1, r0
  405166:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  405168:	4830      	ldr	r0, [pc, #192]	; (40522c <udd_ctrl_in_sent+0x1a8>)
  40516a:	f812 3b01 	ldrb.w	r3, [r2], #1
  40516e:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  405170:	1a53      	subs	r3, r2, r1
  405172:	b2db      	uxtb	r3, r3
  405174:	42a3      	cmp	r3, r4
  405176:	d3f8      	bcc.n	40516a <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  405178:	4b28      	ldr	r3, [pc, #160]	; (40521c <udd_ctrl_in_sent+0x198>)
  40517a:	881a      	ldrh	r2, [r3, #0]
  40517c:	4414      	add	r4, r2
  40517e:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  405180:	4a2a      	ldr	r2, [pc, #168]	; (40522c <udd_ctrl_in_sent+0x1a8>)
  405182:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405184:	9303      	str	r3, [sp, #12]
  405186:	9b03      	ldr	r3, [sp, #12]
  405188:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40518c:	9303      	str	r3, [sp, #12]
  40518e:	9b03      	ldr	r3, [sp, #12]
  405190:	f043 0310 	orr.w	r3, r3, #16
  405194:	9303      	str	r3, [sp, #12]
  405196:	9b03      	ldr	r3, [sp, #12]
  405198:	6313      	str	r3, [r2, #48]	; 0x30
  40519a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40519c:	f013 0f10 	tst.w	r3, #16
  4051a0:	d0fb      	beq.n	40519a <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  4051a2:	4a22      	ldr	r2, [pc, #136]	; (40522c <udd_ctrl_in_sent+0x1a8>)
  4051a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4051a6:	9304      	str	r3, [sp, #16]
  4051a8:	9b04      	ldr	r3, [sp, #16]
  4051aa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4051ae:	9304      	str	r3, [sp, #16]
  4051b0:	9b04      	ldr	r3, [sp, #16]
  4051b2:	f023 0301 	bic.w	r3, r3, #1
  4051b6:	9304      	str	r3, [sp, #16]
  4051b8:	9b04      	ldr	r3, [sp, #16]
  4051ba:	6313      	str	r3, [r2, #48]	; 0x30
  4051bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4051be:	f013 0f01 	tst.w	r3, #1
  4051c2:	d1fb      	bne.n	4051bc <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  4051c4:	2d00      	cmp	r5, #0
  4051c6:	d0a2      	beq.n	40510e <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  4051c8:	2201      	movs	r2, #1
  4051ca:	4b1b      	ldr	r3, [pc, #108]	; (405238 <udd_ctrl_in_sent+0x1b4>)
  4051cc:	701a      	strb	r2, [r3, #0]
  4051ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4051d2:	b662      	cpsie	i
  4051d4:	e79b      	b.n	40510e <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  4051d6:	2201      	movs	r2, #1
  4051d8:	4b13      	ldr	r3, [pc, #76]	; (405228 <udd_ctrl_in_sent+0x1a4>)
  4051da:	701a      	strb	r2, [r3, #0]
  4051dc:	e7ab      	b.n	405136 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  4051de:	b12d      	cbz	r5, 4051ec <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  4051e0:	2201      	movs	r2, #1
  4051e2:	4b15      	ldr	r3, [pc, #84]	; (405238 <udd_ctrl_in_sent+0x1b4>)
  4051e4:	701a      	strb	r2, [r3, #0]
  4051e6:	f3bf 8f5f 	dmb	sy
  4051ea:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4051ec:	2204      	movs	r2, #4
  4051ee:	4b0a      	ldr	r3, [pc, #40]	; (405218 <udd_ctrl_in_sent+0x194>)
  4051f0:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  4051f2:	4a0e      	ldr	r2, [pc, #56]	; (40522c <udd_ctrl_in_sent+0x1a8>)
  4051f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4051f6:	9302      	str	r3, [sp, #8]
  4051f8:	9b02      	ldr	r3, [sp, #8]
  4051fa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4051fe:	9302      	str	r3, [sp, #8]
  405200:	9b02      	ldr	r3, [sp, #8]
  405202:	f023 0301 	bic.w	r3, r3, #1
  405206:	9302      	str	r3, [sp, #8]
  405208:	9b02      	ldr	r3, [sp, #8]
  40520a:	6313      	str	r3, [r2, #48]	; 0x30
  40520c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40520e:	f013 0f01 	tst.w	r3, #1
  405212:	d1fb      	bne.n	40520c <udd_ctrl_in_sent+0x188>
  405214:	e77b      	b.n	40510e <udd_ctrl_in_sent+0x8a>
  405216:	bf00      	nop
  405218:	20000da4 	.word	0x20000da4
  40521c:	20000da0 	.word	0x20000da0
  405220:	20003014 	.word	0x20003014
  405224:	20000da2 	.word	0x20000da2
  405228:	20000d9d 	.word	0x20000d9d
  40522c:	40044000 	.word	0x40044000
  405230:	00405075 	.word	0x00405075
  405234:	00404fed 	.word	0x00404fed
  405238:	200001a5 	.word	0x200001a5

0040523c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  40523c:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  40523e:	7c43      	ldrb	r3, [r0, #17]
  405240:	f013 0f10 	tst.w	r3, #16
  405244:	d016      	beq.n	405274 <udd_ep_finish_job+0x38>
  405246:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  405248:	7c43      	ldrb	r3, [r0, #17]
  40524a:	f36f 1304 	bfc	r3, #4, #1
  40524e:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  405250:	6804      	ldr	r4, [r0, #0]
  405252:	b17c      	cbz	r4, 405274 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  405254:	f102 030c 	add.w	r3, r2, #12
  405258:	4907      	ldr	r1, [pc, #28]	; (405278 <udd_ep_finish_job+0x3c>)
  40525a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40525e:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  405262:	bf18      	it	ne
  405264:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  405268:	6881      	ldr	r1, [r0, #8]
  40526a:	2d01      	cmp	r5, #1
  40526c:	bf14      	ite	ne
  40526e:	2000      	movne	r0, #0
  405270:	2001      	moveq	r0, #1
  405272:	47a0      	blx	r4
  405274:	bd38      	pop	{r3, r4, r5, pc}
  405276:	bf00      	nop
  405278:	40044000 	.word	0x40044000

0040527c <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  40527c:	b430      	push	{r4, r5}
  40527e:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  405280:	1e41      	subs	r1, r0, #1
  405282:	0083      	lsls	r3, r0, #2
  405284:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  405288:	f503 2380 	add.w	r3, r3, #262144	; 0x40000

	bank0_received = Is_udd_bank0_received(ep);
  40528c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  40528e:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  405290:	f012 0f02 	tst.w	r2, #2
  405294:	d032      	beq.n	4052fc <udd_ep_ack_out_received+0x80>
  405296:	f014 0f40 	tst.w	r4, #64	; 0x40
  40529a:	d108      	bne.n	4052ae <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  40529c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4052a0:	4c2a      	ldr	r4, [pc, #168]	; (40534c <udd_ep_ack_out_received+0xd0>)
  4052a2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4052a6:	7c54      	ldrb	r4, [r2, #17]
  4052a8:	f36f 0483 	bfc	r4, #2, #2
  4052ac:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  4052ae:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4052b2:	4c26      	ldr	r4, [pc, #152]	; (40534c <udd_ep_ack_out_received+0xd0>)
  4052b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4052b8:	7c52      	ldrb	r2, [r2, #17]
  4052ba:	f012 0f0c 	tst.w	r2, #12
  4052be:	d128      	bne.n	405312 <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  4052c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4052c2:	9200      	str	r2, [sp, #0]
  4052c4:	9a00      	ldr	r2, [sp, #0]
  4052c6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4052ca:	9200      	str	r2, [sp, #0]
  4052cc:	9a00      	ldr	r2, [sp, #0]
  4052ce:	f022 0202 	bic.w	r2, r2, #2
  4052d2:	9200      	str	r2, [sp, #0]
  4052d4:	9a00      	ldr	r2, [sp, #0]
  4052d6:	631a      	str	r2, [r3, #48]	; 0x30
  4052d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4052da:	f012 0f02 	tst.w	r2, #2
  4052de:	d1fb      	bne.n	4052d8 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4052e0:	b380      	cbz	r0, 405344 <udd_ep_ack_out_received+0xc8>
  4052e2:	2803      	cmp	r0, #3
  4052e4:	d02e      	beq.n	405344 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  4052e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4052ea:	4b18      	ldr	r3, [pc, #96]	; (40534c <udd_ep_ack_out_received+0xd0>)
  4052ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4052f0:	7c5a      	ldrb	r2, [r3, #17]
  4052f2:	2101      	movs	r1, #1
  4052f4:	f361 0283 	bfi	r2, r1, #2, #2
  4052f8:	745a      	strb	r2, [r3, #17]
  4052fa:	e023      	b.n	405344 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  4052fc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405300:	4c12      	ldr	r4, [pc, #72]	; (40534c <udd_ep_ack_out_received+0xd0>)
  405302:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  405306:	7c54      	ldrb	r4, [r2, #17]
  405308:	2501      	movs	r5, #1
  40530a:	f365 0483 	bfi	r4, r5, #2, #2
  40530e:	7454      	strb	r4, [r2, #17]
  405310:	e7cd      	b.n	4052ae <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  405312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405314:	9201      	str	r2, [sp, #4]
  405316:	9a01      	ldr	r2, [sp, #4]
  405318:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40531c:	9201      	str	r2, [sp, #4]
  40531e:	9a01      	ldr	r2, [sp, #4]
  405320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  405324:	9201      	str	r2, [sp, #4]
  405326:	9a01      	ldr	r2, [sp, #4]
  405328:	631a      	str	r2, [r3, #48]	; 0x30
  40532a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40532c:	f012 0f40 	tst.w	r2, #64	; 0x40
  405330:	d1fb      	bne.n	40532a <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  405332:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  405336:	4b05      	ldr	r3, [pc, #20]	; (40534c <udd_ep_ack_out_received+0xd0>)
  405338:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40533c:	7c4b      	ldrb	r3, [r1, #17]
  40533e:	f36f 0383 	bfc	r3, #2, #2
  405342:	744b      	strb	r3, [r1, #17]
	}
}
  405344:	b002      	add	sp, #8
  405346:	bc30      	pop	{r4, r5}
  405348:	4770      	bx	lr
  40534a:	bf00      	nop
  40534c:	20000da8 	.word	0x20000da8

00405350 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  405350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405354:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  405356:	4682      	mov	sl, r0
  405358:	1e47      	subs	r7, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40535a:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40535e:	4b67      	ldr	r3, [pc, #412]	; (4054fc <udd_ep_in_sent+0x1ac>)
  405360:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  405364:	f893 9011 	ldrb.w	r9, [r3, #17]
  405368:	f3c9 0981 	ubfx	r9, r9, #2, #2
  40536c:	2800      	cmp	r0, #0
  40536e:	f000 80b9 	beq.w	4054e4 <udd_ep_in_sent+0x194>
  405372:	2803      	cmp	r0, #3
  405374:	bf0c      	ite	eq
  405376:	2301      	moveq	r3, #1
  405378:	2302      	movne	r3, #2
  40537a:	454b      	cmp	r3, r9
  40537c:	f340 80b4 	ble.w	4054e8 <udd_ep_in_sent+0x198>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  405380:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  405384:	4a5d      	ldr	r2, [pc, #372]	; (4054fc <udd_ep_in_sent+0x1ac>)
  405386:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40538a:	68dd      	ldr	r5, [r3, #12]
  40538c:	f8d3 c008 	ldr.w	ip, [r3, #8]
  405390:	4565      	cmp	r5, ip
  405392:	d308      	bcc.n	4053a6 <udd_ep_in_sent+0x56>
  405394:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  405398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40539c:	7c5b      	ldrb	r3, [r3, #17]
  40539e:	f013 0f40 	tst.w	r3, #64	; 0x40
  4053a2:	f000 80a5 	beq.w	4054f0 <udd_ep_in_sent+0x1a0>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4053a6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4053aa:	4a54      	ldr	r2, [pc, #336]	; (4054fc <udd_ep_in_sent+0x1ac>)
  4053ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4053b0:	685c      	ldr	r4, [r3, #4]
  4053b2:	442c      	add	r4, r5
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4053b4:	ebac 0e05 	sub.w	lr, ip, r5
	uint32_t pkt_size = ptr_job->size;
  4053b8:	8a1a      	ldrh	r2, [r3, #16]
  4053ba:	f3c2 0609 	ubfx	r6, r2, #0, #10
	if (nb_remain < pkt_size) {
  4053be:	45b6      	cmp	lr, r6
		pkt_size = nb_remain;
  4053c0:	bf3a      	itte	cc
  4053c2:	4676      	movcc	r6, lr
		is_short_pkt = true;
  4053c4:	f04f 0801 	movcc.w	r8, #1
	bool is_short_pkt = false;
  4053c8:	f04f 0800 	movcs.w	r8, #0
	ptr_job->buf_cnt += pkt_size;
  4053cc:	eb05 0e06 	add.w	lr, r5, r6
  4053d0:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4053d4:	4a49      	ldr	r2, [pc, #292]	; (4054fc <udd_ep_in_sent+0x1ac>)
  4053d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4053da:	f8c3 e00c 	str.w	lr, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4053de:	2e07      	cmp	r6, #7
  4053e0:	d933      	bls.n	40544a <udd_ep_in_sent+0xfa>
  4053e2:	f104 0308 	add.w	r3, r4, #8
  4053e6:	4635      	mov	r5, r6
  4053e8:	0082      	lsls	r2, r0, #2
  4053ea:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4053ee:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4053f2:	f813 bc08 	ldrb.w	fp, [r3, #-8]
  4053f6:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4053fa:	f813 bc07 	ldrb.w	fp, [r3, #-7]
  4053fe:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405402:	f813 bc06 	ldrb.w	fp, [r3, #-6]
  405406:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40540a:	f813 bc05 	ldrb.w	fp, [r3, #-5]
  40540e:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405412:	f813 bc04 	ldrb.w	fp, [r3, #-4]
  405416:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40541a:	f813 bc03 	ldrb.w	fp, [r3, #-3]
  40541e:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405422:	f813 bc02 	ldrb.w	fp, [r3, #-2]
  405426:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40542a:	f813 bc01 	ldrb.w	fp, [r3, #-1]
  40542e:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  405432:	3d08      	subs	r5, #8
  405434:	3308      	adds	r3, #8
  405436:	2d07      	cmp	r5, #7
  405438:	d8db      	bhi.n	4053f2 <udd_ep_in_sent+0xa2>
  40543a:	f1a6 0308 	sub.w	r3, r6, #8
  40543e:	f023 0307 	bic.w	r3, r3, #7
  405442:	3308      	adds	r3, #8
  405444:	441c      	add	r4, r3
  405446:	f006 0607 	and.w	r6, r6, #7
	for (; pkt_size; pkt_size--) {
  40544a:	b14e      	cbz	r6, 405460 <udd_ep_in_sent+0x110>
  40544c:	19a2      	adds	r2, r4, r6
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40544e:	4d2c      	ldr	r5, [pc, #176]	; (405500 <udd_ep_in_sent+0x1b0>)
  405450:	f10a 0a14 	add.w	sl, sl, #20
  405454:	f814 3b01 	ldrb.w	r3, [r4], #1
  405458:	f845 302a 	str.w	r3, [r5, sl, lsl #2]
	for (; pkt_size; pkt_size--) {
  40545c:	4294      	cmp	r4, r2
  40545e:	d1f9      	bne.n	405454 <udd_ep_in_sent+0x104>
	ptr_job->bank++;
  405460:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  405464:	4a25      	ldr	r2, [pc, #148]	; (4054fc <udd_ep_in_sent+0x1ac>)
  405466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40546a:	f109 0901 	add.w	r9, r9, #1
  40546e:	7c5a      	ldrb	r2, [r3, #17]
  405470:	f369 0283 	bfi	r2, r9, #2, #2
  405474:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  405476:	b1a1      	cbz	r1, 4054a2 <udd_ep_in_sent+0x152>
  405478:	0080      	lsls	r0, r0, #2
  40547a:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  40547e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
		udd_set_transmit_ready(ep);
  405482:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405484:	9301      	str	r3, [sp, #4]
  405486:	9b01      	ldr	r3, [sp, #4]
  405488:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40548c:	9301      	str	r3, [sp, #4]
  40548e:	9b01      	ldr	r3, [sp, #4]
  405490:	f043 0310 	orr.w	r3, r3, #16
  405494:	9301      	str	r3, [sp, #4]
  405496:	9b01      	ldr	r3, [sp, #4]
  405498:	6303      	str	r3, [r0, #48]	; 0x30
  40549a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40549c:	f013 0f10 	tst.w	r3, #16
  4054a0:	d0fb      	beq.n	40549a <udd_ep_in_sent+0x14a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4054a2:	f1b8 0f00 	cmp.w	r8, #0
  4054a6:	d008      	beq.n	4054ba <udd_ep_in_sent+0x16a>
		ptr_job->b_shortpacket = false;
  4054a8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4054ac:	4a13      	ldr	r2, [pc, #76]	; (4054fc <udd_ep_in_sent+0x1ac>)
  4054ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4054b2:	7c5a      	ldrb	r2, [r3, #17]
  4054b4:	f36f 1286 	bfc	r2, #6, #1
  4054b8:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  4054ba:	45f4      	cmp	ip, lr
  4054bc:	d81a      	bhi.n	4054f4 <udd_ep_in_sent+0x1a4>
			&& (!ptr_job->b_shortpacket)) {
  4054be:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4054c2:	4a0e      	ldr	r2, [pc, #56]	; (4054fc <udd_ep_in_sent+0x1ac>)
  4054c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4054c8:	7c5b      	ldrb	r3, [r3, #17]
  4054ca:	f013 0f40 	tst.w	r3, #64	; 0x40
  4054ce:	d113      	bne.n	4054f8 <udd_ep_in_sent+0x1a8>
		ptr_job->b_buf_end = true;
  4054d0:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4054d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4054d8:	7c5a      	ldrb	r2, [r3, #17]
  4054da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4054de:	745a      	strb	r2, [r3, #17]
		return false;
  4054e0:	2000      	movs	r0, #0
  4054e2:	e002      	b.n	4054ea <udd_ep_in_sent+0x19a>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4054e4:	2301      	movs	r3, #1
  4054e6:	e748      	b.n	40537a <udd_ep_in_sent+0x2a>
		return true; // Data pending
  4054e8:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  4054ea:	b003      	add	sp, #12
  4054ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  4054f0:	2000      	movs	r0, #0
  4054f2:	e7fa      	b.n	4054ea <udd_ep_in_sent+0x19a>
	return true; // Pending
  4054f4:	2001      	movs	r0, #1
  4054f6:	e7f8      	b.n	4054ea <udd_ep_in_sent+0x19a>
  4054f8:	2001      	movs	r0, #1
  4054fa:	e7f6      	b.n	4054ea <udd_ep_in_sent+0x19a>
  4054fc:	20000da8 	.word	0x20000da8
  405500:	40044000 	.word	0x40044000

00405504 <UDP_Handler>:
{
  405504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405508:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  40550a:	4b86      	ldr	r3, [pc, #536]	; (405724 <UDP_Handler+0x220>)
  40550c:	4798      	blx	r3
  40550e:	b920      	cbnz	r0, 40551a <UDP_Handler+0x16>
  405510:	4b85      	ldr	r3, [pc, #532]	; (405728 <UDP_Handler+0x224>)
  405512:	69db      	ldr	r3, [r3, #28]
  405514:	f413 7f80 	tst.w	r3, #256	; 0x100
  405518:	d03b      	beq.n	405592 <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  40551a:	2030      	movs	r0, #48	; 0x30
  40551c:	4b83      	ldr	r3, [pc, #524]	; (40572c <UDP_Handler+0x228>)
  40551e:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  405520:	4b81      	ldr	r3, [pc, #516]	; (405728 <UDP_Handler+0x224>)
  405522:	699b      	ldr	r3, [r3, #24]
  405524:	f413 6f00 	tst.w	r3, #2048	; 0x800
  405528:	d004      	beq.n	405534 <UDP_Handler+0x30>
  40552a:	4b7f      	ldr	r3, [pc, #508]	; (405728 <UDP_Handler+0x224>)
  40552c:	69db      	ldr	r3, [r3, #28]
  40552e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  405532:	d137      	bne.n	4055a4 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  405534:	4b7c      	ldr	r3, [pc, #496]	; (405728 <UDP_Handler+0x224>)
  405536:	69db      	ldr	r3, [r3, #28]
  405538:	f013 0f01 	tst.w	r3, #1
  40553c:	f000 81c2 	beq.w	4058c4 <UDP_Handler+0x3c0>
	if (Is_udd_setup_received(0)) {
  405540:	4b79      	ldr	r3, [pc, #484]	; (405728 <UDP_Handler+0x224>)
  405542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405544:	f013 0f04 	tst.w	r3, #4
  405548:	d133      	bne.n	4055b2 <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  40554a:	4b77      	ldr	r3, [pc, #476]	; (405728 <UDP_Handler+0x224>)
  40554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40554e:	f013 0f01 	tst.w	r3, #1
  405552:	f040 80c3 	bne.w	4056dc <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  405556:	4b74      	ldr	r3, [pc, #464]	; (405728 <UDP_Handler+0x224>)
  405558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40555a:	f013 0f02 	tst.w	r3, #2
  40555e:	f040 80c0 	bne.w	4056e2 <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  405562:	4b71      	ldr	r3, [pc, #452]	; (405728 <UDP_Handler+0x224>)
  405564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405566:	f013 0f08 	tst.w	r3, #8
  40556a:	f000 81ab 	beq.w	4058c4 <UDP_Handler+0x3c0>
		udd_ack_stall(0);
  40556e:	4a6e      	ldr	r2, [pc, #440]	; (405728 <UDP_Handler+0x224>)
  405570:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405572:	9300      	str	r3, [sp, #0]
  405574:	9b00      	ldr	r3, [sp, #0]
  405576:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40557a:	9300      	str	r3, [sp, #0]
  40557c:	9b00      	ldr	r3, [sp, #0]
  40557e:	f023 0308 	bic.w	r3, r3, #8
  405582:	9300      	str	r3, [sp, #0]
  405584:	9b00      	ldr	r3, [sp, #0]
  405586:	6313      	str	r3, [r2, #48]	; 0x30
  405588:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40558a:	f013 0f08 	tst.w	r3, #8
  40558e:	d1fb      	bne.n	405588 <UDP_Handler+0x84>
  405590:	e005      	b.n	40559e <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  405592:	b672      	cpsid	i
  405594:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  405598:	2200      	movs	r2, #0
  40559a:	4b65      	ldr	r3, [pc, #404]	; (405730 <UDP_Handler+0x22c>)
  40559c:	701a      	strb	r2, [r3, #0]
}
  40559e:	b01b      	add	sp, #108	; 0x6c
  4055a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  4055a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4055a8:	4b5f      	ldr	r3, [pc, #380]	; (405728 <UDP_Handler+0x224>)
  4055aa:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  4055ac:	4b61      	ldr	r3, [pc, #388]	; (405734 <UDP_Handler+0x230>)
  4055ae:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  4055b0:	e7f5      	b.n	40559e <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  4055b2:	4b61      	ldr	r3, [pc, #388]	; (405738 <UDP_Handler+0x234>)
  4055b4:	781b      	ldrb	r3, [r3, #0]
  4055b6:	b9cb      	cbnz	r3, 4055ec <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  4055b8:	4b5b      	ldr	r3, [pc, #364]	; (405728 <UDP_Handler+0x224>)
  4055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4055bc:	f3c3 430a 	ubfx	r3, r3, #16, #11
  4055c0:	2b08      	cmp	r3, #8
  4055c2:	d018      	beq.n	4055f6 <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  4055c4:	4a58      	ldr	r2, [pc, #352]	; (405728 <UDP_Handler+0x224>)
  4055c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4055c8:	9301      	str	r3, [sp, #4]
  4055ca:	9b01      	ldr	r3, [sp, #4]
  4055cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4055d0:	9301      	str	r3, [sp, #4]
  4055d2:	9b01      	ldr	r3, [sp, #4]
  4055d4:	f023 0304 	bic.w	r3, r3, #4
  4055d8:	9301      	str	r3, [sp, #4]
  4055da:	9b01      	ldr	r3, [sp, #4]
  4055dc:	6313      	str	r3, [r2, #48]	; 0x30
  4055de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4055e0:	f013 0f04 	tst.w	r3, #4
  4055e4:	d1fb      	bne.n	4055de <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  4055e6:	4b55      	ldr	r3, [pc, #340]	; (40573c <UDP_Handler+0x238>)
  4055e8:	4798      	blx	r3
  4055ea:	e7d8      	b.n	40559e <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  4055ec:	4b54      	ldr	r3, [pc, #336]	; (405740 <UDP_Handler+0x23c>)
  4055ee:	4798      	blx	r3
		udd_ctrl_init();
  4055f0:	4b54      	ldr	r3, [pc, #336]	; (405744 <UDP_Handler+0x240>)
  4055f2:	4798      	blx	r3
  4055f4:	e7e0      	b.n	4055b8 <UDP_Handler+0xb4>
  4055f6:	4b54      	ldr	r3, [pc, #336]	; (405748 <UDP_Handler+0x244>)
  4055f8:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  4055fc:	494a      	ldr	r1, [pc, #296]	; (405728 <UDP_Handler+0x224>)
  4055fe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  405600:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  405604:	4283      	cmp	r3, r0
  405606:	d1fa      	bne.n	4055fe <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  405608:	4b50      	ldr	r3, [pc, #320]	; (40574c <UDP_Handler+0x248>)
  40560a:	4798      	blx	r3
  40560c:	b998      	cbnz	r0, 405636 <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  40560e:	4a46      	ldr	r2, [pc, #280]	; (405728 <UDP_Handler+0x224>)
  405610:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405612:	9302      	str	r3, [sp, #8]
  405614:	9b02      	ldr	r3, [sp, #8]
  405616:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40561a:	9302      	str	r3, [sp, #8]
  40561c:	9b02      	ldr	r3, [sp, #8]
  40561e:	f023 0304 	bic.w	r3, r3, #4
  405622:	9302      	str	r3, [sp, #8]
  405624:	9b02      	ldr	r3, [sp, #8]
  405626:	6313      	str	r3, [r2, #48]	; 0x30
  405628:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40562a:	f013 0f04 	tst.w	r3, #4
  40562e:	d1fb      	bne.n	405628 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  405630:	4b42      	ldr	r3, [pc, #264]	; (40573c <UDP_Handler+0x238>)
  405632:	4798      	blx	r3
  405634:	e7b3      	b.n	40559e <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  405636:	4b46      	ldr	r3, [pc, #280]	; (405750 <UDP_Handler+0x24c>)
  405638:	f993 3000 	ldrsb.w	r3, [r3]
  40563c:	2b00      	cmp	r3, #0
  40563e:	db1d      	blt.n	40567c <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  405640:	4a39      	ldr	r2, [pc, #228]	; (405728 <UDP_Handler+0x224>)
  405642:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405644:	9305      	str	r3, [sp, #20]
  405646:	9b05      	ldr	r3, [sp, #20]
  405648:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40564c:	9305      	str	r3, [sp, #20]
  40564e:	9b05      	ldr	r3, [sp, #20]
  405650:	f023 0304 	bic.w	r3, r3, #4
  405654:	9305      	str	r3, [sp, #20]
  405656:	9b05      	ldr	r3, [sp, #20]
  405658:	6313      	str	r3, [r2, #48]	; 0x30
  40565a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40565c:	f013 0f04 	tst.w	r3, #4
  405660:	d1fb      	bne.n	40565a <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  405662:	4b3b      	ldr	r3, [pc, #236]	; (405750 <UDP_Handler+0x24c>)
  405664:	88db      	ldrh	r3, [r3, #6]
  405666:	2b00      	cmp	r3, #0
  405668:	d035      	beq.n	4056d6 <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  40566a:	2300      	movs	r3, #0
  40566c:	4a39      	ldr	r2, [pc, #228]	; (405754 <UDP_Handler+0x250>)
  40566e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  405670:	4a39      	ldr	r2, [pc, #228]	; (405758 <UDP_Handler+0x254>)
  405672:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  405674:	2201      	movs	r2, #1
  405676:	4b30      	ldr	r3, [pc, #192]	; (405738 <UDP_Handler+0x234>)
  405678:	701a      	strb	r2, [r3, #0]
  40567a:	e790      	b.n	40559e <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  40567c:	4a2a      	ldr	r2, [pc, #168]	; (405728 <UDP_Handler+0x224>)
  40567e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405680:	9303      	str	r3, [sp, #12]
  405682:	9b03      	ldr	r3, [sp, #12]
  405684:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405688:	9303      	str	r3, [sp, #12]
  40568a:	9b03      	ldr	r3, [sp, #12]
  40568c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405690:	9303      	str	r3, [sp, #12]
  405692:	9b03      	ldr	r3, [sp, #12]
  405694:	6313      	str	r3, [r2, #48]	; 0x30
  405696:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405698:	f013 0f80 	tst.w	r3, #128	; 0x80
  40569c:	d0fb      	beq.n	405696 <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  40569e:	4a22      	ldr	r2, [pc, #136]	; (405728 <UDP_Handler+0x224>)
  4056a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4056a2:	9304      	str	r3, [sp, #16]
  4056a4:	9b04      	ldr	r3, [sp, #16]
  4056a6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4056aa:	9304      	str	r3, [sp, #16]
  4056ac:	9b04      	ldr	r3, [sp, #16]
  4056ae:	f023 0304 	bic.w	r3, r3, #4
  4056b2:	9304      	str	r3, [sp, #16]
  4056b4:	9b04      	ldr	r3, [sp, #16]
  4056b6:	6313      	str	r3, [r2, #48]	; 0x30
  4056b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4056ba:	f013 0f04 	tst.w	r3, #4
  4056be:	d1fb      	bne.n	4056b8 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  4056c0:	2300      	movs	r3, #0
  4056c2:	4a24      	ldr	r2, [pc, #144]	; (405754 <UDP_Handler+0x250>)
  4056c4:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4056c6:	4a24      	ldr	r2, [pc, #144]	; (405758 <UDP_Handler+0x254>)
  4056c8:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4056ca:	2202      	movs	r2, #2
  4056cc:	4b1a      	ldr	r3, [pc, #104]	; (405738 <UDP_Handler+0x234>)
  4056ce:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4056d0:	4b22      	ldr	r3, [pc, #136]	; (40575c <UDP_Handler+0x258>)
  4056d2:	4798      	blx	r3
  4056d4:	e763      	b.n	40559e <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  4056d6:	4b22      	ldr	r3, [pc, #136]	; (405760 <UDP_Handler+0x25c>)
  4056d8:	4798      	blx	r3
  4056da:	e760      	b.n	40559e <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  4056dc:	4b1f      	ldr	r3, [pc, #124]	; (40575c <UDP_Handler+0x258>)
  4056de:	4798      	blx	r3
  4056e0:	e75d      	b.n	40559e <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  4056e2:	4b15      	ldr	r3, [pc, #84]	; (405738 <UDP_Handler+0x234>)
  4056e4:	781b      	ldrb	r3, [r3, #0]
  4056e6:	2b01      	cmp	r3, #1
  4056e8:	d03c      	beq.n	405764 <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  4056ea:	2b02      	cmp	r3, #2
  4056ec:	d004      	beq.n	4056f8 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  4056ee:	2b04      	cmp	r3, #4
  4056f0:	d002      	beq.n	4056f8 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  4056f2:	4b12      	ldr	r3, [pc, #72]	; (40573c <UDP_Handler+0x238>)
  4056f4:	4798      	blx	r3
  4056f6:	e001      	b.n	4056fc <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  4056f8:	4b11      	ldr	r3, [pc, #68]	; (405740 <UDP_Handler+0x23c>)
  4056fa:	4798      	blx	r3
		udd_ack_bank0_received(0);
  4056fc:	4a0a      	ldr	r2, [pc, #40]	; (405728 <UDP_Handler+0x224>)
  4056fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405700:	9306      	str	r3, [sp, #24]
  405702:	9b06      	ldr	r3, [sp, #24]
  405704:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405708:	9306      	str	r3, [sp, #24]
  40570a:	9b06      	ldr	r3, [sp, #24]
  40570c:	f023 0302 	bic.w	r3, r3, #2
  405710:	9306      	str	r3, [sp, #24]
  405712:	9b06      	ldr	r3, [sp, #24]
  405714:	6313      	str	r3, [r2, #48]	; 0x30
  405716:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405718:	f013 0f02 	tst.w	r3, #2
  40571c:	d1fb      	bne.n	405716 <UDP_Handler+0x212>
		udd_ctrl_init();
  40571e:	4b09      	ldr	r3, [pc, #36]	; (405744 <UDP_Handler+0x240>)
  405720:	4798      	blx	r3
  405722:	e73c      	b.n	40559e <UDP_Handler+0x9a>
  405724:	004048e9 	.word	0x004048e9
  405728:	40044000 	.word	0x40044000
  40572c:	00404771 	.word	0x00404771
  405730:	200001a5 	.word	0x200001a5
  405734:	00403a75 	.word	0x00403a75
  405738:	20000da4 	.word	0x20000da4
  40573c:	00405005 	.word	0x00405005
  405740:	00405075 	.word	0x00405075
  405744:	00404fed 	.word	0x00404fed
  405748:	20003013 	.word	0x20003013
  40574c:	00403ab5 	.word	0x00403ab5
  405750:	20003014 	.word	0x20003014
  405754:	20000da2 	.word	0x20000da2
  405758:	20000da0 	.word	0x20000da0
  40575c:	00405085 	.word	0x00405085
  405760:	0040503d 	.word	0x0040503d
	nb_data = udd_byte_count(0);
  405764:	4b51      	ldr	r3, [pc, #324]	; (4058ac <UDP_Handler+0x3a8>)
  405766:	6b19      	ldr	r1, [r3, #48]	; 0x30
  405768:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  40576c:	4b50      	ldr	r3, [pc, #320]	; (4058b0 <UDP_Handler+0x3ac>)
  40576e:	899b      	ldrh	r3, [r3, #12]
  405770:	4a50      	ldr	r2, [pc, #320]	; (4058b4 <UDP_Handler+0x3b0>)
  405772:	8815      	ldrh	r5, [r2, #0]
  405774:	186a      	adds	r2, r5, r1
  405776:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  405778:	bfbc      	itt	lt
  40577a:	1b5b      	sublt	r3, r3, r5
  40577c:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40577e:	4b4c      	ldr	r3, [pc, #304]	; (4058b0 <UDP_Handler+0x3ac>)
  405780:	6898      	ldr	r0, [r3, #8]
  405782:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  405784:	b171      	cbz	r1, 4057a4 <UDP_Handler+0x2a0>
  405786:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  405788:	4c48      	ldr	r4, [pc, #288]	; (4058ac <UDP_Handler+0x3a8>)
  40578a:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40578c:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  405790:	1a13      	subs	r3, r2, r0
  405792:	b2db      	uxtb	r3, r3
  405794:	428b      	cmp	r3, r1
  405796:	d3f8      	bcc.n	40578a <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  405798:	440d      	add	r5, r1
  40579a:	b2ad      	uxth	r5, r5
  40579c:	4b45      	ldr	r3, [pc, #276]	; (4058b4 <UDP_Handler+0x3b0>)
  40579e:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  4057a0:	2908      	cmp	r1, #8
  4057a2:	d01a      	beq.n	4057da <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  4057a4:	4b42      	ldr	r3, [pc, #264]	; (4058b0 <UDP_Handler+0x3ac>)
  4057a6:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  4057a8:	695b      	ldr	r3, [r3, #20]
  4057aa:	b113      	cbz	r3, 4057b2 <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  4057ac:	4798      	blx	r3
  4057ae:	2800      	cmp	r0, #0
  4057b0:	d030      	beq.n	405814 <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  4057b2:	4a3e      	ldr	r2, [pc, #248]	; (4058ac <UDP_Handler+0x3a8>)
  4057b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4057b6:	9308      	str	r3, [sp, #32]
  4057b8:	9b08      	ldr	r3, [sp, #32]
  4057ba:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4057be:	9308      	str	r3, [sp, #32]
  4057c0:	9b08      	ldr	r3, [sp, #32]
  4057c2:	f023 0302 	bic.w	r3, r3, #2
  4057c6:	9308      	str	r3, [sp, #32]
  4057c8:	9b08      	ldr	r3, [sp, #32]
  4057ca:	6313      	str	r3, [r2, #48]	; 0x30
  4057cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4057ce:	f013 0f02 	tst.w	r3, #2
  4057d2:	d1fb      	bne.n	4057cc <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  4057d4:	4b38      	ldr	r3, [pc, #224]	; (4058b8 <UDP_Handler+0x3b4>)
  4057d6:	4798      	blx	r3
  4057d8:	e6e1      	b.n	40559e <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  4057da:	4b35      	ldr	r3, [pc, #212]	; (4058b0 <UDP_Handler+0x3ac>)
  4057dc:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  4057de:	4b37      	ldr	r3, [pc, #220]	; (4058bc <UDP_Handler+0x3b8>)
  4057e0:	881b      	ldrh	r3, [r3, #0]
  4057e2:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  4057e4:	429a      	cmp	r2, r3
  4057e6:	dddd      	ble.n	4057a4 <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4057e8:	4b31      	ldr	r3, [pc, #196]	; (4058b0 <UDP_Handler+0x3ac>)
  4057ea:	899b      	ldrh	r3, [r3, #12]
  4057ec:	42ab      	cmp	r3, r5
  4057ee:	d025      	beq.n	40583c <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  4057f0:	4a2e      	ldr	r2, [pc, #184]	; (4058ac <UDP_Handler+0x3a8>)
  4057f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4057f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4057f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057f8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4057fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4057fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405800:	f023 0302 	bic.w	r3, r3, #2
  405804:	930b      	str	r3, [sp, #44]	; 0x2c
  405806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405808:	6313      	str	r3, [r2, #48]	; 0x30
  40580a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40580c:	f013 0f02 	tst.w	r3, #2
  405810:	d1fb      	bne.n	40580a <UDP_Handler+0x306>
  405812:	e6c4      	b.n	40559e <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  405814:	4b2a      	ldr	r3, [pc, #168]	; (4058c0 <UDP_Handler+0x3bc>)
  405816:	4798      	blx	r3
				udd_ack_bank0_received(0);
  405818:	4a24      	ldr	r2, [pc, #144]	; (4058ac <UDP_Handler+0x3a8>)
  40581a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40581c:	9307      	str	r3, [sp, #28]
  40581e:	9b07      	ldr	r3, [sp, #28]
  405820:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405824:	9307      	str	r3, [sp, #28]
  405826:	9b07      	ldr	r3, [sp, #28]
  405828:	f023 0302 	bic.w	r3, r3, #2
  40582c:	9307      	str	r3, [sp, #28]
  40582e:	9b07      	ldr	r3, [sp, #28]
  405830:	6313      	str	r3, [r2, #48]	; 0x30
  405832:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405834:	f013 0f02 	tst.w	r3, #2
  405838:	d1fb      	bne.n	405832 <UDP_Handler+0x32e>
  40583a:	e6b0      	b.n	40559e <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  40583c:	4b1c      	ldr	r3, [pc, #112]	; (4058b0 <UDP_Handler+0x3ac>)
  40583e:	695b      	ldr	r3, [r3, #20]
  405840:	b153      	cbz	r3, 405858 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  405842:	4798      	blx	r3
  405844:	b1e8      	cbz	r0, 405882 <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  405846:	491d      	ldr	r1, [pc, #116]	; (4058bc <UDP_Handler+0x3b8>)
  405848:	4a1a      	ldr	r2, [pc, #104]	; (4058b4 <UDP_Handler+0x3b0>)
  40584a:	880b      	ldrh	r3, [r1, #0]
  40584c:	8810      	ldrh	r0, [r2, #0]
  40584e:	4403      	add	r3, r0
  405850:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  405852:	2300      	movs	r3, #0
  405854:	8013      	strh	r3, [r2, #0]
  405856:	e7cb      	b.n	4057f0 <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  405858:	4b19      	ldr	r3, [pc, #100]	; (4058c0 <UDP_Handler+0x3bc>)
  40585a:	4798      	blx	r3
			udd_ack_bank0_received(0);
  40585c:	4a13      	ldr	r2, [pc, #76]	; (4058ac <UDP_Handler+0x3a8>)
  40585e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405860:	9309      	str	r3, [sp, #36]	; 0x24
  405862:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405864:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405868:	9309      	str	r3, [sp, #36]	; 0x24
  40586a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40586c:	f023 0302 	bic.w	r3, r3, #2
  405870:	9309      	str	r3, [sp, #36]	; 0x24
  405872:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405874:	6313      	str	r3, [r2, #48]	; 0x30
  405876:	4613      	mov	r3, r2
  405878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40587a:	f012 0f02 	tst.w	r2, #2
  40587e:	d1fb      	bne.n	405878 <UDP_Handler+0x374>
  405880:	e68d      	b.n	40559e <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  405882:	4b0f      	ldr	r3, [pc, #60]	; (4058c0 <UDP_Handler+0x3bc>)
  405884:	4798      	blx	r3
			udd_ack_bank0_received(0);
  405886:	4a09      	ldr	r2, [pc, #36]	; (4058ac <UDP_Handler+0x3a8>)
  405888:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40588a:	930a      	str	r3, [sp, #40]	; 0x28
  40588c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40588e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405892:	930a      	str	r3, [sp, #40]	; 0x28
  405894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405896:	f023 0302 	bic.w	r3, r3, #2
  40589a:	930a      	str	r3, [sp, #40]	; 0x28
  40589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40589e:	6313      	str	r3, [r2, #48]	; 0x30
  4058a0:	4613      	mov	r3, r2
  4058a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4058a4:	f012 0f02 	tst.w	r2, #2
  4058a8:	d1fb      	bne.n	4058a2 <UDP_Handler+0x39e>
  4058aa:	e678      	b.n	40559e <UDP_Handler+0x9a>
  4058ac:	40044000 	.word	0x40044000
  4058b0:	20003014 	.word	0x20003014
  4058b4:	20000da0 	.word	0x20000da0
  4058b8:	0040503d 	.word	0x0040503d
  4058bc:	20000da2 	.word	0x20000da2
  4058c0:	00405005 	.word	0x00405005
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4058c4:	4b97      	ldr	r3, [pc, #604]	; (405b24 <UDP_Handler+0x620>)
  4058c6:	699b      	ldr	r3, [r3, #24]
  4058c8:	f013 0f02 	tst.w	r3, #2
  4058cc:	d011      	beq.n	4058f2 <UDP_Handler+0x3ee>

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4058ce:	4b96      	ldr	r3, [pc, #600]	; (405b28 <UDP_Handler+0x624>)
  4058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058d2:	f013 0f42 	tst.w	r3, #66	; 0x42
  4058d6:	f040 80c9 	bne.w	405a6c <UDP_Handler+0x568>
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4058da:	4b93      	ldr	r3, [pc, #588]	; (405b28 <UDP_Handler+0x624>)
  4058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058de:	f013 0f01 	tst.w	r3, #1
  4058e2:	f040 8133 	bne.w	405b4c <UDP_Handler+0x648>
				udd_ack_in_sent(ep);
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4058e6:	4b90      	ldr	r3, [pc, #576]	; (405b28 <UDP_Handler+0x624>)
  4058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058ea:	f013 0f08 	tst.w	r3, #8
  4058ee:	f040 827b 	bne.w	405de8 <UDP_Handler+0x8e4>
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4058f2:	4b8c      	ldr	r3, [pc, #560]	; (405b24 <UDP_Handler+0x620>)
  4058f4:	699b      	ldr	r3, [r3, #24]
  4058f6:	f013 0f04 	tst.w	r3, #4
  4058fa:	d013      	beq.n	405924 <UDP_Handler+0x420>
		if (Is_udd_any_bank_received(ep)) {
  4058fc:	4b8b      	ldr	r3, [pc, #556]	; (405b2c <UDP_Handler+0x628>)
  4058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405900:	f013 0f42 	tst.w	r3, #66	; 0x42
  405904:	f040 80a9 	bne.w	405a5a <UDP_Handler+0x556>
		if (Is_udd_in_sent(ep)) {
  405908:	4b88      	ldr	r3, [pc, #544]	; (405b2c <UDP_Handler+0x628>)
  40590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40590c:	f013 0f01 	tst.w	r3, #1
  405910:	f040 8101 	bne.w	405b16 <UDP_Handler+0x612>
		if (Is_udd_stall(ep)) {
  405914:	4b85      	ldr	r3, [pc, #532]	; (405b2c <UDP_Handler+0x628>)
  405916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405918:	f013 0f08 	tst.w	r3, #8
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40591c:	bf18      	it	ne
  40591e:	2302      	movne	r3, #2
		if (Is_udd_stall(ep)) {
  405920:	f040 8263 	bne.w	405dea <UDP_Handler+0x8e6>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  405924:	4b7f      	ldr	r3, [pc, #508]	; (405b24 <UDP_Handler+0x620>)
  405926:	699b      	ldr	r3, [r3, #24]
  405928:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40592c:	d005      	beq.n	40593a <UDP_Handler+0x436>
  40592e:	4b7d      	ldr	r3, [pc, #500]	; (405b24 <UDP_Handler+0x620>)
  405930:	69db      	ldr	r3, [r3, #28]
  405932:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  405936:	f040 8277 	bne.w	405e28 <UDP_Handler+0x924>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40593a:	4b7a      	ldr	r3, [pc, #488]	; (405b24 <UDP_Handler+0x620>)
  40593c:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40593e:	f413 7f00 	tst.w	r3, #512	; 0x200
  405942:	d005      	beq.n	405950 <UDP_Handler+0x44c>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  405944:	4b77      	ldr	r3, [pc, #476]	; (405b24 <UDP_Handler+0x620>)
  405946:	69db      	ldr	r3, [r3, #28]
  405948:	f413 7f00 	tst.w	r3, #512	; 0x200
  40594c:	f040 826c 	bne.w	405e28 <UDP_Handler+0x924>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  405950:	4b74      	ldr	r3, [pc, #464]	; (405b24 <UDP_Handler+0x620>)
  405952:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  405954:	f413 6f80 	tst.w	r3, #1024	; 0x400
  405958:	d005      	beq.n	405966 <UDP_Handler+0x462>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  40595a:	4b72      	ldr	r3, [pc, #456]	; (405b24 <UDP_Handler+0x620>)
  40595c:	69db      	ldr	r3, [r3, #28]
  40595e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  405962:	f040 8261 	bne.w	405e28 <UDP_Handler+0x924>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  405966:	4b6f      	ldr	r3, [pc, #444]	; (405b24 <UDP_Handler+0x620>)
  405968:	699b      	ldr	r3, [r3, #24]
  40596a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40596e:	d005      	beq.n	40597c <UDP_Handler+0x478>
  405970:	4b6c      	ldr	r3, [pc, #432]	; (405b24 <UDP_Handler+0x620>)
  405972:	69db      	ldr	r3, [r3, #28]
  405974:	f413 7f80 	tst.w	r3, #256	; 0x100
  405978:	f040 8269 	bne.w	405e4e <UDP_Handler+0x94a>
	if (Is_udd_reset()) {
  40597c:	4b69      	ldr	r3, [pc, #420]	; (405b24 <UDP_Handler+0x620>)
  40597e:	69db      	ldr	r3, [r3, #28]
  405980:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  405984:	f43f ae0b 	beq.w	40559e <UDP_Handler+0x9a>
		udd_ack_reset();
  405988:	4c66      	ldr	r4, [pc, #408]	; (405b24 <UDP_Handler+0x620>)
  40598a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40598e:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  405990:	4e67      	ldr	r6, [pc, #412]	; (405b30 <UDP_Handler+0x62c>)
  405992:	2201      	movs	r2, #1
  405994:	4611      	mov	r1, r2
  405996:	4630      	mov	r0, r6
  405998:	4d66      	ldr	r5, [pc, #408]	; (405b34 <UDP_Handler+0x630>)
  40599a:	47a8      	blx	r5
  40599c:	2202      	movs	r2, #2
  40599e:	2101      	movs	r1, #1
  4059a0:	f106 0014 	add.w	r0, r6, #20
  4059a4:	47a8      	blx	r5
		udc_reset();
  4059a6:	4b64      	ldr	r3, [pc, #400]	; (405b38 <UDP_Handler+0x634>)
  4059a8:	4798      	blx	r3
		udd_disable_address_state();
  4059aa:	6863      	ldr	r3, [r4, #4]
  4059ac:	f023 0301 	bic.w	r3, r3, #1
  4059b0:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  4059b2:	6863      	ldr	r3, [r4, #4]
  4059b4:	f023 0302 	bic.w	r3, r3, #2
  4059b8:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  4059ba:	68a3      	ldr	r3, [r4, #8]
  4059bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4059c0:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  4059c2:	68a3      	ldr	r3, [r4, #8]
  4059c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4059c8:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  4059ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4059cc:	9318      	str	r3, [sp, #96]	; 0x60
  4059ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4059d0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4059d4:	9318      	str	r3, [sp, #96]	; 0x60
  4059d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4059d8:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  4059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4059e0:	9318      	str	r3, [sp, #96]	; 0x60
  4059e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4059e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4059e8:	9318      	str	r3, [sp, #96]	; 0x60
  4059ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4059ec:	6323      	str	r3, [r4, #48]	; 0x30
  4059ee:	4622      	mov	r2, r4
  4059f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4059f2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4059f6:	d0fb      	beq.n	4059f0 <UDP_Handler+0x4ec>
	udd_enable_endpoint(0);
  4059f8:	4a4a      	ldr	r2, [pc, #296]	; (405b24 <UDP_Handler+0x620>)
  4059fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4059fc:	9319      	str	r3, [sp, #100]	; 0x64
  4059fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405a00:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405a04:	9319      	str	r3, [sp, #100]	; 0x64
  405a06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  405a0c:	9319      	str	r3, [sp, #100]	; 0x64
  405a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405a10:	6313      	str	r3, [r2, #48]	; 0x30
  405a12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405a14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  405a18:	d0fb      	beq.n	405a12 <UDP_Handler+0x50e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405a1a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405a1e:	fab3 f383 	clz	r3, r3
  405a22:	095b      	lsrs	r3, r3, #5
  405a24:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  405a26:	b672      	cpsid	i
  405a28:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405a2c:	2200      	movs	r2, #0
  405a2e:	4b43      	ldr	r3, [pc, #268]	; (405b3c <UDP_Handler+0x638>)
  405a30:	701a      	strb	r2, [r3, #0]
	return flags;
  405a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  405a34:	2101      	movs	r1, #1
  405a36:	4a3b      	ldr	r2, [pc, #236]	; (405b24 <UDP_Handler+0x620>)
  405a38:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  405a3a:	b123      	cbz	r3, 405a46 <UDP_Handler+0x542>
		cpu_irq_enable();
  405a3c:	4b3f      	ldr	r3, [pc, #252]	; (405b3c <UDP_Handler+0x638>)
  405a3e:	7019      	strb	r1, [r3, #0]
  405a40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405a44:	b662      	cpsie	i
		udd_ctrl_init();
  405a46:	4b3e      	ldr	r3, [pc, #248]	; (405b40 <UDP_Handler+0x63c>)
  405a48:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  405a4a:	4b36      	ldr	r3, [pc, #216]	; (405b24 <UDP_Handler+0x620>)
  405a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
  405a50:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  405a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405a56:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  405a58:	e5a1      	b.n	40559e <UDP_Handler+0x9a>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  405a5a:	f04f 0802 	mov.w	r8, #2
		ptr_job = &udd_ep_job[ep - 1];
  405a5e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 405b48 <UDP_Handler+0x644>
  405a62:	2501      	movs	r5, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  405a64:	f04f 0a04 	mov.w	sl, #4
  405a68:	4644      	mov	r4, r8
  405a6a:	e007      	b.n	405a7c <UDP_Handler+0x578>
		if (Is_udd_any_bank_received(ep)) {
  405a6c:	f04f 0801 	mov.w	r8, #1
		ptr_job = &udd_ep_job[ep - 1];
  405a70:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 405b30 <UDP_Handler+0x62c>
  405a74:	2500      	movs	r5, #0
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  405a76:	f04f 0a02 	mov.w	sl, #2
  405a7a:	4644      	mov	r4, r8
	uint32_t pkt_size = ptr_job->size;
  405a7c:	00ab      	lsls	r3, r5, #2
  405a7e:	195a      	adds	r2, r3, r5
  405a80:	4b2b      	ldr	r3, [pc, #172]	; (405b30 <UDP_Handler+0x62c>)
  405a82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  405a86:	8a1f      	ldrh	r7, [r3, #16]
  405a88:	f3c7 0709 	ubfx	r7, r7, #0, #10
  405a8c:	00a4      	lsls	r4, r4, #2
  405a8e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  405a92:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
	nb_data = udd_byte_count(ep);
  405a96:	6b26      	ldr	r6, [r4, #48]	; 0x30
  405a98:	f3c6 460a 	ubfx	r6, r6, #16, #11
	if (nb_data > 0) {
  405a9c:	2e00      	cmp	r6, #0
  405a9e:	f000 81ff 	beq.w	405ea0 <UDP_Handler+0x99c>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  405aa2:	4b23      	ldr	r3, [pc, #140]	; (405b30 <UDP_Handler+0x62c>)
  405aa4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  405aa8:	f8d3 e008 	ldr.w	lr, [r3, #8]
  405aac:	68da      	ldr	r2, [r3, #12]
  405aae:	ebae 0102 	sub.w	r1, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  405ab2:	6858      	ldr	r0, [r3, #4]
		if (nb_data >= nb_remain) {
  405ab4:	42b1      	cmp	r1, r6
  405ab6:	f240 81e6 	bls.w	405e86 <UDP_Handler+0x982>
		ptr_job->buf_cnt += nb_data;
  405aba:	00ab      	lsls	r3, r5, #2
  405abc:	1959      	adds	r1, r3, r5
  405abe:	4b1c      	ldr	r3, [pc, #112]	; (405b30 <UDP_Handler+0x62c>)
  405ac0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  405ac4:	1991      	adds	r1, r2, r6
  405ac6:	60d9      	str	r1, [r3, #12]
	nb_data = udd_byte_count(ep);
  405ac8:	4631      	mov	r1, r6
	bool b_full = false, b_short;
  405aca:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  405ace:	4410      	add	r0, r2
  405ad0:	4603      	mov	r3, r0
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  405ad2:	6d22      	ldr	r2, [r4, #80]	; 0x50
  405ad4:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  405ad8:	1a1a      	subs	r2, r3, r0
  405ada:	428a      	cmp	r2, r1
  405adc:	d3f9      	bcc.n	405ad2 <UDP_Handler+0x5ce>
	udd_ep_ack_out_received(ep);
  405ade:	4640      	mov	r0, r8
  405ae0:	4b18      	ldr	r3, [pc, #96]	; (405b44 <UDP_Handler+0x640>)
  405ae2:	4798      	blx	r3
	if ((b_full || b_short) &&
  405ae4:	f1bb 0f00 	cmp.w	fp, #0
  405ae8:	f000 81dd 	beq.w	405ea6 <UDP_Handler+0x9a2>
			!Is_udd_endpoint_stall_requested(ep)) {
  405aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  405aee:	f013 0f20 	tst.w	r3, #32
  405af2:	f47f ad54 	bne.w	40559e <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  405af6:	4b0b      	ldr	r3, [pc, #44]	; (405b24 <UDP_Handler+0x620>)
  405af8:	f8c3 a014 	str.w	sl, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  405afc:	4b0c      	ldr	r3, [pc, #48]	; (405b30 <UDP_Handler+0x62c>)
  405afe:	00aa      	lsls	r2, r5, #2
  405b00:	1951      	adds	r1, r2, r5
  405b02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  405b06:	68cb      	ldr	r3, [r1, #12]
  405b08:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  405b0a:	4642      	mov	r2, r8
  405b0c:	2100      	movs	r1, #0
  405b0e:	4648      	mov	r0, r9
  405b10:	4b08      	ldr	r3, [pc, #32]	; (405b34 <UDP_Handler+0x630>)
  405b12:	4798      	blx	r3
  405b14:	e543      	b.n	40559e <UDP_Handler+0x9a>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  405b16:	2602      	movs	r6, #2
		ptr_job = &udd_ep_job[ep - 1];
  405b18:	f8df 802c 	ldr.w	r8, [pc, #44]	; 405b48 <UDP_Handler+0x644>
  405b1c:	2501      	movs	r5, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  405b1e:	2704      	movs	r7, #4
  405b20:	4634      	mov	r4, r6
  405b22:	e019      	b.n	405b58 <UDP_Handler+0x654>
  405b24:	40044000 	.word	0x40044000
  405b28:	40044004 	.word	0x40044004
  405b2c:	40044008 	.word	0x40044008
  405b30:	20000da8 	.word	0x20000da8
  405b34:	0040523d 	.word	0x0040523d
  405b38:	00403a19 	.word	0x00403a19
  405b3c:	200001a5 	.word	0x200001a5
  405b40:	00404fed 	.word	0x00404fed
  405b44:	0040527d 	.word	0x0040527d
  405b48:	20000dbc 	.word	0x20000dbc
		if (Is_udd_in_sent(ep)) {
  405b4c:	2601      	movs	r6, #1
		ptr_job = &udd_ep_job[ep - 1];
  405b4e:	f8df 8284 	ldr.w	r8, [pc, #644]	; 405dd4 <UDP_Handler+0x8d0>
  405b52:	2500      	movs	r5, #0
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  405b54:	2702      	movs	r7, #2
  405b56:	4634      	mov	r4, r6
			ptr_job->bank--;
  405b58:	00ab      	lsls	r3, r5, #2
  405b5a:	442b      	add	r3, r5
  405b5c:	4a9d      	ldr	r2, [pc, #628]	; (405dd4 <UDP_Handler+0x8d0>)
  405b5e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  405b62:	7c53      	ldrb	r3, [r2, #17]
  405b64:	f3c3 0181 	ubfx	r1, r3, #2, #2
  405b68:	3103      	adds	r1, #3
  405b6a:	f361 0383 	bfi	r3, r1, #2, #2
  405b6e:	7453      	strb	r3, [r2, #17]
			if (ptr_job->b_stall_requested) {
  405b70:	7c53      	ldrb	r3, [r2, #17]
  405b72:	f013 0f20 	tst.w	r3, #32
  405b76:	d057      	beq.n	405c28 <UDP_Handler+0x724>
				if (ptr_job->bank) {
  405b78:	f013 0f0c 	tst.w	r3, #12
  405b7c:	d025      	beq.n	405bca <UDP_Handler+0x6c6>
  405b7e:	00a3      	lsls	r3, r4, #2
  405b80:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  405b84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
					udd_set_transmit_ready(ep);
  405b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405b8a:	920c      	str	r2, [sp, #48]	; 0x30
  405b8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405b8e:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405b92:	920c      	str	r2, [sp, #48]	; 0x30
  405b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405b96:	f042 0210 	orr.w	r2, r2, #16
  405b9a:	920c      	str	r2, [sp, #48]	; 0x30
  405b9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405b9e:	631a      	str	r2, [r3, #48]	; 0x30
  405ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405ba2:	f012 0f10 	tst.w	r2, #16
  405ba6:	d0fb      	beq.n	405ba0 <UDP_Handler+0x69c>
					udd_ack_in_sent(ep);
  405ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405baa:	920d      	str	r2, [sp, #52]	; 0x34
  405bac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405bae:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405bb2:	920d      	str	r2, [sp, #52]	; 0x34
  405bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405bb6:	f022 0201 	bic.w	r2, r2, #1
  405bba:	920d      	str	r2, [sp, #52]	; 0x34
  405bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405bbe:	631a      	str	r2, [r3, #48]	; 0x30
  405bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405bc2:	f012 0f01 	tst.w	r2, #1
  405bc6:	d1fb      	bne.n	405bc0 <UDP_Handler+0x6bc>
  405bc8:	e4e9      	b.n	40559e <UDP_Handler+0x9a>
  405bca:	00a3      	lsls	r3, r4, #2
  405bcc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  405bd0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
					udd_ack_in_sent(ep);
  405bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405bd6:	920e      	str	r2, [sp, #56]	; 0x38
  405bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405bda:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405bde:	920e      	str	r2, [sp, #56]	; 0x38
  405be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405be2:	f022 0201 	bic.w	r2, r2, #1
  405be6:	920e      	str	r2, [sp, #56]	; 0x38
  405be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405bea:	631a      	str	r2, [r3, #48]	; 0x30
  405bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405bee:	f012 0f01 	tst.w	r2, #1
  405bf2:	d1fb      	bne.n	405bec <UDP_Handler+0x6e8>
					udd_enable_stall_handshake(ep);
  405bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405bf6:	920f      	str	r2, [sp, #60]	; 0x3c
  405bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405bfa:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405bfe:	920f      	str	r2, [sp, #60]	; 0x3c
  405c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c02:	f042 0220 	orr.w	r2, r2, #32
  405c06:	920f      	str	r2, [sp, #60]	; 0x3c
  405c08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c0a:	631a      	str	r2, [r3, #48]	; 0x30
  405c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405c0e:	f012 0f20 	tst.w	r2, #32
  405c12:	d0fb      	beq.n	405c0c <UDP_Handler+0x708>
					ptr_job->b_stall_requested = false;
  405c14:	00ab      	lsls	r3, r5, #2
  405c16:	441d      	add	r5, r3
  405c18:	4b6e      	ldr	r3, [pc, #440]	; (405dd4 <UDP_Handler+0x8d0>)
  405c1a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  405c1e:	7c5a      	ldrb	r2, [r3, #17]
  405c20:	f36f 1245 	bfc	r2, #5, #1
  405c24:	745a      	strb	r2, [r3, #17]
  405c26:	e4ba      	b.n	40559e <UDP_Handler+0x9a>
			if (ptr_job->b_buf_end) {
  405c28:	f013 0f80 	tst.w	r3, #128	; 0x80
  405c2c:	d13d      	bne.n	405caa <UDP_Handler+0x7a6>
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  405c2e:	00ab      	lsls	r3, r5, #2
  405c30:	195a      	adds	r2, r3, r5
  405c32:	4b68      	ldr	r3, [pc, #416]	; (405dd4 <UDP_Handler+0x8d0>)
  405c34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  405c38:	68da      	ldr	r2, [r3, #12]
  405c3a:	689b      	ldr	r3, [r3, #8]
  405c3c:	429a      	cmp	r2, r3
  405c3e:	d346      	bcc.n	405cce <UDP_Handler+0x7ca>
					!ptr_job->b_shortpacket &&
  405c40:	00ab      	lsls	r3, r5, #2
  405c42:	195a      	adds	r2, r3, r5
  405c44:	4b63      	ldr	r3, [pc, #396]	; (405dd4 <UDP_Handler+0x8d0>)
  405c46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  405c4a:	7c5b      	ldrb	r3, [r3, #17]
  405c4c:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  405c50:	d13d      	bne.n	405cce <UDP_Handler+0x7ca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405c52:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405c56:	fab3 f383 	clz	r3, r3
  405c5a:	095b      	lsrs	r3, r3, #5
  405c5c:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  405c5e:	b672      	cpsid	i
  405c60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405c64:	2200      	movs	r2, #0
  405c66:	4b5c      	ldr	r3, [pc, #368]	; (405dd8 <UDP_Handler+0x8d4>)
  405c68:	701a      	strb	r2, [r3, #0]
	return flags;
  405c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
				udd_disable_endpoint_interrupt(ep);
  405c6c:	4a5b      	ldr	r2, [pc, #364]	; (405ddc <UDP_Handler+0x8d8>)
  405c6e:	6157      	str	r7, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  405c70:	b12b      	cbz	r3, 405c7e <UDP_Handler+0x77a>
		cpu_irq_enable();
  405c72:	2201      	movs	r2, #1
  405c74:	4b58      	ldr	r3, [pc, #352]	; (405dd8 <UDP_Handler+0x8d4>)
  405c76:	701a      	strb	r2, [r3, #0]
  405c78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405c7c:	b662      	cpsie	i
  405c7e:	00a3      	lsls	r3, r4, #2
  405c80:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  405c84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
				udd_ack_in_sent(ep);
  405c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405c8a:	9211      	str	r2, [sp, #68]	; 0x44
  405c8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c8e:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405c92:	9211      	str	r2, [sp, #68]	; 0x44
  405c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c96:	f022 0201 	bic.w	r2, r2, #1
  405c9a:	9211      	str	r2, [sp, #68]	; 0x44
  405c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c9e:	631a      	str	r2, [r3, #48]	; 0x30
  405ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405ca2:	f012 0f01 	tst.w	r2, #1
  405ca6:	d1fb      	bne.n	405ca0 <UDP_Handler+0x79c>
  405ca8:	e479      	b.n	40559e <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  405caa:	2314      	movs	r3, #20
  405cac:	4a49      	ldr	r2, [pc, #292]	; (405dd4 <UDP_Handler+0x8d0>)
  405cae:	fb03 2305 	mla	r3, r3, r5, r2
  405cb2:	7c59      	ldrb	r1, [r3, #17]
  405cb4:	f36f 11c7 	bfc	r1, #7, #1
  405cb8:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  405cba:	68da      	ldr	r2, [r3, #12]
  405cbc:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  405cbe:	4b47      	ldr	r3, [pc, #284]	; (405ddc <UDP_Handler+0x8d8>)
  405cc0:	615f      	str	r7, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  405cc2:	4632      	mov	r2, r6
  405cc4:	2100      	movs	r1, #0
  405cc6:	4640      	mov	r0, r8
  405cc8:	4b45      	ldr	r3, [pc, #276]	; (405de0 <UDP_Handler+0x8dc>)
  405cca:	4798      	blx	r3
  405ccc:	e7af      	b.n	405c2e <UDP_Handler+0x72a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  405cce:	2e00      	cmp	r6, #0
  405cd0:	d064      	beq.n	405d9c <UDP_Handler+0x898>
  405cd2:	2e03      	cmp	r6, #3
  405cd4:	d062      	beq.n	405d9c <UDP_Handler+0x898>
					&& ptr_job->bank > 0) {
  405cd6:	2314      	movs	r3, #20
  405cd8:	4a3e      	ldr	r2, [pc, #248]	; (405dd4 <UDP_Handler+0x8d0>)
  405cda:	fb03 2305 	mla	r3, r3, r5, r2
  405cde:	7c5b      	ldrb	r3, [r3, #17]
  405ce0:	f013 0f0c 	tst.w	r3, #12
  405ce4:	d029      	beq.n	405d3a <UDP_Handler+0x836>
  405ce6:	00a3      	lsls	r3, r4, #2
  405ce8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  405cec:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
				udd_set_transmit_ready(ep);
  405cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405cf2:	9212      	str	r2, [sp, #72]	; 0x48
  405cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405cf6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405cfa:	9212      	str	r2, [sp, #72]	; 0x48
  405cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405cfe:	f042 0210 	orr.w	r2, r2, #16
  405d02:	9212      	str	r2, [sp, #72]	; 0x48
  405d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d06:	631a      	str	r2, [r3, #48]	; 0x30
  405d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405d0a:	f012 0f10 	tst.w	r2, #16
  405d0e:	d0fb      	beq.n	405d08 <UDP_Handler+0x804>
				udd_ack_in_sent(ep);
  405d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405d12:	9213      	str	r2, [sp, #76]	; 0x4c
  405d14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405d16:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405d1a:	9213      	str	r2, [sp, #76]	; 0x4c
  405d1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405d1e:	f022 0201 	bic.w	r2, r2, #1
  405d22:	9213      	str	r2, [sp, #76]	; 0x4c
  405d24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405d26:	631a      	str	r2, [r3, #48]	; 0x30
  405d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405d2a:	f012 0f01 	tst.w	r2, #1
  405d2e:	d1fb      	bne.n	405d28 <UDP_Handler+0x824>
				udd_ep_in_sent(ep, false);
  405d30:	2100      	movs	r1, #0
  405d32:	4630      	mov	r0, r6
  405d34:	4b2b      	ldr	r3, [pc, #172]	; (405de4 <UDP_Handler+0x8e0>)
  405d36:	4798      	blx	r3
  405d38:	e431      	b.n	40559e <UDP_Handler+0x9a>
				if (!udd_ep_in_sent(ep, true)) {
  405d3a:	2101      	movs	r1, #1
  405d3c:	4630      	mov	r0, r6
  405d3e:	4b29      	ldr	r3, [pc, #164]	; (405de4 <UDP_Handler+0x8e0>)
  405d40:	4798      	blx	r3
  405d42:	b1c8      	cbz	r0, 405d78 <UDP_Handler+0x874>
  405d44:	00a3      	lsls	r3, r4, #2
  405d46:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  405d4a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
				udd_ack_in_sent(ep);
  405d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405d50:	9214      	str	r2, [sp, #80]	; 0x50
  405d52:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405d54:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405d58:	9214      	str	r2, [sp, #80]	; 0x50
  405d5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405d5c:	f022 0201 	bic.w	r2, r2, #1
  405d60:	9214      	str	r2, [sp, #80]	; 0x50
  405d62:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405d64:	631a      	str	r2, [r3, #48]	; 0x30
  405d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405d68:	f012 0f01 	tst.w	r2, #1
  405d6c:	d1fb      	bne.n	405d66 <UDP_Handler+0x862>
				udd_ep_in_sent(ep, false);
  405d6e:	2100      	movs	r1, #0
  405d70:	4630      	mov	r0, r6
  405d72:	4b1c      	ldr	r3, [pc, #112]	; (405de4 <UDP_Handler+0x8e0>)
  405d74:	4798      	blx	r3
  405d76:	e412      	b.n	40559e <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  405d78:	2214      	movs	r2, #20
  405d7a:	4b16      	ldr	r3, [pc, #88]	; (405dd4 <UDP_Handler+0x8d0>)
  405d7c:	fb02 3305 	mla	r3, r2, r5, r3
  405d80:	7c59      	ldrb	r1, [r3, #17]
  405d82:	f36f 11c7 	bfc	r1, #7, #1
  405d86:	7459      	strb	r1, [r3, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  405d88:	68da      	ldr	r2, [r3, #12]
  405d8a:	609a      	str	r2, [r3, #8]
                    udd_disable_endpoint_interrupt(ep);
  405d8c:	4b13      	ldr	r3, [pc, #76]	; (405ddc <UDP_Handler+0x8d8>)
  405d8e:	615f      	str	r7, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  405d90:	4632      	mov	r2, r6
  405d92:	2100      	movs	r1, #0
  405d94:	4640      	mov	r0, r8
  405d96:	4b12      	ldr	r3, [pc, #72]	; (405de0 <UDP_Handler+0x8dc>)
  405d98:	4798      	blx	r3
  405d9a:	e7d3      	b.n	405d44 <UDP_Handler+0x840>
				udd_ep_in_sent(ep, true);
  405d9c:	2101      	movs	r1, #1
  405d9e:	4630      	mov	r0, r6
  405da0:	4b10      	ldr	r3, [pc, #64]	; (405de4 <UDP_Handler+0x8e0>)
  405da2:	4798      	blx	r3
  405da4:	00a3      	lsls	r3, r4, #2
  405da6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  405daa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
				udd_ack_in_sent(ep);
  405dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405db0:	9215      	str	r2, [sp, #84]	; 0x54
  405db2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405db4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  405db8:	9215      	str	r2, [sp, #84]	; 0x54
  405dba:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405dbc:	f022 0201 	bic.w	r2, r2, #1
  405dc0:	9215      	str	r2, [sp, #84]	; 0x54
  405dc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405dc4:	631a      	str	r2, [r3, #48]	; 0x30
  405dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405dc8:	f012 0f01 	tst.w	r2, #1
  405dcc:	d1fb      	bne.n	405dc6 <UDP_Handler+0x8c2>
  405dce:	f7ff bbe6 	b.w	40559e <UDP_Handler+0x9a>
  405dd2:	bf00      	nop
  405dd4:	20000da8 	.word	0x20000da8
  405dd8:	200001a5 	.word	0x200001a5
  405ddc:	40044000 	.word	0x40044000
  405de0:	0040523d 	.word	0x0040523d
  405de4:	00405351 	.word	0x00405351
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  405de8:	2301      	movs	r3, #1
  405dea:	009b      	lsls	r3, r3, #2
  405dec:	f103 2240 	add.w	r2, r3, #1073758208	; 0x40004000
  405df0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
			udd_ack_stall(ep);
  405df4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405df6:	9316      	str	r3, [sp, #88]	; 0x58
  405df8:	9b16      	ldr	r3, [sp, #88]	; 0x58
  405dfa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405dfe:	9316      	str	r3, [sp, #88]	; 0x58
  405e00:	9b16      	ldr	r3, [sp, #88]	; 0x58
  405e02:	f023 0308 	bic.w	r3, r3, #8
  405e06:	9316      	str	r3, [sp, #88]	; 0x58
  405e08:	9b16      	ldr	r3, [sp, #88]	; 0x58
  405e0a:	6313      	str	r3, [r2, #48]	; 0x30
  405e0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405e0e:	f013 0f08 	tst.w	r3, #8
  405e12:	d1fb      	bne.n	405e0c <UDP_Handler+0x908>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  405e14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  405e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405e1e:	f43f abbe 	beq.w	40559e <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  405e22:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405e24:	f7ff bbbb 	b.w	40559e <UDP_Handler+0x9a>
		udd_ack_wakeups();
  405e28:	4c21      	ldr	r4, [pc, #132]	; (405eb0 <UDP_Handler+0x9ac>)
  405e2a:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  405e2e:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  405e30:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  405e32:	2001      	movs	r0, #1
  405e34:	4b1f      	ldr	r3, [pc, #124]	; (405eb4 <UDP_Handler+0x9b0>)
  405e36:	4798      	blx	r3
		UDC_RESUME_EVENT();
  405e38:	4b1f      	ldr	r3, [pc, #124]	; (405eb8 <UDP_Handler+0x9b4>)
  405e3a:	4798      	blx	r3
		udd_ack_suspend();
  405e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
  405e40:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  405e42:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  405e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405e48:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  405e4a:	f7ff bba8 	b.w	40559e <UDP_Handler+0x9a>
		udd_ack_suspend();
  405e4e:	4b18      	ldr	r3, [pc, #96]	; (405eb0 <UDP_Handler+0x9ac>)
  405e50:	f44f 7280 	mov.w	r2, #256	; 0x100
  405e54:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  405e56:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  405e58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  405e5c:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  405e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
  405e62:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  405e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405e68:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  405e6a:	2030      	movs	r0, #48	; 0x30
  405e6c:	4b13      	ldr	r3, [pc, #76]	; (405ebc <UDP_Handler+0x9b8>)
  405e6e:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  405e70:	2000      	movs	r0, #0
  405e72:	4b10      	ldr	r3, [pc, #64]	; (405eb4 <UDP_Handler+0x9b0>)
  405e74:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  405e76:	4b12      	ldr	r3, [pc, #72]	; (405ec0 <UDP_Handler+0x9bc>)
  405e78:	4798      	blx	r3
		goto udd_interrupt_end;
  405e7a:	f7ff bb90 	b.w	40559e <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  405e7e:	4640      	mov	r0, r8
  405e80:	4b10      	ldr	r3, [pc, #64]	; (405ec4 <UDP_Handler+0x9c0>)
  405e82:	4798      	blx	r3
  405e84:	e632      	b.n	405aec <UDP_Handler+0x5e8>
		ptr_job->buf_cnt += nb_data;
  405e86:	00ab      	lsls	r3, r5, #2
  405e88:	eb03 0c05 	add.w	ip, r3, r5
  405e8c:	4b0e      	ldr	r3, [pc, #56]	; (405ec8 <UDP_Handler+0x9c4>)
  405e8e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  405e92:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  405e96:	2900      	cmp	r1, #0
  405e98:	d0f1      	beq.n	405e7e <UDP_Handler+0x97a>
			b_full = true;
  405e9a:	f04f 0b01 	mov.w	fp, #1
  405e9e:	e616      	b.n	405ace <UDP_Handler+0x5ca>
	udd_ep_ack_out_received(ep);
  405ea0:	4640      	mov	r0, r8
  405ea2:	4b08      	ldr	r3, [pc, #32]	; (405ec4 <UDP_Handler+0x9c0>)
  405ea4:	4798      	blx	r3
	if ((b_full || b_short) &&
  405ea6:	42b7      	cmp	r7, r6
  405ea8:	f63f ae20 	bhi.w	405aec <UDP_Handler+0x5e8>
  405eac:	f7ff bb77 	b.w	40559e <UDP_Handler+0x9a>
  405eb0:	40044000 	.word	0x40044000
  405eb4:	00404f49 	.word	0x00404f49
  405eb8:	0040b083 	.word	0x0040b083
  405ebc:	004047c5 	.word	0x004047c5
  405ec0:	0040b081 	.word	0x0040b081
  405ec4:	0040527d 	.word	0x0040527d
  405ec8:	20000da8 	.word	0x20000da8

00405ecc <udd_attach>:
{
  405ecc:	b510      	push	{r4, lr}
  405ece:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405ed0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405ed4:	fab3 f383 	clz	r3, r3
  405ed8:	095b      	lsrs	r3, r3, #5
  405eda:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  405edc:	b672      	cpsid	i
  405ede:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405ee2:	2200      	movs	r2, #0
  405ee4:	4b14      	ldr	r3, [pc, #80]	; (405f38 <udd_attach+0x6c>)
  405ee6:	701a      	strb	r2, [r3, #0]
	return flags;
  405ee8:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  405eea:	2001      	movs	r0, #1
  405eec:	4b13      	ldr	r3, [pc, #76]	; (405f3c <udd_attach+0x70>)
  405eee:	4798      	blx	r3
	udd_enable_periph_ck();
  405ef0:	2030      	movs	r0, #48	; 0x30
  405ef2:	4b13      	ldr	r3, [pc, #76]	; (405f40 <udd_attach+0x74>)
  405ef4:	4798      	blx	r3
	udd_enable_transceiver();
  405ef6:	4b13      	ldr	r3, [pc, #76]	; (405f44 <udd_attach+0x78>)
  405ef8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  405efe:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  405f00:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  405f06:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  405f08:	f44f 7280 	mov.w	r2, #256	; 0x100
  405f0c:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  405f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  405f12:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  405f14:	f44f 7200 	mov.w	r2, #512	; 0x200
  405f18:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  405f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405f1e:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  405f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405f24:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  405f26:	b12c      	cbz	r4, 405f34 <udd_attach+0x68>
		cpu_irq_enable();
  405f28:	2201      	movs	r2, #1
  405f2a:	4b03      	ldr	r3, [pc, #12]	; (405f38 <udd_attach+0x6c>)
  405f2c:	701a      	strb	r2, [r3, #0]
  405f2e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405f32:	b662      	cpsie	i
}
  405f34:	b002      	add	sp, #8
  405f36:	bd10      	pop	{r4, pc}
  405f38:	200001a5 	.word	0x200001a5
  405f3c:	00404f49 	.word	0x00404f49
  405f40:	00404771 	.word	0x00404771
  405f44:	40044000 	.word	0x40044000

00405f48 <udd_enable>:
{
  405f48:	b530      	push	{r4, r5, lr}
  405f4a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405f4c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405f50:	fab3 f383 	clz	r3, r3
  405f54:	095b      	lsrs	r3, r3, #5
  405f56:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  405f58:	b672      	cpsid	i
  405f5a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405f5e:	2400      	movs	r4, #0
  405f60:	4b26      	ldr	r3, [pc, #152]	; (405ffc <udd_enable+0xb4>)
  405f62:	701c      	strb	r4, [r3, #0]
	return flags;
  405f64:	9d00      	ldr	r5, [sp, #0]
	matrix_set_usb_device();
  405f66:	4b26      	ldr	r3, [pc, #152]	; (406000 <udd_enable+0xb8>)
  405f68:	4798      	blx	r3
	udd_enable_periph_ck();
  405f6a:	2030      	movs	r0, #48	; 0x30
  405f6c:	4b25      	ldr	r3, [pc, #148]	; (406004 <udd_enable+0xbc>)
  405f6e:	4798      	blx	r3
	sysclk_enable_usb();
  405f70:	4b25      	ldr	r3, [pc, #148]	; (406008 <udd_enable+0xc0>)
  405f72:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  405f74:	4b25      	ldr	r3, [pc, #148]	; (40600c <udd_enable+0xc4>)
  405f76:	2250      	movs	r2, #80	; 0x50
  405f78:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405f7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405f80:	605a      	str	r2, [r3, #4]
		udd_ep_job[i].bank = 0;
  405f82:	4b23      	ldr	r3, [pc, #140]	; (406010 <udd_enable+0xc8>)
  405f84:	7c5a      	ldrb	r2, [r3, #17]
		udd_ep_job[i].b_buf_end = false;
  405f86:	f002 0283 	and.w	r2, r2, #131	; 0x83
  405f8a:	f364 12c7 	bfi	r2, r4, #7, #1
  405f8e:	745a      	strb	r2, [r3, #17]
		udd_ep_job[i].bank = 0;
  405f90:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
		udd_ep_job[i].b_buf_end = false;
  405f94:	f002 0283 	and.w	r2, r2, #131	; 0x83
  405f98:	f364 12c7 	bfi	r2, r4, #7, #1
  405f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  405fa0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  405fa4:	4b1b      	ldr	r3, [pc, #108]	; (406014 <udd_enable+0xcc>)
  405fa6:	4798      	blx	r3
	udd_b_idle = false;
  405fa8:	4b1b      	ldr	r3, [pc, #108]	; (406018 <udd_enable+0xd0>)
  405faa:	701c      	strb	r4, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  405fac:	4b1b      	ldr	r3, [pc, #108]	; (40601c <udd_enable+0xd4>)
  405fae:	781b      	ldrb	r3, [r3, #0]
  405fb0:	2bff      	cmp	r3, #255	; 0xff
  405fb2:	d022      	beq.n	405ffa <udd_enable+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405fb4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405fb8:	fab3 f383 	clz	r3, r3
  405fbc:	095b      	lsrs	r3, r3, #5
  405fbe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  405fc0:	b672      	cpsid	i
  405fc2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405fc6:	2200      	movs	r2, #0
  405fc8:	4b0c      	ldr	r3, [pc, #48]	; (405ffc <udd_enable+0xb4>)
  405fca:	701a      	strb	r2, [r3, #0]
	return flags;
  405fcc:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  405fce:	4a13      	ldr	r2, [pc, #76]	; (40601c <udd_enable+0xd4>)
  405fd0:	7813      	ldrb	r3, [r2, #0]
  405fd2:	3301      	adds	r3, #1
  405fd4:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  405fd6:	b129      	cbz	r1, 405fe4 <udd_enable+0x9c>
		cpu_irq_enable();
  405fd8:	2201      	movs	r2, #1
  405fda:	4b08      	ldr	r3, [pc, #32]	; (405ffc <udd_enable+0xb4>)
  405fdc:	701a      	strb	r2, [r3, #0]
  405fde:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405fe2:	b662      	cpsie	i
	udd_attach();
  405fe4:	4b0e      	ldr	r3, [pc, #56]	; (406020 <udd_enable+0xd8>)
  405fe6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  405fe8:	b12d      	cbz	r5, 405ff6 <udd_enable+0xae>
		cpu_irq_enable();
  405fea:	2201      	movs	r2, #1
  405fec:	4b03      	ldr	r3, [pc, #12]	; (405ffc <udd_enable+0xb4>)
  405fee:	701a      	strb	r2, [r3, #0]
  405ff0:	f3bf 8f5f 	dmb	sy
  405ff4:	b662      	cpsie	i
}
  405ff6:	b003      	add	sp, #12
  405ff8:	bd30      	pop	{r4, r5, pc}
  405ffa:	e7fe      	b.n	405ffa <udd_enable+0xb2>
  405ffc:	200001a5 	.word	0x200001a5
  406000:	004042f9 	.word	0x004042f9
  406004:	00404771 	.word	0x00404771
  406008:	004034ad 	.word	0x004034ad
  40600c:	e000e100 	.word	0xe000e100
  406010:	20000da8 	.word	0x20000da8
  406014:	004048d5 	.word	0x004048d5
  406018:	20000d9e 	.word	0x20000d9e
  40601c:	20003000 	.word	0x20003000
  406020:	00405ecd 	.word	0x00405ecd

00406024 <udd_set_address>:
	udd_disable_address_state();
  406024:	4b0d      	ldr	r3, [pc, #52]	; (40605c <udd_set_address+0x38>)
  406026:	685a      	ldr	r2, [r3, #4]
  406028:	f022 0201 	bic.w	r2, r2, #1
  40602c:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40602e:	689a      	ldr	r2, [r3, #8]
  406030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  406034:	609a      	str	r2, [r3, #8]
	if (address) {
  406036:	4602      	mov	r2, r0
  406038:	b170      	cbz	r0, 406058 <udd_set_address+0x34>
		udd_configure_address(address);
  40603a:	6898      	ldr	r0, [r3, #8]
  40603c:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  406040:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  406044:	4310      	orrs	r0, r2
  406046:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  406048:	689a      	ldr	r2, [r3, #8]
  40604a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40604e:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  406050:	685a      	ldr	r2, [r3, #4]
  406052:	f042 0201 	orr.w	r2, r2, #1
  406056:	605a      	str	r2, [r3, #4]
  406058:	4770      	bx	lr
  40605a:	bf00      	nop
  40605c:	40044000 	.word	0x40044000

00406060 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  406060:	4b05      	ldr	r3, [pc, #20]	; (406078 <udd_getaddress+0x18>)
  406062:	685b      	ldr	r3, [r3, #4]
  406064:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  406068:	bf1d      	ittte	ne
  40606a:	4b03      	ldrne	r3, [pc, #12]	; (406078 <udd_getaddress+0x18>)
  40606c:	6898      	ldrne	r0, [r3, #8]
  40606e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  406072:	2000      	moveq	r0, #0
}
  406074:	4770      	bx	lr
  406076:	bf00      	nop
  406078:	40044000 	.word	0x40044000

0040607c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  40607c:	4b01      	ldr	r3, [pc, #4]	; (406084 <udd_set_setup_payload+0x8>)
  40607e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  406080:	8199      	strh	r1, [r3, #12]
  406082:	4770      	bx	lr
  406084:	20003014 	.word	0x20003014

00406088 <udd_ep_alloc>:
{
  406088:	b5f0      	push	{r4, r5, r6, r7, lr}
  40608a:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  40608c:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  406090:	2c02      	cmp	r4, #2
  406092:	d867      	bhi.n	406164 <udd_ep_alloc+0xdc>
  406094:	00a3      	lsls	r3, r4, #2
  406096:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40609a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
	if (Is_udd_endpoint_enabled(ep)) {
  40609e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  4060a0:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4060a4:	d161      	bne.n	40616a <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4060a6:	f001 0503 	and.w	r5, r1, #3
  4060aa:	2d01      	cmp	r5, #1
  4060ac:	d050      	beq.n	406150 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4060ae:	1f25      	subs	r5, r4, #4
  4060b0:	b2ed      	uxtb	r5, r5
  4060b2:	2d02      	cmp	r5, #2
  4060b4:	bf34      	ite	cc
  4060b6:	f44f 7500 	movcc.w	r5, #512	; 0x200
  4060ba:	2540      	movcs	r5, #64	; 0x40
  4060bc:	4295      	cmp	r5, r2
  4060be:	db58      	blt.n	406172 <udd_ep_alloc+0xea>
  4060c0:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  4060c2:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  4060c4:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4060c8:	4d2b      	ldr	r5, [pc, #172]	; (406178 <udd_ep_alloc+0xf0>)
  4060ca:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  4060ce:	f105 0710 	add.w	r7, r5, #16
  4060d2:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  4060d6:	f362 0e09 	bfi	lr, r2, #0, #10
  4060da:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  4060de:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  4060e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  4060e4:	f36f 1245 	bfc	r2, #5, #1
  4060e8:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  4060ea:	2800      	cmp	r0, #0
  4060ec:	db35      	blt.n	40615a <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  4060ee:	4e23      	ldr	r6, [pc, #140]	; (40617c <udd_ep_alloc+0xf4>)
  4060f0:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  4060f2:	2201      	movs	r2, #1
  4060f4:	fa02 f404 	lsl.w	r4, r2, r4
  4060f8:	4325      	orrs	r5, r4
  4060fa:	62b5      	str	r5, [r6, #40]	; 0x28
  4060fc:	4635      	mov	r5, r6
  4060fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  406100:	4214      	tst	r4, r2
  406102:	d0fc      	beq.n	4060fe <udd_ep_alloc+0x76>
  406104:	4d1d      	ldr	r5, [pc, #116]	; (40617c <udd_ep_alloc+0xf4>)
  406106:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  406108:	ea22 0404 	bic.w	r4, r2, r4
  40610c:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  40610e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406110:	9201      	str	r2, [sp, #4]
  406112:	9a01      	ldr	r2, [sp, #4]
  406114:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  406118:	9201      	str	r2, [sp, #4]
  40611a:	9a01      	ldr	r2, [sp, #4]
  40611c:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  406120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  406124:	9201      	str	r2, [sp, #4]
  406126:	2800      	cmp	r0, #0
  406128:	ea4f 2201 	mov.w	r2, r1, lsl #8
  40612c:	f402 7240 	and.w	r2, r2, #768	; 0x300
  406130:	bfb4      	ite	lt
  406132:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  406136:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  40613a:	9901      	ldr	r1, [sp, #4]
  40613c:	4311      	orrs	r1, r2
  40613e:	9101      	str	r1, [sp, #4]
  406140:	9901      	ldr	r1, [sp, #4]
  406142:	6319      	str	r1, [r3, #48]	; 0x30
  406144:	6b19      	ldr	r1, [r3, #48]	; 0x30
  406146:	ea32 0101 	bics.w	r1, r2, r1
  40614a:	d1fb      	bne.n	406144 <udd_ep_alloc+0xbc>
	return true;
  40614c:	2001      	movs	r0, #1
  40614e:	e00a      	b.n	406166 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  406150:	b16c      	cbz	r4, 40616e <udd_ep_alloc+0xe6>
  406152:	2c03      	cmp	r4, #3
  406154:	d1ab      	bne.n	4060ae <udd_ep_alloc+0x26>
		return false;
  406156:	2000      	movs	r0, #0
  406158:	e005      	b.n	406166 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  40615a:	787a      	ldrb	r2, [r7, #1]
  40615c:	f36f 0283 	bfc	r2, #2, #2
  406160:	707a      	strb	r2, [r7, #1]
  406162:	e7c4      	b.n	4060ee <udd_ep_alloc+0x66>
		return false;
  406164:	2000      	movs	r0, #0
}
  406166:	b003      	add	sp, #12
  406168:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  40616a:	2000      	movs	r0, #0
  40616c:	e7fb      	b.n	406166 <udd_ep_alloc+0xde>
		return false;
  40616e:	2000      	movs	r0, #0
  406170:	e7f9      	b.n	406166 <udd_ep_alloc+0xde>
		return false;
  406172:	2000      	movs	r0, #0
  406174:	e7f7      	b.n	406166 <udd_ep_alloc+0xde>
  406176:	bf00      	nop
  406178:	20000da8 	.word	0x20000da8
  40617c:	40044000 	.word	0x40044000

00406180 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  406180:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  406184:	2a02      	cmp	r2, #2
  406186:	d822      	bhi.n	4061ce <udd_ep_free+0x4e>
{
  406188:	b500      	push	{lr}
  40618a:	b083      	sub	sp, #12
  40618c:	0091      	lsls	r1, r2, #2
  40618e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  406192:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
	udd_disable_endpoint(ep_index);
  406196:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  406198:	9301      	str	r3, [sp, #4]
  40619a:	9b01      	ldr	r3, [sp, #4]
  40619c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4061a0:	9301      	str	r3, [sp, #4]
  4061a2:	9b01      	ldr	r3, [sp, #4]
  4061a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  4061a8:	9301      	str	r3, [sp, #4]
  4061aa:	9b01      	ldr	r3, [sp, #4]
  4061ac:	630b      	str	r3, [r1, #48]	; 0x30
  4061ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4061b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4061b4:	d1fb      	bne.n	4061ae <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4061b6:	1e50      	subs	r0, r2, #1
  4061b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4061bc:	2101      	movs	r1, #1
  4061be:	4b04      	ldr	r3, [pc, #16]	; (4061d0 <udd_ep_free+0x50>)
  4061c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4061c4:	4b03      	ldr	r3, [pc, #12]	; (4061d4 <udd_ep_free+0x54>)
  4061c6:	4798      	blx	r3
}
  4061c8:	b003      	add	sp, #12
  4061ca:	f85d fb04 	ldr.w	pc, [sp], #4
  4061ce:	4770      	bx	lr
  4061d0:	20000da8 	.word	0x20000da8
  4061d4:	0040523d 	.word	0x0040523d

004061d8 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4061d8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4061dc:	2802      	cmp	r0, #2
  4061de:	d815      	bhi.n	40620c <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  4061e0:	1e43      	subs	r3, r0, #1
  4061e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4061e6:	4a0a      	ldr	r2, [pc, #40]	; (406210 <udd_ep_is_halted+0x38>)
  4061e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4061ec:	7c5b      	ldrb	r3, [r3, #17]
  4061ee:	f013 0f20 	tst.w	r3, #32
  4061f2:	d109      	bne.n	406208 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  4061f4:	300c      	adds	r0, #12
  4061f6:	4b07      	ldr	r3, [pc, #28]	; (406214 <udd_ep_is_halted+0x3c>)
  4061f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  4061fc:	f013 0f28 	tst.w	r3, #40	; 0x28
  406200:	bf14      	ite	ne
  406202:	2001      	movne	r0, #1
  406204:	2000      	moveq	r0, #0
  406206:	4770      	bx	lr
  406208:	2001      	movs	r0, #1
  40620a:	4770      	bx	lr
		return false;
  40620c:	2000      	movs	r0, #0
}
  40620e:	4770      	bx	lr
  406210:	20000da8 	.word	0x20000da8
  406214:	40044000 	.word	0x40044000

00406218 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  406218:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  40621c:	2902      	cmp	r1, #2
  40621e:	d860      	bhi.n	4062e2 <udd_ep_set_halt+0xca>
{
  406220:	b410      	push	{r4}
  406222:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  406224:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  406228:	fab3 f383 	clz	r3, r3
  40622c:	095b      	lsrs	r3, r3, #5
  40622e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  406230:	b672      	cpsid	i
  406232:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  406236:	2200      	movs	r2, #0
  406238:	4b2d      	ldr	r3, [pc, #180]	; (4062f0 <udd_ep_set_halt+0xd8>)
  40623a:	701a      	strb	r2, [r3, #0]
	return flags;
  40623c:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40623e:	f010 0f80 	tst.w	r0, #128	; 0x80
  406242:	d125      	bne.n	406290 <udd_ep_set_halt+0x78>
  406244:	008a      	lsls	r2, r1, #2
  406246:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40624a:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
		udd_enable_stall_handshake(ep_index);
  40624e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406250:	9300      	str	r3, [sp, #0]
  406252:	9b00      	ldr	r3, [sp, #0]
  406254:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  406258:	9300      	str	r3, [sp, #0]
  40625a:	9b00      	ldr	r3, [sp, #0]
  40625c:	f043 0320 	orr.w	r3, r3, #32
  406260:	9300      	str	r3, [sp, #0]
  406262:	9b00      	ldr	r3, [sp, #0]
  406264:	6313      	str	r3, [r2, #48]	; 0x30
  406266:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406268:	f013 0f20 	tst.w	r3, #32
  40626c:	d0fb      	beq.n	406266 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  40626e:	2301      	movs	r3, #1
  406270:	fa03 f101 	lsl.w	r1, r3, r1
  406274:	4b1f      	ldr	r3, [pc, #124]	; (4062f4 <udd_ep_set_halt+0xdc>)
  406276:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  406278:	2c00      	cmp	r4, #0
  40627a:	d036      	beq.n	4062ea <udd_ep_set_halt+0xd2>
		cpu_irq_enable();
  40627c:	2001      	movs	r0, #1
  40627e:	4b1c      	ldr	r3, [pc, #112]	; (4062f0 <udd_ep_set_halt+0xd8>)
  406280:	7018      	strb	r0, [r3, #0]
  406282:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406286:	b662      	cpsie	i
}
  406288:	b003      	add	sp, #12
  40628a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40628e:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  406290:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  406292:	f101 020c 	add.w	r2, r1, #12
  406296:	4817      	ldr	r0, [pc, #92]	; (4062f4 <udd_ep_set_halt+0xdc>)
  406298:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  40629c:	f012 0f10 	tst.w	r2, #16
  4062a0:	d109      	bne.n	4062b6 <udd_ep_set_halt+0x9e>
				|| ptr_job->bank > 1)) {
  4062a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4062a6:	4814      	ldr	r0, [pc, #80]	; (4062f8 <udd_ep_set_halt+0xe0>)
  4062a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4062ac:	7c52      	ldrb	r2, [r2, #17]
  4062ae:	f3c2 0281 	ubfx	r2, r2, #2, #2
  4062b2:	2a01      	cmp	r2, #1
  4062b4:	ddc6      	ble.n	406244 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  4062b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4062ba:	4b0f      	ldr	r3, [pc, #60]	; (4062f8 <udd_ep_set_halt+0xe0>)
  4062bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4062c0:	7c5a      	ldrb	r2, [r3, #17]
  4062c2:	f042 0220 	orr.w	r2, r2, #32
  4062c6:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4062c8:	2301      	movs	r3, #1
  4062ca:	fa03 f101 	lsl.w	r1, r3, r1
  4062ce:	4b09      	ldr	r3, [pc, #36]	; (4062f4 <udd_ep_set_halt+0xdc>)
  4062d0:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4062d2:	b144      	cbz	r4, 4062e6 <udd_ep_set_halt+0xce>
		cpu_irq_enable();
  4062d4:	2001      	movs	r0, #1
  4062d6:	4b06      	ldr	r3, [pc, #24]	; (4062f0 <udd_ep_set_halt+0xd8>)
  4062d8:	7018      	strb	r0, [r3, #0]
  4062da:	f3bf 8f5f 	dmb	sy
  4062de:	b662      	cpsie	i
  4062e0:	e7d2      	b.n	406288 <udd_ep_set_halt+0x70>
		return false;
  4062e2:	2000      	movs	r0, #0
  4062e4:	4770      	bx	lr
		return true;
  4062e6:	2001      	movs	r0, #1
  4062e8:	e7ce      	b.n	406288 <udd_ep_set_halt+0x70>
	return true;
  4062ea:	2001      	movs	r0, #1
  4062ec:	e7cc      	b.n	406288 <udd_ep_set_halt+0x70>
  4062ee:	bf00      	nop
  4062f0:	200001a5 	.word	0x200001a5
  4062f4:	40044000 	.word	0x40044000
  4062f8:	20000da8 	.word	0x20000da8

004062fc <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  4062fc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  406300:	2802      	cmp	r0, #2
  406302:	d85e      	bhi.n	4063c2 <udd_ep_clear_halt+0xc6>
{
  406304:	b530      	push	{r4, r5, lr}
  406306:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  406308:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  40630a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40630e:	4b2f      	ldr	r3, [pc, #188]	; (4063cc <udd_ep_clear_halt+0xd0>)
  406310:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  406314:	7c5a      	ldrb	r2, [r3, #17]
  406316:	f36f 1245 	bfc	r2, #5, #1
  40631a:	745a      	strb	r2, [r3, #17]
  40631c:	0083      	lsls	r3, r0, #2
  40631e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  406322:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
	if (Is_udd_endpoint_stall_requested(ep)) {
  406326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406328:	f012 0f20 	tst.w	r2, #32
  40632c:	d04b      	beq.n	4063c6 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  40632e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406330:	9200      	str	r2, [sp, #0]
  406332:	9a00      	ldr	r2, [sp, #0]
  406334:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  406338:	9200      	str	r2, [sp, #0]
  40633a:	9a00      	ldr	r2, [sp, #0]
  40633c:	f022 0220 	bic.w	r2, r2, #32
  406340:	9200      	str	r2, [sp, #0]
  406342:	9a00      	ldr	r2, [sp, #0]
  406344:	631a      	str	r2, [r3, #48]	; 0x30
  406346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406348:	f012 0f20 	tst.w	r2, #32
  40634c:	d1fb      	bne.n	406346 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40634e:	4d20      	ldr	r5, [pc, #128]	; (4063d0 <udd_ep_clear_halt+0xd4>)
  406350:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  406352:	2201      	movs	r2, #1
  406354:	fa02 f000 	lsl.w	r0, r2, r0
  406358:	4301      	orrs	r1, r0
  40635a:	62a9      	str	r1, [r5, #40]	; 0x28
  40635c:	4629      	mov	r1, r5
  40635e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  406360:	4210      	tst	r0, r2
  406362:	d0fc      	beq.n	40635e <udd_ep_clear_halt+0x62>
  406364:	491a      	ldr	r1, [pc, #104]	; (4063d0 <udd_ep_clear_halt+0xd4>)
  406366:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  406368:	ea22 0000 	bic.w	r0, r2, r0
  40636c:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40636e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406370:	9201      	str	r2, [sp, #4]
  406372:	9a01      	ldr	r2, [sp, #4]
  406374:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  406378:	9201      	str	r2, [sp, #4]
  40637a:	9a01      	ldr	r2, [sp, #4]
  40637c:	f022 0208 	bic.w	r2, r2, #8
  406380:	9201      	str	r2, [sp, #4]
  406382:	9a01      	ldr	r2, [sp, #4]
  406384:	631a      	str	r2, [r3, #48]	; 0x30
  406386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406388:	f012 0f08 	tst.w	r2, #8
  40638c:	d1fb      	bne.n	406386 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  40638e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406392:	4a0e      	ldr	r2, [pc, #56]	; (4063cc <udd_ep_clear_halt+0xd0>)
  406394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406398:	7c5b      	ldrb	r3, [r3, #17]
  40639a:	f013 0f10 	tst.w	r3, #16
  40639e:	d101      	bne.n	4063a4 <udd_ep_clear_halt+0xa8>
	return true;
  4063a0:	2001      	movs	r0, #1
  4063a2:	e011      	b.n	4063c8 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  4063a4:	4611      	mov	r1, r2
  4063a6:	00a2      	lsls	r2, r4, #2
  4063a8:	1913      	adds	r3, r2, r4
  4063aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4063ae:	7c58      	ldrb	r0, [r3, #17]
  4063b0:	f36f 1004 	bfc	r0, #4, #1
  4063b4:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  4063b6:	4414      	add	r4, r2
  4063b8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  4063bc:	4798      	blx	r3
	return true;
  4063be:	2001      	movs	r0, #1
  4063c0:	e002      	b.n	4063c8 <udd_ep_clear_halt+0xcc>
		return false;
  4063c2:	2000      	movs	r0, #0
  4063c4:	4770      	bx	lr
	return true;
  4063c6:	2001      	movs	r0, #1
}
  4063c8:	b003      	add	sp, #12
  4063ca:	bd30      	pop	{r4, r5, pc}
  4063cc:	20000da8 	.word	0x20000da8
  4063d0:	40044000 	.word	0x40044000

004063d4 <udd_ep_run>:
{
  4063d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4063d6:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  4063d8:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  4063dc:	2f02      	cmp	r7, #2
  4063de:	f200 80a2 	bhi.w	406526 <udd_ep_run+0x152>
  4063e2:	00bc      	lsls	r4, r7, #2
  4063e4:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4063e8:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
	if ((!Is_udd_endpoint_enabled(ep))
  4063ec:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4063ee:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4063f2:	f000 809b 	beq.w	40652c <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  4063f6:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  4063f8:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4063fc:	4e50      	ldr	r6, [pc, #320]	; (406540 <udd_ep_run+0x16c>)
  4063fe:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  406402:	7c76      	ldrb	r6, [r6, #17]
  406404:	f016 0f20 	tst.w	r6, #32
  406408:	f040 8092 	bne.w	406530 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  40640c:	6b26      	ldr	r6, [r4, #48]	; 0x30
  40640e:	f016 0f20 	tst.w	r6, #32
  406412:	f040 808f 	bne.w	406534 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  406416:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40641a:	fab6 f686 	clz	r6, r6
  40641e:	0976      	lsrs	r6, r6, #5
  406420:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  406422:	b672      	cpsid	i
  406424:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  406428:	f04f 0e00 	mov.w	lr, #0
  40642c:	4e45      	ldr	r6, [pc, #276]	; (406544 <udd_ep_run+0x170>)
  40642e:	f886 e000 	strb.w	lr, [r6]
	return flags;
  406432:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  406436:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40643a:	4e41      	ldr	r6, [pc, #260]	; (406540 <udd_ep_run+0x16c>)
  40643c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  406440:	7c76      	ldrb	r6, [r6, #17]
  406442:	f016 0f10 	tst.w	r6, #16
  406446:	d00a      	beq.n	40645e <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  406448:	f1bc 0f00 	cmp.w	ip, #0
  40644c:	d074      	beq.n	406538 <udd_ep_run+0x164>
		cpu_irq_enable();
  40644e:	2201      	movs	r2, #1
  406450:	4b3c      	ldr	r3, [pc, #240]	; (406544 <udd_ep_run+0x170>)
  406452:	701a      	strb	r2, [r3, #0]
  406454:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406458:	b662      	cpsie	i
		return false; // Job already on going
  40645a:	2000      	movs	r0, #0
  40645c:	e064      	b.n	406528 <udd_ep_run+0x154>
	ptr_job->busy = true;
  40645e:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  406462:	4e37      	ldr	r6, [pc, #220]	; (406540 <udd_ep_run+0x16c>)
  406464:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  406468:	f896 e011 	ldrb.w	lr, [r6, #17]
  40646c:	f04e 0e10 	orr.w	lr, lr, #16
  406470:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  406474:	f1bc 0f00 	cmp.w	ip, #0
  406478:	d007      	beq.n	40648a <udd_ep_run+0xb6>
		cpu_irq_enable();
  40647a:	f04f 0e01 	mov.w	lr, #1
  40647e:	4e31      	ldr	r6, [pc, #196]	; (406544 <udd_ep_run+0x170>)
  406480:	f886 e000 	strb.w	lr, [r6]
  406484:	f3bf 8f5f 	dmb	sy
  406488:	b662      	cpsie	i
	ptr_job->buf = buf;
  40648a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 406540 <udd_ep_run+0x16c>
  40648e:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  406492:	00b6      	lsls	r6, r6, #2
  406494:	eb0c 0e06 	add.w	lr, ip, r6
  406498:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  40649c:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4064a0:	2200      	movs	r2, #0
  4064a2:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  4064a6:	9a08      	ldr	r2, [sp, #32]
  4064a8:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4064ac:	b911      	cbnz	r1, 4064b4 <udd_ep_run+0xe0>
  4064ae:	fab3 f183 	clz	r1, r3
  4064b2:	0949      	lsrs	r1, r1, #5
  4064b4:	4a22      	ldr	r2, [pc, #136]	; (406540 <udd_ep_run+0x16c>)
  4064b6:	00ae      	lsls	r6, r5, #2
  4064b8:	1973      	adds	r3, r6, r5
  4064ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4064be:	7c5b      	ldrb	r3, [r3, #17]
  4064c0:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  4064c4:	4435      	add	r5, r6
  4064c6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  4064ca:	f36f 13c7 	bfc	r3, #7, #1
  4064ce:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4064d0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4064d4:	fab3 f383 	clz	r3, r3
  4064d8:	095b      	lsrs	r3, r3, #5
  4064da:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4064dc:	b672      	cpsid	i
  4064de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4064e2:	2200      	movs	r2, #0
  4064e4:	4b17      	ldr	r3, [pc, #92]	; (406544 <udd_ep_run+0x170>)
  4064e6:	701a      	strb	r2, [r3, #0]
	return flags;
  4064e8:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  4064ea:	2301      	movs	r3, #1
  4064ec:	40bb      	lsls	r3, r7
  4064ee:	4a16      	ldr	r2, [pc, #88]	; (406548 <udd_ep_run+0x174>)
  4064f0:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  4064f2:	f010 0f80 	tst.w	r0, #128	; 0x80
  4064f6:	d107      	bne.n	406508 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  4064f8:	b305      	cbz	r5, 40653c <udd_ep_run+0x168>
		cpu_irq_enable();
  4064fa:	2001      	movs	r0, #1
  4064fc:	4b11      	ldr	r3, [pc, #68]	; (406544 <udd_ep_run+0x170>)
  4064fe:	7018      	strb	r0, [r3, #0]
  406500:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406504:	b662      	cpsie	i
  406506:	e00f      	b.n	406528 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  406508:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40650a:	f013 0f11 	tst.w	r3, #17
  40650e:	d1f3      	bne.n	4064f8 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  406510:	2101      	movs	r1, #1
  406512:	4638      	mov	r0, r7
  406514:	4b0d      	ldr	r3, [pc, #52]	; (40654c <udd_ep_run+0x178>)
  406516:	4798      	blx	r3
  406518:	2800      	cmp	r0, #0
  40651a:	d0ed      	beq.n	4064f8 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  40651c:	2100      	movs	r1, #0
  40651e:	4638      	mov	r0, r7
  406520:	4b0a      	ldr	r3, [pc, #40]	; (40654c <udd_ep_run+0x178>)
  406522:	4798      	blx	r3
  406524:	e7e8      	b.n	4064f8 <udd_ep_run+0x124>
		return false;
  406526:	2000      	movs	r0, #0
}
  406528:	b003      	add	sp, #12
  40652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  40652c:	2000      	movs	r0, #0
  40652e:	e7fb      	b.n	406528 <udd_ep_run+0x154>
  406530:	2000      	movs	r0, #0
  406532:	e7f9      	b.n	406528 <udd_ep_run+0x154>
  406534:	2000      	movs	r0, #0
  406536:	e7f7      	b.n	406528 <udd_ep_run+0x154>
		return false; // Job already on going
  406538:	2000      	movs	r0, #0
  40653a:	e7f5      	b.n	406528 <udd_ep_run+0x154>
	return true;
  40653c:	2001      	movs	r0, #1
  40653e:	e7f3      	b.n	406528 <udd_ep_run+0x154>
  406540:	20000da8 	.word	0x20000da8
  406544:	200001a5 	.word	0x200001a5
  406548:	40044000 	.word	0x40044000
  40654c:	00405351 	.word	0x00405351

00406550 <udd_ep_abort>:
{
  406550:	b5f0      	push	{r4, r5, r6, r7, lr}
  406552:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  406554:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  406558:	2d02      	cmp	r5, #2
  40655a:	d840      	bhi.n	4065de <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40655c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  406560:	fab3 f383 	clz	r3, r3
  406564:	095b      	lsrs	r3, r3, #5
  406566:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  406568:	b672      	cpsid	i
  40656a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40656e:	2200      	movs	r2, #0
  406570:	4b4b      	ldr	r3, [pc, #300]	; (4066a0 <udd_ep_abort+0x150>)
  406572:	701a      	strb	r2, [r3, #0]
	return flags;
  406574:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  406576:	2401      	movs	r4, #1
  406578:	40ac      	lsls	r4, r5
  40657a:	4a4a      	ldr	r2, [pc, #296]	; (4066a4 <udd_ep_abort+0x154>)
  40657c:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40657e:	b12b      	cbz	r3, 40658c <udd_ep_abort+0x3c>
		cpu_irq_enable();
  406580:	2201      	movs	r2, #1
  406582:	4b47      	ldr	r3, [pc, #284]	; (4066a0 <udd_ep_abort+0x150>)
  406584:	701a      	strb	r2, [r3, #0]
  406586:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40658a:	b662      	cpsie	i
	if (b_dir_in) {
  40658c:	f010 0f80 	tst.w	r0, #128	; 0x80
  406590:	d127      	bne.n	4065e2 <udd_ep_abort+0x92>
  406592:	00ae      	lsls	r6, r5, #2
  406594:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  406598:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
		while(Is_udd_any_bank_received(ep)) {
  40659c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40659e:	f013 0f42 	tst.w	r3, #66	; 0x42
  4065a2:	d006      	beq.n	4065b2 <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  4065a4:	4f40      	ldr	r7, [pc, #256]	; (4066a8 <udd_ep_abort+0x158>)
  4065a6:	4628      	mov	r0, r5
  4065a8:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  4065aa:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4065ac:	f013 0f42 	tst.w	r3, #66	; 0x42
  4065b0:	d1f9      	bne.n	4065a6 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  4065b2:	4a3c      	ldr	r2, [pc, #240]	; (4066a4 <udd_ep_abort+0x154>)
  4065b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4065b6:	4323      	orrs	r3, r4
  4065b8:	6293      	str	r3, [r2, #40]	; 0x28
  4065ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4065bc:	421c      	tst	r4, r3
  4065be:	d0fc      	beq.n	4065ba <udd_ep_abort+0x6a>
  4065c0:	4a38      	ldr	r2, [pc, #224]	; (4066a4 <udd_ep_abort+0x154>)
  4065c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4065c4:	ea23 0404 	bic.w	r4, r3, r4
  4065c8:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4065ca:	1e68      	subs	r0, r5, #1
  4065cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4065d0:	462a      	mov	r2, r5
  4065d2:	2101      	movs	r1, #1
  4065d4:	4b35      	ldr	r3, [pc, #212]	; (4066ac <udd_ep_abort+0x15c>)
  4065d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4065da:	4b35      	ldr	r3, [pc, #212]	; (4066b0 <udd_ep_abort+0x160>)
  4065dc:	4798      	blx	r3
}
  4065de:	b007      	add	sp, #28
  4065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065e2:	00ab      	lsls	r3, r5, #2
  4065e4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4065e8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
		if (Is_udd_transmit_ready(ep)) {
  4065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4065ee:	f012 0f10 	tst.w	r2, #16
  4065f2:	d03a      	beq.n	40666a <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4065f4:	b34d      	cbz	r5, 40664a <udd_ep_abort+0xfa>
  4065f6:	2d03      	cmp	r5, #3
  4065f8:	d027      	beq.n	40664a <udd_ep_abort+0xfa>
  4065fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4065fc:	9201      	str	r2, [sp, #4]
  4065fe:	9a01      	ldr	r2, [sp, #4]
  406600:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  406604:	9201      	str	r2, [sp, #4]
  406606:	9a01      	ldr	r2, [sp, #4]
  406608:	f022 0210 	bic.w	r2, r2, #16
  40660c:	9201      	str	r2, [sp, #4]
  40660e:	9a01      	ldr	r2, [sp, #4]
  406610:	631a      	str	r2, [r3, #48]	; 0x30
  406612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406614:	f012 0f10 	tst.w	r2, #16
  406618:	d1fb      	bne.n	406612 <udd_ep_abort+0xc2>
  40661a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40661c:	f012 0f10 	tst.w	r2, #16
  406620:	d1fb      	bne.n	40661a <udd_ep_abort+0xca>
  406622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406624:	9202      	str	r2, [sp, #8]
  406626:	9a02      	ldr	r2, [sp, #8]
  406628:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40662c:	9202      	str	r2, [sp, #8]
  40662e:	9a02      	ldr	r2, [sp, #8]
  406630:	f042 0210 	orr.w	r2, r2, #16
  406634:	9202      	str	r2, [sp, #8]
  406636:	9a02      	ldr	r2, [sp, #8]
  406638:	631a      	str	r2, [r3, #48]	; 0x30
  40663a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40663c:	f012 0f10 	tst.w	r2, #16
  406640:	d0fb      	beq.n	40663a <udd_ep_abort+0xea>
  406642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406644:	f012 0f10 	tst.w	r2, #16
  406648:	d0fb      	beq.n	406642 <udd_ep_abort+0xf2>
  40664a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40664c:	9203      	str	r2, [sp, #12]
  40664e:	9a03      	ldr	r2, [sp, #12]
  406650:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  406654:	9203      	str	r2, [sp, #12]
  406656:	9a03      	ldr	r2, [sp, #12]
  406658:	f022 0210 	bic.w	r2, r2, #16
  40665c:	9203      	str	r2, [sp, #12]
  40665e:	9a03      	ldr	r2, [sp, #12]
  406660:	631a      	str	r2, [r3, #48]	; 0x30
  406662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406664:	f012 0f10 	tst.w	r2, #16
  406668:	d1fb      	bne.n	406662 <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  40666a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40666c:	9204      	str	r2, [sp, #16]
  40666e:	9a04      	ldr	r2, [sp, #16]
  406670:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  406674:	9204      	str	r2, [sp, #16]
  406676:	9a04      	ldr	r2, [sp, #16]
  406678:	f022 0201 	bic.w	r2, r2, #1
  40667c:	9204      	str	r2, [sp, #16]
  40667e:	9a04      	ldr	r2, [sp, #16]
  406680:	631a      	str	r2, [r3, #48]	; 0x30
  406682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406684:	f012 0f01 	tst.w	r2, #1
  406688:	d1fb      	bne.n	406682 <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  40668a:	1e6b      	subs	r3, r5, #1
  40668c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  406690:	4b06      	ldr	r3, [pc, #24]	; (4066ac <udd_ep_abort+0x15c>)
  406692:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  406696:	7c5a      	ldrb	r2, [r3, #17]
  406698:	f36f 0283 	bfc	r2, #2, #2
  40669c:	745a      	strb	r2, [r3, #17]
  40669e:	e788      	b.n	4065b2 <udd_ep_abort+0x62>
  4066a0:	200001a5 	.word	0x200001a5
  4066a4:	40044000 	.word	0x40044000
  4066a8:	0040527d 	.word	0x0040527d
  4066ac:	20000da8 	.word	0x20000da8
  4066b0:	0040523d 	.word	0x0040523d

004066b4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4066b4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4066b6:	010b      	lsls	r3, r1, #4
  4066b8:	4293      	cmp	r3, r2
  4066ba:	d914      	bls.n	4066e6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4066bc:	00c9      	lsls	r1, r1, #3
  4066be:	084b      	lsrs	r3, r1, #1
  4066c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4066c4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4066c8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4066ca:	1e5c      	subs	r4, r3, #1
  4066cc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4066d0:	428c      	cmp	r4, r1
  4066d2:	d901      	bls.n	4066d8 <usart_set_async_baudrate+0x24>
		return 1;
  4066d4:	2001      	movs	r0, #1
  4066d6:	e017      	b.n	406708 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4066d8:	6841      	ldr	r1, [r0, #4]
  4066da:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4066de:	6041      	str	r1, [r0, #4]
  4066e0:	e00c      	b.n	4066fc <usart_set_async_baudrate+0x48>
		return 1;
  4066e2:	2001      	movs	r0, #1
  4066e4:	e010      	b.n	406708 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4066e6:	0859      	lsrs	r1, r3, #1
  4066e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4066ec:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4066f0:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4066f2:	1e5c      	subs	r4, r3, #1
  4066f4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4066f8:	428c      	cmp	r4, r1
  4066fa:	d8f2      	bhi.n	4066e2 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4066fc:	0412      	lsls	r2, r2, #16
  4066fe:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  406702:	431a      	orrs	r2, r3
  406704:	6202      	str	r2, [r0, #32]

	return 0;
  406706:	2000      	movs	r0, #0
}
  406708:	f85d 4b04 	ldr.w	r4, [sp], #4
  40670c:	4770      	bx	lr
	...

00406710 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  406710:	4b08      	ldr	r3, [pc, #32]	; (406734 <usart_reset+0x24>)
  406712:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  406716:	2300      	movs	r3, #0
  406718:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40671a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40671c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40671e:	2388      	movs	r3, #136	; 0x88
  406720:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  406722:	2324      	movs	r3, #36	; 0x24
  406724:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  406726:	f44f 7380 	mov.w	r3, #256	; 0x100
  40672a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40672c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  406730:	6003      	str	r3, [r0, #0]
  406732:	4770      	bx	lr
  406734:	55534100 	.word	0x55534100

00406738 <usart_init_rs232>:
{
  406738:	b570      	push	{r4, r5, r6, lr}
  40673a:	4605      	mov	r5, r0
  40673c:	460c      	mov	r4, r1
  40673e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  406740:	4b0f      	ldr	r3, [pc, #60]	; (406780 <usart_init_rs232+0x48>)
  406742:	4798      	blx	r3
	ul_reg_val = 0;
  406744:	2200      	movs	r2, #0
  406746:	4b0f      	ldr	r3, [pc, #60]	; (406784 <usart_init_rs232+0x4c>)
  406748:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40674a:	b1a4      	cbz	r4, 406776 <usart_init_rs232+0x3e>
  40674c:	4632      	mov	r2, r6
  40674e:	6821      	ldr	r1, [r4, #0]
  406750:	4628      	mov	r0, r5
  406752:	4b0d      	ldr	r3, [pc, #52]	; (406788 <usart_init_rs232+0x50>)
  406754:	4798      	blx	r3
  406756:	4602      	mov	r2, r0
  406758:	b978      	cbnz	r0, 40677a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40675a:	6863      	ldr	r3, [r4, #4]
  40675c:	68a1      	ldr	r1, [r4, #8]
  40675e:	430b      	orrs	r3, r1
  406760:	6921      	ldr	r1, [r4, #16]
  406762:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  406764:	68e1      	ldr	r1, [r4, #12]
  406766:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406768:	4906      	ldr	r1, [pc, #24]	; (406784 <usart_init_rs232+0x4c>)
  40676a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40676c:	6869      	ldr	r1, [r5, #4]
  40676e:	430b      	orrs	r3, r1
  406770:	606b      	str	r3, [r5, #4]
}
  406772:	4610      	mov	r0, r2
  406774:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  406776:	2201      	movs	r2, #1
  406778:	e7fb      	b.n	406772 <usart_init_rs232+0x3a>
  40677a:	2201      	movs	r2, #1
  40677c:	e7f9      	b.n	406772 <usart_init_rs232+0x3a>
  40677e:	bf00      	nop
  406780:	00406711 	.word	0x00406711
  406784:	20000dd0 	.word	0x20000dd0
  406788:	004066b5 	.word	0x004066b5

0040678c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40678c:	2340      	movs	r3, #64	; 0x40
  40678e:	6003      	str	r3, [r0, #0]
  406790:	4770      	bx	lr

00406792 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  406792:	2310      	movs	r3, #16
  406794:	6003      	str	r3, [r0, #0]
  406796:	4770      	bx	lr

00406798 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  406798:	6943      	ldr	r3, [r0, #20]
  40679a:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
  40679e:	bf1d      	ittte	ne
  4067a0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4067a4:	61c1      	strne	r1, [r0, #28]
	return 0;
  4067a6:	2000      	movne	r0, #0
		return 1;
  4067a8:	2001      	moveq	r0, #1
}
  4067aa:	4770      	bx	lr

004067ac <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4067ac:	6943      	ldr	r3, [r0, #20]
  4067ae:	f013 0f01 	tst.w	r3, #1
  4067b2:	d005      	beq.n	4067c0 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4067b4:	6983      	ldr	r3, [r0, #24]
  4067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4067ba:	600b      	str	r3, [r1, #0]
	return 0;
  4067bc:	2000      	movs	r0, #0
  4067be:	4770      	bx	lr
		return 1;
  4067c0:	2001      	movs	r0, #1
}
  4067c2:	4770      	bx	lr

004067c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4067c4:	e7fe      	b.n	4067c4 <Dummy_Handler>
	...

004067c8 <Reset_Handler>:
{
  4067c8:	b500      	push	{lr}
  4067ca:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4067cc:	4b2a      	ldr	r3, [pc, #168]	; (406878 <Reset_Handler+0xb0>)
  4067ce:	4a2b      	ldr	r2, [pc, #172]	; (40687c <Reset_Handler+0xb4>)
  4067d0:	429a      	cmp	r2, r3
  4067d2:	d010      	beq.n	4067f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4067d4:	4b2a      	ldr	r3, [pc, #168]	; (406880 <Reset_Handler+0xb8>)
  4067d6:	4a28      	ldr	r2, [pc, #160]	; (406878 <Reset_Handler+0xb0>)
  4067d8:	429a      	cmp	r2, r3
  4067da:	d20c      	bcs.n	4067f6 <Reset_Handler+0x2e>
  4067dc:	3b01      	subs	r3, #1
  4067de:	1a9b      	subs	r3, r3, r2
  4067e0:	f023 0303 	bic.w	r3, r3, #3
  4067e4:	3304      	adds	r3, #4
  4067e6:	4413      	add	r3, r2
  4067e8:	4924      	ldr	r1, [pc, #144]	; (40687c <Reset_Handler+0xb4>)
                        *pDest++ = *pSrc++;
  4067ea:	f851 0b04 	ldr.w	r0, [r1], #4
  4067ee:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4067f2:	429a      	cmp	r2, r3
  4067f4:	d1f9      	bne.n	4067ea <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4067f6:	4b23      	ldr	r3, [pc, #140]	; (406884 <Reset_Handler+0xbc>)
  4067f8:	4a23      	ldr	r2, [pc, #140]	; (406888 <Reset_Handler+0xc0>)
  4067fa:	429a      	cmp	r2, r3
  4067fc:	d20a      	bcs.n	406814 <Reset_Handler+0x4c>
  4067fe:	3b01      	subs	r3, #1
  406800:	1a9b      	subs	r3, r3, r2
  406802:	f023 0303 	bic.w	r3, r3, #3
  406806:	3304      	adds	r3, #4
  406808:	4413      	add	r3, r2
                *pDest++ = 0;
  40680a:	2100      	movs	r1, #0
  40680c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  406810:	4293      	cmp	r3, r2
  406812:	d1fb      	bne.n	40680c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  406814:	4a1d      	ldr	r2, [pc, #116]	; (40688c <Reset_Handler+0xc4>)
  406816:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  40681a:	4b1d      	ldr	r3, [pc, #116]	; (406890 <Reset_Handler+0xc8>)
  40681c:	6099      	str	r1, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40681e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  406822:	fab3 f383 	clz	r3, r3
  406826:	095b      	lsrs	r3, r3, #5
  406828:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40682a:	b672      	cpsid	i
  40682c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  406830:	2100      	movs	r1, #0
  406832:	4b18      	ldr	r3, [pc, #96]	; (406894 <Reset_Handler+0xcc>)
  406834:	7019      	strb	r1, [r3, #0]
	return flags;
  406836:	9801      	ldr	r0, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  406838:	4917      	ldr	r1, [pc, #92]	; (406898 <Reset_Handler+0xd0>)
  40683a:	680b      	ldr	r3, [r1, #0]
  40683c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  406840:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  406842:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  406846:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40684a:	b128      	cbz	r0, 406858 <Reset_Handler+0x90>
		cpu_irq_enable();
  40684c:	2101      	movs	r1, #1
  40684e:	4b11      	ldr	r3, [pc, #68]	; (406894 <Reset_Handler+0xcc>)
  406850:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb");
  406852:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406856:	b662      	cpsie	i
	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  406858:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  40685c:	f5b2 3f20 	cmp.w	r2, #163840	; 0x28000
  406860:	d204      	bcs.n	40686c <Reset_Handler+0xa4>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  406862:	4a0b      	ldr	r2, [pc, #44]	; (406890 <Reset_Handler+0xc8>)
  406864:	6893      	ldr	r3, [r2, #8]
  406866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40686a:	6093      	str	r3, [r2, #8]
	__libc_init_array();
  40686c:	4b0b      	ldr	r3, [pc, #44]	; (40689c <Reset_Handler+0xd4>)
  40686e:	4798      	blx	r3
        main();
  406870:	4b0b      	ldr	r3, [pc, #44]	; (4068a0 <Reset_Handler+0xd8>)
  406872:	4798      	blx	r3
  406874:	e7fe      	b.n	406874 <Reset_Handler+0xac>
  406876:	bf00      	nop
  406878:	20000000 	.word	0x20000000
  40687c:	004178c8 	.word	0x004178c8
  406880:	20000c48 	.word	0x20000c48
  406884:	20003078 	.word	0x20003078
  406888:	20000c48 	.word	0x20000c48
  40688c:	00400000 	.word	0x00400000
  406890:	e000ed00 	.word	0xe000ed00
  406894:	200001a5 	.word	0x200001a5
  406898:	e000ed88 	.word	0xe000ed88
  40689c:	0040d3dd 	.word	0x0040d3dd
  4068a0:	0040a33d 	.word	0x0040a33d

004068a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4068a4:	4b31      	ldr	r3, [pc, #196]	; (40696c <SystemCoreClockUpdate+0xc8>)
  4068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4068a8:	f003 0303 	and.w	r3, r3, #3
  4068ac:	2b01      	cmp	r3, #1
  4068ae:	d01d      	beq.n	4068ec <SystemCoreClockUpdate+0x48>
  4068b0:	b183      	cbz	r3, 4068d4 <SystemCoreClockUpdate+0x30>
  4068b2:	2b02      	cmp	r3, #2
  4068b4:	d036      	beq.n	406924 <SystemCoreClockUpdate+0x80>
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4068b6:	4b2d      	ldr	r3, [pc, #180]	; (40696c <SystemCoreClockUpdate+0xc8>)
  4068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4068ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4068be:	2b70      	cmp	r3, #112	; 0x70
  4068c0:	d04b      	beq.n	40695a <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4068c2:	4b2a      	ldr	r3, [pc, #168]	; (40696c <SystemCoreClockUpdate+0xc8>)
  4068c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4068c6:	492a      	ldr	r1, [pc, #168]	; (406970 <SystemCoreClockUpdate+0xcc>)
  4068c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4068cc:	680b      	ldr	r3, [r1, #0]
  4068ce:	40d3      	lsrs	r3, r2
  4068d0:	600b      	str	r3, [r1, #0]
  4068d2:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4068d4:	4b27      	ldr	r3, [pc, #156]	; (406974 <SystemCoreClockUpdate+0xd0>)
  4068d6:	695b      	ldr	r3, [r3, #20]
  4068d8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4068dc:	bf14      	ite	ne
  4068de:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4068e2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4068e6:	4b22      	ldr	r3, [pc, #136]	; (406970 <SystemCoreClockUpdate+0xcc>)
  4068e8:	601a      	str	r2, [r3, #0]
  4068ea:	e7e4      	b.n	4068b6 <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4068ec:	4b1f      	ldr	r3, [pc, #124]	; (40696c <SystemCoreClockUpdate+0xc8>)
  4068ee:	6a1b      	ldr	r3, [r3, #32]
  4068f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4068f4:	d003      	beq.n	4068fe <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4068f6:	4a20      	ldr	r2, [pc, #128]	; (406978 <SystemCoreClockUpdate+0xd4>)
  4068f8:	4b1d      	ldr	r3, [pc, #116]	; (406970 <SystemCoreClockUpdate+0xcc>)
  4068fa:	601a      	str	r2, [r3, #0]
  4068fc:	e7db      	b.n	4068b6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4068fe:	4a1f      	ldr	r2, [pc, #124]	; (40697c <SystemCoreClockUpdate+0xd8>)
  406900:	4b1b      	ldr	r3, [pc, #108]	; (406970 <SystemCoreClockUpdate+0xcc>)
  406902:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  406904:	4b19      	ldr	r3, [pc, #100]	; (40696c <SystemCoreClockUpdate+0xc8>)
  406906:	6a1b      	ldr	r3, [r3, #32]
  406908:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40690c:	2b10      	cmp	r3, #16
  40690e:	d005      	beq.n	40691c <SystemCoreClockUpdate+0x78>
  406910:	2b20      	cmp	r3, #32
  406912:	d1d0      	bne.n	4068b6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  406914:	4a1a      	ldr	r2, [pc, #104]	; (406980 <SystemCoreClockUpdate+0xdc>)
  406916:	4b16      	ldr	r3, [pc, #88]	; (406970 <SystemCoreClockUpdate+0xcc>)
  406918:	601a      	str	r2, [r3, #0]
				break;
  40691a:	e7cc      	b.n	4068b6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40691c:	4a19      	ldr	r2, [pc, #100]	; (406984 <SystemCoreClockUpdate+0xe0>)
  40691e:	4b14      	ldr	r3, [pc, #80]	; (406970 <SystemCoreClockUpdate+0xcc>)
  406920:	601a      	str	r2, [r3, #0]
				break;
  406922:	e7c8      	b.n	4068b6 <SystemCoreClockUpdate+0x12>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  406924:	4b13      	ldr	r3, [pc, #76]	; (406974 <SystemCoreClockUpdate+0xd0>)
  406926:	695b      	ldr	r3, [r3, #20]
  406928:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40692c:	bf14      	ite	ne
  40692e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  406932:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  406936:	4b0e      	ldr	r3, [pc, #56]	; (406970 <SystemCoreClockUpdate+0xcc>)
  406938:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  40693a:	4b0c      	ldr	r3, [pc, #48]	; (40696c <SystemCoreClockUpdate+0xc8>)
  40693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40693e:	f003 0303 	and.w	r3, r3, #3
  406942:	2b02      	cmp	r3, #2
  406944:	d1b7      	bne.n	4068b6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  406946:	4b09      	ldr	r3, [pc, #36]	; (40696c <SystemCoreClockUpdate+0xc8>)
  406948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40694a:	4909      	ldr	r1, [pc, #36]	; (406970 <SystemCoreClockUpdate+0xcc>)
  40694c:	f3c2 420c 	ubfx	r2, r2, #16, #13
  406950:	680b      	ldr	r3, [r1, #0]
  406952:	fb02 3303 	mla	r3, r2, r3, r3
  406956:	600b      	str	r3, [r1, #0]
  406958:	e7ad      	b.n	4068b6 <SystemCoreClockUpdate+0x12>
		SystemCoreClock /= 3U;
  40695a:	4a05      	ldr	r2, [pc, #20]	; (406970 <SystemCoreClockUpdate+0xcc>)
  40695c:	6813      	ldr	r3, [r2, #0]
  40695e:	490a      	ldr	r1, [pc, #40]	; (406988 <SystemCoreClockUpdate+0xe4>)
  406960:	fba1 1303 	umull	r1, r3, r1, r3
  406964:	085b      	lsrs	r3, r3, #1
  406966:	6013      	str	r3, [r2, #0]
  406968:	4770      	bx	lr
  40696a:	bf00      	nop
  40696c:	400e0400 	.word	0x400e0400
  406970:	200001a8 	.word	0x200001a8
  406974:	400e1410 	.word	0x400e1410
  406978:	00b71b00 	.word	0x00b71b00
  40697c:	007a1200 	.word	0x007a1200
  406980:	016e3600 	.word	0x016e3600
  406984:	00f42400 	.word	0x00f42400
  406988:	aaaaaaab 	.word	0xaaaaaaab

0040698c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  40698c:	4b12      	ldr	r3, [pc, #72]	; (4069d8 <system_init_flash+0x4c>)
  40698e:	4298      	cmp	r0, r3
  406990:	d911      	bls.n	4069b6 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  406992:	4b12      	ldr	r3, [pc, #72]	; (4069dc <system_init_flash+0x50>)
  406994:	4298      	cmp	r0, r3
  406996:	d913      	bls.n	4069c0 <system_init_flash+0x34>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  406998:	4b11      	ldr	r3, [pc, #68]	; (4069e0 <system_init_flash+0x54>)
  40699a:	4298      	cmp	r0, r3
  40699c:	d914      	bls.n	4069c8 <system_init_flash+0x3c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  40699e:	4b11      	ldr	r3, [pc, #68]	; (4069e4 <system_init_flash+0x58>)
  4069a0:	4298      	cmp	r0, r3
  4069a2:	d915      	bls.n	4069d0 <system_init_flash+0x44>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  4069a4:	4b10      	ldr	r3, [pc, #64]	; (4069e8 <system_init_flash+0x5c>)
  4069a6:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4069a8:	bf94      	ite	ls
  4069aa:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4069ae:	4a0f      	ldrhi	r2, [pc, #60]	; (4069ec <system_init_flash+0x60>)
  4069b0:	4b0f      	ldr	r3, [pc, #60]	; (4069f0 <system_init_flash+0x64>)
  4069b2:	601a      	str	r2, [r3, #0]
  4069b4:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4069b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4069ba:	4b0d      	ldr	r3, [pc, #52]	; (4069f0 <system_init_flash+0x64>)
  4069bc:	601a      	str	r2, [r3, #0]
  4069be:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4069c0:	4a0c      	ldr	r2, [pc, #48]	; (4069f4 <system_init_flash+0x68>)
  4069c2:	4b0b      	ldr	r3, [pc, #44]	; (4069f0 <system_init_flash+0x64>)
  4069c4:	601a      	str	r2, [r3, #0]
  4069c6:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4069c8:	4a0b      	ldr	r2, [pc, #44]	; (4069f8 <system_init_flash+0x6c>)
  4069ca:	4b09      	ldr	r3, [pc, #36]	; (4069f0 <system_init_flash+0x64>)
  4069cc:	601a      	str	r2, [r3, #0]
  4069ce:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4069d0:	4a0a      	ldr	r2, [pc, #40]	; (4069fc <system_init_flash+0x70>)
  4069d2:	4b07      	ldr	r3, [pc, #28]	; (4069f0 <system_init_flash+0x64>)
  4069d4:	601a      	str	r2, [r3, #0]
  4069d6:	4770      	bx	lr
  4069d8:	01312cff 	.word	0x01312cff
  4069dc:	026259ff 	.word	0x026259ff
  4069e0:	039386ff 	.word	0x039386ff
  4069e4:	04c4b3ff 	.word	0x04c4b3ff
  4069e8:	05f5e0ff 	.word	0x05f5e0ff
  4069ec:	04000500 	.word	0x04000500
  4069f0:	400e0a00 	.word	0x400e0a00
  4069f4:	04000100 	.word	0x04000100
  4069f8:	04000200 	.word	0x04000200
  4069fc:	04000300 	.word	0x04000300

00406a00 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  406a00:	4b0a      	ldr	r3, [pc, #40]	; (406a2c <_sbrk+0x2c>)
  406a02:	681b      	ldr	r3, [r3, #0]
  406a04:	b153      	cbz	r3, 406a1c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  406a06:	4b09      	ldr	r3, [pc, #36]	; (406a2c <_sbrk+0x2c>)
  406a08:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  406a0a:	181a      	adds	r2, r3, r0
  406a0c:	4908      	ldr	r1, [pc, #32]	; (406a30 <_sbrk+0x30>)
  406a0e:	4291      	cmp	r1, r2
  406a10:	db08      	blt.n	406a24 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  406a12:	4610      	mov	r0, r2
  406a14:	4a05      	ldr	r2, [pc, #20]	; (406a2c <_sbrk+0x2c>)
  406a16:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  406a18:	4618      	mov	r0, r3
  406a1a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  406a1c:	4a05      	ldr	r2, [pc, #20]	; (406a34 <_sbrk+0x34>)
  406a1e:	4b03      	ldr	r3, [pc, #12]	; (406a2c <_sbrk+0x2c>)
  406a20:	601a      	str	r2, [r3, #0]
  406a22:	e7f0      	b.n	406a06 <_sbrk+0x6>
		return (caddr_t) -1;	
  406a24:	f04f 30ff 	mov.w	r0, #4294967295
}
  406a28:	4770      	bx	lr
  406a2a:	bf00      	nop
  406a2c:	20000dd4 	.word	0x20000dd4
  406a30:	20027ffc 	.word	0x20027ffc
  406a34:	20006078 	.word	0x20006078

00406a38 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  406a38:	f04f 30ff 	mov.w	r0, #4294967295
  406a3c:	4770      	bx	lr

00406a3e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  406a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  406a42:	604b      	str	r3, [r1, #4]

	return 0;
}
  406a44:	2000      	movs	r0, #0
  406a46:	4770      	bx	lr

00406a48 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  406a48:	2001      	movs	r0, #1
  406a4a:	4770      	bx	lr

00406a4c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  406a4c:	2000      	movs	r0, #0
  406a4e:	4770      	bx	lr

00406a50 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
  406a50:	b510      	push	{r4, lr}
  406a52:	4604      	mov	r4, r0
    ATCA_STATUS status = ATCA_SUCCESS;
    ATCACommand ca_cmd;

    ca_cmd = (ATCACommand)malloc(sizeof(atca_command));
  406a54:	2004      	movs	r0, #4
  406a56:	4b03      	ldr	r3, [pc, #12]	; (406a64 <newATCACommand+0x14>)
  406a58:	4798      	blx	r3
    ca_cmd->dt = device_type;
  406a5a:	7004      	strb	r4, [r0, #0]
    ca_cmd->clock_divider = 0;
  406a5c:	2200      	movs	r2, #0
  406a5e:	7042      	strb	r2, [r0, #1]
        free(ca_cmd);
        ca_cmd = NULL;
    }

    return ca_cmd;
}
  406a60:	bd10      	pop	{r4, pc}
  406a62:	bf00      	nop
  406a64:	0040d595 	.word	0x0040d595

00406a68 <deleteATCACommand>:

/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)    // destructor
{
  406a68:	b510      	push	{r4, lr}
  406a6a:	4604      	mov	r4, r0
    if (*ca_cmd)
  406a6c:	6800      	ldr	r0, [r0, #0]
  406a6e:	b108      	cbz	r0, 406a74 <deleteATCACommand+0xc>
    {
        free((void*)*ca_cmd);
  406a70:	4b02      	ldr	r3, [pc, #8]	; (406a7c <deleteATCACommand+0x14>)
  406a72:	4798      	blx	r3
    }

    *ca_cmd = NULL;
  406a74:	2300      	movs	r3, #0
  406a76:	6023      	str	r3, [r4, #0]
  406a78:	bd10      	pop	{r4, pc}
  406a7a:	bf00      	nop
  406a7c:	0040d5a5 	.word	0x0040d5a5

00406a80 <atGetExecTime>:
 *  \param[in] opcode  Opcode value of the command
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
  406a80:	b470      	push	{r4, r5, r6}
    ATCA_STATUS status = ATCA_SUCCESS;
    const device_execution_time_t *execution_times;
    uint8_t i, no_of_commands;


    switch (ca_cmd->dt)
  406a82:	780b      	ldrb	r3, [r1, #0]
  406a84:	2b03      	cmp	r3, #3
  406a86:	d818      	bhi.n	406aba <atGetExecTime+0x3a>
  406a88:	e8df f003 	tbb	[pc, r3]
  406a8c:	05021c0f 	.word	0x05021c0f
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
        break;

    case ATECC508A:
        execution_times = device_execution_time_508;
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
  406a90:	2614      	movs	r6, #20
        execution_times = device_execution_time_508;
  406a92:	4d1c      	ldr	r5, [pc, #112]	; (406b04 <atGetExecTime+0x84>)
  406a94:	e018      	b.n	406ac8 <atGetExecTime+0x48>
        break;

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
  406a96:	784b      	ldrb	r3, [r1, #1]
  406a98:	2b28      	cmp	r3, #40	; 0x28
  406a9a:	d030      	beq.n	406afe <atGetExecTime+0x7e>
        }
        else
        {
            // Assume default M0 clock divider
            execution_times = device_execution_time_608_m0;
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
  406a9c:	2616      	movs	r6, #22
  406a9e:	4a1a      	ldr	r2, [pc, #104]	; (406b08 <atGetExecTime+0x88>)
  406aa0:	4d1a      	ldr	r5, [pc, #104]	; (406b0c <atGetExecTime+0x8c>)
  406aa2:	2b68      	cmp	r3, #104	; 0x68
  406aa4:	bf18      	it	ne
  406aa6:	4615      	movne	r5, r2
  406aa8:	e00e      	b.n	406ac8 <atGetExecTime+0x48>
        no_of_commands = 0;
        execution_times = NULL;
        break;
    }

    ca_cmd->execution_time_msec = UNSUPPORTED;
  406aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  406aae:	804b      	strh	r3, [r1, #2]
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
  406ab0:	260e      	movs	r6, #14
        execution_times = device_execution_time_204;
  406ab2:	4d17      	ldr	r5, [pc, #92]	; (406b10 <atGetExecTime+0x90>)
  406ab4:	e00b      	b.n	406ace <atGetExecTime+0x4e>
        }
    }

    if (ca_cmd->execution_time_msec == UNSUPPORTED)
    {
        status = ATCA_BAD_OPCODE;
  406ab6:	20f2      	movs	r0, #242	; 0xf2
  406ab8:	e01f      	b.n	406afa <atGetExecTime+0x7a>
    ca_cmd->execution_time_msec = UNSUPPORTED;
  406aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
  406abe:	804b      	strh	r3, [r1, #2]
        status = ATCA_BAD_OPCODE;
  406ac0:	20f2      	movs	r0, #242	; 0xf2
    }

    return status;
  406ac2:	e01a      	b.n	406afa <atGetExecTime+0x7a>
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
  406ac4:	2613      	movs	r6, #19
        execution_times = device_execution_time_108;
  406ac6:	4d13      	ldr	r5, [pc, #76]	; (406b14 <atGetExecTime+0x94>)
    ca_cmd->execution_time_msec = UNSUPPORTED;
  406ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  406acc:	804b      	strh	r3, [r1, #2]
        if (execution_times[i].opcode == opcode)
  406ace:	782b      	ldrb	r3, [r5, #0]
  406ad0:	4283      	cmp	r3, r0
  406ad2:	d00a      	beq.n	406aea <atGetExecTime+0x6a>
  406ad4:	1d2a      	adds	r2, r5, #4
  406ad6:	2300      	movs	r3, #0
    for (i = 0; i < no_of_commands; i++)
  406ad8:	3301      	adds	r3, #1
  406ada:	b2db      	uxtb	r3, r3
  406adc:	42b3      	cmp	r3, r6
  406ade:	d2ea      	bcs.n	406ab6 <atGetExecTime+0x36>
        if (execution_times[i].opcode == opcode)
  406ae0:	4615      	mov	r5, r2
  406ae2:	f812 4b04 	ldrb.w	r4, [r2], #4
  406ae6:	4284      	cmp	r4, r0
  406ae8:	d1f6      	bne.n	406ad8 <atGetExecTime+0x58>
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
  406aea:	8868      	ldrh	r0, [r5, #2]
  406aec:	8048      	strh	r0, [r1, #2]
        status = ATCA_BAD_OPCODE;
  406aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
  406af2:	4298      	cmp	r0, r3
  406af4:	bf0c      	ite	eq
  406af6:	20f2      	moveq	r0, #242	; 0xf2
  406af8:	2000      	movne	r0, #0
}
  406afa:	bc70      	pop	{r4, r5, r6}
  406afc:	4770      	bx	lr
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
  406afe:	2616      	movs	r6, #22
            execution_times = device_execution_time_608_m1;
  406b00:	4d05      	ldr	r5, [pc, #20]	; (406b18 <atGetExecTime+0x98>)
  406b02:	e7e1      	b.n	406ac8 <atGetExecTime+0x48>
  406b04:	00416bfc 	.word	0x00416bfc
  406b08:	00416c4c 	.word	0x00416c4c
  406b0c:	00416cfc 	.word	0x00416cfc
  406b10:	00416bc4 	.word	0x00416bc4
  406b14:	00416b78 	.word	0x00416b78
  406b18:	00416ca4 	.word	0x00416ca4

00406b1c <atCRC>:
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
  406b1c:	b310      	cbz	r0, 406b64 <atCRC+0x48>
{
  406b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b22:	4684      	mov	ip, r0
  406b24:	468e      	mov	lr, r1
  406b26:	448c      	add	ip, r1
    for (counter = 0; counter < length; counter++)
  406b28:	2300      	movs	r3, #0
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
  406b2a:	f04f 0801 	mov.w	r8, #1
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
  406b2e:	f248 0705 	movw	r7, #32773	; 0x8005
            data_bit = (data[counter] & shift_register) ? 1 : 0;
  406b32:	f81e 6b01 	ldrb.w	r6, [lr], #1
  406b36:	2008      	movs	r0, #8
  406b38:	4641      	mov	r1, r8
            crc_bit = crc_register >> 15;
  406b3a:	0bdc      	lsrs	r4, r3, #15
            crc_register <<= 1;
  406b3c:	005b      	lsls	r3, r3, #1
  406b3e:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
  406b40:	420e      	tst	r6, r1
            if (data_bit != crc_bit)
  406b42:	bf14      	ite	ne
  406b44:	2501      	movne	r5, #1
  406b46:	2500      	moveq	r5, #0
  406b48:	42a5      	cmp	r5, r4
                crc_register ^= polynom;
  406b4a:	bf18      	it	ne
  406b4c:	407b      	eorne	r3, r7
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
  406b4e:	0049      	lsls	r1, r1, #1
  406b50:	b2c9      	uxtb	r1, r1
  406b52:	3801      	subs	r0, #1
  406b54:	d1f1      	bne.n	406b3a <atCRC+0x1e>
    for (counter = 0; counter < length; counter++)
  406b56:	45e6      	cmp	lr, ip
  406b58:	d1eb      	bne.n	406b32 <atCRC+0x16>
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
  406b5a:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
  406b5c:	0a1b      	lsrs	r3, r3, #8
  406b5e:	7053      	strb	r3, [r2, #1]
  406b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t crc_register = 0;
  406b64:	2300      	movs	r3, #0
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
  406b66:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
  406b68:	0a1b      	lsrs	r3, r3, #8
  406b6a:	7053      	strb	r3, [r2, #1]
  406b6c:	4770      	bx	lr
	...

00406b70 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
  406b70:	b508      	push	{r3, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
  406b72:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
  406b74:	7840      	ldrb	r0, [r0, #1]
  406b76:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
  406b78:	b2c0      	uxtb	r0, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
  406b7a:	180a      	adds	r2, r1, r0
  406b7c:	4b01      	ldr	r3, [pc, #4]	; (406b84 <atCalcCrc+0x14>)
  406b7e:	4798      	blx	r3
  406b80:	bd08      	pop	{r3, pc}
  406b82:	bf00      	nop
  406b84:	00406b1d 	.word	0x00406b1d

00406b88 <atGenKey>:
{
  406b88:	b508      	push	{r3, lr}
    packet->opcode = ATCA_GENKEY;
  406b8a:	2340      	movs	r3, #64	; 0x40
  406b8c:	708b      	strb	r3, [r1, #2]
    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
  406b8e:	78cb      	ldrb	r3, [r1, #3]
  406b90:	f013 0f10 	tst.w	r3, #16
  406b94:	d109      	bne.n	406baa <atGenKey+0x22>
        packet->txsize = GENKEY_COUNT;
  406b96:	2307      	movs	r3, #7
  406b98:	704b      	strb	r3, [r1, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
  406b9a:	234b      	movs	r3, #75	; 0x4b
  406b9c:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
    atCalcCrc(packet);
  406ba0:	4608      	mov	r0, r1
  406ba2:	4b05      	ldr	r3, [pc, #20]	; (406bb8 <atGenKey+0x30>)
  406ba4:	4798      	blx	r3
}
  406ba6:	2000      	movs	r0, #0
  406ba8:	bd08      	pop	{r3, pc}
        packet->txsize = GENKEY_COUNT_DATA;
  406baa:	230a      	movs	r3, #10
  406bac:	704b      	strb	r3, [r1, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
  406bae:	2304      	movs	r3, #4
  406bb0:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
  406bb4:	e7f4      	b.n	406ba0 <atGenKey+0x18>
  406bb6:	bf00      	nop
  406bb8:	00406b71 	.word	0x00406b71

00406bbc <atInfo>:
{
  406bbc:	b508      	push	{r3, lr}
    packet->opcode = ATCA_INFO;
  406bbe:	2330      	movs	r3, #48	; 0x30
  406bc0:	708b      	strb	r3, [r1, #2]
    packet->txsize = INFO_COUNT;
  406bc2:	2307      	movs	r3, #7
  406bc4:	704b      	strb	r3, [r1, #1]
    packet->rxsize = INFO_RSP_SIZE;
  406bc6:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
    atCalcCrc(packet);
  406bca:	4608      	mov	r0, r1
  406bcc:	4b01      	ldr	r3, [pc, #4]	; (406bd4 <atInfo+0x18>)
  406bce:	4798      	blx	r3
}
  406bd0:	2000      	movs	r0, #0
  406bd2:	bd08      	pop	{r3, pc}
  406bd4:	00406b71 	.word	0x00406b71

00406bd8 <atNonce>:
{
  406bd8:	b508      	push	{r3, lr}
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
  406bda:	78ca      	ldrb	r2, [r1, #3]
  406bdc:	f002 0303 	and.w	r3, r2, #3
    packet->opcode = ATCA_NONCE;
  406be0:	2016      	movs	r0, #22
  406be2:	7088      	strb	r0, [r1, #2]
    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
  406be4:	2b01      	cmp	r3, #1
  406be6:	d903      	bls.n	406bf0 <atNonce+0x18>
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
  406be8:	2b03      	cmp	r3, #3
  406bea:	d00b      	beq.n	406c04 <atNonce+0x2c>
        return ATCA_BAD_PARAM;
  406bec:	20e2      	movs	r0, #226	; 0xe2
}
  406bee:	bd08      	pop	{r3, pc}
        packet->txsize = NONCE_COUNT_SHORT;
  406bf0:	231b      	movs	r3, #27
  406bf2:	704b      	strb	r3, [r1, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG; // 32-byte output
  406bf4:	2323      	movs	r3, #35	; 0x23
  406bf6:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
  406bfa:	4608      	mov	r0, r1
    atCalcCrc(packet);
  406bfc:	4b06      	ldr	r3, [pc, #24]	; (406c18 <atNonce+0x40>)
  406bfe:	4798      	blx	r3
    return ATCA_SUCCESS;
  406c00:	2000      	movs	r0, #0
  406c02:	bd08      	pop	{r3, pc}
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
  406c04:	f012 0f20 	tst.w	r2, #32
            packet->txsize = NONCE_COUNT_LONG_64;
  406c08:	bf14      	ite	ne
  406c0a:	2347      	movne	r3, #71	; 0x47
            packet->txsize = NONCE_COUNT_LONG;
  406c0c:	2327      	moveq	r3, #39	; 0x27
  406c0e:	704b      	strb	r3, [r1, #1]
        packet->rxsize = NONCE_RSP_SIZE_SHORT; // Status-only output
  406c10:	2304      	movs	r3, #4
  406c12:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
  406c16:	e7f0      	b.n	406bfa <atNonce+0x22>
  406c18:	00406b71 	.word	0x00406b71

00406c1c <atRandom>:
{
  406c1c:	b508      	push	{r3, lr}
    packet->opcode = ATCA_RANDOM;
  406c1e:	231b      	movs	r3, #27
  406c20:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
  406c22:	2307      	movs	r3, #7
  406c24:	704b      	strb	r3, [r1, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
  406c26:	2323      	movs	r3, #35	; 0x23
  406c28:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
    atCalcCrc(packet);
  406c2c:	4608      	mov	r0, r1
  406c2e:	4b02      	ldr	r3, [pc, #8]	; (406c38 <atRandom+0x1c>)
  406c30:	4798      	blx	r3
}
  406c32:	2000      	movs	r0, #0
  406c34:	bd08      	pop	{r3, pc}
  406c36:	bf00      	nop
  406c38:	00406b71 	.word	0x00406b71

00406c3c <atRead>:
{
  406c3c:	b508      	push	{r3, lr}
    packet->opcode = ATCA_READ;
  406c3e:	2302      	movs	r3, #2
  406c40:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
  406c42:	2307      	movs	r3, #7
  406c44:	704b      	strb	r3, [r1, #1]
    if ((packet->param1 & 0x80) == 0)
  406c46:	f991 3003 	ldrsb.w	r3, [r1, #3]
  406c4a:	2b00      	cmp	r3, #0
        packet->rxsize = READ_4_RSP_SIZE;
  406c4c:	bfac      	ite	ge
  406c4e:	2307      	movge	r3, #7
        packet->rxsize = READ_32_RSP_SIZE;
  406c50:	2323      	movlt	r3, #35	; 0x23
  406c52:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
    atCalcCrc(packet);
  406c56:	4608      	mov	r0, r1
  406c58:	4b01      	ldr	r3, [pc, #4]	; (406c60 <atRead+0x24>)
  406c5a:	4798      	blx	r3
}
  406c5c:	2000      	movs	r0, #0
  406c5e:	bd08      	pop	{r3, pc}
  406c60:	00406b71 	.word	0x00406b71

00406c64 <atSign>:
{
  406c64:	b508      	push	{r3, lr}
    packet->opcode = ATCA_SIGN;
  406c66:	2341      	movs	r3, #65	; 0x41
  406c68:	708b      	strb	r3, [r1, #2]
    packet->txsize = SIGN_COUNT;
  406c6a:	2307      	movs	r3, #7
  406c6c:	704b      	strb	r3, [r1, #1]
    packet->rxsize = ATCA_RSP_SIZE_64;
  406c6e:	2343      	movs	r3, #67	; 0x43
  406c70:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
    atCalcCrc(packet);
  406c74:	4608      	mov	r0, r1
  406c76:	4b02      	ldr	r3, [pc, #8]	; (406c80 <atSign+0x1c>)
  406c78:	4798      	blx	r3
}
  406c7a:	2000      	movs	r0, #0
  406c7c:	bd08      	pop	{r3, pc}
  406c7e:	bf00      	nop
  406c80:	00406b71 	.word	0x00406b71

00406c84 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
  406c84:	b530      	push	{r4, r5, lr}
  406c86:	b083      	sub	sp, #12
  406c88:	4605      	mov	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
  406c8a:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
  406c8c:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
  406c8e:	b2e4      	uxtb	r4, r4
  406c90:	aa01      	add	r2, sp, #4
  406c92:	4601      	mov	r1, r0
  406c94:	4620      	mov	r0, r4
  406c96:	4b09      	ldr	r3, [pc, #36]	; (406cbc <atCheckCrc+0x38>)
  406c98:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
  406c9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
  406c9e:	5d2b      	ldrb	r3, [r5, r4]
  406ca0:	429a      	cmp	r2, r3
  406ca2:	d002      	beq.n	406caa <atCheckCrc+0x26>
  406ca4:	20e5      	movs	r0, #229	; 0xe5
}
  406ca6:	b003      	add	sp, #12
  406ca8:	bd30      	pop	{r4, r5, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
  406caa:	442c      	add	r4, r5
  406cac:	f89d 0005 	ldrb.w	r0, [sp, #5]
  406cb0:	7863      	ldrb	r3, [r4, #1]
  406cb2:	4298      	cmp	r0, r3
  406cb4:	bf14      	ite	ne
  406cb6:	20e5      	movne	r0, #229	; 0xe5
  406cb8:	2000      	moveq	r0, #0
  406cba:	e7f4      	b.n	406ca6 <atCheckCrc+0x22>
  406cbc:	00406b1d 	.word	0x00406b1d

00406cc0 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
  406cc0:	b510      	push	{r4, lr}
  406cc2:	b082      	sub	sp, #8
  406cc4:	4604      	mov	r4, r0
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
  406cc6:	4b18      	ldr	r3, [pc, #96]	; (406d28 <isATCAError+0x68>)
  406cc8:	681b      	ldr	r3, [r3, #0]
  406cca:	a902      	add	r1, sp, #8
  406ccc:	f841 3d04 	str.w	r3, [r1, #-4]!

    if (memcmp(data, good, 4) == 0)
  406cd0:	2204      	movs	r2, #4
  406cd2:	4b16      	ldr	r3, [pc, #88]	; (406d2c <isATCAError+0x6c>)
  406cd4:	4798      	blx	r3
  406cd6:	b310      	cbz	r0, 406d1e <isATCAError+0x5e>
    {
        return ATCA_SUCCESS;
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
  406cd8:	7823      	ldrb	r3, [r4, #0]
  406cda:	2b04      	cmp	r3, #4
  406cdc:	d001      	beq.n	406ce2 <isATCAError+0x22>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
  406cde:	2000      	movs	r0, #0
  406ce0:	e01e      	b.n	406d20 <isATCAError+0x60>
        switch (data[1])
  406ce2:	7863      	ldrb	r3, [r4, #1]
  406ce4:	2b07      	cmp	r3, #7
  406ce6:	d014      	beq.n	406d12 <isATCAError+0x52>
  406ce8:	d807      	bhi.n	406cfa <isATCAError+0x3a>
  406cea:	2b03      	cmp	r3, #3
  406cec:	d00d      	beq.n	406d0a <isATCAError+0x4a>
  406cee:	2b05      	cmp	r3, #5
  406cf0:	d00d      	beq.n	406d0e <isATCAError+0x4e>
  406cf2:	2b01      	cmp	r3, #1
  406cf4:	d016      	beq.n	406d24 <isATCAError+0x64>
            return ATCA_GEN_FAIL;
  406cf6:	20e1      	movs	r0, #225	; 0xe1
  406cf8:	e012      	b.n	406d20 <isATCAError+0x60>
        switch (data[1])
  406cfa:	2b11      	cmp	r3, #17
  406cfc:	d00b      	beq.n	406d16 <isATCAError+0x56>
  406cfe:	2bff      	cmp	r3, #255	; 0xff
  406d00:	d00b      	beq.n	406d1a <isATCAError+0x5a>
  406d02:	2b0f      	cmp	r3, #15
  406d04:	d1f7      	bne.n	406cf6 <isATCAError+0x36>
            return ATCA_EXECUTION_ERROR;
  406d06:	20f4      	movs	r0, #244	; 0xf4
  406d08:	e00a      	b.n	406d20 <isATCAError+0x60>
            return ATCA_PARSE_ERROR;
  406d0a:	20d2      	movs	r0, #210	; 0xd2
  406d0c:	e008      	b.n	406d20 <isATCAError+0x60>
            return ATCA_STATUS_ECC;
  406d0e:	20d6      	movs	r0, #214	; 0xd6
  406d10:	e006      	b.n	406d20 <isATCAError+0x60>
            return ATCA_STATUS_SELFTEST_ERROR;
  406d12:	20d7      	movs	r0, #215	; 0xd7
  406d14:	e004      	b.n	406d20 <isATCAError+0x60>
            return ATCA_WAKE_SUCCESS;
  406d16:	20f3      	movs	r0, #243	; 0xf3
  406d18:	e002      	b.n	406d20 <isATCAError+0x60>
            return ATCA_STATUS_CRC;
  406d1a:	20d4      	movs	r0, #212	; 0xd4
  406d1c:	e000      	b.n	406d20 <isATCAError+0x60>
        return ATCA_SUCCESS;
  406d1e:	2000      	movs	r0, #0
    }
}
  406d20:	b002      	add	sp, #8
  406d22:	bd10      	pop	{r4, pc}
            return ATCA_CHECKMAC_VERIFY_FAILED;
  406d24:	20d1      	movs	r0, #209	; 0xd1
  406d26:	e7fb      	b.n	406d20 <isATCAError+0x60>
  406d28:	00416b74 	.word	0x00416b74
  406d2c:	0040dbe1 	.word	0x0040dbe1

00406d30 <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
  406d30:	b538      	push	{r3, r4, r5, lr}
    ATCADevice ca_dev = NULL;

    if (cfg == NULL)
  406d32:	b1b0      	cbz	r0, 406d62 <newATCADevice+0x32>
  406d34:	4605      	mov	r5, r0
    {
        return NULL;
    }

    ca_dev = (ATCADevice)malloc(sizeof(struct atca_device));
  406d36:	2008      	movs	r0, #8
  406d38:	4b0b      	ldr	r3, [pc, #44]	; (406d68 <newATCADevice+0x38>)
  406d3a:	4798      	blx	r3
  406d3c:	4604      	mov	r4, r0
    ca_dev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
  406d3e:	7868      	ldrb	r0, [r5, #1]
  406d40:	4b0a      	ldr	r3, [pc, #40]	; (406d6c <newATCADevice+0x3c>)
  406d42:	4798      	blx	r3
  406d44:	6020      	str	r0, [r4, #0]
    ca_dev->mIface    = (ATCAIface)newATCAIface(cfg);
  406d46:	4628      	mov	r0, r5
  406d48:	4b09      	ldr	r3, [pc, #36]	; (406d70 <newATCADevice+0x40>)
  406d4a:	4798      	blx	r3
  406d4c:	6060      	str	r0, [r4, #4]

    if (ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
  406d4e:	6823      	ldr	r3, [r4, #0]
  406d50:	b113      	cbz	r3, 406d58 <newATCADevice+0x28>
  406d52:	b108      	cbz	r0, 406d58 <newATCADevice+0x28>
        free(ca_dev);
        ca_dev = NULL;
    }

    return ca_dev;
}
  406d54:	4620      	mov	r0, r4
  406d56:	bd38      	pop	{r3, r4, r5, pc}
        free(ca_dev);
  406d58:	4620      	mov	r0, r4
  406d5a:	4b06      	ldr	r3, [pc, #24]	; (406d74 <newATCADevice+0x44>)
  406d5c:	4798      	blx	r3
        ca_dev = NULL;
  406d5e:	2400      	movs	r4, #0
  406d60:	e7f8      	b.n	406d54 <newATCADevice+0x24>
        return NULL;
  406d62:	2400      	movs	r4, #0
  406d64:	e7f6      	b.n	406d54 <newATCADevice+0x24>
  406d66:	bf00      	nop
  406d68:	0040d595 	.word	0x0040d595
  406d6c:	00406a51 	.word	0x00406a51
  406d70:	00406e81 	.word	0x00406e81
  406d74:	0040d5a5 	.word	0x0040d5a5

00406d78 <atGetCommands>:
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    return dev->mCommands;
}
  406d78:	6800      	ldr	r0, [r0, #0]
  406d7a:	4770      	bx	lr

00406d7c <atGetIFace>:
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    return dev->mIface;
}
  406d7c:	6840      	ldr	r0, [r0, #4]
  406d7e:	4770      	bx	lr

00406d80 <deleteATCADevice>:
/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 *
 */
void deleteATCADevice(ATCADevice *ca_dev)   // destructor
{
  406d80:	b538      	push	{r3, r4, r5, lr}
  406d82:	4604      	mov	r4, r0
    struct atca_device *dev = *ca_dev;
  406d84:	6805      	ldr	r5, [r0, #0]

    if (*ca_dev)
  406d86:	b145      	cbz	r5, 406d9a <deleteATCADevice+0x1a>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
  406d88:	4628      	mov	r0, r5
  406d8a:	4b05      	ldr	r3, [pc, #20]	; (406da0 <deleteATCADevice+0x20>)
  406d8c:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
  406d8e:	1d28      	adds	r0, r5, #4
  406d90:	4b04      	ldr	r3, [pc, #16]	; (406da4 <deleteATCADevice+0x24>)
  406d92:	4798      	blx	r3
        free((void*)*ca_dev);
  406d94:	6820      	ldr	r0, [r4, #0]
  406d96:	4b04      	ldr	r3, [pc, #16]	; (406da8 <deleteATCADevice+0x28>)
  406d98:	4798      	blx	r3
    }

    *ca_dev = NULL;
  406d9a:	2300      	movs	r3, #0
  406d9c:	6023      	str	r3, [r4, #0]
  406d9e:	bd38      	pop	{r3, r4, r5, pc}
  406da0:	00406a69 	.word	0x00406a69
  406da4:	00406df9 	.word	0x00406df9
  406da8:	0040d5a5 	.word	0x0040d5a5

00406dac <atsend>:
 * \param[in] txdata    pointer to the data to be transmitted to the device
 * \param[in] txlength  The total number of bytes to be transmitted to the device
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
  406dac:	b508      	push	{r3, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
  406dae:	6903      	ldr	r3, [r0, #16]
  406db0:	4798      	blx	r3
}
  406db2:	bd08      	pop	{r3, pc}

00406db4 <atreceive>:
 * \param[in] rxdata   pointer to the data to be stored from device
 * \param[in] rxlength  pointer to holds the number of bytes to be received from device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
  406db4:	b508      	push	{r3, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
  406db6:	6943      	ldr	r3, [r0, #20]
  406db8:	4798      	blx	r3
}
  406dba:	bd08      	pop	{r3, pc}

00406dbc <atwake>:
 *  User should not call this function directly,instead  use atcab_wakeup() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
  406dbc:	b508      	push	{r3, lr}
    return ca_iface->atwake(ca_iface);
  406dbe:	6983      	ldr	r3, [r0, #24]
  406dc0:	4798      	blx	r3
}
  406dc2:	bd08      	pop	{r3, pc}

00406dc4 <atidle>:
 *  User should not call this function directly,instead  use atcab_idle() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
  406dc4:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
  406dc6:	69c3      	ldr	r3, [r0, #28]
  406dc8:	4798      	blx	r3
  406dca:	4604      	mov	r4, r0
    atca_delay_ms(1);
  406dcc:	2001      	movs	r0, #1
  406dce:	4b02      	ldr	r3, [pc, #8]	; (406dd8 <atidle+0x14>)
  406dd0:	4798      	blx	r3
    return status;
}
  406dd2:	4620      	mov	r0, r4
  406dd4:	bd10      	pop	{r4, pc}
  406dd6:	bf00      	nop
  406dd8:	00407f5d 	.word	0x00407f5d

00406ddc <atsleep>:
 *  User should not call this function directly,instead  use atcab_sleep() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsleep(ATCAIface ca_iface)
{
  406ddc:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atsleep(ca_iface);
  406dde:	6a03      	ldr	r3, [r0, #32]
  406de0:	4798      	blx	r3
  406de2:	4604      	mov	r4, r0
    atca_delay_ms(1);
  406de4:	2001      	movs	r0, #1
  406de6:	4b02      	ldr	r3, [pc, #8]	; (406df0 <atsleep+0x14>)
  406de8:	4798      	blx	r3
    return status;
}
  406dea:	4620      	mov	r0, r4
  406dec:	bd10      	pop	{r4, pc}
  406dee:	bf00      	nop
  406df0:	00407f5d 	.word	0x00407f5d

00406df4 <atgetifacecfg>:
 * \return returns the pointer to ATCAIfaceCfg.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
}
  406df4:	6840      	ldr	r0, [r0, #4]
  406df6:	4770      	bx	lr

00406df8 <deleteATCAIface>:

/** \brief destructor for ATCAIface objects
 * \param[in] ca_iface  points to the logical configuration for the interface
 */
void deleteATCAIface(ATCAIface *ca_iface) // destructor
{
  406df8:	b510      	push	{r4, lr}
  406dfa:	4604      	mov	r4, r0
    if (*ca_iface)
  406dfc:	6803      	ldr	r3, [r0, #0]
  406dfe:	b133      	cbz	r3, 406e0e <deleteATCAIface+0x16>
    {
        hal_iface_release( (*ca_iface)->mType, (*ca_iface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
  406e00:	6a59      	ldr	r1, [r3, #36]	; 0x24
  406e02:	7818      	ldrb	r0, [r3, #0]
  406e04:	4b03      	ldr	r3, [pc, #12]	; (406e14 <deleteATCAIface+0x1c>)
  406e06:	4798      	blx	r3
        free((void*)*ca_iface);
  406e08:	6820      	ldr	r0, [r4, #0]
  406e0a:	4b03      	ldr	r3, [pc, #12]	; (406e18 <deleteATCAIface+0x20>)
  406e0c:	4798      	blx	r3
    }

    *ca_iface = NULL;
  406e0e:	2300      	movs	r3, #0
  406e10:	6023      	str	r3, [r4, #0]
  406e12:	bd10      	pop	{r4, pc}
  406e14:	00407651 	.word	0x00407651
  406e18:	0040d5a5 	.word	0x0040d5a5

00406e1c <_atinit>:
}

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
  406e1c:	b538      	push	{r3, r4, r5, lr}
  406e1e:	4604      	mov	r4, r0
  406e20:	460d      	mov	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
  406e22:	6840      	ldr	r0, [r0, #4]
  406e24:	4b09      	ldr	r3, [pc, #36]	; (406e4c <_atinit+0x30>)
  406e26:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
  406e28:	682b      	ldr	r3, [r5, #0]
  406e2a:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
  406e2c:	686b      	ldr	r3, [r5, #4]
  406e2e:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
  406e30:	68ab      	ldr	r3, [r5, #8]
  406e32:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
  406e34:	68eb      	ldr	r3, [r5, #12]
  406e36:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
  406e38:	692b      	ldr	r3, [r5, #16]
  406e3a:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
  406e3c:	69ab      	ldr	r3, [r5, #24]
  406e3e:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
  406e40:	696b      	ldr	r3, [r5, #20]
  406e42:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
  406e44:	6a2b      	ldr	r3, [r5, #32]
  406e46:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
  406e48:	2000      	movs	r0, #0
  406e4a:	bd38      	pop	{r3, r4, r5, pc}
  406e4c:	00407601 	.word	0x00407601

00406e50 <atinit>:
{
  406e50:	b510      	push	{r4, lr}
  406e52:	b08a      	sub	sp, #40	; 0x28
  406e54:	4604      	mov	r4, r0
    _atinit(ca_iface, &hal);
  406e56:	a901      	add	r1, sp, #4
  406e58:	4b08      	ldr	r3, [pc, #32]	; (406e7c <atinit+0x2c>)
  406e5a:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
  406e5c:	68a3      	ldr	r3, [r4, #8]
  406e5e:	6861      	ldr	r1, [r4, #4]
  406e60:	a801      	add	r0, sp, #4
  406e62:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
  406e64:	4603      	mov	r3, r0
  406e66:	b110      	cbz	r0, 406e6e <atinit+0x1e>
}
  406e68:	4618      	mov	r0, r3
  406e6a:	b00a      	add	sp, #40	; 0x28
  406e6c:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
  406e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e70:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
  406e72:	68e3      	ldr	r3, [r4, #12]
  406e74:	4620      	mov	r0, r4
  406e76:	4798      	blx	r3
  406e78:	4603      	mov	r3, r0
  406e7a:	e7f5      	b.n	406e68 <atinit+0x18>
  406e7c:	00406e1d 	.word	0x00406e1d

00406e80 <newATCAIface>:
{
  406e80:	b538      	push	{r3, r4, r5, lr}
  406e82:	4605      	mov	r5, r0
    ca_iface = (ATCAIface)malloc(sizeof(struct atca_iface));
  406e84:	2028      	movs	r0, #40	; 0x28
  406e86:	4b08      	ldr	r3, [pc, #32]	; (406ea8 <newATCAIface+0x28>)
  406e88:	4798      	blx	r3
  406e8a:	4604      	mov	r4, r0
    ca_iface->mType = cfg->iface_type;
  406e8c:	782b      	ldrb	r3, [r5, #0]
  406e8e:	7003      	strb	r3, [r0, #0]
    ca_iface->mIfaceCFG = cfg;
  406e90:	6045      	str	r5, [r0, #4]
    if (atinit(ca_iface) != ATCA_SUCCESS)
  406e92:	4b06      	ldr	r3, [pc, #24]	; (406eac <newATCAIface+0x2c>)
  406e94:	4798      	blx	r3
  406e96:	b908      	cbnz	r0, 406e9c <newATCAIface+0x1c>
}
  406e98:	4620      	mov	r0, r4
  406e9a:	bd38      	pop	{r3, r4, r5, pc}
        free(ca_iface);
  406e9c:	4620      	mov	r0, r4
  406e9e:	4b04      	ldr	r3, [pc, #16]	; (406eb0 <newATCAIface+0x30>)
  406ea0:	4798      	blx	r3
        ca_iface = NULL;
  406ea2:	2400      	movs	r4, #0
    return ca_iface;
  406ea4:	e7f8      	b.n	406e98 <newATCAIface+0x18>
  406ea6:	bf00      	nop
  406ea8:	0040d595 	.word	0x0040d595
  406eac:	00406e51 	.word	0x00406e51
  406eb0:	0040d5a5 	.word	0x0040d5a5

00406eb4 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
  406eb4:	b508      	push	{r3, lr}
    deleteATCADevice(&_gDevice);
  406eb6:	4802      	ldr	r0, [pc, #8]	; (406ec0 <atcab_release+0xc>)
  406eb8:	4b02      	ldr	r3, [pc, #8]	; (406ec4 <atcab_release+0x10>)
  406eba:	4798      	blx	r3
    return ATCA_SUCCESS;
}
  406ebc:	2000      	movs	r0, #0
  406ebe:	bd08      	pop	{r3, pc}
  406ec0:	20000dd8 	.word	0x20000dd8
  406ec4:	00406d81 	.word	0x00406d81

00406ec8 <atcab_init>:
{
  406ec8:	b510      	push	{r4, lr}
  406eca:	b082      	sub	sp, #8
  406ecc:	4604      	mov	r4, r0
    if (_gDevice)       // if there's already a device created, release it
  406ece:	4b17      	ldr	r3, [pc, #92]	; (406f2c <atcab_init+0x64>)
  406ed0:	681b      	ldr	r3, [r3, #0]
  406ed2:	b10b      	cbz	r3, 406ed8 <atcab_init+0x10>
        atcab_release();
  406ed4:	4b16      	ldr	r3, [pc, #88]	; (406f30 <atcab_init+0x68>)
  406ed6:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
  406ed8:	4620      	mov	r0, r4
  406eda:	4b16      	ldr	r3, [pc, #88]	; (406f34 <atcab_init+0x6c>)
  406edc:	4798      	blx	r3
  406ede:	4b13      	ldr	r3, [pc, #76]	; (406f2c <atcab_init+0x64>)
  406ee0:	6018      	str	r0, [r3, #0]
    if ((_gDevice == NULL) || (_gDevice->mIface == NULL) || (_gDevice->mCommands == NULL))
  406ee2:	b1e8      	cbz	r0, 406f20 <atcab_init+0x58>
  406ee4:	6843      	ldr	r3, [r0, #4]
  406ee6:	b1eb      	cbz	r3, 406f24 <atcab_init+0x5c>
  406ee8:	6803      	ldr	r3, [r0, #0]
  406eea:	b1eb      	cbz	r3, 406f28 <atcab_init+0x60>
    if (cfg->devtype == ATECC608A)
  406eec:	7862      	ldrb	r2, [r4, #1]
  406eee:	2a03      	cmp	r2, #3
  406ef0:	d003      	beq.n	406efa <atcab_init+0x32>
    return ATCA_SUCCESS;
  406ef2:	2300      	movs	r3, #0
}
  406ef4:	4618      	mov	r0, r3
  406ef6:	b002      	add	sp, #8
  406ef8:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
  406efa:	2201      	movs	r2, #1
  406efc:	9200      	str	r2, [sp, #0]
  406efe:	4413      	add	r3, r2
  406f00:	2213      	movs	r2, #19
  406f02:	2100      	movs	r1, #0
  406f04:	4608      	mov	r0, r1
  406f06:	4c0c      	ldr	r4, [pc, #48]	; (406f38 <atcab_init+0x70>)
  406f08:	47a0      	blx	r4
  406f0a:	4603      	mov	r3, r0
  406f0c:	2800      	cmp	r0, #0
  406f0e:	d1f1      	bne.n	406ef4 <atcab_init+0x2c>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
  406f10:	4a06      	ldr	r2, [pc, #24]	; (406f2c <atcab_init+0x64>)
  406f12:	6812      	ldr	r2, [r2, #0]
  406f14:	6811      	ldr	r1, [r2, #0]
  406f16:	784a      	ldrb	r2, [r1, #1]
  406f18:	f022 0207 	bic.w	r2, r2, #7
  406f1c:	704a      	strb	r2, [r1, #1]
  406f1e:	e7e9      	b.n	406ef4 <atcab_init+0x2c>
        return ATCA_GEN_FAIL;  // Device creation failed
  406f20:	23e1      	movs	r3, #225	; 0xe1
  406f22:	e7e7      	b.n	406ef4 <atcab_init+0x2c>
  406f24:	23e1      	movs	r3, #225	; 0xe1
  406f26:	e7e5      	b.n	406ef4 <atcab_init+0x2c>
  406f28:	23e1      	movs	r3, #225	; 0xe1
  406f2a:	e7e3      	b.n	406ef4 <atcab_init+0x2c>
  406f2c:	20000dd8 	.word	0x20000dd8
  406f30:	00406eb5 	.word	0x00406eb5
  406f34:	00406d31 	.word	0x00406d31
  406f38:	00407995 	.word	0x00407995

00406f3c <atcab_get_device>:
 *  \return instance of global ATCADevice
 */
ATCADevice atcab_get_device(void)
{
    return _gDevice;
}
  406f3c:	4b01      	ldr	r3, [pc, #4]	; (406f44 <atcab_get_device+0x8>)
  406f3e:	6818      	ldr	r0, [r3, #0]
  406f40:	4770      	bx	lr
  406f42:	bf00      	nop
  406f44:	20000dd8 	.word	0x20000dd8

00406f48 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_wakeup(void)
{
  406f48:	b508      	push	{r3, lr}
    if (_gDevice == NULL)
  406f4a:	4b04      	ldr	r3, [pc, #16]	; (406f5c <atcab_wakeup+0x14>)
  406f4c:	681b      	ldr	r3, [r3, #0]
  406f4e:	b11b      	cbz	r3, 406f58 <atcab_wakeup+0x10>
    {
        return ATCA_GEN_FAIL;
    }

    return atwake(_gDevice->mIface);
  406f50:	6858      	ldr	r0, [r3, #4]
  406f52:	4b03      	ldr	r3, [pc, #12]	; (406f60 <atcab_wakeup+0x18>)
  406f54:	4798      	blx	r3
  406f56:	bd08      	pop	{r3, pc}
        return ATCA_GEN_FAIL;
  406f58:	20e1      	movs	r0, #225	; 0xe1
}
  406f5a:	bd08      	pop	{r3, pc}
  406f5c:	20000dd8 	.word	0x20000dd8
  406f60:	00406dbd 	.word	0x00406dbd

00406f64 <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_idle(void)
{
  406f64:	b508      	push	{r3, lr}
    if (_gDevice == NULL)
  406f66:	4b04      	ldr	r3, [pc, #16]	; (406f78 <atcab_idle+0x14>)
  406f68:	681b      	ldr	r3, [r3, #0]
  406f6a:	b11b      	cbz	r3, 406f74 <atcab_idle+0x10>
    {
        return ATCA_GEN_FAIL;
    }

    return atidle(_gDevice->mIface);
  406f6c:	6858      	ldr	r0, [r3, #4]
  406f6e:	4b03      	ldr	r3, [pc, #12]	; (406f7c <atcab_idle+0x18>)
  406f70:	4798      	blx	r3
  406f72:	bd08      	pop	{r3, pc}
        return ATCA_GEN_FAIL;
  406f74:	20e1      	movs	r0, #225	; 0xe1
}
  406f76:	bd08      	pop	{r3, pc}
  406f78:	20000dd8 	.word	0x20000dd8
  406f7c:	00406dc5 	.word	0x00406dc5

00406f80 <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sleep(void)
{
  406f80:	b508      	push	{r3, lr}
    if (_gDevice == NULL)
  406f82:	4b04      	ldr	r3, [pc, #16]	; (406f94 <atcab_sleep+0x14>)
  406f84:	681b      	ldr	r3, [r3, #0]
  406f86:	b11b      	cbz	r3, 406f90 <atcab_sleep+0x10>
    {
        return ATCA_GEN_FAIL;
    }

    return atsleep(_gDevice->mIface);
  406f88:	6858      	ldr	r0, [r3, #4]
  406f8a:	4b03      	ldr	r3, [pc, #12]	; (406f98 <atcab_sleep+0x18>)
  406f8c:	4798      	blx	r3
  406f8e:	bd08      	pop	{r3, pc}
        return ATCA_GEN_FAIL;
  406f90:	20e1      	movs	r0, #225	; 0xe1
}
  406f92:	bd08      	pop	{r3, pc}
  406f94:	20000dd8 	.word	0x20000dd8
  406f98:	00406ddd 	.word	0x00406ddd

00406f9c <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS _atcab_exit(void)
{
  406f9c:	b508      	push	{r3, lr}
    return atcab_idle();
  406f9e:	4b01      	ldr	r3, [pc, #4]	; (406fa4 <_atcab_exit+0x8>)
  406fa0:	4798      	blx	r3
}
  406fa2:	bd08      	pop	{r3, pc}
  406fa4:	00406f65 	.word	0x00406f65

00406fa8 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
  406fa8:	b410      	push	{r4}
  406faa:	9c01      	ldr	r4, [sp, #4]
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
  406fac:	b144      	cbz	r4, 406fc0 <atcab_get_addr+0x18>
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
  406fae:	f010 0003 	ands.w	r0, r0, #3
  406fb2:	d007      	beq.n	406fc4 <atcab_get_addr+0x1c>
  406fb4:	2802      	cmp	r0, #2
  406fb6:	d00c      	beq.n	406fd2 <atcab_get_addr+0x2a>
  406fb8:	2801      	cmp	r0, #1
  406fba:	d003      	beq.n	406fc4 <atcab_get_addr+0x1c>
    {
        return ATCA_BAD_PARAM;
  406fbc:	20e2      	movs	r0, #226	; 0xe2
  406fbe:	e010      	b.n	406fe2 <atcab_get_addr+0x3a>
        return ATCA_BAD_PARAM;
  406fc0:	20e2      	movs	r0, #226	; 0xe2
  406fc2:	e00e      	b.n	406fe2 <atcab_get_addr+0x3a>
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
            *addr |= offset;
  406fc4:	f003 0307 	and.w	r3, r3, #7
  406fc8:	ea43 02c2 	orr.w	r2, r3, r2, lsl #3
  406fcc:	8022      	strh	r2, [r4, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
  406fce:	2000      	movs	r0, #0
  406fd0:	e007      	b.n	406fe2 <atcab_get_addr+0x3a>
            *addr  |= offset;
  406fd2:	f003 0307 	and.w	r3, r3, #7
  406fd6:	ea43 01c1 	orr.w	r1, r3, r1, lsl #3
            *addr |= block << 8;
  406fda:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  406fde:	8022      	strh	r2, [r4, #0]
    return status;
  406fe0:	2000      	movs	r0, #0
}
  406fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
  406fe6:	4770      	bx	lr

00406fe8 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
  406fe8:	4613      	mov	r3, r2
  406fea:	2a00      	cmp	r2, #0
  406fec:	d03c      	beq.n	407068 <atcab_get_zone_size+0x80>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
  406fee:	4a1f      	ldr	r2, [pc, #124]	; (40706c <atcab_get_zone_size+0x84>)
  406ff0:	6812      	ldr	r2, [r2, #0]
  406ff2:	6852      	ldr	r2, [r2, #4]
  406ff4:	6852      	ldr	r2, [r2, #4]
  406ff6:	7852      	ldrb	r2, [r2, #1]
  406ff8:	b992      	cbnz	r2, 407020 <atcab_get_zone_size+0x38>
    {
        switch (zone)
  406ffa:	2801      	cmp	r0, #1
  406ffc:	d008      	beq.n	407010 <atcab_get_zone_size+0x28>
  406ffe:	b118      	cbz	r0, 407008 <atcab_get_zone_size+0x20>
  407000:	2802      	cmp	r0, #2
  407002:	d009      	beq.n	407018 <atcab_get_zone_size+0x30>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
  407004:	20e2      	movs	r0, #226	; 0xe2
  407006:	4770      	bx	lr
        case ATCA_ZONE_CONFIG: *size = 88; break;
  407008:	2258      	movs	r2, #88	; 0x58
  40700a:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  40700c:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
  40700e:	4770      	bx	lr
        case ATCA_ZONE_OTP:    *size = 64; break;
  407010:	2240      	movs	r2, #64	; 0x40
  407012:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  407014:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
  407016:	4770      	bx	lr
        case ATCA_ZONE_DATA:   *size = 32; break;
  407018:	2220      	movs	r2, #32
  40701a:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  40701c:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
  40701e:	4770      	bx	lr
        }
    }
    else
    {
        switch (zone)
  407020:	2801      	cmp	r0, #1
  407022:	d008      	beq.n	407036 <atcab_get_zone_size+0x4e>
  407024:	b118      	cbz	r0, 40702e <atcab_get_zone_size+0x46>
  407026:	2802      	cmp	r0, #2
  407028:	d009      	beq.n	40703e <atcab_get_zone_size+0x56>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
  40702a:	20e2      	movs	r0, #226	; 0xe2
  40702c:	4770      	bx	lr
        case ATCA_ZONE_CONFIG: *size = 128; break;
  40702e:	2280      	movs	r2, #128	; 0x80
  407030:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  407032:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
  407034:	4770      	bx	lr
        case ATCA_ZONE_OTP:    *size = 64; break;
  407036:	2240      	movs	r2, #64	; 0x40
  407038:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  40703a:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
  40703c:	4770      	bx	lr
            if (slot < 8)
  40703e:	2907      	cmp	r1, #7
  407040:	d905      	bls.n	40704e <atcab_get_zone_size+0x66>
            else if (slot == 8)
  407042:	2908      	cmp	r1, #8
  407044:	d007      	beq.n	407056 <atcab_get_zone_size+0x6e>
            else if (slot < 16)
  407046:	290f      	cmp	r1, #15
  407048:	d90a      	bls.n	407060 <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
  40704a:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
  40704c:	4770      	bx	lr
                *size = 36;
  40704e:	2224      	movs	r2, #36	; 0x24
  407050:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  407052:	2000      	movs	r0, #0
  407054:	4770      	bx	lr
                *size = 416;
  407056:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
  40705a:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  40705c:	2000      	movs	r0, #0
  40705e:	4770      	bx	lr
                *size = 72;
  407060:	2248      	movs	r2, #72	; 0x48
  407062:	601a      	str	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
  407064:	2000      	movs	r0, #0
  407066:	4770      	bx	lr
        return ATCA_BAD_PARAM;
  407068:	20e2      	movs	r0, #226	; 0xe2
  40706a:	4770      	bx	lr
  40706c:	20000dd8 	.word	0x20000dd8

00407070 <atcab_execute_command>:
 *
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_execute_command(ATCAPacket* packet)
{
  407070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407072:	4605      	mov	r5, r0
    ATCA_STATUS status;
    ATCACommand ca_cmd = _gDevice->mCommands;
  407074:	4b1d      	ldr	r3, [pc, #116]	; (4070ec <atcab_execute_command+0x7c>)
  407076:	681b      	ldr	r3, [r3, #0]
  407078:	681e      	ldr	r6, [r3, #0]
    ATCAIface ca_iface = _gDevice->mIface;
  40707a:	685f      	ldr	r7, [r3, #4]

    if ((status = atGetExecTime(packet->opcode, ca_cmd)) != ATCA_SUCCESS)
  40707c:	4631      	mov	r1, r6
  40707e:	7880      	ldrb	r0, [r0, #2]
  407080:	4b1b      	ldr	r3, [pc, #108]	; (4070f0 <atcab_execute_command+0x80>)
  407082:	4798      	blx	r3
  407084:	4604      	mov	r4, r0
  407086:	b108      	cbz	r0, 40708c <atcab_execute_command+0x1c>
    }
    while (0);

    _atcab_exit();
    return status;
  407088:	4620      	mov	r0, r4
  40708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
  40708c:	4b19      	ldr	r3, [pc, #100]	; (4070f4 <atcab_execute_command+0x84>)
  40708e:	4798      	blx	r3
  407090:	4604      	mov	r4, r0
  407092:	b110      	cbz	r0, 40709a <atcab_execute_command+0x2a>
    _atcab_exit();
  407094:	4b18      	ldr	r3, [pc, #96]	; (4070f8 <atcab_execute_command+0x88>)
  407096:	4798      	blx	r3
    return status;
  407098:	e7f6      	b.n	407088 <atcab_execute_command+0x18>
        if ((status = atsend(ca_iface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
  40709a:	786a      	ldrb	r2, [r5, #1]
  40709c:	4629      	mov	r1, r5
  40709e:	4638      	mov	r0, r7
  4070a0:	4b16      	ldr	r3, [pc, #88]	; (4070fc <atcab_execute_command+0x8c>)
  4070a2:	4798      	blx	r3
  4070a4:	4604      	mov	r4, r0
  4070a6:	2800      	cmp	r0, #0
  4070a8:	d1f4      	bne.n	407094 <atcab_execute_command+0x24>
        atca_delay_ms(ca_cmd->execution_time_msec);
  4070aa:	8870      	ldrh	r0, [r6, #2]
  4070ac:	4b14      	ldr	r3, [pc, #80]	; (407100 <atcab_execute_command+0x90>)
  4070ae:	4798      	blx	r3
        if ((status = atreceive(ca_iface, packet->data, &(packet->rxsize))) != ATCA_SUCCESS)
  4070b0:	1dae      	adds	r6, r5, #6
  4070b2:	f105 028a 	add.w	r2, r5, #138	; 0x8a
  4070b6:	4631      	mov	r1, r6
  4070b8:	4638      	mov	r0, r7
  4070ba:	4b12      	ldr	r3, [pc, #72]	; (407104 <atcab_execute_command+0x94>)
  4070bc:	4798      	blx	r3
  4070be:	4604      	mov	r4, r0
  4070c0:	2800      	cmp	r0, #0
  4070c2:	d1e7      	bne.n	407094 <atcab_execute_command+0x24>
        if (packet->rxsize < 4)
  4070c4:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
  4070c8:	2b03      	cmp	r3, #3
  4070ca:	d804      	bhi.n	4070d6 <atcab_execute_command+0x66>
                status = ATCA_RX_NO_RESPONSE;
  4070cc:	2b00      	cmp	r3, #0
  4070ce:	bf14      	ite	ne
  4070d0:	24e6      	movne	r4, #230	; 0xe6
  4070d2:	24e7      	moveq	r4, #231	; 0xe7
  4070d4:	e7de      	b.n	407094 <atcab_execute_command+0x24>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
  4070d6:	4630      	mov	r0, r6
  4070d8:	4b0b      	ldr	r3, [pc, #44]	; (407108 <atcab_execute_command+0x98>)
  4070da:	4798      	blx	r3
  4070dc:	4604      	mov	r4, r0
  4070de:	2800      	cmp	r0, #0
  4070e0:	d1d8      	bne.n	407094 <atcab_execute_command+0x24>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
  4070e2:	4630      	mov	r0, r6
  4070e4:	4b09      	ldr	r3, [pc, #36]	; (40710c <atcab_execute_command+0x9c>)
  4070e6:	4798      	blx	r3
  4070e8:	4604      	mov	r4, r0
  4070ea:	e7d3      	b.n	407094 <atcab_execute_command+0x24>
  4070ec:	20000dd8 	.word	0x20000dd8
  4070f0:	00406a81 	.word	0x00406a81
  4070f4:	00406f49 	.word	0x00406f49
  4070f8:	00406f9d 	.word	0x00406f9d
  4070fc:	00406dad 	.word	0x00406dad
  407100:	00407f5d 	.word	0x00407f5d
  407104:	00406db5 	.word	0x00406db5
  407108:	00406c85 	.word	0x00406c85
  40710c:	00406cc1 	.word	0x00406cc1

00407110 <base64Char>:
 * \param[in] rules  base64 ruleset to use
 * \return the base 64 character of the given index
 */
char base64Char(char id, const uint8_t * rules)
{
    if (id >= 0 && (id < 26))
  407110:	2819      	cmp	r0, #25
  407112:	d912      	bls.n	40713a <base64Char+0x2a>
    {
        return (char)('A' + id);
    }
    if ((id >= 26) && (id < 52))
  407114:	f1a0 031a 	sub.w	r3, r0, #26
  407118:	b2db      	uxtb	r3, r3
  40711a:	2b19      	cmp	r3, #25
  40711c:	d910      	bls.n	407140 <base64Char+0x30>
    {
        return (char)('a' + id - 26);
    }
    if ((id >= 52) && (id < 62))
  40711e:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
  407122:	b2db      	uxtb	r3, r3
  407124:	2b09      	cmp	r3, #9
  407126:	d90e      	bls.n	407146 <base64Char+0x36>
    {
        return (char)('0' + id - 52);
    }
    if (id == 62)
  407128:	283e      	cmp	r0, #62	; 0x3e
  40712a:	d00f      	beq.n	40714c <base64Char+0x3c>
    {
        return rules[0];
    }
    if (id == 63)
  40712c:	283f      	cmp	r0, #63	; 0x3f
  40712e:	d00f      	beq.n	407150 <base64Char+0x40>
    {
        return rules[1];
    }

    if (id == IS_EQUAL)
  407130:	2840      	cmp	r0, #64	; 0x40
    {
        return rules[2];
  407132:	bf0c      	ite	eq
  407134:	7888      	ldrbeq	r0, [r1, #2]
    }
    return IS_INVALID;
  407136:	20ff      	movne	r0, #255	; 0xff
}
  407138:	4770      	bx	lr
        return (char)('A' + id);
  40713a:	3041      	adds	r0, #65	; 0x41
  40713c:	b2c0      	uxtb	r0, r0
  40713e:	4770      	bx	lr
        return (char)('a' + id - 26);
  407140:	3047      	adds	r0, #71	; 0x47
  407142:	b2c0      	uxtb	r0, r0
  407144:	4770      	bx	lr
        return (char)('0' + id - 52);
  407146:	3804      	subs	r0, #4
  407148:	b2c0      	uxtb	r0, r0
  40714a:	4770      	bx	lr
        return rules[0];
  40714c:	7808      	ldrb	r0, [r1, #0]
  40714e:	4770      	bx	lr
        return rules[1];
  407150:	7848      	ldrb	r0, [r1, #1]
  407152:	4770      	bx	lr

00407154 <atcab_base64encode_>:
    size_t          array_len,   /**< [in] The length of the byte array */
    char*           encoded,     /**< [in] The output converted to base 64 encoded characters. */
    size_t*         encoded_len, /**< [inout] Input: The size of the encoded buffer, Output: The length of the encoded base 64 character string */
    const uint8_t * rules        /**< [in] ruleset to use during encoding */
    )
{
  407154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407158:	b085      	sub	sp, #20
  40715a:	9302      	str	r3, [sp, #8]
    size_t b64_len = ((array_len * 4) / 3) + r3;

    do
    {
        // Check the input parameters
        if (encoded == NULL || byte_array == NULL || encoded_len == NULL || !rules)
  40715c:	b35a      	cbz	r2, 4071b6 <atcab_base64encode_+0x62>
  40715e:	468b      	mov	fp, r1
  407160:	4616      	mov	r6, r2
  407162:	b340      	cbz	r0, 4071b6 <atcab_base64encode_+0x62>
  407164:	b33b      	cbz	r3, 4071b6 <atcab_base64encode_+0x62>
  407166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407168:	b32b      	cbz	r3, 4071b6 <atcab_base64encode_+0x62>
    size_t b64_len = ((array_len * 4) / 3) + r3;
  40716a:	008b      	lsls	r3, r1, #2
  40716c:	4a5e      	ldr	r2, [pc, #376]	; (4072e8 <atcab_base64encode_+0x194>)
  40716e:	fba2 3103 	umull	r3, r1, r2, r3
    size_t r3 = (array_len % 3);
  407172:	fba2 320b 	umull	r3, r2, r2, fp
  407176:	0852      	lsrs	r2, r2, #1
  407178:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40717c:	ebab 0302 	sub.w	r3, fp, r2
    size_t b64_len = ((array_len * 4) / 3) + r3;
  407180:	eb03 0351 	add.w	r3, r3, r1, lsr #1
            BREAK(status, "Null input parameter");
        }

        // Set the output length.  Add the \r\n every n characters
        out_len = b64_len;
        if (rules[3])
  407184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407186:	78d2      	ldrb	r2, [r2, #3]
  407188:	b11a      	cbz	r2, 407192 <atcab_base64encode_+0x3e>
        {
            out_len += (b64_len / rules[3]) * 2;
  40718a:	fbb3 f2f2 	udiv	r2, r3, r2
  40718e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        }

        if (*encoded_len < out_len)
  407192:	9a02      	ldr	r2, [sp, #8]
  407194:	6812      	ldr	r2, [r2, #0]
  407196:	4293      	cmp	r3, r2
  407198:	d815      	bhi.n	4071c6 <atcab_base64encode_+0x72>
        {
            status = ATCA_BAD_PARAM;
            BREAK(status, "Length of encoded buffer too small");
        }
        // Initialize the return length to 0
        *encoded_len = 0;
  40719a:	2300      	movs	r3, #0
  40719c:	9a02      	ldr	r2, [sp, #8]
  40719e:	6013      	str	r3, [r2, #0]

        // Loop through the byte array by 3 then map to 4 base 64 encoded characters
        for (i = 0; i < array_len; i += 3)
  4071a0:	f1bb 0f00 	cmp.w	fp, #0
  4071a4:	f000 808b 	beq.w	4072be <atcab_base64encode_+0x16a>
  4071a8:	4605      	mov	r5, r0
  4071aa:	9303      	str	r3, [sp, #12]
  4071ac:	461c      	mov	r4, r3
  4071ae:	461f      	mov	r7, r3
        {
            id = (byte_array[i] & 0xFC) >> 2;
            encoded[j++] = base64Char(id, rules);
  4071b0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 4072f8 <atcab_base64encode_+0x1a4>
  4071b4:	e032      	b.n	40721c <atcab_base64encode_+0xc8>
            BREAK(status, "Null input parameter");
  4071b6:	21e2      	movs	r1, #226	; 0xe2
  4071b8:	484c      	ldr	r0, [pc, #304]	; (4072ec <atcab_base64encode_+0x198>)
  4071ba:	4b4d      	ldr	r3, [pc, #308]	; (4072f0 <atcab_base64encode_+0x19c>)
  4071bc:	4798      	blx	r3
            status = ATCA_BAD_PARAM;
  4071be:	20e2      	movs	r0, #226	; 0xe2
        // Set the final encoded length
        *encoded_len = j;
    }
    while (false);
    return status;
}
  4071c0:	b005      	add	sp, #20
  4071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            BREAK(status, "Length of encoded buffer too small");
  4071c6:	21e2      	movs	r1, #226	; 0xe2
  4071c8:	484a      	ldr	r0, [pc, #296]	; (4072f4 <atcab_base64encode_+0x1a0>)
  4071ca:	4b49      	ldr	r3, [pc, #292]	; (4072f0 <atcab_base64encode_+0x19c>)
  4071cc:	4798      	blx	r3
            status = ATCA_BAD_PARAM;
  4071ce:	20e2      	movs	r0, #226	; 0xe2
            BREAK(status, "Length of encoded buffer too small");
  4071d0:	e7f6      	b.n	4071c0 <atcab_base64encode_+0x6c>
                    encoded[j++] = base64Char(id, rules);
  4071d2:	f104 0903 	add.w	r9, r4, #3
  4071d6:	990e      	ldr	r1, [sp, #56]	; 0x38
  4071d8:	47c0      	blx	r8
  4071da:	9b01      	ldr	r3, [sp, #4]
  4071dc:	54f0      	strb	r0, [r6, r3]
                    encoded[j++] = base64Char(IS_EQUAL, rules);
  4071de:	990e      	ldr	r1, [sp, #56]	; 0x38
  4071e0:	2040      	movs	r0, #64	; 0x40
  4071e2:	47c0      	blx	r8
  4071e4:	f806 0009 	strb.w	r0, [r6, r9]
  4071e8:	3404      	adds	r4, #4
  4071ea:	e046      	b.n	40727a <atcab_base64encode_+0x126>
                encoded[j++] = base64Char(id, rules);
  4071ec:	990e      	ldr	r1, [sp, #56]	; 0x38
  4071ee:	47c0      	blx	r8
  4071f0:	f806 0009 	strb.w	r0, [r6, r9]
                encoded[j++] = base64Char(IS_EQUAL, rules);
  4071f4:	f104 0903 	add.w	r9, r4, #3
                encoded[j++] = base64Char(id, rules);
  4071f8:	f104 0a02 	add.w	sl, r4, #2
                encoded[j++] = base64Char(IS_EQUAL, rules);
  4071fc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4071fe:	2040      	movs	r0, #64	; 0x40
  407200:	47c0      	blx	r8
  407202:	f806 000a 	strb.w	r0, [r6, sl]
                encoded[j++] = base64Char(IS_EQUAL, rules);
  407206:	990e      	ldr	r1, [sp, #56]	; 0x38
  407208:	2040      	movs	r0, #64	; 0x40
  40720a:	47c0      	blx	r8
  40720c:	f806 0009 	strb.w	r0, [r6, r9]
  407210:	3404      	adds	r4, #4
  407212:	e032      	b.n	40727a <atcab_base64encode_+0x126>
        for (i = 0; i < array_len; i += 3)
  407214:	3703      	adds	r7, #3
  407216:	3503      	adds	r5, #3
  407218:	45bb      	cmp	fp, r7
  40721a:	d94b      	bls.n	4072b4 <atcab_base64encode_+0x160>
            encoded[j++] = base64Char(id, rules);
  40721c:	f104 0901 	add.w	r9, r4, #1
            id = (byte_array[i] & 0xFC) >> 2;
  407220:	7828      	ldrb	r0, [r5, #0]
            encoded[j++] = base64Char(id, rules);
  407222:	990e      	ldr	r1, [sp, #56]	; 0x38
  407224:	0880      	lsrs	r0, r0, #2
  407226:	47c0      	blx	r8
  407228:	5530      	strb	r0, [r6, r4]
            id = (byte_array[i] & 0x03) << 4;
  40722a:	7828      	ldrb	r0, [r5, #0]
  40722c:	0100      	lsls	r0, r0, #4
  40722e:	f000 0030 	and.w	r0, r0, #48	; 0x30
            if (i + 1 < array_len)
  407232:	1c7b      	adds	r3, r7, #1
  407234:	459b      	cmp	fp, r3
  407236:	d9d9      	bls.n	4071ec <atcab_base64encode_+0x98>
                encoded[j++] = base64Char(id, rules);
  407238:	1ca3      	adds	r3, r4, #2
  40723a:	9301      	str	r3, [sp, #4]
                id |= (byte_array[i + 1] & 0xF0) >> 4;
  40723c:	786b      	ldrb	r3, [r5, #1]
                encoded[j++] = base64Char(id, rules);
  40723e:	990e      	ldr	r1, [sp, #56]	; 0x38
  407240:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
  407244:	47c0      	blx	r8
  407246:	f806 0009 	strb.w	r0, [r6, r9]
                id = (byte_array[i + 1] & 0x0F) << 2;
  40724a:	7868      	ldrb	r0, [r5, #1]
  40724c:	0080      	lsls	r0, r0, #2
  40724e:	f000 003c 	and.w	r0, r0, #60	; 0x3c
                if (i + 2 < array_len)
  407252:	1cbb      	adds	r3, r7, #2
  407254:	459b      	cmp	fp, r3
  407256:	d9bc      	bls.n	4071d2 <atcab_base64encode_+0x7e>
                    encoded[j++] = base64Char(id, rules);
  407258:	f104 0903 	add.w	r9, r4, #3
                    id |= (byte_array[i + 2] & 0xC0) >> 6;
  40725c:	78ab      	ldrb	r3, [r5, #2]
                    encoded[j++] = base64Char(id, rules);
  40725e:	990e      	ldr	r1, [sp, #56]	; 0x38
  407260:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
  407264:	47c0      	blx	r8
  407266:	9b01      	ldr	r3, [sp, #4]
  407268:	54f0      	strb	r0, [r6, r3]
                    encoded[j++] = base64Char(id, rules);
  40726a:	78a8      	ldrb	r0, [r5, #2]
  40726c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40726e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  407272:	47c0      	blx	r8
  407274:	f806 0009 	strb.w	r0, [r6, r9]
  407278:	3404      	adds	r4, #4
            if (rules[3] && ((j - offset) % rules[3] == 0) && encoded[j - 1])
  40727a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40727c:	78db      	ldrb	r3, [r3, #3]
  40727e:	2b00      	cmp	r3, #0
  407280:	d0c8      	beq.n	407214 <atcab_base64encode_+0xc0>
  407282:	9803      	ldr	r0, [sp, #12]
  407284:	1a21      	subs	r1, r4, r0
  407286:	fbb1 f2f3 	udiv	r2, r1, r3
  40728a:	fb03 1312 	mls	r3, r3, r2, r1
  40728e:	2b00      	cmp	r3, #0
  407290:	d1c0      	bne.n	407214 <atcab_base64encode_+0xc0>
  407292:	1933      	adds	r3, r6, r4
  407294:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  407298:	2b00      	cmp	r3, #0
  40729a:	d0bb      	beq.n	407214 <atcab_base64encode_+0xc0>
                encoded[j++] = '\r';
  40729c:	1c63      	adds	r3, r4, #1
  40729e:	f04f 020d 	mov.w	r2, #13
  4072a2:	5532      	strb	r2, [r6, r4]
                encoded[j++] = '\n';
  4072a4:	f04f 020a 	mov.w	r2, #10
  4072a8:	54f2      	strb	r2, [r6, r3]
  4072aa:	3402      	adds	r4, #2
                offset += 2;
  4072ac:	4602      	mov	r2, r0
  4072ae:	3202      	adds	r2, #2
  4072b0:	9203      	str	r2, [sp, #12]
  4072b2:	e7af      	b.n	407214 <atcab_base64encode_+0xc0>
        for (j -= 1; j; j--)
  4072b4:	3c01      	subs	r4, #1
  4072b6:	1932      	adds	r2, r6, r4
            if (encoded[j])
  4072b8:	f242 4101 	movw	r1, #9217	; 0x2401
  4072bc:	e009      	b.n	4072d2 <atcab_base64encode_+0x17e>
        for (j -= 1; j; j--)
  4072be:	f04f 34ff 	mov.w	r4, #4294967295
  4072c2:	e7f8      	b.n	4072b6 <atcab_base64encode_+0x162>
            if (encoded[j])
  4072c4:	fa21 f303 	lsr.w	r3, r1, r3
  4072c8:	f013 0f01 	tst.w	r3, #1
  4072cc:	d005      	beq.n	4072da <atcab_base64encode_+0x186>
        for (j -= 1; j; j--)
  4072ce:	3c01      	subs	r4, #1
  4072d0:	d003      	beq.n	4072da <atcab_base64encode_+0x186>
            if (encoded[j])
  4072d2:	f812 3901 	ldrb.w	r3, [r2], #-1
  4072d6:	2b0d      	cmp	r3, #13
  4072d8:	d9f4      	bls.n	4072c4 <atcab_base64encode_+0x170>
        encoded[++j] = 0;
  4072da:	3401      	adds	r4, #1
  4072dc:	2000      	movs	r0, #0
  4072de:	5530      	strb	r0, [r6, r4]
        *encoded_len = j;
  4072e0:	9b02      	ldr	r3, [sp, #8]
  4072e2:	601c      	str	r4, [r3, #0]
  4072e4:	e76c      	b.n	4071c0 <atcab_base64encode_+0x6c>
  4072e6:	bf00      	nop
  4072e8:	aaaaaaab 	.word	0xaaaaaaab
  4072ec:	00416d8c 	.word	0x00416d8c
  4072f0:	0040d42d 	.word	0x0040d42d
  4072f4:	00416d54 	.word	0x00416d54
  4072f8:	00407111 	.word	0x00407111

004072fc <atcab_base64encode>:
 *                            character string.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_base64encode(const uint8_t* byte_array, size_t array_len, char* encoded, size_t* encoded_len)
{
  4072fc:	b510      	push	{r4, lr}
  4072fe:	b082      	sub	sp, #8
    return atcab_base64encode_(byte_array, array_len, encoded, encoded_len, atcab_b64rules_default);
  407300:	4c02      	ldr	r4, [pc, #8]	; (40730c <atcab_base64encode+0x10>)
  407302:	9400      	str	r4, [sp, #0]
  407304:	4c02      	ldr	r4, [pc, #8]	; (407310 <atcab_base64encode+0x14>)
  407306:	47a0      	blx	r4
}
  407308:	b002      	add	sp, #8
  40730a:	bd10      	pop	{r4, pc}
  40730c:	200001dc 	.word	0x200001dc
  407310:	00407155 	.word	0x00407155

00407314 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
  407314:	b570      	push	{r4, r5, r6, lr}
  407316:	b0b0      	sub	sp, #192	; 0xc0
  407318:	4605      	mov	r5, r0
  40731a:	460e      	mov	r6, r1
  40731c:	4614      	mov	r4, r2
    sw_sha256_init((sw_sha256_ctx*)ctx);
  40731e:	4668      	mov	r0, sp
  407320:	4b06      	ldr	r3, [pc, #24]	; (40733c <atcac_sw_sha2_256+0x28>)
  407322:	4798      	blx	r3
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
  407324:	4632      	mov	r2, r6
  407326:	4629      	mov	r1, r5
  407328:	4668      	mov	r0, sp
  40732a:	4b05      	ldr	r3, [pc, #20]	; (407340 <atcac_sw_sha2_256+0x2c>)
  40732c:	4798      	blx	r3
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
  40732e:	4621      	mov	r1, r4
  407330:	4668      	mov	r0, sp
  407332:	4b04      	ldr	r3, [pc, #16]	; (407344 <atcac_sw_sha2_256+0x30>)
  407334:	4798      	blx	r3
    {
        return ret;
    }

    return ATCA_SUCCESS;
  407336:	2000      	movs	r0, #0
  407338:	b030      	add	sp, #192	; 0xc0
  40733a:	bd70      	pop	{r4, r5, r6, pc}
  40733c:	0040749d 	.word	0x0040749d
  407340:	00407505 	.word	0x00407505
  407344:	0040757d 	.word	0x0040757d

00407348 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
  407348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40734c:	b0d1      	sub	sp, #324	; 0x144
  40734e:	9007      	str	r0, [sp, #28]
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
  407350:	2a00      	cmp	r2, #0
  407352:	f000 809d 	beq.w	407490 <sw_sha256_process+0x148>
  407356:	9101      	str	r1, [sp, #4]
  407358:	eb01 1382 	add.w	r3, r1, r2, lsl #6
  40735c:	9306      	str	r3, [sp, #24]
  40735e:	4603      	mov	r3, r0
  407360:	33a8      	adds	r3, #168	; 0xa8
  407362:	9305      	str	r3, [sp, #20]
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
  407364:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  407368:	f8df 912c 	ldr.w	r9, [pc, #300]	; 407498 <sw_sha256_process+0x150>
  40736c:	e04c      	b.n	407408 <sw_sha256_process+0xc0>

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
  40736e:	4677      	mov	r7, lr
            rotate_register[5] = rotate_register[4];
  407370:	468e      	mov	lr, r1
            rotate_register[4] = rotate_register[3] + t1;
  407372:	4651      	mov	r1, sl
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
  407374:	4635      	mov	r5, r6
            rotate_register[1] = rotate_register[0];
  407376:	4606      	mov	r6, r0
            rotate_register[0] = t1 + t2;
  407378:	4618      	mov	r0, r3
                 ^ rotate_right(rotate_register[4], 11)
  40737a:	ea4f 23f1 	mov.w	r3, r1, ror #11
  40737e:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
            s1 = rotate_right(rotate_register[4], 6)
  407382:	ea83 6a71 	eor.w	sl, r3, r1, ror #25
                 ^ (~rotate_register[4] & rotate_register[6]);
  407386:	ea27 0301 	bic.w	r3, r7, r1
            ch = (rotate_register[4] & rotate_register[5])
  40738a:	ea01 0b0e 	and.w	fp, r1, lr
  40738e:	ea83 030b 	eor.w	r3, r3, fp
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
  407392:	4453      	add	r3, sl
  407394:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
  407398:	4413      	add	r3, r2
  40739a:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
  40739e:	4413      	add	r3, r2
  4073a0:	9a00      	ldr	r2, [sp, #0]
  4073a2:	4413      	add	r3, r2
            rotate_register[4] = rotate_register[3] + t1;
  4073a4:	eb03 0a0c 	add.w	sl, r3, ip
                 ^ rotate_right(rotate_register[0], 13)
  4073a8:	ea4f 3270 	mov.w	r2, r0, ror #13
  4073ac:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
            s0 = rotate_right(rotate_register[0], 2)
  4073b0:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
                  ^ (rotate_register[0] & rotate_register[2])
  4073b4:	ea86 0c05 	eor.w	ip, r6, r5
  4073b8:	ea0c 0c00 	and.w	ip, ip, r0
                  ^ (rotate_register[1] & rotate_register[2]);
  4073bc:	ea06 0b05 	and.w	fp, r6, r5
            maj = (rotate_register[0] & rotate_register[1])
  4073c0:	ea8c 0c0b 	eor.w	ip, ip, fp
            t2 = s0 + maj;
  4073c4:	4462      	add	r2, ip
            rotate_register[0] = t1 + t2;
  4073c6:	4413      	add	r3, r2
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
  4073c8:	3401      	adds	r4, #1
            rotate_register[7] = rotate_register[6];
  4073ca:	9700      	str	r7, [sp, #0]
            rotate_register[3] = rotate_register[2];
  4073cc:	46ac      	mov	ip, r5
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
  4073ce:	2c40      	cmp	r4, #64	; 0x40
  4073d0:	d1cd      	bne.n	40736e <sw_sha256_process+0x26>
  4073d2:	9308      	str	r3, [sp, #32]
  4073d4:	9009      	str	r0, [sp, #36]	; 0x24
  4073d6:	960a      	str	r6, [sp, #40]	; 0x28
  4073d8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  4073dc:	910d      	str	r1, [sp, #52]	; 0x34
  4073de:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4073e2:	970f      	str	r7, [sp, #60]	; 0x3c
  4073e4:	950b      	str	r5, [sp, #44]	; 0x2c
  4073e6:	9b02      	ldr	r3, [sp, #8]
  4073e8:	9903      	ldr	r1, [sp, #12]
  4073ea:	9c04      	ldr	r4, [sp, #16]
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
  4073ec:	681a      	ldr	r2, [r3, #0]
  4073ee:	f851 0f04 	ldr.w	r0, [r1, #4]!
  4073f2:	4402      	add	r2, r0
  4073f4:	f843 2b04 	str.w	r2, [r3], #4
        for (i = 0; i < 8; i++)
  4073f8:	42a3      	cmp	r3, r4
  4073fa:	d1f7      	bne.n	4073ec <sw_sha256_process+0xa4>
  4073fc:	9b01      	ldr	r3, [sp, #4]
  4073fe:	3340      	adds	r3, #64	; 0x40
  407400:	9301      	str	r3, [sp, #4]
    for (block = 0; block < block_count; block++)
  407402:	9a06      	ldr	r2, [sp, #24]
  407404:	4293      	cmp	r3, r2
  407406:	d043      	beq.n	407490 <sw_sha256_process+0x148>
  407408:	a810      	add	r0, sp, #64	; 0x40
{
  40740a:	4602      	mov	r2, r0
  40740c:	9b01      	ldr	r3, [sp, #4]
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
  40740e:	7819      	ldrb	r1, [r3, #0]
  407410:	70d1      	strb	r1, [r2, #3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
  407412:	7859      	ldrb	r1, [r3, #1]
  407414:	7091      	strb	r1, [r2, #2]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
  407416:	7899      	ldrb	r1, [r3, #2]
  407418:	7051      	strb	r1, [r2, #1]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
  40741a:	78d9      	ldrb	r1, [r3, #3]
  40741c:	f802 1b04 	strb.w	r1, [r2], #4
  407420:	3304      	adds	r3, #4
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
  407422:	a920      	add	r1, sp, #128	; 0x80
  407424:	428a      	cmp	r2, r1
  407426:	d1f2      	bne.n	40740e <sw_sha256_process+0xc6>
  407428:	4604      	mov	r4, r0
            word_value = w_union.w_word[w_index - 15];
  40742a:	6842      	ldr	r2, [r0, #4]
            word_value = w_union.w_word[w_index - 2];
  40742c:	6b81      	ldr	r1, [r0, #56]	; 0x38
  40742e:	3004      	adds	r0, #4
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
  407430:	ea4f 43b2 	mov.w	r3, r2, ror #18
  407434:	ea83 13f2 	eor.w	r3, r3, r2, ror #7
  407438:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
  40743c:	6822      	ldr	r2, [r4, #0]
  40743e:	6a04      	ldr	r4, [r0, #32]
  407440:	4422      	add	r2, r4
  407442:	4413      	add	r3, r2
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
  407444:	ea4f 42f1 	mov.w	r2, r1, ror #19
  407448:	ea82 4271 	eor.w	r2, r2, r1, ror #17
  40744c:	ea82 2291 	eor.w	r2, r2, r1, lsr #10
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
  407450:	4413      	add	r3, r2
  407452:	63c3      	str	r3, [r0, #60]	; 0x3c
        while (w_index < SHA256_BLOCK_SIZE)
  407454:	ab40      	add	r3, sp, #256	; 0x100
  407456:	4283      	cmp	r3, r0
  407458:	d1e6      	bne.n	407428 <sw_sha256_process+0xe0>
  40745a:	9b07      	ldr	r3, [sp, #28]
  40745c:	3388      	adds	r3, #136	; 0x88
  40745e:	461a      	mov	r2, r3
  407460:	9302      	str	r3, [sp, #8]
  407462:	ab07      	add	r3, sp, #28
  407464:	9303      	str	r3, [sp, #12]
  407466:	9805      	ldr	r0, [sp, #20]
            rotate_register[i] = ctx->hash[i];
  407468:	f852 1b04 	ldr.w	r1, [r2], #4
  40746c:	f843 1f04 	str.w	r1, [r3, #4]!
        for (i = 0; i < 8; i++)
  407470:	4282      	cmp	r2, r0
  407472:	d1f9      	bne.n	407468 <sw_sha256_process+0x120>
  407474:	9204      	str	r2, [sp, #16]
  407476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407478:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40747a:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
  40747e:	990c      	ldr	r1, [sp, #48]	; 0x30
  407480:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  407484:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407486:	9e09      	ldr	r6, [sp, #36]	; 0x24
  407488:	9808      	ldr	r0, [sp, #32]
  40748a:	2400      	movs	r4, #0
  40748c:	9200      	str	r2, [sp, #0]
  40748e:	e774      	b.n	40737a <sw_sha256_process+0x32>
        }
    }
}
  407490:	b051      	add	sp, #324	; 0x144
  407492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407496:	bf00      	nop
  407498:	00416db8 	.word	0x00416db8

0040749c <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
  40749c:	b510      	push	{r4, lr}
  40749e:	4604      	mov	r4, r0
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
  4074a0:	22a8      	movs	r2, #168	; 0xa8
  4074a2:	2100      	movs	r1, #0
  4074a4:	4b0f      	ldr	r3, [pc, #60]	; (4074e4 <sw_sha256_init+0x48>)
  4074a6:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
  4074a8:	4b0f      	ldr	r3, [pc, #60]	; (4074e8 <sw_sha256_init+0x4c>)
  4074aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  4074ae:	4b0f      	ldr	r3, [pc, #60]	; (4074ec <sw_sha256_init+0x50>)
  4074b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  4074b4:	4b0e      	ldr	r3, [pc, #56]	; (4074f0 <sw_sha256_init+0x54>)
  4074b6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  4074ba:	4b0e      	ldr	r3, [pc, #56]	; (4074f4 <sw_sha256_init+0x58>)
  4074bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  4074c0:	4b0d      	ldr	r3, [pc, #52]	; (4074f8 <sw_sha256_init+0x5c>)
  4074c2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  4074c6:	4b0d      	ldr	r3, [pc, #52]	; (4074fc <sw_sha256_init+0x60>)
  4074c8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  4074cc:	4b0c      	ldr	r3, [pc, #48]	; (407500 <sw_sha256_init+0x64>)
  4074ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  4074d2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
  4074d6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
  4074da:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
  4074de:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  4074e2:	bd10      	pop	{r4, pc}
  4074e4:	0040de3d 	.word	0x0040de3d
  4074e8:	6a09e667 	.word	0x6a09e667
  4074ec:	bb67ae85 	.word	0xbb67ae85
  4074f0:	3c6ef372 	.word	0x3c6ef372
  4074f4:	a54ff53a 	.word	0xa54ff53a
  4074f8:	510e527f 	.word	0x510e527f
  4074fc:	9b05688c 	.word	0x9b05688c
  407500:	1f83d9ab 	.word	0x1f83d9ab

00407504 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
  407504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407508:	4604      	mov	r4, r0
  40750a:	460f      	mov	r7, r1
  40750c:	4615      	mov	r5, r2
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
  40750e:	6840      	ldr	r0, [r0, #4]
  407510:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
  407514:	4296      	cmp	r6, r2
  407516:	bf28      	it	cs
  407518:	4616      	movcs	r6, r2

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
  40751a:	3008      	adds	r0, #8
  40751c:	4632      	mov	r2, r6
  40751e:	4420      	add	r0, r4
  407520:	4b14      	ldr	r3, [pc, #80]	; (407574 <sw_sha256_update+0x70>)
  407522:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
  407524:	6863      	ldr	r3, [r4, #4]
  407526:	442b      	add	r3, r5
  407528:	2b3f      	cmp	r3, #63	; 0x3f
  40752a:	d802      	bhi.n	407532 <sw_sha256_update+0x2e>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
  40752c:	6063      	str	r3, [r4, #4]
        return;
  40752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
  407532:	f104 0808 	add.w	r8, r4, #8
  407536:	2201      	movs	r2, #1
  407538:	4641      	mov	r1, r8
  40753a:	4620      	mov	r0, r4
  40753c:	f8df a038 	ldr.w	sl, [pc, #56]	; 407578 <sw_sha256_update+0x74>
  407540:	47d0      	blx	sl

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
  407542:	1bad      	subs	r5, r5, r6
    block_count = msg_size / SHA256_BLOCK_SIZE;
  407544:	ea4f 1995 	mov.w	r9, r5, lsr #6
    sw_sha256_process(ctx, &msg[copy_size], block_count);
  407548:	464a      	mov	r2, r9
  40754a:	19b9      	adds	r1, r7, r6
  40754c:	4620      	mov	r0, r4
  40754e:	47d0      	blx	sl

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
  407550:	f109 0901 	add.w	r9, r9, #1
  407554:	6823      	ldr	r3, [r4, #0]
  407556:	eb03 1389 	add.w	r3, r3, r9, lsl #6
  40755a:	6023      	str	r3, [r4, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
  40755c:	f005 023f 	and.w	r2, r5, #63	; 0x3f
  407560:	6062      	str	r2, [r4, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
  407562:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
  407566:	19a9      	adds	r1, r5, r6
  407568:	4439      	add	r1, r7
  40756a:	4640      	mov	r0, r8
  40756c:	4b01      	ldr	r3, [pc, #4]	; (407574 <sw_sha256_update+0x70>)
  40756e:	4798      	blx	r3
  407570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407574:	0040dc41 	.word	0x0040dc41
  407578:	00407349 	.word	0x00407349

0040757c <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
  40757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40757e:	4605      	mov	r5, r0
  407580:	460c      	mov	r4, r1
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
  407582:	6840      	ldr	r0, [r0, #4]
  407584:	682f      	ldr	r7, [r5, #0]
  407586:	4407      	add	r7, r0
  407588:	602f      	str	r7, [r5, #0]
    msg_size_bits = ctx->total_msg_size * 8;
  40758a:	00ff      	lsls	r7, r7, #3

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
  40758c:	f1c0 0637 	rsb	r6, r0, #55	; 0x37
  407590:	f006 063f 	and.w	r6, r6, #63	; 0x3f

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
  407594:	1c43      	adds	r3, r0, #1
  407596:	606b      	str	r3, [r5, #4]
  407598:	182b      	adds	r3, r5, r0
  40759a:	2280      	movs	r2, #128	; 0x80
  40759c:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
  40759e:	3009      	adds	r0, #9
  4075a0:	1d32      	adds	r2, r6, #4
  4075a2:	2100      	movs	r1, #0
  4075a4:	4428      	add	r0, r5
  4075a6:	4b14      	ldr	r3, [pc, #80]	; (4075f8 <sw_sha256_final+0x7c>)
  4075a8:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
  4075aa:	686a      	ldr	r2, [r5, #4]
  4075ac:	4432      	add	r2, r6

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
  4075ae:	18ab      	adds	r3, r5, r2
  4075b0:	0e39      	lsrs	r1, r7, #24
  4075b2:	7319      	strb	r1, [r3, #12]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
  4075b4:	0c39      	lsrs	r1, r7, #16
  4075b6:	7359      	strb	r1, [r3, #13]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
  4075b8:	0a39      	lsrs	r1, r7, #8
  4075ba:	7399      	strb	r1, [r3, #14]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
  4075bc:	3208      	adds	r2, #8
  4075be:	606a      	str	r2, [r5, #4]
  4075c0:	73df      	strb	r7, [r3, #15]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
  4075c2:	0992      	lsrs	r2, r2, #6
  4075c4:	f105 0108 	add.w	r1, r5, #8
  4075c8:	4628      	mov	r0, r5
  4075ca:	4b0c      	ldr	r3, [pc, #48]	; (4075fc <sw_sha256_final+0x80>)
  4075cc:	4798      	blx	r3
  4075ce:	1d21      	adds	r1, r4, #4
  4075d0:	f105 0288 	add.w	r2, r5, #136	; 0x88
  4075d4:	35a8      	adds	r5, #168	; 0xa8
  4075d6:	e003      	b.n	4075e0 <sw_sha256_final+0x64>
  4075d8:	3104      	adds	r1, #4
  4075da:	3204      	adds	r2, #4

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
  4075dc:	42aa      	cmp	r2, r5
  4075de:	d00a      	beq.n	4075f6 <sw_sha256_final+0x7a>
  4075e0:	1f0c      	subs	r4, r1, #4
{
  4075e2:	4608      	mov	r0, r1
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
  4075e4:	6813      	ldr	r3, [r2, #0]
  4075e6:	f800 3d01 	strb.w	r3, [r0, #-1]!
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
  4075ea:	6813      	ldr	r3, [r2, #0]
  4075ec:	0a1b      	lsrs	r3, r3, #8
  4075ee:	6013      	str	r3, [r2, #0]
  4075f0:	42a0      	cmp	r0, r4
  4075f2:	d1f7      	bne.n	4075e4 <sw_sha256_final+0x68>
  4075f4:	e7f0      	b.n	4075d8 <sw_sha256_final+0x5c>
  4075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075f8:	0040de3d 	.word	0x0040de3d
  4075fc:	00407349 	.word	0x00407349

00407600 <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
  407600:	7803      	ldrb	r3, [r0, #0]
  407602:	b10b      	cbz	r3, 407608 <hal_iface_init+0x8>
    ATCA_STATUS status = ATCA_COMM_FAIL;
  407604:	20f0      	movs	r0, #240	; 0xf0
        break;
    default:
        break;
    }
    return status;
}
  407606:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
  407608:	4b09      	ldr	r3, [pc, #36]	; (407630 <hal_iface_init+0x30>)
  40760a:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
  40760c:	4b09      	ldr	r3, [pc, #36]	; (407634 <hal_iface_init+0x34>)
  40760e:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
  407610:	4b09      	ldr	r3, [pc, #36]	; (407638 <hal_iface_init+0x38>)
  407612:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
  407614:	4b09      	ldr	r3, [pc, #36]	; (40763c <hal_iface_init+0x3c>)
  407616:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
  407618:	4b09      	ldr	r3, [pc, #36]	; (407640 <hal_iface_init+0x40>)
  40761a:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
  40761c:	4b09      	ldr	r3, [pc, #36]	; (407644 <hal_iface_init+0x44>)
  40761e:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
  407620:	4b09      	ldr	r3, [pc, #36]	; (407648 <hal_iface_init+0x48>)
  407622:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
  407624:	4b09      	ldr	r3, [pc, #36]	; (40764c <hal_iface_init+0x4c>)
  407626:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
  407628:	2000      	movs	r0, #0
  40762a:	6208      	str	r0, [r1, #32]
        break;
  40762c:	4770      	bx	lr
  40762e:	bf00      	nop
  407630:	00407b35 	.word	0x00407b35
  407634:	00407c09 	.word	0x00407c09
  407638:	00407c65 	.word	0x00407c65
  40763c:	00407c0d 	.word	0x00407c0d
  407640:	00407ea5 	.word	0x00407ea5
  407644:	00407d29 	.word	0x00407d29
  407648:	00407e49 	.word	0x00407e49
  40764c:	00407efd 	.word	0x00407efd

00407650 <hal_iface_release>:

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
  407650:	b108      	cbz	r0, 407656 <hal_iface_release+0x6>
    ATCA_STATUS status = ATCA_GEN_FAIL;
  407652:	20e1      	movs	r0, #225	; 0xe1
  407654:	4770      	bx	lr
{
  407656:	b508      	push	{r3, lr}
  407658:	4608      	mov	r0, r1
    {
    case ATCA_I2C_IFACE:
#ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
  40765a:	4b01      	ldr	r3, [pc, #4]	; (407660 <hal_iface_release+0x10>)
  40765c:	4798      	blx	r3
#endif
        break;
  40765e:	bd08      	pop	{r3, pc}
  407660:	00407efd 	.word	0x00407efd

00407664 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
  407664:	b530      	push	{r4, r5, lr}
  407666:	b0a5      	sub	sp, #148	; 0x94
  407668:	461d      	mov	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
  40766a:	4b15      	ldr	r3, [pc, #84]	; (4076c0 <atcab_genkey_base+0x5c>)
  40766c:	681b      	ldr	r3, [r3, #0]
  40766e:	681c      	ldr	r4, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // Build GenKey command
        packet.param1 = mode;
  407670:	f88d 0007 	strb.w	r0, [sp, #7]
        packet.param2 = key_id;
  407674:	f8ad 1008 	strh.w	r1, [sp, #8]
        if (other_data)
  407678:	b132      	cbz	r2, 407688 <atcab_genkey_base+0x24>
  40767a:	4613      	mov	r3, r2
        {
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
  40767c:	8812      	ldrh	r2, [r2, #0]
  40767e:	789b      	ldrb	r3, [r3, #2]
  407680:	f8ad 200a 	strh.w	r2, [sp, #10]
  407684:	f88d 300c 	strb.w	r3, [sp, #12]
        }

        if ((status = atGenKey(ca_cmd, &packet)) != ATCA_SUCCESS)
  407688:	a901      	add	r1, sp, #4
  40768a:	4620      	mov	r0, r4
  40768c:	4b0d      	ldr	r3, [pc, #52]	; (4076c4 <atcab_genkey_base+0x60>)
  40768e:	4798      	blx	r3
  407690:	4604      	mov	r4, r0
  407692:	b110      	cbz	r0, 40769a <atcab_genkey_base+0x36>
        }
    }
    while (0);

    return status;
}
  407694:	4620      	mov	r0, r4
  407696:	b025      	add	sp, #148	; 0x94
  407698:	bd30      	pop	{r4, r5, pc}
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
  40769a:	a801      	add	r0, sp, #4
  40769c:	4b0a      	ldr	r3, [pc, #40]	; (4076c8 <atcab_genkey_base+0x64>)
  40769e:	4798      	blx	r3
  4076a0:	4604      	mov	r4, r0
  4076a2:	2800      	cmp	r0, #0
  4076a4:	d1f6      	bne.n	407694 <atcab_genkey_base+0x30>
        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
  4076a6:	2d00      	cmp	r5, #0
  4076a8:	d0f4      	beq.n	407694 <atcab_genkey_base+0x30>
  4076aa:	f89d 200a 	ldrb.w	r2, [sp, #10]
  4076ae:	2a04      	cmp	r2, #4
  4076b0:	d9f0      	bls.n	407694 <atcab_genkey_base+0x30>
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
  4076b2:	3a03      	subs	r2, #3
  4076b4:	f10d 010b 	add.w	r1, sp, #11
  4076b8:	4628      	mov	r0, r5
  4076ba:	4b04      	ldr	r3, [pc, #16]	; (4076cc <atcab_genkey_base+0x68>)
  4076bc:	4798      	blx	r3
  4076be:	e7e9      	b.n	407694 <atcab_genkey_base+0x30>
  4076c0:	20000dd8 	.word	0x20000dd8
  4076c4:	00406b89 	.word	0x00406b89
  4076c8:	00407071 	.word	0x00407071
  4076cc:	0040dc41 	.word	0x0040dc41

004076d0 <atcab_get_pubkey>:
 *                          isn't required.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
  4076d0:	b510      	push	{r4, lr}
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
  4076d2:	460b      	mov	r3, r1
  4076d4:	2200      	movs	r2, #0
  4076d6:	4601      	mov	r1, r0
  4076d8:	4610      	mov	r0, r2
  4076da:	4c01      	ldr	r4, [pc, #4]	; (4076e0 <atcab_get_pubkey+0x10>)
  4076dc:	47a0      	blx	r4
  4076de:	bd10      	pop	{r4, pc}
  4076e0:	00407665 	.word	0x00407665

004076e4 <atcab_info_base>:
 * \param[out] out_data  Response from info command (4 bytes). Can be set to
 *                       NULL if not required.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info_base(uint8_t mode, uint16_t param2, uint8_t* out_data)
{
  4076e4:	b510      	push	{r4, lr}
  4076e6:	b0a4      	sub	sp, #144	; 0x90
  4076e8:	4614      	mov	r4, r2
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
  4076ea:	4b10      	ldr	r3, [pc, #64]	; (40772c <atcab_info_base+0x48>)
  4076ec:	681b      	ldr	r3, [r3, #0]
  4076ee:	681b      	ldr	r3, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    // build an info command
    packet.param1 = mode;
  4076f0:	f88d 0007 	strb.w	r0, [sp, #7]
    packet.param2 = param2;
  4076f4:	f8ad 1008 	strh.w	r1, [sp, #8]

    do
    {

        if ((status = atInfo(ca_cmd, &packet)) != ATCA_SUCCESS)
  4076f8:	a901      	add	r1, sp, #4
  4076fa:	4618      	mov	r0, r3
  4076fc:	4b0c      	ldr	r3, [pc, #48]	; (407730 <atcab_info_base+0x4c>)
  4076fe:	4798      	blx	r3
  407700:	4603      	mov	r3, r0
  407702:	b110      	cbz	r0, 40770a <atcab_info_base+0x26>
        }
    }
    while (0);

    return status;
}
  407704:	4618      	mov	r0, r3
  407706:	b024      	add	sp, #144	; 0x90
  407708:	bd10      	pop	{r4, pc}
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
  40770a:	a801      	add	r0, sp, #4
  40770c:	4b09      	ldr	r3, [pc, #36]	; (407734 <atcab_info_base+0x50>)
  40770e:	4798      	blx	r3
  407710:	4603      	mov	r3, r0
  407712:	2800      	cmp	r0, #0
  407714:	d1f6      	bne.n	407704 <atcab_info_base+0x20>
        if (out_data != NULL && packet.rxsize >= 7)
  407716:	2c00      	cmp	r4, #0
  407718:	d0f4      	beq.n	407704 <atcab_info_base+0x20>
  40771a:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  40771e:	2a06      	cmp	r2, #6
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);
  407720:	bf84      	itt	hi
  407722:	f8dd 200b 	ldrhi.w	r2, [sp, #11]
  407726:	6022      	strhi	r2, [r4, #0]
  407728:	e7ec      	b.n	407704 <atcab_info_base+0x20>
  40772a:	bf00      	nop
  40772c:	20000dd8 	.word	0x20000dd8
  407730:	00406bbd 	.word	0x00406bbd
  407734:	00407071 	.word	0x00407071

00407738 <atcab_info>:
 *  \param[out] revision  Device revision is returned here (4 bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info(uint8_t* revision)
{
    if (revision == NULL)
  407738:	b130      	cbz	r0, 407748 <atcab_info+0x10>
{
  40773a:	b508      	push	{r3, lr}
  40773c:	4602      	mov	r2, r0
    {
        return ATCA_BAD_PARAM;
    }

    return atcab_info_base(INFO_MODE_REVISION, 0, revision);
  40773e:	2100      	movs	r1, #0
  407740:	4608      	mov	r0, r1
  407742:	4b02      	ldr	r3, [pc, #8]	; (40774c <atcab_info+0x14>)
  407744:	4798      	blx	r3
  407746:	bd08      	pop	{r3, pc}
        return ATCA_BAD_PARAM;
  407748:	20e2      	movs	r0, #226	; 0xe2
  40774a:	4770      	bx	lr
  40774c:	004076e5 	.word	0x004076e5

00407750 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
  407750:	b5f0      	push	{r4, r5, r6, r7, lr}
  407752:	b0a5      	sub	sp, #148	; 0x94
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
  407754:	4c3a      	ldr	r4, [pc, #232]	; (407840 <atcab_nonce_base+0xf0>)
  407756:	6824      	ldr	r4, [r4, #0]
  407758:	6825      	ldr	r5, [r4, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
  40775a:	f000 0403 	and.w	r4, r0, #3

    do
    {
        // build a nonce command
        packet.param1 = mode;
  40775e:	f88d 0007 	strb.w	r0, [sp, #7]
        packet.param2 = zero;
  407762:	f8ad 1008 	strh.w	r1, [sp, #8]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
  407766:	2c01      	cmp	r4, #1
  407768:	d905      	bls.n	407776 <atcab_nonce_base+0x26>
        {
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
        }
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
  40776a:	2c03      	cmp	r4, #3
  40776c:	d039      	beq.n	4077e2 <atcab_nonce_base+0x92>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
  40776e:	22e2      	movs	r2, #226	; 0xe2

    }
    while (0);

    return status;
}
  407770:	4610      	mov	r0, r2
  407772:	b025      	add	sp, #148	; 0x94
  407774:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
  407776:	6811      	ldr	r1, [r2, #0]
  407778:	6856      	ldr	r6, [r2, #4]
  40777a:	6894      	ldr	r4, [r2, #8]
  40777c:	68d0      	ldr	r0, [r2, #12]
  40777e:	f8cd 100a 	str.w	r1, [sp, #10]
  407782:	f8cd 600e 	str.w	r6, [sp, #14]
  407786:	f8cd 4012 	str.w	r4, [sp, #18]
  40778a:	f8cd 0016 	str.w	r0, [sp, #22]
  40778e:	6911      	ldr	r1, [r2, #16]
  407790:	f8cd 101a 	str.w	r1, [sp, #26]
  407794:	461c      	mov	r4, r3
        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
  407796:	a901      	add	r1, sp, #4
  407798:	4628      	mov	r0, r5
  40779a:	4b2a      	ldr	r3, [pc, #168]	; (407844 <atcab_nonce_base+0xf4>)
  40779c:	4798      	blx	r3
  40779e:	4602      	mov	r2, r0
  4077a0:	2800      	cmp	r0, #0
  4077a2:	d1e5      	bne.n	407770 <atcab_nonce_base+0x20>
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
  4077a4:	a801      	add	r0, sp, #4
  4077a6:	4b28      	ldr	r3, [pc, #160]	; (407848 <atcab_nonce_base+0xf8>)
  4077a8:	4798      	blx	r3
  4077aa:	4602      	mov	r2, r0
  4077ac:	2800      	cmp	r0, #0
  4077ae:	d1df      	bne.n	407770 <atcab_nonce_base+0x20>
        if ((rand_out != NULL) && (packet.rxsize >= 35))
  4077b0:	2c00      	cmp	r4, #0
  4077b2:	d0dd      	beq.n	407770 <atcab_nonce_base+0x20>
  4077b4:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4077b8:	2b22      	cmp	r3, #34	; 0x22
  4077ba:	d9d9      	bls.n	407770 <atcab_nonce_base+0x20>
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
  4077bc:	ab24      	add	r3, sp, #144	; 0x90
  4077be:	f853 6d85 	ldr.w	r6, [r3, #-133]!
  4077c2:	685d      	ldr	r5, [r3, #4]
  4077c4:	6898      	ldr	r0, [r3, #8]
  4077c6:	68d9      	ldr	r1, [r3, #12]
  4077c8:	6026      	str	r6, [r4, #0]
  4077ca:	6065      	str	r5, [r4, #4]
  4077cc:	60a0      	str	r0, [r4, #8]
  4077ce:	60e1      	str	r1, [r4, #12]
  4077d0:	691e      	ldr	r6, [r3, #16]
  4077d2:	695d      	ldr	r5, [r3, #20]
  4077d4:	6998      	ldr	r0, [r3, #24]
  4077d6:	69d9      	ldr	r1, [r3, #28]
  4077d8:	6126      	str	r6, [r4, #16]
  4077da:	6165      	str	r5, [r4, #20]
  4077dc:	61a0      	str	r0, [r4, #24]
  4077de:	61e1      	str	r1, [r4, #28]
  4077e0:	e7c6      	b.n	407770 <atcab_nonce_base+0x20>
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
  4077e2:	f010 0f20 	tst.w	r0, #32
  4077e6:	d012      	beq.n	40780e <atcab_nonce_base+0xbe>
                memcpy(packet.data, num_in, 64);
  4077e8:	4611      	mov	r1, r2
  4077ea:	f10d 000a 	add.w	r0, sp, #10
  4077ee:	3240      	adds	r2, #64	; 0x40
  4077f0:	f8d1 e000 	ldr.w	lr, [r1]
  4077f4:	684f      	ldr	r7, [r1, #4]
  4077f6:	688e      	ldr	r6, [r1, #8]
  4077f8:	68cc      	ldr	r4, [r1, #12]
  4077fa:	f8c0 e000 	str.w	lr, [r0]
  4077fe:	6047      	str	r7, [r0, #4]
  407800:	6086      	str	r6, [r0, #8]
  407802:	60c4      	str	r4, [r0, #12]
  407804:	3110      	adds	r1, #16
  407806:	3010      	adds	r0, #16
  407808:	4291      	cmp	r1, r2
  40780a:	d1f1      	bne.n	4077f0 <atcab_nonce_base+0xa0>
  40780c:	e7c2      	b.n	407794 <atcab_nonce_base+0x44>
                memcpy(packet.data, num_in, 32);
  40780e:	6816      	ldr	r6, [r2, #0]
  407810:	6854      	ldr	r4, [r2, #4]
  407812:	6890      	ldr	r0, [r2, #8]
  407814:	68d1      	ldr	r1, [r2, #12]
  407816:	f8cd 600a 	str.w	r6, [sp, #10]
  40781a:	f8cd 400e 	str.w	r4, [sp, #14]
  40781e:	f8cd 0012 	str.w	r0, [sp, #18]
  407822:	f8cd 1016 	str.w	r1, [sp, #22]
  407826:	6916      	ldr	r6, [r2, #16]
  407828:	6954      	ldr	r4, [r2, #20]
  40782a:	6990      	ldr	r0, [r2, #24]
  40782c:	69d1      	ldr	r1, [r2, #28]
  40782e:	f8cd 601a 	str.w	r6, [sp, #26]
  407832:	f8cd 401e 	str.w	r4, [sp, #30]
  407836:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
  40783a:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
  40783e:	e7a9      	b.n	407794 <atcab_nonce_base+0x44>
  407840:	20000dd8 	.word	0x20000dd8
  407844:	00406bd9 	.word	0x00406bd9
  407848:	00407071 	.word	0x00407071

0040784c <atcab_nonce_load>:
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
  40784c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0

    if (num_in_size == 32)
  407850:	2a20      	cmp	r2, #32
  407852:	d003      	beq.n	40785c <atcab_nonce_load+0x10>
    {
        mode |= NONCE_MODE_INPUT_LEN_32;
    }
    else if (num_in_size == 64)
  407854:	2a40      	cmp	r2, #64	; 0x40
  407856:	d004      	beq.n	407862 <atcab_nonce_load+0x16>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
    }
    else
    {
        return ATCA_BAD_PARAM;
  407858:	20e2      	movs	r0, #226	; 0xe2
  40785a:	4770      	bx	lr
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
  40785c:	f040 0003 	orr.w	r0, r0, #3
  407860:	e001      	b.n	407866 <atcab_nonce_load+0x1a>
        mode |= NONCE_MODE_INPUT_LEN_64;
  407862:	f040 0023 	orr.w	r0, r0, #35	; 0x23
{
  407866:	b510      	push	{r4, lr}
  407868:	460a      	mov	r2, r1
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
  40786a:	2300      	movs	r3, #0
  40786c:	4619      	mov	r1, r3
  40786e:	4c01      	ldr	r4, [pc, #4]	; (407874 <atcab_nonce_load+0x28>)
  407870:	47a0      	blx	r4
  407872:	bd10      	pop	{r4, pc}
  407874:	00407751 	.word	0x00407751

00407878 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
  407878:	b570      	push	{r4, r5, r6, lr}
  40787a:	b0a4      	sub	sp, #144	; 0x90
  40787c:	4604      	mov	r4, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
  40787e:	4b1b      	ldr	r3, [pc, #108]	; (4078ec <atcab_random+0x74>)
  407880:	681b      	ldr	r3, [r3, #0]
  407882:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
  407884:	2300      	movs	r3, #0
  407886:	f88d 3007 	strb.w	r3, [sp, #7]
        packet.param2 = 0x0000;
  40788a:	f8ad 3008 	strh.w	r3, [sp, #8]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
  40788e:	a901      	add	r1, sp, #4
  407890:	4b17      	ldr	r3, [pc, #92]	; (4078f0 <atcab_random+0x78>)
  407892:	4798      	blx	r3
  407894:	4603      	mov	r3, r0
  407896:	b110      	cbz	r0, 40789e <atcab_random+0x26>
    }
    while (0);


    return status;
}
  407898:	4618      	mov	r0, r3
  40789a:	b024      	add	sp, #144	; 0x90
  40789c:	bd70      	pop	{r4, r5, r6, pc}
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
  40789e:	a801      	add	r0, sp, #4
  4078a0:	4b14      	ldr	r3, [pc, #80]	; (4078f4 <atcab_random+0x7c>)
  4078a2:	4798      	blx	r3
  4078a4:	4603      	mov	r3, r0
  4078a6:	2800      	cmp	r0, #0
  4078a8:	d1f6      	bne.n	407898 <atcab_random+0x20>
        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
  4078aa:	f89d 200a 	ldrb.w	r2, [sp, #10]
  4078ae:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  4078b2:	4291      	cmp	r1, r2
  4078b4:	d201      	bcs.n	4078ba <atcab_random+0x42>
            status = ATCA_RX_FAIL;
  4078b6:	23e6      	movs	r3, #230	; 0xe6
  4078b8:	e7ee      	b.n	407898 <atcab_random+0x20>
        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
  4078ba:	2a23      	cmp	r2, #35	; 0x23
  4078bc:	d001      	beq.n	4078c2 <atcab_random+0x4a>
            status = ATCA_RX_FAIL;
  4078be:	23e6      	movs	r3, #230	; 0xe6
  4078c0:	e7ea      	b.n	407898 <atcab_random+0x20>
        if (rand_out)
  4078c2:	2c00      	cmp	r4, #0
  4078c4:	d0e8      	beq.n	407898 <atcab_random+0x20>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
  4078c6:	aa24      	add	r2, sp, #144	; 0x90
  4078c8:	f852 6d85 	ldr.w	r6, [r2, #-133]!
  4078cc:	6855      	ldr	r5, [r2, #4]
  4078ce:	6890      	ldr	r0, [r2, #8]
  4078d0:	68d1      	ldr	r1, [r2, #12]
  4078d2:	6026      	str	r6, [r4, #0]
  4078d4:	6065      	str	r5, [r4, #4]
  4078d6:	60a0      	str	r0, [r4, #8]
  4078d8:	60e1      	str	r1, [r4, #12]
  4078da:	6916      	ldr	r6, [r2, #16]
  4078dc:	6955      	ldr	r5, [r2, #20]
  4078de:	6990      	ldr	r0, [r2, #24]
  4078e0:	69d1      	ldr	r1, [r2, #28]
  4078e2:	6126      	str	r6, [r4, #16]
  4078e4:	6165      	str	r5, [r4, #20]
  4078e6:	61a0      	str	r0, [r4, #24]
  4078e8:	61e1      	str	r1, [r4, #28]
  4078ea:	e7d5      	b.n	407898 <atcab_random+0x20>
  4078ec:	20000dd8 	.word	0x20000dd8
  4078f0:	00406c1d 	.word	0x00406c1d
  4078f4:	00407071 	.word	0x00407071

004078f8 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
  4078f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4078fa:	b0a7      	sub	sp, #156	; 0x9c
  4078fc:	4607      	mov	r7, r0
  4078fe:	f89d 40b4 	ldrb.w	r4, [sp, #180]	; 0xb4
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
  407902:	982c      	ldr	r0, [sp, #176]	; 0xb0
  407904:	b150      	cbz	r0, 40791c <atcab_read_zone+0x24>
    ATCACommand ca_cmd = _gDevice->mCommands;
  407906:	481e      	ldr	r0, [pc, #120]	; (407980 <atcab_read_zone+0x88>)
  407908:	6800      	ldr	r0, [r0, #0]
  40790a:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
  40790c:	2c04      	cmp	r4, #4
  40790e:	d013      	beq.n	407938 <atcab_read_zone+0x40>
  407910:	2c20      	cmp	r4, #32
  407912:	d005      	beq.n	407920 <atcab_read_zone+0x28>
        {
            return ATCA_BAD_PARAM;
  407914:	25e2      	movs	r5, #226	; 0xe2
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
  407916:	4628      	mov	r0, r5
  407918:	b027      	add	sp, #156	; 0x9c
  40791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
  40791c:	25e2      	movs	r5, #226	; 0xe2
  40791e:	e7fa      	b.n	407916 <atcab_read_zone+0x1e>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
  407920:	f10d 000a 	add.w	r0, sp, #10
  407924:	9000      	str	r0, [sp, #0]
  407926:	4638      	mov	r0, r7
  407928:	4d16      	ldr	r5, [pc, #88]	; (407984 <atcab_read_zone+0x8c>)
  40792a:	47a8      	blx	r5
  40792c:	4605      	mov	r5, r0
  40792e:	2800      	cmp	r0, #0
  407930:	d1f1      	bne.n	407916 <atcab_read_zone+0x1e>
            zone = zone | ATCA_ZONE_READWRITE_32;
  407932:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  407936:	e008      	b.n	40794a <atcab_read_zone+0x52>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
  407938:	f10d 000a 	add.w	r0, sp, #10
  40793c:	9000      	str	r0, [sp, #0]
  40793e:	4638      	mov	r0, r7
  407940:	4d10      	ldr	r5, [pc, #64]	; (407984 <atcab_read_zone+0x8c>)
  407942:	47a8      	blx	r5
  407944:	4605      	mov	r5, r0
  407946:	2800      	cmp	r0, #0
  407948:	d1e5      	bne.n	407916 <atcab_read_zone+0x1e>
        packet.param1 = zone;
  40794a:	f88d 700f 	strb.w	r7, [sp, #15]
        packet.param2 = addr;
  40794e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  407952:	f8ad 3010 	strh.w	r3, [sp, #16]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
  407956:	a903      	add	r1, sp, #12
  407958:	4630      	mov	r0, r6
  40795a:	4b0b      	ldr	r3, [pc, #44]	; (407988 <atcab_read_zone+0x90>)
  40795c:	4798      	blx	r3
  40795e:	4605      	mov	r5, r0
  407960:	2800      	cmp	r0, #0
  407962:	d1d8      	bne.n	407916 <atcab_read_zone+0x1e>
        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
  407964:	a803      	add	r0, sp, #12
  407966:	4b09      	ldr	r3, [pc, #36]	; (40798c <atcab_read_zone+0x94>)
  407968:	4798      	blx	r3
  40796a:	4605      	mov	r5, r0
  40796c:	2800      	cmp	r0, #0
  40796e:	d1d2      	bne.n	407916 <atcab_read_zone+0x1e>
        memcpy(data, &packet.data[1], len);
  407970:	4622      	mov	r2, r4
  407972:	f10d 0113 	add.w	r1, sp, #19
  407976:	982c      	ldr	r0, [sp, #176]	; 0xb0
  407978:	4b05      	ldr	r3, [pc, #20]	; (407990 <atcab_read_zone+0x98>)
  40797a:	4798      	blx	r3
  40797c:	e7cb      	b.n	407916 <atcab_read_zone+0x1e>
  40797e:	bf00      	nop
  407980:	20000dd8 	.word	0x20000dd8
  407984:	00406fa9 	.word	0x00406fa9
  407988:	00406c3d 	.word	0x00406c3d
  40798c:	00407071 	.word	0x00407071
  407990:	0040dc41 	.word	0x0040dc41

00407994 <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
  407994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407998:	b08f      	sub	sp, #60	; 0x3c
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
  40799a:	2400      	movs	r4, #0
  40799c:	940d      	str	r4, [sp, #52]	; 0x34
    uint8_t read_size = ATCA_BLOCK_SIZE;
    size_t read_buf_idx = 0;
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
  40799e:	2802      	cmp	r0, #2
  4079a0:	d904      	bls.n	4079ac <atcab_read_bytes_zone+0x18>
    {
        return ATCA_BAD_PARAM;
  4079a2:	24e2      	movs	r4, #226	; 0xe2
        }
    }
    while (false);

    return status;
}
  4079a4:	4620      	mov	r0, r4
  4079a6:	b00f      	add	sp, #60	; 0x3c
  4079a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
  4079ac:	d015      	beq.n	4079da <atcab_read_bytes_zone+0x46>
    if (length == 0)
  4079ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
  4079b0:	2c00      	cmp	r4, #0
  4079b2:	d059      	beq.n	407a68 <atcab_read_bytes_zone+0xd4>
    if (data == NULL)
  4079b4:	2b00      	cmp	r3, #0
  4079b6:	d059      	beq.n	407a6c <atcab_read_bytes_zone+0xd8>
  4079b8:	469b      	mov	fp, r3
  4079ba:	4615      	mov	r5, r2
  4079bc:	9103      	str	r1, [sp, #12]
  4079be:	9002      	str	r0, [sp, #8]
        status = atcab_get_zone_size(zone, slot, &zone_size);
  4079c0:	aa0d      	add	r2, sp, #52	; 0x34
  4079c2:	4b2c      	ldr	r3, [pc, #176]	; (407a74 <atcab_read_bytes_zone+0xe0>)
  4079c4:	4798      	blx	r3
        if (status != ATCA_SUCCESS)
  4079c6:	4604      	mov	r4, r0
  4079c8:	2800      	cmp	r0, #0
  4079ca:	d1eb      	bne.n	4079a4 <atcab_read_bytes_zone+0x10>
        if (offset + length > zone_size)
  4079cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4079ce:	195a      	adds	r2, r3, r5
  4079d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4079d2:	429a      	cmp	r2, r3
  4079d4:	d905      	bls.n	4079e2 <atcab_read_bytes_zone+0x4e>
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
  4079d6:	24e2      	movs	r4, #226	; 0xe2
  4079d8:	e7e4      	b.n	4079a4 <atcab_read_bytes_zone+0x10>
    if (zone == ATCA_ZONE_DATA && slot > 15)
  4079da:	290f      	cmp	r1, #15
  4079dc:	d9e7      	bls.n	4079ae <atcab_read_bytes_zone+0x1a>
        return ATCA_BAD_PARAM;
  4079de:	24e2      	movs	r4, #226	; 0xe2
  4079e0:	e7e0      	b.n	4079a4 <atcab_read_bytes_zone+0x10>
        cur_block = offset / ATCA_BLOCK_SIZE;
  4079e2:	ea4f 1a55 	mov.w	sl, r5, lsr #5
  4079e6:	f04f 0820 	mov.w	r8, #32
  4079ea:	f04f 0900 	mov.w	r9, #0
  4079ee:	464f      	mov	r7, r9
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
  4079f0:	4644      	mov	r4, r8
  4079f2:	e02a      	b.n	407a4a <atcab_read_bytes_zone+0xb6>
            status = atcab_read_zone(
  4079f4:	9401      	str	r4, [sp, #4]
  4079f6:	ab05      	add	r3, sp, #20
  4079f8:	9300      	str	r3, [sp, #0]
  4079fa:	fa5f f389 	uxtb.w	r3, r9
  4079fe:	fa5f f28a 	uxtb.w	r2, sl
  407a02:	9903      	ldr	r1, [sp, #12]
  407a04:	9802      	ldr	r0, [sp, #8]
  407a06:	4e1c      	ldr	r6, [pc, #112]	; (407a78 <atcab_read_bytes_zone+0xe4>)
  407a08:	47b0      	blx	r6
            if (status != ATCA_SUCCESS)
  407a0a:	4680      	mov	r8, r0
  407a0c:	bb80      	cbnz	r0, 407a70 <atcab_read_bytes_zone+0xdc>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
  407a0e:	eb09 01ca 	add.w	r1, r9, sl, lsl #3
  407a12:	0089      	lsls	r1, r1, #2
            if (read_offset < offset)
  407a14:	428d      	cmp	r5, r1
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
  407a16:	bf8c      	ite	hi
  407a18:	1a69      	subhi	r1, r5, r1
                read_buf_idx = 0;                     // Read data is within the requested chunk
  407a1a:	2100      	movls	r1, #0
            if (length - data_idx < read_size - read_buf_idx)
  407a1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407a1e:	1bde      	subs	r6, r3, r7
  407a20:	1a63      	subs	r3, r4, r1
  407a22:	429e      	cmp	r6, r3
  407a24:	bf28      	it	cs
  407a26:	461e      	movcs	r6, r3
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
  407a28:	4632      	mov	r2, r6
  407a2a:	ab05      	add	r3, sp, #20
  407a2c:	4419      	add	r1, r3
  407a2e:	eb0b 0007 	add.w	r0, fp, r7
  407a32:	4b12      	ldr	r3, [pc, #72]	; (407a7c <atcab_read_bytes_zone+0xe8>)
  407a34:	4798      	blx	r3
            data_idx += copy_length;
  407a36:	4437      	add	r7, r6
            if (read_size == ATCA_BLOCK_SIZE)
  407a38:	2c20      	cmp	r4, #32
                cur_block += 1;
  407a3a:	bf0c      	ite	eq
  407a3c:	f10a 0a01 	addeq.w	sl, sl, #1
                cur_offset += 1;
  407a40:	f109 0901 	addne.w	r9, r9, #1
        while (data_idx < length)
  407a44:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407a46:	42bb      	cmp	r3, r7
  407a48:	d90c      	bls.n	407a64 <atcab_read_bytes_zone+0xd0>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
  407a4a:	2c20      	cmp	r4, #32
  407a4c:	d1d2      	bne.n	4079f4 <atcab_read_bytes_zone+0x60>
  407a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a50:	eba3 134a 	sub.w	r3, r3, sl, lsl #5
  407a54:	2b1f      	cmp	r3, #31
  407a56:	d8cd      	bhi.n	4079f4 <atcab_read_bytes_zone+0x60>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
  407a58:	eb05 0907 	add.w	r9, r5, r7
  407a5c:	f3c9 0982 	ubfx	r9, r9, #2, #3
                read_size = ATCA_WORD_SIZE;
  407a60:	2404      	movs	r4, #4
  407a62:	e7c7      	b.n	4079f4 <atcab_read_bytes_zone+0x60>
  407a64:	4644      	mov	r4, r8
  407a66:	e79d      	b.n	4079a4 <atcab_read_bytes_zone+0x10>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
  407a68:	2400      	movs	r4, #0
  407a6a:	e79b      	b.n	4079a4 <atcab_read_bytes_zone+0x10>
        return ATCA_BAD_PARAM;
  407a6c:	24e2      	movs	r4, #226	; 0xe2
  407a6e:	e799      	b.n	4079a4 <atcab_read_bytes_zone+0x10>
  407a70:	4604      	mov	r4, r0
  407a72:	e797      	b.n	4079a4 <atcab_read_bytes_zone+0x10>
  407a74:	00406fe9 	.word	0x00406fe9
  407a78:	004078f9 	.word	0x004078f9
  407a7c:	0040dc41 	.word	0x0040dc41

00407a80 <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
  407a80:	b530      	push	{r4, r5, lr}
  407a82:	b0a5      	sub	sp, #148	; 0x94
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (signature == NULL)
  407a84:	b1ea      	cbz	r2, 407ac2 <atcab_sign_base+0x42>
  407a86:	4615      	mov	r5, r2
  407a88:	4603      	mov	r3, r0
    ATCACommand ca_cmd = _gDevice->mCommands;
  407a8a:	4a10      	ldr	r2, [pc, #64]	; (407acc <atcab_sign_base+0x4c>)
  407a8c:	6812      	ldr	r2, [r2, #0]
  407a8e:	6810      	ldr	r0, [r2, #0]
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
  407a90:	f88d 3007 	strb.w	r3, [sp, #7]
        packet.param2 = key_id;
  407a94:	f8ad 1008 	strh.w	r1, [sp, #8]
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
  407a98:	a901      	add	r1, sp, #4
  407a9a:	4b0d      	ldr	r3, [pc, #52]	; (407ad0 <atcab_sign_base+0x50>)
  407a9c:	4798      	blx	r3
  407a9e:	4604      	mov	r4, r0
  407aa0:	b980      	cbnz	r0, 407ac4 <atcab_sign_base+0x44>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
  407aa2:	a801      	add	r0, sp, #4
  407aa4:	4b0b      	ldr	r3, [pc, #44]	; (407ad4 <atcab_sign_base+0x54>)
  407aa6:	4798      	blx	r3
  407aa8:	4604      	mov	r4, r0
  407aaa:	b958      	cbnz	r0, 407ac4 <atcab_sign_base+0x44>
        {
            break;
        }

        if (packet.rxsize > 4)
  407aac:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  407ab0:	2a04      	cmp	r2, #4
  407ab2:	d907      	bls.n	407ac4 <atcab_sign_base+0x44>
        {
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.rxsize - ATCA_PACKET_OVERHEAD);
  407ab4:	3a03      	subs	r2, #3
  407ab6:	f10d 010b 	add.w	r1, sp, #11
  407aba:	4628      	mov	r0, r5
  407abc:	4b06      	ldr	r3, [pc, #24]	; (407ad8 <atcab_sign_base+0x58>)
  407abe:	4798      	blx	r3
  407ac0:	e000      	b.n	407ac4 <atcab_sign_base+0x44>
        return ATCA_BAD_PARAM;
  407ac2:	24e2      	movs	r4, #226	; 0xe2

    }
    while (0);

    return status;
}
  407ac4:	4620      	mov	r0, r4
  407ac6:	b025      	add	sp, #148	; 0x94
  407ac8:	bd30      	pop	{r4, r5, pc}
  407aca:	bf00      	nop
  407acc:	20000dd8 	.word	0x20000dd8
  407ad0:	00406c65 	.word	0x00406c65
  407ad4:	00407071 	.word	0x00407071
  407ad8:	0040dc41 	.word	0x0040dc41

00407adc <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
  407adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ade:	4606      	mov	r6, r0
  407ae0:	460c      	mov	r4, r1
  407ae2:	4617      	mov	r7, r2
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
  407ae4:	2000      	movs	r0, #0
  407ae6:	4b0f      	ldr	r3, [pc, #60]	; (407b24 <atcab_sign+0x48>)
  407ae8:	4798      	blx	r3
  407aea:	4603      	mov	r3, r0
  407aec:	b978      	cbnz	r0, 407b0e <atcab_sign+0x32>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
  407aee:	4b0e      	ldr	r3, [pc, #56]	; (407b28 <atcab_sign+0x4c>)
  407af0:	681b      	ldr	r3, [r3, #0]
  407af2:	681b      	ldr	r3, [r3, #0]
  407af4:	781b      	ldrb	r3, [r3, #0]
  407af6:	2b03      	cmp	r3, #3
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
  407af8:	bf07      	ittee	eq
  407afa:	2520      	moveq	r5, #32
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
  407afc:	2040      	moveq	r0, #64	; 0x40
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
  407afe:	2500      	movne	r5, #0
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
  407b00:	4628      	movne	r0, r5
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
  407b02:	2220      	movs	r2, #32
  407b04:	4621      	mov	r1, r4
  407b06:	4b09      	ldr	r3, [pc, #36]	; (407b2c <atcab_sign+0x50>)
  407b08:	4798      	blx	r3
  407b0a:	4603      	mov	r3, r0
  407b0c:	b108      	cbz	r0, 407b12 <atcab_sign+0x36>
        }
    }
    while (0);

    return status;
}
  407b0e:	4618      	mov	r0, r3
  407b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
  407b12:	463a      	mov	r2, r7
  407b14:	4631      	mov	r1, r6
  407b16:	f045 0080 	orr.w	r0, r5, #128	; 0x80
  407b1a:	4b05      	ldr	r3, [pc, #20]	; (407b30 <atcab_sign+0x54>)
  407b1c:	4798      	blx	r3
  407b1e:	4603      	mov	r3, r0
  407b20:	e7f5      	b.n	407b0e <atcab_sign+0x32>
  407b22:	bf00      	nop
  407b24:	00407879 	.word	0x00407879
  407b28:	20000dd8 	.word	0x20000dd8
  407b2c:	0040784d 	.word	0x0040784d
  407b30:	00407a81 	.word	0x00407a81

00407b34 <hal_i2c_init>:
 * \param[in] cfg - interface configuration
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
  407b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b36:	4606      	mov	r6, r0
  407b38:	460c      	mov	r4, r1
    // set to default i2c bus
    if (cfg->atcai2c.bus > MAX_I2C_BUSES - 1)
  407b3a:	794b      	ldrb	r3, [r1, #5]
  407b3c:	2b01      	cmp	r3, #1
  407b3e:	d901      	bls.n	407b44 <hal_i2c_init+0x10>
    {
        cfg->atcai2c.bus = 0;
  407b40:	2300      	movs	r3, #0
  407b42:	714b      	strb	r3, [r1, #5]
    }
    int bus = cfg->atcai2c.bus; // 0-based logical bus number
  407b44:	7965      	ldrb	r5, [r4, #5]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;

    if (i2c_bus_ref_ct == 0)    // power up state, no i2c buses will have been used
  407b46:	4b26      	ldr	r3, [pc, #152]	; (407be0 <hal_i2c_init+0xac>)
  407b48:	681b      	ldr	r3, [r3, #0]
  407b4a:	2b00      	cmp	r3, #0
  407b4c:	d03f      	beq.n	407bce <hal_i2c_init+0x9a>
        {
            i2c_hal_data[i] = NULL;
        }
    }

    i2c_bus_ref_ct++;   // total across buses
  407b4e:	3301      	adds	r3, #1
  407b50:	4a23      	ldr	r2, [pc, #140]	; (407be0 <hal_i2c_init+0xac>)
  407b52:	6013      	str	r3, [r2, #0]

    if (bus >= 0 && bus < MAX_I2C_BUSES)
    {
        //// if this is the first time this bus and interface has been created, do the physical work of enabling it
        if (i2c_hal_data[bus] == NULL)
  407b54:	4b23      	ldr	r3, [pc, #140]	; (407be4 <hal_i2c_init+0xb0>)
  407b56:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  407b5a:	b143      	cbz	r3, 407b6e <hal_i2c_init+0x3a>
        }
        else
        {
            // otherwise, another interface already initialized the bus, so this interface will share it and any different
            // cfg parameters will be ignored...first one to initialize this sets the configuration
            i2c_hal_data[bus]->ref_ct++;
  407b5c:	689a      	ldr	r2, [r3, #8]
  407b5e:	3201      	adds	r2, #1
  407b60:	609a      	str	r2, [r3, #8]
        }

        phal->hal_data = i2c_hal_data[bus];
  407b62:	4b20      	ldr	r3, [pc, #128]	; (407be4 <hal_i2c_init+0xb0>)
  407b64:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  407b68:	6233      	str	r3, [r6, #32]

        return ATCA_SUCCESS;
    }

    return ATCA_COMM_FAIL;
}
  407b6a:	2000      	movs	r0, #0
  407b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t));
  407b6e:	2010      	movs	r0, #16
  407b70:	4b1d      	ldr	r3, [pc, #116]	; (407be8 <hal_i2c_init+0xb4>)
  407b72:	4798      	blx	r3
  407b74:	4b1b      	ldr	r3, [pc, #108]	; (407be4 <hal_i2c_init+0xb0>)
  407b76:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
  407b7a:	2301      	movs	r3, #1
  407b7c:	6083      	str	r3, [r0, #8]
            switch (bus)
  407b7e:	b1dd      	cbz	r5, 407bb8 <hal_i2c_init+0x84>
  407b80:	429d      	cmp	r5, r3
  407b82:	d01e      	beq.n	407bc2 <hal_i2c_init+0x8e>
            flexcom_enable((Flexcom*)i2c_hal_data[bus]->twi_id);
  407b84:	6800      	ldr	r0, [r0, #0]
  407b86:	4b19      	ldr	r3, [pc, #100]	; (407bec <hal_i2c_init+0xb8>)
  407b88:	4798      	blx	r3
            flexcom_set_opmode((Flexcom*)i2c_hal_data[bus]->twi_id, FLEXCOM_TWI);
  407b8a:	4f16      	ldr	r7, [pc, #88]	; (407be4 <hal_i2c_init+0xb0>)
  407b8c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
  407b90:	2103      	movs	r1, #3
  407b92:	6818      	ldr	r0, [r3, #0]
  407b94:	4b16      	ldr	r3, [pc, #88]	; (407bf0 <hal_i2c_init+0xbc>)
  407b96:	4798      	blx	r3
            opt_twi_master.master_clk = sysclk_get_cpu_hz();
  407b98:	4916      	ldr	r1, [pc, #88]	; (407bf4 <hal_i2c_init+0xc0>)
  407b9a:	4b17      	ldr	r3, [pc, #92]	; (407bf8 <hal_i2c_init+0xc4>)
  407b9c:	600b      	str	r3, [r1, #0]
            opt_twi_master.speed = cfg->atcai2c.baud;
  407b9e:	68a3      	ldr	r3, [r4, #8]
  407ba0:	604b      	str	r3, [r1, #4]
            opt_twi_master.smbus = 0;
  407ba2:	2300      	movs	r3, #0
  407ba4:	724b      	strb	r3, [r1, #9]
            twi_master_init(i2c_hal_data[bus]->twi_master_instance, &opt_twi_master);
  407ba6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
  407baa:	6858      	ldr	r0, [r3, #4]
  407bac:	4b13      	ldr	r3, [pc, #76]	; (407bfc <hal_i2c_init+0xc8>)
  407bae:	4798      	blx	r3
            i2c_hal_data[bus]->bus_index = bus;
  407bb0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
  407bb4:	60dd      	str	r5, [r3, #12]
  407bb6:	e7d4      	b.n	407b62 <hal_i2c_init+0x2e>
                i2c_hal_data[bus]->twi_id = ID_FLEXCOM4;
  407bb8:	2314      	movs	r3, #20
  407bba:	6003      	str	r3, [r0, #0]
                i2c_hal_data[bus]->twi_master_instance = TWI4;
  407bbc:	4b10      	ldr	r3, [pc, #64]	; (407c00 <hal_i2c_init+0xcc>)
  407bbe:	6043      	str	r3, [r0, #4]
                break;
  407bc0:	e7e0      	b.n	407b84 <hal_i2c_init+0x50>
                i2c_hal_data[bus]->twi_id = FLEXCOM6;
  407bc2:	4b10      	ldr	r3, [pc, #64]	; (407c04 <hal_i2c_init+0xd0>)
  407bc4:	6003      	str	r3, [r0, #0]
                i2c_hal_data[bus]->twi_master_instance = TWI6;
  407bc6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  407bca:	6043      	str	r3, [r0, #4]
                break;
  407bcc:	e7da      	b.n	407b84 <hal_i2c_init+0x50>
            i2c_hal_data[i] = NULL;
  407bce:	4b05      	ldr	r3, [pc, #20]	; (407be4 <hal_i2c_init+0xb0>)
  407bd0:	2200      	movs	r2, #0
  407bd2:	601a      	str	r2, [r3, #0]
  407bd4:	605a      	str	r2, [r3, #4]
    i2c_bus_ref_ct++;   // total across buses
  407bd6:	2201      	movs	r2, #1
  407bd8:	4b01      	ldr	r3, [pc, #4]	; (407be0 <hal_i2c_init+0xac>)
  407bda:	601a      	str	r2, [r3, #0]
  407bdc:	e7ba      	b.n	407b54 <hal_i2c_init+0x20>
  407bde:	bf00      	nop
  407be0:	20000ddc 	.word	0x20000ddc
  407be4:	20003038 	.word	0x20003038
  407be8:	0040d595 	.word	0x0040d595
  407bec:	00404169 	.word	0x00404169
  407bf0:	004042f5 	.word	0x004042f5
  407bf4:	2000302c 	.word	0x2000302c
  407bf8:	07270000 	.word	0x07270000
  407bfc:	00404d91 	.word	0x00404d91
  407c00:	4001c600 	.word	0x4001c600
  407c04:	40040000 	.word	0x40040000

00407c08 <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
  407c08:	2000      	movs	r0, #0
  407c0a:	4770      	bx	lr

00407c0c <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
  407c0c:	b530      	push	{r4, r5, lr}
  407c0e:	b087      	sub	sp, #28
  407c10:	460d      	mov	r5, r1
  407c12:	4614      	mov	r4, r2
    }
    printf("CRC    : "); print_array(&txdata[txdata[1] - 1], 2);
    printf("\r\n");
#endif

    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
  407c14:	4b10      	ldr	r3, [pc, #64]	; (407c58 <hal_i2c_send+0x4c>)
  407c16:	4798      	blx	r3
    // set to default i2c bus
    if (cfg->atcai2c.bus > MAX_I2C_BUSES - 1)
  407c18:	7943      	ldrb	r3, [r0, #5]
  407c1a:	2b01      	cmp	r3, #1
    {
        cfg->atcai2c.bus = 0;
  407c1c:	bf84      	itt	hi
  407c1e:	2300      	movhi	r3, #0
  407c20:	7143      	strbhi	r3, [r0, #5]
    }
    int bus = cfg->atcai2c.bus;
  407c22:	7942      	ldrb	r2, [r0, #5]

    txdata[0] = 0x03;   // insert the Word Address Value, Command token
  407c24:	2303      	movs	r3, #3
  407c26:	702b      	strb	r3, [r5, #0]
    txlength++;         // account for word address value byte.

    twi_packet_t packet = {
  407c28:	2300      	movs	r3, #0
  407c2a:	9301      	str	r3, [sp, #4]
  407c2c:	9302      	str	r3, [sp, #8]
  407c2e:	9305      	str	r3, [sp, #20]
  407c30:	9503      	str	r5, [sp, #12]
    txlength++;         // account for word address value byte.
  407c32:	3401      	adds	r4, #1
    twi_packet_t packet = {
  407c34:	9404      	str	r4, [sp, #16]
  407c36:	7903      	ldrb	r3, [r0, #4]
  407c38:	085b      	lsrs	r3, r3, #1
  407c3a:	f88d 3014 	strb.w	r3, [sp, #20]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet

    if (twi_master_write(i2c_hal_data[bus]->twi_master_instance, &packet) != TWI_SUCCESS)
  407c3e:	4b07      	ldr	r3, [pc, #28]	; (407c5c <hal_i2c_send+0x50>)
  407c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407c44:	a901      	add	r1, sp, #4
  407c46:	6858      	ldr	r0, [r3, #4]
  407c48:	4b05      	ldr	r3, [pc, #20]	; (407c60 <hal_i2c_send+0x54>)
  407c4a:	4798      	blx	r3
    {
        return ATCA_COMM_FAIL;
    }

    return ATCA_SUCCESS;
  407c4c:	2800      	cmp	r0, #0
}
  407c4e:	bf14      	ite	ne
  407c50:	20f0      	movne	r0, #240	; 0xf0
  407c52:	2000      	moveq	r0, #0
  407c54:	b007      	add	sp, #28
  407c56:	bd30      	pop	{r4, r5, pc}
  407c58:	00406df5 	.word	0x00406df5
  407c5c:	20003038 	.word	0x20003038
  407c60:	00404eb5 	.word	0x00404eb5

00407c64 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
  407c64:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c66:	b087      	sub	sp, #28
  407c68:	460e      	mov	r6, r1
  407c6a:	4614      	mov	r4, r2
#ifdef DEBUG_HAL
    printf("hal_i2c_receive()\r\n");
#endif

    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
  407c6c:	4b17      	ldr	r3, [pc, #92]	; (407ccc <hal_i2c_receive+0x68>)
  407c6e:	4798      	blx	r3
    // set to default i2c bus
    if (cfg->atcai2c.bus > MAX_I2C_BUSES - 1)
  407c70:	7943      	ldrb	r3, [r0, #5]
  407c72:	2b01      	cmp	r3, #1
    {
        cfg->atcai2c.bus = 0;
  407c74:	bf84      	itt	hi
  407c76:	2300      	movhi	r3, #0
  407c78:	7143      	strbhi	r3, [r0, #5]
    }
    int bus = cfg->atcai2c.bus;
  407c7a:	7945      	ldrb	r5, [r0, #5]
    int retries = cfg->rx_retries;
  407c7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    uint32_t status = !TWI_SUCCESS;

    twi_packet_t packet = {
  407c7e:	2300      	movs	r3, #0
  407c80:	9301      	str	r3, [sp, #4]
  407c82:	9302      	str	r3, [sp, #8]
  407c84:	9305      	str	r3, [sp, #20]
  407c86:	9603      	str	r6, [sp, #12]
        .chip        = cfg->atcai2c.slave_address >> 1,
        .addr        = { 0 },
        .addr_length = 0,
        .buffer      = rxdata,
        .length      = (uint32_t)*rxlength
  407c88:	8823      	ldrh	r3, [r4, #0]
  407c8a:	9304      	str	r3, [sp, #16]
    twi_packet_t packet = {
  407c8c:	7903      	ldrb	r3, [r0, #4]
  407c8e:	085b      	lsrs	r3, r3, #1
  407c90:	f88d 3014 	strb.w	r3, [sp, #20]
    };

    while (retries-- > 0 && status != TWI_SUCCESS)
  407c94:	1e54      	subs	r4, r2, #1
  407c96:	2a00      	cmp	r2, #0
  407c98:	dd13      	ble.n	407cc2 <hal_i2c_receive+0x5e>
    {
        status = twi_master_read(i2c_hal_data[bus]->twi_master_instance, &packet);
  407c9a:	4f0d      	ldr	r7, [pc, #52]	; (407cd0 <hal_i2c_receive+0x6c>)
  407c9c:	4e0d      	ldr	r6, [pc, #52]	; (407cd4 <hal_i2c_receive+0x70>)
  407c9e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
  407ca2:	a901      	add	r1, sp, #4
  407ca4:	6858      	ldr	r0, [r3, #4]
  407ca6:	47b0      	blx	r6
    while (retries-- > 0 && status != TWI_SUCCESS)
  407ca8:	3c01      	subs	r4, #1
  407caa:	f1b4 3fff 	cmp.w	r4, #4294967295
  407cae:	d002      	beq.n	407cb6 <hal_i2c_receive+0x52>
  407cb0:	2800      	cmp	r0, #0
  407cb2:	d1f4      	bne.n	407c9e <hal_i2c_receive+0x3a>
  407cb4:	e003      	b.n	407cbe <hal_i2c_receive+0x5a>
        printf("CRC    : "); print_array(&rxdata[rxdata[0] - 2], 2);
    }
    printf("\r\n");
#endif

    return ATCA_SUCCESS;
  407cb6:	2800      	cmp	r0, #0
  407cb8:	bf14      	ite	ne
  407cba:	20ec      	movne	r0, #236	; 0xec
  407cbc:	2000      	moveq	r0, #0
}
  407cbe:	b007      	add	sp, #28
  407cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ATCA_COMM_FAIL;
  407cc2:	2c00      	cmp	r4, #0
  407cc4:	bfd4      	ite	le
  407cc6:	20ec      	movle	r0, #236	; 0xec
  407cc8:	20f0      	movgt	r0, #240	; 0xf0
  407cca:	e7f8      	b.n	407cbe <hal_i2c_receive+0x5a>
  407ccc:	00406df5 	.word	0x00406df5
  407cd0:	20003038 	.word	0x20003038
  407cd4:	00404df5 	.word	0x00404df5

00407cd8 <change_i2c_speed>:
 *
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */
void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
  407cd8:	b570      	push	{r4, r5, r6, lr}
  407cda:	460e      	mov	r6, r1
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
  407cdc:	4b0c      	ldr	r3, [pc, #48]	; (407d10 <change_i2c_speed+0x38>)
  407cde:	4798      	blx	r3

    // set to default i2c bus
    if (cfg->atcai2c.bus > MAX_I2C_BUSES - 1)
  407ce0:	7943      	ldrb	r3, [r0, #5]
  407ce2:	2b01      	cmp	r3, #1
    {
        cfg->atcai2c.bus = 0;
  407ce4:	bf84      	itt	hi
  407ce6:	2300      	movhi	r3, #0
  407ce8:	7143      	strbhi	r3, [r0, #5]
    }
    int bus = cfg->atcai2c.bus;
  407cea:	7945      	ldrb	r5, [r0, #5]

    pmc_enable_periph_clk(i2c_hal_data[bus]->twi_id);
  407cec:	4c09      	ldr	r4, [pc, #36]	; (407d14 <change_i2c_speed+0x3c>)
  407cee:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
  407cf2:	6818      	ldr	r0, [r3, #0]
  407cf4:	4b08      	ldr	r3, [pc, #32]	; (407d18 <change_i2c_speed+0x40>)
  407cf6:	4798      	blx	r3

    opt_twi_master.master_clk = sysclk_get_cpu_hz();
  407cf8:	4908      	ldr	r1, [pc, #32]	; (407d1c <change_i2c_speed+0x44>)
  407cfa:	4b09      	ldr	r3, [pc, #36]	; (407d20 <change_i2c_speed+0x48>)
  407cfc:	600b      	str	r3, [r1, #0]
    opt_twi_master.speed      = speed;
  407cfe:	604e      	str	r6, [r1, #4]
    opt_twi_master.smbus      = 0;
  407d00:	2300      	movs	r3, #0
  407d02:	724b      	strb	r3, [r1, #9]

    twi_master_init(i2c_hal_data[bus]->twi_master_instance, &opt_twi_master);
  407d04:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
  407d08:	6858      	ldr	r0, [r3, #4]
  407d0a:	4b06      	ldr	r3, [pc, #24]	; (407d24 <change_i2c_speed+0x4c>)
  407d0c:	4798      	blx	r3
  407d0e:	bd70      	pop	{r4, r5, r6, pc}
  407d10:	00406df5 	.word	0x00406df5
  407d14:	20003038 	.word	0x20003038
  407d18:	00404771 	.word	0x00404771
  407d1c:	2000302c 	.word	0x2000302c
  407d20:	07270000 	.word	0x07270000
  407d24:	00404d91 	.word	0x00404d91

00407d28 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
  407d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407d2c:	b089      	sub	sp, #36	; 0x24
  407d2e:	4680      	mov	r8, r0
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
  407d30:	4b3b      	ldr	r3, [pc, #236]	; (407e20 <hal_i2c_wake+0xf8>)
  407d32:	4798      	blx	r3
  407d34:	4604      	mov	r4, r0

    //set to default i2c bus
    if (cfg->atcai2c.bus > MAX_I2C_BUSES - 1)
  407d36:	7943      	ldrb	r3, [r0, #5]
  407d38:	2b01      	cmp	r3, #1
    {
        cfg->atcai2c.bus = 0;
  407d3a:	bf84      	itt	hi
  407d3c:	2300      	movhi	r3, #0
  407d3e:	7143      	strbhi	r3, [r0, #5]
    }
    int bus = cfg->atcai2c.bus;
  407d40:	7945      	ldrb	r5, [r0, #5]
    int retries = cfg->rx_retries;
  407d42:	6a86      	ldr	r6, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
  407d44:	6887      	ldr	r7, [r0, #8]
    int status = !TWI_SUCCESS;
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
  407d46:	4b37      	ldr	r3, [pc, #220]	; (407e24 <hal_i2c_wake+0xfc>)
  407d48:	681b      	ldr	r3, [r3, #0]
  407d4a:	9306      	str	r3, [sp, #24]

    // if not already at 100kHz, change it
    if (bdrt != 100000)
  407d4c:	4b36      	ldr	r3, [pc, #216]	; (407e28 <hal_i2c_wake+0x100>)
  407d4e:	429f      	cmp	r7, r3
  407d50:	d048      	beq.n	407de4 <hal_i2c_wake+0xbc>
    {
        change_i2c_speed(iface, 100000);
  407d52:	4619      	mov	r1, r3
  407d54:	4640      	mov	r0, r8
  407d56:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 407e44 <hal_i2c_wake+0x11c>
  407d5a:	47c8      	blx	r9
    }

    // Send 0x00 as wake pulse
    twi_write_byte(i2c_hal_data[bus]->twi_master_instance, 0x00);
  407d5c:	4b33      	ldr	r3, [pc, #204]	; (407e2c <hal_i2c_wake+0x104>)
  407d5e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  407d62:	2100      	movs	r1, #0
  407d64:	6858      	ldr	r0, [r3, #4]
  407d66:	4b32      	ldr	r3, [pc, #200]	; (407e30 <hal_i2c_wake+0x108>)
  407d68:	4798      	blx	r3

    // rounded up to the nearest ms
    atca_delay_ms(((uint32_t)cfg->wake_delay + (1000 - 1)) / 1000);   // wait tWHI + tWLO which is configured based on device type and configuration structure
  407d6a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
  407d6c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
  407d70:	4b30      	ldr	r3, [pc, #192]	; (407e34 <hal_i2c_wake+0x10c>)
  407d72:	fba3 3000 	umull	r3, r0, r3, r0
  407d76:	0980      	lsrs	r0, r0, #6
  407d78:	4b2f      	ldr	r3, [pc, #188]	; (407e38 <hal_i2c_wake+0x110>)
  407d7a:	4798      	blx	r3

    twi_packet_t packet = {
  407d7c:	2300      	movs	r3, #0
  407d7e:	9301      	str	r3, [sp, #4]
  407d80:	9302      	str	r3, [sp, #8]
  407d82:	9305      	str	r3, [sp, #20]
  407d84:	ab07      	add	r3, sp, #28
  407d86:	9303      	str	r3, [sp, #12]
  407d88:	2304      	movs	r3, #4
  407d8a:	9304      	str	r3, [sp, #16]
  407d8c:	7923      	ldrb	r3, [r4, #4]
  407d8e:	085b      	lsrs	r3, r3, #1
  407d90:	f88d 3014 	strb.w	r3, [sp, #20]
    };

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    {
        change_i2c_speed(iface, bdrt);
  407d94:	4639      	mov	r1, r7
  407d96:	4640      	mov	r0, r8
  407d98:	47c8      	blx	r9
    }

    while (retries-- > 0 && status != TWI_SUCCESS)
  407d9a:	1e74      	subs	r4, r6, #1
  407d9c:	2e00      	cmp	r6, #0
  407d9e:	dd1c      	ble.n	407dda <hal_i2c_wake+0xb2>
    {
        status = twi_master_read(i2c_hal_data[bus]->twi_master_instance, &packet);
  407da0:	4f22      	ldr	r7, [pc, #136]	; (407e2c <hal_i2c_wake+0x104>)
  407da2:	4e26      	ldr	r6, [pc, #152]	; (407e3c <hal_i2c_wake+0x114>)
  407da4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
  407da8:	a901      	add	r1, sp, #4
  407daa:	6858      	ldr	r0, [r3, #4]
  407dac:	47b0      	blx	r6
    while (retries-- > 0 && status != TWI_SUCCESS)
  407dae:	3c01      	subs	r4, #1
  407db0:	f1b4 3fff 	cmp.w	r4, #4294967295
  407db4:	d00d      	beq.n	407dd2 <hal_i2c_wake+0xaa>
  407db6:	2800      	cmp	r0, #0
  407db8:	d1f4      	bne.n	407da4 <hal_i2c_wake+0x7c>
        }

        return ATCA_COMM_FAIL;
    }

    if (memcmp(data, expected, 4) == 0)
  407dba:	2204      	movs	r2, #4
  407dbc:	a906      	add	r1, sp, #24
  407dbe:	a807      	add	r0, sp, #28
  407dc0:	4b1f      	ldr	r3, [pc, #124]	; (407e40 <hal_i2c_wake+0x118>)
  407dc2:	4798      	blx	r3
    {
        return ATCA_SUCCESS;
    }

    return ATCA_COMM_FAIL;
  407dc4:	2800      	cmp	r0, #0
  407dc6:	bf0c      	ite	eq
  407dc8:	2000      	moveq	r0, #0
  407dca:	20f0      	movne	r0, #240	; 0xf0
}
  407dcc:	b009      	add	sp, #36	; 0x24
  407dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (status != TWI_SUCCESS)
  407dd2:	2800      	cmp	r0, #0
  407dd4:	d0f1      	beq.n	407dba <hal_i2c_wake+0x92>
            return ATCA_TOO_MANY_COMM_RETRIES;
  407dd6:	20ec      	movs	r0, #236	; 0xec
  407dd8:	e7f8      	b.n	407dcc <hal_i2c_wake+0xa4>
        return ATCA_COMM_FAIL;
  407dda:	2c00      	cmp	r4, #0
  407ddc:	bfd4      	ite	le
  407dde:	20ec      	movle	r0, #236	; 0xec
  407de0:	20f0      	movgt	r0, #240	; 0xf0
  407de2:	e7f3      	b.n	407dcc <hal_i2c_wake+0xa4>
    twi_write_byte(i2c_hal_data[bus]->twi_master_instance, 0x00);
  407de4:	4b11      	ldr	r3, [pc, #68]	; (407e2c <hal_i2c_wake+0x104>)
  407de6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  407dea:	2100      	movs	r1, #0
  407dec:	6858      	ldr	r0, [r3, #4]
  407dee:	4b10      	ldr	r3, [pc, #64]	; (407e30 <hal_i2c_wake+0x108>)
  407df0:	4798      	blx	r3
    atca_delay_ms(((uint32_t)cfg->wake_delay + (1000 - 1)) / 1000);   // wait tWHI + tWLO which is configured based on device type and configuration structure
  407df2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
  407df4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
  407df8:	4b0e      	ldr	r3, [pc, #56]	; (407e34 <hal_i2c_wake+0x10c>)
  407dfa:	fba3 3000 	umull	r3, r0, r3, r0
  407dfe:	0980      	lsrs	r0, r0, #6
  407e00:	4b0d      	ldr	r3, [pc, #52]	; (407e38 <hal_i2c_wake+0x110>)
  407e02:	4798      	blx	r3
    twi_packet_t packet = {
  407e04:	2300      	movs	r3, #0
  407e06:	9301      	str	r3, [sp, #4]
  407e08:	9302      	str	r3, [sp, #8]
  407e0a:	9305      	str	r3, [sp, #20]
  407e0c:	ab07      	add	r3, sp, #28
  407e0e:	9303      	str	r3, [sp, #12]
  407e10:	2304      	movs	r3, #4
  407e12:	9304      	str	r3, [sp, #16]
  407e14:	7923      	ldrb	r3, [r4, #4]
  407e16:	085b      	lsrs	r3, r3, #1
  407e18:	f88d 3014 	strb.w	r3, [sp, #20]
  407e1c:	e7bd      	b.n	407d9a <hal_i2c_wake+0x72>
  407e1e:	bf00      	nop
  407e20:	00406df5 	.word	0x00406df5
  407e24:	00416eb8 	.word	0x00416eb8
  407e28:	000186a0 	.word	0x000186a0
  407e2c:	20003038 	.word	0x20003038
  407e30:	00404f3d 	.word	0x00404f3d
  407e34:	10624dd3 	.word	0x10624dd3
  407e38:	00407f5d 	.word	0x00407f5d
  407e3c:	00404df5 	.word	0x00404df5
  407e40:	0040dbe1 	.word	0x0040dbe1
  407e44:	00407cd9 	.word	0x00407cd9

00407e48 <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
  407e48:	b500      	push	{lr}
  407e4a:	b087      	sub	sp, #28
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
  407e4c:	4b12      	ldr	r3, [pc, #72]	; (407e98 <hal_i2c_idle+0x50>)
  407e4e:	4798      	blx	r3

    // set to default i2c bus
    if (cfg->atcai2c.bus > MAX_I2C_BUSES - 1)
  407e50:	7943      	ldrb	r3, [r0, #5]
  407e52:	2b01      	cmp	r3, #1
    {
        cfg->atcai2c.bus = 0;
  407e54:	bf84      	itt	hi
  407e56:	2300      	movhi	r3, #0
  407e58:	7143      	strbhi	r3, [r0, #5]
    }
    int bus = cfg->atcai2c.bus;
  407e5a:	7942      	ldrb	r2, [r0, #5]
    uint8_t data[4];

    data[0] = 0x02; // idle word address value
  407e5c:	2302      	movs	r3, #2
  407e5e:	f88d 3014 	strb.w	r3, [sp, #20]

    twi_packet_t packet = {
  407e62:	2300      	movs	r3, #0
  407e64:	9300      	str	r3, [sp, #0]
  407e66:	9301      	str	r3, [sp, #4]
  407e68:	9304      	str	r3, [sp, #16]
  407e6a:	ab05      	add	r3, sp, #20
  407e6c:	9302      	str	r3, [sp, #8]
  407e6e:	2301      	movs	r3, #1
  407e70:	9303      	str	r3, [sp, #12]
  407e72:	7903      	ldrb	r3, [r0, #4]
  407e74:	085b      	lsrs	r3, r3, #1
  407e76:	f88d 3010 	strb.w	r3, [sp, #16]
        .addr_length = 0,
        .buffer      = data,
        .length      = 1
    };

    if (twi_master_write(i2c_hal_data[bus]->twi_master_instance, &packet) != TWI_SUCCESS)
  407e7a:	4b08      	ldr	r3, [pc, #32]	; (407e9c <hal_i2c_idle+0x54>)
  407e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407e80:	4669      	mov	r1, sp
  407e82:	6858      	ldr	r0, [r3, #4]
  407e84:	4b06      	ldr	r3, [pc, #24]	; (407ea0 <hal_i2c_idle+0x58>)
  407e86:	4798      	blx	r3
    {
        return ATCA_COMM_FAIL;
    }

    return ATCA_SUCCESS;
  407e88:	2800      	cmp	r0, #0
}
  407e8a:	bf14      	ite	ne
  407e8c:	20f0      	movne	r0, #240	; 0xf0
  407e8e:	2000      	moveq	r0, #0
  407e90:	b007      	add	sp, #28
  407e92:	f85d fb04 	ldr.w	pc, [sp], #4
  407e96:	bf00      	nop
  407e98:	00406df5 	.word	0x00406df5
  407e9c:	20003038 	.word	0x20003038
  407ea0:	00404eb5 	.word	0x00404eb5

00407ea4 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
  407ea4:	b500      	push	{lr}
  407ea6:	b087      	sub	sp, #28
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
  407ea8:	4b11      	ldr	r3, [pc, #68]	; (407ef0 <hal_i2c_sleep+0x4c>)
  407eaa:	4798      	blx	r3

    //// set to default i2c bus
    if (cfg->atcai2c.bus > MAX_I2C_BUSES - 1)
  407eac:	7943      	ldrb	r3, [r0, #5]
  407eae:	2b01      	cmp	r3, #1
    {
        cfg->atcai2c.bus = 0;
  407eb0:	bf84      	itt	hi
  407eb2:	2300      	movhi	r3, #0
  407eb4:	7143      	strbhi	r3, [r0, #5]
    }
    int bus = cfg->atcai2c.bus;
  407eb6:	7941      	ldrb	r1, [r0, #5]
    uint8_t data[4];

    data[0] = 0x01; // sleep word address value
  407eb8:	2201      	movs	r2, #1
  407eba:	f88d 2014 	strb.w	r2, [sp, #20]

    twi_packet_t packet = {
  407ebe:	2300      	movs	r3, #0
  407ec0:	9300      	str	r3, [sp, #0]
  407ec2:	9301      	str	r3, [sp, #4]
  407ec4:	9304      	str	r3, [sp, #16]
  407ec6:	ab05      	add	r3, sp, #20
  407ec8:	9302      	str	r3, [sp, #8]
  407eca:	9203      	str	r2, [sp, #12]
  407ecc:	7903      	ldrb	r3, [r0, #4]
  407ece:	40d3      	lsrs	r3, r2
  407ed0:	f88d 3010 	strb.w	r3, [sp, #16]
        .addr_length = 0,
        .buffer      = data,
        .length      = 1
    };

    if (twi_master_write(i2c_hal_data[bus]->twi_master_instance, &packet) != TWI_SUCCESS)
  407ed4:	4b07      	ldr	r3, [pc, #28]	; (407ef4 <hal_i2c_sleep+0x50>)
  407ed6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  407eda:	4669      	mov	r1, sp
  407edc:	6858      	ldr	r0, [r3, #4]
  407ede:	4b06      	ldr	r3, [pc, #24]	; (407ef8 <hal_i2c_sleep+0x54>)
  407ee0:	4798      	blx	r3
    {
        return ATCA_COMM_FAIL;
    }

    return ATCA_SUCCESS;
  407ee2:	2800      	cmp	r0, #0
}
  407ee4:	bf14      	ite	ne
  407ee6:	20f0      	movne	r0, #240	; 0xf0
  407ee8:	2000      	moveq	r0, #0
  407eea:	b007      	add	sp, #28
  407eec:	f85d fb04 	ldr.w	pc, [sp], #4
  407ef0:	00406df5 	.word	0x00406df5
  407ef4:	20003038 	.word	0x20003038
  407ef8:	00404eb5 	.word	0x00404eb5

00407efc <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_release(void *hal_data)
{
  407efc:	b538      	push	{r3, r4, r5, lr}
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    // set to default i2c bus
    if (hal->bus_index > MAX_I2C_BUSES - 1)
  407efe:	68c3      	ldr	r3, [r0, #12]
  407f00:	2b01      	cmp	r3, #1
    {
        hal->bus_index = 0;
  407f02:	bfc4      	itt	gt
  407f04:	2300      	movgt	r3, #0
  407f06:	60c3      	strgt	r3, [r0, #12]
    }

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
  407f08:	4a10      	ldr	r2, [pc, #64]	; (407f4c <hal_i2c_release+0x50>)
  407f0a:	6813      	ldr	r3, [r2, #0]
  407f0c:	3b01      	subs	r3, #1
  407f0e:	6013      	str	r3, [r2, #0]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
  407f10:	b120      	cbz	r0, 407f1c <hal_i2c_release+0x20>
  407f12:	6883      	ldr	r3, [r0, #8]
  407f14:	3b01      	subs	r3, #1
  407f16:	6083      	str	r3, [r0, #8]
  407f18:	2b00      	cmp	r3, #0
  407f1a:	dd01      	ble.n	407f20 <hal_i2c_release+0x24>
        free(i2c_hal_data[hal->bus_index]);
        i2c_hal_data[hal->bus_index] = NULL;
    }

    return ATCA_SUCCESS;
}
  407f1c:	2000      	movs	r0, #0
  407f1e:	bd38      	pop	{r3, r4, r5, pc}
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
  407f20:	68c2      	ldr	r2, [r0, #12]
  407f22:	4b0b      	ldr	r3, [pc, #44]	; (407f50 <hal_i2c_release+0x54>)
  407f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407f28:	2b00      	cmp	r3, #0
  407f2a:	d0f7      	beq.n	407f1c <hal_i2c_release+0x20>
  407f2c:	4604      	mov	r4, r0
        twi_reset(hal->twi_master_instance);
  407f2e:	6840      	ldr	r0, [r0, #4]
  407f30:	4b08      	ldr	r3, [pc, #32]	; (407f54 <hal_i2c_release+0x58>)
  407f32:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
  407f34:	4d06      	ldr	r5, [pc, #24]	; (407f50 <hal_i2c_release+0x54>)
  407f36:	68e3      	ldr	r3, [r4, #12]
  407f38:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
  407f3c:	4b06      	ldr	r3, [pc, #24]	; (407f58 <hal_i2c_release+0x5c>)
  407f3e:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
  407f40:	68e3      	ldr	r3, [r4, #12]
  407f42:	2200      	movs	r2, #0
  407f44:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  407f48:	e7e8      	b.n	407f1c <hal_i2c_release+0x20>
  407f4a:	bf00      	nop
  407f4c:	20000ddc 	.word	0x20000ddc
  407f50:	20003038 	.word	0x20003038
  407f54:	00404f41 	.word	0x00404f41
  407f58:	0040d5a5 	.word	0x0040d5a5

00407f5c <atca_delay_ms>:
 *        something else in your system while delaying.
 *
 * \param[in] delay number of milliseconds to delay
 */
void atca_delay_ms(uint32_t delay)
{
  407f5c:	b538      	push	{r3, r4, r5, lr}
    // use ASF supplied delay
    delay_ms(delay);
  407f5e:	b918      	cbnz	r0, 407f68 <atca_delay_ms+0xc>
  407f60:	2009      	movs	r0, #9
  407f62:	4b0a      	ldr	r3, [pc, #40]	; (407f8c <atca_delay_ms+0x30>)
  407f64:	4798      	blx	r3
  407f66:	bd38      	pop	{r3, r4, r5, pc}
  407f68:	4601      	mov	r1, r0
  407f6a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  407f6e:	2300      	movs	r3, #0
  407f70:	f243 64af 	movw	r4, #13999	; 0x36af
  407f74:	2500      	movs	r5, #0
  407f76:	4806      	ldr	r0, [pc, #24]	; (407f90 <atca_delay_ms+0x34>)
  407f78:	fbe0 4501 	umlal	r4, r5, r0, r1
  407f7c:	4620      	mov	r0, r4
  407f7e:	4629      	mov	r1, r5
  407f80:	4c04      	ldr	r4, [pc, #16]	; (407f94 <atca_delay_ms+0x38>)
  407f82:	47a0      	blx	r4
  407f84:	4b01      	ldr	r3, [pc, #4]	; (407f8c <atca_delay_ms+0x30>)
  407f86:	4798      	blx	r3
  407f88:	bd38      	pop	{r3, r4, r5, pc}
  407f8a:	bf00      	nop
  407f8c:	20000001 	.word	0x20000001
  407f90:	07270000 	.word	0x07270000
  407f94:	0040c7d1 	.word	0x0040c7d1

00407f98 <atca_jwt_check_payload_start>:
void atca_jwt_check_payload_start(
    atca_jwt_t* jwt     /**< [in] JWT Context to use */
    )
{
    /* Rationality checks: a) must be valid, b) buf must be valid, c) must not be at the start, d) must have room */
    if (jwt && jwt->buf && jwt->cur && (jwt->cur < jwt->buflen - 1))
  407f98:	4603      	mov	r3, r0
  407f9a:	b190      	cbz	r0, 407fc2 <atca_jwt_check_payload_start+0x2a>
  407f9c:	6801      	ldr	r1, [r0, #0]
  407f9e:	b181      	cbz	r1, 407fc2 <atca_jwt_check_payload_start+0x2a>
  407fa0:	88c2      	ldrh	r2, [r0, #6]
  407fa2:	b172      	cbz	r2, 407fc2 <atca_jwt_check_payload_start+0x2a>
  407fa4:	8880      	ldrh	r0, [r0, #4]
  407fa6:	3801      	subs	r0, #1
  407fa8:	4282      	cmp	r2, r0
  407faa:	da0a      	bge.n	407fc2 <atca_jwt_check_payload_start+0x2a>
    {
        /* Check the previous */
        char c = jwt->buf[jwt->cur - 1];
  407fac:	1888      	adds	r0, r1, r2
  407fae:	f810 0c01 	ldrb.w	r0, [r0, #-1]
        if ('.' == c)
  407fb2:	282e      	cmp	r0, #46	; 0x2e
  407fb4:	d006      	beq.n	407fc4 <atca_jwt_check_payload_start+0x2c>
        {
            jwt->buf[jwt->cur++] = '{';
        }
        else if ('{' != c)
  407fb6:	287b      	cmp	r0, #123	; 0x7b
  407fb8:	d003      	beq.n	407fc2 <atca_jwt_check_payload_start+0x2a>
        {
            jwt->buf[jwt->cur++] = ',';
  407fba:	1c50      	adds	r0, r2, #1
  407fbc:	80d8      	strh	r0, [r3, #6]
  407fbe:	232c      	movs	r3, #44	; 0x2c
  407fc0:	548b      	strb	r3, [r1, r2]
  407fc2:	4770      	bx	lr
            jwt->buf[jwt->cur++] = '{';
  407fc4:	1c50      	adds	r0, r2, #1
  407fc6:	80d8      	strh	r0, [r3, #6]
  407fc8:	237b      	movs	r3, #123	; 0x7b
  407fca:	548b      	strb	r3, [r1, r2]
  407fcc:	4770      	bx	lr
	...

00407fd0 <atca_jwt_init>:
    )
{
    ATCA_STATUS ret = ATCA_BAD_PARAM;
    size_t tSize;

    if (jwt && buf && buflen)
  407fd0:	2800      	cmp	r0, #0
  407fd2:	d02b      	beq.n	40802c <atca_jwt_init+0x5c>
{
  407fd4:	b530      	push	{r4, r5, lr}
  407fd6:	b085      	sub	sp, #20
  407fd8:	4605      	mov	r5, r0
    if (jwt && buf && buflen)
  407fda:	b351      	cbz	r1, 408032 <atca_jwt_init+0x62>
  407fdc:	b91a      	cbnz	r2, 407fe6 <atca_jwt_init+0x16>
    ATCA_STATUS ret = ATCA_BAD_PARAM;
  407fde:	23e2      	movs	r3, #226	; 0xe2
                ret = ATCA_INVALID_SIZE;
            }
        }
    }
    return ret;
}
  407fe0:	4618      	mov	r0, r3
  407fe2:	b005      	add	sp, #20
  407fe4:	bd30      	pop	{r4, r5, pc}
  407fe6:	4614      	mov	r4, r2
  407fe8:	460a      	mov	r2, r1
        jwt->buf = buf;
  407fea:	6029      	str	r1, [r5, #0]
        jwt->buflen = buflen;
  407fec:	8084      	strh	r4, [r0, #4]
        jwt->cur = 0;
  407fee:	2300      	movs	r3, #0
  407ff0:	80c3      	strh	r3, [r0, #6]
        tSize = jwt->buflen;
  407ff2:	ab04      	add	r3, sp, #16
  407ff4:	f843 4d04 	str.w	r4, [r3, #-4]!
        ret = atcab_base64encode_((const uint8_t*)g_jwt_header, strlen(g_jwt_header), jwt->buf,
  407ff8:	490f      	ldr	r1, [pc, #60]	; (408038 <atca_jwt_init+0x68>)
  407ffa:	9100      	str	r1, [sp, #0]
  407ffc:	211b      	movs	r1, #27
  407ffe:	480f      	ldr	r0, [pc, #60]	; (40803c <atca_jwt_init+0x6c>)
  408000:	4c0f      	ldr	r4, [pc, #60]	; (408040 <atca_jwt_init+0x70>)
  408002:	47a0      	blx	r4
        if (ATCA_SUCCESS == ret)
  408004:	4603      	mov	r3, r0
  408006:	2800      	cmp	r0, #0
  408008:	d1ea      	bne.n	407fe0 <atca_jwt_init+0x10>
            jwt->cur += (uint16_t)tSize;
  40800a:	88e9      	ldrh	r1, [r5, #6]
  40800c:	9a03      	ldr	r2, [sp, #12]
  40800e:	440a      	add	r2, r1
  408010:	b292      	uxth	r2, r2
  408012:	80ea      	strh	r2, [r5, #6]
            if (jwt->cur < jwt->buflen - 1)
  408014:	88a9      	ldrh	r1, [r5, #4]
  408016:	3901      	subs	r1, #1
  408018:	428a      	cmp	r2, r1
  40801a:	db01      	blt.n	408020 <atca_jwt_init+0x50>
                ret = ATCA_INVALID_SIZE;
  40801c:	23e4      	movs	r3, #228	; 0xe4
  40801e:	e7df      	b.n	407fe0 <atca_jwt_init+0x10>
                jwt->buf[jwt->cur++] = '.';
  408020:	6829      	ldr	r1, [r5, #0]
  408022:	1c50      	adds	r0, r2, #1
  408024:	80e8      	strh	r0, [r5, #6]
  408026:	202e      	movs	r0, #46	; 0x2e
  408028:	5488      	strb	r0, [r1, r2]
  40802a:	e7d9      	b.n	407fe0 <atca_jwt_init+0x10>
    ATCA_STATUS ret = ATCA_BAD_PARAM;
  40802c:	23e2      	movs	r3, #226	; 0xe2
}
  40802e:	4618      	mov	r0, r3
  408030:	4770      	bx	lr
    ATCA_STATUS ret = ATCA_BAD_PARAM;
  408032:	23e2      	movs	r3, #226	; 0xe2
  408034:	e7d4      	b.n	407fe0 <atca_jwt_init+0x10>
  408036:	bf00      	nop
  408038:	200001e0 	.word	0x200001e0
  40803c:	00416ee0 	.word	0x00416ee0
  408040:	00407155 	.word	0x00407155

00408044 <atca_jwt_finalize>:
 */
ATCA_STATUS atca_jwt_finalize(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    uint16_t    key_id  /**< [in] Key Id (Slot number) used to sign */
    )
{
  408044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408048:	b084      	sub	sp, #16
    ATCA_STATUS status;
    uint16_t i;
    size_t rem;
    size_t tSize;

    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
  40804a:	2800      	cmp	r0, #0
  40804c:	f000 809d 	beq.w	40818a <atca_jwt_finalize+0x146>
  408050:	4607      	mov	r7, r0
  408052:	6802      	ldr	r2, [r0, #0]
  408054:	2a00      	cmp	r2, #0
  408056:	f000 809a 	beq.w	40818e <atca_jwt_finalize+0x14a>
  40805a:	8880      	ldrh	r0, [r0, #4]
  40805c:	b920      	cbnz	r0, 408068 <atca_jwt_finalize+0x24>
    {
        return ATCA_BAD_PARAM;
  40805e:	25e2      	movs	r5, #226	; 0xe2

    /* Make sure resulting buffer is null terminated */
    jwt->buf[jwt->cur] = 0;

    return status;
}
  408060:	4628      	mov	r0, r5
  408062:	b004      	add	sp, #16
  408064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
  408068:	88fd      	ldrh	r5, [r7, #6]
  40806a:	b90d      	cbnz	r5, 408070 <atca_jwt_finalize+0x2c>
        return ATCA_BAD_PARAM;
  40806c:	25e2      	movs	r5, #226	; 0xe2
  40806e:	e7f7      	b.n	408060 <atca_jwt_finalize+0x1c>
    if ('}' != jwt->buf[jwt->cur - 1])
  408070:	1950      	adds	r0, r2, r5
  408072:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  408076:	287d      	cmp	r0, #125	; 0x7d
  408078:	d005      	beq.n	408086 <atca_jwt_finalize+0x42>
        jwt->buf[jwt->cur++] = '}';
  40807a:	1c68      	adds	r0, r5, #1
  40807c:	80f8      	strh	r0, [r7, #6]
  40807e:	207d      	movs	r0, #125	; 0x7d
  408080:	5550      	strb	r0, [r2, r5]
    for (i = 0; i < jwt->cur; i++)
  408082:	88fd      	ldrh	r5, [r7, #6]
  408084:	b315      	cbz	r5, 4080cc <atca_jwt_finalize+0x88>
        if ('.' == jwt->buf[i])
  408086:	683a      	ldr	r2, [r7, #0]
  408088:	7810      	ldrb	r0, [r2, #0]
  40808a:	282e      	cmp	r0, #46	; 0x2e
  40808c:	bf18      	it	ne
  40808e:	2400      	movne	r4, #0
  408090:	d01a      	beq.n	4080c8 <atca_jwt_finalize+0x84>
    for (i = 0; i < jwt->cur; i++)
  408092:	3401      	adds	r4, #1
  408094:	b2a4      	uxth	r4, r4
  408096:	42ac      	cmp	r4, r5
  408098:	d205      	bcs.n	4080a6 <atca_jwt_finalize+0x62>
        if ('.' == jwt->buf[i])
  40809a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40809e:	282e      	cmp	r0, #46	; 0x2e
  4080a0:	d1f7      	bne.n	408092 <atca_jwt_finalize+0x4e>
            i++;
  4080a2:	3401      	adds	r4, #1
  4080a4:	b2a4      	uxth	r4, r4
    rem = (jwt->cur - i + ATCA_SIG_SIZE) * 4;
  4080a6:	1b2e      	subs	r6, r5, r4
  4080a8:	f106 0240 	add.w	r2, r6, #64	; 0x40
  4080ac:	0092      	lsls	r2, r2, #2
    rem /= 3;
  4080ae:	483a      	ldr	r0, [pc, #232]	; (408198 <atca_jwt_finalize+0x154>)
  4080b0:	fba0 3202 	umull	r3, r2, r0, r2
  4080b4:	0852      	lsrs	r2, r2, #1
    if (rem > (size_t)(jwt->buflen - jwt->cur))
  4080b6:	f8b7 e004 	ldrh.w	lr, [r7, #4]
    rem += 3;
  4080ba:	3203      	adds	r2, #3
    if (rem > (size_t)(jwt->buflen - jwt->cur))
  4080bc:	ebae 0005 	sub.w	r0, lr, r5
  4080c0:	4282      	cmp	r2, r0
  4080c2:	d905      	bls.n	4080d0 <atca_jwt_finalize+0x8c>
        return ATCA_INVALID_SIZE;
  4080c4:	25e4      	movs	r5, #228	; 0xe4
  4080c6:	e7cb      	b.n	408060 <atca_jwt_finalize+0x1c>
    for (i = 0; i < jwt->cur; i++)
  4080c8:	2400      	movs	r4, #0
  4080ca:	e7ea      	b.n	4080a2 <atca_jwt_finalize+0x5e>
  4080cc:	462c      	mov	r4, r5
  4080ce:	e7ea      	b.n	4080a6 <atca_jwt_finalize+0x62>
  4080d0:	4688      	mov	r8, r1
    memmove(jwt->buf + jwt->buflen - jwt->cur, &jwt->buf[i], rem);
  4080d2:	6838      	ldr	r0, [r7, #0]
  4080d4:	ebae 0505 	sub.w	r5, lr, r5
  4080d8:	4632      	mov	r2, r6
  4080da:	1901      	adds	r1, r0, r4
  4080dc:	4428      	add	r0, r5
  4080de:	4b2f      	ldr	r3, [pc, #188]	; (40819c <atca_jwt_finalize+0x158>)
  4080e0:	4798      	blx	r3
    tSize = jwt->buflen;
  4080e2:	88ba      	ldrh	r2, [r7, #4]
  4080e4:	ab04      	add	r3, sp, #16
  4080e6:	f843 2d04 	str.w	r2, [r3, #-4]!
    status = atcab_base64encode_((uint8_t*)(jwt->buf + jwt->buflen - jwt->cur), rem,
  4080ea:	683d      	ldr	r5, [r7, #0]
  4080ec:	88f8      	ldrh	r0, [r7, #6]
  4080ee:	1a10      	subs	r0, r2, r0
  4080f0:	4a2b      	ldr	r2, [pc, #172]	; (4081a0 <atca_jwt_finalize+0x15c>)
  4080f2:	9200      	str	r2, [sp, #0]
  4080f4:	192a      	adds	r2, r5, r4
  4080f6:	4631      	mov	r1, r6
  4080f8:	4428      	add	r0, r5
  4080fa:	4d2a      	ldr	r5, [pc, #168]	; (4081a4 <atca_jwt_finalize+0x160>)
  4080fc:	47a8      	blx	r5
    if (ATCA_SUCCESS != status)
  4080fe:	4605      	mov	r5, r0
  408100:	2800      	cmp	r0, #0
  408102:	d1ad      	bne.n	408060 <atca_jwt_finalize+0x1c>
    jwt->cur = (uint16_t)(i + tSize);
  408104:	9b03      	ldr	r3, [sp, #12]
  408106:	4423      	add	r3, r4
  408108:	b29b      	uxth	r3, r3
  40810a:	80fb      	strh	r3, [r7, #6]
    if (jwt->cur >= jwt->buflen - 88)
  40810c:	88ba      	ldrh	r2, [r7, #4]
  40810e:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
  408112:	428b      	cmp	r3, r1
  408114:	db01      	blt.n	40811a <atca_jwt_finalize+0xd6>
        return ATCA_INVALID_SIZE;
  408116:	25e4      	movs	r5, #228	; 0xe4
  408118:	e7a2      	b.n	408060 <atca_jwt_finalize+0x1c>
    status = atcac_sw_sha2_256((const uint8_t*)jwt->buf, jwt->cur, (uint8_t*)(jwt->buf + jwt->buflen - 32));
  40811a:	6838      	ldr	r0, [r7, #0]
  40811c:	3a20      	subs	r2, #32
  40811e:	4402      	add	r2, r0
  408120:	4619      	mov	r1, r3
  408122:	4b21      	ldr	r3, [pc, #132]	; (4081a8 <atca_jwt_finalize+0x164>)
  408124:	4798      	blx	r3
  408126:	b2c5      	uxtb	r5, r0
    if (ATCA_SUCCESS != status)
  408128:	2d00      	cmp	r5, #0
  40812a:	d199      	bne.n	408060 <atca_jwt_finalize+0x1c>
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
  40812c:	6839      	ldr	r1, [r7, #0]
  40812e:	88bb      	ldrh	r3, [r7, #4]
                        (uint8_t*)(jwt->buf + jwt->buflen - 64));
  408130:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
  408134:	3b20      	subs	r3, #32
  408136:	440a      	add	r2, r1
  408138:	4419      	add	r1, r3
  40813a:	4640      	mov	r0, r8
  40813c:	4b1b      	ldr	r3, [pc, #108]	; (4081ac <atca_jwt_finalize+0x168>)
  40813e:	4798      	blx	r3
    if (ATCA_SUCCESS != status)
  408140:	4605      	mov	r5, r0
  408142:	2800      	cmp	r0, #0
  408144:	d18c      	bne.n	408060 <atca_jwt_finalize+0x1c>
    jwt->buf[jwt->cur++] = '.';
  408146:	683a      	ldr	r2, [r7, #0]
  408148:	88fb      	ldrh	r3, [r7, #6]
  40814a:	1c59      	adds	r1, r3, #1
  40814c:	80f9      	strh	r1, [r7, #6]
  40814e:	212e      	movs	r1, #46	; 0x2e
  408150:	54d1      	strb	r1, [r2, r3]
    tSize = jwt->buflen - jwt->cur;
  408152:	88b9      	ldrh	r1, [r7, #4]
  408154:	88fa      	ldrh	r2, [r7, #6]
  408156:	1a88      	subs	r0, r1, r2
  408158:	ab04      	add	r3, sp, #16
  40815a:	f843 0d04 	str.w	r0, [r3, #-4]!
    atcab_base64encode_((const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SIG_SIZE), ATCA_SIG_SIZE,
  40815e:	683c      	ldr	r4, [r7, #0]
  408160:	f1a1 0040 	sub.w	r0, r1, #64	; 0x40
  408164:	490e      	ldr	r1, [pc, #56]	; (4081a0 <atca_jwt_finalize+0x15c>)
  408166:	9100      	str	r1, [sp, #0]
  408168:	4422      	add	r2, r4
  40816a:	2140      	movs	r1, #64	; 0x40
  40816c:	4420      	add	r0, r4
  40816e:	4c0d      	ldr	r4, [pc, #52]	; (4081a4 <atca_jwt_finalize+0x160>)
  408170:	47a0      	blx	r4
    jwt->cur += (uint16_t)tSize;
  408172:	88fa      	ldrh	r2, [r7, #6]
  408174:	9b03      	ldr	r3, [sp, #12]
  408176:	4413      	add	r3, r2
  408178:	b29b      	uxth	r3, r3
  40817a:	80fb      	strh	r3, [r7, #6]
    if (jwt->cur >= jwt->buflen)
  40817c:	88ba      	ldrh	r2, [r7, #4]
  40817e:	429a      	cmp	r2, r3
  408180:	d907      	bls.n	408192 <atca_jwt_finalize+0x14e>
    jwt->buf[jwt->cur] = 0;
  408182:	683a      	ldr	r2, [r7, #0]
  408184:	2100      	movs	r1, #0
  408186:	54d1      	strb	r1, [r2, r3]
    return status;
  408188:	e76a      	b.n	408060 <atca_jwt_finalize+0x1c>
        return ATCA_BAD_PARAM;
  40818a:	25e2      	movs	r5, #226	; 0xe2
  40818c:	e768      	b.n	408060 <atca_jwt_finalize+0x1c>
  40818e:	25e2      	movs	r5, #226	; 0xe2
  408190:	e766      	b.n	408060 <atca_jwt_finalize+0x1c>
        return ATCA_INVALID_SIZE;
  408192:	25e4      	movs	r5, #228	; 0xe4
  408194:	e764      	b.n	408060 <atca_jwt_finalize+0x1c>
  408196:	bf00      	nop
  408198:	aaaaaaab 	.word	0xaaaaaaab
  40819c:	0040dd75 	.word	0x0040dd75
  4081a0:	200001e0 	.word	0x200001e0
  4081a4:	00407155 	.word	0x00407155
  4081a8:	00407315 	.word	0x00407315
  4081ac:	00407add 	.word	0x00407add

004081b0 <atca_jwt_add_claim_string>:
    )
{
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim && value)
  4081b0:	b338      	cbz	r0, 408202 <atca_jwt_add_claim_string+0x52>
{
  4081b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4081b4:	b083      	sub	sp, #12
  4081b6:	4604      	mov	r4, r0
    if (jwt && jwt->buf && jwt->buflen && claim && value)
  4081b8:	6800      	ldr	r0, [r0, #0]
  4081ba:	b320      	cbz	r0, 408206 <atca_jwt_add_claim_string+0x56>
  4081bc:	88a3      	ldrh	r3, [r4, #4]
  4081be:	b913      	cbnz	r3, 4081c6 <atca_jwt_add_claim_string+0x16>
            return ATCA_GEN_FAIL;
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
  4081c0:	20e2      	movs	r0, #226	; 0xe2
    }
}
  4081c2:	b003      	add	sp, #12
  4081c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (jwt && jwt->buf && jwt->buflen && claim && value)
  4081c6:	b301      	cbz	r1, 40820a <atca_jwt_add_claim_string+0x5a>
  4081c8:	b30a      	cbz	r2, 40820e <atca_jwt_add_claim_string+0x5e>
  4081ca:	4616      	mov	r6, r2
  4081cc:	460d      	mov	r5, r1
        atca_jwt_check_payload_start(jwt);
  4081ce:	4620      	mov	r0, r4
  4081d0:	4b11      	ldr	r3, [pc, #68]	; (408218 <atca_jwt_add_claim_string+0x68>)
  4081d2:	4798      	blx	r3
        remaining = jwt->buflen - jwt->cur;
  4081d4:	88e0      	ldrh	r0, [r4, #6]
  4081d6:	88a7      	ldrh	r7, [r4, #4]
  4081d8:	1a3f      	subs	r7, r7, r0
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":\"%s\"", claim, value);
  4081da:	f8d4 e000 	ldr.w	lr, [r4]
  4081de:	9600      	str	r6, [sp, #0]
  4081e0:	462b      	mov	r3, r5
  4081e2:	4a0e      	ldr	r2, [pc, #56]	; (40821c <atca_jwt_add_claim_string+0x6c>)
  4081e4:	4639      	mov	r1, r7
  4081e6:	4470      	add	r0, lr
  4081e8:	4d0d      	ldr	r5, [pc, #52]	; (408220 <atca_jwt_add_claim_string+0x70>)
  4081ea:	47a8      	blx	r5
        if (0 < written && written < remaining)
  4081ec:	2800      	cmp	r0, #0
  4081ee:	dd10      	ble.n	408212 <atca_jwt_add_claim_string+0x62>
  4081f0:	4287      	cmp	r7, r0
  4081f2:	dc01      	bgt.n	4081f8 <atca_jwt_add_claim_string+0x48>
            return ATCA_GEN_FAIL;
  4081f4:	20e1      	movs	r0, #225	; 0xe1
  4081f6:	e7e4      	b.n	4081c2 <atca_jwt_add_claim_string+0x12>
            jwt->cur += written;
  4081f8:	88e3      	ldrh	r3, [r4, #6]
  4081fa:	4418      	add	r0, r3
  4081fc:	80e0      	strh	r0, [r4, #6]
            return ATCA_SUCCESS;
  4081fe:	2000      	movs	r0, #0
  408200:	e7df      	b.n	4081c2 <atca_jwt_add_claim_string+0x12>
        return ATCA_BAD_PARAM;
  408202:	20e2      	movs	r0, #226	; 0xe2
  408204:	4770      	bx	lr
  408206:	20e2      	movs	r0, #226	; 0xe2
  408208:	e7db      	b.n	4081c2 <atca_jwt_add_claim_string+0x12>
  40820a:	20e2      	movs	r0, #226	; 0xe2
  40820c:	e7d9      	b.n	4081c2 <atca_jwt_add_claim_string+0x12>
  40820e:	20e2      	movs	r0, #226	; 0xe2
  408210:	e7d7      	b.n	4081c2 <atca_jwt_add_claim_string+0x12>
            return ATCA_GEN_FAIL;
  408212:	20e1      	movs	r0, #225	; 0xe1
  408214:	e7d5      	b.n	4081c2 <atca_jwt_add_claim_string+0x12>
  408216:	bf00      	nop
  408218:	00407f99 	.word	0x00407f99
  40821c:	00416ed4 	.word	0x00416ed4
  408220:	0040e401 	.word	0x0040e401

00408224 <atca_jwt_add_claim_numeric>:
    )
{
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim)
  408224:	b330      	cbz	r0, 408274 <atca_jwt_add_claim_numeric+0x50>
{
  408226:	b5f0      	push	{r4, r5, r6, r7, lr}
  408228:	b083      	sub	sp, #12
  40822a:	4604      	mov	r4, r0
    if (jwt && jwt->buf && jwt->buflen && claim)
  40822c:	6800      	ldr	r0, [r0, #0]
  40822e:	b318      	cbz	r0, 408278 <atca_jwt_add_claim_numeric+0x54>
  408230:	88a3      	ldrh	r3, [r4, #4]
  408232:	b913      	cbnz	r3, 40823a <atca_jwt_add_claim_numeric+0x16>
            return ATCA_GEN_FAIL;
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
  408234:	20e2      	movs	r0, #226	; 0xe2
    }
}
  408236:	b003      	add	sp, #12
  408238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (jwt && jwt->buf && jwt->buflen && claim)
  40823a:	b1f9      	cbz	r1, 40827c <atca_jwt_add_claim_numeric+0x58>
  40823c:	4616      	mov	r6, r2
  40823e:	460d      	mov	r5, r1
        atca_jwt_check_payload_start(jwt);
  408240:	4620      	mov	r0, r4
  408242:	4b10      	ldr	r3, [pc, #64]	; (408284 <atca_jwt_add_claim_numeric+0x60>)
  408244:	4798      	blx	r3
        remaining = jwt->buflen - jwt->cur;
  408246:	88e0      	ldrh	r0, [r4, #6]
  408248:	88a7      	ldrh	r7, [r4, #4]
  40824a:	1a3f      	subs	r7, r7, r0
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":%d", claim, value);
  40824c:	f8d4 e000 	ldr.w	lr, [r4]
  408250:	9600      	str	r6, [sp, #0]
  408252:	462b      	mov	r3, r5
  408254:	4a0c      	ldr	r2, [pc, #48]	; (408288 <atca_jwt_add_claim_numeric+0x64>)
  408256:	4639      	mov	r1, r7
  408258:	4470      	add	r0, lr
  40825a:	4d0c      	ldr	r5, [pc, #48]	; (40828c <atca_jwt_add_claim_numeric+0x68>)
  40825c:	47a8      	blx	r5
        if (0 < written && written < remaining)
  40825e:	2800      	cmp	r0, #0
  408260:	dd0e      	ble.n	408280 <atca_jwt_add_claim_numeric+0x5c>
  408262:	4287      	cmp	r7, r0
  408264:	dc01      	bgt.n	40826a <atca_jwt_add_claim_numeric+0x46>
            return ATCA_GEN_FAIL;
  408266:	20e1      	movs	r0, #225	; 0xe1
  408268:	e7e5      	b.n	408236 <atca_jwt_add_claim_numeric+0x12>
            jwt->cur += written;
  40826a:	88e3      	ldrh	r3, [r4, #6]
  40826c:	4418      	add	r0, r3
  40826e:	80e0      	strh	r0, [r4, #6]
            return 0;
  408270:	2000      	movs	r0, #0
  408272:	e7e0      	b.n	408236 <atca_jwt_add_claim_numeric+0x12>
        return ATCA_BAD_PARAM;
  408274:	20e2      	movs	r0, #226	; 0xe2
  408276:	4770      	bx	lr
  408278:	20e2      	movs	r0, #226	; 0xe2
  40827a:	e7dc      	b.n	408236 <atca_jwt_add_claim_numeric+0x12>
  40827c:	20e2      	movs	r0, #226	; 0xe2
  40827e:	e7da      	b.n	408236 <atca_jwt_add_claim_numeric+0x12>
            return ATCA_GEN_FAIL;
  408280:	20e1      	movs	r0, #225	; 0xe1
  408282:	e7d8      	b.n	408236 <atca_jwt_add_claim_numeric+0x12>
  408284:	00407f99 	.word	0x00407f99
  408288:	00416ecc 	.word	0x00416ecc
  40828c:	0040e401 	.word	0x0040e401

00408290 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
  408290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408294:	b083      	sub	sp, #12
  408296:	4607      	mov	r7, r0
  408298:	9201      	str	r2, [sp, #4]
    int rc = MQTTCLIENT_FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
  40829a:	f1b1 0800 	subs.w	r8, r1, #0
        sent = 0;
  40829e:	bfd8      	it	le
  4082a0:	2400      	movle	r4, #0
    while (sent < length && !TimerIsExpired(timer))
  4082a2:	dd18      	ble.n	4082d6 <sendPacket+0x46>
  4082a4:	2400      	movs	r4, #0
  4082a6:	f8df a050 	ldr.w	sl, [pc, #80]	; 4082f8 <sendPacket+0x68>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
  4082aa:	f8df b050 	ldr.w	fp, [pc, #80]	; 4082fc <sendPacket+0x6c>
    while (sent < length && !TimerIsExpired(timer))
  4082ae:	9801      	ldr	r0, [sp, #4]
  4082b0:	47d0      	blx	sl
  4082b2:	b980      	cbnz	r0, 4082d6 <sendPacket+0x46>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
  4082b4:	6d3e      	ldr	r6, [r7, #80]	; 0x50
  4082b6:	f8d6 9004 	ldr.w	r9, [r6, #4]
  4082ba:	693d      	ldr	r5, [r7, #16]
  4082bc:	4425      	add	r5, r4
  4082be:	9801      	ldr	r0, [sp, #4]
  4082c0:	47d8      	blx	fp
  4082c2:	4603      	mov	r3, r0
  4082c4:	4642      	mov	r2, r8
  4082c6:	4629      	mov	r1, r5
  4082c8:	4630      	mov	r0, r6
  4082ca:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
  4082cc:	2800      	cmp	r0, #0
  4082ce:	db02      	blt.n	4082d6 <sendPacket+0x46>
            break;
        sent += rc;
  4082d0:	4404      	add	r4, r0
    while (sent < length && !TimerIsExpired(timer))
  4082d2:	45a0      	cmp	r8, r4
  4082d4:	dceb      	bgt.n	4082ae <sendPacket+0x1e>
    }
    if (sent == length)
  4082d6:	45a0      	cmp	r8, r4
  4082d8:	d108      	bne.n	4082ec <sendPacket+0x5c>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
  4082da:	69b9      	ldr	r1, [r7, #24]
  4082dc:	f107 0054 	add.w	r0, r7, #84	; 0x54
  4082e0:	4b04      	ldr	r3, [pc, #16]	; (4082f4 <sendPacket+0x64>)
  4082e2:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
  4082e4:	2000      	movs	r0, #0
    }
    else
        rc = MQTTCLIENT_FAILURE;
    return rc;
}
  4082e6:	b003      	add	sp, #12
  4082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = MQTTCLIENT_FAILURE;
  4082ec:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
  4082f0:	e7f9      	b.n	4082e6 <sendPacket+0x56>
  4082f2:	bf00      	nop
  4082f4:	00409341 	.word	0x00409341
  4082f8:	004092a1 	.word	0x004092a1
  4082fc:	0040937d 	.word	0x0040937d

00408300 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
  408300:	b508      	push	{r3, lr}
    int i;
    c->ipstack = network;
  408302:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
  408304:	2100      	movs	r1, #0
  408306:	6241      	str	r1, [r0, #36]	; 0x24
  408308:	62c1      	str	r1, [r0, #44]	; 0x2c
  40830a:	6341      	str	r1, [r0, #52]	; 0x34
  40830c:	63c1      	str	r1, [r0, #60]	; 0x3c
  40830e:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
  408310:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
  408312:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
  408314:	9b02      	ldr	r3, [sp, #8]
  408316:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
  408318:	9b03      	ldr	r3, [sp, #12]
  40831a:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
  40831c:	9b04      	ldr	r3, [sp, #16]
  40831e:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
  408320:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
  408322:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
  408324:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
  408326:	2301      	movs	r3, #1
  408328:	f840 3b54 	str.w	r3, [r0], #84
    TimerInit(&c->ping_timer);
  40832c:	4b01      	ldr	r3, [pc, #4]	; (408334 <MQTTClientInit+0x34>)
  40832e:	4798      	blx	r3
  408330:	bd08      	pop	{r3, pc}
  408332:	bf00      	nop
  408334:	00409295 	.word	0x00409295

00408338 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
  408338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40833c:	b085      	sub	sp, #20
  40833e:	4683      	mov	fp, r0
  408340:	460e      	mov	r6, r1
  408342:	4692      	mov	sl, r2
  408344:	4604      	mov	r4, r0
  408346:	f100 0728 	add.w	r7, r0, #40	; 0x28
    int i;
    int rc = MQTTCLIENT_FAILURE;
  40834a:	f04f 38ff 	mov.w	r8, #4294967295

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
  40834e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 408440 <deliverMessage+0x108>
  408352:	e061      	b.n	408418 <deliverMessage+0xe0>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
  408354:	6a61      	ldr	r1, [r4, #36]	; 0x24
    char* curn = topicName->lenstring.data;
  408356:	68b2      	ldr	r2, [r6, #8]
    char* curn_end = curn + topicName->lenstring.len;
  408358:	6873      	ldr	r3, [r6, #4]
  40835a:	eb02 0e03 	add.w	lr, r2, r3
    while (*curf && curn < curn_end)
  40835e:	f891 c000 	ldrb.w	ip, [r1]
  408362:	f1bc 0f00 	cmp.w	ip, #0
  408366:	d052      	beq.n	40840e <deliverMessage+0xd6>
  408368:	4572      	cmp	r2, lr
  40836a:	d252      	bcs.n	408412 <deliverMessage+0xda>
  40836c:	3101      	adds	r1, #1
  40836e:	f10e 30ff 	add.w	r0, lr, #4294967295
  408372:	9401      	str	r4, [sp, #4]
  408374:	4665      	mov	r5, ip
  408376:	e008      	b.n	40838a <deliverMessage+0x52>
        if (*curn == '/' && *curf != '/')
  408378:	2d2f      	cmp	r5, #47	; 0x2f
  40837a:	d117      	bne.n	4083ac <deliverMessage+0x74>
        curn++;
  40837c:	3201      	adds	r2, #1
    while (*curf && curn < curn_end)
  40837e:	780d      	ldrb	r5, [r1, #0]
  408380:	2d00      	cmp	r5, #0
  408382:	d043      	beq.n	40840c <deliverMessage+0xd4>
  408384:	4596      	cmp	lr, r2
  408386:	d944      	bls.n	408412 <deliverMessage+0xda>
  408388:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
  40838a:	7813      	ldrb	r3, [r2, #0]
  40838c:	2b2f      	cmp	r3, #47	; 0x2f
  40838e:	d0f3      	beq.n	408378 <deliverMessage+0x40>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
  408390:	2d2b      	cmp	r5, #43	; 0x2b
  408392:	d00e      	beq.n	4083b2 <deliverMessage+0x7a>
  408394:	2d23      	cmp	r5, #35	; 0x23
  408396:	d01a      	beq.n	4083ce <deliverMessage+0x96>
  408398:	42ab      	cmp	r3, r5
  40839a:	d0ef      	beq.n	40837c <deliverMessage+0x44>
  40839c:	46ac      	mov	ip, r5
  40839e:	9d01      	ldr	r5, [sp, #4]
    return (curn == curn_end) && (*curf == '\0');
  4083a0:	4596      	cmp	lr, r2
  4083a2:	d136      	bne.n	408412 <deliverMessage+0xda>
  4083a4:	f1bc 0f00 	cmp.w	ip, #0
  4083a8:	d03e      	beq.n	408428 <deliverMessage+0xf0>
  4083aa:	e032      	b.n	408412 <deliverMessage+0xda>
  4083ac:	46ac      	mov	ip, r5
  4083ae:	9d01      	ldr	r5, [sp, #4]
  4083b0:	e7f6      	b.n	4083a0 <deliverMessage+0x68>
            char* nextpos = curn + 1;
  4083b2:	1c53      	adds	r3, r2, #1
            while (nextpos < curn_end && *nextpos != '/')
  4083b4:	459e      	cmp	lr, r3
  4083b6:	d924      	bls.n	408402 <deliverMessage+0xca>
  4083b8:	7852      	ldrb	r2, [r2, #1]
  4083ba:	2a2f      	cmp	r2, #47	; 0x2f
  4083bc:	d01d      	beq.n	4083fa <deliverMessage+0xc2>
                nextpos = ++curn + 1;
  4083be:	461a      	mov	r2, r3
            while (nextpos < curn_end && *nextpos != '/')
  4083c0:	4283      	cmp	r3, r0
  4083c2:	d0db      	beq.n	40837c <deliverMessage+0x44>
  4083c4:	f813 5f01 	ldrb.w	r5, [r3, #1]!
  4083c8:	2d2f      	cmp	r5, #47	; 0x2f
  4083ca:	d1f8      	bne.n	4083be <deliverMessage+0x86>
  4083cc:	e7d6      	b.n	40837c <deliverMessage+0x44>
            curn = curn_end - 1;    // skip until end of string
  4083ce:	f10e 32ff 	add.w	r2, lr, #4294967295
  4083d2:	e7d3      	b.n	40837c <deliverMessage+0x44>
                rc = MQTTCLIENT_SUCCESS;
            }
        }
    }
    
    if (rc == MQTTCLIENT_FAILURE && c->defaultMessageHandler != NULL) 
  4083d4:	f1b8 0f00 	cmp.w	r8, #0
  4083d8:	d103      	bne.n	4083e2 <deliverMessage+0xaa>
        c->defaultMessageHandler(&md);
        rc = MQTTCLIENT_SUCCESS;
    }   
    
    return rc;
}
  4083da:	4640      	mov	r0, r8
  4083dc:	b005      	add	sp, #20
  4083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (rc == MQTTCLIENT_FAILURE && c->defaultMessageHandler != NULL) 
  4083e2:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
  4083e6:	2b00      	cmp	r3, #0
  4083e8:	d0f7      	beq.n	4083da <deliverMessage+0xa2>
    md->topicName = aTopicName;
  4083ea:	9603      	str	r6, [sp, #12]
    md->message = aMessage;
  4083ec:	a804      	add	r0, sp, #16
  4083ee:	f840 ad08 	str.w	sl, [r0, #-8]!
        c->defaultMessageHandler(&md);
  4083f2:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
  4083f4:	f04f 0800 	mov.w	r8, #0
    return rc;
  4083f8:	e7ef      	b.n	4083da <deliverMessage+0xa2>
    while (*curf && curn < curn_end)
  4083fa:	780d      	ldrb	r5, [r1, #0]
  4083fc:	b14d      	cbz	r5, 408412 <deliverMessage+0xda>
        curn++;
  4083fe:	461a      	mov	r2, r3
  408400:	e7c2      	b.n	408388 <deliverMessage+0x50>
  408402:	9d01      	ldr	r5, [sp, #4]
  408404:	3201      	adds	r2, #1
    while (*curf && curn < curn_end)
  408406:	780b      	ldrb	r3, [r1, #0]
  408408:	b91b      	cbnz	r3, 408412 <deliverMessage+0xda>
  40840a:	e000      	b.n	40840e <deliverMessage+0xd6>
  40840c:	9d01      	ldr	r5, [sp, #4]
    return (curn == curn_end) && (*curf == '\0');
  40840e:	4596      	cmp	lr, r2
  408410:	d00a      	beq.n	408428 <deliverMessage+0xf0>
  408412:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
  408414:	42bc      	cmp	r4, r7
  408416:	d0dd      	beq.n	4083d4 <deliverMessage+0x9c>
  408418:	4625      	mov	r5, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
  40841a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40841c:	2900      	cmp	r1, #0
  40841e:	d0f8      	beq.n	408412 <deliverMessage+0xda>
  408420:	4630      	mov	r0, r6
  408422:	47c8      	blx	r9
  408424:	2800      	cmp	r0, #0
  408426:	d095      	beq.n	408354 <deliverMessage+0x1c>
            if (c->messageHandlers[i].fp != NULL)
  408428:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40842a:	2b00      	cmp	r3, #0
  40842c:	d0f1      	beq.n	408412 <deliverMessage+0xda>
    md->topicName = aTopicName;
  40842e:	9603      	str	r6, [sp, #12]
    md->message = aMessage;
  408430:	f8cd a008 	str.w	sl, [sp, #8]
                c->messageHandlers[i].fp(&md);
  408434:	a802      	add	r0, sp, #8
  408436:	4798      	blx	r3
                rc = MQTTCLIENT_SUCCESS;
  408438:	f04f 0800 	mov.w	r8, #0
  40843c:	e7e9      	b.n	408412 <deliverMessage+0xda>
  40843e:	bf00      	nop
  408440:	00408f49 	.word	0x00408f49

00408444 <keepalive>:

int keepalive(MQTTClient* c)
{
    int rc = MQTTCLIENT_FAILURE;

    if (c->keepAliveInterval == 0)
  408444:	6983      	ldr	r3, [r0, #24]
  408446:	b913      	cbnz	r3, 40844e <keepalive+0xa>
    {
        rc = MQTTCLIENT_SUCCESS;
  408448:	2300      	movs	r3, #0
        }
    }

exit:
    return rc;
}
  40844a:	4618      	mov	r0, r3
  40844c:	4770      	bx	lr
{
  40844e:	b510      	push	{r4, lr}
  408450:	b082      	sub	sp, #8
  408452:	4604      	mov	r4, r0
    if (TimerIsExpired(&c->ping_timer))
  408454:	3054      	adds	r0, #84	; 0x54
  408456:	4b13      	ldr	r3, [pc, #76]	; (4084a4 <keepalive+0x60>)
  408458:	4798      	blx	r3
  40845a:	b1e8      	cbz	r0, 408498 <keepalive+0x54>
        if (!c->ping_outstanding)
  40845c:	7f23      	ldrb	r3, [r4, #28]
  40845e:	b9f3      	cbnz	r3, 40849e <keepalive+0x5a>
            TimerInit(&timer);
  408460:	4668      	mov	r0, sp
  408462:	4b11      	ldr	r3, [pc, #68]	; (4084a8 <keepalive+0x64>)
  408464:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
  408466:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40846a:	4668      	mov	r0, sp
  40846c:	4b0f      	ldr	r3, [pc, #60]	; (4084ac <keepalive+0x68>)
  40846e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
  408470:	68a1      	ldr	r1, [r4, #8]
  408472:	6920      	ldr	r0, [r4, #16]
  408474:	4b0e      	ldr	r3, [pc, #56]	; (4084b0 <keepalive+0x6c>)
  408476:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTTCLIENT_SUCCESS) // send the ping packet
  408478:	1e01      	subs	r1, r0, #0
  40847a:	dd08      	ble.n	40848e <keepalive+0x4a>
  40847c:	466a      	mov	r2, sp
  40847e:	4620      	mov	r0, r4
  408480:	4b0c      	ldr	r3, [pc, #48]	; (4084b4 <keepalive+0x70>)
  408482:	4798      	blx	r3
  408484:	4603      	mov	r3, r0
  408486:	b920      	cbnz	r0, 408492 <keepalive+0x4e>
                c->ping_outstanding = 1;
  408488:	2201      	movs	r2, #1
  40848a:	7722      	strb	r2, [r4, #28]
  40848c:	e001      	b.n	408492 <keepalive+0x4e>
    int rc = MQTTCLIENT_FAILURE;
  40848e:	f04f 33ff 	mov.w	r3, #4294967295
}
  408492:	4618      	mov	r0, r3
  408494:	b002      	add	sp, #8
  408496:	bd10      	pop	{r4, pc}
    int rc = MQTTCLIENT_FAILURE;
  408498:	f04f 33ff 	mov.w	r3, #4294967295
  40849c:	e7f9      	b.n	408492 <keepalive+0x4e>
  40849e:	f04f 33ff 	mov.w	r3, #4294967295
    return rc;
  4084a2:	e7f6      	b.n	408492 <keepalive+0x4e>
  4084a4:	004092a1 	.word	0x004092a1
  4084a8:	00409295 	.word	0x00409295
  4084ac:	004092ed 	.word	0x004092ed
  4084b0:	00408c29 	.word	0x00408c29
  4084b4:	00408291 	.word	0x00408291

004084b8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
  4084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4084bc:	b08f      	sub	sp, #60	; 0x3c
  4084be:	4604      	mov	r4, r0
  4084c0:	468b      	mov	fp, r1
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
  4084c2:	6d05      	ldr	r5, [r0, #80]	; 0x50
  4084c4:	682e      	ldr	r6, [r5, #0]
  4084c6:	6947      	ldr	r7, [r0, #20]
  4084c8:	4608      	mov	r0, r1
  4084ca:	4b63      	ldr	r3, [pc, #396]	; (408658 <cycle+0x1a0>)
  4084cc:	4798      	blx	r3
  4084ce:	4603      	mov	r3, r0
  4084d0:	2201      	movs	r2, #1
  4084d2:	4639      	mov	r1, r7
  4084d4:	4628      	mov	r0, r5
  4084d6:	47b0      	blx	r6
  4084d8:	2801      	cmp	r0, #1
  4084da:	f040 80b8 	bne.w	40864e <cycle+0x196>
  4084de:	4605      	mov	r5, r0
    decodePacket(c, &rem_len, TimerLeftMS(timer));
  4084e0:	4658      	mov	r0, fp
  4084e2:	4b5d      	ldr	r3, [pc, #372]	; (408658 <cycle+0x1a0>)
  4084e4:	4798      	blx	r3
  4084e6:	4682      	mov	sl, r0
  4084e8:	2704      	movs	r7, #4
    *value = 0;
  4084ea:	2600      	movs	r6, #0
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
  4084ec:	f04f 0901 	mov.w	r9, #1
  4084f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4084f2:	f8d0 8000 	ldr.w	r8, [r0]
  4084f6:	4653      	mov	r3, sl
  4084f8:	464a      	mov	r2, r9
  4084fa:	a90a      	add	r1, sp, #40	; 0x28
  4084fc:	47c0      	blx	r8
        if (rc != 1)
  4084fe:	2801      	cmp	r0, #1
  408500:	d10b      	bne.n	40851a <cycle+0x62>
        *value += (i & 127) * multiplier;
  408502:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  408506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  40850a:	fb05 6602 	mla	r6, r5, r2, r6
        multiplier *= 128;
  40850e:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
  408510:	f013 0f80 	tst.w	r3, #128	; 0x80
  408514:	d001      	beq.n	40851a <cycle+0x62>
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
  408516:	3f01      	subs	r7, #1
  408518:	d1ea      	bne.n	4084f0 <cycle+0x38>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
  40851a:	6960      	ldr	r0, [r4, #20]
  40851c:	4631      	mov	r1, r6
  40851e:	3001      	adds	r0, #1
  408520:	4b4e      	ldr	r3, [pc, #312]	; (40865c <cycle+0x1a4>)
  408522:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
  408524:	2e00      	cmp	r6, #0
  408526:	dd10      	ble.n	40854a <cycle+0x92>
  408528:	6d27      	ldr	r7, [r4, #80]	; 0x50
  40852a:	f8d7 8000 	ldr.w	r8, [r7]
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
  40852e:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
  408530:	6965      	ldr	r5, [r4, #20]
  408532:	4405      	add	r5, r0
  408534:	4658      	mov	r0, fp
  408536:	4b48      	ldr	r3, [pc, #288]	; (408658 <cycle+0x1a0>)
  408538:	4798      	blx	r3
  40853a:	4603      	mov	r3, r0
  40853c:	4632      	mov	r2, r6
  40853e:	4629      	mov	r1, r5
  408540:	4638      	mov	r0, r7
  408542:	47c0      	blx	r8
  408544:	42b0      	cmp	r0, r6
  408546:	f040 8082 	bne.w	40864e <cycle+0x196>
    header.byte = c->readbuf[0];
  40854a:	6963      	ldr	r3, [r4, #20]
  40854c:	781e      	ldrb	r6, [r3, #0]
  40854e:	0936      	lsrs	r6, r6, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = MQTTCLIENT_SUCCESS;

    switch (packet_type)
  408550:	2e05      	cmp	r6, #5
  408552:	d051      	beq.n	4085f8 <cycle+0x140>
  408554:	2e0d      	cmp	r6, #13
  408556:	d06e      	beq.n	408636 <cycle+0x17e>
  408558:	2e03      	cmp	r6, #3
  40855a:	d001      	beq.n	408560 <cycle+0xa8>
        rc = MQTTCLIENT_SUCCESS;
  40855c:	2500      	movs	r5, #0
  40855e:	e06c      	b.n	40863a <cycle+0x182>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
  408560:	68e2      	ldr	r2, [r4, #12]
  408562:	9204      	str	r2, [sp, #16]
  408564:	9303      	str	r3, [sp, #12]
  408566:	ab0d      	add	r3, sp, #52	; 0x34
  408568:	9302      	str	r3, [sp, #8]
  40856a:	ab0c      	add	r3, sp, #48	; 0x30
  40856c:	9301      	str	r3, [sp, #4]
  40856e:	ab07      	add	r3, sp, #28
  408570:	9300      	str	r3, [sp, #0]
  408572:	ab0b      	add	r3, sp, #44	; 0x2c
  408574:	f10d 0229 	add.w	r2, sp, #41	; 0x29
  408578:	a906      	add	r1, sp, #24
  40857a:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
  40857e:	4d38      	ldr	r5, [pc, #224]	; (408660 <cycle+0x1a8>)
  408580:	47a8      	blx	r5
  408582:	2801      	cmp	r0, #1
  408584:	d001      	beq.n	40858a <cycle+0xd2>
        rc = MQTTCLIENT_SUCCESS;
  408586:	2500      	movs	r5, #0
  408588:	e05a      	b.n	408640 <cycle+0x188>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
  40858a:	aa0e      	add	r2, sp, #56	; 0x38
  40858c:	9b06      	ldr	r3, [sp, #24]
  40858e:	f802 3d10 	strb.w	r3, [r2, #-16]!
            deliverMessage(c, &topicName, &msg);
  408592:	a907      	add	r1, sp, #28
  408594:	4620      	mov	r0, r4
  408596:	4b33      	ldr	r3, [pc, #204]	; (408664 <cycle+0x1ac>)
  408598:	4798      	blx	r3
            if (msg.qos != QOS0)
  40859a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  40859e:	b34b      	cbz	r3, 4085f4 <cycle+0x13c>
            {
                if (msg.qos == QOS1)
  4085a0:	2b01      	cmp	r3, #1
  4085a2:	d004      	beq.n	4085ae <cycle+0xf6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
  4085a4:	2b02      	cmp	r3, #2
  4085a6:	d017      	beq.n	4085d8 <cycle+0x120>
  4085a8:	f04f 35ff 	mov.w	r5, #4294967295
  4085ac:	e048      	b.n	408640 <cycle+0x188>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
  4085ae:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  4085b2:	9300      	str	r3, [sp, #0]
  4085b4:	2300      	movs	r3, #0
  4085b6:	2204      	movs	r2, #4
  4085b8:	68a1      	ldr	r1, [r4, #8]
  4085ba:	6920      	ldr	r0, [r4, #16]
  4085bc:	4d2a      	ldr	r5, [pc, #168]	; (408668 <cycle+0x1b0>)
  4085be:	47a8      	blx	r5
  4085c0:	4601      	mov	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
  4085c2:	2900      	cmp	r1, #0
  4085c4:	dd13      	ble.n	4085ee <cycle+0x136>
                    rc = MQTTCLIENT_FAILURE;
                else
                    rc = sendPacket(c, len, timer);
  4085c6:	465a      	mov	r2, fp
  4085c8:	4620      	mov	r0, r4
  4085ca:	4b28      	ldr	r3, [pc, #160]	; (40866c <cycle+0x1b4>)
  4085cc:	4798      	blx	r3
  4085ce:	4605      	mov	r5, r0
                if (rc == MQTTCLIENT_FAILURE)
  4085d0:	f1b0 3fff 	cmp.w	r0, #4294967295
  4085d4:	d131      	bne.n	40863a <cycle+0x182>
  4085d6:	e033      	b.n	408640 <cycle+0x188>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
  4085d8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  4085dc:	9300      	str	r3, [sp, #0]
  4085de:	2300      	movs	r3, #0
  4085e0:	2205      	movs	r2, #5
  4085e2:	68a1      	ldr	r1, [r4, #8]
  4085e4:	6920      	ldr	r0, [r4, #16]
  4085e6:	4d20      	ldr	r5, [pc, #128]	; (408668 <cycle+0x1b0>)
  4085e8:	47a8      	blx	r5
  4085ea:	4601      	mov	r1, r0
  4085ec:	e7e9      	b.n	4085c2 <cycle+0x10a>
  4085ee:	f04f 35ff 	mov.w	r5, #4294967295
  4085f2:	e025      	b.n	408640 <cycle+0x188>
        rc = MQTTCLIENT_SUCCESS;
  4085f4:	2500      	movs	r5, #0
  4085f6:	e020      	b.n	40863a <cycle+0x182>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
  4085f8:	68e2      	ldr	r2, [r4, #12]
  4085fa:	9200      	str	r2, [sp, #0]
  4085fc:	aa0a      	add	r2, sp, #40	; 0x28
  4085fe:	a906      	add	r1, sp, #24
  408600:	a807      	add	r0, sp, #28
  408602:	4d1b      	ldr	r5, [pc, #108]	; (408670 <cycle+0x1b8>)
  408604:	47a8      	blx	r5
  408606:	2801      	cmp	r0, #1
  408608:	d002      	beq.n	408610 <cycle+0x158>
  40860a:	f04f 35ff 	mov.w	r5, #4294967295
  40860e:	e01a      	b.n	408646 <cycle+0x18e>
                rc = MQTTCLIENT_FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
  408610:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  408614:	9300      	str	r3, [sp, #0]
  408616:	2300      	movs	r3, #0
  408618:	2206      	movs	r2, #6
  40861a:	68a1      	ldr	r1, [r4, #8]
  40861c:	6920      	ldr	r0, [r4, #16]
  40861e:	4d12      	ldr	r5, [pc, #72]	; (408668 <cycle+0x1b0>)
  408620:	47a8      	blx	r5
  408622:	1e01      	subs	r1, r0, #0
  408624:	ddf1      	ble.n	40860a <cycle+0x152>
                rc = MQTTCLIENT_FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != MQTTCLIENT_SUCCESS) // send the PUBREL packet
  408626:	465a      	mov	r2, fp
  408628:	4620      	mov	r0, r4
  40862a:	4b10      	ldr	r3, [pc, #64]	; (40866c <cycle+0x1b4>)
  40862c:	4798      	blx	r3
  40862e:	4605      	mov	r5, r0
  408630:	2800      	cmp	r0, #0
  408632:	d1ea      	bne.n	40860a <cycle+0x152>
  408634:	e001      	b.n	40863a <cycle+0x182>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
  408636:	2500      	movs	r5, #0
  408638:	7725      	strb	r5, [r4, #28]
            break;
    }
    keepalive(c);
  40863a:	4620      	mov	r0, r4
  40863c:	4b0d      	ldr	r3, [pc, #52]	; (408674 <cycle+0x1bc>)
  40863e:	4798      	blx	r3
exit:
    if (rc == MQTTCLIENT_SUCCESS)
  408640:	2d00      	cmp	r5, #0
  408642:	bf08      	it	eq
  408644:	4635      	moveq	r5, r6
        rc = packet_type;
    return rc;
}
  408646:	4628      	mov	r0, r5
  408648:	b00f      	add	sp, #60	; 0x3c
  40864a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40864e:	f64f 76ff 	movw	r6, #65535	; 0xffff
        rc = MQTTCLIENT_SUCCESS;
  408652:	2500      	movs	r5, #0
  408654:	e7f1      	b.n	40863a <cycle+0x182>
  408656:	bf00      	nop
  408658:	0040937d 	.word	0x0040937d
  40865c:	00408d55 	.word	0x00408d55
  408660:	00408c39 	.word	0x00408c39
  408664:	00408339 	.word	0x00408339
  408668:	00409059 	.word	0x00409059
  40866c:	00408291 	.word	0x00408291
  408670:	00408cd5 	.word	0x00408cd5
  408674:	00408445 	.word	0x00408445

00408678 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
  408678:	b570      	push	{r4, r5, r6, lr}
  40867a:	b082      	sub	sp, #8
  40867c:	4605      	mov	r5, r0
  40867e:	460c      	mov	r4, r1
    int rc = MQTTCLIENT_SUCCESS;
    Timer timer;

    TimerInit(&timer);
  408680:	4668      	mov	r0, sp
  408682:	4b0a      	ldr	r3, [pc, #40]	; (4086ac <MQTTYield+0x34>)
  408684:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
  408686:	4621      	mov	r1, r4
  408688:	4668      	mov	r0, sp
  40868a:	4b09      	ldr	r3, [pc, #36]	; (4086b0 <MQTTYield+0x38>)
  40868c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == MQTTCLIENT_FAILURE)
  40868e:	4c09      	ldr	r4, [pc, #36]	; (4086b4 <MQTTYield+0x3c>)
        {
            rc = MQTTCLIENT_FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
  408690:	4e09      	ldr	r6, [pc, #36]	; (4086b8 <MQTTYield+0x40>)
        if (cycle(c, &timer) == MQTTCLIENT_FAILURE)
  408692:	4669      	mov	r1, sp
  408694:	4628      	mov	r0, r5
  408696:	47a0      	blx	r4
  408698:	f1b0 3fff 	cmp.w	r0, #4294967295
  40869c:	d004      	beq.n	4086a8 <MQTTYield+0x30>
	} while (!TimerIsExpired(&timer));
  40869e:	4668      	mov	r0, sp
  4086a0:	47b0      	blx	r6
  4086a2:	2800      	cmp	r0, #0
  4086a4:	d0f5      	beq.n	408692 <MQTTYield+0x1a>
    int rc = MQTTCLIENT_SUCCESS;
  4086a6:	2000      	movs	r0, #0
        
    return rc;
}
  4086a8:	b002      	add	sp, #8
  4086aa:	bd70      	pop	{r4, r5, r6, pc}
  4086ac:	00409295 	.word	0x00409295
  4086b0:	004092ed 	.word	0x004092ed
  4086b4:	004084b9 	.word	0x004084b9
  4086b8:	004092a1 	.word	0x004092a1

004086bc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
  4086bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4086c0:	4681      	mov	r9, r0
  4086c2:	460f      	mov	r7, r1
  4086c4:	4690      	mov	r8, r2
    int rc = MQTTCLIENT_FAILURE;
  4086c6:	f04f 34ff 	mov.w	r4, #4294967295
    
    do
    {
        if (TimerIsExpired(timer))
  4086ca:	4e07      	ldr	r6, [pc, #28]	; (4086e8 <waitfor+0x2c>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
  4086cc:	4d07      	ldr	r5, [pc, #28]	; (4086ec <waitfor+0x30>)
        if (TimerIsExpired(timer))
  4086ce:	4640      	mov	r0, r8
  4086d0:	47b0      	blx	r6
  4086d2:	b930      	cbnz	r0, 4086e2 <waitfor+0x26>
    while ((rc = cycle(c, timer)) != packet_type);  
  4086d4:	4641      	mov	r1, r8
  4086d6:	4648      	mov	r0, r9
  4086d8:	47a8      	blx	r5
  4086da:	4604      	mov	r4, r0
  4086dc:	42b8      	cmp	r0, r7
  4086de:	d1f6      	bne.n	4086ce <waitfor+0x12>
  4086e0:	463c      	mov	r4, r7
    
    return rc;
}
  4086e2:	4620      	mov	r0, r4
  4086e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4086e8:	004092a1 	.word	0x004092a1
  4086ec:	004084b9 	.word	0x004084b9

004086f0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
  4086f0:	b530      	push	{r4, r5, lr}
  4086f2:	b09b      	sub	sp, #108	; 0x6c
  4086f4:	4604      	mov	r4, r0
  4086f6:	460d      	mov	r5, r1
    Timer connect_timer;
    int rc = MQTTCLIENT_FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
  4086f8:	2258      	movs	r2, #88	; 0x58
  4086fa:	4928      	ldr	r1, [pc, #160]	; (40879c <MQTTConnect+0xac>)
  4086fc:	a802      	add	r0, sp, #8
  4086fe:	4b28      	ldr	r3, [pc, #160]	; (4087a0 <MQTTConnect+0xb0>)
  408700:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
  408702:	6a23      	ldr	r3, [r4, #32]
  408704:	2b00      	cmp	r3, #0
  408706:	d140      	bne.n	40878a <MQTTConnect+0x9a>
		goto exit;
    
    TimerInit(&connect_timer);
  408708:	a818      	add	r0, sp, #96	; 0x60
  40870a:	4b26      	ldr	r3, [pc, #152]	; (4087a4 <MQTTConnect+0xb4>)
  40870c:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
  40870e:	6861      	ldr	r1, [r4, #4]
  408710:	a818      	add	r0, sp, #96	; 0x60
  408712:	4b25      	ldr	r3, [pc, #148]	; (4087a8 <MQTTConnect+0xb8>)
  408714:	4798      	blx	r3

    if (options == 0)
  408716:	b1ad      	cbz	r5, 408744 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
  408718:	8b29      	ldrh	r1, [r5, #24]
  40871a:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
  40871c:	f104 0054 	add.w	r0, r4, #84	; 0x54
  408720:	4b22      	ldr	r3, [pc, #136]	; (4087ac <MQTTConnect+0xbc>)
  408722:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
  408724:	462a      	mov	r2, r5
  408726:	68a1      	ldr	r1, [r4, #8]
  408728:	6920      	ldr	r0, [r4, #16]
  40872a:	4b21      	ldr	r3, [pc, #132]	; (4087b0 <MQTTConnect+0xc0>)
  40872c:	4798      	blx	r3
  40872e:	1e01      	subs	r1, r0, #0
  408730:	dd2e      	ble.n	408790 <MQTTConnect+0xa0>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTTCLIENT_SUCCESS)  // send the connect packet
  408732:	aa18      	add	r2, sp, #96	; 0x60
  408734:	4620      	mov	r0, r4
  408736:	4b1f      	ldr	r3, [pc, #124]	; (4087b4 <MQTTConnect+0xc4>)
  408738:	4798      	blx	r3
  40873a:	4603      	mov	r3, r0
  40873c:	b120      	cbz	r0, 408748 <MQTTConnect+0x58>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
  40873e:	4618      	mov	r0, r3
  408740:	b01b      	add	sp, #108	; 0x6c
  408742:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
  408744:	ad02      	add	r5, sp, #8
  408746:	e7e7      	b.n	408718 <MQTTConnect+0x28>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
  408748:	aa18      	add	r2, sp, #96	; 0x60
  40874a:	2102      	movs	r1, #2
  40874c:	4620      	mov	r0, r4
  40874e:	4b1a      	ldr	r3, [pc, #104]	; (4087b8 <MQTTConnect+0xc8>)
  408750:	4798      	blx	r3
  408752:	2802      	cmp	r0, #2
  408754:	d11f      	bne.n	408796 <MQTTConnect+0xa6>
        unsigned char connack_rc = 255;
  408756:	23ff      	movs	r3, #255	; 0xff
  408758:	f88d 3006 	strb.w	r3, [sp, #6]
        unsigned char sessionPresent = 0;
  40875c:	2300      	movs	r3, #0
  40875e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
  408762:	68e3      	ldr	r3, [r4, #12]
  408764:	6962      	ldr	r2, [r4, #20]
  408766:	f10d 0106 	add.w	r1, sp, #6
  40876a:	f10d 0007 	add.w	r0, sp, #7
  40876e:	4d13      	ldr	r5, [pc, #76]	; (4087bc <MQTTConnect+0xcc>)
  408770:	47a8      	blx	r5
  408772:	2801      	cmp	r0, #1
  408774:	d002      	beq.n	40877c <MQTTConnect+0x8c>
            rc = MQTTCLIENT_FAILURE;
  408776:	f04f 33ff 	mov.w	r3, #4294967295
  40877a:	e7e0      	b.n	40873e <MQTTConnect+0x4e>
            rc = connack_rc;
  40877c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (rc == MQTTCLIENT_SUCCESS)
  408780:	2b00      	cmp	r3, #0
  408782:	d1dc      	bne.n	40873e <MQTTConnect+0x4e>
        c->isconnected = 1;
  408784:	2201      	movs	r2, #1
  408786:	6222      	str	r2, [r4, #32]
    return rc;
  408788:	e7d9      	b.n	40873e <MQTTConnect+0x4e>
    int rc = MQTTCLIENT_FAILURE;
  40878a:	f04f 33ff 	mov.w	r3, #4294967295
  40878e:	e7d6      	b.n	40873e <MQTTConnect+0x4e>
  408790:	f04f 33ff 	mov.w	r3, #4294967295
  408794:	e7d3      	b.n	40873e <MQTTConnect+0x4e>
        rc = MQTTCLIENT_FAILURE;
  408796:	f04f 33ff 	mov.w	r3, #4294967295
  40879a:	e7d0      	b.n	40873e <MQTTConnect+0x4e>
  40879c:	00416efc 	.word	0x00416efc
  4087a0:	0040dc41 	.word	0x0040dc41
  4087a4:	00409295 	.word	0x00409295
  4087a8:	004092ed 	.word	0x004092ed
  4087ac:	00409341 	.word	0x00409341
  4087b0:	00408a59 	.word	0x00408a59
  4087b4:	00408291 	.word	0x00408291
  4087b8:	004086bd 	.word	0x004086bd
  4087bc:	00408b99 	.word	0x00408b99

004087c0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
  4087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4087c4:	b08e      	sub	sp, #56	; 0x38
    int rc = MQTTCLIENT_FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
  4087c6:	2500      	movs	r5, #0
  4087c8:	950a      	str	r5, [sp, #40]	; 0x28
  4087ca:	950b      	str	r5, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicFilter;
  4087cc:	9109      	str	r1, [sp, #36]	; 0x24
    int qos_val = qos;
  4087ce:	9208      	str	r2, [sp, #32]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
  4087d0:	6a02      	ldr	r2, [r0, #32]
  4087d2:	2a00      	cmp	r2, #0
  4087d4:	d05d      	beq.n	408892 <MQTTSubscribe+0xd2>
  4087d6:	461e      	mov	r6, r3
  4087d8:	460d      	mov	r5, r1
  4087da:	4604      	mov	r4, r0
		goto exit;

    TimerInit(&timer);
  4087dc:	a80c      	add	r0, sp, #48	; 0x30
  4087de:	4b31      	ldr	r3, [pc, #196]	; (4088a4 <MQTTSubscribe+0xe4>)
  4087e0:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
  4087e2:	6861      	ldr	r1, [r4, #4]
  4087e4:	a80c      	add	r0, sp, #48	; 0x30
  4087e6:	4b30      	ldr	r3, [pc, #192]	; (4088a8 <MQTTSubscribe+0xe8>)
  4087e8:	4798      	blx	r3
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &qos_val);
  4087ea:	6920      	ldr	r0, [r4, #16]
  4087ec:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
  4087ee:	6822      	ldr	r2, [r4, #0]
  4087f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4087f4:	429a      	cmp	r2, r3
  4087f6:	bf14      	ite	ne
  4087f8:	3201      	addne	r2, #1
  4087fa:	2201      	moveq	r2, #1
  4087fc:	6022      	str	r2, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &qos_val);
  4087fe:	ab08      	add	r3, sp, #32
  408800:	9302      	str	r3, [sp, #8]
  408802:	ab09      	add	r3, sp, #36	; 0x24
  408804:	9301      	str	r3, [sp, #4]
  408806:	2301      	movs	r3, #1
  408808:	9300      	str	r3, [sp, #0]
  40880a:	b293      	uxth	r3, r2
  40880c:	2200      	movs	r2, #0
  40880e:	4f27      	ldr	r7, [pc, #156]	; (4088ac <MQTTSubscribe+0xec>)
  408810:	47b8      	blx	r7
    if (len <= 0)
  408812:	1e01      	subs	r1, r0, #0
  408814:	dd40      	ble.n	408898 <MQTTSubscribe+0xd8>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
  408816:	aa0c      	add	r2, sp, #48	; 0x30
  408818:	4620      	mov	r0, r4
  40881a:	4b25      	ldr	r3, [pc, #148]	; (4088b0 <MQTTSubscribe+0xf0>)
  40881c:	4798      	blx	r3
  40881e:	4607      	mov	r7, r0
  408820:	b118      	cbz	r0, 40882a <MQTTSubscribe+0x6a>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
  408822:	4638      	mov	r0, r7
  408824:	b00e      	add	sp, #56	; 0x38
  408826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
  40882a:	aa0c      	add	r2, sp, #48	; 0x30
  40882c:	2109      	movs	r1, #9
  40882e:	4620      	mov	r0, r4
  408830:	4b20      	ldr	r3, [pc, #128]	; (4088b4 <MQTTSubscribe+0xf4>)
  408832:	4798      	blx	r3
  408834:	2809      	cmp	r0, #9
  408836:	d132      	bne.n	40889e <MQTTSubscribe+0xde>
        int count = 0, grantedQoS = -1;
  408838:	2300      	movs	r3, #0
  40883a:	9306      	str	r3, [sp, #24]
  40883c:	ab0e      	add	r3, sp, #56	; 0x38
  40883e:	f04f 32ff 	mov.w	r2, #4294967295
  408842:	f843 2d1c 	str.w	r2, [r3, #-28]!
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
  408846:	68e2      	ldr	r2, [r4, #12]
  408848:	9201      	str	r2, [sp, #4]
  40884a:	6962      	ldr	r2, [r4, #20]
  40884c:	9200      	str	r2, [sp, #0]
  40884e:	aa06      	add	r2, sp, #24
  408850:	2101      	movs	r1, #1
  408852:	f10d 0016 	add.w	r0, sp, #22
  408856:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4088b8 <MQTTSubscribe+0xf8>
  40885a:	47c0      	blx	r8
  40885c:	2801      	cmp	r0, #1
  40885e:	d00c      	beq.n	40887a <MQTTSubscribe+0xba>
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
  408860:	4638      	mov	r0, r7
                if (c->messageHandlers[i].topicFilter == 0)
  408862:	6a63      	ldr	r3, [r4, #36]	; 0x24
  408864:	b17b      	cbz	r3, 408886 <MQTTSubscribe+0xc6>
  408866:	4622      	mov	r2, r4
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
  408868:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
  40886a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  40886c:	b161      	cbz	r1, 408888 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
  40886e:	3301      	adds	r3, #1
  408870:	3208      	adds	r2, #8
  408872:	2b05      	cmp	r3, #5
  408874:	d1f9      	bne.n	40886a <MQTTSubscribe+0xaa>
  408876:	4607      	mov	r7, r0
  408878:	e7d3      	b.n	408822 <MQTTSubscribe+0x62>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
  40887a:	9807      	ldr	r0, [sp, #28]
        if (rc != 0x80)
  40887c:	2880      	cmp	r0, #128	; 0x80
  40887e:	bf08      	it	eq
  408880:	4607      	moveq	r7, r0
  408882:	d0ce      	beq.n	408822 <MQTTSubscribe+0x62>
  408884:	e7ed      	b.n	408862 <MQTTSubscribe+0xa2>
                if (c->messageHandlers[i].topicFilter == 0)
  408886:	463b      	mov	r3, r7
  408888:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
                    c->messageHandlers[i].topicFilter = topicFilter;
  40888c:	6265      	str	r5, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = messageHandler;
  40888e:	62a6      	str	r6, [r4, #40]	; 0x28
                    break;
  408890:	e7c7      	b.n	408822 <MQTTSubscribe+0x62>
    int rc = MQTTCLIENT_FAILURE;  
  408892:	f04f 37ff 	mov.w	r7, #4294967295
  408896:	e7c4      	b.n	408822 <MQTTSubscribe+0x62>
  408898:	f04f 37ff 	mov.w	r7, #4294967295
  40889c:	e7c1      	b.n	408822 <MQTTSubscribe+0x62>
        rc = MQTTCLIENT_FAILURE;
  40889e:	f04f 37ff 	mov.w	r7, #4294967295
    return rc;
  4088a2:	e7be      	b.n	408822 <MQTTSubscribe+0x62>
  4088a4:	00409295 	.word	0x00409295
  4088a8:	004092ed 	.word	0x004092ed
  4088ac:	004090e9 	.word	0x004090e9
  4088b0:	00408291 	.word	0x00408291
  4088b4:	004086bd 	.word	0x004086bd
  4088b8:	00409195 	.word	0x00409195

004088bc <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
  4088bc:	b570      	push	{r4, r5, r6, lr}
  4088be:	b08e      	sub	sp, #56	; 0x38
    int rc = MQTTCLIENT_FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
  4088c0:	2300      	movs	r3, #0
  4088c2:	930a      	str	r3, [sp, #40]	; 0x28
  4088c4:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
  4088c6:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
  4088c8:	6a03      	ldr	r3, [r0, #32]
  4088ca:	2b00      	cmp	r3, #0
  4088cc:	d068      	beq.n	4089a0 <MQTTPublish+0xe4>
  4088ce:	4614      	mov	r4, r2
  4088d0:	4605      	mov	r5, r0
		goto exit;

    TimerInit(&timer);
  4088d2:	a80c      	add	r0, sp, #48	; 0x30
  4088d4:	4b38      	ldr	r3, [pc, #224]	; (4089b8 <MQTTPublish+0xfc>)
  4088d6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
  4088d8:	6869      	ldr	r1, [r5, #4]
  4088da:	a80c      	add	r0, sp, #48	; 0x30
  4088dc:	4b37      	ldr	r3, [pc, #220]	; (4089bc <MQTTPublish+0x100>)
  4088de:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
  4088e0:	7823      	ldrb	r3, [r4, #0]
  4088e2:	3b01      	subs	r3, #1
  4088e4:	b2db      	uxtb	r3, r3
  4088e6:	2b01      	cmp	r3, #1
  4088e8:	d922      	bls.n	408930 <MQTTPublish+0x74>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
  4088ea:	7823      	ldrb	r3, [r4, #0]
  4088ec:	68e2      	ldr	r2, [r4, #12]
  4088ee:	9206      	str	r2, [sp, #24]
  4088f0:	68a2      	ldr	r2, [r4, #8]
  4088f2:	9205      	str	r2, [sp, #20]
  4088f4:	ae02      	add	r6, sp, #8
  4088f6:	aa09      	add	r2, sp, #36	; 0x24
  4088f8:	ca07      	ldmia	r2, {r0, r1, r2}
  4088fa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  4088fe:	88a2      	ldrh	r2, [r4, #4]
  408900:	9201      	str	r2, [sp, #4]
  408902:	7862      	ldrb	r2, [r4, #1]
  408904:	9200      	str	r2, [sp, #0]
  408906:	2200      	movs	r2, #0
  408908:	68a9      	ldr	r1, [r5, #8]
  40890a:	6928      	ldr	r0, [r5, #16]
  40890c:	4e2c      	ldr	r6, [pc, #176]	; (4089c0 <MQTTPublish+0x104>)
  40890e:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
  408910:	1e01      	subs	r1, r0, #0
  408912:	dd48      	ble.n	4089a6 <MQTTPublish+0xea>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
  408914:	aa0c      	add	r2, sp, #48	; 0x30
  408916:	4628      	mov	r0, r5
  408918:	4b2a      	ldr	r3, [pc, #168]	; (4089c4 <MQTTPublish+0x108>)
  40891a:	4798      	blx	r3
  40891c:	4603      	mov	r3, r0
  40891e:	b920      	cbnz	r0, 40892a <MQTTPublish+0x6e>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
  408920:	7822      	ldrb	r2, [r4, #0]
  408922:	2a01      	cmp	r2, #1
  408924:	d00e      	beq.n	408944 <MQTTPublish+0x88>
                rc = MQTTCLIENT_FAILURE;
        }
        else
            rc = MQTTCLIENT_FAILURE;
    }
    else if (message->qos == QOS2)
  408926:	2a02      	cmp	r2, #2
  408928:	d023      	beq.n	408972 <MQTTPublish+0xb6>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
  40892a:	4618      	mov	r0, r3
  40892c:	b00e      	add	sp, #56	; 0x38
  40892e:	bd70      	pop	{r4, r5, r6, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
  408930:	682b      	ldr	r3, [r5, #0]
  408932:	f64f 72ff 	movw	r2, #65535	; 0xffff
  408936:	4293      	cmp	r3, r2
  408938:	bf14      	ite	ne
  40893a:	3301      	addne	r3, #1
  40893c:	2301      	moveq	r3, #1
  40893e:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
  408940:	80a3      	strh	r3, [r4, #4]
  408942:	e7d2      	b.n	4088ea <MQTTPublish+0x2e>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
  408944:	aa0c      	add	r2, sp, #48	; 0x30
  408946:	2104      	movs	r1, #4
  408948:	4628      	mov	r0, r5
  40894a:	4b1f      	ldr	r3, [pc, #124]	; (4089c8 <MQTTPublish+0x10c>)
  40894c:	4798      	blx	r3
  40894e:	2804      	cmp	r0, #4
  408950:	d12c      	bne.n	4089ac <MQTTPublish+0xf0>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
  408952:	696b      	ldr	r3, [r5, #20]
  408954:	68ea      	ldr	r2, [r5, #12]
  408956:	9200      	str	r2, [sp, #0]
  408958:	f10d 0222 	add.w	r2, sp, #34	; 0x22
  40895c:	a908      	add	r1, sp, #32
  40895e:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  408962:	4c1a      	ldr	r4, [pc, #104]	; (4089cc <MQTTPublish+0x110>)
  408964:	47a0      	blx	r4
  408966:	f110 33ff 	adds.w	r3, r0, #4294967295
  40896a:	bf18      	it	ne
  40896c:	f04f 33ff 	movne.w	r3, #4294967295
  408970:	e7db      	b.n	40892a <MQTTPublish+0x6e>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
  408972:	aa0c      	add	r2, sp, #48	; 0x30
  408974:	2107      	movs	r1, #7
  408976:	4628      	mov	r0, r5
  408978:	4b13      	ldr	r3, [pc, #76]	; (4089c8 <MQTTPublish+0x10c>)
  40897a:	4798      	blx	r3
  40897c:	2807      	cmp	r0, #7
  40897e:	d118      	bne.n	4089b2 <MQTTPublish+0xf6>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
  408980:	696b      	ldr	r3, [r5, #20]
  408982:	68ea      	ldr	r2, [r5, #12]
  408984:	9200      	str	r2, [sp, #0]
  408986:	f10d 0222 	add.w	r2, sp, #34	; 0x22
  40898a:	a908      	add	r1, sp, #32
  40898c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  408990:	4c0e      	ldr	r4, [pc, #56]	; (4089cc <MQTTPublish+0x110>)
  408992:	47a0      	blx	r4
  408994:	f110 33ff 	adds.w	r3, r0, #4294967295
  408998:	bf18      	it	ne
  40899a:	f04f 33ff 	movne.w	r3, #4294967295
  40899e:	e7c4      	b.n	40892a <MQTTPublish+0x6e>
    int rc = MQTTCLIENT_FAILURE;
  4089a0:	f04f 33ff 	mov.w	r3, #4294967295
  4089a4:	e7c1      	b.n	40892a <MQTTPublish+0x6e>
  4089a6:	f04f 33ff 	mov.w	r3, #4294967295
  4089aa:	e7be      	b.n	40892a <MQTTPublish+0x6e>
            rc = MQTTCLIENT_FAILURE;
  4089ac:	f04f 33ff 	mov.w	r3, #4294967295
  4089b0:	e7bb      	b.n	40892a <MQTTPublish+0x6e>
            rc = MQTTCLIENT_FAILURE;
  4089b2:	f04f 33ff 	mov.w	r3, #4294967295
    return rc;
  4089b6:	e7b8      	b.n	40892a <MQTTPublish+0x6e>
  4089b8:	00409295 	.word	0x00409295
  4089bc:	004092ed 	.word	0x004092ed
  4089c0:	00408fb1 	.word	0x00408fb1
  4089c4:	00408291 	.word	0x00408291
  4089c8:	004086bd 	.word	0x004086bd
  4089cc:	00408cd5 	.word	0x00408cd5

004089d0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
  4089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4089d2:	4604      	mov	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
  4089d4:	7a03      	ldrb	r3, [r0, #8]
  4089d6:	2b03      	cmp	r3, #3
  4089d8:	d022      	beq.n	408a20 <MQTTSerialize_connectLength+0x50>
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
		len = 10;
  4089da:	2b04      	cmp	r3, #4
  4089dc:	bf14      	ite	ne
  4089de:	2500      	movne	r5, #0
  4089e0:	250a      	moveq	r5, #10

	len += MQTTstrlen(options->clientID)+2;
  4089e2:	f104 030c 	add.w	r3, r4, #12
  4089e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4089ea:	4b1a      	ldr	r3, [pc, #104]	; (408a54 <MQTTSerialize_connectLength+0x84>)
  4089ec:	4798      	blx	r3
  4089ee:	3002      	adds	r0, #2
  4089f0:	4405      	add	r5, r0
	if (options->willFlag)
  4089f2:	7ee3      	ldrb	r3, [r4, #27]
  4089f4:	b9b3      	cbnz	r3, 408a24 <MQTTSerialize_connectLength+0x54>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
  4089f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4089f8:	b323      	cbz	r3, 408a44 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
  4089fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4089fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  408a02:	4b14      	ldr	r3, [pc, #80]	; (408a54 <MQTTSerialize_connectLength+0x84>)
  408a04:	4798      	blx	r3
  408a06:	3002      	adds	r0, #2
  408a08:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
  408a0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  408a0c:	b1f3      	cbz	r3, 408a4c <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
  408a0e:	344c      	adds	r4, #76	; 0x4c
  408a10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  408a14:	4b0f      	ldr	r3, [pc, #60]	; (408a54 <MQTTSerialize_connectLength+0x84>)
  408a16:	4798      	blx	r3
  408a18:	3002      	adds	r0, #2
  408a1a:	4405      	add	r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
  408a1c:	4628      	mov	r0, r5
  408a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
  408a20:	250c      	movs	r5, #12
  408a22:	e7de      	b.n	4089e2 <MQTTSerialize_connectLength+0x12>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
  408a24:	f104 0324 	add.w	r3, r4, #36	; 0x24
  408a28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  408a2c:	4f09      	ldr	r7, [pc, #36]	; (408a54 <MQTTSerialize_connectLength+0x84>)
  408a2e:	47b8      	blx	r7
  408a30:	4606      	mov	r6, r0
  408a32:	f104 0330 	add.w	r3, r4, #48	; 0x30
  408a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  408a3a:	47b8      	blx	r7
  408a3c:	4430      	add	r0, r6
  408a3e:	3004      	adds	r0, #4
  408a40:	4405      	add	r5, r0
  408a42:	e7d8      	b.n	4089f6 <MQTTSerialize_connectLength+0x26>
	if (options->username.cstring || options->username.lenstring.data)
  408a44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  408a46:	2b00      	cmp	r3, #0
  408a48:	d1d7      	bne.n	4089fa <MQTTSerialize_connectLength+0x2a>
  408a4a:	e7de      	b.n	408a0a <MQTTSerialize_connectLength+0x3a>
	if (options->password.cstring || options->password.lenstring.data)
  408a4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  408a4e:	2b00      	cmp	r3, #0
  408a50:	d1dd      	bne.n	408a0e <MQTTSerialize_connectLength+0x3e>
  408a52:	e7e3      	b.n	408a1c <MQTTSerialize_connectLength+0x4c>
  408a54:	00408f29 	.word	0x00408f29

00408a58 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
  408a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  408a5a:	b083      	sub	sp, #12
  408a5c:	4606      	mov	r6, r0
  408a5e:	460c      	mov	r4, r1
  408a60:	4615      	mov	r5, r2
	unsigned char *ptr = buf;
  408a62:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
  408a64:	4610      	mov	r0, r2
  408a66:	4b43      	ldr	r3, [pc, #268]	; (408b74 <MQTTSerialize_connect+0x11c>)
  408a68:	4798      	blx	r3
  408a6a:	4607      	mov	r7, r0
  408a6c:	4b42      	ldr	r3, [pc, #264]	; (408b78 <MQTTSerialize_connect+0x120>)
  408a6e:	4798      	blx	r3
  408a70:	42a0      	cmp	r0, r4
  408a72:	dc7c      	bgt.n	408b6e <MQTTSerialize_connect+0x116>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
  408a74:	2110      	movs	r1, #16
  408a76:	a801      	add	r0, sp, #4
  408a78:	4b40      	ldr	r3, [pc, #256]	; (408b7c <MQTTSerialize_connect+0x124>)
  408a7a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
  408a7c:	4639      	mov	r1, r7
  408a7e:	9801      	ldr	r0, [sp, #4]
  408a80:	4b3f      	ldr	r3, [pc, #252]	; (408b80 <MQTTSerialize_connect+0x128>)
  408a82:	4798      	blx	r3
  408a84:	9b01      	ldr	r3, [sp, #4]
  408a86:	4418      	add	r0, r3
  408a88:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
  408a8a:	7a2b      	ldrb	r3, [r5, #8]
  408a8c:	2b04      	cmp	r3, #4
  408a8e:	d043      	beq.n	408b18 <MQTTSerialize_connect+0xc0>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
  408a90:	493c      	ldr	r1, [pc, #240]	; (408b84 <MQTTSerialize_connect+0x12c>)
  408a92:	a801      	add	r0, sp, #4
  408a94:	4b3c      	ldr	r3, [pc, #240]	; (408b88 <MQTTSerialize_connect+0x130>)
  408a96:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
  408a98:	2103      	movs	r1, #3
  408a9a:	a801      	add	r0, sp, #4
  408a9c:	4b37      	ldr	r3, [pc, #220]	; (408b7c <MQTTSerialize_connect+0x124>)
  408a9e:	4798      	blx	r3
	}

	flags.all = 0;
  408aa0:	2100      	movs	r1, #0
  408aa2:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
  408aa6:	7eab      	ldrb	r3, [r5, #26]
  408aa8:	f363 0141 	bfi	r1, r3, #1, #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
  408aac:	7eeb      	ldrb	r3, [r5, #27]
  408aae:	3300      	adds	r3, #0
  408ab0:	bf18      	it	ne
  408ab2:	2301      	movne	r3, #1
  408ab4:	f363 0182 	bfi	r1, r3, #2, #1
	if (flags.bits.will)
  408ab8:	f011 0f04 	tst.w	r1, #4
  408abc:	d007      	beq.n	408ace <MQTTSerialize_connect+0x76>
	{
		flags.bits.willQoS = options->will.qos;
  408abe:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408ac2:	f363 01c4 	bfi	r1, r3, #3, #2
		flags.bits.willRetain = options->will.retained;
  408ac6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  408aca:	f363 1145 	bfi	r1, r3, #5, #1
	}

	if (options->username.cstring || options->username.lenstring.data)
  408ace:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  408ad0:	2b00      	cmp	r3, #0
  408ad2:	d02b      	beq.n	408b2c <MQTTSerialize_connect+0xd4>
		flags.bits.username = 1;
  408ad4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
  408ad8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  408ada:	2b00      	cmp	r3, #0
  408adc:	d02a      	beq.n	408b34 <MQTTSerialize_connect+0xdc>
		flags.bits.password = 1;
  408ade:	f041 0140 	orr.w	r1, r1, #64	; 0x40

	writeChar(&ptr, flags.all);
  408ae2:	b2cc      	uxtb	r4, r1
  408ae4:	4621      	mov	r1, r4
  408ae6:	a801      	add	r0, sp, #4
  408ae8:	4b24      	ldr	r3, [pc, #144]	; (408b7c <MQTTSerialize_connect+0x124>)
  408aea:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
  408aec:	8b29      	ldrh	r1, [r5, #24]
  408aee:	a801      	add	r0, sp, #4
  408af0:	4b26      	ldr	r3, [pc, #152]	; (408b8c <MQTTSerialize_connect+0x134>)
  408af2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
  408af4:	f105 030c 	add.w	r3, r5, #12
  408af8:	cb0e      	ldmia	r3, {r1, r2, r3}
  408afa:	a801      	add	r0, sp, #4
  408afc:	4f24      	ldr	r7, [pc, #144]	; (408b90 <MQTTSerialize_connect+0x138>)
  408afe:	47b8      	blx	r7
	if (options->willFlag)
  408b00:	7eeb      	ldrb	r3, [r5, #27]
  408b02:	b9db      	cbnz	r3, 408b3c <MQTTSerialize_connect+0xe4>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
  408b04:	f014 0f80 	tst.w	r4, #128	; 0x80
  408b08:	d123      	bne.n	408b52 <MQTTSerialize_connect+0xfa>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
  408b0a:	f014 0f40 	tst.w	r4, #64	; 0x40
  408b0e:	d127      	bne.n	408b60 <MQTTSerialize_connect+0x108>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
  408b10:	9801      	ldr	r0, [sp, #4]
  408b12:	1b80      	subs	r0, r0, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
  408b14:	b003      	add	sp, #12
  408b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
  408b18:	491e      	ldr	r1, [pc, #120]	; (408b94 <MQTTSerialize_connect+0x13c>)
  408b1a:	a801      	add	r0, sp, #4
  408b1c:	4b1a      	ldr	r3, [pc, #104]	; (408b88 <MQTTSerialize_connect+0x130>)
  408b1e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
  408b20:	2104      	movs	r1, #4
  408b22:	eb0d 0001 	add.w	r0, sp, r1
  408b26:	4b15      	ldr	r3, [pc, #84]	; (408b7c <MQTTSerialize_connect+0x124>)
  408b28:	4798      	blx	r3
  408b2a:	e7b9      	b.n	408aa0 <MQTTSerialize_connect+0x48>
	if (options->username.cstring || options->username.lenstring.data)
  408b2c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  408b2e:	2b00      	cmp	r3, #0
  408b30:	d1d0      	bne.n	408ad4 <MQTTSerialize_connect+0x7c>
  408b32:	e7d1      	b.n	408ad8 <MQTTSerialize_connect+0x80>
	if (options->password.cstring || options->password.lenstring.data)
  408b34:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  408b36:	2b00      	cmp	r3, #0
  408b38:	d1d1      	bne.n	408ade <MQTTSerialize_connect+0x86>
  408b3a:	e7d2      	b.n	408ae2 <MQTTSerialize_connect+0x8a>
		writeMQTTString(&ptr, options->will.topicName);
  408b3c:	f105 0324 	add.w	r3, r5, #36	; 0x24
  408b40:	cb0e      	ldmia	r3, {r1, r2, r3}
  408b42:	a801      	add	r0, sp, #4
  408b44:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
  408b46:	f105 0330 	add.w	r3, r5, #48	; 0x30
  408b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
  408b4c:	a801      	add	r0, sp, #4
  408b4e:	47b8      	blx	r7
  408b50:	e7d8      	b.n	408b04 <MQTTSerialize_connect+0xac>
		writeMQTTString(&ptr, options->username);
  408b52:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408b56:	cb0e      	ldmia	r3, {r1, r2, r3}
  408b58:	a801      	add	r0, sp, #4
  408b5a:	4f0d      	ldr	r7, [pc, #52]	; (408b90 <MQTTSerialize_connect+0x138>)
  408b5c:	47b8      	blx	r7
  408b5e:	e7d4      	b.n	408b0a <MQTTSerialize_connect+0xb2>
		writeMQTTString(&ptr, options->password);
  408b60:	f105 024c 	add.w	r2, r5, #76	; 0x4c
  408b64:	ca0e      	ldmia	r2, {r1, r2, r3}
  408b66:	a801      	add	r0, sp, #4
  408b68:	4c09      	ldr	r4, [pc, #36]	; (408b90 <MQTTSerialize_connect+0x138>)
  408b6a:	47a0      	blx	r4
  408b6c:	e7d0      	b.n	408b10 <MQTTSerialize_connect+0xb8>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
  408b6e:	f06f 0001 	mvn.w	r0, #1
	return rc;
  408b72:	e7cf      	b.n	408b14 <MQTTSerialize_connect+0xbc>
  408b74:	004089d1 	.word	0x004089d1
  408b78:	00408dd5 	.word	0x00408dd5
  408b7c:	00408e31 	.word	0x00408e31
  408b80:	00408d55 	.word	0x00408d55
  408b84:	00416f5c 	.word	0x00416f5c
  408b88:	00408e69 	.word	0x00408e69
  408b8c:	00408e3d 	.word	0x00408e3d
  408b90:	00408e9d 	.word	0x00408e9d
  408b94:	00416f54 	.word	0x00416f54

00408b98 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
  408b98:	b570      	push	{r4, r5, r6, lr}
  408b9a:	b082      	sub	sp, #8
  408b9c:	4605      	mov	r5, r0
  408b9e:	460c      	mov	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
  408ba0:	a802      	add	r0, sp, #8
  408ba2:	f840 2d04 	str.w	r2, [r0, #-4]!
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
  408ba6:	4b0f      	ldr	r3, [pc, #60]	; (408be4 <MQTTDeserialize_connack+0x4c>)
  408ba8:	4798      	blx	r3
	if (header.bits.type != CONNACK)
  408baa:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  408bae:	2820      	cmp	r0, #32
  408bb0:	d002      	beq.n	408bb8 <MQTTDeserialize_connack+0x20>
	int rc = 0;
  408bb2:	2000      	movs	r0, #0

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  408bb4:	b002      	add	sp, #8
  408bb6:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
  408bb8:	4669      	mov	r1, sp
  408bba:	9801      	ldr	r0, [sp, #4]
  408bbc:	4b0a      	ldr	r3, [pc, #40]	; (408be8 <MQTTDeserialize_connack+0x50>)
  408bbe:	4798      	blx	r3
  408bc0:	9b01      	ldr	r3, [sp, #4]
  408bc2:	4403      	add	r3, r0
  408bc4:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
  408bc6:	9b00      	ldr	r3, [sp, #0]
  408bc8:	2b01      	cmp	r3, #1
  408bca:	ddf3      	ble.n	408bb4 <MQTTDeserialize_connack+0x1c>
	flags.all = readChar(&curdata);
  408bcc:	a801      	add	r0, sp, #4
  408bce:	4e05      	ldr	r6, [pc, #20]	; (408be4 <MQTTDeserialize_connack+0x4c>)
  408bd0:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
  408bd2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  408bd6:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
  408bd8:	a801      	add	r0, sp, #4
  408bda:	47b0      	blx	r6
  408bdc:	7020      	strb	r0, [r4, #0]
	rc = 1;
  408bde:	2001      	movs	r0, #1
  408be0:	e7e8      	b.n	408bb4 <MQTTDeserialize_connack+0x1c>
  408be2:	bf00      	nop
  408be4:	00408e25 	.word	0x00408e25
  408be8:	00408df9 	.word	0x00408df9

00408bec <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
  408bec:	b510      	push	{r4, lr}
  408bee:	b082      	sub	sp, #8
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
  408bf0:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
  408bf2:	2901      	cmp	r1, #1
  408bf4:	dd10      	ble.n	408c18 <MQTTSerialize_zero+0x2c>
  408bf6:	2300      	movs	r3, #0
  408bf8:	4604      	mov	r4, r0
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
  408bfa:	f362 1307 	bfi	r3, r2, #4, #4
	writeChar(&ptr, header.byte); /* write header */
  408bfe:	4619      	mov	r1, r3
  408c00:	a801      	add	r0, sp, #4
  408c02:	4b07      	ldr	r3, [pc, #28]	; (408c20 <MQTTSerialize_zero+0x34>)
  408c04:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
  408c06:	2100      	movs	r1, #0
  408c08:	9801      	ldr	r0, [sp, #4]
  408c0a:	4b06      	ldr	r3, [pc, #24]	; (408c24 <MQTTSerialize_zero+0x38>)
  408c0c:	4798      	blx	r3
  408c0e:	9b01      	ldr	r3, [sp, #4]
  408c10:	4418      	add	r0, r3
	rc = ptr - buf;
  408c12:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  408c14:	b002      	add	sp, #8
  408c16:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
  408c18:	f06f 0001 	mvn.w	r0, #1
	return rc;
  408c1c:	e7fa      	b.n	408c14 <MQTTSerialize_zero+0x28>
  408c1e:	bf00      	nop
  408c20:	00408e31 	.word	0x00408e31
  408c24:	00408d55 	.word	0x00408d55

00408c28 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
  408c28:	b508      	push	{r3, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
  408c2a:	220c      	movs	r2, #12
  408c2c:	4b01      	ldr	r3, [pc, #4]	; (408c34 <MQTTSerialize_pingreq+0xc>)
  408c2e:	4798      	blx	r3
}
  408c30:	bd08      	pop	{r3, pc}
  408c32:	bf00      	nop
  408c34:	00408bed 	.word	0x00408bed

00408c38 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
  408c38:	b5f0      	push	{r4, r5, r6, r7, lr}
  408c3a:	b083      	sub	sp, #12
  408c3c:	4607      	mov	r7, r0
  408c3e:	460d      	mov	r5, r1
  408c40:	4614      	mov	r4, r2
  408c42:	461e      	mov	r6, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
  408c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408c46:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
  408c48:	2300      	movs	r3, #0
  408c4a:	9300      	str	r3, [sp, #0]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
  408c4c:	a801      	add	r0, sp, #4
  408c4e:	4b1d      	ldr	r3, [pc, #116]	; (408cc4 <MQTTDeserialize_publish+0x8c>)
  408c50:	4798      	blx	r3
  408c52:	2300      	movs	r3, #0
  408c54:	f360 0307 	bfi	r3, r0, #0, #8
	if (header.bits.type != PUBLISH)
  408c58:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  408c5c:	2830      	cmp	r0, #48	; 0x30
  408c5e:	d003      	beq.n	408c68 <MQTTDeserialize_publish+0x30>
	int rc = 0;
  408c60:	2400      	movs	r4, #0
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  408c62:	4620      	mov	r0, r4
  408c64:	b003      	add	sp, #12
  408c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
  408c68:	f3c3 02c0 	ubfx	r2, r3, #3, #1
  408c6c:	703a      	strb	r2, [r7, #0]
	*qos = header.bits.qos;
  408c6e:	f3c3 0241 	ubfx	r2, r3, #1, #2
  408c72:	602a      	str	r2, [r5, #0]
	*retained = header.bits.retain;
  408c74:	f3c3 0300 	ubfx	r3, r3, #0, #1
  408c78:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
  408c7a:	4669      	mov	r1, sp
  408c7c:	9801      	ldr	r0, [sp, #4]
  408c7e:	4b12      	ldr	r3, [pc, #72]	; (408cc8 <MQTTDeserialize_publish+0x90>)
  408c80:	4798      	blx	r3
  408c82:	4604      	mov	r4, r0
  408c84:	9f01      	ldr	r7, [sp, #4]
  408c86:	4407      	add	r7, r0
  408c88:	9701      	str	r7, [sp, #4]
	enddata = curdata + mylen;
  408c8a:	9b00      	ldr	r3, [sp, #0]
  408c8c:	441f      	add	r7, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
  408c8e:	463a      	mov	r2, r7
  408c90:	a901      	add	r1, sp, #4
  408c92:	9808      	ldr	r0, [sp, #32]
  408c94:	4b0d      	ldr	r3, [pc, #52]	; (408ccc <MQTTDeserialize_publish+0x94>)
  408c96:	4798      	blx	r3
  408c98:	2800      	cmp	r0, #0
  408c9a:	d0e2      	beq.n	408c62 <MQTTDeserialize_publish+0x2a>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
  408c9c:	9b01      	ldr	r3, [sp, #4]
  408c9e:	1afb      	subs	r3, r7, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
  408ca0:	2b00      	cmp	r3, #0
  408ca2:	dbde      	blt.n	408c62 <MQTTDeserialize_publish+0x2a>
	if (*qos > 0)
  408ca4:	682b      	ldr	r3, [r5, #0]
  408ca6:	2b00      	cmp	r3, #0
  408ca8:	dd03      	ble.n	408cb2 <MQTTDeserialize_publish+0x7a>
		*packetid = readInt(&curdata);
  408caa:	a801      	add	r0, sp, #4
  408cac:	4b08      	ldr	r3, [pc, #32]	; (408cd0 <MQTTDeserialize_publish+0x98>)
  408cae:	4798      	blx	r3
  408cb0:	8030      	strh	r0, [r6, #0]
	*payloadlen = enddata - curdata;
  408cb2:	9b01      	ldr	r3, [sp, #4]
  408cb4:	1aff      	subs	r7, r7, r3
  408cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408cb8:	6017      	str	r7, [r2, #0]
	*payload = curdata;
  408cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408cbc:	6013      	str	r3, [r2, #0]
	rc = 1;
  408cbe:	2401      	movs	r4, #1
  408cc0:	e7cf      	b.n	408c62 <MQTTDeserialize_publish+0x2a>
  408cc2:	bf00      	nop
  408cc4:	00408e25 	.word	0x00408e25
  408cc8:	00408df9 	.word	0x00408df9
  408ccc:	00408eed 	.word	0x00408eed
  408cd0:	00408e15 	.word	0x00408e15

00408cd4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
  408cd4:	b570      	push	{r4, r5, r6, lr}
  408cd6:	b082      	sub	sp, #8
  408cd8:	4605      	mov	r5, r0
  408cda:	460e      	mov	r6, r1
  408cdc:	4614      	mov	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
  408cde:	a802      	add	r0, sp, #8
  408ce0:	f840 3d04 	str.w	r3, [r0, #-4]!
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
  408ce4:	4b0d      	ldr	r3, [pc, #52]	; (408d1c <MQTTDeserialize_ack+0x48>)
  408ce6:	4798      	blx	r3
  408ce8:	2300      	movs	r3, #0
  408cea:	f360 0307 	bfi	r3, r0, #0, #8
	*dup = header.bits.dup;
  408cee:	f3c3 02c0 	ubfx	r2, r3, #3, #1
  408cf2:	7032      	strb	r2, [r6, #0]
	*packettype = header.bits.type;
  408cf4:	f3c3 1303 	ubfx	r3, r3, #4, #4
  408cf8:	702b      	strb	r3, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
  408cfa:	4669      	mov	r1, sp
  408cfc:	9801      	ldr	r0, [sp, #4]
  408cfe:	4b08      	ldr	r3, [pc, #32]	; (408d20 <MQTTDeserialize_ack+0x4c>)
  408d00:	4798      	blx	r3
  408d02:	9b01      	ldr	r3, [sp, #4]
  408d04:	4403      	add	r3, r0
  408d06:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
  408d08:	9b00      	ldr	r3, [sp, #0]
  408d0a:	2b01      	cmp	r3, #1
  408d0c:	dd04      	ble.n	408d18 <MQTTDeserialize_ack+0x44>
		goto exit;
	*packetid = readInt(&curdata);
  408d0e:	a801      	add	r0, sp, #4
  408d10:	4b04      	ldr	r3, [pc, #16]	; (408d24 <MQTTDeserialize_ack+0x50>)
  408d12:	4798      	blx	r3
  408d14:	8020      	strh	r0, [r4, #0]

	rc = 1;
  408d16:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  408d18:	b002      	add	sp, #8
  408d1a:	bd70      	pop	{r4, r5, r6, pc}
  408d1c:	00408e25 	.word	0x00408e25
  408d20:	00408df9 	.word	0x00408df9
  408d24:	00408e15 	.word	0x00408e15

00408d28 <bufchar>:

int bufchar(unsigned char* c, int count)
{
	int i;

	for (i = 0; i < count; ++i)
  408d28:	2900      	cmp	r1, #0
  408d2a:	dd0e      	ble.n	408d4a <bufchar+0x22>
{
  408d2c:	b430      	push	{r4, r5}
  408d2e:	4b08      	ldr	r3, [pc, #32]	; (408d50 <bufchar+0x28>)
  408d30:	681b      	ldr	r3, [r3, #0]
  408d32:	185d      	adds	r5, r3, r1
  408d34:	462c      	mov	r4, r5
		*c = *bufptr++;
  408d36:	f813 2b01 	ldrb.w	r2, [r3], #1
  408d3a:	7002      	strb	r2, [r0, #0]
	for (i = 0; i < count; ++i)
  408d3c:	42a3      	cmp	r3, r4
  408d3e:	d1fa      	bne.n	408d36 <bufchar+0xe>
  408d40:	4b03      	ldr	r3, [pc, #12]	; (408d50 <bufchar+0x28>)
  408d42:	601d      	str	r5, [r3, #0]
	return count;
}
  408d44:	4608      	mov	r0, r1
  408d46:	bc30      	pop	{r4, r5}
  408d48:	4770      	bx	lr
  408d4a:	4608      	mov	r0, r1
  408d4c:	4770      	bx	lr
  408d4e:	bf00      	nop
  408d50:	20000de0 	.word	0x20000de0

00408d54 <MQTTPacket_encode>:
{
  408d54:	b430      	push	{r4, r5}
  408d56:	1e45      	subs	r5, r0, #1
	int rc = 0;
  408d58:	2400      	movs	r4, #0
		char d = length % 128;
  408d5a:	424a      	negs	r2, r1
  408d5c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  408d60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  408d64:	bf58      	it	pl
  408d66:	4253      	negpl	r3, r2
  408d68:	b2db      	uxtb	r3, r3
		length /= 128;
  408d6a:	460a      	mov	r2, r1
  408d6c:	2900      	cmp	r1, #0
  408d6e:	bfb8      	it	lt
  408d70:	f101 027f 	addlt.w	r2, r1, #127	; 0x7f
  408d74:	11d1      	asrs	r1, r2, #7
		if (length > 0)
  408d76:	2900      	cmp	r1, #0
  408d78:	dd05      	ble.n	408d86 <MQTTPacket_encode+0x32>
		buf[rc++] = d;
  408d7a:	3401      	adds	r4, #1
			d |= 0x80;
  408d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
		buf[rc++] = d;
  408d80:	f805 3f01 	strb.w	r3, [r5, #1]!
  408d84:	e7e9      	b.n	408d5a <MQTTPacket_encode+0x6>
  408d86:	5503      	strb	r3, [r0, r4]
}
  408d88:	1c60      	adds	r0, r4, #1
  408d8a:	bc30      	pop	{r4, r5}
  408d8c:	4770      	bx	lr

00408d8e <MQTTPacket_decode>:
{
  408d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408d92:	b082      	sub	sp, #8
  408d94:	4680      	mov	r8, r0
  408d96:	460e      	mov	r6, r1
	*value = 0;
  408d98:	2300      	movs	r3, #0
  408d9a:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
  408d9c:	2401      	movs	r4, #1
	int multiplier = 1;
  408d9e:	4625      	mov	r5, r4
		rc = (*getcharfn)(&c, 1);
  408da0:	4627      	mov	r7, r4
  408da2:	4639      	mov	r1, r7
  408da4:	f10d 0007 	add.w	r0, sp, #7
  408da8:	47c0      	blx	r8
		if (rc != 1)
  408daa:	2801      	cmp	r0, #1
  408dac:	d10e      	bne.n	408dcc <MQTTPacket_decode+0x3e>
		*value += (c & 127) * multiplier;
  408dae:	f89d 2007 	ldrb.w	r2, [sp, #7]
  408db2:	f002 037f 	and.w	r3, r2, #127	; 0x7f
  408db6:	6831      	ldr	r1, [r6, #0]
  408db8:	fb05 1303 	mla	r3, r5, r3, r1
  408dbc:	6033      	str	r3, [r6, #0]
		multiplier *= 128;
  408dbe:	01ed      	lsls	r5, r5, #7
	} while ((c & 128) != 0);
  408dc0:	f012 0f80 	tst.w	r2, #128	; 0x80
  408dc4:	d002      	beq.n	408dcc <MQTTPacket_decode+0x3e>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
  408dc6:	3401      	adds	r4, #1
  408dc8:	2c05      	cmp	r4, #5
  408dca:	d1ea      	bne.n	408da2 <MQTTPacket_decode+0x14>
}
  408dcc:	4620      	mov	r0, r4
  408dce:	b002      	add	sp, #8
  408dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408dd4 <MQTTPacket_len>:
	rem_len += 1; /* header byte */
  408dd4:	1c43      	adds	r3, r0, #1
	if (rem_len < 128)
  408dd6:	2b7f      	cmp	r3, #127	; 0x7f
  408dd8:	dd08      	ble.n	408dec <MQTTPacket_len+0x18>
	else if (rem_len < 16384)
  408dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  408dde:	db07      	blt.n	408df0 <MQTTPacket_len+0x1c>
	else if (rem_len < 2097151)
  408de0:	4a04      	ldr	r2, [pc, #16]	; (408df4 <MQTTPacket_len+0x20>)
  408de2:	4293      	cmp	r3, r2
		rem_len += 3;
  408de4:	bfd4      	ite	le
  408de6:	3004      	addle	r0, #4
		rem_len += 4;
  408de8:	3005      	addgt	r0, #5
}
  408dea:	4770      	bx	lr
		rem_len += 1;
  408dec:	3002      	adds	r0, #2
  408dee:	4770      	bx	lr
		rem_len += 2;
  408df0:	3003      	adds	r0, #3
  408df2:	4770      	bx	lr
  408df4:	001ffffe 	.word	0x001ffffe

00408df8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
  408df8:	b508      	push	{r3, lr}
	bufptr = buf;
  408dfa:	4b03      	ldr	r3, [pc, #12]	; (408e08 <MQTTPacket_decodeBuf+0x10>)
  408dfc:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
  408dfe:	4803      	ldr	r0, [pc, #12]	; (408e0c <MQTTPacket_decodeBuf+0x14>)
  408e00:	4b03      	ldr	r3, [pc, #12]	; (408e10 <MQTTPacket_decodeBuf+0x18>)
  408e02:	4798      	blx	r3
}
  408e04:	bd08      	pop	{r3, pc}
  408e06:	bf00      	nop
  408e08:	20000de0 	.word	0x20000de0
  408e0c:	00408d29 	.word	0x00408d29
  408e10:	00408d8f 	.word	0x00408d8f

00408e14 <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
  408e14:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
  408e16:	7819      	ldrb	r1, [r3, #0]
  408e18:	785a      	ldrb	r2, [r3, #1]
	*pptr += 2;
  408e1a:	3302      	adds	r3, #2
  408e1c:	6003      	str	r3, [r0, #0]
	return len;
}
  408e1e:	eb02 2001 	add.w	r0, r2, r1, lsl #8
  408e22:	4770      	bx	lr

00408e24 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
  408e24:	4602      	mov	r2, r0
	char c = **pptr;
  408e26:	6803      	ldr	r3, [r0, #0]
  408e28:	f813 0b01 	ldrb.w	r0, [r3], #1
	(*pptr)++;
  408e2c:	6013      	str	r3, [r2, #0]
	return c;
}
  408e2e:	4770      	bx	lr

00408e30 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
  408e30:	6803      	ldr	r3, [r0, #0]
  408e32:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
  408e34:	6803      	ldr	r3, [r0, #0]
  408e36:	3301      	adds	r3, #1
  408e38:	6003      	str	r3, [r0, #0]
  408e3a:	4770      	bx	lr

00408e3c <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
  408e3c:	6802      	ldr	r2, [r0, #0]
  408e3e:	460b      	mov	r3, r1
  408e40:	2900      	cmp	r1, #0
  408e42:	bfb8      	it	lt
  408e44:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
  408e48:	121b      	asrs	r3, r3, #8
  408e4a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
  408e4c:	6802      	ldr	r2, [r0, #0]
  408e4e:	1c53      	adds	r3, r2, #1
  408e50:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
  408e52:	424b      	negs	r3, r1
  408e54:	b2c9      	uxtb	r1, r1
  408e56:	b2db      	uxtb	r3, r3
  408e58:	bf58      	it	pl
  408e5a:	4259      	negpl	r1, r3
  408e5c:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
  408e5e:	6803      	ldr	r3, [r0, #0]
  408e60:	3301      	adds	r3, #1
  408e62:	6003      	str	r3, [r0, #0]
  408e64:	4770      	bx	lr
	...

00408e68 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
  408e68:	b570      	push	{r4, r5, r6, lr}
  408e6a:	4604      	mov	r4, r0
  408e6c:	460e      	mov	r6, r1
	int len = strlen(string);
  408e6e:	4608      	mov	r0, r1
  408e70:	4b07      	ldr	r3, [pc, #28]	; (408e90 <writeCString+0x28>)
  408e72:	4798      	blx	r3
  408e74:	4605      	mov	r5, r0
	writeInt(pptr, len);
  408e76:	4601      	mov	r1, r0
  408e78:	4620      	mov	r0, r4
  408e7a:	4b06      	ldr	r3, [pc, #24]	; (408e94 <writeCString+0x2c>)
  408e7c:	4798      	blx	r3
	memcpy(*pptr, string, len);
  408e7e:	462a      	mov	r2, r5
  408e80:	4631      	mov	r1, r6
  408e82:	6820      	ldr	r0, [r4, #0]
  408e84:	4b04      	ldr	r3, [pc, #16]	; (408e98 <writeCString+0x30>)
  408e86:	4798      	blx	r3
	*pptr += len;
  408e88:	6820      	ldr	r0, [r4, #0]
  408e8a:	4428      	add	r0, r5
  408e8c:	6020      	str	r0, [r4, #0]
  408e8e:	bd70      	pop	{r4, r5, r6, pc}
  408e90:	0040e7c1 	.word	0x0040e7c1
  408e94:	00408e3d 	.word	0x00408e3d
  408e98:	0040dc41 	.word	0x0040dc41

00408e9c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
  408e9c:	b530      	push	{r4, r5, lr}
  408e9e:	b085      	sub	sp, #20
  408ea0:	4605      	mov	r5, r0
  408ea2:	a804      	add	r0, sp, #16
  408ea4:	e900 000e 	stmdb	r0, {r1, r2, r3}
  408ea8:	9c02      	ldr	r4, [sp, #8]
	if (mqttstring.lenstring.len > 0)
  408eaa:	2c00      	cmp	r4, #0
  408eac:	dc06      	bgt.n	408ebc <writeMQTTString+0x20>
  408eae:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
  408eb0:	b189      	cbz	r1, 408ed6 <writeMQTTString+0x3a>
		writeCString(pptr, mqttstring.cstring);
  408eb2:	4628      	mov	r0, r5
  408eb4:	4b0a      	ldr	r3, [pc, #40]	; (408ee0 <writeMQTTString+0x44>)
  408eb6:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
  408eb8:	b005      	add	sp, #20
  408eba:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
  408ebc:	4621      	mov	r1, r4
  408ebe:	4628      	mov	r0, r5
  408ec0:	4b08      	ldr	r3, [pc, #32]	; (408ee4 <writeMQTTString+0x48>)
  408ec2:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
  408ec4:	4622      	mov	r2, r4
  408ec6:	9903      	ldr	r1, [sp, #12]
  408ec8:	6828      	ldr	r0, [r5, #0]
  408eca:	4b07      	ldr	r3, [pc, #28]	; (408ee8 <writeMQTTString+0x4c>)
  408ecc:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
  408ece:	682b      	ldr	r3, [r5, #0]
  408ed0:	441c      	add	r4, r3
  408ed2:	602c      	str	r4, [r5, #0]
  408ed4:	e7f0      	b.n	408eb8 <writeMQTTString+0x1c>
		writeInt(pptr, 0);
  408ed6:	2100      	movs	r1, #0
  408ed8:	4628      	mov	r0, r5
  408eda:	4b02      	ldr	r3, [pc, #8]	; (408ee4 <writeMQTTString+0x48>)
  408edc:	4798      	blx	r3
}
  408ede:	e7eb      	b.n	408eb8 <writeMQTTString+0x1c>
  408ee0:	00408e69 	.word	0x00408e69
  408ee4:	00408e3d 	.word	0x00408e3d
  408ee8:	0040dc41 	.word	0x0040dc41

00408eec <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
  408eec:	b570      	push	{r4, r5, r6, lr}
  408eee:	4605      	mov	r5, r0
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
  408ef0:	680b      	ldr	r3, [r1, #0]
  408ef2:	1ad3      	subs	r3, r2, r3
  408ef4:	2b01      	cmp	r3, #1
  408ef6:	dd11      	ble.n	408f1c <readMQTTLenString+0x30>
  408ef8:	460c      	mov	r4, r1
  408efa:	4616      	mov	r6, r2
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
  408efc:	4608      	mov	r0, r1
  408efe:	4b09      	ldr	r3, [pc, #36]	; (408f24 <readMQTTLenString+0x38>)
  408f00:	4798      	blx	r3
  408f02:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
  408f04:	6823      	ldr	r3, [r4, #0]
  408f06:	181a      	adds	r2, r3, r0
  408f08:	4296      	cmp	r6, r2
  408f0a:	d309      	bcc.n	408f20 <readMQTTLenString+0x34>
		{
			mqttstring->lenstring.data = (char*)*pptr;
  408f0c:	60ab      	str	r3, [r5, #8]
			*pptr += mqttstring->lenstring.len;
  408f0e:	6823      	ldr	r3, [r4, #0]
  408f10:	4418      	add	r0, r3
  408f12:	6020      	str	r0, [r4, #0]
			rc = 1;
  408f14:	2001      	movs	r0, #1
		}
	}
	mqttstring->cstring = NULL;
  408f16:	2300      	movs	r3, #0
  408f18:	602b      	str	r3, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
  408f1a:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
  408f1c:	2000      	movs	r0, #0
  408f1e:	e7fa      	b.n	408f16 <readMQTTLenString+0x2a>
  408f20:	2000      	movs	r0, #0
  408f22:	e7f8      	b.n	408f16 <readMQTTLenString+0x2a>
  408f24:	00408e15 	.word	0x00408e15

00408f28 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
  408f28:	b500      	push	{lr}
  408f2a:	b085      	sub	sp, #20
  408f2c:	ab04      	add	r3, sp, #16
  408f2e:	e903 0007 	stmdb	r3, {r0, r1, r2}
  408f32:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
  408f34:	b120      	cbz	r0, 408f40 <MQTTstrlen+0x18>
		rc = strlen(mqttstring.cstring);
  408f36:	4b03      	ldr	r3, [pc, #12]	; (408f44 <MQTTstrlen+0x1c>)
  408f38:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
  408f3a:	b005      	add	sp, #20
  408f3c:	f85d fb04 	ldr.w	pc, [sp], #4
		rc = mqttstring.lenstring.len;
  408f40:	9802      	ldr	r0, [sp, #8]
	return rc;
  408f42:	e7fa      	b.n	408f3a <MQTTstrlen+0x12>
  408f44:	0040e7c1 	.word	0x0040e7c1

00408f48 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
  408f48:	b570      	push	{r4, r5, r6, lr}
  408f4a:	460d      	mov	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
  408f4c:	6804      	ldr	r4, [r0, #0]
  408f4e:	b154      	cbz	r4, 408f66 <MQTTPacket_equals+0x1e>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
  408f50:	4620      	mov	r0, r4
  408f52:	4b0b      	ldr	r3, [pc, #44]	; (408f80 <MQTTPacket_equals+0x38>)
  408f54:	4798      	blx	r3
  408f56:	4606      	mov	r6, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
  408f58:	4628      	mov	r0, r5
  408f5a:	4b09      	ldr	r3, [pc, #36]	; (408f80 <MQTTPacket_equals+0x38>)
  408f5c:	4798      	blx	r3
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
  408f5e:	4286      	cmp	r6, r0
  408f60:	d004      	beq.n	408f6c <MQTTPacket_equals+0x24>
  408f62:	2000      	movs	r0, #0
}
  408f64:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
  408f66:	6884      	ldr	r4, [r0, #8]
		alen = a->lenstring.len;
  408f68:	6846      	ldr	r6, [r0, #4]
  408f6a:	e7f5      	b.n	408f58 <MQTTPacket_equals+0x10>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
  408f6c:	4632      	mov	r2, r6
  408f6e:	4629      	mov	r1, r5
  408f70:	4620      	mov	r0, r4
  408f72:	4b04      	ldr	r3, [pc, #16]	; (408f84 <MQTTPacket_equals+0x3c>)
  408f74:	4798      	blx	r3
  408f76:	fab0 f080 	clz	r0, r0
  408f7a:	0940      	lsrs	r0, r0, #5
  408f7c:	bd70      	pop	{r4, r5, r6, pc}
  408f7e:	bf00      	nop
  408f80:	0040e7c1 	.word	0x0040e7c1
  408f84:	0040e89d 	.word	0x0040e89d

00408f88 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
  408f88:	b510      	push	{r4, lr}
  408f8a:	b084      	sub	sp, #16
  408f8c:	4604      	mov	r4, r0
  408f8e:	a801      	add	r0, sp, #4
  408f90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
  408f94:	c807      	ldmia	r0, {r0, r1, r2}
  408f96:	4b05      	ldr	r3, [pc, #20]	; (408fac <MQTTSerialize_publishLength+0x24>)
  408f98:	4798      	blx	r3
  408f9a:	3002      	adds	r0, #2
  408f9c:	9b06      	ldr	r3, [sp, #24]
  408f9e:	4418      	add	r0, r3
	if (qos > 0)
  408fa0:	2c00      	cmp	r4, #0
		len += 2; /* packetid */
  408fa2:	bfc8      	it	gt
  408fa4:	3002      	addgt	r0, #2
	return len;
}
  408fa6:	b004      	add	sp, #16
  408fa8:	bd10      	pop	{r4, pc}
  408faa:	bf00      	nop
  408fac:	00408f29 	.word	0x00408f29

00408fb0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
  408fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408fb4:	b084      	sub	sp, #16
  408fb6:	4607      	mov	r7, r0
  408fb8:	4688      	mov	r8, r1
  408fba:	4691      	mov	r9, r2
  408fbc:	461e      	mov	r6, r3
  408fbe:	9d12      	ldr	r5, [sp, #72]	; 0x48
	unsigned char *ptr = buf;
  408fc0:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
  408fc2:	9500      	str	r5, [sp, #0]
  408fc4:	ab0e      	add	r3, sp, #56	; 0x38
  408fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
  408fc8:	4630      	mov	r0, r6
  408fca:	f8df a088 	ldr.w	sl, [pc, #136]	; 409054 <MQTTSerialize_publish+0xa4>
  408fce:	47d0      	blx	sl
  408fd0:	4682      	mov	sl, r0
  408fd2:	4b1a      	ldr	r3, [pc, #104]	; (40903c <MQTTSerialize_publish+0x8c>)
  408fd4:	4798      	blx	r3
  408fd6:	4540      	cmp	r0, r8
  408fd8:	dc2d      	bgt.n	409036 <MQTTSerialize_publish+0x86>
  408fda:	2400      	movs	r4, #0
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
  408fdc:	2303      	movs	r3, #3
  408fde:	f363 1407 	bfi	r4, r3, #4, #4
	header.bits.dup = dup;
  408fe2:	f369 04c3 	bfi	r4, r9, #3, #1
	header.bits.qos = qos;
  408fe6:	f366 0442 	bfi	r4, r6, #1, #2
	header.bits.retain = retained;
  408fea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  408fee:	f363 0400 	bfi	r4, r3, #0, #1
	writeChar(&ptr, header.byte); /* write header */
  408ff2:	b2e1      	uxtb	r1, r4
  408ff4:	a803      	add	r0, sp, #12
  408ff6:	4b12      	ldr	r3, [pc, #72]	; (409040 <MQTTSerialize_publish+0x90>)
  408ff8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
  408ffa:	4651      	mov	r1, sl
  408ffc:	9803      	ldr	r0, [sp, #12]
  408ffe:	4b11      	ldr	r3, [pc, #68]	; (409044 <MQTTSerialize_publish+0x94>)
  409000:	4798      	blx	r3
  409002:	9b03      	ldr	r3, [sp, #12]
  409004:	4418      	add	r0, r3
  409006:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
  409008:	ab0e      	add	r3, sp, #56	; 0x38
  40900a:	cb0e      	ldmia	r3, {r1, r2, r3}
  40900c:	a803      	add	r0, sp, #12
  40900e:	4c0e      	ldr	r4, [pc, #56]	; (409048 <MQTTSerialize_publish+0x98>)
  409010:	47a0      	blx	r4

	if (qos > 0)
  409012:	2e00      	cmp	r6, #0
  409014:	dd04      	ble.n	409020 <MQTTSerialize_publish+0x70>
		writeInt(&ptr, packetid);
  409016:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
  40901a:	a803      	add	r0, sp, #12
  40901c:	4b0b      	ldr	r3, [pc, #44]	; (40904c <MQTTSerialize_publish+0x9c>)
  40901e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
  409020:	462a      	mov	r2, r5
  409022:	9911      	ldr	r1, [sp, #68]	; 0x44
  409024:	9803      	ldr	r0, [sp, #12]
  409026:	4b0a      	ldr	r3, [pc, #40]	; (409050 <MQTTSerialize_publish+0xa0>)
  409028:	4798      	blx	r3
	ptr += payloadlen;
  40902a:	9803      	ldr	r0, [sp, #12]
  40902c:	4428      	add	r0, r5

	rc = ptr - buf;
  40902e:	1bc0      	subs	r0, r0, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  409030:	b004      	add	sp, #16
  409032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
  409036:	f06f 0001 	mvn.w	r0, #1
	return rc;
  40903a:	e7f9      	b.n	409030 <MQTTSerialize_publish+0x80>
  40903c:	00408dd5 	.word	0x00408dd5
  409040:	00408e31 	.word	0x00408e31
  409044:	00408d55 	.word	0x00408d55
  409048:	00408e9d 	.word	0x00408e9d
  40904c:	00408e3d 	.word	0x00408e3d
  409050:	0040dc41 	.word	0x0040dc41
  409054:	00408f89 	.word	0x00408f89

00409058 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
  409058:	b530      	push	{r4, r5, lr}
  40905a:	b083      	sub	sp, #12
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
  40905c:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
  40905e:	2903      	cmp	r1, #3
  409060:	dd1f      	ble.n	4090a2 <MQTTSerialize_ack+0x4a>
  409062:	2400      	movs	r4, #0
  409064:	4605      	mov	r5, r0
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
  409066:	f362 1407 	bfi	r4, r2, #4, #4
	header.bits.dup = dup;
  40906a:	f363 04c3 	bfi	r4, r3, #3, #1
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
  40906e:	2a06      	cmp	r2, #6
  409070:	bf14      	ite	ne
  409072:	2200      	movne	r2, #0
  409074:	2201      	moveq	r2, #1
  409076:	f362 0442 	bfi	r4, r2, #1, #2
	writeChar(&ptr, header.byte); /* write header */
  40907a:	b2e1      	uxtb	r1, r4
  40907c:	a801      	add	r0, sp, #4
  40907e:	4b0a      	ldr	r3, [pc, #40]	; (4090a8 <MQTTSerialize_ack+0x50>)
  409080:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
  409082:	2102      	movs	r1, #2
  409084:	9801      	ldr	r0, [sp, #4]
  409086:	4b09      	ldr	r3, [pc, #36]	; (4090ac <MQTTSerialize_ack+0x54>)
  409088:	4798      	blx	r3
  40908a:	9b01      	ldr	r3, [sp, #4]
  40908c:	4403      	add	r3, r0
  40908e:	9301      	str	r3, [sp, #4]
	writeInt(&ptr, packetid);
  409090:	f8bd 1018 	ldrh.w	r1, [sp, #24]
  409094:	a801      	add	r0, sp, #4
  409096:	4b06      	ldr	r3, [pc, #24]	; (4090b0 <MQTTSerialize_ack+0x58>)
  409098:	4798      	blx	r3
	rc = ptr - buf;
  40909a:	9b01      	ldr	r3, [sp, #4]
  40909c:	1b58      	subs	r0, r3, r5
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  40909e:	b003      	add	sp, #12
  4090a0:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
  4090a2:	f06f 0001 	mvn.w	r0, #1
	return rc;
  4090a6:	e7fa      	b.n	40909e <MQTTSerialize_ack+0x46>
  4090a8:	00408e31 	.word	0x00408e31
  4090ac:	00408d55 	.word	0x00408d55
  4090b0:	00408e3d 	.word	0x00408e3d

004090b4 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
  4090b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
  4090b8:	1e07      	subs	r7, r0, #0
  4090ba:	dd10      	ble.n	4090de <MQTTSerialize_subscribeLength+0x2a>
  4090bc:	460c      	mov	r4, r1
  4090be:	2602      	movs	r6, #2
  4090c0:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
  4090c2:	f8df 8020 	ldr.w	r8, [pc, #32]	; 4090e4 <MQTTSerialize_subscribeLength+0x30>
  4090c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  4090ca:	47c0      	blx	r8
  4090cc:	3003      	adds	r0, #3
  4090ce:	4406      	add	r6, r0
	for (i = 0; i < count; ++i)
  4090d0:	3501      	adds	r5, #1
  4090d2:	340c      	adds	r4, #12
  4090d4:	42af      	cmp	r7, r5
  4090d6:	d1f6      	bne.n	4090c6 <MQTTSerialize_subscribeLength+0x12>
	return len;
}
  4090d8:	4630      	mov	r0, r6
  4090da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int len = 2; /* packetid */
  4090de:	2602      	movs	r6, #2
	return len;
  4090e0:	e7fa      	b.n	4090d8 <MQTTSerialize_subscribeLength+0x24>
  4090e2:	bf00      	nop
  4090e4:	00408f29 	.word	0x00408f29

004090e8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
  4090e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4090ec:	b082      	sub	sp, #8
  4090ee:	4681      	mov	r9, r0
  4090f0:	460d      	mov	r5, r1
  4090f2:	4690      	mov	r8, r2
  4090f4:	461e      	mov	r6, r3
  4090f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	unsigned char *ptr = buf;
  4090f8:	9001      	str	r0, [sp, #4]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
  4090fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4090fc:	4638      	mov	r0, r7
  4090fe:	4b1f      	ldr	r3, [pc, #124]	; (40917c <MQTTSerialize_subscribe+0x94>)
  409100:	4798      	blx	r3
  409102:	4682      	mov	sl, r0
  409104:	4b1e      	ldr	r3, [pc, #120]	; (409180 <MQTTSerialize_subscribe+0x98>)
  409106:	4798      	blx	r3
  409108:	42a8      	cmp	r0, r5
  40910a:	dc34      	bgt.n	409176 <MQTTSerialize_subscribe+0x8e>
  40910c:	2400      	movs	r4, #0
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
  40910e:	2308      	movs	r3, #8
  409110:	f363 1407 	bfi	r4, r3, #4, #4
	header.bits.dup = dup;
  409114:	f368 04c3 	bfi	r4, r8, #3, #1
	header.bits.qos = 1;
  409118:	2301      	movs	r3, #1
  40911a:	f363 0442 	bfi	r4, r3, #1, #2
	writeChar(&ptr, header.byte); /* write header */
  40911e:	b2e1      	uxtb	r1, r4
  409120:	a801      	add	r0, sp, #4
  409122:	4b18      	ldr	r3, [pc, #96]	; (409184 <MQTTSerialize_subscribe+0x9c>)
  409124:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
  409126:	4651      	mov	r1, sl
  409128:	9801      	ldr	r0, [sp, #4]
  40912a:	4b17      	ldr	r3, [pc, #92]	; (409188 <MQTTSerialize_subscribe+0xa0>)
  40912c:	4798      	blx	r3
  40912e:	9b01      	ldr	r3, [sp, #4]
  409130:	4418      	add	r0, r3
  409132:	9001      	str	r0, [sp, #4]

	writeInt(&ptr, packetid);
  409134:	4631      	mov	r1, r6
  409136:	a801      	add	r0, sp, #4
  409138:	4b14      	ldr	r3, [pc, #80]	; (40918c <MQTTSerialize_subscribe+0xa4>)
  40913a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
  40913c:	2f00      	cmp	r7, #0
  40913e:	dd14      	ble.n	40916a <MQTTSerialize_subscribe+0x82>
  409140:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  409142:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  409144:	3e04      	subs	r6, #4
  409146:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
  409148:	f8df a044 	ldr.w	sl, [pc, #68]	; 409190 <MQTTSerialize_subscribe+0xa8>
		writeChar(&ptr, requestedQoSs[i]);
  40914c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 409184 <MQTTSerialize_subscribe+0x9c>
		writeMQTTString(&ptr, topicFilters[i]);
  409150:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
  409154:	a801      	add	r0, sp, #4
  409156:	47d0      	blx	sl
		writeChar(&ptr, requestedQoSs[i]);
  409158:	f856 1f04 	ldr.w	r1, [r6, #4]!
  40915c:	b2c9      	uxtb	r1, r1
  40915e:	a801      	add	r0, sp, #4
  409160:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
  409162:	3501      	adds	r5, #1
  409164:	340c      	adds	r4, #12
  409166:	42af      	cmp	r7, r5
  409168:	d1f2      	bne.n	409150 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
  40916a:	9801      	ldr	r0, [sp, #4]
  40916c:	eba0 0009 	sub.w	r0, r0, r9
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  409170:	b002      	add	sp, #8
  409172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
  409176:	f06f 0001 	mvn.w	r0, #1
	return rc;
  40917a:	e7f9      	b.n	409170 <MQTTSerialize_subscribe+0x88>
  40917c:	004090b5 	.word	0x004090b5
  409180:	00408dd5 	.word	0x00408dd5
  409184:	00408e31 	.word	0x00408e31
  409188:	00408d55 	.word	0x00408d55
  40918c:	00408e3d 	.word	0x00408e3d
  409190:	00408e9d 	.word	0x00408e9d

00409194 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
  409194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409198:	b083      	sub	sp, #12
  40919a:	4604      	mov	r4, r0
  40919c:	460f      	mov	r7, r1
  40919e:	4615      	mov	r5, r2
  4091a0:	4698      	mov	r8, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
  4091a2:	a802      	add	r0, sp, #8
  4091a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4091a6:	f840 3d04 	str.w	r3, [r0, #-4]!
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
  4091aa:	4b1c      	ldr	r3, [pc, #112]	; (40921c <MQTTDeserialize_suback+0x88>)
  4091ac:	4798      	blx	r3
	if (header.bits.type != SUBACK)
  4091ae:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  4091b2:	2890      	cmp	r0, #144	; 0x90
  4091b4:	d003      	beq.n	4091be <MQTTDeserialize_suback+0x2a>
	int rc = 0;
  4091b6:	2000      	movs	r0, #0

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
  4091b8:	b003      	add	sp, #12
  4091ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
  4091be:	4669      	mov	r1, sp
  4091c0:	9801      	ldr	r0, [sp, #4]
  4091c2:	4b17      	ldr	r3, [pc, #92]	; (409220 <MQTTDeserialize_suback+0x8c>)
  4091c4:	4798      	blx	r3
  4091c6:	9e01      	ldr	r6, [sp, #4]
  4091c8:	4406      	add	r6, r0
  4091ca:	9601      	str	r6, [sp, #4]
	enddata = curdata + mylen;
  4091cc:	9b00      	ldr	r3, [sp, #0]
	if (enddata - curdata < 2)
  4091ce:	2b01      	cmp	r3, #1
  4091d0:	ddf2      	ble.n	4091b8 <MQTTDeserialize_suback+0x24>
	enddata = curdata + mylen;
  4091d2:	441e      	add	r6, r3
	*packetid = readInt(&curdata);
  4091d4:	a801      	add	r0, sp, #4
  4091d6:	4b13      	ldr	r3, [pc, #76]	; (409224 <MQTTDeserialize_suback+0x90>)
  4091d8:	4798      	blx	r3
  4091da:	8020      	strh	r0, [r4, #0]
	*count = 0;
  4091dc:	2300      	movs	r3, #0
  4091de:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
  4091e0:	9b01      	ldr	r3, [sp, #4]
  4091e2:	429e      	cmp	r6, r3
  4091e4:	d915      	bls.n	409212 <MQTTDeserialize_suback+0x7e>
		if (*count > maxcount)
  4091e6:	2f00      	cmp	r7, #0
  4091e8:	db15      	blt.n	409216 <MQTTDeserialize_suback+0x82>
  4091ea:	2400      	movs	r4, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
  4091ec:	f8df 902c 	ldr.w	r9, [pc, #44]	; 40921c <MQTTDeserialize_suback+0x88>
  4091f0:	1c63      	adds	r3, r4, #1
  4091f2:	602b      	str	r3, [r5, #0]
  4091f4:	a801      	add	r0, sp, #4
  4091f6:	47c8      	blx	r9
  4091f8:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
	while (curdata < enddata)
  4091fc:	9b01      	ldr	r3, [sp, #4]
  4091fe:	429e      	cmp	r6, r3
  409200:	d905      	bls.n	40920e <MQTTDeserialize_suback+0x7a>
		if (*count > maxcount)
  409202:	682c      	ldr	r4, [r5, #0]
  409204:	42bc      	cmp	r4, r7
  409206:	ddf3      	ble.n	4091f0 <MQTTDeserialize_suback+0x5c>
			rc = -1;
  409208:	f04f 30ff 	mov.w	r0, #4294967295
	return rc;
  40920c:	e7d4      	b.n	4091b8 <MQTTDeserialize_suback+0x24>
	rc = 1;
  40920e:	2001      	movs	r0, #1
  409210:	e7d2      	b.n	4091b8 <MQTTDeserialize_suback+0x24>
  409212:	2001      	movs	r0, #1
  409214:	e7d0      	b.n	4091b8 <MQTTDeserialize_suback+0x24>
			rc = -1;
  409216:	f04f 30ff 	mov.w	r0, #4294967295
  40921a:	e7cd      	b.n	4091b8 <MQTTDeserialize_suback+0x24>
  40921c:	00408e25 	.word	0x00408e25
  409220:	00408df9 	.word	0x00408df9
  409224:	00408e15 	.word	0x00408e15

00409228 <mqtt_packet_read>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_read(Network *network, unsigned char *read_buffer, int length, int timeout_ms)
{
  409228:	b508      	push	{r3, lr}
  40922a:	4608      	mov	r0, r1
  40922c:	4611      	mov	r1, r2
    return wifi_read_data(read_buffer, length, timeout_ms);
  40922e:	461a      	mov	r2, r3
  409230:	4b01      	ldr	r3, [pc, #4]	; (409238 <mqtt_packet_read+0x10>)
  409232:	4798      	blx	r3
}
  409234:	bd08      	pop	{r3, pc}
  409236:	bf00      	nop
  409238:	0040ab09 	.word	0x0040ab09

0040923c <mqtt_packet_write>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_write(Network *network, unsigned char *send_buffer, int length, int timeout_ms)
{
  40923c:	b508      	push	{r3, lr}
  40923e:	4608      	mov	r0, r1
  409240:	4611      	mov	r1, r2
    return wifi_send_data(send_buffer, length, timeout_ms);
  409242:	461a      	mov	r2, r3
  409244:	4b01      	ldr	r3, [pc, #4]	; (40924c <mqtt_packet_write+0x10>)
  409246:	4798      	blx	r3
}
  409248:	bd08      	pop	{r3, pc}
  40924a:	bf00      	nop
  40924c:	0040abf5 	.word	0x0040abf5

00409250 <get_time_of_day>:
 *            0  - The function was successful
 *            -1 - The function was not successful
 */
static int get_time_of_day(struct timeval *time)
{
	if (time == NULL)
  409250:	4601      	mov	r1, r0
  409252:	b178      	cbz	r0, 409274 <get_time_of_day+0x24>
    {
        return -1;
    }
        
	time->tv_sec =  (g_timer_val / 1000);
  409254:	4b09      	ldr	r3, [pc, #36]	; (40927c <get_time_of_day+0x2c>)
  409256:	6818      	ldr	r0, [r3, #0]
  409258:	4b09      	ldr	r3, [pc, #36]	; (409280 <get_time_of_day+0x30>)
  40925a:	fba3 2300 	umull	r2, r3, r3, r0
  40925e:	099b      	lsrs	r3, r3, #6
  409260:	600b      	str	r3, [r1, #0]
	time->tv_usec = ((g_timer_val % 1000) * 1000);
  409262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  409266:	fb02 0313 	mls	r3, r2, r3, r0
  40926a:	fb02 f303 	mul.w	r3, r2, r3
  40926e:	604b      	str	r3, [r1, #4]

	return 0;
  409270:	2000      	movs	r0, #0
  409272:	4770      	bx	lr
        return -1;
  409274:	f04f 30ff 	mov.w	r0, #4294967295
}
  409278:	4770      	bx	lr
  40927a:	bf00      	nop
  40927c:	20000de4 	.word	0x20000de4
  409280:	10624dd3 	.word	0x10624dd3

00409284 <TimerCallback>:
    g_timer_val += TIMER_UPDATE_PERIOD;
  409284:	4a02      	ldr	r2, [pc, #8]	; (409290 <TimerCallback+0xc>)
  409286:	6813      	ldr	r3, [r2, #0]
  409288:	3364      	adds	r3, #100	; 0x64
  40928a:	6013      	str	r3, [r2, #0]
  40928c:	4770      	bx	lr
  40928e:	bf00      	nop
  409290:	20000de4 	.word	0x20000de4

00409294 <TimerInit>:
 *
 * \param[out] timer       The timer to be initialized
 */
void TimerInit(Timer *timer)
{
    if (timer == NULL)
  409294:	b110      	cbz	r0, 40929c <TimerInit+0x8>
    {
        return;
    }
    
	timer->end_time.tv_sec  = 0;
  409296:	2200      	movs	r2, #0
  409298:	6002      	str	r2, [r0, #0]
	timer->end_time.tv_usec = 0;
  40929a:	6042      	str	r2, [r0, #4]
  40929c:	4770      	bx	lr
	...

004092a0 <TimerIsExpired>:
char TimerIsExpired(Timer *timer)
{
	struct timeval time_now;
	struct timeval time_result;

    if (timer == NULL)
  4092a0:	b300      	cbz	r0, 4092e4 <TimerIsExpired+0x44>
{
  4092a2:	b510      	push	{r4, lr}
  4092a4:	b082      	sub	sp, #8
  4092a6:	4604      	mov	r4, r0
    {
        return true;
    }

	get_time_of_day(&time_now);
  4092a8:	4668      	mov	r0, sp
  4092aa:	4b0f      	ldr	r3, [pc, #60]	; (4092e8 <TimerIsExpired+0x48>)
  4092ac:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
  4092ae:	6823      	ldr	r3, [r4, #0]
  4092b0:	9a00      	ldr	r2, [sp, #0]
  4092b2:	1a9b      	subs	r3, r3, r2
  4092b4:	6860      	ldr	r0, [r4, #4]
  4092b6:	9a01      	ldr	r2, [sp, #4]
  4092b8:	1a80      	subs	r0, r0, r2
  4092ba:	d409      	bmi.n	4092d0 <TimerIsExpired+0x30>

	return (time_result.tv_sec < 0 || (time_result.tv_sec == 0 && time_result.tv_usec <= 0));
  4092bc:	2b00      	cmp	r3, #0
  4092be:	db0d      	blt.n	4092dc <TimerIsExpired+0x3c>
  4092c0:	b973      	cbnz	r3, 4092e0 <TimerIsExpired+0x40>
  4092c2:	2800      	cmp	r0, #0
  4092c4:	bfcc      	ite	gt
  4092c6:	2000      	movgt	r0, #0
  4092c8:	2001      	movle	r0, #1
  4092ca:	b2c0      	uxtb	r0, r0
}
  4092cc:	b002      	add	sp, #8
  4092ce:	bd10      	pop	{r4, pc}
	timer_subtract(&timer->end_time, &time_now, &time_result);
  4092d0:	3b01      	subs	r3, #1
  4092d2:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
  4092d6:	f500 7010 	add.w	r0, r0, #576	; 0x240
  4092da:	e7ef      	b.n	4092bc <TimerIsExpired+0x1c>
	return (time_result.tv_sec < 0 || (time_result.tv_sec == 0 && time_result.tv_usec <= 0));
  4092dc:	2001      	movs	r0, #1
  4092de:	e7f4      	b.n	4092ca <TimerIsExpired+0x2a>
  4092e0:	2000      	movs	r0, #0
  4092e2:	e7f2      	b.n	4092ca <TimerIsExpired+0x2a>
        return true;
  4092e4:	2001      	movs	r0, #1
  4092e6:	4770      	bx	lr
  4092e8:	00409251 	.word	0x00409251

004092ec <TimerCountdownMS>:
void TimerCountdownMS(Timer *timer, unsigned int timeout_ms)
{
	struct timeval time_now;
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};

    if (timer == NULL)
  4092ec:	b308      	cbz	r0, 409332 <TimerCountdownMS+0x46>
{
  4092ee:	b530      	push	{r4, r5, lr}
  4092f0:	b083      	sub	sp, #12
  4092f2:	4604      	mov	r4, r0
  4092f4:	460d      	mov	r5, r1
    {
        return;
    }

	get_time_of_day(&time_now);
  4092f6:	4668      	mov	r0, sp
  4092f8:	4b0e      	ldr	r3, [pc, #56]	; (409334 <TimerCountdownMS+0x48>)
  4092fa:	4798      	blx	r3
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};
  4092fc:	4b0e      	ldr	r3, [pc, #56]	; (409338 <TimerCountdownMS+0x4c>)
  4092fe:	fba3 2305 	umull	r2, r3, r3, r5
  409302:	099b      	lsrs	r3, r3, #6
    
	timer_add(&time_now, &time_interval, &timer->end_time);
  409304:	9a00      	ldr	r2, [sp, #0]
  409306:	441a      	add	r2, r3
  409308:	6022      	str	r2, [r4, #0]
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};
  40930a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40930e:	fb00 5113 	mls	r1, r0, r3, r5
	timer_add(&time_now, &time_interval, &timer->end_time);
  409312:	9b01      	ldr	r3, [sp, #4]
  409314:	fb00 3101 	mla	r1, r0, r1, r3
  409318:	6061      	str	r1, [r4, #4]
  40931a:	4b08      	ldr	r3, [pc, #32]	; (40933c <TimerCountdownMS+0x50>)
  40931c:	4299      	cmp	r1, r3
  40931e:	dd06      	ble.n	40932e <TimerCountdownMS+0x42>
  409320:	3201      	adds	r2, #1
  409322:	6022      	str	r2, [r4, #0]
  409324:	f5a1 2174 	sub.w	r1, r1, #999424	; 0xf4000
  409328:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
  40932c:	6061      	str	r1, [r4, #4]
}
  40932e:	b003      	add	sp, #12
  409330:	bd30      	pop	{r4, r5, pc}
  409332:	4770      	bx	lr
  409334:	00409251 	.word	0x00409251
  409338:	10624dd3 	.word	0x10624dd3
  40933c:	000f423f 	.word	0x000f423f

00409340 <TimerCountdown>:
void TimerCountdown(Timer *timer, unsigned int timeout)
{
	struct timeval time_now;
	struct timeval time_interval = {timeout, 0};

    if (timer == NULL)
  409340:	b1b8      	cbz	r0, 409372 <TimerCountdown+0x32>
{
  409342:	b530      	push	{r4, r5, lr}
  409344:	b083      	sub	sp, #12
  409346:	4605      	mov	r5, r0
  409348:	460c      	mov	r4, r1
    {
        return;
    }

	get_time_of_day(&time_now);
  40934a:	4668      	mov	r0, sp
  40934c:	4b09      	ldr	r3, [pc, #36]	; (409374 <TimerCountdown+0x34>)
  40934e:	4798      	blx	r3

	timer_add(&time_now, &time_interval, &timer->end_time);
  409350:	9900      	ldr	r1, [sp, #0]
  409352:	4421      	add	r1, r4
  409354:	6029      	str	r1, [r5, #0]
  409356:	9b01      	ldr	r3, [sp, #4]
  409358:	606b      	str	r3, [r5, #4]
  40935a:	4a07      	ldr	r2, [pc, #28]	; (409378 <TimerCountdown+0x38>)
  40935c:	4293      	cmp	r3, r2
  40935e:	dd06      	ble.n	40936e <TimerCountdown+0x2e>
  409360:	3101      	adds	r1, #1
  409362:	6029      	str	r1, [r5, #0]
  409364:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
  409368:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
  40936c:	606b      	str	r3, [r5, #4]
}
  40936e:	b003      	add	sp, #12
  409370:	bd30      	pop	{r4, r5, pc}
  409372:	4770      	bx	lr
  409374:	00409251 	.word	0x00409251
  409378:	000f423f 	.word	0x000f423f

0040937c <TimerLeftMS>:
{
	int result_ms = 0;
	struct timeval time_now;
    struct timeval time_result;

    if (timer == NULL)
  40937c:	b300      	cbz	r0, 4093c0 <TimerLeftMS+0x44>
{
  40937e:	b510      	push	{r4, lr}
  409380:	b082      	sub	sp, #8
  409382:	4604      	mov	r4, r0
    {
        return 0;
    }

	get_time_of_day(&time_now);
  409384:	4668      	mov	r0, sp
  409386:	4b10      	ldr	r3, [pc, #64]	; (4093c8 <TimerLeftMS+0x4c>)
  409388:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
  40938a:	6822      	ldr	r2, [r4, #0]
  40938c:	9b00      	ldr	r3, [sp, #0]
  40938e:	1ad2      	subs	r2, r2, r3
  409390:	6863      	ldr	r3, [r4, #4]
  409392:	9801      	ldr	r0, [sp, #4]
  409394:	1a1b      	subs	r3, r3, r0
  409396:	d40d      	bmi.n	4093b4 <TimerLeftMS+0x38>
	if(time_result.tv_sec >= 0)
  409398:	2a00      	cmp	r2, #0
  40939a:	db13      	blt.n	4093c4 <TimerLeftMS+0x48>
    {
		result_ms = (int)((time_result.tv_sec * 1000) + (time_result.tv_usec / 1000));
  40939c:	480b      	ldr	r0, [pc, #44]	; (4093cc <TimerLeftMS+0x50>)
  40939e:	fb80 1003 	smull	r1, r0, r0, r3
  4093a2:	17db      	asrs	r3, r3, #31
  4093a4:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  4093a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4093ac:	fb00 3002 	mla	r0, r0, r2, r3
	}

	return result_ms;
}
  4093b0:	b002      	add	sp, #8
  4093b2:	bd10      	pop	{r4, pc}
	timer_subtract(&timer->end_time, &time_now, &time_result);
  4093b4:	3a01      	subs	r2, #1
  4093b6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
  4093ba:	f503 7310 	add.w	r3, r3, #576	; 0x240
  4093be:	e7eb      	b.n	409398 <TimerLeftMS+0x1c>
        return 0;
  4093c0:	2000      	movs	r0, #0
  4093c2:	4770      	bx	lr
	int result_ms = 0;
  4093c4:	2000      	movs	r0, #0
  4093c6:	e7f3      	b.n	4093b0 <TimerLeftMS+0x34>
  4093c8:	00409251 	.word	0x00409251
  4093cc:	10624dd3 	.word	0x10624dd3

004093d0 <json_value_init_string_no_copy>:
    parson_free(array->items);
    parson_free(array);
}

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
  4093d0:	b510      	push	{r4, lr}
  4093d2:	4604      	mov	r4, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
  4093d4:	4b05      	ldr	r3, [pc, #20]	; (4093ec <json_value_init_string_no_copy+0x1c>)
  4093d6:	681b      	ldr	r3, [r3, #0]
  4093d8:	2010      	movs	r0, #16
  4093da:	4798      	blx	r3
    if (!new_value)
  4093dc:	4603      	mov	r3, r0
  4093de:	b110      	cbz	r0, 4093e6 <json_value_init_string_no_copy+0x16>
        return NULL;
    new_value->type = JSONString;
  4093e0:	2202      	movs	r2, #2
  4093e2:	6002      	str	r2, [r0, #0]
    new_value->value.string = string;
  4093e4:	6084      	str	r4, [r0, #8]
    return new_value;
}
  4093e6:	4618      	mov	r0, r3
  4093e8:	bd10      	pop	{r4, pc}
  4093ea:	bf00      	nop
  4093ec:	200001e8 	.word	0x200001e8

004093f0 <is_utf16_hex>:
static int is_utf16_hex(const unsigned char *s) {
  4093f0:	b510      	push	{r4, lr}
  4093f2:	4604      	mov	r4, r0
    return isxdigit(s[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);
  4093f4:	4b14      	ldr	r3, [pc, #80]	; (409448 <is_utf16_hex+0x58>)
  4093f6:	4798      	blx	r3
  4093f8:	7823      	ldrb	r3, [r4, #0]
  4093fa:	4418      	add	r0, r3
  4093fc:	7843      	ldrb	r3, [r0, #1]
  4093fe:	f013 0f44 	tst.w	r3, #68	; 0x44
  409402:	d101      	bne.n	409408 <is_utf16_hex+0x18>
  409404:	2000      	movs	r0, #0
  409406:	bd10      	pop	{r4, pc}
  409408:	4b0f      	ldr	r3, [pc, #60]	; (409448 <is_utf16_hex+0x58>)
  40940a:	4798      	blx	r3
  40940c:	7863      	ldrb	r3, [r4, #1]
  40940e:	4418      	add	r0, r3
  409410:	7843      	ldrb	r3, [r0, #1]
  409412:	f013 0f44 	tst.w	r3, #68	; 0x44
  409416:	d101      	bne.n	40941c <is_utf16_hex+0x2c>
  409418:	2000      	movs	r0, #0
  40941a:	bd10      	pop	{r4, pc}
  40941c:	4b0a      	ldr	r3, [pc, #40]	; (409448 <is_utf16_hex+0x58>)
  40941e:	4798      	blx	r3
  409420:	78a3      	ldrb	r3, [r4, #2]
  409422:	4418      	add	r0, r3
  409424:	7843      	ldrb	r3, [r0, #1]
  409426:	f013 0f44 	tst.w	r3, #68	; 0x44
  40942a:	d101      	bne.n	409430 <is_utf16_hex+0x40>
  40942c:	2000      	movs	r0, #0
}
  40942e:	bd10      	pop	{r4, pc}
    return isxdigit(s[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);
  409430:	4b05      	ldr	r3, [pc, #20]	; (409448 <is_utf16_hex+0x58>)
  409432:	4798      	blx	r3
  409434:	78e3      	ldrb	r3, [r4, #3]
  409436:	4418      	add	r0, r3
  409438:	7843      	ldrb	r3, [r0, #1]
  40943a:	f013 0f44 	tst.w	r3, #68	; 0x44
  40943e:	bf14      	ite	ne
  409440:	2001      	movne	r0, #1
  409442:	2000      	moveq	r0, #0
  409444:	bd10      	pop	{r4, pc}
  409446:	bf00      	nop
  409448:	0040d479 	.word	0x0040d479

0040944c <json_object_resize>:
    if ((object->names == NULL && object->values != NULL) ||
  40944c:	6803      	ldr	r3, [r0, #0]
  40944e:	2b00      	cmp	r3, #0
  409450:	d029      	beq.n	4094a6 <json_object_resize+0x5a>
        (object->names != NULL && object->values == NULL) ||
  409452:	6843      	ldr	r3, [r0, #4]
  409454:	2b00      	cmp	r3, #0
  409456:	d036      	beq.n	4094c6 <json_object_resize+0x7a>
  409458:	2900      	cmp	r1, #0
  40945a:	d037      	beq.n	4094cc <json_object_resize+0x80>
static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
  40945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409460:	460d      	mov	r5, r1
  409462:	4604      	mov	r4, r0
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
  409464:	008e      	lsls	r6, r1, #2
  409466:	4b1d      	ldr	r3, [pc, #116]	; (4094dc <json_object_resize+0x90>)
  409468:	681b      	ldr	r3, [r3, #0]
  40946a:	4630      	mov	r0, r6
  40946c:	4798      	blx	r3
    if (temp_names == NULL)
  40946e:	4607      	mov	r7, r0
  409470:	2800      	cmp	r0, #0
  409472:	d02e      	beq.n	4094d2 <json_object_resize+0x86>
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
  409474:	4b19      	ldr	r3, [pc, #100]	; (4094dc <json_object_resize+0x90>)
  409476:	681b      	ldr	r3, [r3, #0]
  409478:	4630      	mov	r0, r6
  40947a:	4798      	blx	r3
  40947c:	4680      	mov	r8, r0
    if (object->names != NULL && object->values != NULL && object->count > 0) {
  40947e:	6821      	ldr	r1, [r4, #0]
  409480:	b119      	cbz	r1, 40948a <json_object_resize+0x3e>
  409482:	6863      	ldr	r3, [r4, #4]
  409484:	b10b      	cbz	r3, 40948a <json_object_resize+0x3e>
  409486:	68a2      	ldr	r2, [r4, #8]
  409488:	b99a      	cbnz	r2, 4094b2 <json_object_resize+0x66>
    parson_free(object->names);
  40948a:	4e15      	ldr	r6, [pc, #84]	; (4094e0 <json_object_resize+0x94>)
  40948c:	6833      	ldr	r3, [r6, #0]
  40948e:	6820      	ldr	r0, [r4, #0]
  409490:	4798      	blx	r3
    parson_free(object->values);
  409492:	6833      	ldr	r3, [r6, #0]
  409494:	6860      	ldr	r0, [r4, #4]
  409496:	4798      	blx	r3
    object->names = temp_names;
  409498:	6027      	str	r7, [r4, #0]
    object->values = temp_values;
  40949a:	f8c4 8004 	str.w	r8, [r4, #4]
    object->capacity = new_capacity;
  40949e:	60e5      	str	r5, [r4, #12]
    return JSONSuccess;
  4094a0:	2000      	movs	r0, #0
  4094a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((object->names == NULL && object->values != NULL) ||
  4094a6:	6843      	ldr	r3, [r0, #4]
  4094a8:	2b00      	cmp	r3, #0
  4094aa:	d0d5      	beq.n	409458 <json_object_resize+0xc>
            return JSONFailure; /* Shouldn't happen */
  4094ac:	f04f 30ff 	mov.w	r0, #4294967295
  4094b0:	4770      	bx	lr
        memcpy(temp_names, object->names, object->count * sizeof(char*));
  4094b2:	0092      	lsls	r2, r2, #2
  4094b4:	4638      	mov	r0, r7
  4094b6:	4e0b      	ldr	r6, [pc, #44]	; (4094e4 <json_object_resize+0x98>)
  4094b8:	47b0      	blx	r6
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
  4094ba:	68a2      	ldr	r2, [r4, #8]
  4094bc:	0092      	lsls	r2, r2, #2
  4094be:	6861      	ldr	r1, [r4, #4]
  4094c0:	4640      	mov	r0, r8
  4094c2:	47b0      	blx	r6
  4094c4:	e7e1      	b.n	40948a <json_object_resize+0x3e>
            return JSONFailure; /* Shouldn't happen */
  4094c6:	f04f 30ff 	mov.w	r0, #4294967295
  4094ca:	4770      	bx	lr
  4094cc:	f04f 30ff 	mov.w	r0, #4294967295
  4094d0:	4770      	bx	lr
        return JSONFailure;
  4094d2:	f04f 30ff 	mov.w	r0, #4294967295
}
  4094d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4094da:	bf00      	nop
  4094dc:	200001e8 	.word	0x200001e8
  4094e0:	200001e4 	.word	0x200001e4
  4094e4:	0040dc41 	.word	0x0040dc41

004094e8 <json_array_resize>:
    if (new_capacity == 0) {
  4094e8:	b1c1      	cbz	r1, 40951c <json_array_resize+0x34>
static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
  4094ea:	b570      	push	{r4, r5, r6, lr}
  4094ec:	460e      	mov	r6, r1
  4094ee:	4604      	mov	r4, r0
    new_items = parson_malloc(new_capacity * sizeof(JSON_Value*));
  4094f0:	4b0d      	ldr	r3, [pc, #52]	; (409528 <json_array_resize+0x40>)
  4094f2:	681b      	ldr	r3, [r3, #0]
  4094f4:	0088      	lsls	r0, r1, #2
  4094f6:	4798      	blx	r3
    if (new_items == NULL) {
  4094f8:	4605      	mov	r5, r0
  4094fa:	b190      	cbz	r0, 409522 <json_array_resize+0x3a>
    if (array->items != NULL && array->count > 0) {
  4094fc:	6821      	ldr	r1, [r4, #0]
  4094fe:	b109      	cbz	r1, 409504 <json_array_resize+0x1c>
  409500:	6862      	ldr	r2, [r4, #4]
  409502:	b93a      	cbnz	r2, 409514 <json_array_resize+0x2c>
    parson_free(array->items);
  409504:	4b09      	ldr	r3, [pc, #36]	; (40952c <json_array_resize+0x44>)
  409506:	681b      	ldr	r3, [r3, #0]
  409508:	6820      	ldr	r0, [r4, #0]
  40950a:	4798      	blx	r3
    array->items = new_items;
  40950c:	6025      	str	r5, [r4, #0]
    array->capacity = new_capacity;
  40950e:	60a6      	str	r6, [r4, #8]
    return JSONSuccess;
  409510:	2000      	movs	r0, #0
  409512:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
  409514:	0092      	lsls	r2, r2, #2
  409516:	4b06      	ldr	r3, [pc, #24]	; (409530 <json_array_resize+0x48>)
  409518:	4798      	blx	r3
  40951a:	e7f3      	b.n	409504 <json_array_resize+0x1c>
        return JSONFailure;
  40951c:	f04f 30ff 	mov.w	r0, #4294967295
  409520:	4770      	bx	lr
        return JSONFailure;
  409522:	f04f 30ff 	mov.w	r0, #4294967295
}
  409526:	bd70      	pop	{r4, r5, r6, pc}
  409528:	200001e8 	.word	0x200001e8
  40952c:	200001e4 	.word	0x200001e4
  409530:	0040dc41 	.word	0x0040dc41

00409534 <json_array_add>:
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
  409534:	b538      	push	{r3, r4, r5, lr}
  409536:	4604      	mov	r4, r0
  409538:	460d      	mov	r5, r1
    if (array->count >= array->capacity) {
  40953a:	6881      	ldr	r1, [r0, #8]
  40953c:	6843      	ldr	r3, [r0, #4]
  40953e:	428b      	cmp	r3, r1
  409540:	d30b      	bcc.n	40955a <json_array_add+0x26>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
  409542:	0049      	lsls	r1, r1, #1
  409544:	290f      	cmp	r1, #15
  409546:	bf38      	it	cc
  409548:	210f      	movcc	r1, #15
        if (new_capacity > ARRAY_MAX_CAPACITY)
  40954a:	f5b1 3ff0 	cmp.w	r1, #122880	; 0x1e000
  40954e:	d80d      	bhi.n	40956c <json_array_add+0x38>
        if (json_array_resize(array, new_capacity) == JSONFailure)
  409550:	4b08      	ldr	r3, [pc, #32]	; (409574 <json_array_add+0x40>)
  409552:	4798      	blx	r3
  409554:	f1b0 3fff 	cmp.w	r0, #4294967295
  409558:	d00a      	beq.n	409570 <json_array_add+0x3c>
    array->items[array->count] = value;
  40955a:	6862      	ldr	r2, [r4, #4]
  40955c:	6823      	ldr	r3, [r4, #0]
  40955e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    array->count++;
  409562:	6863      	ldr	r3, [r4, #4]
  409564:	3301      	adds	r3, #1
  409566:	6063      	str	r3, [r4, #4]
    return JSONSuccess;
  409568:	2000      	movs	r0, #0
  40956a:	bd38      	pop	{r3, r4, r5, pc}
            return JSONFailure;
  40956c:	f04f 30ff 	mov.w	r0, #4294967295
}
  409570:	bd38      	pop	{r3, r4, r5, pc}
  409572:	bf00      	nop
  409574:	004094e9 	.word	0x004094e9

00409578 <get_quoted_string>:
    return NULL;
}

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
  409578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40957c:	b083      	sub	sp, #12
    const char *string_start = *string;
  40957e:	6805      	ldr	r5, [r0, #0]
    SKIP_CHAR(string);
  409580:	1c6c      	adds	r4, r5, #1
  409582:	6004      	str	r4, [r0, #0]
    while (**string != '\"') {
  409584:	786b      	ldrb	r3, [r5, #1]
  409586:	2b22      	cmp	r3, #34	; 0x22
  409588:	d015      	beq.n	4095b6 <get_quoted_string+0x3e>
        if (**string == '\0')
  40958a:	2b00      	cmp	r3, #0
  40958c:	f000 8155 	beq.w	40983a <get_quoted_string+0x2c2>
  409590:	4622      	mov	r2, r4
  409592:	e008      	b.n	4095a6 <get_quoted_string+0x2e>
        SKIP_CHAR(string);
  409594:	6803      	ldr	r3, [r0, #0]
  409596:	1c5a      	adds	r2, r3, #1
  409598:	6002      	str	r2, [r0, #0]
    while (**string != '\"') {
  40959a:	785b      	ldrb	r3, [r3, #1]
  40959c:	2b22      	cmp	r3, #34	; 0x22
  40959e:	d00b      	beq.n	4095b8 <get_quoted_string+0x40>
        if (**string == '\0')
  4095a0:	2b00      	cmp	r3, #0
  4095a2:	f000 814a 	beq.w	40983a <get_quoted_string+0x2c2>
        if (**string == '\\') {
  4095a6:	2b5c      	cmp	r3, #92	; 0x5c
  4095a8:	d1f4      	bne.n	409594 <get_quoted_string+0x1c>
            SKIP_CHAR(string);
  4095aa:	1c53      	adds	r3, r2, #1
  4095ac:	6003      	str	r3, [r0, #0]
            if (**string == '\0')
  4095ae:	7853      	ldrb	r3, [r2, #1]
  4095b0:	2b00      	cmp	r3, #0
  4095b2:	d1ef      	bne.n	409594 <get_quoted_string+0x1c>
  4095b4:	e002      	b.n	4095bc <get_quoted_string+0x44>
    while (**string != '\"') {
  4095b6:	4622      	mov	r2, r4
    SKIP_CHAR(string);
  4095b8:	3201      	adds	r2, #1
  4095ba:	6002      	str	r2, [r0, #0]
    size_t string_len = 0;
    skip_quotes(string);
    if (**string == '\0')
  4095bc:	6800      	ldr	r0, [r0, #0]
  4095be:	7803      	ldrb	r3, [r0, #0]
  4095c0:	2b00      	cmp	r3, #0
  4095c2:	f000 8138 	beq.w	409836 <get_quoted_string+0x2be>
        return NULL;
    string_len = *string - string_start - 2; /* length without quotes */
  4095c6:	1b40      	subs	r0, r0, r5
  4095c8:	1e86      	subs	r6, r0, #2
    char *output = (char*)parson_malloc(initial_size);
  4095ca:	4b9e      	ldr	r3, [pc, #632]	; (409844 <get_quoted_string+0x2cc>)
  4095cc:	681b      	ldr	r3, [r3, #0]
  4095ce:	3801      	subs	r0, #1
  4095d0:	4798      	blx	r3
  4095d2:	4680      	mov	r8, r0
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
  4095d4:	786b      	ldrb	r3, [r5, #1]
  4095d6:	2b00      	cmp	r3, #0
  4095d8:	f000 8110 	beq.w	4097fc <get_quoted_string+0x284>
  4095dc:	4627      	mov	r7, r4
  4095de:	2e00      	cmp	r6, #0
  4095e0:	f000 8121 	beq.w	409826 <get_quoted_string+0x2ae>
  4095e4:	4605      	mov	r5, r0
    if (!is_utf16_hex((const unsigned char*)unprocessed_ptr) || sscanf(unprocessed_ptr, "%4x", &cp) == EOF)
  4095e6:	f8df a274 	ldr.w	sl, [pc, #628]	; 40985c <get_quoted_string+0x2e4>
  4095ea:	e067      	b.n	4096bc <get_quoted_string+0x144>
            input_ptr++;
  4095ec:	1c63      	adds	r3, r4, #1
            switch (*input_ptr) {
  4095ee:	7862      	ldrb	r2, [r4, #1]
  4095f0:	3a22      	subs	r2, #34	; 0x22
  4095f2:	2a53      	cmp	r2, #83	; 0x53
  4095f4:	f200 8119 	bhi.w	40982a <get_quoted_string+0x2b2>
  4095f8:	e8df f012 	tbh	[pc, r2, lsl #1]
  4095fc:	01170054 	.word	0x01170054
  409600:	01170117 	.word	0x01170117
  409604:	01170117 	.word	0x01170117
  409608:	01170117 	.word	0x01170117
  40960c:	01170117 	.word	0x01170117
  409610:	01170117 	.word	0x01170117
  409614:	006b0117 	.word	0x006b0117
  409618:	01170117 	.word	0x01170117
  40961c:	01170117 	.word	0x01170117
  409620:	01170117 	.word	0x01170117
  409624:	01170117 	.word	0x01170117
  409628:	01170117 	.word	0x01170117
  40962c:	01170117 	.word	0x01170117
  409630:	01170117 	.word	0x01170117
  409634:	01170117 	.word	0x01170117
  409638:	01170117 	.word	0x01170117
  40963c:	01170117 	.word	0x01170117
  409640:	01170117 	.word	0x01170117
  409644:	01170117 	.word	0x01170117
  409648:	01170117 	.word	0x01170117
  40964c:	01170117 	.word	0x01170117
  409650:	01170117 	.word	0x01170117
  409654:	01170117 	.word	0x01170117
  409658:	01170117 	.word	0x01170117
  40965c:	01170117 	.word	0x01170117
  409660:	01170117 	.word	0x01170117
  409664:	01170117 	.word	0x01170117
  409668:	01170117 	.word	0x01170117
  40966c:	01170117 	.word	0x01170117
  409670:	01170068 	.word	0x01170068
  409674:	01170117 	.word	0x01170117
  409678:	01170117 	.word	0x01170117
  40967c:	0117006e 	.word	0x0117006e
  409680:	01170117 	.word	0x01170117
  409684:	01170071 	.word	0x01170071
  409688:	01170117 	.word	0x01170117
  40968c:	01170117 	.word	0x01170117
  409690:	01170117 	.word	0x01170117
  409694:	01170074 	.word	0x01170074
  409698:	01170117 	.word	0x01170117
  40969c:	01170077 	.word	0x01170077
  4096a0:	007d007a 	.word	0x007d007a
                case '\"': *output_ptr = '\"'; break;
  4096a4:	2222      	movs	r2, #34	; 0x22
  4096a6:	702a      	strb	r2, [r5, #0]
        output_ptr++;
  4096a8:	3501      	adds	r5, #1
        input_ptr++;
  4096aa:	1c5c      	adds	r4, r3, #1
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
  4096ac:	785b      	ldrb	r3, [r3, #1]
  4096ae:	2b00      	cmp	r3, #0
  4096b0:	f000 80a5 	beq.w	4097fe <get_quoted_string+0x286>
  4096b4:	1be2      	subs	r2, r4, r7
  4096b6:	4296      	cmp	r6, r2
  4096b8:	f240 80a1 	bls.w	4097fe <get_quoted_string+0x286>
        if (*input_ptr == '\\') {
  4096bc:	2b5c      	cmp	r3, #92	; 0x5c
  4096be:	d095      	beq.n	4095ec <get_quoted_string+0x74>
        } else if ((unsigned char)*input_ptr < 0x20) {
  4096c0:	2b1f      	cmp	r3, #31
  4096c2:	f240 80b2 	bls.w	40982a <get_quoted_string+0x2b2>
            *output_ptr = *input_ptr;
  4096c6:	702b      	strb	r3, [r5, #0]
  4096c8:	4623      	mov	r3, r4
  4096ca:	e7ed      	b.n	4096a8 <get_quoted_string+0x130>
                case '\\': *output_ptr = '\\'; break;
  4096cc:	225c      	movs	r2, #92	; 0x5c
  4096ce:	702a      	strb	r2, [r5, #0]
  4096d0:	e7ea      	b.n	4096a8 <get_quoted_string+0x130>
                case '/':  *output_ptr = '/';  break;
  4096d2:	222f      	movs	r2, #47	; 0x2f
  4096d4:	702a      	strb	r2, [r5, #0]
  4096d6:	e7e7      	b.n	4096a8 <get_quoted_string+0x130>
                case 'b':  *output_ptr = '\b'; break;
  4096d8:	2208      	movs	r2, #8
  4096da:	702a      	strb	r2, [r5, #0]
  4096dc:	e7e4      	b.n	4096a8 <get_quoted_string+0x130>
                case 'f':  *output_ptr = '\f'; break;
  4096de:	220c      	movs	r2, #12
  4096e0:	702a      	strb	r2, [r5, #0]
  4096e2:	e7e1      	b.n	4096a8 <get_quoted_string+0x130>
                case 'n':  *output_ptr = '\n'; break;
  4096e4:	220a      	movs	r2, #10
  4096e6:	702a      	strb	r2, [r5, #0]
  4096e8:	e7de      	b.n	4096a8 <get_quoted_string+0x130>
                case 'r':  *output_ptr = '\r'; break;
  4096ea:	220d      	movs	r2, #13
  4096ec:	702a      	strb	r2, [r5, #0]
  4096ee:	e7db      	b.n	4096a8 <get_quoted_string+0x130>
                case 't':  *output_ptr = '\t'; break;
  4096f0:	2209      	movs	r2, #9
  4096f2:	702a      	strb	r2, [r5, #0]
  4096f4:	e7d8      	b.n	4096a8 <get_quoted_string+0x130>
    unprocessed_ptr++; /* skips u */
  4096f6:	f104 0b02 	add.w	fp, r4, #2
    if (!is_utf16_hex((const unsigned char*)unprocessed_ptr) || sscanf(unprocessed_ptr, "%4x", &cp) == EOF)
  4096fa:	4658      	mov	r0, fp
  4096fc:	47d0      	blx	sl
  4096fe:	2800      	cmp	r0, #0
  409700:	f000 8093 	beq.w	40982a <get_quoted_string+0x2b2>
  409704:	466a      	mov	r2, sp
  409706:	4950      	ldr	r1, [pc, #320]	; (409848 <get_quoted_string+0x2d0>)
  409708:	4658      	mov	r0, fp
  40970a:	4b50      	ldr	r3, [pc, #320]	; (40984c <get_quoted_string+0x2d4>)
  40970c:	4798      	blx	r3
  40970e:	f1b0 3fff 	cmp.w	r0, #4294967295
  409712:	f000 808a 	beq.w	40982a <get_quoted_string+0x2b2>
    if (cp < 0x80) {
  409716:	f8dd 9000 	ldr.w	r9, [sp]
  40971a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
  40971e:	d804      	bhi.n	40972a <get_quoted_string+0x1b2>
        *processed_ptr = cp; /* 0xxxxxxx */
  409720:	f885 9000 	strb.w	r9, [r5]
    unprocessed_ptr += 3;
  409724:	f10b 0303 	add.w	r3, fp, #3
  409728:	e7be      	b.n	4096a8 <get_quoted_string+0x130>
    } else if (cp < 0x800) {
  40972a:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
  40972e:	d20c      	bcs.n	40974a <get_quoted_string+0x1d2>
        *processed_ptr++ = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
  409730:	f3c9 1384 	ubfx	r3, r9, #6, #5
  409734:	f063 033f 	orn	r3, r3, #63	; 0x3f
  409738:	702b      	strb	r3, [r5, #0]
        *processed_ptr   = ((cp     ) & 0x3F) | 0x80; /* 10xxxxxx */
  40973a:	9b00      	ldr	r3, [sp, #0]
  40973c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409740:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409744:	706b      	strb	r3, [r5, #1]
        *processed_ptr++ = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
  409746:	3501      	adds	r5, #1
  409748:	e7ec      	b.n	409724 <get_quoted_string+0x1ac>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
  40974a:	f5a9 4358 	sub.w	r3, r9, #55296	; 0xd800
  40974e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  409752:	d314      	bcc.n	40977e <get_quoted_string+0x206>
        *processed_ptr++ = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
  409754:	f3c9 3303 	ubfx	r3, r9, #12, #4
  409758:	f063 031f 	orn	r3, r3, #31
  40975c:	462a      	mov	r2, r5
  40975e:	f802 3b02 	strb.w	r3, [r2], #2
        *processed_ptr++ = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
  409762:	9b00      	ldr	r3, [sp, #0]
  409764:	f3c3 1385 	ubfx	r3, r3, #6, #6
  409768:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40976c:	706b      	strb	r3, [r5, #1]
        *processed_ptr   = ((cp     )  & 0x3F) | 0x80; /* 10xxxxxx */
  40976e:	9b00      	ldr	r3, [sp, #0]
  409770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409774:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409778:	70ab      	strb	r3, [r5, #2]
        *processed_ptr++ = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
  40977a:	4615      	mov	r5, r2
  40977c:	e7d2      	b.n	409724 <get_quoted_string+0x1ac>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
  40977e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  409782:	d252      	bcs.n	40982a <get_quoted_string+0x2b2>
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
  409784:	79a3      	ldrb	r3, [r4, #6]
  409786:	2b5c      	cmp	r3, #92	; 0x5c
  409788:	d14f      	bne.n	40982a <get_quoted_string+0x2b2>
  40978a:	f104 0b08 	add.w	fp, r4, #8
  40978e:	79e3      	ldrb	r3, [r4, #7]
  409790:	2b75      	cmp	r3, #117	; 0x75
  409792:	d14a      	bne.n	40982a <get_quoted_string+0x2b2>
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
  409794:	4658      	mov	r0, fp
  409796:	47d0      	blx	sl
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
  409798:	2800      	cmp	r0, #0
  40979a:	d046      	beq.n	40982a <get_quoted_string+0x2b2>
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
  40979c:	aa01      	add	r2, sp, #4
  40979e:	492a      	ldr	r1, [pc, #168]	; (409848 <get_quoted_string+0x2d0>)
  4097a0:	4658      	mov	r0, fp
  4097a2:	4b2a      	ldr	r3, [pc, #168]	; (40984c <get_quoted_string+0x2d4>)
  4097a4:	4798      	blx	r3
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
  4097a6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4097aa:	d03e      	beq.n	40982a <get_quoted_string+0x2b2>
            trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
  4097ac:	9a01      	ldr	r2, [sp, #4]
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
  4097ae:	f5a2 435c 	sub.w	r3, r2, #56320	; 0xdc00
  4097b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4097b6:	d238      	bcs.n	40982a <get_quoted_string+0x2b2>
        cp = ((((lead-0xD800)&0x3FF)<<10)|((trail-0xDC00)&0x3FF))+0x010000;
  4097b8:	4b25      	ldr	r3, [pc, #148]	; (409850 <get_quoted_string+0x2d8>)
  4097ba:	ea03 2389 	and.w	r3, r3, r9, lsl #10
  4097be:	f3c2 0209 	ubfx	r2, r2, #0, #10
  4097c2:	4313      	orrs	r3, r2
  4097c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  4097c8:	9300      	str	r3, [sp, #0]
        *processed_ptr++ = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
  4097ca:	f3c3 4382 	ubfx	r3, r3, #18, #3
  4097ce:	f063 030f 	orn	r3, r3, #15
  4097d2:	702b      	strb	r3, [r5, #0]
        *processed_ptr++ = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
  4097d4:	9b00      	ldr	r3, [sp, #0]
  4097d6:	f3c3 3305 	ubfx	r3, r3, #12, #6
  4097da:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4097de:	706b      	strb	r3, [r5, #1]
        *processed_ptr++ = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
  4097e0:	9b00      	ldr	r3, [sp, #0]
  4097e2:	f3c3 1385 	ubfx	r3, r3, #6, #6
  4097e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4097ea:	70ab      	strb	r3, [r5, #2]
        *processed_ptr   = (((cp     )  & 0x3F) | 0x80); /* 10xxxxxx */
  4097ec:	9b00      	ldr	r3, [sp, #0]
  4097ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4097f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4097f6:	70eb      	strb	r3, [r5, #3]
        *processed_ptr++ = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
  4097f8:	3503      	adds	r5, #3
  4097fa:	e793      	b.n	409724 <get_quoted_string+0x1ac>
    char *output_ptr = output;
  4097fc:	4605      	mov	r5, r0
    *output_ptr = '\0';
  4097fe:	2300      	movs	r3, #0
  409800:	702b      	strb	r3, [r5, #0]
    final_size = (size_t)(output_ptr-output) + 1;
  409802:	eba5 0508 	sub.w	r5, r5, r8
  409806:	3501      	adds	r5, #1
    resized_output = (char*)parson_malloc(final_size);
  409808:	4b0e      	ldr	r3, [pc, #56]	; (409844 <get_quoted_string+0x2cc>)
  40980a:	681b      	ldr	r3, [r3, #0]
  40980c:	4628      	mov	r0, r5
  40980e:	4798      	blx	r3
    if (resized_output == NULL)
  409810:	4604      	mov	r4, r0
  409812:	b150      	cbz	r0, 40982a <get_quoted_string+0x2b2>
    memcpy(resized_output, output, final_size);
  409814:	462a      	mov	r2, r5
  409816:	4641      	mov	r1, r8
  409818:	4b0e      	ldr	r3, [pc, #56]	; (409854 <get_quoted_string+0x2dc>)
  40981a:	4798      	blx	r3
    parson_free(output);
  40981c:	4b0e      	ldr	r3, [pc, #56]	; (409858 <get_quoted_string+0x2e0>)
  40981e:	681b      	ldr	r3, [r3, #0]
  409820:	4640      	mov	r0, r8
  409822:	4798      	blx	r3
  409824:	e00a      	b.n	40983c <get_quoted_string+0x2c4>
    char *output_ptr = output;
  409826:	4605      	mov	r5, r0
  409828:	e7e9      	b.n	4097fe <get_quoted_string+0x286>
    parson_free(output);
  40982a:	4b0b      	ldr	r3, [pc, #44]	; (409858 <get_quoted_string+0x2e0>)
  40982c:	681b      	ldr	r3, [r3, #0]
  40982e:	4640      	mov	r0, r8
  409830:	4798      	blx	r3
    return NULL;
  409832:	2400      	movs	r4, #0
  409834:	e002      	b.n	40983c <get_quoted_string+0x2c4>
        return NULL;
  409836:	2400      	movs	r4, #0
  409838:	e000      	b.n	40983c <get_quoted_string+0x2c4>
  40983a:	2400      	movs	r4, #0
    return process_string(string_start + 1, string_len);
}
  40983c:	4620      	mov	r0, r4
  40983e:	b003      	add	sp, #12
  409840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409844:	200001e8 	.word	0x200001e8
  409848:	00416f64 	.word	0x00416f64
  40984c:	0040e4e5 	.word	0x0040e4e5
  409850:	000ffc00 	.word	0x000ffc00
  409854:	0040dc41 	.word	0x0040dc41
  409858:	200001e4 	.word	0x200001e4
  40985c:	004093f1 	.word	0x004093f1

00409860 <parson_strndup>:
static char * parson_strndup(const char *string, size_t n) {
  409860:	b570      	push	{r4, r5, r6, lr}
  409862:	4606      	mov	r6, r0
  409864:	460d      	mov	r5, r1
    char *output_string = (char*)parson_malloc(n + 1);
  409866:	4b07      	ldr	r3, [pc, #28]	; (409884 <parson_strndup+0x24>)
  409868:	681b      	ldr	r3, [r3, #0]
  40986a:	1c48      	adds	r0, r1, #1
  40986c:	4798      	blx	r3
    if (!output_string)
  40986e:	4604      	mov	r4, r0
  409870:	b128      	cbz	r0, 40987e <parson_strndup+0x1e>
    output_string[n] = '\0';
  409872:	2300      	movs	r3, #0
  409874:	5543      	strb	r3, [r0, r5]
    strncpy(output_string, string, n);
  409876:	462a      	mov	r2, r5
  409878:	4631      	mov	r1, r6
  40987a:	4b03      	ldr	r3, [pc, #12]	; (409888 <parson_strndup+0x28>)
  40987c:	4798      	blx	r3
}
  40987e:	4620      	mov	r0, r4
  409880:	bd70      	pop	{r4, r5, r6, pc}
  409882:	bf00      	nop
  409884:	200001e8 	.word	0x200001e8
  409888:	0040e941 	.word	0x0040e941

0040988c <parson_strdup>:
static char * parson_strdup(const char *string) {
  40988c:	b510      	push	{r4, lr}
  40988e:	4604      	mov	r4, r0
    return parson_strndup(string, strlen(string));
  409890:	4b03      	ldr	r3, [pc, #12]	; (4098a0 <parson_strdup+0x14>)
  409892:	4798      	blx	r3
  409894:	4601      	mov	r1, r0
  409896:	4620      	mov	r0, r4
  409898:	4b02      	ldr	r3, [pc, #8]	; (4098a4 <parson_strdup+0x18>)
  40989a:	4798      	blx	r3
}
  40989c:	bd10      	pop	{r4, pc}
  40989e:	bf00      	nop
  4098a0:	0040e7c1 	.word	0x0040e7c1
  4098a4:	00409861 	.word	0x00409861

004098a8 <json_object_nget_value>:
static JSON_Value * json_object_nget_value(const JSON_Object *object, const char *name, size_t n) {
  4098a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4098ac:	4605      	mov	r5, r0
  4098ae:	468b      	mov	fp, r1
  4098b0:	4690      	mov	r8, r2
    for (i = 0; i < json_object_get_count(object); i++) {
  4098b2:	2400      	movs	r4, #0
        name_length = strlen(object->names[i]);
  4098b4:	4f11      	ldr	r7, [pc, #68]	; (4098fc <json_object_nget_value+0x54>)
        if (strncmp(object->names[i], name, n) == 0)
  4098b6:	f8df a048 	ldr.w	sl, [pc, #72]	; 409900 <json_object_nget_value+0x58>
    for (i = 0; i < json_object_get_count(object); i++) {
  4098ba:	e000      	b.n	4098be <json_object_nget_value+0x16>
  4098bc:	3401      	adds	r4, #1
int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
    return object ? object->count : 0;
  4098be:	b1cd      	cbz	r5, 4098f4 <json_object_nget_value+0x4c>
    for (i = 0; i < json_object_get_count(object); i++) {
  4098c0:	68ab      	ldr	r3, [r5, #8]
  4098c2:	429c      	cmp	r4, r3
  4098c4:	d213      	bcs.n	4098ee <json_object_nget_value+0x46>
  4098c6:	ea4f 0984 	mov.w	r9, r4, lsl #2
        name_length = strlen(object->names[i]);
  4098ca:	682b      	ldr	r3, [r5, #0]
  4098cc:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  4098d0:	4630      	mov	r0, r6
  4098d2:	47b8      	blx	r7
        if (name_length != n)
  4098d4:	4540      	cmp	r0, r8
  4098d6:	d1f1      	bne.n	4098bc <json_object_nget_value+0x14>
        if (strncmp(object->names[i], name, n) == 0)
  4098d8:	4602      	mov	r2, r0
  4098da:	4659      	mov	r1, fp
  4098dc:	4630      	mov	r0, r6
  4098de:	47d0      	blx	sl
  4098e0:	2800      	cmp	r0, #0
  4098e2:	d1eb      	bne.n	4098bc <json_object_nget_value+0x14>
            return object->values[i];
  4098e4:	686b      	ldr	r3, [r5, #4]
  4098e6:	f853 0009 	ldr.w	r0, [r3, r9]
  4098ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
  4098ee:	2000      	movs	r0, #0
  4098f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4098f4:	2000      	movs	r0, #0
}
  4098f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4098fa:	bf00      	nop
  4098fc:	0040e7c1 	.word	0x0040e7c1
  409900:	0040e89d 	.word	0x0040e89d

00409904 <json_object_get_value>:
    if (object == NULL || name == NULL)
  409904:	b160      	cbz	r0, 409920 <json_object_get_value+0x1c>
JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
  409906:	b538      	push	{r3, r4, r5, lr}
  409908:	4605      	mov	r5, r0
    if (object == NULL || name == NULL)
  40990a:	b159      	cbz	r1, 409924 <json_object_get_value+0x20>
  40990c:	460c      	mov	r4, r1
    return json_object_nget_value(object, name, strlen(name));
  40990e:	4608      	mov	r0, r1
  409910:	4b05      	ldr	r3, [pc, #20]	; (409928 <json_object_get_value+0x24>)
  409912:	4798      	blx	r3
  409914:	4602      	mov	r2, r0
  409916:	4621      	mov	r1, r4
  409918:	4628      	mov	r0, r5
  40991a:	4b04      	ldr	r3, [pc, #16]	; (40992c <json_object_get_value+0x28>)
  40991c:	4798      	blx	r3
  40991e:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
  409920:	2000      	movs	r0, #0
  409922:	4770      	bx	lr
  409924:	2000      	movs	r0, #0
}
  409926:	bd38      	pop	{r3, r4, r5, pc}
  409928:	0040e7c1 	.word	0x0040e7c1
  40992c:	004098a9 	.word	0x004098a9

00409930 <json_object_add>:
    if (object == NULL || name == NULL || value == NULL) {
  409930:	2800      	cmp	r0, #0
  409932:	d032      	beq.n	40999a <json_object_add+0x6a>
static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
  409934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409938:	4604      	mov	r4, r0
    if (object == NULL || name == NULL || value == NULL) {
  40993a:	2900      	cmp	r1, #0
  40993c:	d030      	beq.n	4099a0 <json_object_add+0x70>
  40993e:	2a00      	cmp	r2, #0
  409940:	d032      	beq.n	4099a8 <json_object_add+0x78>
  409942:	4616      	mov	r6, r2
  409944:	460d      	mov	r5, r1
    if (object->count >= object->capacity) {
  409946:	68c1      	ldr	r1, [r0, #12]
  409948:	6882      	ldr	r2, [r0, #8]
  40994a:	428a      	cmp	r2, r1
  40994c:	d30b      	bcc.n	409966 <json_object_add+0x36>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
  40994e:	0049      	lsls	r1, r1, #1
  409950:	290f      	cmp	r1, #15
  409952:	bf38      	it	cc
  409954:	210f      	movcc	r1, #15
        if (new_capacity > OBJECT_MAX_CAPACITY)
  409956:	f5b1 7f70 	cmp.w	r1, #960	; 0x3c0
  40995a:	d829      	bhi.n	4099b0 <json_object_add+0x80>
        if (json_object_resize(object, new_capacity) == JSONFailure)
  40995c:	4b1a      	ldr	r3, [pc, #104]	; (4099c8 <json_object_add+0x98>)
  40995e:	4798      	blx	r3
  409960:	f1b0 3fff 	cmp.w	r0, #4294967295
  409964:	d02e      	beq.n	4099c4 <json_object_add+0x94>
    if (json_object_get_value(object, name) != NULL)
  409966:	4629      	mov	r1, r5
  409968:	4620      	mov	r0, r4
  40996a:	4b18      	ldr	r3, [pc, #96]	; (4099cc <json_object_add+0x9c>)
  40996c:	4798      	blx	r3
  40996e:	bb18      	cbnz	r0, 4099b8 <json_object_add+0x88>
    object->names[index] = parson_strdup(name);
  409970:	68a7      	ldr	r7, [r4, #8]
  409972:	f8d4 8000 	ldr.w	r8, [r4]
  409976:	4628      	mov	r0, r5
  409978:	4b15      	ldr	r3, [pc, #84]	; (4099d0 <json_object_add+0xa0>)
  40997a:	4798      	blx	r3
  40997c:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
    if (object->names[index] == NULL)
  409980:	6823      	ldr	r3, [r4, #0]
  409982:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
  409986:	b1db      	cbz	r3, 4099c0 <json_object_add+0x90>
    object->values[index] = value;
  409988:	6863      	ldr	r3, [r4, #4]
  40998a:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
    object->count++;
  40998e:	68a3      	ldr	r3, [r4, #8]
  409990:	3301      	adds	r3, #1
  409992:	60a3      	str	r3, [r4, #8]
    return JSONSuccess;
  409994:	2000      	movs	r0, #0
  409996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return JSONFailure;
  40999a:	f04f 30ff 	mov.w	r0, #4294967295
  40999e:	4770      	bx	lr
  4099a0:	f04f 30ff 	mov.w	r0, #4294967295
  4099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4099a8:	f04f 30ff 	mov.w	r0, #4294967295
  4099ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return JSONFailure;
  4099b0:	f04f 30ff 	mov.w	r0, #4294967295
  4099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return JSONFailure;
  4099b8:	f04f 30ff 	mov.w	r0, #4294967295
  4099bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return JSONFailure;
  4099c0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4099c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4099c8:	0040944d 	.word	0x0040944d
  4099cc:	00409905 	.word	0x00409905
  4099d0:	0040988d 	.word	0x0040988d

004099d4 <json_array_get_value>:
int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
    return array ? array->count : 0;
  4099d4:	b130      	cbz	r0, 4099e4 <json_array_get_value+0x10>
    if (index >= json_array_get_count(array))
  4099d6:	6842      	ldr	r2, [r0, #4]
  4099d8:	4291      	cmp	r1, r2
  4099da:	d205      	bcs.n	4099e8 <json_array_get_value+0x14>
    return array->items[index];
  4099dc:	6803      	ldr	r3, [r0, #0]
  4099de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  4099e2:	4770      	bx	lr
        return NULL;
  4099e4:	2000      	movs	r0, #0
  4099e6:	4770      	bx	lr
  4099e8:	2000      	movs	r0, #0
}
  4099ea:	4770      	bx	lr

004099ec <json_array_get_count>:
    return array ? array->count : 0;
  4099ec:	b108      	cbz	r0, 4099f2 <json_array_get_count+0x6>
  4099ee:	6840      	ldr	r0, [r0, #4]
  4099f0:	4770      	bx	lr
  4099f2:	2000      	movs	r0, #0
}
  4099f4:	4770      	bx	lr

004099f6 <json_value_get_object>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
    return value ? value->type : JSONError;
  4099f6:	b120      	cbz	r0, 409a02 <json_value_get_object+0xc>
}

JSON_Object * json_value_get_object(const JSON_Value *value) {
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
  4099f8:	6802      	ldr	r2, [r0, #0]
  4099fa:	2a04      	cmp	r2, #4
  4099fc:	d103      	bne.n	409a06 <json_value_get_object+0x10>
  4099fe:	6880      	ldr	r0, [r0, #8]
  409a00:	4770      	bx	lr
  409a02:	2000      	movs	r0, #0
  409a04:	4770      	bx	lr
  409a06:	2000      	movs	r0, #0
}
  409a08:	4770      	bx	lr
	...

00409a0c <json_object_get_object>:
JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {
  409a0c:	b508      	push	{r3, lr}
    return json_value_get_object(json_object_get_value(object, name));
  409a0e:	4b02      	ldr	r3, [pc, #8]	; (409a18 <json_object_get_object+0xc>)
  409a10:	4798      	blx	r3
  409a12:	4b02      	ldr	r3, [pc, #8]	; (409a1c <json_object_get_object+0x10>)
  409a14:	4798      	blx	r3
}
  409a16:	bd08      	pop	{r3, pc}
  409a18:	00409905 	.word	0x00409905
  409a1c:	004099f7 	.word	0x004099f7

00409a20 <json_value_get_array>:
    return value ? value->type : JSONError;
  409a20:	b120      	cbz	r0, 409a2c <json_value_get_array+0xc>

JSON_Array * json_value_get_array(const JSON_Value *value) {
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
  409a22:	6802      	ldr	r2, [r0, #0]
  409a24:	2a05      	cmp	r2, #5
  409a26:	d103      	bne.n	409a30 <json_value_get_array+0x10>
  409a28:	6880      	ldr	r0, [r0, #8]
  409a2a:	4770      	bx	lr
  409a2c:	2000      	movs	r0, #0
  409a2e:	4770      	bx	lr
  409a30:	2000      	movs	r0, #0
}
  409a32:	4770      	bx	lr

00409a34 <json_object_get_array>:
JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {
  409a34:	b508      	push	{r3, lr}
    return json_value_get_array(json_object_get_value(object, name));
  409a36:	4b02      	ldr	r3, [pc, #8]	; (409a40 <json_object_get_array+0xc>)
  409a38:	4798      	blx	r3
  409a3a:	4b02      	ldr	r3, [pc, #8]	; (409a44 <json_object_get_array+0x10>)
  409a3c:	4798      	blx	r3
}
  409a3e:	bd08      	pop	{r3, pc}
  409a40:	00409905 	.word	0x00409905
  409a44:	00409a21 	.word	0x00409a21

00409a48 <json_array_get_array>:
JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {
  409a48:	b508      	push	{r3, lr}
    return json_value_get_array(json_array_get_value(array, index));
  409a4a:	4b02      	ldr	r3, [pc, #8]	; (409a54 <json_array_get_array+0xc>)
  409a4c:	4798      	blx	r3
  409a4e:	4b02      	ldr	r3, [pc, #8]	; (409a58 <json_array_get_array+0x10>)
  409a50:	4798      	blx	r3
}
  409a52:	bd08      	pop	{r3, pc}
  409a54:	004099d5 	.word	0x004099d5
  409a58:	00409a21 	.word	0x00409a21

00409a5c <json_value_get_number>:
    return value ? value->type : JSONError;
  409a5c:	b140      	cbz	r0, 409a70 <json_value_get_number+0x14>
const char * json_value_get_string(const JSON_Value *value) {
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
}

double json_value_get_number(const JSON_Value *value) {
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
  409a5e:	6802      	ldr	r2, [r0, #0]
  409a60:	2a03      	cmp	r2, #3
  409a62:	d002      	beq.n	409a6a <json_value_get_number+0xe>
  409a64:	2000      	movs	r0, #0
  409a66:	2100      	movs	r1, #0
}
  409a68:	4770      	bx	lr
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
  409a6a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
  409a6e:	4770      	bx	lr
  409a70:	2000      	movs	r0, #0
  409a72:	2100      	movs	r1, #0
  409a74:	4770      	bx	lr
	...

00409a78 <json_object_get_number>:
double json_object_get_number(const JSON_Object *object, const char *name) {
  409a78:	b508      	push	{r3, lr}
    return json_value_get_number(json_object_get_value(object, name));
  409a7a:	4b02      	ldr	r3, [pc, #8]	; (409a84 <json_object_get_number+0xc>)
  409a7c:	4798      	blx	r3
  409a7e:	4b02      	ldr	r3, [pc, #8]	; (409a88 <json_object_get_number+0x10>)
  409a80:	4798      	blx	r3
}
  409a82:	bd08      	pop	{r3, pc}
  409a84:	00409905 	.word	0x00409905
  409a88:	00409a5d 	.word	0x00409a5d

00409a8c <json_array_get_number>:
double json_array_get_number(const JSON_Array *array, size_t index) {
  409a8c:	b508      	push	{r3, lr}
    return json_value_get_number(json_array_get_value(array, index));
  409a8e:	4b02      	ldr	r3, [pc, #8]	; (409a98 <json_array_get_number+0xc>)
  409a90:	4798      	blx	r3
  409a92:	4b02      	ldr	r3, [pc, #8]	; (409a9c <json_array_get_number+0x10>)
  409a94:	4798      	blx	r3
}
  409a96:	bd08      	pop	{r3, pc}
  409a98:	004099d5 	.word	0x004099d5
  409a9c:	00409a5d 	.word	0x00409a5d

00409aa0 <json_value_free>:

int json_value_get_boolean(const JSON_Value *value) {
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
}

void json_value_free(JSON_Value *value) {
  409aa0:	b570      	push	{r4, r5, r6, lr}
    return value ? value->type : JSONError;
  409aa2:	4605      	mov	r5, r0
  409aa4:	b130      	cbz	r0, 409ab4 <json_value_free+0x14>
    switch (json_value_get_type(value)) {
  409aa6:	6803      	ldr	r3, [r0, #0]
  409aa8:	2b04      	cmp	r3, #4
  409aaa:	d008      	beq.n	409abe <json_value_free+0x1e>
  409aac:	2b05      	cmp	r3, #5
  409aae:	d02e      	beq.n	409b0e <json_value_free+0x6e>
  409ab0:	2b02      	cmp	r3, #2
  409ab2:	d025      	beq.n	409b00 <json_value_free+0x60>
            json_array_free(value->value.array);
            break;
        default:
            break;
    }
    parson_free(value);
  409ab4:	4b21      	ldr	r3, [pc, #132]	; (409b3c <json_value_free+0x9c>)
  409ab6:	681b      	ldr	r3, [r3, #0]
  409ab8:	4628      	mov	r0, r5
  409aba:	4798      	blx	r3
  409abc:	bd70      	pop	{r4, r5, r6, pc}
            json_object_free(value->value.object);
  409abe:	6884      	ldr	r4, [r0, #8]
    while(object->count--) {
  409ac0:	68a2      	ldr	r2, [r4, #8]
  409ac2:	1e53      	subs	r3, r2, #1
  409ac4:	60a3      	str	r3, [r4, #8]
  409ac6:	b182      	cbz	r2, 409aea <json_value_free+0x4a>
        parson_free(object->names[object->count]);
  409ac8:	4e1c      	ldr	r6, [pc, #112]	; (409b3c <json_value_free+0x9c>)
  409aca:	6822      	ldr	r2, [r4, #0]
  409acc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  409ad0:	6833      	ldr	r3, [r6, #0]
  409ad2:	4798      	blx	r3
        json_value_free(object->values[object->count]);
  409ad4:	68a2      	ldr	r2, [r4, #8]
  409ad6:	6863      	ldr	r3, [r4, #4]
  409ad8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  409adc:	f7ff ffe0 	bl	409aa0 <json_value_free>
    while(object->count--) {
  409ae0:	68a2      	ldr	r2, [r4, #8]
  409ae2:	1e53      	subs	r3, r2, #1
  409ae4:	60a3      	str	r3, [r4, #8]
  409ae6:	2a00      	cmp	r2, #0
  409ae8:	d1ef      	bne.n	409aca <json_value_free+0x2a>
    parson_free(object->names);
  409aea:	4e14      	ldr	r6, [pc, #80]	; (409b3c <json_value_free+0x9c>)
  409aec:	6833      	ldr	r3, [r6, #0]
  409aee:	6820      	ldr	r0, [r4, #0]
  409af0:	4798      	blx	r3
    parson_free(object->values);
  409af2:	6833      	ldr	r3, [r6, #0]
  409af4:	6860      	ldr	r0, [r4, #4]
  409af6:	4798      	blx	r3
    parson_free(object);
  409af8:	6833      	ldr	r3, [r6, #0]
  409afa:	4620      	mov	r0, r4
  409afc:	4798      	blx	r3
  409afe:	e7d9      	b.n	409ab4 <json_value_free+0x14>
            if (value->value.string) { parson_free(value->value.string); }
  409b00:	6880      	ldr	r0, [r0, #8]
  409b02:	2800      	cmp	r0, #0
  409b04:	d0d6      	beq.n	409ab4 <json_value_free+0x14>
  409b06:	4b0d      	ldr	r3, [pc, #52]	; (409b3c <json_value_free+0x9c>)
  409b08:	681b      	ldr	r3, [r3, #0]
  409b0a:	4798      	blx	r3
  409b0c:	e7d2      	b.n	409ab4 <json_value_free+0x14>
            json_array_free(value->value.array);
  409b0e:	6884      	ldr	r4, [r0, #8]
    while (array->count--)
  409b10:	6862      	ldr	r2, [r4, #4]
  409b12:	1e53      	subs	r3, r2, #1
  409b14:	6063      	str	r3, [r4, #4]
  409b16:	b14a      	cbz	r2, 409b2c <json_value_free+0x8c>
        json_value_free(array->items[array->count]);
  409b18:	6822      	ldr	r2, [r4, #0]
  409b1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  409b1e:	f7ff ffbf 	bl	409aa0 <json_value_free>
    while (array->count--)
  409b22:	6862      	ldr	r2, [r4, #4]
  409b24:	1e53      	subs	r3, r2, #1
  409b26:	6063      	str	r3, [r4, #4]
  409b28:	2a00      	cmp	r2, #0
  409b2a:	d1f5      	bne.n	409b18 <json_value_free+0x78>
    parson_free(array->items);
  409b2c:	4e03      	ldr	r6, [pc, #12]	; (409b3c <json_value_free+0x9c>)
  409b2e:	6833      	ldr	r3, [r6, #0]
  409b30:	6820      	ldr	r0, [r4, #0]
  409b32:	4798      	blx	r3
    parson_free(array);
  409b34:	6833      	ldr	r3, [r6, #0]
  409b36:	4620      	mov	r0, r4
  409b38:	4798      	blx	r3
  409b3a:	e7bb      	b.n	409ab4 <json_value_free+0x14>
  409b3c:	200001e4 	.word	0x200001e4

00409b40 <json_value_init_object>:
}

JSON_Value * json_value_init_object(void) {
  409b40:	b538      	push	{r3, r4, r5, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
  409b42:	4b0e      	ldr	r3, [pc, #56]	; (409b7c <json_value_init_object+0x3c>)
  409b44:	681b      	ldr	r3, [r3, #0]
  409b46:	2010      	movs	r0, #16
  409b48:	4798      	blx	r3
    if (!new_value)
  409b4a:	4604      	mov	r4, r0
  409b4c:	b160      	cbz	r0, 409b68 <json_value_init_object+0x28>
        return NULL;
    new_value->type = JSONObject;
  409b4e:	2304      	movs	r3, #4
  409b50:	6003      	str	r3, [r0, #0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
  409b52:	4b0a      	ldr	r3, [pc, #40]	; (409b7c <json_value_init_object+0x3c>)
  409b54:	681b      	ldr	r3, [r3, #0]
  409b56:	2010      	movs	r0, #16
  409b58:	4798      	blx	r3
    if (!new_obj)
  409b5a:	b138      	cbz	r0, 409b6c <json_value_init_object+0x2c>
    new_obj->names = (char**)NULL;
  409b5c:	2200      	movs	r2, #0
  409b5e:	6002      	str	r2, [r0, #0]
    new_obj->values = (JSON_Value**)NULL;
  409b60:	6042      	str	r2, [r0, #4]
    new_obj->capacity = 0;
  409b62:	60c2      	str	r2, [r0, #12]
    new_obj->count = 0;
  409b64:	6082      	str	r2, [r0, #8]
    new_value->value.object = json_object_init();
  409b66:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.object) {
        parson_free(new_value);
        return NULL;
    }
    return new_value;
}
  409b68:	4620      	mov	r0, r4
  409b6a:	bd38      	pop	{r3, r4, r5, pc}
    new_value->value.object = json_object_init();
  409b6c:	2500      	movs	r5, #0
  409b6e:	60a5      	str	r5, [r4, #8]
        parson_free(new_value);
  409b70:	4b03      	ldr	r3, [pc, #12]	; (409b80 <json_value_init_object+0x40>)
  409b72:	681b      	ldr	r3, [r3, #0]
  409b74:	4620      	mov	r0, r4
  409b76:	4798      	blx	r3
        return NULL;
  409b78:	462c      	mov	r4, r5
  409b7a:	e7f5      	b.n	409b68 <json_value_init_object+0x28>
  409b7c:	200001e8 	.word	0x200001e8
  409b80:	200001e4 	.word	0x200001e4

00409b84 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
  409b84:	b538      	push	{r3, r4, r5, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
  409b86:	4b0e      	ldr	r3, [pc, #56]	; (409bc0 <json_value_init_array+0x3c>)
  409b88:	681b      	ldr	r3, [r3, #0]
  409b8a:	2010      	movs	r0, #16
  409b8c:	4798      	blx	r3
    if (!new_value)
  409b8e:	4604      	mov	r4, r0
  409b90:	b158      	cbz	r0, 409baa <json_value_init_array+0x26>
        return NULL;
    new_value->type = JSONArray;
  409b92:	2305      	movs	r3, #5
  409b94:	6003      	str	r3, [r0, #0]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
  409b96:	4b0a      	ldr	r3, [pc, #40]	; (409bc0 <json_value_init_array+0x3c>)
  409b98:	681b      	ldr	r3, [r3, #0]
  409b9a:	200c      	movs	r0, #12
  409b9c:	4798      	blx	r3
    if (!new_array)
  409b9e:	b130      	cbz	r0, 409bae <json_value_init_array+0x2a>
    new_array->items = (JSON_Value**)NULL;
  409ba0:	2200      	movs	r2, #0
  409ba2:	6002      	str	r2, [r0, #0]
    new_array->capacity = 0;
  409ba4:	6082      	str	r2, [r0, #8]
    new_array->count = 0;
  409ba6:	6042      	str	r2, [r0, #4]
    new_value->value.array = json_array_init();
  409ba8:	60a0      	str	r0, [r4, #8]
    if (!new_value->value.array) {
        parson_free(new_value);
        return NULL;
    }
    return new_value;
}
  409baa:	4620      	mov	r0, r4
  409bac:	bd38      	pop	{r3, r4, r5, pc}
    new_value->value.array = json_array_init();
  409bae:	2500      	movs	r5, #0
  409bb0:	60a5      	str	r5, [r4, #8]
        parson_free(new_value);
  409bb2:	4b04      	ldr	r3, [pc, #16]	; (409bc4 <json_value_init_array+0x40>)
  409bb4:	681b      	ldr	r3, [r3, #0]
  409bb6:	4620      	mov	r0, r4
  409bb8:	4798      	blx	r3
        return NULL;
  409bba:	462c      	mov	r4, r5
  409bbc:	e7f5      	b.n	409baa <json_value_init_array+0x26>
  409bbe:	bf00      	nop
  409bc0:	200001e8 	.word	0x200001e8
  409bc4:	200001e4 	.word	0x200001e4

00409bc8 <json_value_init_number>:
    if (value == NULL)
        parson_free(copy);
    return value;
}

JSON_Value * json_value_init_number(double number) {
  409bc8:	b538      	push	{r3, r4, r5, lr}
  409bca:	4604      	mov	r4, r0
  409bcc:	460d      	mov	r5, r1
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
  409bce:	4b06      	ldr	r3, [pc, #24]	; (409be8 <json_value_init_number+0x20>)
  409bd0:	681b      	ldr	r3, [r3, #0]
  409bd2:	2010      	movs	r0, #16
  409bd4:	4798      	blx	r3
    if (!new_value)
  409bd6:	4603      	mov	r3, r0
  409bd8:	b118      	cbz	r0, 409be2 <json_value_init_number+0x1a>
        return NULL;
    new_value->type = JSONNumber;
  409bda:	2203      	movs	r2, #3
  409bdc:	6002      	str	r2, [r0, #0]
    new_value->value.number = number;
  409bde:	e9c0 4502 	strd	r4, r5, [r0, #8]
    return new_value;
}
  409be2:	4618      	mov	r0, r3
  409be4:	bd38      	pop	{r3, r4, r5, pc}
  409be6:	bf00      	nop
  409be8:	200001e8 	.word	0x200001e8

00409bec <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
  409bec:	b510      	push	{r4, lr}
  409bee:	4604      	mov	r4, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
  409bf0:	4b06      	ldr	r3, [pc, #24]	; (409c0c <json_value_init_boolean+0x20>)
  409bf2:	681b      	ldr	r3, [r3, #0]
  409bf4:	2010      	movs	r0, #16
  409bf6:	4798      	blx	r3
    if (!new_value)
  409bf8:	4603      	mov	r3, r0
  409bfa:	b128      	cbz	r0, 409c08 <json_value_init_boolean+0x1c>
        return NULL;
    new_value->type = JSONBoolean;
  409bfc:	2206      	movs	r2, #6
  409bfe:	6002      	str	r2, [r0, #0]
    new_value->value.boolean = boolean ? 1 : 0;
  409c00:	3400      	adds	r4, #0
  409c02:	bf18      	it	ne
  409c04:	2401      	movne	r4, #1
  409c06:	6084      	str	r4, [r0, #8]
    return new_value;
}
  409c08:	4618      	mov	r0, r3
  409c0a:	bd10      	pop	{r4, pc}
  409c0c:	200001e8 	.word	0x200001e8

00409c10 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
  409c10:	b508      	push	{r3, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
  409c12:	4b05      	ldr	r3, [pc, #20]	; (409c28 <json_value_init_null+0x18>)
  409c14:	681b      	ldr	r3, [r3, #0]
  409c16:	2010      	movs	r0, #16
  409c18:	4798      	blx	r3
    if (!new_value)
  409c1a:	4603      	mov	r3, r0
  409c1c:	b108      	cbz	r0, 409c22 <json_value_init_null+0x12>
        return NULL;
    new_value->type = JSONNull;
  409c1e:	2201      	movs	r2, #1
  409c20:	6002      	str	r2, [r0, #0]
    return new_value;
}
  409c22:	4618      	mov	r0, r3
  409c24:	bd08      	pop	{r3, pc}
  409c26:	bf00      	nop
  409c28:	200001e8 	.word	0x200001e8

00409c2c <parse_value>:
static JSON_Value * parse_value(const char **string, size_t nesting) {
  409c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c30:	b085      	sub	sp, #20
    if (nesting > MAX_NESTING)
  409c32:	2913      	cmp	r1, #19
  409c34:	f200 820d 	bhi.w	40a052 <parse_value+0x426>
  409c38:	4689      	mov	r9, r1
  409c3a:	4604      	mov	r4, r0
    SKIP_WHITESPACES(string);
  409c3c:	4f8f      	ldr	r7, [pc, #572]	; (409e7c <parse_value+0x250>)
  409c3e:	e001      	b.n	409c44 <parse_value+0x18>
  409c40:	3501      	adds	r5, #1
  409c42:	6025      	str	r5, [r4, #0]
  409c44:	47b8      	blx	r7
  409c46:	6825      	ldr	r5, [r4, #0]
  409c48:	782b      	ldrb	r3, [r5, #0]
  409c4a:	4418      	add	r0, r3
  409c4c:	7842      	ldrb	r2, [r0, #1]
  409c4e:	f012 0f08 	tst.w	r2, #8
  409c52:	d1f5      	bne.n	409c40 <parse_value+0x14>
    switch (**string) {
  409c54:	3b22      	subs	r3, #34	; 0x22
  409c56:	2b59      	cmp	r3, #89	; 0x59
  409c58:	f200 81fd 	bhi.w	40a056 <parse_value+0x42a>
  409c5c:	e8df f013 	tbh	[pc, r3, lsl #1]
  409c60:	01fb0190 	.word	0x01fb0190
  409c64:	01fb01fb 	.word	0x01fb01fb
  409c68:	01fb01fb 	.word	0x01fb01fb
  409c6c:	01fb01fb 	.word	0x01fb01fb
  409c70:	01fb01fb 	.word	0x01fb01fb
  409c74:	01bd01fb 	.word	0x01bd01fb
  409c78:	01fb01fb 	.word	0x01fb01fb
  409c7c:	01bd01bd 	.word	0x01bd01bd
  409c80:	01bd01bd 	.word	0x01bd01bd
  409c84:	01bd01bd 	.word	0x01bd01bd
  409c88:	01bd01bd 	.word	0x01bd01bd
  409c8c:	01bd01bd 	.word	0x01bd01bd
  409c90:	01fb01fb 	.word	0x01fb01fb
  409c94:	01fb01fb 	.word	0x01fb01fb
  409c98:	01fb01fb 	.word	0x01fb01fb
  409c9c:	01fb01fb 	.word	0x01fb01fb
  409ca0:	01fb01fb 	.word	0x01fb01fb
  409ca4:	01fb01fb 	.word	0x01fb01fb
  409ca8:	01fb01fb 	.word	0x01fb01fb
  409cac:	01fb01fb 	.word	0x01fb01fb
  409cb0:	01fb01fb 	.word	0x01fb01fb
  409cb4:	01fb01fb 	.word	0x01fb01fb
  409cb8:	01fb01fb 	.word	0x01fb01fb
  409cbc:	01fb01fb 	.word	0x01fb01fb
  409cc0:	01fb01fb 	.word	0x01fb01fb
  409cc4:	01fb01fb 	.word	0x01fb01fb
  409cc8:	01fb01fb 	.word	0x01fb01fb
  409ccc:	01fb01fb 	.word	0x01fb01fb
  409cd0:	00fd01fb 	.word	0x00fd01fb
  409cd4:	01fb01fb 	.word	0x01fb01fb
  409cd8:	01fb01fb 	.word	0x01fb01fb
  409cdc:	01fb01fb 	.word	0x01fb01fb
  409ce0:	01fb01fb 	.word	0x01fb01fb
  409ce4:	01fb01fb 	.word	0x01fb01fb
  409ce8:	01fb01a3 	.word	0x01fb01a3
  409cec:	01fb01fb 	.word	0x01fb01fb
  409cf0:	01fb01fb 	.word	0x01fb01fb
  409cf4:	01fb01fb 	.word	0x01fb01fb
  409cf8:	01fb01ed 	.word	0x01fb01ed
  409cfc:	01fb01fb 	.word	0x01fb01fb
  409d00:	01fb01fb 	.word	0x01fb01fb
  409d04:	01fb01a3 	.word	0x01fb01a3
  409d08:	01fb01fb 	.word	0x01fb01fb
  409d0c:	01fb01fb 	.word	0x01fb01fb
  409d10:	005a01fb 	.word	0x005a01fb
            return parse_object_value(string, nesting + 1);
  409d14:	f109 0901 	add.w	r9, r9, #1
    JSON_Value *output_value = json_value_init_object(), *new_value = NULL;
  409d18:	4b59      	ldr	r3, [pc, #356]	; (409e80 <parse_value+0x254>)
  409d1a:	4798      	blx	r3
  409d1c:	4607      	mov	r7, r0
    JSON_Object *output_object = json_value_get_object(output_value);
  409d1e:	4b59      	ldr	r3, [pc, #356]	; (409e84 <parse_value+0x258>)
  409d20:	4798      	blx	r3
  409d22:	9001      	str	r0, [sp, #4]
    if (output_value == NULL)
  409d24:	2f00      	cmp	r7, #0
  409d26:	f000 8135 	beq.w	409f94 <parse_value+0x368>
    SKIP_CHAR(string);
  409d2a:	6823      	ldr	r3, [r4, #0]
  409d2c:	3301      	adds	r3, #1
  409d2e:	6023      	str	r3, [r4, #0]
    SKIP_WHITESPACES(string);
  409d30:	4d52      	ldr	r5, [pc, #328]	; (409e7c <parse_value+0x250>)
  409d32:	e001      	b.n	409d38 <parse_value+0x10c>
  409d34:	3301      	adds	r3, #1
  409d36:	6023      	str	r3, [r4, #0]
  409d38:	47a8      	blx	r5
  409d3a:	6823      	ldr	r3, [r4, #0]
  409d3c:	781a      	ldrb	r2, [r3, #0]
  409d3e:	4410      	add	r0, r2
  409d40:	7841      	ldrb	r1, [r0, #1]
  409d42:	f011 0f08 	tst.w	r1, #8
  409d46:	d1f5      	bne.n	409d34 <parse_value+0x108>
    if (**string == '}') { /* empty object */
  409d48:	2a7d      	cmp	r2, #125	; 0x7d
  409d4a:	d005      	beq.n	409d58 <parse_value+0x12c>
        new_key = get_quoted_string(string);
  409d4c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 409e9c <parse_value+0x270>
        SKIP_WHITESPACES(string);
  409d50:	4d4a      	ldr	r5, [pc, #296]	; (409e7c <parse_value+0x250>)
        if(json_object_add(output_object, new_key, new_value) == JSONFailure) {
  409d52:	f8df b14c 	ldr.w	fp, [pc, #332]	; 409ea0 <parse_value+0x274>
  409d56:	e058      	b.n	409e0a <parse_value+0x1de>
        SKIP_CHAR(string);
  409d58:	3301      	adds	r3, #1
  409d5a:	6023      	str	r3, [r4, #0]
  409d5c:	e11a      	b.n	409f94 <parse_value+0x368>
        SKIP_WHITESPACES(string);
  409d5e:	3301      	adds	r3, #1
  409d60:	6023      	str	r3, [r4, #0]
  409d62:	47a8      	blx	r5
  409d64:	6823      	ldr	r3, [r4, #0]
  409d66:	781a      	ldrb	r2, [r3, #0]
  409d68:	4410      	add	r0, r2
  409d6a:	7841      	ldrb	r1, [r0, #1]
  409d6c:	f011 0f08 	tst.w	r1, #8
  409d70:	d1f5      	bne.n	409d5e <parse_value+0x132>
        if (new_key == NULL || **string != ':') {
  409d72:	b1ae      	cbz	r6, 409da0 <parse_value+0x174>
  409d74:	2a3a      	cmp	r2, #58	; 0x3a
  409d76:	d113      	bne.n	409da0 <parse_value+0x174>
        SKIP_CHAR(string);
  409d78:	3301      	adds	r3, #1
  409d7a:	6023      	str	r3, [r4, #0]
        new_value = parse_value(string, nesting);
  409d7c:	4649      	mov	r1, r9
  409d7e:	4620      	mov	r0, r4
  409d80:	f7ff ff54 	bl	409c2c <parse_value>
        if (new_value == NULL) {
  409d84:	4680      	mov	r8, r0
  409d86:	b180      	cbz	r0, 409daa <parse_value+0x17e>
        if(json_object_add(output_object, new_key, new_value) == JSONFailure) {
  409d88:	4602      	mov	r2, r0
  409d8a:	4631      	mov	r1, r6
  409d8c:	9801      	ldr	r0, [sp, #4]
  409d8e:	47d8      	blx	fp
  409d90:	f1b0 3fff 	cmp.w	r0, #4294967295
  409d94:	d012      	beq.n	409dbc <parse_value+0x190>
        parson_free(new_key);
  409d96:	4b3c      	ldr	r3, [pc, #240]	; (409e88 <parse_value+0x25c>)
  409d98:	681b      	ldr	r3, [r3, #0]
  409d9a:	4630      	mov	r0, r6
  409d9c:	4798      	blx	r3
  409d9e:	e01b      	b.n	409dd8 <parse_value+0x1ac>
            json_value_free(output_value);
  409da0:	4638      	mov	r0, r7
  409da2:	4b3a      	ldr	r3, [pc, #232]	; (409e8c <parse_value+0x260>)
  409da4:	4798      	blx	r3
            return NULL;
  409da6:	2700      	movs	r7, #0
  409da8:	e0f4      	b.n	409f94 <parse_value+0x368>
            parson_free(new_key);
  409daa:	4b37      	ldr	r3, [pc, #220]	; (409e88 <parse_value+0x25c>)
  409dac:	681b      	ldr	r3, [r3, #0]
  409dae:	4630      	mov	r0, r6
  409db0:	4798      	blx	r3
            json_value_free(output_value);
  409db2:	4638      	mov	r0, r7
  409db4:	4b35      	ldr	r3, [pc, #212]	; (409e8c <parse_value+0x260>)
  409db6:	4798      	blx	r3
            return NULL;
  409db8:	4647      	mov	r7, r8
  409dba:	e0eb      	b.n	409f94 <parse_value+0x368>
            parson_free(new_key);
  409dbc:	4c32      	ldr	r4, [pc, #200]	; (409e88 <parse_value+0x25c>)
  409dbe:	6823      	ldr	r3, [r4, #0]
  409dc0:	4630      	mov	r0, r6
  409dc2:	4798      	blx	r3
            parson_free(new_value);
  409dc4:	6823      	ldr	r3, [r4, #0]
  409dc6:	4640      	mov	r0, r8
  409dc8:	4798      	blx	r3
            json_value_free(output_value);
  409dca:	4638      	mov	r0, r7
  409dcc:	4b2f      	ldr	r3, [pc, #188]	; (409e8c <parse_value+0x260>)
  409dce:	4798      	blx	r3
            return NULL;
  409dd0:	2700      	movs	r7, #0
  409dd2:	e0df      	b.n	409f94 <parse_value+0x368>
        SKIP_WHITESPACES(string);
  409dd4:	3301      	adds	r3, #1
  409dd6:	6023      	str	r3, [r4, #0]
  409dd8:	47a8      	blx	r5
  409dda:	6823      	ldr	r3, [r4, #0]
  409ddc:	781a      	ldrb	r2, [r3, #0]
  409dde:	4410      	add	r0, r2
  409de0:	7841      	ldrb	r1, [r0, #1]
  409de2:	f011 0f08 	tst.w	r1, #8
  409de6:	d1f5      	bne.n	409dd4 <parse_value+0x1a8>
        if (**string != ',')
  409de8:	2a2c      	cmp	r2, #44	; 0x2c
  409dea:	d102      	bne.n	409df2 <parse_value+0x1c6>
        SKIP_CHAR(string);
  409dec:	3301      	adds	r3, #1
  409dee:	6023      	str	r3, [r4, #0]
  409df0:	e003      	b.n	409dfa <parse_value+0x1ce>
    SKIP_WHITESPACES(string);
  409df2:	4d22      	ldr	r5, [pc, #136]	; (409e7c <parse_value+0x250>)
  409df4:	e013      	b.n	409e1e <parse_value+0x1f2>
        SKIP_WHITESPACES(string);
  409df6:	3301      	adds	r3, #1
  409df8:	6023      	str	r3, [r4, #0]
  409dfa:	47a8      	blx	r5
  409dfc:	6823      	ldr	r3, [r4, #0]
  409dfe:	781a      	ldrb	r2, [r3, #0]
  409e00:	4410      	add	r0, r2
  409e02:	7842      	ldrb	r2, [r0, #1]
  409e04:	f012 0f08 	tst.w	r2, #8
  409e08:	d1f5      	bne.n	409df6 <parse_value+0x1ca>
    while (**string != '\0') {
  409e0a:	6823      	ldr	r3, [r4, #0]
  409e0c:	781b      	ldrb	r3, [r3, #0]
  409e0e:	2b00      	cmp	r3, #0
  409e10:	d0ef      	beq.n	409df2 <parse_value+0x1c6>
        new_key = get_quoted_string(string);
  409e12:	4620      	mov	r0, r4
  409e14:	47d0      	blx	sl
  409e16:	4606      	mov	r6, r0
  409e18:	e7a3      	b.n	409d62 <parse_value+0x136>
    SKIP_WHITESPACES(string);
  409e1a:	3301      	adds	r3, #1
  409e1c:	6023      	str	r3, [r4, #0]
  409e1e:	47a8      	blx	r5
  409e20:	6823      	ldr	r3, [r4, #0]
  409e22:	781a      	ldrb	r2, [r3, #0]
  409e24:	4410      	add	r0, r2
  409e26:	7841      	ldrb	r1, [r0, #1]
  409e28:	f011 0f08 	tst.w	r1, #8
  409e2c:	d1f5      	bne.n	409e1a <parse_value+0x1ee>
    if (**string != '}' || /* Trim object after parsing is over */
  409e2e:	2a7d      	cmp	r2, #125	; 0x7d
  409e30:	d10e      	bne.n	409e50 <parse_value+0x224>
    return object ? object->count : 0;
  409e32:	9b01      	ldr	r3, [sp, #4]
  409e34:	b153      	cbz	r3, 409e4c <parse_value+0x220>
  409e36:	6899      	ldr	r1, [r3, #8]
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
  409e38:	9801      	ldr	r0, [sp, #4]
  409e3a:	4b15      	ldr	r3, [pc, #84]	; (409e90 <parse_value+0x264>)
  409e3c:	4798      	blx	r3
    if (**string != '}' || /* Trim object after parsing is over */
  409e3e:	f1b0 3fff 	cmp.w	r0, #4294967295
  409e42:	d005      	beq.n	409e50 <parse_value+0x224>
    SKIP_CHAR(string);
  409e44:	6823      	ldr	r3, [r4, #0]
  409e46:	3301      	adds	r3, #1
  409e48:	6023      	str	r3, [r4, #0]
  409e4a:	e0a3      	b.n	409f94 <parse_value+0x368>
    return object ? object->count : 0;
  409e4c:	2100      	movs	r1, #0
  409e4e:	e7f3      	b.n	409e38 <parse_value+0x20c>
            json_value_free(output_value);
  409e50:	4638      	mov	r0, r7
  409e52:	4b0e      	ldr	r3, [pc, #56]	; (409e8c <parse_value+0x260>)
  409e54:	4798      	blx	r3
            return NULL;
  409e56:	2700      	movs	r7, #0
  409e58:	e09c      	b.n	409f94 <parse_value+0x368>
            return parse_array_value(string, nesting + 1);
  409e5a:	f109 0901 	add.w	r9, r9, #1
    JSON_Value *output_value = json_value_init_array(), *new_array_value = NULL;
  409e5e:	4b0d      	ldr	r3, [pc, #52]	; (409e94 <parse_value+0x268>)
  409e60:	4798      	blx	r3
  409e62:	4607      	mov	r7, r0
    JSON_Array *output_array = json_value_get_array(output_value);
  409e64:	4b0c      	ldr	r3, [pc, #48]	; (409e98 <parse_value+0x26c>)
  409e66:	4798      	blx	r3
  409e68:	4680      	mov	r8, r0
    if (!output_value)
  409e6a:	2f00      	cmp	r7, #0
  409e6c:	f000 8092 	beq.w	409f94 <parse_value+0x368>
    SKIP_CHAR(string);
  409e70:	6823      	ldr	r3, [r4, #0]
  409e72:	3301      	adds	r3, #1
  409e74:	6023      	str	r3, [r4, #0]
    SKIP_WHITESPACES(string);
  409e76:	4d01      	ldr	r5, [pc, #4]	; (409e7c <parse_value+0x250>)
  409e78:	e016      	b.n	409ea8 <parse_value+0x27c>
  409e7a:	bf00      	nop
  409e7c:	0040d479 	.word	0x0040d479
  409e80:	00409b41 	.word	0x00409b41
  409e84:	004099f7 	.word	0x004099f7
  409e88:	200001e4 	.word	0x200001e4
  409e8c:	00409aa1 	.word	0x00409aa1
  409e90:	0040944d 	.word	0x0040944d
  409e94:	00409b85 	.word	0x00409b85
  409e98:	00409a21 	.word	0x00409a21
  409e9c:	00409579 	.word	0x00409579
  409ea0:	00409931 	.word	0x00409931
  409ea4:	3301      	adds	r3, #1
  409ea6:	6023      	str	r3, [r4, #0]
  409ea8:	47a8      	blx	r5
  409eaa:	6823      	ldr	r3, [r4, #0]
  409eac:	781a      	ldrb	r2, [r3, #0]
  409eae:	4410      	add	r0, r2
  409eb0:	7841      	ldrb	r1, [r0, #1]
  409eb2:	f011 0f08 	tst.w	r1, #8
  409eb6:	d1f5      	bne.n	409ea4 <parse_value+0x278>
    if (**string == ']') { /* empty array */
  409eb8:	2a5d      	cmp	r2, #93	; 0x5d
  409eba:	d002      	beq.n	409ec2 <parse_value+0x296>
        if(json_array_add(output_array, new_array_value) == JSONFailure) {
  409ebc:	4e6e      	ldr	r6, [pc, #440]	; (40a078 <parse_value+0x44c>)
        SKIP_WHITESPACES(string);
  409ebe:	4d6f      	ldr	r5, [pc, #444]	; (40a07c <parse_value+0x450>)
  409ec0:	e022      	b.n	409f08 <parse_value+0x2dc>
        SKIP_CHAR(string);
  409ec2:	3301      	adds	r3, #1
  409ec4:	6023      	str	r3, [r4, #0]
  409ec6:	e065      	b.n	409f94 <parse_value+0x368>
            json_value_free(output_value);
  409ec8:	4638      	mov	r0, r7
  409eca:	4b6d      	ldr	r3, [pc, #436]	; (40a080 <parse_value+0x454>)
  409ecc:	4798      	blx	r3
            return NULL;
  409ece:	4657      	mov	r7, sl
  409ed0:	e060      	b.n	409f94 <parse_value+0x368>
        SKIP_WHITESPACES(string);
  409ed2:	3301      	adds	r3, #1
  409ed4:	6023      	str	r3, [r4, #0]
  409ed6:	47a8      	blx	r5
  409ed8:	6823      	ldr	r3, [r4, #0]
  409eda:	781a      	ldrb	r2, [r3, #0]
  409edc:	4410      	add	r0, r2
  409ede:	7841      	ldrb	r1, [r0, #1]
  409ee0:	f011 0f08 	tst.w	r1, #8
  409ee4:	d1f5      	bne.n	409ed2 <parse_value+0x2a6>
        if (**string != ',')
  409ee6:	2a2c      	cmp	r2, #44	; 0x2c
  409ee8:	d102      	bne.n	409ef0 <parse_value+0x2c4>
        SKIP_CHAR(string);
  409eea:	3301      	adds	r3, #1
  409eec:	6023      	str	r3, [r4, #0]
  409eee:	e003      	b.n	409ef8 <parse_value+0x2cc>
    SKIP_WHITESPACES(string);
  409ef0:	4d62      	ldr	r5, [pc, #392]	; (40a07c <parse_value+0x450>)
  409ef2:	e025      	b.n	409f40 <parse_value+0x314>
        SKIP_WHITESPACES(string);
  409ef4:	3301      	adds	r3, #1
  409ef6:	6023      	str	r3, [r4, #0]
  409ef8:	47a8      	blx	r5
  409efa:	6823      	ldr	r3, [r4, #0]
  409efc:	781a      	ldrb	r2, [r3, #0]
  409efe:	4410      	add	r0, r2
  409f00:	7842      	ldrb	r2, [r0, #1]
  409f02:	f012 0f08 	tst.w	r2, #8
  409f06:	d1f5      	bne.n	409ef4 <parse_value+0x2c8>
    while (**string != '\0') {
  409f08:	6823      	ldr	r3, [r4, #0]
  409f0a:	781b      	ldrb	r3, [r3, #0]
  409f0c:	2b00      	cmp	r3, #0
  409f0e:	d0ef      	beq.n	409ef0 <parse_value+0x2c4>
        new_array_value = parse_value(string, nesting);
  409f10:	4649      	mov	r1, r9
  409f12:	4620      	mov	r0, r4
  409f14:	f7ff fe8a 	bl	409c2c <parse_value>
        if (!new_array_value) {
  409f18:	4682      	mov	sl, r0
  409f1a:	2800      	cmp	r0, #0
  409f1c:	d0d4      	beq.n	409ec8 <parse_value+0x29c>
        if(json_array_add(output_array, new_array_value) == JSONFailure) {
  409f1e:	4601      	mov	r1, r0
  409f20:	4640      	mov	r0, r8
  409f22:	47b0      	blx	r6
  409f24:	f1b0 3fff 	cmp.w	r0, #4294967295
  409f28:	d1d5      	bne.n	409ed6 <parse_value+0x2aa>
            parson_free(new_array_value);
  409f2a:	4b56      	ldr	r3, [pc, #344]	; (40a084 <parse_value+0x458>)
  409f2c:	681b      	ldr	r3, [r3, #0]
  409f2e:	4650      	mov	r0, sl
  409f30:	4798      	blx	r3
            json_value_free(output_value);
  409f32:	4638      	mov	r0, r7
  409f34:	4b52      	ldr	r3, [pc, #328]	; (40a080 <parse_value+0x454>)
  409f36:	4798      	blx	r3
            return NULL;
  409f38:	2700      	movs	r7, #0
  409f3a:	e02b      	b.n	409f94 <parse_value+0x368>
    SKIP_WHITESPACES(string);
  409f3c:	3301      	adds	r3, #1
  409f3e:	6023      	str	r3, [r4, #0]
  409f40:	47a8      	blx	r5
  409f42:	6823      	ldr	r3, [r4, #0]
  409f44:	781a      	ldrb	r2, [r3, #0]
  409f46:	4410      	add	r0, r2
  409f48:	7841      	ldrb	r1, [r0, #1]
  409f4a:	f011 0f08 	tst.w	r1, #8
  409f4e:	d1f5      	bne.n	409f3c <parse_value+0x310>
    if (**string != ']' || /* Trim array after parsing is over */
  409f50:	2a5d      	cmp	r2, #93	; 0x5d
  409f52:	d110      	bne.n	409f76 <parse_value+0x34a>
    return array ? array->count : 0;
  409f54:	f1b8 0f00 	cmp.w	r8, #0
  409f58:	d00b      	beq.n	409f72 <parse_value+0x346>
  409f5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
  409f5e:	4640      	mov	r0, r8
  409f60:	4b49      	ldr	r3, [pc, #292]	; (40a088 <parse_value+0x45c>)
  409f62:	4798      	blx	r3
    if (**string != ']' || /* Trim array after parsing is over */
  409f64:	f1b0 3fff 	cmp.w	r0, #4294967295
  409f68:	d005      	beq.n	409f76 <parse_value+0x34a>
    SKIP_CHAR(string);
  409f6a:	6823      	ldr	r3, [r4, #0]
  409f6c:	3301      	adds	r3, #1
  409f6e:	6023      	str	r3, [r4, #0]
  409f70:	e010      	b.n	409f94 <parse_value+0x368>
    return array ? array->count : 0;
  409f72:	2100      	movs	r1, #0
  409f74:	e7f3      	b.n	409f5e <parse_value+0x332>
            json_value_free(output_value);
  409f76:	4638      	mov	r0, r7
  409f78:	4b41      	ldr	r3, [pc, #260]	; (40a080 <parse_value+0x454>)
  409f7a:	4798      	blx	r3
            return NULL;
  409f7c:	2700      	movs	r7, #0
  409f7e:	e009      	b.n	409f94 <parse_value+0x368>
    char *new_string = get_quoted_string(string);
  409f80:	4620      	mov	r0, r4
  409f82:	4b42      	ldr	r3, [pc, #264]	; (40a08c <parse_value+0x460>)
  409f84:	4798      	blx	r3
    if (new_string == NULL)
  409f86:	4604      	mov	r4, r0
  409f88:	2800      	cmp	r0, #0
  409f8a:	d066      	beq.n	40a05a <parse_value+0x42e>
    value = json_value_init_string_no_copy(new_string);
  409f8c:	4b40      	ldr	r3, [pc, #256]	; (40a090 <parse_value+0x464>)
  409f8e:	4798      	blx	r3
    if (value == NULL) {
  409f90:	4607      	mov	r7, r0
  409f92:	b118      	cbz	r0, 409f9c <parse_value+0x370>
}
  409f94:	4638      	mov	r0, r7
  409f96:	b005      	add	sp, #20
  409f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        parson_free(new_string);
  409f9c:	4b39      	ldr	r3, [pc, #228]	; (40a084 <parse_value+0x458>)
  409f9e:	681b      	ldr	r3, [r3, #0]
  409fa0:	4620      	mov	r0, r4
  409fa2:	4798      	blx	r3
  409fa4:	e7f6      	b.n	409f94 <parse_value+0x368>
    if (strncmp("true", *string, true_token_size) == 0) {
  409fa6:	2204      	movs	r2, #4
  409fa8:	4629      	mov	r1, r5
  409faa:	483a      	ldr	r0, [pc, #232]	; (40a094 <parse_value+0x468>)
  409fac:	4b3a      	ldr	r3, [pc, #232]	; (40a098 <parse_value+0x46c>)
  409fae:	4798      	blx	r3
  409fb0:	b160      	cbz	r0, 409fcc <parse_value+0x3a0>
    } else if (strncmp("false", *string, false_token_size) == 0) {
  409fb2:	2205      	movs	r2, #5
  409fb4:	4629      	mov	r1, r5
  409fb6:	4839      	ldr	r0, [pc, #228]	; (40a09c <parse_value+0x470>)
  409fb8:	4b37      	ldr	r3, [pc, #220]	; (40a098 <parse_value+0x46c>)
  409fba:	4798      	blx	r3
  409fbc:	2800      	cmp	r0, #0
  409fbe:	d14e      	bne.n	40a05e <parse_value+0x432>
        *string += false_token_size;
  409fc0:	3505      	adds	r5, #5
  409fc2:	6025      	str	r5, [r4, #0]
        return json_value_init_boolean(0);
  409fc4:	4b36      	ldr	r3, [pc, #216]	; (40a0a0 <parse_value+0x474>)
  409fc6:	4798      	blx	r3
  409fc8:	4607      	mov	r7, r0
  409fca:	e7e3      	b.n	409f94 <parse_value+0x368>
        *string += true_token_size;
  409fcc:	3504      	adds	r5, #4
  409fce:	6025      	str	r5, [r4, #0]
        return json_value_init_boolean(1);
  409fd0:	2001      	movs	r0, #1
  409fd2:	4b33      	ldr	r3, [pc, #204]	; (40a0a0 <parse_value+0x474>)
  409fd4:	4798      	blx	r3
  409fd6:	4607      	mov	r7, r0
  409fd8:	e7dc      	b.n	409f94 <parse_value+0x368>
    double number = strtod(*string, &end);
  409fda:	a903      	add	r1, sp, #12
  409fdc:	4628      	mov	r0, r5
  409fde:	4b31      	ldr	r3, [pc, #196]	; (40a0a4 <parse_value+0x478>)
  409fe0:	4798      	blx	r3
  409fe2:	4680      	mov	r8, r0
  409fe4:	4689      	mov	r9, r1
    if (is_decimal(*string, end - *string)) {
  409fe6:	6826      	ldr	r6, [r4, #0]
  409fe8:	f8dd a00c 	ldr.w	sl, [sp, #12]
  409fec:	ebaa 0306 	sub.w	r3, sl, r6
    if (length > 1 && string[0] == '0' && string[1] != '.')
  409ff0:	2b01      	cmp	r3, #1
  409ff2:	d902      	bls.n	409ffa <parse_value+0x3ce>
  409ff4:	7832      	ldrb	r2, [r6, #0]
  409ff6:	2a30      	cmp	r2, #48	; 0x30
  409ff8:	d00c      	beq.n	40a014 <parse_value+0x3e8>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.')
  409ffa:	2b02      	cmp	r3, #2
  409ffc:	d90f      	bls.n	40a01e <parse_value+0x3f2>
  409ffe:	2202      	movs	r2, #2
  40a000:	4929      	ldr	r1, [pc, #164]	; (40a0a8 <parse_value+0x47c>)
  40a002:	4630      	mov	r0, r6
  40a004:	4b24      	ldr	r3, [pc, #144]	; (40a098 <parse_value+0x46c>)
  40a006:	4798      	blx	r3
  40a008:	b948      	cbnz	r0, 40a01e <parse_value+0x3f2>
  40a00a:	78b3      	ldrb	r3, [r6, #2]
  40a00c:	2b2e      	cmp	r3, #46	; 0x2e
  40a00e:	d006      	beq.n	40a01e <parse_value+0x3f2>
        output_value = NULL;
  40a010:	2700      	movs	r7, #0
  40a012:	e7bf      	b.n	409f94 <parse_value+0x368>
    if (length > 1 && string[0] == '0' && string[1] != '.')
  40a014:	7872      	ldrb	r2, [r6, #1]
  40a016:	2a2e      	cmp	r2, #46	; 0x2e
  40a018:	d0ef      	beq.n	409ffa <parse_value+0x3ce>
        output_value = NULL;
  40a01a:	2700      	movs	r7, #0
  40a01c:	e7ba      	b.n	409f94 <parse_value+0x368>
  40a01e:	4655      	mov	r5, sl
        if (strchr("xX", string[length]))
  40a020:	f8df b098 	ldr.w	fp, [pc, #152]	; 40a0bc <parse_value+0x490>
  40a024:	4f21      	ldr	r7, [pc, #132]	; (40a0ac <parse_value+0x480>)
    while (length--)
  40a026:	42b5      	cmp	r5, r6
  40a028:	d01d      	beq.n	40a066 <parse_value+0x43a>
        if (strchr("xX", string[length]))
  40a02a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
  40a02e:	4658      	mov	r0, fp
  40a030:	47b8      	blx	r7
  40a032:	2800      	cmp	r0, #0
  40a034:	d0f7      	beq.n	40a026 <parse_value+0x3fa>
        output_value = NULL;
  40a036:	2700      	movs	r7, #0
            return parse_number_value(string);
  40a038:	e7ac      	b.n	409f94 <parse_value+0x368>
    if (strncmp("null", *string, token_size) == 0) {
  40a03a:	2204      	movs	r2, #4
  40a03c:	4629      	mov	r1, r5
  40a03e:	481c      	ldr	r0, [pc, #112]	; (40a0b0 <parse_value+0x484>)
  40a040:	4b15      	ldr	r3, [pc, #84]	; (40a098 <parse_value+0x46c>)
  40a042:	4798      	blx	r3
  40a044:	b968      	cbnz	r0, 40a062 <parse_value+0x436>
        *string += token_size;
  40a046:	3504      	adds	r5, #4
  40a048:	6025      	str	r5, [r4, #0]
        return json_value_init_null();
  40a04a:	4b1a      	ldr	r3, [pc, #104]	; (40a0b4 <parse_value+0x488>)
  40a04c:	4798      	blx	r3
  40a04e:	4607      	mov	r7, r0
  40a050:	e7a0      	b.n	409f94 <parse_value+0x368>
        return NULL;
  40a052:	2700      	movs	r7, #0
  40a054:	e79e      	b.n	409f94 <parse_value+0x368>
            return NULL;
  40a056:	2700      	movs	r7, #0
  40a058:	e79c      	b.n	409f94 <parse_value+0x368>
        return NULL;
  40a05a:	2700      	movs	r7, #0
  40a05c:	e79a      	b.n	409f94 <parse_value+0x368>
    return NULL;
  40a05e:	2700      	movs	r7, #0
  40a060:	e798      	b.n	409f94 <parse_value+0x368>
    return NULL;
  40a062:	2700      	movs	r7, #0
  40a064:	e796      	b.n	409f94 <parse_value+0x368>
        *string = end;
  40a066:	f8c4 a000 	str.w	sl, [r4]
        output_value = json_value_init_number(number);
  40a06a:	4640      	mov	r0, r8
  40a06c:	4649      	mov	r1, r9
  40a06e:	4b12      	ldr	r3, [pc, #72]	; (40a0b8 <parse_value+0x48c>)
  40a070:	4798      	blx	r3
  40a072:	4607      	mov	r7, r0
  40a074:	e78e      	b.n	409f94 <parse_value+0x368>
  40a076:	bf00      	nop
  40a078:	00409535 	.word	0x00409535
  40a07c:	0040d479 	.word	0x0040d479
  40a080:	00409aa1 	.word	0x00409aa1
  40a084:	200001e4 	.word	0x200001e4
  40a088:	004094e9 	.word	0x004094e9
  40a08c:	00409579 	.word	0x00409579
  40a090:	004093d1 	.word	0x004093d1
  40a094:	00416f84 	.word	0x00416f84
  40a098:	0040e89d 	.word	0x0040e89d
  40a09c:	00416f8c 	.word	0x00416f8c
  40a0a0:	00409bed 	.word	0x00409bed
  40a0a4:	0040f8c1 	.word	0x0040f8c1
  40a0a8:	00416fa4 	.word	0x00416fa4
  40a0ac:	0040e609 	.word	0x0040e609
  40a0b0:	00416f9c 	.word	0x00416f9c
  40a0b4:	00409c11 	.word	0x00409c11
  40a0b8:	00409bc9 	.word	0x00409bc9
  40a0bc:	00416fa8 	.word	0x00416fa8

0040a0c0 <json_parse_string>:
JSON_Value * json_parse_string(const char *string) {
  40a0c0:	b510      	push	{r4, lr}
  40a0c2:	b082      	sub	sp, #8
  40a0c4:	9001      	str	r0, [sp, #4]
    if (string == NULL)
  40a0c6:	b1a8      	cbz	r0, 40a0f4 <json_parse_string+0x34>
    SKIP_WHITESPACES(&string);
  40a0c8:	4c0c      	ldr	r4, [pc, #48]	; (40a0fc <json_parse_string+0x3c>)
  40a0ca:	e001      	b.n	40a0d0 <json_parse_string+0x10>
  40a0cc:	3301      	adds	r3, #1
  40a0ce:	9301      	str	r3, [sp, #4]
  40a0d0:	47a0      	blx	r4
  40a0d2:	9b01      	ldr	r3, [sp, #4]
  40a0d4:	781a      	ldrb	r2, [r3, #0]
  40a0d6:	4410      	add	r0, r2
  40a0d8:	7841      	ldrb	r1, [r0, #1]
  40a0da:	f011 0f08 	tst.w	r1, #8
  40a0de:	d1f5      	bne.n	40a0cc <json_parse_string+0xc>
    if (*string != '{' && *string != '[')
  40a0e0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  40a0e4:	2a5b      	cmp	r2, #91	; 0x5b
  40a0e6:	d107      	bne.n	40a0f8 <json_parse_string+0x38>
    return parse_value((const char**)&string, 0);
  40a0e8:	2100      	movs	r1, #0
  40a0ea:	a801      	add	r0, sp, #4
  40a0ec:	4b04      	ldr	r3, [pc, #16]	; (40a100 <json_parse_string+0x40>)
  40a0ee:	4798      	blx	r3
}
  40a0f0:	b002      	add	sp, #8
  40a0f2:	bd10      	pop	{r4, pc}
        return NULL;
  40a0f4:	2000      	movs	r0, #0
  40a0f6:	e7fb      	b.n	40a0f0 <json_parse_string+0x30>
        return NULL;
  40a0f8:	2000      	movs	r0, #0
  40a0fa:	e7f9      	b.n	40a0f0 <json_parse_string+0x30>
  40a0fc:	0040d479 	.word	0x0040d479
  40a100:	00409c2d 	.word	0x00409c2d

0040a104 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40a104:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a106:	b083      	sub	sp, #12
  40a108:	4604      	mov	r4, r0
  40a10a:	460e      	mov	r6, r1
	uint32_t val = 0;
  40a10c:	2300      	movs	r3, #0
  40a10e:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40a110:	4b34      	ldr	r3, [pc, #208]	; (40a1e4 <usart_serial_getchar+0xe0>)
  40a112:	4298      	cmp	r0, r3
  40a114:	d016      	beq.n	40a144 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40a116:	4b34      	ldr	r3, [pc, #208]	; (40a1e8 <usart_serial_getchar+0xe4>)
  40a118:	4298      	cmp	r0, r3
  40a11a:	d01d      	beq.n	40a158 <usart_serial_getchar+0x54>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40a11c:	4b33      	ldr	r3, [pc, #204]	; (40a1ec <usart_serial_getchar+0xe8>)
  40a11e:	4298      	cmp	r0, r3
  40a120:	d024      	beq.n	40a16c <usart_serial_getchar+0x68>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  40a122:	4b33      	ldr	r3, [pc, #204]	; (40a1f0 <usart_serial_getchar+0xec>)
  40a124:	429c      	cmp	r4, r3
  40a126:	d02b      	beq.n	40a180 <usart_serial_getchar+0x7c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  40a128:	4b32      	ldr	r3, [pc, #200]	; (40a1f4 <usart_serial_getchar+0xf0>)
  40a12a:	429c      	cmp	r4, r3
  40a12c:	d032      	beq.n	40a194 <usart_serial_getchar+0x90>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  40a12e:	4b32      	ldr	r3, [pc, #200]	; (40a1f8 <usart_serial_getchar+0xf4>)
  40a130:	429c      	cmp	r4, r3
  40a132:	d039      	beq.n	40a1a8 <usart_serial_getchar+0xa4>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  40a134:	4b31      	ldr	r3, [pc, #196]	; (40a1fc <usart_serial_getchar+0xf8>)
  40a136:	429c      	cmp	r4, r3
  40a138:	d040      	beq.n	40a1bc <usart_serial_getchar+0xb8>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  40a13a:	4b31      	ldr	r3, [pc, #196]	; (40a200 <usart_serial_getchar+0xfc>)
  40a13c:	429c      	cmp	r4, r3
  40a13e:	d047      	beq.n	40a1d0 <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40a140:	b003      	add	sp, #12
  40a142:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (usart_read(p_usart, &val));
  40a144:	461f      	mov	r7, r3
  40a146:	4d2f      	ldr	r5, [pc, #188]	; (40a204 <usart_serial_getchar+0x100>)
  40a148:	a901      	add	r1, sp, #4
  40a14a:	4638      	mov	r0, r7
  40a14c:	47a8      	blx	r5
  40a14e:	2800      	cmp	r0, #0
  40a150:	d1fa      	bne.n	40a148 <usart_serial_getchar+0x44>
		*data = (uint8_t)(val & 0xFF);
  40a152:	9b01      	ldr	r3, [sp, #4]
  40a154:	7033      	strb	r3, [r6, #0]
  40a156:	e7e4      	b.n	40a122 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
  40a158:	461f      	mov	r7, r3
  40a15a:	4d2a      	ldr	r5, [pc, #168]	; (40a204 <usart_serial_getchar+0x100>)
  40a15c:	a901      	add	r1, sp, #4
  40a15e:	4638      	mov	r0, r7
  40a160:	47a8      	blx	r5
  40a162:	2800      	cmp	r0, #0
  40a164:	d1fa      	bne.n	40a15c <usart_serial_getchar+0x58>
		*data = (uint8_t)(val & 0xFF);
  40a166:	9b01      	ldr	r3, [sp, #4]
  40a168:	7033      	strb	r3, [r6, #0]
  40a16a:	e7dd      	b.n	40a128 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40a16c:	461f      	mov	r7, r3
  40a16e:	4d25      	ldr	r5, [pc, #148]	; (40a204 <usart_serial_getchar+0x100>)
  40a170:	a901      	add	r1, sp, #4
  40a172:	4638      	mov	r0, r7
  40a174:	47a8      	blx	r5
  40a176:	2800      	cmp	r0, #0
  40a178:	d1fa      	bne.n	40a170 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40a17a:	9b01      	ldr	r3, [sp, #4]
  40a17c:	7033      	strb	r3, [r6, #0]
  40a17e:	e7d6      	b.n	40a12e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  40a180:	461f      	mov	r7, r3
  40a182:	4d20      	ldr	r5, [pc, #128]	; (40a204 <usart_serial_getchar+0x100>)
  40a184:	a901      	add	r1, sp, #4
  40a186:	4638      	mov	r0, r7
  40a188:	47a8      	blx	r5
  40a18a:	2800      	cmp	r0, #0
  40a18c:	d1fa      	bne.n	40a184 <usart_serial_getchar+0x80>
		*data = (uint8_t)(val & 0xFF);
  40a18e:	9b01      	ldr	r3, [sp, #4]
  40a190:	7033      	strb	r3, [r6, #0]
  40a192:	e7cf      	b.n	40a134 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40a194:	461f      	mov	r7, r3
  40a196:	4d1b      	ldr	r5, [pc, #108]	; (40a204 <usart_serial_getchar+0x100>)
  40a198:	a901      	add	r1, sp, #4
  40a19a:	4638      	mov	r0, r7
  40a19c:	47a8      	blx	r5
  40a19e:	2800      	cmp	r0, #0
  40a1a0:	d1fa      	bne.n	40a198 <usart_serial_getchar+0x94>
		*data = (uint8_t)(val & 0xFF);
  40a1a2:	9b01      	ldr	r3, [sp, #4]
  40a1a4:	7033      	strb	r3, [r6, #0]
  40a1a6:	e7c8      	b.n	40a13a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40a1a8:	461d      	mov	r5, r3
  40a1aa:	4c16      	ldr	r4, [pc, #88]	; (40a204 <usart_serial_getchar+0x100>)
  40a1ac:	a901      	add	r1, sp, #4
  40a1ae:	4628      	mov	r0, r5
  40a1b0:	47a0      	blx	r4
  40a1b2:	2800      	cmp	r0, #0
  40a1b4:	d1fa      	bne.n	40a1ac <usart_serial_getchar+0xa8>
		*data = (uint8_t)(val & 0xFF);
  40a1b6:	9b01      	ldr	r3, [sp, #4]
  40a1b8:	7033      	strb	r3, [r6, #0]
  40a1ba:	e7c1      	b.n	40a140 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
  40a1bc:	461d      	mov	r5, r3
  40a1be:	4c11      	ldr	r4, [pc, #68]	; (40a204 <usart_serial_getchar+0x100>)
  40a1c0:	a901      	add	r1, sp, #4
  40a1c2:	4628      	mov	r0, r5
  40a1c4:	47a0      	blx	r4
  40a1c6:	2800      	cmp	r0, #0
  40a1c8:	d1fa      	bne.n	40a1c0 <usart_serial_getchar+0xbc>
		*data = (uint8_t)(val & 0xFF);
  40a1ca:	9b01      	ldr	r3, [sp, #4]
  40a1cc:	7033      	strb	r3, [r6, #0]
  40a1ce:	e7b7      	b.n	40a140 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
  40a1d0:	461d      	mov	r5, r3
  40a1d2:	4c0c      	ldr	r4, [pc, #48]	; (40a204 <usart_serial_getchar+0x100>)
  40a1d4:	a901      	add	r1, sp, #4
  40a1d6:	4628      	mov	r0, r5
  40a1d8:	47a0      	blx	r4
  40a1da:	2800      	cmp	r0, #0
  40a1dc:	d1fa      	bne.n	40a1d4 <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
  40a1de:	9b01      	ldr	r3, [sp, #4]
  40a1e0:	7033      	strb	r3, [r6, #0]
}
  40a1e2:	e7ad      	b.n	40a140 <usart_serial_getchar+0x3c>
  40a1e4:	4000c200 	.word	0x4000c200
  40a1e8:	40020200 	.word	0x40020200
  40a1ec:	40024200 	.word	0x40024200
  40a1f0:	40018200 	.word	0x40018200
  40a1f4:	4001c200 	.word	0x4001c200
  40a1f8:	40008200 	.word	0x40008200
  40a1fc:	40040200 	.word	0x40040200
  40a200:	40034200 	.word	0x40034200
  40a204:	004067ad 	.word	0x004067ad

0040a208 <usart_serial_putchar>:
{
  40a208:	b570      	push	{r4, r5, r6, lr}
  40a20a:	460c      	mov	r4, r1
	if (USART0 == p_usart) {
  40a20c:	4b30      	ldr	r3, [pc, #192]	; (40a2d0 <usart_serial_putchar+0xc8>)
  40a20e:	4298      	cmp	r0, r3
  40a210:	d016      	beq.n	40a240 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
  40a212:	4b30      	ldr	r3, [pc, #192]	; (40a2d4 <usart_serial_putchar+0xcc>)
  40a214:	4298      	cmp	r0, r3
  40a216:	d01c      	beq.n	40a252 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
  40a218:	4b2f      	ldr	r3, [pc, #188]	; (40a2d8 <usart_serial_putchar+0xd0>)
  40a21a:	4298      	cmp	r0, r3
  40a21c:	d022      	beq.n	40a264 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
  40a21e:	4b2f      	ldr	r3, [pc, #188]	; (40a2dc <usart_serial_putchar+0xd4>)
  40a220:	4298      	cmp	r0, r3
  40a222:	d028      	beq.n	40a276 <usart_serial_putchar+0x6e>
	if (USART4 == p_usart) {
  40a224:	4b2e      	ldr	r3, [pc, #184]	; (40a2e0 <usart_serial_putchar+0xd8>)
  40a226:	4298      	cmp	r0, r3
  40a228:	d02e      	beq.n	40a288 <usart_serial_putchar+0x80>
	if (USART5 == p_usart) {
  40a22a:	4b2e      	ldr	r3, [pc, #184]	; (40a2e4 <usart_serial_putchar+0xdc>)
  40a22c:	4298      	cmp	r0, r3
  40a22e:	d034      	beq.n	40a29a <usart_serial_putchar+0x92>
	if (USART6 == p_usart) {
  40a230:	4b2d      	ldr	r3, [pc, #180]	; (40a2e8 <usart_serial_putchar+0xe0>)
  40a232:	4298      	cmp	r0, r3
  40a234:	d03a      	beq.n	40a2ac <usart_serial_putchar+0xa4>
	if (USART7 == p_usart) {
  40a236:	4b2d      	ldr	r3, [pc, #180]	; (40a2ec <usart_serial_putchar+0xe4>)
  40a238:	4298      	cmp	r0, r3
  40a23a:	d040      	beq.n	40a2be <usart_serial_putchar+0xb6>
	return 0;
  40a23c:	2000      	movs	r0, #0
}
  40a23e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a240:	461e      	mov	r6, r3
  40a242:	4d2b      	ldr	r5, [pc, #172]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a244:	4621      	mov	r1, r4
  40a246:	4630      	mov	r0, r6
  40a248:	47a8      	blx	r5
  40a24a:	2800      	cmp	r0, #0
  40a24c:	d1fa      	bne.n	40a244 <usart_serial_putchar+0x3c>
		return 1;
  40a24e:	2001      	movs	r0, #1
  40a250:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a252:	461e      	mov	r6, r3
  40a254:	4d26      	ldr	r5, [pc, #152]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a256:	4621      	mov	r1, r4
  40a258:	4630      	mov	r0, r6
  40a25a:	47a8      	blx	r5
  40a25c:	2800      	cmp	r0, #0
  40a25e:	d1fa      	bne.n	40a256 <usart_serial_putchar+0x4e>
		return 1;
  40a260:	2001      	movs	r0, #1
  40a262:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a264:	461e      	mov	r6, r3
  40a266:	4d22      	ldr	r5, [pc, #136]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a268:	4621      	mov	r1, r4
  40a26a:	4630      	mov	r0, r6
  40a26c:	47a8      	blx	r5
  40a26e:	2800      	cmp	r0, #0
  40a270:	d1fa      	bne.n	40a268 <usart_serial_putchar+0x60>
		return 1;
  40a272:	2001      	movs	r0, #1
  40a274:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a276:	461e      	mov	r6, r3
  40a278:	4d1d      	ldr	r5, [pc, #116]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a27a:	4621      	mov	r1, r4
  40a27c:	4630      	mov	r0, r6
  40a27e:	47a8      	blx	r5
  40a280:	2800      	cmp	r0, #0
  40a282:	d1fa      	bne.n	40a27a <usart_serial_putchar+0x72>
		return 1;
  40a284:	2001      	movs	r0, #1
  40a286:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a288:	461e      	mov	r6, r3
  40a28a:	4d19      	ldr	r5, [pc, #100]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a28c:	4621      	mov	r1, r4
  40a28e:	4630      	mov	r0, r6
  40a290:	47a8      	blx	r5
  40a292:	2800      	cmp	r0, #0
  40a294:	d1fa      	bne.n	40a28c <usart_serial_putchar+0x84>
		return 1;
  40a296:	2001      	movs	r0, #1
  40a298:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a29a:	461e      	mov	r6, r3
  40a29c:	4d14      	ldr	r5, [pc, #80]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a29e:	4621      	mov	r1, r4
  40a2a0:	4630      	mov	r0, r6
  40a2a2:	47a8      	blx	r5
  40a2a4:	2800      	cmp	r0, #0
  40a2a6:	d1fa      	bne.n	40a29e <usart_serial_putchar+0x96>
		return 1;
  40a2a8:	2001      	movs	r0, #1
  40a2aa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a2ac:	461e      	mov	r6, r3
  40a2ae:	4d10      	ldr	r5, [pc, #64]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a2b0:	4621      	mov	r1, r4
  40a2b2:	4630      	mov	r0, r6
  40a2b4:	47a8      	blx	r5
  40a2b6:	2800      	cmp	r0, #0
  40a2b8:	d1fa      	bne.n	40a2b0 <usart_serial_putchar+0xa8>
		return 1;
  40a2ba:	2001      	movs	r0, #1
  40a2bc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40a2be:	461e      	mov	r6, r3
  40a2c0:	4d0b      	ldr	r5, [pc, #44]	; (40a2f0 <usart_serial_putchar+0xe8>)
  40a2c2:	4621      	mov	r1, r4
  40a2c4:	4630      	mov	r0, r6
  40a2c6:	47a8      	blx	r5
  40a2c8:	2800      	cmp	r0, #0
  40a2ca:	d1fa      	bne.n	40a2c2 <usart_serial_putchar+0xba>
		return 1;
  40a2cc:	2001      	movs	r0, #1
  40a2ce:	bd70      	pop	{r4, r5, r6, pc}
  40a2d0:	4000c200 	.word	0x4000c200
  40a2d4:	40020200 	.word	0x40020200
  40a2d8:	40024200 	.word	0x40024200
  40a2dc:	40018200 	.word	0x40018200
  40a2e0:	4001c200 	.word	0x4001c200
  40a2e4:	40008200 	.word	0x40008200
  40a2e8:	40040200 	.word	0x40040200
  40a2ec:	40034200 	.word	0x40034200
  40a2f0:	00406799 	.word	0x00406799

0040a2f4 <update_timers>:
    rtc_set_hour_mode(RTC, 0);
#endif
}

void update_timers(void)
{
  40a2f4:	b508      	push	{r3, lr}
    wifi_timer_update();
  40a2f6:	4b04      	ldr	r3, [pc, #16]	; (40a308 <update_timers+0x14>)
  40a2f8:	4798      	blx	r3
    client_timer_update();
  40a2fa:	4b04      	ldr	r3, [pc, #16]	; (40a30c <update_timers+0x18>)
  40a2fc:	4798      	blx	r3
    TimerCallback();
  40a2fe:	4b04      	ldr	r3, [pc, #16]	; (40a310 <update_timers+0x1c>)
  40a300:	4798      	blx	r3
    atca_kit_timer_update();
  40a302:	4b04      	ldr	r3, [pc, #16]	; (40a314 <update_timers+0x20>)
  40a304:	4798      	blx	r3
  40a306:	bd08      	pop	{r3, pc}
  40a308:	0040a959 	.word	0x0040a959
  40a30c:	0040b435 	.word	0x0040b435
  40a310:	00409285 	.word	0x00409285
  40a314:	0040b7f9 	.word	0x0040b7f9

0040a318 <TC0_Handler>:
{
    update_timers();
}
#elif SAM
void TC0_Handler(void)
{
  40a318:	b508      	push	{r3, lr}
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
  40a31a:	2100      	movs	r1, #0
  40a31c:	4804      	ldr	r0, [pc, #16]	; (40a330 <TC0_Handler+0x18>)
  40a31e:	4b05      	ldr	r3, [pc, #20]	; (40a334 <TC0_Handler+0x1c>)
  40a320:	4798      	blx	r3
  40a322:	f010 0f10 	tst.w	r0, #16
  40a326:	d100      	bne.n	40a32a <TC0_Handler+0x12>
  40a328:	bd08      	pop	{r3, pc}
    {
        update_timers();
  40a32a:	4b03      	ldr	r3, [pc, #12]	; (40a338 <TC0_Handler+0x20>)
  40a32c:	4798      	blx	r3
	}
}
  40a32e:	e7fb      	b.n	40a328 <TC0_Handler+0x10>
  40a330:	40010000 	.word	0x40010000
  40a334:	00404ccf 	.word	0x00404ccf
  40a338:	0040a2f5 	.word	0x0040a2f5

0040a33c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
  40a33c:	b580      	push	{r7, lr}
  40a33e:	b086      	sub	sp, #24
    /* Initialize the board. */
#if SAM0
	system_init();
#elif SAM
    sysclk_init();
  40a340:	4b46      	ldr	r3, [pc, #280]	; (40a45c <main+0x120>)
  40a342:	4798      	blx	r3
	board_init();
  40a344:	4b46      	ldr	r3, [pc, #280]	; (40a460 <main+0x124>)
  40a346:	4798      	blx	r3
    flexcom_enable(FLEXCOM4);
  40a348:	4c46      	ldr	r4, [pc, #280]	; (40a464 <main+0x128>)
  40a34a:	4620      	mov	r0, r4
  40a34c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 40a50c <main+0x1d0>
  40a350:	47c8      	blx	r9
    flexcom_set_opmode(FLEXCOM4, FLEXCOM_TWI);
  40a352:	2103      	movs	r1, #3
  40a354:	4620      	mov	r0, r4
  40a356:	4f44      	ldr	r7, [pc, #272]	; (40a468 <main+0x12c>)
  40a358:	47b8      	blx	r7
    ext3_twi_options.master_clk = sysclk_get_cpu_hz();
  40a35a:	4944      	ldr	r1, [pc, #272]	; (40a46c <main+0x130>)
  40a35c:	4e44      	ldr	r6, [pc, #272]	; (40a470 <main+0x134>)
  40a35e:	600e      	str	r6, [r1, #0]
    ext3_twi_options.speed = 100000;
  40a360:	4b44      	ldr	r3, [pc, #272]	; (40a474 <main+0x138>)
  40a362:	604b      	str	r3, [r1, #4]
    ext3_twi_options.smbus = 0;
  40a364:	2400      	movs	r4, #0
  40a366:	724c      	strb	r4, [r1, #9]
    twi_master_init(TWI4, &ext3_twi_options);
  40a368:	4843      	ldr	r0, [pc, #268]	; (40a478 <main+0x13c>)
  40a36a:	4b44      	ldr	r3, [pc, #272]	; (40a47c <main+0x140>)
  40a36c:	4798      	blx	r3
  40a36e:	2007      	movs	r0, #7
  40a370:	4b43      	ldr	r3, [pc, #268]	; (40a480 <main+0x144>)
  40a372:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40a374:	4d43      	ldr	r5, [pc, #268]	; (40a484 <main+0x148>)
  40a376:	4b44      	ldr	r3, [pc, #272]	; (40a488 <main+0x14c>)
  40a378:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40a37a:	4a44      	ldr	r2, [pc, #272]	; (40a48c <main+0x150>)
  40a37c:	4b44      	ldr	r3, [pc, #272]	; (40a490 <main+0x154>)
  40a37e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40a380:	4a44      	ldr	r2, [pc, #272]	; (40a494 <main+0x158>)
  40a382:	4b45      	ldr	r3, [pc, #276]	; (40a498 <main+0x15c>)
  40a384:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40a386:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40a38a:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40a38c:	23c0      	movs	r3, #192	; 0xc0
  40a38e:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  40a390:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40a394:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  40a396:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40a398:	9404      	str	r4, [sp, #16]
		flexcom_enable(FLEXCOM7);
  40a39a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 40a510 <main+0x1d4>
  40a39e:	4640      	mov	r0, r8
  40a3a0:	47c8      	blx	r9
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  40a3a2:	2101      	movs	r1, #1
  40a3a4:	4640      	mov	r0, r8
  40a3a6:	47b8      	blx	r7
		usart_init_rs232(p_usart, &usart_settings,
  40a3a8:	4632      	mov	r2, r6
  40a3aa:	4669      	mov	r1, sp
  40a3ac:	4628      	mov	r0, r5
  40a3ae:	4b3b      	ldr	r3, [pc, #236]	; (40a49c <main+0x160>)
  40a3b0:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40a3b2:	4628      	mov	r0, r5
  40a3b4:	4b3a      	ldr	r3, [pc, #232]	; (40a4a0 <main+0x164>)
  40a3b6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40a3b8:	4628      	mov	r0, r5
  40a3ba:	4b3a      	ldr	r3, [pc, #232]	; (40a4a4 <main+0x168>)
  40a3bc:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40a3be:	4e3a      	ldr	r6, [pc, #232]	; (40a4a8 <main+0x16c>)
  40a3c0:	6833      	ldr	r3, [r6, #0]
  40a3c2:	4621      	mov	r1, r4
  40a3c4:	6898      	ldr	r0, [r3, #8]
  40a3c6:	4d39      	ldr	r5, [pc, #228]	; (40a4ac <main+0x170>)
  40a3c8:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40a3ca:	6833      	ldr	r3, [r6, #0]
  40a3cc:	4621      	mov	r1, r4
  40a3ce:	6858      	ldr	r0, [r3, #4]
  40a3d0:	47a8      	blx	r5
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40a3d2:	4620      	mov	r0, r4
  40a3d4:	4b36      	ldr	r3, [pc, #216]	; (40a4b0 <main+0x174>)
  40a3d6:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  40a3d8:	4c36      	ldr	r4, [pc, #216]	; (40a4b4 <main+0x178>)
  40a3da:	47a0      	blx	r4
  40a3dc:	2800      	cmp	r0, #0
  40a3de:	d0fc      	beq.n	40a3da <main+0x9e>
    rtc_set_hour_mode(RTC, 0);
  40a3e0:	2100      	movs	r1, #0
  40a3e2:	4835      	ldr	r0, [pc, #212]	; (40a4b8 <main+0x17c>)
  40a3e4:	4b35      	ldr	r3, [pc, #212]	; (40a4bc <main+0x180>)
  40a3e6:	4798      	blx	r3

    /* Initialize the RTC */
    configure_rtc();

    /* Set the local configuration for the cryptographic device being used */
    config_crypto();
  40a3e8:	4b35      	ldr	r3, [pc, #212]	; (40a4c0 <main+0x184>)
  40a3ea:	4798      	blx	r3
    pmc_enable_periph_clk(ID_TC0);
  40a3ec:	2017      	movs	r0, #23
  40a3ee:	4b24      	ldr	r3, [pc, #144]	; (40a480 <main+0x144>)
  40a3f0:	4798      	blx	r3
    pmc_switch_pck_to_sclk(PMC_PCK_3, GENCLK_PCK_PRES_1);
  40a3f2:	2100      	movs	r1, #0
  40a3f4:	2003      	movs	r0, #3
  40a3f6:	4b33      	ldr	r3, [pc, #204]	; (40a4c4 <main+0x188>)
  40a3f8:	4798      	blx	r3
    pmc_enable_pck(PMC_PCK_3);
  40a3fa:	2003      	movs	r0, #3
  40a3fc:	4b32      	ldr	r3, [pc, #200]	; (40a4c8 <main+0x18c>)
  40a3fe:	4798      	blx	r3
    tc_init(TC0, 0, TC_CMR_TCCLKS_TIMER_CLOCK5 // Waveform Clock Selection
  40a400:	4c32      	ldr	r4, [pc, #200]	; (40a4cc <main+0x190>)
  40a402:	4a33      	ldr	r2, [pc, #204]	; (40a4d0 <main+0x194>)
  40a404:	2100      	movs	r1, #0
  40a406:	4620      	mov	r0, r4
  40a408:	4b32      	ldr	r3, [pc, #200]	; (40a4d4 <main+0x198>)
  40a40a:	4798      	blx	r3
    tc_write_rc(TC0, 0, counts);
  40a40c:	f640 42cc 	movw	r2, #3276	; 0xccc
  40a410:	2100      	movs	r1, #0
  40a412:	4620      	mov	r0, r4
  40a414:	4b30      	ldr	r3, [pc, #192]	; (40a4d8 <main+0x19c>)
  40a416:	4798      	blx	r3
  40a418:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40a41c:	4b2f      	ldr	r3, [pc, #188]	; (40a4dc <main+0x1a0>)
  40a41e:	601a      	str	r2, [r3, #0]
    tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40a420:	2210      	movs	r2, #16
  40a422:	2100      	movs	r1, #0
  40a424:	4620      	mov	r0, r4
  40a426:	4b2e      	ldr	r3, [pc, #184]	; (40a4e0 <main+0x1a4>)
  40a428:	4798      	blx	r3
    tc_start(TC0, 0);
  40a42a:	2100      	movs	r1, #0
  40a42c:	4620      	mov	r0, r4
  40a42e:	4b2d      	ldr	r3, [pc, #180]	; (40a4e4 <main+0x1a8>)
  40a430:	4798      	blx	r3

    /* Initialize a periodic timer */
    configure_periodic_timer();

    /* Initialize the USB HID interface */
    usb_hid_init();
  40a432:	4b2d      	ldr	r3, [pc, #180]	; (40a4e8 <main+0x1ac>)
  40a434:	4798      	blx	r3

    /* Print a diagnostic message to the console */
    DEBUG_PRINTF("Starting Example...\r\n");
  40a436:	482d      	ldr	r0, [pc, #180]	; (40a4ec <main+0x1b0>)
  40a438:	4b2d      	ldr	r3, [pc, #180]	; (40a4f0 <main+0x1b4>)
  40a43a:	4798      	blx	r3

    config_print_public_key();
  40a43c:	4b2d      	ldr	r3, [pc, #180]	; (40a4f4 <main+0x1b8>)
  40a43e:	4798      	blx	r3

    for(;;)
    {
        /* Handle WIFI state machine */
        wifi_task();
  40a440:	4e2d      	ldr	r6, [pc, #180]	; (40a4f8 <main+0x1bc>)

        /* Handle Data Interface */
        atca_kit_main_handler();
  40a442:	4d2e      	ldr	r5, [pc, #184]	; (40a4fc <main+0x1c0>)

        /* Allows the kit protocol interface to have exclusive control
         of the I2C bus when it needs it */
        if(!atca_kit_lock())
  40a444:	4c2e      	ldr	r4, [pc, #184]	; (40a500 <main+0x1c4>)
        wifi_task();
  40a446:	47b0      	blx	r6
        atca_kit_main_handler();
  40a448:	47a8      	blx	r5
        if(!atca_kit_lock())
  40a44a:	47a0      	blx	r4
  40a44c:	2800      	cmp	r0, #0
  40a44e:	d1fa      	bne.n	40a446 <main+0x10a>
        {
            /* Handle Client State Machine */
            client_task();
  40a450:	4b2c      	ldr	r3, [pc, #176]	; (40a504 <main+0x1c8>)
  40a452:	4798      	blx	r3

            /* Handle Sensor State Machine */
            sensor_task();
  40a454:	4b2c      	ldr	r3, [pc, #176]	; (40a508 <main+0x1cc>)
  40a456:	4798      	blx	r3
  40a458:	e7f5      	b.n	40a446 <main+0x10a>
  40a45a:	bf00      	nop
  40a45c:	004034fd 	.word	0x004034fd
  40a460:	00403fb9 	.word	0x00403fb9
  40a464:	4001c000 	.word	0x4001c000
  40a468:	004042f5 	.word	0x004042f5
  40a46c:	20000de8 	.word	0x20000de8
  40a470:	07270000 	.word	0x07270000
  40a474:	000186a0 	.word	0x000186a0
  40a478:	4001c600 	.word	0x4001c600
  40a47c:	00404d91 	.word	0x00404d91
  40a480:	00404771 	.word	0x00404771
  40a484:	40034200 	.word	0x40034200
  40a488:	20003010 	.word	0x20003010
  40a48c:	0040a209 	.word	0x0040a209
  40a490:	2000300c 	.word	0x2000300c
  40a494:	0040a105 	.word	0x0040a105
  40a498:	20003008 	.word	0x20003008
  40a49c:	00406739 	.word	0x00406739
  40a4a0:	0040678d 	.word	0x0040678d
  40a4a4:	00406793 	.word	0x00406793
  40a4a8:	20000298 	.word	0x20000298
  40a4ac:	0040e261 	.word	0x0040e261
  40a4b0:	004046f5 	.word	0x004046f5
  40a4b4:	00404719 	.word	0x00404719
  40a4b8:	400e1460 	.word	0x400e1460
  40a4bc:	004048f9 	.word	0x004048f9
  40a4c0:	0040b4a5 	.word	0x0040b4a5
  40a4c4:	00404819 	.word	0x00404819
  40a4c8:	0040488d 	.word	0x0040488d
  40a4cc:	40010000 	.word	0x40010000
  40a4d0:	0008c004 	.word	0x0008c004
  40a4d4:	00404c9d 	.word	0x00404c9d
  40a4d8:	00404cbf 	.word	0x00404cbf
  40a4dc:	e000e100 	.word	0xe000e100
  40a4e0:	00404cc7 	.word	0x00404cc7
  40a4e4:	00404cb7 	.word	0x00404cb7
  40a4e8:	0040afe1 	.word	0x0040afe1
  40a4ec:	00416fac 	.word	0x00416fac
  40a4f0:	0040d42d 	.word	0x0040d42d
  40a4f4:	0040b745 	.word	0x0040b745
  40a4f8:	0040a981 	.word	0x0040a981
  40a4fc:	0040c249 	.word	0x0040c249
  40a500:	0040b7e9 	.word	0x0040b7e9
  40a504:	0040b449 	.word	0x0040b449
  40a508:	0040af5d 	.word	0x0040af5d
  40a50c:	00404169 	.word	0x00404169
  40a510:	40034000 	.word	0x40034000

0040a514 <time_utils_convert>:
#if SAM0
extern struct rtc_module    rtc_instance;
#endif

uint32_t time_utils_convert(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
  40a514:	b430      	push	{r4, r5}
  40a516:	9c02      	ldr	r4, [sp, #8]
    uint32_t ret = 0;

    //January and February are counted as months 13 and 14 of the previous year
    if(month <= 2)
  40a518:	2902      	cmp	r1, #2
    {
        month += 12;
  40a51a:	bf9c      	itt	ls
  40a51c:	310c      	addls	r1, #12
        year -= 1;
  40a51e:	f100 30ff 	addls.w	r0, r0, #4294967295
    //Convert years to days
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
    //Convert months to days
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
    //Unix time starts on January 1st, 1970
    ret -= 719561;
  40a522:	f5a2 252f 	sub.w	r5, r2, #716800	; 0xaf000
  40a526:	f6a5 25c9 	subw	r5, r5, #2761	; 0xac9
  40a52a:	f240 126d 	movw	r2, #365	; 0x16d
  40a52e:	fb02 5200 	mla	r2, r2, r0, r5
  40a532:	eb02 0290 	add.w	r2, r2, r0, lsr #2
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
  40a536:	4d10      	ldr	r5, [pc, #64]	; (40a578 <time_utils_convert+0x64>)
  40a538:	fba5 5000 	umull	r5, r0, r5, r0
    ret -= 719561;
  40a53c:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
  40a540:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
    ret -= 719561;
  40a544:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  40a548:	eba2 1250 	sub.w	r2, r2, r0, lsr #5
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
  40a54c:	3101      	adds	r1, #1
  40a54e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40a552:	480a      	ldr	r0, [pc, #40]	; (40a57c <time_utils_convert+0x68>)
  40a554:	fba0 0101 	umull	r0, r1, r0, r1
    ret -= 719561;
  40a558:	eb02 0291 	add.w	r2, r2, r1, lsr #2
    //Convert days to seconds
    ret *= 86400;
    //Add hours, minutes and seconds
    ret += (3600 * hour) + (60 * minute) + second;
  40a55c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
  40a560:	9803      	ldr	r0, [sp, #12]
  40a562:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  40a566:	f44f 6061 	mov.w	r0, #3600	; 0xe10
  40a56a:	fb00 4303 	mla	r3, r0, r3, r4
     
    return ret;
}
  40a56e:	4804      	ldr	r0, [pc, #16]	; (40a580 <time_utils_convert+0x6c>)
  40a570:	fb00 3002 	mla	r0, r0, r2, r3
  40a574:	bc30      	pop	{r4, r5}
  40a576:	4770      	bx	lr
  40a578:	51eb851f 	.word	0x51eb851f
  40a57c:	cccccccd 	.word	0xcccccccd
  40a580:	00015180 	.word	0x00015180

0040a584 <time_utils_get_utc>:

uint32_t time_utils_get_utc(void)
{
    if(g_time_set)
  40a584:	4b10      	ldr	r3, [pc, #64]	; (40a5c8 <time_utils_get_utc+0x44>)
  40a586:	781b      	ldrb	r3, [r3, #0]
  40a588:	b90b      	cbnz	r3, 40a58e <time_utils_get_utc+0xa>
        return time_utils_convert(year, month, day, hour, minute, second);
#endif
    }
    else
    {
        return 0;
  40a58a:	2000      	movs	r0, #0
  40a58c:	4770      	bx	lr
{
  40a58e:	b530      	push	{r4, r5, lr}
  40a590:	b089      	sub	sp, #36	; 0x24
        rtc_get_date(RTC, &year, &month, &day, NULL);
  40a592:	4c0e      	ldr	r4, [pc, #56]	; (40a5cc <time_utils_get_utc+0x48>)
  40a594:	2300      	movs	r3, #0
  40a596:	9300      	str	r3, [sp, #0]
  40a598:	ab04      	add	r3, sp, #16
  40a59a:	aa03      	add	r2, sp, #12
  40a59c:	a902      	add	r1, sp, #8
  40a59e:	4620      	mov	r0, r4
  40a5a0:	4d0b      	ldr	r5, [pc, #44]	; (40a5d0 <time_utils_get_utc+0x4c>)
  40a5a2:	47a8      	blx	r5
        rtc_get_time(RTC, &hour, &minute, &second);
  40a5a4:	ab07      	add	r3, sp, #28
  40a5a6:	aa06      	add	r2, sp, #24
  40a5a8:	a905      	add	r1, sp, #20
  40a5aa:	4620      	mov	r0, r4
  40a5ac:	4c09      	ldr	r4, [pc, #36]	; (40a5d4 <time_utils_get_utc+0x50>)
  40a5ae:	47a0      	blx	r4
        return time_utils_convert(year, month, day, hour, minute, second);
  40a5b0:	9b07      	ldr	r3, [sp, #28]
  40a5b2:	9301      	str	r3, [sp, #4]
  40a5b4:	9b06      	ldr	r3, [sp, #24]
  40a5b6:	9300      	str	r3, [sp, #0]
  40a5b8:	9b05      	ldr	r3, [sp, #20]
  40a5ba:	9a04      	ldr	r2, [sp, #16]
  40a5bc:	9903      	ldr	r1, [sp, #12]
  40a5be:	9802      	ldr	r0, [sp, #8]
  40a5c0:	4c05      	ldr	r4, [pc, #20]	; (40a5d8 <time_utils_get_utc+0x54>)
  40a5c2:	47a0      	blx	r4
    }
}
  40a5c4:	b009      	add	sp, #36	; 0x24
  40a5c6:	bd30      	pop	{r4, r5, pc}
  40a5c8:	20000df4 	.word	0x20000df4
  40a5cc:	400e1460 	.word	0x400e1460
  40a5d0:	004049fd 	.word	0x004049fd
  40a5d4:	0040490f 	.word	0x0040490f
  40a5d8:	0040a515 	.word	0x0040a515

0040a5dc <time_utils_set>:

void time_utils_set(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
  40a5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a5de:	b083      	sub	sp, #12
  40a5e0:	461e      	mov	r6, r3
#if SAM0
    uint32_t ts = time_utils_convert(year, month, day, hour, minute, second);
    rtc_count_set_count(&rtc_instance, ts);
#elif SAM
    rtc_set_date(RTC, year, month, day, 1);
  40a5e2:	4d09      	ldr	r5, [pc, #36]	; (40a608 <time_utils_set+0x2c>)
  40a5e4:	2401      	movs	r4, #1
  40a5e6:	9400      	str	r4, [sp, #0]
  40a5e8:	4613      	mov	r3, r2
  40a5ea:	460a      	mov	r2, r1
  40a5ec:	4601      	mov	r1, r0
  40a5ee:	4628      	mov	r0, r5
  40a5f0:	4f06      	ldr	r7, [pc, #24]	; (40a60c <time_utils_set+0x30>)
  40a5f2:	47b8      	blx	r7
    rtc_set_time(RTC, hour, minute, second);
  40a5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a5f6:	9a08      	ldr	r2, [sp, #32]
  40a5f8:	4631      	mov	r1, r6
  40a5fa:	4628      	mov	r0, r5
  40a5fc:	4d04      	ldr	r5, [pc, #16]	; (40a610 <time_utils_set+0x34>)
  40a5fe:	47a8      	blx	r5
#endif

    g_time_set = true;
  40a600:	4b04      	ldr	r3, [pc, #16]	; (40a614 <time_utils_set+0x38>)
  40a602:	701c      	strb	r4, [r3, #0]
}
  40a604:	b003      	add	sp, #12
  40a606:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a608:	400e1460 	.word	0x400e1460
  40a60c:	00404a71 	.word	0x00404a71
  40a610:	00404969 	.word	0x00404969
  40a614:	20000df4 	.word	0x20000df4

0040a618 <wifi_tls_handler_cb>:
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
    }
}

static void wifi_tls_handler_cb(uint8 u8MsgType, void * pvMsg)
{
  40a618:	4770      	bx	lr
	...

0040a61c <wifi_app_cb>:
static void wifi_app_cb(uint8 u8MsgType, void * pvMsg)
{
    uint8_t i;
    for(i=0; i<sizeof(wifi_app_cb_list)/sizeof(wifi_app_cb_list[0]); i++)
    {
        if(u8MsgType == wifi_app_cb_list[i]._id)
  40a61c:	282c      	cmp	r0, #44	; 0x2c
  40a61e:	d008      	beq.n	40a632 <wifi_app_cb+0x16>
  40a620:	2832      	cmp	r0, #50	; 0x32
  40a622:	d004      	beq.n	40a62e <wifi_app_cb+0x12>
  40a624:	281b      	cmp	r0, #27
  40a626:	bf08      	it	eq
  40a628:	2202      	moveq	r2, #2
  40a62a:	d003      	beq.n	40a634 <wifi_app_cb+0x18>
  40a62c:	4770      	bx	lr
  40a62e:	2201      	movs	r2, #1
  40a630:	e000      	b.n	40a634 <wifi_app_cb+0x18>
  40a632:	2200      	movs	r2, #0
{
  40a634:	b508      	push	{r3, lr}
        {
            if(wifi_app_cb_list[i]._func)
  40a636:	4b04      	ldr	r3, [pc, #16]	; (40a648 <wifi_app_cb+0x2c>)
  40a638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a63c:	685b      	ldr	r3, [r3, #4]
  40a63e:	b10b      	cbz	r3, 40a644 <wifi_app_cb+0x28>
  40a640:	4608      	mov	r0, r1
            {
                wifi_app_cb_list[i]._func(pvMsg);
  40a642:	4798      	blx	r3
  40a644:	bd08      	pop	{r3, pc}
  40a646:	bf00      	nop
  40a648:	00417048 	.word	0x00417048

0040a64c <wifi_state_ready>:
    }
}

/* Idle state - Run when no commands are pending  */
static void wifi_state_ready(void * ctx)
{
  40a64c:	4770      	bx	lr

0040a64e <wifi_state_timeout>:
    /* Do Nothing */
}

/* Last command timed out */
static void wifi_state_timeout(void * ctx)
{
  40a64e:	4770      	bx	lr

0040a650 <wifi_socket_handler_cb>:
    switch (u8Msg)
  40a650:	3905      	subs	r1, #5
  40a652:	2904      	cmp	r1, #4
  40a654:	d81e      	bhi.n	40a694 <wifi_socket_handler_cb+0x44>
  40a656:	e8df f001 	tbb	[pc, r1]
  40a65a:	1603      	.short	0x1603
  40a65c:	1d37      	.short	0x1d37
  40a65e:	16          	.byte	0x16
  40a65f:	00          	.byte	0x00
        if (socket_connect_message != NULL)
  40a660:	b1c2      	cbz	r2, 40a694 <wifi_socket_handler_cb+0x44>
            if (socket_connect_message->s8Error != SOCK_ERR_NO_ERROR)
  40a662:	f992 3001 	ldrsb.w	r3, [r2, #1]
  40a666:	b13b      	cbz	r3, 40a678 <wifi_socket_handler_cb+0x28>
  __ASM volatile ("nop");
  40a668:	bf00      	nop
}

/* Update the next state */
static void inline tiny_state_update(void* context, uint32_t next)
{
    ((tiny_state_ctx*)context)->state = next;
  40a66a:	4b24      	ldr	r3, [pc, #144]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a66c:	2206      	movs	r2, #6
  40a66e:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a670:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40a674:	609a      	str	r2, [r3, #8]
  40a676:	4770      	bx	lr
  40a678:	bf00      	nop
  40a67a:	4b20      	ldr	r3, [pc, #128]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a67c:	2204      	movs	r2, #4
  40a67e:	801a      	strh	r2, [r3, #0]
  40a680:	2200      	movs	r2, #0
  40a682:	609a      	str	r2, [r3, #8]
  40a684:	4770      	bx	lr
        if (socket_receive_message != NULL)
  40a686:	b12a      	cbz	r2, 40a694 <wifi_socket_handler_cb+0x44>
            if (socket_receive_message->s16BufferSize >= 0)
  40a688:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  40a68c:	2b00      	cmp	r3, #0
  40a68e:	db09      	blt.n	40a6a4 <wifi_socket_handler_cb+0x54>
                if (socket_receive_message->u16RemainingSize == 0)
  40a690:	88d3      	ldrh	r3, [r2, #6]
  40a692:	b103      	cbz	r3, 40a696 <wifi_socket_handler_cb+0x46>
  40a694:	4770      	bx	lr
  40a696:	bf00      	nop
  40a698:	4b18      	ldr	r3, [pc, #96]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a69a:	2204      	movs	r2, #4
  40a69c:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a69e:	2200      	movs	r2, #0
  40a6a0:	609a      	str	r2, [r3, #8]
  40a6a2:	4770      	bx	lr
                if (socket_receive_message->s16BufferSize == SOCK_ERR_TIMEOUT)
  40a6a4:	f113 0f0d 	cmn.w	r3, #13
  40a6a8:	d007      	beq.n	40a6ba <wifi_socket_handler_cb+0x6a>
  40a6aa:	bf00      	nop
  40a6ac:	4b13      	ldr	r3, [pc, #76]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a6ae:	2206      	movs	r2, #6
  40a6b0:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a6b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40a6b6:	609a      	str	r2, [r3, #8]
  40a6b8:	4770      	bx	lr
  40a6ba:	bf00      	nop
  40a6bc:	4b0f      	ldr	r3, [pc, #60]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a6be:	2205      	movs	r2, #5
  40a6c0:	801a      	strh	r2, [r3, #0]
  40a6c2:	2200      	movs	r2, #0
  40a6c4:	609a      	str	r2, [r3, #8]
  40a6c6:	4770      	bx	lr
        if (*bytes_sent <= 0 || *bytes_sent > (int32_t)g_wifi_context.txlen)
  40a6c8:	f9b2 3000 	ldrsh.w	r3, [r2]
  40a6cc:	2b00      	cmp	r3, #0
  40a6ce:	dd0d      	ble.n	40a6ec <wifi_socket_handler_cb+0x9c>
  40a6d0:	4a0a      	ldr	r2, [pc, #40]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a6d2:	f8d2 25f4 	ldr.w	r2, [r2, #1524]	; 0x5f4
  40a6d6:	4293      	cmp	r3, r2
  40a6d8:	dc08      	bgt.n	40a6ec <wifi_socket_handler_cb+0x9c>
        else if (*bytes_sent == g_wifi_context.txlen)
  40a6da:	429a      	cmp	r2, r3
  40a6dc:	d1da      	bne.n	40a694 <wifi_socket_handler_cb+0x44>
  40a6de:	bf00      	nop
  40a6e0:	4b06      	ldr	r3, [pc, #24]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a6e2:	2204      	movs	r2, #4
  40a6e4:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a6e6:	2200      	movs	r2, #0
  40a6e8:	609a      	str	r2, [r3, #8]
}
  40a6ea:	e7d3      	b.n	40a694 <wifi_socket_handler_cb+0x44>
  40a6ec:	bf00      	nop
  40a6ee:	4b03      	ldr	r3, [pc, #12]	; (40a6fc <wifi_socket_handler_cb+0xac>)
  40a6f0:	2206      	movs	r2, #6
  40a6f2:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a6f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40a6f8:	609a      	str	r2, [r3, #8]
  40a6fa:	4770      	bx	lr
  40a6fc:	20000df8 	.word	0x20000df8

0040a700 <wifi_resolve_handler_cb>:
    if (u32ServerIP != 0)
  40a700:	b939      	cbnz	r1, 40a712 <wifi_resolve_handler_cb+0x12>
  40a702:	bf00      	nop
  40a704:	4b07      	ldr	r3, [pc, #28]	; (40a724 <wifi_resolve_handler_cb+0x24>)
  40a706:	2206      	movs	r2, #6
  40a708:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a70a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40a70e:	609a      	str	r2, [r3, #8]
  40a710:	4770      	bx	lr
        g_wifi_context.host = u32ServerIP;
  40a712:	4b04      	ldr	r3, [pc, #16]	; (40a724 <wifi_resolve_handler_cb+0x24>)
  40a714:	60d9      	str	r1, [r3, #12]
  40a716:	bf00      	nop
  40a718:	2204      	movs	r2, #4
  40a71a:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a71c:	2200      	movs	r2, #0
  40a71e:	609a      	str	r2, [r3, #8]
  40a720:	4770      	bx	lr
  40a722:	bf00      	nop
  40a724:	20000df8 	.word	0x20000df8

0040a728 <wifi_app_cb_process_dhcp>:
  40a728:	bf00      	nop
  40a72a:	bf00      	nop
  40a72c:	4b02      	ldr	r3, [pc, #8]	; (40a738 <wifi_app_cb_process_dhcp+0x10>)
  40a72e:	2204      	movs	r2, #4
  40a730:	801a      	strh	r2, [r3, #0]
  40a732:	2200      	movs	r2, #0
  40a734:	609a      	str	r2, [r3, #8]
  40a736:	4770      	bx	lr
  40a738:	20000df8 	.word	0x20000df8

0040a73c <wifi_state_wait>:
    return (0 == g_wifi_context.holdoff);
  40a73c:	4b05      	ldr	r3, [pc, #20]	; (40a754 <wifi_state_wait+0x18>)
    if(wifi_counter_finished())
  40a73e:	689b      	ldr	r3, [r3, #8]
  40a740:	b103      	cbz	r3, 40a744 <wifi_state_wait+0x8>
  40a742:	4770      	bx	lr
  40a744:	bf00      	nop
  40a746:	2306      	movs	r3, #6
  40a748:	8003      	strh	r3, [r0, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a74a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40a74e:	4b01      	ldr	r3, [pc, #4]	; (40a754 <wifi_state_wait+0x18>)
  40a750:	609a      	str	r2, [r3, #8]
}
  40a752:	e7f6      	b.n	40a742 <wifi_state_wait+0x6>
  40a754:	20000df8 	.word	0x20000df8

0040a758 <wifi_state_error>:
    return (0 == g_wifi_context.holdoff);
  40a758:	4b05      	ldr	r3, [pc, #20]	; (40a770 <wifi_state_error+0x18>)
}

/* Handle the generic error state */
static void wifi_state_error(void * ctx)
{
    if(wifi_counter_finished())
  40a75a:	689b      	ldr	r3, [r3, #8]
  40a75c:	b103      	cbz	r3, 40a760 <wifi_state_error+0x8>
  40a75e:	4770      	bx	lr
  40a760:	bf00      	nop
  40a762:	bf00      	nop
  40a764:	2302      	movs	r3, #2
  40a766:	8003      	strh	r3, [r0, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a768:	2200      	movs	r2, #0
  40a76a:	4b01      	ldr	r3, [pc, #4]	; (40a770 <wifi_state_error+0x18>)
  40a76c:	609a      	str	r2, [r3, #8]
    {
        WIFI_PRINTF("Retrying Connection\r\n");
        wifi_state_update(ctx, WIFI_STATE_CONNECT, WIFI_COUNTER_NO_WAIT);
    }
}
  40a76e:	e7f6      	b.n	40a75e <wifi_state_error+0x6>
  40a770:	20000df8 	.word	0x20000df8

0040a774 <wifi_state_connect>:
{
  40a774:	b530      	push	{r4, r5, lr}
  40a776:	b09b      	sub	sp, #108	; 0x6c
  40a778:	4604      	mov	r4, r0
        status = config_get_ssid(ssid, sizeof(ssid));
  40a77a:	2120      	movs	r1, #32
  40a77c:	a812      	add	r0, sp, #72	; 0x48
  40a77e:	4b1b      	ldr	r3, [pc, #108]	; (40a7ec <wifi_state_connect+0x78>)
  40a780:	4798      	blx	r3
        if(status)
  40a782:	b148      	cbz	r0, 40a798 <wifi_state_connect+0x24>
  40a784:	bf00      	nop
  40a786:	bf00      	nop
  40a788:	2306      	movs	r3, #6
  40a78a:	8023      	strh	r3, [r4, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a78c:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40a790:	4b17      	ldr	r3, [pc, #92]	; (40a7f0 <wifi_state_connect+0x7c>)
  40a792:	609a      	str	r2, [r3, #8]
}
  40a794:	b01b      	add	sp, #108	; 0x6c
  40a796:	bd30      	pop	{r4, r5, pc}
        status = config_get_password(pass, sizeof(pass));
  40a798:	2140      	movs	r1, #64	; 0x40
  40a79a:	a802      	add	r0, sp, #8
  40a79c:	4b15      	ldr	r3, [pc, #84]	; (40a7f4 <wifi_state_connect+0x80>)
  40a79e:	4798      	blx	r3
        if(status)
  40a7a0:	2800      	cmp	r0, #0
  40a7a2:	d1f0      	bne.n	40a786 <wifi_state_connect+0x12>
        if (strlen(pass) > 0)
  40a7a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
  40a7a8:	b19b      	cbz	r3, 40a7d2 <wifi_state_connect+0x5e>
            status = m2m_wifi_connect(ssid, strlen(ssid), M2M_WIFI_SEC_WPA_PSK, pass, M2M_WIFI_CH_ALL);
  40a7aa:	a812      	add	r0, sp, #72	; 0x48
  40a7ac:	4b12      	ldr	r3, [pc, #72]	; (40a7f8 <wifi_state_connect+0x84>)
  40a7ae:	4798      	blx	r3
  40a7b0:	23ff      	movs	r3, #255	; 0xff
  40a7b2:	9300      	str	r3, [sp, #0]
  40a7b4:	ab02      	add	r3, sp, #8
  40a7b6:	2202      	movs	r2, #2
  40a7b8:	b2c1      	uxtb	r1, r0
  40a7ba:	a812      	add	r0, sp, #72	; 0x48
  40a7bc:	4d0f      	ldr	r5, [pc, #60]	; (40a7fc <wifi_state_connect+0x88>)
  40a7be:	47a8      	blx	r5
    if (M2M_SUCCESS == status)
  40a7c0:	2800      	cmp	r0, #0
  40a7c2:	d1e0      	bne.n	40a786 <wifi_state_connect+0x12>
  40a7c4:	bf00      	nop
  40a7c6:	2303      	movs	r3, #3
  40a7c8:	8023      	strh	r3, [r4, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a7ca:	2264      	movs	r2, #100	; 0x64
  40a7cc:	4b08      	ldr	r3, [pc, #32]	; (40a7f0 <wifi_state_connect+0x7c>)
  40a7ce:	609a      	str	r2, [r3, #8]
  40a7d0:	e7e0      	b.n	40a794 <wifi_state_connect+0x20>
            status = m2m_wifi_connect(ssid, strlen(ssid), M2M_WIFI_SEC_OPEN, pass, M2M_WIFI_CH_ALL);
  40a7d2:	a812      	add	r0, sp, #72	; 0x48
  40a7d4:	4b08      	ldr	r3, [pc, #32]	; (40a7f8 <wifi_state_connect+0x84>)
  40a7d6:	4798      	blx	r3
  40a7d8:	23ff      	movs	r3, #255	; 0xff
  40a7da:	9300      	str	r3, [sp, #0]
  40a7dc:	ab02      	add	r3, sp, #8
  40a7de:	2201      	movs	r2, #1
  40a7e0:	b2c1      	uxtb	r1, r0
  40a7e2:	a812      	add	r0, sp, #72	; 0x48
  40a7e4:	4d05      	ldr	r5, [pc, #20]	; (40a7fc <wifi_state_connect+0x88>)
  40a7e6:	47a8      	blx	r5
  40a7e8:	e7ea      	b.n	40a7c0 <wifi_state_connect+0x4c>
  40a7ea:	bf00      	nop
  40a7ec:	0040b4b9 	.word	0x0040b4b9
  40a7f0:	20000df8 	.word	0x20000df8
  40a7f4:	0040b4e1 	.word	0x0040b4e1
  40a7f8:	0040e7c1 	.word	0x0040e7c1
  40a7fc:	004015a9 	.word	0x004015a9

0040a800 <wifi_state_tls_init>:
{
  40a800:	b510      	push	{r4, lr}
  40a802:	4604      	mov	r4, r0
    if(M2M_SUCCESS != m2m_ssl_init(wifi_tls_handler_cb))
  40a804:	4809      	ldr	r0, [pc, #36]	; (40a82c <wifi_state_tls_init+0x2c>)
  40a806:	4b0a      	ldr	r3, [pc, #40]	; (40a830 <wifi_state_tls_init+0x30>)
  40a808:	4798      	blx	r3
  40a80a:	b108      	cbz	r0, 40a810 <wifi_state_tls_init+0x10>
  40a80c:	bf00      	nop
  40a80e:	bd10      	pop	{r4, pc}
    if(M2M_SUCCESS != m2m_ssl_set_active_ciphersuites(SSL_ENABLE_ALL_SUITES))
  40a810:	203f      	movs	r0, #63	; 0x3f
  40a812:	4b08      	ldr	r3, [pc, #32]	; (40a834 <wifi_state_tls_init+0x34>)
  40a814:	4798      	blx	r3
  40a816:	b108      	cbz	r0, 40a81c <wifi_state_tls_init+0x1c>
  40a818:	bf00      	nop
  40a81a:	bd10      	pop	{r4, pc}
  40a81c:	bf00      	nop
  40a81e:	2302      	movs	r3, #2
  40a820:	8023      	strh	r3, [r4, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a822:	2200      	movs	r2, #0
  40a824:	4b04      	ldr	r3, [pc, #16]	; (40a838 <wifi_state_tls_init+0x38>)
  40a826:	609a      	str	r2, [r3, #8]
  40a828:	bd10      	pop	{r4, pc}
  40a82a:	bf00      	nop
  40a82c:	0040a619 	.word	0x0040a619
  40a830:	00400f21 	.word	0x00400f21
  40a834:	00400efd 	.word	0x00400efd
  40a838:	20000df8 	.word	0x20000df8

0040a83c <wifi_app_cb_process_time>:
{
  40a83c:	b530      	push	{r4, r5, lr}
  40a83e:	b083      	sub	sp, #12
  40a840:	bf00      	nop
    if(msg->u16Year && msg->u8Month && msg->u8Day)
  40a842:	8803      	ldrh	r3, [r0, #0]
  40a844:	b11b      	cbz	r3, 40a84e <wifi_app_cb_process_time+0x12>
  40a846:	7883      	ldrb	r3, [r0, #2]
  40a848:	b10b      	cbz	r3, 40a84e <wifi_app_cb_process_time+0x12>
  40a84a:	78c3      	ldrb	r3, [r0, #3]
  40a84c:	b93b      	cbnz	r3, 40a85e <wifi_app_cb_process_time+0x22>
  40a84e:	bf00      	nop
  40a850:	4b0b      	ldr	r3, [pc, #44]	; (40a880 <wifi_app_cb_process_time+0x44>)
  40a852:	2204      	movs	r2, #4
  40a854:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a856:	2200      	movs	r2, #0
  40a858:	609a      	str	r2, [r3, #8]
}
  40a85a:	b003      	add	sp, #12
  40a85c:	bd30      	pop	{r4, r5, pc}
  40a85e:	4604      	mov	r4, r0
        if(!time_utils_get_utc())
  40a860:	4b08      	ldr	r3, [pc, #32]	; (40a884 <wifi_app_cb_process_time+0x48>)
  40a862:	4798      	blx	r3
  40a864:	2800      	cmp	r0, #0
  40a866:	d1f2      	bne.n	40a84e <wifi_app_cb_process_time+0x12>
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
  40a868:	7923      	ldrb	r3, [r4, #4]
  40a86a:	78e2      	ldrb	r2, [r4, #3]
  40a86c:	78a1      	ldrb	r1, [r4, #2]
  40a86e:	8820      	ldrh	r0, [r4, #0]
  40a870:	79a5      	ldrb	r5, [r4, #6]
  40a872:	9501      	str	r5, [sp, #4]
  40a874:	7964      	ldrb	r4, [r4, #5]
  40a876:	9400      	str	r4, [sp, #0]
  40a878:	4c03      	ldr	r4, [pc, #12]	; (40a888 <wifi_app_cb_process_time+0x4c>)
  40a87a:	47a0      	blx	r4
  40a87c:	e7e7      	b.n	40a84e <wifi_app_cb_process_time+0x12>
  40a87e:	bf00      	nop
  40a880:	20000df8 	.word	0x20000df8
  40a884:	0040a585 	.word	0x0040a585
  40a888:	0040a5dd 	.word	0x0040a5dd

0040a88c <wifi_app_cb_process_connection>:
{
  40a88c:	b508      	push	{r3, lr}
    if(M2M_WIFI_CONNECTED == msg->u8CurrState)
  40a88e:	7803      	ldrb	r3, [r0, #0]
  40a890:	2b01      	cmp	r3, #1
  40a892:	d002      	beq.n	40a89a <wifi_app_cb_process_connection+0xe>
    else if(M2M_WIFI_DISCONNECTED == msg->u8CurrState)
  40a894:	b133      	cbz	r3, 40a8a4 <wifi_app_cb_process_connection+0x18>
  40a896:	bf00      	nop
  40a898:	bd08      	pop	{r3, pc}
        m2m_wifi_enable_sntp(1);
  40a89a:	2001      	movs	r0, #1
  40a89c:	4b06      	ldr	r3, [pc, #24]	; (40a8b8 <wifi_app_cb_process_connection+0x2c>)
  40a89e:	4798      	blx	r3
  40a8a0:	bf00      	nop
  40a8a2:	bd08      	pop	{r3, pc}
  40a8a4:	bf00      	nop
  40a8a6:	bf00      	nop
  40a8a8:	4b04      	ldr	r3, [pc, #16]	; (40a8bc <wifi_app_cb_process_connection+0x30>)
  40a8aa:	2206      	movs	r2, #6
  40a8ac:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a8ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40a8b2:	609a      	str	r2, [r3, #8]
  40a8b4:	bd08      	pop	{r3, pc}
  40a8b6:	bf00      	nop
  40a8b8:	00401611 	.word	0x00401611
  40a8bc:	20000df8 	.word	0x20000df8

0040a8c0 <wifi_state_init>:
{
  40a8c0:	b510      	push	{r4, lr}
  40a8c2:	b090      	sub	sp, #64	; 0x40
  40a8c4:	4604      	mov	r4, r0
    if(!config_ready())
  40a8c6:	4b18      	ldr	r3, [pc, #96]	; (40a928 <wifi_state_init+0x68>)
  40a8c8:	4798      	blx	r3
  40a8ca:	b908      	cbnz	r0, 40a8d0 <wifi_state_init+0x10>
}
  40a8cc:	b010      	add	sp, #64	; 0x40
  40a8ce:	bd10      	pop	{r4, pc}
    nm_bsp_init();
  40a8d0:	4b16      	ldr	r3, [pc, #88]	; (40a92c <wifi_state_init+0x6c>)
  40a8d2:	4798      	blx	r3
    m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
  40a8d4:	2218      	movs	r2, #24
  40a8d6:	2100      	movs	r1, #0
  40a8d8:	a80a      	add	r0, sp, #40	; 0x28
  40a8da:	4b15      	ldr	r3, [pc, #84]	; (40a930 <wifi_state_init+0x70>)
  40a8dc:	4798      	blx	r3
    wifi_paramaters.pfAppWifiCb = wifi_app_cb;
  40a8de:	4b15      	ldr	r3, [pc, #84]	; (40a934 <wifi_state_init+0x74>)
  40a8e0:	930a      	str	r3, [sp, #40]	; 0x28
    if(M2M_SUCCESS != m2m_wifi_init(&wifi_paramaters))
  40a8e2:	a80a      	add	r0, sp, #40	; 0x28
  40a8e4:	4b14      	ldr	r3, [pc, #80]	; (40a938 <wifi_state_init+0x78>)
  40a8e6:	4798      	blx	r3
  40a8e8:	b108      	cbz	r0, 40a8ee <wifi_state_init+0x2e>
  40a8ea:	bf00      	nop
  40a8ec:	e7ee      	b.n	40a8cc <wifi_state_init+0xc>
    m2m_periph_pullup_ctrl( M2M_PERIPH_PULLUP_DIS_HOST_WAKEUP |
  40a8ee:	2100      	movs	r1, #0
  40a8f0:	f640 4001 	movw	r0, #3073	; 0xc01
  40a8f4:	4b11      	ldr	r3, [pc, #68]	; (40a93c <wifi_state_init+0x7c>)
  40a8f6:	4798      	blx	r3
    socketInit();
  40a8f8:	4b11      	ldr	r3, [pc, #68]	; (40a940 <wifi_state_init+0x80>)
  40a8fa:	4798      	blx	r3
    registerSocketCallback(wifi_socket_handler_cb, wifi_resolve_handler_cb);
  40a8fc:	4911      	ldr	r1, [pc, #68]	; (40a944 <wifi_state_init+0x84>)
  40a8fe:	4812      	ldr	r0, [pc, #72]	; (40a948 <wifi_state_init+0x88>)
  40a900:	4b12      	ldr	r3, [pc, #72]	; (40a94c <wifi_state_init+0x8c>)
  40a902:	4798      	blx	r3
    status = m2m_wifi_get_firmware_version(&wifi_version);
  40a904:	4668      	mov	r0, sp
  40a906:	4b12      	ldr	r3, [pc, #72]	; (40a950 <wifi_state_init+0x90>)
  40a908:	4798      	blx	r3
    if(M2M_SUCCESS == status)
  40a90a:	b950      	cbnz	r0, 40a922 <wifi_state_init+0x62>
  40a90c:	bf00      	nop
  40a90e:	bf00      	nop
  40a910:	bf00      	nop
  40a912:	bf00      	nop
  40a914:	bf00      	nop
  40a916:	2301      	movs	r3, #1
  40a918:	8023      	strh	r3, [r4, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a91a:	2200      	movs	r2, #0
  40a91c:	4b0d      	ldr	r3, [pc, #52]	; (40a954 <wifi_state_init+0x94>)
  40a91e:	609a      	str	r2, [r3, #8]
  40a920:	e7d4      	b.n	40a8cc <wifi_state_init+0xc>
  40a922:	bf00      	nop
  40a924:	e7d2      	b.n	40a8cc <wifi_state_init+0xc>
  40a926:	bf00      	nop
  40a928:	0040b4b5 	.word	0x0040b4b5
  40a92c:	00400219 	.word	0x00400219
  40a930:	004005dd 	.word	0x004005dd
  40a934:	0040a61d 	.word	0x0040a61d
  40a938:	00401215 	.word	0x00401215
  40a93c:	00400e5d 	.word	0x00400e5d
  40a940:	00402d21 	.word	0x00402d21
  40a944:	0040a701 	.word	0x0040a701
  40a948:	0040a651 	.word	0x0040a651
  40a94c:	00402d65 	.word	0x00402d65
  40a950:	004015c5 	.word	0x004015c5
  40a954:	20000df8 	.word	0x20000df8

0040a958 <wifi_timer_update>:
    if(g_wifi_context.holdoff)
  40a958:	4b03      	ldr	r3, [pc, #12]	; (40a968 <wifi_timer_update+0x10>)
  40a95a:	689b      	ldr	r3, [r3, #8]
  40a95c:	b113      	cbz	r3, 40a964 <wifi_timer_update+0xc>
        g_wifi_context.holdoff--;
  40a95e:	3b01      	subs	r3, #1
  40a960:	4a01      	ldr	r2, [pc, #4]	; (40a968 <wifi_timer_update+0x10>)
  40a962:	6093      	str	r3, [r2, #8]
  40a964:	4770      	bx	lr
  40a966:	bf00      	nop
  40a968:	20000df8 	.word	0x20000df8

0040a96c <wifi_has_error>:
    return (WIFI_STATE_ERROR == g_wifi_context.state.state);
  40a96c:	4b03      	ldr	r3, [pc, #12]	; (40a97c <wifi_has_error+0x10>)
  40a96e:	8818      	ldrh	r0, [r3, #0]
}
  40a970:	2806      	cmp	r0, #6
  40a972:	bf14      	ite	ne
  40a974:	2000      	movne	r0, #0
  40a976:	2001      	moveq	r0, #1
  40a978:	4770      	bx	lr
  40a97a:	bf00      	nop
  40a97c:	20000df8 	.word	0x20000df8

0040a980 <wifi_task>:
    TINY_STATE_DEF(WIFI_STATE_ERROR,            &wifi_state_error)
};

/* WIFI State Controller */
void wifi_task(void)
{
  40a980:	b538      	push	{r3, r4, r5, lr}
    if(!g_wifi_context.state.count)
  40a982:	4b15      	ldr	r3, [pc, #84]	; (40a9d8 <wifi_task+0x58>)
  40a984:	885b      	ldrh	r3, [r3, #2]
  40a986:	b9f3      	cbnz	r3, 40a9c6 <wifi_task+0x46>
    ((tiny_state_ctx*)context)->states = states;
  40a988:	4a13      	ldr	r2, [pc, #76]	; (40a9d8 <wifi_task+0x58>)
  40a98a:	4b14      	ldr	r3, [pc, #80]	; (40a9dc <wifi_task+0x5c>)
  40a98c:	6053      	str	r3, [r2, #4]
    ((tiny_state_ctx*)context)->count = count;
  40a98e:	2407      	movs	r4, #7
  40a990:	8054      	strh	r4, [r2, #2]
    ((tiny_state_ctx*)context)->state = initial;
  40a992:	2500      	movs	r5, #0
  40a994:	8015      	strh	r5, [r2, #0]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
  40a996:	4618      	mov	r0, r3
        if(states[i]._s == state)
  40a998:	681b      	ldr	r3, [r3, #0]
  40a99a:	b163      	cbz	r3, 40a9b6 <wifi_task+0x36>
  40a99c:	f100 020c 	add.w	r2, r0, #12
{
  40a9a0:	2300      	movs	r3, #0
    for(i=0;i<count;i++)
  40a9a2:	3301      	adds	r3, #1
  40a9a4:	b29b      	uxth	r3, r3
  40a9a6:	42a3      	cmp	r3, r4
  40a9a8:	d209      	bcs.n	40a9be <wifi_task+0x3e>
        if(states[i]._s == state)
  40a9aa:	4610      	mov	r0, r2
  40a9ac:	f852 1b0c 	ldr.w	r1, [r2], #12
  40a9b0:	42a9      	cmp	r1, r5
  40a9b2:	d1f6      	bne.n	40a9a2 <wifi_task+0x22>
    if(pState && pState->_f)
  40a9b4:	b118      	cbz	r0, 40a9be <wifi_task+0x3e>
  40a9b6:	6883      	ldr	r3, [r0, #8]
  40a9b8:	b10b      	cbz	r3, 40a9be <wifi_task+0x3e>
        pState->_f(context);
  40a9ba:	4807      	ldr	r0, [pc, #28]	; (40a9d8 <wifi_task+0x58>)
  40a9bc:	4798      	blx	r3

    /* Run the state machine*/
    tiny_state_driver(&g_wifi_context);

    /* Handle WINC1500 pending events */
    m2m_wifi_handle_events(NULL);
  40a9be:	2000      	movs	r0, #0
  40a9c0:	4b07      	ldr	r3, [pc, #28]	; (40a9e0 <wifi_task+0x60>)
  40a9c2:	4798      	blx	r3
}
  40a9c4:	bd38      	pop	{r3, r4, r5, pc}
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
  40a9c6:	4b04      	ldr	r3, [pc, #16]	; (40a9d8 <wifi_task+0x58>)
  40a9c8:	6858      	ldr	r0, [r3, #4]
  40a9ca:	885c      	ldrh	r4, [r3, #2]
        if(states[i]._s == state)
  40a9cc:	881d      	ldrh	r5, [r3, #0]
  40a9ce:	6803      	ldr	r3, [r0, #0]
  40a9d0:	42ab      	cmp	r3, r5
  40a9d2:	d1e3      	bne.n	40a99c <wifi_task+0x1c>
  40a9d4:	e7ee      	b.n	40a9b4 <wifi_task+0x34>
  40a9d6:	bf00      	nop
  40a9d8:	20000df8 	.word	0x20000df8
  40a9dc:	200001ec 	.word	0x200001ec
  40a9e0:	00401349 	.word	0x00401349

0040a9e4 <wifi_request_time>:
    } while (wifi_is_busy());
}

/* Request Time from NTP servers and update clock */
void wifi_request_time(void)
{
  40a9e4:	b508      	push	{r3, lr}
    return (WIFI_STATE_READY == g_wifi_context.state.state);
  40a9e6:	4b07      	ldr	r3, [pc, #28]	; (40aa04 <wifi_request_time+0x20>)
    if(wifi_is_ready())
  40a9e8:	881b      	ldrh	r3, [r3, #0]
  40a9ea:	2b04      	cmp	r3, #4
  40a9ec:	d000      	beq.n	40a9f0 <wifi_request_time+0xc>
  40a9ee:	bd08      	pop	{r3, pc}
    {
        m2m_wifi_get_sytem_time();
  40a9f0:	4b05      	ldr	r3, [pc, #20]	; (40aa08 <wifi_request_time+0x24>)
  40a9f2:	4798      	blx	r3
  40a9f4:	bf00      	nop
    ((tiny_state_ctx*)context)->state = next;
  40a9f6:	4b03      	ldr	r3, [pc, #12]	; (40aa04 <wifi_request_time+0x20>)
  40a9f8:	2203      	movs	r2, #3
  40a9fa:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40a9fc:	2264      	movs	r2, #100	; 0x64
  40a9fe:	609a      	str	r2, [r3, #8]
        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
    }
}
  40aa00:	e7f5      	b.n	40a9ee <wifi_request_time+0xa>
  40aa02:	bf00      	nop
  40aa04:	20000df8 	.word	0x20000df8
  40aa08:	004015f1 	.word	0x004015f1

0040aa0c <wifi_connect>:
    }
}

/* Connect to a host and create a socket - blocking call */
int wifi_connect(char * host, int port)
{
  40aa0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40aa0e:	b089      	sub	sp, #36	; 0x24
    return (WIFI_STATE_READY == g_wifi_context.state.state);
  40aa10:	4b36      	ldr	r3, [pc, #216]	; (40aaec <wifi_connect+0xe0>)
    int status = MQTTCLIENT_FAILURE;
    SOCKET new_socket = SOCK_ERR_INVALID;
    struct sockaddr_in socket_address;
    int optval;

    if(!wifi_is_ready())
  40aa12:	881b      	ldrh	r3, [r3, #0]
  40aa14:	2b04      	cmp	r3, #4
  40aa16:	d15f      	bne.n	40aad8 <wifi_connect+0xcc>
  40aa18:	460e      	mov	r6, r1
    g_wifi_context.host = 0;
  40aa1a:	2200      	movs	r2, #0
  40aa1c:	4b33      	ldr	r3, [pc, #204]	; (40aaec <wifi_connect+0xe0>)
  40aa1e:	60da      	str	r2, [r3, #12]
    if(MQTTCLIENT_SUCCESS == gethostbyname((uint8*)host))
  40aa20:	4b33      	ldr	r3, [pc, #204]	; (40aaf0 <wifi_connect+0xe4>)
  40aa22:	4798      	blx	r3
  40aa24:	2800      	cmp	r0, #0
  40aa26:	d046      	beq.n	40aab6 <wifi_connect+0xaa>
  40aa28:	bf00      	nop
  40aa2a:	4b30      	ldr	r3, [pc, #192]	; (40aaec <wifi_connect+0xe0>)
  40aa2c:	2206      	movs	r2, #6
  40aa2e:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40aa30:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40aa34:	609a      	str	r2, [r3, #8]
        wifi_task();
  40aa36:	4d2f      	ldr	r5, [pc, #188]	; (40aaf4 <wifi_connect+0xe8>)
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
  40aa38:	4c2c      	ldr	r4, [pc, #176]	; (40aaec <wifi_connect+0xe0>)
        wifi_task();
  40aa3a:	47a8      	blx	r5
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
  40aa3c:	8823      	ldrh	r3, [r4, #0]
    } while (wifi_is_busy());
  40aa3e:	2b03      	cmp	r3, #3
  40aa40:	d0fb      	beq.n	40aa3a <wifi_connect+0x2e>

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();

    /* Check for failures */
    if(!wifi_is_ready())
  40aa42:	2b04      	cmp	r3, #4
  40aa44:	d14b      	bne.n	40aade <wifi_connect+0xd2>
    {
        return status;
    }

    // Create the socket
    new_socket = socket(AF_INET, SOCK_STREAM, 1);
  40aa46:	2201      	movs	r2, #1
  40aa48:	4611      	mov	r1, r2
  40aa4a:	2002      	movs	r0, #2
  40aa4c:	4b2a      	ldr	r3, [pc, #168]	; (40aaf8 <wifi_connect+0xec>)
  40aa4e:	4798      	blx	r3
    if (new_socket < 0)
  40aa50:	1e07      	subs	r7, r0, #0
  40aa52:	db47      	blt.n	40aae4 <wifi_connect+0xd8>
        /* Failed to create the socket */
        return status;
    }
        
    /* Set the socket information */
    socket_address.sin_family      = AF_INET;
  40aa54:	2102      	movs	r1, #2
  40aa56:	f8ad 1010 	strh.w	r1, [sp, #16]
    socket_address.sin_addr.s_addr = g_wifi_context.host;
  40aa5a:	4b24      	ldr	r3, [pc, #144]	; (40aaec <wifi_connect+0xe0>)
  40aa5c:	68db      	ldr	r3, [r3, #12]
  40aa5e:	9305      	str	r3, [sp, #20]
    socket_address.sin_port        = _htons(port);
  40aa60:	f3c6 2307 	ubfx	r3, r6, #8, #8
  40aa64:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  40aa68:	f8ad 6012 	strh.w	r6, [sp, #18]

    optval = 1;
  40aa6c:	ab08      	add	r3, sp, #32
  40aa6e:	2201      	movs	r2, #1
  40aa70:	f843 2d14 	str.w	r2, [r3, #-20]!
    setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_ENABLE_SESSION_CACHING,
  40aa74:	2204      	movs	r2, #4
  40aa76:	9200      	str	r2, [sp, #0]
  40aa78:	2203      	movs	r2, #3
  40aa7a:	4638      	mov	r0, r7
  40aa7c:	4c1f      	ldr	r4, [pc, #124]	; (40aafc <wifi_connect+0xf0>)
  40aa7e:	47a0      	blx	r4
    setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_BYPASS_X509_VERIF,
        &optval, sizeof(optval));
#endif

    /* Connect to the specified host */
    status = connect(new_socket, (struct sockaddr*)&socket_address,
  40aa80:	2210      	movs	r2, #16
  40aa82:	eb0d 0102 	add.w	r1, sp, r2
  40aa86:	4638      	mov	r0, r7
  40aa88:	4b1d      	ldr	r3, [pc, #116]	; (40ab00 <wifi_connect+0xf4>)
  40aa8a:	4798      	blx	r3
  40aa8c:	4606      	mov	r6, r0
        sizeof(socket_address));
    if (status != SOCK_ERR_NO_ERROR)
  40aa8e:	b9c8      	cbnz	r0, 40aac4 <wifi_connect+0xb8>
  40aa90:	bf00      	nop
  40aa92:	4b16      	ldr	r3, [pc, #88]	; (40aaec <wifi_connect+0xe0>)
  40aa94:	2203      	movs	r2, #3
  40aa96:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40aa98:	2264      	movs	r2, #100	; 0x64
  40aa9a:	609a      	str	r2, [r3, #8]
        wifi_task();
  40aa9c:	4d15      	ldr	r5, [pc, #84]	; (40aaf4 <wifi_connect+0xe8>)
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
  40aa9e:	461c      	mov	r4, r3
        wifi_task();
  40aaa0:	47a8      	blx	r5
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
  40aaa2:	8823      	ldrh	r3, [r4, #0]
    } while (wifi_is_busy());
  40aaa4:	2b03      	cmp	r3, #3
  40aaa6:	d0fb      	beq.n	40aaa0 <wifi_connect+0x94>

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();

    /* Check for failures */
    if(!wifi_is_ready())
  40aaa8:	2b04      	cmp	r3, #4
  40aaaa:	d10f      	bne.n	40aacc <wifi_connect+0xc0>
        close(new_socket);
        return MQTTCLIENT_FAILURE;
    }

    /* Save the socket for use */
    g_wifi_context.sock = new_socket;
  40aaac:	4b0f      	ldr	r3, [pc, #60]	; (40aaec <wifi_connect+0xe0>)
  40aaae:	741f      	strb	r7, [r3, #16]

    return MQTTCLIENT_SUCCESS;
}
  40aab0:	4630      	mov	r0, r6
  40aab2:	b009      	add	sp, #36	; 0x24
  40aab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40aab6:	bf00      	nop
  40aab8:	4b0c      	ldr	r3, [pc, #48]	; (40aaec <wifi_connect+0xe0>)
  40aaba:	2203      	movs	r2, #3
  40aabc:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40aabe:	2264      	movs	r2, #100	; 0x64
  40aac0:	609a      	str	r2, [r3, #8]
  40aac2:	e7b8      	b.n	40aa36 <wifi_connect+0x2a>
        close(new_socket);
  40aac4:	4638      	mov	r0, r7
  40aac6:	4b0f      	ldr	r3, [pc, #60]	; (40ab04 <wifi_connect+0xf8>)
  40aac8:	4798      	blx	r3
        return status;
  40aaca:	e7f1      	b.n	40aab0 <wifi_connect+0xa4>
        close(new_socket);
  40aacc:	4638      	mov	r0, r7
  40aace:	4b0d      	ldr	r3, [pc, #52]	; (40ab04 <wifi_connect+0xf8>)
  40aad0:	4798      	blx	r3
        return MQTTCLIENT_FAILURE;
  40aad2:	f04f 36ff 	mov.w	r6, #4294967295
  40aad6:	e7eb      	b.n	40aab0 <wifi_connect+0xa4>
        return status;
  40aad8:	f04f 36ff 	mov.w	r6, #4294967295
  40aadc:	e7e8      	b.n	40aab0 <wifi_connect+0xa4>
        return status;
  40aade:	f04f 36ff 	mov.w	r6, #4294967295
  40aae2:	e7e5      	b.n	40aab0 <wifi_connect+0xa4>
        return status;
  40aae4:	f04f 36ff 	mov.w	r6, #4294967295
  40aae8:	e7e2      	b.n	40aab0 <wifi_connect+0xa4>
  40aaea:	bf00      	nop
  40aaec:	20000df8 	.word	0x20000df8
  40aaf0:	004031a5 	.word	0x004031a5
  40aaf4:	0040a981 	.word	0x0040a981
  40aaf8:	00402d79 	.word	0x00402d79
  40aafc:	004031dd 	.word	0x004031dd
  40ab00:	00402f25 	.word	0x00402f25
  40ab04:	00403101 	.word	0x00403101

0040ab08 <wifi_read_data>:

/* Read data from a socket - blocking call */
int wifi_read_data(uint8_t *read_buffer, uint32_t read_length, uint32_t timeout_ms)
{
  40ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (WIFI_STATE_READY == g_wifi_context.state.state);
  40ab0c:	4e33      	ldr	r6, [pc, #204]	; (40abdc <wifi_read_data+0xd4>)
    int status = MQTTCLIENT_FAILURE;
    
    if(!wifi_is_ready())
  40ab0e:	8836      	ldrh	r6, [r6, #0]
  40ab10:	2e04      	cmp	r6, #4
  40ab12:	d15e      	bne.n	40abd2 <wifi_read_data+0xca>
  40ab14:	4616      	mov	r6, r2
  40ab16:	460c      	mov	r4, r1
  40ab18:	4605      	mov	r5, r0
    {
        return status;
    }

    if ((WIFI_BUFFER_SIZE - g_wifi_context.rxloc) >= read_length)
  40ab1a:	4b30      	ldr	r3, [pc, #192]	; (40abdc <wifi_read_data+0xd4>)
  40ab1c:	f8d3 15f0 	ldr.w	r1, [r3, #1520]	; 0x5f0
  40ab20:	f5c1 63bb 	rsb	r3, r1, #1496	; 0x5d8
  40ab24:	3304      	adds	r3, #4
  40ab26:	42a3      	cmp	r3, r4
  40ab28:	d30d      	bcc.n	40ab46 <wifi_read_data+0x3e>
    {
        status = MQTTCLIENT_SUCCESS;

        /* Get the data from the existing received buffer */
        memcpy(&read_buffer[0], &g_wifi_context.rxbuf[g_wifi_context.rxloc], read_length);
  40ab2a:	4e2c      	ldr	r6, [pc, #176]	; (40abdc <wifi_read_data+0xd4>)
  40ab2c:	3111      	adds	r1, #17
  40ab2e:	4622      	mov	r2, r4
  40ab30:	4431      	add	r1, r6
  40ab32:	4b2b      	ldr	r3, [pc, #172]	; (40abe0 <wifi_read_data+0xd8>)
  40ab34:	4798      	blx	r3

        g_wifi_context.rxloc += read_length;
  40ab36:	f8d6 35f0 	ldr.w	r3, [r6, #1520]	; 0x5f0
  40ab3a:	4423      	add	r3, r4
  40ab3c:	f8c6 35f0 	str.w	r3, [r6, #1520]	; 0x5f0
            memcpy(&read_buffer[0], &g_wifi_context.rxbuf[0], read_length);
            g_wifi_context.rxloc += read_length;
        }
    }
    
    return ((status == MQTTCLIENT_SUCCESS) ? (int)read_length : status);
  40ab40:	4620      	mov	r0, r4
  40ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        g_wifi_context.rxloc = 0;
  40ab46:	4f25      	ldr	r7, [pc, #148]	; (40abdc <wifi_read_data+0xd4>)
  40ab48:	2100      	movs	r1, #0
  40ab4a:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
        memset(&g_wifi_context.rxbuf[0], 0, WIFI_BUFFER_SIZE);
  40ab4e:	f107 0811 	add.w	r8, r7, #17
  40ab52:	f240 59dc 	movw	r9, #1500	; 0x5dc
  40ab56:	464a      	mov	r2, r9
  40ab58:	4640      	mov	r0, r8
  40ab5a:	4b22      	ldr	r3, [pc, #136]	; (40abe4 <wifi_read_data+0xdc>)
  40ab5c:	4798      	blx	r3
        if(MQTTCLIENT_SUCCESS != (status = recv(g_wifi_context.sock, g_wifi_context.rxbuf, WIFI_BUFFER_SIZE, timeout_ms)))
  40ab5e:	4633      	mov	r3, r6
  40ab60:	464a      	mov	r2, r9
  40ab62:	4641      	mov	r1, r8
  40ab64:	f997 0010 	ldrsb.w	r0, [r7, #16]
  40ab68:	4f1f      	ldr	r7, [pc, #124]	; (40abe8 <wifi_read_data+0xe0>)
  40ab6a:	47b8      	blx	r7
  40ab6c:	b108      	cbz	r0, 40ab72 <wifi_read_data+0x6a>
}
  40ab6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, timeout_ms + WIFI_UPDATE_PERIOD);
  40ab72:	3664      	adds	r6, #100	; 0x64
  40ab74:	bf00      	nop
  40ab76:	f1a8 0111 	sub.w	r1, r8, #17
  40ab7a:	2303      	movs	r3, #3
  40ab7c:	800b      	strh	r3, [r1, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40ab7e:	4b1b      	ldr	r3, [pc, #108]	; (40abec <wifi_read_data+0xe4>)
  40ab80:	fba3 2306 	umull	r2, r3, r3, r6
  40ab84:	095b      	lsrs	r3, r3, #5
  40ab86:	608b      	str	r3, [r1, #8]
    if(val && !g_wifi_context.holdoff)
  40ab88:	b116      	cbz	r6, 40ab90 <wifi_read_data+0x88>
  40ab8a:	b90b      	cbnz	r3, 40ab90 <wifi_read_data+0x88>
        g_wifi_context.holdoff = 1;
  40ab8c:	2201      	movs	r2, #1
  40ab8e:	608a      	str	r2, [r1, #8]
        wifi_task();
  40ab90:	4f17      	ldr	r7, [pc, #92]	; (40abf0 <wifi_read_data+0xe8>)
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
  40ab92:	4e12      	ldr	r6, [pc, #72]	; (40abdc <wifi_read_data+0xd4>)
        wifi_task();
  40ab94:	47b8      	blx	r7
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
  40ab96:	8833      	ldrh	r3, [r6, #0]
    } while (wifi_is_busy());
  40ab98:	2b03      	cmp	r3, #3
  40ab9a:	d0fb      	beq.n	40ab94 <wifi_read_data+0x8c>
        if(!wifi_is_ready())
  40ab9c:	2b04      	cmp	r3, #4
  40ab9e:	d00b      	beq.n	40abb8 <wifi_read_data+0xb0>
            if(!wifi_has_error())
  40aba0:	2b06      	cmp	r3, #6
  40aba2:	d102      	bne.n	40abaa <wifi_read_data+0xa2>
        return status;
  40aba4:	f04f 30ff 	mov.w	r0, #4294967295
  40aba8:	e7e1      	b.n	40ab6e <wifi_read_data+0x66>
  40abaa:	bf00      	nop
  40abac:	4b0b      	ldr	r3, [pc, #44]	; (40abdc <wifi_read_data+0xd4>)
  40abae:	2204      	movs	r2, #4
  40abb0:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40abb2:	2200      	movs	r2, #0
  40abb4:	609a      	str	r2, [r3, #8]
  40abb6:	e7f5      	b.n	40aba4 <wifi_read_data+0x9c>
            memcpy(&read_buffer[0], &g_wifi_context.rxbuf[0], read_length);
  40abb8:	4e08      	ldr	r6, [pc, #32]	; (40abdc <wifi_read_data+0xd4>)
  40abba:	4622      	mov	r2, r4
  40abbc:	f106 0111 	add.w	r1, r6, #17
  40abc0:	4628      	mov	r0, r5
  40abc2:	4b07      	ldr	r3, [pc, #28]	; (40abe0 <wifi_read_data+0xd8>)
  40abc4:	4798      	blx	r3
            g_wifi_context.rxloc += read_length;
  40abc6:	f8d6 35f0 	ldr.w	r3, [r6, #1520]	; 0x5f0
  40abca:	4423      	add	r3, r4
  40abcc:	f8c6 35f0 	str.w	r3, [r6, #1520]	; 0x5f0
  40abd0:	e7b6      	b.n	40ab40 <wifi_read_data+0x38>
        return status;
  40abd2:	f04f 30ff 	mov.w	r0, #4294967295
  40abd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40abda:	bf00      	nop
  40abdc:	20000df8 	.word	0x20000df8
  40abe0:	0040dc41 	.word	0x0040dc41
  40abe4:	0040de3d 	.word	0x0040de3d
  40abe8:	00403061 	.word	0x00403061
  40abec:	51eb851f 	.word	0x51eb851f
  40abf0:	0040a981 	.word	0x0040a981

0040abf4 <wifi_send_data>:

/* Send data to a socket - blocking call */
int wifi_send_data(uint8_t *send_buffer, uint32_t send_length, uint32_t timeout_ms)
{
  40abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return (WIFI_STATE_READY == g_wifi_context.state.state);
  40abf6:	4b18      	ldr	r3, [pc, #96]	; (40ac58 <wifi_send_data+0x64>)
    int status = MQTTCLIENT_FAILURE;
    
    if(!wifi_is_ready())
  40abf8:	881b      	ldrh	r3, [r3, #0]
  40abfa:	2b04      	cmp	r3, #4
  40abfc:	d128      	bne.n	40ac50 <wifi_send_data+0x5c>
  40abfe:	460e      	mov	r6, r1
  40ac00:	4601      	mov	r1, r0
    {
        return status;
    }

    status = send(g_wifi_context.sock, send_buffer, send_length, 0);
  40ac02:	4c15      	ldr	r4, [pc, #84]	; (40ac58 <wifi_send_data+0x64>)
  40ac04:	2300      	movs	r3, #0
  40ac06:	b2b2      	uxth	r2, r6
  40ac08:	f994 0010 	ldrsb.w	r0, [r4, #16]
  40ac0c:	4d13      	ldr	r5, [pc, #76]	; (40ac5c <wifi_send_data+0x68>)
  40ac0e:	47a8      	blx	r5
  40ac10:	4607      	mov	r7, r0
    g_wifi_context.txlen = send_length;
  40ac12:	f8c4 65f4 	str.w	r6, [r4, #1524]	; 0x5f4
  40ac16:	bf00      	nop
  40ac18:	2303      	movs	r3, #3
  40ac1a:	8023      	strh	r3, [r4, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40ac1c:	2364      	movs	r3, #100	; 0x64
  40ac1e:	60a3      	str	r3, [r4, #8]
        wifi_task();
  40ac20:	4d0f      	ldr	r5, [pc, #60]	; (40ac60 <wifi_send_data+0x6c>)
  40ac22:	47a8      	blx	r5
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
  40ac24:	8823      	ldrh	r3, [r4, #0]
    } while (wifi_is_busy());
  40ac26:	2b03      	cmp	r3, #3
  40ac28:	d0fb      	beq.n	40ac22 <wifi_send_data+0x2e>

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();

    /* Check for failures */
    if(!wifi_is_ready())
  40ac2a:	2b04      	cmp	r3, #4
  40ac2c:	d00b      	beq.n	40ac46 <wifi_send_data+0x52>
    {
        status = MQTTCLIENT_FAILURE;
        if(!wifi_has_error())
  40ac2e:	2b06      	cmp	r3, #6
  40ac30:	d102      	bne.n	40ac38 <wifi_send_data+0x44>
        return status;
  40ac32:	f04f 30ff 	mov.w	r0, #4294967295
            wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
        }
    }
    
    return ((status == MQTTCLIENT_SUCCESS) ? (int)send_length : status);
}
  40ac36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ac38:	bf00      	nop
  40ac3a:	4b07      	ldr	r3, [pc, #28]	; (40ac58 <wifi_send_data+0x64>)
  40ac3c:	2204      	movs	r2, #4
  40ac3e:	801a      	strh	r2, [r3, #0]
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
  40ac40:	2200      	movs	r2, #0
  40ac42:	609a      	str	r2, [r3, #8]
  40ac44:	e7f5      	b.n	40ac32 <wifi_send_data+0x3e>
    return ((status == MQTTCLIENT_SUCCESS) ? (int)send_length : status);
  40ac46:	2f00      	cmp	r7, #0
  40ac48:	bf14      	ite	ne
  40ac4a:	4638      	movne	r0, r7
  40ac4c:	4630      	moveq	r0, r6
  40ac4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return status;
  40ac50:	f04f 30ff 	mov.w	r0, #4294967295
  40ac54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ac56:	bf00      	nop
  40ac58:	20000df8 	.word	0x20000df8
  40ac5c:	00402fc1 	.word	0x00402fc1
  40ac60:	0040a981 	.word	0x0040a981

0040ac64 <fan_write_reg>:

    return rxdata;
}

static void fan_write_reg(uint8_t reg, uint8_t txdata)
{
  40ac64:	b500      	push	{lr}
  40ac66:	b089      	sub	sp, #36	; 0x24
  40ac68:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet = {
  40ac6c:	2300      	movs	r3, #0
  40ac6e:	9303      	str	r3, [sp, #12]
  40ac70:	9307      	str	r3, [sp, #28]
  40ac72:	f88d 000c 	strb.w	r0, [sp, #12]
  40ac76:	2301      	movs	r3, #1
  40ac78:	9304      	str	r3, [sp, #16]
  40ac7a:	f10d 0207 	add.w	r2, sp, #7
  40ac7e:	9205      	str	r2, [sp, #20]
  40ac80:	9306      	str	r3, [sp, #24]
  40ac82:	232f      	movs	r3, #47	; 0x2f
  40ac84:	f88d 301c 	strb.w	r3, [sp, #28]
        .addr_length = 1,
        .buffer      = &txdata,
        .length      = sizeof(txdata)
    };

    twi_master_write(TWI4, &packet);
  40ac88:	a903      	add	r1, sp, #12
  40ac8a:	4803      	ldr	r0, [pc, #12]	; (40ac98 <fan_write_reg+0x34>)
  40ac8c:	4b03      	ldr	r3, [pc, #12]	; (40ac9c <fan_write_reg+0x38>)
  40ac8e:	4798      	blx	r3
}
  40ac90:	b009      	add	sp, #36	; 0x24
  40ac92:	f85d fb04 	ldr.w	pc, [sp], #4
  40ac96:	bf00      	nop
  40ac98:	4001c600 	.word	0x4001c600
  40ac9c:	00404eb5 	.word	0x00404eb5

0040aca0 <fan_read_reg>:
{
  40aca0:	b500      	push	{lr}
  40aca2:	b087      	sub	sp, #28
    twi_packet_t packet = {
  40aca4:	2300      	movs	r3, #0
  40aca6:	9300      	str	r3, [sp, #0]
  40aca8:	9304      	str	r3, [sp, #16]
  40acaa:	f88d 0000 	strb.w	r0, [sp]
  40acae:	2301      	movs	r3, #1
  40acb0:	9301      	str	r3, [sp, #4]
  40acb2:	f10d 0217 	add.w	r2, sp, #23
  40acb6:	9202      	str	r2, [sp, #8]
  40acb8:	9303      	str	r3, [sp, #12]
  40acba:	232f      	movs	r3, #47	; 0x2f
  40acbc:	f88d 3010 	strb.w	r3, [sp, #16]
    twi_master_read(TWI4, &packet);
  40acc0:	4669      	mov	r1, sp
  40acc2:	4804      	ldr	r0, [pc, #16]	; (40acd4 <fan_read_reg+0x34>)
  40acc4:	4b04      	ldr	r3, [pc, #16]	; (40acd8 <fan_read_reg+0x38>)
  40acc6:	4798      	blx	r3
}
  40acc8:	f89d 0017 	ldrb.w	r0, [sp, #23]
  40accc:	b007      	add	sp, #28
  40acce:	f85d fb04 	ldr.w	pc, [sp], #4
  40acd2:	bf00      	nop
  40acd4:	4001c600 	.word	0x4001c600
  40acd8:	00404df5 	.word	0x00404df5

0040acdc <fan_click_init>:
#endif


int fan_click_init( void )
{
  40acdc:	b538      	push	{r3, r4, r5, lr}
    uint8_t pid = fan_read_reg(EMC2301_PRODUCT_ID);
  40acde:	20fd      	movs	r0, #253	; 0xfd
  40ace0:	4c14      	ldr	r4, [pc, #80]	; (40ad34 <fan_click_init+0x58>)
  40ace2:	47a0      	blx	r4
  40ace4:	4605      	mov	r5, r0
    uint8_t mid = fan_read_reg(EMC2301_MANUFACTUERE_ID);
  40ace6:	20fe      	movs	r0, #254	; 0xfe
  40ace8:	47a0      	blx	r4

    if(0x37 != pid || 0x5D != mid)
  40acea:	2d37      	cmp	r5, #55	; 0x37
  40acec:	d11b      	bne.n	40ad26 <fan_click_init+0x4a>
  40acee:	285d      	cmp	r0, #93	; 0x5d
  40acf0:	d11c      	bne.n	40ad2c <fan_click_init+0x50>
            ranges (500, 1k, 2k, 4k).
        6. Set the TACH Target Register to the desired tachometer count.
        7. Enable the RPM-based Fan Speed Control Algorithm by setting the EN_ALGO bit. */

    //fan_write_reg(EMC2301_FAN_SETTING, 0xFF);
    fan_write_reg(EMC2301_FAN_CONFIG1, 0xAE);
  40acf2:	21ae      	movs	r1, #174	; 0xae
  40acf4:	2032      	movs	r0, #50	; 0x32
  40acf6:	4c10      	ldr	r4, [pc, #64]	; (40ad38 <fan_click_init+0x5c>)
  40acf8:	47a0      	blx	r4

    fan_write_reg(EMC2301_FAN_MIN_DRIVE, 0x35);
  40acfa:	2135      	movs	r1, #53	; 0x35
  40acfc:	2038      	movs	r0, #56	; 0x38
  40acfe:	47a0      	blx	r4

    fan_write_reg(EMC2301_FAN_VALID_TACH, 0xF6);
  40ad00:	21f6      	movs	r1, #246	; 0xf6
  40ad02:	2039      	movs	r0, #57	; 0x39
  40ad04:	47a0      	blx	r4

    fan_write_reg(EMC2301_FAN_SPINUP, 0xE8);
  40ad06:	21e8      	movs	r1, #232	; 0xe8
  40ad08:	2036      	movs	r0, #54	; 0x36
  40ad0a:	47a0      	blx	r4

    fan_write_reg(EMC2301_PWM_POLARITY, 0x00);
  40ad0c:	2100      	movs	r1, #0
  40ad0e:	202a      	movs	r0, #42	; 0x2a
  40ad10:	47a0      	blx	r4

    g_fan_click_cfg1_cached = fan_read_reg(EMC2301_FAN_CONFIG1);
  40ad12:	2032      	movs	r0, #50	; 0x32
  40ad14:	4b07      	ldr	r3, [pc, #28]	; (40ad34 <fan_click_init+0x58>)
  40ad16:	4798      	blx	r3
  40ad18:	4b08      	ldr	r3, [pc, #32]	; (40ad3c <fan_click_init+0x60>)
  40ad1a:	7018      	strb	r0, [r3, #0]

    g_fan_click_ready = true;
  40ad1c:	2201      	movs	r2, #1
  40ad1e:	4b08      	ldr	r3, [pc, #32]	; (40ad40 <fan_click_init+0x64>)
  40ad20:	701a      	strb	r2, [r3, #0]
    return 0;
  40ad22:	2000      	movs	r0, #0
  40ad24:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
  40ad26:	f04f 30ff 	mov.w	r0, #4294967295
  40ad2a:	bd38      	pop	{r3, r4, r5, pc}
  40ad2c:	f04f 30ff 	mov.w	r0, #4294967295
}
  40ad30:	bd38      	pop	{r3, r4, r5, pc}
  40ad32:	bf00      	nop
  40ad34:	0040aca1 	.word	0x0040aca1
  40ad38:	0040ac65 	.word	0x0040ac65
  40ad3c:	20003040 	.word	0x20003040
  40ad40:	200013f0 	.word	0x200013f0

0040ad44 <fan_click_set_target_tach>:

    return (uint16_t)count;
}

void fan_click_set_target_tach( uint16_t tach )
{
  40ad44:	b538      	push	{r3, r4, r5, lr}
    {
        return;
    }
#endif

    if(g_fan_click_ready)
  40ad46:	4b13      	ldr	r3, [pc, #76]	; (40ad94 <fan_click_set_target_tach+0x50>)
  40ad48:	781b      	ldrb	r3, [r3, #0]
  40ad4a:	b303      	cbz	r3, 40ad8e <fan_click_set_target_tach+0x4a>
    {
        if(0 == tach)
  40ad4c:	b938      	cbnz	r0, 40ad5e <fan_click_set_target_tach+0x1a>
        {
            fan_write_reg(EMC2301_TACH_TARGET_LOW, 0xFF);
  40ad4e:	21ff      	movs	r1, #255	; 0xff
  40ad50:	203c      	movs	r0, #60	; 0x3c
  40ad52:	4c11      	ldr	r4, [pc, #68]	; (40ad98 <fan_click_set_target_tach+0x54>)
  40ad54:	47a0      	blx	r4
            fan_write_reg(EMC2301_TACH_TARGET_HIGH, 0xFF);
  40ad56:	21ff      	movs	r1, #255	; 0xff
  40ad58:	203d      	movs	r0, #61	; 0x3d
  40ad5a:	47a0      	blx	r4
  40ad5c:	bd38      	pop	{r3, r4, r5, pc}
    count *= 2 * (1 + EMC2301_FAN_CONFIG1_EDGES_VALUE(g_fan_click_cfg1_cached));
  40ad5e:	4b0f      	ldr	r3, [pc, #60]	; (40ad9c <fan_click_set_target_tach+0x58>)
  40ad60:	781a      	ldrb	r2, [r3, #0]
  40ad62:	f3c2 03c1 	ubfx	r3, r2, #3, #2
  40ad66:	3301      	adds	r3, #1
  40ad68:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40ad6c:	045c      	lsls	r4, r3, #17
    count *= 1 << EMC2301_FAN_CONFIG1_RANGE_VALUE(g_fan_click_cfg1_cached);
  40ad6e:	f3c2 1241 	ubfx	r2, r2, #5, #2
  40ad72:	4094      	lsls	r4, r2
    count /= rpm;
  40ad74:	fbb4 f4f0 	udiv	r4, r4, r0
        }
        else
        {
            tach = fan_click_rpm_to_count(tach);

            fan_write_reg(EMC2301_TACH_TARGET_LOW, tach << 3);
  40ad78:	00e1      	lsls	r1, r4, #3
  40ad7a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
  40ad7e:	203c      	movs	r0, #60	; 0x3c
  40ad80:	4d05      	ldr	r5, [pc, #20]	; (40ad98 <fan_click_set_target_tach+0x54>)
  40ad82:	47a8      	blx	r5
            fan_write_reg(EMC2301_TACH_TARGET_HIGH, tach >> 5);
  40ad84:	f3c4 1147 	ubfx	r1, r4, #5, #8
  40ad88:	203d      	movs	r0, #61	; 0x3d
  40ad8a:	47a8      	blx	r5
  40ad8c:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    else
    {
        fan_click_init();
  40ad8e:	4b04      	ldr	r3, [pc, #16]	; (40ada0 <fan_click_set_target_tach+0x5c>)
  40ad90:	4798      	blx	r3
  40ad92:	bd38      	pop	{r3, r4, r5, pc}
  40ad94:	200013f0 	.word	0x200013f0
  40ad98:	0040ac65 	.word	0x0040ac65
  40ad9c:	20003040 	.word	0x20003040
  40ada0:	0040acdd 	.word	0x0040acdd

0040ada4 <fan_click_get_tach>:
    atcab_release();
#endif
}

uint16_t fan_click_get_tach( void )
{
  40ada4:	b538      	push	{r3, r4, r5, lr}
    {
        return ret;
    }
#endif

    if(g_fan_click_ready)
  40ada6:	4b13      	ldr	r3, [pc, #76]	; (40adf4 <fan_click_get_tach+0x50>)
  40ada8:	781b      	ldrb	r3, [r3, #0]
  40adaa:	b923      	cbnz	r3, 40adb6 <fan_click_get_tach+0x12>
            ret = fan_click_count_to_rpm(speed);
        }
    }
    else
    {
        fan_click_init();
  40adac:	4b12      	ldr	r3, [pc, #72]	; (40adf8 <fan_click_get_tach+0x54>)
  40adae:	4798      	blx	r3
    uint16_t ret = UINT16_MAX;
  40adb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40adb4:	bd38      	pop	{r3, r4, r5, pc}
        ret = fan_read_reg(EMC2301_FAN_SETTING);
  40adb6:	2030      	movs	r0, #48	; 0x30
  40adb8:	4b10      	ldr	r3, [pc, #64]	; (40adfc <fan_click_get_tach+0x58>)
  40adba:	4798      	blx	r3
        if (ret)
  40adbc:	b908      	cbnz	r0, 40adc2 <fan_click_get_tach+0x1e>
        ret = fan_read_reg(EMC2301_FAN_SETTING);
  40adbe:	2000      	movs	r0, #0

#if !SAMG
    atcab_release();
#endif
    return ret;
  40adc0:	bd38      	pop	{r3, r4, r5, pc}
            speed = fan_read_reg(EMC2301_TACH_READING_HIGH) << 5;
  40adc2:	203e      	movs	r0, #62	; 0x3e
  40adc4:	4d0d      	ldr	r5, [pc, #52]	; (40adfc <fan_click_get_tach+0x58>)
  40adc6:	47a8      	blx	r5
  40adc8:	0144      	lsls	r4, r0, #5
            speed |= fan_read_reg(EMC2301_TACH_READING_LOW) >> 3;
  40adca:	203f      	movs	r0, #63	; 0x3f
  40adcc:	47a8      	blx	r5
    rpm *= 2 * (1 + EMC2301_FAN_CONFIG1_EDGES_VALUE(g_fan_click_cfg1_cached));
  40adce:	4b0c      	ldr	r3, [pc, #48]	; (40ae00 <fan_click_get_tach+0x5c>)
  40add0:	781a      	ldrb	r2, [r3, #0]
  40add2:	f3c2 03c1 	ubfx	r3, r2, #3, #2
  40add6:	3301      	adds	r3, #1
  40add8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40addc:	045b      	lsls	r3, r3, #17
    rpm *= 1 << EMC2301_FAN_CONFIG1_RANGE_VALUE(g_fan_click_cfg1_cached);
  40adde:	f3c2 1241 	ubfx	r2, r2, #5, #2
  40ade2:	4093      	lsls	r3, r2
            speed |= fan_read_reg(EMC2301_TACH_READING_LOW) >> 3;
  40ade4:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  40ade8:	4320      	orrs	r0, r4
    rpm /= count;
  40adea:	fbb3 f0f0 	udiv	r0, r3, r0
    return (uint16_t)rpm;
  40adee:	b280      	uxth	r0, r0
  40adf0:	bd38      	pop	{r3, r4, r5, pc}
  40adf2:	bf00      	nop
  40adf4:	200013f0 	.word	0x200013f0
  40adf8:	0040acdd 	.word	0x0040acdd
  40adfc:	0040aca1 	.word	0x0040aca1
  40ae00:	20003040 	.word	0x20003040

0040ae04 <th5_read_reg>:
    return reg;
}

#elif SAM
static uint8_t th5_read_reg(uint8_t reg)
{
  40ae04:	b500      	push	{lr}
  40ae06:	b087      	sub	sp, #28
    uint8_t rxdata;
    twi_packet_t packet = {
  40ae08:	2300      	movs	r3, #0
  40ae0a:	9300      	str	r3, [sp, #0]
  40ae0c:	9304      	str	r3, [sp, #16]
  40ae0e:	f88d 0000 	strb.w	r0, [sp]
  40ae12:	2301      	movs	r3, #1
  40ae14:	9301      	str	r3, [sp, #4]
  40ae16:	f10d 0217 	add.w	r2, sp, #23
  40ae1a:	9202      	str	r2, [sp, #8]
  40ae1c:	9303      	str	r3, [sp, #12]
  40ae1e:	234c      	movs	r3, #76	; 0x4c
  40ae20:	f88d 3010 	strb.w	r3, [sp, #16]
        .addr_length = 1,
        .buffer      = &rxdata,
        .length      = sizeof(rxdata)
    };

    twi_master_read(TWI4, &packet);
  40ae24:	4669      	mov	r1, sp
  40ae26:	4804      	ldr	r0, [pc, #16]	; (40ae38 <th5_read_reg+0x34>)
  40ae28:	4b04      	ldr	r3, [pc, #16]	; (40ae3c <th5_read_reg+0x38>)
  40ae2a:	4798      	blx	r3

    return rxdata;
}
  40ae2c:	f89d 0017 	ldrb.w	r0, [sp, #23]
  40ae30:	b007      	add	sp, #28
  40ae32:	f85d fb04 	ldr.w	pc, [sp], #4
  40ae36:	bf00      	nop
  40ae38:	4001c600 	.word	0x4001c600
  40ae3c:	00404df5 	.word	0x00404df5

0040ae40 <th5_read_sensor>:
    {
        return temp;
    }
#endif

    if(sensor < 4)
  40ae40:	2803      	cmp	r0, #3
  40ae42:	d902      	bls.n	40ae4a <th5_read_sensor+0xa>
    uint32_t temp = UINT32_MAX;
  40ae44:	f04f 30ff 	mov.w	r0, #4294967295

#if !SAMG
    atcab_release();
#endif

    return temp;
  40ae48:	4770      	bx	lr
{
  40ae4a:	b570      	push	{r4, r5, r6, lr}
        temp_raw = th5_read_reg(diode_sensors[sensor] & 0xFF);
  40ae4c:	4b08      	ldr	r3, [pc, #32]	; (40ae70 <th5_read_sensor+0x30>)
  40ae4e:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
  40ae52:	b2f0      	uxtb	r0, r6
  40ae54:	4d07      	ldr	r5, [pc, #28]	; (40ae74 <th5_read_sensor+0x34>)
  40ae56:	47a8      	blx	r5
  40ae58:	4604      	mov	r4, r0
        temp_raw |= th5_read_reg(diode_sensors[sensor] >> 8) << 8;
  40ae5a:	0a30      	lsrs	r0, r6, #8
  40ae5c:	47a8      	blx	r5
  40ae5e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
        temp = (temp_raw >> 5);
  40ae62:	f3c0 104a 	ubfx	r0, r0, #5, #11
        temp *= 125;
  40ae66:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
  40ae6a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  40ae6e:	bd70      	pop	{r4, r5, r6, pc}
  40ae70:	00417060 	.word	0x00417060
  40ae74:	0040ae05 	.word	0x0040ae05

0040ae78 <update_settings_from_json>:
    return target;
}

#ifdef CONFIG_USE_JSON_LIB
bool update_settings_from_json(JSON_Array * json_map)
{
  40ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae7c:	b083      	sub	sp, #12
  40ae7e:	4681      	mov	r9, r0
    JSON_Array * json_array_element = NULL;
    uint8_t i;

    for(i=0; i< json_array_get_count(json_map); i++)
  40ae80:	2400      	movs	r4, #0
  40ae82:	f8df a070 	ldr.w	sl, [pc, #112]	; 40aef4 <update_settings_from_json+0x7c>
    {
        json_array_element = json_array_get_array(json_map,i);
  40ae86:	f8df b070 	ldr.w	fp, [pc, #112]	; 40aef8 <update_settings_from_json+0x80>
        g_temp_speed_map[i*2] = json_array_get_number(json_array_element, 0);
  40ae8a:	4f17      	ldr	r7, [pc, #92]	; (40aee8 <update_settings_from_json+0x70>)
    for(i=0; i< json_array_get_count(json_map); i++)
  40ae8c:	e014      	b.n	40aeb8 <update_settings_from_json+0x40>
        json_array_element = json_array_get_array(json_map,i);
  40ae8e:	4629      	mov	r1, r5
  40ae90:	4648      	mov	r0, r9
  40ae92:	47d8      	blx	fp
  40ae94:	9001      	str	r0, [sp, #4]
        g_temp_speed_map[i*2] = json_array_get_number(json_array_element, 0);
  40ae96:	b2e4      	uxtb	r4, r4
  40ae98:	0064      	lsls	r4, r4, #1
  40ae9a:	2100      	movs	r1, #0
  40ae9c:	47b8      	blx	r7
  40ae9e:	4d13      	ldr	r5, [pc, #76]	; (40aeec <update_settings_from_json+0x74>)
  40aea0:	4e13      	ldr	r6, [pc, #76]	; (40aef0 <update_settings_from_json+0x78>)
  40aea2:	47b0      	blx	r6
  40aea4:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
        g_temp_speed_map[i*2+1] = json_array_get_number(json_array_element, 1);
  40aea8:	2101      	movs	r1, #1
  40aeaa:	9801      	ldr	r0, [sp, #4]
  40aeac:	47b8      	blx	r7
  40aeae:	3401      	adds	r4, #1
  40aeb0:	47b0      	blx	r6
  40aeb2:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
  40aeb6:	4644      	mov	r4, r8
  40aeb8:	b2e5      	uxtb	r5, r4
    for(i=0; i< json_array_get_count(json_map); i++)
  40aeba:	4648      	mov	r0, r9
  40aebc:	47d0      	blx	sl
  40aebe:	f104 0801 	add.w	r8, r4, #1
  40aec2:	42a8      	cmp	r0, r5
  40aec4:	d8e3      	bhi.n	40ae8e <update_settings_from_json+0x16>
    }
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
  40aec6:	006b      	lsls	r3, r5, #1
  40aec8:	b2db      	uxtb	r3, r3
  40aeca:	2b0d      	cmp	r3, #13
  40aecc:	d808      	bhi.n	40aee0 <update_settings_from_json+0x68>
    {
        g_temp_speed_map[i] = UINT16_MAX;
  40aece:	4907      	ldr	r1, [pc, #28]	; (40aeec <update_settings_from_json+0x74>)
  40aed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40aed4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
  40aed8:	3302      	adds	r3, #2
  40aeda:	b2db      	uxtb	r3, r3
  40aedc:	2b0d      	cmp	r3, #13
  40aede:	d9f9      	bls.n	40aed4 <update_settings_from_json+0x5c>
    }
}
  40aee0:	b003      	add	sp, #12
  40aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aee6:	bf00      	nop
  40aee8:	00409a8d 	.word	0x00409a8d
  40aeec:	20000240 	.word	0x20000240
  40aef0:	0040c791 	.word	0x0040c791
  40aef4:	004099ed 	.word	0x004099ed
  40aef8:	00409a49 	.word	0x00409a49

0040aefc <override_from_json>:

bool override_from_json(JSON_Object * json_override_object)
{
  40aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40af00:	4606      	mov	r6, r0

    override_speed = json_object_get_number(json_override_object, "fan-speed");
  40af02:	490d      	ldr	r1, [pc, #52]	; (40af38 <override_from_json+0x3c>)
  40af04:	4d0d      	ldr	r5, [pc, #52]	; (40af3c <override_from_json+0x40>)
  40af06:	47a8      	blx	r5
  40af08:	4c0d      	ldr	r4, [pc, #52]	; (40af40 <override_from_json+0x44>)
  40af0a:	47a0      	blx	r4
  40af0c:	4b0d      	ldr	r3, [pc, #52]	; (40af44 <override_from_json+0x48>)
  40af0e:	8018      	strh	r0, [r3, #0]
    override_end = time_utils_get_utc() + json_object_get_number(json_override_object, "duration");
  40af10:	4b0d      	ldr	r3, [pc, #52]	; (40af48 <override_from_json+0x4c>)
  40af12:	4798      	blx	r3
  40af14:	4680      	mov	r8, r0
  40af16:	490d      	ldr	r1, [pc, #52]	; (40af4c <override_from_json+0x50>)
  40af18:	4630      	mov	r0, r6
  40af1a:	47a8      	blx	r5
  40af1c:	4606      	mov	r6, r0
  40af1e:	460f      	mov	r7, r1
  40af20:	4640      	mov	r0, r8
  40af22:	4b0b      	ldr	r3, [pc, #44]	; (40af50 <override_from_json+0x54>)
  40af24:	4798      	blx	r3
  40af26:	4632      	mov	r2, r6
  40af28:	463b      	mov	r3, r7
  40af2a:	4d0a      	ldr	r5, [pc, #40]	; (40af54 <override_from_json+0x58>)
  40af2c:	47a8      	blx	r5
  40af2e:	47a0      	blx	r4
  40af30:	4b09      	ldr	r3, [pc, #36]	; (40af58 <override_from_json+0x5c>)
  40af32:	6018      	str	r0, [r3, #0]
}
  40af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af38:	00417068 	.word	0x00417068
  40af3c:	00409a79 	.word	0x00409a79
  40af40:	0040c791 	.word	0x0040c791
  40af44:	20001400 	.word	0x20001400
  40af48:	0040a585 	.word	0x0040a585
  40af4c:	00417074 	.word	0x00417074
  40af50:	0040c545 	.word	0x0040c545
  40af54:	0040c2cd 	.word	0x0040c2cd
  40af58:	200013fc 	.word	0x200013fc

0040af5c <sensor_task>:
        *buffer = ']';
    }
}

 void sensor_task(void)
{
  40af5c:	b570      	push	{r4, r5, r6, lr}
    uint16_t temp;
    uint16_t speed;

    if(override_end <= time_utils_get_utc())
  40af5e:	4b18      	ldr	r3, [pc, #96]	; (40afc0 <sensor_task+0x64>)
  40af60:	4798      	blx	r3
  40af62:	4b18      	ldr	r3, [pc, #96]	; (40afc4 <sensor_task+0x68>)
  40af64:	681b      	ldr	r3, [r3, #0]
  40af66:	4298      	cmp	r0, r3
  40af68:	d205      	bcs.n	40af76 <sensor_task+0x1a>
        temp = get_averaged_temp();
        speed = get_speed_from_map(temp);
    }
    else
    {
        speed = override_speed;
  40af6a:	4b17      	ldr	r3, [pc, #92]	; (40afc8 <sensor_task+0x6c>)
  40af6c:	881c      	ldrh	r4, [r3, #0]
    }

    /* Set new target */
    fan_click_set_target_tach(speed);
  40af6e:	4620      	mov	r0, r4
  40af70:	4b16      	ldr	r3, [pc, #88]	; (40afcc <sensor_task+0x70>)
  40af72:	4798      	blx	r3
  40af74:	bd70      	pop	{r4, r5, r6, pc}
    g_temp_buffer[g_temp_buf_idx++] = th5_read_sensor(0);
  40af76:	4d16      	ldr	r5, [pc, #88]	; (40afd0 <sensor_task+0x74>)
  40af78:	782e      	ldrb	r6, [r5, #0]
  40af7a:	1c73      	adds	r3, r6, #1
  40af7c:	702b      	strb	r3, [r5, #0]
  40af7e:	2000      	movs	r0, #0
  40af80:	4b14      	ldr	r3, [pc, #80]	; (40afd4 <sensor_task+0x78>)
  40af82:	4798      	blx	r3
  40af84:	4b14      	ldr	r3, [pc, #80]	; (40afd8 <sensor_task+0x7c>)
  40af86:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if(TEMP_SENSOR_SAMPLES <= g_temp_buf_idx)
  40af8a:	782b      	ldrb	r3, [r5, #0]
  40af8c:	2b03      	cmp	r3, #3
  40af8e:	d901      	bls.n	40af94 <sensor_task+0x38>
        g_temp_buf_idx = 0;
  40af90:	2200      	movs	r2, #0
  40af92:	702a      	strb	r2, [r5, #0]
    avg = g_temp_buffer[0];
  40af94:	4b10      	ldr	r3, [pc, #64]	; (40afd8 <sensor_task+0x7c>)
  40af96:	8819      	ldrh	r1, [r3, #0]
        avg += g_temp_buffer[i];
  40af98:	885a      	ldrh	r2, [r3, #2]
  40af9a:	440a      	add	r2, r1
  40af9c:	8899      	ldrh	r1, [r3, #4]
  40af9e:	440a      	add	r2, r1
  40afa0:	88d9      	ldrh	r1, [r3, #6]
  40afa2:	4411      	add	r1, r2
    return (avg / TEMP_SENSOR_SAMPLES);
  40afa4:	f3c1 018f 	ubfx	r1, r1, #2, #16
  40afa8:	4b0c      	ldr	r3, [pc, #48]	; (40afdc <sensor_task+0x80>)
  40afaa:	f103 001c 	add.w	r0, r3, #28
        if(temp > g_temp_speed_map[i])
  40afae:	881a      	ldrh	r2, [r3, #0]
  40afb0:	428a      	cmp	r2, r1
            target = g_temp_speed_map[i+1];
  40afb2:	bf38      	it	cc
  40afb4:	885c      	ldrhcc	r4, [r3, #2]
  40afb6:	3304      	adds	r3, #4
    for(i=0; i < sizeof(g_temp_speed_map)/sizeof(g_temp_speed_map[0]); i += 2 )
  40afb8:	4283      	cmp	r3, r0
  40afba:	d1f8      	bne.n	40afae <sensor_task+0x52>
  40afbc:	e7d7      	b.n	40af6e <sensor_task+0x12>
  40afbe:	bf00      	nop
  40afc0:	0040a585 	.word	0x0040a585
  40afc4:	200013fc 	.word	0x200013fc
  40afc8:	20001400 	.word	0x20001400
  40afcc:	0040ad45 	.word	0x0040ad45
  40afd0:	200013f1 	.word	0x200013f1
  40afd4:	0040ae41 	.word	0x0040ae41
  40afd8:	200013f4 	.word	0x200013f4
  40afdc:	20000240 	.word	0x20000240

0040afe0 <usb_hid_init>:

/**
 * \brief Initializes the USB HID interface.
 */
void usb_hid_init(void)
{
  40afe0:	b508      	push	{r3, lr}
    // Start the USB device stack
    udc_start();
  40afe2:	4b01      	ldr	r3, [pc, #4]	; (40afe8 <usb_hid_init+0x8>)
  40afe4:	4798      	blx	r3
  40afe6:	bd08      	pop	{r3, pc}
  40afe8:	00403a0d 	.word	0x00403a0d

0040afec <usb_send_response_message>:
}

bool usb_send_response_message(uint8_t *response, uint16_t response_length)
{
  40afec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aff0:	b093      	sub	sp, #76	; 0x4c
    uint16_t current_response_location = 0;
    uint8_t usb_report[UDI_HID_REPORT_OUT_SIZE];
    uint8_t usb_report_length = 0;
    uint8_t send_retries = 5;
    
    if (response == NULL)
  40aff2:	2800      	cmp	r0, #0
  40aff4:	d02e      	beq.n	40b054 <usb_send_response_message+0x68>
  40aff6:	460e      	mov	r6, r1
  40aff8:	4680      	mov	r8, r0
    {
        return false;
    }

    // Send the USB response message
    while (response_length > 0)
  40affa:	2900      	cmp	r1, #0
  40affc:	d030      	beq.n	40b060 <usb_send_response_message+0x74>
  40affe:	2505      	movs	r5, #5
  40b000:	2700      	movs	r7, #0
    {
        // Create the USB report
        usb_report_length = min(UDI_HID_REPORT_OUT_SIZE, response_length);
        
        memset(&usb_report[0], 0, sizeof(usb_report));
  40b002:	f8df b06c 	ldr.w	fp, [pc, #108]	; 40b070 <usb_send_response_message+0x84>
        memcpy(&usb_report[0], &response[current_response_location], 
  40b006:	f8df a06c 	ldr.w	sl, [pc, #108]	; 40b074 <usb_send_response_message+0x88>
               usb_report_length);
        
        usb_report_sent = udi_hid_generic_send_report_in(usb_report);
  40b00a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 40b078 <usb_send_response_message+0x8c>
  40b00e:	e008      	b.n	40b022 <usb_send_response_message+0x36>
  40b010:	b2e4      	uxtb	r4, r4
        if (usb_report_sent == true)
        {
            current_response_location += usb_report_length;
  40b012:	4427      	add	r7, r4
  40b014:	b2bf      	uxth	r7, r7
            response_length -= usb_report_length;            
  40b016:	1b34      	subs	r4, r6, r4
  40b018:	b2a6      	uxth	r6, r4

            // Delay for 50ms
            delay_ms(USB_DELAY);
  40b01a:	4813      	ldr	r0, [pc, #76]	; (40b068 <usb_send_response_message+0x7c>)
  40b01c:	4b13      	ldr	r3, [pc, #76]	; (40b06c <usb_send_response_message+0x80>)
  40b01e:	4798      	blx	r3
    while (response_length > 0)
  40b020:	b1d6      	cbz	r6, 40b058 <usb_send_response_message+0x6c>
  40b022:	4634      	mov	r4, r6
  40b024:	2e40      	cmp	r6, #64	; 0x40
  40b026:	bf28      	it	cs
  40b028:	2440      	movcs	r4, #64	; 0x40
        memset(&usb_report[0], 0, sizeof(usb_report));
  40b02a:	2240      	movs	r2, #64	; 0x40
  40b02c:	2100      	movs	r1, #0
  40b02e:	a802      	add	r0, sp, #8
  40b030:	47d8      	blx	fp
        memcpy(&usb_report[0], &response[current_response_location], 
  40b032:	b2e2      	uxtb	r2, r4
  40b034:	eb08 0107 	add.w	r1, r8, r7
  40b038:	a802      	add	r0, sp, #8
  40b03a:	47d0      	blx	sl
        usb_report_sent = udi_hid_generic_send_report_in(usb_report);
  40b03c:	a802      	add	r0, sp, #8
  40b03e:	47c8      	blx	r9
        if (usb_report_sent == true)
  40b040:	9001      	str	r0, [sp, #4]
  40b042:	2800      	cmp	r0, #0
  40b044:	d1e4      	bne.n	40b010 <usb_send_response_message+0x24>
        }
        else
        {
            if (send_retries > 0)
  40b046:	b13d      	cbz	r5, 40b058 <usb_send_response_message+0x6c>
            {
                // Delay for 50ms
                delay_ms(USB_DELAY);
  40b048:	4807      	ldr	r0, [pc, #28]	; (40b068 <usb_send_response_message+0x7c>)
  40b04a:	4b08      	ldr	r3, [pc, #32]	; (40b06c <usb_send_response_message+0x80>)
  40b04c:	4798      	blx	r3
                
                // Decrement the send retries
                send_retries--; 
  40b04e:	3d01      	subs	r5, #1
  40b050:	b2ed      	uxtb	r5, r5
  40b052:	e7e5      	b.n	40b020 <usb_send_response_message+0x34>
        return false;
  40b054:	2300      	movs	r3, #0
  40b056:	9301      	str	r3, [sp, #4]
            }
        }  
    }
    
    return usb_report_sent;
}
  40b058:	9801      	ldr	r0, [sp, #4]
  40b05a:	b013      	add	sp, #76	; 0x4c
  40b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (response_length > 0)
  40b060:	2300      	movs	r3, #0
  40b062:	9301      	str	r3, [sp, #4]
  40b064:	e7f8      	b.n	40b058 <usb_send_response_message+0x6c>
  40b066:	bf00      	nop
  40b068:	00068a0f 	.word	0x00068a0f
  40b06c:	20000001 	.word	0x20000001
  40b070:	0040de3d 	.word	0x0040de3d
  40b074:	0040dc41 	.word	0x0040dc41
  40b078:	004036d5 	.word	0x004036d5

0040b07c <usb_hid_enable_callback>:
 *                FALSE - The USB interface should not be enabled
 */
bool usb_hid_enable_callback(void)
{
    return true;
}
  40b07c:	2001      	movs	r0, #1
  40b07e:	4770      	bx	lr

0040b080 <usb_hid_disable_callback>:

/**
 * \brief Callback called when the USB host disables the USB interface.
 */
void usb_hid_disable_callback(void)
{
  40b080:	4770      	bx	lr

0040b082 <usb_hid_wakeup_callback>:

/**
 * \brief Callback called when the USB endpoint wakeup event occurs.
 */
void usb_hid_wakeup_callback(void)
{
  40b082:	4770      	bx	lr

0040b084 <usb_hid_report_out_callback>:
 * \brief Handles the incoming USB report.
 *
 * \param[in] report                The incoming USB report
 */
void usb_hid_report_out_callback(uint8_t *report)
{
  40b084:	b538      	push	{r3, r4, r5, lr}
  40b086:	4605      	mov	r5, r0
    // Handle incoming USB report
    uint8_t * pRxBuf = atca_kit_get_rx_buffer();
  40b088:	4b12      	ldr	r3, [pc, #72]	; (40b0d4 <usb_hid_report_out_callback+0x50>)
  40b08a:	4798      	blx	r3

    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
    {
        // Save the incoming USB packet
        pRxBuf[g_usb_buffer_length] = report[index];
  40b08c:	7829      	ldrb	r1, [r5, #0]
  40b08e:	4a12      	ldr	r2, [pc, #72]	; (40b0d8 <usb_hid_report_out_callback+0x54>)
  40b090:	8813      	ldrh	r3, [r2, #0]
  40b092:	54c1      	strb	r1, [r0, r3]
        g_usb_buffer_length++;
  40b094:	8813      	ldrh	r3, [r2, #0]
  40b096:	3301      	adds	r3, #1
  40b098:	b29b      	uxth	r3, r3
  40b09a:	8013      	strh	r3, [r2, #0]

        // Check if the USB message was received
        if (report[index] == USB_MESSAGE_DELIMITER)
  40b09c:	782a      	ldrb	r2, [r5, #0]
  40b09e:	2a0a      	cmp	r2, #10
  40b0a0:	d010      	beq.n	40b0c4 <usb_hid_report_out_callback+0x40>
  40b0a2:	462a      	mov	r2, r5
  40b0a4:	353f      	adds	r5, #63	; 0x3f
        pRxBuf[g_usb_buffer_length] = report[index];
  40b0a6:	490c      	ldr	r1, [pc, #48]	; (40b0d8 <usb_hid_report_out_callback+0x54>)
  40b0a8:	7854      	ldrb	r4, [r2, #1]
  40b0aa:	880b      	ldrh	r3, [r1, #0]
  40b0ac:	54c4      	strb	r4, [r0, r3]
        g_usb_buffer_length++;
  40b0ae:	880b      	ldrh	r3, [r1, #0]
  40b0b0:	3301      	adds	r3, #1
  40b0b2:	b29b      	uxth	r3, r3
  40b0b4:	800b      	strh	r3, [r1, #0]
        if (report[index] == USB_MESSAGE_DELIMITER)
  40b0b6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
  40b0ba:	2c0a      	cmp	r4, #10
  40b0bc:	d002      	beq.n	40b0c4 <usb_hid_report_out_callback+0x40>
    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
  40b0be:	42aa      	cmp	r2, r5
  40b0c0:	d1f2      	bne.n	40b0a8 <usb_hid_report_out_callback+0x24>
  40b0c2:	bd38      	pop	{r3, r4, r5, pc}
        {
            pRxBuf[g_usb_buffer_length] = 0;
  40b0c4:	2200      	movs	r2, #0
  40b0c6:	54c2      	strb	r2, [r0, r3]
            g_usb_message_received++;
  40b0c8:	4a04      	ldr	r2, [pc, #16]	; (40b0dc <usb_hid_report_out_callback+0x58>)
  40b0ca:	6813      	ldr	r3, [r2, #0]
  40b0cc:	3301      	adds	r3, #1
  40b0ce:	6013      	str	r3, [r2, #0]
            break;
  40b0d0:	bd38      	pop	{r3, r4, r5, pc}
  40b0d2:	bf00      	nop
  40b0d4:	0040b7e1 	.word	0x0040b7e1
  40b0d8:	20001402 	.word	0x20001402
  40b0dc:	20003044 	.word	0x20003044

0040b0e0 <usb_hid_set_feature_callback>:
 * \brief Handles the incoming USB feature request.
 *
 * \param[in] report                The incoming USB report
 */
void usb_hid_set_feature_callback(uint8_t *report)
{
  40b0e0:	4770      	bx	lr

0040b0e2 <client_state_error>:
  40b0e2:	2300      	movs	r3, #0
  40b0e4:	8003      	strh	r3, [r0, #0]
static void client_counter_set(void* pCtx, uint32_t val)
{
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;

    /* Convert to loop time*/
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
  40b0e6:	6083      	str	r3, [r0, #8]
  40b0e8:	4770      	bx	lr
	...

0040b0ec <client_publish_message>:
    return message_id;
}

/** \brief Publish a telemetry event */
static void client_publish_message(MQTTClient* mqtt_client)
{
  40b0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b0ee:	b0e3      	sub	sp, #396	; 0x18c
  40b0f0:	4605      	mov	r5, r0
    int status = MQTTCLIENT_FAILURE;
    MQTTMessage message;
    char json_message[256];
    uint32_t ts = time_utils_get_utc();
  40b0f2:	4b2b      	ldr	r3, [pc, #172]	; (40b1a0 <client_publish_message+0xb4>)
  40b0f4:	4798      	blx	r3
  40b0f6:	4606      	mov	r6, r0
    uint32_t temp = th5_read_sensor(0);
  40b0f8:	2000      	movs	r0, #0
  40b0fa:	4b2a      	ldr	r3, [pc, #168]	; (40b1a4 <client_publish_message+0xb8>)
  40b0fc:	4798      	blx	r3
  40b0fe:	4604      	mov	r4, r0
    uint32_t speed = fan_click_get_tach();
  40b100:	4b29      	ldr	r3, [pc, #164]	; (40b1a8 <client_publish_message+0xbc>)
  40b102:	4798      	blx	r3
  40b104:	4607      	mov	r7, r0
    char topic[100];

    if(config_get_client_pub_topic(topic, sizeof(topic)))
  40b106:	2164      	movs	r1, #100	; 0x64
  40b108:	a805      	add	r0, sp, #20
  40b10a:	4b28      	ldr	r3, [pc, #160]	; (40b1ac <client_publish_message+0xc0>)
  40b10c:	4798      	blx	r3
  40b10e:	2800      	cmp	r0, #0
  40b110:	d13a      	bne.n	40b188 <client_publish_message+0x9c>
    uint32_t speed = fan_click_get_tach();
  40b112:	9702      	str	r7, [sp, #8]
    {
        CLIENT_PRINTF("Failed to get topic string");
        return;
    }

    snprintf(json_message, sizeof(json_message), "{ \"timestamp\": %u, \"temperature\": %d.%02d, \"fan-speed\": %d }", ts, temp/1000, temp % 1000,  speed);
  40b114:	4b26      	ldr	r3, [pc, #152]	; (40b1b0 <client_publish_message+0xc4>)
  40b116:	fba3 2304 	umull	r2, r3, r3, r4
  40b11a:	099b      	lsrs	r3, r3, #6
  40b11c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40b120:	fb00 4013 	mls	r0, r0, r3, r4
  40b124:	9001      	str	r0, [sp, #4]
  40b126:	9300      	str	r3, [sp, #0]
  40b128:	4633      	mov	r3, r6
  40b12a:	4a22      	ldr	r2, [pc, #136]	; (40b1b4 <client_publish_message+0xc8>)
  40b12c:	f44f 7180 	mov.w	r1, #256	; 0x100
  40b130:	a81e      	add	r0, sp, #120	; 0x78
  40b132:	4c21      	ldr	r4, [pc, #132]	; (40b1b8 <client_publish_message+0xcc>)
  40b134:	47a0      	blx	r4

    message.qos      = QOS1;
  40b136:	2301      	movs	r3, #1
  40b138:	f88d 3178 	strb.w	r3, [sp, #376]	; 0x178
    message.retained = 0;
  40b13c:	2300      	movs	r3, #0
  40b13e:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
    message.dup      = 0;
  40b142:	f88d 317a 	strb.w	r3, [sp, #378]	; 0x17a
    message_id++;
  40b146:	4b1d      	ldr	r3, [pc, #116]	; (40b1bc <client_publish_message+0xd0>)
  40b148:	881b      	ldrh	r3, [r3, #0]
  40b14a:	3301      	adds	r3, #1
  40b14c:	b29b      	uxth	r3, r3
    if (message_id == (UINT16_MAX - 1))
  40b14e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40b152:	4293      	cmp	r3, r2
  40b154:	d01c      	beq.n	40b190 <client_publish_message+0xa4>
    message_id++;
  40b156:	4a19      	ldr	r2, [pc, #100]	; (40b1bc <client_publish_message+0xd0>)
  40b158:	8013      	strh	r3, [r2, #0]
    return message_id;
  40b15a:	4b18      	ldr	r3, [pc, #96]	; (40b1bc <client_publish_message+0xd0>)
    message.id       = client_get_message_id();
  40b15c:	881b      	ldrh	r3, [r3, #0]
  40b15e:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
    
    message.payload = (void*)json_message;
  40b162:	ac1e      	add	r4, sp, #120	; 0x78
  40b164:	9460      	str	r4, [sp, #384]	; 0x180
    message.payloadlen = strlen(json_message);
  40b166:	4620      	mov	r0, r4
  40b168:	4b15      	ldr	r3, [pc, #84]	; (40b1c0 <client_publish_message+0xd4>)
  40b16a:	4798      	blx	r3
  40b16c:	9061      	str	r0, [sp, #388]	; 0x184

    CLIENT_PRINTF("Publishing MQTT Message %s\r\n", json_message);
  40b16e:	4621      	mov	r1, r4
  40b170:	4814      	ldr	r0, [pc, #80]	; (40b1c4 <client_publish_message+0xd8>)
  40b172:	4b15      	ldr	r3, [pc, #84]	; (40b1c8 <client_publish_message+0xdc>)
  40b174:	4798      	blx	r3

    status = MQTTPublish(mqtt_client, topic, &message);
  40b176:	aa5e      	add	r2, sp, #376	; 0x178
  40b178:	a905      	add	r1, sp, #20
  40b17a:	4628      	mov	r0, r5
  40b17c:	4b13      	ldr	r3, [pc, #76]	; (40b1cc <client_publish_message+0xe0>)
  40b17e:	4798      	blx	r3
    if (status != MQTTCLIENT_SUCCESS)
  40b180:	4601      	mov	r1, r0
  40b182:	b948      	cbnz	r0, 40b198 <client_publish_message+0xac>
    {
        CLIENT_PRINTF("Failed to publish the MQTT message: %d\r\n", status);
    }
}
  40b184:	b063      	add	sp, #396	; 0x18c
  40b186:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLIENT_PRINTF("Failed to get topic string");
  40b188:	4811      	ldr	r0, [pc, #68]	; (40b1d0 <client_publish_message+0xe4>)
  40b18a:	4b0f      	ldr	r3, [pc, #60]	; (40b1c8 <client_publish_message+0xdc>)
  40b18c:	4798      	blx	r3
  40b18e:	e7f9      	b.n	40b184 <client_publish_message+0x98>
        message_id = 1;
  40b190:	2201      	movs	r2, #1
  40b192:	4b0a      	ldr	r3, [pc, #40]	; (40b1bc <client_publish_message+0xd0>)
  40b194:	801a      	strh	r2, [r3, #0]
  40b196:	e7e0      	b.n	40b15a <client_publish_message+0x6e>
        CLIENT_PRINTF("Failed to publish the MQTT message: %d\r\n", status);
  40b198:	480e      	ldr	r0, [pc, #56]	; (40b1d4 <client_publish_message+0xe8>)
  40b19a:	4b0b      	ldr	r3, [pc, #44]	; (40b1c8 <client_publish_message+0xdc>)
  40b19c:	4798      	blx	r3
  40b19e:	e7f1      	b.n	40b184 <client_publish_message+0x98>
  40b1a0:	0040a585 	.word	0x0040a585
  40b1a4:	0040ae41 	.word	0x0040ae41
  40b1a8:	0040ada5 	.word	0x0040ada5
  40b1ac:	0040b669 	.word	0x0040b669
  40b1b0:	10624dd3 	.word	0x10624dd3
  40b1b4:	0041711c 	.word	0x0041711c
  40b1b8:	0040e401 	.word	0x0040e401
  40b1bc:	20001cdc 	.word	0x20001cdc
  40b1c0:	0040e7c1 	.word	0x0040e7c1
  40b1c4:	0041715c 	.word	0x0041715c
  40b1c8:	0040d42d 	.word	0x0040d42d
  40b1cc:	004088bd 	.word	0x004088bd
  40b1d0:	00417100 	.word	0x00417100
  40b1d4:	0041717c 	.word	0x0041717c

0040b1d8 <client_process_message>:

/** \brief Receive and process a message from the host */
static void client_process_message(MessageData *data)
{
  40b1d8:	b510      	push	{r4, lr}
    JSON_Object *json_message_object = NULL;
    JSON_Object *json_override_object = NULL;
    JSON_Array * json_array_settings = NULL;
    uint32_t update_rate;

    json_message_value   = json_parse_string((char*)data->message->payload);
  40b1da:	6803      	ldr	r3, [r0, #0]
  40b1dc:	6898      	ldr	r0, [r3, #8]
  40b1de:	4b0f      	ldr	r3, [pc, #60]	; (40b21c <client_process_message+0x44>)
  40b1e0:	4798      	blx	r3
    json_message_object  = json_value_get_object(json_message_value);
  40b1e2:	4b0f      	ldr	r3, [pc, #60]	; (40b220 <client_process_message+0x48>)
  40b1e4:	4798      	blx	r3
  40b1e6:	4604      	mov	r4, r0

    json_array_settings = json_object_get_array(json_message_object, "fan-speed-map");
  40b1e8:	490e      	ldr	r1, [pc, #56]	; (40b224 <client_process_message+0x4c>)
  40b1ea:	4b0f      	ldr	r3, [pc, #60]	; (40b228 <client_process_message+0x50>)
  40b1ec:	4798      	blx	r3

    if(json_array_settings)
  40b1ee:	b108      	cbz	r0, 40b1f4 <client_process_message+0x1c>
    {
        update_settings_from_json(json_array_settings);
  40b1f0:	4b0e      	ldr	r3, [pc, #56]	; (40b22c <client_process_message+0x54>)
  40b1f2:	4798      	blx	r3
    }

    json_override_object = json_object_get_object(json_message_object, "override");
  40b1f4:	490e      	ldr	r1, [pc, #56]	; (40b230 <client_process_message+0x58>)
  40b1f6:	4620      	mov	r0, r4
  40b1f8:	4b0e      	ldr	r3, [pc, #56]	; (40b234 <client_process_message+0x5c>)
  40b1fa:	4798      	blx	r3

    if(json_override_object)
  40b1fc:	b108      	cbz	r0, 40b202 <client_process_message+0x2a>
    {
        override_from_json(json_override_object);
  40b1fe:	4b0e      	ldr	r3, [pc, #56]	; (40b238 <client_process_message+0x60>)
  40b200:	4798      	blx	r3
    }

    update_rate = json_object_get_number(json_message_object, "update-rate");
  40b202:	490e      	ldr	r1, [pc, #56]	; (40b23c <client_process_message+0x64>)
  40b204:	4620      	mov	r0, r4
  40b206:	4b0e      	ldr	r3, [pc, #56]	; (40b240 <client_process_message+0x68>)
  40b208:	4798      	blx	r3
  40b20a:	4b0e      	ldr	r3, [pc, #56]	; (40b244 <client_process_message+0x6c>)
  40b20c:	4798      	blx	r3

    if(1000 < update_rate)
  40b20e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    {
        g_client_context.update_period = update_rate;
  40b212:	bf84      	itt	hi
  40b214:	4b0c      	ldrhi	r3, [pc, #48]	; (40b248 <client_process_message+0x70>)
  40b216:	f8a3 08d4 	strhhi.w	r0, [r3, #2260]	; 0x8d4
  40b21a:	bd10      	pop	{r4, pc}
  40b21c:	0040a0c1 	.word	0x0040a0c1
  40b220:	004099f7 	.word	0x004099f7
  40b224:	004170d8 	.word	0x004170d8
  40b228:	00409a35 	.word	0x00409a35
  40b22c:	0040ae79 	.word	0x0040ae79
  40b230:	004170e8 	.word	0x004170e8
  40b234:	00409a0d 	.word	0x00409a0d
  40b238:	0040aefd 	.word	0x0040aefd
  40b23c:	004170f4 	.word	0x004170f4
  40b240:	00409a79 	.word	0x00409a79
  40b244:	0040c791 	.word	0x0040c791
  40b248:	20001404 	.word	0x20001404

0040b24c <client_state_init>:
    client_counter_set(pCtx, wait);
}

/* Initialize the client */
static void client_state_init(void * pCtx)
{
  40b24c:	b530      	push	{r4, r5, lr}
  40b24e:	b085      	sub	sp, #20
  40b250:	4604      	mov	r4, r0
    struct _g_client_context * ctx = (struct _g_client_context *)pCtx;
    
    /* Initialize the Paho MQTT Network Structure */
    ctx->mqtt_net.mqttread  = &mqtt_packet_read;
  40b252:	4b0f      	ldr	r3, [pc, #60]	; (40b290 <client_state_init+0x44>)
  40b254:	60c3      	str	r3, [r0, #12]
    ctx->mqtt_net.mqttwrite = &mqtt_packet_write;
  40b256:	4b0f      	ldr	r3, [pc, #60]	; (40b294 <client_state_init+0x48>)
  40b258:	6103      	str	r3, [r0, #16]

    /* Initialize the Paho MQTT Client Structure */
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
  40b25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b25e:	9302      	str	r3, [sp, #8]
        ctx->mqtt_tx_buf, CLIENT_MQTT_TX_BUF_SIZE,
        ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE);
  40b260:	f100 0270 	add.w	r2, r0, #112	; 0x70
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
  40b264:	9201      	str	r2, [sp, #4]
  40b266:	9300      	str	r3, [sp, #0]
  40b268:	f500 638e 	add.w	r3, r0, #1136	; 0x470
  40b26c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  40b270:	f100 010c 	add.w	r1, r0, #12
  40b274:	3014      	adds	r0, #20
  40b276:	4d08      	ldr	r5, [pc, #32]	; (40b298 <client_state_init+0x4c>)
  40b278:	47a8      	blx	r5

    ctx->update_period = CLIENT_REPORT_PERIOD_DEFAULT;
  40b27a:	f241 3388 	movw	r3, #5000	; 0x1388
  40b27e:	f8a4 38d4 	strh.w	r3, [r4, #2260]	; 0x8d4
  40b282:	2301      	movs	r3, #1
  40b284:	8023      	strh	r3, [r4, #0]
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
  40b286:	2300      	movs	r3, #0
  40b288:	60a3      	str	r3, [r4, #8]

    /* Move to the next state */
    client_state_update(pCtx, CLIENT_STATE_GET_TIME, 0);
}
  40b28a:	b005      	add	sp, #20
  40b28c:	bd30      	pop	{r4, r5, pc}
  40b28e:	bf00      	nop
  40b290:	00409229 	.word	0x00409229
  40b294:	0040923d 	.word	0x0040923d
  40b298:	00408301 	.word	0x00408301

0040b29c <client_state_run>:
    }
}

/* Client is connected */
static void client_state_run(void * pCtx)
{
  40b29c:	b510      	push	{r4, lr}
  40b29e:	4604      	mov	r4, r0
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;

    if(wifi_has_error())
  40b2a0:	4b0e      	ldr	r3, [pc, #56]	; (40b2dc <client_state_run+0x40>)
  40b2a2:	4798      	blx	r3
  40b2a4:	b940      	cbnz	r0, 40b2b8 <client_state_run+0x1c>
    {
        client_state_update(pCtx, CLIENT_STATE_INIT, 0);
    }

    if(client_counter_finished(pCtx))
  40b2a6:	68a3      	ldr	r3, [r4, #8]
  40b2a8:	b143      	cbz	r3, 40b2bc <client_state_run+0x20>
        client_publish_message(&ctx->mqtt_client);
    }
    else
    {
        /* Wait for incoming update messages */
        if(MQTTYield(&ctx->mqtt_client, MQTT_YEILD_TIMEOUT_MS))
  40b2aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  40b2ae:	f104 0014 	add.w	r0, r4, #20
  40b2b2:	4b0b      	ldr	r3, [pc, #44]	; (40b2e0 <client_state_run+0x44>)
  40b2b4:	4798      	blx	r3
  40b2b6:	bd10      	pop	{r4, pc}
  40b2b8:	2300      	movs	r3, #0
  40b2ba:	8023      	strh	r3, [r4, #0]
        client_counter_set(pCtx, ctx->update_period);
  40b2bc:	f8b4 28d4 	ldrh.w	r2, [r4, #2260]	; 0x8d4
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
  40b2c0:	4b08      	ldr	r3, [pc, #32]	; (40b2e4 <client_state_run+0x48>)
  40b2c2:	fba3 1302 	umull	r1, r3, r3, r2
  40b2c6:	095b      	lsrs	r3, r3, #5
  40b2c8:	60a3      	str	r3, [r4, #8]
    if(val && !ctx->holdoff)
  40b2ca:	b112      	cbz	r2, 40b2d2 <client_state_run+0x36>
  40b2cc:	b90b      	cbnz	r3, 40b2d2 <client_state_run+0x36>
        ctx->holdoff = 1;
  40b2ce:	2301      	movs	r3, #1
  40b2d0:	60a3      	str	r3, [r4, #8]
        client_publish_message(&ctx->mqtt_client);
  40b2d2:	f104 0014 	add.w	r0, r4, #20
  40b2d6:	4b04      	ldr	r3, [pc, #16]	; (40b2e8 <client_state_run+0x4c>)
  40b2d8:	4798      	blx	r3
  40b2da:	bd10      	pop	{r4, pc}
  40b2dc:	0040a96d 	.word	0x0040a96d
  40b2e0:	00408679 	.word	0x00408679
  40b2e4:	51eb851f 	.word	0x51eb851f
  40b2e8:	0040b0ed 	.word	0x0040b0ed

0040b2ec <client_state_get_time>:
    if(client_counter_finished(pCtx))
  40b2ec:	6883      	ldr	r3, [r0, #8]
  40b2ee:	b103      	cbz	r3, 40b2f2 <client_state_get_time+0x6>
  40b2f0:	4770      	bx	lr
{
  40b2f2:	b510      	push	{r4, lr}
  40b2f4:	4604      	mov	r4, r0
        if(!time_utils_get_utc())
  40b2f6:	4b06      	ldr	r3, [pc, #24]	; (40b310 <client_state_get_time+0x24>)
  40b2f8:	4798      	blx	r3
  40b2fa:	b120      	cbz	r0, 40b306 <client_state_get_time+0x1a>
  40b2fc:	2302      	movs	r3, #2
  40b2fe:	8023      	strh	r3, [r4, #0]
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
  40b300:	2300      	movs	r3, #0
  40b302:	60a3      	str	r3, [r4, #8]
  40b304:	bd10      	pop	{r4, pc}
            wifi_request_time();
  40b306:	4b03      	ldr	r3, [pc, #12]	; (40b314 <client_state_get_time+0x28>)
  40b308:	4798      	blx	r3
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
  40b30a:	2364      	movs	r3, #100	; 0x64
  40b30c:	60a3      	str	r3, [r4, #8]
  40b30e:	bd10      	pop	{r4, pc}
  40b310:	0040a585 	.word	0x0040a585
  40b314:	0040a9e5 	.word	0x0040a9e5

0040b318 <client_state_connect>:
    if(client_counter_finished(pCtx))
  40b318:	6883      	ldr	r3, [r0, #8]
  40b31a:	b103      	cbz	r3, 40b31e <client_state_connect+0x6>
  40b31c:	4770      	bx	lr
{
  40b31e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b320:	b097      	sub	sp, #92	; 0x5c
  40b322:	4604      	mov	r4, r0
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
  40b324:	2364      	movs	r3, #100	; 0x64
  40b326:	6083      	str	r3, [r0, #8]
    if(config_get_host_info((char*)ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE, &port))
  40b328:	f100 0570 	add.w	r5, r0, #112	; 0x70
  40b32c:	466a      	mov	r2, sp
  40b32e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40b332:	4628      	mov	r0, r5
  40b334:	4b2f      	ldr	r3, [pc, #188]	; (40b3f4 <client_state_connect+0xdc>)
  40b336:	4798      	blx	r3
  40b338:	b928      	cbnz	r0, 40b346 <client_state_connect+0x2e>
    if(wifi_connect((char*)ctx->mqtt_rx_buf, port))
  40b33a:	f8bd 1000 	ldrh.w	r1, [sp]
  40b33e:	4628      	mov	r0, r5
  40b340:	4b2d      	ldr	r3, [pc, #180]	; (40b3f8 <client_state_connect+0xe0>)
  40b342:	4798      	blx	r3
        if(client_connect_socket(pCtx))
  40b344:	b108      	cbz	r0, 40b34a <client_state_connect+0x32>
}
  40b346:	b017      	add	sp, #92	; 0x5c
  40b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MQTTPacket_connectData mqtt_options = MQTTPacket_connectData_initializer;
  40b34a:	2258      	movs	r2, #88	; 0x58
  40b34c:	492b      	ldr	r1, [pc, #172]	; (40b3fc <client_state_connect+0xe4>)
  40b34e:	4668      	mov	r0, sp
  40b350:	4b2b      	ldr	r3, [pc, #172]	; (40b400 <client_state_connect+0xe8>)
  40b352:	4798      	blx	r3
    mqtt_options.keepAliveInterval = MQTT_KEEP_ALIVE_INTERVAL_S;
  40b354:	f44f 7361 	mov.w	r3, #900	; 0x384
  40b358:	f8ad 3018 	strh.w	r3, [sp, #24]
    mqtt_options.clientID.cstring = (char*)&ctx->mqtt_rx_buf[0];
  40b35c:	9503      	str	r5, [sp, #12]
    if(config_get_client_id(mqtt_options.clientID.cstring, buf_bytes_remaining))
  40b35e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40b362:	4628      	mov	r0, r5
  40b364:	4b27      	ldr	r3, [pc, #156]	; (40b404 <client_state_connect+0xec>)
  40b366:	4798      	blx	r3
  40b368:	2800      	cmp	r0, #0
  40b36a:	d13d      	bne.n	40b3e8 <client_state_connect+0xd0>
    mqtt_options.username.cstring = mqtt_options.clientID.cstring + strlen(mqtt_options.clientID.cstring) + 1;
  40b36c:	9d03      	ldr	r5, [sp, #12]
  40b36e:	4628      	mov	r0, r5
  40b370:	4b25      	ldr	r3, [pc, #148]	; (40b408 <client_state_connect+0xf0>)
  40b372:	4798      	blx	r3
  40b374:	1c41      	adds	r1, r0, #1
  40b376:	1868      	adds	r0, r5, r1
  40b378:	9010      	str	r0, [sp, #64]	; 0x40
    buf_bytes_remaining -= (mqtt_options.username.cstring - mqtt_options.clientID.cstring);
  40b37a:	f5c1 6580 	rsb	r5, r1, #1024	; 0x400
    if(config_get_client_username(mqtt_options.username.cstring, buf_bytes_remaining))
  40b37e:	4629      	mov	r1, r5
  40b380:	4b22      	ldr	r3, [pc, #136]	; (40b40c <client_state_connect+0xf4>)
  40b382:	4798      	blx	r3
  40b384:	2800      	cmp	r0, #0
  40b386:	d12f      	bne.n	40b3e8 <client_state_connect+0xd0>
    mqtt_options.password.cstring = mqtt_options.username.cstring + strlen(mqtt_options.username.cstring) + 1;
  40b388:	9e10      	ldr	r6, [sp, #64]	; 0x40
  40b38a:	4630      	mov	r0, r6
  40b38c:	4b1e      	ldr	r3, [pc, #120]	; (40b408 <client_state_connect+0xf0>)
  40b38e:	4798      	blx	r3
  40b390:	1c41      	adds	r1, r0, #1
  40b392:	1870      	adds	r0, r6, r1
  40b394:	9013      	str	r0, [sp, #76]	; 0x4c
    if(config_get_client_password(mqtt_options.password.cstring, buf_bytes_remaining))
  40b396:	1a69      	subs	r1, r5, r1
  40b398:	4b1d      	ldr	r3, [pc, #116]	; (40b410 <client_state_connect+0xf8>)
  40b39a:	4798      	blx	r3
  40b39c:	bb20      	cbnz	r0, 40b3e8 <client_state_connect+0xd0>
    return MQTTConnect(&ctx->mqtt_client, &mqtt_options);
  40b39e:	f104 0514 	add.w	r5, r4, #20
  40b3a2:	4669      	mov	r1, sp
  40b3a4:	4628      	mov	r0, r5
  40b3a6:	4b1b      	ldr	r3, [pc, #108]	; (40b414 <client_state_connect+0xfc>)
  40b3a8:	4798      	blx	r3
        if(status)
  40b3aa:	4601      	mov	r1, r0
  40b3ac:	b9f0      	cbnz	r0, 40b3ec <client_state_connect+0xd4>
    status = config_get_client_sub_topic((char*)ctx->sub_topic, sizeof(ctx->sub_topic));
  40b3ae:	f504 6607 	add.w	r6, r4, #2160	; 0x870
  40b3b2:	2164      	movs	r1, #100	; 0x64
  40b3b4:	4630      	mov	r0, r6
  40b3b6:	4b18      	ldr	r3, [pc, #96]	; (40b418 <client_state_connect+0x100>)
  40b3b8:	4798      	blx	r3
    if (status != MQTTCLIENT_SUCCESS)
  40b3ba:	4607      	mov	r7, r0
  40b3bc:	b960      	cbnz	r0, 40b3d8 <client_state_connect+0xc0>
    status = MQTTSubscribe(&ctx->mqtt_client, ctx->sub_topic, QOS1, &client_process_message);
  40b3be:	4b17      	ldr	r3, [pc, #92]	; (40b41c <client_state_connect+0x104>)
  40b3c0:	2201      	movs	r2, #1
  40b3c2:	4631      	mov	r1, r6
  40b3c4:	4628      	mov	r0, r5
  40b3c6:	4d16      	ldr	r5, [pc, #88]	; (40b420 <client_state_connect+0x108>)
  40b3c8:	47a8      	blx	r5
        if(status)
  40b3ca:	4607      	mov	r7, r0
  40b3cc:	b938      	cbnz	r0, 40b3de <client_state_connect+0xc6>
  40b3ce:	2303      	movs	r3, #3
  40b3d0:	8023      	strh	r3, [r4, #0]
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
  40b3d2:	2300      	movs	r3, #0
  40b3d4:	60a3      	str	r3, [r4, #8]
  40b3d6:	e7b6      	b.n	40b346 <client_state_connect+0x2e>
        CLIENT_PRINTF("Failed to load the subscription topic name");
  40b3d8:	4812      	ldr	r0, [pc, #72]	; (40b424 <client_state_connect+0x10c>)
  40b3da:	4b13      	ldr	r3, [pc, #76]	; (40b428 <client_state_connect+0x110>)
  40b3dc:	4798      	blx	r3
            CLIENT_PRINTF("MQTT Subscription Failed (%d)\r\n", status);
  40b3de:	4639      	mov	r1, r7
  40b3e0:	4812      	ldr	r0, [pc, #72]	; (40b42c <client_state_connect+0x114>)
  40b3e2:	4b11      	ldr	r3, [pc, #68]	; (40b428 <client_state_connect+0x110>)
  40b3e4:	4798      	blx	r3
            return;
  40b3e6:	e7ae      	b.n	40b346 <client_state_connect+0x2e>
  40b3e8:	f04f 31ff 	mov.w	r1, #4294967295
            CLIENT_PRINTF("MQTT Client Failed to Connect (%d)\r\n", status);
  40b3ec:	4810      	ldr	r0, [pc, #64]	; (40b430 <client_state_connect+0x118>)
  40b3ee:	4b0e      	ldr	r3, [pc, #56]	; (40b428 <client_state_connect+0x110>)
  40b3f0:	4798      	blx	r3
            return;
  40b3f2:	e7a8      	b.n	40b346 <client_state_connect+0x2e>
  40b3f4:	0040b6f1 	.word	0x0040b6f1
  40b3f8:	0040aa0d 	.word	0x0040aa0d
  40b3fc:	00417080 	.word	0x00417080
  40b400:	0040dc41 	.word	0x0040dc41
  40b404:	0040b511 	.word	0x0040b511
  40b408:	0040e7c1 	.word	0x0040e7c1
  40b40c:	0040b571 	.word	0x0040b571
  40b410:	0040b5b1 	.word	0x0040b5b1
  40b414:	004086f1 	.word	0x004086f1
  40b418:	0040b6ad 	.word	0x0040b6ad
  40b41c:	0040b1d9 	.word	0x0040b1d9
  40b420:	004087c1 	.word	0x004087c1
  40b424:	004171d0 	.word	0x004171d0
  40b428:	0040d42d 	.word	0x0040d42d
  40b42c:	004171fc 	.word	0x004171fc
  40b430:	004171a8 	.word	0x004171a8

0040b434 <client_timer_update>:
    if(g_client_context.holdoff)
  40b434:	4b03      	ldr	r3, [pc, #12]	; (40b444 <client_timer_update+0x10>)
  40b436:	689b      	ldr	r3, [r3, #8]
  40b438:	b113      	cbz	r3, 40b440 <client_timer_update+0xc>
        g_client_context.holdoff--;
  40b43a:	3b01      	subs	r3, #1
  40b43c:	4a01      	ldr	r2, [pc, #4]	; (40b444 <client_timer_update+0x10>)
  40b43e:	6093      	str	r3, [r2, #8]
  40b440:	4770      	bx	lr
  40b442:	bf00      	nop
  40b444:	20001404 	.word	0x20001404

0040b448 <client_task>:
    TINY_STATE_DEF(CLIENT_STATE_ERROR,      &client_state_error),
};

/* Assume a 100ms time basis */
void client_task(void)
{
  40b448:	b538      	push	{r3, r4, r5, lr}
    if(!g_client_context.state.count)
  40b44a:	4b14      	ldr	r3, [pc, #80]	; (40b49c <client_task+0x54>)
  40b44c:	885b      	ldrh	r3, [r3, #2]
  40b44e:	b9e3      	cbnz	r3, 40b48a <client_task+0x42>
    ((tiny_state_ctx*)context)->states = states;
  40b450:	4a12      	ldr	r2, [pc, #72]	; (40b49c <client_task+0x54>)
  40b452:	4b13      	ldr	r3, [pc, #76]	; (40b4a0 <client_task+0x58>)
  40b454:	6053      	str	r3, [r2, #4]
    ((tiny_state_ctx*)context)->count = count;
  40b456:	2405      	movs	r4, #5
  40b458:	8054      	strh	r4, [r2, #2]
    ((tiny_state_ctx*)context)->state = initial;
  40b45a:	2500      	movs	r5, #0
  40b45c:	8015      	strh	r5, [r2, #0]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
  40b45e:	4618      	mov	r0, r3
        if(states[i]._s == state)
  40b460:	681b      	ldr	r3, [r3, #0]
  40b462:	b163      	cbz	r3, 40b47e <client_task+0x36>
  40b464:	f100 020c 	add.w	r2, r0, #12
{
  40b468:	2300      	movs	r3, #0
    for(i=0;i<count;i++)
  40b46a:	3301      	adds	r3, #1
  40b46c:	b29b      	uxth	r3, r3
  40b46e:	42a3      	cmp	r3, r4
  40b470:	d20a      	bcs.n	40b488 <client_task+0x40>
        if(states[i]._s == state)
  40b472:	4610      	mov	r0, r2
  40b474:	f852 1b0c 	ldr.w	r1, [r2], #12
  40b478:	42a9      	cmp	r1, r5
  40b47a:	d1f6      	bne.n	40b46a <client_task+0x22>
    if(pState && pState->_f)
  40b47c:	b168      	cbz	r0, 40b49a <client_task+0x52>
  40b47e:	6883      	ldr	r3, [r0, #8]
  40b480:	b15b      	cbz	r3, 40b49a <client_task+0x52>
        pState->_f(context);
  40b482:	4806      	ldr	r0, [pc, #24]	; (40b49c <client_task+0x54>)
  40b484:	4798      	blx	r3
	    tiny_state_init(&g_client_context, g_client_states, sizeof(g_client_states)/sizeof(g_client_states[0]), CLIENT_STATE_INIT);
    }

    /* Run the state machine*/
    tiny_state_driver(&g_client_context);
}
  40b486:	bd38      	pop	{r3, r4, r5, pc}
  40b488:	bd38      	pop	{r3, r4, r5, pc}
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
  40b48a:	4b04      	ldr	r3, [pc, #16]	; (40b49c <client_task+0x54>)
  40b48c:	6858      	ldr	r0, [r3, #4]
  40b48e:	885c      	ldrh	r4, [r3, #2]
        if(states[i]._s == state)
  40b490:	881d      	ldrh	r5, [r3, #0]
  40b492:	6803      	ldr	r3, [r0, #0]
  40b494:	42ab      	cmp	r3, r5
  40b496:	d1e5      	bne.n	40b464 <client_task+0x1c>
  40b498:	e7f0      	b.n	40b47c <client_task+0x34>
  40b49a:	bd38      	pop	{r3, r4, r5, pc}
  40b49c:	20001404 	.word	0x20001404
  40b4a0:	2000025c 	.word	0x2000025c

0040b4a4 <config_crypto>:

#endif /* CONFIG_USE_STATIC_CONFIG */

void config_crypto(void)
{
    cfg_ateccx08a_i2c_default.atcai2c.slave_address  = 0xB0;
  40b4a4:	4b02      	ldr	r3, [pc, #8]	; (40b4b0 <config_crypto+0xc>)
  40b4a6:	22b0      	movs	r2, #176	; 0xb0
  40b4a8:	711a      	strb	r2, [r3, #4]
#if BOARD == SAMW25_XPLAINED_PRO
    /* For the ATSAMW25-XPRO Development Board */
    cfg_ateccx08a_i2c_default.atcai2c.bus = 0;
#elif BOARD == SAMG55_XPLAINED_PRO
    /* For the ATSAMG55-XPRO Development board */
    cfg_ateccx08a_i2c_default.atcai2c.bus = 1;
  40b4aa:	2201      	movs	r2, #1
  40b4ac:	715a      	strb	r2, [r3, #5]
  40b4ae:	4770      	bx	lr
  40b4b0:	200001ac 	.word	0x200001ac

0040b4b4 <config_ready>:
}

bool config_ready(void)
{
    return true;
}
  40b4b4:	2001      	movs	r0, #1
  40b4b6:	4770      	bx	lr

0040b4b8 <config_get_ssid>:
/** \brief Populate the buffer with the wifi access point ssid */
int config_get_ssid(char* buf, size_t buflen)
{
    int status = -1;

    if(buf && buflen)
  40b4b8:	4602      	mov	r2, r0
  40b4ba:	b148      	cbz	r0, 40b4d0 <config_get_ssid+0x18>
    {
        /* Copy the demo ssid into the buffer */
        if(sizeof(config_demo_ssid) <= buflen)
  40b4bc:	2909      	cmp	r1, #9
  40b4be:	d90a      	bls.n	40b4d6 <config_get_ssid+0x1e>
        {
            memcpy(buf, config_demo_ssid, sizeof(config_demo_ssid));
  40b4c0:	4b06      	ldr	r3, [pc, #24]	; (40b4dc <config_get_ssid+0x24>)
  40b4c2:	cb03      	ldmia	r3!, {r0, r1}
  40b4c4:	6010      	str	r0, [r2, #0]
  40b4c6:	6051      	str	r1, [r2, #4]
  40b4c8:	881b      	ldrh	r3, [r3, #0]
  40b4ca:	8113      	strh	r3, [r2, #8]
            status = 0;
  40b4cc:	2000      	movs	r0, #0
  40b4ce:	4770      	bx	lr
    int status = -1;
  40b4d0:	f04f 30ff 	mov.w	r0, #4294967295
  40b4d4:	4770      	bx	lr
  40b4d6:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }

    return status;
}
  40b4da:	4770      	bx	lr
  40b4dc:	00417360 	.word	0x00417360

0040b4e0 <config_get_password>:
/** \brief Populate the buffer with the wifi access point password */
int config_get_password(char* buf, size_t buflen)
{
    int status = -1;

    if(buf && buflen)
  40b4e0:	b170      	cbz	r0, 40b500 <config_get_password+0x20>
{
  40b4e2:	b430      	push	{r4, r5}
  40b4e4:	4605      	mov	r5, r0
    {
        /* Copy the demo password into the buffer*/
        if(sizeof(config_demo_pass) <= buflen)
  40b4e6:	2913      	cmp	r1, #19
  40b4e8:	d90d      	bls.n	40b506 <config_get_password+0x26>
        {
            memcpy(buf, config_demo_pass, sizeof(config_demo_pass));
  40b4ea:	4c08      	ldr	r4, [pc, #32]	; (40b50c <config_get_password+0x2c>)
  40b4ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40b4ee:	6028      	str	r0, [r5, #0]
  40b4f0:	6069      	str	r1, [r5, #4]
  40b4f2:	60aa      	str	r2, [r5, #8]
  40b4f4:	60eb      	str	r3, [r5, #12]
  40b4f6:	6820      	ldr	r0, [r4, #0]
  40b4f8:	6128      	str	r0, [r5, #16]
            status = 0;
  40b4fa:	2000      	movs	r0, #0
        }
    }

    return status;
}
  40b4fc:	bc30      	pop	{r4, r5}
  40b4fe:	4770      	bx	lr
    int status = -1;
  40b500:	f04f 30ff 	mov.w	r0, #4294967295
  40b504:	4770      	bx	lr
  40b506:	f04f 30ff 	mov.w	r0, #4294967295
    return status;
  40b50a:	e7f7      	b.n	40b4fc <config_get_password+0x1c>
  40b50c:	0041734c 	.word	0x0041734c

0040b510 <config_get_client_id>:

/** \brief Populate the buffer with the client id */
int config_get_client_id(char* buf, size_t buflen)
{
    if(buf && buflen)
  40b510:	b1b0      	cbz	r0, 40b540 <config_get_client_id+0x30>
{
  40b512:	b570      	push	{r4, r5, r6, lr}
  40b514:	b084      	sub	sp, #16
  40b516:	4605      	mov	r5, r0
    if(buf && buflen)
  40b518:	b1a9      	cbz	r1, 40b546 <config_get_client_id+0x36>
  40b51a:	460c      	mov	r4, r1
    {
        int rv;

        rv = snprintf(buf, buflen, "projects/%s/locations/%s/registries/%s/devices/%s", 
  40b51c:	4b0e      	ldr	r3, [pc, #56]	; (40b558 <config_get_client_id+0x48>)
  40b51e:	9302      	str	r3, [sp, #8]
  40b520:	4b0e      	ldr	r3, [pc, #56]	; (40b55c <config_get_client_id+0x4c>)
  40b522:	9301      	str	r3, [sp, #4]
  40b524:	4b0e      	ldr	r3, [pc, #56]	; (40b560 <config_get_client_id+0x50>)
  40b526:	9300      	str	r3, [sp, #0]
  40b528:	4b0e      	ldr	r3, [pc, #56]	; (40b564 <config_get_client_id+0x54>)
  40b52a:	4a0f      	ldr	r2, [pc, #60]	; (40b568 <config_get_client_id+0x58>)
  40b52c:	4e0f      	ldr	r6, [pc, #60]	; (40b56c <config_get_client_id+0x5c>)
  40b52e:	47b0      	blx	r6
            config_gcp_project_id, config_gcp_region_id, config_gcp_registry_id, config_gcp_thing_id);

        if(0 < rv && rv < buflen)
  40b530:	1e03      	subs	r3, r0, #0
  40b532:	dd0b      	ble.n	40b54c <config_get_client_id+0x3c>
  40b534:	429c      	cmp	r4, r3
  40b536:	d90c      	bls.n	40b552 <config_get_client_id+0x42>
        {
            buf[rv] = 0;
  40b538:	2000      	movs	r0, #0
  40b53a:	54e8      	strb	r0, [r5, r3]
            return 0;
        }
    }
    return -1;
}
  40b53c:	b004      	add	sp, #16
  40b53e:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
  40b540:	f04f 30ff 	mov.w	r0, #4294967295
  40b544:	4770      	bx	lr
  40b546:	f04f 30ff 	mov.w	r0, #4294967295
  40b54a:	e7f7      	b.n	40b53c <config_get_client_id+0x2c>
  40b54c:	f04f 30ff 	mov.w	r0, #4294967295
  40b550:	e7f4      	b.n	40b53c <config_get_client_id+0x2c>
  40b552:	f04f 30ff 	mov.w	r0, #4294967295
  40b556:	e7f1      	b.n	40b53c <config_get_client_id+0x2c>
  40b558:	004172c8 	.word	0x004172c8
  40b55c:	004172bc 	.word	0x004172bc
  40b560:	004172b0 	.word	0x004172b0
  40b564:	0041729c 	.word	0x0041729c
  40b568:	004172d8 	.word	0x004172d8
  40b56c:	0040e401 	.word	0x0040e401

0040b570 <config_get_client_username>:

/* Populate the buffer with the username */
int config_get_client_username(char* buf, size_t buflen)
{
    if(buf && buflen)
  40b570:	b168      	cbz	r0, 40b58e <config_get_client_username+0x1e>
{
  40b572:	b538      	push	{r3, r4, r5, lr}
  40b574:	4605      	mov	r5, r0
    if(buf && buflen)
  40b576:	b169      	cbz	r1, 40b594 <config_get_client_username+0x24>
  40b578:	460c      	mov	r4, r1
    {
        int rv = snprintf(buf, buflen, "unused");
  40b57a:	4a0b      	ldr	r2, [pc, #44]	; (40b5a8 <config_get_client_username+0x38>)
  40b57c:	4b0b      	ldr	r3, [pc, #44]	; (40b5ac <config_get_client_username+0x3c>)
  40b57e:	4798      	blx	r3

        if(0 < rv && rv < buflen)
  40b580:	1e03      	subs	r3, r0, #0
  40b582:	dd0a      	ble.n	40b59a <config_get_client_username+0x2a>
  40b584:	429c      	cmp	r4, r3
  40b586:	d90b      	bls.n	40b5a0 <config_get_client_username+0x30>
        {
            buf[rv] = 0;
  40b588:	2000      	movs	r0, #0
  40b58a:	54e8      	strb	r0, [r5, r3]
            return 0;
  40b58c:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    return -1;
  40b58e:	f04f 30ff 	mov.w	r0, #4294967295
  40b592:	4770      	bx	lr
  40b594:	f04f 30ff 	mov.w	r0, #4294967295
  40b598:	bd38      	pop	{r3, r4, r5, pc}
  40b59a:	f04f 30ff 	mov.w	r0, #4294967295
  40b59e:	bd38      	pop	{r3, r4, r5, pc}
  40b5a0:	f04f 30ff 	mov.w	r0, #4294967295
}
  40b5a4:	bd38      	pop	{r3, r4, r5, pc}
  40b5a6:	bf00      	nop
  40b5a8:	00417340 	.word	0x00417340
  40b5ac:	0040e401 	.word	0x0040e401

0040b5b0 <config_get_client_password>:

/* Populate the buffer with the user's password */
int config_get_client_password(char* buf, size_t buflen)
{
  40b5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b5b2:	b083      	sub	sp, #12
    int rv = -1;

    if(buf && buflen)
  40b5b4:	2800      	cmp	r0, #0
  40b5b6:	d039      	beq.n	40b62c <config_get_client_password+0x7c>
  40b5b8:	4605      	mov	r5, r0
  40b5ba:	2900      	cmp	r1, #0
  40b5bc:	d039      	beq.n	40b632 <config_get_client_password+0x82>
  40b5be:	460c      	mov	r4, r1
    {
        atca_jwt_t jwt;
        
        uint32_t ts = time_utils_get_utc();
  40b5c0:	4b1d      	ldr	r3, [pc, #116]	; (40b638 <config_get_client_password+0x88>)
  40b5c2:	4798      	blx	r3
  40b5c4:	4607      	mov	r7, r0

        rv = atcab_init(&cfg_ateccx08a_i2c_default);
  40b5c6:	481d      	ldr	r0, [pc, #116]	; (40b63c <config_get_client_password+0x8c>)
  40b5c8:	4b1d      	ldr	r3, [pc, #116]	; (40b640 <config_get_client_password+0x90>)
  40b5ca:	4798      	blx	r3
  40b5cc:	4606      	mov	r6, r0
        if(ATCA_SUCCESS != rv)
  40b5ce:	b110      	cbz	r0, 40b5d6 <config_get_client_password+0x26>
        rv = atca_jwt_finalize(&jwt, 0);

        atcab_release();
    }
    return rv;
}
  40b5d0:	4630      	mov	r0, r6
  40b5d2:	b003      	add	sp, #12
  40b5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rv = atca_jwt_init(&jwt, buf, buflen);
  40b5d6:	b2a2      	uxth	r2, r4
  40b5d8:	4629      	mov	r1, r5
  40b5da:	4668      	mov	r0, sp
  40b5dc:	4b19      	ldr	r3, [pc, #100]	; (40b644 <config_get_client_password+0x94>)
  40b5de:	4798      	blx	r3
  40b5e0:	4606      	mov	r6, r0
        if(ATCA_SUCCESS != rv)
  40b5e2:	2800      	cmp	r0, #0
  40b5e4:	d1f4      	bne.n	40b5d0 <config_get_client_password+0x20>
        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "iat", ts)))
  40b5e6:	463a      	mov	r2, r7
  40b5e8:	4917      	ldr	r1, [pc, #92]	; (40b648 <config_get_client_password+0x98>)
  40b5ea:	4668      	mov	r0, sp
  40b5ec:	4b17      	ldr	r3, [pc, #92]	; (40b64c <config_get_client_password+0x9c>)
  40b5ee:	4798      	blx	r3
  40b5f0:	4606      	mov	r6, r0
  40b5f2:	2800      	cmp	r0, #0
  40b5f4:	d1ec      	bne.n	40b5d0 <config_get_client_password+0x20>
        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "exp", ts + 86400)))
  40b5f6:	f507 32a8 	add.w	r2, r7, #86016	; 0x15000
  40b5fa:	f502 72c0 	add.w	r2, r2, #384	; 0x180
  40b5fe:	4914      	ldr	r1, [pc, #80]	; (40b650 <config_get_client_password+0xa0>)
  40b600:	4668      	mov	r0, sp
  40b602:	4b12      	ldr	r3, [pc, #72]	; (40b64c <config_get_client_password+0x9c>)
  40b604:	4798      	blx	r3
  40b606:	4606      	mov	r6, r0
  40b608:	2800      	cmp	r0, #0
  40b60a:	d1e1      	bne.n	40b5d0 <config_get_client_password+0x20>
        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_string(&jwt, "aud", config_gcp_project_id)))
  40b60c:	4a11      	ldr	r2, [pc, #68]	; (40b654 <config_get_client_password+0xa4>)
  40b60e:	4912      	ldr	r1, [pc, #72]	; (40b658 <config_get_client_password+0xa8>)
  40b610:	4668      	mov	r0, sp
  40b612:	4b12      	ldr	r3, [pc, #72]	; (40b65c <config_get_client_password+0xac>)
  40b614:	4798      	blx	r3
  40b616:	4606      	mov	r6, r0
  40b618:	2800      	cmp	r0, #0
  40b61a:	d1d9      	bne.n	40b5d0 <config_get_client_password+0x20>
        rv = atca_jwt_finalize(&jwt, 0);
  40b61c:	2100      	movs	r1, #0
  40b61e:	4668      	mov	r0, sp
  40b620:	4b0f      	ldr	r3, [pc, #60]	; (40b660 <config_get_client_password+0xb0>)
  40b622:	4798      	blx	r3
  40b624:	4606      	mov	r6, r0
        atcab_release();
  40b626:	4b0f      	ldr	r3, [pc, #60]	; (40b664 <config_get_client_password+0xb4>)
  40b628:	4798      	blx	r3
  40b62a:	e7d1      	b.n	40b5d0 <config_get_client_password+0x20>
    int rv = -1;
  40b62c:	f04f 36ff 	mov.w	r6, #4294967295
  40b630:	e7ce      	b.n	40b5d0 <config_get_client_password+0x20>
  40b632:	f04f 36ff 	mov.w	r6, #4294967295
  40b636:	e7cb      	b.n	40b5d0 <config_get_client_password+0x20>
  40b638:	0040a585 	.word	0x0040a585
  40b63c:	200001ac 	.word	0x200001ac
  40b640:	00406ec9 	.word	0x00406ec9
  40b644:	00407fd1 	.word	0x00407fd1
  40b648:	0041730c 	.word	0x0041730c
  40b64c:	00408225 	.word	0x00408225
  40b650:	00417310 	.word	0x00417310
  40b654:	0041729c 	.word	0x0041729c
  40b658:	00417314 	.word	0x00417314
  40b65c:	004081b1 	.word	0x004081b1
  40b660:	00408045 	.word	0x00408045
  40b664:	00406eb5 	.word	0x00406eb5

0040b668 <config_get_client_pub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_pub_topic(char* buf, size_t buflen)
{
    if(buf && buflen)
  40b668:	b170      	cbz	r0, 40b688 <config_get_client_pub_topic+0x20>
{
  40b66a:	b570      	push	{r4, r5, r6, lr}
  40b66c:	4605      	mov	r5, r0
    if(buf && buflen)
  40b66e:	b171      	cbz	r1, 40b68e <config_get_client_pub_topic+0x26>
  40b670:	460c      	mov	r4, r1
    {
        int rv = snprintf(buf, buflen, "/devices/%s/events", config_gcp_thing_id);
  40b672:	4b0b      	ldr	r3, [pc, #44]	; (40b6a0 <config_get_client_pub_topic+0x38>)
  40b674:	4a0b      	ldr	r2, [pc, #44]	; (40b6a4 <config_get_client_pub_topic+0x3c>)
  40b676:	4e0c      	ldr	r6, [pc, #48]	; (40b6a8 <config_get_client_pub_topic+0x40>)
  40b678:	47b0      	blx	r6

        if(0 < rv && rv < buflen)
  40b67a:	1e03      	subs	r3, r0, #0
  40b67c:	dd0a      	ble.n	40b694 <config_get_client_pub_topic+0x2c>
  40b67e:	429c      	cmp	r4, r3
  40b680:	d90b      	bls.n	40b69a <config_get_client_pub_topic+0x32>
        {
            buf[rv] = 0;
  40b682:	2000      	movs	r0, #0
  40b684:	54e8      	strb	r0, [r5, r3]
            return 0;
  40b686:	bd70      	pop	{r4, r5, r6, pc}
        }
    }
    return -1;
  40b688:	f04f 30ff 	mov.w	r0, #4294967295
  40b68c:	4770      	bx	lr
  40b68e:	f04f 30ff 	mov.w	r0, #4294967295
  40b692:	bd70      	pop	{r4, r5, r6, pc}
  40b694:	f04f 30ff 	mov.w	r0, #4294967295
  40b698:	bd70      	pop	{r4, r5, r6, pc}
  40b69a:	f04f 30ff 	mov.w	r0, #4294967295
}
  40b69e:	bd70      	pop	{r4, r5, r6, pc}
  40b6a0:	004172c8 	.word	0x004172c8
  40b6a4:	00417318 	.word	0x00417318
  40b6a8:	0040e401 	.word	0x0040e401

0040b6ac <config_get_client_sub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_sub_topic(char* buf, size_t buflen)
{
    if(buf && buflen)
  40b6ac:	b170      	cbz	r0, 40b6cc <config_get_client_sub_topic+0x20>
{
  40b6ae:	b570      	push	{r4, r5, r6, lr}
  40b6b0:	4605      	mov	r5, r0
    if(buf && buflen)
  40b6b2:	b171      	cbz	r1, 40b6d2 <config_get_client_sub_topic+0x26>
  40b6b4:	460c      	mov	r4, r1
    {
        int rv = snprintf(buf, buflen, "/devices/%s/config", config_gcp_thing_id);
  40b6b6:	4b0b      	ldr	r3, [pc, #44]	; (40b6e4 <config_get_client_sub_topic+0x38>)
  40b6b8:	4a0b      	ldr	r2, [pc, #44]	; (40b6e8 <config_get_client_sub_topic+0x3c>)
  40b6ba:	4e0c      	ldr	r6, [pc, #48]	; (40b6ec <config_get_client_sub_topic+0x40>)
  40b6bc:	47b0      	blx	r6

        if(0 < rv && rv < buflen)
  40b6be:	1e03      	subs	r3, r0, #0
  40b6c0:	dd0a      	ble.n	40b6d8 <config_get_client_sub_topic+0x2c>
  40b6c2:	429c      	cmp	r4, r3
  40b6c4:	d90b      	bls.n	40b6de <config_get_client_sub_topic+0x32>
        {
            buf[rv] = 0;
  40b6c6:	2000      	movs	r0, #0
  40b6c8:	54e8      	strb	r0, [r5, r3]
            return 0;
  40b6ca:	bd70      	pop	{r4, r5, r6, pc}
        }
    }
    return -1;
  40b6cc:	f04f 30ff 	mov.w	r0, #4294967295
  40b6d0:	4770      	bx	lr
  40b6d2:	f04f 30ff 	mov.w	r0, #4294967295
  40b6d6:	bd70      	pop	{r4, r5, r6, pc}
  40b6d8:	f04f 30ff 	mov.w	r0, #4294967295
  40b6dc:	bd70      	pop	{r4, r5, r6, pc}
  40b6de:	f04f 30ff 	mov.w	r0, #4294967295
}
  40b6e2:	bd70      	pop	{r4, r5, r6, pc}
  40b6e4:	004172c8 	.word	0x004172c8
  40b6e8:	0041732c 	.word	0x0041732c
  40b6ec:	0040e401 	.word	0x0040e401

0040b6f0 <config_get_host_info>:
/* Retrieve the host connection information */
int config_get_host_info(char* buf, size_t buflen, uint16_t * port)
{
    int rv;

    if(!buf || !buflen || !port)
  40b6f0:	b190      	cbz	r0, 40b718 <config_get_host_info+0x28>
{
  40b6f2:	b570      	push	{r4, r5, r6, lr}
  40b6f4:	4605      	mov	r5, r0
    if(!buf || !buflen || !port)
  40b6f6:	b191      	cbz	r1, 40b71e <config_get_host_info+0x2e>
  40b6f8:	b1a2      	cbz	r2, 40b724 <config_get_host_info+0x34>
  40b6fa:	460c      	mov	r4, r1
    {
        return -1;
    }

    *port = config_gcp_mqtt_port;
  40b6fc:	f240 13bb 	movw	r3, #443	; 0x1bb
  40b700:	8013      	strh	r3, [r2, #0]

    rv = snprintf(buf, buflen, "%s", config_gcp_host_name);
  40b702:	4b0d      	ldr	r3, [pc, #52]	; (40b738 <config_get_host_info+0x48>)
  40b704:	4a0d      	ldr	r2, [pc, #52]	; (40b73c <config_get_host_info+0x4c>)
  40b706:	4e0e      	ldr	r6, [pc, #56]	; (40b740 <config_get_host_info+0x50>)
  40b708:	47b0      	blx	r6

    if(0 < rv && rv < buflen)
  40b70a:	1e03      	subs	r3, r0, #0
  40b70c:	dd0d      	ble.n	40b72a <config_get_host_info+0x3a>
  40b70e:	429c      	cmp	r4, r3
  40b710:	d90e      	bls.n	40b730 <config_get_host_info+0x40>
    {
        buf[rv] = 0;
  40b712:	2000      	movs	r0, #0
  40b714:	54e8      	strb	r0, [r5, r3]
        return 0;
  40b716:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
  40b718:	f04f 30ff 	mov.w	r0, #4294967295
  40b71c:	4770      	bx	lr
  40b71e:	f04f 30ff 	mov.w	r0, #4294967295
  40b722:	bd70      	pop	{r4, r5, r6, pc}
  40b724:	f04f 30ff 	mov.w	r0, #4294967295
  40b728:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        /* Failed */
        return -1;
  40b72a:	f04f 30ff 	mov.w	r0, #4294967295
  40b72e:	bd70      	pop	{r4, r5, r6, pc}
  40b730:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
  40b734:	bd70      	pop	{r4, r5, r6, pc}
  40b736:	bf00      	nop
  40b738:	00417288 	.word	0x00417288
  40b73c:	00417348 	.word	0x00417348
  40b740:	0040e401 	.word	0x0040e401

0040b744 <config_print_public_key>:
const uint8_t public_key_x509_header[] = { 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86,
                                           0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A,
                                           0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 
                                           0x42, 0x00, 0x04 };
int config_print_public_key(void)
{
  40b744:	b510      	push	{r4, lr}
  40b746:	b0a2      	sub	sp, #136	; 0x88
    uint8_t buf[128];
    uint8_t * tmp;
    size_t buf_len = sizeof(buf);
  40b748:	2380      	movs	r3, #128	; 0x80
  40b74a:	9301      	str	r3, [sp, #4]
    int i;

    ATCA_STATUS rv = atcab_init(&cfg_ateccx08a_i2c_default);
  40b74c:	481c      	ldr	r0, [pc, #112]	; (40b7c0 <config_print_public_key+0x7c>)
  40b74e:	4b1d      	ldr	r3, [pc, #116]	; (40b7c4 <config_print_public_key+0x80>)
  40b750:	4798      	blx	r3
    if(ATCA_SUCCESS != rv)
  40b752:	b108      	cbz	r0, 40b758 <config_print_public_key+0x14>
    buf[buf_len] = 0;

    /* Print out the key */
    DEBUG_PRINTF("-----BEGIN PUBLIC KEY-----\r\n%s\r\n-----END PUBLIC KEY-----\r\n", buf);

  40b754:	b022      	add	sp, #136	; 0x88
  40b756:	bd10      	pop	{r4, pc}
    memcpy(tmp, public_key_x509_header, sizeof(public_key_x509_header));
  40b758:	4c1b      	ldr	r4, [pc, #108]	; (40b7c8 <config_print_public_key+0x84>)
  40b75a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40b75c:	f8cd 002d 	str.w	r0, [sp, #45]	; 0x2d
  40b760:	f8cd 1031 	str.w	r1, [sp, #49]	; 0x31
  40b764:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
  40b768:	f8cd 3039 	str.w	r3, [sp, #57]	; 0x39
  40b76c:	cc03      	ldmia	r4!, {r0, r1}
  40b76e:	f8cd 003d 	str.w	r0, [sp, #61]	; 0x3d
  40b772:	f8cd 1041 	str.w	r1, [sp, #65]	; 0x41
  40b776:	8822      	ldrh	r2, [r4, #0]
  40b778:	78a3      	ldrb	r3, [r4, #2]
  40b77a:	f8ad 2045 	strh.w	r2, [sp, #69]	; 0x45
  40b77e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    rv = atcab_get_pubkey(0, tmp + sizeof(public_key_x509_header));
  40b782:	a912      	add	r1, sp, #72	; 0x48
  40b784:	2000      	movs	r0, #0
  40b786:	4b11      	ldr	r3, [pc, #68]	; (40b7cc <config_print_public_key+0x88>)
  40b788:	4798      	blx	r3
  40b78a:	4604      	mov	r4, r0
    atcab_release();
  40b78c:	4b10      	ldr	r3, [pc, #64]	; (40b7d0 <config_print_public_key+0x8c>)
  40b78e:	4798      	blx	r3
    if (ATCA_SUCCESS != rv ) {
  40b790:	b10c      	cbz	r4, 40b796 <config_print_public_key+0x52>
        return rv;
  40b792:	4620      	mov	r0, r4
  40b794:	e7de      	b.n	40b754 <config_print_public_key+0x10>
    rv = atcab_base64encode(tmp, ATCA_PUB_KEY_SIZE + sizeof(public_key_x509_header), buf, &buf_len);
  40b796:	ab01      	add	r3, sp, #4
  40b798:	aa02      	add	r2, sp, #8
  40b79a:	215b      	movs	r1, #91	; 0x5b
  40b79c:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
  40b7a0:	4c0c      	ldr	r4, [pc, #48]	; (40b7d4 <config_print_public_key+0x90>)
  40b7a2:	47a0      	blx	r4
    if(ATCA_SUCCESS != rv)
  40b7a4:	2800      	cmp	r0, #0
  40b7a6:	d1d5      	bne.n	40b754 <config_print_public_key+0x10>
    buf[buf_len] = 0;
  40b7a8:	9b01      	ldr	r3, [sp, #4]
  40b7aa:	aa22      	add	r2, sp, #136	; 0x88
  40b7ac:	4413      	add	r3, r2
  40b7ae:	2200      	movs	r2, #0
  40b7b0:	f803 2c80 	strb.w	r2, [r3, #-128]
    DEBUG_PRINTF("-----BEGIN PUBLIC KEY-----\r\n%s\r\n-----END PUBLIC KEY-----\r\n", buf);
  40b7b4:	a902      	add	r1, sp, #8
  40b7b6:	4808      	ldr	r0, [pc, #32]	; (40b7d8 <config_print_public_key+0x94>)
  40b7b8:	4b08      	ldr	r3, [pc, #32]	; (40b7dc <config_print_public_key+0x98>)
  40b7ba:	4798      	blx	r3
  40b7bc:	e7ca      	b.n	40b754 <config_print_public_key+0x10>
  40b7be:	bf00      	nop
  40b7c0:	200001ac 	.word	0x200001ac
  40b7c4:	00406ec9 	.word	0x00406ec9
  40b7c8:	004173a8 	.word	0x004173a8
  40b7cc:	004076d1 	.word	0x004076d1
  40b7d0:	00406eb5 	.word	0x00406eb5
  40b7d4:	004072fd 	.word	0x004072fd
  40b7d8:	0041736c 	.word	0x0041736c
  40b7dc:	0040d42d 	.word	0x0040d42d

0040b7e0 <atca_kit_get_rx_buffer>:
 *  \return pointer to the current rx buffer index
 */
uint8_t* atca_kit_get_rx_buffer(void)
{
	return pucUsbRxBuffer;
}
  40b7e0:	4800      	ldr	r0, [pc, #0]	; (40b7e4 <atca_kit_get_rx_buffer+0x4>)
  40b7e2:	4770      	bx	lr
  40b7e4:	20001ce8 	.word	0x20001ce8

0040b7e8 <atca_kit_lock>:
	return pucUsbTxBuffer;
}

bool atca_kit_lock(void)
{
    return atca_kit_holdoff;
  40b7e8:	4b02      	ldr	r3, [pc, #8]	; (40b7f4 <atca_kit_lock+0xc>)
  40b7ea:	6818      	ldr	r0, [r3, #0]
}
  40b7ec:	3000      	adds	r0, #0
  40b7ee:	bf18      	it	ne
  40b7f0:	2001      	movne	r0, #1
  40b7f2:	4770      	bx	lr
  40b7f4:	20001ce0 	.word	0x20001ce0

0040b7f8 <atca_kit_timer_update>:
}

/* Must be called on the TIMER_UPDATE_PERIOD */
void atca_kit_timer_update(void)
{
    if(atca_kit_holdoff)
  40b7f8:	4b03      	ldr	r3, [pc, #12]	; (40b808 <atca_kit_timer_update+0x10>)
  40b7fa:	681b      	ldr	r3, [r3, #0]
  40b7fc:	b113      	cbz	r3, 40b804 <atca_kit_timer_update+0xc>
    {
        atca_kit_holdoff--;
  40b7fe:	3b01      	subs	r3, #1
  40b800:	4a01      	ldr	r2, [pc, #4]	; (40b808 <atca_kit_timer_update+0x10>)
  40b802:	6013      	str	r3, [r2, #0]
  40b804:	4770      	bx	lr
  40b806:	bf00      	nop
  40b808:	20001ce0 	.word	0x20001ce0

0040b80c <atca_kit_convert_nibble_to_ascii>:
 * \param[in] nibble nibble value to be converted
 * \return ASCII value
**/
uint8_t atca_kit_convert_nibble_to_ascii(uint8_t nibble)
{
    nibble &= 0x0F;
  40b80c:	f000 000f 	and.w	r0, r0, #15
    if (nibble <= 0x09 )
  40b810:	2809      	cmp	r0, #9
        nibble += '0';
  40b812:	bf94      	ite	ls
  40b814:	3030      	addls	r0, #48	; 0x30
    else
        nibble += ('A' - 10);
  40b816:	3037      	addhi	r0, #55	; 0x37
    return nibble;
}
  40b818:	4770      	bx	lr

0040b81a <atca_kit_convert_ascii_to_nibble>:
/** \brief This function converts an ASCII character to a nibble.
 * \param[in] ascii ASCII value to be converted
 * \return nibble value
**/
uint8_t atca_kit_convert_ascii_to_nibble(uint8_t ascii)
{
  40b81a:	4602      	mov	r2, r0
    if ((ascii <= '9') && (ascii >= '0'))
  40b81c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40b820:	b2d8      	uxtb	r0, r3
  40b822:	2809      	cmp	r0, #9
  40b824:	d912      	bls.n	40b84c <atca_kit_convert_ascii_to_nibble+0x32>
        ascii -= '0';
    else if ((ascii <= 'F' ) && (ascii >= 'A'))
  40b826:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
  40b82a:	b2db      	uxtb	r3, r3
  40b82c:	2b05      	cmp	r3, #5
  40b82e:	d908      	bls.n	40b842 <atca_kit_convert_ascii_to_nibble+0x28>
        ascii -= ('A' - 10);
    else if ((ascii <= 'f') && (ascii >= 'a'))
  40b830:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
  40b834:	b2db      	uxtb	r3, r3
  40b836:	2b05      	cmp	r3, #5
  40b838:	d807      	bhi.n	40b84a <atca_kit_convert_ascii_to_nibble+0x30>
        ascii -= ('a' - 10);
  40b83a:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
  40b83e:	b2c0      	uxtb	r0, r0
  40b840:	4770      	bx	lr
        ascii -= ('A' - 10);
  40b842:	f1a2 0037 	sub.w	r0, r2, #55	; 0x37
  40b846:	b2c0      	uxtb	r0, r0
  40b848:	4770      	bx	lr
    else
        ascii = 0;
  40b84a:	2000      	movs	r0, #0
    return ascii;
}
  40b84c:	4770      	bx	lr
	...

0040b850 <atca_kit_convert_ascii_to_binary>:
 * \param[in] length number of bytes in buffer
 * \param[in, out] buffer pointer to buffer
 * \return number of bytes in buffer
 */
uint16_t atca_kit_convert_ascii_to_binary(uint16_t length, uint8_t *buffer)
{
  40b850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (length < 2)
		return 0;

	uint16_t i, binIndex;

	for (i = 0, binIndex = 0; i < length; i += 2)
  40b854:	2801      	cmp	r0, #1
  40b856:	d91b      	bls.n	40b890 <atca_kit_convert_ascii_to_binary+0x40>
  40b858:	460f      	mov	r7, r1
  40b85a:	4681      	mov	r9, r0
  40b85c:	2600      	movs	r6, #0
  40b85e:	4634      	mov	r4, r6
	{
		buffer[binIndex] = atca_kit_convert_ascii_to_nibble(buffer[i]) << 4;
  40b860:	f8df 8030 	ldr.w	r8, [pc, #48]	; 40b894 <atca_kit_convert_ascii_to_binary+0x44>
  40b864:	eb07 0a06 	add.w	sl, r7, r6
  40b868:	5d38      	ldrb	r0, [r7, r4]
  40b86a:	47c0      	blx	r8
  40b86c:	0100      	lsls	r0, r0, #4
  40b86e:	b2c5      	uxtb	r5, r0
  40b870:	55bd      	strb	r5, [r7, r6]
		buffer[binIndex++] |= atca_kit_convert_ascii_to_nibble(buffer[i + 1]);
  40b872:	193b      	adds	r3, r7, r4
  40b874:	7858      	ldrb	r0, [r3, #1]
  40b876:	47c0      	blx	r8
  40b878:	3601      	adds	r6, #1
  40b87a:	b2b6      	uxth	r6, r6
  40b87c:	4328      	orrs	r0, r5
  40b87e:	f88a 0000 	strb.w	r0, [sl]
	for (i = 0, binIndex = 0; i < length; i += 2)
  40b882:	3402      	adds	r4, #2
  40b884:	b2a4      	uxth	r4, r4
  40b886:	45a1      	cmp	r9, r4
  40b888:	d8ec      	bhi.n	40b864 <atca_kit_convert_ascii_to_binary+0x14>
	}

	return binIndex;
}
  40b88a:	4630      	mov	r0, r6
  40b88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0, binIndex = 0; i < length; i += 2)
  40b890:	2600      	movs	r6, #0
  40b892:	e7fa      	b.n	40b88a <atca_kit_convert_ascii_to_binary+0x3a>
  40b894:	0040b81b 	.word	0x0040b81b

0040b898 <atca_kit_detect_I2c_devices>:
		return DEVICE_TYPE_UNKNOWN;
	return device_info[index].device_type;
}

ATCA_STATUS atca_kit_detect_I2c_devices()
{
  40b898:	b530      	push	{r4, r5, lr}
  40b89a:	b083      	sub	sp, #12
	ATCA_STATUS status = ATCA_NO_DEVICES;
	uint8_t revision[4];

	status = atcab_init( &cfg_ateccx08a_i2c_default );
  40b89c:	4810      	ldr	r0, [pc, #64]	; (40b8e0 <atca_kit_detect_I2c_devices+0x48>)
  40b89e:	4b11      	ldr	r3, [pc, #68]	; (40b8e4 <atca_kit_detect_I2c_devices+0x4c>)
  40b8a0:	4798      	blx	r3
	if (status != ATCA_SUCCESS) return status;
  40b8a2:	4603      	mov	r3, r0
  40b8a4:	b110      	cbz	r0, 40b8ac <atca_kit_detect_I2c_devices+0x14>
	memcpy(device_info[device_count].dev_rev, revision, sizeof(revision));

	device_count++;
	
	return status;
}
  40b8a6:	4618      	mov	r0, r3
  40b8a8:	b003      	add	sp, #12
  40b8aa:	bd30      	pop	{r4, r5, pc}
	status = atcab_info(revision);
  40b8ac:	a801      	add	r0, sp, #4
  40b8ae:	4b0e      	ldr	r3, [pc, #56]	; (40b8e8 <atca_kit_detect_I2c_devices+0x50>)
  40b8b0:	4798      	blx	r3
	if (status != ATCA_SUCCESS) {
  40b8b2:	4603      	mov	r3, r0
  40b8b4:	2800      	cmp	r0, #0
  40b8b6:	d1f6      	bne.n	40b8a6 <atca_kit_detect_I2c_devices+0xe>
	device_info[device_count].address = cfg_ateccx08a_i2c_default.atcai2c.slave_address;
  40b8b8:	480c      	ldr	r0, [pc, #48]	; (40b8ec <atca_kit_detect_I2c_devices+0x54>)
  40b8ba:	7802      	ldrb	r2, [r0, #0]
  40b8bc:	490c      	ldr	r1, [pc, #48]	; (40b8f0 <atca_kit_detect_I2c_devices+0x58>)
  40b8be:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
  40b8c2:	4d07      	ldr	r5, [pc, #28]	; (40b8e0 <atca_kit_detect_I2c_devices+0x48>)
  40b8c4:	792d      	ldrb	r5, [r5, #4]
  40b8c6:	70a5      	strb	r5, [r4, #2]
	device_info[device_count].bus_type = DEVKIT_IF_I2C;
  40b8c8:	2502      	movs	r5, #2
  40b8ca:	f801 5032 	strb.w	r5, [r1, r2, lsl #3]
	device_info[device_count].device_type = DEVICE_TYPE_ECC508A;
  40b8ce:	250b      	movs	r5, #11
  40b8d0:	7065      	strb	r5, [r4, #1]
	memcpy(device_info[device_count].dev_rev, revision, sizeof(revision));
  40b8d2:	3104      	adds	r1, #4
  40b8d4:	9c01      	ldr	r4, [sp, #4]
  40b8d6:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
	device_count++;
  40b8da:	3201      	adds	r2, #1
  40b8dc:	7002      	strb	r2, [r0, #0]
	return status;
  40b8de:	e7e2      	b.n	40b8a6 <atca_kit_detect_I2c_devices+0xe>
  40b8e0:	200001ac 	.word	0x200001ac
  40b8e4:	00406ec9 	.word	0x00406ec9
  40b8e8:	00407739 	.word	0x00407739
  40b8ec:	20001ce4 	.word	0x20001ce4
  40b8f0:	20003048 	.word	0x20003048

0040b8f4 <atca_kit_discover_devices>:
 *         SWI, I2C, and SPI. They in turn enter found
 *         devices into the #device_info array.
 * \return interface found
 */
interface_id_t atca_kit_discover_devices()
{
  40b8f4:	b510      	push	{r4, lr}
	ATCA_STATUS status = ATCA_NO_DEVICES;
	interface_id_t bus_type;

	device_count = 0;
  40b8f6:	4c09      	ldr	r4, [pc, #36]	; (40b91c <atca_kit_discover_devices+0x28>)
  40b8f8:	2300      	movs	r3, #0
  40b8fa:	7023      	strb	r3, [r4, #0]
	memset(device_info, 0, sizeof(device_info));
  40b8fc:	4a08      	ldr	r2, [pc, #32]	; (40b920 <atca_kit_discover_devices+0x2c>)
  40b8fe:	6013      	str	r3, [r2, #0]
  40b900:	6053      	str	r3, [r2, #4]

	status = atca_kit_detect_I2c_devices();
  40b902:	4b08      	ldr	r3, [pc, #32]	; (40b924 <atca_kit_discover_devices+0x30>)
  40b904:	4798      	blx	r3

	if (device_count == 0 || status != ATCA_SUCCESS)
  40b906:	7823      	ldrb	r3, [r4, #0]
  40b908:	b11b      	cbz	r3, 40b912 <atca_kit_discover_devices+0x1e>
  40b90a:	b920      	cbnz	r0, 40b916 <atca_kit_discover_devices+0x22>
		return DEVKIT_IF_UNKNOWN;

	bus_type = device_info[0].bus_type;
  40b90c:	4b04      	ldr	r3, [pc, #16]	; (40b920 <atca_kit_discover_devices+0x2c>)
  40b90e:	7818      	ldrb	r0, [r3, #0]

	return bus_type;
  40b910:	bd10      	pop	{r4, pc}
		return DEVKIT_IF_UNKNOWN;
  40b912:	2000      	movs	r0, #0
  40b914:	bd10      	pop	{r4, pc}
  40b916:	2000      	movs	r0, #0
}
  40b918:	bd10      	pop	{r4, pc}
  40b91a:	bf00      	nop
  40b91c:	20001ce4 	.word	0x20001ce4
  40b920:	20003048 	.word	0x20003048
  40b924:	0040b899 	.word	0x0040b899

0040b928 <atca_kit_get_commands_info>:
 * \param[out] cmd_index is index corresponding to opcode
 * \param[out] rx_length is length of response to be came to device
 * \return ATCA_SUCCESS
 */
uint8_t atca_kit_get_commands_info(uint8_t *tx_buffer, uint8_t *cmd_index, uint16_t *rx_length)
{
  40b928:	b410      	push	{r4}
	uint8_t status = ATCA_SUCCESS;
	uint8_t opCode = tx_buffer[1];
	uint8_t param1 = tx_buffer[2];
  40b92a:	7884      	ldrb	r4, [r0, #2]
	
	switch (opCode) {
  40b92c:	7843      	ldrb	r3, [r0, #1]
  40b92e:	3b01      	subs	r3, #1
  40b930:	2b46      	cmp	r3, #70	; 0x46
  40b932:	d829      	bhi.n	40b988 <atca_kit_get_commands_info+0x60>
  40b934:	e8df f003 	tbb	[pc, r3]
  40b938:	28287364 	.word	0x28287364
  40b93c:	57282828 	.word	0x57282828
  40b940:	28282828 	.word	0x28282828
  40b944:	28282828 	.word	0x28282828
  40b948:	28289348 	.word	0x28289348
  40b94c:	28525c3b 	.word	0x28525c3b
  40b950:	316e2828 	.word	0x316e2828
  40b954:	89282828 	.word	0x89282828
  40b958:	2c282828 	.word	0x2c282828
  40b95c:	24282828 	.word	0x24282828
  40b960:	28282828 	.word	0x28282828
  40b964:	4d282828 	.word	0x4d282828
  40b968:	28282828 	.word	0x28282828
  40b96c:	28282828 	.word	0x28282828
  40b970:	28282828 	.word	0x28282828
  40b974:	40282828 	.word	0x40282828
  40b978:	28362884 	.word	0x28362884
  40b97c:	698e      	.short	0x698e
  40b97e:	7c          	.byte	0x7c
  40b97f:	00          	.byte	0x00
		
		case ATCA_CHECKMAC:
			*cmd_index = CMD_CHECKMAC;
  40b980:	2301      	movs	r3, #1
  40b982:	700b      	strb	r3, [r1, #0]
			*rx_length = CHECKMAC_RSP_SIZE;
  40b984:	2304      	movs	r3, #4
  40b986:	8013      	strh	r3, [r2, #0]
			break;
		
	}

	return status;
}
  40b988:	2000      	movs	r0, #0
  40b98a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b98e:	4770      	bx	lr
			*cmd_index = CMD_COUNTER;
  40b990:	2302      	movs	r3, #2
  40b992:	700b      	strb	r3, [r1, #0]
			*rx_length = COUNTER_RSP_SIZE;
  40b994:	2307      	movs	r3, #7
  40b996:	8013      	strh	r3, [r2, #0]
			break;
  40b998:	e7f6      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_DERIVEKEY;
  40b99a:	2303      	movs	r3, #3
  40b99c:	700b      	strb	r3, [r1, #0]
			*rx_length = DERIVE_KEY_RSP_SIZE;
  40b99e:	2304      	movs	r3, #4
  40b9a0:	8013      	strh	r3, [r2, #0]
			break;
  40b9a2:	e7f1      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_ECDH;
  40b9a4:	2304      	movs	r3, #4
  40b9a6:	700b      	strb	r3, [r1, #0]
			*rx_length = ECDH_RSP_SIZE;
  40b9a8:	2343      	movs	r3, #67	; 0x43
  40b9aa:	8013      	strh	r3, [r2, #0]
			break;
  40b9ac:	e7ec      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_GENDIG;
  40b9ae:	2305      	movs	r3, #5
  40b9b0:	700b      	strb	r3, [r1, #0]
			*rx_length = GENDIG_RSP_SIZE;
  40b9b2:	2304      	movs	r3, #4
  40b9b4:	8013      	strh	r3, [r2, #0]
			break;
  40b9b6:	e7e7      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_GENKEY;
  40b9b8:	2306      	movs	r3, #6
  40b9ba:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 == GENKEY_MODE_DIGEST)	? GENKEY_RSP_SIZE_SHORT : GENKEY_RSP_SIZE_LONG;
  40b9bc:	2c08      	cmp	r4, #8
  40b9be:	bf0c      	ite	eq
  40b9c0:	2304      	moveq	r3, #4
  40b9c2:	234b      	movne	r3, #75	; 0x4b
  40b9c4:	8013      	strh	r3, [r2, #0]
			break;
  40b9c6:	e7df      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_HMAC;
  40b9c8:	2307      	movs	r3, #7
  40b9ca:	700b      	strb	r3, [r1, #0]
			*rx_length = HMAC_RSP_SIZE;
  40b9cc:	2323      	movs	r3, #35	; 0x23
  40b9ce:	8013      	strh	r3, [r2, #0]
			break;
  40b9d0:	e7da      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_INFO;
  40b9d2:	2308      	movs	r3, #8
  40b9d4:	700b      	strb	r3, [r1, #0]
			*rx_length = INFO_RSP_SIZE;
  40b9d6:	2307      	movs	r3, #7
  40b9d8:	8013      	strh	r3, [r2, #0]
			break;
  40b9da:	e7d5      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_LOCK;
  40b9dc:	2309      	movs	r3, #9
  40b9de:	700b      	strb	r3, [r1, #0]
			*rx_length = LOCK_RSP_SIZE;
  40b9e0:	2304      	movs	r3, #4
  40b9e2:	8013      	strh	r3, [r2, #0]
			break;
  40b9e4:	e7d0      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_MAC;
  40b9e6:	230a      	movs	r3, #10
  40b9e8:	700b      	strb	r3, [r1, #0]
			*rx_length = MAC_RSP_SIZE;
  40b9ea:	2323      	movs	r3, #35	; 0x23
  40b9ec:	8013      	strh	r3, [r2, #0]
			break;
  40b9ee:	e7cb      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_NONCE;
  40b9f0:	230b      	movs	r3, #11
  40b9f2:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 == NONCE_MODE_PASSTHROUGH)	? NONCE_RSP_SIZE_SHORT : NONCE_RSP_SIZE_LONG;
  40b9f4:	2c03      	cmp	r4, #3
  40b9f6:	bf0c      	ite	eq
  40b9f8:	2304      	moveq	r3, #4
  40b9fa:	2323      	movne	r3, #35	; 0x23
  40b9fc:	8013      	strh	r3, [r2, #0]
			break;
  40b9fe:	e7c3      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_PAUSE;
  40ba00:	230c      	movs	r3, #12
  40ba02:	700b      	strb	r3, [r1, #0]
			*rx_length = PAUSE_RSP_SIZE;
  40ba04:	2304      	movs	r3, #4
  40ba06:	8013      	strh	r3, [r2, #0]
			break;
  40ba08:	e7be      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_PRIVWRITE;
  40ba0a:	230d      	movs	r3, #13
  40ba0c:	700b      	strb	r3, [r1, #0]
			*rx_length = PRIVWRITE_RSP_SIZE;
  40ba0e:	2304      	movs	r3, #4
  40ba10:	8013      	strh	r3, [r2, #0]
			break;
  40ba12:	e7b9      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_RANDOM;
  40ba14:	230e      	movs	r3, #14
  40ba16:	700b      	strb	r3, [r1, #0]
			*rx_length = RANDOM_RSP_SIZE;
  40ba18:	2323      	movs	r3, #35	; 0x23
  40ba1a:	8013      	strh	r3, [r2, #0]
			break;
  40ba1c:	e7b4      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_READMEM;
  40ba1e:	230f      	movs	r3, #15
  40ba20:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 & 0x80)	? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
  40ba22:	b264      	sxtb	r4, r4
  40ba24:	2c00      	cmp	r4, #0
  40ba26:	bfb4      	ite	lt
  40ba28:	2323      	movlt	r3, #35	; 0x23
  40ba2a:	2307      	movge	r3, #7
  40ba2c:	8013      	strh	r3, [r2, #0]
			break;
  40ba2e:	e7ab      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_SHA;
  40ba30:	2310      	movs	r3, #16
  40ba32:	700b      	strb	r3, [r1, #0]
			*rx_length = (param1 == SHA_MODE_SHA256_END) ? ATCA_RSP_SIZE_32 : ATCA_RSP_SIZE_4;
  40ba34:	2c02      	cmp	r4, #2
  40ba36:	bf0c      	ite	eq
  40ba38:	2323      	moveq	r3, #35	; 0x23
  40ba3a:	2307      	movne	r3, #7
  40ba3c:	8013      	strh	r3, [r2, #0]
			break;
  40ba3e:	e7a3      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_SIGN;
  40ba40:	2311      	movs	r3, #17
  40ba42:	700b      	strb	r3, [r1, #0]
			*rx_length = SIGN_RSP_SIZE;
  40ba44:	234b      	movs	r3, #75	; 0x4b
  40ba46:	8013      	strh	r3, [r2, #0]
			break;
  40ba48:	e79e      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_UPDATEEXTRA;
  40ba4a:	2312      	movs	r3, #18
  40ba4c:	700b      	strb	r3, [r1, #0]
			*rx_length = UPDATE_RSP_SIZE;
  40ba4e:	2304      	movs	r3, #4
  40ba50:	8013      	strh	r3, [r2, #0]
			break;
  40ba52:	e799      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_VERIFY;
  40ba54:	2313      	movs	r3, #19
  40ba56:	700b      	strb	r3, [r1, #0]
			*rx_length = VERIFY_RSP_SIZE;
  40ba58:	2304      	movs	r3, #4
  40ba5a:	8013      	strh	r3, [r2, #0]
			break;
  40ba5c:	e794      	b.n	40b988 <atca_kit_get_commands_info+0x60>
			*cmd_index = CMD_WRITEMEM;
  40ba5e:	2314      	movs	r3, #20
  40ba60:	700b      	strb	r3, [r1, #0]
			*rx_length = WRITE_RSP_SIZE;
  40ba62:	2304      	movs	r3, #4
  40ba64:	8013      	strh	r3, [r2, #0]
			break;
  40ba66:	e78f      	b.n	40b988 <atca_kit_get_commands_info+0x60>

0040ba68 <atca_kit_send_and_receive>:
 * \param[in] tx_buffer is buffer to be sent
 * \param[in] rx_buffer is buffer to be received
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_and_receive(uint8_t *tx_buffer, uint8_t *rx_buffer)
{
  40ba68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ba6c:	b083      	sub	sp, #12
	ATCACommand _CommandObj = NULL;
	ATCAIface   _Iface = NULL;

	do {

		if ( tx_buffer == NULL || rx_buffer == NULL )
  40ba6e:	2800      	cmp	r0, #0
  40ba70:	d049      	beq.n	40bb06 <atca_kit_send_and_receive+0x9e>
  40ba72:	4604      	mov	r4, r0
  40ba74:	2900      	cmp	r1, #0
  40ba76:	d048      	beq.n	40bb0a <atca_kit_send_and_receive+0xa2>
  40ba78:	460d      	mov	r5, r1
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
  40ba7a:	aa01      	add	r2, sp, #4
  40ba7c:	f10d 0107 	add.w	r1, sp, #7
  40ba80:	4b23      	ldr	r3, [pc, #140]	; (40bb10 <atca_kit_send_and_receive+0xa8>)
  40ba82:	4798      	blx	r3
  40ba84:	b120      	cbz	r0, 40ba90 <atca_kit_send_and_receive+0x28>
	uint8_t status = ATCA_SUCCESS;
  40ba86:	2600      	movs	r6, #0

	} while(0);
	
	return status;
	
}
  40ba88:	4630      	mov	r0, r6
  40ba8a:	b003      	add	sp, #12
  40ba8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
  40ba90:	7826      	ldrb	r6, [r4, #0]
  40ba92:	1c70      	adds	r0, r6, #1
  40ba94:	4b1f      	ldr	r3, [pc, #124]	; (40bb14 <atca_kit_send_and_receive+0xac>)
  40ba96:	4798      	blx	r3
  40ba98:	4607      	mov	r7, r0
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
  40ba9a:	4632      	mov	r2, r6
  40ba9c:	4621      	mov	r1, r4
  40ba9e:	3001      	adds	r0, #1
  40baa0:	4b1d      	ldr	r3, [pc, #116]	; (40bb18 <atca_kit_send_and_receive+0xb0>)
  40baa2:	4798      	blx	r3
		_Device= atcab_get_device();
  40baa4:	4b1d      	ldr	r3, [pc, #116]	; (40bb1c <atca_kit_send_and_receive+0xb4>)
  40baa6:	4798      	blx	r3
		_CommandObj = atGetCommands(_gDevice);
  40baa8:	4b1d      	ldr	r3, [pc, #116]	; (40bb20 <atca_kit_send_and_receive+0xb8>)
  40baaa:	6818      	ldr	r0, [r3, #0]
  40baac:	4b1d      	ldr	r3, [pc, #116]	; (40bb24 <atca_kit_send_and_receive+0xbc>)
  40baae:	4798      	blx	r3
  40bab0:	4680      	mov	r8, r0
        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
  40bab2:	4601      	mov	r1, r0
  40bab4:	7860      	ldrb	r0, [r4, #1]
  40bab6:	4b1c      	ldr	r3, [pc, #112]	; (40bb28 <atca_kit_send_and_receive+0xc0>)
  40bab8:	4798      	blx	r3
  40baba:	4606      	mov	r6, r0
  40babc:	2800      	cmp	r0, #0
  40babe:	d1e3      	bne.n	40ba88 <atca_kit_send_and_receive+0x20>
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
  40bac0:	4b1a      	ldr	r3, [pc, #104]	; (40bb2c <atca_kit_send_and_receive+0xc4>)
  40bac2:	4798      	blx	r3
  40bac4:	4606      	mov	r6, r0
  40bac6:	2800      	cmp	r0, #0
  40bac8:	d1de      	bne.n	40ba88 <atca_kit_send_and_receive+0x20>
		_Device= atcab_get_device();
  40baca:	4b14      	ldr	r3, [pc, #80]	; (40bb1c <atca_kit_send_and_receive+0xb4>)
  40bacc:	4798      	blx	r3
		_Iface = atGetIFace(_Device);
  40bace:	4b18      	ldr	r3, [pc, #96]	; (40bb30 <atca_kit_send_and_receive+0xc8>)
  40bad0:	4798      	blx	r3
  40bad2:	4681      	mov	r9, r0
		if ((status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
  40bad4:	7822      	ldrb	r2, [r4, #0]
  40bad6:	4639      	mov	r1, r7
  40bad8:	4b16      	ldr	r3, [pc, #88]	; (40bb34 <atca_kit_send_and_receive+0xcc>)
  40bada:	4798      	blx	r3
  40badc:	4606      	mov	r6, r0
  40bade:	2800      	cmp	r0, #0
  40bae0:	d1d2      	bne.n	40ba88 <atca_kit_send_and_receive+0x20>
		atca_delay_ms(_CommandObj->execution_time_msec);
  40bae2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  40bae6:	4b14      	ldr	r3, [pc, #80]	; (40bb38 <atca_kit_send_and_receive+0xd0>)
  40bae8:	4798      	blx	r3
		if ((status = atreceive( _Iface, rx_buffer, &rx_length)) != ATCA_SUCCESS )
  40baea:	aa01      	add	r2, sp, #4
  40baec:	4629      	mov	r1, r5
  40baee:	4648      	mov	r0, r9
  40baf0:	4b12      	ldr	r3, [pc, #72]	; (40bb3c <atca_kit_send_and_receive+0xd4>)
  40baf2:	4798      	blx	r3
  40baf4:	4606      	mov	r6, r0
  40baf6:	2800      	cmp	r0, #0
  40baf8:	d1c6      	bne.n	40ba88 <atca_kit_send_and_receive+0x20>
		atcab_idle();
  40bafa:	4b11      	ldr	r3, [pc, #68]	; (40bb40 <atca_kit_send_and_receive+0xd8>)
  40bafc:	4798      	blx	r3
		free((void *)cmd_buffer);
  40bafe:	4638      	mov	r0, r7
  40bb00:	4b10      	ldr	r3, [pc, #64]	; (40bb44 <atca_kit_send_and_receive+0xdc>)
  40bb02:	4798      	blx	r3
  40bb04:	e7c0      	b.n	40ba88 <atca_kit_send_and_receive+0x20>
	uint8_t status = ATCA_SUCCESS;
  40bb06:	2600      	movs	r6, #0
  40bb08:	e7be      	b.n	40ba88 <atca_kit_send_and_receive+0x20>
  40bb0a:	2600      	movs	r6, #0
  40bb0c:	e7bc      	b.n	40ba88 <atca_kit_send_and_receive+0x20>
  40bb0e:	bf00      	nop
  40bb10:	0040b929 	.word	0x0040b929
  40bb14:	0040d595 	.word	0x0040d595
  40bb18:	0040dc41 	.word	0x0040dc41
  40bb1c:	00406f3d 	.word	0x00406f3d
  40bb20:	20000dd8 	.word	0x20000dd8
  40bb24:	00406d79 	.word	0x00406d79
  40bb28:	00406a81 	.word	0x00406a81
  40bb2c:	00406f49 	.word	0x00406f49
  40bb30:	00406d7d 	.word	0x00406d7d
  40bb34:	00406dad 	.word	0x00406dad
  40bb38:	00407f5d 	.word	0x00407f5d
  40bb3c:	00406db5 	.word	0x00406db5
  40bb40:	00406f65 	.word	0x00406f65
  40bb44:	0040d5a5 	.word	0x0040d5a5

0040bb48 <atca_kit_send_command>:
/** \brief Only send a command array.
 * \param[in] tx_buffer is buffer to be sent
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_command(uint8_t *tx_buffer)
{
  40bb48:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bb4a:	b083      	sub	sp, #12
	ATCACommand _CommandObj = NULL;
	ATCAIface   _Iface = NULL;

	do {

		if ( tx_buffer == NULL )
  40bb4c:	2800      	cmp	r0, #0
  40bb4e:	d039      	beq.n	40bbc4 <atca_kit_send_command+0x7c>
  40bb50:	4604      	mov	r4, r0
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
  40bb52:	aa01      	add	r2, sp, #4
  40bb54:	f10d 0107 	add.w	r1, sp, #7
  40bb58:	4b1b      	ldr	r3, [pc, #108]	; (40bbc8 <atca_kit_send_command+0x80>)
  40bb5a:	4798      	blx	r3
  40bb5c:	b118      	cbz	r0, 40bb66 <atca_kit_send_command+0x1e>
	uint8_t status = ATCA_SUCCESS;
  40bb5e:	2500      	movs	r5, #0

	} while(0);
	
	return status;
	
}
  40bb60:	4628      	mov	r0, r5
  40bb62:	b003      	add	sp, #12
  40bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
  40bb66:	7825      	ldrb	r5, [r4, #0]
  40bb68:	1c68      	adds	r0, r5, #1
  40bb6a:	4b18      	ldr	r3, [pc, #96]	; (40bbcc <atca_kit_send_command+0x84>)
  40bb6c:	4798      	blx	r3
  40bb6e:	4606      	mov	r6, r0
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
  40bb70:	462a      	mov	r2, r5
  40bb72:	4621      	mov	r1, r4
  40bb74:	3001      	adds	r0, #1
  40bb76:	4b16      	ldr	r3, [pc, #88]	; (40bbd0 <atca_kit_send_command+0x88>)
  40bb78:	4798      	blx	r3
		_Device= atcab_get_device();
  40bb7a:	4b16      	ldr	r3, [pc, #88]	; (40bbd4 <atca_kit_send_command+0x8c>)
  40bb7c:	4798      	blx	r3
		_CommandObj = atGetCommands(_Device);
  40bb7e:	4b16      	ldr	r3, [pc, #88]	; (40bbd8 <atca_kit_send_command+0x90>)
  40bb80:	4798      	blx	r3
  40bb82:	4607      	mov	r7, r0
        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
  40bb84:	4601      	mov	r1, r0
  40bb86:	7860      	ldrb	r0, [r4, #1]
  40bb88:	4b14      	ldr	r3, [pc, #80]	; (40bbdc <atca_kit_send_command+0x94>)
  40bb8a:	4798      	blx	r3
  40bb8c:	4605      	mov	r5, r0
  40bb8e:	2800      	cmp	r0, #0
  40bb90:	d1e6      	bne.n	40bb60 <atca_kit_send_command+0x18>
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
  40bb92:	4b13      	ldr	r3, [pc, #76]	; (40bbe0 <atca_kit_send_command+0x98>)
  40bb94:	4798      	blx	r3
  40bb96:	4605      	mov	r5, r0
  40bb98:	2800      	cmp	r0, #0
  40bb9a:	d1e1      	bne.n	40bb60 <atca_kit_send_command+0x18>
		_Device= atcab_get_device();
  40bb9c:	4b0d      	ldr	r3, [pc, #52]	; (40bbd4 <atca_kit_send_command+0x8c>)
  40bb9e:	4798      	blx	r3
		_Iface = atGetIFace(_Device);
  40bba0:	4b10      	ldr	r3, [pc, #64]	; (40bbe4 <atca_kit_send_command+0x9c>)
  40bba2:	4798      	blx	r3
		if ( (status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
  40bba4:	7822      	ldrb	r2, [r4, #0]
  40bba6:	4631      	mov	r1, r6
  40bba8:	4b0f      	ldr	r3, [pc, #60]	; (40bbe8 <atca_kit_send_command+0xa0>)
  40bbaa:	4798      	blx	r3
  40bbac:	4605      	mov	r5, r0
  40bbae:	2800      	cmp	r0, #0
  40bbb0:	d1d6      	bne.n	40bb60 <atca_kit_send_command+0x18>
		atca_delay_ms(_CommandObj->execution_time_msec);
  40bbb2:	8878      	ldrh	r0, [r7, #2]
  40bbb4:	4b0d      	ldr	r3, [pc, #52]	; (40bbec <atca_kit_send_command+0xa4>)
  40bbb6:	4798      	blx	r3
		atcab_idle();
  40bbb8:	4b0d      	ldr	r3, [pc, #52]	; (40bbf0 <atca_kit_send_command+0xa8>)
  40bbba:	4798      	blx	r3
		free((void *)cmd_buffer);
  40bbbc:	4630      	mov	r0, r6
  40bbbe:	4b0d      	ldr	r3, [pc, #52]	; (40bbf4 <atca_kit_send_command+0xac>)
  40bbc0:	4798      	blx	r3
  40bbc2:	e7cd      	b.n	40bb60 <atca_kit_send_command+0x18>
	uint8_t status = ATCA_SUCCESS;
  40bbc4:	2500      	movs	r5, #0
  40bbc6:	e7cb      	b.n	40bb60 <atca_kit_send_command+0x18>
  40bbc8:	0040b929 	.word	0x0040b929
  40bbcc:	0040d595 	.word	0x0040d595
  40bbd0:	0040dc41 	.word	0x0040dc41
  40bbd4:	00406f3d 	.word	0x00406f3d
  40bbd8:	00406d79 	.word	0x00406d79
  40bbdc:	00406a81 	.word	0x00406a81
  40bbe0:	00406f49 	.word	0x00406f49
  40bbe4:	00406d7d 	.word	0x00406d7d
  40bbe8:	00406dad 	.word	0x00406dad
  40bbec:	00407f5d 	.word	0x00407f5d
  40bbf0:	00406f65 	.word	0x00406f65
  40bbf4:	0040d5a5 	.word	0x0040d5a5

0040bbf8 <atca_kit_receive_response>:
 * \param[in] size is size to be received
 * \param[out] rx_buffer is buffer that includes data to be received from a device 
 * \return ATCA_STATUS
 */
uint8_t atca_kit_receive_response(uint8_t size, uint8_t *rx_buffer)
{
  40bbf8:	b530      	push	{r4, r5, lr}
  40bbfa:	b083      	sub	sp, #12
	uint8_t status = ATCA_SUCCESS;
	uint16_t rxlength = size;	
  40bbfc:	f8ad 0006 	strh.w	r0, [sp, #6]
	ATCADevice  _Device = NULL;
	ATCAIface   _Iface = NULL;

	do {

		if ( rx_buffer == NULL )
  40bc00:	b1c1      	cbz	r1, 40bc34 <atca_kit_receive_response+0x3c>
  40bc02:	460c      	mov	r4, r1
			break;

		_Device= atcab_get_device();
  40bc04:	4b0c      	ldr	r3, [pc, #48]	; (40bc38 <atca_kit_receive_response+0x40>)
  40bc06:	4798      	blx	r3
		
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
  40bc08:	4b0c      	ldr	r3, [pc, #48]	; (40bc3c <atca_kit_receive_response+0x44>)
  40bc0a:	4798      	blx	r3
  40bc0c:	4605      	mov	r5, r0
  40bc0e:	b110      	cbz	r0, 40bc16 <atca_kit_receive_response+0x1e>

	} while(0);
	
	return status;
	
}
  40bc10:	4628      	mov	r0, r5
  40bc12:	b003      	add	sp, #12
  40bc14:	bd30      	pop	{r4, r5, pc}
		_Device= atcab_get_device();
  40bc16:	4b08      	ldr	r3, [pc, #32]	; (40bc38 <atca_kit_receive_response+0x40>)
  40bc18:	4798      	blx	r3
		_Iface = atGetIFace(_Device);
  40bc1a:	4b09      	ldr	r3, [pc, #36]	; (40bc40 <atca_kit_receive_response+0x48>)
  40bc1c:	4798      	blx	r3
		if ( (status = atreceive( _Iface, rx_buffer, &rxlength)) != ATCA_SUCCESS )
  40bc1e:	f10d 0206 	add.w	r2, sp, #6
  40bc22:	4621      	mov	r1, r4
  40bc24:	4b07      	ldr	r3, [pc, #28]	; (40bc44 <atca_kit_receive_response+0x4c>)
  40bc26:	4798      	blx	r3
  40bc28:	4605      	mov	r5, r0
  40bc2a:	2800      	cmp	r0, #0
  40bc2c:	d1f0      	bne.n	40bc10 <atca_kit_receive_response+0x18>
		atcab_idle();
  40bc2e:	4b06      	ldr	r3, [pc, #24]	; (40bc48 <atca_kit_receive_response+0x50>)
  40bc30:	4798      	blx	r3
  40bc32:	e7ed      	b.n	40bc10 <atca_kit_receive_response+0x18>
	uint8_t status = ATCA_SUCCESS;
  40bc34:	2500      	movs	r5, #0
  40bc36:	e7eb      	b.n	40bc10 <atca_kit_receive_response+0x18>
  40bc38:	00406f3d 	.word	0x00406f3d
  40bc3c:	00406f49 	.word	0x00406f49
  40bc40:	00406d7d 	.word	0x00406d7d
  40bc44:	00406db5 	.word	0x00406db5
  40bc48:	00406f65 	.word	0x00406f65

0040bc4c <atca_kit_extract_data_load>:
 * \return status: invalid parameters or success
 */
uint8_t atca_kit_extract_data_load(const char* command, uint16_t* dataLength, uint8_t** data)
{
	uint8_t status = KIT_STATUS_INVALID_PARAMS;
	if (!command || !dataLength || !data)
  40bc4c:	b1e8      	cbz	r0, 40bc8a <atca_kit_extract_data_load+0x3e>
{
  40bc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bc50:	4606      	mov	r6, r0
	if (!command || !dataLength || !data)
  40bc52:	b1e1      	cbz	r1, 40bc8e <atca_kit_extract_data_load+0x42>
  40bc54:	b1ea      	cbz	r2, 40bc92 <atca_kit_extract_data_load+0x46>
  40bc56:	4615      	mov	r5, r2
  40bc58:	460c      	mov	r4, r1
		return status;

	char* pToken = strchr(command, '(');
  40bc5a:	2128      	movs	r1, #40	; 0x28
  40bc5c:	4b0f      	ldr	r3, [pc, #60]	; (40bc9c <atca_kit_extract_data_load+0x50>)
  40bc5e:	4798      	blx	r3
	if (!pToken)
  40bc60:	4607      	mov	r7, r0
  40bc62:	b1c0      	cbz	r0, 40bc96 <atca_kit_extract_data_load+0x4a>
		return status;

	char* dataEnd = strchr(pToken, ')');
  40bc64:	2129      	movs	r1, #41	; 0x29
  40bc66:	4b0d      	ldr	r3, [pc, #52]	; (40bc9c <atca_kit_extract_data_load+0x50>)
  40bc68:	4798      	blx	r3
	if (!dataEnd)
  40bc6a:	b148      	cbz	r0, 40bc80 <atca_kit_extract_data_load+0x34>
		// Allow a missing closing parenthesis.
		dataEnd = (char *) command + strlen(command);
	else
		dataEnd--;
  40bc6c:	3801      	subs	r0, #1

	uint16_t asciiLength = (uint16_t) (dataEnd - pToken);
	*data = (uint8_t *) pToken + 1;
  40bc6e:	1c79      	adds	r1, r7, #1
  40bc70:	6029      	str	r1, [r5, #0]
	uint16_t asciiLength = (uint16_t) (dataEnd - pToken);
  40bc72:	1bc0      	subs	r0, r0, r7
	*dataLength = atca_kit_convert_ascii_to_binary(asciiLength, *data);
  40bc74:	b280      	uxth	r0, r0
  40bc76:	4b0a      	ldr	r3, [pc, #40]	; (40bca0 <atca_kit_extract_data_load+0x54>)
  40bc78:	4798      	blx	r3
  40bc7a:	8020      	strh	r0, [r4, #0]

	return KIT_STATUS_SUCCESS;
  40bc7c:	2000      	movs	r0, #0
  40bc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dataEnd = (char *) command + strlen(command);
  40bc80:	4630      	mov	r0, r6
  40bc82:	4b08      	ldr	r3, [pc, #32]	; (40bca4 <atca_kit_extract_data_load+0x58>)
  40bc84:	4798      	blx	r3
  40bc86:	4430      	add	r0, r6
  40bc88:	e7f1      	b.n	40bc6e <atca_kit_extract_data_load+0x22>
		return status;
  40bc8a:	20c3      	movs	r0, #195	; 0xc3
  40bc8c:	4770      	bx	lr
  40bc8e:	20c3      	movs	r0, #195	; 0xc3
  40bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bc92:	20c3      	movs	r0, #195	; 0xc3
  40bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return status;
  40bc96:	20c3      	movs	r0, #195	; 0xc3
}
  40bc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bc9a:	bf00      	nop
  40bc9c:	0040e609 	.word	0x0040e609
  40bca0:	0040b851 	.word	0x0040b851
  40bca4:	0040e7c1 	.word	0x0040e7c1

0040bca8 <atca_kit_parse_ecc_commands>:
{
  40bca8:	b570      	push	{r4, r5, r6, lr}
  40bcaa:	b082      	sub	sp, #8
  40bcac:	4608      	mov	r0, r1
  40bcae:	4615      	mov	r5, r2
  40bcb0:	461e      	mov	r6, r3
	char *pToken = strchr((char *) command, ':');
  40bcb2:	213a      	movs	r1, #58	; 0x3a
  40bcb4:	4b4b      	ldr	r3, [pc, #300]	; (40bde4 <atca_kit_parse_ecc_commands+0x13c>)
  40bcb6:	4798      	blx	r3
	*responseLength = 0;
  40bcb8:	2300      	movs	r3, #0
  40bcba:	802b      	strh	r3, [r5, #0]
	if (!pToken)
  40bcbc:	2800      	cmp	r0, #0
  40bcbe:	f000 8088 	beq.w	40bdd2 <atca_kit_parse_ecc_commands+0x12a>
	switch (pToken[1]) {
  40bcc2:	7843      	ldrb	r3, [r0, #1]
  40bcc4:	3b61      	subs	r3, #97	; 0x61
  40bcc6:	2b16      	cmp	r3, #22
  40bcc8:	f200 8085 	bhi.w	40bdd6 <atca_kit_parse_ecc_commands+0x12e>
  40bccc:	e8df f003 	tbb	[pc, r3]
  40bcd0:	8383832d 	.word	0x8383832d
  40bcd4:	83838383 	.word	0x83838383
  40bcd8:	83838329 	.word	0x83838329
  40bcdc:	35838383 	.word	0x35838383
  40bce0:	0c258383 	.word	0x0c258383
  40bce4:	8383      	.short	0x8383
  40bce6:	1f          	.byte	0x1f
  40bce7:	00          	.byte	0x00
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
  40bce8:	466a      	mov	r2, sp
  40bcea:	f10d 0106 	add.w	r1, sp, #6
  40bcee:	3002      	adds	r0, #2
  40bcf0:	4b3d      	ldr	r3, [pc, #244]	; (40bde8 <atca_kit_parse_ecc_commands+0x140>)
  40bcf2:	4798      	blx	r3
			if (status != KIT_STATUS_SUCCESS)
  40bcf4:	4603      	mov	r3, r0
  40bcf6:	b968      	cbnz	r0, 40bd14 <atca_kit_parse_ecc_commands+0x6c>
			response[SHA204_BUFFER_POS_COUNT] = 0;
  40bcf8:	2300      	movs	r3, #0
  40bcfa:	7033      	strb	r3, [r6, #0]
			status = atca_kit_send_and_receive(data_load[0], &response[0]);
  40bcfc:	4631      	mov	r1, r6
  40bcfe:	9800      	ldr	r0, [sp, #0]
  40bd00:	4b3a      	ldr	r3, [pc, #232]	; (40bdec <atca_kit_parse_ecc_commands+0x144>)
  40bd02:	4798      	blx	r3
			if (status != KIT_STATUS_SUCCESS)
  40bd04:	4603      	mov	r3, r0
  40bd06:	b928      	cbnz	r0, 40bd14 <atca_kit_parse_ecc_commands+0x6c>
			*responseLength = response[SHA204_BUFFER_POS_COUNT];
  40bd08:	7832      	ldrb	r2, [r6, #0]
  40bd0a:	802a      	strh	r2, [r5, #0]
			break;
  40bd0c:	e002      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
			status = atcab_wakeup();
  40bd0e:	4b38      	ldr	r3, [pc, #224]	; (40bdf0 <atca_kit_parse_ecc_commands+0x148>)
  40bd10:	4798      	blx	r3
  40bd12:	4603      	mov	r3, r0
}
  40bd14:	4618      	mov	r0, r3
  40bd16:	b002      	add	sp, #8
  40bd18:	bd70      	pop	{r4, r5, r6, pc}
			status = atcab_sleep();
  40bd1a:	4b36      	ldr	r3, [pc, #216]	; (40bdf4 <atca_kit_parse_ecc_commands+0x14c>)
  40bd1c:	4798      	blx	r3
  40bd1e:	4603      	mov	r3, r0
  40bd20:	e7f8      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
			status = atcab_idle();
  40bd22:	4b35      	ldr	r3, [pc, #212]	; (40bdf8 <atca_kit_parse_ecc_commands+0x150>)
  40bd24:	4798      	blx	r3
  40bd26:	4603      	mov	r3, r0
  40bd28:	e7f4      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
  40bd2a:	466a      	mov	r2, sp
  40bd2c:	f10d 0106 	add.w	r1, sp, #6
  40bd30:	3002      	adds	r0, #2
  40bd32:	4b2d      	ldr	r3, [pc, #180]	; (40bde8 <atca_kit_parse_ecc_commands+0x140>)
  40bd34:	4798      	blx	r3
  40bd36:	4603      	mov	r3, r0
  40bd38:	e7ec      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
			pToken = strchr(&pToken[1], ':');
  40bd3a:	213a      	movs	r1, #58	; 0x3a
  40bd3c:	3001      	adds	r0, #1
  40bd3e:	4b29      	ldr	r3, [pc, #164]	; (40bde4 <atca_kit_parse_ecc_commands+0x13c>)
  40bd40:	4798      	blx	r3
			if (!pToken)
  40bd42:	2800      	cmp	r0, #0
  40bd44:	d049      	beq.n	40bdda <atca_kit_parse_ecc_commands+0x132>
			switch (pToken[1]) {
  40bd46:	7843      	ldrb	r3, [r0, #1]
  40bd48:	3b63      	subs	r3, #99	; 0x63
  40bd4a:	2b14      	cmp	r3, #20
  40bd4c:	d847      	bhi.n	40bdde <atca_kit_parse_ecc_commands+0x136>
  40bd4e:	e8df f003 	tbb	[pc, r3]
  40bd52:	460f      	.short	0x460f
  40bd54:	46464646 	.word	0x46464646
  40bd58:	46464646 	.word	0x46464646
  40bd5c:	46464646 	.word	0x46464646
  40bd60:	46331d46 	.word	0x46331d46
  40bd64:	4646      	.short	0x4646
  40bd66:	0b          	.byte	0x0b
  40bd67:	00          	.byte	0x00
					status = atcab_wakeup();
  40bd68:	4b21      	ldr	r3, [pc, #132]	; (40bdf0 <atca_kit_parse_ecc_commands+0x148>)
  40bd6a:	4798      	blx	r3
  40bd6c:	4603      	mov	r3, r0
  40bd6e:	e7d1      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
  40bd70:	466a      	mov	r2, sp
  40bd72:	f10d 0106 	add.w	r1, sp, #6
  40bd76:	3002      	adds	r0, #2
  40bd78:	4b1b      	ldr	r3, [pc, #108]	; (40bde8 <atca_kit_parse_ecc_commands+0x140>)
  40bd7a:	4798      	blx	r3
					if (status != KIT_STATUS_SUCCESS)
  40bd7c:	4603      	mov	r3, r0
  40bd7e:	2800      	cmp	r0, #0
  40bd80:	d1c8      	bne.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
					status = atca_kit_send_command(dataLoad);				
  40bd82:	9800      	ldr	r0, [sp, #0]
  40bd84:	4b1d      	ldr	r3, [pc, #116]	; (40bdfc <atca_kit_parse_ecc_commands+0x154>)
  40bd86:	4798      	blx	r3
  40bd88:	4603      	mov	r3, r0
					break;
  40bd8a:	e7c3      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
  40bd8c:	466a      	mov	r2, sp
  40bd8e:	f10d 0106 	add.w	r1, sp, #6
  40bd92:	3002      	adds	r0, #2
  40bd94:	4b14      	ldr	r3, [pc, #80]	; (40bde8 <atca_kit_parse_ecc_commands+0x140>)
  40bd96:	4798      	blx	r3
					if (status != KIT_STATUS_SUCCESS)
  40bd98:	4603      	mov	r3, r0
  40bd9a:	2800      	cmp	r0, #0
  40bd9c:	d1ba      	bne.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
					response[SHA204_BUFFER_POS_COUNT] = 0;
  40bd9e:	2300      	movs	r3, #0
  40bda0:	7033      	strb	r3, [r6, #0]
					status = atca_kit_receive_response(*data_load[0], response);
  40bda2:	4631      	mov	r1, r6
  40bda4:	9b00      	ldr	r3, [sp, #0]
  40bda6:	7818      	ldrb	r0, [r3, #0]
  40bda8:	4b15      	ldr	r3, [pc, #84]	; (40be00 <atca_kit_parse_ecc_commands+0x158>)
  40bdaa:	4798      	blx	r3
					if (status != KIT_STATUS_SUCCESS)
  40bdac:	4603      	mov	r3, r0
  40bdae:	2800      	cmp	r0, #0
  40bdb0:	d1b0      	bne.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
					*responseLength = response[SHA204_BUFFER_POS_COUNT];
  40bdb2:	7832      	ldrb	r2, [r6, #0]
  40bdb4:	802a      	strh	r2, [r5, #0]
					break;
  40bdb6:	e7ad      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
  40bdb8:	466a      	mov	r2, sp
  40bdba:	f10d 0106 	add.w	r1, sp, #6
  40bdbe:	3002      	adds	r0, #2
  40bdc0:	4b09      	ldr	r3, [pc, #36]	; (40bde8 <atca_kit_parse_ecc_commands+0x140>)
  40bdc2:	4798      	blx	r3
					if (status == KIT_STATUS_SUCCESS) {
  40bdc4:	4603      	mov	r3, r0
  40bdc6:	2800      	cmp	r0, #0
  40bdc8:	d0a4      	beq.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
						status = atcab_idle();
  40bdca:	4b0b      	ldr	r3, [pc, #44]	; (40bdf8 <atca_kit_parse_ecc_commands+0x150>)
  40bdcc:	4798      	blx	r3
  40bdce:	4603      	mov	r3, r0
  40bdd0:	e7a0      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
		return status;
  40bdd2:	2300      	movs	r3, #0
  40bdd4:	e79e      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
			status = KIT_STATUS_UNKNOWN_COMMAND;
  40bdd6:	23c0      	movs	r3, #192	; 0xc0
  40bdd8:	e79c      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
				return status;
  40bdda:	2300      	movs	r3, #0
  40bddc:	e79a      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
					status = KIT_STATUS_UNKNOWN_COMMAND;
  40bdde:	23c0      	movs	r3, #192	; 0xc0
  40bde0:	e798      	b.n	40bd14 <atca_kit_parse_ecc_commands+0x6c>
  40bde2:	bf00      	nop
  40bde4:	0040e609 	.word	0x0040e609
  40bde8:	0040bc4d 	.word	0x0040bc4d
  40bdec:	0040ba69 	.word	0x0040ba69
  40bdf0:	00406f49 	.word	0x00406f49
  40bdf4:	00406f81 	.word	0x00406f81
  40bdf8:	00406f65 	.word	0x00406f65
  40bdfc:	0040bb49 	.word	0x0040bb49
  40be00:	0040bbf9 	.word	0x0040bbf9

0040be04 <atca_kit_create_usb_packet>:
    \param[in] length number of bytes in data load plus one status byte
    \param[in] buffer pointer to data
    \return length of ASCII data
*/
uint16_t atca_kit_create_usb_packet(uint16_t length, uint8_t *buffer)
{
  40be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be08:	b083      	sub	sp, #12
  40be0a:	4683      	mov	fp, r0
  40be0c:	460f      	mov	r7, r1
	uint16_t binBufferIndex = length - 1;
  40be0e:	1e42      	subs	r2, r0, #1
  40be10:	b293      	uxth	r3, r2
	// Size of data load is length minus status byte.
	uint16_t asciiLength = 2 * (length - 1) + 5; // + 5: 2 status byte characters + '(' + ")\n"
  40be12:	0052      	lsls	r2, r2, #1
  40be14:	b292      	uxth	r2, r2
  40be16:	1d51      	adds	r1, r2, #5
  40be18:	b289      	uxth	r1, r1
  40be1a:	9101      	str	r1, [sp, #4]
	uint16_t asciiBufferIndex = asciiLength - 1;
  40be1c:	1d11      	adds	r1, r2, #4
	uint8_t byteValue;

	// Terminate ASCII packet.
	buffer[asciiBufferIndex--] = KIT_EOP;
  40be1e:	b289      	uxth	r1, r1
  40be20:	200a      	movs	r0, #10
  40be22:	5478      	strb	r0, [r7, r1]

	// Append ')'.
	buffer[asciiBufferIndex--] = ')';
  40be24:	f102 0a02 	add.w	sl, r2, #2
  40be28:	fa1f fa8a 	uxth.w	sl, sl
	buffer[asciiBufferIndex--] = KIT_EOP;
  40be2c:	3203      	adds	r2, #3
	buffer[asciiBufferIndex--] = ')';
  40be2e:	b292      	uxth	r2, r2
  40be30:	2129      	movs	r1, #41	; 0x29
  40be32:	54b9      	strb	r1, [r7, r2]

	// Convert binary data to hex-ascii starting with the last byte of data.
	while (binBufferIndex)
  40be34:	b1e3      	cbz	r3, 40be70 <atca_kit_create_usb_packet+0x6c>
  40be36:	4654      	mov	r4, sl
	{
		byteValue = buffer[binBufferIndex--];
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
  40be38:	f8df 9064 	ldr.w	r9, [pc, #100]	; 40bea0 <atca_kit_create_usb_packet+0x9c>
		byteValue = buffer[binBufferIndex--];
  40be3c:	1e5d      	subs	r5, r3, #1
  40be3e:	b2ad      	uxth	r5, r5
  40be40:	f817 8003 	ldrb.w	r8, [r7, r3]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
  40be44:	1e66      	subs	r6, r4, #1
  40be46:	b2b6      	uxth	r6, r6
  40be48:	4640      	mov	r0, r8
  40be4a:	47c8      	blx	r9
  40be4c:	5538      	strb	r0, [r7, r4]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
  40be4e:	3c02      	subs	r4, #2
  40be50:	b2a4      	uxth	r4, r4
  40be52:	ea4f 1018 	mov.w	r0, r8, lsr #4
  40be56:	47c8      	blx	r9
  40be58:	55b8      	strb	r0, [r7, r6]
		byteValue = buffer[binBufferIndex--];
  40be5a:	462b      	mov	r3, r5
	while (binBufferIndex)
  40be5c:	2d00      	cmp	r5, #0
  40be5e:	d1ed      	bne.n	40be3c <atca_kit_create_usb_packet+0x38>
  40be60:	ebcb 3bcb 	rsb	fp, fp, fp, lsl #15
  40be64:	eb0a 0a4b 	add.w	sl, sl, fp, lsl #1
  40be68:	f10a 0a02 	add.w	sl, sl, #2
  40be6c:	fa1f fa8a 	uxth.w	sl, sl
	}

	// Start data load with open parenthesis.
	buffer[asciiBufferIndex--] = '(';
  40be70:	2328      	movs	r3, #40	; 0x28
  40be72:	f807 300a 	strb.w	r3, [r7, sl]

	// Convert first byte (function return value) to hex-ascii.
	byteValue = buffer[0];
  40be76:	783d      	ldrb	r5, [r7, #0]
	buffer[asciiBufferIndex--] = '(';
  40be78:	f10a 34ff 	add.w	r4, sl, #4294967295
	buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
  40be7c:	b2a4      	uxth	r4, r4
  40be7e:	4628      	mov	r0, r5
  40be80:	4e07      	ldr	r6, [pc, #28]	; (40bea0 <atca_kit_create_usb_packet+0x9c>)
  40be82:	47b0      	blx	r6
  40be84:	5538      	strb	r0, [r7, r4]
  40be86:	f1aa 0a02 	sub.w	sl, sl, #2
	buffer[asciiBufferIndex] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
  40be8a:	fa1f fa8a 	uxth.w	sl, sl
  40be8e:	0928      	lsrs	r0, r5, #4
  40be90:	47b0      	blx	r6
  40be92:	f807 000a 	strb.w	r0, [r7, sl]

	return asciiLength;
}
  40be96:	9801      	ldr	r0, [sp, #4]
  40be98:	b003      	add	sp, #12
  40be9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be9e:	bf00      	nop
  40bea0:	0040b80d 	.word	0x0040b80d

0040bea4 <atca_kit_parse_board_commands>:
{
  40bea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bea8:	b088      	sub	sp, #32
  40beaa:	460e      	mov	r6, r1
  40beac:	4617      	mov	r7, r2
  40beae:	461d      	mov	r5, r3
	uint16_t dataLength = 1;
  40beb0:	2301      	movs	r3, #1
  40beb2:	f8ad 301e 	strh.w	r3, [sp, #30]
	const char *StringInterface[] = {"no_device ", "SPI ", "TWI ", "SWI "};
  40beb6:	4b8c      	ldr	r3, [pc, #560]	; (40c0e8 <atca_kit_parse_board_commands+0x244>)
  40beb8:	ac02      	add	r4, sp, #8
  40beba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40bebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char *pToken = strchr((char *) command, ':');
  40bec0:	213a      	movs	r1, #58	; 0x3a
  40bec2:	4630      	mov	r0, r6
  40bec4:	4b89      	ldr	r3, [pc, #548]	; (40c0ec <atca_kit_parse_board_commands+0x248>)
  40bec6:	4798      	blx	r3
	if (!pToken)
  40bec8:	2800      	cmp	r0, #0
  40beca:	f000 810b 	beq.w	40c0e4 <atca_kit_parse_board_commands+0x240>
	*responseIsAscii = 1;
  40bece:	2201      	movs	r2, #1
  40bed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40bed2:	701a      	strb	r2, [r3, #0]
	switch(pToken[1]) {
  40bed4:	7843      	ldrb	r3, [r0, #1]
  40bed6:	2b64      	cmp	r3, #100	; 0x64
  40bed8:	f000 808c 	beq.w	40bff4 <atca_kit_parse_board_commands+0x150>
  40bedc:	2b66      	cmp	r3, #102	; 0x66
  40bede:	d038      	beq.n	40bf52 <atca_kit_parse_board_commands+0xae>
  40bee0:	2b61      	cmp	r3, #97	; 0x61
  40bee2:	d00d      	beq.n	40bf00 <atca_kit_parse_board_commands+0x5c>
	uint16_t responseIndex = 0;
  40bee4:	2400      	movs	r4, #0
	uint8_t status = KIT_STATUS_UNKNOWN_COMMAND;
  40bee6:	26c0      	movs	r6, #192	; 0xc0
	response[responseIndex] = status;
  40bee8:	552e      	strb	r6, [r5, r4]
	*responseLength = atca_kit_create_usb_packet(dataLength, &response[responseIndex]) + responseIndex;
  40beea:	1929      	adds	r1, r5, r4
  40beec:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  40bef0:	4b7f      	ldr	r3, [pc, #508]	; (40c0f0 <atca_kit_parse_board_commands+0x24c>)
  40bef2:	4798      	blx	r3
  40bef4:	4420      	add	r0, r4
  40bef6:	8038      	strh	r0, [r7, #0]
}
  40bef8:	4630      	mov	r0, r6
  40befa:	b008      	add	sp, #32
  40befc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
  40bf00:	aa06      	add	r2, sp, #24
  40bf02:	f10d 011e 	add.w	r1, sp, #30
  40bf06:	4b7b      	ldr	r3, [pc, #492]	; (40c0f4 <atca_kit_parse_board_commands+0x250>)
  40bf08:	4798      	blx	r3
			if (status != KIT_STATUS_SUCCESS)
  40bf0a:	4606      	mov	r6, r0
  40bf0c:	b108      	cbz	r0, 40bf12 <atca_kit_parse_board_commands+0x6e>
	uint16_t responseIndex = 0;
  40bf0e:	2400      	movs	r4, #0
  40bf10:	e7ea      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
            status = atca_kit_process_board_app_command(rxData[0], dataLength, response, responseLength);
  40bf12:	9806      	ldr	r0, [sp, #24]
    if(!rxbuf || !rxlen)
  40bf14:	2800      	cmp	r0, #0
  40bf16:	f000 80da 	beq.w	40c0ce <atca_kit_parse_board_commands+0x22a>
            status = atca_kit_process_board_app_command(rxData[0], dataLength, response, responseLength);
  40bf1a:	f8bd 401e 	ldrh.w	r4, [sp, #30]
    if(!rxbuf || !rxlen)
  40bf1e:	b90c      	cbnz	r4, 40bf24 <atca_kit_parse_board_commands+0x80>
        return ATCA_BAD_PARAM;
  40bf20:	26e2      	movs	r6, #226	; 0xe2
  40bf22:	e7e1      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
    switch(rxbuf[0])
  40bf24:	7803      	ldrb	r3, [r0, #0]
  40bf26:	b113      	cbz	r3, 40bf2e <atca_kit_parse_board_commands+0x8a>
	uint16_t responseIndex = 0;
  40bf28:	2400      	movs	r4, #0
    ATCA_STATUS status = ATCA_PARSE_ERROR;
  40bf2a:	26d2      	movs	r6, #210	; 0xd2
  40bf2c:	e7dc      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
            if(sizeof(struct kit_app_datetime) < rxlen)
  40bf2e:	2c07      	cmp	r4, #7
  40bf30:	d802      	bhi.n	40bf38 <atca_kit_parse_board_commands+0x94>
	uint16_t responseIndex = 0;
  40bf32:	2400      	movs	r4, #0
    ATCA_STATUS status = ATCA_PARSE_ERROR;
  40bf34:	26d2      	movs	r6, #210	; 0xd2
  40bf36:	e7d7      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
                time_utils_set(datetime->year, datetime->month, datetime->day, datetime->hour, datetime->minute, datetime->minute);
  40bf38:	7984      	ldrb	r4, [r0, #6]
  40bf3a:	7943      	ldrb	r3, [r0, #5]
  40bf3c:	7902      	ldrb	r2, [r0, #4]
  40bf3e:	78c1      	ldrb	r1, [r0, #3]
  40bf40:	f8b0 0001 	ldrh.w	r0, [r0, #1]
  40bf44:	9401      	str	r4, [sp, #4]
  40bf46:	9400      	str	r4, [sp, #0]
  40bf48:	4c6b      	ldr	r4, [pc, #428]	; (40c0f8 <atca_kit_parse_board_commands+0x254>)
  40bf4a:	47a0      	blx	r4
	uint16_t responseIndex = 0;
  40bf4c:	2400      	movs	r4, #0
                status = ATCA_SUCCESS;
  40bf4e:	4626      	mov	r6, r4
  40bf50:	e7ca      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
  40bf52:	aa06      	add	r2, sp, #24
  40bf54:	f10d 011e 	add.w	r1, sp, #30
  40bf58:	4b66      	ldr	r3, [pc, #408]	; (40c0f4 <atca_kit_parse_board_commands+0x250>)
  40bf5a:	4798      	blx	r3
			if (status != KIT_STATUS_SUCCESS)
  40bf5c:	4606      	mov	r6, r0
  40bf5e:	2800      	cmp	r0, #0
  40bf60:	f040 80b8 	bne.w	40c0d4 <atca_kit_parse_board_commands+0x230>
			dataLength = 4; // size of versions + status byte
  40bf64:	2304      	movs	r3, #4
  40bf66:	f8ad 301e 	strh.w	r3, [sp, #30]
			switch (*rxData[0]) {
  40bf6a:	9b06      	ldr	r3, [sp, #24]
  40bf6c:	781b      	ldrb	r3, [r3, #0]
  40bf6e:	2b03      	cmp	r3, #3
  40bf70:	f200 80b2 	bhi.w	40c0d8 <atca_kit_parse_board_commands+0x234>
  40bf74:	e8df f003 	tbb	[pc, r3]
  40bf78:	30221402 	.word	0x30221402
					strcpy((char *) response, StringKit);
  40bf7c:	4b5f      	ldr	r3, [pc, #380]	; (40c0fc <atca_kit_parse_board_commands+0x258>)
  40bf7e:	cb03      	ldmia	r3!, {r0, r1}
  40bf80:	6028      	str	r0, [r5, #0]
  40bf82:	6069      	str	r1, [r5, #4]
  40bf84:	881a      	ldrh	r2, [r3, #0]
  40bf86:	789b      	ldrb	r3, [r3, #2]
  40bf88:	812a      	strh	r2, [r5, #8]
  40bf8a:	72ab      	strb	r3, [r5, #10]
					responseIndex = strlen((char *) response);
  40bf8c:	4628      	mov	r0, r5
  40bf8e:	4b5c      	ldr	r3, [pc, #368]	; (40c100 <atca_kit_parse_board_commands+0x25c>)
  40bf90:	4798      	blx	r3
  40bf92:	b284      	uxth	r4, r0
					memcpy((char *) (response + responseIndex + 1), VersionKit, dataLength);
  40bf94:	4b5b      	ldr	r3, [pc, #364]	; (40c104 <atca_kit_parse_board_commands+0x260>)
  40bf96:	681a      	ldr	r2, [r3, #0]
  40bf98:	192b      	adds	r3, r5, r4
  40bf9a:	f8c3 2001 	str.w	r2, [r3, #1]
					break;
  40bf9e:	e7a3      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
					strcpy((char *) response, StringSha204);
  40bfa0:	4b59      	ldr	r3, [pc, #356]	; (40c108 <atca_kit_parse_board_commands+0x264>)
  40bfa2:	cb03      	ldmia	r3!, {r0, r1}
  40bfa4:	6028      	str	r0, [r5, #0]
  40bfa6:	6069      	str	r1, [r5, #4]
					responseIndex = strlen((char *) response);
  40bfa8:	4628      	mov	r0, r5
  40bfaa:	4b55      	ldr	r3, [pc, #340]	; (40c100 <atca_kit_parse_board_commands+0x25c>)
  40bfac:	4798      	blx	r3
  40bfae:	b284      	uxth	r4, r0
					memcpy((char *) (response + responseIndex + 1), VersionSha204, dataLength);
  40bfb0:	4b56      	ldr	r3, [pc, #344]	; (40c10c <atca_kit_parse_board_commands+0x268>)
  40bfb2:	681a      	ldr	r2, [r3, #0]
  40bfb4:	192b      	adds	r3, r5, r4
  40bfb6:	f8c3 2001 	str.w	r2, [r3, #1]
					break;
  40bfba:	e795      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
					strcpy((char *) response, StringAes132);
  40bfbc:	4b54      	ldr	r3, [pc, #336]	; (40c110 <atca_kit_parse_board_commands+0x26c>)
  40bfbe:	cb03      	ldmia	r3!, {r0, r1}
  40bfc0:	6028      	str	r0, [r5, #0]
  40bfc2:	6069      	str	r1, [r5, #4]
					responseIndex = strlen((char *) response);
  40bfc4:	4628      	mov	r0, r5
  40bfc6:	4b4e      	ldr	r3, [pc, #312]	; (40c100 <atca_kit_parse_board_commands+0x25c>)
  40bfc8:	4798      	blx	r3
  40bfca:	b284      	uxth	r4, r0
					memcpy((char *) (response + responseIndex + 1), VersionAes132, dataLength);
  40bfcc:	4b51      	ldr	r3, [pc, #324]	; (40c114 <atca_kit_parse_board_commands+0x270>)
  40bfce:	681a      	ldr	r2, [r3, #0]
  40bfd0:	192b      	adds	r3, r5, r4
  40bfd2:	f8c3 2001 	str.w	r2, [r3, #1]
					break;
  40bfd6:	e787      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
					strcpy((char *) response, StringEcc508);
  40bfd8:	4b4f      	ldr	r3, [pc, #316]	; (40c118 <atca_kit_parse_board_commands+0x274>)
  40bfda:	cb03      	ldmia	r3!, {r0, r1}
  40bfdc:	6028      	str	r0, [r5, #0]
  40bfde:	6069      	str	r1, [r5, #4]
					responseIndex = strlen((char *) response);
  40bfe0:	4628      	mov	r0, r5
  40bfe2:	4b47      	ldr	r3, [pc, #284]	; (40c100 <atca_kit_parse_board_commands+0x25c>)
  40bfe4:	4798      	blx	r3
  40bfe6:	b284      	uxth	r4, r0
					memcpy((char *) (response + responseIndex + 1), VersionEcc508, dataLength);
  40bfe8:	4b4c      	ldr	r3, [pc, #304]	; (40c11c <atca_kit_parse_board_commands+0x278>)
  40bfea:	681a      	ldr	r2, [r3, #0]
  40bfec:	192b      	adds	r3, r5, r4
  40bfee:	f8c3 2001 	str.w	r2, [r3, #1]
					break;
  40bff2:	e779      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
  40bff4:	aa06      	add	r2, sp, #24
  40bff6:	f10d 011e 	add.w	r1, sp, #30
  40bffa:	4b3e      	ldr	r3, [pc, #248]	; (40c0f4 <atca_kit_parse_board_commands+0x250>)
  40bffc:	4798      	blx	r3
			if (status != KIT_STATUS_SUCCESS)
  40bffe:	4606      	mov	r6, r0
  40c000:	b108      	cbz	r0, 40c006 <atca_kit_parse_board_commands+0x162>
	uint16_t responseIndex = 0;
  40c002:	2400      	movs	r4, #0
  40c004:	e770      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
			device_interface = atca_kit_discover_devices();
  40c006:	4b46      	ldr	r3, [pc, #280]	; (40c120 <atca_kit_parse_board_commands+0x27c>)
  40c008:	4798      	blx	r3
  40c00a:	4604      	mov	r4, r0
			deviceIndex = *rxData[0];
  40c00c:	9b06      	ldr	r3, [sp, #24]
  40c00e:	f893 8000 	ldrb.w	r8, [r3]
	if (index >= device_count)
  40c012:	4b44      	ldr	r3, [pc, #272]	; (40c124 <atca_kit_parse_board_commands+0x280>)
  40c014:	781b      	ldrb	r3, [r3, #0]
  40c016:	4543      	cmp	r3, r8
  40c018:	d961      	bls.n	40c0de <atca_kit_parse_board_commands+0x23a>
			switch (dev_info->device_type) {
  40c01a:	4b43      	ldr	r3, [pc, #268]	; (40c128 <atca_kit_parse_board_commands+0x284>)
  40c01c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40c020:	785b      	ldrb	r3, [r3, #1]
  40c022:	2b0c      	cmp	r3, #12
  40c024:	d829      	bhi.n	40c07a <atca_kit_parse_board_commands+0x1d6>
  40c026:	e8df f003 	tbb	[pc, r3]
  40c02a:	281e      	.short	0x281e
  40c02c:	28282828 	.word	0x28282828
  40c030:	19140728 	.word	0x19140728
  40c034:	1928      	.short	0x1928
  40c036:	19          	.byte	0x19
  40c037:	00          	.byte	0x00
					strcpy((char *) response, StringSha204);
  40c038:	4b33      	ldr	r3, [pc, #204]	; (40c108 <atca_kit_parse_board_commands+0x264>)
  40c03a:	cb03      	ldmia	r3!, {r0, r1}
  40c03c:	6028      	str	r0, [r5, #0]
  40c03e:	6069      	str	r1, [r5, #4]
			if (dev_info->bus_type == DEVKIT_IF_UNKNOWN) {
  40c040:	4b39      	ldr	r3, [pc, #228]	; (40c128 <atca_kit_parse_board_commands+0x284>)
  40c042:	f813 3038 	ldrb.w	r3, [r3, r8, lsl #3]
  40c046:	bb13      	cbnz	r3, 40c08e <atca_kit_parse_board_commands+0x1ea>
				responseIndex = strlen((char *) response);
  40c048:	4628      	mov	r0, r5
  40c04a:	4b2d      	ldr	r3, [pc, #180]	; (40c100 <atca_kit_parse_board_commands+0x25c>)
  40c04c:	4798      	blx	r3
  40c04e:	b284      	uxth	r4, r0
				break;
  40c050:	e74a      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
					strcpy((char *) response, StringAes132);
  40c052:	4b2f      	ldr	r3, [pc, #188]	; (40c110 <atca_kit_parse_board_commands+0x26c>)
  40c054:	cb03      	ldmia	r3!, {r0, r1}
  40c056:	6028      	str	r0, [r5, #0]
  40c058:	6069      	str	r1, [r5, #4]
					break;
  40c05a:	e7f1      	b.n	40c040 <atca_kit_parse_board_commands+0x19c>
					strcpy((char *) response, StringEcc508);
  40c05c:	4b2e      	ldr	r3, [pc, #184]	; (40c118 <atca_kit_parse_board_commands+0x274>)
  40c05e:	cb03      	ldmia	r3!, {r0, r1}
  40c060:	6028      	str	r0, [r5, #0]
  40c062:	6069      	str	r1, [r5, #4]
					break;
  40c064:	e7ec      	b.n	40c040 <atca_kit_parse_board_commands+0x19c>
					strcpy((char *) response, StringInterface[0]);
  40c066:	4b31      	ldr	r3, [pc, #196]	; (40c12c <atca_kit_parse_board_commands+0x288>)
  40c068:	cb03      	ldmia	r3!, {r0, r1}
  40c06a:	6028      	str	r0, [r5, #0]
  40c06c:	6069      	str	r1, [r5, #4]
  40c06e:	881a      	ldrh	r2, [r3, #0]
  40c070:	789b      	ldrb	r3, [r3, #2]
  40c072:	812a      	strh	r2, [r5, #8]
  40c074:	72ab      	strb	r3, [r5, #10]
					status = KIT_STATUS_NO_DEVICE;
  40c076:	26c5      	movs	r6, #197	; 0xc5
					break;
  40c078:	e7e2      	b.n	40c040 <atca_kit_parse_board_commands+0x19c>
					strcpy((char *) response, "unknown_device");
  40c07a:	4b2d      	ldr	r3, [pc, #180]	; (40c130 <atca_kit_parse_board_commands+0x28c>)
  40c07c:	cb07      	ldmia	r3!, {r0, r1, r2}
  40c07e:	6028      	str	r0, [r5, #0]
  40c080:	6069      	str	r1, [r5, #4]
  40c082:	60aa      	str	r2, [r5, #8]
  40c084:	881a      	ldrh	r2, [r3, #0]
  40c086:	789b      	ldrb	r3, [r3, #2]
  40c088:	81aa      	strh	r2, [r5, #12]
  40c08a:	73ab      	strb	r3, [r5, #14]
					break;
  40c08c:	e7d8      	b.n	40c040 <atca_kit_parse_board_commands+0x19c>
			strcat((char *) response, StringInterface[device_interface]);
  40c08e:	ab08      	add	r3, sp, #32
  40c090:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  40c094:	f854 1c18 	ldr.w	r1, [r4, #-24]
  40c098:	4628      	mov	r0, r5
  40c09a:	4b26      	ldr	r3, [pc, #152]	; (40c134 <atca_kit_parse_board_commands+0x290>)
  40c09c:	4798      	blx	r3
			responseIndex = strlen((char *) response);
  40c09e:	4628      	mov	r0, r5
  40c0a0:	4b17      	ldr	r3, [pc, #92]	; (40c100 <atca_kit_parse_board_commands+0x25c>)
  40c0a2:	4798      	blx	r3
  40c0a4:	b284      	uxth	r4, r0
			dataLength++;
  40c0a6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c0aa:	3301      	adds	r3, #1
  40c0ac:	f8ad 301e 	strh.w	r3, [sp, #30]
			response[responseIndex + 1] = dev_info->bus_type == DEVKIT_IF_I2C ? dev_info->address : dev_info->device_index;
  40c0b0:	1c62      	adds	r2, r4, #1
  40c0b2:	4b1d      	ldr	r3, [pc, #116]	; (40c128 <atca_kit_parse_board_commands+0x284>)
  40c0b4:	f813 3038 	ldrb.w	r3, [r3, r8, lsl #3]
  40c0b8:	2b02      	cmp	r3, #2
  40c0ba:	4b1b      	ldr	r3, [pc, #108]	; (40c128 <atca_kit_parse_board_commands+0x284>)
  40c0bc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
  40c0c0:	bf0c      	ite	eq
  40c0c2:	f898 3002 	ldrbeq.w	r3, [r8, #2]
  40c0c6:	f898 3003 	ldrbne.w	r3, [r8, #3]
  40c0ca:	54ab      	strb	r3, [r5, r2]
			break;
  40c0cc:	e70c      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
	uint16_t responseIndex = 0;
  40c0ce:	2400      	movs	r4, #0
        return ATCA_BAD_PARAM;
  40c0d0:	26e2      	movs	r6, #226	; 0xe2
  40c0d2:	e709      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
	uint16_t responseIndex = 0;
  40c0d4:	2400      	movs	r4, #0
  40c0d6:	e707      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
  40c0d8:	2400      	movs	r4, #0
					status = KIT_STATUS_INVALID_PARAMS;
  40c0da:	26c3      	movs	r6, #195	; 0xc3
  40c0dc:	e704      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
	uint16_t responseIndex = 0;
  40c0de:	2400      	movs	r4, #0
				status = KIT_STATUS_NO_DEVICE;
  40c0e0:	26c5      	movs	r6, #197	; 0xc5
  40c0e2:	e701      	b.n	40bee8 <atca_kit_parse_board_commands+0x44>
		return status;
  40c0e4:	26c0      	movs	r6, #192	; 0xc0
  40c0e6:	e707      	b.n	40bef8 <atca_kit_parse_board_commands+0x54>
  40c0e8:	004173c4 	.word	0x004173c4
  40c0ec:	0040e609 	.word	0x0040e609
  40c0f0:	0040be05 	.word	0x0040be05
  40c0f4:	0040bc4d 	.word	0x0040bc4d
  40c0f8:	0040a5dd 	.word	0x0040a5dd
  40c0fc:	0041741c 	.word	0x0041741c
  40c100:	0040e7c1 	.word	0x0040e7c1
  40c104:	004173dc 	.word	0x004173dc
  40c108:	00417428 	.word	0x00417428
  40c10c:	004173e0 	.word	0x004173e0
  40c110:	00417430 	.word	0x00417430
  40c114:	004173d4 	.word	0x004173d4
  40c118:	00417438 	.word	0x00417438
  40c11c:	004173d8 	.word	0x004173d8
  40c120:	0040b8f5 	.word	0x0040b8f5
  40c124:	20001ce4 	.word	0x20001ce4
  40c128:	20003048 	.word	0x20003048
  40c12c:	00417440 	.word	0x00417440
  40c130:	0041740c 	.word	0x0041740c
  40c134:	0040e5c9 	.word	0x0040e5c9

0040c138 <atca_kit_convert_data>:
 * \param[in] length number of bytes to send
 * \param[in] buffer pointer to tx buffer
 * \return new length of data
 */
uint16_t atca_kit_convert_data(uint16_t length, uint8_t *buffer)
{
  40c138:	b508      	push	{r3, lr}
	if (length > DEVICE_BUFFER_SIZE_MAX_RX) {
  40c13a:	287b      	cmp	r0, #123	; 0x7b
  40c13c:	d902      	bls.n	40c144 <atca_kit_convert_data+0xc>
		buffer[0] = KIT_STATUS_USB_TX_OVERFLOW;
  40c13e:	23c2      	movs	r3, #194	; 0xc2
  40c140:	700b      	strb	r3, [r1, #0]
		length = DEVICE_BUFFER_SIZE_MAX_RX;
  40c142:	207b      	movs	r0, #123	; 0x7b
	}
	return atca_kit_create_usb_packet(length, buffer);
  40c144:	4b01      	ldr	r3, [pc, #4]	; (40c14c <atca_kit_convert_data+0x14>)
  40c146:	4798      	blx	r3
}
  40c148:	bd08      	pop	{r3, pc}
  40c14a:	bf00      	nop
  40c14c:	0040be05 	.word	0x0040be05

0040c150 <atca_kit_process_usb_packet>:
 * \param[in] rx_length is length of received packet 
 * \param[in] txLength is Tx length to be sent to Host
 * returns pointer of buffer to be sent
 */
uint8_t* atca_kit_process_usb_packet(uint16_t rx_length, uint16_t *txLength)
{
  40c150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c154:	b084      	sub	sp, #16
  40c156:	4607      	mov	r7, r0
  40c158:	468a      	mov	sl, r1
	uint8_t status = KIT_STATUS_SUCCESS;
	uint8_t responseIsAscii = 0;
  40c15a:	2100      	movs	r1, #0
  40c15c:	f88d 100f 	strb.w	r1, [sp, #15]
	uint16_t rxLength = rx_length - 1;	// except for a line feed character
  40c160:	f100 39ff 	add.w	r9, r0, #4294967295
  40c164:	fa1f f989 	uxth.w	r9, r9
		pucUsbTxBuffer[0] = rxPacketStatus;
		*txLength = 1;
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
	}

	memset(pucUsbTxBuffer, 0, sizeof(pucUsbTxBuffer));
  40c168:	f640 02fc 	movw	r2, #2300	; 0x8fc
  40c16c:	482d      	ldr	r0, [pc, #180]	; (40c224 <atca_kit_process_usb_packet+0xd4>)
  40c16e:	4b2e      	ldr	r3, [pc, #184]	; (40c228 <atca_kit_process_usb_packet+0xd8>)
  40c170:	4798      	blx	r3

	// Process packet.
	for (uint16_t i = 0; i < rxLength; i++)
  40c172:	f1b9 0f00 	cmp.w	r9, #0
  40c176:	d013      	beq.n	40c1a0 <atca_kit_process_usb_packet+0x50>
  40c178:	4c2c      	ldr	r4, [pc, #176]	; (40c22c <atca_kit_process_usb_packet+0xdc>)
  40c17a:	3f02      	subs	r7, #2
  40c17c:	b2bf      	uxth	r7, r7
  40c17e:	3701      	adds	r7, #1
  40c180:	4427      	add	r7, r4
		pRxBuffer[i] = tolower(pRxBuffer[i]);
  40c182:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 40c244 <atca_kit_process_usb_packet+0xf4>
  40c186:	7825      	ldrb	r5, [r4, #0]
  40c188:	47c0      	blx	r8
  40c18a:	4428      	add	r0, r5
  40c18c:	7843      	ldrb	r3, [r0, #1]
  40c18e:	f003 0303 	and.w	r3, r3, #3
  40c192:	2b01      	cmp	r3, #1
  40c194:	bf08      	it	eq
  40c196:	3520      	addeq	r5, #32
  40c198:	7025      	strb	r5, [r4, #0]
  40c19a:	3401      	adds	r4, #1
	for (uint16_t i = 0; i < rxLength; i++)
  40c19c:	42bc      	cmp	r4, r7
  40c19e:	d1f2      	bne.n	40c186 <atca_kit_process_usb_packet+0x36>

	if (pRxBuffer[0] == 'l') {	// lib
  40c1a0:	4b22      	ldr	r3, [pc, #136]	; (40c22c <atca_kit_process_usb_packet+0xdc>)
  40c1a2:	781b      	ldrb	r3, [r3, #0]
  40c1a4:	2b6c      	cmp	r3, #108	; 0x6c
  40c1a6:	d00c      	beq.n	40c1c2 <atca_kit_process_usb_packet+0x72>
	uint8_t* pRxBuffer = atca_kit_get_rx_buffer();
  40c1a8:	4920      	ldr	r1, [pc, #128]	; (40c22c <atca_kit_process_usb_packet+0xdc>)
			status = KIT_STATUS_UNKNOWN_COMMAND;
		else
			pRxBuffer++;
	}

	switch (pRxBuffer[0]) {
  40c1aa:	780b      	ldrb	r3, [r1, #0]
  40c1ac:	2b65      	cmp	r3, #101	; 0x65
  40c1ae:	d012      	beq.n	40c1d6 <atca_kit_process_usb_packet+0x86>
  40c1b0:	2b73      	cmp	r3, #115	; 0x73
  40c1b2:	d010      	beq.n	40c1d6 <atca_kit_process_usb_packet+0x86>
  40c1b4:	2b62      	cmp	r3, #98	; 0x62
  40c1b6:	d02a      	beq.n	40c20e <atca_kit_process_usb_packet+0xbe>
			status = atca_kit_parse_board_commands((uint8_t) rxLength, (uint8_t *)pRxBuffer, txLength, txBuffer, &responseIsAscii);
			break;

		default :
			status = KIT_STATUS_UNKNOWN_COMMAND;
			*txLength = 1;			
  40c1b8:	2301      	movs	r3, #1
  40c1ba:	f8aa 3000 	strh.w	r3, [sl]
			status = KIT_STATUS_UNKNOWN_COMMAND;
  40c1be:	20c0      	movs	r0, #192	; 0xc0
			break;
  40c1c0:	e00e      	b.n	40c1e0 <atca_kit_process_usb_packet+0x90>
		pRxBuffer = memchr(pRxBuffer, ':', rxBufferIndex);
  40c1c2:	2200      	movs	r2, #0
  40c1c4:	213a      	movs	r1, #58	; 0x3a
  40c1c6:	4819      	ldr	r0, [pc, #100]	; (40c22c <atca_kit_process_usb_packet+0xdc>)
  40c1c8:	4b19      	ldr	r3, [pc, #100]	; (40c230 <atca_kit_process_usb_packet+0xe0>)
  40c1ca:	4798      	blx	r3
		if (!pRxBuffer)
  40c1cc:	4601      	mov	r1, r0
  40c1ce:	2800      	cmp	r0, #0
  40c1d0:	d0eb      	beq.n	40c1aa <atca_kit_process_usb_packet+0x5a>
			pRxBuffer++;
  40c1d2:	3101      	adds	r1, #1
  40c1d4:	e7e9      	b.n	40c1aa <atca_kit_process_usb_packet+0x5a>
			status = atca_kit_parse_ecc_commands(rxLength, (uint8_t *)pRxBuffer, txLength, pucUsbTxBuffer + 1);
  40c1d6:	4b17      	ldr	r3, [pc, #92]	; (40c234 <atca_kit_process_usb_packet+0xe4>)
  40c1d8:	4652      	mov	r2, sl
  40c1da:	4648      	mov	r0, r9
  40c1dc:	4c16      	ldr	r4, [pc, #88]	; (40c238 <atca_kit_process_usb_packet+0xe8>)
  40c1de:	47a0      	blx	r4
	}

	if (!responseIsAscii) {
  40c1e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
  40c1e4:	b97b      	cbnz	r3, 40c206 <atca_kit_process_usb_packet+0xb6>
		// Copy leading function return byte.
		pucUsbTxBuffer[0] = status;
  40c1e6:	4b0f      	ldr	r3, [pc, #60]	; (40c224 <atca_kit_process_usb_packet+0xd4>)
  40c1e8:	7018      	strb	r0, [r3, #0]
		// Tell atca_kit_convert_data the correct txLength.
		if (*txLength < DEVICE_BUFFER_SIZE_MAX_RX)
  40c1ea:	f8ba 3000 	ldrh.w	r3, [sl]
  40c1ee:	2b7a      	cmp	r3, #122	; 0x7a
			(*txLength)++;
  40c1f0:	bf9c      	itt	ls
  40c1f2:	3301      	addls	r3, #1
  40c1f4:	f8aa 3000 	strhls.w	r3, [sl]
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
  40c1f8:	490a      	ldr	r1, [pc, #40]	; (40c224 <atca_kit_process_usb_packet+0xd4>)
  40c1fa:	f8ba 0000 	ldrh.w	r0, [sl]
  40c1fe:	4b0f      	ldr	r3, [pc, #60]	; (40c23c <atca_kit_process_usb_packet+0xec>)
  40c200:	4798      	blx	r3
  40c202:	f8aa 0000 	strh.w	r0, [sl]
	}

	return txBuffer;
}
  40c206:	4807      	ldr	r0, [pc, #28]	; (40c224 <atca_kit_process_usb_packet+0xd4>)
  40c208:	b004      	add	sp, #16
  40c20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			status = atca_kit_parse_board_commands((uint8_t) rxLength, (uint8_t *)pRxBuffer, txLength, txBuffer, &responseIsAscii);
  40c20e:	f10d 030f 	add.w	r3, sp, #15
  40c212:	9300      	str	r3, [sp, #0]
  40c214:	4b03      	ldr	r3, [pc, #12]	; (40c224 <atca_kit_process_usb_packet+0xd4>)
  40c216:	4652      	mov	r2, sl
  40c218:	fa5f f089 	uxtb.w	r0, r9
  40c21c:	4c08      	ldr	r4, [pc, #32]	; (40c240 <atca_kit_process_usb_packet+0xf0>)
  40c21e:	47a0      	blx	r4
			break;
  40c220:	e7de      	b.n	40c1e0 <atca_kit_process_usb_packet+0x90>
  40c222:	bf00      	nop
  40c224:	200025e4 	.word	0x200025e4
  40c228:	0040de3d 	.word	0x0040de3d
  40c22c:	20001ce8 	.word	0x20001ce8
  40c230:	0040db41 	.word	0x0040db41
  40c234:	200025e5 	.word	0x200025e5
  40c238:	0040bca9 	.word	0x0040bca9
  40c23c:	0040c139 	.word	0x0040c139
  40c240:	0040bea5 	.word	0x0040bea5
  40c244:	0040d479 	.word	0x0040d479

0040c248 <atca_kit_main_handler>:
 */
void atca_kit_main_handler(void)
{
    uint16_t txlen;

    if(g_usb_message_received)
  40c248:	4b13      	ldr	r3, [pc, #76]	; (40c298 <atca_kit_main_handler+0x50>)
  40c24a:	681b      	ldr	r3, [r3, #0]
  40c24c:	b903      	cbnz	r3, 40c250 <atca_kit_main_handler+0x8>
  40c24e:	4770      	bx	lr
{
  40c250:	b530      	push	{r4, r5, lr}
  40c252:	b083      	sub	sp, #12
    atca_kit_holdoff = val / TIMER_UPDATE_PERIOD;
  40c254:	2232      	movs	r2, #50	; 0x32
  40c256:	4b11      	ldr	r3, [pc, #68]	; (40c29c <atca_kit_main_handler+0x54>)
  40c258:	601a      	str	r2, [r3, #0]
    {
        atca_kit_counter_set(5000);

        DEBUG_PRINTF("Kit RX: %d, %s\r\n", g_usb_buffer_length, pucUsbRxBuffer);
  40c25a:	4c11      	ldr	r4, [pc, #68]	; (40c2a0 <atca_kit_main_handler+0x58>)
  40c25c:	4a11      	ldr	r2, [pc, #68]	; (40c2a4 <atca_kit_main_handler+0x5c>)
  40c25e:	8821      	ldrh	r1, [r4, #0]
  40c260:	4811      	ldr	r0, [pc, #68]	; (40c2a8 <atca_kit_main_handler+0x60>)
  40c262:	4d12      	ldr	r5, [pc, #72]	; (40c2ac <atca_kit_main_handler+0x64>)
  40c264:	47a8      	blx	r5

        atca_kit_process_usb_packet(g_usb_buffer_length, &txlen);
  40c266:	f10d 0106 	add.w	r1, sp, #6
  40c26a:	8820      	ldrh	r0, [r4, #0]
  40c26c:	4b10      	ldr	r3, [pc, #64]	; (40c2b0 <atca_kit_main_handler+0x68>)
  40c26e:	4798      	blx	r3
        g_usb_buffer_length = 0;
  40c270:	2300      	movs	r3, #0
  40c272:	8023      	strh	r3, [r4, #0]
        
        DEBUG_PRINTF("Kit TX: %d, %s\r\n", txlen, pucUsbTxBuffer);
  40c274:	4c0f      	ldr	r4, [pc, #60]	; (40c2b4 <atca_kit_main_handler+0x6c>)
  40c276:	4622      	mov	r2, r4
  40c278:	f8bd 1006 	ldrh.w	r1, [sp, #6]
  40c27c:	480e      	ldr	r0, [pc, #56]	; (40c2b8 <atca_kit_main_handler+0x70>)
  40c27e:	47a8      	blx	r5
        usb_send_response_message(pucUsbTxBuffer, txlen);
  40c280:	f8bd 1006 	ldrh.w	r1, [sp, #6]
  40c284:	4620      	mov	r0, r4
  40c286:	4b0d      	ldr	r3, [pc, #52]	; (40c2bc <atca_kit_main_handler+0x74>)
  40c288:	4798      	blx	r3

        g_usb_message_received--;
  40c28a:	4a03      	ldr	r2, [pc, #12]	; (40c298 <atca_kit_main_handler+0x50>)
  40c28c:	6813      	ldr	r3, [r2, #0]
  40c28e:	3b01      	subs	r3, #1
  40c290:	6013      	str	r3, [r2, #0]
    }
}
  40c292:	b003      	add	sp, #12
  40c294:	bd30      	pop	{r4, r5, pc}
  40c296:	bf00      	nop
  40c298:	20003044 	.word	0x20003044
  40c29c:	20001ce0 	.word	0x20001ce0
  40c2a0:	20001402 	.word	0x20001402
  40c2a4:	20001ce8 	.word	0x20001ce8
  40c2a8:	004173e4 	.word	0x004173e4
  40c2ac:	0040d42d 	.word	0x0040d42d
  40c2b0:	0040c151 	.word	0x0040c151
  40c2b4:	200025e4 	.word	0x200025e4
  40c2b8:	004173f8 	.word	0x004173f8
  40c2bc:	0040afed 	.word	0x0040afed

0040c2c0 <__aeabi_drsub>:
  40c2c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40c2c4:	e002      	b.n	40c2cc <__adddf3>
  40c2c6:	bf00      	nop

0040c2c8 <__aeabi_dsub>:
  40c2c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040c2cc <__adddf3>:
  40c2cc:	b530      	push	{r4, r5, lr}
  40c2ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40c2d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40c2d6:	ea94 0f05 	teq	r4, r5
  40c2da:	bf08      	it	eq
  40c2dc:	ea90 0f02 	teqeq	r0, r2
  40c2e0:	bf1f      	itttt	ne
  40c2e2:	ea54 0c00 	orrsne.w	ip, r4, r0
  40c2e6:	ea55 0c02 	orrsne.w	ip, r5, r2
  40c2ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40c2ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c2f2:	f000 80e2 	beq.w	40c4ba <__adddf3+0x1ee>
  40c2f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40c2fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40c2fe:	bfb8      	it	lt
  40c300:	426d      	neglt	r5, r5
  40c302:	dd0c      	ble.n	40c31e <__adddf3+0x52>
  40c304:	442c      	add	r4, r5
  40c306:	ea80 0202 	eor.w	r2, r0, r2
  40c30a:	ea81 0303 	eor.w	r3, r1, r3
  40c30e:	ea82 0000 	eor.w	r0, r2, r0
  40c312:	ea83 0101 	eor.w	r1, r3, r1
  40c316:	ea80 0202 	eor.w	r2, r0, r2
  40c31a:	ea81 0303 	eor.w	r3, r1, r3
  40c31e:	2d36      	cmp	r5, #54	; 0x36
  40c320:	bf88      	it	hi
  40c322:	bd30      	pophi	{r4, r5, pc}
  40c324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c328:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c32c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40c330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40c334:	d002      	beq.n	40c33c <__adddf3+0x70>
  40c336:	4240      	negs	r0, r0
  40c338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c33c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40c340:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40c348:	d002      	beq.n	40c350 <__adddf3+0x84>
  40c34a:	4252      	negs	r2, r2
  40c34c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c350:	ea94 0f05 	teq	r4, r5
  40c354:	f000 80a7 	beq.w	40c4a6 <__adddf3+0x1da>
  40c358:	f1a4 0401 	sub.w	r4, r4, #1
  40c35c:	f1d5 0e20 	rsbs	lr, r5, #32
  40c360:	db0d      	blt.n	40c37e <__adddf3+0xb2>
  40c362:	fa02 fc0e 	lsl.w	ip, r2, lr
  40c366:	fa22 f205 	lsr.w	r2, r2, r5
  40c36a:	1880      	adds	r0, r0, r2
  40c36c:	f141 0100 	adc.w	r1, r1, #0
  40c370:	fa03 f20e 	lsl.w	r2, r3, lr
  40c374:	1880      	adds	r0, r0, r2
  40c376:	fa43 f305 	asr.w	r3, r3, r5
  40c37a:	4159      	adcs	r1, r3
  40c37c:	e00e      	b.n	40c39c <__adddf3+0xd0>
  40c37e:	f1a5 0520 	sub.w	r5, r5, #32
  40c382:	f10e 0e20 	add.w	lr, lr, #32
  40c386:	2a01      	cmp	r2, #1
  40c388:	fa03 fc0e 	lsl.w	ip, r3, lr
  40c38c:	bf28      	it	cs
  40c38e:	f04c 0c02 	orrcs.w	ip, ip, #2
  40c392:	fa43 f305 	asr.w	r3, r3, r5
  40c396:	18c0      	adds	r0, r0, r3
  40c398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40c39c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c3a0:	d507      	bpl.n	40c3b2 <__adddf3+0xe6>
  40c3a2:	f04f 0e00 	mov.w	lr, #0
  40c3a6:	f1dc 0c00 	rsbs	ip, ip, #0
  40c3aa:	eb7e 0000 	sbcs.w	r0, lr, r0
  40c3ae:	eb6e 0101 	sbc.w	r1, lr, r1
  40c3b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40c3b6:	d31b      	bcc.n	40c3f0 <__adddf3+0x124>
  40c3b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40c3bc:	d30c      	bcc.n	40c3d8 <__adddf3+0x10c>
  40c3be:	0849      	lsrs	r1, r1, #1
  40c3c0:	ea5f 0030 	movs.w	r0, r0, rrx
  40c3c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40c3c8:	f104 0401 	add.w	r4, r4, #1
  40c3cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40c3d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40c3d4:	f080 809a 	bcs.w	40c50c <__adddf3+0x240>
  40c3d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40c3dc:	bf08      	it	eq
  40c3de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c3e2:	f150 0000 	adcs.w	r0, r0, #0
  40c3e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c3ea:	ea41 0105 	orr.w	r1, r1, r5
  40c3ee:	bd30      	pop	{r4, r5, pc}
  40c3f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40c3f4:	4140      	adcs	r0, r0
  40c3f6:	eb41 0101 	adc.w	r1, r1, r1
  40c3fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c3fe:	f1a4 0401 	sub.w	r4, r4, #1
  40c402:	d1e9      	bne.n	40c3d8 <__adddf3+0x10c>
  40c404:	f091 0f00 	teq	r1, #0
  40c408:	bf04      	itt	eq
  40c40a:	4601      	moveq	r1, r0
  40c40c:	2000      	moveq	r0, #0
  40c40e:	fab1 f381 	clz	r3, r1
  40c412:	bf08      	it	eq
  40c414:	3320      	addeq	r3, #32
  40c416:	f1a3 030b 	sub.w	r3, r3, #11
  40c41a:	f1b3 0220 	subs.w	r2, r3, #32
  40c41e:	da0c      	bge.n	40c43a <__adddf3+0x16e>
  40c420:	320c      	adds	r2, #12
  40c422:	dd08      	ble.n	40c436 <__adddf3+0x16a>
  40c424:	f102 0c14 	add.w	ip, r2, #20
  40c428:	f1c2 020c 	rsb	r2, r2, #12
  40c42c:	fa01 f00c 	lsl.w	r0, r1, ip
  40c430:	fa21 f102 	lsr.w	r1, r1, r2
  40c434:	e00c      	b.n	40c450 <__adddf3+0x184>
  40c436:	f102 0214 	add.w	r2, r2, #20
  40c43a:	bfd8      	it	le
  40c43c:	f1c2 0c20 	rsble	ip, r2, #32
  40c440:	fa01 f102 	lsl.w	r1, r1, r2
  40c444:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c448:	bfdc      	itt	le
  40c44a:	ea41 010c 	orrle.w	r1, r1, ip
  40c44e:	4090      	lslle	r0, r2
  40c450:	1ae4      	subs	r4, r4, r3
  40c452:	bfa2      	ittt	ge
  40c454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40c458:	4329      	orrge	r1, r5
  40c45a:	bd30      	popge	{r4, r5, pc}
  40c45c:	ea6f 0404 	mvn.w	r4, r4
  40c460:	3c1f      	subs	r4, #31
  40c462:	da1c      	bge.n	40c49e <__adddf3+0x1d2>
  40c464:	340c      	adds	r4, #12
  40c466:	dc0e      	bgt.n	40c486 <__adddf3+0x1ba>
  40c468:	f104 0414 	add.w	r4, r4, #20
  40c46c:	f1c4 0220 	rsb	r2, r4, #32
  40c470:	fa20 f004 	lsr.w	r0, r0, r4
  40c474:	fa01 f302 	lsl.w	r3, r1, r2
  40c478:	ea40 0003 	orr.w	r0, r0, r3
  40c47c:	fa21 f304 	lsr.w	r3, r1, r4
  40c480:	ea45 0103 	orr.w	r1, r5, r3
  40c484:	bd30      	pop	{r4, r5, pc}
  40c486:	f1c4 040c 	rsb	r4, r4, #12
  40c48a:	f1c4 0220 	rsb	r2, r4, #32
  40c48e:	fa20 f002 	lsr.w	r0, r0, r2
  40c492:	fa01 f304 	lsl.w	r3, r1, r4
  40c496:	ea40 0003 	orr.w	r0, r0, r3
  40c49a:	4629      	mov	r1, r5
  40c49c:	bd30      	pop	{r4, r5, pc}
  40c49e:	fa21 f004 	lsr.w	r0, r1, r4
  40c4a2:	4629      	mov	r1, r5
  40c4a4:	bd30      	pop	{r4, r5, pc}
  40c4a6:	f094 0f00 	teq	r4, #0
  40c4aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40c4ae:	bf06      	itte	eq
  40c4b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40c4b4:	3401      	addeq	r4, #1
  40c4b6:	3d01      	subne	r5, #1
  40c4b8:	e74e      	b.n	40c358 <__adddf3+0x8c>
  40c4ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c4be:	bf18      	it	ne
  40c4c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c4c4:	d029      	beq.n	40c51a <__adddf3+0x24e>
  40c4c6:	ea94 0f05 	teq	r4, r5
  40c4ca:	bf08      	it	eq
  40c4cc:	ea90 0f02 	teqeq	r0, r2
  40c4d0:	d005      	beq.n	40c4de <__adddf3+0x212>
  40c4d2:	ea54 0c00 	orrs.w	ip, r4, r0
  40c4d6:	bf04      	itt	eq
  40c4d8:	4619      	moveq	r1, r3
  40c4da:	4610      	moveq	r0, r2
  40c4dc:	bd30      	pop	{r4, r5, pc}
  40c4de:	ea91 0f03 	teq	r1, r3
  40c4e2:	bf1e      	ittt	ne
  40c4e4:	2100      	movne	r1, #0
  40c4e6:	2000      	movne	r0, #0
  40c4e8:	bd30      	popne	{r4, r5, pc}
  40c4ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40c4ee:	d105      	bne.n	40c4fc <__adddf3+0x230>
  40c4f0:	0040      	lsls	r0, r0, #1
  40c4f2:	4149      	adcs	r1, r1
  40c4f4:	bf28      	it	cs
  40c4f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40c4fa:	bd30      	pop	{r4, r5, pc}
  40c4fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40c500:	bf3c      	itt	cc
  40c502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40c506:	bd30      	popcc	{r4, r5, pc}
  40c508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c50c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40c510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c514:	f04f 0000 	mov.w	r0, #0
  40c518:	bd30      	pop	{r4, r5, pc}
  40c51a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c51e:	bf1a      	itte	ne
  40c520:	4619      	movne	r1, r3
  40c522:	4610      	movne	r0, r2
  40c524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40c528:	bf1c      	itt	ne
  40c52a:	460b      	movne	r3, r1
  40c52c:	4602      	movne	r2, r0
  40c52e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c532:	bf06      	itte	eq
  40c534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40c538:	ea91 0f03 	teqeq	r1, r3
  40c53c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c540:	bd30      	pop	{r4, r5, pc}
  40c542:	bf00      	nop

0040c544 <__aeabi_ui2d>:
  40c544:	f090 0f00 	teq	r0, #0
  40c548:	bf04      	itt	eq
  40c54a:	2100      	moveq	r1, #0
  40c54c:	4770      	bxeq	lr
  40c54e:	b530      	push	{r4, r5, lr}
  40c550:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c554:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c558:	f04f 0500 	mov.w	r5, #0
  40c55c:	f04f 0100 	mov.w	r1, #0
  40c560:	e750      	b.n	40c404 <__adddf3+0x138>
  40c562:	bf00      	nop

0040c564 <__aeabi_i2d>:
  40c564:	f090 0f00 	teq	r0, #0
  40c568:	bf04      	itt	eq
  40c56a:	2100      	moveq	r1, #0
  40c56c:	4770      	bxeq	lr
  40c56e:	b530      	push	{r4, r5, lr}
  40c570:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c574:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c57c:	bf48      	it	mi
  40c57e:	4240      	negmi	r0, r0
  40c580:	f04f 0100 	mov.w	r1, #0
  40c584:	e73e      	b.n	40c404 <__adddf3+0x138>
  40c586:	bf00      	nop

0040c588 <__aeabi_f2d>:
  40c588:	0042      	lsls	r2, r0, #1
  40c58a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c58e:	ea4f 0131 	mov.w	r1, r1, rrx
  40c592:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c596:	bf1f      	itttt	ne
  40c598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c59c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c5a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c5a4:	4770      	bxne	lr
  40c5a6:	f092 0f00 	teq	r2, #0
  40c5aa:	bf14      	ite	ne
  40c5ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c5b0:	4770      	bxeq	lr
  40c5b2:	b530      	push	{r4, r5, lr}
  40c5b4:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c5b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c5bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c5c0:	e720      	b.n	40c404 <__adddf3+0x138>
  40c5c2:	bf00      	nop

0040c5c4 <__aeabi_ul2d>:
  40c5c4:	ea50 0201 	orrs.w	r2, r0, r1
  40c5c8:	bf08      	it	eq
  40c5ca:	4770      	bxeq	lr
  40c5cc:	b530      	push	{r4, r5, lr}
  40c5ce:	f04f 0500 	mov.w	r5, #0
  40c5d2:	e00a      	b.n	40c5ea <__aeabi_l2d+0x16>

0040c5d4 <__aeabi_l2d>:
  40c5d4:	ea50 0201 	orrs.w	r2, r0, r1
  40c5d8:	bf08      	it	eq
  40c5da:	4770      	bxeq	lr
  40c5dc:	b530      	push	{r4, r5, lr}
  40c5de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c5e2:	d502      	bpl.n	40c5ea <__aeabi_l2d+0x16>
  40c5e4:	4240      	negs	r0, r0
  40c5e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c5ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c5ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c5f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c5f6:	f43f aedc 	beq.w	40c3b2 <__adddf3+0xe6>
  40c5fa:	f04f 0203 	mov.w	r2, #3
  40c5fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c602:	bf18      	it	ne
  40c604:	3203      	addne	r2, #3
  40c606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c60a:	bf18      	it	ne
  40c60c:	3203      	addne	r2, #3
  40c60e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c612:	f1c2 0320 	rsb	r3, r2, #32
  40c616:	fa00 fc03 	lsl.w	ip, r0, r3
  40c61a:	fa20 f002 	lsr.w	r0, r0, r2
  40c61e:	fa01 fe03 	lsl.w	lr, r1, r3
  40c622:	ea40 000e 	orr.w	r0, r0, lr
  40c626:	fa21 f102 	lsr.w	r1, r1, r2
  40c62a:	4414      	add	r4, r2
  40c62c:	e6c1      	b.n	40c3b2 <__adddf3+0xe6>
  40c62e:	bf00      	nop

0040c630 <__gedf2>:
  40c630:	f04f 3cff 	mov.w	ip, #4294967295
  40c634:	e006      	b.n	40c644 <__cmpdf2+0x4>
  40c636:	bf00      	nop

0040c638 <__ledf2>:
  40c638:	f04f 0c01 	mov.w	ip, #1
  40c63c:	e002      	b.n	40c644 <__cmpdf2+0x4>
  40c63e:	bf00      	nop

0040c640 <__cmpdf2>:
  40c640:	f04f 0c01 	mov.w	ip, #1
  40c644:	f84d cd04 	str.w	ip, [sp, #-4]!
  40c648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c64c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c650:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c654:	bf18      	it	ne
  40c656:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c65a:	d01b      	beq.n	40c694 <__cmpdf2+0x54>
  40c65c:	b001      	add	sp, #4
  40c65e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c662:	bf0c      	ite	eq
  40c664:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c668:	ea91 0f03 	teqne	r1, r3
  40c66c:	bf02      	ittt	eq
  40c66e:	ea90 0f02 	teqeq	r0, r2
  40c672:	2000      	moveq	r0, #0
  40c674:	4770      	bxeq	lr
  40c676:	f110 0f00 	cmn.w	r0, #0
  40c67a:	ea91 0f03 	teq	r1, r3
  40c67e:	bf58      	it	pl
  40c680:	4299      	cmppl	r1, r3
  40c682:	bf08      	it	eq
  40c684:	4290      	cmpeq	r0, r2
  40c686:	bf2c      	ite	cs
  40c688:	17d8      	asrcs	r0, r3, #31
  40c68a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c68e:	f040 0001 	orr.w	r0, r0, #1
  40c692:	4770      	bx	lr
  40c694:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c69c:	d102      	bne.n	40c6a4 <__cmpdf2+0x64>
  40c69e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c6a2:	d107      	bne.n	40c6b4 <__cmpdf2+0x74>
  40c6a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c6a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c6ac:	d1d6      	bne.n	40c65c <__cmpdf2+0x1c>
  40c6ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c6b2:	d0d3      	beq.n	40c65c <__cmpdf2+0x1c>
  40c6b4:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c6b8:	4770      	bx	lr
  40c6ba:	bf00      	nop

0040c6bc <__aeabi_cdrcmple>:
  40c6bc:	4684      	mov	ip, r0
  40c6be:	4610      	mov	r0, r2
  40c6c0:	4662      	mov	r2, ip
  40c6c2:	468c      	mov	ip, r1
  40c6c4:	4619      	mov	r1, r3
  40c6c6:	4663      	mov	r3, ip
  40c6c8:	e000      	b.n	40c6cc <__aeabi_cdcmpeq>
  40c6ca:	bf00      	nop

0040c6cc <__aeabi_cdcmpeq>:
  40c6cc:	b501      	push	{r0, lr}
  40c6ce:	f7ff ffb7 	bl	40c640 <__cmpdf2>
  40c6d2:	2800      	cmp	r0, #0
  40c6d4:	bf48      	it	mi
  40c6d6:	f110 0f00 	cmnmi.w	r0, #0
  40c6da:	bd01      	pop	{r0, pc}

0040c6dc <__aeabi_dcmpeq>:
  40c6dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6e0:	f7ff fff4 	bl	40c6cc <__aeabi_cdcmpeq>
  40c6e4:	bf0c      	ite	eq
  40c6e6:	2001      	moveq	r0, #1
  40c6e8:	2000      	movne	r0, #0
  40c6ea:	f85d fb08 	ldr.w	pc, [sp], #8
  40c6ee:	bf00      	nop

0040c6f0 <__aeabi_dcmplt>:
  40c6f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6f4:	f7ff ffea 	bl	40c6cc <__aeabi_cdcmpeq>
  40c6f8:	bf34      	ite	cc
  40c6fa:	2001      	movcc	r0, #1
  40c6fc:	2000      	movcs	r0, #0
  40c6fe:	f85d fb08 	ldr.w	pc, [sp], #8
  40c702:	bf00      	nop

0040c704 <__aeabi_dcmple>:
  40c704:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c708:	f7ff ffe0 	bl	40c6cc <__aeabi_cdcmpeq>
  40c70c:	bf94      	ite	ls
  40c70e:	2001      	movls	r0, #1
  40c710:	2000      	movhi	r0, #0
  40c712:	f85d fb08 	ldr.w	pc, [sp], #8
  40c716:	bf00      	nop

0040c718 <__aeabi_dcmpge>:
  40c718:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c71c:	f7ff ffce 	bl	40c6bc <__aeabi_cdrcmple>
  40c720:	bf94      	ite	ls
  40c722:	2001      	movls	r0, #1
  40c724:	2000      	movhi	r0, #0
  40c726:	f85d fb08 	ldr.w	pc, [sp], #8
  40c72a:	bf00      	nop

0040c72c <__aeabi_dcmpgt>:
  40c72c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c730:	f7ff ffc4 	bl	40c6bc <__aeabi_cdrcmple>
  40c734:	bf34      	ite	cc
  40c736:	2001      	movcc	r0, #1
  40c738:	2000      	movcs	r0, #0
  40c73a:	f85d fb08 	ldr.w	pc, [sp], #8
  40c73e:	bf00      	nop

0040c740 <__aeabi_d2iz>:
  40c740:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c744:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c748:	d215      	bcs.n	40c776 <__aeabi_d2iz+0x36>
  40c74a:	d511      	bpl.n	40c770 <__aeabi_d2iz+0x30>
  40c74c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c750:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c754:	d912      	bls.n	40c77c <__aeabi_d2iz+0x3c>
  40c756:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c75a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c75e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c762:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c766:	fa23 f002 	lsr.w	r0, r3, r2
  40c76a:	bf18      	it	ne
  40c76c:	4240      	negne	r0, r0
  40c76e:	4770      	bx	lr
  40c770:	f04f 0000 	mov.w	r0, #0
  40c774:	4770      	bx	lr
  40c776:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c77a:	d105      	bne.n	40c788 <__aeabi_d2iz+0x48>
  40c77c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c780:	bf08      	it	eq
  40c782:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c786:	4770      	bx	lr
  40c788:	f04f 0000 	mov.w	r0, #0
  40c78c:	4770      	bx	lr
  40c78e:	bf00      	nop

0040c790 <__aeabi_d2uiz>:
  40c790:	004a      	lsls	r2, r1, #1
  40c792:	d211      	bcs.n	40c7b8 <__aeabi_d2uiz+0x28>
  40c794:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c798:	d211      	bcs.n	40c7be <__aeabi_d2uiz+0x2e>
  40c79a:	d50d      	bpl.n	40c7b8 <__aeabi_d2uiz+0x28>
  40c79c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c7a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c7a4:	d40e      	bmi.n	40c7c4 <__aeabi_d2uiz+0x34>
  40c7a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c7aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c7ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c7b2:	fa23 f002 	lsr.w	r0, r3, r2
  40c7b6:	4770      	bx	lr
  40c7b8:	f04f 0000 	mov.w	r0, #0
  40c7bc:	4770      	bx	lr
  40c7be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c7c2:	d102      	bne.n	40c7ca <__aeabi_d2uiz+0x3a>
  40c7c4:	f04f 30ff 	mov.w	r0, #4294967295
  40c7c8:	4770      	bx	lr
  40c7ca:	f04f 0000 	mov.w	r0, #0
  40c7ce:	4770      	bx	lr

0040c7d0 <__aeabi_uldivmod>:
  40c7d0:	b953      	cbnz	r3, 40c7e8 <__aeabi_uldivmod+0x18>
  40c7d2:	b94a      	cbnz	r2, 40c7e8 <__aeabi_uldivmod+0x18>
  40c7d4:	2900      	cmp	r1, #0
  40c7d6:	bf08      	it	eq
  40c7d8:	2800      	cmpeq	r0, #0
  40c7da:	bf1c      	itt	ne
  40c7dc:	f04f 31ff 	movne.w	r1, #4294967295
  40c7e0:	f04f 30ff 	movne.w	r0, #4294967295
  40c7e4:	f000 b97a 	b.w	40cadc <__aeabi_idiv0>
  40c7e8:	f1ad 0c08 	sub.w	ip, sp, #8
  40c7ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40c7f0:	f000 f806 	bl	40c800 <__udivmoddi4>
  40c7f4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c7f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c7fc:	b004      	add	sp, #16
  40c7fe:	4770      	bx	lr

0040c800 <__udivmoddi4>:
  40c800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c804:	468c      	mov	ip, r1
  40c806:	460d      	mov	r5, r1
  40c808:	4604      	mov	r4, r0
  40c80a:	9e08      	ldr	r6, [sp, #32]
  40c80c:	2b00      	cmp	r3, #0
  40c80e:	d151      	bne.n	40c8b4 <__udivmoddi4+0xb4>
  40c810:	428a      	cmp	r2, r1
  40c812:	4617      	mov	r7, r2
  40c814:	d96d      	bls.n	40c8f2 <__udivmoddi4+0xf2>
  40c816:	fab2 fe82 	clz	lr, r2
  40c81a:	f1be 0f00 	cmp.w	lr, #0
  40c81e:	d00b      	beq.n	40c838 <__udivmoddi4+0x38>
  40c820:	f1ce 0c20 	rsb	ip, lr, #32
  40c824:	fa01 f50e 	lsl.w	r5, r1, lr
  40c828:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c82c:	fa02 f70e 	lsl.w	r7, r2, lr
  40c830:	ea4c 0c05 	orr.w	ip, ip, r5
  40c834:	fa00 f40e 	lsl.w	r4, r0, lr
  40c838:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40c83c:	0c25      	lsrs	r5, r4, #16
  40c83e:	fbbc f8fa 	udiv	r8, ip, sl
  40c842:	fa1f f987 	uxth.w	r9, r7
  40c846:	fb0a cc18 	mls	ip, sl, r8, ip
  40c84a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40c84e:	fb08 f309 	mul.w	r3, r8, r9
  40c852:	42ab      	cmp	r3, r5
  40c854:	d90a      	bls.n	40c86c <__udivmoddi4+0x6c>
  40c856:	19ed      	adds	r5, r5, r7
  40c858:	f108 32ff 	add.w	r2, r8, #4294967295
  40c85c:	f080 8123 	bcs.w	40caa6 <__udivmoddi4+0x2a6>
  40c860:	42ab      	cmp	r3, r5
  40c862:	f240 8120 	bls.w	40caa6 <__udivmoddi4+0x2a6>
  40c866:	f1a8 0802 	sub.w	r8, r8, #2
  40c86a:	443d      	add	r5, r7
  40c86c:	1aed      	subs	r5, r5, r3
  40c86e:	b2a4      	uxth	r4, r4
  40c870:	fbb5 f0fa 	udiv	r0, r5, sl
  40c874:	fb0a 5510 	mls	r5, sl, r0, r5
  40c878:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40c87c:	fb00 f909 	mul.w	r9, r0, r9
  40c880:	45a1      	cmp	r9, r4
  40c882:	d909      	bls.n	40c898 <__udivmoddi4+0x98>
  40c884:	19e4      	adds	r4, r4, r7
  40c886:	f100 33ff 	add.w	r3, r0, #4294967295
  40c88a:	f080 810a 	bcs.w	40caa2 <__udivmoddi4+0x2a2>
  40c88e:	45a1      	cmp	r9, r4
  40c890:	f240 8107 	bls.w	40caa2 <__udivmoddi4+0x2a2>
  40c894:	3802      	subs	r0, #2
  40c896:	443c      	add	r4, r7
  40c898:	eba4 0409 	sub.w	r4, r4, r9
  40c89c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c8a0:	2100      	movs	r1, #0
  40c8a2:	2e00      	cmp	r6, #0
  40c8a4:	d061      	beq.n	40c96a <__udivmoddi4+0x16a>
  40c8a6:	fa24 f40e 	lsr.w	r4, r4, lr
  40c8aa:	2300      	movs	r3, #0
  40c8ac:	6034      	str	r4, [r6, #0]
  40c8ae:	6073      	str	r3, [r6, #4]
  40c8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c8b4:	428b      	cmp	r3, r1
  40c8b6:	d907      	bls.n	40c8c8 <__udivmoddi4+0xc8>
  40c8b8:	2e00      	cmp	r6, #0
  40c8ba:	d054      	beq.n	40c966 <__udivmoddi4+0x166>
  40c8bc:	2100      	movs	r1, #0
  40c8be:	e886 0021 	stmia.w	r6, {r0, r5}
  40c8c2:	4608      	mov	r0, r1
  40c8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c8c8:	fab3 f183 	clz	r1, r3
  40c8cc:	2900      	cmp	r1, #0
  40c8ce:	f040 808e 	bne.w	40c9ee <__udivmoddi4+0x1ee>
  40c8d2:	42ab      	cmp	r3, r5
  40c8d4:	d302      	bcc.n	40c8dc <__udivmoddi4+0xdc>
  40c8d6:	4282      	cmp	r2, r0
  40c8d8:	f200 80fa 	bhi.w	40cad0 <__udivmoddi4+0x2d0>
  40c8dc:	1a84      	subs	r4, r0, r2
  40c8de:	eb65 0503 	sbc.w	r5, r5, r3
  40c8e2:	2001      	movs	r0, #1
  40c8e4:	46ac      	mov	ip, r5
  40c8e6:	2e00      	cmp	r6, #0
  40c8e8:	d03f      	beq.n	40c96a <__udivmoddi4+0x16a>
  40c8ea:	e886 1010 	stmia.w	r6, {r4, ip}
  40c8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c8f2:	b912      	cbnz	r2, 40c8fa <__udivmoddi4+0xfa>
  40c8f4:	2701      	movs	r7, #1
  40c8f6:	fbb7 f7f2 	udiv	r7, r7, r2
  40c8fa:	fab7 fe87 	clz	lr, r7
  40c8fe:	f1be 0f00 	cmp.w	lr, #0
  40c902:	d134      	bne.n	40c96e <__udivmoddi4+0x16e>
  40c904:	1beb      	subs	r3, r5, r7
  40c906:	0c3a      	lsrs	r2, r7, #16
  40c908:	fa1f fc87 	uxth.w	ip, r7
  40c90c:	2101      	movs	r1, #1
  40c90e:	fbb3 f8f2 	udiv	r8, r3, r2
  40c912:	0c25      	lsrs	r5, r4, #16
  40c914:	fb02 3318 	mls	r3, r2, r8, r3
  40c918:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c91c:	fb0c f308 	mul.w	r3, ip, r8
  40c920:	42ab      	cmp	r3, r5
  40c922:	d907      	bls.n	40c934 <__udivmoddi4+0x134>
  40c924:	19ed      	adds	r5, r5, r7
  40c926:	f108 30ff 	add.w	r0, r8, #4294967295
  40c92a:	d202      	bcs.n	40c932 <__udivmoddi4+0x132>
  40c92c:	42ab      	cmp	r3, r5
  40c92e:	f200 80d1 	bhi.w	40cad4 <__udivmoddi4+0x2d4>
  40c932:	4680      	mov	r8, r0
  40c934:	1aed      	subs	r5, r5, r3
  40c936:	b2a3      	uxth	r3, r4
  40c938:	fbb5 f0f2 	udiv	r0, r5, r2
  40c93c:	fb02 5510 	mls	r5, r2, r0, r5
  40c940:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40c944:	fb0c fc00 	mul.w	ip, ip, r0
  40c948:	45a4      	cmp	ip, r4
  40c94a:	d907      	bls.n	40c95c <__udivmoddi4+0x15c>
  40c94c:	19e4      	adds	r4, r4, r7
  40c94e:	f100 33ff 	add.w	r3, r0, #4294967295
  40c952:	d202      	bcs.n	40c95a <__udivmoddi4+0x15a>
  40c954:	45a4      	cmp	ip, r4
  40c956:	f200 80b8 	bhi.w	40caca <__udivmoddi4+0x2ca>
  40c95a:	4618      	mov	r0, r3
  40c95c:	eba4 040c 	sub.w	r4, r4, ip
  40c960:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c964:	e79d      	b.n	40c8a2 <__udivmoddi4+0xa2>
  40c966:	4631      	mov	r1, r6
  40c968:	4630      	mov	r0, r6
  40c96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c96e:	f1ce 0420 	rsb	r4, lr, #32
  40c972:	fa05 f30e 	lsl.w	r3, r5, lr
  40c976:	fa07 f70e 	lsl.w	r7, r7, lr
  40c97a:	fa20 f804 	lsr.w	r8, r0, r4
  40c97e:	0c3a      	lsrs	r2, r7, #16
  40c980:	fa25 f404 	lsr.w	r4, r5, r4
  40c984:	ea48 0803 	orr.w	r8, r8, r3
  40c988:	fbb4 f1f2 	udiv	r1, r4, r2
  40c98c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c990:	fb02 4411 	mls	r4, r2, r1, r4
  40c994:	fa1f fc87 	uxth.w	ip, r7
  40c998:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c99c:	fb01 f30c 	mul.w	r3, r1, ip
  40c9a0:	42ab      	cmp	r3, r5
  40c9a2:	fa00 f40e 	lsl.w	r4, r0, lr
  40c9a6:	d909      	bls.n	40c9bc <__udivmoddi4+0x1bc>
  40c9a8:	19ed      	adds	r5, r5, r7
  40c9aa:	f101 30ff 	add.w	r0, r1, #4294967295
  40c9ae:	f080 808a 	bcs.w	40cac6 <__udivmoddi4+0x2c6>
  40c9b2:	42ab      	cmp	r3, r5
  40c9b4:	f240 8087 	bls.w	40cac6 <__udivmoddi4+0x2c6>
  40c9b8:	3902      	subs	r1, #2
  40c9ba:	443d      	add	r5, r7
  40c9bc:	1aeb      	subs	r3, r5, r3
  40c9be:	fa1f f588 	uxth.w	r5, r8
  40c9c2:	fbb3 f0f2 	udiv	r0, r3, r2
  40c9c6:	fb02 3310 	mls	r3, r2, r0, r3
  40c9ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c9ce:	fb00 f30c 	mul.w	r3, r0, ip
  40c9d2:	42ab      	cmp	r3, r5
  40c9d4:	d907      	bls.n	40c9e6 <__udivmoddi4+0x1e6>
  40c9d6:	19ed      	adds	r5, r5, r7
  40c9d8:	f100 38ff 	add.w	r8, r0, #4294967295
  40c9dc:	d26f      	bcs.n	40cabe <__udivmoddi4+0x2be>
  40c9de:	42ab      	cmp	r3, r5
  40c9e0:	d96d      	bls.n	40cabe <__udivmoddi4+0x2be>
  40c9e2:	3802      	subs	r0, #2
  40c9e4:	443d      	add	r5, r7
  40c9e6:	1aeb      	subs	r3, r5, r3
  40c9e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c9ec:	e78f      	b.n	40c90e <__udivmoddi4+0x10e>
  40c9ee:	f1c1 0720 	rsb	r7, r1, #32
  40c9f2:	fa22 f807 	lsr.w	r8, r2, r7
  40c9f6:	408b      	lsls	r3, r1
  40c9f8:	fa05 f401 	lsl.w	r4, r5, r1
  40c9fc:	ea48 0303 	orr.w	r3, r8, r3
  40ca00:	fa20 fe07 	lsr.w	lr, r0, r7
  40ca04:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40ca08:	40fd      	lsrs	r5, r7
  40ca0a:	ea4e 0e04 	orr.w	lr, lr, r4
  40ca0e:	fbb5 f9fc 	udiv	r9, r5, ip
  40ca12:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40ca16:	fb0c 5519 	mls	r5, ip, r9, r5
  40ca1a:	fa1f f883 	uxth.w	r8, r3
  40ca1e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40ca22:	fb09 f408 	mul.w	r4, r9, r8
  40ca26:	42ac      	cmp	r4, r5
  40ca28:	fa02 f201 	lsl.w	r2, r2, r1
  40ca2c:	fa00 fa01 	lsl.w	sl, r0, r1
  40ca30:	d908      	bls.n	40ca44 <__udivmoddi4+0x244>
  40ca32:	18ed      	adds	r5, r5, r3
  40ca34:	f109 30ff 	add.w	r0, r9, #4294967295
  40ca38:	d243      	bcs.n	40cac2 <__udivmoddi4+0x2c2>
  40ca3a:	42ac      	cmp	r4, r5
  40ca3c:	d941      	bls.n	40cac2 <__udivmoddi4+0x2c2>
  40ca3e:	f1a9 0902 	sub.w	r9, r9, #2
  40ca42:	441d      	add	r5, r3
  40ca44:	1b2d      	subs	r5, r5, r4
  40ca46:	fa1f fe8e 	uxth.w	lr, lr
  40ca4a:	fbb5 f0fc 	udiv	r0, r5, ip
  40ca4e:	fb0c 5510 	mls	r5, ip, r0, r5
  40ca52:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40ca56:	fb00 f808 	mul.w	r8, r0, r8
  40ca5a:	45a0      	cmp	r8, r4
  40ca5c:	d907      	bls.n	40ca6e <__udivmoddi4+0x26e>
  40ca5e:	18e4      	adds	r4, r4, r3
  40ca60:	f100 35ff 	add.w	r5, r0, #4294967295
  40ca64:	d229      	bcs.n	40caba <__udivmoddi4+0x2ba>
  40ca66:	45a0      	cmp	r8, r4
  40ca68:	d927      	bls.n	40caba <__udivmoddi4+0x2ba>
  40ca6a:	3802      	subs	r0, #2
  40ca6c:	441c      	add	r4, r3
  40ca6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40ca72:	eba4 0408 	sub.w	r4, r4, r8
  40ca76:	fba0 8902 	umull	r8, r9, r0, r2
  40ca7a:	454c      	cmp	r4, r9
  40ca7c:	46c6      	mov	lr, r8
  40ca7e:	464d      	mov	r5, r9
  40ca80:	d315      	bcc.n	40caae <__udivmoddi4+0x2ae>
  40ca82:	d012      	beq.n	40caaa <__udivmoddi4+0x2aa>
  40ca84:	b156      	cbz	r6, 40ca9c <__udivmoddi4+0x29c>
  40ca86:	ebba 030e 	subs.w	r3, sl, lr
  40ca8a:	eb64 0405 	sbc.w	r4, r4, r5
  40ca8e:	fa04 f707 	lsl.w	r7, r4, r7
  40ca92:	40cb      	lsrs	r3, r1
  40ca94:	431f      	orrs	r7, r3
  40ca96:	40cc      	lsrs	r4, r1
  40ca98:	6037      	str	r7, [r6, #0]
  40ca9a:	6074      	str	r4, [r6, #4]
  40ca9c:	2100      	movs	r1, #0
  40ca9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40caa2:	4618      	mov	r0, r3
  40caa4:	e6f8      	b.n	40c898 <__udivmoddi4+0x98>
  40caa6:	4690      	mov	r8, r2
  40caa8:	e6e0      	b.n	40c86c <__udivmoddi4+0x6c>
  40caaa:	45c2      	cmp	sl, r8
  40caac:	d2ea      	bcs.n	40ca84 <__udivmoddi4+0x284>
  40caae:	ebb8 0e02 	subs.w	lr, r8, r2
  40cab2:	eb69 0503 	sbc.w	r5, r9, r3
  40cab6:	3801      	subs	r0, #1
  40cab8:	e7e4      	b.n	40ca84 <__udivmoddi4+0x284>
  40caba:	4628      	mov	r0, r5
  40cabc:	e7d7      	b.n	40ca6e <__udivmoddi4+0x26e>
  40cabe:	4640      	mov	r0, r8
  40cac0:	e791      	b.n	40c9e6 <__udivmoddi4+0x1e6>
  40cac2:	4681      	mov	r9, r0
  40cac4:	e7be      	b.n	40ca44 <__udivmoddi4+0x244>
  40cac6:	4601      	mov	r1, r0
  40cac8:	e778      	b.n	40c9bc <__udivmoddi4+0x1bc>
  40caca:	3802      	subs	r0, #2
  40cacc:	443c      	add	r4, r7
  40cace:	e745      	b.n	40c95c <__udivmoddi4+0x15c>
  40cad0:	4608      	mov	r0, r1
  40cad2:	e708      	b.n	40c8e6 <__udivmoddi4+0xe6>
  40cad4:	f1a8 0802 	sub.w	r8, r8, #2
  40cad8:	443d      	add	r5, r7
  40cada:	e72b      	b.n	40c934 <__udivmoddi4+0x134>

0040cadc <__aeabi_idiv0>:
  40cadc:	4770      	bx	lr
  40cade:	bf00      	nop

0040cae0 <_fclose_r>:
  40cae0:	b570      	push	{r4, r5, r6, lr}
  40cae2:	b159      	cbz	r1, 40cafc <_fclose_r+0x1c>
  40cae4:	4605      	mov	r5, r0
  40cae6:	460c      	mov	r4, r1
  40cae8:	b110      	cbz	r0, 40caf0 <_fclose_r+0x10>
  40caea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40caec:	2b00      	cmp	r3, #0
  40caee:	d03c      	beq.n	40cb6a <_fclose_r+0x8a>
  40caf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40caf2:	07d8      	lsls	r0, r3, #31
  40caf4:	d505      	bpl.n	40cb02 <_fclose_r+0x22>
  40caf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cafa:	b92b      	cbnz	r3, 40cb08 <_fclose_r+0x28>
  40cafc:	2600      	movs	r6, #0
  40cafe:	4630      	mov	r0, r6
  40cb00:	bd70      	pop	{r4, r5, r6, pc}
  40cb02:	89a3      	ldrh	r3, [r4, #12]
  40cb04:	0599      	lsls	r1, r3, #22
  40cb06:	d53c      	bpl.n	40cb82 <_fclose_r+0xa2>
  40cb08:	4621      	mov	r1, r4
  40cb0a:	4628      	mov	r0, r5
  40cb0c:	f000 f84a 	bl	40cba4 <__sflush_r>
  40cb10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40cb12:	4606      	mov	r6, r0
  40cb14:	b133      	cbz	r3, 40cb24 <_fclose_r+0x44>
  40cb16:	69e1      	ldr	r1, [r4, #28]
  40cb18:	4628      	mov	r0, r5
  40cb1a:	4798      	blx	r3
  40cb1c:	2800      	cmp	r0, #0
  40cb1e:	bfb8      	it	lt
  40cb20:	f04f 36ff 	movlt.w	r6, #4294967295
  40cb24:	89a3      	ldrh	r3, [r4, #12]
  40cb26:	061a      	lsls	r2, r3, #24
  40cb28:	d422      	bmi.n	40cb70 <_fclose_r+0x90>
  40cb2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40cb2c:	b141      	cbz	r1, 40cb40 <_fclose_r+0x60>
  40cb2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40cb32:	4299      	cmp	r1, r3
  40cb34:	d002      	beq.n	40cb3c <_fclose_r+0x5c>
  40cb36:	4628      	mov	r0, r5
  40cb38:	f000 f9b4 	bl	40cea4 <_free_r>
  40cb3c:	2300      	movs	r3, #0
  40cb3e:	6323      	str	r3, [r4, #48]	; 0x30
  40cb40:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40cb42:	b121      	cbz	r1, 40cb4e <_fclose_r+0x6e>
  40cb44:	4628      	mov	r0, r5
  40cb46:	f000 f9ad 	bl	40cea4 <_free_r>
  40cb4a:	2300      	movs	r3, #0
  40cb4c:	6463      	str	r3, [r4, #68]	; 0x44
  40cb4e:	f000 f94d 	bl	40cdec <__sfp_lock_acquire>
  40cb52:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40cb54:	2200      	movs	r2, #0
  40cb56:	07db      	lsls	r3, r3, #31
  40cb58:	81a2      	strh	r2, [r4, #12]
  40cb5a:	d50e      	bpl.n	40cb7a <_fclose_r+0x9a>
  40cb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cb5e:	f000 fc9b 	bl	40d498 <__retarget_lock_close_recursive>
  40cb62:	f000 f949 	bl	40cdf8 <__sfp_lock_release>
  40cb66:	4630      	mov	r0, r6
  40cb68:	bd70      	pop	{r4, r5, r6, pc}
  40cb6a:	f000 f913 	bl	40cd94 <__sinit>
  40cb6e:	e7bf      	b.n	40caf0 <_fclose_r+0x10>
  40cb70:	6921      	ldr	r1, [r4, #16]
  40cb72:	4628      	mov	r0, r5
  40cb74:	f000 f996 	bl	40cea4 <_free_r>
  40cb78:	e7d7      	b.n	40cb2a <_fclose_r+0x4a>
  40cb7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cb7c:	f000 fc90 	bl	40d4a0 <__retarget_lock_release_recursive>
  40cb80:	e7ec      	b.n	40cb5c <_fclose_r+0x7c>
  40cb82:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cb84:	f000 fc8a 	bl	40d49c <__retarget_lock_acquire_recursive>
  40cb88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cb8c:	2b00      	cmp	r3, #0
  40cb8e:	d1bb      	bne.n	40cb08 <_fclose_r+0x28>
  40cb90:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40cb92:	f016 0601 	ands.w	r6, r6, #1
  40cb96:	d1b1      	bne.n	40cafc <_fclose_r+0x1c>
  40cb98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cb9a:	f000 fc81 	bl	40d4a0 <__retarget_lock_release_recursive>
  40cb9e:	4630      	mov	r0, r6
  40cba0:	bd70      	pop	{r4, r5, r6, pc}
  40cba2:	bf00      	nop

0040cba4 <__sflush_r>:
  40cba4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40cba8:	b29a      	uxth	r2, r3
  40cbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cbae:	460d      	mov	r5, r1
  40cbb0:	0711      	lsls	r1, r2, #28
  40cbb2:	4680      	mov	r8, r0
  40cbb4:	d43a      	bmi.n	40cc2c <__sflush_r+0x88>
  40cbb6:	686a      	ldr	r2, [r5, #4]
  40cbb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40cbbc:	2a00      	cmp	r2, #0
  40cbbe:	81ab      	strh	r3, [r5, #12]
  40cbc0:	dd6f      	ble.n	40cca2 <__sflush_r+0xfe>
  40cbc2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40cbc4:	2c00      	cmp	r4, #0
  40cbc6:	d049      	beq.n	40cc5c <__sflush_r+0xb8>
  40cbc8:	2200      	movs	r2, #0
  40cbca:	b29b      	uxth	r3, r3
  40cbcc:	f8d8 6000 	ldr.w	r6, [r8]
  40cbd0:	f8c8 2000 	str.w	r2, [r8]
  40cbd4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40cbd8:	d067      	beq.n	40ccaa <__sflush_r+0x106>
  40cbda:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40cbdc:	075f      	lsls	r7, r3, #29
  40cbde:	d505      	bpl.n	40cbec <__sflush_r+0x48>
  40cbe0:	6869      	ldr	r1, [r5, #4]
  40cbe2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40cbe4:	1a52      	subs	r2, r2, r1
  40cbe6:	b10b      	cbz	r3, 40cbec <__sflush_r+0x48>
  40cbe8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40cbea:	1ad2      	subs	r2, r2, r3
  40cbec:	2300      	movs	r3, #0
  40cbee:	69e9      	ldr	r1, [r5, #28]
  40cbf0:	4640      	mov	r0, r8
  40cbf2:	47a0      	blx	r4
  40cbf4:	1c44      	adds	r4, r0, #1
  40cbf6:	d03c      	beq.n	40cc72 <__sflush_r+0xce>
  40cbf8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40cbfc:	692a      	ldr	r2, [r5, #16]
  40cbfe:	602a      	str	r2, [r5, #0]
  40cc00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40cc04:	2200      	movs	r2, #0
  40cc06:	81ab      	strh	r3, [r5, #12]
  40cc08:	04db      	lsls	r3, r3, #19
  40cc0a:	606a      	str	r2, [r5, #4]
  40cc0c:	d447      	bmi.n	40cc9e <__sflush_r+0xfa>
  40cc0e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40cc10:	f8c8 6000 	str.w	r6, [r8]
  40cc14:	b311      	cbz	r1, 40cc5c <__sflush_r+0xb8>
  40cc16:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40cc1a:	4299      	cmp	r1, r3
  40cc1c:	d002      	beq.n	40cc24 <__sflush_r+0x80>
  40cc1e:	4640      	mov	r0, r8
  40cc20:	f000 f940 	bl	40cea4 <_free_r>
  40cc24:	2000      	movs	r0, #0
  40cc26:	6328      	str	r0, [r5, #48]	; 0x30
  40cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cc2c:	692e      	ldr	r6, [r5, #16]
  40cc2e:	b1ae      	cbz	r6, 40cc5c <__sflush_r+0xb8>
  40cc30:	682c      	ldr	r4, [r5, #0]
  40cc32:	602e      	str	r6, [r5, #0]
  40cc34:	0791      	lsls	r1, r2, #30
  40cc36:	bf0c      	ite	eq
  40cc38:	696b      	ldreq	r3, [r5, #20]
  40cc3a:	2300      	movne	r3, #0
  40cc3c:	1ba4      	subs	r4, r4, r6
  40cc3e:	60ab      	str	r3, [r5, #8]
  40cc40:	e00a      	b.n	40cc58 <__sflush_r+0xb4>
  40cc42:	4623      	mov	r3, r4
  40cc44:	4632      	mov	r2, r6
  40cc46:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40cc48:	69e9      	ldr	r1, [r5, #28]
  40cc4a:	4640      	mov	r0, r8
  40cc4c:	47b8      	blx	r7
  40cc4e:	2800      	cmp	r0, #0
  40cc50:	eba4 0400 	sub.w	r4, r4, r0
  40cc54:	4406      	add	r6, r0
  40cc56:	dd04      	ble.n	40cc62 <__sflush_r+0xbe>
  40cc58:	2c00      	cmp	r4, #0
  40cc5a:	dcf2      	bgt.n	40cc42 <__sflush_r+0x9e>
  40cc5c:	2000      	movs	r0, #0
  40cc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cc62:	89ab      	ldrh	r3, [r5, #12]
  40cc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cc68:	81ab      	strh	r3, [r5, #12]
  40cc6a:	f04f 30ff 	mov.w	r0, #4294967295
  40cc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cc72:	f8d8 4000 	ldr.w	r4, [r8]
  40cc76:	2c1d      	cmp	r4, #29
  40cc78:	d8f3      	bhi.n	40cc62 <__sflush_r+0xbe>
  40cc7a:	4b19      	ldr	r3, [pc, #100]	; (40cce0 <__sflush_r+0x13c>)
  40cc7c:	40e3      	lsrs	r3, r4
  40cc7e:	43db      	mvns	r3, r3
  40cc80:	f013 0301 	ands.w	r3, r3, #1
  40cc84:	d1ed      	bne.n	40cc62 <__sflush_r+0xbe>
  40cc86:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40cc8a:	606b      	str	r3, [r5, #4]
  40cc8c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40cc90:	6929      	ldr	r1, [r5, #16]
  40cc92:	81ab      	strh	r3, [r5, #12]
  40cc94:	04da      	lsls	r2, r3, #19
  40cc96:	6029      	str	r1, [r5, #0]
  40cc98:	d5b9      	bpl.n	40cc0e <__sflush_r+0x6a>
  40cc9a:	2c00      	cmp	r4, #0
  40cc9c:	d1b7      	bne.n	40cc0e <__sflush_r+0x6a>
  40cc9e:	6528      	str	r0, [r5, #80]	; 0x50
  40cca0:	e7b5      	b.n	40cc0e <__sflush_r+0x6a>
  40cca2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40cca4:	2a00      	cmp	r2, #0
  40cca6:	dc8c      	bgt.n	40cbc2 <__sflush_r+0x1e>
  40cca8:	e7d8      	b.n	40cc5c <__sflush_r+0xb8>
  40ccaa:	2301      	movs	r3, #1
  40ccac:	69e9      	ldr	r1, [r5, #28]
  40ccae:	4640      	mov	r0, r8
  40ccb0:	47a0      	blx	r4
  40ccb2:	1c43      	adds	r3, r0, #1
  40ccb4:	4602      	mov	r2, r0
  40ccb6:	d002      	beq.n	40ccbe <__sflush_r+0x11a>
  40ccb8:	89ab      	ldrh	r3, [r5, #12]
  40ccba:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40ccbc:	e78e      	b.n	40cbdc <__sflush_r+0x38>
  40ccbe:	f8d8 3000 	ldr.w	r3, [r8]
  40ccc2:	2b00      	cmp	r3, #0
  40ccc4:	d0f8      	beq.n	40ccb8 <__sflush_r+0x114>
  40ccc6:	2b1d      	cmp	r3, #29
  40ccc8:	d001      	beq.n	40ccce <__sflush_r+0x12a>
  40ccca:	2b16      	cmp	r3, #22
  40cccc:	d102      	bne.n	40ccd4 <__sflush_r+0x130>
  40ccce:	f8c8 6000 	str.w	r6, [r8]
  40ccd2:	e7c3      	b.n	40cc5c <__sflush_r+0xb8>
  40ccd4:	89ab      	ldrh	r3, [r5, #12]
  40ccd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ccda:	81ab      	strh	r3, [r5, #12]
  40ccdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cce0:	20400001 	.word	0x20400001

0040cce4 <_fflush_r>:
  40cce4:	b538      	push	{r3, r4, r5, lr}
  40cce6:	460d      	mov	r5, r1
  40cce8:	4604      	mov	r4, r0
  40ccea:	b108      	cbz	r0, 40ccf0 <_fflush_r+0xc>
  40ccec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ccee:	b1bb      	cbz	r3, 40cd20 <_fflush_r+0x3c>
  40ccf0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40ccf4:	b188      	cbz	r0, 40cd1a <_fflush_r+0x36>
  40ccf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40ccf8:	07db      	lsls	r3, r3, #31
  40ccfa:	d401      	bmi.n	40cd00 <_fflush_r+0x1c>
  40ccfc:	0581      	lsls	r1, r0, #22
  40ccfe:	d517      	bpl.n	40cd30 <_fflush_r+0x4c>
  40cd00:	4620      	mov	r0, r4
  40cd02:	4629      	mov	r1, r5
  40cd04:	f7ff ff4e 	bl	40cba4 <__sflush_r>
  40cd08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40cd0a:	07da      	lsls	r2, r3, #31
  40cd0c:	4604      	mov	r4, r0
  40cd0e:	d402      	bmi.n	40cd16 <_fflush_r+0x32>
  40cd10:	89ab      	ldrh	r3, [r5, #12]
  40cd12:	059b      	lsls	r3, r3, #22
  40cd14:	d507      	bpl.n	40cd26 <_fflush_r+0x42>
  40cd16:	4620      	mov	r0, r4
  40cd18:	bd38      	pop	{r3, r4, r5, pc}
  40cd1a:	4604      	mov	r4, r0
  40cd1c:	4620      	mov	r0, r4
  40cd1e:	bd38      	pop	{r3, r4, r5, pc}
  40cd20:	f000 f838 	bl	40cd94 <__sinit>
  40cd24:	e7e4      	b.n	40ccf0 <_fflush_r+0xc>
  40cd26:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40cd28:	f000 fbba 	bl	40d4a0 <__retarget_lock_release_recursive>
  40cd2c:	4620      	mov	r0, r4
  40cd2e:	bd38      	pop	{r3, r4, r5, pc}
  40cd30:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40cd32:	f000 fbb3 	bl	40d49c <__retarget_lock_acquire_recursive>
  40cd36:	e7e3      	b.n	40cd00 <_fflush_r+0x1c>

0040cd38 <_cleanup_r>:
  40cd38:	4901      	ldr	r1, [pc, #4]	; (40cd40 <_cleanup_r+0x8>)
  40cd3a:	f000 bb25 	b.w	40d388 <_fwalk_reent>
  40cd3e:	bf00      	nop
  40cd40:	0040cae1 	.word	0x0040cae1

0040cd44 <std.isra.0>:
  40cd44:	b510      	push	{r4, lr}
  40cd46:	2300      	movs	r3, #0
  40cd48:	4604      	mov	r4, r0
  40cd4a:	8181      	strh	r1, [r0, #12]
  40cd4c:	81c2      	strh	r2, [r0, #14]
  40cd4e:	6003      	str	r3, [r0, #0]
  40cd50:	6043      	str	r3, [r0, #4]
  40cd52:	6083      	str	r3, [r0, #8]
  40cd54:	6643      	str	r3, [r0, #100]	; 0x64
  40cd56:	6103      	str	r3, [r0, #16]
  40cd58:	6143      	str	r3, [r0, #20]
  40cd5a:	6183      	str	r3, [r0, #24]
  40cd5c:	4619      	mov	r1, r3
  40cd5e:	2208      	movs	r2, #8
  40cd60:	305c      	adds	r0, #92	; 0x5c
  40cd62:	f001 f86b 	bl	40de3c <memset>
  40cd66:	4807      	ldr	r0, [pc, #28]	; (40cd84 <std.isra.0+0x40>)
  40cd68:	4907      	ldr	r1, [pc, #28]	; (40cd88 <std.isra.0+0x44>)
  40cd6a:	4a08      	ldr	r2, [pc, #32]	; (40cd8c <std.isra.0+0x48>)
  40cd6c:	4b08      	ldr	r3, [pc, #32]	; (40cd90 <std.isra.0+0x4c>)
  40cd6e:	6220      	str	r0, [r4, #32]
  40cd70:	61e4      	str	r4, [r4, #28]
  40cd72:	6261      	str	r1, [r4, #36]	; 0x24
  40cd74:	62a2      	str	r2, [r4, #40]	; 0x28
  40cd76:	62e3      	str	r3, [r4, #44]	; 0x2c
  40cd78:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40cd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40cd80:	f000 bb88 	b.w	40d494 <__retarget_lock_init_recursive>
  40cd84:	0040e53d 	.word	0x0040e53d
  40cd88:	0040e565 	.word	0x0040e565
  40cd8c:	0040e5a1 	.word	0x0040e5a1
  40cd90:	0040e5c1 	.word	0x0040e5c1

0040cd94 <__sinit>:
  40cd94:	b510      	push	{r4, lr}
  40cd96:	4604      	mov	r4, r0
  40cd98:	4812      	ldr	r0, [pc, #72]	; (40cde4 <__sinit+0x50>)
  40cd9a:	f000 fb7f 	bl	40d49c <__retarget_lock_acquire_recursive>
  40cd9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40cda0:	b9d2      	cbnz	r2, 40cdd8 <__sinit+0x44>
  40cda2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40cda6:	4810      	ldr	r0, [pc, #64]	; (40cde8 <__sinit+0x54>)
  40cda8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40cdac:	2103      	movs	r1, #3
  40cdae:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40cdb2:	63e0      	str	r0, [r4, #60]	; 0x3c
  40cdb4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40cdb8:	6860      	ldr	r0, [r4, #4]
  40cdba:	2104      	movs	r1, #4
  40cdbc:	f7ff ffc2 	bl	40cd44 <std.isra.0>
  40cdc0:	2201      	movs	r2, #1
  40cdc2:	2109      	movs	r1, #9
  40cdc4:	68a0      	ldr	r0, [r4, #8]
  40cdc6:	f7ff ffbd 	bl	40cd44 <std.isra.0>
  40cdca:	2202      	movs	r2, #2
  40cdcc:	2112      	movs	r1, #18
  40cdce:	68e0      	ldr	r0, [r4, #12]
  40cdd0:	f7ff ffb8 	bl	40cd44 <std.isra.0>
  40cdd4:	2301      	movs	r3, #1
  40cdd6:	63a3      	str	r3, [r4, #56]	; 0x38
  40cdd8:	4802      	ldr	r0, [pc, #8]	; (40cde4 <__sinit+0x50>)
  40cdda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40cdde:	f000 bb5f 	b.w	40d4a0 <__retarget_lock_release_recursive>
  40cde2:	bf00      	nop
  40cde4:	2000305c 	.word	0x2000305c
  40cde8:	0040cd39 	.word	0x0040cd39

0040cdec <__sfp_lock_acquire>:
  40cdec:	4801      	ldr	r0, [pc, #4]	; (40cdf4 <__sfp_lock_acquire+0x8>)
  40cdee:	f000 bb55 	b.w	40d49c <__retarget_lock_acquire_recursive>
  40cdf2:	bf00      	nop
  40cdf4:	20003070 	.word	0x20003070

0040cdf8 <__sfp_lock_release>:
  40cdf8:	4801      	ldr	r0, [pc, #4]	; (40ce00 <__sfp_lock_release+0x8>)
  40cdfa:	f000 bb51 	b.w	40d4a0 <__retarget_lock_release_recursive>
  40cdfe:	bf00      	nop
  40ce00:	20003070 	.word	0x20003070

0040ce04 <_malloc_trim_r>:
  40ce04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ce06:	4f24      	ldr	r7, [pc, #144]	; (40ce98 <_malloc_trim_r+0x94>)
  40ce08:	460c      	mov	r4, r1
  40ce0a:	4606      	mov	r6, r0
  40ce0c:	f001 f864 	bl	40ded8 <__malloc_lock>
  40ce10:	68bb      	ldr	r3, [r7, #8]
  40ce12:	685d      	ldr	r5, [r3, #4]
  40ce14:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40ce18:	310f      	adds	r1, #15
  40ce1a:	f025 0503 	bic.w	r5, r5, #3
  40ce1e:	4429      	add	r1, r5
  40ce20:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40ce24:	f021 010f 	bic.w	r1, r1, #15
  40ce28:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40ce2c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40ce30:	db07      	blt.n	40ce42 <_malloc_trim_r+0x3e>
  40ce32:	2100      	movs	r1, #0
  40ce34:	4630      	mov	r0, r6
  40ce36:	f001 fa01 	bl	40e23c <_sbrk_r>
  40ce3a:	68bb      	ldr	r3, [r7, #8]
  40ce3c:	442b      	add	r3, r5
  40ce3e:	4298      	cmp	r0, r3
  40ce40:	d004      	beq.n	40ce4c <_malloc_trim_r+0x48>
  40ce42:	4630      	mov	r0, r6
  40ce44:	f001 f84e 	bl	40dee4 <__malloc_unlock>
  40ce48:	2000      	movs	r0, #0
  40ce4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ce4c:	4261      	negs	r1, r4
  40ce4e:	4630      	mov	r0, r6
  40ce50:	f001 f9f4 	bl	40e23c <_sbrk_r>
  40ce54:	3001      	adds	r0, #1
  40ce56:	d00d      	beq.n	40ce74 <_malloc_trim_r+0x70>
  40ce58:	4b10      	ldr	r3, [pc, #64]	; (40ce9c <_malloc_trim_r+0x98>)
  40ce5a:	68ba      	ldr	r2, [r7, #8]
  40ce5c:	6819      	ldr	r1, [r3, #0]
  40ce5e:	1b2d      	subs	r5, r5, r4
  40ce60:	f045 0501 	orr.w	r5, r5, #1
  40ce64:	4630      	mov	r0, r6
  40ce66:	1b09      	subs	r1, r1, r4
  40ce68:	6055      	str	r5, [r2, #4]
  40ce6a:	6019      	str	r1, [r3, #0]
  40ce6c:	f001 f83a 	bl	40dee4 <__malloc_unlock>
  40ce70:	2001      	movs	r0, #1
  40ce72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ce74:	2100      	movs	r1, #0
  40ce76:	4630      	mov	r0, r6
  40ce78:	f001 f9e0 	bl	40e23c <_sbrk_r>
  40ce7c:	68ba      	ldr	r2, [r7, #8]
  40ce7e:	1a83      	subs	r3, r0, r2
  40ce80:	2b0f      	cmp	r3, #15
  40ce82:	ddde      	ble.n	40ce42 <_malloc_trim_r+0x3e>
  40ce84:	4c06      	ldr	r4, [pc, #24]	; (40cea0 <_malloc_trim_r+0x9c>)
  40ce86:	4905      	ldr	r1, [pc, #20]	; (40ce9c <_malloc_trim_r+0x98>)
  40ce88:	6824      	ldr	r4, [r4, #0]
  40ce8a:	f043 0301 	orr.w	r3, r3, #1
  40ce8e:	1b00      	subs	r0, r0, r4
  40ce90:	6053      	str	r3, [r2, #4]
  40ce92:	6008      	str	r0, [r1, #0]
  40ce94:	e7d5      	b.n	40ce42 <_malloc_trim_r+0x3e>
  40ce96:	bf00      	nop
  40ce98:	20000834 	.word	0x20000834
  40ce9c:	20002ee0 	.word	0x20002ee0
  40cea0:	20000c3c 	.word	0x20000c3c

0040cea4 <_free_r>:
  40cea4:	2900      	cmp	r1, #0
  40cea6:	d044      	beq.n	40cf32 <_free_r+0x8e>
  40cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ceac:	460d      	mov	r5, r1
  40ceae:	4680      	mov	r8, r0
  40ceb0:	f001 f812 	bl	40ded8 <__malloc_lock>
  40ceb4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40ceb8:	4969      	ldr	r1, [pc, #420]	; (40d060 <_free_r+0x1bc>)
  40ceba:	f027 0301 	bic.w	r3, r7, #1
  40cebe:	f1a5 0408 	sub.w	r4, r5, #8
  40cec2:	18e2      	adds	r2, r4, r3
  40cec4:	688e      	ldr	r6, [r1, #8]
  40cec6:	6850      	ldr	r0, [r2, #4]
  40cec8:	42b2      	cmp	r2, r6
  40ceca:	f020 0003 	bic.w	r0, r0, #3
  40cece:	d05e      	beq.n	40cf8e <_free_r+0xea>
  40ced0:	07fe      	lsls	r6, r7, #31
  40ced2:	6050      	str	r0, [r2, #4]
  40ced4:	d40b      	bmi.n	40ceee <_free_r+0x4a>
  40ced6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40ceda:	1be4      	subs	r4, r4, r7
  40cedc:	f101 0e08 	add.w	lr, r1, #8
  40cee0:	68a5      	ldr	r5, [r4, #8]
  40cee2:	4575      	cmp	r5, lr
  40cee4:	443b      	add	r3, r7
  40cee6:	d06d      	beq.n	40cfc4 <_free_r+0x120>
  40cee8:	68e7      	ldr	r7, [r4, #12]
  40ceea:	60ef      	str	r7, [r5, #12]
  40ceec:	60bd      	str	r5, [r7, #8]
  40ceee:	1815      	adds	r5, r2, r0
  40cef0:	686d      	ldr	r5, [r5, #4]
  40cef2:	07ed      	lsls	r5, r5, #31
  40cef4:	d53e      	bpl.n	40cf74 <_free_r+0xd0>
  40cef6:	f043 0201 	orr.w	r2, r3, #1
  40cefa:	6062      	str	r2, [r4, #4]
  40cefc:	50e3      	str	r3, [r4, r3]
  40cefe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40cf02:	d217      	bcs.n	40cf34 <_free_r+0x90>
  40cf04:	08db      	lsrs	r3, r3, #3
  40cf06:	1c58      	adds	r0, r3, #1
  40cf08:	109a      	asrs	r2, r3, #2
  40cf0a:	684d      	ldr	r5, [r1, #4]
  40cf0c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40cf10:	60a7      	str	r7, [r4, #8]
  40cf12:	2301      	movs	r3, #1
  40cf14:	4093      	lsls	r3, r2
  40cf16:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40cf1a:	432b      	orrs	r3, r5
  40cf1c:	3a08      	subs	r2, #8
  40cf1e:	60e2      	str	r2, [r4, #12]
  40cf20:	604b      	str	r3, [r1, #4]
  40cf22:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40cf26:	60fc      	str	r4, [r7, #12]
  40cf28:	4640      	mov	r0, r8
  40cf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cf2e:	f000 bfd9 	b.w	40dee4 <__malloc_unlock>
  40cf32:	4770      	bx	lr
  40cf34:	0a5a      	lsrs	r2, r3, #9
  40cf36:	2a04      	cmp	r2, #4
  40cf38:	d852      	bhi.n	40cfe0 <_free_r+0x13c>
  40cf3a:	099a      	lsrs	r2, r3, #6
  40cf3c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40cf40:	00ff      	lsls	r7, r7, #3
  40cf42:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40cf46:	19c8      	adds	r0, r1, r7
  40cf48:	59ca      	ldr	r2, [r1, r7]
  40cf4a:	3808      	subs	r0, #8
  40cf4c:	4290      	cmp	r0, r2
  40cf4e:	d04f      	beq.n	40cff0 <_free_r+0x14c>
  40cf50:	6851      	ldr	r1, [r2, #4]
  40cf52:	f021 0103 	bic.w	r1, r1, #3
  40cf56:	428b      	cmp	r3, r1
  40cf58:	d232      	bcs.n	40cfc0 <_free_r+0x11c>
  40cf5a:	6892      	ldr	r2, [r2, #8]
  40cf5c:	4290      	cmp	r0, r2
  40cf5e:	d1f7      	bne.n	40cf50 <_free_r+0xac>
  40cf60:	68c3      	ldr	r3, [r0, #12]
  40cf62:	60a0      	str	r0, [r4, #8]
  40cf64:	60e3      	str	r3, [r4, #12]
  40cf66:	609c      	str	r4, [r3, #8]
  40cf68:	60c4      	str	r4, [r0, #12]
  40cf6a:	4640      	mov	r0, r8
  40cf6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cf70:	f000 bfb8 	b.w	40dee4 <__malloc_unlock>
  40cf74:	6895      	ldr	r5, [r2, #8]
  40cf76:	4f3b      	ldr	r7, [pc, #236]	; (40d064 <_free_r+0x1c0>)
  40cf78:	42bd      	cmp	r5, r7
  40cf7a:	4403      	add	r3, r0
  40cf7c:	d040      	beq.n	40d000 <_free_r+0x15c>
  40cf7e:	68d0      	ldr	r0, [r2, #12]
  40cf80:	60e8      	str	r0, [r5, #12]
  40cf82:	f043 0201 	orr.w	r2, r3, #1
  40cf86:	6085      	str	r5, [r0, #8]
  40cf88:	6062      	str	r2, [r4, #4]
  40cf8a:	50e3      	str	r3, [r4, r3]
  40cf8c:	e7b7      	b.n	40cefe <_free_r+0x5a>
  40cf8e:	07ff      	lsls	r7, r7, #31
  40cf90:	4403      	add	r3, r0
  40cf92:	d407      	bmi.n	40cfa4 <_free_r+0x100>
  40cf94:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40cf98:	1aa4      	subs	r4, r4, r2
  40cf9a:	4413      	add	r3, r2
  40cf9c:	68a0      	ldr	r0, [r4, #8]
  40cf9e:	68e2      	ldr	r2, [r4, #12]
  40cfa0:	60c2      	str	r2, [r0, #12]
  40cfa2:	6090      	str	r0, [r2, #8]
  40cfa4:	4a30      	ldr	r2, [pc, #192]	; (40d068 <_free_r+0x1c4>)
  40cfa6:	6812      	ldr	r2, [r2, #0]
  40cfa8:	f043 0001 	orr.w	r0, r3, #1
  40cfac:	4293      	cmp	r3, r2
  40cfae:	6060      	str	r0, [r4, #4]
  40cfb0:	608c      	str	r4, [r1, #8]
  40cfb2:	d3b9      	bcc.n	40cf28 <_free_r+0x84>
  40cfb4:	4b2d      	ldr	r3, [pc, #180]	; (40d06c <_free_r+0x1c8>)
  40cfb6:	4640      	mov	r0, r8
  40cfb8:	6819      	ldr	r1, [r3, #0]
  40cfba:	f7ff ff23 	bl	40ce04 <_malloc_trim_r>
  40cfbe:	e7b3      	b.n	40cf28 <_free_r+0x84>
  40cfc0:	4610      	mov	r0, r2
  40cfc2:	e7cd      	b.n	40cf60 <_free_r+0xbc>
  40cfc4:	1811      	adds	r1, r2, r0
  40cfc6:	6849      	ldr	r1, [r1, #4]
  40cfc8:	07c9      	lsls	r1, r1, #31
  40cfca:	d444      	bmi.n	40d056 <_free_r+0x1b2>
  40cfcc:	6891      	ldr	r1, [r2, #8]
  40cfce:	68d2      	ldr	r2, [r2, #12]
  40cfd0:	60ca      	str	r2, [r1, #12]
  40cfd2:	4403      	add	r3, r0
  40cfd4:	f043 0001 	orr.w	r0, r3, #1
  40cfd8:	6091      	str	r1, [r2, #8]
  40cfda:	6060      	str	r0, [r4, #4]
  40cfdc:	50e3      	str	r3, [r4, r3]
  40cfde:	e7a3      	b.n	40cf28 <_free_r+0x84>
  40cfe0:	2a14      	cmp	r2, #20
  40cfe2:	d816      	bhi.n	40d012 <_free_r+0x16e>
  40cfe4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40cfe8:	00ff      	lsls	r7, r7, #3
  40cfea:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40cfee:	e7aa      	b.n	40cf46 <_free_r+0xa2>
  40cff0:	10aa      	asrs	r2, r5, #2
  40cff2:	2301      	movs	r3, #1
  40cff4:	684d      	ldr	r5, [r1, #4]
  40cff6:	4093      	lsls	r3, r2
  40cff8:	432b      	orrs	r3, r5
  40cffa:	604b      	str	r3, [r1, #4]
  40cffc:	4603      	mov	r3, r0
  40cffe:	e7b0      	b.n	40cf62 <_free_r+0xbe>
  40d000:	f043 0201 	orr.w	r2, r3, #1
  40d004:	614c      	str	r4, [r1, #20]
  40d006:	610c      	str	r4, [r1, #16]
  40d008:	60e5      	str	r5, [r4, #12]
  40d00a:	60a5      	str	r5, [r4, #8]
  40d00c:	6062      	str	r2, [r4, #4]
  40d00e:	50e3      	str	r3, [r4, r3]
  40d010:	e78a      	b.n	40cf28 <_free_r+0x84>
  40d012:	2a54      	cmp	r2, #84	; 0x54
  40d014:	d806      	bhi.n	40d024 <_free_r+0x180>
  40d016:	0b1a      	lsrs	r2, r3, #12
  40d018:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40d01c:	00ff      	lsls	r7, r7, #3
  40d01e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40d022:	e790      	b.n	40cf46 <_free_r+0xa2>
  40d024:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40d028:	d806      	bhi.n	40d038 <_free_r+0x194>
  40d02a:	0bda      	lsrs	r2, r3, #15
  40d02c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40d030:	00ff      	lsls	r7, r7, #3
  40d032:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40d036:	e786      	b.n	40cf46 <_free_r+0xa2>
  40d038:	f240 5054 	movw	r0, #1364	; 0x554
  40d03c:	4282      	cmp	r2, r0
  40d03e:	d806      	bhi.n	40d04e <_free_r+0x1aa>
  40d040:	0c9a      	lsrs	r2, r3, #18
  40d042:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40d046:	00ff      	lsls	r7, r7, #3
  40d048:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40d04c:	e77b      	b.n	40cf46 <_free_r+0xa2>
  40d04e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40d052:	257e      	movs	r5, #126	; 0x7e
  40d054:	e777      	b.n	40cf46 <_free_r+0xa2>
  40d056:	f043 0101 	orr.w	r1, r3, #1
  40d05a:	6061      	str	r1, [r4, #4]
  40d05c:	6013      	str	r3, [r2, #0]
  40d05e:	e763      	b.n	40cf28 <_free_r+0x84>
  40d060:	20000834 	.word	0x20000834
  40d064:	2000083c 	.word	0x2000083c
  40d068:	20000c40 	.word	0x20000c40
  40d06c:	20002f10 	.word	0x20002f10

0040d070 <_fstat_r>:
  40d070:	b538      	push	{r3, r4, r5, lr}
  40d072:	460b      	mov	r3, r1
  40d074:	4c07      	ldr	r4, [pc, #28]	; (40d094 <_fstat_r+0x24>)
  40d076:	4605      	mov	r5, r0
  40d078:	4611      	mov	r1, r2
  40d07a:	4618      	mov	r0, r3
  40d07c:	2300      	movs	r3, #0
  40d07e:	6023      	str	r3, [r4, #0]
  40d080:	f7f9 fcdd 	bl	406a3e <_fstat>
  40d084:	1c43      	adds	r3, r0, #1
  40d086:	d000      	beq.n	40d08a <_fstat_r+0x1a>
  40d088:	bd38      	pop	{r3, r4, r5, pc}
  40d08a:	6823      	ldr	r3, [r4, #0]
  40d08c:	2b00      	cmp	r3, #0
  40d08e:	d0fb      	beq.n	40d088 <_fstat_r+0x18>
  40d090:	602b      	str	r3, [r5, #0]
  40d092:	bd38      	pop	{r3, r4, r5, pc}
  40d094:	20003074 	.word	0x20003074

0040d098 <__sfvwrite_r>:
  40d098:	6893      	ldr	r3, [r2, #8]
  40d09a:	2b00      	cmp	r3, #0
  40d09c:	d073      	beq.n	40d186 <__sfvwrite_r+0xee>
  40d09e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d0a2:	898b      	ldrh	r3, [r1, #12]
  40d0a4:	b083      	sub	sp, #12
  40d0a6:	460c      	mov	r4, r1
  40d0a8:	0719      	lsls	r1, r3, #28
  40d0aa:	9000      	str	r0, [sp, #0]
  40d0ac:	4616      	mov	r6, r2
  40d0ae:	d526      	bpl.n	40d0fe <__sfvwrite_r+0x66>
  40d0b0:	6922      	ldr	r2, [r4, #16]
  40d0b2:	b322      	cbz	r2, 40d0fe <__sfvwrite_r+0x66>
  40d0b4:	f013 0002 	ands.w	r0, r3, #2
  40d0b8:	6835      	ldr	r5, [r6, #0]
  40d0ba:	d02c      	beq.n	40d116 <__sfvwrite_r+0x7e>
  40d0bc:	f04f 0900 	mov.w	r9, #0
  40d0c0:	4fb0      	ldr	r7, [pc, #704]	; (40d384 <__sfvwrite_r+0x2ec>)
  40d0c2:	46c8      	mov	r8, r9
  40d0c4:	46b2      	mov	sl, r6
  40d0c6:	45b8      	cmp	r8, r7
  40d0c8:	4643      	mov	r3, r8
  40d0ca:	464a      	mov	r2, r9
  40d0cc:	bf28      	it	cs
  40d0ce:	463b      	movcs	r3, r7
  40d0d0:	9800      	ldr	r0, [sp, #0]
  40d0d2:	f1b8 0f00 	cmp.w	r8, #0
  40d0d6:	d050      	beq.n	40d17a <__sfvwrite_r+0xe2>
  40d0d8:	69e1      	ldr	r1, [r4, #28]
  40d0da:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40d0dc:	47b0      	blx	r6
  40d0de:	2800      	cmp	r0, #0
  40d0e0:	dd58      	ble.n	40d194 <__sfvwrite_r+0xfc>
  40d0e2:	f8da 3008 	ldr.w	r3, [sl, #8]
  40d0e6:	1a1b      	subs	r3, r3, r0
  40d0e8:	4481      	add	r9, r0
  40d0ea:	eba8 0800 	sub.w	r8, r8, r0
  40d0ee:	f8ca 3008 	str.w	r3, [sl, #8]
  40d0f2:	2b00      	cmp	r3, #0
  40d0f4:	d1e7      	bne.n	40d0c6 <__sfvwrite_r+0x2e>
  40d0f6:	2000      	movs	r0, #0
  40d0f8:	b003      	add	sp, #12
  40d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d0fe:	4621      	mov	r1, r4
  40d100:	9800      	ldr	r0, [sp, #0]
  40d102:	f005 fc15 	bl	412930 <__swsetup_r>
  40d106:	2800      	cmp	r0, #0
  40d108:	f040 8133 	bne.w	40d372 <__sfvwrite_r+0x2da>
  40d10c:	89a3      	ldrh	r3, [r4, #12]
  40d10e:	6835      	ldr	r5, [r6, #0]
  40d110:	f013 0002 	ands.w	r0, r3, #2
  40d114:	d1d2      	bne.n	40d0bc <__sfvwrite_r+0x24>
  40d116:	f013 0901 	ands.w	r9, r3, #1
  40d11a:	d145      	bne.n	40d1a8 <__sfvwrite_r+0x110>
  40d11c:	464f      	mov	r7, r9
  40d11e:	9601      	str	r6, [sp, #4]
  40d120:	b337      	cbz	r7, 40d170 <__sfvwrite_r+0xd8>
  40d122:	059a      	lsls	r2, r3, #22
  40d124:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40d128:	f140 8083 	bpl.w	40d232 <__sfvwrite_r+0x19a>
  40d12c:	4547      	cmp	r7, r8
  40d12e:	46c3      	mov	fp, r8
  40d130:	f0c0 80ab 	bcc.w	40d28a <__sfvwrite_r+0x1f2>
  40d134:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40d138:	f040 80ac 	bne.w	40d294 <__sfvwrite_r+0x1fc>
  40d13c:	6820      	ldr	r0, [r4, #0]
  40d13e:	46ba      	mov	sl, r7
  40d140:	465a      	mov	r2, fp
  40d142:	4649      	mov	r1, r9
  40d144:	f000 fe16 	bl	40dd74 <memmove>
  40d148:	68a2      	ldr	r2, [r4, #8]
  40d14a:	6823      	ldr	r3, [r4, #0]
  40d14c:	eba2 0208 	sub.w	r2, r2, r8
  40d150:	445b      	add	r3, fp
  40d152:	60a2      	str	r2, [r4, #8]
  40d154:	6023      	str	r3, [r4, #0]
  40d156:	9a01      	ldr	r2, [sp, #4]
  40d158:	6893      	ldr	r3, [r2, #8]
  40d15a:	eba3 030a 	sub.w	r3, r3, sl
  40d15e:	44d1      	add	r9, sl
  40d160:	eba7 070a 	sub.w	r7, r7, sl
  40d164:	6093      	str	r3, [r2, #8]
  40d166:	2b00      	cmp	r3, #0
  40d168:	d0c5      	beq.n	40d0f6 <__sfvwrite_r+0x5e>
  40d16a:	89a3      	ldrh	r3, [r4, #12]
  40d16c:	2f00      	cmp	r7, #0
  40d16e:	d1d8      	bne.n	40d122 <__sfvwrite_r+0x8a>
  40d170:	f8d5 9000 	ldr.w	r9, [r5]
  40d174:	686f      	ldr	r7, [r5, #4]
  40d176:	3508      	adds	r5, #8
  40d178:	e7d2      	b.n	40d120 <__sfvwrite_r+0x88>
  40d17a:	f8d5 9000 	ldr.w	r9, [r5]
  40d17e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40d182:	3508      	adds	r5, #8
  40d184:	e79f      	b.n	40d0c6 <__sfvwrite_r+0x2e>
  40d186:	2000      	movs	r0, #0
  40d188:	4770      	bx	lr
  40d18a:	4621      	mov	r1, r4
  40d18c:	9800      	ldr	r0, [sp, #0]
  40d18e:	f7ff fda9 	bl	40cce4 <_fflush_r>
  40d192:	b370      	cbz	r0, 40d1f2 <__sfvwrite_r+0x15a>
  40d194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d19c:	f04f 30ff 	mov.w	r0, #4294967295
  40d1a0:	81a3      	strh	r3, [r4, #12]
  40d1a2:	b003      	add	sp, #12
  40d1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d1a8:	4681      	mov	r9, r0
  40d1aa:	4633      	mov	r3, r6
  40d1ac:	464e      	mov	r6, r9
  40d1ae:	46a8      	mov	r8, r5
  40d1b0:	469a      	mov	sl, r3
  40d1b2:	464d      	mov	r5, r9
  40d1b4:	b34e      	cbz	r6, 40d20a <__sfvwrite_r+0x172>
  40d1b6:	b380      	cbz	r0, 40d21a <__sfvwrite_r+0x182>
  40d1b8:	6820      	ldr	r0, [r4, #0]
  40d1ba:	6923      	ldr	r3, [r4, #16]
  40d1bc:	6962      	ldr	r2, [r4, #20]
  40d1be:	45b1      	cmp	r9, r6
  40d1c0:	46cb      	mov	fp, r9
  40d1c2:	bf28      	it	cs
  40d1c4:	46b3      	movcs	fp, r6
  40d1c6:	4298      	cmp	r0, r3
  40d1c8:	465f      	mov	r7, fp
  40d1ca:	d904      	bls.n	40d1d6 <__sfvwrite_r+0x13e>
  40d1cc:	68a3      	ldr	r3, [r4, #8]
  40d1ce:	4413      	add	r3, r2
  40d1d0:	459b      	cmp	fp, r3
  40d1d2:	f300 80a6 	bgt.w	40d322 <__sfvwrite_r+0x28a>
  40d1d6:	4593      	cmp	fp, r2
  40d1d8:	db4b      	blt.n	40d272 <__sfvwrite_r+0x1da>
  40d1da:	4613      	mov	r3, r2
  40d1dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40d1de:	69e1      	ldr	r1, [r4, #28]
  40d1e0:	9800      	ldr	r0, [sp, #0]
  40d1e2:	462a      	mov	r2, r5
  40d1e4:	47b8      	blx	r7
  40d1e6:	1e07      	subs	r7, r0, #0
  40d1e8:	ddd4      	ble.n	40d194 <__sfvwrite_r+0xfc>
  40d1ea:	ebb9 0907 	subs.w	r9, r9, r7
  40d1ee:	d0cc      	beq.n	40d18a <__sfvwrite_r+0xf2>
  40d1f0:	2001      	movs	r0, #1
  40d1f2:	f8da 3008 	ldr.w	r3, [sl, #8]
  40d1f6:	1bdb      	subs	r3, r3, r7
  40d1f8:	443d      	add	r5, r7
  40d1fa:	1bf6      	subs	r6, r6, r7
  40d1fc:	f8ca 3008 	str.w	r3, [sl, #8]
  40d200:	2b00      	cmp	r3, #0
  40d202:	f43f af78 	beq.w	40d0f6 <__sfvwrite_r+0x5e>
  40d206:	2e00      	cmp	r6, #0
  40d208:	d1d5      	bne.n	40d1b6 <__sfvwrite_r+0x11e>
  40d20a:	f108 0308 	add.w	r3, r8, #8
  40d20e:	e913 0060 	ldmdb	r3, {r5, r6}
  40d212:	4698      	mov	r8, r3
  40d214:	3308      	adds	r3, #8
  40d216:	2e00      	cmp	r6, #0
  40d218:	d0f9      	beq.n	40d20e <__sfvwrite_r+0x176>
  40d21a:	4632      	mov	r2, r6
  40d21c:	210a      	movs	r1, #10
  40d21e:	4628      	mov	r0, r5
  40d220:	f000 fc8e 	bl	40db40 <memchr>
  40d224:	2800      	cmp	r0, #0
  40d226:	f000 80a1 	beq.w	40d36c <__sfvwrite_r+0x2d4>
  40d22a:	3001      	adds	r0, #1
  40d22c:	eba0 0905 	sub.w	r9, r0, r5
  40d230:	e7c2      	b.n	40d1b8 <__sfvwrite_r+0x120>
  40d232:	6820      	ldr	r0, [r4, #0]
  40d234:	6923      	ldr	r3, [r4, #16]
  40d236:	4298      	cmp	r0, r3
  40d238:	d802      	bhi.n	40d240 <__sfvwrite_r+0x1a8>
  40d23a:	6963      	ldr	r3, [r4, #20]
  40d23c:	429f      	cmp	r7, r3
  40d23e:	d25d      	bcs.n	40d2fc <__sfvwrite_r+0x264>
  40d240:	45b8      	cmp	r8, r7
  40d242:	bf28      	it	cs
  40d244:	46b8      	movcs	r8, r7
  40d246:	4642      	mov	r2, r8
  40d248:	4649      	mov	r1, r9
  40d24a:	f000 fd93 	bl	40dd74 <memmove>
  40d24e:	68a3      	ldr	r3, [r4, #8]
  40d250:	6822      	ldr	r2, [r4, #0]
  40d252:	eba3 0308 	sub.w	r3, r3, r8
  40d256:	4442      	add	r2, r8
  40d258:	60a3      	str	r3, [r4, #8]
  40d25a:	6022      	str	r2, [r4, #0]
  40d25c:	b10b      	cbz	r3, 40d262 <__sfvwrite_r+0x1ca>
  40d25e:	46c2      	mov	sl, r8
  40d260:	e779      	b.n	40d156 <__sfvwrite_r+0xbe>
  40d262:	4621      	mov	r1, r4
  40d264:	9800      	ldr	r0, [sp, #0]
  40d266:	f7ff fd3d 	bl	40cce4 <_fflush_r>
  40d26a:	2800      	cmp	r0, #0
  40d26c:	d192      	bne.n	40d194 <__sfvwrite_r+0xfc>
  40d26e:	46c2      	mov	sl, r8
  40d270:	e771      	b.n	40d156 <__sfvwrite_r+0xbe>
  40d272:	465a      	mov	r2, fp
  40d274:	4629      	mov	r1, r5
  40d276:	f000 fd7d 	bl	40dd74 <memmove>
  40d27a:	68a2      	ldr	r2, [r4, #8]
  40d27c:	6823      	ldr	r3, [r4, #0]
  40d27e:	eba2 020b 	sub.w	r2, r2, fp
  40d282:	445b      	add	r3, fp
  40d284:	60a2      	str	r2, [r4, #8]
  40d286:	6023      	str	r3, [r4, #0]
  40d288:	e7af      	b.n	40d1ea <__sfvwrite_r+0x152>
  40d28a:	6820      	ldr	r0, [r4, #0]
  40d28c:	46b8      	mov	r8, r7
  40d28e:	46ba      	mov	sl, r7
  40d290:	46bb      	mov	fp, r7
  40d292:	e755      	b.n	40d140 <__sfvwrite_r+0xa8>
  40d294:	6962      	ldr	r2, [r4, #20]
  40d296:	6820      	ldr	r0, [r4, #0]
  40d298:	6921      	ldr	r1, [r4, #16]
  40d29a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40d29e:	eba0 0a01 	sub.w	sl, r0, r1
  40d2a2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40d2a6:	f10a 0001 	add.w	r0, sl, #1
  40d2aa:	ea4f 0868 	mov.w	r8, r8, asr #1
  40d2ae:	4438      	add	r0, r7
  40d2b0:	4540      	cmp	r0, r8
  40d2b2:	4642      	mov	r2, r8
  40d2b4:	bf84      	itt	hi
  40d2b6:	4680      	movhi	r8, r0
  40d2b8:	4642      	movhi	r2, r8
  40d2ba:	055b      	lsls	r3, r3, #21
  40d2bc:	d544      	bpl.n	40d348 <__sfvwrite_r+0x2b0>
  40d2be:	4611      	mov	r1, r2
  40d2c0:	9800      	ldr	r0, [sp, #0]
  40d2c2:	f000 f977 	bl	40d5b4 <_malloc_r>
  40d2c6:	4683      	mov	fp, r0
  40d2c8:	2800      	cmp	r0, #0
  40d2ca:	d055      	beq.n	40d378 <__sfvwrite_r+0x2e0>
  40d2cc:	4652      	mov	r2, sl
  40d2ce:	6921      	ldr	r1, [r4, #16]
  40d2d0:	f000 fcb6 	bl	40dc40 <memcpy>
  40d2d4:	89a3      	ldrh	r3, [r4, #12]
  40d2d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40d2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d2de:	81a3      	strh	r3, [r4, #12]
  40d2e0:	eb0b 000a 	add.w	r0, fp, sl
  40d2e4:	eba8 030a 	sub.w	r3, r8, sl
  40d2e8:	f8c4 b010 	str.w	fp, [r4, #16]
  40d2ec:	f8c4 8014 	str.w	r8, [r4, #20]
  40d2f0:	6020      	str	r0, [r4, #0]
  40d2f2:	60a3      	str	r3, [r4, #8]
  40d2f4:	46b8      	mov	r8, r7
  40d2f6:	46ba      	mov	sl, r7
  40d2f8:	46bb      	mov	fp, r7
  40d2fa:	e721      	b.n	40d140 <__sfvwrite_r+0xa8>
  40d2fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40d300:	42b9      	cmp	r1, r7
  40d302:	bf28      	it	cs
  40d304:	4639      	movcs	r1, r7
  40d306:	464a      	mov	r2, r9
  40d308:	fb91 f1f3 	sdiv	r1, r1, r3
  40d30c:	9800      	ldr	r0, [sp, #0]
  40d30e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40d310:	fb03 f301 	mul.w	r3, r3, r1
  40d314:	69e1      	ldr	r1, [r4, #28]
  40d316:	47b0      	blx	r6
  40d318:	f1b0 0a00 	subs.w	sl, r0, #0
  40d31c:	f73f af1b 	bgt.w	40d156 <__sfvwrite_r+0xbe>
  40d320:	e738      	b.n	40d194 <__sfvwrite_r+0xfc>
  40d322:	461a      	mov	r2, r3
  40d324:	4629      	mov	r1, r5
  40d326:	9301      	str	r3, [sp, #4]
  40d328:	f000 fd24 	bl	40dd74 <memmove>
  40d32c:	6822      	ldr	r2, [r4, #0]
  40d32e:	9b01      	ldr	r3, [sp, #4]
  40d330:	9800      	ldr	r0, [sp, #0]
  40d332:	441a      	add	r2, r3
  40d334:	6022      	str	r2, [r4, #0]
  40d336:	4621      	mov	r1, r4
  40d338:	f7ff fcd4 	bl	40cce4 <_fflush_r>
  40d33c:	9b01      	ldr	r3, [sp, #4]
  40d33e:	2800      	cmp	r0, #0
  40d340:	f47f af28 	bne.w	40d194 <__sfvwrite_r+0xfc>
  40d344:	461f      	mov	r7, r3
  40d346:	e750      	b.n	40d1ea <__sfvwrite_r+0x152>
  40d348:	9800      	ldr	r0, [sp, #0]
  40d34a:	f000 fdd1 	bl	40def0 <_realloc_r>
  40d34e:	4683      	mov	fp, r0
  40d350:	2800      	cmp	r0, #0
  40d352:	d1c5      	bne.n	40d2e0 <__sfvwrite_r+0x248>
  40d354:	9d00      	ldr	r5, [sp, #0]
  40d356:	6921      	ldr	r1, [r4, #16]
  40d358:	4628      	mov	r0, r5
  40d35a:	f7ff fda3 	bl	40cea4 <_free_r>
  40d35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d362:	220c      	movs	r2, #12
  40d364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40d368:	602a      	str	r2, [r5, #0]
  40d36a:	e715      	b.n	40d198 <__sfvwrite_r+0x100>
  40d36c:	f106 0901 	add.w	r9, r6, #1
  40d370:	e722      	b.n	40d1b8 <__sfvwrite_r+0x120>
  40d372:	f04f 30ff 	mov.w	r0, #4294967295
  40d376:	e6bf      	b.n	40d0f8 <__sfvwrite_r+0x60>
  40d378:	9a00      	ldr	r2, [sp, #0]
  40d37a:	230c      	movs	r3, #12
  40d37c:	6013      	str	r3, [r2, #0]
  40d37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d382:	e709      	b.n	40d198 <__sfvwrite_r+0x100>
  40d384:	7ffffc00 	.word	0x7ffffc00

0040d388 <_fwalk_reent>:
  40d388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d38c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40d390:	d01f      	beq.n	40d3d2 <_fwalk_reent+0x4a>
  40d392:	4688      	mov	r8, r1
  40d394:	4606      	mov	r6, r0
  40d396:	f04f 0900 	mov.w	r9, #0
  40d39a:	687d      	ldr	r5, [r7, #4]
  40d39c:	68bc      	ldr	r4, [r7, #8]
  40d39e:	3d01      	subs	r5, #1
  40d3a0:	d411      	bmi.n	40d3c6 <_fwalk_reent+0x3e>
  40d3a2:	89a3      	ldrh	r3, [r4, #12]
  40d3a4:	2b01      	cmp	r3, #1
  40d3a6:	f105 35ff 	add.w	r5, r5, #4294967295
  40d3aa:	d908      	bls.n	40d3be <_fwalk_reent+0x36>
  40d3ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40d3b0:	3301      	adds	r3, #1
  40d3b2:	4621      	mov	r1, r4
  40d3b4:	4630      	mov	r0, r6
  40d3b6:	d002      	beq.n	40d3be <_fwalk_reent+0x36>
  40d3b8:	47c0      	blx	r8
  40d3ba:	ea49 0900 	orr.w	r9, r9, r0
  40d3be:	1c6b      	adds	r3, r5, #1
  40d3c0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40d3c4:	d1ed      	bne.n	40d3a2 <_fwalk_reent+0x1a>
  40d3c6:	683f      	ldr	r7, [r7, #0]
  40d3c8:	2f00      	cmp	r7, #0
  40d3ca:	d1e6      	bne.n	40d39a <_fwalk_reent+0x12>
  40d3cc:	4648      	mov	r0, r9
  40d3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d3d2:	46b9      	mov	r9, r7
  40d3d4:	4648      	mov	r0, r9
  40d3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d3da:	bf00      	nop

0040d3dc <__libc_init_array>:
  40d3dc:	b570      	push	{r4, r5, r6, lr}
  40d3de:	4e0f      	ldr	r6, [pc, #60]	; (40d41c <__libc_init_array+0x40>)
  40d3e0:	4d0f      	ldr	r5, [pc, #60]	; (40d420 <__libc_init_array+0x44>)
  40d3e2:	1b76      	subs	r6, r6, r5
  40d3e4:	10b6      	asrs	r6, r6, #2
  40d3e6:	bf18      	it	ne
  40d3e8:	2400      	movne	r4, #0
  40d3ea:	d005      	beq.n	40d3f8 <__libc_init_array+0x1c>
  40d3ec:	3401      	adds	r4, #1
  40d3ee:	f855 3b04 	ldr.w	r3, [r5], #4
  40d3f2:	4798      	blx	r3
  40d3f4:	42a6      	cmp	r6, r4
  40d3f6:	d1f9      	bne.n	40d3ec <__libc_init_array+0x10>
  40d3f8:	4e0a      	ldr	r6, [pc, #40]	; (40d424 <__libc_init_array+0x48>)
  40d3fa:	4d0b      	ldr	r5, [pc, #44]	; (40d428 <__libc_init_array+0x4c>)
  40d3fc:	1b76      	subs	r6, r6, r5
  40d3fe:	f00a fa4d 	bl	41789c <_init>
  40d402:	10b6      	asrs	r6, r6, #2
  40d404:	bf18      	it	ne
  40d406:	2400      	movne	r4, #0
  40d408:	d006      	beq.n	40d418 <__libc_init_array+0x3c>
  40d40a:	3401      	adds	r4, #1
  40d40c:	f855 3b04 	ldr.w	r3, [r5], #4
  40d410:	4798      	blx	r3
  40d412:	42a6      	cmp	r6, r4
  40d414:	d1f9      	bne.n	40d40a <__libc_init_array+0x2e>
  40d416:	bd70      	pop	{r4, r5, r6, pc}
  40d418:	bd70      	pop	{r4, r5, r6, pc}
  40d41a:	bf00      	nop
  40d41c:	004178a8 	.word	0x004178a8
  40d420:	004178a8 	.word	0x004178a8
  40d424:	004178b0 	.word	0x004178b0
  40d428:	004178a8 	.word	0x004178a8

0040d42c <iprintf>:
  40d42c:	b40f      	push	{r0, r1, r2, r3}
  40d42e:	b500      	push	{lr}
  40d430:	4907      	ldr	r1, [pc, #28]	; (40d450 <iprintf+0x24>)
  40d432:	b083      	sub	sp, #12
  40d434:	ab04      	add	r3, sp, #16
  40d436:	6808      	ldr	r0, [r1, #0]
  40d438:	f853 2b04 	ldr.w	r2, [r3], #4
  40d43c:	6881      	ldr	r1, [r0, #8]
  40d43e:	9301      	str	r3, [sp, #4]
  40d440:	f004 fbc8 	bl	411bd4 <_vfiprintf_r>
  40d444:	b003      	add	sp, #12
  40d446:	f85d eb04 	ldr.w	lr, [sp], #4
  40d44a:	b004      	add	sp, #16
  40d44c:	4770      	bx	lr
  40d44e:	bf00      	nop
  40d450:	20000298 	.word	0x20000298

0040d454 <__locale_mb_cur_max>:
  40d454:	4b04      	ldr	r3, [pc, #16]	; (40d468 <__locale_mb_cur_max+0x14>)
  40d456:	4a05      	ldr	r2, [pc, #20]	; (40d46c <__locale_mb_cur_max+0x18>)
  40d458:	681b      	ldr	r3, [r3, #0]
  40d45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40d45c:	2b00      	cmp	r3, #0
  40d45e:	bf08      	it	eq
  40d460:	4613      	moveq	r3, r2
  40d462:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40d466:	4770      	bx	lr
  40d468:	20000298 	.word	0x20000298
  40d46c:	200006c8 	.word	0x200006c8

0040d470 <__locale_ctype_ptr_l>:
  40d470:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  40d474:	4770      	bx	lr
  40d476:	bf00      	nop

0040d478 <__locale_ctype_ptr>:
  40d478:	4b04      	ldr	r3, [pc, #16]	; (40d48c <__locale_ctype_ptr+0x14>)
  40d47a:	4a05      	ldr	r2, [pc, #20]	; (40d490 <__locale_ctype_ptr+0x18>)
  40d47c:	681b      	ldr	r3, [r3, #0]
  40d47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40d480:	2b00      	cmp	r3, #0
  40d482:	bf08      	it	eq
  40d484:	4613      	moveq	r3, r2
  40d486:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  40d48a:	4770      	bx	lr
  40d48c:	20000298 	.word	0x20000298
  40d490:	200006c8 	.word	0x200006c8

0040d494 <__retarget_lock_init_recursive>:
  40d494:	4770      	bx	lr
  40d496:	bf00      	nop

0040d498 <__retarget_lock_close_recursive>:
  40d498:	4770      	bx	lr
  40d49a:	bf00      	nop

0040d49c <__retarget_lock_acquire_recursive>:
  40d49c:	4770      	bx	lr
  40d49e:	bf00      	nop

0040d4a0 <__retarget_lock_release_recursive>:
  40d4a0:	4770      	bx	lr
  40d4a2:	bf00      	nop

0040d4a4 <__swhatbuf_r>:
  40d4a4:	b570      	push	{r4, r5, r6, lr}
  40d4a6:	460c      	mov	r4, r1
  40d4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d4ac:	2900      	cmp	r1, #0
  40d4ae:	b090      	sub	sp, #64	; 0x40
  40d4b0:	4615      	mov	r5, r2
  40d4b2:	461e      	mov	r6, r3
  40d4b4:	db14      	blt.n	40d4e0 <__swhatbuf_r+0x3c>
  40d4b6:	aa01      	add	r2, sp, #4
  40d4b8:	f7ff fdda 	bl	40d070 <_fstat_r>
  40d4bc:	2800      	cmp	r0, #0
  40d4be:	db0f      	blt.n	40d4e0 <__swhatbuf_r+0x3c>
  40d4c0:	9a02      	ldr	r2, [sp, #8]
  40d4c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40d4c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40d4ca:	fab2 f282 	clz	r2, r2
  40d4ce:	0952      	lsrs	r2, r2, #5
  40d4d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40d4d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40d4d8:	6032      	str	r2, [r6, #0]
  40d4da:	602b      	str	r3, [r5, #0]
  40d4dc:	b010      	add	sp, #64	; 0x40
  40d4de:	bd70      	pop	{r4, r5, r6, pc}
  40d4e0:	89a2      	ldrh	r2, [r4, #12]
  40d4e2:	2300      	movs	r3, #0
  40d4e4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40d4e8:	6033      	str	r3, [r6, #0]
  40d4ea:	d004      	beq.n	40d4f6 <__swhatbuf_r+0x52>
  40d4ec:	2240      	movs	r2, #64	; 0x40
  40d4ee:	4618      	mov	r0, r3
  40d4f0:	602a      	str	r2, [r5, #0]
  40d4f2:	b010      	add	sp, #64	; 0x40
  40d4f4:	bd70      	pop	{r4, r5, r6, pc}
  40d4f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40d4fa:	602b      	str	r3, [r5, #0]
  40d4fc:	b010      	add	sp, #64	; 0x40
  40d4fe:	bd70      	pop	{r4, r5, r6, pc}

0040d500 <__smakebuf_r>:
  40d500:	898a      	ldrh	r2, [r1, #12]
  40d502:	0792      	lsls	r2, r2, #30
  40d504:	460b      	mov	r3, r1
  40d506:	d506      	bpl.n	40d516 <__smakebuf_r+0x16>
  40d508:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40d50c:	2101      	movs	r1, #1
  40d50e:	601a      	str	r2, [r3, #0]
  40d510:	611a      	str	r2, [r3, #16]
  40d512:	6159      	str	r1, [r3, #20]
  40d514:	4770      	bx	lr
  40d516:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d518:	b083      	sub	sp, #12
  40d51a:	ab01      	add	r3, sp, #4
  40d51c:	466a      	mov	r2, sp
  40d51e:	460c      	mov	r4, r1
  40d520:	4606      	mov	r6, r0
  40d522:	f7ff ffbf 	bl	40d4a4 <__swhatbuf_r>
  40d526:	9900      	ldr	r1, [sp, #0]
  40d528:	4605      	mov	r5, r0
  40d52a:	4630      	mov	r0, r6
  40d52c:	f000 f842 	bl	40d5b4 <_malloc_r>
  40d530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d534:	b1d8      	cbz	r0, 40d56e <__smakebuf_r+0x6e>
  40d536:	9a01      	ldr	r2, [sp, #4]
  40d538:	4f15      	ldr	r7, [pc, #84]	; (40d590 <__smakebuf_r+0x90>)
  40d53a:	9900      	ldr	r1, [sp, #0]
  40d53c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40d53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d542:	81a3      	strh	r3, [r4, #12]
  40d544:	6020      	str	r0, [r4, #0]
  40d546:	6120      	str	r0, [r4, #16]
  40d548:	6161      	str	r1, [r4, #20]
  40d54a:	b91a      	cbnz	r2, 40d554 <__smakebuf_r+0x54>
  40d54c:	432b      	orrs	r3, r5
  40d54e:	81a3      	strh	r3, [r4, #12]
  40d550:	b003      	add	sp, #12
  40d552:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d554:	4630      	mov	r0, r6
  40d556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d55a:	f006 fe7f 	bl	41425c <_isatty_r>
  40d55e:	b1a0      	cbz	r0, 40d58a <__smakebuf_r+0x8a>
  40d560:	89a3      	ldrh	r3, [r4, #12]
  40d562:	f023 0303 	bic.w	r3, r3, #3
  40d566:	f043 0301 	orr.w	r3, r3, #1
  40d56a:	b21b      	sxth	r3, r3
  40d56c:	e7ee      	b.n	40d54c <__smakebuf_r+0x4c>
  40d56e:	059a      	lsls	r2, r3, #22
  40d570:	d4ee      	bmi.n	40d550 <__smakebuf_r+0x50>
  40d572:	f023 0303 	bic.w	r3, r3, #3
  40d576:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40d57a:	f043 0302 	orr.w	r3, r3, #2
  40d57e:	2101      	movs	r1, #1
  40d580:	81a3      	strh	r3, [r4, #12]
  40d582:	6022      	str	r2, [r4, #0]
  40d584:	6122      	str	r2, [r4, #16]
  40d586:	6161      	str	r1, [r4, #20]
  40d588:	e7e2      	b.n	40d550 <__smakebuf_r+0x50>
  40d58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d58e:	e7dd      	b.n	40d54c <__smakebuf_r+0x4c>
  40d590:	0040cd39 	.word	0x0040cd39

0040d594 <malloc>:
  40d594:	4b02      	ldr	r3, [pc, #8]	; (40d5a0 <malloc+0xc>)
  40d596:	4601      	mov	r1, r0
  40d598:	6818      	ldr	r0, [r3, #0]
  40d59a:	f000 b80b 	b.w	40d5b4 <_malloc_r>
  40d59e:	bf00      	nop
  40d5a0:	20000298 	.word	0x20000298

0040d5a4 <free>:
  40d5a4:	4b02      	ldr	r3, [pc, #8]	; (40d5b0 <free+0xc>)
  40d5a6:	4601      	mov	r1, r0
  40d5a8:	6818      	ldr	r0, [r3, #0]
  40d5aa:	f7ff bc7b 	b.w	40cea4 <_free_r>
  40d5ae:	bf00      	nop
  40d5b0:	20000298 	.word	0x20000298

0040d5b4 <_malloc_r>:
  40d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d5b8:	f101 060b 	add.w	r6, r1, #11
  40d5bc:	2e16      	cmp	r6, #22
  40d5be:	b083      	sub	sp, #12
  40d5c0:	4605      	mov	r5, r0
  40d5c2:	f240 809e 	bls.w	40d702 <_malloc_r+0x14e>
  40d5c6:	f036 0607 	bics.w	r6, r6, #7
  40d5ca:	f100 80bd 	bmi.w	40d748 <_malloc_r+0x194>
  40d5ce:	42b1      	cmp	r1, r6
  40d5d0:	f200 80ba 	bhi.w	40d748 <_malloc_r+0x194>
  40d5d4:	f000 fc80 	bl	40ded8 <__malloc_lock>
  40d5d8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40d5dc:	f0c0 8293 	bcc.w	40db06 <_malloc_r+0x552>
  40d5e0:	0a73      	lsrs	r3, r6, #9
  40d5e2:	f000 80b8 	beq.w	40d756 <_malloc_r+0x1a2>
  40d5e6:	2b04      	cmp	r3, #4
  40d5e8:	f200 8179 	bhi.w	40d8de <_malloc_r+0x32a>
  40d5ec:	09b3      	lsrs	r3, r6, #6
  40d5ee:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40d5f2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40d5f6:	00c3      	lsls	r3, r0, #3
  40d5f8:	4fbf      	ldr	r7, [pc, #764]	; (40d8f8 <_malloc_r+0x344>)
  40d5fa:	443b      	add	r3, r7
  40d5fc:	f1a3 0108 	sub.w	r1, r3, #8
  40d600:	685c      	ldr	r4, [r3, #4]
  40d602:	42a1      	cmp	r1, r4
  40d604:	d106      	bne.n	40d614 <_malloc_r+0x60>
  40d606:	e00c      	b.n	40d622 <_malloc_r+0x6e>
  40d608:	2a00      	cmp	r2, #0
  40d60a:	f280 80aa 	bge.w	40d762 <_malloc_r+0x1ae>
  40d60e:	68e4      	ldr	r4, [r4, #12]
  40d610:	42a1      	cmp	r1, r4
  40d612:	d006      	beq.n	40d622 <_malloc_r+0x6e>
  40d614:	6863      	ldr	r3, [r4, #4]
  40d616:	f023 0303 	bic.w	r3, r3, #3
  40d61a:	1b9a      	subs	r2, r3, r6
  40d61c:	2a0f      	cmp	r2, #15
  40d61e:	ddf3      	ble.n	40d608 <_malloc_r+0x54>
  40d620:	4670      	mov	r0, lr
  40d622:	693c      	ldr	r4, [r7, #16]
  40d624:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40d90c <_malloc_r+0x358>
  40d628:	4574      	cmp	r4, lr
  40d62a:	f000 81ab 	beq.w	40d984 <_malloc_r+0x3d0>
  40d62e:	6863      	ldr	r3, [r4, #4]
  40d630:	f023 0303 	bic.w	r3, r3, #3
  40d634:	1b9a      	subs	r2, r3, r6
  40d636:	2a0f      	cmp	r2, #15
  40d638:	f300 8190 	bgt.w	40d95c <_malloc_r+0x3a8>
  40d63c:	2a00      	cmp	r2, #0
  40d63e:	f8c7 e014 	str.w	lr, [r7, #20]
  40d642:	f8c7 e010 	str.w	lr, [r7, #16]
  40d646:	f280 809d 	bge.w	40d784 <_malloc_r+0x1d0>
  40d64a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40d64e:	f080 8161 	bcs.w	40d914 <_malloc_r+0x360>
  40d652:	08db      	lsrs	r3, r3, #3
  40d654:	f103 0c01 	add.w	ip, r3, #1
  40d658:	1099      	asrs	r1, r3, #2
  40d65a:	687a      	ldr	r2, [r7, #4]
  40d65c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40d660:	f8c4 8008 	str.w	r8, [r4, #8]
  40d664:	2301      	movs	r3, #1
  40d666:	408b      	lsls	r3, r1
  40d668:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40d66c:	4313      	orrs	r3, r2
  40d66e:	3908      	subs	r1, #8
  40d670:	60e1      	str	r1, [r4, #12]
  40d672:	607b      	str	r3, [r7, #4]
  40d674:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40d678:	f8c8 400c 	str.w	r4, [r8, #12]
  40d67c:	1082      	asrs	r2, r0, #2
  40d67e:	2401      	movs	r4, #1
  40d680:	4094      	lsls	r4, r2
  40d682:	429c      	cmp	r4, r3
  40d684:	f200 808b 	bhi.w	40d79e <_malloc_r+0x1ea>
  40d688:	421c      	tst	r4, r3
  40d68a:	d106      	bne.n	40d69a <_malloc_r+0xe6>
  40d68c:	f020 0003 	bic.w	r0, r0, #3
  40d690:	0064      	lsls	r4, r4, #1
  40d692:	421c      	tst	r4, r3
  40d694:	f100 0004 	add.w	r0, r0, #4
  40d698:	d0fa      	beq.n	40d690 <_malloc_r+0xdc>
  40d69a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40d69e:	46cc      	mov	ip, r9
  40d6a0:	4680      	mov	r8, r0
  40d6a2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40d6a6:	459c      	cmp	ip, r3
  40d6a8:	d107      	bne.n	40d6ba <_malloc_r+0x106>
  40d6aa:	e16d      	b.n	40d988 <_malloc_r+0x3d4>
  40d6ac:	2a00      	cmp	r2, #0
  40d6ae:	f280 817b 	bge.w	40d9a8 <_malloc_r+0x3f4>
  40d6b2:	68db      	ldr	r3, [r3, #12]
  40d6b4:	459c      	cmp	ip, r3
  40d6b6:	f000 8167 	beq.w	40d988 <_malloc_r+0x3d4>
  40d6ba:	6859      	ldr	r1, [r3, #4]
  40d6bc:	f021 0103 	bic.w	r1, r1, #3
  40d6c0:	1b8a      	subs	r2, r1, r6
  40d6c2:	2a0f      	cmp	r2, #15
  40d6c4:	ddf2      	ble.n	40d6ac <_malloc_r+0xf8>
  40d6c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40d6ca:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40d6ce:	9300      	str	r3, [sp, #0]
  40d6d0:	199c      	adds	r4, r3, r6
  40d6d2:	4628      	mov	r0, r5
  40d6d4:	f046 0601 	orr.w	r6, r6, #1
  40d6d8:	f042 0501 	orr.w	r5, r2, #1
  40d6dc:	605e      	str	r6, [r3, #4]
  40d6de:	f8c8 c00c 	str.w	ip, [r8, #12]
  40d6e2:	f8cc 8008 	str.w	r8, [ip, #8]
  40d6e6:	617c      	str	r4, [r7, #20]
  40d6e8:	613c      	str	r4, [r7, #16]
  40d6ea:	f8c4 e00c 	str.w	lr, [r4, #12]
  40d6ee:	f8c4 e008 	str.w	lr, [r4, #8]
  40d6f2:	6065      	str	r5, [r4, #4]
  40d6f4:	505a      	str	r2, [r3, r1]
  40d6f6:	f000 fbf5 	bl	40dee4 <__malloc_unlock>
  40d6fa:	9b00      	ldr	r3, [sp, #0]
  40d6fc:	f103 0408 	add.w	r4, r3, #8
  40d700:	e01e      	b.n	40d740 <_malloc_r+0x18c>
  40d702:	2910      	cmp	r1, #16
  40d704:	d820      	bhi.n	40d748 <_malloc_r+0x194>
  40d706:	f000 fbe7 	bl	40ded8 <__malloc_lock>
  40d70a:	2610      	movs	r6, #16
  40d70c:	2318      	movs	r3, #24
  40d70e:	2002      	movs	r0, #2
  40d710:	4f79      	ldr	r7, [pc, #484]	; (40d8f8 <_malloc_r+0x344>)
  40d712:	443b      	add	r3, r7
  40d714:	f1a3 0208 	sub.w	r2, r3, #8
  40d718:	685c      	ldr	r4, [r3, #4]
  40d71a:	4294      	cmp	r4, r2
  40d71c:	f000 813d 	beq.w	40d99a <_malloc_r+0x3e6>
  40d720:	6863      	ldr	r3, [r4, #4]
  40d722:	68e1      	ldr	r1, [r4, #12]
  40d724:	68a6      	ldr	r6, [r4, #8]
  40d726:	f023 0303 	bic.w	r3, r3, #3
  40d72a:	4423      	add	r3, r4
  40d72c:	4628      	mov	r0, r5
  40d72e:	685a      	ldr	r2, [r3, #4]
  40d730:	60f1      	str	r1, [r6, #12]
  40d732:	f042 0201 	orr.w	r2, r2, #1
  40d736:	608e      	str	r6, [r1, #8]
  40d738:	605a      	str	r2, [r3, #4]
  40d73a:	f000 fbd3 	bl	40dee4 <__malloc_unlock>
  40d73e:	3408      	adds	r4, #8
  40d740:	4620      	mov	r0, r4
  40d742:	b003      	add	sp, #12
  40d744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d748:	2400      	movs	r4, #0
  40d74a:	230c      	movs	r3, #12
  40d74c:	4620      	mov	r0, r4
  40d74e:	602b      	str	r3, [r5, #0]
  40d750:	b003      	add	sp, #12
  40d752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d756:	2040      	movs	r0, #64	; 0x40
  40d758:	f44f 7300 	mov.w	r3, #512	; 0x200
  40d75c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40d760:	e74a      	b.n	40d5f8 <_malloc_r+0x44>
  40d762:	4423      	add	r3, r4
  40d764:	68e1      	ldr	r1, [r4, #12]
  40d766:	685a      	ldr	r2, [r3, #4]
  40d768:	68a6      	ldr	r6, [r4, #8]
  40d76a:	f042 0201 	orr.w	r2, r2, #1
  40d76e:	60f1      	str	r1, [r6, #12]
  40d770:	4628      	mov	r0, r5
  40d772:	608e      	str	r6, [r1, #8]
  40d774:	605a      	str	r2, [r3, #4]
  40d776:	f000 fbb5 	bl	40dee4 <__malloc_unlock>
  40d77a:	3408      	adds	r4, #8
  40d77c:	4620      	mov	r0, r4
  40d77e:	b003      	add	sp, #12
  40d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d784:	4423      	add	r3, r4
  40d786:	4628      	mov	r0, r5
  40d788:	685a      	ldr	r2, [r3, #4]
  40d78a:	f042 0201 	orr.w	r2, r2, #1
  40d78e:	605a      	str	r2, [r3, #4]
  40d790:	f000 fba8 	bl	40dee4 <__malloc_unlock>
  40d794:	3408      	adds	r4, #8
  40d796:	4620      	mov	r0, r4
  40d798:	b003      	add	sp, #12
  40d79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d79e:	68bc      	ldr	r4, [r7, #8]
  40d7a0:	6863      	ldr	r3, [r4, #4]
  40d7a2:	f023 0803 	bic.w	r8, r3, #3
  40d7a6:	45b0      	cmp	r8, r6
  40d7a8:	d304      	bcc.n	40d7b4 <_malloc_r+0x200>
  40d7aa:	eba8 0306 	sub.w	r3, r8, r6
  40d7ae:	2b0f      	cmp	r3, #15
  40d7b0:	f300 8085 	bgt.w	40d8be <_malloc_r+0x30a>
  40d7b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40d910 <_malloc_r+0x35c>
  40d7b8:	4b50      	ldr	r3, [pc, #320]	; (40d8fc <_malloc_r+0x348>)
  40d7ba:	f8d9 2000 	ldr.w	r2, [r9]
  40d7be:	681b      	ldr	r3, [r3, #0]
  40d7c0:	3201      	adds	r2, #1
  40d7c2:	4433      	add	r3, r6
  40d7c4:	eb04 0a08 	add.w	sl, r4, r8
  40d7c8:	f000 8155 	beq.w	40da76 <_malloc_r+0x4c2>
  40d7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40d7d0:	330f      	adds	r3, #15
  40d7d2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40d7d6:	f02b 0b0f 	bic.w	fp, fp, #15
  40d7da:	4659      	mov	r1, fp
  40d7dc:	4628      	mov	r0, r5
  40d7de:	f000 fd2d 	bl	40e23c <_sbrk_r>
  40d7e2:	1c41      	adds	r1, r0, #1
  40d7e4:	4602      	mov	r2, r0
  40d7e6:	f000 80fc 	beq.w	40d9e2 <_malloc_r+0x42e>
  40d7ea:	4582      	cmp	sl, r0
  40d7ec:	f200 80f7 	bhi.w	40d9de <_malloc_r+0x42a>
  40d7f0:	4b43      	ldr	r3, [pc, #268]	; (40d900 <_malloc_r+0x34c>)
  40d7f2:	6819      	ldr	r1, [r3, #0]
  40d7f4:	4459      	add	r1, fp
  40d7f6:	6019      	str	r1, [r3, #0]
  40d7f8:	f000 814d 	beq.w	40da96 <_malloc_r+0x4e2>
  40d7fc:	f8d9 0000 	ldr.w	r0, [r9]
  40d800:	3001      	adds	r0, #1
  40d802:	bf1b      	ittet	ne
  40d804:	eba2 0a0a 	subne.w	sl, r2, sl
  40d808:	4451      	addne	r1, sl
  40d80a:	f8c9 2000 	streq.w	r2, [r9]
  40d80e:	6019      	strne	r1, [r3, #0]
  40d810:	f012 0107 	ands.w	r1, r2, #7
  40d814:	f000 8115 	beq.w	40da42 <_malloc_r+0x48e>
  40d818:	f1c1 0008 	rsb	r0, r1, #8
  40d81c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40d820:	4402      	add	r2, r0
  40d822:	3108      	adds	r1, #8
  40d824:	eb02 090b 	add.w	r9, r2, fp
  40d828:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40d82c:	eba1 0909 	sub.w	r9, r1, r9
  40d830:	4649      	mov	r1, r9
  40d832:	4628      	mov	r0, r5
  40d834:	9301      	str	r3, [sp, #4]
  40d836:	9200      	str	r2, [sp, #0]
  40d838:	f000 fd00 	bl	40e23c <_sbrk_r>
  40d83c:	1c43      	adds	r3, r0, #1
  40d83e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d842:	f000 8143 	beq.w	40dacc <_malloc_r+0x518>
  40d846:	1a80      	subs	r0, r0, r2
  40d848:	4448      	add	r0, r9
  40d84a:	f040 0001 	orr.w	r0, r0, #1
  40d84e:	6819      	ldr	r1, [r3, #0]
  40d850:	60ba      	str	r2, [r7, #8]
  40d852:	4449      	add	r1, r9
  40d854:	42bc      	cmp	r4, r7
  40d856:	6050      	str	r0, [r2, #4]
  40d858:	6019      	str	r1, [r3, #0]
  40d85a:	d017      	beq.n	40d88c <_malloc_r+0x2d8>
  40d85c:	f1b8 0f0f 	cmp.w	r8, #15
  40d860:	f240 80fb 	bls.w	40da5a <_malloc_r+0x4a6>
  40d864:	6860      	ldr	r0, [r4, #4]
  40d866:	f1a8 020c 	sub.w	r2, r8, #12
  40d86a:	f022 0207 	bic.w	r2, r2, #7
  40d86e:	eb04 0e02 	add.w	lr, r4, r2
  40d872:	f000 0001 	and.w	r0, r0, #1
  40d876:	f04f 0c05 	mov.w	ip, #5
  40d87a:	4310      	orrs	r0, r2
  40d87c:	2a0f      	cmp	r2, #15
  40d87e:	6060      	str	r0, [r4, #4]
  40d880:	f8ce c004 	str.w	ip, [lr, #4]
  40d884:	f8ce c008 	str.w	ip, [lr, #8]
  40d888:	f200 8117 	bhi.w	40daba <_malloc_r+0x506>
  40d88c:	4b1d      	ldr	r3, [pc, #116]	; (40d904 <_malloc_r+0x350>)
  40d88e:	68bc      	ldr	r4, [r7, #8]
  40d890:	681a      	ldr	r2, [r3, #0]
  40d892:	4291      	cmp	r1, r2
  40d894:	bf88      	it	hi
  40d896:	6019      	strhi	r1, [r3, #0]
  40d898:	4b1b      	ldr	r3, [pc, #108]	; (40d908 <_malloc_r+0x354>)
  40d89a:	681a      	ldr	r2, [r3, #0]
  40d89c:	4291      	cmp	r1, r2
  40d89e:	6862      	ldr	r2, [r4, #4]
  40d8a0:	bf88      	it	hi
  40d8a2:	6019      	strhi	r1, [r3, #0]
  40d8a4:	f022 0203 	bic.w	r2, r2, #3
  40d8a8:	4296      	cmp	r6, r2
  40d8aa:	eba2 0306 	sub.w	r3, r2, r6
  40d8ae:	d801      	bhi.n	40d8b4 <_malloc_r+0x300>
  40d8b0:	2b0f      	cmp	r3, #15
  40d8b2:	dc04      	bgt.n	40d8be <_malloc_r+0x30a>
  40d8b4:	4628      	mov	r0, r5
  40d8b6:	f000 fb15 	bl	40dee4 <__malloc_unlock>
  40d8ba:	2400      	movs	r4, #0
  40d8bc:	e740      	b.n	40d740 <_malloc_r+0x18c>
  40d8be:	19a2      	adds	r2, r4, r6
  40d8c0:	f043 0301 	orr.w	r3, r3, #1
  40d8c4:	f046 0601 	orr.w	r6, r6, #1
  40d8c8:	6066      	str	r6, [r4, #4]
  40d8ca:	4628      	mov	r0, r5
  40d8cc:	60ba      	str	r2, [r7, #8]
  40d8ce:	6053      	str	r3, [r2, #4]
  40d8d0:	f000 fb08 	bl	40dee4 <__malloc_unlock>
  40d8d4:	3408      	adds	r4, #8
  40d8d6:	4620      	mov	r0, r4
  40d8d8:	b003      	add	sp, #12
  40d8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d8de:	2b14      	cmp	r3, #20
  40d8e0:	d971      	bls.n	40d9c6 <_malloc_r+0x412>
  40d8e2:	2b54      	cmp	r3, #84	; 0x54
  40d8e4:	f200 80a3 	bhi.w	40da2e <_malloc_r+0x47a>
  40d8e8:	0b33      	lsrs	r3, r6, #12
  40d8ea:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40d8ee:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40d8f2:	00c3      	lsls	r3, r0, #3
  40d8f4:	e680      	b.n	40d5f8 <_malloc_r+0x44>
  40d8f6:	bf00      	nop
  40d8f8:	20000834 	.word	0x20000834
  40d8fc:	20002f10 	.word	0x20002f10
  40d900:	20002ee0 	.word	0x20002ee0
  40d904:	20002f08 	.word	0x20002f08
  40d908:	20002f0c 	.word	0x20002f0c
  40d90c:	2000083c 	.word	0x2000083c
  40d910:	20000c3c 	.word	0x20000c3c
  40d914:	0a5a      	lsrs	r2, r3, #9
  40d916:	2a04      	cmp	r2, #4
  40d918:	d95b      	bls.n	40d9d2 <_malloc_r+0x41e>
  40d91a:	2a14      	cmp	r2, #20
  40d91c:	f200 80ae 	bhi.w	40da7c <_malloc_r+0x4c8>
  40d920:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40d924:	00c9      	lsls	r1, r1, #3
  40d926:	325b      	adds	r2, #91	; 0x5b
  40d928:	eb07 0c01 	add.w	ip, r7, r1
  40d92c:	5879      	ldr	r1, [r7, r1]
  40d92e:	f1ac 0c08 	sub.w	ip, ip, #8
  40d932:	458c      	cmp	ip, r1
  40d934:	f000 8088 	beq.w	40da48 <_malloc_r+0x494>
  40d938:	684a      	ldr	r2, [r1, #4]
  40d93a:	f022 0203 	bic.w	r2, r2, #3
  40d93e:	4293      	cmp	r3, r2
  40d940:	d273      	bcs.n	40da2a <_malloc_r+0x476>
  40d942:	6889      	ldr	r1, [r1, #8]
  40d944:	458c      	cmp	ip, r1
  40d946:	d1f7      	bne.n	40d938 <_malloc_r+0x384>
  40d948:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40d94c:	687b      	ldr	r3, [r7, #4]
  40d94e:	60e2      	str	r2, [r4, #12]
  40d950:	f8c4 c008 	str.w	ip, [r4, #8]
  40d954:	6094      	str	r4, [r2, #8]
  40d956:	f8cc 400c 	str.w	r4, [ip, #12]
  40d95a:	e68f      	b.n	40d67c <_malloc_r+0xc8>
  40d95c:	19a1      	adds	r1, r4, r6
  40d95e:	f046 0c01 	orr.w	ip, r6, #1
  40d962:	f042 0601 	orr.w	r6, r2, #1
  40d966:	f8c4 c004 	str.w	ip, [r4, #4]
  40d96a:	4628      	mov	r0, r5
  40d96c:	6179      	str	r1, [r7, #20]
  40d96e:	6139      	str	r1, [r7, #16]
  40d970:	f8c1 e00c 	str.w	lr, [r1, #12]
  40d974:	f8c1 e008 	str.w	lr, [r1, #8]
  40d978:	604e      	str	r6, [r1, #4]
  40d97a:	50e2      	str	r2, [r4, r3]
  40d97c:	f000 fab2 	bl	40dee4 <__malloc_unlock>
  40d980:	3408      	adds	r4, #8
  40d982:	e6dd      	b.n	40d740 <_malloc_r+0x18c>
  40d984:	687b      	ldr	r3, [r7, #4]
  40d986:	e679      	b.n	40d67c <_malloc_r+0xc8>
  40d988:	f108 0801 	add.w	r8, r8, #1
  40d98c:	f018 0f03 	tst.w	r8, #3
  40d990:	f10c 0c08 	add.w	ip, ip, #8
  40d994:	f47f ae85 	bne.w	40d6a2 <_malloc_r+0xee>
  40d998:	e02d      	b.n	40d9f6 <_malloc_r+0x442>
  40d99a:	68dc      	ldr	r4, [r3, #12]
  40d99c:	42a3      	cmp	r3, r4
  40d99e:	bf08      	it	eq
  40d9a0:	3002      	addeq	r0, #2
  40d9a2:	f43f ae3e 	beq.w	40d622 <_malloc_r+0x6e>
  40d9a6:	e6bb      	b.n	40d720 <_malloc_r+0x16c>
  40d9a8:	4419      	add	r1, r3
  40d9aa:	461c      	mov	r4, r3
  40d9ac:	684a      	ldr	r2, [r1, #4]
  40d9ae:	68db      	ldr	r3, [r3, #12]
  40d9b0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40d9b4:	f042 0201 	orr.w	r2, r2, #1
  40d9b8:	604a      	str	r2, [r1, #4]
  40d9ba:	4628      	mov	r0, r5
  40d9bc:	60f3      	str	r3, [r6, #12]
  40d9be:	609e      	str	r6, [r3, #8]
  40d9c0:	f000 fa90 	bl	40dee4 <__malloc_unlock>
  40d9c4:	e6bc      	b.n	40d740 <_malloc_r+0x18c>
  40d9c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40d9ca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40d9ce:	00c3      	lsls	r3, r0, #3
  40d9d0:	e612      	b.n	40d5f8 <_malloc_r+0x44>
  40d9d2:	099a      	lsrs	r2, r3, #6
  40d9d4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40d9d8:	00c9      	lsls	r1, r1, #3
  40d9da:	3238      	adds	r2, #56	; 0x38
  40d9dc:	e7a4      	b.n	40d928 <_malloc_r+0x374>
  40d9de:	42bc      	cmp	r4, r7
  40d9e0:	d054      	beq.n	40da8c <_malloc_r+0x4d8>
  40d9e2:	68bc      	ldr	r4, [r7, #8]
  40d9e4:	6862      	ldr	r2, [r4, #4]
  40d9e6:	f022 0203 	bic.w	r2, r2, #3
  40d9ea:	e75d      	b.n	40d8a8 <_malloc_r+0x2f4>
  40d9ec:	f859 3908 	ldr.w	r3, [r9], #-8
  40d9f0:	4599      	cmp	r9, r3
  40d9f2:	f040 8086 	bne.w	40db02 <_malloc_r+0x54e>
  40d9f6:	f010 0f03 	tst.w	r0, #3
  40d9fa:	f100 30ff 	add.w	r0, r0, #4294967295
  40d9fe:	d1f5      	bne.n	40d9ec <_malloc_r+0x438>
  40da00:	687b      	ldr	r3, [r7, #4]
  40da02:	ea23 0304 	bic.w	r3, r3, r4
  40da06:	607b      	str	r3, [r7, #4]
  40da08:	0064      	lsls	r4, r4, #1
  40da0a:	429c      	cmp	r4, r3
  40da0c:	f63f aec7 	bhi.w	40d79e <_malloc_r+0x1ea>
  40da10:	2c00      	cmp	r4, #0
  40da12:	f43f aec4 	beq.w	40d79e <_malloc_r+0x1ea>
  40da16:	421c      	tst	r4, r3
  40da18:	4640      	mov	r0, r8
  40da1a:	f47f ae3e 	bne.w	40d69a <_malloc_r+0xe6>
  40da1e:	0064      	lsls	r4, r4, #1
  40da20:	421c      	tst	r4, r3
  40da22:	f100 0004 	add.w	r0, r0, #4
  40da26:	d0fa      	beq.n	40da1e <_malloc_r+0x46a>
  40da28:	e637      	b.n	40d69a <_malloc_r+0xe6>
  40da2a:	468c      	mov	ip, r1
  40da2c:	e78c      	b.n	40d948 <_malloc_r+0x394>
  40da2e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40da32:	d815      	bhi.n	40da60 <_malloc_r+0x4ac>
  40da34:	0bf3      	lsrs	r3, r6, #15
  40da36:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40da3a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40da3e:	00c3      	lsls	r3, r0, #3
  40da40:	e5da      	b.n	40d5f8 <_malloc_r+0x44>
  40da42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40da46:	e6ed      	b.n	40d824 <_malloc_r+0x270>
  40da48:	687b      	ldr	r3, [r7, #4]
  40da4a:	1092      	asrs	r2, r2, #2
  40da4c:	2101      	movs	r1, #1
  40da4e:	fa01 f202 	lsl.w	r2, r1, r2
  40da52:	4313      	orrs	r3, r2
  40da54:	607b      	str	r3, [r7, #4]
  40da56:	4662      	mov	r2, ip
  40da58:	e779      	b.n	40d94e <_malloc_r+0x39a>
  40da5a:	2301      	movs	r3, #1
  40da5c:	6053      	str	r3, [r2, #4]
  40da5e:	e729      	b.n	40d8b4 <_malloc_r+0x300>
  40da60:	f240 5254 	movw	r2, #1364	; 0x554
  40da64:	4293      	cmp	r3, r2
  40da66:	d822      	bhi.n	40daae <_malloc_r+0x4fa>
  40da68:	0cb3      	lsrs	r3, r6, #18
  40da6a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40da6e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40da72:	00c3      	lsls	r3, r0, #3
  40da74:	e5c0      	b.n	40d5f8 <_malloc_r+0x44>
  40da76:	f103 0b10 	add.w	fp, r3, #16
  40da7a:	e6ae      	b.n	40d7da <_malloc_r+0x226>
  40da7c:	2a54      	cmp	r2, #84	; 0x54
  40da7e:	d829      	bhi.n	40dad4 <_malloc_r+0x520>
  40da80:	0b1a      	lsrs	r2, r3, #12
  40da82:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40da86:	00c9      	lsls	r1, r1, #3
  40da88:	326e      	adds	r2, #110	; 0x6e
  40da8a:	e74d      	b.n	40d928 <_malloc_r+0x374>
  40da8c:	4b20      	ldr	r3, [pc, #128]	; (40db10 <_malloc_r+0x55c>)
  40da8e:	6819      	ldr	r1, [r3, #0]
  40da90:	4459      	add	r1, fp
  40da92:	6019      	str	r1, [r3, #0]
  40da94:	e6b2      	b.n	40d7fc <_malloc_r+0x248>
  40da96:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40da9a:	2800      	cmp	r0, #0
  40da9c:	f47f aeae 	bne.w	40d7fc <_malloc_r+0x248>
  40daa0:	eb08 030b 	add.w	r3, r8, fp
  40daa4:	68ba      	ldr	r2, [r7, #8]
  40daa6:	f043 0301 	orr.w	r3, r3, #1
  40daaa:	6053      	str	r3, [r2, #4]
  40daac:	e6ee      	b.n	40d88c <_malloc_r+0x2d8>
  40daae:	207f      	movs	r0, #127	; 0x7f
  40dab0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40dab4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40dab8:	e59e      	b.n	40d5f8 <_malloc_r+0x44>
  40daba:	f104 0108 	add.w	r1, r4, #8
  40dabe:	4628      	mov	r0, r5
  40dac0:	9300      	str	r3, [sp, #0]
  40dac2:	f7ff f9ef 	bl	40cea4 <_free_r>
  40dac6:	9b00      	ldr	r3, [sp, #0]
  40dac8:	6819      	ldr	r1, [r3, #0]
  40daca:	e6df      	b.n	40d88c <_malloc_r+0x2d8>
  40dacc:	2001      	movs	r0, #1
  40dace:	f04f 0900 	mov.w	r9, #0
  40dad2:	e6bc      	b.n	40d84e <_malloc_r+0x29a>
  40dad4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40dad8:	d805      	bhi.n	40dae6 <_malloc_r+0x532>
  40dada:	0bda      	lsrs	r2, r3, #15
  40dadc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40dae0:	00c9      	lsls	r1, r1, #3
  40dae2:	3277      	adds	r2, #119	; 0x77
  40dae4:	e720      	b.n	40d928 <_malloc_r+0x374>
  40dae6:	f240 5154 	movw	r1, #1364	; 0x554
  40daea:	428a      	cmp	r2, r1
  40daec:	d805      	bhi.n	40dafa <_malloc_r+0x546>
  40daee:	0c9a      	lsrs	r2, r3, #18
  40daf0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40daf4:	00c9      	lsls	r1, r1, #3
  40daf6:	327c      	adds	r2, #124	; 0x7c
  40daf8:	e716      	b.n	40d928 <_malloc_r+0x374>
  40dafa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40dafe:	227e      	movs	r2, #126	; 0x7e
  40db00:	e712      	b.n	40d928 <_malloc_r+0x374>
  40db02:	687b      	ldr	r3, [r7, #4]
  40db04:	e780      	b.n	40da08 <_malloc_r+0x454>
  40db06:	08f0      	lsrs	r0, r6, #3
  40db08:	f106 0308 	add.w	r3, r6, #8
  40db0c:	e600      	b.n	40d710 <_malloc_r+0x15c>
  40db0e:	bf00      	nop
  40db10:	20002ee0 	.word	0x20002ee0

0040db14 <__ascii_mbtowc>:
  40db14:	b082      	sub	sp, #8
  40db16:	b149      	cbz	r1, 40db2c <__ascii_mbtowc+0x18>
  40db18:	b15a      	cbz	r2, 40db32 <__ascii_mbtowc+0x1e>
  40db1a:	b16b      	cbz	r3, 40db38 <__ascii_mbtowc+0x24>
  40db1c:	7813      	ldrb	r3, [r2, #0]
  40db1e:	600b      	str	r3, [r1, #0]
  40db20:	7812      	ldrb	r2, [r2, #0]
  40db22:	1c10      	adds	r0, r2, #0
  40db24:	bf18      	it	ne
  40db26:	2001      	movne	r0, #1
  40db28:	b002      	add	sp, #8
  40db2a:	4770      	bx	lr
  40db2c:	a901      	add	r1, sp, #4
  40db2e:	2a00      	cmp	r2, #0
  40db30:	d1f3      	bne.n	40db1a <__ascii_mbtowc+0x6>
  40db32:	4610      	mov	r0, r2
  40db34:	b002      	add	sp, #8
  40db36:	4770      	bx	lr
  40db38:	f06f 0001 	mvn.w	r0, #1
  40db3c:	e7f4      	b.n	40db28 <__ascii_mbtowc+0x14>
  40db3e:	bf00      	nop

0040db40 <memchr>:
  40db40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40db44:	2a10      	cmp	r2, #16
  40db46:	db2b      	blt.n	40dba0 <memchr+0x60>
  40db48:	f010 0f07 	tst.w	r0, #7
  40db4c:	d008      	beq.n	40db60 <memchr+0x20>
  40db4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40db52:	3a01      	subs	r2, #1
  40db54:	428b      	cmp	r3, r1
  40db56:	d02d      	beq.n	40dbb4 <memchr+0x74>
  40db58:	f010 0f07 	tst.w	r0, #7
  40db5c:	b342      	cbz	r2, 40dbb0 <memchr+0x70>
  40db5e:	d1f6      	bne.n	40db4e <memchr+0xe>
  40db60:	b4f0      	push	{r4, r5, r6, r7}
  40db62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40db66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40db6a:	f022 0407 	bic.w	r4, r2, #7
  40db6e:	f07f 0700 	mvns.w	r7, #0
  40db72:	2300      	movs	r3, #0
  40db74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40db78:	3c08      	subs	r4, #8
  40db7a:	ea85 0501 	eor.w	r5, r5, r1
  40db7e:	ea86 0601 	eor.w	r6, r6, r1
  40db82:	fa85 f547 	uadd8	r5, r5, r7
  40db86:	faa3 f587 	sel	r5, r3, r7
  40db8a:	fa86 f647 	uadd8	r6, r6, r7
  40db8e:	faa5 f687 	sel	r6, r5, r7
  40db92:	b98e      	cbnz	r6, 40dbb8 <memchr+0x78>
  40db94:	d1ee      	bne.n	40db74 <memchr+0x34>
  40db96:	bcf0      	pop	{r4, r5, r6, r7}
  40db98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40db9c:	f002 0207 	and.w	r2, r2, #7
  40dba0:	b132      	cbz	r2, 40dbb0 <memchr+0x70>
  40dba2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40dba6:	3a01      	subs	r2, #1
  40dba8:	ea83 0301 	eor.w	r3, r3, r1
  40dbac:	b113      	cbz	r3, 40dbb4 <memchr+0x74>
  40dbae:	d1f8      	bne.n	40dba2 <memchr+0x62>
  40dbb0:	2000      	movs	r0, #0
  40dbb2:	4770      	bx	lr
  40dbb4:	3801      	subs	r0, #1
  40dbb6:	4770      	bx	lr
  40dbb8:	2d00      	cmp	r5, #0
  40dbba:	bf06      	itte	eq
  40dbbc:	4635      	moveq	r5, r6
  40dbbe:	3803      	subeq	r0, #3
  40dbc0:	3807      	subne	r0, #7
  40dbc2:	f015 0f01 	tst.w	r5, #1
  40dbc6:	d107      	bne.n	40dbd8 <memchr+0x98>
  40dbc8:	3001      	adds	r0, #1
  40dbca:	f415 7f80 	tst.w	r5, #256	; 0x100
  40dbce:	bf02      	ittt	eq
  40dbd0:	3001      	addeq	r0, #1
  40dbd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40dbd6:	3001      	addeq	r0, #1
  40dbd8:	bcf0      	pop	{r4, r5, r6, r7}
  40dbda:	3801      	subs	r0, #1
  40dbdc:	4770      	bx	lr
  40dbde:	bf00      	nop

0040dbe0 <memcmp>:
  40dbe0:	2a03      	cmp	r2, #3
  40dbe2:	b470      	push	{r4, r5, r6}
  40dbe4:	d922      	bls.n	40dc2c <memcmp+0x4c>
  40dbe6:	ea40 0301 	orr.w	r3, r0, r1
  40dbea:	079b      	lsls	r3, r3, #30
  40dbec:	d011      	beq.n	40dc12 <memcmp+0x32>
  40dbee:	7803      	ldrb	r3, [r0, #0]
  40dbf0:	780c      	ldrb	r4, [r1, #0]
  40dbf2:	42a3      	cmp	r3, r4
  40dbf4:	d11d      	bne.n	40dc32 <memcmp+0x52>
  40dbf6:	440a      	add	r2, r1
  40dbf8:	3101      	adds	r1, #1
  40dbfa:	e005      	b.n	40dc08 <memcmp+0x28>
  40dbfc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40dc00:	f811 4b01 	ldrb.w	r4, [r1], #1
  40dc04:	42a3      	cmp	r3, r4
  40dc06:	d114      	bne.n	40dc32 <memcmp+0x52>
  40dc08:	4291      	cmp	r1, r2
  40dc0a:	d1f7      	bne.n	40dbfc <memcmp+0x1c>
  40dc0c:	2000      	movs	r0, #0
  40dc0e:	bc70      	pop	{r4, r5, r6}
  40dc10:	4770      	bx	lr
  40dc12:	680d      	ldr	r5, [r1, #0]
  40dc14:	6806      	ldr	r6, [r0, #0]
  40dc16:	42ae      	cmp	r6, r5
  40dc18:	460c      	mov	r4, r1
  40dc1a:	4603      	mov	r3, r0
  40dc1c:	f101 0104 	add.w	r1, r1, #4
  40dc20:	f100 0004 	add.w	r0, r0, #4
  40dc24:	d108      	bne.n	40dc38 <memcmp+0x58>
  40dc26:	3a04      	subs	r2, #4
  40dc28:	2a03      	cmp	r2, #3
  40dc2a:	d8f2      	bhi.n	40dc12 <memcmp+0x32>
  40dc2c:	2a00      	cmp	r2, #0
  40dc2e:	d1de      	bne.n	40dbee <memcmp+0xe>
  40dc30:	e7ec      	b.n	40dc0c <memcmp+0x2c>
  40dc32:	1b18      	subs	r0, r3, r4
  40dc34:	bc70      	pop	{r4, r5, r6}
  40dc36:	4770      	bx	lr
  40dc38:	4621      	mov	r1, r4
  40dc3a:	4618      	mov	r0, r3
  40dc3c:	e7d7      	b.n	40dbee <memcmp+0xe>
  40dc3e:	bf00      	nop

0040dc40 <memcpy>:
  40dc40:	4684      	mov	ip, r0
  40dc42:	ea41 0300 	orr.w	r3, r1, r0
  40dc46:	f013 0303 	ands.w	r3, r3, #3
  40dc4a:	d16d      	bne.n	40dd28 <memcpy+0xe8>
  40dc4c:	3a40      	subs	r2, #64	; 0x40
  40dc4e:	d341      	bcc.n	40dcd4 <memcpy+0x94>
  40dc50:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc54:	f840 3b04 	str.w	r3, [r0], #4
  40dc58:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc5c:	f840 3b04 	str.w	r3, [r0], #4
  40dc60:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc64:	f840 3b04 	str.w	r3, [r0], #4
  40dc68:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc6c:	f840 3b04 	str.w	r3, [r0], #4
  40dc70:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc74:	f840 3b04 	str.w	r3, [r0], #4
  40dc78:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc7c:	f840 3b04 	str.w	r3, [r0], #4
  40dc80:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc84:	f840 3b04 	str.w	r3, [r0], #4
  40dc88:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc8c:	f840 3b04 	str.w	r3, [r0], #4
  40dc90:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc94:	f840 3b04 	str.w	r3, [r0], #4
  40dc98:	f851 3b04 	ldr.w	r3, [r1], #4
  40dc9c:	f840 3b04 	str.w	r3, [r0], #4
  40dca0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dca4:	f840 3b04 	str.w	r3, [r0], #4
  40dca8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcac:	f840 3b04 	str.w	r3, [r0], #4
  40dcb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcb4:	f840 3b04 	str.w	r3, [r0], #4
  40dcb8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcbc:	f840 3b04 	str.w	r3, [r0], #4
  40dcc0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcc4:	f840 3b04 	str.w	r3, [r0], #4
  40dcc8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dccc:	f840 3b04 	str.w	r3, [r0], #4
  40dcd0:	3a40      	subs	r2, #64	; 0x40
  40dcd2:	d2bd      	bcs.n	40dc50 <memcpy+0x10>
  40dcd4:	3230      	adds	r2, #48	; 0x30
  40dcd6:	d311      	bcc.n	40dcfc <memcpy+0xbc>
  40dcd8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcdc:	f840 3b04 	str.w	r3, [r0], #4
  40dce0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dce4:	f840 3b04 	str.w	r3, [r0], #4
  40dce8:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcec:	f840 3b04 	str.w	r3, [r0], #4
  40dcf0:	f851 3b04 	ldr.w	r3, [r1], #4
  40dcf4:	f840 3b04 	str.w	r3, [r0], #4
  40dcf8:	3a10      	subs	r2, #16
  40dcfa:	d2ed      	bcs.n	40dcd8 <memcpy+0x98>
  40dcfc:	320c      	adds	r2, #12
  40dcfe:	d305      	bcc.n	40dd0c <memcpy+0xcc>
  40dd00:	f851 3b04 	ldr.w	r3, [r1], #4
  40dd04:	f840 3b04 	str.w	r3, [r0], #4
  40dd08:	3a04      	subs	r2, #4
  40dd0a:	d2f9      	bcs.n	40dd00 <memcpy+0xc0>
  40dd0c:	3204      	adds	r2, #4
  40dd0e:	d008      	beq.n	40dd22 <memcpy+0xe2>
  40dd10:	07d2      	lsls	r2, r2, #31
  40dd12:	bf1c      	itt	ne
  40dd14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40dd18:	f800 3b01 	strbne.w	r3, [r0], #1
  40dd1c:	d301      	bcc.n	40dd22 <memcpy+0xe2>
  40dd1e:	880b      	ldrh	r3, [r1, #0]
  40dd20:	8003      	strh	r3, [r0, #0]
  40dd22:	4660      	mov	r0, ip
  40dd24:	4770      	bx	lr
  40dd26:	bf00      	nop
  40dd28:	2a08      	cmp	r2, #8
  40dd2a:	d313      	bcc.n	40dd54 <memcpy+0x114>
  40dd2c:	078b      	lsls	r3, r1, #30
  40dd2e:	d08d      	beq.n	40dc4c <memcpy+0xc>
  40dd30:	f010 0303 	ands.w	r3, r0, #3
  40dd34:	d08a      	beq.n	40dc4c <memcpy+0xc>
  40dd36:	f1c3 0304 	rsb	r3, r3, #4
  40dd3a:	1ad2      	subs	r2, r2, r3
  40dd3c:	07db      	lsls	r3, r3, #31
  40dd3e:	bf1c      	itt	ne
  40dd40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40dd44:	f800 3b01 	strbne.w	r3, [r0], #1
  40dd48:	d380      	bcc.n	40dc4c <memcpy+0xc>
  40dd4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40dd4e:	f820 3b02 	strh.w	r3, [r0], #2
  40dd52:	e77b      	b.n	40dc4c <memcpy+0xc>
  40dd54:	3a04      	subs	r2, #4
  40dd56:	d3d9      	bcc.n	40dd0c <memcpy+0xcc>
  40dd58:	3a01      	subs	r2, #1
  40dd5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40dd5e:	f800 3b01 	strb.w	r3, [r0], #1
  40dd62:	d2f9      	bcs.n	40dd58 <memcpy+0x118>
  40dd64:	780b      	ldrb	r3, [r1, #0]
  40dd66:	7003      	strb	r3, [r0, #0]
  40dd68:	784b      	ldrb	r3, [r1, #1]
  40dd6a:	7043      	strb	r3, [r0, #1]
  40dd6c:	788b      	ldrb	r3, [r1, #2]
  40dd6e:	7083      	strb	r3, [r0, #2]
  40dd70:	4660      	mov	r0, ip
  40dd72:	4770      	bx	lr

0040dd74 <memmove>:
  40dd74:	4288      	cmp	r0, r1
  40dd76:	b5f0      	push	{r4, r5, r6, r7, lr}
  40dd78:	d90d      	bls.n	40dd96 <memmove+0x22>
  40dd7a:	188b      	adds	r3, r1, r2
  40dd7c:	4298      	cmp	r0, r3
  40dd7e:	d20a      	bcs.n	40dd96 <memmove+0x22>
  40dd80:	1884      	adds	r4, r0, r2
  40dd82:	2a00      	cmp	r2, #0
  40dd84:	d051      	beq.n	40de2a <memmove+0xb6>
  40dd86:	4622      	mov	r2, r4
  40dd88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40dd8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40dd90:	4299      	cmp	r1, r3
  40dd92:	d1f9      	bne.n	40dd88 <memmove+0x14>
  40dd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40dd96:	2a0f      	cmp	r2, #15
  40dd98:	d948      	bls.n	40de2c <memmove+0xb8>
  40dd9a:	ea41 0300 	orr.w	r3, r1, r0
  40dd9e:	079b      	lsls	r3, r3, #30
  40dda0:	d146      	bne.n	40de30 <memmove+0xbc>
  40dda2:	f100 0410 	add.w	r4, r0, #16
  40dda6:	f101 0310 	add.w	r3, r1, #16
  40ddaa:	4615      	mov	r5, r2
  40ddac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40ddb0:	f844 6c10 	str.w	r6, [r4, #-16]
  40ddb4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40ddb8:	f844 6c0c 	str.w	r6, [r4, #-12]
  40ddbc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40ddc0:	f844 6c08 	str.w	r6, [r4, #-8]
  40ddc4:	3d10      	subs	r5, #16
  40ddc6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40ddca:	f844 6c04 	str.w	r6, [r4, #-4]
  40ddce:	2d0f      	cmp	r5, #15
  40ddd0:	f103 0310 	add.w	r3, r3, #16
  40ddd4:	f104 0410 	add.w	r4, r4, #16
  40ddd8:	d8e8      	bhi.n	40ddac <memmove+0x38>
  40ddda:	f1a2 0310 	sub.w	r3, r2, #16
  40ddde:	f023 030f 	bic.w	r3, r3, #15
  40dde2:	f002 0e0f 	and.w	lr, r2, #15
  40dde6:	3310      	adds	r3, #16
  40dde8:	f1be 0f03 	cmp.w	lr, #3
  40ddec:	4419      	add	r1, r3
  40ddee:	4403      	add	r3, r0
  40ddf0:	d921      	bls.n	40de36 <memmove+0xc2>
  40ddf2:	1f1e      	subs	r6, r3, #4
  40ddf4:	460d      	mov	r5, r1
  40ddf6:	4674      	mov	r4, lr
  40ddf8:	3c04      	subs	r4, #4
  40ddfa:	f855 7b04 	ldr.w	r7, [r5], #4
  40ddfe:	f846 7f04 	str.w	r7, [r6, #4]!
  40de02:	2c03      	cmp	r4, #3
  40de04:	d8f8      	bhi.n	40ddf8 <memmove+0x84>
  40de06:	f1ae 0404 	sub.w	r4, lr, #4
  40de0a:	f024 0403 	bic.w	r4, r4, #3
  40de0e:	3404      	adds	r4, #4
  40de10:	4421      	add	r1, r4
  40de12:	4423      	add	r3, r4
  40de14:	f002 0203 	and.w	r2, r2, #3
  40de18:	b162      	cbz	r2, 40de34 <memmove+0xc0>
  40de1a:	3b01      	subs	r3, #1
  40de1c:	440a      	add	r2, r1
  40de1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40de22:	f803 4f01 	strb.w	r4, [r3, #1]!
  40de26:	428a      	cmp	r2, r1
  40de28:	d1f9      	bne.n	40de1e <memmove+0xaa>
  40de2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40de2c:	4603      	mov	r3, r0
  40de2e:	e7f3      	b.n	40de18 <memmove+0xa4>
  40de30:	4603      	mov	r3, r0
  40de32:	e7f2      	b.n	40de1a <memmove+0xa6>
  40de34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40de36:	4672      	mov	r2, lr
  40de38:	e7ee      	b.n	40de18 <memmove+0xa4>
  40de3a:	bf00      	nop

0040de3c <memset>:
  40de3c:	b470      	push	{r4, r5, r6}
  40de3e:	0786      	lsls	r6, r0, #30
  40de40:	d046      	beq.n	40ded0 <memset+0x94>
  40de42:	1e54      	subs	r4, r2, #1
  40de44:	2a00      	cmp	r2, #0
  40de46:	d041      	beq.n	40decc <memset+0x90>
  40de48:	b2ca      	uxtb	r2, r1
  40de4a:	4603      	mov	r3, r0
  40de4c:	e002      	b.n	40de54 <memset+0x18>
  40de4e:	f114 34ff 	adds.w	r4, r4, #4294967295
  40de52:	d33b      	bcc.n	40decc <memset+0x90>
  40de54:	f803 2b01 	strb.w	r2, [r3], #1
  40de58:	079d      	lsls	r5, r3, #30
  40de5a:	d1f8      	bne.n	40de4e <memset+0x12>
  40de5c:	2c03      	cmp	r4, #3
  40de5e:	d92e      	bls.n	40debe <memset+0x82>
  40de60:	b2cd      	uxtb	r5, r1
  40de62:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40de66:	2c0f      	cmp	r4, #15
  40de68:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40de6c:	d919      	bls.n	40dea2 <memset+0x66>
  40de6e:	f103 0210 	add.w	r2, r3, #16
  40de72:	4626      	mov	r6, r4
  40de74:	3e10      	subs	r6, #16
  40de76:	2e0f      	cmp	r6, #15
  40de78:	f842 5c10 	str.w	r5, [r2, #-16]
  40de7c:	f842 5c0c 	str.w	r5, [r2, #-12]
  40de80:	f842 5c08 	str.w	r5, [r2, #-8]
  40de84:	f842 5c04 	str.w	r5, [r2, #-4]
  40de88:	f102 0210 	add.w	r2, r2, #16
  40de8c:	d8f2      	bhi.n	40de74 <memset+0x38>
  40de8e:	f1a4 0210 	sub.w	r2, r4, #16
  40de92:	f022 020f 	bic.w	r2, r2, #15
  40de96:	f004 040f 	and.w	r4, r4, #15
  40de9a:	3210      	adds	r2, #16
  40de9c:	2c03      	cmp	r4, #3
  40de9e:	4413      	add	r3, r2
  40dea0:	d90d      	bls.n	40debe <memset+0x82>
  40dea2:	461e      	mov	r6, r3
  40dea4:	4622      	mov	r2, r4
  40dea6:	3a04      	subs	r2, #4
  40dea8:	2a03      	cmp	r2, #3
  40deaa:	f846 5b04 	str.w	r5, [r6], #4
  40deae:	d8fa      	bhi.n	40dea6 <memset+0x6a>
  40deb0:	1f22      	subs	r2, r4, #4
  40deb2:	f022 0203 	bic.w	r2, r2, #3
  40deb6:	3204      	adds	r2, #4
  40deb8:	4413      	add	r3, r2
  40deba:	f004 0403 	and.w	r4, r4, #3
  40debe:	b12c      	cbz	r4, 40decc <memset+0x90>
  40dec0:	b2c9      	uxtb	r1, r1
  40dec2:	441c      	add	r4, r3
  40dec4:	f803 1b01 	strb.w	r1, [r3], #1
  40dec8:	429c      	cmp	r4, r3
  40deca:	d1fb      	bne.n	40dec4 <memset+0x88>
  40decc:	bc70      	pop	{r4, r5, r6}
  40dece:	4770      	bx	lr
  40ded0:	4614      	mov	r4, r2
  40ded2:	4603      	mov	r3, r0
  40ded4:	e7c2      	b.n	40de5c <memset+0x20>
  40ded6:	bf00      	nop

0040ded8 <__malloc_lock>:
  40ded8:	4801      	ldr	r0, [pc, #4]	; (40dee0 <__malloc_lock+0x8>)
  40deda:	f7ff badf 	b.w	40d49c <__retarget_lock_acquire_recursive>
  40dede:	bf00      	nop
  40dee0:	20003060 	.word	0x20003060

0040dee4 <__malloc_unlock>:
  40dee4:	4801      	ldr	r0, [pc, #4]	; (40deec <__malloc_unlock+0x8>)
  40dee6:	f7ff badb 	b.w	40d4a0 <__retarget_lock_release_recursive>
  40deea:	bf00      	nop
  40deec:	20003060 	.word	0x20003060

0040def0 <_realloc_r>:
  40def0:	2900      	cmp	r1, #0
  40def2:	f000 8095 	beq.w	40e020 <_realloc_r+0x130>
  40def6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40defa:	460d      	mov	r5, r1
  40defc:	4616      	mov	r6, r2
  40defe:	b083      	sub	sp, #12
  40df00:	4680      	mov	r8, r0
  40df02:	f106 070b 	add.w	r7, r6, #11
  40df06:	f7ff ffe7 	bl	40ded8 <__malloc_lock>
  40df0a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40df0e:	2f16      	cmp	r7, #22
  40df10:	f02e 0403 	bic.w	r4, lr, #3
  40df14:	f1a5 0908 	sub.w	r9, r5, #8
  40df18:	d83c      	bhi.n	40df94 <_realloc_r+0xa4>
  40df1a:	2210      	movs	r2, #16
  40df1c:	4617      	mov	r7, r2
  40df1e:	42be      	cmp	r6, r7
  40df20:	d83d      	bhi.n	40df9e <_realloc_r+0xae>
  40df22:	4294      	cmp	r4, r2
  40df24:	da43      	bge.n	40dfae <_realloc_r+0xbe>
  40df26:	4bc4      	ldr	r3, [pc, #784]	; (40e238 <_realloc_r+0x348>)
  40df28:	6899      	ldr	r1, [r3, #8]
  40df2a:	eb09 0004 	add.w	r0, r9, r4
  40df2e:	4288      	cmp	r0, r1
  40df30:	f000 80b4 	beq.w	40e09c <_realloc_r+0x1ac>
  40df34:	6843      	ldr	r3, [r0, #4]
  40df36:	f023 0101 	bic.w	r1, r3, #1
  40df3a:	4401      	add	r1, r0
  40df3c:	6849      	ldr	r1, [r1, #4]
  40df3e:	07c9      	lsls	r1, r1, #31
  40df40:	d54c      	bpl.n	40dfdc <_realloc_r+0xec>
  40df42:	f01e 0f01 	tst.w	lr, #1
  40df46:	f000 809b 	beq.w	40e080 <_realloc_r+0x190>
  40df4a:	4631      	mov	r1, r6
  40df4c:	4640      	mov	r0, r8
  40df4e:	f7ff fb31 	bl	40d5b4 <_malloc_r>
  40df52:	4606      	mov	r6, r0
  40df54:	2800      	cmp	r0, #0
  40df56:	d03a      	beq.n	40dfce <_realloc_r+0xde>
  40df58:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40df5c:	f023 0301 	bic.w	r3, r3, #1
  40df60:	444b      	add	r3, r9
  40df62:	f1a0 0208 	sub.w	r2, r0, #8
  40df66:	429a      	cmp	r2, r3
  40df68:	f000 8121 	beq.w	40e1ae <_realloc_r+0x2be>
  40df6c:	1f22      	subs	r2, r4, #4
  40df6e:	2a24      	cmp	r2, #36	; 0x24
  40df70:	f200 8107 	bhi.w	40e182 <_realloc_r+0x292>
  40df74:	2a13      	cmp	r2, #19
  40df76:	f200 80db 	bhi.w	40e130 <_realloc_r+0x240>
  40df7a:	4603      	mov	r3, r0
  40df7c:	462a      	mov	r2, r5
  40df7e:	6811      	ldr	r1, [r2, #0]
  40df80:	6019      	str	r1, [r3, #0]
  40df82:	6851      	ldr	r1, [r2, #4]
  40df84:	6059      	str	r1, [r3, #4]
  40df86:	6892      	ldr	r2, [r2, #8]
  40df88:	609a      	str	r2, [r3, #8]
  40df8a:	4629      	mov	r1, r5
  40df8c:	4640      	mov	r0, r8
  40df8e:	f7fe ff89 	bl	40cea4 <_free_r>
  40df92:	e01c      	b.n	40dfce <_realloc_r+0xde>
  40df94:	f027 0707 	bic.w	r7, r7, #7
  40df98:	2f00      	cmp	r7, #0
  40df9a:	463a      	mov	r2, r7
  40df9c:	dabf      	bge.n	40df1e <_realloc_r+0x2e>
  40df9e:	2600      	movs	r6, #0
  40dfa0:	230c      	movs	r3, #12
  40dfa2:	4630      	mov	r0, r6
  40dfa4:	f8c8 3000 	str.w	r3, [r8]
  40dfa8:	b003      	add	sp, #12
  40dfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dfae:	462e      	mov	r6, r5
  40dfb0:	1be3      	subs	r3, r4, r7
  40dfb2:	2b0f      	cmp	r3, #15
  40dfb4:	d81e      	bhi.n	40dff4 <_realloc_r+0x104>
  40dfb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40dfba:	f003 0301 	and.w	r3, r3, #1
  40dfbe:	4323      	orrs	r3, r4
  40dfc0:	444c      	add	r4, r9
  40dfc2:	f8c9 3004 	str.w	r3, [r9, #4]
  40dfc6:	6863      	ldr	r3, [r4, #4]
  40dfc8:	f043 0301 	orr.w	r3, r3, #1
  40dfcc:	6063      	str	r3, [r4, #4]
  40dfce:	4640      	mov	r0, r8
  40dfd0:	f7ff ff88 	bl	40dee4 <__malloc_unlock>
  40dfd4:	4630      	mov	r0, r6
  40dfd6:	b003      	add	sp, #12
  40dfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dfdc:	f023 0303 	bic.w	r3, r3, #3
  40dfe0:	18e1      	adds	r1, r4, r3
  40dfe2:	4291      	cmp	r1, r2
  40dfe4:	db1f      	blt.n	40e026 <_realloc_r+0x136>
  40dfe6:	68c3      	ldr	r3, [r0, #12]
  40dfe8:	6882      	ldr	r2, [r0, #8]
  40dfea:	462e      	mov	r6, r5
  40dfec:	60d3      	str	r3, [r2, #12]
  40dfee:	460c      	mov	r4, r1
  40dff0:	609a      	str	r2, [r3, #8]
  40dff2:	e7dd      	b.n	40dfb0 <_realloc_r+0xc0>
  40dff4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40dff8:	eb09 0107 	add.w	r1, r9, r7
  40dffc:	f002 0201 	and.w	r2, r2, #1
  40e000:	444c      	add	r4, r9
  40e002:	f043 0301 	orr.w	r3, r3, #1
  40e006:	4317      	orrs	r7, r2
  40e008:	f8c9 7004 	str.w	r7, [r9, #4]
  40e00c:	604b      	str	r3, [r1, #4]
  40e00e:	6863      	ldr	r3, [r4, #4]
  40e010:	f043 0301 	orr.w	r3, r3, #1
  40e014:	3108      	adds	r1, #8
  40e016:	6063      	str	r3, [r4, #4]
  40e018:	4640      	mov	r0, r8
  40e01a:	f7fe ff43 	bl	40cea4 <_free_r>
  40e01e:	e7d6      	b.n	40dfce <_realloc_r+0xde>
  40e020:	4611      	mov	r1, r2
  40e022:	f7ff bac7 	b.w	40d5b4 <_malloc_r>
  40e026:	f01e 0f01 	tst.w	lr, #1
  40e02a:	d18e      	bne.n	40df4a <_realloc_r+0x5a>
  40e02c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40e030:	eba9 0a01 	sub.w	sl, r9, r1
  40e034:	f8da 1004 	ldr.w	r1, [sl, #4]
  40e038:	f021 0103 	bic.w	r1, r1, #3
  40e03c:	440b      	add	r3, r1
  40e03e:	4423      	add	r3, r4
  40e040:	4293      	cmp	r3, r2
  40e042:	db25      	blt.n	40e090 <_realloc_r+0x1a0>
  40e044:	68c2      	ldr	r2, [r0, #12]
  40e046:	6881      	ldr	r1, [r0, #8]
  40e048:	4656      	mov	r6, sl
  40e04a:	60ca      	str	r2, [r1, #12]
  40e04c:	6091      	str	r1, [r2, #8]
  40e04e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40e052:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40e056:	1f22      	subs	r2, r4, #4
  40e058:	2a24      	cmp	r2, #36	; 0x24
  40e05a:	60c1      	str	r1, [r0, #12]
  40e05c:	6088      	str	r0, [r1, #8]
  40e05e:	f200 8094 	bhi.w	40e18a <_realloc_r+0x29a>
  40e062:	2a13      	cmp	r2, #19
  40e064:	d96f      	bls.n	40e146 <_realloc_r+0x256>
  40e066:	6829      	ldr	r1, [r5, #0]
  40e068:	f8ca 1008 	str.w	r1, [sl, #8]
  40e06c:	6869      	ldr	r1, [r5, #4]
  40e06e:	f8ca 100c 	str.w	r1, [sl, #12]
  40e072:	2a1b      	cmp	r2, #27
  40e074:	f200 80a2 	bhi.w	40e1bc <_realloc_r+0x2cc>
  40e078:	3508      	adds	r5, #8
  40e07a:	f10a 0210 	add.w	r2, sl, #16
  40e07e:	e063      	b.n	40e148 <_realloc_r+0x258>
  40e080:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40e084:	eba9 0a03 	sub.w	sl, r9, r3
  40e088:	f8da 1004 	ldr.w	r1, [sl, #4]
  40e08c:	f021 0103 	bic.w	r1, r1, #3
  40e090:	1863      	adds	r3, r4, r1
  40e092:	4293      	cmp	r3, r2
  40e094:	f6ff af59 	blt.w	40df4a <_realloc_r+0x5a>
  40e098:	4656      	mov	r6, sl
  40e09a:	e7d8      	b.n	40e04e <_realloc_r+0x15e>
  40e09c:	6841      	ldr	r1, [r0, #4]
  40e09e:	f021 0b03 	bic.w	fp, r1, #3
  40e0a2:	44a3      	add	fp, r4
  40e0a4:	f107 0010 	add.w	r0, r7, #16
  40e0a8:	4583      	cmp	fp, r0
  40e0aa:	da56      	bge.n	40e15a <_realloc_r+0x26a>
  40e0ac:	f01e 0f01 	tst.w	lr, #1
  40e0b0:	f47f af4b 	bne.w	40df4a <_realloc_r+0x5a>
  40e0b4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40e0b8:	eba9 0a01 	sub.w	sl, r9, r1
  40e0bc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40e0c0:	f021 0103 	bic.w	r1, r1, #3
  40e0c4:	448b      	add	fp, r1
  40e0c6:	4558      	cmp	r0, fp
  40e0c8:	dce2      	bgt.n	40e090 <_realloc_r+0x1a0>
  40e0ca:	4656      	mov	r6, sl
  40e0cc:	f8da 100c 	ldr.w	r1, [sl, #12]
  40e0d0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40e0d4:	1f22      	subs	r2, r4, #4
  40e0d6:	2a24      	cmp	r2, #36	; 0x24
  40e0d8:	60c1      	str	r1, [r0, #12]
  40e0da:	6088      	str	r0, [r1, #8]
  40e0dc:	f200 808f 	bhi.w	40e1fe <_realloc_r+0x30e>
  40e0e0:	2a13      	cmp	r2, #19
  40e0e2:	f240 808a 	bls.w	40e1fa <_realloc_r+0x30a>
  40e0e6:	6829      	ldr	r1, [r5, #0]
  40e0e8:	f8ca 1008 	str.w	r1, [sl, #8]
  40e0ec:	6869      	ldr	r1, [r5, #4]
  40e0ee:	f8ca 100c 	str.w	r1, [sl, #12]
  40e0f2:	2a1b      	cmp	r2, #27
  40e0f4:	f200 808a 	bhi.w	40e20c <_realloc_r+0x31c>
  40e0f8:	3508      	adds	r5, #8
  40e0fa:	f10a 0210 	add.w	r2, sl, #16
  40e0fe:	6829      	ldr	r1, [r5, #0]
  40e100:	6011      	str	r1, [r2, #0]
  40e102:	6869      	ldr	r1, [r5, #4]
  40e104:	6051      	str	r1, [r2, #4]
  40e106:	68a9      	ldr	r1, [r5, #8]
  40e108:	6091      	str	r1, [r2, #8]
  40e10a:	eb0a 0107 	add.w	r1, sl, r7
  40e10e:	ebab 0207 	sub.w	r2, fp, r7
  40e112:	f042 0201 	orr.w	r2, r2, #1
  40e116:	6099      	str	r1, [r3, #8]
  40e118:	604a      	str	r2, [r1, #4]
  40e11a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e11e:	f003 0301 	and.w	r3, r3, #1
  40e122:	431f      	orrs	r7, r3
  40e124:	4640      	mov	r0, r8
  40e126:	f8ca 7004 	str.w	r7, [sl, #4]
  40e12a:	f7ff fedb 	bl	40dee4 <__malloc_unlock>
  40e12e:	e751      	b.n	40dfd4 <_realloc_r+0xe4>
  40e130:	682b      	ldr	r3, [r5, #0]
  40e132:	6003      	str	r3, [r0, #0]
  40e134:	686b      	ldr	r3, [r5, #4]
  40e136:	6043      	str	r3, [r0, #4]
  40e138:	2a1b      	cmp	r2, #27
  40e13a:	d82d      	bhi.n	40e198 <_realloc_r+0x2a8>
  40e13c:	f100 0308 	add.w	r3, r0, #8
  40e140:	f105 0208 	add.w	r2, r5, #8
  40e144:	e71b      	b.n	40df7e <_realloc_r+0x8e>
  40e146:	4632      	mov	r2, r6
  40e148:	6829      	ldr	r1, [r5, #0]
  40e14a:	6011      	str	r1, [r2, #0]
  40e14c:	6869      	ldr	r1, [r5, #4]
  40e14e:	6051      	str	r1, [r2, #4]
  40e150:	68a9      	ldr	r1, [r5, #8]
  40e152:	6091      	str	r1, [r2, #8]
  40e154:	461c      	mov	r4, r3
  40e156:	46d1      	mov	r9, sl
  40e158:	e72a      	b.n	40dfb0 <_realloc_r+0xc0>
  40e15a:	eb09 0107 	add.w	r1, r9, r7
  40e15e:	ebab 0b07 	sub.w	fp, fp, r7
  40e162:	f04b 0201 	orr.w	r2, fp, #1
  40e166:	6099      	str	r1, [r3, #8]
  40e168:	604a      	str	r2, [r1, #4]
  40e16a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40e16e:	f003 0301 	and.w	r3, r3, #1
  40e172:	431f      	orrs	r7, r3
  40e174:	4640      	mov	r0, r8
  40e176:	f845 7c04 	str.w	r7, [r5, #-4]
  40e17a:	f7ff feb3 	bl	40dee4 <__malloc_unlock>
  40e17e:	462e      	mov	r6, r5
  40e180:	e728      	b.n	40dfd4 <_realloc_r+0xe4>
  40e182:	4629      	mov	r1, r5
  40e184:	f7ff fdf6 	bl	40dd74 <memmove>
  40e188:	e6ff      	b.n	40df8a <_realloc_r+0x9a>
  40e18a:	4629      	mov	r1, r5
  40e18c:	4630      	mov	r0, r6
  40e18e:	461c      	mov	r4, r3
  40e190:	46d1      	mov	r9, sl
  40e192:	f7ff fdef 	bl	40dd74 <memmove>
  40e196:	e70b      	b.n	40dfb0 <_realloc_r+0xc0>
  40e198:	68ab      	ldr	r3, [r5, #8]
  40e19a:	6083      	str	r3, [r0, #8]
  40e19c:	68eb      	ldr	r3, [r5, #12]
  40e19e:	60c3      	str	r3, [r0, #12]
  40e1a0:	2a24      	cmp	r2, #36	; 0x24
  40e1a2:	d017      	beq.n	40e1d4 <_realloc_r+0x2e4>
  40e1a4:	f100 0310 	add.w	r3, r0, #16
  40e1a8:	f105 0210 	add.w	r2, r5, #16
  40e1ac:	e6e7      	b.n	40df7e <_realloc_r+0x8e>
  40e1ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40e1b2:	f023 0303 	bic.w	r3, r3, #3
  40e1b6:	441c      	add	r4, r3
  40e1b8:	462e      	mov	r6, r5
  40e1ba:	e6f9      	b.n	40dfb0 <_realloc_r+0xc0>
  40e1bc:	68a9      	ldr	r1, [r5, #8]
  40e1be:	f8ca 1010 	str.w	r1, [sl, #16]
  40e1c2:	68e9      	ldr	r1, [r5, #12]
  40e1c4:	f8ca 1014 	str.w	r1, [sl, #20]
  40e1c8:	2a24      	cmp	r2, #36	; 0x24
  40e1ca:	d00c      	beq.n	40e1e6 <_realloc_r+0x2f6>
  40e1cc:	3510      	adds	r5, #16
  40e1ce:	f10a 0218 	add.w	r2, sl, #24
  40e1d2:	e7b9      	b.n	40e148 <_realloc_r+0x258>
  40e1d4:	692b      	ldr	r3, [r5, #16]
  40e1d6:	6103      	str	r3, [r0, #16]
  40e1d8:	696b      	ldr	r3, [r5, #20]
  40e1da:	6143      	str	r3, [r0, #20]
  40e1dc:	f105 0218 	add.w	r2, r5, #24
  40e1e0:	f100 0318 	add.w	r3, r0, #24
  40e1e4:	e6cb      	b.n	40df7e <_realloc_r+0x8e>
  40e1e6:	692a      	ldr	r2, [r5, #16]
  40e1e8:	f8ca 2018 	str.w	r2, [sl, #24]
  40e1ec:	696a      	ldr	r2, [r5, #20]
  40e1ee:	f8ca 201c 	str.w	r2, [sl, #28]
  40e1f2:	3518      	adds	r5, #24
  40e1f4:	f10a 0220 	add.w	r2, sl, #32
  40e1f8:	e7a6      	b.n	40e148 <_realloc_r+0x258>
  40e1fa:	4632      	mov	r2, r6
  40e1fc:	e77f      	b.n	40e0fe <_realloc_r+0x20e>
  40e1fe:	4629      	mov	r1, r5
  40e200:	4630      	mov	r0, r6
  40e202:	9301      	str	r3, [sp, #4]
  40e204:	f7ff fdb6 	bl	40dd74 <memmove>
  40e208:	9b01      	ldr	r3, [sp, #4]
  40e20a:	e77e      	b.n	40e10a <_realloc_r+0x21a>
  40e20c:	68a9      	ldr	r1, [r5, #8]
  40e20e:	f8ca 1010 	str.w	r1, [sl, #16]
  40e212:	68e9      	ldr	r1, [r5, #12]
  40e214:	f8ca 1014 	str.w	r1, [sl, #20]
  40e218:	2a24      	cmp	r2, #36	; 0x24
  40e21a:	d003      	beq.n	40e224 <_realloc_r+0x334>
  40e21c:	3510      	adds	r5, #16
  40e21e:	f10a 0218 	add.w	r2, sl, #24
  40e222:	e76c      	b.n	40e0fe <_realloc_r+0x20e>
  40e224:	692a      	ldr	r2, [r5, #16]
  40e226:	f8ca 2018 	str.w	r2, [sl, #24]
  40e22a:	696a      	ldr	r2, [r5, #20]
  40e22c:	f8ca 201c 	str.w	r2, [sl, #28]
  40e230:	3518      	adds	r5, #24
  40e232:	f10a 0220 	add.w	r2, sl, #32
  40e236:	e762      	b.n	40e0fe <_realloc_r+0x20e>
  40e238:	20000834 	.word	0x20000834

0040e23c <_sbrk_r>:
  40e23c:	b538      	push	{r3, r4, r5, lr}
  40e23e:	4c07      	ldr	r4, [pc, #28]	; (40e25c <_sbrk_r+0x20>)
  40e240:	2300      	movs	r3, #0
  40e242:	4605      	mov	r5, r0
  40e244:	4608      	mov	r0, r1
  40e246:	6023      	str	r3, [r4, #0]
  40e248:	f7f8 fbda 	bl	406a00 <_sbrk>
  40e24c:	1c43      	adds	r3, r0, #1
  40e24e:	d000      	beq.n	40e252 <_sbrk_r+0x16>
  40e250:	bd38      	pop	{r3, r4, r5, pc}
  40e252:	6823      	ldr	r3, [r4, #0]
  40e254:	2b00      	cmp	r3, #0
  40e256:	d0fb      	beq.n	40e250 <_sbrk_r+0x14>
  40e258:	602b      	str	r3, [r5, #0]
  40e25a:	bd38      	pop	{r3, r4, r5, pc}
  40e25c:	20003074 	.word	0x20003074

0040e260 <setbuf>:
  40e260:	2900      	cmp	r1, #0
  40e262:	bf0c      	ite	eq
  40e264:	2202      	moveq	r2, #2
  40e266:	2200      	movne	r2, #0
  40e268:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e26c:	f000 b800 	b.w	40e270 <setvbuf>

0040e270 <setvbuf>:
  40e270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40e274:	4c61      	ldr	r4, [pc, #388]	; (40e3fc <setvbuf+0x18c>)
  40e276:	6825      	ldr	r5, [r4, #0]
  40e278:	b083      	sub	sp, #12
  40e27a:	4604      	mov	r4, r0
  40e27c:	460f      	mov	r7, r1
  40e27e:	4690      	mov	r8, r2
  40e280:	461e      	mov	r6, r3
  40e282:	b115      	cbz	r5, 40e28a <setvbuf+0x1a>
  40e284:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40e286:	2b00      	cmp	r3, #0
  40e288:	d064      	beq.n	40e354 <setvbuf+0xe4>
  40e28a:	f1b8 0f02 	cmp.w	r8, #2
  40e28e:	d006      	beq.n	40e29e <setvbuf+0x2e>
  40e290:	f1b8 0f01 	cmp.w	r8, #1
  40e294:	f200 809f 	bhi.w	40e3d6 <setvbuf+0x166>
  40e298:	2e00      	cmp	r6, #0
  40e29a:	f2c0 809c 	blt.w	40e3d6 <setvbuf+0x166>
  40e29e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e2a0:	07d8      	lsls	r0, r3, #31
  40e2a2:	d534      	bpl.n	40e30e <setvbuf+0x9e>
  40e2a4:	4621      	mov	r1, r4
  40e2a6:	4628      	mov	r0, r5
  40e2a8:	f7fe fd1c 	bl	40cce4 <_fflush_r>
  40e2ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40e2ae:	b141      	cbz	r1, 40e2c2 <setvbuf+0x52>
  40e2b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40e2b4:	4299      	cmp	r1, r3
  40e2b6:	d002      	beq.n	40e2be <setvbuf+0x4e>
  40e2b8:	4628      	mov	r0, r5
  40e2ba:	f7fe fdf3 	bl	40cea4 <_free_r>
  40e2be:	2300      	movs	r3, #0
  40e2c0:	6323      	str	r3, [r4, #48]	; 0x30
  40e2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e2c6:	2200      	movs	r2, #0
  40e2c8:	61a2      	str	r2, [r4, #24]
  40e2ca:	6062      	str	r2, [r4, #4]
  40e2cc:	061a      	lsls	r2, r3, #24
  40e2ce:	d43a      	bmi.n	40e346 <setvbuf+0xd6>
  40e2d0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40e2d4:	f023 0303 	bic.w	r3, r3, #3
  40e2d8:	f1b8 0f02 	cmp.w	r8, #2
  40e2dc:	81a3      	strh	r3, [r4, #12]
  40e2de:	d01d      	beq.n	40e31c <setvbuf+0xac>
  40e2e0:	ab01      	add	r3, sp, #4
  40e2e2:	466a      	mov	r2, sp
  40e2e4:	4621      	mov	r1, r4
  40e2e6:	4628      	mov	r0, r5
  40e2e8:	f7ff f8dc 	bl	40d4a4 <__swhatbuf_r>
  40e2ec:	89a3      	ldrh	r3, [r4, #12]
  40e2ee:	4318      	orrs	r0, r3
  40e2f0:	81a0      	strh	r0, [r4, #12]
  40e2f2:	2e00      	cmp	r6, #0
  40e2f4:	d132      	bne.n	40e35c <setvbuf+0xec>
  40e2f6:	9e00      	ldr	r6, [sp, #0]
  40e2f8:	4630      	mov	r0, r6
  40e2fa:	f7ff f94b 	bl	40d594 <malloc>
  40e2fe:	4607      	mov	r7, r0
  40e300:	2800      	cmp	r0, #0
  40e302:	d06b      	beq.n	40e3dc <setvbuf+0x16c>
  40e304:	89a3      	ldrh	r3, [r4, #12]
  40e306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e30a:	81a3      	strh	r3, [r4, #12]
  40e30c:	e028      	b.n	40e360 <setvbuf+0xf0>
  40e30e:	89a3      	ldrh	r3, [r4, #12]
  40e310:	0599      	lsls	r1, r3, #22
  40e312:	d4c7      	bmi.n	40e2a4 <setvbuf+0x34>
  40e314:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e316:	f7ff f8c1 	bl	40d49c <__retarget_lock_acquire_recursive>
  40e31a:	e7c3      	b.n	40e2a4 <setvbuf+0x34>
  40e31c:	2500      	movs	r5, #0
  40e31e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40e320:	2600      	movs	r6, #0
  40e322:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40e326:	f043 0302 	orr.w	r3, r3, #2
  40e32a:	2001      	movs	r0, #1
  40e32c:	60a6      	str	r6, [r4, #8]
  40e32e:	07ce      	lsls	r6, r1, #31
  40e330:	81a3      	strh	r3, [r4, #12]
  40e332:	6022      	str	r2, [r4, #0]
  40e334:	6122      	str	r2, [r4, #16]
  40e336:	6160      	str	r0, [r4, #20]
  40e338:	d401      	bmi.n	40e33e <setvbuf+0xce>
  40e33a:	0598      	lsls	r0, r3, #22
  40e33c:	d53e      	bpl.n	40e3bc <setvbuf+0x14c>
  40e33e:	4628      	mov	r0, r5
  40e340:	b003      	add	sp, #12
  40e342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40e346:	6921      	ldr	r1, [r4, #16]
  40e348:	4628      	mov	r0, r5
  40e34a:	f7fe fdab 	bl	40cea4 <_free_r>
  40e34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e352:	e7bd      	b.n	40e2d0 <setvbuf+0x60>
  40e354:	4628      	mov	r0, r5
  40e356:	f7fe fd1d 	bl	40cd94 <__sinit>
  40e35a:	e796      	b.n	40e28a <setvbuf+0x1a>
  40e35c:	2f00      	cmp	r7, #0
  40e35e:	d0cb      	beq.n	40e2f8 <setvbuf+0x88>
  40e360:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40e362:	2b00      	cmp	r3, #0
  40e364:	d033      	beq.n	40e3ce <setvbuf+0x15e>
  40e366:	9b00      	ldr	r3, [sp, #0]
  40e368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40e36c:	6027      	str	r7, [r4, #0]
  40e36e:	429e      	cmp	r6, r3
  40e370:	bf1c      	itt	ne
  40e372:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40e376:	81a2      	strhne	r2, [r4, #12]
  40e378:	f1b8 0f01 	cmp.w	r8, #1
  40e37c:	bf04      	itt	eq
  40e37e:	f042 0201 	orreq.w	r2, r2, #1
  40e382:	81a2      	strheq	r2, [r4, #12]
  40e384:	b292      	uxth	r2, r2
  40e386:	f012 0308 	ands.w	r3, r2, #8
  40e38a:	6127      	str	r7, [r4, #16]
  40e38c:	6166      	str	r6, [r4, #20]
  40e38e:	d00e      	beq.n	40e3ae <setvbuf+0x13e>
  40e390:	07d1      	lsls	r1, r2, #31
  40e392:	d51a      	bpl.n	40e3ca <setvbuf+0x15a>
  40e394:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40e396:	4276      	negs	r6, r6
  40e398:	2300      	movs	r3, #0
  40e39a:	f015 0501 	ands.w	r5, r5, #1
  40e39e:	61a6      	str	r6, [r4, #24]
  40e3a0:	60a3      	str	r3, [r4, #8]
  40e3a2:	d009      	beq.n	40e3b8 <setvbuf+0x148>
  40e3a4:	2500      	movs	r5, #0
  40e3a6:	4628      	mov	r0, r5
  40e3a8:	b003      	add	sp, #12
  40e3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40e3ae:	60a3      	str	r3, [r4, #8]
  40e3b0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40e3b2:	f015 0501 	ands.w	r5, r5, #1
  40e3b6:	d1f5      	bne.n	40e3a4 <setvbuf+0x134>
  40e3b8:	0593      	lsls	r3, r2, #22
  40e3ba:	d4c0      	bmi.n	40e33e <setvbuf+0xce>
  40e3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e3be:	f7ff f86f 	bl	40d4a0 <__retarget_lock_release_recursive>
  40e3c2:	4628      	mov	r0, r5
  40e3c4:	b003      	add	sp, #12
  40e3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40e3ca:	60a6      	str	r6, [r4, #8]
  40e3cc:	e7f0      	b.n	40e3b0 <setvbuf+0x140>
  40e3ce:	4628      	mov	r0, r5
  40e3d0:	f7fe fce0 	bl	40cd94 <__sinit>
  40e3d4:	e7c7      	b.n	40e366 <setvbuf+0xf6>
  40e3d6:	f04f 35ff 	mov.w	r5, #4294967295
  40e3da:	e7b0      	b.n	40e33e <setvbuf+0xce>
  40e3dc:	f8dd 9000 	ldr.w	r9, [sp]
  40e3e0:	45b1      	cmp	r9, r6
  40e3e2:	d004      	beq.n	40e3ee <setvbuf+0x17e>
  40e3e4:	4648      	mov	r0, r9
  40e3e6:	f7ff f8d5 	bl	40d594 <malloc>
  40e3ea:	4607      	mov	r7, r0
  40e3ec:	b920      	cbnz	r0, 40e3f8 <setvbuf+0x188>
  40e3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e3f2:	f04f 35ff 	mov.w	r5, #4294967295
  40e3f6:	e792      	b.n	40e31e <setvbuf+0xae>
  40e3f8:	464e      	mov	r6, r9
  40e3fa:	e783      	b.n	40e304 <setvbuf+0x94>
  40e3fc:	20000298 	.word	0x20000298

0040e400 <snprintf>:
  40e400:	b40c      	push	{r2, r3}
  40e402:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e404:	4b23      	ldr	r3, [pc, #140]	; (40e494 <snprintf+0x94>)
  40e406:	1e0c      	subs	r4, r1, #0
  40e408:	b09d      	sub	sp, #116	; 0x74
  40e40a:	681d      	ldr	r5, [r3, #0]
  40e40c:	db3d      	blt.n	40e48a <snprintf+0x8a>
  40e40e:	f44f 7302 	mov.w	r3, #520	; 0x208
  40e412:	9002      	str	r0, [sp, #8]
  40e414:	9006      	str	r0, [sp, #24]
  40e416:	f8ad 3014 	strh.w	r3, [sp, #20]
  40e41a:	ae23      	add	r6, sp, #140	; 0x8c
  40e41c:	d017      	beq.n	40e44e <snprintf+0x4e>
  40e41e:	3c01      	subs	r4, #1
  40e420:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40e422:	9404      	str	r4, [sp, #16]
  40e424:	4633      	mov	r3, r6
  40e426:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40e42a:	a902      	add	r1, sp, #8
  40e42c:	4628      	mov	r0, r5
  40e42e:	9407      	str	r4, [sp, #28]
  40e430:	9601      	str	r6, [sp, #4]
  40e432:	f8ad 7016 	strh.w	r7, [sp, #22]
  40e436:	f001 fa55 	bl	40f8e4 <_svfprintf_r>
  40e43a:	1c42      	adds	r2, r0, #1
  40e43c:	db1b      	blt.n	40e476 <snprintf+0x76>
  40e43e:	9b02      	ldr	r3, [sp, #8]
  40e440:	2200      	movs	r2, #0
  40e442:	701a      	strb	r2, [r3, #0]
  40e444:	b01d      	add	sp, #116	; 0x74
  40e446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40e44a:	b002      	add	sp, #8
  40e44c:	4770      	bx	lr
  40e44e:	4633      	mov	r3, r6
  40e450:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40e454:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40e456:	9404      	str	r4, [sp, #16]
  40e458:	a902      	add	r1, sp, #8
  40e45a:	4628      	mov	r0, r5
  40e45c:	9407      	str	r4, [sp, #28]
  40e45e:	9601      	str	r6, [sp, #4]
  40e460:	f8ad 7016 	strh.w	r7, [sp, #22]
  40e464:	f001 fa3e 	bl	40f8e4 <_svfprintf_r>
  40e468:	1c43      	adds	r3, r0, #1
  40e46a:	db07      	blt.n	40e47c <snprintf+0x7c>
  40e46c:	b01d      	add	sp, #116	; 0x74
  40e46e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40e472:	b002      	add	sp, #8
  40e474:	4770      	bx	lr
  40e476:	238b      	movs	r3, #139	; 0x8b
  40e478:	602b      	str	r3, [r5, #0]
  40e47a:	e7e0      	b.n	40e43e <snprintf+0x3e>
  40e47c:	238b      	movs	r3, #139	; 0x8b
  40e47e:	602b      	str	r3, [r5, #0]
  40e480:	b01d      	add	sp, #116	; 0x74
  40e482:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40e486:	b002      	add	sp, #8
  40e488:	4770      	bx	lr
  40e48a:	238b      	movs	r3, #139	; 0x8b
  40e48c:	602b      	str	r3, [r5, #0]
  40e48e:	f04f 30ff 	mov.w	r0, #4294967295
  40e492:	e7eb      	b.n	40e46c <snprintf+0x6c>
  40e494:	20000298 	.word	0x20000298

0040e498 <sprintf>:
  40e498:	b40e      	push	{r1, r2, r3}
  40e49a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e49c:	b09c      	sub	sp, #112	; 0x70
  40e49e:	ab21      	add	r3, sp, #132	; 0x84
  40e4a0:	490f      	ldr	r1, [pc, #60]	; (40e4e0 <sprintf+0x48>)
  40e4a2:	f853 2b04 	ldr.w	r2, [r3], #4
  40e4a6:	9301      	str	r3, [sp, #4]
  40e4a8:	4605      	mov	r5, r0
  40e4aa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40e4ae:	6808      	ldr	r0, [r1, #0]
  40e4b0:	9502      	str	r5, [sp, #8]
  40e4b2:	f44f 7702 	mov.w	r7, #520	; 0x208
  40e4b6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40e4ba:	a902      	add	r1, sp, #8
  40e4bc:	9506      	str	r5, [sp, #24]
  40e4be:	f8ad 7014 	strh.w	r7, [sp, #20]
  40e4c2:	9404      	str	r4, [sp, #16]
  40e4c4:	9407      	str	r4, [sp, #28]
  40e4c6:	f8ad 6016 	strh.w	r6, [sp, #22]
  40e4ca:	f001 fa0b 	bl	40f8e4 <_svfprintf_r>
  40e4ce:	9b02      	ldr	r3, [sp, #8]
  40e4d0:	2200      	movs	r2, #0
  40e4d2:	701a      	strb	r2, [r3, #0]
  40e4d4:	b01c      	add	sp, #112	; 0x70
  40e4d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40e4da:	b003      	add	sp, #12
  40e4dc:	4770      	bx	lr
  40e4de:	bf00      	nop
  40e4e0:	20000298 	.word	0x20000298

0040e4e4 <sscanf>:
  40e4e4:	b40e      	push	{r1, r2, r3}
  40e4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e4e8:	b09c      	sub	sp, #112	; 0x70
  40e4ea:	ac21      	add	r4, sp, #132	; 0x84
  40e4ec:	f44f 7201 	mov.w	r2, #516	; 0x204
  40e4f0:	f854 6b04 	ldr.w	r6, [r4], #4
  40e4f4:	f8ad 2014 	strh.w	r2, [sp, #20]
  40e4f8:	9002      	str	r0, [sp, #8]
  40e4fa:	9006      	str	r0, [sp, #24]
  40e4fc:	f000 f960 	bl	40e7c0 <strlen>
  40e500:	4b0c      	ldr	r3, [pc, #48]	; (40e534 <sscanf+0x50>)
  40e502:	9401      	str	r4, [sp, #4]
  40e504:	4605      	mov	r5, r0
  40e506:	4632      	mov	r2, r6
  40e508:	4f0b      	ldr	r7, [pc, #44]	; (40e538 <sscanf+0x54>)
  40e50a:	6818      	ldr	r0, [r3, #0]
  40e50c:	9503      	str	r5, [sp, #12]
  40e50e:	4623      	mov	r3, r4
  40e510:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40e514:	2400      	movs	r4, #0
  40e516:	a902      	add	r1, sp, #8
  40e518:	9507      	str	r5, [sp, #28]
  40e51a:	970a      	str	r7, [sp, #40]	; 0x28
  40e51c:	940e      	str	r4, [sp, #56]	; 0x38
  40e51e:	9413      	str	r4, [sp, #76]	; 0x4c
  40e520:	f8ad 6016 	strh.w	r6, [sp, #22]
  40e524:	f002 fc0c 	bl	410d40 <__ssvfscanf_r>
  40e528:	b01c      	add	sp, #112	; 0x70
  40e52a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40e52e:	b003      	add	sp, #12
  40e530:	4770      	bx	lr
  40e532:	bf00      	nop
  40e534:	20000298 	.word	0x20000298
  40e538:	0040e561 	.word	0x0040e561

0040e53c <__sread>:
  40e53c:	b510      	push	{r4, lr}
  40e53e:	460c      	mov	r4, r1
  40e540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e544:	f006 fb4e 	bl	414be4 <_read_r>
  40e548:	2800      	cmp	r0, #0
  40e54a:	db03      	blt.n	40e554 <__sread+0x18>
  40e54c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40e54e:	4403      	add	r3, r0
  40e550:	6523      	str	r3, [r4, #80]	; 0x50
  40e552:	bd10      	pop	{r4, pc}
  40e554:	89a3      	ldrh	r3, [r4, #12]
  40e556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40e55a:	81a3      	strh	r3, [r4, #12]
  40e55c:	bd10      	pop	{r4, pc}
  40e55e:	bf00      	nop

0040e560 <__seofread>:
  40e560:	2000      	movs	r0, #0
  40e562:	4770      	bx	lr

0040e564 <__swrite>:
  40e564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e568:	4616      	mov	r6, r2
  40e56a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40e56e:	461f      	mov	r7, r3
  40e570:	05d3      	lsls	r3, r2, #23
  40e572:	460c      	mov	r4, r1
  40e574:	4605      	mov	r5, r0
  40e576:	d507      	bpl.n	40e588 <__swrite+0x24>
  40e578:	2200      	movs	r2, #0
  40e57a:	2302      	movs	r3, #2
  40e57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e580:	f005 fe9c 	bl	4142bc <_lseek_r>
  40e584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40e588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40e58c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40e590:	81a2      	strh	r2, [r4, #12]
  40e592:	463b      	mov	r3, r7
  40e594:	4632      	mov	r2, r6
  40e596:	4628      	mov	r0, r5
  40e598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e59c:	f004 b9b2 	b.w	412904 <_write_r>

0040e5a0 <__sseek>:
  40e5a0:	b510      	push	{r4, lr}
  40e5a2:	460c      	mov	r4, r1
  40e5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e5a8:	f005 fe88 	bl	4142bc <_lseek_r>
  40e5ac:	89a3      	ldrh	r3, [r4, #12]
  40e5ae:	1c42      	adds	r2, r0, #1
  40e5b0:	bf0e      	itee	eq
  40e5b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40e5b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40e5ba:	6520      	strne	r0, [r4, #80]	; 0x50
  40e5bc:	81a3      	strh	r3, [r4, #12]
  40e5be:	bd10      	pop	{r4, pc}

0040e5c0 <__sclose>:
  40e5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e5c4:	f004 ba28 	b.w	412a18 <_close_r>

0040e5c8 <strcat>:
  40e5c8:	0783      	lsls	r3, r0, #30
  40e5ca:	b510      	push	{r4, lr}
  40e5cc:	4604      	mov	r4, r0
  40e5ce:	d110      	bne.n	40e5f2 <strcat+0x2a>
  40e5d0:	6802      	ldr	r2, [r0, #0]
  40e5d2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40e5d6:	ea23 0302 	bic.w	r3, r3, r2
  40e5da:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40e5de:	d108      	bne.n	40e5f2 <strcat+0x2a>
  40e5e0:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40e5e4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40e5e8:	ea23 0302 	bic.w	r3, r3, r2
  40e5ec:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40e5f0:	d0f6      	beq.n	40e5e0 <strcat+0x18>
  40e5f2:	7803      	ldrb	r3, [r0, #0]
  40e5f4:	b11b      	cbz	r3, 40e5fe <strcat+0x36>
  40e5f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40e5fa:	2b00      	cmp	r3, #0
  40e5fc:	d1fb      	bne.n	40e5f6 <strcat+0x2e>
  40e5fe:	f000 f877 	bl	40e6f0 <strcpy>
  40e602:	4620      	mov	r0, r4
  40e604:	bd10      	pop	{r4, pc}
  40e606:	bf00      	nop

0040e608 <strchr>:
  40e608:	b2c9      	uxtb	r1, r1
  40e60a:	2900      	cmp	r1, #0
  40e60c:	d041      	beq.n	40e692 <strchr+0x8a>
  40e60e:	0782      	lsls	r2, r0, #30
  40e610:	b4f0      	push	{r4, r5, r6, r7}
  40e612:	d067      	beq.n	40e6e4 <strchr+0xdc>
  40e614:	7803      	ldrb	r3, [r0, #0]
  40e616:	2b00      	cmp	r3, #0
  40e618:	d068      	beq.n	40e6ec <strchr+0xe4>
  40e61a:	4299      	cmp	r1, r3
  40e61c:	d037      	beq.n	40e68e <strchr+0x86>
  40e61e:	1c43      	adds	r3, r0, #1
  40e620:	e004      	b.n	40e62c <strchr+0x24>
  40e622:	f813 0b01 	ldrb.w	r0, [r3], #1
  40e626:	b390      	cbz	r0, 40e68e <strchr+0x86>
  40e628:	4281      	cmp	r1, r0
  40e62a:	d02f      	beq.n	40e68c <strchr+0x84>
  40e62c:	079a      	lsls	r2, r3, #30
  40e62e:	461c      	mov	r4, r3
  40e630:	d1f7      	bne.n	40e622 <strchr+0x1a>
  40e632:	6825      	ldr	r5, [r4, #0]
  40e634:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  40e638:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40e63c:	ea83 0605 	eor.w	r6, r3, r5
  40e640:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40e644:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  40e648:	ea20 0006 	bic.w	r0, r0, r6
  40e64c:	ea22 0205 	bic.w	r2, r2, r5
  40e650:	4302      	orrs	r2, r0
  40e652:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e656:	d111      	bne.n	40e67c <strchr+0x74>
  40e658:	4620      	mov	r0, r4
  40e65a:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40e65e:	ea83 0706 	eor.w	r7, r3, r6
  40e662:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40e666:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40e66a:	ea25 0507 	bic.w	r5, r5, r7
  40e66e:	ea22 0206 	bic.w	r2, r2, r6
  40e672:	432a      	orrs	r2, r5
  40e674:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e678:	d0ef      	beq.n	40e65a <strchr+0x52>
  40e67a:	4604      	mov	r4, r0
  40e67c:	7820      	ldrb	r0, [r4, #0]
  40e67e:	b918      	cbnz	r0, 40e688 <strchr+0x80>
  40e680:	e005      	b.n	40e68e <strchr+0x86>
  40e682:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40e686:	b110      	cbz	r0, 40e68e <strchr+0x86>
  40e688:	4281      	cmp	r1, r0
  40e68a:	d1fa      	bne.n	40e682 <strchr+0x7a>
  40e68c:	4620      	mov	r0, r4
  40e68e:	bcf0      	pop	{r4, r5, r6, r7}
  40e690:	4770      	bx	lr
  40e692:	0783      	lsls	r3, r0, #30
  40e694:	d024      	beq.n	40e6e0 <strchr+0xd8>
  40e696:	7803      	ldrb	r3, [r0, #0]
  40e698:	2b00      	cmp	r3, #0
  40e69a:	d0f9      	beq.n	40e690 <strchr+0x88>
  40e69c:	1c43      	adds	r3, r0, #1
  40e69e:	e003      	b.n	40e6a8 <strchr+0xa0>
  40e6a0:	7802      	ldrb	r2, [r0, #0]
  40e6a2:	3301      	adds	r3, #1
  40e6a4:	2a00      	cmp	r2, #0
  40e6a6:	d0f3      	beq.n	40e690 <strchr+0x88>
  40e6a8:	0799      	lsls	r1, r3, #30
  40e6aa:	4618      	mov	r0, r3
  40e6ac:	d1f8      	bne.n	40e6a0 <strchr+0x98>
  40e6ae:	6819      	ldr	r1, [r3, #0]
  40e6b0:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40e6b4:	ea22 0201 	bic.w	r2, r2, r1
  40e6b8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e6bc:	d108      	bne.n	40e6d0 <strchr+0xc8>
  40e6be:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40e6c2:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40e6c6:	ea22 0201 	bic.w	r2, r2, r1
  40e6ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e6ce:	d0f6      	beq.n	40e6be <strchr+0xb6>
  40e6d0:	781a      	ldrb	r2, [r3, #0]
  40e6d2:	4618      	mov	r0, r3
  40e6d4:	b142      	cbz	r2, 40e6e8 <strchr+0xe0>
  40e6d6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40e6da:	2b00      	cmp	r3, #0
  40e6dc:	d1fb      	bne.n	40e6d6 <strchr+0xce>
  40e6de:	4770      	bx	lr
  40e6e0:	4603      	mov	r3, r0
  40e6e2:	e7e4      	b.n	40e6ae <strchr+0xa6>
  40e6e4:	4604      	mov	r4, r0
  40e6e6:	e7a4      	b.n	40e632 <strchr+0x2a>
  40e6e8:	4618      	mov	r0, r3
  40e6ea:	4770      	bx	lr
  40e6ec:	4618      	mov	r0, r3
  40e6ee:	e7ce      	b.n	40e68e <strchr+0x86>

0040e6f0 <strcpy>:
  40e6f0:	ea80 0201 	eor.w	r2, r0, r1
  40e6f4:	4684      	mov	ip, r0
  40e6f6:	f012 0f03 	tst.w	r2, #3
  40e6fa:	d14f      	bne.n	40e79c <strcpy+0xac>
  40e6fc:	f011 0f03 	tst.w	r1, #3
  40e700:	d132      	bne.n	40e768 <strcpy+0x78>
  40e702:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40e706:	f011 0f04 	tst.w	r1, #4
  40e70a:	f851 3b04 	ldr.w	r3, [r1], #4
  40e70e:	d00b      	beq.n	40e728 <strcpy+0x38>
  40e710:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40e714:	439a      	bics	r2, r3
  40e716:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e71a:	bf04      	itt	eq
  40e71c:	f84c 3b04 	streq.w	r3, [ip], #4
  40e720:	f851 3b04 	ldreq.w	r3, [r1], #4
  40e724:	d116      	bne.n	40e754 <strcpy+0x64>
  40e726:	bf00      	nop
  40e728:	f851 4b04 	ldr.w	r4, [r1], #4
  40e72c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40e730:	439a      	bics	r2, r3
  40e732:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e736:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40e73a:	d10b      	bne.n	40e754 <strcpy+0x64>
  40e73c:	f84c 3b04 	str.w	r3, [ip], #4
  40e740:	43a2      	bics	r2, r4
  40e742:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e746:	bf04      	itt	eq
  40e748:	f851 3b04 	ldreq.w	r3, [r1], #4
  40e74c:	f84c 4b04 	streq.w	r4, [ip], #4
  40e750:	d0ea      	beq.n	40e728 <strcpy+0x38>
  40e752:	4623      	mov	r3, r4
  40e754:	f80c 3b01 	strb.w	r3, [ip], #1
  40e758:	f013 0fff 	tst.w	r3, #255	; 0xff
  40e75c:	ea4f 2333 	mov.w	r3, r3, ror #8
  40e760:	d1f8      	bne.n	40e754 <strcpy+0x64>
  40e762:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e766:	4770      	bx	lr
  40e768:	f011 0f01 	tst.w	r1, #1
  40e76c:	d006      	beq.n	40e77c <strcpy+0x8c>
  40e76e:	f811 2b01 	ldrb.w	r2, [r1], #1
  40e772:	f80c 2b01 	strb.w	r2, [ip], #1
  40e776:	2a00      	cmp	r2, #0
  40e778:	bf08      	it	eq
  40e77a:	4770      	bxeq	lr
  40e77c:	f011 0f02 	tst.w	r1, #2
  40e780:	d0bf      	beq.n	40e702 <strcpy+0x12>
  40e782:	f831 2b02 	ldrh.w	r2, [r1], #2
  40e786:	f012 0fff 	tst.w	r2, #255	; 0xff
  40e78a:	bf16      	itet	ne
  40e78c:	f82c 2b02 	strhne.w	r2, [ip], #2
  40e790:	f88c 2000 	strbeq.w	r2, [ip]
  40e794:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40e798:	d1b3      	bne.n	40e702 <strcpy+0x12>
  40e79a:	4770      	bx	lr
  40e79c:	f811 2b01 	ldrb.w	r2, [r1], #1
  40e7a0:	f80c 2b01 	strb.w	r2, [ip], #1
  40e7a4:	2a00      	cmp	r2, #0
  40e7a6:	d1f9      	bne.n	40e79c <strcpy+0xac>
  40e7a8:	4770      	bx	lr
  40e7aa:	bf00      	nop
	...

0040e7c0 <strlen>:
  40e7c0:	f890 f000 	pld	[r0]
  40e7c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40e7c8:	f020 0107 	bic.w	r1, r0, #7
  40e7cc:	f06f 0c00 	mvn.w	ip, #0
  40e7d0:	f010 0407 	ands.w	r4, r0, #7
  40e7d4:	f891 f020 	pld	[r1, #32]
  40e7d8:	f040 8049 	bne.w	40e86e <strlen+0xae>
  40e7dc:	f04f 0400 	mov.w	r4, #0
  40e7e0:	f06f 0007 	mvn.w	r0, #7
  40e7e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40e7e8:	f891 f040 	pld	[r1, #64]	; 0x40
  40e7ec:	f100 0008 	add.w	r0, r0, #8
  40e7f0:	fa82 f24c 	uadd8	r2, r2, ip
  40e7f4:	faa4 f28c 	sel	r2, r4, ip
  40e7f8:	fa83 f34c 	uadd8	r3, r3, ip
  40e7fc:	faa2 f38c 	sel	r3, r2, ip
  40e800:	bb4b      	cbnz	r3, 40e856 <strlen+0x96>
  40e802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40e806:	fa82 f24c 	uadd8	r2, r2, ip
  40e80a:	f100 0008 	add.w	r0, r0, #8
  40e80e:	faa4 f28c 	sel	r2, r4, ip
  40e812:	fa83 f34c 	uadd8	r3, r3, ip
  40e816:	faa2 f38c 	sel	r3, r2, ip
  40e81a:	b9e3      	cbnz	r3, 40e856 <strlen+0x96>
  40e81c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40e820:	fa82 f24c 	uadd8	r2, r2, ip
  40e824:	f100 0008 	add.w	r0, r0, #8
  40e828:	faa4 f28c 	sel	r2, r4, ip
  40e82c:	fa83 f34c 	uadd8	r3, r3, ip
  40e830:	faa2 f38c 	sel	r3, r2, ip
  40e834:	b97b      	cbnz	r3, 40e856 <strlen+0x96>
  40e836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40e83a:	f101 0120 	add.w	r1, r1, #32
  40e83e:	fa82 f24c 	uadd8	r2, r2, ip
  40e842:	f100 0008 	add.w	r0, r0, #8
  40e846:	faa4 f28c 	sel	r2, r4, ip
  40e84a:	fa83 f34c 	uadd8	r3, r3, ip
  40e84e:	faa2 f38c 	sel	r3, r2, ip
  40e852:	2b00      	cmp	r3, #0
  40e854:	d0c6      	beq.n	40e7e4 <strlen+0x24>
  40e856:	2a00      	cmp	r2, #0
  40e858:	bf04      	itt	eq
  40e85a:	3004      	addeq	r0, #4
  40e85c:	461a      	moveq	r2, r3
  40e85e:	ba12      	rev	r2, r2
  40e860:	fab2 f282 	clz	r2, r2
  40e864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40e868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40e86c:	4770      	bx	lr
  40e86e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40e872:	f004 0503 	and.w	r5, r4, #3
  40e876:	f1c4 0000 	rsb	r0, r4, #0
  40e87a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40e87e:	f014 0f04 	tst.w	r4, #4
  40e882:	f891 f040 	pld	[r1, #64]	; 0x40
  40e886:	fa0c f505 	lsl.w	r5, ip, r5
  40e88a:	ea62 0205 	orn	r2, r2, r5
  40e88e:	bf1c      	itt	ne
  40e890:	ea63 0305 	ornne	r3, r3, r5
  40e894:	4662      	movne	r2, ip
  40e896:	f04f 0400 	mov.w	r4, #0
  40e89a:	e7a9      	b.n	40e7f0 <strlen+0x30>

0040e89c <strncmp>:
  40e89c:	2a00      	cmp	r2, #0
  40e89e:	d041      	beq.n	40e924 <strncmp+0x88>
  40e8a0:	ea40 0301 	orr.w	r3, r0, r1
  40e8a4:	f013 0303 	ands.w	r3, r3, #3
  40e8a8:	b4f0      	push	{r4, r5, r6, r7}
  40e8aa:	d125      	bne.n	40e8f8 <strncmp+0x5c>
  40e8ac:	2a03      	cmp	r2, #3
  40e8ae:	d923      	bls.n	40e8f8 <strncmp+0x5c>
  40e8b0:	6804      	ldr	r4, [r0, #0]
  40e8b2:	680d      	ldr	r5, [r1, #0]
  40e8b4:	42ac      	cmp	r4, r5
  40e8b6:	d11f      	bne.n	40e8f8 <strncmp+0x5c>
  40e8b8:	3a04      	subs	r2, #4
  40e8ba:	d038      	beq.n	40e92e <strncmp+0x92>
  40e8bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40e8c0:	ea25 0404 	bic.w	r4, r5, r4
  40e8c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40e8c8:	d12e      	bne.n	40e928 <strncmp+0x8c>
  40e8ca:	3004      	adds	r0, #4
  40e8cc:	3104      	adds	r1, #4
  40e8ce:	e00f      	b.n	40e8f0 <strncmp+0x54>
  40e8d0:	f850 3b04 	ldr.w	r3, [r0], #4
  40e8d4:	680e      	ldr	r6, [r1, #0]
  40e8d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  40e8da:	42b3      	cmp	r3, r6
  40e8dc:	ea24 0403 	bic.w	r4, r4, r3
  40e8e0:	f101 0104 	add.w	r1, r1, #4
  40e8e4:	d126      	bne.n	40e934 <strncmp+0x98>
  40e8e6:	3a04      	subs	r2, #4
  40e8e8:	d021      	beq.n	40e92e <strncmp+0x92>
  40e8ea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40e8ee:	d11b      	bne.n	40e928 <strncmp+0x8c>
  40e8f0:	2a03      	cmp	r2, #3
  40e8f2:	4607      	mov	r7, r0
  40e8f4:	460d      	mov	r5, r1
  40e8f6:	d8eb      	bhi.n	40e8d0 <strncmp+0x34>
  40e8f8:	7805      	ldrb	r5, [r0, #0]
  40e8fa:	780c      	ldrb	r4, [r1, #0]
  40e8fc:	42ac      	cmp	r4, r5
  40e8fe:	f102 33ff 	add.w	r3, r2, #4294967295
  40e902:	d11a      	bne.n	40e93a <strncmp+0x9e>
  40e904:	b183      	cbz	r3, 40e928 <strncmp+0x8c>
  40e906:	b914      	cbnz	r4, 40e90e <strncmp+0x72>
  40e908:	e00e      	b.n	40e928 <strncmp+0x8c>
  40e90a:	b16b      	cbz	r3, 40e928 <strncmp+0x8c>
  40e90c:	b17a      	cbz	r2, 40e92e <strncmp+0x92>
  40e90e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40e912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40e916:	42a2      	cmp	r2, r4
  40e918:	f103 33ff 	add.w	r3, r3, #4294967295
  40e91c:	d0f5      	beq.n	40e90a <strncmp+0x6e>
  40e91e:	1b10      	subs	r0, r2, r4
  40e920:	bcf0      	pop	{r4, r5, r6, r7}
  40e922:	4770      	bx	lr
  40e924:	4610      	mov	r0, r2
  40e926:	4770      	bx	lr
  40e928:	2000      	movs	r0, #0
  40e92a:	bcf0      	pop	{r4, r5, r6, r7}
  40e92c:	4770      	bx	lr
  40e92e:	4610      	mov	r0, r2
  40e930:	bcf0      	pop	{r4, r5, r6, r7}
  40e932:	4770      	bx	lr
  40e934:	4629      	mov	r1, r5
  40e936:	4638      	mov	r0, r7
  40e938:	e7de      	b.n	40e8f8 <strncmp+0x5c>
  40e93a:	462a      	mov	r2, r5
  40e93c:	e7ef      	b.n	40e91e <strncmp+0x82>
  40e93e:	bf00      	nop

0040e940 <strncpy>:
  40e940:	ea40 0301 	orr.w	r3, r0, r1
  40e944:	f013 0f03 	tst.w	r3, #3
  40e948:	b470      	push	{r4, r5, r6}
  40e94a:	4603      	mov	r3, r0
  40e94c:	d024      	beq.n	40e998 <strncpy+0x58>
  40e94e:	b1a2      	cbz	r2, 40e97a <strncpy+0x3a>
  40e950:	780c      	ldrb	r4, [r1, #0]
  40e952:	701c      	strb	r4, [r3, #0]
  40e954:	3a01      	subs	r2, #1
  40e956:	3301      	adds	r3, #1
  40e958:	3101      	adds	r1, #1
  40e95a:	b13c      	cbz	r4, 40e96c <strncpy+0x2c>
  40e95c:	b16a      	cbz	r2, 40e97a <strncpy+0x3a>
  40e95e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40e962:	f803 4b01 	strb.w	r4, [r3], #1
  40e966:	3a01      	subs	r2, #1
  40e968:	2c00      	cmp	r4, #0
  40e96a:	d1f7      	bne.n	40e95c <strncpy+0x1c>
  40e96c:	b12a      	cbz	r2, 40e97a <strncpy+0x3a>
  40e96e:	441a      	add	r2, r3
  40e970:	2100      	movs	r1, #0
  40e972:	f803 1b01 	strb.w	r1, [r3], #1
  40e976:	429a      	cmp	r2, r3
  40e978:	d1fb      	bne.n	40e972 <strncpy+0x32>
  40e97a:	bc70      	pop	{r4, r5, r6}
  40e97c:	4770      	bx	lr
  40e97e:	460e      	mov	r6, r1
  40e980:	f851 5b04 	ldr.w	r5, [r1], #4
  40e984:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  40e988:	ea24 0405 	bic.w	r4, r4, r5
  40e98c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40e990:	d105      	bne.n	40e99e <strncpy+0x5e>
  40e992:	f843 5b04 	str.w	r5, [r3], #4
  40e996:	3a04      	subs	r2, #4
  40e998:	2a03      	cmp	r2, #3
  40e99a:	d8f0      	bhi.n	40e97e <strncpy+0x3e>
  40e99c:	e7d7      	b.n	40e94e <strncpy+0xe>
  40e99e:	4631      	mov	r1, r6
  40e9a0:	e7d6      	b.n	40e950 <strncpy+0x10>
  40e9a2:	bf00      	nop

0040e9a4 <sulp>:
  40e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e9a8:	460f      	mov	r7, r1
  40e9aa:	4690      	mov	r8, r2
  40e9ac:	f005 ffb6 	bl	41491c <__ulp>
  40e9b0:	4604      	mov	r4, r0
  40e9b2:	460d      	mov	r5, r1
  40e9b4:	f1b8 0f00 	cmp.w	r8, #0
  40e9b8:	d011      	beq.n	40e9de <sulp+0x3a>
  40e9ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
  40e9be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40e9c2:	2b00      	cmp	r3, #0
  40e9c4:	dd0b      	ble.n	40e9de <sulp+0x3a>
  40e9c6:	051b      	lsls	r3, r3, #20
  40e9c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  40e9cc:	2400      	movs	r4, #0
  40e9ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  40e9d2:	4622      	mov	r2, r4
  40e9d4:	462b      	mov	r3, r5
  40e9d6:	f006 fef1 	bl	4157bc <__aeabi_dmul>
  40e9da:	4604      	mov	r4, r0
  40e9dc:	460d      	mov	r5, r1
  40e9de:	4620      	mov	r0, r4
  40e9e0:	4629      	mov	r1, r5
  40e9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0040e9e8 <_strtod_l>:
  40e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e9ec:	b0a3      	sub	sp, #140	; 0x8c
  40e9ee:	461c      	mov	r4, r3
  40e9f0:	9009      	str	r0, [sp, #36]	; 0x24
  40e9f2:	2300      	movs	r3, #0
  40e9f4:	4620      	mov	r0, r4
  40e9f6:	460e      	mov	r6, r1
  40e9f8:	9207      	str	r2, [sp, #28]
  40e9fa:	931e      	str	r3, [sp, #120]	; 0x78
  40e9fc:	f005 fc4e 	bl	41429c <__localeconv_l>
  40ea00:	2300      	movs	r3, #0
  40ea02:	2200      	movs	r2, #0
  40ea04:	4683      	mov	fp, r0
  40ea06:	6800      	ldr	r0, [r0, #0]
  40ea08:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40ea0c:	f7ff fed8 	bl	40e7c0 <strlen>
  40ea10:	961d      	str	r6, [sp, #116]	; 0x74
  40ea12:	4682      	mov	sl, r0
  40ea14:	4633      	mov	r3, r6
  40ea16:	461a      	mov	r2, r3
  40ea18:	f813 7b01 	ldrb.w	r7, [r3], #1
  40ea1c:	2f2d      	cmp	r7, #45	; 0x2d
  40ea1e:	f200 80b2 	bhi.w	40eb86 <_strtod_l+0x19e>
  40ea22:	e8df f007 	tbb	[pc, r7]
  40ea26:	b017      	.short	0xb017
  40ea28:	b0b0b0b0 	.word	0xb0b0b0b0
  40ea2c:	83b0b0b0 	.word	0x83b0b0b0
  40ea30:	83838383 	.word	0x83838383
  40ea34:	b0b0b0b0 	.word	0xb0b0b0b0
  40ea38:	b0b0b0b0 	.word	0xb0b0b0b0
  40ea3c:	b0b0b0b0 	.word	0xb0b0b0b0
  40ea40:	b0b0b0b0 	.word	0xb0b0b0b0
  40ea44:	b083b0b0 	.word	0xb083b0b0
  40ea48:	b0b0b0b0 	.word	0xb0b0b0b0
  40ea4c:	b0b0b0b0 	.word	0xb0b0b0b0
  40ea50:	80b02db0 	.word	0x80b02db0
  40ea54:	9b07      	ldr	r3, [sp, #28]
  40ea56:	f04f 0a00 	mov.w	sl, #0
  40ea5a:	f04f 0b00 	mov.w	fp, #0
  40ea5e:	b153      	cbz	r3, 40ea76 <_strtod_l+0x8e>
  40ea60:	2300      	movs	r3, #0
  40ea62:	9308      	str	r3, [sp, #32]
  40ea64:	9b07      	ldr	r3, [sp, #28]
  40ea66:	601e      	str	r6, [r3, #0]
  40ea68:	9b08      	ldr	r3, [sp, #32]
  40ea6a:	b123      	cbz	r3, 40ea76 <_strtod_l+0x8e>
  40ea6c:	4651      	mov	r1, sl
  40ea6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
  40ea72:	468a      	mov	sl, r1
  40ea74:	469b      	mov	fp, r3
  40ea76:	4650      	mov	r0, sl
  40ea78:	4659      	mov	r1, fp
  40ea7a:	b023      	add	sp, #140	; 0x8c
  40ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ea80:	2300      	movs	r3, #0
  40ea82:	9308      	str	r3, [sp, #32]
  40ea84:	f102 0901 	add.w	r9, r2, #1
  40ea88:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
  40ea8c:	7857      	ldrb	r7, [r2, #1]
  40ea8e:	2f00      	cmp	r7, #0
  40ea90:	d0e0      	beq.n	40ea54 <_strtod_l+0x6c>
  40ea92:	2f30      	cmp	r7, #48	; 0x30
  40ea94:	d07c      	beq.n	40eb90 <_strtod_l+0x1a8>
  40ea96:	2300      	movs	r3, #0
  40ea98:	930e      	str	r3, [sp, #56]	; 0x38
  40ea9a:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  40ea9e:	2b09      	cmp	r3, #9
  40eaa0:	f200 8409 	bhi.w	40f2b6 <_strtod_l+0x8ce>
  40eaa4:	f04f 0800 	mov.w	r8, #0
  40eaa8:	4645      	mov	r5, r8
  40eaaa:	4644      	mov	r4, r8
  40eaac:	4648      	mov	r0, r9
  40eaae:	2c08      	cmp	r4, #8
  40eab0:	bfc8      	it	gt
  40eab2:	eb08 0888 	addgt.w	r8, r8, r8, lsl #2
  40eab6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  40eaba:	f100 0001 	add.w	r0, r0, #1
  40eabe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  40eac2:	901d      	str	r0, [sp, #116]	; 0x74
  40eac4:	bfc4      	itt	gt
  40eac6:	eb07 0748 	addgt.w	r7, r7, r8, lsl #1
  40eaca:	f1a7 0830 	subgt.w	r8, r7, #48	; 0x30
  40eace:	7807      	ldrb	r7, [r0, #0]
  40ead0:	bfd8      	it	le
  40ead2:	f1a3 0530 	suble.w	r5, r3, #48	; 0x30
  40ead6:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  40eada:	2b09      	cmp	r3, #9
  40eadc:	f104 0401 	add.w	r4, r4, #1
  40eae0:	d9e5      	bls.n	40eaae <_strtod_l+0xc6>
  40eae2:	f8db 1000 	ldr.w	r1, [fp]
  40eae6:	4652      	mov	r2, sl
  40eae8:	f7ff fed8 	bl	40e89c <strncmp>
  40eaec:	4601      	mov	r1, r0
  40eaee:	b1f8      	cbz	r0, 40eb30 <_strtod_l+0x148>
  40eaf0:	2300      	movs	r3, #0
  40eaf2:	4619      	mov	r1, r3
  40eaf4:	469a      	mov	sl, r3
  40eaf6:	46a3      	mov	fp, r4
  40eaf8:	2f65      	cmp	r7, #101	; 0x65
  40eafa:	f000 80b6 	beq.w	40ec6a <_strtod_l+0x282>
  40eafe:	2f45      	cmp	r7, #69	; 0x45
  40eb00:	f000 80b3 	beq.w	40ec6a <_strtod_l+0x282>
  40eb04:	2200      	movs	r2, #0
  40eb06:	2c00      	cmp	r4, #0
  40eb08:	d156      	bne.n	40ebb8 <_strtod_l+0x1d0>
  40eb0a:	b91b      	cbnz	r3, 40eb14 <_strtod_l+0x12c>
  40eb0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40eb0e:	2b00      	cmp	r3, #0
  40eb10:	f000 82f2 	beq.w	40f0f8 <_strtod_l+0x710>
  40eb14:	f04f 0a00 	mov.w	sl, #0
  40eb18:	f04f 0b00 	mov.w	fp, #0
  40eb1c:	9b07      	ldr	r3, [sp, #28]
  40eb1e:	2b00      	cmp	r3, #0
  40eb20:	d0a2      	beq.n	40ea68 <_strtod_l+0x80>
  40eb22:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  40eb24:	e79e      	b.n	40ea64 <_strtod_l+0x7c>
  40eb26:	2301      	movs	r3, #1
  40eb28:	9308      	str	r3, [sp, #32]
  40eb2a:	e7ab      	b.n	40ea84 <_strtod_l+0x9c>
  40eb2c:	931d      	str	r3, [sp, #116]	; 0x74
  40eb2e:	e772      	b.n	40ea16 <_strtod_l+0x2e>
  40eb30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40eb32:	eb03 020a 	add.w	r2, r3, sl
  40eb36:	921d      	str	r2, [sp, #116]	; 0x74
  40eb38:	f813 700a 	ldrb.w	r7, [r3, sl]
  40eb3c:	46a3      	mov	fp, r4
  40eb3e:	4603      	mov	r3, r0
  40eb40:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
  40eb44:	2a09      	cmp	r2, #9
  40eb46:	f200 829a 	bhi.w	40f07e <_strtod_l+0x696>
  40eb4a:	1c58      	adds	r0, r3, #1
  40eb4c:	4696      	mov	lr, r2
  40eb4e:	2a00      	cmp	r2, #0
  40eb50:	f000 8692 	beq.w	40f878 <_strtod_l+0xe90>
  40eb54:	2801      	cmp	r0, #1
  40eb56:	4401      	add	r1, r0
  40eb58:	bf18      	it	ne
  40eb5a:	191b      	addne	r3, r3, r4
  40eb5c:	d106      	bne.n	40eb6c <_strtod_l+0x184>
  40eb5e:	f000 be79 	b.w	40f854 <_strtod_l+0xe6c>
  40eb62:	0045      	lsls	r5, r0, #1
  40eb64:	429f      	cmp	r7, r3
  40eb66:	f000 84a3 	beq.w	40f4b0 <_strtod_l+0xac8>
  40eb6a:	463c      	mov	r4, r7
  40eb6c:	2c08      	cmp	r4, #8
  40eb6e:	f104 0701 	add.w	r7, r4, #1
  40eb72:	eb05 0085 	add.w	r0, r5, r5, lsl #2
  40eb76:	ddf4      	ble.n	40eb62 <_strtod_l+0x17a>
  40eb78:	2f10      	cmp	r7, #16
  40eb7a:	bfdc      	itt	le
  40eb7c:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
  40eb80:	ea4f 0848 	movle.w	r8, r8, lsl #1
  40eb84:	e7ee      	b.n	40eb64 <_strtod_l+0x17c>
  40eb86:	2300      	movs	r3, #0
  40eb88:	2f30      	cmp	r7, #48	; 0x30
  40eb8a:	4691      	mov	r9, r2
  40eb8c:	9308      	str	r3, [sp, #32]
  40eb8e:	d182      	bne.n	40ea96 <_strtod_l+0xae>
  40eb90:	f899 3001 	ldrb.w	r3, [r9, #1]
  40eb94:	2b58      	cmp	r3, #88	; 0x58
  40eb96:	f000 8371 	beq.w	40f27c <_strtod_l+0x894>
  40eb9a:	2b78      	cmp	r3, #120	; 0x78
  40eb9c:	f000 836e 	beq.w	40f27c <_strtod_l+0x894>
  40eba0:	464b      	mov	r3, r9
  40eba2:	3301      	adds	r3, #1
  40eba4:	931d      	str	r3, [sp, #116]	; 0x74
  40eba6:	781f      	ldrb	r7, [r3, #0]
  40eba8:	2f30      	cmp	r7, #48	; 0x30
  40ebaa:	d0fa      	beq.n	40eba2 <_strtod_l+0x1ba>
  40ebac:	4699      	mov	r9, r3
  40ebae:	2f00      	cmp	r7, #0
  40ebb0:	d0b0      	beq.n	40eb14 <_strtod_l+0x12c>
  40ebb2:	2301      	movs	r3, #1
  40ebb4:	930e      	str	r3, [sp, #56]	; 0x38
  40ebb6:	e770      	b.n	40ea9a <_strtod_l+0xb2>
  40ebb8:	2c10      	cmp	r4, #16
  40ebba:	eba2 0301 	sub.w	r3, r2, r1
  40ebbe:	4628      	mov	r0, r5
  40ebc0:	46a2      	mov	sl, r4
  40ebc2:	930a      	str	r3, [sp, #40]	; 0x28
  40ebc4:	bfa8      	it	ge
  40ebc6:	f04f 0a10 	movge.w	sl, #16
  40ebca:	f7fd fcbb 	bl	40c544 <__aeabi_ui2d>
  40ebce:	f1bb 0f00 	cmp.w	fp, #0
  40ebd2:	bf08      	it	eq
  40ebd4:	46a3      	moveq	fp, r4
  40ebd6:	f1ba 0f09 	cmp.w	sl, #9
  40ebda:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40ebde:	dd13      	ble.n	40ec08 <_strtod_l+0x220>
  40ebe0:	4b49      	ldr	r3, [pc, #292]	; (40ed08 <_strtod_l+0x320>)
  40ebe2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  40ebe6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  40ebea:	f006 fde7 	bl	4157bc <__aeabi_dmul>
  40ebee:	4606      	mov	r6, r0
  40ebf0:	4640      	mov	r0, r8
  40ebf2:	460f      	mov	r7, r1
  40ebf4:	f7fd fca6 	bl	40c544 <__aeabi_ui2d>
  40ebf8:	4602      	mov	r2, r0
  40ebfa:	460b      	mov	r3, r1
  40ebfc:	4630      	mov	r0, r6
  40ebfe:	4639      	mov	r1, r7
  40ec00:	f7fd fb64 	bl	40c2cc <__adddf3>
  40ec04:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40ec08:	2c0f      	cmp	r4, #15
  40ec0a:	f300 8085 	bgt.w	40ed18 <_strtod_l+0x330>
  40ec0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ec10:	2b00      	cmp	r3, #0
  40ec12:	d027      	beq.n	40ec64 <_strtod_l+0x27c>
  40ec14:	f340 84f8 	ble.w	40f608 <_strtod_l+0xc20>
  40ec18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ec1a:	2b16      	cmp	r3, #22
  40ec1c:	f300 8461 	bgt.w	40f4e2 <_strtod_l+0xafa>
  40ec20:	4939      	ldr	r1, [pc, #228]	; (40ed08 <_strtod_l+0x320>)
  40ec22:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40ec26:	e9d1 0100 	ldrd	r0, r1, [r1]
  40ec2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40ec2e:	f006 fdc5 	bl	4157bc <__aeabi_dmul>
  40ec32:	4682      	mov	sl, r0
  40ec34:	468b      	mov	fp, r1
  40ec36:	e771      	b.n	40eb1c <_strtod_l+0x134>
  40ec38:	a81d      	add	r0, sp, #116	; 0x74
  40ec3a:	4934      	ldr	r1, [pc, #208]	; (40ed0c <_strtod_l+0x324>)
  40ec3c:	f005 fa34 	bl	4140a8 <__match>
  40ec40:	2800      	cmp	r0, #0
  40ec42:	f43f af07 	beq.w	40ea54 <_strtod_l+0x6c>
  40ec46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ec48:	4931      	ldr	r1, [pc, #196]	; (40ed10 <_strtod_l+0x328>)
  40ec4a:	3b01      	subs	r3, #1
  40ec4c:	a81d      	add	r0, sp, #116	; 0x74
  40ec4e:	931d      	str	r3, [sp, #116]	; 0x74
  40ec50:	f005 fa2a 	bl	4140a8 <__match>
  40ec54:	b910      	cbnz	r0, 40ec5c <_strtod_l+0x274>
  40ec56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ec58:	3301      	adds	r3, #1
  40ec5a:	931d      	str	r3, [sp, #116]	; 0x74
  40ec5c:	4b2d      	ldr	r3, [pc, #180]	; (40ed14 <_strtod_l+0x32c>)
  40ec5e:	9305      	str	r3, [sp, #20]
  40ec60:	2300      	movs	r3, #0
  40ec62:	9304      	str	r3, [sp, #16]
  40ec64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40ec68:	e758      	b.n	40eb1c <_strtod_l+0x134>
  40ec6a:	2c00      	cmp	r4, #0
  40ec6c:	f000 81fb 	beq.w	40f066 <_strtod_l+0x67e>
  40ec70:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  40ec72:	1c72      	adds	r2, r6, #1
  40ec74:	921d      	str	r2, [sp, #116]	; 0x74
  40ec76:	7877      	ldrb	r7, [r6, #1]
  40ec78:	2f2b      	cmp	r7, #43	; 0x2b
  40ec7a:	f000 82fc 	beq.w	40f276 <_strtod_l+0x88e>
  40ec7e:	2f2d      	cmp	r7, #45	; 0x2d
  40ec80:	f000 8232 	beq.w	40f0e8 <_strtod_l+0x700>
  40ec84:	f04f 0c00 	mov.w	ip, #0
  40ec88:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
  40ec8c:	2a09      	cmp	r2, #9
  40ec8e:	f200 82ef 	bhi.w	40f270 <_strtod_l+0x888>
  40ec92:	2f30      	cmp	r7, #48	; 0x30
  40ec94:	d105      	bne.n	40eca2 <_strtod_l+0x2ba>
  40ec96:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40ec98:	3201      	adds	r2, #1
  40ec9a:	921d      	str	r2, [sp, #116]	; 0x74
  40ec9c:	7817      	ldrb	r7, [r2, #0]
  40ec9e:	2f30      	cmp	r7, #48	; 0x30
  40eca0:	d0fa      	beq.n	40ec98 <_strtod_l+0x2b0>
  40eca2:	f1a7 0231 	sub.w	r2, r7, #49	; 0x31
  40eca6:	2a08      	cmp	r2, #8
  40eca8:	f63f af2c 	bhi.w	40eb04 <_strtod_l+0x11c>
  40ecac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40ecae:	920c      	str	r2, [sp, #48]	; 0x30
  40ecb0:	1c50      	adds	r0, r2, #1
  40ecb2:	3f30      	subs	r7, #48	; 0x30
  40ecb4:	901d      	str	r0, [sp, #116]	; 0x74
  40ecb6:	970a      	str	r7, [sp, #40]	; 0x28
  40ecb8:	7857      	ldrb	r7, [r2, #1]
  40ecba:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
  40ecbe:	f1be 0f09 	cmp.w	lr, #9
  40ecc2:	d80f      	bhi.n	40ece4 <_strtod_l+0x2fc>
  40ecc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ecc6:	3001      	adds	r0, #1
  40ecc8:	901d      	str	r0, [sp, #116]	; 0x74
  40ecca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40ecce:	eb07 0242 	add.w	r2, r7, r2, lsl #1
  40ecd2:	7807      	ldrb	r7, [r0, #0]
  40ecd4:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
  40ecd8:	f1be 0f09 	cmp.w	lr, #9
  40ecdc:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
  40ece0:	d9f1      	bls.n	40ecc6 <_strtod_l+0x2de>
  40ece2:	920a      	str	r2, [sp, #40]	; 0x28
  40ece4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ece6:	1a80      	subs	r0, r0, r2
  40ece8:	2808      	cmp	r0, #8
  40ecea:	f300 83f2 	bgt.w	40f4d2 <_strtod_l+0xaea>
  40ecee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ecf0:	f644 601f 	movw	r0, #19999	; 0x4e1f
  40ecf4:	4282      	cmp	r2, r0
  40ecf6:	bfa8      	it	ge
  40ecf8:	4602      	movge	r2, r0
  40ecfa:	f1bc 0f00 	cmp.w	ip, #0
  40ecfe:	f43f af02 	beq.w	40eb06 <_strtod_l+0x11e>
  40ed02:	4252      	negs	r2, r2
  40ed04:	e6ff      	b.n	40eb06 <_strtod_l+0x11e>
  40ed06:	bf00      	nop
  40ed08:	004177c8 	.word	0x004177c8
  40ed0c:	00417478 	.word	0x00417478
  40ed10:	0041747c 	.word	0x0041747c
  40ed14:	7ff00000 	.word	0x7ff00000
  40ed18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ed1a:	eba4 0a0a 	sub.w	sl, r4, sl
  40ed1e:	449a      	add	sl, r3
  40ed20:	f1ba 0f00 	cmp.w	sl, #0
  40ed24:	f340 837b 	ble.w	40f41e <_strtod_l+0xa36>
  40ed28:	f01a 030f 	ands.w	r3, sl, #15
  40ed2c:	d00a      	beq.n	40ed44 <_strtod_l+0x35c>
  40ed2e:	49ae      	ldr	r1, [pc, #696]	; (40efe8 <_strtod_l+0x600>)
  40ed30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40ed34:	e9d1 0100 	ldrd	r0, r1, [r1]
  40ed38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40ed3c:	f006 fd3e 	bl	4157bc <__aeabi_dmul>
  40ed40:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40ed44:	f03a 060f 	bics.w	r6, sl, #15
  40ed48:	f040 822e 	bne.w	40f1a8 <_strtod_l+0x7c0>
  40ed4c:	2300      	movs	r3, #0
  40ed4e:	930e      	str	r3, [sp, #56]	; 0x38
  40ed50:	4623      	mov	r3, r4
  40ed52:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ed54:	9500      	str	r5, [sp, #0]
  40ed56:	465a      	mov	r2, fp
  40ed58:	4649      	mov	r1, r9
  40ed5a:	4620      	mov	r0, r4
  40ed5c:	f005 fb62 	bl	414424 <__s2b>
  40ed60:	9012      	str	r0, [sp, #72]	; 0x48
  40ed62:	2800      	cmp	r0, #0
  40ed64:	f000 82f4 	beq.w	40f350 <_strtod_l+0x968>
  40ed68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ed6a:	2100      	movs	r1, #0
  40ed6c:	2a00      	cmp	r2, #0
  40ed6e:	f1c2 0300 	rsb	r3, r2, #0
  40ed72:	bfa8      	it	ge
  40ed74:	460b      	movge	r3, r1
  40ed76:	930f      	str	r3, [sp, #60]	; 0x3c
  40ed78:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ed7c:	469a      	mov	sl, r3
  40ed7e:	4688      	mov	r8, r1
  40ed80:	468b      	mov	fp, r1
  40ed82:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40ed84:	4620      	mov	r0, r4
  40ed86:	6869      	ldr	r1, [r5, #4]
  40ed88:	f005 fadc 	bl	414344 <_Balloc>
  40ed8c:	4681      	mov	r9, r0
  40ed8e:	2800      	cmp	r0, #0
  40ed90:	f000 82ec 	beq.w	40f36c <_strtod_l+0x984>
  40ed94:	692a      	ldr	r2, [r5, #16]
  40ed96:	3202      	adds	r2, #2
  40ed98:	0092      	lsls	r2, r2, #2
  40ed9a:	f105 010c 	add.w	r1, r5, #12
  40ed9e:	300c      	adds	r0, #12
  40eda0:	f7fe ff4e 	bl	40dc40 <memcpy>
  40eda4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40eda8:	a820      	add	r0, sp, #128	; 0x80
  40edaa:	a91f      	add	r1, sp, #124	; 0x7c
  40edac:	9001      	str	r0, [sp, #4]
  40edae:	9100      	str	r1, [sp, #0]
  40edb0:	4620      	mov	r0, r4
  40edb2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40edb6:	f005 fe3b 	bl	414a30 <__d2b>
  40edba:	901e      	str	r0, [sp, #120]	; 0x78
  40edbc:	2800      	cmp	r0, #0
  40edbe:	f000 8435 	beq.w	40f62c <_strtod_l+0xc44>
  40edc2:	2101      	movs	r1, #1
  40edc4:	4620      	mov	r0, r4
  40edc6:	f005 fbcb 	bl	414560 <__i2b>
  40edca:	4680      	mov	r8, r0
  40edcc:	2800      	cmp	r0, #0
  40edce:	f000 82cd 	beq.w	40f36c <_strtod_l+0x984>
  40edd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40edd4:	2a00      	cmp	r2, #0
  40edd6:	f2c0 814e 	blt.w	40f076 <_strtod_l+0x68e>
  40edda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40eddc:	4655      	mov	r5, sl
  40edde:	189e      	adds	r6, r3, r2
  40ede0:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ede2:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ede4:	4f81      	ldr	r7, [pc, #516]	; (40efec <_strtod_l+0x604>)
  40ede6:	1a52      	subs	r2, r2, r1
  40ede8:	441a      	add	r2, r3
  40edea:	3a01      	subs	r2, #1
  40edec:	42ba      	cmp	r2, r7
  40edee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40edf2:	f280 80ef 	bge.w	40efd4 <_strtod_l+0x5ec>
  40edf6:	1abf      	subs	r7, r7, r2
  40edf8:	2f1f      	cmp	r7, #31
  40edfa:	eba3 0307 	sub.w	r3, r3, r7
  40edfe:	f300 8141 	bgt.w	40f084 <_strtod_l+0x69c>
  40ee02:	2201      	movs	r2, #1
  40ee04:	40ba      	lsls	r2, r7
  40ee06:	9213      	str	r2, [sp, #76]	; 0x4c
  40ee08:	2200      	movs	r2, #0
  40ee0a:	9211      	str	r2, [sp, #68]	; 0x44
  40ee0c:	18f7      	adds	r7, r6, r3
  40ee0e:	441d      	add	r5, r3
  40ee10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ee12:	42be      	cmp	r6, r7
  40ee14:	4632      	mov	r2, r6
  40ee16:	441d      	add	r5, r3
  40ee18:	bfa8      	it	ge
  40ee1a:	463a      	movge	r2, r7
  40ee1c:	42aa      	cmp	r2, r5
  40ee1e:	bfa8      	it	ge
  40ee20:	462a      	movge	r2, r5
  40ee22:	2a00      	cmp	r2, #0
  40ee24:	dd02      	ble.n	40ee2c <_strtod_l+0x444>
  40ee26:	1abf      	subs	r7, r7, r2
  40ee28:	1aad      	subs	r5, r5, r2
  40ee2a:	1ab6      	subs	r6, r6, r2
  40ee2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ee2e:	b1bb      	cbz	r3, 40ee60 <_strtod_l+0x478>
  40ee30:	4641      	mov	r1, r8
  40ee32:	461a      	mov	r2, r3
  40ee34:	4620      	mov	r0, r4
  40ee36:	f005 fc2f 	bl	414698 <__pow5mult>
  40ee3a:	4680      	mov	r8, r0
  40ee3c:	2800      	cmp	r0, #0
  40ee3e:	f000 8295 	beq.w	40f36c <_strtod_l+0x984>
  40ee42:	4601      	mov	r1, r0
  40ee44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40ee46:	4620      	mov	r0, r4
  40ee48:	f005 fb94 	bl	414574 <__multiply>
  40ee4c:	2800      	cmp	r0, #0
  40ee4e:	f000 828d 	beq.w	40f36c <_strtod_l+0x984>
  40ee52:	900c      	str	r0, [sp, #48]	; 0x30
  40ee54:	991e      	ldr	r1, [sp, #120]	; 0x78
  40ee56:	4620      	mov	r0, r4
  40ee58:	f005 fa9a 	bl	414390 <_Bfree>
  40ee5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ee5e:	921e      	str	r2, [sp, #120]	; 0x78
  40ee60:	2f00      	cmp	r7, #0
  40ee62:	dd08      	ble.n	40ee76 <_strtod_l+0x48e>
  40ee64:	463a      	mov	r2, r7
  40ee66:	991e      	ldr	r1, [sp, #120]	; 0x78
  40ee68:	4620      	mov	r0, r4
  40ee6a:	f005 fc65 	bl	414738 <__lshift>
  40ee6e:	901e      	str	r0, [sp, #120]	; 0x78
  40ee70:	2800      	cmp	r0, #0
  40ee72:	f000 83db 	beq.w	40f62c <_strtod_l+0xc44>
  40ee76:	4653      	mov	r3, sl
  40ee78:	b143      	cbz	r3, 40ee8c <_strtod_l+0x4a4>
  40ee7a:	4649      	mov	r1, r9
  40ee7c:	4652      	mov	r2, sl
  40ee7e:	4620      	mov	r0, r4
  40ee80:	f005 fc0a 	bl	414698 <__pow5mult>
  40ee84:	4681      	mov	r9, r0
  40ee86:	2800      	cmp	r0, #0
  40ee88:	f000 8270 	beq.w	40f36c <_strtod_l+0x984>
  40ee8c:	2d00      	cmp	r5, #0
  40ee8e:	dd08      	ble.n	40eea2 <_strtod_l+0x4ba>
  40ee90:	4649      	mov	r1, r9
  40ee92:	462a      	mov	r2, r5
  40ee94:	4620      	mov	r0, r4
  40ee96:	f005 fc4f 	bl	414738 <__lshift>
  40ee9a:	4681      	mov	r9, r0
  40ee9c:	2800      	cmp	r0, #0
  40ee9e:	f000 8265 	beq.w	40f36c <_strtod_l+0x984>
  40eea2:	2e00      	cmp	r6, #0
  40eea4:	dd08      	ble.n	40eeb8 <_strtod_l+0x4d0>
  40eea6:	4641      	mov	r1, r8
  40eea8:	4632      	mov	r2, r6
  40eeaa:	4620      	mov	r0, r4
  40eeac:	f005 fc44 	bl	414738 <__lshift>
  40eeb0:	4680      	mov	r8, r0
  40eeb2:	2800      	cmp	r0, #0
  40eeb4:	f000 825a 	beq.w	40f36c <_strtod_l+0x984>
  40eeb8:	464a      	mov	r2, r9
  40eeba:	991e      	ldr	r1, [sp, #120]	; 0x78
  40eebc:	4620      	mov	r0, r4
  40eebe:	f005 fca9 	bl	414814 <__mdiff>
  40eec2:	4683      	mov	fp, r0
  40eec4:	2800      	cmp	r0, #0
  40eec6:	f000 8251 	beq.w	40f36c <_strtod_l+0x984>
  40eeca:	2500      	movs	r5, #0
  40eecc:	68c3      	ldr	r3, [r0, #12]
  40eece:	60c5      	str	r5, [r0, #12]
  40eed0:	4641      	mov	r1, r8
  40eed2:	9310      	str	r3, [sp, #64]	; 0x40
  40eed4:	f005 fc82 	bl	4147dc <__mcmp>
  40eed8:	42a8      	cmp	r0, r5
  40eeda:	f2c0 83ee 	blt.w	40f6ba <_strtod_l+0xcd2>
  40eede:	f000 83a7 	beq.w	40f630 <_strtod_l+0xc48>
  40eee2:	4641      	mov	r1, r8
  40eee4:	4658      	mov	r0, fp
  40eee6:	f005 fdff 	bl	414ae8 <__ratio>
  40eeea:	2200      	movs	r2, #0
  40eeec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40eef0:	4606      	mov	r6, r0
  40eef2:	460f      	mov	r7, r1
  40eef4:	f7fd fc06 	bl	40c704 <__aeabi_dcmple>
  40eef8:	2800      	cmp	r0, #0
  40eefa:	d07f      	beq.n	40effc <_strtod_l+0x614>
  40eefc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40eefe:	2b00      	cmp	r3, #0
  40ef00:	f000 80c8 	beq.w	40f094 <_strtod_l+0x6ac>
  40ef04:	4b3a      	ldr	r3, [pc, #232]	; (40eff0 <_strtod_l+0x608>)
  40ef06:	4f3a      	ldr	r7, [pc, #232]	; (40eff0 <_strtod_l+0x608>)
  40ef08:	9513      	str	r5, [sp, #76]	; 0x4c
  40ef0a:	2200      	movs	r2, #0
  40ef0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  40ef10:	9b05      	ldr	r3, [sp, #20]
  40ef12:	9311      	str	r3, [sp, #68]	; 0x44
  40ef14:	4e37      	ldr	r6, [pc, #220]	; (40eff4 <_strtod_l+0x60c>)
  40ef16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ef18:	4b37      	ldr	r3, [pc, #220]	; (40eff8 <_strtod_l+0x610>)
  40ef1a:	ea02 0506 	and.w	r5, r2, r6
  40ef1e:	429d      	cmp	r5, r3
  40ef20:	f000 81f0 	beq.w	40f304 <_strtod_l+0x91c>
  40ef24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ef26:	b343      	cbz	r3, 40ef7a <_strtod_l+0x592>
  40ef28:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
  40ef2c:	d825      	bhi.n	40ef7a <_strtod_l+0x592>
  40ef2e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  40ef30:	4639      	mov	r1, r7
  40ef32:	4630      	mov	r0, r6
  40ef34:	a32a      	add	r3, pc, #168	; (adr r3, 40efe0 <_strtod_l+0x5f8>)
  40ef36:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ef3a:	f7fd fbe3 	bl	40c704 <__aeabi_dcmple>
  40ef3e:	b1b8      	cbz	r0, 40ef70 <_strtod_l+0x588>
  40ef40:	4630      	mov	r0, r6
  40ef42:	4639      	mov	r1, r7
  40ef44:	f7fd fc24 	bl	40c790 <__aeabi_d2uiz>
  40ef48:	2800      	cmp	r0, #0
  40ef4a:	f000 8320 	beq.w	40f58e <_strtod_l+0xba6>
  40ef4e:	f7fd faf9 	bl	40c544 <__aeabi_ui2d>
  40ef52:	9013      	str	r0, [sp, #76]	; 0x4c
  40ef54:	460f      	mov	r7, r1
  40ef56:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ef58:	2b00      	cmp	r3, #0
  40ef5a:	f040 8313 	bne.w	40f584 <_strtod_l+0xb9c>
  40ef5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ef60:	9316      	str	r3, [sp, #88]	; 0x58
  40ef62:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40ef66:	9317      	str	r3, [sp, #92]	; 0x5c
  40ef68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40ef6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  40ef70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ef72:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
  40ef76:	1b5b      	subs	r3, r3, r5
  40ef78:	930d      	str	r3, [sp, #52]	; 0x34
  40ef7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40ef7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40ef82:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40ef86:	f005 fcc9 	bl	41491c <__ulp>
  40ef8a:	4602      	mov	r2, r0
  40ef8c:	460b      	mov	r3, r1
  40ef8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40ef92:	f006 fc13 	bl	4157bc <__aeabi_dmul>
  40ef96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40ef9a:	f7fd f997 	bl	40c2cc <__adddf3>
  40ef9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40efa2:	460e      	mov	r6, r1
  40efa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40efa6:	b923      	cbnz	r3, 40efb2 <_strtod_l+0x5ca>
  40efa8:	4b12      	ldr	r3, [pc, #72]	; (40eff4 <_strtod_l+0x60c>)
  40efaa:	4033      	ands	r3, r6
  40efac:	429d      	cmp	r5, r3
  40efae:	f000 81ff 	beq.w	40f3b0 <_strtod_l+0x9c8>
  40efb2:	991e      	ldr	r1, [sp, #120]	; 0x78
  40efb4:	4620      	mov	r0, r4
  40efb6:	f005 f9eb 	bl	414390 <_Bfree>
  40efba:	4649      	mov	r1, r9
  40efbc:	4620      	mov	r0, r4
  40efbe:	f005 f9e7 	bl	414390 <_Bfree>
  40efc2:	4641      	mov	r1, r8
  40efc4:	4620      	mov	r0, r4
  40efc6:	f005 f9e3 	bl	414390 <_Bfree>
  40efca:	4659      	mov	r1, fp
  40efcc:	4620      	mov	r0, r4
  40efce:	f005 f9df 	bl	414390 <_Bfree>
  40efd2:	e6d6      	b.n	40ed82 <_strtod_l+0x39a>
  40efd4:	2200      	movs	r2, #0
  40efd6:	9211      	str	r2, [sp, #68]	; 0x44
  40efd8:	2201      	movs	r2, #1
  40efda:	9213      	str	r2, [sp, #76]	; 0x4c
  40efdc:	e716      	b.n	40ee0c <_strtod_l+0x424>
  40efde:	bf00      	nop
  40efe0:	ffc00000 	.word	0xffc00000
  40efe4:	41dfffff 	.word	0x41dfffff
  40efe8:	004177c8 	.word	0x004177c8
  40efec:	fffffc02 	.word	0xfffffc02
  40eff0:	3ff00000 	.word	0x3ff00000
  40eff4:	7ff00000 	.word	0x7ff00000
  40eff8:	7fe00000 	.word	0x7fe00000
  40effc:	4639      	mov	r1, r7
  40effe:	4bb7      	ldr	r3, [pc, #732]	; (40f2dc <_strtod_l+0x8f4>)
  40f000:	4630      	mov	r0, r6
  40f002:	2200      	movs	r2, #0
  40f004:	f006 fbda 	bl	4157bc <__aeabi_dmul>
  40f008:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f00a:	9013      	str	r0, [sp, #76]	; 0x4c
  40f00c:	460f      	mov	r7, r1
  40f00e:	2b00      	cmp	r3, #0
  40f010:	d165      	bne.n	40f0de <_strtod_l+0x6f6>
  40f012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40f016:	9014      	str	r0, [sp, #80]	; 0x50
  40f018:	9315      	str	r3, [sp, #84]	; 0x54
  40f01a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40f01e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  40f022:	9b05      	ldr	r3, [sp, #20]
  40f024:	9311      	str	r3, [sp, #68]	; 0x44
  40f026:	e775      	b.n	40ef14 <_strtod_l+0x52c>
  40f028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40f02a:	eb03 020a 	add.w	r2, r3, sl
  40f02e:	921d      	str	r2, [sp, #116]	; 0x74
  40f030:	f813 700a 	ldrb.w	r7, [r3, sl]
  40f034:	2f30      	cmp	r7, #48	; 0x30
  40f036:	4623      	mov	r3, r4
  40f038:	d106      	bne.n	40f048 <_strtod_l+0x660>
  40f03a:	3201      	adds	r2, #1
  40f03c:	921d      	str	r2, [sp, #116]	; 0x74
  40f03e:	7817      	ldrb	r7, [r2, #0]
  40f040:	2f30      	cmp	r7, #48	; 0x30
  40f042:	f103 0301 	add.w	r3, r3, #1
  40f046:	d0f8      	beq.n	40f03a <_strtod_l+0x652>
  40f048:	f1a7 0231 	sub.w	r2, r7, #49	; 0x31
  40f04c:	2a08      	cmp	r2, #8
  40f04e:	f240 82cb 	bls.w	40f5e8 <_strtod_l+0xc00>
  40f052:	f04f 0b00 	mov.w	fp, #0
  40f056:	2f65      	cmp	r7, #101	; 0x65
  40f058:	4659      	mov	r1, fp
  40f05a:	46d8      	mov	r8, fp
  40f05c:	465d      	mov	r5, fp
  40f05e:	f04f 0a01 	mov.w	sl, #1
  40f062:	f47f ad4c 	bne.w	40eafe <_strtod_l+0x116>
  40f066:	2b00      	cmp	r3, #0
  40f068:	d144      	bne.n	40f0f4 <_strtod_l+0x70c>
  40f06a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f06c:	2a00      	cmp	r2, #0
  40f06e:	f43f acf1 	beq.w	40ea54 <_strtod_l+0x6c>
  40f072:	461c      	mov	r4, r3
  40f074:	e5fc      	b.n	40ec70 <_strtod_l+0x288>
  40f076:	4653      	mov	r3, sl
  40f078:	1a9d      	subs	r5, r3, r2
  40f07a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40f07c:	e6b0      	b.n	40ede0 <_strtod_l+0x3f8>
  40f07e:	f04f 0a01 	mov.w	sl, #1
  40f082:	e539      	b.n	40eaf8 <_strtod_l+0x110>
  40f084:	4996      	ldr	r1, [pc, #600]	; (40f2e0 <_strtod_l+0x8f8>)
  40f086:	2701      	movs	r7, #1
  40f088:	1a8a      	subs	r2, r1, r2
  40f08a:	fa07 f202 	lsl.w	r2, r7, r2
  40f08e:	9211      	str	r2, [sp, #68]	; 0x44
  40f090:	9713      	str	r7, [sp, #76]	; 0x4c
  40f092:	e6bb      	b.n	40ee0c <_strtod_l+0x424>
  40f094:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  40f098:	2900      	cmp	r1, #0
  40f09a:	f040 80ca 	bne.w	40f232 <_strtod_l+0x84a>
  40f09e:	f3c2 0313 	ubfx	r3, r2, #0, #20
  40f0a2:	9211      	str	r2, [sp, #68]	; 0x44
  40f0a4:	2b00      	cmp	r3, #0
  40f0a6:	f040 80ca 	bne.w	40f23e <_strtod_l+0x856>
  40f0aa:	2200      	movs	r2, #0
  40f0ac:	4b8d      	ldr	r3, [pc, #564]	; (40f2e4 <_strtod_l+0x8fc>)
  40f0ae:	4630      	mov	r0, r6
  40f0b0:	4639      	mov	r1, r7
  40f0b2:	f7fd fb1d 	bl	40c6f0 <__aeabi_dcmplt>
  40f0b6:	2800      	cmp	r0, #0
  40f0b8:	f040 8338 	bne.w	40f72c <_strtod_l+0xd44>
  40f0bc:	4639      	mov	r1, r7
  40f0be:	4b87      	ldr	r3, [pc, #540]	; (40f2dc <_strtod_l+0x8f4>)
  40f0c0:	4630      	mov	r0, r6
  40f0c2:	2200      	movs	r2, #0
  40f0c4:	f006 fb7a 	bl	4157bc <__aeabi_dmul>
  40f0c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40f0cc:	9013      	str	r0, [sp, #76]	; 0x4c
  40f0ce:	901a      	str	r0, [sp, #104]	; 0x68
  40f0d0:	460f      	mov	r7, r1
  40f0d2:	931b      	str	r3, [sp, #108]	; 0x6c
  40f0d4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40f0d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  40f0dc:	e71a      	b.n	40ef14 <_strtod_l+0x52c>
  40f0de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40f0e0:	460b      	mov	r3, r1
  40f0e2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40f0e6:	e798      	b.n	40f01a <_strtod_l+0x632>
  40f0e8:	f04f 0c01 	mov.w	ip, #1
  40f0ec:	1cb2      	adds	r2, r6, #2
  40f0ee:	921d      	str	r2, [sp, #116]	; 0x74
  40f0f0:	78b7      	ldrb	r7, [r6, #2]
  40f0f2:	e5c9      	b.n	40ec88 <_strtod_l+0x2a0>
  40f0f4:	2400      	movs	r4, #0
  40f0f6:	e5bb      	b.n	40ec70 <_strtod_l+0x288>
  40f0f8:	f1ba 0f00 	cmp.w	sl, #0
  40f0fc:	f47f acaa 	bne.w	40ea54 <_strtod_l+0x6c>
  40f100:	3f49      	subs	r7, #73	; 0x49
  40f102:	2f25      	cmp	r7, #37	; 0x25
  40f104:	f63f aca6 	bhi.w	40ea54 <_strtod_l+0x6c>
  40f108:	a301      	add	r3, pc, #4	; (adr r3, 40f110 <_strtod_l+0x728>)
  40f10a:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
  40f10e:	bf00      	nop
  40f110:	0040ec39 	.word	0x0040ec39
  40f114:	0040ea55 	.word	0x0040ea55
  40f118:	0040ea55 	.word	0x0040ea55
  40f11c:	0040ea55 	.word	0x0040ea55
  40f120:	0040ea55 	.word	0x0040ea55
  40f124:	0040f24f 	.word	0x0040f24f
  40f128:	0040ea55 	.word	0x0040ea55
  40f12c:	0040ea55 	.word	0x0040ea55
  40f130:	0040ea55 	.word	0x0040ea55
  40f134:	0040ea55 	.word	0x0040ea55
  40f138:	0040ea55 	.word	0x0040ea55
  40f13c:	0040ea55 	.word	0x0040ea55
  40f140:	0040ea55 	.word	0x0040ea55
  40f144:	0040ea55 	.word	0x0040ea55
  40f148:	0040ea55 	.word	0x0040ea55
  40f14c:	0040ea55 	.word	0x0040ea55
  40f150:	0040ea55 	.word	0x0040ea55
  40f154:	0040ea55 	.word	0x0040ea55
  40f158:	0040ea55 	.word	0x0040ea55
  40f15c:	0040ea55 	.word	0x0040ea55
  40f160:	0040ea55 	.word	0x0040ea55
  40f164:	0040ea55 	.word	0x0040ea55
  40f168:	0040ea55 	.word	0x0040ea55
  40f16c:	0040ea55 	.word	0x0040ea55
  40f170:	0040ea55 	.word	0x0040ea55
  40f174:	0040ea55 	.word	0x0040ea55
  40f178:	0040ea55 	.word	0x0040ea55
  40f17c:	0040ea55 	.word	0x0040ea55
  40f180:	0040ea55 	.word	0x0040ea55
  40f184:	0040ea55 	.word	0x0040ea55
  40f188:	0040ea55 	.word	0x0040ea55
  40f18c:	0040ea55 	.word	0x0040ea55
  40f190:	0040ec39 	.word	0x0040ec39
  40f194:	0040ea55 	.word	0x0040ea55
  40f198:	0040ea55 	.word	0x0040ea55
  40f19c:	0040ea55 	.word	0x0040ea55
  40f1a0:	0040ea55 	.word	0x0040ea55
  40f1a4:	0040f24f 	.word	0x0040f24f
  40f1a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
  40f1ac:	f300 80d0 	bgt.w	40f350 <_strtod_l+0x968>
  40f1b0:	1136      	asrs	r6, r6, #4
  40f1b2:	2e01      	cmp	r6, #1
  40f1b4:	f8df a148 	ldr.w	sl, [pc, #328]	; 40f300 <_strtod_l+0x918>
  40f1b8:	f340 82d5 	ble.w	40f766 <_strtod_l+0xd7e>
  40f1bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f1c0:	2300      	movs	r3, #0
  40f1c2:	4657      	mov	r7, sl
  40f1c4:	4698      	mov	r8, r3
  40f1c6:	f016 0f01 	tst.w	r6, #1
  40f1ca:	f108 0801 	add.w	r8, r8, #1
  40f1ce:	ea4f 0666 	mov.w	r6, r6, asr #1
  40f1d2:	d004      	beq.n	40f1de <_strtod_l+0x7f6>
  40f1d4:	e9d7 2300 	ldrd	r2, r3, [r7]
  40f1d8:	f006 faf0 	bl	4157bc <__aeabi_dmul>
  40f1dc:	2301      	movs	r3, #1
  40f1de:	2e01      	cmp	r6, #1
  40f1e0:	f107 0708 	add.w	r7, r7, #8
  40f1e4:	d1ef      	bne.n	40f1c6 <_strtod_l+0x7de>
  40f1e6:	2b00      	cmp	r3, #0
  40f1e8:	f040 8338 	bne.w	40f85c <_strtod_l+0xe74>
  40f1ec:	9b05      	ldr	r3, [sp, #20]
  40f1ee:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  40f1f2:	9305      	str	r3, [sp, #20]
  40f1f4:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
  40f1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40f1fc:	e9d8 0100 	ldrd	r0, r1, [r8]
  40f200:	f006 fadc 	bl	4157bc <__aeabi_dmul>
  40f204:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40f208:	0d1b      	lsrs	r3, r3, #20
  40f20a:	4a37      	ldr	r2, [pc, #220]	; (40f2e8 <_strtod_l+0x900>)
  40f20c:	051b      	lsls	r3, r3, #20
  40f20e:	4293      	cmp	r3, r2
  40f210:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40f214:	f200 809c 	bhi.w	40f350 <_strtod_l+0x968>
  40f218:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  40f21c:	4293      	cmp	r3, r2
  40f21e:	f240 828d 	bls.w	40f73c <_strtod_l+0xd54>
  40f222:	4b32      	ldr	r3, [pc, #200]	; (40f2ec <_strtod_l+0x904>)
  40f224:	9305      	str	r3, [sp, #20]
  40f226:	2300      	movs	r3, #0
  40f228:	930e      	str	r3, [sp, #56]	; 0x38
  40f22a:	f04f 33ff 	mov.w	r3, #4294967295
  40f22e:	9304      	str	r3, [sp, #16]
  40f230:	e58e      	b.n	40ed50 <_strtod_l+0x368>
  40f232:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  40f236:	2901      	cmp	r1, #1
  40f238:	f000 81ac 	beq.w	40f594 <_strtod_l+0xbac>
  40f23c:	9211      	str	r2, [sp, #68]	; 0x44
  40f23e:	4b2c      	ldr	r3, [pc, #176]	; (40f2f0 <_strtod_l+0x908>)
  40f240:	4f28      	ldr	r7, [pc, #160]	; (40f2e4 <_strtod_l+0x8fc>)
  40f242:	2200      	movs	r2, #0
  40f244:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  40f248:	2300      	movs	r3, #0
  40f24a:	9313      	str	r3, [sp, #76]	; 0x4c
  40f24c:	e662      	b.n	40ef14 <_strtod_l+0x52c>
  40f24e:	a81d      	add	r0, sp, #116	; 0x74
  40f250:	4928      	ldr	r1, [pc, #160]	; (40f2f4 <_strtod_l+0x90c>)
  40f252:	f004 ff29 	bl	4140a8 <__match>
  40f256:	2800      	cmp	r0, #0
  40f258:	f43f abfc 	beq.w	40ea54 <_strtod_l+0x6c>
  40f25c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40f25e:	781b      	ldrb	r3, [r3, #0]
  40f260:	2b28      	cmp	r3, #40	; 0x28
  40f262:	f000 82da 	beq.w	40f81a <_strtod_l+0xe32>
  40f266:	4b24      	ldr	r3, [pc, #144]	; (40f2f8 <_strtod_l+0x910>)
  40f268:	9305      	str	r3, [sp, #20]
  40f26a:	2300      	movs	r3, #0
  40f26c:	9304      	str	r3, [sp, #16]
  40f26e:	e4f9      	b.n	40ec64 <_strtod_l+0x27c>
  40f270:	961d      	str	r6, [sp, #116]	; 0x74
  40f272:	2200      	movs	r2, #0
  40f274:	e447      	b.n	40eb06 <_strtod_l+0x11e>
  40f276:	f04f 0c00 	mov.w	ip, #0
  40f27a:	e737      	b.n	40f0ec <_strtod_l+0x704>
  40f27c:	9a08      	ldr	r2, [sp, #32]
  40f27e:	9402      	str	r4, [sp, #8]
  40f280:	ab1e      	add	r3, sp, #120	; 0x78
  40f282:	9201      	str	r2, [sp, #4]
  40f284:	9300      	str	r3, [sp, #0]
  40f286:	4a1d      	ldr	r2, [pc, #116]	; (40f2fc <_strtod_l+0x914>)
  40f288:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f28a:	ab1f      	add	r3, sp, #124	; 0x7c
  40f28c:	a91d      	add	r1, sp, #116	; 0x74
  40f28e:	f004 fc7f 	bl	413b90 <__gethex>
  40f292:	f010 0507 	ands.w	r5, r0, #7
  40f296:	4604      	mov	r4, r0
  40f298:	f43f ac3c 	beq.w	40eb14 <_strtod_l+0x12c>
  40f29c:	2d06      	cmp	r5, #6
  40f29e:	f040 813c 	bne.w	40f51a <_strtod_l+0xb32>
  40f2a2:	f109 0301 	add.w	r3, r9, #1
  40f2a6:	931d      	str	r3, [sp, #116]	; 0x74
  40f2a8:	2300      	movs	r3, #0
  40f2aa:	f04f 0a00 	mov.w	sl, #0
  40f2ae:	f04f 0b00 	mov.w	fp, #0
  40f2b2:	9308      	str	r3, [sp, #32]
  40f2b4:	e432      	b.n	40eb1c <_strtod_l+0x134>
  40f2b6:	f8db 1000 	ldr.w	r1, [fp]
  40f2ba:	4652      	mov	r2, sl
  40f2bc:	4648      	mov	r0, r9
  40f2be:	f7ff faed 	bl	40e89c <strncmp>
  40f2c2:	4604      	mov	r4, r0
  40f2c4:	2800      	cmp	r0, #0
  40f2c6:	f43f aeaf 	beq.w	40f028 <_strtod_l+0x640>
  40f2ca:	f04f 0b00 	mov.w	fp, #0
  40f2ce:	46d8      	mov	r8, fp
  40f2d0:	465d      	mov	r5, fp
  40f2d2:	465b      	mov	r3, fp
  40f2d4:	4659      	mov	r1, fp
  40f2d6:	465c      	mov	r4, fp
  40f2d8:	46da      	mov	sl, fp
  40f2da:	e40d      	b.n	40eaf8 <_strtod_l+0x110>
  40f2dc:	3fe00000 	.word	0x3fe00000
  40f2e0:	fffffbe2 	.word	0xfffffbe2
  40f2e4:	3ff00000 	.word	0x3ff00000
  40f2e8:	7ca00000 	.word	0x7ca00000
  40f2ec:	7fefffff 	.word	0x7fefffff
  40f2f0:	bff00000 	.word	0xbff00000
  40f2f4:	00417484 	.word	0x00417484
  40f2f8:	fff80000 	.word	0xfff80000
  40f2fc:	00417488 	.word	0x00417488
  40f300:	004177a0 	.word	0x004177a0
  40f304:	f1a2 7354 	sub.w	r3, r2, #55574528	; 0x3500000
  40f308:	9305      	str	r3, [sp, #20]
  40f30a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f30e:	f005 fb05 	bl	41491c <__ulp>
  40f312:	4602      	mov	r2, r0
  40f314:	460b      	mov	r3, r1
  40f316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40f31a:	f006 fa4f 	bl	4157bc <__aeabi_dmul>
  40f31e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40f322:	f7fc ffd3 	bl	40c2cc <__adddf3>
  40f326:	4baa      	ldr	r3, [pc, #680]	; (40f5d0 <_strtod_l+0xbe8>)
  40f328:	400e      	ands	r6, r1
  40f32a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40f32e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
  40f332:	429e      	cmp	r6, r3
  40f334:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  40f338:	f240 80ce 	bls.w	40f4d8 <_strtod_l+0xaf0>
  40f33c:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
  40f340:	429a      	cmp	r2, r3
  40f342:	d010      	beq.n	40f366 <_strtod_l+0x97e>
  40f344:	4ba3      	ldr	r3, [pc, #652]	; (40f5d4 <_strtod_l+0xbec>)
  40f346:	9305      	str	r3, [sp, #20]
  40f348:	f04f 33ff 	mov.w	r3, #4294967295
  40f34c:	9304      	str	r3, [sp, #16]
  40f34e:	e630      	b.n	40efb2 <_strtod_l+0x5ca>
  40f350:	2200      	movs	r2, #0
  40f352:	4ba1      	ldr	r3, [pc, #644]	; (40f5d8 <_strtod_l+0xbf0>)
  40f354:	9204      	str	r2, [sp, #16]
  40f356:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40f358:	9305      	str	r3, [sp, #20]
  40f35a:	2322      	movs	r3, #34	; 0x22
  40f35c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40f360:	6013      	str	r3, [r2, #0]
  40f362:	f7ff bbdb 	b.w	40eb1c <_strtod_l+0x134>
  40f366:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40f368:	3301      	adds	r3, #1
  40f36a:	d1eb      	bne.n	40f344 <_strtod_l+0x95c>
  40f36c:	465e      	mov	r6, fp
  40f36e:	981e      	ldr	r0, [sp, #120]	; 0x78
  40f370:	4b99      	ldr	r3, [pc, #612]	; (40f5d8 <_strtod_l+0xbf0>)
  40f372:	9305      	str	r3, [sp, #20]
  40f374:	2200      	movs	r2, #0
  40f376:	9204      	str	r2, [sp, #16]
  40f378:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40f37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40f37e:	2322      	movs	r3, #34	; 0x22
  40f380:	6013      	str	r3, [r2, #0]
  40f382:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f384:	4601      	mov	r1, r0
  40f386:	4620      	mov	r0, r4
  40f388:	f005 f802 	bl	414390 <_Bfree>
  40f38c:	4649      	mov	r1, r9
  40f38e:	4620      	mov	r0, r4
  40f390:	f004 fffe 	bl	414390 <_Bfree>
  40f394:	4641      	mov	r1, r8
  40f396:	4620      	mov	r0, r4
  40f398:	f004 fffa 	bl	414390 <_Bfree>
  40f39c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40f39e:	4620      	mov	r0, r4
  40f3a0:	f004 fff6 	bl	414390 <_Bfree>
  40f3a4:	4631      	mov	r1, r6
  40f3a6:	4620      	mov	r0, r4
  40f3a8:	f004 fff2 	bl	414390 <_Bfree>
  40f3ac:	f7ff bbb6 	b.w	40eb1c <_strtod_l+0x134>
  40f3b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40f3b2:	4639      	mov	r1, r7
  40f3b4:	4628      	mov	r0, r5
  40f3b6:	f7fd f9c3 	bl	40c740 <__aeabi_d2iz>
  40f3ba:	f7fd f8d3 	bl	40c564 <__aeabi_i2d>
  40f3be:	460b      	mov	r3, r1
  40f3c0:	4602      	mov	r2, r0
  40f3c2:	4639      	mov	r1, r7
  40f3c4:	4628      	mov	r0, r5
  40f3c6:	f7fc ff7f 	bl	40c2c8 <__aeabi_dsub>
  40f3ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f3cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40f3d0:	b98b      	cbnz	r3, 40f3f6 <_strtod_l+0xa0e>
  40f3d2:	9b04      	ldr	r3, [sp, #16]
  40f3d4:	b97b      	cbnz	r3, 40f3f6 <_strtod_l+0xa0e>
  40f3d6:	f3c6 0613 	ubfx	r6, r6, #0, #20
  40f3da:	b966      	cbnz	r6, 40f3f6 <_strtod_l+0xa0e>
  40f3dc:	a376      	add	r3, pc, #472	; (adr r3, 40f5b8 <_strtod_l+0xbd0>)
  40f3de:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f3e2:	f7fd f985 	bl	40c6f0 <__aeabi_dcmplt>
  40f3e6:	2800      	cmp	r0, #0
  40f3e8:	f43f ade3 	beq.w	40efb2 <_strtod_l+0x5ca>
  40f3ec:	465e      	mov	r6, fp
  40f3ee:	981e      	ldr	r0, [sp, #120]	; 0x78
  40f3f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40f3f4:	e7c5      	b.n	40f382 <_strtod_l+0x99a>
  40f3f6:	a372      	add	r3, pc, #456	; (adr r3, 40f5c0 <_strtod_l+0xbd8>)
  40f3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f3fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40f400:	f7fd f976 	bl	40c6f0 <__aeabi_dcmplt>
  40f404:	2800      	cmp	r0, #0
  40f406:	d1f1      	bne.n	40f3ec <_strtod_l+0xa04>
  40f408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40f40c:	a36e      	add	r3, pc, #440	; (adr r3, 40f5c8 <_strtod_l+0xbe0>)
  40f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f412:	f7fd f98b 	bl	40c72c <__aeabi_dcmpgt>
  40f416:	2800      	cmp	r0, #0
  40f418:	f43f adcb 	beq.w	40efb2 <_strtod_l+0x5ca>
  40f41c:	e7e6      	b.n	40f3ec <_strtod_l+0xa04>
  40f41e:	f43f ac95 	beq.w	40ed4c <_strtod_l+0x364>
  40f422:	f1ca 0600 	rsb	r6, sl, #0
  40f426:	f016 020f 	ands.w	r2, r6, #15
  40f42a:	d00a      	beq.n	40f442 <_strtod_l+0xa5a>
  40f42c:	4b6b      	ldr	r3, [pc, #428]	; (40f5dc <_strtod_l+0xbf4>)
  40f42e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f436:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f43a:	f006 fae9 	bl	415a10 <__aeabi_ddiv>
  40f43e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40f442:	1136      	asrs	r6, r6, #4
  40f444:	f43f ac82 	beq.w	40ed4c <_strtod_l+0x364>
  40f448:	2e1f      	cmp	r6, #31
  40f44a:	dc28      	bgt.n	40f49e <_strtod_l+0xab6>
  40f44c:	f016 0310 	ands.w	r3, r6, #16
  40f450:	930e      	str	r3, [sp, #56]	; 0x38
  40f452:	f000 818b 	beq.w	40f76c <_strtod_l+0xd84>
  40f456:	236a      	movs	r3, #106	; 0x6a
  40f458:	2e00      	cmp	r6, #0
  40f45a:	930e      	str	r3, [sp, #56]	; 0x38
  40f45c:	f340 81bc 	ble.w	40f7d8 <_strtod_l+0xdf0>
  40f460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f464:	4f5e      	ldr	r7, [pc, #376]	; (40f5e0 <_strtod_l+0xbf8>)
  40f466:	2300      	movs	r3, #0
  40f468:	07f2      	lsls	r2, r6, #31
  40f46a:	d504      	bpl.n	40f476 <_strtod_l+0xa8e>
  40f46c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40f470:	f006 f9a4 	bl	4157bc <__aeabi_dmul>
  40f474:	2301      	movs	r3, #1
  40f476:	1076      	asrs	r6, r6, #1
  40f478:	f107 0708 	add.w	r7, r7, #8
  40f47c:	d1f4      	bne.n	40f468 <_strtod_l+0xa80>
  40f47e:	2b00      	cmp	r3, #0
  40f480:	f040 81f7 	bne.w	40f872 <_strtod_l+0xe8a>
  40f484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f486:	2b00      	cmp	r3, #0
  40f488:	f040 81a6 	bne.w	40f7d8 <_strtod_l+0xdf0>
  40f48c:	2200      	movs	r2, #0
  40f48e:	2300      	movs	r3, #0
  40f490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f494:	f7fd f922 	bl	40c6dc <__aeabi_dcmpeq>
  40f498:	2800      	cmp	r0, #0
  40f49a:	f43f ac59 	beq.w	40ed50 <_strtod_l+0x368>
  40f49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40f4a0:	2322      	movs	r3, #34	; 0x22
  40f4a2:	6013      	str	r3, [r2, #0]
  40f4a4:	f04f 0a00 	mov.w	sl, #0
  40f4a8:	f04f 0b00 	mov.w	fp, #0
  40f4ac:	f7ff bb36 	b.w	40eb1c <_strtod_l+0x134>
  40f4b0:	981d      	ldr	r0, [sp, #116]	; 0x74
  40f4b2:	3402      	adds	r4, #2
  40f4b4:	2f08      	cmp	r7, #8
  40f4b6:	f340 80a1 	ble.w	40f5fc <_strtod_l+0xc14>
  40f4ba:	2c10      	cmp	r4, #16
  40f4bc:	bfdc      	itt	le
  40f4be:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
  40f4c2:	eb02 0848 	addle.w	r8, r2, r8, lsl #1
  40f4c6:	2300      	movs	r3, #0
  40f4c8:	1c42      	adds	r2, r0, #1
  40f4ca:	921d      	str	r2, [sp, #116]	; 0x74
  40f4cc:	7847      	ldrb	r7, [r0, #1]
  40f4ce:	f7ff bb37 	b.w	40eb40 <_strtod_l+0x158>
  40f4d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
  40f4d6:	e410      	b.n	40ecfa <_strtod_l+0x312>
  40f4d8:	9b05      	ldr	r3, [sp, #20]
  40f4da:	f103 7654 	add.w	r6, r3, #55574528	; 0x3500000
  40f4de:	9605      	str	r6, [sp, #20]
  40f4e0:	e560      	b.n	40efa4 <_strtod_l+0x5bc>
  40f4e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40f4e4:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
  40f4e8:	429e      	cmp	r6, r3
  40f4ea:	f73f ac15 	bgt.w	40ed18 <_strtod_l+0x330>
  40f4ee:	4d3b      	ldr	r5, [pc, #236]	; (40f5dc <_strtod_l+0xbf4>)
  40f4f0:	f1c4 040f 	rsb	r4, r4, #15
  40f4f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
  40f4f8:	1b34      	subs	r4, r6, r4
  40f4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40f4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
  40f502:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
  40f506:	f006 f959 	bl	4157bc <__aeabi_dmul>
  40f50a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40f50e:	f006 f955 	bl	4157bc <__aeabi_dmul>
  40f512:	4682      	mov	sl, r0
  40f514:	468b      	mov	fp, r1
  40f516:	f7ff bb01 	b.w	40eb1c <_strtod_l+0x134>
  40f51a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40f51c:	b13a      	cbz	r2, 40f52e <_strtod_l+0xb46>
  40f51e:	2135      	movs	r1, #53	; 0x35
  40f520:	a820      	add	r0, sp, #128	; 0x80
  40f522:	f005 fb0d 	bl	414b40 <__copybits>
  40f526:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f528:	991e      	ldr	r1, [sp, #120]	; 0x78
  40f52a:	f004 ff31 	bl	414390 <_Bfree>
  40f52e:	3d01      	subs	r5, #1
  40f530:	2d04      	cmp	r5, #4
  40f532:	d806      	bhi.n	40f542 <_strtod_l+0xb5a>
  40f534:	e8df f005 	tbb	[pc, r5]
  40f538:	13030e1a 	.word	0x13030e1a
  40f53c:	1a          	.byte	0x1a
  40f53d:	00          	.byte	0x00
  40f53e:	4b26      	ldr	r3, [pc, #152]	; (40f5d8 <_strtod_l+0xbf0>)
  40f540:	9305      	str	r3, [sp, #20]
  40f542:	0721      	lsls	r1, r4, #28
  40f544:	f57f ab8e 	bpl.w	40ec64 <_strtod_l+0x27c>
  40f548:	9b05      	ldr	r3, [sp, #20]
  40f54a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40f54e:	9305      	str	r3, [sp, #20]
  40f550:	f7ff bb88 	b.w	40ec64 <_strtod_l+0x27c>
  40f554:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40f556:	9304      	str	r3, [sp, #16]
  40f558:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40f55a:	9305      	str	r3, [sp, #20]
  40f55c:	e7f1      	b.n	40f542 <_strtod_l+0xb5a>
  40f55e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40f562:	9305      	str	r3, [sp, #20]
  40f564:	f04f 33ff 	mov.w	r3, #4294967295
  40f568:	9304      	str	r3, [sp, #16]
  40f56a:	e7ea      	b.n	40f542 <_strtod_l+0xb5a>
  40f56c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40f56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40f570:	9920      	ldr	r1, [sp, #128]	; 0x80
  40f572:	9104      	str	r1, [sp, #16]
  40f574:	f202 4233 	addw	r2, r2, #1075	; 0x433
  40f578:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40f57c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  40f580:	9305      	str	r3, [sp, #20]
  40f582:	e7de      	b.n	40f542 <_strtod_l+0xb5a>
  40f584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40f586:	463b      	mov	r3, r7
  40f588:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  40f58c:	e4ec      	b.n	40ef68 <_strtod_l+0x580>
  40f58e:	4f15      	ldr	r7, [pc, #84]	; (40f5e4 <_strtod_l+0xbfc>)
  40f590:	9013      	str	r0, [sp, #76]	; 0x4c
  40f592:	e4e0      	b.n	40ef56 <_strtod_l+0x56e>
  40f594:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  40f598:	9211      	str	r2, [sp, #68]	; 0x44
  40f59a:	2a00      	cmp	r2, #0
  40f59c:	f47f ae4f 	bne.w	40f23e <_strtod_l+0x856>
  40f5a0:	465e      	mov	r6, fp
  40f5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40f5a4:	981e      	ldr	r0, [sp, #120]	; 0x78
  40f5a6:	2322      	movs	r3, #34	; 0x22
  40f5a8:	6013      	str	r3, [r2, #0]
  40f5aa:	f04f 0a00 	mov.w	sl, #0
  40f5ae:	f04f 0b00 	mov.w	fp, #0
  40f5b2:	e6e6      	b.n	40f382 <_strtod_l+0x99a>
  40f5b4:	f3af 8000 	nop.w
  40f5b8:	94a03595 	.word	0x94a03595
  40f5bc:	3fcfffff 	.word	0x3fcfffff
  40f5c0:	94a03595 	.word	0x94a03595
  40f5c4:	3fdfffff 	.word	0x3fdfffff
  40f5c8:	35afe535 	.word	0x35afe535
  40f5cc:	3fe00000 	.word	0x3fe00000
  40f5d0:	7c9fffff 	.word	0x7c9fffff
  40f5d4:	7fefffff 	.word	0x7fefffff
  40f5d8:	7ff00000 	.word	0x7ff00000
  40f5dc:	004177c8 	.word	0x004177c8
  40f5e0:	004174b0 	.word	0x004174b0
  40f5e4:	3ff00000 	.word	0x3ff00000
  40f5e8:	981d      	ldr	r0, [sp, #116]	; 0x74
  40f5ea:	f04f 0b00 	mov.w	fp, #0
  40f5ee:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
  40f5f2:	1c59      	adds	r1, r3, #1
  40f5f4:	4681      	mov	r9, r0
  40f5f6:	465d      	mov	r5, fp
  40f5f8:	46d8      	mov	r8, fp
  40f5fa:	2401      	movs	r4, #1
  40f5fc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40f600:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
  40f604:	2300      	movs	r3, #0
  40f606:	e75f      	b.n	40f4c8 <_strtod_l+0xae0>
  40f608:	990a      	ldr	r1, [sp, #40]	; 0x28
  40f60a:	f111 0f16 	cmn.w	r1, #22
  40f60e:	f6ff ab83 	blt.w	40ed18 <_strtod_l+0x330>
  40f612:	4a9b      	ldr	r2, [pc, #620]	; (40f880 <_strtod_l+0xe98>)
  40f614:	eba2 02c1 	sub.w	r2, r2, r1, lsl #3
  40f618:	e9d2 2300 	ldrd	r2, r3, [r2]
  40f61c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f620:	f006 f9f6 	bl	415a10 <__aeabi_ddiv>
  40f624:	4682      	mov	sl, r0
  40f626:	468b      	mov	fp, r1
  40f628:	f7ff ba78 	b.w	40eb1c <_strtod_l+0x134>
  40f62c:	465e      	mov	r6, fp
  40f62e:	e69f      	b.n	40f370 <_strtod_l+0x988>
  40f630:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f632:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40f634:	465e      	mov	r6, fp
  40f636:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
  40f63a:	2b00      	cmp	r3, #0
  40f63c:	f000 8083 	beq.w	40f746 <_strtod_l+0xd5e>
  40f640:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40f644:	4b8f      	ldr	r3, [pc, #572]	; (40f884 <_strtod_l+0xe9c>)
  40f646:	f3c5 0113 	ubfx	r1, r5, #0, #20
  40f64a:	4299      	cmp	r1, r3
  40f64c:	462a      	mov	r2, r5
  40f64e:	f000 8091 	beq.w	40f774 <_strtod_l+0xd8c>
  40f652:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f654:	2b00      	cmp	r3, #0
  40f656:	f000 8082 	beq.w	40f75e <_strtod_l+0xd76>
  40f65a:	9a05      	ldr	r2, [sp, #20]
  40f65c:	4213      	tst	r3, r2
  40f65e:	d010      	beq.n	40f682 <_strtod_l+0xc9a>
  40f660:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f668:	2b00      	cmp	r3, #0
  40f66a:	f000 80a3 	beq.w	40f7b4 <_strtod_l+0xdcc>
  40f66e:	f7ff f999 	bl	40e9a4 <sulp>
  40f672:	4602      	mov	r2, r0
  40f674:	460b      	mov	r3, r1
  40f676:	4650      	mov	r0, sl
  40f678:	4659      	mov	r1, fp
  40f67a:	f7fc fe27 	bl	40c2cc <__adddf3>
  40f67e:	4682      	mov	sl, r0
  40f680:	468b      	mov	fp, r1
  40f682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f684:	b1bb      	cbz	r3, 40f6b6 <_strtod_l+0xcce>
  40f686:	4b80      	ldr	r3, [pc, #512]	; (40f888 <_strtod_l+0xea0>)
  40f688:	9319      	str	r3, [sp, #100]	; 0x64
  40f68a:	2300      	movs	r3, #0
  40f68c:	9318      	str	r3, [sp, #96]	; 0x60
  40f68e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40f692:	4650      	mov	r0, sl
  40f694:	4659      	mov	r1, fp
  40f696:	f006 f891 	bl	4157bc <__aeabi_dmul>
  40f69a:	4603      	mov	r3, r0
  40f69c:	460c      	mov	r4, r1
  40f69e:	4682      	mov	sl, r0
  40f6a0:	468b      	mov	fp, r1
  40f6a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
  40f6a6:	b931      	cbnz	r1, 40f6b6 <_strtod_l+0xcce>
  40f6a8:	9b04      	ldr	r3, [sp, #16]
  40f6aa:	b923      	cbnz	r3, 40f6b6 <_strtod_l+0xcce>
  40f6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40f6ae:	981e      	ldr	r0, [sp, #120]	; 0x78
  40f6b0:	2322      	movs	r3, #34	; 0x22
  40f6b2:	6013      	str	r3, [r2, #0]
  40f6b4:	e665      	b.n	40f382 <_strtod_l+0x99a>
  40f6b6:	981e      	ldr	r0, [sp, #120]	; 0x78
  40f6b8:	e663      	b.n	40f382 <_strtod_l+0x99a>
  40f6ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40f6bc:	465d      	mov	r5, fp
  40f6be:	465e      	mov	r6, fp
  40f6c0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
  40f6c4:	2a00      	cmp	r2, #0
  40f6c6:	d1dc      	bne.n	40f682 <_strtod_l+0xc9a>
  40f6c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f6cc:	2800      	cmp	r0, #0
  40f6ce:	d1d8      	bne.n	40f682 <_strtod_l+0xc9a>
  40f6d0:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40f6d4:	460c      	mov	r4, r1
  40f6d6:	2b00      	cmp	r3, #0
  40f6d8:	d1d3      	bne.n	40f682 <_strtod_l+0xc9a>
  40f6da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40f6de:	0d1b      	lsrs	r3, r3, #20
  40f6e0:	051b      	lsls	r3, r3, #20
  40f6e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40f6e6:	d9cc      	bls.n	40f682 <_strtod_l+0xc9a>
  40f6e8:	696b      	ldr	r3, [r5, #20]
  40f6ea:	b913      	cbnz	r3, 40f6f2 <_strtod_l+0xd0a>
  40f6ec:	692b      	ldr	r3, [r5, #16]
  40f6ee:	2b01      	cmp	r3, #1
  40f6f0:	ddc7      	ble.n	40f682 <_strtod_l+0xc9a>
  40f6f2:	4631      	mov	r1, r6
  40f6f4:	2201      	movs	r2, #1
  40f6f6:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f6f8:	f005 f81e 	bl	414738 <__lshift>
  40f6fc:	4641      	mov	r1, r8
  40f6fe:	4606      	mov	r6, r0
  40f700:	f005 f86c 	bl	4147dc <__mcmp>
  40f704:	2800      	cmp	r0, #0
  40f706:	ddbc      	ble.n	40f682 <_strtod_l+0xc9a>
  40f708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f70a:	2b00      	cmp	r3, #0
  40f70c:	d17b      	bne.n	40f806 <_strtod_l+0xe1e>
  40f70e:	4b5f      	ldr	r3, [pc, #380]	; (40f88c <_strtod_l+0xea4>)
  40f710:	4023      	ands	r3, r4
  40f712:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  40f716:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  40f71a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
  40f71e:	9305      	str	r3, [sp, #20]
  40f720:	f04f 33ff 	mov.w	r3, #4294967295
  40f724:	9304      	str	r3, [sp, #16]
  40f726:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40f72a:	e7aa      	b.n	40f682 <_strtod_l+0xc9a>
  40f72c:	4b58      	ldr	r3, [pc, #352]	; (40f890 <_strtod_l+0xea8>)
  40f72e:	4f59      	ldr	r7, [pc, #356]	; (40f894 <_strtod_l+0xeac>)
  40f730:	2200      	movs	r2, #0
  40f732:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  40f736:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f738:	9313      	str	r3, [sp, #76]	; 0x4c
  40f73a:	e4cb      	b.n	40f0d4 <_strtod_l+0x6ec>
  40f73c:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
  40f740:	9305      	str	r3, [sp, #20]
  40f742:	f7ff bb03 	b.w	40ed4c <_strtod_l+0x364>
  40f746:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  40f74a:	f3c2 0313 	ubfx	r3, r2, #0, #20
  40f74e:	4614      	mov	r4, r2
  40f750:	2b00      	cmp	r3, #0
  40f752:	f47f af7e 	bne.w	40f652 <_strtod_l+0xc6a>
  40f756:	2900      	cmp	r1, #0
  40f758:	f47f af7b 	bne.w	40f652 <_strtod_l+0xc6a>
  40f75c:	e7d4      	b.n	40f708 <_strtod_l+0xd20>
  40f75e:	9b04      	ldr	r3, [sp, #16]
  40f760:	421f      	tst	r7, r3
  40f762:	d08e      	beq.n	40f682 <_strtod_l+0xc9a>
  40f764:	e77c      	b.n	40f660 <_strtod_l+0xc78>
  40f766:	f04f 0800 	mov.w	r8, #0
  40f76a:	e53f      	b.n	40f1ec <_strtod_l+0x804>
  40f76c:	2e00      	cmp	r6, #0
  40f76e:	f73f ae77 	bgt.w	40f460 <_strtod_l+0xa78>
  40f772:	e68b      	b.n	40f48c <_strtod_l+0xaa4>
  40f774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f776:	9904      	ldr	r1, [sp, #16]
  40f778:	2b00      	cmp	r3, #0
  40f77a:	d041      	beq.n	40f800 <_strtod_l+0xe18>
  40f77c:	4b43      	ldr	r3, [pc, #268]	; (40f88c <_strtod_l+0xea4>)
  40f77e:	402b      	ands	r3, r5
  40f780:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  40f784:	d83c      	bhi.n	40f800 <_strtod_l+0xe18>
  40f786:	0d1b      	lsrs	r3, r3, #20
  40f788:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40f78c:	f04f 30ff 	mov.w	r0, #4294967295
  40f790:	fa00 f303 	lsl.w	r3, r0, r3
  40f794:	428b      	cmp	r3, r1
  40f796:	f47f af5c 	bne.w	40f652 <_strtod_l+0xc6a>
  40f79a:	493f      	ldr	r1, [pc, #252]	; (40f898 <_strtod_l+0xeb0>)
  40f79c:	428a      	cmp	r2, r1
  40f79e:	d056      	beq.n	40f84e <_strtod_l+0xe66>
  40f7a0:	4b3a      	ldr	r3, [pc, #232]	; (40f88c <_strtod_l+0xea4>)
  40f7a2:	4013      	ands	r3, r2
  40f7a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  40f7a8:	9305      	str	r3, [sp, #20]
  40f7aa:	2300      	movs	r3, #0
  40f7ac:	9304      	str	r3, [sp, #16]
  40f7ae:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40f7b2:	e766      	b.n	40f682 <_strtod_l+0xc9a>
  40f7b4:	f7ff f8f6 	bl	40e9a4 <sulp>
  40f7b8:	4602      	mov	r2, r0
  40f7ba:	460b      	mov	r3, r1
  40f7bc:	4650      	mov	r0, sl
  40f7be:	4659      	mov	r1, fp
  40f7c0:	f7fc fd82 	bl	40c2c8 <__aeabi_dsub>
  40f7c4:	2200      	movs	r2, #0
  40f7c6:	2300      	movs	r3, #0
  40f7c8:	4682      	mov	sl, r0
  40f7ca:	468b      	mov	fp, r1
  40f7cc:	f7fc ff86 	bl	40c6dc <__aeabi_dcmpeq>
  40f7d0:	2800      	cmp	r0, #0
  40f7d2:	f47f aee6 	bne.w	40f5a2 <_strtod_l+0xbba>
  40f7d6:	e754      	b.n	40f682 <_strtod_l+0xc9a>
  40f7d8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  40f7dc:	f3c2 530a 	ubfx	r3, r2, #20, #11
  40f7e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40f7e4:	2b00      	cmp	r3, #0
  40f7e6:	4611      	mov	r1, r2
  40f7e8:	f77f ae50 	ble.w	40f48c <_strtod_l+0xaa4>
  40f7ec:	2b1f      	cmp	r3, #31
  40f7ee:	dd26      	ble.n	40f83e <_strtod_l+0xe56>
  40f7f0:	2200      	movs	r2, #0
  40f7f2:	2b34      	cmp	r3, #52	; 0x34
  40f7f4:	9204      	str	r2, [sp, #16]
  40f7f6:	dd34      	ble.n	40f862 <_strtod_l+0xe7a>
  40f7f8:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
  40f7fc:	9305      	str	r3, [sp, #20]
  40f7fe:	e645      	b.n	40f48c <_strtod_l+0xaa4>
  40f800:	f04f 33ff 	mov.w	r3, #4294967295
  40f804:	e7c6      	b.n	40f794 <_strtod_l+0xdac>
  40f806:	4b21      	ldr	r3, [pc, #132]	; (40f88c <_strtod_l+0xea4>)
  40f808:	4023      	ands	r3, r4
  40f80a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40f80e:	dc80      	bgt.n	40f712 <_strtod_l+0xd2a>
  40f810:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  40f814:	f73f af37 	bgt.w	40f686 <_strtod_l+0xc9e>
  40f818:	e6c3      	b.n	40f5a2 <_strtod_l+0xbba>
  40f81a:	a81d      	add	r0, sp, #116	; 0x74
  40f81c:	aa20      	add	r2, sp, #128	; 0x80
  40f81e:	491f      	ldr	r1, [pc, #124]	; (40f89c <_strtod_l+0xeb4>)
  40f820:	f004 fc5a 	bl	4140d8 <__hexnan>
  40f824:	2805      	cmp	r0, #5
  40f826:	f47f ad1e 	bne.w	40f266 <_strtod_l+0x87e>
  40f82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40f82c:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  40f830:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
  40f834:	9305      	str	r3, [sp, #20]
  40f836:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40f838:	9304      	str	r3, [sp, #16]
  40f83a:	f7ff ba13 	b.w	40ec64 <_strtod_l+0x27c>
  40f83e:	f04f 32ff 	mov.w	r2, #4294967295
  40f842:	fa02 f303 	lsl.w	r3, r2, r3
  40f846:	9a04      	ldr	r2, [sp, #16]
  40f848:	401a      	ands	r2, r3
  40f84a:	9204      	str	r2, [sp, #16]
  40f84c:	e61e      	b.n	40f48c <_strtod_l+0xaa4>
  40f84e:	3301      	adds	r3, #1
  40f850:	d1a6      	bne.n	40f7a0 <_strtod_l+0xdb8>
  40f852:	e58c      	b.n	40f36e <_strtod_l+0x986>
  40f854:	4627      	mov	r7, r4
  40f856:	981d      	ldr	r0, [sp, #116]	; 0x74
  40f858:	3401      	adds	r4, #1
  40f85a:	e62b      	b.n	40f4b4 <_strtod_l+0xacc>
  40f85c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40f860:	e4c4      	b.n	40f1ec <_strtod_l+0x804>
  40f862:	3b20      	subs	r3, #32
  40f864:	f04f 32ff 	mov.w	r2, #4294967295
  40f868:	fa02 f303 	lsl.w	r3, r2, r3
  40f86c:	400b      	ands	r3, r1
  40f86e:	9305      	str	r3, [sp, #20]
  40f870:	e60c      	b.n	40f48c <_strtod_l+0xaa4>
  40f872:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40f876:	e605      	b.n	40f484 <_strtod_l+0xa9c>
  40f878:	4603      	mov	r3, r0
  40f87a:	981d      	ldr	r0, [sp, #116]	; 0x74
  40f87c:	e624      	b.n	40f4c8 <_strtod_l+0xae0>
  40f87e:	bf00      	nop
  40f880:	004177c8 	.word	0x004177c8
  40f884:	000fffff 	.word	0x000fffff
  40f888:	39500000 	.word	0x39500000
  40f88c:	7ff00000 	.word	0x7ff00000
  40f890:	bfe00000 	.word	0xbfe00000
  40f894:	3fe00000 	.word	0x3fe00000
  40f898:	7fefffff 	.word	0x7fefffff
  40f89c:	0041749c 	.word	0x0041749c

0040f8a0 <_strtod_r>:
  40f8a0:	4b05      	ldr	r3, [pc, #20]	; (40f8b8 <_strtod_r+0x18>)
  40f8a2:	681b      	ldr	r3, [r3, #0]
  40f8a4:	b410      	push	{r4}
  40f8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40f8a8:	4c04      	ldr	r4, [pc, #16]	; (40f8bc <_strtod_r+0x1c>)
  40f8aa:	2b00      	cmp	r3, #0
  40f8ac:	bf08      	it	eq
  40f8ae:	4623      	moveq	r3, r4
  40f8b0:	bc10      	pop	{r4}
  40f8b2:	f7ff b899 	b.w	40e9e8 <_strtod_l>
  40f8b6:	bf00      	nop
  40f8b8:	20000298 	.word	0x20000298
  40f8bc:	200006c8 	.word	0x200006c8

0040f8c0 <strtod>:
  40f8c0:	4b06      	ldr	r3, [pc, #24]	; (40f8dc <strtod+0x1c>)
  40f8c2:	b430      	push	{r4, r5}
  40f8c4:	681c      	ldr	r4, [r3, #0]
  40f8c6:	4d06      	ldr	r5, [pc, #24]	; (40f8e0 <strtod+0x20>)
  40f8c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40f8ca:	460a      	mov	r2, r1
  40f8cc:	2b00      	cmp	r3, #0
  40f8ce:	bf08      	it	eq
  40f8d0:	462b      	moveq	r3, r5
  40f8d2:	4601      	mov	r1, r0
  40f8d4:	4620      	mov	r0, r4
  40f8d6:	bc30      	pop	{r4, r5}
  40f8d8:	f7ff b886 	b.w	40e9e8 <_strtod_l>
  40f8dc:	20000298 	.word	0x20000298
  40f8e0:	200006c8 	.word	0x200006c8

0040f8e4 <_svfprintf_r>:
  40f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f8e8:	b0c3      	sub	sp, #268	; 0x10c
  40f8ea:	460c      	mov	r4, r1
  40f8ec:	910b      	str	r1, [sp, #44]	; 0x2c
  40f8ee:	4692      	mov	sl, r2
  40f8f0:	930f      	str	r3, [sp, #60]	; 0x3c
  40f8f2:	900c      	str	r0, [sp, #48]	; 0x30
  40f8f4:	f004 fcd4 	bl	4142a0 <_localeconv_r>
  40f8f8:	6803      	ldr	r3, [r0, #0]
  40f8fa:	931a      	str	r3, [sp, #104]	; 0x68
  40f8fc:	4618      	mov	r0, r3
  40f8fe:	f7fe ff5f 	bl	40e7c0 <strlen>
  40f902:	89a3      	ldrh	r3, [r4, #12]
  40f904:	9019      	str	r0, [sp, #100]	; 0x64
  40f906:	0619      	lsls	r1, r3, #24
  40f908:	d503      	bpl.n	40f912 <_svfprintf_r+0x2e>
  40f90a:	6923      	ldr	r3, [r4, #16]
  40f90c:	2b00      	cmp	r3, #0
  40f90e:	f001 8003 	beq.w	410918 <_svfprintf_r+0x1034>
  40f912:	2300      	movs	r3, #0
  40f914:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40f918:	9313      	str	r3, [sp, #76]	; 0x4c
  40f91a:	9315      	str	r3, [sp, #84]	; 0x54
  40f91c:	9314      	str	r3, [sp, #80]	; 0x50
  40f91e:	9327      	str	r3, [sp, #156]	; 0x9c
  40f920:	9326      	str	r3, [sp, #152]	; 0x98
  40f922:	9318      	str	r3, [sp, #96]	; 0x60
  40f924:	931b      	str	r3, [sp, #108]	; 0x6c
  40f926:	9309      	str	r3, [sp, #36]	; 0x24
  40f928:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40f92c:	46c8      	mov	r8, r9
  40f92e:	9316      	str	r3, [sp, #88]	; 0x58
  40f930:	9317      	str	r3, [sp, #92]	; 0x5c
  40f932:	f89a 3000 	ldrb.w	r3, [sl]
  40f936:	4654      	mov	r4, sl
  40f938:	b1e3      	cbz	r3, 40f974 <_svfprintf_r+0x90>
  40f93a:	2b25      	cmp	r3, #37	; 0x25
  40f93c:	d102      	bne.n	40f944 <_svfprintf_r+0x60>
  40f93e:	e019      	b.n	40f974 <_svfprintf_r+0x90>
  40f940:	2b25      	cmp	r3, #37	; 0x25
  40f942:	d003      	beq.n	40f94c <_svfprintf_r+0x68>
  40f944:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40f948:	2b00      	cmp	r3, #0
  40f94a:	d1f9      	bne.n	40f940 <_svfprintf_r+0x5c>
  40f94c:	eba4 050a 	sub.w	r5, r4, sl
  40f950:	b185      	cbz	r5, 40f974 <_svfprintf_r+0x90>
  40f952:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40f954:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40f956:	f8c8 a000 	str.w	sl, [r8]
  40f95a:	3301      	adds	r3, #1
  40f95c:	442a      	add	r2, r5
  40f95e:	2b07      	cmp	r3, #7
  40f960:	f8c8 5004 	str.w	r5, [r8, #4]
  40f964:	9227      	str	r2, [sp, #156]	; 0x9c
  40f966:	9326      	str	r3, [sp, #152]	; 0x98
  40f968:	dc7f      	bgt.n	40fa6a <_svfprintf_r+0x186>
  40f96a:	f108 0808 	add.w	r8, r8, #8
  40f96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40f970:	442b      	add	r3, r5
  40f972:	9309      	str	r3, [sp, #36]	; 0x24
  40f974:	7823      	ldrb	r3, [r4, #0]
  40f976:	2b00      	cmp	r3, #0
  40f978:	d07f      	beq.n	40fa7a <_svfprintf_r+0x196>
  40f97a:	2300      	movs	r3, #0
  40f97c:	461a      	mov	r2, r3
  40f97e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40f982:	4619      	mov	r1, r3
  40f984:	930d      	str	r3, [sp, #52]	; 0x34
  40f986:	469b      	mov	fp, r3
  40f988:	f04f 30ff 	mov.w	r0, #4294967295
  40f98c:	7863      	ldrb	r3, [r4, #1]
  40f98e:	900a      	str	r0, [sp, #40]	; 0x28
  40f990:	f104 0a01 	add.w	sl, r4, #1
  40f994:	f10a 0a01 	add.w	sl, sl, #1
  40f998:	f1a3 0020 	sub.w	r0, r3, #32
  40f99c:	2858      	cmp	r0, #88	; 0x58
  40f99e:	f200 83c1 	bhi.w	410124 <_svfprintf_r+0x840>
  40f9a2:	e8df f010 	tbh	[pc, r0, lsl #1]
  40f9a6:	0238      	.short	0x0238
  40f9a8:	03bf03bf 	.word	0x03bf03bf
  40f9ac:	03bf0240 	.word	0x03bf0240
  40f9b0:	03bf03bf 	.word	0x03bf03bf
  40f9b4:	03bf03bf 	.word	0x03bf03bf
  40f9b8:	024503bf 	.word	0x024503bf
  40f9bc:	03bf0203 	.word	0x03bf0203
  40f9c0:	026b005d 	.word	0x026b005d
  40f9c4:	028603bf 	.word	0x028603bf
  40f9c8:	039d039d 	.word	0x039d039d
  40f9cc:	039d039d 	.word	0x039d039d
  40f9d0:	039d039d 	.word	0x039d039d
  40f9d4:	039d039d 	.word	0x039d039d
  40f9d8:	03bf039d 	.word	0x03bf039d
  40f9dc:	03bf03bf 	.word	0x03bf03bf
  40f9e0:	03bf03bf 	.word	0x03bf03bf
  40f9e4:	03bf03bf 	.word	0x03bf03bf
  40f9e8:	03bf03bf 	.word	0x03bf03bf
  40f9ec:	033703bf 	.word	0x033703bf
  40f9f0:	03bf0357 	.word	0x03bf0357
  40f9f4:	03bf0357 	.word	0x03bf0357
  40f9f8:	03bf03bf 	.word	0x03bf03bf
  40f9fc:	039803bf 	.word	0x039803bf
  40fa00:	03bf03bf 	.word	0x03bf03bf
  40fa04:	03bf03ad 	.word	0x03bf03ad
  40fa08:	03bf03bf 	.word	0x03bf03bf
  40fa0c:	03bf03bf 	.word	0x03bf03bf
  40fa10:	03bf0259 	.word	0x03bf0259
  40fa14:	031e03bf 	.word	0x031e03bf
  40fa18:	03bf03bf 	.word	0x03bf03bf
  40fa1c:	03bf03bf 	.word	0x03bf03bf
  40fa20:	03bf03bf 	.word	0x03bf03bf
  40fa24:	03bf03bf 	.word	0x03bf03bf
  40fa28:	03bf03bf 	.word	0x03bf03bf
  40fa2c:	02db02c6 	.word	0x02db02c6
  40fa30:	03570357 	.word	0x03570357
  40fa34:	028b0357 	.word	0x028b0357
  40fa38:	03bf02db 	.word	0x03bf02db
  40fa3c:	029003bf 	.word	0x029003bf
  40fa40:	029d03bf 	.word	0x029d03bf
  40fa44:	02b401cc 	.word	0x02b401cc
  40fa48:	03bf0208 	.word	0x03bf0208
  40fa4c:	03bf01e1 	.word	0x03bf01e1
  40fa50:	03bf007e 	.word	0x03bf007e
  40fa54:	020d03bf 	.word	0x020d03bf
  40fa58:	980d      	ldr	r0, [sp, #52]	; 0x34
  40fa5a:	930f      	str	r3, [sp, #60]	; 0x3c
  40fa5c:	4240      	negs	r0, r0
  40fa5e:	900d      	str	r0, [sp, #52]	; 0x34
  40fa60:	f04b 0b04 	orr.w	fp, fp, #4
  40fa64:	f89a 3000 	ldrb.w	r3, [sl]
  40fa68:	e794      	b.n	40f994 <_svfprintf_r+0xb0>
  40fa6a:	aa25      	add	r2, sp, #148	; 0x94
  40fa6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40fa6e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40fa70:	f005 fc38 	bl	4152e4 <__ssprint_r>
  40fa74:	b940      	cbnz	r0, 40fa88 <_svfprintf_r+0x1a4>
  40fa76:	46c8      	mov	r8, r9
  40fa78:	e779      	b.n	40f96e <_svfprintf_r+0x8a>
  40fa7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40fa7c:	b123      	cbz	r3, 40fa88 <_svfprintf_r+0x1a4>
  40fa7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40fa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40fa82:	aa25      	add	r2, sp, #148	; 0x94
  40fa84:	f005 fc2e 	bl	4152e4 <__ssprint_r>
  40fa88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40fa8a:	899b      	ldrh	r3, [r3, #12]
  40fa8c:	f013 0f40 	tst.w	r3, #64	; 0x40
  40fa90:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40fa92:	bf18      	it	ne
  40fa94:	f04f 33ff 	movne.w	r3, #4294967295
  40fa98:	9309      	str	r3, [sp, #36]	; 0x24
  40fa9a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40fa9c:	b043      	add	sp, #268	; 0x10c
  40fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40faa2:	f01b 0f20 	tst.w	fp, #32
  40faa6:	9311      	str	r3, [sp, #68]	; 0x44
  40faa8:	f040 81dd 	bne.w	40fe66 <_svfprintf_r+0x582>
  40faac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40faae:	f01b 0f10 	tst.w	fp, #16
  40fab2:	4613      	mov	r3, r2
  40fab4:	f040 856e 	bne.w	410594 <_svfprintf_r+0xcb0>
  40fab8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40fabc:	f000 856a 	beq.w	410594 <_svfprintf_r+0xcb0>
  40fac0:	8814      	ldrh	r4, [r2, #0]
  40fac2:	3204      	adds	r2, #4
  40fac4:	2500      	movs	r5, #0
  40fac6:	2301      	movs	r3, #1
  40fac8:	920f      	str	r2, [sp, #60]	; 0x3c
  40faca:	2700      	movs	r7, #0
  40facc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40fad0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40fad2:	1c4a      	adds	r2, r1, #1
  40fad4:	f000 8265 	beq.w	40ffa2 <_svfprintf_r+0x6be>
  40fad8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40fadc:	9207      	str	r2, [sp, #28]
  40fade:	ea54 0205 	orrs.w	r2, r4, r5
  40fae2:	f040 8264 	bne.w	40ffae <_svfprintf_r+0x6ca>
  40fae6:	2900      	cmp	r1, #0
  40fae8:	f040 843c 	bne.w	410364 <_svfprintf_r+0xa80>
  40faec:	2b00      	cmp	r3, #0
  40faee:	f040 84d7 	bne.w	4104a0 <_svfprintf_r+0xbbc>
  40faf2:	f01b 0301 	ands.w	r3, fp, #1
  40faf6:	930e      	str	r3, [sp, #56]	; 0x38
  40faf8:	f000 8604 	beq.w	410704 <_svfprintf_r+0xe20>
  40fafc:	ae42      	add	r6, sp, #264	; 0x108
  40fafe:	2330      	movs	r3, #48	; 0x30
  40fb00:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40fb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fb06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40fb08:	4293      	cmp	r3, r2
  40fb0a:	bfb8      	it	lt
  40fb0c:	4613      	movlt	r3, r2
  40fb0e:	9308      	str	r3, [sp, #32]
  40fb10:	2300      	movs	r3, #0
  40fb12:	9312      	str	r3, [sp, #72]	; 0x48
  40fb14:	b117      	cbz	r7, 40fb1c <_svfprintf_r+0x238>
  40fb16:	9b08      	ldr	r3, [sp, #32]
  40fb18:	3301      	adds	r3, #1
  40fb1a:	9308      	str	r3, [sp, #32]
  40fb1c:	9b07      	ldr	r3, [sp, #28]
  40fb1e:	f013 0302 	ands.w	r3, r3, #2
  40fb22:	9310      	str	r3, [sp, #64]	; 0x40
  40fb24:	d002      	beq.n	40fb2c <_svfprintf_r+0x248>
  40fb26:	9b08      	ldr	r3, [sp, #32]
  40fb28:	3302      	adds	r3, #2
  40fb2a:	9308      	str	r3, [sp, #32]
  40fb2c:	9b07      	ldr	r3, [sp, #28]
  40fb2e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40fb32:	f040 830e 	bne.w	410152 <_svfprintf_r+0x86e>
  40fb36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fb38:	9a08      	ldr	r2, [sp, #32]
  40fb3a:	eba3 0b02 	sub.w	fp, r3, r2
  40fb3e:	f1bb 0f00 	cmp.w	fp, #0
  40fb42:	f340 8306 	ble.w	410152 <_svfprintf_r+0x86e>
  40fb46:	f1bb 0f10 	cmp.w	fp, #16
  40fb4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40fb4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40fb4e:	dd29      	ble.n	40fba4 <_svfprintf_r+0x2c0>
  40fb50:	4643      	mov	r3, r8
  40fb52:	4621      	mov	r1, r4
  40fb54:	46a8      	mov	r8, r5
  40fb56:	2710      	movs	r7, #16
  40fb58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40fb5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40fb5c:	e006      	b.n	40fb6c <_svfprintf_r+0x288>
  40fb5e:	f1ab 0b10 	sub.w	fp, fp, #16
  40fb62:	f1bb 0f10 	cmp.w	fp, #16
  40fb66:	f103 0308 	add.w	r3, r3, #8
  40fb6a:	dd18      	ble.n	40fb9e <_svfprintf_r+0x2ba>
  40fb6c:	3201      	adds	r2, #1
  40fb6e:	48b7      	ldr	r0, [pc, #732]	; (40fe4c <_svfprintf_r+0x568>)
  40fb70:	9226      	str	r2, [sp, #152]	; 0x98
  40fb72:	3110      	adds	r1, #16
  40fb74:	2a07      	cmp	r2, #7
  40fb76:	9127      	str	r1, [sp, #156]	; 0x9c
  40fb78:	e883 0081 	stmia.w	r3, {r0, r7}
  40fb7c:	ddef      	ble.n	40fb5e <_svfprintf_r+0x27a>
  40fb7e:	aa25      	add	r2, sp, #148	; 0x94
  40fb80:	4629      	mov	r1, r5
  40fb82:	4620      	mov	r0, r4
  40fb84:	f005 fbae 	bl	4152e4 <__ssprint_r>
  40fb88:	2800      	cmp	r0, #0
  40fb8a:	f47f af7d 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  40fb8e:	f1ab 0b10 	sub.w	fp, fp, #16
  40fb92:	f1bb 0f10 	cmp.w	fp, #16
  40fb96:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40fb98:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40fb9a:	464b      	mov	r3, r9
  40fb9c:	dce6      	bgt.n	40fb6c <_svfprintf_r+0x288>
  40fb9e:	4645      	mov	r5, r8
  40fba0:	460c      	mov	r4, r1
  40fba2:	4698      	mov	r8, r3
  40fba4:	3201      	adds	r2, #1
  40fba6:	4ba9      	ldr	r3, [pc, #676]	; (40fe4c <_svfprintf_r+0x568>)
  40fba8:	9226      	str	r2, [sp, #152]	; 0x98
  40fbaa:	445c      	add	r4, fp
  40fbac:	2a07      	cmp	r2, #7
  40fbae:	9427      	str	r4, [sp, #156]	; 0x9c
  40fbb0:	e888 0808 	stmia.w	r8, {r3, fp}
  40fbb4:	f300 8498 	bgt.w	4104e8 <_svfprintf_r+0xc04>
  40fbb8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40fbbc:	f108 0808 	add.w	r8, r8, #8
  40fbc0:	b177      	cbz	r7, 40fbe0 <_svfprintf_r+0x2fc>
  40fbc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40fbc4:	3301      	adds	r3, #1
  40fbc6:	3401      	adds	r4, #1
  40fbc8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40fbcc:	2201      	movs	r2, #1
  40fbce:	2b07      	cmp	r3, #7
  40fbd0:	9427      	str	r4, [sp, #156]	; 0x9c
  40fbd2:	9326      	str	r3, [sp, #152]	; 0x98
  40fbd4:	e888 0006 	stmia.w	r8, {r1, r2}
  40fbd8:	f300 83db 	bgt.w	410392 <_svfprintf_r+0xaae>
  40fbdc:	f108 0808 	add.w	r8, r8, #8
  40fbe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40fbe2:	b16b      	cbz	r3, 40fc00 <_svfprintf_r+0x31c>
  40fbe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40fbe6:	3301      	adds	r3, #1
  40fbe8:	3402      	adds	r4, #2
  40fbea:	a91e      	add	r1, sp, #120	; 0x78
  40fbec:	2202      	movs	r2, #2
  40fbee:	2b07      	cmp	r3, #7
  40fbf0:	9427      	str	r4, [sp, #156]	; 0x9c
  40fbf2:	9326      	str	r3, [sp, #152]	; 0x98
  40fbf4:	e888 0006 	stmia.w	r8, {r1, r2}
  40fbf8:	f300 83d6 	bgt.w	4103a8 <_svfprintf_r+0xac4>
  40fbfc:	f108 0808 	add.w	r8, r8, #8
  40fc00:	2d80      	cmp	r5, #128	; 0x80
  40fc02:	f000 8315 	beq.w	410230 <_svfprintf_r+0x94c>
  40fc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fc08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40fc0a:	1a9f      	subs	r7, r3, r2
  40fc0c:	2f00      	cmp	r7, #0
  40fc0e:	dd36      	ble.n	40fc7e <_svfprintf_r+0x39a>
  40fc10:	2f10      	cmp	r7, #16
  40fc12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40fc14:	4d8e      	ldr	r5, [pc, #568]	; (40fe50 <_svfprintf_r+0x56c>)
  40fc16:	dd27      	ble.n	40fc68 <_svfprintf_r+0x384>
  40fc18:	4642      	mov	r2, r8
  40fc1a:	4621      	mov	r1, r4
  40fc1c:	46b0      	mov	r8, r6
  40fc1e:	f04f 0b10 	mov.w	fp, #16
  40fc22:	462e      	mov	r6, r5
  40fc24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40fc26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40fc28:	e004      	b.n	40fc34 <_svfprintf_r+0x350>
  40fc2a:	3f10      	subs	r7, #16
  40fc2c:	2f10      	cmp	r7, #16
  40fc2e:	f102 0208 	add.w	r2, r2, #8
  40fc32:	dd15      	ble.n	40fc60 <_svfprintf_r+0x37c>
  40fc34:	3301      	adds	r3, #1
  40fc36:	3110      	adds	r1, #16
  40fc38:	2b07      	cmp	r3, #7
  40fc3a:	9127      	str	r1, [sp, #156]	; 0x9c
  40fc3c:	9326      	str	r3, [sp, #152]	; 0x98
  40fc3e:	e882 0840 	stmia.w	r2, {r6, fp}
  40fc42:	ddf2      	ble.n	40fc2a <_svfprintf_r+0x346>
  40fc44:	aa25      	add	r2, sp, #148	; 0x94
  40fc46:	4629      	mov	r1, r5
  40fc48:	4620      	mov	r0, r4
  40fc4a:	f005 fb4b 	bl	4152e4 <__ssprint_r>
  40fc4e:	2800      	cmp	r0, #0
  40fc50:	f47f af1a 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  40fc54:	3f10      	subs	r7, #16
  40fc56:	2f10      	cmp	r7, #16
  40fc58:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40fc5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40fc5c:	464a      	mov	r2, r9
  40fc5e:	dce9      	bgt.n	40fc34 <_svfprintf_r+0x350>
  40fc60:	4635      	mov	r5, r6
  40fc62:	460c      	mov	r4, r1
  40fc64:	4646      	mov	r6, r8
  40fc66:	4690      	mov	r8, r2
  40fc68:	3301      	adds	r3, #1
  40fc6a:	443c      	add	r4, r7
  40fc6c:	2b07      	cmp	r3, #7
  40fc6e:	9427      	str	r4, [sp, #156]	; 0x9c
  40fc70:	9326      	str	r3, [sp, #152]	; 0x98
  40fc72:	e888 00a0 	stmia.w	r8, {r5, r7}
  40fc76:	f300 8381 	bgt.w	41037c <_svfprintf_r+0xa98>
  40fc7a:	f108 0808 	add.w	r8, r8, #8
  40fc7e:	9b07      	ldr	r3, [sp, #28]
  40fc80:	05df      	lsls	r7, r3, #23
  40fc82:	f100 8268 	bmi.w	410156 <_svfprintf_r+0x872>
  40fc86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40fc88:	990e      	ldr	r1, [sp, #56]	; 0x38
  40fc8a:	f8c8 6000 	str.w	r6, [r8]
  40fc8e:	3301      	adds	r3, #1
  40fc90:	440c      	add	r4, r1
  40fc92:	2b07      	cmp	r3, #7
  40fc94:	9427      	str	r4, [sp, #156]	; 0x9c
  40fc96:	f8c8 1004 	str.w	r1, [r8, #4]
  40fc9a:	9326      	str	r3, [sp, #152]	; 0x98
  40fc9c:	f300 834d 	bgt.w	41033a <_svfprintf_r+0xa56>
  40fca0:	f108 0808 	add.w	r8, r8, #8
  40fca4:	9b07      	ldr	r3, [sp, #28]
  40fca6:	075b      	lsls	r3, r3, #29
  40fca8:	d53a      	bpl.n	40fd20 <_svfprintf_r+0x43c>
  40fcaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fcac:	9a08      	ldr	r2, [sp, #32]
  40fcae:	1a9d      	subs	r5, r3, r2
  40fcb0:	2d00      	cmp	r5, #0
  40fcb2:	dd35      	ble.n	40fd20 <_svfprintf_r+0x43c>
  40fcb4:	2d10      	cmp	r5, #16
  40fcb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40fcb8:	dd20      	ble.n	40fcfc <_svfprintf_r+0x418>
  40fcba:	2610      	movs	r6, #16
  40fcbc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40fcbe:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40fcc2:	e004      	b.n	40fcce <_svfprintf_r+0x3ea>
  40fcc4:	3d10      	subs	r5, #16
  40fcc6:	2d10      	cmp	r5, #16
  40fcc8:	f108 0808 	add.w	r8, r8, #8
  40fccc:	dd16      	ble.n	40fcfc <_svfprintf_r+0x418>
  40fcce:	3301      	adds	r3, #1
  40fcd0:	4a5e      	ldr	r2, [pc, #376]	; (40fe4c <_svfprintf_r+0x568>)
  40fcd2:	9326      	str	r3, [sp, #152]	; 0x98
  40fcd4:	3410      	adds	r4, #16
  40fcd6:	2b07      	cmp	r3, #7
  40fcd8:	9427      	str	r4, [sp, #156]	; 0x9c
  40fcda:	e888 0044 	stmia.w	r8, {r2, r6}
  40fcde:	ddf1      	ble.n	40fcc4 <_svfprintf_r+0x3e0>
  40fce0:	aa25      	add	r2, sp, #148	; 0x94
  40fce2:	4659      	mov	r1, fp
  40fce4:	4638      	mov	r0, r7
  40fce6:	f005 fafd 	bl	4152e4 <__ssprint_r>
  40fcea:	2800      	cmp	r0, #0
  40fcec:	f47f aecc 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  40fcf0:	3d10      	subs	r5, #16
  40fcf2:	2d10      	cmp	r5, #16
  40fcf4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40fcf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40fcf8:	46c8      	mov	r8, r9
  40fcfa:	dce8      	bgt.n	40fcce <_svfprintf_r+0x3ea>
  40fcfc:	3301      	adds	r3, #1
  40fcfe:	4a53      	ldr	r2, [pc, #332]	; (40fe4c <_svfprintf_r+0x568>)
  40fd00:	9326      	str	r3, [sp, #152]	; 0x98
  40fd02:	442c      	add	r4, r5
  40fd04:	2b07      	cmp	r3, #7
  40fd06:	9427      	str	r4, [sp, #156]	; 0x9c
  40fd08:	e888 0024 	stmia.w	r8, {r2, r5}
  40fd0c:	dd08      	ble.n	40fd20 <_svfprintf_r+0x43c>
  40fd0e:	aa25      	add	r2, sp, #148	; 0x94
  40fd10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40fd12:	980c      	ldr	r0, [sp, #48]	; 0x30
  40fd14:	f005 fae6 	bl	4152e4 <__ssprint_r>
  40fd18:	2800      	cmp	r0, #0
  40fd1a:	f47f aeb5 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  40fd1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40fd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40fd22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40fd24:	9908      	ldr	r1, [sp, #32]
  40fd26:	428a      	cmp	r2, r1
  40fd28:	bfac      	ite	ge
  40fd2a:	189b      	addge	r3, r3, r2
  40fd2c:	185b      	addlt	r3, r3, r1
  40fd2e:	9309      	str	r3, [sp, #36]	; 0x24
  40fd30:	2c00      	cmp	r4, #0
  40fd32:	f040 830d 	bne.w	410350 <_svfprintf_r+0xa6c>
  40fd36:	2300      	movs	r3, #0
  40fd38:	9326      	str	r3, [sp, #152]	; 0x98
  40fd3a:	46c8      	mov	r8, r9
  40fd3c:	e5f9      	b.n	40f932 <_svfprintf_r+0x4e>
  40fd3e:	9311      	str	r3, [sp, #68]	; 0x44
  40fd40:	f01b 0320 	ands.w	r3, fp, #32
  40fd44:	f040 81e3 	bne.w	41010e <_svfprintf_r+0x82a>
  40fd48:	f01b 0210 	ands.w	r2, fp, #16
  40fd4c:	f040 842e 	bne.w	4105ac <_svfprintf_r+0xcc8>
  40fd50:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40fd54:	f000 842a 	beq.w	4105ac <_svfprintf_r+0xcc8>
  40fd58:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40fd5a:	4613      	mov	r3, r2
  40fd5c:	460a      	mov	r2, r1
  40fd5e:	3204      	adds	r2, #4
  40fd60:	880c      	ldrh	r4, [r1, #0]
  40fd62:	920f      	str	r2, [sp, #60]	; 0x3c
  40fd64:	2500      	movs	r5, #0
  40fd66:	e6b0      	b.n	40faca <_svfprintf_r+0x1e6>
  40fd68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40fd6a:	9311      	str	r3, [sp, #68]	; 0x44
  40fd6c:	6816      	ldr	r6, [r2, #0]
  40fd6e:	2400      	movs	r4, #0
  40fd70:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40fd74:	1d15      	adds	r5, r2, #4
  40fd76:	2e00      	cmp	r6, #0
  40fd78:	f000 86a7 	beq.w	410aca <_svfprintf_r+0x11e6>
  40fd7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fd7e:	1c53      	adds	r3, r2, #1
  40fd80:	f000 8609 	beq.w	410996 <_svfprintf_r+0x10b2>
  40fd84:	4621      	mov	r1, r4
  40fd86:	4630      	mov	r0, r6
  40fd88:	f7fd feda 	bl	40db40 <memchr>
  40fd8c:	2800      	cmp	r0, #0
  40fd8e:	f000 86e1 	beq.w	410b54 <_svfprintf_r+0x1270>
  40fd92:	1b83      	subs	r3, r0, r6
  40fd94:	930e      	str	r3, [sp, #56]	; 0x38
  40fd96:	940a      	str	r4, [sp, #40]	; 0x28
  40fd98:	950f      	str	r5, [sp, #60]	; 0x3c
  40fd9a:	f8cd b01c 	str.w	fp, [sp, #28]
  40fd9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fda2:	9308      	str	r3, [sp, #32]
  40fda4:	9412      	str	r4, [sp, #72]	; 0x48
  40fda6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40fdaa:	e6b3      	b.n	40fb14 <_svfprintf_r+0x230>
  40fdac:	f89a 3000 	ldrb.w	r3, [sl]
  40fdb0:	2201      	movs	r2, #1
  40fdb2:	212b      	movs	r1, #43	; 0x2b
  40fdb4:	e5ee      	b.n	40f994 <_svfprintf_r+0xb0>
  40fdb6:	f04b 0b20 	orr.w	fp, fp, #32
  40fdba:	f89a 3000 	ldrb.w	r3, [sl]
  40fdbe:	e5e9      	b.n	40f994 <_svfprintf_r+0xb0>
  40fdc0:	9311      	str	r3, [sp, #68]	; 0x44
  40fdc2:	2a00      	cmp	r2, #0
  40fdc4:	f040 8795 	bne.w	410cf2 <_svfprintf_r+0x140e>
  40fdc8:	4b22      	ldr	r3, [pc, #136]	; (40fe54 <_svfprintf_r+0x570>)
  40fdca:	9318      	str	r3, [sp, #96]	; 0x60
  40fdcc:	f01b 0f20 	tst.w	fp, #32
  40fdd0:	f040 8111 	bne.w	40fff6 <_svfprintf_r+0x712>
  40fdd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40fdd6:	f01b 0f10 	tst.w	fp, #16
  40fdda:	4613      	mov	r3, r2
  40fddc:	f040 83e1 	bne.w	4105a2 <_svfprintf_r+0xcbe>
  40fde0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40fde4:	f000 83dd 	beq.w	4105a2 <_svfprintf_r+0xcbe>
  40fde8:	3304      	adds	r3, #4
  40fdea:	8814      	ldrh	r4, [r2, #0]
  40fdec:	930f      	str	r3, [sp, #60]	; 0x3c
  40fdee:	2500      	movs	r5, #0
  40fdf0:	f01b 0f01 	tst.w	fp, #1
  40fdf4:	f000 810c 	beq.w	410010 <_svfprintf_r+0x72c>
  40fdf8:	ea54 0305 	orrs.w	r3, r4, r5
  40fdfc:	f000 8108 	beq.w	410010 <_svfprintf_r+0x72c>
  40fe00:	2330      	movs	r3, #48	; 0x30
  40fe02:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40fe06:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40fe0a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40fe0e:	f04b 0b02 	orr.w	fp, fp, #2
  40fe12:	2302      	movs	r3, #2
  40fe14:	e659      	b.n	40faca <_svfprintf_r+0x1e6>
  40fe16:	f89a 3000 	ldrb.w	r3, [sl]
  40fe1a:	2900      	cmp	r1, #0
  40fe1c:	f47f adba 	bne.w	40f994 <_svfprintf_r+0xb0>
  40fe20:	2201      	movs	r2, #1
  40fe22:	2120      	movs	r1, #32
  40fe24:	e5b6      	b.n	40f994 <_svfprintf_r+0xb0>
  40fe26:	f04b 0b01 	orr.w	fp, fp, #1
  40fe2a:	f89a 3000 	ldrb.w	r3, [sl]
  40fe2e:	e5b1      	b.n	40f994 <_svfprintf_r+0xb0>
  40fe30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40fe32:	6823      	ldr	r3, [r4, #0]
  40fe34:	930d      	str	r3, [sp, #52]	; 0x34
  40fe36:	4618      	mov	r0, r3
  40fe38:	2800      	cmp	r0, #0
  40fe3a:	4623      	mov	r3, r4
  40fe3c:	f103 0304 	add.w	r3, r3, #4
  40fe40:	f6ff ae0a 	blt.w	40fa58 <_svfprintf_r+0x174>
  40fe44:	930f      	str	r3, [sp, #60]	; 0x3c
  40fe46:	f89a 3000 	ldrb.w	r3, [sl]
  40fe4a:	e5a3      	b.n	40f994 <_svfprintf_r+0xb0>
  40fe4c:	0041751c 	.word	0x0041751c
  40fe50:	0041752c 	.word	0x0041752c
  40fe54:	004174fc 	.word	0x004174fc
  40fe58:	f04b 0b10 	orr.w	fp, fp, #16
  40fe5c:	f01b 0f20 	tst.w	fp, #32
  40fe60:	9311      	str	r3, [sp, #68]	; 0x44
  40fe62:	f43f ae23 	beq.w	40faac <_svfprintf_r+0x1c8>
  40fe66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40fe68:	3507      	adds	r5, #7
  40fe6a:	f025 0307 	bic.w	r3, r5, #7
  40fe6e:	f103 0208 	add.w	r2, r3, #8
  40fe72:	e9d3 4500 	ldrd	r4, r5, [r3]
  40fe76:	920f      	str	r2, [sp, #60]	; 0x3c
  40fe78:	2301      	movs	r3, #1
  40fe7a:	e626      	b.n	40faca <_svfprintf_r+0x1e6>
  40fe7c:	f89a 3000 	ldrb.w	r3, [sl]
  40fe80:	2b2a      	cmp	r3, #42	; 0x2a
  40fe82:	f10a 0401 	add.w	r4, sl, #1
  40fe86:	f000 8727 	beq.w	410cd8 <_svfprintf_r+0x13f4>
  40fe8a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40fe8e:	2809      	cmp	r0, #9
  40fe90:	46a2      	mov	sl, r4
  40fe92:	f200 86ad 	bhi.w	410bf0 <_svfprintf_r+0x130c>
  40fe96:	2300      	movs	r3, #0
  40fe98:	461c      	mov	r4, r3
  40fe9a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40fe9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40fea2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40fea6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40feaa:	2809      	cmp	r0, #9
  40feac:	d9f5      	bls.n	40fe9a <_svfprintf_r+0x5b6>
  40feae:	940a      	str	r4, [sp, #40]	; 0x28
  40feb0:	e572      	b.n	40f998 <_svfprintf_r+0xb4>
  40feb2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40feb6:	f89a 3000 	ldrb.w	r3, [sl]
  40feba:	e56b      	b.n	40f994 <_svfprintf_r+0xb0>
  40febc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40fec0:	f89a 3000 	ldrb.w	r3, [sl]
  40fec4:	e566      	b.n	40f994 <_svfprintf_r+0xb0>
  40fec6:	f89a 3000 	ldrb.w	r3, [sl]
  40feca:	2b6c      	cmp	r3, #108	; 0x6c
  40fecc:	bf03      	ittte	eq
  40fece:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40fed2:	f04b 0b20 	orreq.w	fp, fp, #32
  40fed6:	f10a 0a01 	addeq.w	sl, sl, #1
  40feda:	f04b 0b10 	orrne.w	fp, fp, #16
  40fede:	e559      	b.n	40f994 <_svfprintf_r+0xb0>
  40fee0:	2a00      	cmp	r2, #0
  40fee2:	f040 8711 	bne.w	410d08 <_svfprintf_r+0x1424>
  40fee6:	f01b 0f20 	tst.w	fp, #32
  40feea:	f040 84f9 	bne.w	4108e0 <_svfprintf_r+0xffc>
  40feee:	f01b 0f10 	tst.w	fp, #16
  40fef2:	f040 84ac 	bne.w	41084e <_svfprintf_r+0xf6a>
  40fef6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40fefa:	f000 84a8 	beq.w	41084e <_svfprintf_r+0xf6a>
  40fefe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ff00:	6813      	ldr	r3, [r2, #0]
  40ff02:	3204      	adds	r2, #4
  40ff04:	920f      	str	r2, [sp, #60]	; 0x3c
  40ff06:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40ff0a:	801a      	strh	r2, [r3, #0]
  40ff0c:	e511      	b.n	40f932 <_svfprintf_r+0x4e>
  40ff0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ff10:	4bb3      	ldr	r3, [pc, #716]	; (4101e0 <_svfprintf_r+0x8fc>)
  40ff12:	680c      	ldr	r4, [r1, #0]
  40ff14:	9318      	str	r3, [sp, #96]	; 0x60
  40ff16:	2230      	movs	r2, #48	; 0x30
  40ff18:	2378      	movs	r3, #120	; 0x78
  40ff1a:	3104      	adds	r1, #4
  40ff1c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40ff20:	9311      	str	r3, [sp, #68]	; 0x44
  40ff22:	f04b 0b02 	orr.w	fp, fp, #2
  40ff26:	910f      	str	r1, [sp, #60]	; 0x3c
  40ff28:	2500      	movs	r5, #0
  40ff2a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40ff2e:	2302      	movs	r3, #2
  40ff30:	e5cb      	b.n	40faca <_svfprintf_r+0x1e6>
  40ff32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ff34:	9311      	str	r3, [sp, #68]	; 0x44
  40ff36:	680a      	ldr	r2, [r1, #0]
  40ff38:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40ff3c:	2300      	movs	r3, #0
  40ff3e:	460a      	mov	r2, r1
  40ff40:	461f      	mov	r7, r3
  40ff42:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40ff46:	3204      	adds	r2, #4
  40ff48:	2301      	movs	r3, #1
  40ff4a:	9308      	str	r3, [sp, #32]
  40ff4c:	f8cd b01c 	str.w	fp, [sp, #28]
  40ff50:	970a      	str	r7, [sp, #40]	; 0x28
  40ff52:	9712      	str	r7, [sp, #72]	; 0x48
  40ff54:	920f      	str	r2, [sp, #60]	; 0x3c
  40ff56:	930e      	str	r3, [sp, #56]	; 0x38
  40ff58:	ae28      	add	r6, sp, #160	; 0xa0
  40ff5a:	e5df      	b.n	40fb1c <_svfprintf_r+0x238>
  40ff5c:	9311      	str	r3, [sp, #68]	; 0x44
  40ff5e:	2a00      	cmp	r2, #0
  40ff60:	f040 86ea 	bne.w	410d38 <_svfprintf_r+0x1454>
  40ff64:	f01b 0f20 	tst.w	fp, #32
  40ff68:	d15d      	bne.n	410026 <_svfprintf_r+0x742>
  40ff6a:	f01b 0f10 	tst.w	fp, #16
  40ff6e:	f040 8308 	bne.w	410582 <_svfprintf_r+0xc9e>
  40ff72:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40ff76:	f000 8304 	beq.w	410582 <_svfprintf_r+0xc9e>
  40ff7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ff7c:	f9b1 4000 	ldrsh.w	r4, [r1]
  40ff80:	3104      	adds	r1, #4
  40ff82:	17e5      	asrs	r5, r4, #31
  40ff84:	4622      	mov	r2, r4
  40ff86:	462b      	mov	r3, r5
  40ff88:	910f      	str	r1, [sp, #60]	; 0x3c
  40ff8a:	2a00      	cmp	r2, #0
  40ff8c:	f173 0300 	sbcs.w	r3, r3, #0
  40ff90:	db58      	blt.n	410044 <_svfprintf_r+0x760>
  40ff92:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ff94:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40ff98:	1c4a      	adds	r2, r1, #1
  40ff9a:	f04f 0301 	mov.w	r3, #1
  40ff9e:	f47f ad9b 	bne.w	40fad8 <_svfprintf_r+0x1f4>
  40ffa2:	ea54 0205 	orrs.w	r2, r4, r5
  40ffa6:	f000 81df 	beq.w	410368 <_svfprintf_r+0xa84>
  40ffaa:	f8cd b01c 	str.w	fp, [sp, #28]
  40ffae:	2b01      	cmp	r3, #1
  40ffb0:	f000 827b 	beq.w	4104aa <_svfprintf_r+0xbc6>
  40ffb4:	2b02      	cmp	r3, #2
  40ffb6:	f040 8206 	bne.w	4103c6 <_svfprintf_r+0xae2>
  40ffba:	9818      	ldr	r0, [sp, #96]	; 0x60
  40ffbc:	464e      	mov	r6, r9
  40ffbe:	0923      	lsrs	r3, r4, #4
  40ffc0:	f004 010f 	and.w	r1, r4, #15
  40ffc4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40ffc8:	092a      	lsrs	r2, r5, #4
  40ffca:	461c      	mov	r4, r3
  40ffcc:	4615      	mov	r5, r2
  40ffce:	5c43      	ldrb	r3, [r0, r1]
  40ffd0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40ffd4:	ea54 0305 	orrs.w	r3, r4, r5
  40ffd8:	d1f1      	bne.n	40ffbe <_svfprintf_r+0x6da>
  40ffda:	eba9 0306 	sub.w	r3, r9, r6
  40ffde:	930e      	str	r3, [sp, #56]	; 0x38
  40ffe0:	e590      	b.n	40fb04 <_svfprintf_r+0x220>
  40ffe2:	9311      	str	r3, [sp, #68]	; 0x44
  40ffe4:	2a00      	cmp	r2, #0
  40ffe6:	f040 86a3 	bne.w	410d30 <_svfprintf_r+0x144c>
  40ffea:	4b7e      	ldr	r3, [pc, #504]	; (4101e4 <_svfprintf_r+0x900>)
  40ffec:	9318      	str	r3, [sp, #96]	; 0x60
  40ffee:	f01b 0f20 	tst.w	fp, #32
  40fff2:	f43f aeef 	beq.w	40fdd4 <_svfprintf_r+0x4f0>
  40fff6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40fff8:	3507      	adds	r5, #7
  40fffa:	f025 0307 	bic.w	r3, r5, #7
  40fffe:	f103 0208 	add.w	r2, r3, #8
  410002:	f01b 0f01 	tst.w	fp, #1
  410006:	920f      	str	r2, [sp, #60]	; 0x3c
  410008:	e9d3 4500 	ldrd	r4, r5, [r3]
  41000c:	f47f aef4 	bne.w	40fdf8 <_svfprintf_r+0x514>
  410010:	2302      	movs	r3, #2
  410012:	e55a      	b.n	40faca <_svfprintf_r+0x1e6>
  410014:	9311      	str	r3, [sp, #68]	; 0x44
  410016:	2a00      	cmp	r2, #0
  410018:	f040 8686 	bne.w	410d28 <_svfprintf_r+0x1444>
  41001c:	f04b 0b10 	orr.w	fp, fp, #16
  410020:	f01b 0f20 	tst.w	fp, #32
  410024:	d0a1      	beq.n	40ff6a <_svfprintf_r+0x686>
  410026:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  410028:	3507      	adds	r5, #7
  41002a:	f025 0507 	bic.w	r5, r5, #7
  41002e:	e9d5 2300 	ldrd	r2, r3, [r5]
  410032:	2a00      	cmp	r2, #0
  410034:	f105 0108 	add.w	r1, r5, #8
  410038:	461d      	mov	r5, r3
  41003a:	f173 0300 	sbcs.w	r3, r3, #0
  41003e:	910f      	str	r1, [sp, #60]	; 0x3c
  410040:	4614      	mov	r4, r2
  410042:	daa6      	bge.n	40ff92 <_svfprintf_r+0x6ae>
  410044:	272d      	movs	r7, #45	; 0x2d
  410046:	4264      	negs	r4, r4
  410048:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  41004c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  410050:	2301      	movs	r3, #1
  410052:	e53d      	b.n	40fad0 <_svfprintf_r+0x1ec>
  410054:	9311      	str	r3, [sp, #68]	; 0x44
  410056:	2a00      	cmp	r2, #0
  410058:	f040 8662 	bne.w	410d20 <_svfprintf_r+0x143c>
  41005c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  41005e:	3507      	adds	r5, #7
  410060:	f025 0307 	bic.w	r3, r5, #7
  410064:	f103 0208 	add.w	r2, r3, #8
  410068:	920f      	str	r2, [sp, #60]	; 0x3c
  41006a:	681a      	ldr	r2, [r3, #0]
  41006c:	9215      	str	r2, [sp, #84]	; 0x54
  41006e:	685b      	ldr	r3, [r3, #4]
  410070:	9314      	str	r3, [sp, #80]	; 0x50
  410072:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410074:	9d15      	ldr	r5, [sp, #84]	; 0x54
  410076:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  41007a:	4628      	mov	r0, r5
  41007c:	4621      	mov	r1, r4
  41007e:	f04f 32ff 	mov.w	r2, #4294967295
  410082:	4b59      	ldr	r3, [pc, #356]	; (4101e8 <_svfprintf_r+0x904>)
  410084:	f005 fdac 	bl	415be0 <__aeabi_dcmpun>
  410088:	2800      	cmp	r0, #0
  41008a:	f040 834a 	bne.w	410722 <_svfprintf_r+0xe3e>
  41008e:	4628      	mov	r0, r5
  410090:	4621      	mov	r1, r4
  410092:	f04f 32ff 	mov.w	r2, #4294967295
  410096:	4b54      	ldr	r3, [pc, #336]	; (4101e8 <_svfprintf_r+0x904>)
  410098:	f7fc fb34 	bl	40c704 <__aeabi_dcmple>
  41009c:	2800      	cmp	r0, #0
  41009e:	f040 8340 	bne.w	410722 <_svfprintf_r+0xe3e>
  4100a2:	a815      	add	r0, sp, #84	; 0x54
  4100a4:	c80d      	ldmia	r0, {r0, r2, r3}
  4100a6:	9914      	ldr	r1, [sp, #80]	; 0x50
  4100a8:	f7fc fb22 	bl	40c6f0 <__aeabi_dcmplt>
  4100ac:	2800      	cmp	r0, #0
  4100ae:	f040 8530 	bne.w	410b12 <_svfprintf_r+0x122e>
  4100b2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4100b6:	4e4d      	ldr	r6, [pc, #308]	; (4101ec <_svfprintf_r+0x908>)
  4100b8:	4b4d      	ldr	r3, [pc, #308]	; (4101f0 <_svfprintf_r+0x90c>)
  4100ba:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4100be:	9007      	str	r0, [sp, #28]
  4100c0:	9811      	ldr	r0, [sp, #68]	; 0x44
  4100c2:	2203      	movs	r2, #3
  4100c4:	2100      	movs	r1, #0
  4100c6:	9208      	str	r2, [sp, #32]
  4100c8:	910a      	str	r1, [sp, #40]	; 0x28
  4100ca:	2847      	cmp	r0, #71	; 0x47
  4100cc:	bfd8      	it	le
  4100ce:	461e      	movle	r6, r3
  4100d0:	920e      	str	r2, [sp, #56]	; 0x38
  4100d2:	9112      	str	r1, [sp, #72]	; 0x48
  4100d4:	e51e      	b.n	40fb14 <_svfprintf_r+0x230>
  4100d6:	f04b 0b08 	orr.w	fp, fp, #8
  4100da:	f89a 3000 	ldrb.w	r3, [sl]
  4100de:	e459      	b.n	40f994 <_svfprintf_r+0xb0>
  4100e0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4100e4:	2300      	movs	r3, #0
  4100e6:	461c      	mov	r4, r3
  4100e8:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4100ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4100f0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4100f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4100f8:	2809      	cmp	r0, #9
  4100fa:	d9f5      	bls.n	4100e8 <_svfprintf_r+0x804>
  4100fc:	940d      	str	r4, [sp, #52]	; 0x34
  4100fe:	e44b      	b.n	40f998 <_svfprintf_r+0xb4>
  410100:	f04b 0b10 	orr.w	fp, fp, #16
  410104:	9311      	str	r3, [sp, #68]	; 0x44
  410106:	f01b 0320 	ands.w	r3, fp, #32
  41010a:	f43f ae1d 	beq.w	40fd48 <_svfprintf_r+0x464>
  41010e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  410110:	3507      	adds	r5, #7
  410112:	f025 0307 	bic.w	r3, r5, #7
  410116:	f103 0208 	add.w	r2, r3, #8
  41011a:	e9d3 4500 	ldrd	r4, r5, [r3]
  41011e:	920f      	str	r2, [sp, #60]	; 0x3c
  410120:	2300      	movs	r3, #0
  410122:	e4d2      	b.n	40faca <_svfprintf_r+0x1e6>
  410124:	9311      	str	r3, [sp, #68]	; 0x44
  410126:	2a00      	cmp	r2, #0
  410128:	f040 85e7 	bne.w	410cfa <_svfprintf_r+0x1416>
  41012c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41012e:	2a00      	cmp	r2, #0
  410130:	f43f aca3 	beq.w	40fa7a <_svfprintf_r+0x196>
  410134:	2300      	movs	r3, #0
  410136:	2101      	movs	r1, #1
  410138:	461f      	mov	r7, r3
  41013a:	9108      	str	r1, [sp, #32]
  41013c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  410140:	f8cd b01c 	str.w	fp, [sp, #28]
  410144:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  410148:	930a      	str	r3, [sp, #40]	; 0x28
  41014a:	9312      	str	r3, [sp, #72]	; 0x48
  41014c:	910e      	str	r1, [sp, #56]	; 0x38
  41014e:	ae28      	add	r6, sp, #160	; 0xa0
  410150:	e4e4      	b.n	40fb1c <_svfprintf_r+0x238>
  410152:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  410154:	e534      	b.n	40fbc0 <_svfprintf_r+0x2dc>
  410156:	9b11      	ldr	r3, [sp, #68]	; 0x44
  410158:	2b65      	cmp	r3, #101	; 0x65
  41015a:	f340 80a7 	ble.w	4102ac <_svfprintf_r+0x9c8>
  41015e:	a815      	add	r0, sp, #84	; 0x54
  410160:	c80d      	ldmia	r0, {r0, r2, r3}
  410162:	9914      	ldr	r1, [sp, #80]	; 0x50
  410164:	f7fc faba 	bl	40c6dc <__aeabi_dcmpeq>
  410168:	2800      	cmp	r0, #0
  41016a:	f000 8150 	beq.w	41040e <_svfprintf_r+0xb2a>
  41016e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410170:	4a20      	ldr	r2, [pc, #128]	; (4101f4 <_svfprintf_r+0x910>)
  410172:	f8c8 2000 	str.w	r2, [r8]
  410176:	3301      	adds	r3, #1
  410178:	3401      	adds	r4, #1
  41017a:	2201      	movs	r2, #1
  41017c:	2b07      	cmp	r3, #7
  41017e:	9427      	str	r4, [sp, #156]	; 0x9c
  410180:	9326      	str	r3, [sp, #152]	; 0x98
  410182:	f8c8 2004 	str.w	r2, [r8, #4]
  410186:	f300 836a 	bgt.w	41085e <_svfprintf_r+0xf7a>
  41018a:	f108 0808 	add.w	r8, r8, #8
  41018e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  410190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  410192:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  410194:	4293      	cmp	r3, r2
  410196:	db03      	blt.n	4101a0 <_svfprintf_r+0x8bc>
  410198:	9b07      	ldr	r3, [sp, #28]
  41019a:	07dd      	lsls	r5, r3, #31
  41019c:	f57f ad82 	bpl.w	40fca4 <_svfprintf_r+0x3c0>
  4101a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4101a2:	9919      	ldr	r1, [sp, #100]	; 0x64
  4101a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4101a6:	f8c8 2000 	str.w	r2, [r8]
  4101aa:	3301      	adds	r3, #1
  4101ac:	440c      	add	r4, r1
  4101ae:	2b07      	cmp	r3, #7
  4101b0:	f8c8 1004 	str.w	r1, [r8, #4]
  4101b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4101b6:	9326      	str	r3, [sp, #152]	; 0x98
  4101b8:	f300 839e 	bgt.w	4108f8 <_svfprintf_r+0x1014>
  4101bc:	f108 0808 	add.w	r8, r8, #8
  4101c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4101c2:	1e5e      	subs	r6, r3, #1
  4101c4:	2e00      	cmp	r6, #0
  4101c6:	f77f ad6d 	ble.w	40fca4 <_svfprintf_r+0x3c0>
  4101ca:	2e10      	cmp	r6, #16
  4101cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4101ce:	4d0a      	ldr	r5, [pc, #40]	; (4101f8 <_svfprintf_r+0x914>)
  4101d0:	f340 81f5 	ble.w	4105be <_svfprintf_r+0xcda>
  4101d4:	4622      	mov	r2, r4
  4101d6:	2710      	movs	r7, #16
  4101d8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4101dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4101de:	e013      	b.n	410208 <_svfprintf_r+0x924>
  4101e0:	004174fc 	.word	0x004174fc
  4101e4:	004174e8 	.word	0x004174e8
  4101e8:	7fefffff 	.word	0x7fefffff
  4101ec:	004174dc 	.word	0x004174dc
  4101f0:	004174d8 	.word	0x004174d8
  4101f4:	00417518 	.word	0x00417518
  4101f8:	0041752c 	.word	0x0041752c
  4101fc:	f108 0808 	add.w	r8, r8, #8
  410200:	3e10      	subs	r6, #16
  410202:	2e10      	cmp	r6, #16
  410204:	f340 81da 	ble.w	4105bc <_svfprintf_r+0xcd8>
  410208:	3301      	adds	r3, #1
  41020a:	3210      	adds	r2, #16
  41020c:	2b07      	cmp	r3, #7
  41020e:	9227      	str	r2, [sp, #156]	; 0x9c
  410210:	9326      	str	r3, [sp, #152]	; 0x98
  410212:	e888 00a0 	stmia.w	r8, {r5, r7}
  410216:	ddf1      	ble.n	4101fc <_svfprintf_r+0x918>
  410218:	aa25      	add	r2, sp, #148	; 0x94
  41021a:	4621      	mov	r1, r4
  41021c:	4658      	mov	r0, fp
  41021e:	f005 f861 	bl	4152e4 <__ssprint_r>
  410222:	2800      	cmp	r0, #0
  410224:	f47f ac30 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410228:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  41022a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  41022c:	46c8      	mov	r8, r9
  41022e:	e7e7      	b.n	410200 <_svfprintf_r+0x91c>
  410230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410232:	9a08      	ldr	r2, [sp, #32]
  410234:	1a9f      	subs	r7, r3, r2
  410236:	2f00      	cmp	r7, #0
  410238:	f77f ace5 	ble.w	40fc06 <_svfprintf_r+0x322>
  41023c:	2f10      	cmp	r7, #16
  41023e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410240:	4db6      	ldr	r5, [pc, #728]	; (41051c <_svfprintf_r+0xc38>)
  410242:	dd27      	ble.n	410294 <_svfprintf_r+0x9b0>
  410244:	4642      	mov	r2, r8
  410246:	4621      	mov	r1, r4
  410248:	46b0      	mov	r8, r6
  41024a:	f04f 0b10 	mov.w	fp, #16
  41024e:	462e      	mov	r6, r5
  410250:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  410252:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410254:	e004      	b.n	410260 <_svfprintf_r+0x97c>
  410256:	3f10      	subs	r7, #16
  410258:	2f10      	cmp	r7, #16
  41025a:	f102 0208 	add.w	r2, r2, #8
  41025e:	dd15      	ble.n	41028c <_svfprintf_r+0x9a8>
  410260:	3301      	adds	r3, #1
  410262:	3110      	adds	r1, #16
  410264:	2b07      	cmp	r3, #7
  410266:	9127      	str	r1, [sp, #156]	; 0x9c
  410268:	9326      	str	r3, [sp, #152]	; 0x98
  41026a:	e882 0840 	stmia.w	r2, {r6, fp}
  41026e:	ddf2      	ble.n	410256 <_svfprintf_r+0x972>
  410270:	aa25      	add	r2, sp, #148	; 0x94
  410272:	4629      	mov	r1, r5
  410274:	4620      	mov	r0, r4
  410276:	f005 f835 	bl	4152e4 <__ssprint_r>
  41027a:	2800      	cmp	r0, #0
  41027c:	f47f ac04 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410280:	3f10      	subs	r7, #16
  410282:	2f10      	cmp	r7, #16
  410284:	9927      	ldr	r1, [sp, #156]	; 0x9c
  410286:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410288:	464a      	mov	r2, r9
  41028a:	dce9      	bgt.n	410260 <_svfprintf_r+0x97c>
  41028c:	4635      	mov	r5, r6
  41028e:	460c      	mov	r4, r1
  410290:	4646      	mov	r6, r8
  410292:	4690      	mov	r8, r2
  410294:	3301      	adds	r3, #1
  410296:	443c      	add	r4, r7
  410298:	2b07      	cmp	r3, #7
  41029a:	9427      	str	r4, [sp, #156]	; 0x9c
  41029c:	9326      	str	r3, [sp, #152]	; 0x98
  41029e:	e888 00a0 	stmia.w	r8, {r5, r7}
  4102a2:	f300 8232 	bgt.w	41070a <_svfprintf_r+0xe26>
  4102a6:	f108 0808 	add.w	r8, r8, #8
  4102aa:	e4ac      	b.n	40fc06 <_svfprintf_r+0x322>
  4102ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4102ae:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4102b0:	2b01      	cmp	r3, #1
  4102b2:	f340 81fe 	ble.w	4106b2 <_svfprintf_r+0xdce>
  4102b6:	3701      	adds	r7, #1
  4102b8:	3401      	adds	r4, #1
  4102ba:	2301      	movs	r3, #1
  4102bc:	2f07      	cmp	r7, #7
  4102be:	9427      	str	r4, [sp, #156]	; 0x9c
  4102c0:	9726      	str	r7, [sp, #152]	; 0x98
  4102c2:	f8c8 6000 	str.w	r6, [r8]
  4102c6:	f8c8 3004 	str.w	r3, [r8, #4]
  4102ca:	f300 8203 	bgt.w	4106d4 <_svfprintf_r+0xdf0>
  4102ce:	f108 0808 	add.w	r8, r8, #8
  4102d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4102d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4102d6:	f8c8 3000 	str.w	r3, [r8]
  4102da:	3701      	adds	r7, #1
  4102dc:	4414      	add	r4, r2
  4102de:	2f07      	cmp	r7, #7
  4102e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4102e2:	9726      	str	r7, [sp, #152]	; 0x98
  4102e4:	f8c8 2004 	str.w	r2, [r8, #4]
  4102e8:	f300 8200 	bgt.w	4106ec <_svfprintf_r+0xe08>
  4102ec:	f108 0808 	add.w	r8, r8, #8
  4102f0:	a815      	add	r0, sp, #84	; 0x54
  4102f2:	c80d      	ldmia	r0, {r0, r2, r3}
  4102f4:	9914      	ldr	r1, [sp, #80]	; 0x50
  4102f6:	f7fc f9f1 	bl	40c6dc <__aeabi_dcmpeq>
  4102fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4102fc:	2800      	cmp	r0, #0
  4102fe:	f040 8101 	bne.w	410504 <_svfprintf_r+0xc20>
  410302:	3b01      	subs	r3, #1
  410304:	3701      	adds	r7, #1
  410306:	3601      	adds	r6, #1
  410308:	441c      	add	r4, r3
  41030a:	2f07      	cmp	r7, #7
  41030c:	9726      	str	r7, [sp, #152]	; 0x98
  41030e:	9427      	str	r4, [sp, #156]	; 0x9c
  410310:	f8c8 6000 	str.w	r6, [r8]
  410314:	f8c8 3004 	str.w	r3, [r8, #4]
  410318:	f300 8127 	bgt.w	41056a <_svfprintf_r+0xc86>
  41031c:	f108 0808 	add.w	r8, r8, #8
  410320:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  410322:	f8c8 2004 	str.w	r2, [r8, #4]
  410326:	3701      	adds	r7, #1
  410328:	4414      	add	r4, r2
  41032a:	ab21      	add	r3, sp, #132	; 0x84
  41032c:	2f07      	cmp	r7, #7
  41032e:	9427      	str	r4, [sp, #156]	; 0x9c
  410330:	9726      	str	r7, [sp, #152]	; 0x98
  410332:	f8c8 3000 	str.w	r3, [r8]
  410336:	f77f acb3 	ble.w	40fca0 <_svfprintf_r+0x3bc>
  41033a:	aa25      	add	r2, sp, #148	; 0x94
  41033c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41033e:	980c      	ldr	r0, [sp, #48]	; 0x30
  410340:	f004 ffd0 	bl	4152e4 <__ssprint_r>
  410344:	2800      	cmp	r0, #0
  410346:	f47f ab9f 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  41034a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  41034c:	46c8      	mov	r8, r9
  41034e:	e4a9      	b.n	40fca4 <_svfprintf_r+0x3c0>
  410350:	aa25      	add	r2, sp, #148	; 0x94
  410352:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410354:	980c      	ldr	r0, [sp, #48]	; 0x30
  410356:	f004 ffc5 	bl	4152e4 <__ssprint_r>
  41035a:	2800      	cmp	r0, #0
  41035c:	f43f aceb 	beq.w	40fd36 <_svfprintf_r+0x452>
  410360:	f7ff bb92 	b.w	40fa88 <_svfprintf_r+0x1a4>
  410364:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410368:	2b01      	cmp	r3, #1
  41036a:	f000 8134 	beq.w	4105d6 <_svfprintf_r+0xcf2>
  41036e:	2b02      	cmp	r3, #2
  410370:	d125      	bne.n	4103be <_svfprintf_r+0xada>
  410372:	f8cd b01c 	str.w	fp, [sp, #28]
  410376:	2400      	movs	r4, #0
  410378:	2500      	movs	r5, #0
  41037a:	e61e      	b.n	40ffba <_svfprintf_r+0x6d6>
  41037c:	aa25      	add	r2, sp, #148	; 0x94
  41037e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410380:	980c      	ldr	r0, [sp, #48]	; 0x30
  410382:	f004 ffaf 	bl	4152e4 <__ssprint_r>
  410386:	2800      	cmp	r0, #0
  410388:	f47f ab7e 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  41038c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  41038e:	46c8      	mov	r8, r9
  410390:	e475      	b.n	40fc7e <_svfprintf_r+0x39a>
  410392:	aa25      	add	r2, sp, #148	; 0x94
  410394:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410396:	980c      	ldr	r0, [sp, #48]	; 0x30
  410398:	f004 ffa4 	bl	4152e4 <__ssprint_r>
  41039c:	2800      	cmp	r0, #0
  41039e:	f47f ab73 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  4103a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4103a4:	46c8      	mov	r8, r9
  4103a6:	e41b      	b.n	40fbe0 <_svfprintf_r+0x2fc>
  4103a8:	aa25      	add	r2, sp, #148	; 0x94
  4103aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4103ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4103ae:	f004 ff99 	bl	4152e4 <__ssprint_r>
  4103b2:	2800      	cmp	r0, #0
  4103b4:	f47f ab68 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  4103b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4103ba:	46c8      	mov	r8, r9
  4103bc:	e420      	b.n	40fc00 <_svfprintf_r+0x31c>
  4103be:	f8cd b01c 	str.w	fp, [sp, #28]
  4103c2:	2400      	movs	r4, #0
  4103c4:	2500      	movs	r5, #0
  4103c6:	4649      	mov	r1, r9
  4103c8:	e000      	b.n	4103cc <_svfprintf_r+0xae8>
  4103ca:	4631      	mov	r1, r6
  4103cc:	08e2      	lsrs	r2, r4, #3
  4103ce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4103d2:	08e8      	lsrs	r0, r5, #3
  4103d4:	f004 0307 	and.w	r3, r4, #7
  4103d8:	4605      	mov	r5, r0
  4103da:	4614      	mov	r4, r2
  4103dc:	3330      	adds	r3, #48	; 0x30
  4103de:	ea54 0205 	orrs.w	r2, r4, r5
  4103e2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4103e6:	f101 36ff 	add.w	r6, r1, #4294967295
  4103ea:	d1ee      	bne.n	4103ca <_svfprintf_r+0xae6>
  4103ec:	9a07      	ldr	r2, [sp, #28]
  4103ee:	07d2      	lsls	r2, r2, #31
  4103f0:	f57f adf3 	bpl.w	40ffda <_svfprintf_r+0x6f6>
  4103f4:	2b30      	cmp	r3, #48	; 0x30
  4103f6:	f43f adf0 	beq.w	40ffda <_svfprintf_r+0x6f6>
  4103fa:	3902      	subs	r1, #2
  4103fc:	2330      	movs	r3, #48	; 0x30
  4103fe:	f806 3c01 	strb.w	r3, [r6, #-1]
  410402:	eba9 0301 	sub.w	r3, r9, r1
  410406:	930e      	str	r3, [sp, #56]	; 0x38
  410408:	460e      	mov	r6, r1
  41040a:	f7ff bb7b 	b.w	40fb04 <_svfprintf_r+0x220>
  41040e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  410410:	2900      	cmp	r1, #0
  410412:	f340 822e 	ble.w	410872 <_svfprintf_r+0xf8e>
  410416:	9b12      	ldr	r3, [sp, #72]	; 0x48
  410418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  41041a:	4293      	cmp	r3, r2
  41041c:	bfa8      	it	ge
  41041e:	4613      	movge	r3, r2
  410420:	2b00      	cmp	r3, #0
  410422:	461f      	mov	r7, r3
  410424:	dd0d      	ble.n	410442 <_svfprintf_r+0xb5e>
  410426:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410428:	f8c8 6000 	str.w	r6, [r8]
  41042c:	3301      	adds	r3, #1
  41042e:	443c      	add	r4, r7
  410430:	2b07      	cmp	r3, #7
  410432:	9427      	str	r4, [sp, #156]	; 0x9c
  410434:	f8c8 7004 	str.w	r7, [r8, #4]
  410438:	9326      	str	r3, [sp, #152]	; 0x98
  41043a:	f300 831f 	bgt.w	410a7c <_svfprintf_r+0x1198>
  41043e:	f108 0808 	add.w	r8, r8, #8
  410442:	9b12      	ldr	r3, [sp, #72]	; 0x48
  410444:	2f00      	cmp	r7, #0
  410446:	bfa8      	it	ge
  410448:	1bdb      	subge	r3, r3, r7
  41044a:	2b00      	cmp	r3, #0
  41044c:	461f      	mov	r7, r3
  41044e:	f340 80d6 	ble.w	4105fe <_svfprintf_r+0xd1a>
  410452:	2f10      	cmp	r7, #16
  410454:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410456:	4d31      	ldr	r5, [pc, #196]	; (41051c <_svfprintf_r+0xc38>)
  410458:	f340 81ed 	ble.w	410836 <_svfprintf_r+0xf52>
  41045c:	4642      	mov	r2, r8
  41045e:	4621      	mov	r1, r4
  410460:	46b0      	mov	r8, r6
  410462:	f04f 0b10 	mov.w	fp, #16
  410466:	462e      	mov	r6, r5
  410468:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41046a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41046c:	e004      	b.n	410478 <_svfprintf_r+0xb94>
  41046e:	3208      	adds	r2, #8
  410470:	3f10      	subs	r7, #16
  410472:	2f10      	cmp	r7, #16
  410474:	f340 81db 	ble.w	41082e <_svfprintf_r+0xf4a>
  410478:	3301      	adds	r3, #1
  41047a:	3110      	adds	r1, #16
  41047c:	2b07      	cmp	r3, #7
  41047e:	9127      	str	r1, [sp, #156]	; 0x9c
  410480:	9326      	str	r3, [sp, #152]	; 0x98
  410482:	e882 0840 	stmia.w	r2, {r6, fp}
  410486:	ddf2      	ble.n	41046e <_svfprintf_r+0xb8a>
  410488:	aa25      	add	r2, sp, #148	; 0x94
  41048a:	4629      	mov	r1, r5
  41048c:	4620      	mov	r0, r4
  41048e:	f004 ff29 	bl	4152e4 <__ssprint_r>
  410492:	2800      	cmp	r0, #0
  410494:	f47f aaf8 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410498:	9927      	ldr	r1, [sp, #156]	; 0x9c
  41049a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  41049c:	464a      	mov	r2, r9
  41049e:	e7e7      	b.n	410470 <_svfprintf_r+0xb8c>
  4104a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4104a2:	930e      	str	r3, [sp, #56]	; 0x38
  4104a4:	464e      	mov	r6, r9
  4104a6:	f7ff bb2d 	b.w	40fb04 <_svfprintf_r+0x220>
  4104aa:	2d00      	cmp	r5, #0
  4104ac:	bf08      	it	eq
  4104ae:	2c0a      	cmpeq	r4, #10
  4104b0:	f0c0 808f 	bcc.w	4105d2 <_svfprintf_r+0xcee>
  4104b4:	464e      	mov	r6, r9
  4104b6:	4620      	mov	r0, r4
  4104b8:	4629      	mov	r1, r5
  4104ba:	220a      	movs	r2, #10
  4104bc:	2300      	movs	r3, #0
  4104be:	f7fc f987 	bl	40c7d0 <__aeabi_uldivmod>
  4104c2:	3230      	adds	r2, #48	; 0x30
  4104c4:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4104c8:	4620      	mov	r0, r4
  4104ca:	4629      	mov	r1, r5
  4104cc:	2300      	movs	r3, #0
  4104ce:	220a      	movs	r2, #10
  4104d0:	f7fc f97e 	bl	40c7d0 <__aeabi_uldivmod>
  4104d4:	4604      	mov	r4, r0
  4104d6:	460d      	mov	r5, r1
  4104d8:	ea54 0305 	orrs.w	r3, r4, r5
  4104dc:	d1eb      	bne.n	4104b6 <_svfprintf_r+0xbd2>
  4104de:	eba9 0306 	sub.w	r3, r9, r6
  4104e2:	930e      	str	r3, [sp, #56]	; 0x38
  4104e4:	f7ff bb0e 	b.w	40fb04 <_svfprintf_r+0x220>
  4104e8:	aa25      	add	r2, sp, #148	; 0x94
  4104ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4104ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  4104ee:	f004 fef9 	bl	4152e4 <__ssprint_r>
  4104f2:	2800      	cmp	r0, #0
  4104f4:	f47f aac8 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  4104f8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4104fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4104fe:	46c8      	mov	r8, r9
  410500:	f7ff bb5e 	b.w	40fbc0 <_svfprintf_r+0x2dc>
  410504:	1e5e      	subs	r6, r3, #1
  410506:	2e00      	cmp	r6, #0
  410508:	f77f af0a 	ble.w	410320 <_svfprintf_r+0xa3c>
  41050c:	2e10      	cmp	r6, #16
  41050e:	4d03      	ldr	r5, [pc, #12]	; (41051c <_svfprintf_r+0xc38>)
  410510:	dd22      	ble.n	410558 <_svfprintf_r+0xc74>
  410512:	4622      	mov	r2, r4
  410514:	f04f 0b10 	mov.w	fp, #16
  410518:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41051a:	e006      	b.n	41052a <_svfprintf_r+0xc46>
  41051c:	0041752c 	.word	0x0041752c
  410520:	3e10      	subs	r6, #16
  410522:	2e10      	cmp	r6, #16
  410524:	f108 0808 	add.w	r8, r8, #8
  410528:	dd15      	ble.n	410556 <_svfprintf_r+0xc72>
  41052a:	3701      	adds	r7, #1
  41052c:	3210      	adds	r2, #16
  41052e:	2f07      	cmp	r7, #7
  410530:	9227      	str	r2, [sp, #156]	; 0x9c
  410532:	9726      	str	r7, [sp, #152]	; 0x98
  410534:	e888 0820 	stmia.w	r8, {r5, fp}
  410538:	ddf2      	ble.n	410520 <_svfprintf_r+0xc3c>
  41053a:	aa25      	add	r2, sp, #148	; 0x94
  41053c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41053e:	4620      	mov	r0, r4
  410540:	f004 fed0 	bl	4152e4 <__ssprint_r>
  410544:	2800      	cmp	r0, #0
  410546:	f47f aa9f 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  41054a:	3e10      	subs	r6, #16
  41054c:	2e10      	cmp	r6, #16
  41054e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  410550:	9f26      	ldr	r7, [sp, #152]	; 0x98
  410552:	46c8      	mov	r8, r9
  410554:	dce9      	bgt.n	41052a <_svfprintf_r+0xc46>
  410556:	4614      	mov	r4, r2
  410558:	3701      	adds	r7, #1
  41055a:	4434      	add	r4, r6
  41055c:	2f07      	cmp	r7, #7
  41055e:	9427      	str	r4, [sp, #156]	; 0x9c
  410560:	9726      	str	r7, [sp, #152]	; 0x98
  410562:	e888 0060 	stmia.w	r8, {r5, r6}
  410566:	f77f aed9 	ble.w	41031c <_svfprintf_r+0xa38>
  41056a:	aa25      	add	r2, sp, #148	; 0x94
  41056c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41056e:	980c      	ldr	r0, [sp, #48]	; 0x30
  410570:	f004 feb8 	bl	4152e4 <__ssprint_r>
  410574:	2800      	cmp	r0, #0
  410576:	f47f aa87 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  41057a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  41057c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  41057e:	46c8      	mov	r8, r9
  410580:	e6ce      	b.n	410320 <_svfprintf_r+0xa3c>
  410582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410584:	6814      	ldr	r4, [r2, #0]
  410586:	4613      	mov	r3, r2
  410588:	3304      	adds	r3, #4
  41058a:	17e5      	asrs	r5, r4, #31
  41058c:	930f      	str	r3, [sp, #60]	; 0x3c
  41058e:	4622      	mov	r2, r4
  410590:	462b      	mov	r3, r5
  410592:	e4fa      	b.n	40ff8a <_svfprintf_r+0x6a6>
  410594:	3204      	adds	r2, #4
  410596:	681c      	ldr	r4, [r3, #0]
  410598:	920f      	str	r2, [sp, #60]	; 0x3c
  41059a:	2301      	movs	r3, #1
  41059c:	2500      	movs	r5, #0
  41059e:	f7ff ba94 	b.w	40faca <_svfprintf_r+0x1e6>
  4105a2:	681c      	ldr	r4, [r3, #0]
  4105a4:	3304      	adds	r3, #4
  4105a6:	930f      	str	r3, [sp, #60]	; 0x3c
  4105a8:	2500      	movs	r5, #0
  4105aa:	e421      	b.n	40fdf0 <_svfprintf_r+0x50c>
  4105ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4105ae:	460a      	mov	r2, r1
  4105b0:	3204      	adds	r2, #4
  4105b2:	680c      	ldr	r4, [r1, #0]
  4105b4:	920f      	str	r2, [sp, #60]	; 0x3c
  4105b6:	2500      	movs	r5, #0
  4105b8:	f7ff ba87 	b.w	40faca <_svfprintf_r+0x1e6>
  4105bc:	4614      	mov	r4, r2
  4105be:	3301      	adds	r3, #1
  4105c0:	4434      	add	r4, r6
  4105c2:	2b07      	cmp	r3, #7
  4105c4:	9427      	str	r4, [sp, #156]	; 0x9c
  4105c6:	9326      	str	r3, [sp, #152]	; 0x98
  4105c8:	e888 0060 	stmia.w	r8, {r5, r6}
  4105cc:	f77f ab68 	ble.w	40fca0 <_svfprintf_r+0x3bc>
  4105d0:	e6b3      	b.n	41033a <_svfprintf_r+0xa56>
  4105d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4105d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4105da:	ae42      	add	r6, sp, #264	; 0x108
  4105dc:	3430      	adds	r4, #48	; 0x30
  4105de:	2301      	movs	r3, #1
  4105e0:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4105e4:	930e      	str	r3, [sp, #56]	; 0x38
  4105e6:	f7ff ba8d 	b.w	40fb04 <_svfprintf_r+0x220>
  4105ea:	aa25      	add	r2, sp, #148	; 0x94
  4105ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4105ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4105f0:	f004 fe78 	bl	4152e4 <__ssprint_r>
  4105f4:	2800      	cmp	r0, #0
  4105f6:	f47f aa47 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  4105fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4105fc:	46c8      	mov	r8, r9
  4105fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  410600:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  410602:	429a      	cmp	r2, r3
  410604:	db44      	blt.n	410690 <_svfprintf_r+0xdac>
  410606:	9b07      	ldr	r3, [sp, #28]
  410608:	07d9      	lsls	r1, r3, #31
  41060a:	d441      	bmi.n	410690 <_svfprintf_r+0xdac>
  41060c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  41060e:	9812      	ldr	r0, [sp, #72]	; 0x48
  410610:	1a9a      	subs	r2, r3, r2
  410612:	1a1d      	subs	r5, r3, r0
  410614:	4295      	cmp	r5, r2
  410616:	bfa8      	it	ge
  410618:	4615      	movge	r5, r2
  41061a:	2d00      	cmp	r5, #0
  41061c:	dd0e      	ble.n	41063c <_svfprintf_r+0xd58>
  41061e:	9926      	ldr	r1, [sp, #152]	; 0x98
  410620:	f8c8 5004 	str.w	r5, [r8, #4]
  410624:	3101      	adds	r1, #1
  410626:	4406      	add	r6, r0
  410628:	442c      	add	r4, r5
  41062a:	2907      	cmp	r1, #7
  41062c:	f8c8 6000 	str.w	r6, [r8]
  410630:	9427      	str	r4, [sp, #156]	; 0x9c
  410632:	9126      	str	r1, [sp, #152]	; 0x98
  410634:	f300 823b 	bgt.w	410aae <_svfprintf_r+0x11ca>
  410638:	f108 0808 	add.w	r8, r8, #8
  41063c:	2d00      	cmp	r5, #0
  41063e:	bfac      	ite	ge
  410640:	1b56      	subge	r6, r2, r5
  410642:	4616      	movlt	r6, r2
  410644:	2e00      	cmp	r6, #0
  410646:	f77f ab2d 	ble.w	40fca4 <_svfprintf_r+0x3c0>
  41064a:	2e10      	cmp	r6, #16
  41064c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  41064e:	4db0      	ldr	r5, [pc, #704]	; (410910 <_svfprintf_r+0x102c>)
  410650:	ddb5      	ble.n	4105be <_svfprintf_r+0xcda>
  410652:	4622      	mov	r2, r4
  410654:	2710      	movs	r7, #16
  410656:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  41065a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  41065c:	e004      	b.n	410668 <_svfprintf_r+0xd84>
  41065e:	f108 0808 	add.w	r8, r8, #8
  410662:	3e10      	subs	r6, #16
  410664:	2e10      	cmp	r6, #16
  410666:	dda9      	ble.n	4105bc <_svfprintf_r+0xcd8>
  410668:	3301      	adds	r3, #1
  41066a:	3210      	adds	r2, #16
  41066c:	2b07      	cmp	r3, #7
  41066e:	9227      	str	r2, [sp, #156]	; 0x9c
  410670:	9326      	str	r3, [sp, #152]	; 0x98
  410672:	e888 00a0 	stmia.w	r8, {r5, r7}
  410676:	ddf2      	ble.n	41065e <_svfprintf_r+0xd7a>
  410678:	aa25      	add	r2, sp, #148	; 0x94
  41067a:	4621      	mov	r1, r4
  41067c:	4658      	mov	r0, fp
  41067e:	f004 fe31 	bl	4152e4 <__ssprint_r>
  410682:	2800      	cmp	r0, #0
  410684:	f47f aa00 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410688:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  41068a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  41068c:	46c8      	mov	r8, r9
  41068e:	e7e8      	b.n	410662 <_svfprintf_r+0xd7e>
  410690:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410692:	9819      	ldr	r0, [sp, #100]	; 0x64
  410694:	991a      	ldr	r1, [sp, #104]	; 0x68
  410696:	f8c8 1000 	str.w	r1, [r8]
  41069a:	3301      	adds	r3, #1
  41069c:	4404      	add	r4, r0
  41069e:	2b07      	cmp	r3, #7
  4106a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4106a2:	f8c8 0004 	str.w	r0, [r8, #4]
  4106a6:	9326      	str	r3, [sp, #152]	; 0x98
  4106a8:	f300 81f5 	bgt.w	410a96 <_svfprintf_r+0x11b2>
  4106ac:	f108 0808 	add.w	r8, r8, #8
  4106b0:	e7ac      	b.n	41060c <_svfprintf_r+0xd28>
  4106b2:	9b07      	ldr	r3, [sp, #28]
  4106b4:	07da      	lsls	r2, r3, #31
  4106b6:	f53f adfe 	bmi.w	4102b6 <_svfprintf_r+0x9d2>
  4106ba:	3701      	adds	r7, #1
  4106bc:	3401      	adds	r4, #1
  4106be:	2301      	movs	r3, #1
  4106c0:	2f07      	cmp	r7, #7
  4106c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4106c4:	9726      	str	r7, [sp, #152]	; 0x98
  4106c6:	f8c8 6000 	str.w	r6, [r8]
  4106ca:	f8c8 3004 	str.w	r3, [r8, #4]
  4106ce:	f77f ae25 	ble.w	41031c <_svfprintf_r+0xa38>
  4106d2:	e74a      	b.n	41056a <_svfprintf_r+0xc86>
  4106d4:	aa25      	add	r2, sp, #148	; 0x94
  4106d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4106d8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4106da:	f004 fe03 	bl	4152e4 <__ssprint_r>
  4106de:	2800      	cmp	r0, #0
  4106e0:	f47f a9d2 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  4106e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4106e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4106e8:	46c8      	mov	r8, r9
  4106ea:	e5f2      	b.n	4102d2 <_svfprintf_r+0x9ee>
  4106ec:	aa25      	add	r2, sp, #148	; 0x94
  4106ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4106f0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4106f2:	f004 fdf7 	bl	4152e4 <__ssprint_r>
  4106f6:	2800      	cmp	r0, #0
  4106f8:	f47f a9c6 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  4106fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4106fe:	9f26      	ldr	r7, [sp, #152]	; 0x98
  410700:	46c8      	mov	r8, r9
  410702:	e5f5      	b.n	4102f0 <_svfprintf_r+0xa0c>
  410704:	464e      	mov	r6, r9
  410706:	f7ff b9fd 	b.w	40fb04 <_svfprintf_r+0x220>
  41070a:	aa25      	add	r2, sp, #148	; 0x94
  41070c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41070e:	980c      	ldr	r0, [sp, #48]	; 0x30
  410710:	f004 fde8 	bl	4152e4 <__ssprint_r>
  410714:	2800      	cmp	r0, #0
  410716:	f47f a9b7 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  41071a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  41071c:	46c8      	mov	r8, r9
  41071e:	f7ff ba72 	b.w	40fc06 <_svfprintf_r+0x322>
  410722:	9c15      	ldr	r4, [sp, #84]	; 0x54
  410724:	4622      	mov	r2, r4
  410726:	4620      	mov	r0, r4
  410728:	9c14      	ldr	r4, [sp, #80]	; 0x50
  41072a:	4623      	mov	r3, r4
  41072c:	4621      	mov	r1, r4
  41072e:	f005 fa57 	bl	415be0 <__aeabi_dcmpun>
  410732:	2800      	cmp	r0, #0
  410734:	f040 8286 	bne.w	410c44 <_svfprintf_r+0x1360>
  410738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41073a:	3301      	adds	r3, #1
  41073c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  41073e:	f023 0320 	bic.w	r3, r3, #32
  410742:	930e      	str	r3, [sp, #56]	; 0x38
  410744:	f000 81e2 	beq.w	410b0c <_svfprintf_r+0x1228>
  410748:	2b47      	cmp	r3, #71	; 0x47
  41074a:	f000 811e 	beq.w	41098a <_svfprintf_r+0x10a6>
  41074e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  410752:	9307      	str	r3, [sp, #28]
  410754:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410756:	1e1f      	subs	r7, r3, #0
  410758:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41075a:	9308      	str	r3, [sp, #32]
  41075c:	bfbb      	ittet	lt
  41075e:	463b      	movlt	r3, r7
  410760:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  410764:	2300      	movge	r3, #0
  410766:	232d      	movlt	r3, #45	; 0x2d
  410768:	9310      	str	r3, [sp, #64]	; 0x40
  41076a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  41076c:	2b66      	cmp	r3, #102	; 0x66
  41076e:	f000 81bb 	beq.w	410ae8 <_svfprintf_r+0x1204>
  410772:	2b46      	cmp	r3, #70	; 0x46
  410774:	f000 80df 	beq.w	410936 <_svfprintf_r+0x1052>
  410778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41077a:	9a08      	ldr	r2, [sp, #32]
  41077c:	2b45      	cmp	r3, #69	; 0x45
  41077e:	bf0c      	ite	eq
  410780:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  410782:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  410784:	a823      	add	r0, sp, #140	; 0x8c
  410786:	a920      	add	r1, sp, #128	; 0x80
  410788:	bf08      	it	eq
  41078a:	1c5d      	addeq	r5, r3, #1
  41078c:	9004      	str	r0, [sp, #16]
  41078e:	9103      	str	r1, [sp, #12]
  410790:	a81f      	add	r0, sp, #124	; 0x7c
  410792:	2102      	movs	r1, #2
  410794:	463b      	mov	r3, r7
  410796:	9002      	str	r0, [sp, #8]
  410798:	9501      	str	r5, [sp, #4]
  41079a:	9100      	str	r1, [sp, #0]
  41079c:	980c      	ldr	r0, [sp, #48]	; 0x30
  41079e:	f002 f9e3 	bl	412b68 <_dtoa_r>
  4107a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4107a4:	2b67      	cmp	r3, #103	; 0x67
  4107a6:	4606      	mov	r6, r0
  4107a8:	f040 81e0 	bne.w	410b6c <_svfprintf_r+0x1288>
  4107ac:	f01b 0f01 	tst.w	fp, #1
  4107b0:	f000 8246 	beq.w	410c40 <_svfprintf_r+0x135c>
  4107b4:	1974      	adds	r4, r6, r5
  4107b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4107b8:	9808      	ldr	r0, [sp, #32]
  4107ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4107bc:	4639      	mov	r1, r7
  4107be:	f7fb ff8d 	bl	40c6dc <__aeabi_dcmpeq>
  4107c2:	2800      	cmp	r0, #0
  4107c4:	f040 8165 	bne.w	410a92 <_svfprintf_r+0x11ae>
  4107c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4107ca:	42a3      	cmp	r3, r4
  4107cc:	d206      	bcs.n	4107dc <_svfprintf_r+0xef8>
  4107ce:	2130      	movs	r1, #48	; 0x30
  4107d0:	1c5a      	adds	r2, r3, #1
  4107d2:	9223      	str	r2, [sp, #140]	; 0x8c
  4107d4:	7019      	strb	r1, [r3, #0]
  4107d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4107d8:	429c      	cmp	r4, r3
  4107da:	d8f9      	bhi.n	4107d0 <_svfprintf_r+0xeec>
  4107dc:	1b9b      	subs	r3, r3, r6
  4107de:	9313      	str	r3, [sp, #76]	; 0x4c
  4107e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4107e2:	2b47      	cmp	r3, #71	; 0x47
  4107e4:	f000 80e9 	beq.w	4109ba <_svfprintf_r+0x10d6>
  4107e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4107ea:	2b65      	cmp	r3, #101	; 0x65
  4107ec:	f340 81cd 	ble.w	410b8a <_svfprintf_r+0x12a6>
  4107f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4107f2:	2b66      	cmp	r3, #102	; 0x66
  4107f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4107f6:	9312      	str	r3, [sp, #72]	; 0x48
  4107f8:	f000 819e 	beq.w	410b38 <_svfprintf_r+0x1254>
  4107fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4107fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  410800:	4619      	mov	r1, r3
  410802:	4291      	cmp	r1, r2
  410804:	f300 818a 	bgt.w	410b1c <_svfprintf_r+0x1238>
  410808:	f01b 0f01 	tst.w	fp, #1
  41080c:	f040 8213 	bne.w	410c36 <_svfprintf_r+0x1352>
  410810:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  410814:	9308      	str	r3, [sp, #32]
  410816:	2367      	movs	r3, #103	; 0x67
  410818:	920e      	str	r2, [sp, #56]	; 0x38
  41081a:	9311      	str	r3, [sp, #68]	; 0x44
  41081c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  41081e:	2b00      	cmp	r3, #0
  410820:	f040 80c4 	bne.w	4109ac <_svfprintf_r+0x10c8>
  410824:	930a      	str	r3, [sp, #40]	; 0x28
  410826:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  41082a:	f7ff b973 	b.w	40fb14 <_svfprintf_r+0x230>
  41082e:	4635      	mov	r5, r6
  410830:	460c      	mov	r4, r1
  410832:	4646      	mov	r6, r8
  410834:	4690      	mov	r8, r2
  410836:	3301      	adds	r3, #1
  410838:	443c      	add	r4, r7
  41083a:	2b07      	cmp	r3, #7
  41083c:	9427      	str	r4, [sp, #156]	; 0x9c
  41083e:	9326      	str	r3, [sp, #152]	; 0x98
  410840:	e888 00a0 	stmia.w	r8, {r5, r7}
  410844:	f73f aed1 	bgt.w	4105ea <_svfprintf_r+0xd06>
  410848:	f108 0808 	add.w	r8, r8, #8
  41084c:	e6d7      	b.n	4105fe <_svfprintf_r+0xd1a>
  41084e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410850:	6813      	ldr	r3, [r2, #0]
  410852:	3204      	adds	r2, #4
  410854:	920f      	str	r2, [sp, #60]	; 0x3c
  410856:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410858:	601a      	str	r2, [r3, #0]
  41085a:	f7ff b86a 	b.w	40f932 <_svfprintf_r+0x4e>
  41085e:	aa25      	add	r2, sp, #148	; 0x94
  410860:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410862:	980c      	ldr	r0, [sp, #48]	; 0x30
  410864:	f004 fd3e 	bl	4152e4 <__ssprint_r>
  410868:	2800      	cmp	r0, #0
  41086a:	f47f a90d 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  41086e:	46c8      	mov	r8, r9
  410870:	e48d      	b.n	41018e <_svfprintf_r+0x8aa>
  410872:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410874:	4a27      	ldr	r2, [pc, #156]	; (410914 <_svfprintf_r+0x1030>)
  410876:	f8c8 2000 	str.w	r2, [r8]
  41087a:	3301      	adds	r3, #1
  41087c:	3401      	adds	r4, #1
  41087e:	2201      	movs	r2, #1
  410880:	2b07      	cmp	r3, #7
  410882:	9427      	str	r4, [sp, #156]	; 0x9c
  410884:	9326      	str	r3, [sp, #152]	; 0x98
  410886:	f8c8 2004 	str.w	r2, [r8, #4]
  41088a:	dc72      	bgt.n	410972 <_svfprintf_r+0x108e>
  41088c:	f108 0808 	add.w	r8, r8, #8
  410890:	b929      	cbnz	r1, 41089e <_svfprintf_r+0xfba>
  410892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  410894:	b91b      	cbnz	r3, 41089e <_svfprintf_r+0xfba>
  410896:	9b07      	ldr	r3, [sp, #28]
  410898:	07d8      	lsls	r0, r3, #31
  41089a:	f57f aa03 	bpl.w	40fca4 <_svfprintf_r+0x3c0>
  41089e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4108a0:	9819      	ldr	r0, [sp, #100]	; 0x64
  4108a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4108a4:	f8c8 2000 	str.w	r2, [r8]
  4108a8:	3301      	adds	r3, #1
  4108aa:	4602      	mov	r2, r0
  4108ac:	4422      	add	r2, r4
  4108ae:	2b07      	cmp	r3, #7
  4108b0:	9227      	str	r2, [sp, #156]	; 0x9c
  4108b2:	f8c8 0004 	str.w	r0, [r8, #4]
  4108b6:	9326      	str	r3, [sp, #152]	; 0x98
  4108b8:	f300 818d 	bgt.w	410bd6 <_svfprintf_r+0x12f2>
  4108bc:	f108 0808 	add.w	r8, r8, #8
  4108c0:	2900      	cmp	r1, #0
  4108c2:	f2c0 8165 	blt.w	410b90 <_svfprintf_r+0x12ac>
  4108c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4108c8:	f8c8 6000 	str.w	r6, [r8]
  4108cc:	3301      	adds	r3, #1
  4108ce:	188c      	adds	r4, r1, r2
  4108d0:	2b07      	cmp	r3, #7
  4108d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4108d4:	9326      	str	r3, [sp, #152]	; 0x98
  4108d6:	f8c8 1004 	str.w	r1, [r8, #4]
  4108da:	f77f a9e1 	ble.w	40fca0 <_svfprintf_r+0x3bc>
  4108de:	e52c      	b.n	41033a <_svfprintf_r+0xa56>
  4108e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4108e2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4108e4:	6813      	ldr	r3, [r2, #0]
  4108e6:	17cd      	asrs	r5, r1, #31
  4108e8:	4608      	mov	r0, r1
  4108ea:	3204      	adds	r2, #4
  4108ec:	4629      	mov	r1, r5
  4108ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4108f0:	e9c3 0100 	strd	r0, r1, [r3]
  4108f4:	f7ff b81d 	b.w	40f932 <_svfprintf_r+0x4e>
  4108f8:	aa25      	add	r2, sp, #148	; 0x94
  4108fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4108fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4108fe:	f004 fcf1 	bl	4152e4 <__ssprint_r>
  410902:	2800      	cmp	r0, #0
  410904:	f47f a8c0 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410908:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  41090a:	46c8      	mov	r8, r9
  41090c:	e458      	b.n	4101c0 <_svfprintf_r+0x8dc>
  41090e:	bf00      	nop
  410910:	0041752c 	.word	0x0041752c
  410914:	00417518 	.word	0x00417518
  410918:	2140      	movs	r1, #64	; 0x40
  41091a:	980c      	ldr	r0, [sp, #48]	; 0x30
  41091c:	f7fc fe4a 	bl	40d5b4 <_malloc_r>
  410920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410922:	6010      	str	r0, [r2, #0]
  410924:	6110      	str	r0, [r2, #16]
  410926:	2800      	cmp	r0, #0
  410928:	f000 81f2 	beq.w	410d10 <_svfprintf_r+0x142c>
  41092c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41092e:	2340      	movs	r3, #64	; 0x40
  410930:	6153      	str	r3, [r2, #20]
  410932:	f7fe bfee 	b.w	40f912 <_svfprintf_r+0x2e>
  410936:	a823      	add	r0, sp, #140	; 0x8c
  410938:	a920      	add	r1, sp, #128	; 0x80
  41093a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  41093c:	9004      	str	r0, [sp, #16]
  41093e:	9103      	str	r1, [sp, #12]
  410940:	a81f      	add	r0, sp, #124	; 0x7c
  410942:	2103      	movs	r1, #3
  410944:	9002      	str	r0, [sp, #8]
  410946:	9a08      	ldr	r2, [sp, #32]
  410948:	9401      	str	r4, [sp, #4]
  41094a:	463b      	mov	r3, r7
  41094c:	9100      	str	r1, [sp, #0]
  41094e:	980c      	ldr	r0, [sp, #48]	; 0x30
  410950:	f002 f90a 	bl	412b68 <_dtoa_r>
  410954:	4625      	mov	r5, r4
  410956:	4606      	mov	r6, r0
  410958:	9b11      	ldr	r3, [sp, #68]	; 0x44
  41095a:	2b46      	cmp	r3, #70	; 0x46
  41095c:	eb06 0405 	add.w	r4, r6, r5
  410960:	f47f af29 	bne.w	4107b6 <_svfprintf_r+0xed2>
  410964:	7833      	ldrb	r3, [r6, #0]
  410966:	2b30      	cmp	r3, #48	; 0x30
  410968:	f000 8178 	beq.w	410c5c <_svfprintf_r+0x1378>
  41096c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  41096e:	442c      	add	r4, r5
  410970:	e721      	b.n	4107b6 <_svfprintf_r+0xed2>
  410972:	aa25      	add	r2, sp, #148	; 0x94
  410974:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410976:	980c      	ldr	r0, [sp, #48]	; 0x30
  410978:	f004 fcb4 	bl	4152e4 <__ssprint_r>
  41097c:	2800      	cmp	r0, #0
  41097e:	f47f a883 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410982:	991f      	ldr	r1, [sp, #124]	; 0x7c
  410984:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  410986:	46c8      	mov	r8, r9
  410988:	e782      	b.n	410890 <_svfprintf_r+0xfac>
  41098a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41098c:	2b00      	cmp	r3, #0
  41098e:	bf08      	it	eq
  410990:	2301      	moveq	r3, #1
  410992:	930a      	str	r3, [sp, #40]	; 0x28
  410994:	e6db      	b.n	41074e <_svfprintf_r+0xe6a>
  410996:	4630      	mov	r0, r6
  410998:	940a      	str	r4, [sp, #40]	; 0x28
  41099a:	f7fd ff11 	bl	40e7c0 <strlen>
  41099e:	950f      	str	r5, [sp, #60]	; 0x3c
  4109a0:	900e      	str	r0, [sp, #56]	; 0x38
  4109a2:	f8cd b01c 	str.w	fp, [sp, #28]
  4109a6:	4603      	mov	r3, r0
  4109a8:	f7ff b9f9 	b.w	40fd9e <_svfprintf_r+0x4ba>
  4109ac:	272d      	movs	r7, #45	; 0x2d
  4109ae:	2300      	movs	r3, #0
  4109b0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4109b4:	930a      	str	r3, [sp, #40]	; 0x28
  4109b6:	f7ff b8ae 	b.w	40fb16 <_svfprintf_r+0x232>
  4109ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4109bc:	9312      	str	r3, [sp, #72]	; 0x48
  4109be:	461a      	mov	r2, r3
  4109c0:	3303      	adds	r3, #3
  4109c2:	db04      	blt.n	4109ce <_svfprintf_r+0x10ea>
  4109c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4109c6:	4619      	mov	r1, r3
  4109c8:	4291      	cmp	r1, r2
  4109ca:	f6bf af17 	bge.w	4107fc <_svfprintf_r+0xf18>
  4109ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4109d0:	3b02      	subs	r3, #2
  4109d2:	9311      	str	r3, [sp, #68]	; 0x44
  4109d4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4109d8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4109dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4109de:	3b01      	subs	r3, #1
  4109e0:	2b00      	cmp	r3, #0
  4109e2:	931f      	str	r3, [sp, #124]	; 0x7c
  4109e4:	bfbd      	ittte	lt
  4109e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4109e8:	f1c3 0301 	rsblt	r3, r3, #1
  4109ec:	222d      	movlt	r2, #45	; 0x2d
  4109ee:	222b      	movge	r2, #43	; 0x2b
  4109f0:	2b09      	cmp	r3, #9
  4109f2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4109f6:	f340 8116 	ble.w	410c26 <_svfprintf_r+0x1342>
  4109fa:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4109fe:	4620      	mov	r0, r4
  410a00:	4dab      	ldr	r5, [pc, #684]	; (410cb0 <_svfprintf_r+0x13cc>)
  410a02:	e000      	b.n	410a06 <_svfprintf_r+0x1122>
  410a04:	4610      	mov	r0, r2
  410a06:	fb85 1203 	smull	r1, r2, r5, r3
  410a0a:	17d9      	asrs	r1, r3, #31
  410a0c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  410a10:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  410a14:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  410a18:	3230      	adds	r2, #48	; 0x30
  410a1a:	2909      	cmp	r1, #9
  410a1c:	f800 2c01 	strb.w	r2, [r0, #-1]
  410a20:	460b      	mov	r3, r1
  410a22:	f100 32ff 	add.w	r2, r0, #4294967295
  410a26:	dced      	bgt.n	410a04 <_svfprintf_r+0x1120>
  410a28:	3330      	adds	r3, #48	; 0x30
  410a2a:	3802      	subs	r0, #2
  410a2c:	b2d9      	uxtb	r1, r3
  410a2e:	4284      	cmp	r4, r0
  410a30:	f802 1c01 	strb.w	r1, [r2, #-1]
  410a34:	f240 8165 	bls.w	410d02 <_svfprintf_r+0x141e>
  410a38:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  410a3c:	4613      	mov	r3, r2
  410a3e:	e001      	b.n	410a44 <_svfprintf_r+0x1160>
  410a40:	f813 1b01 	ldrb.w	r1, [r3], #1
  410a44:	f800 1b01 	strb.w	r1, [r0], #1
  410a48:	42a3      	cmp	r3, r4
  410a4a:	d1f9      	bne.n	410a40 <_svfprintf_r+0x115c>
  410a4c:	3301      	adds	r3, #1
  410a4e:	1a9b      	subs	r3, r3, r2
  410a50:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  410a54:	4413      	add	r3, r2
  410a56:	aa21      	add	r2, sp, #132	; 0x84
  410a58:	1a9b      	subs	r3, r3, r2
  410a5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  410a5c:	931b      	str	r3, [sp, #108]	; 0x6c
  410a5e:	2a01      	cmp	r2, #1
  410a60:	4413      	add	r3, r2
  410a62:	930e      	str	r3, [sp, #56]	; 0x38
  410a64:	f340 8119 	ble.w	410c9a <_svfprintf_r+0x13b6>
  410a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410a6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410a6c:	4413      	add	r3, r2
  410a6e:	930e      	str	r3, [sp, #56]	; 0x38
  410a70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  410a74:	9308      	str	r3, [sp, #32]
  410a76:	2300      	movs	r3, #0
  410a78:	9312      	str	r3, [sp, #72]	; 0x48
  410a7a:	e6cf      	b.n	41081c <_svfprintf_r+0xf38>
  410a7c:	aa25      	add	r2, sp, #148	; 0x94
  410a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410a80:	980c      	ldr	r0, [sp, #48]	; 0x30
  410a82:	f004 fc2f 	bl	4152e4 <__ssprint_r>
  410a86:	2800      	cmp	r0, #0
  410a88:	f47e affe 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410a8c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  410a8e:	46c8      	mov	r8, r9
  410a90:	e4d7      	b.n	410442 <_svfprintf_r+0xb5e>
  410a92:	4623      	mov	r3, r4
  410a94:	e6a2      	b.n	4107dc <_svfprintf_r+0xef8>
  410a96:	aa25      	add	r2, sp, #148	; 0x94
  410a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  410a9c:	f004 fc22 	bl	4152e4 <__ssprint_r>
  410aa0:	2800      	cmp	r0, #0
  410aa2:	f47e aff1 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410aa6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  410aa8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  410aaa:	46c8      	mov	r8, r9
  410aac:	e5ae      	b.n	41060c <_svfprintf_r+0xd28>
  410aae:	aa25      	add	r2, sp, #148	; 0x94
  410ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410ab2:	980c      	ldr	r0, [sp, #48]	; 0x30
  410ab4:	f004 fc16 	bl	4152e4 <__ssprint_r>
  410ab8:	2800      	cmp	r0, #0
  410aba:	f47e afe5 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410abe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  410ac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  410ac2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  410ac4:	1a9a      	subs	r2, r3, r2
  410ac6:	46c8      	mov	r8, r9
  410ac8:	e5b8      	b.n	41063c <_svfprintf_r+0xd58>
  410aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410acc:	9612      	str	r6, [sp, #72]	; 0x48
  410ace:	2b06      	cmp	r3, #6
  410ad0:	bf28      	it	cs
  410ad2:	2306      	movcs	r3, #6
  410ad4:	960a      	str	r6, [sp, #40]	; 0x28
  410ad6:	4637      	mov	r7, r6
  410ad8:	9308      	str	r3, [sp, #32]
  410ada:	950f      	str	r5, [sp, #60]	; 0x3c
  410adc:	f8cd b01c 	str.w	fp, [sp, #28]
  410ae0:	930e      	str	r3, [sp, #56]	; 0x38
  410ae2:	4e74      	ldr	r6, [pc, #464]	; (410cb4 <_svfprintf_r+0x13d0>)
  410ae4:	f7ff b816 	b.w	40fb14 <_svfprintf_r+0x230>
  410ae8:	a823      	add	r0, sp, #140	; 0x8c
  410aea:	a920      	add	r1, sp, #128	; 0x80
  410aec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  410aee:	9004      	str	r0, [sp, #16]
  410af0:	9103      	str	r1, [sp, #12]
  410af2:	a81f      	add	r0, sp, #124	; 0x7c
  410af4:	2103      	movs	r1, #3
  410af6:	9002      	str	r0, [sp, #8]
  410af8:	9a08      	ldr	r2, [sp, #32]
  410afa:	9501      	str	r5, [sp, #4]
  410afc:	463b      	mov	r3, r7
  410afe:	9100      	str	r1, [sp, #0]
  410b00:	980c      	ldr	r0, [sp, #48]	; 0x30
  410b02:	f002 f831 	bl	412b68 <_dtoa_r>
  410b06:	4606      	mov	r6, r0
  410b08:	1944      	adds	r4, r0, r5
  410b0a:	e72b      	b.n	410964 <_svfprintf_r+0x1080>
  410b0c:	2306      	movs	r3, #6
  410b0e:	930a      	str	r3, [sp, #40]	; 0x28
  410b10:	e61d      	b.n	41074e <_svfprintf_r+0xe6a>
  410b12:	272d      	movs	r7, #45	; 0x2d
  410b14:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  410b18:	f7ff bacd 	b.w	4100b6 <_svfprintf_r+0x7d2>
  410b1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410b1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  410b20:	4413      	add	r3, r2
  410b22:	9a12      	ldr	r2, [sp, #72]	; 0x48
  410b24:	930e      	str	r3, [sp, #56]	; 0x38
  410b26:	2a00      	cmp	r2, #0
  410b28:	f340 80b0 	ble.w	410c8c <_svfprintf_r+0x13a8>
  410b2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  410b30:	9308      	str	r3, [sp, #32]
  410b32:	2367      	movs	r3, #103	; 0x67
  410b34:	9311      	str	r3, [sp, #68]	; 0x44
  410b36:	e671      	b.n	41081c <_svfprintf_r+0xf38>
  410b38:	2b00      	cmp	r3, #0
  410b3a:	f340 80c3 	ble.w	410cc4 <_svfprintf_r+0x13e0>
  410b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410b40:	2a00      	cmp	r2, #0
  410b42:	f040 8099 	bne.w	410c78 <_svfprintf_r+0x1394>
  410b46:	f01b 0f01 	tst.w	fp, #1
  410b4a:	f040 8095 	bne.w	410c78 <_svfprintf_r+0x1394>
  410b4e:	9308      	str	r3, [sp, #32]
  410b50:	930e      	str	r3, [sp, #56]	; 0x38
  410b52:	e663      	b.n	41081c <_svfprintf_r+0xf38>
  410b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410b56:	9308      	str	r3, [sp, #32]
  410b58:	930e      	str	r3, [sp, #56]	; 0x38
  410b5a:	900a      	str	r0, [sp, #40]	; 0x28
  410b5c:	950f      	str	r5, [sp, #60]	; 0x3c
  410b5e:	f8cd b01c 	str.w	fp, [sp, #28]
  410b62:	9012      	str	r0, [sp, #72]	; 0x48
  410b64:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  410b68:	f7fe bfd4 	b.w	40fb14 <_svfprintf_r+0x230>
  410b6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  410b6e:	2b47      	cmp	r3, #71	; 0x47
  410b70:	f47f ae20 	bne.w	4107b4 <_svfprintf_r+0xed0>
  410b74:	f01b 0f01 	tst.w	fp, #1
  410b78:	f47f aeee 	bne.w	410958 <_svfprintf_r+0x1074>
  410b7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  410b7e:	1b9b      	subs	r3, r3, r6
  410b80:	9313      	str	r3, [sp, #76]	; 0x4c
  410b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410b84:	2b47      	cmp	r3, #71	; 0x47
  410b86:	f43f af18 	beq.w	4109ba <_svfprintf_r+0x10d6>
  410b8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  410b8c:	9312      	str	r3, [sp, #72]	; 0x48
  410b8e:	e721      	b.n	4109d4 <_svfprintf_r+0x10f0>
  410b90:	424f      	negs	r7, r1
  410b92:	3110      	adds	r1, #16
  410b94:	4d48      	ldr	r5, [pc, #288]	; (410cb8 <_svfprintf_r+0x13d4>)
  410b96:	da2f      	bge.n	410bf8 <_svfprintf_r+0x1314>
  410b98:	2410      	movs	r4, #16
  410b9a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  410b9e:	e004      	b.n	410baa <_svfprintf_r+0x12c6>
  410ba0:	f108 0808 	add.w	r8, r8, #8
  410ba4:	3f10      	subs	r7, #16
  410ba6:	2f10      	cmp	r7, #16
  410ba8:	dd26      	ble.n	410bf8 <_svfprintf_r+0x1314>
  410baa:	3301      	adds	r3, #1
  410bac:	3210      	adds	r2, #16
  410bae:	2b07      	cmp	r3, #7
  410bb0:	9227      	str	r2, [sp, #156]	; 0x9c
  410bb2:	9326      	str	r3, [sp, #152]	; 0x98
  410bb4:	f8c8 5000 	str.w	r5, [r8]
  410bb8:	f8c8 4004 	str.w	r4, [r8, #4]
  410bbc:	ddf0      	ble.n	410ba0 <_svfprintf_r+0x12bc>
  410bbe:	aa25      	add	r2, sp, #148	; 0x94
  410bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410bc2:	4658      	mov	r0, fp
  410bc4:	f004 fb8e 	bl	4152e4 <__ssprint_r>
  410bc8:	2800      	cmp	r0, #0
  410bca:	f47e af5d 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410bce:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  410bd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410bd2:	46c8      	mov	r8, r9
  410bd4:	e7e6      	b.n	410ba4 <_svfprintf_r+0x12c0>
  410bd6:	aa25      	add	r2, sp, #148	; 0x94
  410bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410bda:	980c      	ldr	r0, [sp, #48]	; 0x30
  410bdc:	f004 fb82 	bl	4152e4 <__ssprint_r>
  410be0:	2800      	cmp	r0, #0
  410be2:	f47e af51 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410be6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  410be8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  410bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410bec:	46c8      	mov	r8, r9
  410bee:	e667      	b.n	4108c0 <_svfprintf_r+0xfdc>
  410bf0:	2000      	movs	r0, #0
  410bf2:	900a      	str	r0, [sp, #40]	; 0x28
  410bf4:	f7fe bed0 	b.w	40f998 <_svfprintf_r+0xb4>
  410bf8:	3301      	adds	r3, #1
  410bfa:	443a      	add	r2, r7
  410bfc:	2b07      	cmp	r3, #7
  410bfe:	e888 00a0 	stmia.w	r8, {r5, r7}
  410c02:	9227      	str	r2, [sp, #156]	; 0x9c
  410c04:	9326      	str	r3, [sp, #152]	; 0x98
  410c06:	f108 0808 	add.w	r8, r8, #8
  410c0a:	f77f ae5c 	ble.w	4108c6 <_svfprintf_r+0xfe2>
  410c0e:	aa25      	add	r2, sp, #148	; 0x94
  410c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410c12:	980c      	ldr	r0, [sp, #48]	; 0x30
  410c14:	f004 fb66 	bl	4152e4 <__ssprint_r>
  410c18:	2800      	cmp	r0, #0
  410c1a:	f47e af35 	bne.w	40fa88 <_svfprintf_r+0x1a4>
  410c1e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  410c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410c22:	46c8      	mov	r8, r9
  410c24:	e64f      	b.n	4108c6 <_svfprintf_r+0xfe2>
  410c26:	3330      	adds	r3, #48	; 0x30
  410c28:	2230      	movs	r2, #48	; 0x30
  410c2a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  410c2e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  410c32:	ab22      	add	r3, sp, #136	; 0x88
  410c34:	e70f      	b.n	410a56 <_svfprintf_r+0x1172>
  410c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
  410c38:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410c3a:	4413      	add	r3, r2
  410c3c:	930e      	str	r3, [sp, #56]	; 0x38
  410c3e:	e775      	b.n	410b2c <_svfprintf_r+0x1248>
  410c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  410c42:	e5cb      	b.n	4107dc <_svfprintf_r+0xef8>
  410c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410c46:	4e1d      	ldr	r6, [pc, #116]	; (410cbc <_svfprintf_r+0x13d8>)
  410c48:	2b00      	cmp	r3, #0
  410c4a:	bfb6      	itet	lt
  410c4c:	272d      	movlt	r7, #45	; 0x2d
  410c4e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  410c52:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  410c56:	4b1a      	ldr	r3, [pc, #104]	; (410cc0 <_svfprintf_r+0x13dc>)
  410c58:	f7ff ba2f 	b.w	4100ba <_svfprintf_r+0x7d6>
  410c5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  410c5e:	9808      	ldr	r0, [sp, #32]
  410c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  410c62:	4639      	mov	r1, r7
  410c64:	f7fb fd3a 	bl	40c6dc <__aeabi_dcmpeq>
  410c68:	2800      	cmp	r0, #0
  410c6a:	f47f ae7f 	bne.w	41096c <_svfprintf_r+0x1088>
  410c6e:	f1c5 0501 	rsb	r5, r5, #1
  410c72:	951f      	str	r5, [sp, #124]	; 0x7c
  410c74:	442c      	add	r4, r5
  410c76:	e59e      	b.n	4107b6 <_svfprintf_r+0xed2>
  410c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
  410c7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410c7c:	4413      	add	r3, r2
  410c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410c80:	441a      	add	r2, r3
  410c82:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  410c86:	920e      	str	r2, [sp, #56]	; 0x38
  410c88:	9308      	str	r3, [sp, #32]
  410c8a:	e5c7      	b.n	41081c <_svfprintf_r+0xf38>
  410c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  410c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410c90:	f1c3 0301 	rsb	r3, r3, #1
  410c94:	441a      	add	r2, r3
  410c96:	4613      	mov	r3, r2
  410c98:	e7d0      	b.n	410c3c <_svfprintf_r+0x1358>
  410c9a:	f01b 0301 	ands.w	r3, fp, #1
  410c9e:	9312      	str	r3, [sp, #72]	; 0x48
  410ca0:	f47f aee2 	bne.w	410a68 <_svfprintf_r+0x1184>
  410ca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410ca6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  410caa:	9308      	str	r3, [sp, #32]
  410cac:	e5b6      	b.n	41081c <_svfprintf_r+0xf38>
  410cae:	bf00      	nop
  410cb0:	66666667 	.word	0x66666667
  410cb4:	00417510 	.word	0x00417510
  410cb8:	0041752c 	.word	0x0041752c
  410cbc:	004174e4 	.word	0x004174e4
  410cc0:	004174e0 	.word	0x004174e0
  410cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410cc6:	b913      	cbnz	r3, 410cce <_svfprintf_r+0x13ea>
  410cc8:	f01b 0f01 	tst.w	fp, #1
  410ccc:	d002      	beq.n	410cd4 <_svfprintf_r+0x13f0>
  410cce:	9b19      	ldr	r3, [sp, #100]	; 0x64
  410cd0:	3301      	adds	r3, #1
  410cd2:	e7d4      	b.n	410c7e <_svfprintf_r+0x139a>
  410cd4:	2301      	movs	r3, #1
  410cd6:	e73a      	b.n	410b4e <_svfprintf_r+0x126a>
  410cd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  410cda:	f89a 3001 	ldrb.w	r3, [sl, #1]
  410cde:	6828      	ldr	r0, [r5, #0]
  410ce0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  410ce4:	900a      	str	r0, [sp, #40]	; 0x28
  410ce6:	4628      	mov	r0, r5
  410ce8:	3004      	adds	r0, #4
  410cea:	46a2      	mov	sl, r4
  410cec:	900f      	str	r0, [sp, #60]	; 0x3c
  410cee:	f7fe be51 	b.w	40f994 <_svfprintf_r+0xb0>
  410cf2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  410cf6:	f7ff b867 	b.w	40fdc8 <_svfprintf_r+0x4e4>
  410cfa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  410cfe:	f7ff ba15 	b.w	41012c <_svfprintf_r+0x848>
  410d02:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  410d06:	e6a6      	b.n	410a56 <_svfprintf_r+0x1172>
  410d08:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  410d0c:	f7ff b8eb 	b.w	40fee6 <_svfprintf_r+0x602>
  410d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410d12:	230c      	movs	r3, #12
  410d14:	6013      	str	r3, [r2, #0]
  410d16:	f04f 33ff 	mov.w	r3, #4294967295
  410d1a:	9309      	str	r3, [sp, #36]	; 0x24
  410d1c:	f7fe bebd 	b.w	40fa9a <_svfprintf_r+0x1b6>
  410d20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  410d24:	f7ff b99a 	b.w	41005c <_svfprintf_r+0x778>
  410d28:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  410d2c:	f7ff b976 	b.w	41001c <_svfprintf_r+0x738>
  410d30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  410d34:	f7ff b959 	b.w	40ffea <_svfprintf_r+0x706>
  410d38:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  410d3c:	f7ff b912 	b.w	40ff64 <_svfprintf_r+0x680>

00410d40 <__ssvfscanf_r>:
  410d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410d44:	468b      	mov	fp, r1
  410d46:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
  410d4a:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
  410d4e:	048e      	lsls	r6, r1, #18
  410d50:	4682      	mov	sl, r0
  410d52:	9305      	str	r3, [sp, #20]
  410d54:	d409      	bmi.n	410d6a <__ssvfscanf_r+0x2a>
  410d56:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  410d5a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  410d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  410d62:	f8ab 100c 	strh.w	r1, [fp, #12]
  410d66:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  410d6a:	4614      	mov	r4, r2
  410d6c:	46a0      	mov	r8, r4
  410d6e:	2300      	movs	r3, #0
  410d70:	9306      	str	r3, [sp, #24]
  410d72:	9303      	str	r3, [sp, #12]
  410d74:	461f      	mov	r7, r3
  410d76:	9304      	str	r3, [sp, #16]
  410d78:	f818 3b01 	ldrb.w	r3, [r8], #1
  410d7c:	930f      	str	r3, [sp, #60]	; 0x3c
  410d7e:	b35b      	cbz	r3, 410dd8 <__ssvfscanf_r+0x98>
  410d80:	f7fc fb7a 	bl	40d478 <__locale_ctype_ptr>
  410d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410d86:	4418      	add	r0, r3
  410d88:	7845      	ldrb	r5, [r0, #1]
  410d8a:	f015 0508 	ands.w	r5, r5, #8
  410d8e:	d028      	beq.n	410de2 <__ssvfscanf_r+0xa2>
  410d90:	f8db 2004 	ldr.w	r2, [fp, #4]
  410d94:	e011      	b.n	410dba <__ssvfscanf_r+0x7a>
  410d96:	f7fc fb6f 	bl	40d478 <__locale_ctype_ptr>
  410d9a:	f8db 3000 	ldr.w	r3, [fp]
  410d9e:	781a      	ldrb	r2, [r3, #0]
  410da0:	4410      	add	r0, r2
  410da2:	3301      	adds	r3, #1
  410da4:	7842      	ldrb	r2, [r0, #1]
  410da6:	0715      	lsls	r5, r2, #28
  410da8:	d50f      	bpl.n	410dca <__ssvfscanf_r+0x8a>
  410daa:	f8db 2004 	ldr.w	r2, [fp, #4]
  410dae:	f8cb 3000 	str.w	r3, [fp]
  410db2:	3a01      	subs	r2, #1
  410db4:	3701      	adds	r7, #1
  410db6:	f8cb 2004 	str.w	r2, [fp, #4]
  410dba:	2a00      	cmp	r2, #0
  410dbc:	dceb      	bgt.n	410d96 <__ssvfscanf_r+0x56>
  410dbe:	4659      	mov	r1, fp
  410dc0:	4650      	mov	r0, sl
  410dc2:	f004 fb4d 	bl	415460 <__ssrefill_r>
  410dc6:	2800      	cmp	r0, #0
  410dc8:	d0e5      	beq.n	410d96 <__ssvfscanf_r+0x56>
  410dca:	4644      	mov	r4, r8
  410dcc:	46a0      	mov	r8, r4
  410dce:	f818 3b01 	ldrb.w	r3, [r8], #1
  410dd2:	930f      	str	r3, [sp, #60]	; 0x3c
  410dd4:	2b00      	cmp	r3, #0
  410dd6:	d1d3      	bne.n	410d80 <__ssvfscanf_r+0x40>
  410dd8:	9804      	ldr	r0, [sp, #16]
  410dda:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
  410dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410de2:	2b25      	cmp	r3, #37	; 0x25
  410de4:	f040 8086 	bne.w	410ef4 <__ssvfscanf_r+0x1b4>
  410de8:	f894 9001 	ldrb.w	r9, [r4, #1]
  410dec:	462e      	mov	r6, r5
  410dee:	462c      	mov	r4, r5
  410df0:	f108 0301 	add.w	r3, r8, #1
  410df4:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
  410df8:	f200 82fe 	bhi.w	4113f8 <__ssvfscanf_r+0x6b8>
  410dfc:	e8df f019 	tbh	[pc, r9, lsl #1]
  410e00:	02fc0092 	.word	0x02fc0092
  410e04:	02fc02fc 	.word	0x02fc02fc
  410e08:	02fc02fc 	.word	0x02fc02fc
  410e0c:	02fc02fc 	.word	0x02fc02fc
  410e10:	02fc02fc 	.word	0x02fc02fc
  410e14:	02fc02fc 	.word	0x02fc02fc
  410e18:	02fc02fc 	.word	0x02fc02fc
  410e1c:	02fc02fc 	.word	0x02fc02fc
  410e20:	02fc02fc 	.word	0x02fc02fc
  410e24:	02fc02fc 	.word	0x02fc02fc
  410e28:	02fc02fc 	.word	0x02fc02fc
  410e2c:	02fc02fc 	.word	0x02fc02fc
  410e30:	02fc02fc 	.word	0x02fc02fc
  410e34:	02fc02fc 	.word	0x02fc02fc
  410e38:	02fc02fc 	.word	0x02fc02fc
  410e3c:	02fc02fc 	.word	0x02fc02fc
  410e40:	02fc02fc 	.word	0x02fc02fc
  410e44:	02fc02fc 	.word	0x02fc02fc
  410e48:	007902fc 	.word	0x007902fc
  410e4c:	02fc02fc 	.word	0x02fc02fc
  410e50:	02fc02fc 	.word	0x02fc02fc
  410e54:	02fc0245 	.word	0x02fc0245
  410e58:	02fc02fc 	.word	0x02fc02fc
  410e5c:	02fc02fc 	.word	0x02fc02fc
  410e60:	02610261 	.word	0x02610261
  410e64:	02610261 	.word	0x02610261
  410e68:	02610261 	.word	0x02610261
  410e6c:	02610261 	.word	0x02610261
  410e70:	02610261 	.word	0x02610261
  410e74:	02fc02fc 	.word	0x02fc02fc
  410e78:	02fc02fc 	.word	0x02fc02fc
  410e7c:	02fc02fc 	.word	0x02fc02fc
  410e80:	02fc02fc 	.word	0x02fc02fc
  410e84:	02fc02fc 	.word	0x02fc02fc
  410e88:	0294024b 	.word	0x0294024b
  410e8c:	029402fc 	.word	0x029402fc
  410e90:	02fc02fc 	.word	0x02fc02fc
  410e94:	02fc02fc 	.word	0x02fc02fc
  410e98:	02fc028e 	.word	0x02fc028e
  410e9c:	028402fc 	.word	0x028402fc
  410ea0:	02fc02fc 	.word	0x02fc02fc
  410ea4:	02fc02fc 	.word	0x02fc02fc
  410ea8:	02fc02fc 	.word	0x02fc02fc
  410eac:	02fc02fc 	.word	0x02fc02fc
  410eb0:	02fc0280 	.word	0x02fc0280
  410eb4:	02c802fc 	.word	0x02c802fc
  410eb8:	02fc02fc 	.word	0x02fc02fc
  410ebc:	02fc02fc 	.word	0x02fc02fc
  410ec0:	02fc02fc 	.word	0x02fc02fc
  410ec4:	02c202fc 	.word	0x02c202fc
  410ec8:	029402d2 	.word	0x029402d2
  410ecc:	02940294 	.word	0x02940294
  410ed0:	009a02bc 	.word	0x009a02bc
  410ed4:	02fc02fc 	.word	0x02fc02fc
  410ed8:	02fc0298 	.word	0x02fc0298
  410edc:	02a202a4 	.word	0x02a202a4
  410ee0:	02fc0276 	.word	0x02fc0276
  410ee4:	027202fc 	.word	0x027202fc
  410ee8:	026a02fc 	.word	0x026a02fc
  410eec:	02fc02fc 	.word	0x02fc02fc
  410ef0:	0280      	.short	0x0280
  410ef2:	4698      	mov	r8, r3
  410ef4:	f8db 3004 	ldr.w	r3, [fp, #4]
  410ef8:	2b00      	cmp	r3, #0
  410efa:	f340 854c 	ble.w	411996 <__ssvfscanf_r+0xc56>
  410efe:	f8db 3000 	ldr.w	r3, [fp]
  410f02:	f818 1c01 	ldrb.w	r1, [r8, #-1]
  410f06:	781a      	ldrb	r2, [r3, #0]
  410f08:	4291      	cmp	r1, r2
  410f0a:	f47f af65 	bne.w	410dd8 <__ssvfscanf_r+0x98>
  410f0e:	f8db 2004 	ldr.w	r2, [fp, #4]
  410f12:	3301      	adds	r3, #1
  410f14:	3a01      	subs	r2, #1
  410f16:	f8cb 3000 	str.w	r3, [fp]
  410f1a:	3701      	adds	r7, #1
  410f1c:	f8cb 2004 	str.w	r2, [fp, #4]
  410f20:	4644      	mov	r4, r8
  410f22:	e753      	b.n	410dcc <__ssvfscanf_r+0x8c>
  410f24:	f04f 33ff 	mov.w	r3, #4294967295
  410f28:	9304      	str	r3, [sp, #16]
  410f2a:	9804      	ldr	r0, [sp, #16]
  410f2c:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
  410f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410f34:	9302      	str	r3, [sp, #8]
  410f36:	4b9c      	ldr	r3, [pc, #624]	; (4111a8 <__ssvfscanf_r+0x468>)
  410f38:	9306      	str	r3, [sp, #24]
  410f3a:	2300      	movs	r3, #0
  410f3c:	9303      	str	r3, [sp, #12]
  410f3e:	f04f 0803 	mov.w	r8, #3
  410f42:	f8db 3004 	ldr.w	r3, [fp, #4]
  410f46:	2b00      	cmp	r3, #0
  410f48:	f340 81b3 	ble.w	4112b2 <__ssvfscanf_r+0x572>
  410f4c:	0673      	lsls	r3, r6, #25
  410f4e:	d50d      	bpl.n	410f6c <__ssvfscanf_r+0x22c>
  410f50:	f108 38ff 	add.w	r8, r8, #4294967295
  410f54:	f1b8 0f03 	cmp.w	r8, #3
  410f58:	f200 80ce 	bhi.w	4110f8 <__ssvfscanf_r+0x3b8>
  410f5c:	e8df f018 	tbh	[pc, r8, lsl #1]
  410f60:	00a000f4 	.word	0x00a000f4
  410f64:	02600030 	.word	0x02600030
  410f68:	f8cb 3000 	str.w	r3, [fp]
  410f6c:	f7fc fa84 	bl	40d478 <__locale_ctype_ptr>
  410f70:	f8db 3000 	ldr.w	r3, [fp]
  410f74:	781a      	ldrb	r2, [r3, #0]
  410f76:	4410      	add	r0, r2
  410f78:	3301      	adds	r3, #1
  410f7a:	7842      	ldrb	r2, [r0, #1]
  410f7c:	0710      	lsls	r0, r2, #28
  410f7e:	d5e7      	bpl.n	410f50 <__ssvfscanf_r+0x210>
  410f80:	f8db 2004 	ldr.w	r2, [fp, #4]
  410f84:	3a01      	subs	r2, #1
  410f86:	2a00      	cmp	r2, #0
  410f88:	f107 0701 	add.w	r7, r7, #1
  410f8c:	f8cb 2004 	str.w	r2, [fp, #4]
  410f90:	dcea      	bgt.n	410f68 <__ssvfscanf_r+0x228>
  410f92:	4659      	mov	r1, fp
  410f94:	4650      	mov	r0, sl
  410f96:	f004 fa63 	bl	415460 <__ssrefill_r>
  410f9a:	2800      	cmp	r0, #0
  410f9c:	d0e6      	beq.n	410f6c <__ssvfscanf_r+0x22c>
  410f9e:	9a04      	ldr	r2, [sp, #16]
  410fa0:	2a00      	cmp	r2, #0
  410fa2:	d0bf      	beq.n	410f24 <__ssvfscanf_r+0x1e4>
  410fa4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  410fa8:	f013 0f40 	tst.w	r3, #64	; 0x40
  410fac:	4613      	mov	r3, r2
  410fae:	bf18      	it	ne
  410fb0:	f04f 33ff 	movne.w	r3, #4294967295
  410fb4:	9304      	str	r3, [sp, #16]
  410fb6:	9804      	ldr	r0, [sp, #16]
  410fb8:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
  410fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410fc0:	1e63      	subs	r3, r4, #1
  410fc2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  410fc6:	bf86      	itte	hi
  410fc8:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
  410fcc:	eb04 0900 	addhi.w	r9, r4, r0
  410fd0:	f04f 0900 	movls.w	r9, #0
  410fd4:	ab52      	add	r3, sp, #328	; 0x148
  410fd6:	463a      	mov	r2, r7
  410fd8:	464f      	mov	r7, r9
  410fda:	f8dd 900c 	ldr.w	r9, [sp, #12]
  410fde:	9308      	str	r3, [sp, #32]
  410fe0:	bf88      	it	hi
  410fe2:	f240 145d 	movwhi	r4, #349	; 0x15d
  410fe6:	f446 6658 	orr.w	r6, r6, #3456	; 0xd80
  410fea:	461d      	mov	r5, r3
  410fec:	f04f 0800 	mov.w	r8, #0
  410ff0:	f8db 3000 	ldr.w	r3, [fp]
  410ff4:	7818      	ldrb	r0, [r3, #0]
  410ff6:	f1a0 012b 	sub.w	r1, r0, #43	; 0x2b
  410ffa:	294d      	cmp	r1, #77	; 0x4d
  410ffc:	f200 80f1 	bhi.w	4111e2 <__ssvfscanf_r+0x4a2>
  411000:	e8df f011 	tbh	[pc, r1, lsl #1]
  411004:	00ef013e 	.word	0x00ef013e
  411008:	00ef013e 	.word	0x00ef013e
  41100c:	011b00ef 	.word	0x011b00ef
  411010:	01150115 	.word	0x01150115
  411014:	01150115 	.word	0x01150115
  411018:	01150115 	.word	0x01150115
  41101c:	010e0115 	.word	0x010e0115
  411020:	00ef010e 	.word	0x00ef010e
  411024:	00ef00ef 	.word	0x00ef00ef
  411028:	00ef00ef 	.word	0x00ef00ef
  41102c:	00ef00ef 	.word	0x00ef00ef
  411030:	01080108 	.word	0x01080108
  411034:	01080108 	.word	0x01080108
  411038:	01080108 	.word	0x01080108
  41103c:	00ef00ef 	.word	0x00ef00ef
  411040:	00ef00ef 	.word	0x00ef00ef
  411044:	00ef00ef 	.word	0x00ef00ef
  411048:	00ef00ef 	.word	0x00ef00ef
  41104c:	00ef00ef 	.word	0x00ef00ef
  411050:	00ef00ef 	.word	0x00ef00ef
  411054:	00ef00ef 	.word	0x00ef00ef
  411058:	00ef00ef 	.word	0x00ef00ef
  41105c:	00d400ef 	.word	0x00d400ef
  411060:	00ef00ef 	.word	0x00ef00ef
  411064:	00ef00ef 	.word	0x00ef00ef
  411068:	00ef00ef 	.word	0x00ef00ef
  41106c:	00ef00ef 	.word	0x00ef00ef
  411070:	01080108 	.word	0x01080108
  411074:	01080108 	.word	0x01080108
  411078:	01080108 	.word	0x01080108
  41107c:	00ef00ef 	.word	0x00ef00ef
  411080:	00ef00ef 	.word	0x00ef00ef
  411084:	00ef00ef 	.word	0x00ef00ef
  411088:	00ef00ef 	.word	0x00ef00ef
  41108c:	00ef00ef 	.word	0x00ef00ef
  411090:	00ef00ef 	.word	0x00ef00ef
  411094:	00ef00ef 	.word	0x00ef00ef
  411098:	00ef00ef 	.word	0x00ef00ef
  41109c:	00d400ef 	.word	0x00d400ef
  4110a0:	2c00      	cmp	r4, #0
  4110a2:	bf08      	it	eq
  4110a4:	f04f 34ff 	moveq.w	r4, #4294967295
  4110a8:	f016 0501 	ands.w	r5, r6, #1
  4110ac:	f040 817c 	bne.w	4113a8 <__ssvfscanf_r+0x668>
  4110b0:	06f1      	lsls	r1, r6, #27
  4110b2:	f140 8425 	bpl.w	411900 <__ssvfscanf_r+0xbc0>
  4110b6:	f7fc f9df 	bl	40d478 <__locale_ctype_ptr>
  4110ba:	f8db 3000 	ldr.w	r3, [fp]
  4110be:	781a      	ldrb	r2, [r3, #0]
  4110c0:	4410      	add	r0, r2
  4110c2:	3301      	adds	r3, #1
  4110c4:	7842      	ldrb	r2, [r0, #1]
  4110c6:	0712      	lsls	r2, r2, #28
  4110c8:	d411      	bmi.n	4110ee <__ssvfscanf_r+0x3ae>
  4110ca:	f8db 2004 	ldr.w	r2, [fp, #4]
  4110ce:	f8cb 3000 	str.w	r3, [fp]
  4110d2:	3501      	adds	r5, #1
  4110d4:	3a01      	subs	r2, #1
  4110d6:	42ac      	cmp	r4, r5
  4110d8:	f8cb 2004 	str.w	r2, [fp, #4]
  4110dc:	d007      	beq.n	4110ee <__ssvfscanf_r+0x3ae>
  4110de:	2a00      	cmp	r2, #0
  4110e0:	dce9      	bgt.n	4110b6 <__ssvfscanf_r+0x376>
  4110e2:	4659      	mov	r1, fp
  4110e4:	4650      	mov	r0, sl
  4110e6:	f004 f9bb 	bl	415460 <__ssrefill_r>
  4110ea:	2800      	cmp	r0, #0
  4110ec:	d0e3      	beq.n	4110b6 <__ssvfscanf_r+0x376>
  4110ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4110f2:	442f      	add	r7, r5
  4110f4:	4644      	mov	r4, r8
  4110f6:	e669      	b.n	410dcc <__ssvfscanf_r+0x8c>
  4110f8:	2c00      	cmp	r4, #0
  4110fa:	bf08      	it	eq
  4110fc:	2401      	moveq	r4, #1
  4110fe:	f016 0501 	ands.w	r5, r6, #1
  411102:	f040 8340 	bne.w	411786 <__ssvfscanf_r+0xa46>
  411106:	06f2      	lsls	r2, r6, #27
  411108:	f140 842d 	bpl.w	411966 <__ssvfscanf_r+0xc26>
  41110c:	e009      	b.n	411122 <__ssvfscanf_r+0x3e2>
  41110e:	4413      	add	r3, r2
  411110:	f8cb 3000 	str.w	r3, [fp]
  411114:	4415      	add	r5, r2
  411116:	1aa4      	subs	r4, r4, r2
  411118:	f004 f9a2 	bl	415460 <__ssrefill_r>
  41111c:	2800      	cmp	r0, #0
  41111e:	f040 83e7 	bne.w	4118f0 <__ssvfscanf_r+0xbb0>
  411122:	f8db 2004 	ldr.w	r2, [fp, #4]
  411126:	f8db 3000 	ldr.w	r3, [fp]
  41112a:	42a2      	cmp	r2, r4
  41112c:	4659      	mov	r1, fp
  41112e:	4650      	mov	r0, sl
  411130:	dbed      	blt.n	41110e <__ssvfscanf_r+0x3ce>
  411132:	1b12      	subs	r2, r2, r4
  411134:	4423      	add	r3, r4
  411136:	4425      	add	r5, r4
  411138:	f8cb 2004 	str.w	r2, [fp, #4]
  41113c:	f8cb 3000 	str.w	r3, [fp]
  411140:	442f      	add	r7, r5
  411142:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411146:	e7d5      	b.n	4110f4 <__ssvfscanf_r+0x3b4>
  411148:	2c00      	cmp	r4, #0
  41114a:	bf08      	it	eq
  41114c:	f04f 34ff 	moveq.w	r4, #4294967295
  411150:	06f3      	lsls	r3, r6, #27
  411152:	f140 8376 	bpl.w	411842 <__ssvfscanf_r+0xb02>
  411156:	f8db 2000 	ldr.w	r2, [fp]
  41115a:	2500      	movs	r5, #0
  41115c:	ae12      	add	r6, sp, #72	; 0x48
  41115e:	7813      	ldrb	r3, [r2, #0]
  411160:	5cf3      	ldrb	r3, [r6, r3]
  411162:	3201      	adds	r2, #1
  411164:	b1c3      	cbz	r3, 411198 <__ssvfscanf_r+0x458>
  411166:	f8db 3004 	ldr.w	r3, [fp, #4]
  41116a:	f8cb 2000 	str.w	r2, [fp]
  41116e:	3501      	adds	r5, #1
  411170:	3b01      	subs	r3, #1
  411172:	42ac      	cmp	r4, r5
  411174:	f8cb 3004 	str.w	r3, [fp, #4]
  411178:	d0b9      	beq.n	4110ee <__ssvfscanf_r+0x3ae>
  41117a:	2b00      	cmp	r3, #0
  41117c:	dcef      	bgt.n	41115e <__ssvfscanf_r+0x41e>
  41117e:	4659      	mov	r1, fp
  411180:	4650      	mov	r0, sl
  411182:	f004 f96d 	bl	415460 <__ssrefill_r>
  411186:	2800      	cmp	r0, #0
  411188:	d1b1      	bne.n	4110ee <__ssvfscanf_r+0x3ae>
  41118a:	f8db 2000 	ldr.w	r2, [fp]
  41118e:	7813      	ldrb	r3, [r2, #0]
  411190:	5cf3      	ldrb	r3, [r6, r3]
  411192:	3201      	adds	r2, #1
  411194:	2b00      	cmp	r3, #0
  411196:	d1e6      	bne.n	411166 <__ssvfscanf_r+0x426>
  411198:	2d00      	cmp	r5, #0
  41119a:	f43f ae1d 	beq.w	410dd8 <__ssvfscanf_r+0x98>
  41119e:	442f      	add	r7, r5
  4111a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4111a4:	e7a6      	b.n	4110f4 <__ssvfscanf_r+0x3b4>
  4111a6:	bf00      	nop
  4111a8:	00414db5 	.word	0x00414db5
  4111ac:	f406 61c0 	and.w	r1, r6, #1536	; 0x600
  4111b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  4111b4:	d115      	bne.n	4111e2 <__ssvfscanf_r+0x4a2>
  4111b6:	f426 7600 	bic.w	r6, r6, #512	; 0x200
  4111ba:	f446 66a0 	orr.w	r6, r6, #1280	; 0x500
  4111be:	f04f 0910 	mov.w	r9, #16
  4111c2:	f8db 1004 	ldr.w	r1, [fp, #4]
  4111c6:	7028      	strb	r0, [r5, #0]
  4111c8:	3901      	subs	r1, #1
  4111ca:	2900      	cmp	r1, #0
  4111cc:	f105 0501 	add.w	r5, r5, #1
  4111d0:	f8cb 1004 	str.w	r1, [fp, #4]
  4111d4:	dd4b      	ble.n	41126e <__ssvfscanf_r+0x52e>
  4111d6:	3301      	adds	r3, #1
  4111d8:	f8cb 3000 	str.w	r3, [fp]
  4111dc:	3c01      	subs	r4, #1
  4111de:	f47f af07 	bne.w	410ff0 <__ssvfscanf_r+0x2b0>
  4111e2:	05f1      	lsls	r1, r6, #23
  4111e4:	4617      	mov	r7, r2
  4111e6:	f8cd 900c 	str.w	r9, [sp, #12]
  4111ea:	d507      	bpl.n	4111fc <__ssvfscanf_r+0x4bc>
  4111ec:	9b08      	ldr	r3, [sp, #32]
  4111ee:	429d      	cmp	r5, r3
  4111f0:	f200 83eb 	bhi.w	4119ca <__ssvfscanf_r+0xc8a>
  4111f4:	9b08      	ldr	r3, [sp, #32]
  4111f6:	429d      	cmp	r5, r3
  4111f8:	f43f adee 	beq.w	410dd8 <__ssvfscanf_r+0x98>
  4111fc:	f016 0410 	ands.w	r4, r6, #16
  411200:	f000 8354 	beq.w	4118ac <__ssvfscanf_r+0xb6c>
  411204:	9b08      	ldr	r3, [sp, #32]
  411206:	1aed      	subs	r5, r5, r3
  411208:	44a8      	add	r8, r5
  41120a:	4447      	add	r7, r8
  41120c:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411210:	4644      	mov	r4, r8
  411212:	e5db      	b.n	410dcc <__ssvfscanf_r+0x8c>
  411214:	f1b9 0f0a 	cmp.w	r9, #10
  411218:	dde3      	ble.n	4111e2 <__ssvfscanf_r+0x4a2>
  41121a:	f426 6638 	bic.w	r6, r6, #2944	; 0xb80
  41121e:	e7d0      	b.n	4111c2 <__ssvfscanf_r+0x482>
  411220:	497c      	ldr	r1, [pc, #496]	; (411414 <__ssvfscanf_r+0x6d4>)
  411222:	f931 9019 	ldrsh.w	r9, [r1, r9, lsl #1]
  411226:	f1b9 0f08 	cmp.w	r9, #8
  41122a:	dcf6      	bgt.n	41121a <__ssvfscanf_r+0x4da>
  41122c:	e7d9      	b.n	4111e2 <__ssvfscanf_r+0x4a2>
  41122e:	4979      	ldr	r1, [pc, #484]	; (411414 <__ssvfscanf_r+0x6d4>)
  411230:	f426 6638 	bic.w	r6, r6, #2944	; 0xb80
  411234:	f931 9019 	ldrsh.w	r9, [r1, r9, lsl #1]
  411238:	e7c3      	b.n	4111c2 <__ssvfscanf_r+0x482>
  41123a:	0531      	lsls	r1, r6, #20
  41123c:	d5c1      	bpl.n	4111c2 <__ssvfscanf_r+0x482>
  41123e:	f1b9 0f00 	cmp.w	r9, #0
  411242:	d103      	bne.n	41124c <__ssvfscanf_r+0x50c>
  411244:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  411248:	f04f 0908 	mov.w	r9, #8
  41124c:	0571      	lsls	r1, r6, #21
  41124e:	f100 8266 	bmi.w	41171e <__ssvfscanf_r+0x9de>
  411252:	f426 7660 	bic.w	r6, r6, #896	; 0x380
  411256:	b10f      	cbz	r7, 41125c <__ssvfscanf_r+0x51c>
  411258:	3f01      	subs	r7, #1
  41125a:	3401      	adds	r4, #1
  41125c:	f8db 1004 	ldr.w	r1, [fp, #4]
  411260:	3901      	subs	r1, #1
  411262:	2900      	cmp	r1, #0
  411264:	f108 0801 	add.w	r8, r8, #1
  411268:	f8cb 1004 	str.w	r1, [fp, #4]
  41126c:	dcb3      	bgt.n	4111d6 <__ssvfscanf_r+0x496>
  41126e:	4659      	mov	r1, fp
  411270:	4650      	mov	r0, sl
  411272:	9203      	str	r2, [sp, #12]
  411274:	f004 f8f4 	bl	415460 <__ssrefill_r>
  411278:	9a03      	ldr	r2, [sp, #12]
  41127a:	2800      	cmp	r0, #0
  41127c:	d0ae      	beq.n	4111dc <__ssvfscanf_r+0x49c>
  41127e:	e7b0      	b.n	4111e2 <__ssvfscanf_r+0x4a2>
  411280:	0631      	lsls	r1, r6, #24
  411282:	d5ae      	bpl.n	4111e2 <__ssvfscanf_r+0x4a2>
  411284:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  411288:	e79b      	b.n	4111c2 <__ssvfscanf_r+0x482>
  41128a:	f898 9001 	ldrb.w	r9, [r8, #1]
  41128e:	f046 0610 	orr.w	r6, r6, #16
  411292:	4698      	mov	r8, r3
  411294:	e5ac      	b.n	410df0 <__ssvfscanf_r+0xb0>
  411296:	9302      	str	r3, [sp, #8]
  411298:	f046 0601 	orr.w	r6, r6, #1
  41129c:	4b5e      	ldr	r3, [pc, #376]	; (411418 <__ssvfscanf_r+0x6d8>)
  41129e:	9306      	str	r3, [sp, #24]
  4112a0:	230a      	movs	r3, #10
  4112a2:	9303      	str	r3, [sp, #12]
  4112a4:	f8db 3004 	ldr.w	r3, [fp, #4]
  4112a8:	2b00      	cmp	r3, #0
  4112aa:	f04f 0803 	mov.w	r8, #3
  4112ae:	f73f ae4d 	bgt.w	410f4c <__ssvfscanf_r+0x20c>
  4112b2:	4659      	mov	r1, fp
  4112b4:	4650      	mov	r0, sl
  4112b6:	f004 f8d3 	bl	415460 <__ssrefill_r>
  4112ba:	2800      	cmp	r0, #0
  4112bc:	f43f ae46 	beq.w	410f4c <__ssvfscanf_r+0x20c>
  4112c0:	e66d      	b.n	410f9e <__ssvfscanf_r+0x25e>
  4112c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4112c6:	eb09 0444 	add.w	r4, r9, r4, lsl #1
  4112ca:	3c30      	subs	r4, #48	; 0x30
  4112cc:	f898 9001 	ldrb.w	r9, [r8, #1]
  4112d0:	4698      	mov	r8, r3
  4112d2:	e58d      	b.n	410df0 <__ssvfscanf_r+0xb0>
  4112d4:	9302      	str	r3, [sp, #8]
  4112d6:	4b51      	ldr	r3, [pc, #324]	; (41141c <__ssvfscanf_r+0x6dc>)
  4112d8:	9306      	str	r3, [sp, #24]
  4112da:	230a      	movs	r3, #10
  4112dc:	9303      	str	r3, [sp, #12]
  4112de:	f04f 0803 	mov.w	r8, #3
  4112e2:	e62e      	b.n	410f42 <__ssvfscanf_r+0x202>
  4112e4:	9302      	str	r3, [sp, #8]
  4112e6:	f04f 0802 	mov.w	r8, #2
  4112ea:	e62a      	b.n	410f42 <__ssvfscanf_r+0x202>
  4112ec:	9302      	str	r3, [sp, #8]
  4112ee:	f446 7608 	orr.w	r6, r6, #544	; 0x220
  4112f2:	4b4a      	ldr	r3, [pc, #296]	; (41141c <__ssvfscanf_r+0x6dc>)
  4112f4:	9306      	str	r3, [sp, #24]
  4112f6:	2310      	movs	r3, #16
  4112f8:	9303      	str	r3, [sp, #12]
  4112fa:	f04f 0803 	mov.w	r8, #3
  4112fe:	e620      	b.n	410f42 <__ssvfscanf_r+0x202>
  411300:	9302      	str	r3, [sp, #8]
  411302:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  411306:	e7f4      	b.n	4112f2 <__ssvfscanf_r+0x5b2>
  411308:	9302      	str	r3, [sp, #8]
  41130a:	f046 0601 	orr.w	r6, r6, #1
  41130e:	4b43      	ldr	r3, [pc, #268]	; (41141c <__ssvfscanf_r+0x6dc>)
  411310:	9306      	str	r3, [sp, #24]
  411312:	2308      	movs	r3, #8
  411314:	9303      	str	r3, [sp, #12]
  411316:	f04f 0803 	mov.w	r8, #3
  41131a:	e612      	b.n	410f42 <__ssvfscanf_r+0x202>
  41131c:	f898 9001 	ldrb.w	r9, [r8, #1]
  411320:	f046 0602 	orr.w	r6, r6, #2
  411324:	4698      	mov	r8, r3
  411326:	e563      	b.n	410df0 <__ssvfscanf_r+0xb0>
  411328:	9302      	str	r3, [sp, #8]
  41132a:	f04f 0804 	mov.w	r8, #4
  41132e:	e608      	b.n	410f42 <__ssvfscanf_r+0x202>
  411330:	f898 9001 	ldrb.w	r9, [r8, #1]
  411334:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
  411338:	f000 8358 	beq.w	4119ec <__ssvfscanf_r+0xcac>
  41133c:	f046 0601 	orr.w	r6, r6, #1
  411340:	4698      	mov	r8, r3
  411342:	e555      	b.n	410df0 <__ssvfscanf_r+0xb0>
  411344:	9302      	str	r3, [sp, #8]
  411346:	e7e2      	b.n	41130e <__ssvfscanf_r+0x5ce>
  411348:	06f4      	lsls	r4, r6, #27
  41134a:	9302      	str	r3, [sp, #8]
  41134c:	d450      	bmi.n	4113f0 <__ssvfscanf_r+0x6b0>
  41134e:	0770      	lsls	r0, r6, #29
  411350:	f100 8365 	bmi.w	411a1e <__ssvfscanf_r+0xcde>
  411354:	07f1      	lsls	r1, r6, #31
  411356:	f100 820b 	bmi.w	411770 <__ssvfscanf_r+0xa30>
  41135a:	07b2      	lsls	r2, r6, #30
  41135c:	f140 8208 	bpl.w	411770 <__ssvfscanf_r+0xa30>
  411360:	9a05      	ldr	r2, [sp, #20]
  411362:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411366:	6813      	ldr	r3, [r2, #0]
  411368:	4638      	mov	r0, r7
  41136a:	17f9      	asrs	r1, r7, #31
  41136c:	3204      	adds	r2, #4
  41136e:	9205      	str	r2, [sp, #20]
  411370:	e9c3 0100 	strd	r0, r1, [r3]
  411374:	4644      	mov	r4, r8
  411376:	e529      	b.n	410dcc <__ssvfscanf_r+0x8c>
  411378:	f898 9001 	ldrb.w	r9, [r8, #1]
  41137c:	f046 0604 	orr.w	r6, r6, #4
  411380:	4698      	mov	r8, r3
  411382:	e535      	b.n	410df0 <__ssvfscanf_r+0xb0>
  411384:	9302      	str	r3, [sp, #8]
  411386:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  41138a:	f04f 0800 	mov.w	r8, #0
  41138e:	e5d8      	b.n	410f42 <__ssvfscanf_r+0x202>
  411390:	4619      	mov	r1, r3
  411392:	a812      	add	r0, sp, #72	; 0x48
  411394:	f003 fc3c 	bl	414c10 <__sccl>
  411398:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  41139c:	9002      	str	r0, [sp, #8]
  41139e:	f04f 0801 	mov.w	r8, #1
  4113a2:	e5ce      	b.n	410f42 <__ssvfscanf_r+0x202>
  4113a4:	9302      	str	r3, [sp, #8]
  4113a6:	e779      	b.n	41129c <__ssvfscanf_r+0x55c>
  4113a8:	ab10      	add	r3, sp, #64	; 0x40
  4113aa:	4618      	mov	r0, r3
  4113ac:	2208      	movs	r2, #8
  4113ae:	2100      	movs	r1, #0
  4113b0:	9307      	str	r3, [sp, #28]
  4113b2:	f7fc fd43 	bl	40de3c <memset>
  4113b6:	f016 0310 	ands.w	r3, r6, #16
  4113ba:	9308      	str	r3, [sp, #32]
  4113bc:	f000 831e 	beq.w	4119fc <__ssvfscanf_r+0xcbc>
  4113c0:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
  4113c4:	2600      	movs	r6, #0
  4113c6:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
  4113ca:	f7fc f855 	bl	40d478 <__locale_ctype_ptr>
  4113ce:	f8db 3000 	ldr.w	r3, [fp]
  4113d2:	781b      	ldrb	r3, [r3, #0]
  4113d4:	4403      	add	r3, r0
  4113d6:	785b      	ldrb	r3, [r3, #1]
  4113d8:	0718      	lsls	r0, r3, #28
  4113da:	d402      	bmi.n	4113e2 <__ssvfscanf_r+0x6a2>
  4113dc:	2c00      	cmp	r4, #0
  4113de:	f040 8337 	bne.w	411a50 <__ssvfscanf_r+0xd10>
  4113e2:	9b08      	ldr	r3, [sp, #32]
  4113e4:	b923      	cbnz	r3, 4113f0 <__ssvfscanf_r+0x6b0>
  4113e6:	f8c9 3000 	str.w	r3, [r9]
  4113ea:	9b04      	ldr	r3, [sp, #16]
  4113ec:	3301      	adds	r3, #1
  4113ee:	9304      	str	r3, [sp, #16]
  4113f0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4113f4:	4644      	mov	r4, r8
  4113f6:	e4e9      	b.n	410dcc <__ssvfscanf_r+0x8c>
  4113f8:	9302      	str	r3, [sp, #8]
  4113fa:	f7fc f83d 	bl	40d478 <__locale_ctype_ptr>
  4113fe:	4448      	add	r0, r9
  411400:	7843      	ldrb	r3, [r0, #1]
  411402:	f003 0303 	and.w	r3, r3, #3
  411406:	2b01      	cmp	r3, #1
  411408:	f47f af48 	bne.w	41129c <__ssvfscanf_r+0x55c>
  41140c:	f046 0601 	orr.w	r6, r6, #1
  411410:	e744      	b.n	41129c <__ssvfscanf_r+0x55c>
  411412:	bf00      	nop
  411414:	00417544 	.word	0x00417544
  411418:	00414db5 	.word	0x00414db5
  41141c:	004150e1 	.word	0x004150e1
  411420:	4650      	mov	r0, sl
  411422:	f002 ff3d 	bl	4142a0 <_localeconv_r>
  411426:	1e63      	subs	r3, r4, #1
  411428:	6802      	ldr	r2, [r0, #0]
  41142a:	920a      	str	r2, [sp, #40]	; 0x28
  41142c:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  411430:	f240 8172 	bls.w	411718 <__ssvfscanf_r+0x9d8>
  411434:	f46f 71ae 	mvn.w	r1, #348	; 0x15c
  411438:	1863      	adds	r3, r4, r1
  41143a:	930d      	str	r3, [sp, #52]	; 0x34
  41143c:	f240 145d 	movw	r4, #349	; 0x15d
  411440:	2300      	movs	r3, #0
  411442:	aa52      	add	r2, sp, #328	; 0x148
  411444:	9208      	str	r2, [sp, #32]
  411446:	f446 66f0 	orr.w	r6, r6, #1920	; 0x780
  41144a:	930b      	str	r3, [sp, #44]	; 0x2c
  41144c:	930c      	str	r3, [sp, #48]	; 0x30
  41144e:	4698      	mov	r8, r3
  411450:	9309      	str	r3, [sp, #36]	; 0x24
  411452:	4691      	mov	r9, r2
  411454:	f8db 0000 	ldr.w	r0, [fp]
  411458:	7801      	ldrb	r1, [r0, #0]
  41145a:	f1a1 0e2b 	sub.w	lr, r1, #43	; 0x2b
  41145e:	f1be 0f4e 	cmp.w	lr, #78	; 0x4e
  411462:	f200 812e 	bhi.w	4116c2 <__ssvfscanf_r+0x982>
  411466:	e8df f01e 	tbh	[pc, lr, lsl #1]
  41146a:	007b      	.short	0x007b
  41146c:	007b012c 	.word	0x007b012c
  411470:	012c012c 	.word	0x012c012c
  411474:	004f006e 	.word	0x004f006e
  411478:	004f004f 	.word	0x004f004f
  41147c:	004f004f 	.word	0x004f004f
  411480:	004f004f 	.word	0x004f004f
  411484:	004f004f 	.word	0x004f004f
  411488:	012c012c 	.word	0x012c012c
  41148c:	012c012c 	.word	0x012c012c
  411490:	012c012c 	.word	0x012c012c
  411494:	0127012c 	.word	0x0127012c
  411498:	012c012c 	.word	0x012c012c
  41149c:	010d012c 	.word	0x010d012c
  4114a0:	012c0108 	.word	0x012c0108
  4114a4:	009b012c 	.word	0x009b012c
  4114a8:	012c012c 	.word	0x012c012c
  4114ac:	012c012c 	.word	0x012c012c
  4114b0:	012c0088 	.word	0x012c0088
  4114b4:	012c012c 	.word	0x012c012c
  4114b8:	012c012c 	.word	0x012c012c
  4114bc:	012c0084 	.word	0x012c0084
  4114c0:	012c012c 	.word	0x012c012c
  4114c4:	0080012c 	.word	0x0080012c
  4114c8:	012c012c 	.word	0x012c012c
  4114cc:	012c012c 	.word	0x012c012c
  4114d0:	012c012c 	.word	0x012c012c
  4114d4:	0127012c 	.word	0x0127012c
  4114d8:	012c012c 	.word	0x012c012c
  4114dc:	010d012c 	.word	0x010d012c
  4114e0:	012c0108 	.word	0x012c0108
  4114e4:	009b012c 	.word	0x009b012c
  4114e8:	012c012c 	.word	0x012c012c
  4114ec:	012c012c 	.word	0x012c012c
  4114f0:	012c0088 	.word	0x012c0088
  4114f4:	012c012c 	.word	0x012c012c
  4114f8:	012c012c 	.word	0x012c012c
  4114fc:	012c0084 	.word	0x012c0084
  411500:	012c012c 	.word	0x012c012c
  411504:	0080012c 	.word	0x0080012c
  411508:	42eb      	cmn	r3, r5
  41150a:	d116      	bne.n	41153a <__ssvfscanf_r+0x7fa>
  41150c:	f426 76c0 	bic.w	r6, r6, #384	; 0x180
  411510:	f889 1000 	strb.w	r1, [r9]
  411514:	f109 0901 	add.w	r9, r9, #1
  411518:	f8db 1004 	ldr.w	r1, [fp, #4]
  41151c:	3901      	subs	r1, #1
  41151e:	2900      	cmp	r1, #0
  411520:	f104 34ff 	add.w	r4, r4, #4294967295
  411524:	f107 0701 	add.w	r7, r7, #1
  411528:	f8cb 1004 	str.w	r1, [fp, #4]
  41152c:	f340 80d7 	ble.w	4116de <__ssvfscanf_r+0x99e>
  411530:	3001      	adds	r0, #1
  411532:	f8cb 0000 	str.w	r0, [fp]
  411536:	2c00      	cmp	r4, #0
  411538:	d18c      	bne.n	411454 <__ssvfscanf_r+0x714>
  41153a:	f1b8 0f00 	cmp.w	r8, #0
  41153e:	d03b      	beq.n	4115b8 <__ssvfscanf_r+0x878>
  411540:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  411544:	e038      	b.n	4115b8 <__ssvfscanf_r+0x878>
  411546:	05f2      	lsls	r2, r6, #23
  411548:	d5de      	bpl.n	411508 <__ssvfscanf_r+0x7c8>
  41154a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  41154c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  411550:	f108 0801 	add.w	r8, r8, #1
  411554:	2a00      	cmp	r2, #0
  411556:	d0df      	beq.n	411518 <__ssvfscanf_r+0x7d8>
  411558:	3a01      	subs	r2, #1
  41155a:	920d      	str	r2, [sp, #52]	; 0x34
  41155c:	3401      	adds	r4, #1
  41155e:	e7db      	b.n	411518 <__ssvfscanf_r+0x7d8>
  411560:	0632      	lsls	r2, r6, #24
  411562:	d5ea      	bpl.n	41153a <__ssvfscanf_r+0x7fa>
  411564:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  411568:	e7d2      	b.n	411510 <__ssvfscanf_r+0x7d0>
  41156a:	2d07      	cmp	r5, #7
  41156c:	d1e5      	bne.n	41153a <__ssvfscanf_r+0x7fa>
  41156e:	2508      	movs	r5, #8
  411570:	e7ce      	b.n	411510 <__ssvfscanf_r+0x7d0>
  411572:	2d06      	cmp	r5, #6
  411574:	d1e1      	bne.n	41153a <__ssvfscanf_r+0x7fa>
  411576:	2507      	movs	r5, #7
  411578:	e7ca      	b.n	411510 <__ssvfscanf_r+0x7d0>
  41157a:	2b00      	cmp	r3, #0
  41157c:	f040 80bc 	bne.w	4116f8 <__ssvfscanf_r+0x9b8>
  411580:	f1b8 0f00 	cmp.w	r8, #0
  411584:	d105      	bne.n	411592 <__ssvfscanf_r+0x852>
  411586:	f406 6ee0 	and.w	lr, r6, #1792	; 0x700
  41158a:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
  41158e:	f000 820f 	beq.w	4119b0 <__ssvfscanf_r+0xc70>
  411592:	2d01      	cmp	r5, #1
  411594:	d001      	beq.n	41159a <__ssvfscanf_r+0x85a>
  411596:	2d04      	cmp	r5, #4
  411598:	d1cf      	bne.n	41153a <__ssvfscanf_r+0x7fa>
  41159a:	3501      	adds	r5, #1
  41159c:	b2ed      	uxtb	r5, r5
  41159e:	e7b7      	b.n	411510 <__ssvfscanf_r+0x7d0>
  4115a0:	2d00      	cmp	r5, #0
  4115a2:	f040 80ae 	bne.w	411702 <__ssvfscanf_r+0x9c2>
  4115a6:	f1b8 0f00 	cmp.w	r8, #0
  4115aa:	d1c9      	bne.n	411540 <__ssvfscanf_r+0x800>
  4115ac:	f406 6ee0 	and.w	lr, r6, #1792	; 0x700
  4115b0:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
  4115b4:	f000 81f8 	beq.w	4119a8 <__ssvfscanf_r+0xc68>
  4115b8:	3b01      	subs	r3, #1
  4115ba:	2b01      	cmp	r3, #1
  4115bc:	f240 82a6 	bls.w	411b0c <__ssvfscanf_r+0xdcc>
  4115c0:	1e6b      	subs	r3, r5, #1
  4115c2:	2b06      	cmp	r3, #6
  4115c4:	d812      	bhi.n	4115ec <__ssvfscanf_r+0x8ac>
  4115c6:	2d02      	cmp	r5, #2
  4115c8:	f240 82af 	bls.w	411b2a <__ssvfscanf_r+0xdea>
  4115cc:	2d03      	cmp	r5, #3
  4115ce:	d00d      	beq.n	4115ec <__ssvfscanf_r+0x8ac>
  4115d0:	1f2c      	subs	r4, r5, #4
  4115d2:	b2e4      	uxtb	r4, r4
  4115d4:	43e5      	mvns	r5, r4
  4115d6:	444d      	add	r5, r9
  4115d8:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
  4115dc:	465a      	mov	r2, fp
  4115de:	4650      	mov	r0, sl
  4115e0:	f003 fefe 	bl	4153e0 <_sungetc_r>
  4115e4:	454d      	cmp	r5, r9
  4115e6:	d1f7      	bne.n	4115d8 <__ssvfscanf_r+0x898>
  4115e8:	3f01      	subs	r7, #1
  4115ea:	1b3f      	subs	r7, r7, r4
  4115ec:	05f1      	lsls	r1, r6, #23
  4115ee:	d51b      	bpl.n	411628 <__ssvfscanf_r+0x8e8>
  4115f0:	0572      	lsls	r2, r6, #21
  4115f2:	f100 827c 	bmi.w	411aee <__ssvfscanf_r+0xdae>
  4115f6:	f819 1c01 	ldrb.w	r1, [r9, #-1]
  4115fa:	2965      	cmp	r1, #101	; 0x65
  4115fc:	f109 34ff 	add.w	r4, r9, #4294967295
  411600:	f107 35ff 	add.w	r5, r7, #4294967295
  411604:	d00a      	beq.n	41161c <__ssvfscanf_r+0x8dc>
  411606:	2945      	cmp	r1, #69	; 0x45
  411608:	d008      	beq.n	41161c <__ssvfscanf_r+0x8dc>
  41160a:	465a      	mov	r2, fp
  41160c:	4650      	mov	r0, sl
  41160e:	f003 fee7 	bl	4153e0 <_sungetc_r>
  411612:	f819 1c02 	ldrb.w	r1, [r9, #-2]
  411616:	1ebd      	subs	r5, r7, #2
  411618:	f1a9 0402 	sub.w	r4, r9, #2
  41161c:	465a      	mov	r2, fp
  41161e:	4650      	mov	r0, sl
  411620:	f003 fede 	bl	4153e0 <_sungetc_r>
  411624:	462f      	mov	r7, r5
  411626:	46a1      	mov	r9, r4
  411628:	f016 0210 	ands.w	r2, r6, #16
  41162c:	f47f aee0 	bne.w	4113f0 <__ssvfscanf_r+0x6b0>
  411630:	f406 63c0 	and.w	r3, r6, #1536	; 0x600
  411634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  411638:	f889 2000 	strb.w	r2, [r9]
  41163c:	f000 81cd 	beq.w	4119da <__ssvfscanf_r+0xc9a>
  411640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411642:	2b00      	cmp	r3, #0
  411644:	d17f      	bne.n	411746 <__ssvfscanf_r+0xa06>
  411646:	9908      	ldr	r1, [sp, #32]
  411648:	2200      	movs	r2, #0
  41164a:	4650      	mov	r0, sl
  41164c:	f7fe f928 	bl	40f8a0 <_strtod_r>
  411650:	07f3      	lsls	r3, r6, #31
  411652:	4680      	mov	r8, r0
  411654:	4689      	mov	r9, r1
  411656:	d402      	bmi.n	41165e <__ssvfscanf_r+0x91e>
  411658:	f016 0602 	ands.w	r6, r6, #2
  41165c:	d062      	beq.n	411724 <__ssvfscanf_r+0x9e4>
  41165e:	9a05      	ldr	r2, [sp, #20]
  411660:	6813      	ldr	r3, [r2, #0]
  411662:	3204      	adds	r2, #4
  411664:	9205      	str	r2, [sp, #20]
  411666:	e9c3 8900 	strd	r8, r9, [r3]
  41166a:	9b04      	ldr	r3, [sp, #16]
  41166c:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411670:	3301      	adds	r3, #1
  411672:	9304      	str	r3, [sp, #16]
  411674:	4644      	mov	r4, r8
  411676:	f7ff bba9 	b.w	410dcc <__ssvfscanf_r+0x8c>
  41167a:	2d02      	cmp	r5, #2
  41167c:	f47f af5d 	bne.w	41153a <__ssvfscanf_r+0x7fa>
  411680:	2503      	movs	r5, #3
  411682:	e745      	b.n	411510 <__ssvfscanf_r+0x7d0>
  411684:	f406 6ea0 	and.w	lr, r6, #1280	; 0x500
  411688:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
  41168c:	d005      	beq.n	41169a <__ssvfscanf_r+0x95a>
  41168e:	0572      	lsls	r2, r6, #21
  411690:	f57f af53 	bpl.w	41153a <__ssvfscanf_r+0x7fa>
  411694:	f1b8 0f00 	cmp.w	r8, #0
  411698:	d08e      	beq.n	4115b8 <__ssvfscanf_r+0x878>
  41169a:	05b2      	lsls	r2, r6, #22
  41169c:	d405      	bmi.n	4116aa <__ssvfscanf_r+0x96a>
  41169e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4116a0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4116a4:	eba8 0202 	sub.w	r2, r8, r2
  4116a8:	920c      	str	r2, [sp, #48]	; 0x30
  4116aa:	f426 66f0 	bic.w	r6, r6, #1920	; 0x780
  4116ae:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
  4116b2:	f04f 0800 	mov.w	r8, #0
  4116b6:	e72b      	b.n	411510 <__ssvfscanf_r+0x7d0>
  4116b8:	2b01      	cmp	r3, #1
  4116ba:	f47f af3e 	bne.w	41153a <__ssvfscanf_r+0x7fa>
  4116be:	2302      	movs	r3, #2
  4116c0:	e726      	b.n	411510 <__ssvfscanf_r+0x7d0>
  4116c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4116c4:	f892 e000 	ldrb.w	lr, [r2]
  4116c8:	458e      	cmp	lr, r1
  4116ca:	f47f af36 	bne.w	41153a <__ssvfscanf_r+0x7fa>
  4116ce:	05b2      	lsls	r2, r6, #22
  4116d0:	f57f af33 	bpl.w	41153a <__ssvfscanf_r+0x7fa>
  4116d4:	f426 7620 	bic.w	r6, r6, #640	; 0x280
  4116d8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  4116dc:	e718      	b.n	411510 <__ssvfscanf_r+0x7d0>
  4116de:	4659      	mov	r1, fp
  4116e0:	4650      	mov	r0, sl
  4116e2:	9307      	str	r3, [sp, #28]
  4116e4:	f003 febc 	bl	415460 <__ssrefill_r>
  4116e8:	9b07      	ldr	r3, [sp, #28]
  4116ea:	2800      	cmp	r0, #0
  4116ec:	f47f af25 	bne.w	41153a <__ssvfscanf_r+0x7fa>
  4116f0:	2c00      	cmp	r4, #0
  4116f2:	f47f aeaf 	bne.w	411454 <__ssvfscanf_r+0x714>
  4116f6:	e720      	b.n	41153a <__ssvfscanf_r+0x7fa>
  4116f8:	2b02      	cmp	r3, #2
  4116fa:	f47f af4a 	bne.w	411592 <__ssvfscanf_r+0x852>
  4116fe:	2303      	movs	r3, #3
  411700:	e706      	b.n	411510 <__ssvfscanf_r+0x7d0>
  411702:	2d03      	cmp	r5, #3
  411704:	f43f af49 	beq.w	41159a <__ssvfscanf_r+0x85a>
  411708:	2d05      	cmp	r5, #5
  41170a:	f43f af46 	beq.w	41159a <__ssvfscanf_r+0x85a>
  41170e:	f1b8 0f00 	cmp.w	r8, #0
  411712:	f43f af51 	beq.w	4115b8 <__ssvfscanf_r+0x878>
  411716:	e713      	b.n	411540 <__ssvfscanf_r+0x800>
  411718:	2300      	movs	r3, #0
  41171a:	930d      	str	r3, [sp, #52]	; 0x34
  41171c:	e690      	b.n	411440 <__ssvfscanf_r+0x700>
  41171e:	f426 66b0 	bic.w	r6, r6, #1408	; 0x580
  411722:	e54e      	b.n	4111c2 <__ssvfscanf_r+0x482>
  411724:	9c05      	ldr	r4, [sp, #20]
  411726:	4602      	mov	r2, r0
  411728:	460b      	mov	r3, r1
  41172a:	1d25      	adds	r5, r4, #4
  41172c:	6824      	ldr	r4, [r4, #0]
  41172e:	f004 fa57 	bl	415be0 <__aeabi_dcmpun>
  411732:	2800      	cmp	r0, #0
  411734:	f040 8208 	bne.w	411b48 <__ssvfscanf_r+0xe08>
  411738:	4640      	mov	r0, r8
  41173a:	4649      	mov	r1, r9
  41173c:	f004 fa66 	bl	415c0c <__aeabi_d2f>
  411740:	9505      	str	r5, [sp, #20]
  411742:	6020      	str	r0, [r4, #0]
  411744:	e791      	b.n	41166a <__ssvfscanf_r+0x92a>
  411746:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411748:	230a      	movs	r3, #10
  41174a:	3101      	adds	r1, #1
  41174c:	4650      	mov	r0, sl
  41174e:	f003 fb31 	bl	414db4 <_strtol_r>
  411752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411754:	1ac2      	subs	r2, r0, r3
  411756:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411758:	f20d 239b 	addw	r3, sp, #667	; 0x29b
  41175c:	4299      	cmp	r1, r3
  41175e:	bf24      	itt	cs
  411760:	f20d 239a 	addwcs	r3, sp, #666	; 0x29a
  411764:	930b      	strcs	r3, [sp, #44]	; 0x2c
  411766:	980b      	ldr	r0, [sp, #44]	; 0x2c
  411768:	49b7      	ldr	r1, [pc, #732]	; (411a48 <__ssvfscanf_r+0xd08>)
  41176a:	f7fc fe95 	bl	40e498 <sprintf>
  41176e:	e76a      	b.n	411646 <__ssvfscanf_r+0x906>
  411770:	9a05      	ldr	r2, [sp, #20]
  411772:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411776:	6813      	ldr	r3, [r2, #0]
  411778:	601f      	str	r7, [r3, #0]
  41177a:	4613      	mov	r3, r2
  41177c:	3304      	adds	r3, #4
  41177e:	9305      	str	r3, [sp, #20]
  411780:	4644      	mov	r4, r8
  411782:	f7ff bb23 	b.w	410dcc <__ssvfscanf_r+0x8c>
  411786:	ab10      	add	r3, sp, #64	; 0x40
  411788:	4618      	mov	r0, r3
  41178a:	2208      	movs	r2, #8
  41178c:	2100      	movs	r1, #0
  41178e:	9307      	str	r3, [sp, #28]
  411790:	f7fc fb54 	bl	40de3c <memset>
  411794:	f016 0310 	ands.w	r3, r6, #16
  411798:	9308      	str	r3, [sp, #32]
  41179a:	f000 8136 	beq.w	411a0a <__ssvfscanf_r+0xcca>
  41179e:	f04f 0900 	mov.w	r9, #0
  4117a2:	2c00      	cmp	r4, #0
  4117a4:	f43f ae24 	beq.w	4113f0 <__ssvfscanf_r+0x6b0>
  4117a8:	2500      	movs	r5, #0
  4117aa:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
  4117ae:	f7fb fe51 	bl	40d454 <__locale_mb_cur_max>
  4117b2:	42a8      	cmp	r0, r5
  4117b4:	f43f abf3 	beq.w	410f9e <__ssvfscanf_r+0x25e>
  4117b8:	e89b 000c 	ldmia.w	fp, {r2, r3}
  4117bc:	f812 0b01 	ldrb.w	r0, [r2], #1
  4117c0:	f8cb 2000 	str.w	r2, [fp]
  4117c4:	3b01      	subs	r3, #1
  4117c6:	9a07      	ldr	r2, [sp, #28]
  4117c8:	9200      	str	r2, [sp, #0]
  4117ca:	1c6e      	adds	r6, r5, #1
  4117cc:	f8cb 3004 	str.w	r3, [fp, #4]
  4117d0:	4649      	mov	r1, r9
  4117d2:	f808 0005 	strb.w	r0, [r8, r5]
  4117d6:	4633      	mov	r3, r6
  4117d8:	4642      	mov	r2, r8
  4117da:	4650      	mov	r0, sl
  4117dc:	f002 fd84 	bl	4142e8 <_mbrtowc_r>
  4117e0:	1c41      	adds	r1, r0, #1
  4117e2:	f43f abdc 	beq.w	410f9e <__ssvfscanf_r+0x25e>
  4117e6:	b9e8      	cbnz	r0, 411824 <__ssvfscanf_r+0xae4>
  4117e8:	9b08      	ldr	r3, [sp, #32]
  4117ea:	b9fb      	cbnz	r3, 41182c <__ssvfscanf_r+0xaec>
  4117ec:	f8c9 3000 	str.w	r3, [r9]
  4117f0:	4437      	add	r7, r6
  4117f2:	3c01      	subs	r4, #1
  4117f4:	f109 0904 	add.w	r9, r9, #4
  4117f8:	2500      	movs	r5, #0
  4117fa:	f8db 3004 	ldr.w	r3, [fp, #4]
  4117fe:	2b00      	cmp	r3, #0
  411800:	dd06      	ble.n	411810 <__ssvfscanf_r+0xad0>
  411802:	2c00      	cmp	r4, #0
  411804:	d1d3      	bne.n	4117ae <__ssvfscanf_r+0xa6e>
  411806:	9b08      	ldr	r3, [sp, #32]
  411808:	2b00      	cmp	r3, #0
  41180a:	f43f adee 	beq.w	4113ea <__ssvfscanf_r+0x6aa>
  41180e:	e5ef      	b.n	4113f0 <__ssvfscanf_r+0x6b0>
  411810:	4659      	mov	r1, fp
  411812:	4650      	mov	r0, sl
  411814:	f003 fe24 	bl	415460 <__ssrefill_r>
  411818:	2800      	cmp	r0, #0
  41181a:	d0f2      	beq.n	411802 <__ssvfscanf_r+0xac2>
  41181c:	2d00      	cmp	r5, #0
  41181e:	d0f2      	beq.n	411806 <__ssvfscanf_r+0xac6>
  411820:	f7ff bbbd 	b.w	410f9e <__ssvfscanf_r+0x25e>
  411824:	3002      	adds	r0, #2
  411826:	d105      	bne.n	411834 <__ssvfscanf_r+0xaf4>
  411828:	4635      	mov	r5, r6
  41182a:	e7e6      	b.n	4117fa <__ssvfscanf_r+0xaba>
  41182c:	4437      	add	r7, r6
  41182e:	3c01      	subs	r4, #1
  411830:	4605      	mov	r5, r0
  411832:	e7e2      	b.n	4117fa <__ssvfscanf_r+0xaba>
  411834:	9b08      	ldr	r3, [sp, #32]
  411836:	4437      	add	r7, r6
  411838:	3c01      	subs	r4, #1
  41183a:	2b00      	cmp	r3, #0
  41183c:	d0da      	beq.n	4117f4 <__ssvfscanf_r+0xab4>
  41183e:	2500      	movs	r5, #0
  411840:	e7db      	b.n	4117fa <__ssvfscanf_r+0xaba>
  411842:	9a05      	ldr	r2, [sp, #20]
  411844:	6815      	ldr	r5, [r2, #0]
  411846:	f102 0904 	add.w	r9, r2, #4
  41184a:	46a8      	mov	r8, r5
  41184c:	ae12      	add	r6, sp, #72	; 0x48
  41184e:	f8db 3000 	ldr.w	r3, [fp]
  411852:	781a      	ldrb	r2, [r3, #0]
  411854:	5cb2      	ldrb	r2, [r6, r2]
  411856:	1c59      	adds	r1, r3, #1
  411858:	b1c2      	cbz	r2, 41188c <__ssvfscanf_r+0xb4c>
  41185a:	f8db 2004 	ldr.w	r2, [fp, #4]
  41185e:	f8cb 1000 	str.w	r1, [fp]
  411862:	3a01      	subs	r2, #1
  411864:	f8cb 2004 	str.w	r2, [fp, #4]
  411868:	781b      	ldrb	r3, [r3, #0]
  41186a:	f808 3b01 	strb.w	r3, [r8], #1
  41186e:	3c01      	subs	r4, #1
  411870:	d00c      	beq.n	41188c <__ssvfscanf_r+0xb4c>
  411872:	f8db 3004 	ldr.w	r3, [fp, #4]
  411876:	2b00      	cmp	r3, #0
  411878:	dce9      	bgt.n	41184e <__ssvfscanf_r+0xb0e>
  41187a:	4659      	mov	r1, fp
  41187c:	4650      	mov	r0, sl
  41187e:	f003 fdef 	bl	415460 <__ssrefill_r>
  411882:	2800      	cmp	r0, #0
  411884:	d0e3      	beq.n	41184e <__ssvfscanf_r+0xb0e>
  411886:	4545      	cmp	r5, r8
  411888:	f43f ab89 	beq.w	410f9e <__ssvfscanf_r+0x25e>
  41188c:	ebb8 0505 	subs.w	r5, r8, r5
  411890:	f43f aaa2 	beq.w	410dd8 <__ssvfscanf_r+0x98>
  411894:	9a04      	ldr	r2, [sp, #16]
  411896:	f8cd 9014 	str.w	r9, [sp, #20]
  41189a:	2300      	movs	r3, #0
  41189c:	3201      	adds	r2, #1
  41189e:	f888 3000 	strb.w	r3, [r8]
  4118a2:	9204      	str	r2, [sp, #16]
  4118a4:	442f      	add	r7, r5
  4118a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4118aa:	e423      	b.n	4110f4 <__ssvfscanf_r+0x3b4>
  4118ac:	4622      	mov	r2, r4
  4118ae:	702c      	strb	r4, [r5, #0]
  4118b0:	9b03      	ldr	r3, [sp, #12]
  4118b2:	9908      	ldr	r1, [sp, #32]
  4118b4:	9c06      	ldr	r4, [sp, #24]
  4118b6:	4650      	mov	r0, sl
  4118b8:	47a0      	blx	r4
  4118ba:	06b2      	lsls	r2, r6, #26
  4118bc:	d47c      	bmi.n	4119b8 <__ssvfscanf_r+0xc78>
  4118be:	0773      	lsls	r3, r6, #29
  4118c0:	f100 80bb 	bmi.w	411a3a <__ssvfscanf_r+0xcfa>
  4118c4:	f016 0201 	ands.w	r2, r6, #1
  4118c8:	d176      	bne.n	4119b8 <__ssvfscanf_r+0xc78>
  4118ca:	07b4      	lsls	r4, r6, #30
  4118cc:	d574      	bpl.n	4119b8 <__ssvfscanf_r+0xc78>
  4118ce:	4b5f      	ldr	r3, [pc, #380]	; (411a4c <__ssvfscanf_r+0xd0c>)
  4118d0:	9906      	ldr	r1, [sp, #24]
  4118d2:	4299      	cmp	r1, r3
  4118d4:	4650      	mov	r0, sl
  4118d6:	9b03      	ldr	r3, [sp, #12]
  4118d8:	9908      	ldr	r1, [sp, #32]
  4118da:	f000 80ab 	beq.w	411a34 <__ssvfscanf_r+0xcf4>
  4118de:	f003 fb49 	bl	414f74 <_strtoll_r>
  4118e2:	9a05      	ldr	r2, [sp, #20]
  4118e4:	6813      	ldr	r3, [r2, #0]
  4118e6:	3204      	adds	r2, #4
  4118e8:	9205      	str	r2, [sp, #20]
  4118ea:	e9c3 0100 	strd	r0, r1, [r3]
  4118ee:	e068      	b.n	4119c2 <__ssvfscanf_r+0xc82>
  4118f0:	2d00      	cmp	r5, #0
  4118f2:	f43f ab54 	beq.w	410f9e <__ssvfscanf_r+0x25e>
  4118f6:	442f      	add	r7, r5
  4118f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4118fc:	f7ff bbfa 	b.w	4110f4 <__ssvfscanf_r+0x3b4>
  411900:	9a05      	ldr	r2, [sp, #20]
  411902:	6816      	ldr	r6, [r2, #0]
  411904:	f102 0804 	add.w	r8, r2, #4
  411908:	4635      	mov	r5, r6
  41190a:	f7fb fdb5 	bl	40d478 <__locale_ctype_ptr>
  41190e:	f8db 2000 	ldr.w	r2, [fp]
  411912:	7813      	ldrb	r3, [r2, #0]
  411914:	4418      	add	r0, r3
  411916:	1c51      	adds	r1, r2, #1
  411918:	7843      	ldrb	r3, [r0, #1]
  41191a:	071b      	lsls	r3, r3, #28
  41191c:	d415      	bmi.n	41194a <__ssvfscanf_r+0xc0a>
  41191e:	f8db 3004 	ldr.w	r3, [fp, #4]
  411922:	f8cb 1000 	str.w	r1, [fp]
  411926:	3b01      	subs	r3, #1
  411928:	f8cb 3004 	str.w	r3, [fp, #4]
  41192c:	7813      	ldrb	r3, [r2, #0]
  41192e:	f805 3b01 	strb.w	r3, [r5], #1
  411932:	3c01      	subs	r4, #1
  411934:	d009      	beq.n	41194a <__ssvfscanf_r+0xc0a>
  411936:	f8db 3004 	ldr.w	r3, [fp, #4]
  41193a:	2b00      	cmp	r3, #0
  41193c:	dce5      	bgt.n	41190a <__ssvfscanf_r+0xbca>
  41193e:	4659      	mov	r1, fp
  411940:	4650      	mov	r0, sl
  411942:	f003 fd8d 	bl	415460 <__ssrefill_r>
  411946:	2800      	cmp	r0, #0
  411948:	d0df      	beq.n	41190a <__ssvfscanf_r+0xbca>
  41194a:	9a04      	ldr	r2, [sp, #16]
  41194c:	f8cd 8014 	str.w	r8, [sp, #20]
  411950:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411954:	1bae      	subs	r6, r5, r6
  411956:	2300      	movs	r3, #0
  411958:	3201      	adds	r2, #1
  41195a:	4437      	add	r7, r6
  41195c:	9204      	str	r2, [sp, #16]
  41195e:	702b      	strb	r3, [r5, #0]
  411960:	4644      	mov	r4, r8
  411962:	f7ff ba33 	b.w	410dcc <__ssvfscanf_r+0x8c>
  411966:	9d05      	ldr	r5, [sp, #20]
  411968:	4623      	mov	r3, r4
  41196a:	6829      	ldr	r1, [r5, #0]
  41196c:	f8cd b000 	str.w	fp, [sp]
  411970:	2201      	movs	r2, #1
  411972:	4650      	mov	r0, sl
  411974:	f003 fd92 	bl	41549c <_sfread_r>
  411978:	462b      	mov	r3, r5
  41197a:	3304      	adds	r3, #4
  41197c:	2800      	cmp	r0, #0
  41197e:	f43f ab0e 	beq.w	410f9e <__ssvfscanf_r+0x25e>
  411982:	9a04      	ldr	r2, [sp, #16]
  411984:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411988:	9305      	str	r3, [sp, #20]
  41198a:	3201      	adds	r2, #1
  41198c:	4407      	add	r7, r0
  41198e:	9204      	str	r2, [sp, #16]
  411990:	4644      	mov	r4, r8
  411992:	f7ff ba1b 	b.w	410dcc <__ssvfscanf_r+0x8c>
  411996:	4659      	mov	r1, fp
  411998:	4650      	mov	r0, sl
  41199a:	f003 fd61 	bl	415460 <__ssrefill_r>
  41199e:	2800      	cmp	r0, #0
  4119a0:	f43f aaad 	beq.w	410efe <__ssvfscanf_r+0x1be>
  4119a4:	f7ff bafb 	b.w	410f9e <__ssvfscanf_r+0x25e>
  4119a8:	f426 66f0 	bic.w	r6, r6, #1920	; 0x780
  4119ac:	2501      	movs	r5, #1
  4119ae:	e5af      	b.n	411510 <__ssvfscanf_r+0x7d0>
  4119b0:	f426 66f0 	bic.w	r6, r6, #1920	; 0x780
  4119b4:	2301      	movs	r3, #1
  4119b6:	e5ab      	b.n	411510 <__ssvfscanf_r+0x7d0>
  4119b8:	9a05      	ldr	r2, [sp, #20]
  4119ba:	6813      	ldr	r3, [r2, #0]
  4119bc:	3204      	adds	r2, #4
  4119be:	9205      	str	r2, [sp, #20]
  4119c0:	6018      	str	r0, [r3, #0]
  4119c2:	9b04      	ldr	r3, [sp, #16]
  4119c4:	3301      	adds	r3, #1
  4119c6:	9304      	str	r3, [sp, #16]
  4119c8:	e41c      	b.n	411204 <__ssvfscanf_r+0x4c4>
  4119ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
  4119ce:	465a      	mov	r2, fp
  4119d0:	4650      	mov	r0, sl
  4119d2:	f003 fd05 	bl	4153e0 <_sungetc_r>
  4119d6:	3d01      	subs	r5, #1
  4119d8:	e40c      	b.n	4111f4 <__ssvfscanf_r+0x4b4>
  4119da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4119dc:	ebb8 0203 	subs.w	r2, r8, r3
  4119e0:	f43f ae31 	beq.w	411646 <__ssvfscanf_r+0x906>
  4119e4:	4252      	negs	r2, r2
  4119e6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4119ea:	e6b4      	b.n	411756 <__ssvfscanf_r+0xa16>
  4119ec:	f898 9002 	ldrb.w	r9, [r8, #2]
  4119f0:	f046 0602 	orr.w	r6, r6, #2
  4119f4:	f108 0802 	add.w	r8, r8, #2
  4119f8:	f7ff b9fa 	b.w	410df0 <__ssvfscanf_r+0xb0>
  4119fc:	9a05      	ldr	r2, [sp, #20]
  4119fe:	4613      	mov	r3, r2
  411a00:	3304      	adds	r3, #4
  411a02:	f8d2 9000 	ldr.w	r9, [r2]
  411a06:	9305      	str	r3, [sp, #20]
  411a08:	e4dc      	b.n	4113c4 <__ssvfscanf_r+0x684>
  411a0a:	9a05      	ldr	r2, [sp, #20]
  411a0c:	4613      	mov	r3, r2
  411a0e:	3304      	adds	r3, #4
  411a10:	f8d2 9000 	ldr.w	r9, [r2]
  411a14:	9305      	str	r3, [sp, #20]
  411a16:	2c00      	cmp	r4, #0
  411a18:	f47f aec6 	bne.w	4117a8 <__ssvfscanf_r+0xa68>
  411a1c:	e4e5      	b.n	4113ea <__ssvfscanf_r+0x6aa>
  411a1e:	9a05      	ldr	r2, [sp, #20]
  411a20:	f8dd 8008 	ldr.w	r8, [sp, #8]
  411a24:	6813      	ldr	r3, [r2, #0]
  411a26:	801f      	strh	r7, [r3, #0]
  411a28:	4613      	mov	r3, r2
  411a2a:	3304      	adds	r3, #4
  411a2c:	9305      	str	r3, [sp, #20]
  411a2e:	4644      	mov	r4, r8
  411a30:	f7ff b9cc 	b.w	410dcc <__ssvfscanf_r+0x8c>
  411a34:	f003 fc44 	bl	4152c0 <_strtoull_r>
  411a38:	e753      	b.n	4118e2 <__ssvfscanf_r+0xba2>
  411a3a:	9a05      	ldr	r2, [sp, #20]
  411a3c:	6813      	ldr	r3, [r2, #0]
  411a3e:	3204      	adds	r2, #4
  411a40:	9205      	str	r2, [sp, #20]
  411a42:	8018      	strh	r0, [r3, #0]
  411a44:	e7bd      	b.n	4119c2 <__ssvfscanf_r+0xc82>
  411a46:	bf00      	nop
  411a48:	0041753c 	.word	0x0041753c
  411a4c:	004150e1 	.word	0x004150e1
  411a50:	f7fb fd00 	bl	40d454 <__locale_mb_cur_max>
  411a54:	4286      	cmp	r6, r0
  411a56:	f43f aaa2 	beq.w	410f9e <__ssvfscanf_r+0x25e>
  411a5a:	e89b 000c 	ldmia.w	fp, {r2, r3}
  411a5e:	f812 0b01 	ldrb.w	r0, [r2], #1
  411a62:	f8cb 2000 	str.w	r2, [fp]
  411a66:	1c75      	adds	r5, r6, #1
  411a68:	9a07      	ldr	r2, [sp, #28]
  411a6a:	9200      	str	r2, [sp, #0]
  411a6c:	3b01      	subs	r3, #1
  411a6e:	f808 0006 	strb.w	r0, [r8, r6]
  411a72:	f8cb 3004 	str.w	r3, [fp, #4]
  411a76:	4642      	mov	r2, r8
  411a78:	462b      	mov	r3, r5
  411a7a:	4649      	mov	r1, r9
  411a7c:	4650      	mov	r0, sl
  411a7e:	f002 fc33 	bl	4142e8 <_mbrtowc_r>
  411a82:	1c46      	adds	r6, r0, #1
  411a84:	f43f aa8b 	beq.w	410f9e <__ssvfscanf_r+0x25e>
  411a88:	b990      	cbnz	r0, 411ab0 <__ssvfscanf_r+0xd70>
  411a8a:	f8c9 0000 	str.w	r0, [r9]
  411a8e:	f002 fbf7 	bl	414280 <iswspace>
  411a92:	4606      	mov	r6, r0
  411a94:	b1f8      	cbz	r0, 411ad6 <__ssvfscanf_r+0xd96>
  411a96:	2d00      	cmp	r5, #0
  411a98:	f43f aca3 	beq.w	4113e2 <__ssvfscanf_r+0x6a2>
  411a9c:	4445      	add	r5, r8
  411a9e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
  411aa2:	465a      	mov	r2, fp
  411aa4:	4650      	mov	r0, sl
  411aa6:	f003 fc9b 	bl	4153e0 <_sungetc_r>
  411aaa:	45a8      	cmp	r8, r5
  411aac:	d1f7      	bne.n	411a9e <__ssvfscanf_r+0xd5e>
  411aae:	e498      	b.n	4113e2 <__ssvfscanf_r+0x6a2>
  411ab0:	3002      	adds	r0, #2
  411ab2:	d119      	bne.n	411ae8 <__ssvfscanf_r+0xda8>
  411ab4:	462e      	mov	r6, r5
  411ab6:	f8db 3004 	ldr.w	r3, [fp, #4]
  411aba:	2b00      	cmp	r3, #0
  411abc:	f73f ac85 	bgt.w	4113ca <__ssvfscanf_r+0x68a>
  411ac0:	4659      	mov	r1, fp
  411ac2:	4650      	mov	r0, sl
  411ac4:	f003 fccc 	bl	415460 <__ssrefill_r>
  411ac8:	2800      	cmp	r0, #0
  411aca:	f43f ac7e 	beq.w	4113ca <__ssvfscanf_r+0x68a>
  411ace:	2e00      	cmp	r6, #0
  411ad0:	f47f aa65 	bne.w	410f9e <__ssvfscanf_r+0x25e>
  411ad4:	e485      	b.n	4113e2 <__ssvfscanf_r+0x6a2>
  411ad6:	9b08      	ldr	r3, [sp, #32]
  411ad8:	442f      	add	r7, r5
  411ada:	3c01      	subs	r4, #1
  411adc:	2b00      	cmp	r3, #0
  411ade:	d1ea      	bne.n	411ab6 <__ssvfscanf_r+0xd76>
  411ae0:	f109 0904 	add.w	r9, r9, #4
  411ae4:	461e      	mov	r6, r3
  411ae6:	e7e6      	b.n	411ab6 <__ssvfscanf_r+0xd76>
  411ae8:	f8d9 0000 	ldr.w	r0, [r9]
  411aec:	e7cf      	b.n	411a8e <__ssvfscanf_r+0xd4e>
  411aee:	9b08      	ldr	r3, [sp, #32]
  411af0:	4599      	cmp	r9, r3
  411af2:	f67f a971 	bls.w	410dd8 <__ssvfscanf_r+0x98>
  411af6:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
  411afa:	465a      	mov	r2, fp
  411afc:	4650      	mov	r0, sl
  411afe:	f003 fc6f 	bl	4153e0 <_sungetc_r>
  411b02:	9b08      	ldr	r3, [sp, #32]
  411b04:	4599      	cmp	r9, r3
  411b06:	d1f6      	bne.n	411af6 <__ssvfscanf_r+0xdb6>
  411b08:	f7ff b966 	b.w	410dd8 <__ssvfscanf_r+0x98>
  411b0c:	9b08      	ldr	r3, [sp, #32]
  411b0e:	4599      	cmp	r9, r3
  411b10:	f67f a962 	bls.w	410dd8 <__ssvfscanf_r+0x98>
  411b14:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
  411b18:	465a      	mov	r2, fp
  411b1a:	4650      	mov	r0, sl
  411b1c:	f003 fc60 	bl	4153e0 <_sungetc_r>
  411b20:	9b08      	ldr	r3, [sp, #32]
  411b22:	4599      	cmp	r9, r3
  411b24:	d1f6      	bne.n	411b14 <__ssvfscanf_r+0xdd4>
  411b26:	f7ff b957 	b.w	410dd8 <__ssvfscanf_r+0x98>
  411b2a:	9b08      	ldr	r3, [sp, #32]
  411b2c:	4599      	cmp	r9, r3
  411b2e:	f67f a953 	bls.w	410dd8 <__ssvfscanf_r+0x98>
  411b32:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
  411b36:	465a      	mov	r2, fp
  411b38:	4650      	mov	r0, sl
  411b3a:	f003 fc51 	bl	4153e0 <_sungetc_r>
  411b3e:	9b08      	ldr	r3, [sp, #32]
  411b40:	4599      	cmp	r9, r3
  411b42:	d1f6      	bne.n	411b32 <__ssvfscanf_r+0xdf2>
  411b44:	f7ff b948 	b.w	410dd8 <__ssvfscanf_r+0x98>
  411b48:	4630      	mov	r0, r6
  411b4a:	f003 f89b 	bl	414c84 <nanf>
  411b4e:	9505      	str	r5, [sp, #20]
  411b50:	6020      	str	r0, [r4, #0]
  411b52:	e58a      	b.n	41166a <__ssvfscanf_r+0x92a>

00411b54 <__sprint_r.part.0>:
  411b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411b58:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  411b5a:	049c      	lsls	r4, r3, #18
  411b5c:	4693      	mov	fp, r2
  411b5e:	d52f      	bpl.n	411bc0 <__sprint_r.part.0+0x6c>
  411b60:	6893      	ldr	r3, [r2, #8]
  411b62:	6812      	ldr	r2, [r2, #0]
  411b64:	b353      	cbz	r3, 411bbc <__sprint_r.part.0+0x68>
  411b66:	460e      	mov	r6, r1
  411b68:	4607      	mov	r7, r0
  411b6a:	f102 0908 	add.w	r9, r2, #8
  411b6e:	e919 0420 	ldmdb	r9, {r5, sl}
  411b72:	ea5f 089a 	movs.w	r8, sl, lsr #2
  411b76:	d017      	beq.n	411ba8 <__sprint_r.part.0+0x54>
  411b78:	3d04      	subs	r5, #4
  411b7a:	2400      	movs	r4, #0
  411b7c:	e001      	b.n	411b82 <__sprint_r.part.0+0x2e>
  411b7e:	45a0      	cmp	r8, r4
  411b80:	d010      	beq.n	411ba4 <__sprint_r.part.0+0x50>
  411b82:	4632      	mov	r2, r6
  411b84:	f855 1f04 	ldr.w	r1, [r5, #4]!
  411b88:	4638      	mov	r0, r7
  411b8a:	f001 ff81 	bl	413a90 <_fputwc_r>
  411b8e:	1c43      	adds	r3, r0, #1
  411b90:	f104 0401 	add.w	r4, r4, #1
  411b94:	d1f3      	bne.n	411b7e <__sprint_r.part.0+0x2a>
  411b96:	2300      	movs	r3, #0
  411b98:	f8cb 3008 	str.w	r3, [fp, #8]
  411b9c:	f8cb 3004 	str.w	r3, [fp, #4]
  411ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411ba4:	f8db 3008 	ldr.w	r3, [fp, #8]
  411ba8:	f02a 0a03 	bic.w	sl, sl, #3
  411bac:	eba3 030a 	sub.w	r3, r3, sl
  411bb0:	f8cb 3008 	str.w	r3, [fp, #8]
  411bb4:	f109 0908 	add.w	r9, r9, #8
  411bb8:	2b00      	cmp	r3, #0
  411bba:	d1d8      	bne.n	411b6e <__sprint_r.part.0+0x1a>
  411bbc:	2000      	movs	r0, #0
  411bbe:	e7ea      	b.n	411b96 <__sprint_r.part.0+0x42>
  411bc0:	f7fb fa6a 	bl	40d098 <__sfvwrite_r>
  411bc4:	2300      	movs	r3, #0
  411bc6:	f8cb 3008 	str.w	r3, [fp, #8]
  411bca:	f8cb 3004 	str.w	r3, [fp, #4]
  411bce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411bd2:	bf00      	nop

00411bd4 <_vfiprintf_r>:
  411bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411bd8:	b0ad      	sub	sp, #180	; 0xb4
  411bda:	461d      	mov	r5, r3
  411bdc:	468b      	mov	fp, r1
  411bde:	4690      	mov	r8, r2
  411be0:	9307      	str	r3, [sp, #28]
  411be2:	9006      	str	r0, [sp, #24]
  411be4:	b118      	cbz	r0, 411bee <_vfiprintf_r+0x1a>
  411be6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411be8:	2b00      	cmp	r3, #0
  411bea:	f000 80f3 	beq.w	411dd4 <_vfiprintf_r+0x200>
  411bee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  411bf2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  411bf6:	07df      	lsls	r7, r3, #31
  411bf8:	b281      	uxth	r1, r0
  411bfa:	d402      	bmi.n	411c02 <_vfiprintf_r+0x2e>
  411bfc:	058e      	lsls	r6, r1, #22
  411bfe:	f140 80fc 	bpl.w	411dfa <_vfiprintf_r+0x226>
  411c02:	048c      	lsls	r4, r1, #18
  411c04:	d40a      	bmi.n	411c1c <_vfiprintf_r+0x48>
  411c06:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  411c0a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  411c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  411c12:	f8ab 100c 	strh.w	r1, [fp, #12]
  411c16:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  411c1a:	b289      	uxth	r1, r1
  411c1c:	0708      	lsls	r0, r1, #28
  411c1e:	f140 80b3 	bpl.w	411d88 <_vfiprintf_r+0x1b4>
  411c22:	f8db 3010 	ldr.w	r3, [fp, #16]
  411c26:	2b00      	cmp	r3, #0
  411c28:	f000 80ae 	beq.w	411d88 <_vfiprintf_r+0x1b4>
  411c2c:	f001 031a 	and.w	r3, r1, #26
  411c30:	2b0a      	cmp	r3, #10
  411c32:	f000 80b5 	beq.w	411da0 <_vfiprintf_r+0x1cc>
  411c36:	2300      	movs	r3, #0
  411c38:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  411c3c:	930b      	str	r3, [sp, #44]	; 0x2c
  411c3e:	9311      	str	r3, [sp, #68]	; 0x44
  411c40:	9310      	str	r3, [sp, #64]	; 0x40
  411c42:	9303      	str	r3, [sp, #12]
  411c44:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  411c48:	46ca      	mov	sl, r9
  411c4a:	f8cd b010 	str.w	fp, [sp, #16]
  411c4e:	f898 3000 	ldrb.w	r3, [r8]
  411c52:	4644      	mov	r4, r8
  411c54:	b1fb      	cbz	r3, 411c96 <_vfiprintf_r+0xc2>
  411c56:	2b25      	cmp	r3, #37	; 0x25
  411c58:	d102      	bne.n	411c60 <_vfiprintf_r+0x8c>
  411c5a:	e01c      	b.n	411c96 <_vfiprintf_r+0xc2>
  411c5c:	2b25      	cmp	r3, #37	; 0x25
  411c5e:	d003      	beq.n	411c68 <_vfiprintf_r+0x94>
  411c60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  411c64:	2b00      	cmp	r3, #0
  411c66:	d1f9      	bne.n	411c5c <_vfiprintf_r+0x88>
  411c68:	eba4 0508 	sub.w	r5, r4, r8
  411c6c:	b19d      	cbz	r5, 411c96 <_vfiprintf_r+0xc2>
  411c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  411c70:	9a11      	ldr	r2, [sp, #68]	; 0x44
  411c72:	f8ca 8000 	str.w	r8, [sl]
  411c76:	3301      	adds	r3, #1
  411c78:	442a      	add	r2, r5
  411c7a:	2b07      	cmp	r3, #7
  411c7c:	f8ca 5004 	str.w	r5, [sl, #4]
  411c80:	9211      	str	r2, [sp, #68]	; 0x44
  411c82:	9310      	str	r3, [sp, #64]	; 0x40
  411c84:	dd7a      	ble.n	411d7c <_vfiprintf_r+0x1a8>
  411c86:	2a00      	cmp	r2, #0
  411c88:	f040 84b0 	bne.w	4125ec <_vfiprintf_r+0xa18>
  411c8c:	9b03      	ldr	r3, [sp, #12]
  411c8e:	9210      	str	r2, [sp, #64]	; 0x40
  411c90:	442b      	add	r3, r5
  411c92:	46ca      	mov	sl, r9
  411c94:	9303      	str	r3, [sp, #12]
  411c96:	7823      	ldrb	r3, [r4, #0]
  411c98:	2b00      	cmp	r3, #0
  411c9a:	f000 83e0 	beq.w	41245e <_vfiprintf_r+0x88a>
  411c9e:	2000      	movs	r0, #0
  411ca0:	f04f 0300 	mov.w	r3, #0
  411ca4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  411ca8:	f104 0801 	add.w	r8, r4, #1
  411cac:	7862      	ldrb	r2, [r4, #1]
  411cae:	4605      	mov	r5, r0
  411cb0:	4606      	mov	r6, r0
  411cb2:	4603      	mov	r3, r0
  411cb4:	f04f 34ff 	mov.w	r4, #4294967295
  411cb8:	f108 0801 	add.w	r8, r8, #1
  411cbc:	f1a2 0120 	sub.w	r1, r2, #32
  411cc0:	2958      	cmp	r1, #88	; 0x58
  411cc2:	f200 82de 	bhi.w	412282 <_vfiprintf_r+0x6ae>
  411cc6:	e8df f011 	tbh	[pc, r1, lsl #1]
  411cca:	0221      	.short	0x0221
  411ccc:	02dc02dc 	.word	0x02dc02dc
  411cd0:	02dc0229 	.word	0x02dc0229
  411cd4:	02dc02dc 	.word	0x02dc02dc
  411cd8:	02dc02dc 	.word	0x02dc02dc
  411cdc:	028902dc 	.word	0x028902dc
  411ce0:	02dc0295 	.word	0x02dc0295
  411ce4:	02bd00a2 	.word	0x02bd00a2
  411ce8:	019f02dc 	.word	0x019f02dc
  411cec:	01a401a4 	.word	0x01a401a4
  411cf0:	01a401a4 	.word	0x01a401a4
  411cf4:	01a401a4 	.word	0x01a401a4
  411cf8:	01a401a4 	.word	0x01a401a4
  411cfc:	02dc01a4 	.word	0x02dc01a4
  411d00:	02dc02dc 	.word	0x02dc02dc
  411d04:	02dc02dc 	.word	0x02dc02dc
  411d08:	02dc02dc 	.word	0x02dc02dc
  411d0c:	02dc02dc 	.word	0x02dc02dc
  411d10:	01b202dc 	.word	0x01b202dc
  411d14:	02dc02dc 	.word	0x02dc02dc
  411d18:	02dc02dc 	.word	0x02dc02dc
  411d1c:	02dc02dc 	.word	0x02dc02dc
  411d20:	02dc02dc 	.word	0x02dc02dc
  411d24:	02dc02dc 	.word	0x02dc02dc
  411d28:	02dc0197 	.word	0x02dc0197
  411d2c:	02dc02dc 	.word	0x02dc02dc
  411d30:	02dc02dc 	.word	0x02dc02dc
  411d34:	02dc019b 	.word	0x02dc019b
  411d38:	025302dc 	.word	0x025302dc
  411d3c:	02dc02dc 	.word	0x02dc02dc
  411d40:	02dc02dc 	.word	0x02dc02dc
  411d44:	02dc02dc 	.word	0x02dc02dc
  411d48:	02dc02dc 	.word	0x02dc02dc
  411d4c:	02dc02dc 	.word	0x02dc02dc
  411d50:	021b025a 	.word	0x021b025a
  411d54:	02dc02dc 	.word	0x02dc02dc
  411d58:	026e02dc 	.word	0x026e02dc
  411d5c:	02dc021b 	.word	0x02dc021b
  411d60:	027302dc 	.word	0x027302dc
  411d64:	01f502dc 	.word	0x01f502dc
  411d68:	02090182 	.word	0x02090182
  411d6c:	02dc02d7 	.word	0x02dc02d7
  411d70:	02dc029a 	.word	0x02dc029a
  411d74:	02dc00a7 	.word	0x02dc00a7
  411d78:	022e02dc 	.word	0x022e02dc
  411d7c:	f10a 0a08 	add.w	sl, sl, #8
  411d80:	9b03      	ldr	r3, [sp, #12]
  411d82:	442b      	add	r3, r5
  411d84:	9303      	str	r3, [sp, #12]
  411d86:	e786      	b.n	411c96 <_vfiprintf_r+0xc2>
  411d88:	4659      	mov	r1, fp
  411d8a:	9806      	ldr	r0, [sp, #24]
  411d8c:	f000 fdd0 	bl	412930 <__swsetup_r>
  411d90:	bb18      	cbnz	r0, 411dda <_vfiprintf_r+0x206>
  411d92:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  411d96:	f001 031a 	and.w	r3, r1, #26
  411d9a:	2b0a      	cmp	r3, #10
  411d9c:	f47f af4b 	bne.w	411c36 <_vfiprintf_r+0x62>
  411da0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  411da4:	2b00      	cmp	r3, #0
  411da6:	f6ff af46 	blt.w	411c36 <_vfiprintf_r+0x62>
  411daa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  411dae:	07db      	lsls	r3, r3, #31
  411db0:	d405      	bmi.n	411dbe <_vfiprintf_r+0x1ea>
  411db2:	058f      	lsls	r7, r1, #22
  411db4:	d403      	bmi.n	411dbe <_vfiprintf_r+0x1ea>
  411db6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  411dba:	f7fb fb71 	bl	40d4a0 <__retarget_lock_release_recursive>
  411dbe:	462b      	mov	r3, r5
  411dc0:	4642      	mov	r2, r8
  411dc2:	4659      	mov	r1, fp
  411dc4:	9806      	ldr	r0, [sp, #24]
  411dc6:	f000 fd4d 	bl	412864 <__sbprintf>
  411dca:	9003      	str	r0, [sp, #12]
  411dcc:	9803      	ldr	r0, [sp, #12]
  411dce:	b02d      	add	sp, #180	; 0xb4
  411dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411dd4:	f7fa ffde 	bl	40cd94 <__sinit>
  411dd8:	e709      	b.n	411bee <_vfiprintf_r+0x1a>
  411dda:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  411dde:	07d9      	lsls	r1, r3, #31
  411de0:	d404      	bmi.n	411dec <_vfiprintf_r+0x218>
  411de2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  411de6:	059a      	lsls	r2, r3, #22
  411de8:	f140 84aa 	bpl.w	412740 <_vfiprintf_r+0xb6c>
  411dec:	f04f 33ff 	mov.w	r3, #4294967295
  411df0:	9303      	str	r3, [sp, #12]
  411df2:	9803      	ldr	r0, [sp, #12]
  411df4:	b02d      	add	sp, #180	; 0xb4
  411df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411dfa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  411dfe:	f7fb fb4d 	bl	40d49c <__retarget_lock_acquire_recursive>
  411e02:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  411e06:	b281      	uxth	r1, r0
  411e08:	e6fb      	b.n	411c02 <_vfiprintf_r+0x2e>
  411e0a:	4276      	negs	r6, r6
  411e0c:	9207      	str	r2, [sp, #28]
  411e0e:	f043 0304 	orr.w	r3, r3, #4
  411e12:	f898 2000 	ldrb.w	r2, [r8]
  411e16:	e74f      	b.n	411cb8 <_vfiprintf_r+0xe4>
  411e18:	9608      	str	r6, [sp, #32]
  411e1a:	069e      	lsls	r6, r3, #26
  411e1c:	f100 8450 	bmi.w	4126c0 <_vfiprintf_r+0xaec>
  411e20:	9907      	ldr	r1, [sp, #28]
  411e22:	06dd      	lsls	r5, r3, #27
  411e24:	460a      	mov	r2, r1
  411e26:	f100 83ef 	bmi.w	412608 <_vfiprintf_r+0xa34>
  411e2a:	0658      	lsls	r0, r3, #25
  411e2c:	f140 83ec 	bpl.w	412608 <_vfiprintf_r+0xa34>
  411e30:	880e      	ldrh	r6, [r1, #0]
  411e32:	3104      	adds	r1, #4
  411e34:	2700      	movs	r7, #0
  411e36:	2201      	movs	r2, #1
  411e38:	9107      	str	r1, [sp, #28]
  411e3a:	f04f 0100 	mov.w	r1, #0
  411e3e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  411e42:	2500      	movs	r5, #0
  411e44:	1c61      	adds	r1, r4, #1
  411e46:	f000 8116 	beq.w	412076 <_vfiprintf_r+0x4a2>
  411e4a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  411e4e:	9102      	str	r1, [sp, #8]
  411e50:	ea56 0107 	orrs.w	r1, r6, r7
  411e54:	f040 8114 	bne.w	412080 <_vfiprintf_r+0x4ac>
  411e58:	2c00      	cmp	r4, #0
  411e5a:	f040 835c 	bne.w	412516 <_vfiprintf_r+0x942>
  411e5e:	2a00      	cmp	r2, #0
  411e60:	f040 83b7 	bne.w	4125d2 <_vfiprintf_r+0x9fe>
  411e64:	f013 0301 	ands.w	r3, r3, #1
  411e68:	9305      	str	r3, [sp, #20]
  411e6a:	f000 8457 	beq.w	41271c <_vfiprintf_r+0xb48>
  411e6e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  411e72:	2330      	movs	r3, #48	; 0x30
  411e74:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  411e78:	9b05      	ldr	r3, [sp, #20]
  411e7a:	42a3      	cmp	r3, r4
  411e7c:	bfb8      	it	lt
  411e7e:	4623      	movlt	r3, r4
  411e80:	9301      	str	r3, [sp, #4]
  411e82:	b10d      	cbz	r5, 411e88 <_vfiprintf_r+0x2b4>
  411e84:	3301      	adds	r3, #1
  411e86:	9301      	str	r3, [sp, #4]
  411e88:	9b02      	ldr	r3, [sp, #8]
  411e8a:	f013 0302 	ands.w	r3, r3, #2
  411e8e:	9309      	str	r3, [sp, #36]	; 0x24
  411e90:	d002      	beq.n	411e98 <_vfiprintf_r+0x2c4>
  411e92:	9b01      	ldr	r3, [sp, #4]
  411e94:	3302      	adds	r3, #2
  411e96:	9301      	str	r3, [sp, #4]
  411e98:	9b02      	ldr	r3, [sp, #8]
  411e9a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  411e9e:	930a      	str	r3, [sp, #40]	; 0x28
  411ea0:	f040 8217 	bne.w	4122d2 <_vfiprintf_r+0x6fe>
  411ea4:	9b08      	ldr	r3, [sp, #32]
  411ea6:	9a01      	ldr	r2, [sp, #4]
  411ea8:	1a9d      	subs	r5, r3, r2
  411eaa:	2d00      	cmp	r5, #0
  411eac:	f340 8211 	ble.w	4122d2 <_vfiprintf_r+0x6fe>
  411eb0:	2d10      	cmp	r5, #16
  411eb2:	f340 8490 	ble.w	4127d6 <_vfiprintf_r+0xc02>
  411eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  411eb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  411eba:	4ec4      	ldr	r6, [pc, #784]	; (4121cc <_vfiprintf_r+0x5f8>)
  411ebc:	46d6      	mov	lr, sl
  411ebe:	2710      	movs	r7, #16
  411ec0:	46a2      	mov	sl, r4
  411ec2:	4619      	mov	r1, r3
  411ec4:	9c06      	ldr	r4, [sp, #24]
  411ec6:	e007      	b.n	411ed8 <_vfiprintf_r+0x304>
  411ec8:	f101 0c02 	add.w	ip, r1, #2
  411ecc:	f10e 0e08 	add.w	lr, lr, #8
  411ed0:	4601      	mov	r1, r0
  411ed2:	3d10      	subs	r5, #16
  411ed4:	2d10      	cmp	r5, #16
  411ed6:	dd11      	ble.n	411efc <_vfiprintf_r+0x328>
  411ed8:	1c48      	adds	r0, r1, #1
  411eda:	3210      	adds	r2, #16
  411edc:	2807      	cmp	r0, #7
  411ede:	9211      	str	r2, [sp, #68]	; 0x44
  411ee0:	e88e 00c0 	stmia.w	lr, {r6, r7}
  411ee4:	9010      	str	r0, [sp, #64]	; 0x40
  411ee6:	ddef      	ble.n	411ec8 <_vfiprintf_r+0x2f4>
  411ee8:	2a00      	cmp	r2, #0
  411eea:	f040 81e4 	bne.w	4122b6 <_vfiprintf_r+0x6e2>
  411eee:	3d10      	subs	r5, #16
  411ef0:	2d10      	cmp	r5, #16
  411ef2:	4611      	mov	r1, r2
  411ef4:	f04f 0c01 	mov.w	ip, #1
  411ef8:	46ce      	mov	lr, r9
  411efa:	dced      	bgt.n	411ed8 <_vfiprintf_r+0x304>
  411efc:	4654      	mov	r4, sl
  411efe:	4661      	mov	r1, ip
  411f00:	46f2      	mov	sl, lr
  411f02:	442a      	add	r2, r5
  411f04:	2907      	cmp	r1, #7
  411f06:	9211      	str	r2, [sp, #68]	; 0x44
  411f08:	f8ca 6000 	str.w	r6, [sl]
  411f0c:	f8ca 5004 	str.w	r5, [sl, #4]
  411f10:	9110      	str	r1, [sp, #64]	; 0x40
  411f12:	f300 82ec 	bgt.w	4124ee <_vfiprintf_r+0x91a>
  411f16:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  411f1a:	f10a 0a08 	add.w	sl, sl, #8
  411f1e:	1c48      	adds	r0, r1, #1
  411f20:	2d00      	cmp	r5, #0
  411f22:	f040 81de 	bne.w	4122e2 <_vfiprintf_r+0x70e>
  411f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411f28:	2b00      	cmp	r3, #0
  411f2a:	f000 81f8 	beq.w	41231e <_vfiprintf_r+0x74a>
  411f2e:	3202      	adds	r2, #2
  411f30:	a90e      	add	r1, sp, #56	; 0x38
  411f32:	2302      	movs	r3, #2
  411f34:	2807      	cmp	r0, #7
  411f36:	9211      	str	r2, [sp, #68]	; 0x44
  411f38:	9010      	str	r0, [sp, #64]	; 0x40
  411f3a:	e88a 000a 	stmia.w	sl, {r1, r3}
  411f3e:	f340 81ea 	ble.w	412316 <_vfiprintf_r+0x742>
  411f42:	2a00      	cmp	r2, #0
  411f44:	f040 838c 	bne.w	412660 <_vfiprintf_r+0xa8c>
  411f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411f4a:	2b80      	cmp	r3, #128	; 0x80
  411f4c:	f04f 0001 	mov.w	r0, #1
  411f50:	4611      	mov	r1, r2
  411f52:	46ca      	mov	sl, r9
  411f54:	f040 81e7 	bne.w	412326 <_vfiprintf_r+0x752>
  411f58:	9b08      	ldr	r3, [sp, #32]
  411f5a:	9d01      	ldr	r5, [sp, #4]
  411f5c:	1b5e      	subs	r6, r3, r5
  411f5e:	2e00      	cmp	r6, #0
  411f60:	f340 81e1 	ble.w	412326 <_vfiprintf_r+0x752>
  411f64:	2e10      	cmp	r6, #16
  411f66:	4d9a      	ldr	r5, [pc, #616]	; (4121d0 <_vfiprintf_r+0x5fc>)
  411f68:	f340 8450 	ble.w	41280c <_vfiprintf_r+0xc38>
  411f6c:	46d4      	mov	ip, sl
  411f6e:	2710      	movs	r7, #16
  411f70:	46a2      	mov	sl, r4
  411f72:	9c06      	ldr	r4, [sp, #24]
  411f74:	e007      	b.n	411f86 <_vfiprintf_r+0x3b2>
  411f76:	f101 0e02 	add.w	lr, r1, #2
  411f7a:	f10c 0c08 	add.w	ip, ip, #8
  411f7e:	4601      	mov	r1, r0
  411f80:	3e10      	subs	r6, #16
  411f82:	2e10      	cmp	r6, #16
  411f84:	dd11      	ble.n	411faa <_vfiprintf_r+0x3d6>
  411f86:	1c48      	adds	r0, r1, #1
  411f88:	3210      	adds	r2, #16
  411f8a:	2807      	cmp	r0, #7
  411f8c:	9211      	str	r2, [sp, #68]	; 0x44
  411f8e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  411f92:	9010      	str	r0, [sp, #64]	; 0x40
  411f94:	ddef      	ble.n	411f76 <_vfiprintf_r+0x3a2>
  411f96:	2a00      	cmp	r2, #0
  411f98:	f040 829d 	bne.w	4124d6 <_vfiprintf_r+0x902>
  411f9c:	3e10      	subs	r6, #16
  411f9e:	2e10      	cmp	r6, #16
  411fa0:	f04f 0e01 	mov.w	lr, #1
  411fa4:	4611      	mov	r1, r2
  411fa6:	46cc      	mov	ip, r9
  411fa8:	dced      	bgt.n	411f86 <_vfiprintf_r+0x3b2>
  411faa:	4654      	mov	r4, sl
  411fac:	46e2      	mov	sl, ip
  411fae:	4432      	add	r2, r6
  411fb0:	f1be 0f07 	cmp.w	lr, #7
  411fb4:	9211      	str	r2, [sp, #68]	; 0x44
  411fb6:	e88a 0060 	stmia.w	sl, {r5, r6}
  411fba:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  411fbe:	f300 8369 	bgt.w	412694 <_vfiprintf_r+0xac0>
  411fc2:	f10a 0a08 	add.w	sl, sl, #8
  411fc6:	f10e 0001 	add.w	r0, lr, #1
  411fca:	4671      	mov	r1, lr
  411fcc:	e1ab      	b.n	412326 <_vfiprintf_r+0x752>
  411fce:	9608      	str	r6, [sp, #32]
  411fd0:	f013 0220 	ands.w	r2, r3, #32
  411fd4:	f040 838c 	bne.w	4126f0 <_vfiprintf_r+0xb1c>
  411fd8:	f013 0110 	ands.w	r1, r3, #16
  411fdc:	f040 831a 	bne.w	412614 <_vfiprintf_r+0xa40>
  411fe0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  411fe4:	f000 8316 	beq.w	412614 <_vfiprintf_r+0xa40>
  411fe8:	9807      	ldr	r0, [sp, #28]
  411fea:	460a      	mov	r2, r1
  411fec:	4601      	mov	r1, r0
  411fee:	3104      	adds	r1, #4
  411ff0:	8806      	ldrh	r6, [r0, #0]
  411ff2:	9107      	str	r1, [sp, #28]
  411ff4:	2700      	movs	r7, #0
  411ff6:	e720      	b.n	411e3a <_vfiprintf_r+0x266>
  411ff8:	9608      	str	r6, [sp, #32]
  411ffa:	f043 0310 	orr.w	r3, r3, #16
  411ffe:	e7e7      	b.n	411fd0 <_vfiprintf_r+0x3fc>
  412000:	9608      	str	r6, [sp, #32]
  412002:	f043 0310 	orr.w	r3, r3, #16
  412006:	e708      	b.n	411e1a <_vfiprintf_r+0x246>
  412008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41200c:	f898 2000 	ldrb.w	r2, [r8]
  412010:	e652      	b.n	411cb8 <_vfiprintf_r+0xe4>
  412012:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  412016:	2600      	movs	r6, #0
  412018:	f818 2b01 	ldrb.w	r2, [r8], #1
  41201c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  412020:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  412024:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  412028:	2909      	cmp	r1, #9
  41202a:	d9f5      	bls.n	412018 <_vfiprintf_r+0x444>
  41202c:	e646      	b.n	411cbc <_vfiprintf_r+0xe8>
  41202e:	9608      	str	r6, [sp, #32]
  412030:	2800      	cmp	r0, #0
  412032:	f040 8408 	bne.w	412846 <_vfiprintf_r+0xc72>
  412036:	f043 0310 	orr.w	r3, r3, #16
  41203a:	069e      	lsls	r6, r3, #26
  41203c:	f100 834c 	bmi.w	4126d8 <_vfiprintf_r+0xb04>
  412040:	06dd      	lsls	r5, r3, #27
  412042:	f100 82f3 	bmi.w	41262c <_vfiprintf_r+0xa58>
  412046:	0658      	lsls	r0, r3, #25
  412048:	f140 82f0 	bpl.w	41262c <_vfiprintf_r+0xa58>
  41204c:	9d07      	ldr	r5, [sp, #28]
  41204e:	f9b5 6000 	ldrsh.w	r6, [r5]
  412052:	462a      	mov	r2, r5
  412054:	17f7      	asrs	r7, r6, #31
  412056:	3204      	adds	r2, #4
  412058:	4630      	mov	r0, r6
  41205a:	4639      	mov	r1, r7
  41205c:	9207      	str	r2, [sp, #28]
  41205e:	2800      	cmp	r0, #0
  412060:	f171 0200 	sbcs.w	r2, r1, #0
  412064:	f2c0 835d 	blt.w	412722 <_vfiprintf_r+0xb4e>
  412068:	1c61      	adds	r1, r4, #1
  41206a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41206e:	f04f 0201 	mov.w	r2, #1
  412072:	f47f aeea 	bne.w	411e4a <_vfiprintf_r+0x276>
  412076:	ea56 0107 	orrs.w	r1, r6, r7
  41207a:	f000 824d 	beq.w	412518 <_vfiprintf_r+0x944>
  41207e:	9302      	str	r3, [sp, #8]
  412080:	2a01      	cmp	r2, #1
  412082:	f000 828c 	beq.w	41259e <_vfiprintf_r+0x9ca>
  412086:	2a02      	cmp	r2, #2
  412088:	f040 825c 	bne.w	412544 <_vfiprintf_r+0x970>
  41208c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41208e:	46cb      	mov	fp, r9
  412090:	0933      	lsrs	r3, r6, #4
  412092:	f006 010f 	and.w	r1, r6, #15
  412096:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  41209a:	093a      	lsrs	r2, r7, #4
  41209c:	461e      	mov	r6, r3
  41209e:	4617      	mov	r7, r2
  4120a0:	5c43      	ldrb	r3, [r0, r1]
  4120a2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4120a6:	ea56 0307 	orrs.w	r3, r6, r7
  4120aa:	d1f1      	bne.n	412090 <_vfiprintf_r+0x4bc>
  4120ac:	eba9 030b 	sub.w	r3, r9, fp
  4120b0:	9305      	str	r3, [sp, #20]
  4120b2:	e6e1      	b.n	411e78 <_vfiprintf_r+0x2a4>
  4120b4:	2800      	cmp	r0, #0
  4120b6:	f040 83c0 	bne.w	41283a <_vfiprintf_r+0xc66>
  4120ba:	0699      	lsls	r1, r3, #26
  4120bc:	f100 8367 	bmi.w	41278e <_vfiprintf_r+0xbba>
  4120c0:	06da      	lsls	r2, r3, #27
  4120c2:	f100 80f1 	bmi.w	4122a8 <_vfiprintf_r+0x6d4>
  4120c6:	065b      	lsls	r3, r3, #25
  4120c8:	f140 80ee 	bpl.w	4122a8 <_vfiprintf_r+0x6d4>
  4120cc:	9a07      	ldr	r2, [sp, #28]
  4120ce:	6813      	ldr	r3, [r2, #0]
  4120d0:	3204      	adds	r2, #4
  4120d2:	9207      	str	r2, [sp, #28]
  4120d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4120d8:	801a      	strh	r2, [r3, #0]
  4120da:	e5b8      	b.n	411c4e <_vfiprintf_r+0x7a>
  4120dc:	9807      	ldr	r0, [sp, #28]
  4120de:	4a3d      	ldr	r2, [pc, #244]	; (4121d4 <_vfiprintf_r+0x600>)
  4120e0:	9608      	str	r6, [sp, #32]
  4120e2:	920b      	str	r2, [sp, #44]	; 0x2c
  4120e4:	6806      	ldr	r6, [r0, #0]
  4120e6:	2278      	movs	r2, #120	; 0x78
  4120e8:	2130      	movs	r1, #48	; 0x30
  4120ea:	3004      	adds	r0, #4
  4120ec:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4120f0:	f043 0302 	orr.w	r3, r3, #2
  4120f4:	9007      	str	r0, [sp, #28]
  4120f6:	2700      	movs	r7, #0
  4120f8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4120fc:	2202      	movs	r2, #2
  4120fe:	e69c      	b.n	411e3a <_vfiprintf_r+0x266>
  412100:	9608      	str	r6, [sp, #32]
  412102:	2800      	cmp	r0, #0
  412104:	d099      	beq.n	41203a <_vfiprintf_r+0x466>
  412106:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41210a:	e796      	b.n	41203a <_vfiprintf_r+0x466>
  41210c:	f898 2000 	ldrb.w	r2, [r8]
  412110:	2d00      	cmp	r5, #0
  412112:	f47f add1 	bne.w	411cb8 <_vfiprintf_r+0xe4>
  412116:	2001      	movs	r0, #1
  412118:	2520      	movs	r5, #32
  41211a:	e5cd      	b.n	411cb8 <_vfiprintf_r+0xe4>
  41211c:	f043 0301 	orr.w	r3, r3, #1
  412120:	f898 2000 	ldrb.w	r2, [r8]
  412124:	e5c8      	b.n	411cb8 <_vfiprintf_r+0xe4>
  412126:	9608      	str	r6, [sp, #32]
  412128:	2800      	cmp	r0, #0
  41212a:	f040 8393 	bne.w	412854 <_vfiprintf_r+0xc80>
  41212e:	4929      	ldr	r1, [pc, #164]	; (4121d4 <_vfiprintf_r+0x600>)
  412130:	910b      	str	r1, [sp, #44]	; 0x2c
  412132:	069f      	lsls	r7, r3, #26
  412134:	f100 82e8 	bmi.w	412708 <_vfiprintf_r+0xb34>
  412138:	9807      	ldr	r0, [sp, #28]
  41213a:	06de      	lsls	r6, r3, #27
  41213c:	4601      	mov	r1, r0
  41213e:	f100 8270 	bmi.w	412622 <_vfiprintf_r+0xa4e>
  412142:	065d      	lsls	r5, r3, #25
  412144:	f140 826d 	bpl.w	412622 <_vfiprintf_r+0xa4e>
  412148:	3104      	adds	r1, #4
  41214a:	8806      	ldrh	r6, [r0, #0]
  41214c:	9107      	str	r1, [sp, #28]
  41214e:	2700      	movs	r7, #0
  412150:	07d8      	lsls	r0, r3, #31
  412152:	f140 8222 	bpl.w	41259a <_vfiprintf_r+0x9c6>
  412156:	ea56 0107 	orrs.w	r1, r6, r7
  41215a:	f000 821e 	beq.w	41259a <_vfiprintf_r+0x9c6>
  41215e:	2130      	movs	r1, #48	; 0x30
  412160:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  412164:	f043 0302 	orr.w	r3, r3, #2
  412168:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  41216c:	2202      	movs	r2, #2
  41216e:	e664      	b.n	411e3a <_vfiprintf_r+0x266>
  412170:	9608      	str	r6, [sp, #32]
  412172:	2800      	cmp	r0, #0
  412174:	f040 836b 	bne.w	41284e <_vfiprintf_r+0xc7a>
  412178:	4917      	ldr	r1, [pc, #92]	; (4121d8 <_vfiprintf_r+0x604>)
  41217a:	910b      	str	r1, [sp, #44]	; 0x2c
  41217c:	e7d9      	b.n	412132 <_vfiprintf_r+0x55e>
  41217e:	9907      	ldr	r1, [sp, #28]
  412180:	9608      	str	r6, [sp, #32]
  412182:	680a      	ldr	r2, [r1, #0]
  412184:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  412188:	f04f 0000 	mov.w	r0, #0
  41218c:	460a      	mov	r2, r1
  41218e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  412192:	3204      	adds	r2, #4
  412194:	2001      	movs	r0, #1
  412196:	9001      	str	r0, [sp, #4]
  412198:	9207      	str	r2, [sp, #28]
  41219a:	9005      	str	r0, [sp, #20]
  41219c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4121a0:	9302      	str	r3, [sp, #8]
  4121a2:	2400      	movs	r4, #0
  4121a4:	e670      	b.n	411e88 <_vfiprintf_r+0x2b4>
  4121a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4121aa:	f898 2000 	ldrb.w	r2, [r8]
  4121ae:	e583      	b.n	411cb8 <_vfiprintf_r+0xe4>
  4121b0:	f898 2000 	ldrb.w	r2, [r8]
  4121b4:	2a6c      	cmp	r2, #108	; 0x6c
  4121b6:	bf03      	ittte	eq
  4121b8:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4121bc:	f043 0320 	orreq.w	r3, r3, #32
  4121c0:	f108 0801 	addeq.w	r8, r8, #1
  4121c4:	f043 0310 	orrne.w	r3, r3, #16
  4121c8:	e576      	b.n	411cb8 <_vfiprintf_r+0xe4>
  4121ca:	bf00      	nop
  4121cc:	00417568 	.word	0x00417568
  4121d0:	00417578 	.word	0x00417578
  4121d4:	004174fc 	.word	0x004174fc
  4121d8:	004174e8 	.word	0x004174e8
  4121dc:	9907      	ldr	r1, [sp, #28]
  4121de:	680e      	ldr	r6, [r1, #0]
  4121e0:	460a      	mov	r2, r1
  4121e2:	2e00      	cmp	r6, #0
  4121e4:	f102 0204 	add.w	r2, r2, #4
  4121e8:	f6ff ae0f 	blt.w	411e0a <_vfiprintf_r+0x236>
  4121ec:	9207      	str	r2, [sp, #28]
  4121ee:	f898 2000 	ldrb.w	r2, [r8]
  4121f2:	e561      	b.n	411cb8 <_vfiprintf_r+0xe4>
  4121f4:	f898 2000 	ldrb.w	r2, [r8]
  4121f8:	2001      	movs	r0, #1
  4121fa:	252b      	movs	r5, #43	; 0x2b
  4121fc:	e55c      	b.n	411cb8 <_vfiprintf_r+0xe4>
  4121fe:	9907      	ldr	r1, [sp, #28]
  412200:	9608      	str	r6, [sp, #32]
  412202:	f8d1 b000 	ldr.w	fp, [r1]
  412206:	f04f 0200 	mov.w	r2, #0
  41220a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  41220e:	1d0e      	adds	r6, r1, #4
  412210:	f1bb 0f00 	cmp.w	fp, #0
  412214:	f000 82e5 	beq.w	4127e2 <_vfiprintf_r+0xc0e>
  412218:	1c67      	adds	r7, r4, #1
  41221a:	f000 82c4 	beq.w	4127a6 <_vfiprintf_r+0xbd2>
  41221e:	4622      	mov	r2, r4
  412220:	2100      	movs	r1, #0
  412222:	4658      	mov	r0, fp
  412224:	9301      	str	r3, [sp, #4]
  412226:	f7fb fc8b 	bl	40db40 <memchr>
  41222a:	9b01      	ldr	r3, [sp, #4]
  41222c:	2800      	cmp	r0, #0
  41222e:	f000 82e5 	beq.w	4127fc <_vfiprintf_r+0xc28>
  412232:	eba0 020b 	sub.w	r2, r0, fp
  412236:	9205      	str	r2, [sp, #20]
  412238:	9607      	str	r6, [sp, #28]
  41223a:	9302      	str	r3, [sp, #8]
  41223c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  412240:	2400      	movs	r4, #0
  412242:	e619      	b.n	411e78 <_vfiprintf_r+0x2a4>
  412244:	f898 2000 	ldrb.w	r2, [r8]
  412248:	2a2a      	cmp	r2, #42	; 0x2a
  41224a:	f108 0701 	add.w	r7, r8, #1
  41224e:	f000 82e9 	beq.w	412824 <_vfiprintf_r+0xc50>
  412252:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  412256:	2909      	cmp	r1, #9
  412258:	46b8      	mov	r8, r7
  41225a:	f04f 0400 	mov.w	r4, #0
  41225e:	f63f ad2d 	bhi.w	411cbc <_vfiprintf_r+0xe8>
  412262:	f818 2b01 	ldrb.w	r2, [r8], #1
  412266:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  41226a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  41226e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  412272:	2909      	cmp	r1, #9
  412274:	d9f5      	bls.n	412262 <_vfiprintf_r+0x68e>
  412276:	e521      	b.n	411cbc <_vfiprintf_r+0xe8>
  412278:	f043 0320 	orr.w	r3, r3, #32
  41227c:	f898 2000 	ldrb.w	r2, [r8]
  412280:	e51a      	b.n	411cb8 <_vfiprintf_r+0xe4>
  412282:	9608      	str	r6, [sp, #32]
  412284:	2800      	cmp	r0, #0
  412286:	f040 82db 	bne.w	412840 <_vfiprintf_r+0xc6c>
  41228a:	2a00      	cmp	r2, #0
  41228c:	f000 80e7 	beq.w	41245e <_vfiprintf_r+0x88a>
  412290:	2101      	movs	r1, #1
  412292:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  412296:	f04f 0200 	mov.w	r2, #0
  41229a:	9101      	str	r1, [sp, #4]
  41229c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4122a0:	9105      	str	r1, [sp, #20]
  4122a2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4122a6:	e77b      	b.n	4121a0 <_vfiprintf_r+0x5cc>
  4122a8:	9a07      	ldr	r2, [sp, #28]
  4122aa:	6813      	ldr	r3, [r2, #0]
  4122ac:	3204      	adds	r2, #4
  4122ae:	9207      	str	r2, [sp, #28]
  4122b0:	9a03      	ldr	r2, [sp, #12]
  4122b2:	601a      	str	r2, [r3, #0]
  4122b4:	e4cb      	b.n	411c4e <_vfiprintf_r+0x7a>
  4122b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4122b8:	9904      	ldr	r1, [sp, #16]
  4122ba:	4620      	mov	r0, r4
  4122bc:	f7ff fc4a 	bl	411b54 <__sprint_r.part.0>
  4122c0:	2800      	cmp	r0, #0
  4122c2:	f040 8139 	bne.w	412538 <_vfiprintf_r+0x964>
  4122c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4122c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4122ca:	f101 0c01 	add.w	ip, r1, #1
  4122ce:	46ce      	mov	lr, r9
  4122d0:	e5ff      	b.n	411ed2 <_vfiprintf_r+0x2fe>
  4122d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4122d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4122d6:	1c48      	adds	r0, r1, #1
  4122d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4122dc:	2d00      	cmp	r5, #0
  4122de:	f43f ae22 	beq.w	411f26 <_vfiprintf_r+0x352>
  4122e2:	3201      	adds	r2, #1
  4122e4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4122e8:	2101      	movs	r1, #1
  4122ea:	2807      	cmp	r0, #7
  4122ec:	9211      	str	r2, [sp, #68]	; 0x44
  4122ee:	9010      	str	r0, [sp, #64]	; 0x40
  4122f0:	f8ca 5000 	str.w	r5, [sl]
  4122f4:	f8ca 1004 	str.w	r1, [sl, #4]
  4122f8:	f340 8108 	ble.w	41250c <_vfiprintf_r+0x938>
  4122fc:	2a00      	cmp	r2, #0
  4122fe:	f040 81bc 	bne.w	41267a <_vfiprintf_r+0xaa6>
  412302:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412304:	2b00      	cmp	r3, #0
  412306:	f43f ae1f 	beq.w	411f48 <_vfiprintf_r+0x374>
  41230a:	ab0e      	add	r3, sp, #56	; 0x38
  41230c:	2202      	movs	r2, #2
  41230e:	4608      	mov	r0, r1
  412310:	931c      	str	r3, [sp, #112]	; 0x70
  412312:	921d      	str	r2, [sp, #116]	; 0x74
  412314:	46ca      	mov	sl, r9
  412316:	4601      	mov	r1, r0
  412318:	f10a 0a08 	add.w	sl, sl, #8
  41231c:	3001      	adds	r0, #1
  41231e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412320:	2b80      	cmp	r3, #128	; 0x80
  412322:	f43f ae19 	beq.w	411f58 <_vfiprintf_r+0x384>
  412326:	9b05      	ldr	r3, [sp, #20]
  412328:	1ae4      	subs	r4, r4, r3
  41232a:	2c00      	cmp	r4, #0
  41232c:	dd2e      	ble.n	41238c <_vfiprintf_r+0x7b8>
  41232e:	2c10      	cmp	r4, #16
  412330:	4db3      	ldr	r5, [pc, #716]	; (412600 <_vfiprintf_r+0xa2c>)
  412332:	dd1e      	ble.n	412372 <_vfiprintf_r+0x79e>
  412334:	46d6      	mov	lr, sl
  412336:	2610      	movs	r6, #16
  412338:	9f06      	ldr	r7, [sp, #24]
  41233a:	f8dd a010 	ldr.w	sl, [sp, #16]
  41233e:	e006      	b.n	41234e <_vfiprintf_r+0x77a>
  412340:	1c88      	adds	r0, r1, #2
  412342:	f10e 0e08 	add.w	lr, lr, #8
  412346:	4619      	mov	r1, r3
  412348:	3c10      	subs	r4, #16
  41234a:	2c10      	cmp	r4, #16
  41234c:	dd10      	ble.n	412370 <_vfiprintf_r+0x79c>
  41234e:	1c4b      	adds	r3, r1, #1
  412350:	3210      	adds	r2, #16
  412352:	2b07      	cmp	r3, #7
  412354:	9211      	str	r2, [sp, #68]	; 0x44
  412356:	e88e 0060 	stmia.w	lr, {r5, r6}
  41235a:	9310      	str	r3, [sp, #64]	; 0x40
  41235c:	ddf0      	ble.n	412340 <_vfiprintf_r+0x76c>
  41235e:	2a00      	cmp	r2, #0
  412360:	d165      	bne.n	41242e <_vfiprintf_r+0x85a>
  412362:	3c10      	subs	r4, #16
  412364:	2c10      	cmp	r4, #16
  412366:	f04f 0001 	mov.w	r0, #1
  41236a:	4611      	mov	r1, r2
  41236c:	46ce      	mov	lr, r9
  41236e:	dcee      	bgt.n	41234e <_vfiprintf_r+0x77a>
  412370:	46f2      	mov	sl, lr
  412372:	4422      	add	r2, r4
  412374:	2807      	cmp	r0, #7
  412376:	9211      	str	r2, [sp, #68]	; 0x44
  412378:	f8ca 5000 	str.w	r5, [sl]
  41237c:	f8ca 4004 	str.w	r4, [sl, #4]
  412380:	9010      	str	r0, [sp, #64]	; 0x40
  412382:	f300 8085 	bgt.w	412490 <_vfiprintf_r+0x8bc>
  412386:	f10a 0a08 	add.w	sl, sl, #8
  41238a:	3001      	adds	r0, #1
  41238c:	9905      	ldr	r1, [sp, #20]
  41238e:	f8ca b000 	str.w	fp, [sl]
  412392:	440a      	add	r2, r1
  412394:	2807      	cmp	r0, #7
  412396:	9211      	str	r2, [sp, #68]	; 0x44
  412398:	f8ca 1004 	str.w	r1, [sl, #4]
  41239c:	9010      	str	r0, [sp, #64]	; 0x40
  41239e:	f340 8082 	ble.w	4124a6 <_vfiprintf_r+0x8d2>
  4123a2:	2a00      	cmp	r2, #0
  4123a4:	f040 8118 	bne.w	4125d8 <_vfiprintf_r+0xa04>
  4123a8:	9b02      	ldr	r3, [sp, #8]
  4123aa:	9210      	str	r2, [sp, #64]	; 0x40
  4123ac:	0758      	lsls	r0, r3, #29
  4123ae:	d535      	bpl.n	41241c <_vfiprintf_r+0x848>
  4123b0:	9b08      	ldr	r3, [sp, #32]
  4123b2:	9901      	ldr	r1, [sp, #4]
  4123b4:	1a5c      	subs	r4, r3, r1
  4123b6:	2c00      	cmp	r4, #0
  4123b8:	f340 80e7 	ble.w	41258a <_vfiprintf_r+0x9b6>
  4123bc:	46ca      	mov	sl, r9
  4123be:	2c10      	cmp	r4, #16
  4123c0:	f340 8218 	ble.w	4127f4 <_vfiprintf_r+0xc20>
  4123c4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4123c6:	4e8f      	ldr	r6, [pc, #572]	; (412604 <_vfiprintf_r+0xa30>)
  4123c8:	9f06      	ldr	r7, [sp, #24]
  4123ca:	f8dd b010 	ldr.w	fp, [sp, #16]
  4123ce:	2510      	movs	r5, #16
  4123d0:	e006      	b.n	4123e0 <_vfiprintf_r+0x80c>
  4123d2:	1c88      	adds	r0, r1, #2
  4123d4:	f10a 0a08 	add.w	sl, sl, #8
  4123d8:	4619      	mov	r1, r3
  4123da:	3c10      	subs	r4, #16
  4123dc:	2c10      	cmp	r4, #16
  4123de:	dd11      	ble.n	412404 <_vfiprintf_r+0x830>
  4123e0:	1c4b      	adds	r3, r1, #1
  4123e2:	3210      	adds	r2, #16
  4123e4:	2b07      	cmp	r3, #7
  4123e6:	9211      	str	r2, [sp, #68]	; 0x44
  4123e8:	f8ca 6000 	str.w	r6, [sl]
  4123ec:	f8ca 5004 	str.w	r5, [sl, #4]
  4123f0:	9310      	str	r3, [sp, #64]	; 0x40
  4123f2:	ddee      	ble.n	4123d2 <_vfiprintf_r+0x7fe>
  4123f4:	bb42      	cbnz	r2, 412448 <_vfiprintf_r+0x874>
  4123f6:	3c10      	subs	r4, #16
  4123f8:	2c10      	cmp	r4, #16
  4123fa:	f04f 0001 	mov.w	r0, #1
  4123fe:	4611      	mov	r1, r2
  412400:	46ca      	mov	sl, r9
  412402:	dced      	bgt.n	4123e0 <_vfiprintf_r+0x80c>
  412404:	4422      	add	r2, r4
  412406:	2807      	cmp	r0, #7
  412408:	9211      	str	r2, [sp, #68]	; 0x44
  41240a:	f8ca 6000 	str.w	r6, [sl]
  41240e:	f8ca 4004 	str.w	r4, [sl, #4]
  412412:	9010      	str	r0, [sp, #64]	; 0x40
  412414:	dd51      	ble.n	4124ba <_vfiprintf_r+0x8e6>
  412416:	2a00      	cmp	r2, #0
  412418:	f040 819b 	bne.w	412752 <_vfiprintf_r+0xb7e>
  41241c:	9b03      	ldr	r3, [sp, #12]
  41241e:	9a08      	ldr	r2, [sp, #32]
  412420:	9901      	ldr	r1, [sp, #4]
  412422:	428a      	cmp	r2, r1
  412424:	bfac      	ite	ge
  412426:	189b      	addge	r3, r3, r2
  412428:	185b      	addlt	r3, r3, r1
  41242a:	9303      	str	r3, [sp, #12]
  41242c:	e04e      	b.n	4124cc <_vfiprintf_r+0x8f8>
  41242e:	aa0f      	add	r2, sp, #60	; 0x3c
  412430:	4651      	mov	r1, sl
  412432:	4638      	mov	r0, r7
  412434:	f7ff fb8e 	bl	411b54 <__sprint_r.part.0>
  412438:	2800      	cmp	r0, #0
  41243a:	f040 813f 	bne.w	4126bc <_vfiprintf_r+0xae8>
  41243e:	9910      	ldr	r1, [sp, #64]	; 0x40
  412440:	9a11      	ldr	r2, [sp, #68]	; 0x44
  412442:	1c48      	adds	r0, r1, #1
  412444:	46ce      	mov	lr, r9
  412446:	e77f      	b.n	412348 <_vfiprintf_r+0x774>
  412448:	aa0f      	add	r2, sp, #60	; 0x3c
  41244a:	4659      	mov	r1, fp
  41244c:	4638      	mov	r0, r7
  41244e:	f7ff fb81 	bl	411b54 <__sprint_r.part.0>
  412452:	b960      	cbnz	r0, 41246e <_vfiprintf_r+0x89a>
  412454:	9910      	ldr	r1, [sp, #64]	; 0x40
  412456:	9a11      	ldr	r2, [sp, #68]	; 0x44
  412458:	1c48      	adds	r0, r1, #1
  41245a:	46ca      	mov	sl, r9
  41245c:	e7bd      	b.n	4123da <_vfiprintf_r+0x806>
  41245e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  412460:	f8dd b010 	ldr.w	fp, [sp, #16]
  412464:	2b00      	cmp	r3, #0
  412466:	f040 81d4 	bne.w	412812 <_vfiprintf_r+0xc3e>
  41246a:	2300      	movs	r3, #0
  41246c:	9310      	str	r3, [sp, #64]	; 0x40
  41246e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  412472:	f013 0f01 	tst.w	r3, #1
  412476:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  41247a:	d102      	bne.n	412482 <_vfiprintf_r+0x8ae>
  41247c:	059a      	lsls	r2, r3, #22
  41247e:	f140 80de 	bpl.w	41263e <_vfiprintf_r+0xa6a>
  412482:	065b      	lsls	r3, r3, #25
  412484:	f53f acb2 	bmi.w	411dec <_vfiprintf_r+0x218>
  412488:	9803      	ldr	r0, [sp, #12]
  41248a:	b02d      	add	sp, #180	; 0xb4
  41248c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412490:	2a00      	cmp	r2, #0
  412492:	f040 8106 	bne.w	4126a2 <_vfiprintf_r+0xace>
  412496:	9a05      	ldr	r2, [sp, #20]
  412498:	921d      	str	r2, [sp, #116]	; 0x74
  41249a:	2301      	movs	r3, #1
  41249c:	9211      	str	r2, [sp, #68]	; 0x44
  41249e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4124a2:	9310      	str	r3, [sp, #64]	; 0x40
  4124a4:	46ca      	mov	sl, r9
  4124a6:	f10a 0a08 	add.w	sl, sl, #8
  4124aa:	9b02      	ldr	r3, [sp, #8]
  4124ac:	0759      	lsls	r1, r3, #29
  4124ae:	d504      	bpl.n	4124ba <_vfiprintf_r+0x8e6>
  4124b0:	9b08      	ldr	r3, [sp, #32]
  4124b2:	9901      	ldr	r1, [sp, #4]
  4124b4:	1a5c      	subs	r4, r3, r1
  4124b6:	2c00      	cmp	r4, #0
  4124b8:	dc81      	bgt.n	4123be <_vfiprintf_r+0x7ea>
  4124ba:	9b03      	ldr	r3, [sp, #12]
  4124bc:	9908      	ldr	r1, [sp, #32]
  4124be:	9801      	ldr	r0, [sp, #4]
  4124c0:	4281      	cmp	r1, r0
  4124c2:	bfac      	ite	ge
  4124c4:	185b      	addge	r3, r3, r1
  4124c6:	181b      	addlt	r3, r3, r0
  4124c8:	9303      	str	r3, [sp, #12]
  4124ca:	bb72      	cbnz	r2, 41252a <_vfiprintf_r+0x956>
  4124cc:	2300      	movs	r3, #0
  4124ce:	9310      	str	r3, [sp, #64]	; 0x40
  4124d0:	46ca      	mov	sl, r9
  4124d2:	f7ff bbbc 	b.w	411c4e <_vfiprintf_r+0x7a>
  4124d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4124d8:	9904      	ldr	r1, [sp, #16]
  4124da:	4620      	mov	r0, r4
  4124dc:	f7ff fb3a 	bl	411b54 <__sprint_r.part.0>
  4124e0:	bb50      	cbnz	r0, 412538 <_vfiprintf_r+0x964>
  4124e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4124e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4124e6:	f101 0e01 	add.w	lr, r1, #1
  4124ea:	46cc      	mov	ip, r9
  4124ec:	e548      	b.n	411f80 <_vfiprintf_r+0x3ac>
  4124ee:	2a00      	cmp	r2, #0
  4124f0:	f040 8140 	bne.w	412774 <_vfiprintf_r+0xba0>
  4124f4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4124f8:	2900      	cmp	r1, #0
  4124fa:	f000 811b 	beq.w	412734 <_vfiprintf_r+0xb60>
  4124fe:	2201      	movs	r2, #1
  412500:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  412504:	4610      	mov	r0, r2
  412506:	921d      	str	r2, [sp, #116]	; 0x74
  412508:	911c      	str	r1, [sp, #112]	; 0x70
  41250a:	46ca      	mov	sl, r9
  41250c:	4601      	mov	r1, r0
  41250e:	f10a 0a08 	add.w	sl, sl, #8
  412512:	3001      	adds	r0, #1
  412514:	e507      	b.n	411f26 <_vfiprintf_r+0x352>
  412516:	9b02      	ldr	r3, [sp, #8]
  412518:	2a01      	cmp	r2, #1
  41251a:	f000 8098 	beq.w	41264e <_vfiprintf_r+0xa7a>
  41251e:	2a02      	cmp	r2, #2
  412520:	d10d      	bne.n	41253e <_vfiprintf_r+0x96a>
  412522:	9302      	str	r3, [sp, #8]
  412524:	2600      	movs	r6, #0
  412526:	2700      	movs	r7, #0
  412528:	e5b0      	b.n	41208c <_vfiprintf_r+0x4b8>
  41252a:	aa0f      	add	r2, sp, #60	; 0x3c
  41252c:	9904      	ldr	r1, [sp, #16]
  41252e:	9806      	ldr	r0, [sp, #24]
  412530:	f7ff fb10 	bl	411b54 <__sprint_r.part.0>
  412534:	2800      	cmp	r0, #0
  412536:	d0c9      	beq.n	4124cc <_vfiprintf_r+0x8f8>
  412538:	f8dd b010 	ldr.w	fp, [sp, #16]
  41253c:	e797      	b.n	41246e <_vfiprintf_r+0x89a>
  41253e:	9302      	str	r3, [sp, #8]
  412540:	2600      	movs	r6, #0
  412542:	2700      	movs	r7, #0
  412544:	4649      	mov	r1, r9
  412546:	e000      	b.n	41254a <_vfiprintf_r+0x976>
  412548:	4659      	mov	r1, fp
  41254a:	08f2      	lsrs	r2, r6, #3
  41254c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  412550:	08f8      	lsrs	r0, r7, #3
  412552:	f006 0307 	and.w	r3, r6, #7
  412556:	4607      	mov	r7, r0
  412558:	4616      	mov	r6, r2
  41255a:	3330      	adds	r3, #48	; 0x30
  41255c:	ea56 0207 	orrs.w	r2, r6, r7
  412560:	f801 3c01 	strb.w	r3, [r1, #-1]
  412564:	f101 3bff 	add.w	fp, r1, #4294967295
  412568:	d1ee      	bne.n	412548 <_vfiprintf_r+0x974>
  41256a:	9a02      	ldr	r2, [sp, #8]
  41256c:	07d6      	lsls	r6, r2, #31
  41256e:	f57f ad9d 	bpl.w	4120ac <_vfiprintf_r+0x4d8>
  412572:	2b30      	cmp	r3, #48	; 0x30
  412574:	f43f ad9a 	beq.w	4120ac <_vfiprintf_r+0x4d8>
  412578:	3902      	subs	r1, #2
  41257a:	2330      	movs	r3, #48	; 0x30
  41257c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  412580:	eba9 0301 	sub.w	r3, r9, r1
  412584:	9305      	str	r3, [sp, #20]
  412586:	468b      	mov	fp, r1
  412588:	e476      	b.n	411e78 <_vfiprintf_r+0x2a4>
  41258a:	9b03      	ldr	r3, [sp, #12]
  41258c:	9a08      	ldr	r2, [sp, #32]
  41258e:	428a      	cmp	r2, r1
  412590:	bfac      	ite	ge
  412592:	189b      	addge	r3, r3, r2
  412594:	185b      	addlt	r3, r3, r1
  412596:	9303      	str	r3, [sp, #12]
  412598:	e798      	b.n	4124cc <_vfiprintf_r+0x8f8>
  41259a:	2202      	movs	r2, #2
  41259c:	e44d      	b.n	411e3a <_vfiprintf_r+0x266>
  41259e:	2f00      	cmp	r7, #0
  4125a0:	bf08      	it	eq
  4125a2:	2e0a      	cmpeq	r6, #10
  4125a4:	d352      	bcc.n	41264c <_vfiprintf_r+0xa78>
  4125a6:	46cb      	mov	fp, r9
  4125a8:	4630      	mov	r0, r6
  4125aa:	4639      	mov	r1, r7
  4125ac:	220a      	movs	r2, #10
  4125ae:	2300      	movs	r3, #0
  4125b0:	f7fa f90e 	bl	40c7d0 <__aeabi_uldivmod>
  4125b4:	3230      	adds	r2, #48	; 0x30
  4125b6:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4125ba:	4630      	mov	r0, r6
  4125bc:	4639      	mov	r1, r7
  4125be:	2300      	movs	r3, #0
  4125c0:	220a      	movs	r2, #10
  4125c2:	f7fa f905 	bl	40c7d0 <__aeabi_uldivmod>
  4125c6:	4606      	mov	r6, r0
  4125c8:	460f      	mov	r7, r1
  4125ca:	ea56 0307 	orrs.w	r3, r6, r7
  4125ce:	d1eb      	bne.n	4125a8 <_vfiprintf_r+0x9d4>
  4125d0:	e56c      	b.n	4120ac <_vfiprintf_r+0x4d8>
  4125d2:	9405      	str	r4, [sp, #20]
  4125d4:	46cb      	mov	fp, r9
  4125d6:	e44f      	b.n	411e78 <_vfiprintf_r+0x2a4>
  4125d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4125da:	9904      	ldr	r1, [sp, #16]
  4125dc:	9806      	ldr	r0, [sp, #24]
  4125de:	f7ff fab9 	bl	411b54 <__sprint_r.part.0>
  4125e2:	2800      	cmp	r0, #0
  4125e4:	d1a8      	bne.n	412538 <_vfiprintf_r+0x964>
  4125e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4125e8:	46ca      	mov	sl, r9
  4125ea:	e75e      	b.n	4124aa <_vfiprintf_r+0x8d6>
  4125ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4125ee:	9904      	ldr	r1, [sp, #16]
  4125f0:	9806      	ldr	r0, [sp, #24]
  4125f2:	f7ff faaf 	bl	411b54 <__sprint_r.part.0>
  4125f6:	2800      	cmp	r0, #0
  4125f8:	d19e      	bne.n	412538 <_vfiprintf_r+0x964>
  4125fa:	46ca      	mov	sl, r9
  4125fc:	f7ff bbc0 	b.w	411d80 <_vfiprintf_r+0x1ac>
  412600:	00417578 	.word	0x00417578
  412604:	00417568 	.word	0x00417568
  412608:	3104      	adds	r1, #4
  41260a:	6816      	ldr	r6, [r2, #0]
  41260c:	9107      	str	r1, [sp, #28]
  41260e:	2201      	movs	r2, #1
  412610:	2700      	movs	r7, #0
  412612:	e412      	b.n	411e3a <_vfiprintf_r+0x266>
  412614:	9807      	ldr	r0, [sp, #28]
  412616:	4601      	mov	r1, r0
  412618:	3104      	adds	r1, #4
  41261a:	6806      	ldr	r6, [r0, #0]
  41261c:	9107      	str	r1, [sp, #28]
  41261e:	2700      	movs	r7, #0
  412620:	e40b      	b.n	411e3a <_vfiprintf_r+0x266>
  412622:	680e      	ldr	r6, [r1, #0]
  412624:	3104      	adds	r1, #4
  412626:	9107      	str	r1, [sp, #28]
  412628:	2700      	movs	r7, #0
  41262a:	e591      	b.n	412150 <_vfiprintf_r+0x57c>
  41262c:	9907      	ldr	r1, [sp, #28]
  41262e:	680e      	ldr	r6, [r1, #0]
  412630:	460a      	mov	r2, r1
  412632:	17f7      	asrs	r7, r6, #31
  412634:	3204      	adds	r2, #4
  412636:	9207      	str	r2, [sp, #28]
  412638:	4630      	mov	r0, r6
  41263a:	4639      	mov	r1, r7
  41263c:	e50f      	b.n	41205e <_vfiprintf_r+0x48a>
  41263e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  412642:	f7fa ff2d 	bl	40d4a0 <__retarget_lock_release_recursive>
  412646:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  41264a:	e71a      	b.n	412482 <_vfiprintf_r+0x8ae>
  41264c:	9b02      	ldr	r3, [sp, #8]
  41264e:	9302      	str	r3, [sp, #8]
  412650:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  412654:	3630      	adds	r6, #48	; 0x30
  412656:	2301      	movs	r3, #1
  412658:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  41265c:	9305      	str	r3, [sp, #20]
  41265e:	e40b      	b.n	411e78 <_vfiprintf_r+0x2a4>
  412660:	aa0f      	add	r2, sp, #60	; 0x3c
  412662:	9904      	ldr	r1, [sp, #16]
  412664:	9806      	ldr	r0, [sp, #24]
  412666:	f7ff fa75 	bl	411b54 <__sprint_r.part.0>
  41266a:	2800      	cmp	r0, #0
  41266c:	f47f af64 	bne.w	412538 <_vfiprintf_r+0x964>
  412670:	9910      	ldr	r1, [sp, #64]	; 0x40
  412672:	9a11      	ldr	r2, [sp, #68]	; 0x44
  412674:	1c48      	adds	r0, r1, #1
  412676:	46ca      	mov	sl, r9
  412678:	e651      	b.n	41231e <_vfiprintf_r+0x74a>
  41267a:	aa0f      	add	r2, sp, #60	; 0x3c
  41267c:	9904      	ldr	r1, [sp, #16]
  41267e:	9806      	ldr	r0, [sp, #24]
  412680:	f7ff fa68 	bl	411b54 <__sprint_r.part.0>
  412684:	2800      	cmp	r0, #0
  412686:	f47f af57 	bne.w	412538 <_vfiprintf_r+0x964>
  41268a:	9910      	ldr	r1, [sp, #64]	; 0x40
  41268c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41268e:	1c48      	adds	r0, r1, #1
  412690:	46ca      	mov	sl, r9
  412692:	e448      	b.n	411f26 <_vfiprintf_r+0x352>
  412694:	2a00      	cmp	r2, #0
  412696:	f040 8091 	bne.w	4127bc <_vfiprintf_r+0xbe8>
  41269a:	2001      	movs	r0, #1
  41269c:	4611      	mov	r1, r2
  41269e:	46ca      	mov	sl, r9
  4126a0:	e641      	b.n	412326 <_vfiprintf_r+0x752>
  4126a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4126a4:	9904      	ldr	r1, [sp, #16]
  4126a6:	9806      	ldr	r0, [sp, #24]
  4126a8:	f7ff fa54 	bl	411b54 <__sprint_r.part.0>
  4126ac:	2800      	cmp	r0, #0
  4126ae:	f47f af43 	bne.w	412538 <_vfiprintf_r+0x964>
  4126b2:	9810      	ldr	r0, [sp, #64]	; 0x40
  4126b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4126b6:	3001      	adds	r0, #1
  4126b8:	46ca      	mov	sl, r9
  4126ba:	e667      	b.n	41238c <_vfiprintf_r+0x7b8>
  4126bc:	46d3      	mov	fp, sl
  4126be:	e6d6      	b.n	41246e <_vfiprintf_r+0x89a>
  4126c0:	9e07      	ldr	r6, [sp, #28]
  4126c2:	3607      	adds	r6, #7
  4126c4:	f026 0207 	bic.w	r2, r6, #7
  4126c8:	f102 0108 	add.w	r1, r2, #8
  4126cc:	e9d2 6700 	ldrd	r6, r7, [r2]
  4126d0:	9107      	str	r1, [sp, #28]
  4126d2:	2201      	movs	r2, #1
  4126d4:	f7ff bbb1 	b.w	411e3a <_vfiprintf_r+0x266>
  4126d8:	9e07      	ldr	r6, [sp, #28]
  4126da:	3607      	adds	r6, #7
  4126dc:	f026 0607 	bic.w	r6, r6, #7
  4126e0:	e9d6 0100 	ldrd	r0, r1, [r6]
  4126e4:	f106 0208 	add.w	r2, r6, #8
  4126e8:	9207      	str	r2, [sp, #28]
  4126ea:	4606      	mov	r6, r0
  4126ec:	460f      	mov	r7, r1
  4126ee:	e4b6      	b.n	41205e <_vfiprintf_r+0x48a>
  4126f0:	9e07      	ldr	r6, [sp, #28]
  4126f2:	3607      	adds	r6, #7
  4126f4:	f026 0207 	bic.w	r2, r6, #7
  4126f8:	f102 0108 	add.w	r1, r2, #8
  4126fc:	e9d2 6700 	ldrd	r6, r7, [r2]
  412700:	9107      	str	r1, [sp, #28]
  412702:	2200      	movs	r2, #0
  412704:	f7ff bb99 	b.w	411e3a <_vfiprintf_r+0x266>
  412708:	9e07      	ldr	r6, [sp, #28]
  41270a:	3607      	adds	r6, #7
  41270c:	f026 0107 	bic.w	r1, r6, #7
  412710:	f101 0008 	add.w	r0, r1, #8
  412714:	9007      	str	r0, [sp, #28]
  412716:	e9d1 6700 	ldrd	r6, r7, [r1]
  41271a:	e519      	b.n	412150 <_vfiprintf_r+0x57c>
  41271c:	46cb      	mov	fp, r9
  41271e:	f7ff bbab 	b.w	411e78 <_vfiprintf_r+0x2a4>
  412722:	252d      	movs	r5, #45	; 0x2d
  412724:	4276      	negs	r6, r6
  412726:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  41272a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41272e:	2201      	movs	r2, #1
  412730:	f7ff bb88 	b.w	411e44 <_vfiprintf_r+0x270>
  412734:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412736:	b9b3      	cbnz	r3, 412766 <_vfiprintf_r+0xb92>
  412738:	4611      	mov	r1, r2
  41273a:	2001      	movs	r0, #1
  41273c:	46ca      	mov	sl, r9
  41273e:	e5f2      	b.n	412326 <_vfiprintf_r+0x752>
  412740:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  412744:	f7fa feac 	bl	40d4a0 <__retarget_lock_release_recursive>
  412748:	f04f 33ff 	mov.w	r3, #4294967295
  41274c:	9303      	str	r3, [sp, #12]
  41274e:	f7ff bb50 	b.w	411df2 <_vfiprintf_r+0x21e>
  412752:	aa0f      	add	r2, sp, #60	; 0x3c
  412754:	9904      	ldr	r1, [sp, #16]
  412756:	9806      	ldr	r0, [sp, #24]
  412758:	f7ff f9fc 	bl	411b54 <__sprint_r.part.0>
  41275c:	2800      	cmp	r0, #0
  41275e:	f47f aeeb 	bne.w	412538 <_vfiprintf_r+0x964>
  412762:	9a11      	ldr	r2, [sp, #68]	; 0x44
  412764:	e6a9      	b.n	4124ba <_vfiprintf_r+0x8e6>
  412766:	ab0e      	add	r3, sp, #56	; 0x38
  412768:	2202      	movs	r2, #2
  41276a:	931c      	str	r3, [sp, #112]	; 0x70
  41276c:	921d      	str	r2, [sp, #116]	; 0x74
  41276e:	2001      	movs	r0, #1
  412770:	46ca      	mov	sl, r9
  412772:	e5d0      	b.n	412316 <_vfiprintf_r+0x742>
  412774:	aa0f      	add	r2, sp, #60	; 0x3c
  412776:	9904      	ldr	r1, [sp, #16]
  412778:	9806      	ldr	r0, [sp, #24]
  41277a:	f7ff f9eb 	bl	411b54 <__sprint_r.part.0>
  41277e:	2800      	cmp	r0, #0
  412780:	f47f aeda 	bne.w	412538 <_vfiprintf_r+0x964>
  412784:	9910      	ldr	r1, [sp, #64]	; 0x40
  412786:	9a11      	ldr	r2, [sp, #68]	; 0x44
  412788:	1c48      	adds	r0, r1, #1
  41278a:	46ca      	mov	sl, r9
  41278c:	e5a4      	b.n	4122d8 <_vfiprintf_r+0x704>
  41278e:	9a07      	ldr	r2, [sp, #28]
  412790:	9903      	ldr	r1, [sp, #12]
  412792:	6813      	ldr	r3, [r2, #0]
  412794:	17cd      	asrs	r5, r1, #31
  412796:	4608      	mov	r0, r1
  412798:	3204      	adds	r2, #4
  41279a:	4629      	mov	r1, r5
  41279c:	9207      	str	r2, [sp, #28]
  41279e:	e9c3 0100 	strd	r0, r1, [r3]
  4127a2:	f7ff ba54 	b.w	411c4e <_vfiprintf_r+0x7a>
  4127a6:	4658      	mov	r0, fp
  4127a8:	9607      	str	r6, [sp, #28]
  4127aa:	9302      	str	r3, [sp, #8]
  4127ac:	f7fc f808 	bl	40e7c0 <strlen>
  4127b0:	2400      	movs	r4, #0
  4127b2:	9005      	str	r0, [sp, #20]
  4127b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4127b8:	f7ff bb5e 	b.w	411e78 <_vfiprintf_r+0x2a4>
  4127bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4127be:	9904      	ldr	r1, [sp, #16]
  4127c0:	9806      	ldr	r0, [sp, #24]
  4127c2:	f7ff f9c7 	bl	411b54 <__sprint_r.part.0>
  4127c6:	2800      	cmp	r0, #0
  4127c8:	f47f aeb6 	bne.w	412538 <_vfiprintf_r+0x964>
  4127cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4127ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4127d0:	1c48      	adds	r0, r1, #1
  4127d2:	46ca      	mov	sl, r9
  4127d4:	e5a7      	b.n	412326 <_vfiprintf_r+0x752>
  4127d6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4127d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4127da:	4e20      	ldr	r6, [pc, #128]	; (41285c <_vfiprintf_r+0xc88>)
  4127dc:	3101      	adds	r1, #1
  4127de:	f7ff bb90 	b.w	411f02 <_vfiprintf_r+0x32e>
  4127e2:	2c06      	cmp	r4, #6
  4127e4:	bf28      	it	cs
  4127e6:	2406      	movcs	r4, #6
  4127e8:	9405      	str	r4, [sp, #20]
  4127ea:	9607      	str	r6, [sp, #28]
  4127ec:	9401      	str	r4, [sp, #4]
  4127ee:	f8df b070 	ldr.w	fp, [pc, #112]	; 412860 <_vfiprintf_r+0xc8c>
  4127f2:	e4d5      	b.n	4121a0 <_vfiprintf_r+0x5cc>
  4127f4:	9810      	ldr	r0, [sp, #64]	; 0x40
  4127f6:	4e19      	ldr	r6, [pc, #100]	; (41285c <_vfiprintf_r+0xc88>)
  4127f8:	3001      	adds	r0, #1
  4127fa:	e603      	b.n	412404 <_vfiprintf_r+0x830>
  4127fc:	9405      	str	r4, [sp, #20]
  4127fe:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  412802:	9607      	str	r6, [sp, #28]
  412804:	9302      	str	r3, [sp, #8]
  412806:	4604      	mov	r4, r0
  412808:	f7ff bb36 	b.w	411e78 <_vfiprintf_r+0x2a4>
  41280c:	4686      	mov	lr, r0
  41280e:	f7ff bbce 	b.w	411fae <_vfiprintf_r+0x3da>
  412812:	9806      	ldr	r0, [sp, #24]
  412814:	aa0f      	add	r2, sp, #60	; 0x3c
  412816:	4659      	mov	r1, fp
  412818:	f7ff f99c 	bl	411b54 <__sprint_r.part.0>
  41281c:	2800      	cmp	r0, #0
  41281e:	f43f ae24 	beq.w	41246a <_vfiprintf_r+0x896>
  412822:	e624      	b.n	41246e <_vfiprintf_r+0x89a>
  412824:	9907      	ldr	r1, [sp, #28]
  412826:	f898 2001 	ldrb.w	r2, [r8, #1]
  41282a:	680c      	ldr	r4, [r1, #0]
  41282c:	3104      	adds	r1, #4
  41282e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  412832:	46b8      	mov	r8, r7
  412834:	9107      	str	r1, [sp, #28]
  412836:	f7ff ba3f 	b.w	411cb8 <_vfiprintf_r+0xe4>
  41283a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41283e:	e43c      	b.n	4120ba <_vfiprintf_r+0x4e6>
  412840:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  412844:	e521      	b.n	41228a <_vfiprintf_r+0x6b6>
  412846:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41284a:	f7ff bbf4 	b.w	412036 <_vfiprintf_r+0x462>
  41284e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  412852:	e491      	b.n	412178 <_vfiprintf_r+0x5a4>
  412854:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  412858:	e469      	b.n	41212e <_vfiprintf_r+0x55a>
  41285a:	bf00      	nop
  41285c:	00417568 	.word	0x00417568
  412860:	00417510 	.word	0x00417510

00412864 <__sbprintf>:
  412864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412868:	460c      	mov	r4, r1
  41286a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  41286e:	8989      	ldrh	r1, [r1, #12]
  412870:	6e66      	ldr	r6, [r4, #100]	; 0x64
  412872:	89e5      	ldrh	r5, [r4, #14]
  412874:	9619      	str	r6, [sp, #100]	; 0x64
  412876:	f021 0102 	bic.w	r1, r1, #2
  41287a:	4606      	mov	r6, r0
  41287c:	69e0      	ldr	r0, [r4, #28]
  41287e:	f8ad 100c 	strh.w	r1, [sp, #12]
  412882:	4617      	mov	r7, r2
  412884:	f44f 6180 	mov.w	r1, #1024	; 0x400
  412888:	6a62      	ldr	r2, [r4, #36]	; 0x24
  41288a:	f8ad 500e 	strh.w	r5, [sp, #14]
  41288e:	4698      	mov	r8, r3
  412890:	ad1a      	add	r5, sp, #104	; 0x68
  412892:	2300      	movs	r3, #0
  412894:	9007      	str	r0, [sp, #28]
  412896:	a816      	add	r0, sp, #88	; 0x58
  412898:	9209      	str	r2, [sp, #36]	; 0x24
  41289a:	9306      	str	r3, [sp, #24]
  41289c:	9500      	str	r5, [sp, #0]
  41289e:	9504      	str	r5, [sp, #16]
  4128a0:	9102      	str	r1, [sp, #8]
  4128a2:	9105      	str	r1, [sp, #20]
  4128a4:	f7fa fdf6 	bl	40d494 <__retarget_lock_init_recursive>
  4128a8:	4643      	mov	r3, r8
  4128aa:	463a      	mov	r2, r7
  4128ac:	4669      	mov	r1, sp
  4128ae:	4630      	mov	r0, r6
  4128b0:	f7ff f990 	bl	411bd4 <_vfiprintf_r>
  4128b4:	1e05      	subs	r5, r0, #0
  4128b6:	db07      	blt.n	4128c8 <__sbprintf+0x64>
  4128b8:	4630      	mov	r0, r6
  4128ba:	4669      	mov	r1, sp
  4128bc:	f7fa fa12 	bl	40cce4 <_fflush_r>
  4128c0:	2800      	cmp	r0, #0
  4128c2:	bf18      	it	ne
  4128c4:	f04f 35ff 	movne.w	r5, #4294967295
  4128c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4128cc:	065b      	lsls	r3, r3, #25
  4128ce:	d503      	bpl.n	4128d8 <__sbprintf+0x74>
  4128d0:	89a3      	ldrh	r3, [r4, #12]
  4128d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4128d6:	81a3      	strh	r3, [r4, #12]
  4128d8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4128da:	f7fa fddd 	bl	40d498 <__retarget_lock_close_recursive>
  4128de:	4628      	mov	r0, r5
  4128e0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4128e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004128e8 <__ascii_wctomb>:
  4128e8:	b121      	cbz	r1, 4128f4 <__ascii_wctomb+0xc>
  4128ea:	2aff      	cmp	r2, #255	; 0xff
  4128ec:	d804      	bhi.n	4128f8 <__ascii_wctomb+0x10>
  4128ee:	700a      	strb	r2, [r1, #0]
  4128f0:	2001      	movs	r0, #1
  4128f2:	4770      	bx	lr
  4128f4:	4608      	mov	r0, r1
  4128f6:	4770      	bx	lr
  4128f8:	238a      	movs	r3, #138	; 0x8a
  4128fa:	6003      	str	r3, [r0, #0]
  4128fc:	f04f 30ff 	mov.w	r0, #4294967295
  412900:	4770      	bx	lr
  412902:	bf00      	nop

00412904 <_write_r>:
  412904:	b570      	push	{r4, r5, r6, lr}
  412906:	460d      	mov	r5, r1
  412908:	4c08      	ldr	r4, [pc, #32]	; (41292c <_write_r+0x28>)
  41290a:	4611      	mov	r1, r2
  41290c:	4606      	mov	r6, r0
  41290e:	461a      	mov	r2, r3
  412910:	4628      	mov	r0, r5
  412912:	2300      	movs	r3, #0
  412914:	6023      	str	r3, [r4, #0]
  412916:	f7f1 fb27 	bl	403f68 <_write>
  41291a:	1c43      	adds	r3, r0, #1
  41291c:	d000      	beq.n	412920 <_write_r+0x1c>
  41291e:	bd70      	pop	{r4, r5, r6, pc}
  412920:	6823      	ldr	r3, [r4, #0]
  412922:	2b00      	cmp	r3, #0
  412924:	d0fb      	beq.n	41291e <_write_r+0x1a>
  412926:	6033      	str	r3, [r6, #0]
  412928:	bd70      	pop	{r4, r5, r6, pc}
  41292a:	bf00      	nop
  41292c:	20003074 	.word	0x20003074

00412930 <__swsetup_r>:
  412930:	b538      	push	{r3, r4, r5, lr}
  412932:	4b30      	ldr	r3, [pc, #192]	; (4129f4 <__swsetup_r+0xc4>)
  412934:	681b      	ldr	r3, [r3, #0]
  412936:	4605      	mov	r5, r0
  412938:	460c      	mov	r4, r1
  41293a:	b113      	cbz	r3, 412942 <__swsetup_r+0x12>
  41293c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  41293e:	2a00      	cmp	r2, #0
  412940:	d038      	beq.n	4129b4 <__swsetup_r+0x84>
  412942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  412946:	b293      	uxth	r3, r2
  412948:	0718      	lsls	r0, r3, #28
  41294a:	d50c      	bpl.n	412966 <__swsetup_r+0x36>
  41294c:	6920      	ldr	r0, [r4, #16]
  41294e:	b1a8      	cbz	r0, 41297c <__swsetup_r+0x4c>
  412950:	f013 0201 	ands.w	r2, r3, #1
  412954:	d01e      	beq.n	412994 <__swsetup_r+0x64>
  412956:	6963      	ldr	r3, [r4, #20]
  412958:	2200      	movs	r2, #0
  41295a:	425b      	negs	r3, r3
  41295c:	61a3      	str	r3, [r4, #24]
  41295e:	60a2      	str	r2, [r4, #8]
  412960:	b1f0      	cbz	r0, 4129a0 <__swsetup_r+0x70>
  412962:	2000      	movs	r0, #0
  412964:	bd38      	pop	{r3, r4, r5, pc}
  412966:	06d9      	lsls	r1, r3, #27
  412968:	d53c      	bpl.n	4129e4 <__swsetup_r+0xb4>
  41296a:	0758      	lsls	r0, r3, #29
  41296c:	d426      	bmi.n	4129bc <__swsetup_r+0x8c>
  41296e:	6920      	ldr	r0, [r4, #16]
  412970:	f042 0308 	orr.w	r3, r2, #8
  412974:	81a3      	strh	r3, [r4, #12]
  412976:	b29b      	uxth	r3, r3
  412978:	2800      	cmp	r0, #0
  41297a:	d1e9      	bne.n	412950 <__swsetup_r+0x20>
  41297c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  412980:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  412984:	d0e4      	beq.n	412950 <__swsetup_r+0x20>
  412986:	4628      	mov	r0, r5
  412988:	4621      	mov	r1, r4
  41298a:	f7fa fdb9 	bl	40d500 <__smakebuf_r>
  41298e:	89a3      	ldrh	r3, [r4, #12]
  412990:	6920      	ldr	r0, [r4, #16]
  412992:	e7dd      	b.n	412950 <__swsetup_r+0x20>
  412994:	0799      	lsls	r1, r3, #30
  412996:	bf58      	it	pl
  412998:	6962      	ldrpl	r2, [r4, #20]
  41299a:	60a2      	str	r2, [r4, #8]
  41299c:	2800      	cmp	r0, #0
  41299e:	d1e0      	bne.n	412962 <__swsetup_r+0x32>
  4129a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4129a4:	061a      	lsls	r2, r3, #24
  4129a6:	d5dd      	bpl.n	412964 <__swsetup_r+0x34>
  4129a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4129ac:	81a3      	strh	r3, [r4, #12]
  4129ae:	f04f 30ff 	mov.w	r0, #4294967295
  4129b2:	bd38      	pop	{r3, r4, r5, pc}
  4129b4:	4618      	mov	r0, r3
  4129b6:	f7fa f9ed 	bl	40cd94 <__sinit>
  4129ba:	e7c2      	b.n	412942 <__swsetup_r+0x12>
  4129bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4129be:	b151      	cbz	r1, 4129d6 <__swsetup_r+0xa6>
  4129c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4129c4:	4299      	cmp	r1, r3
  4129c6:	d004      	beq.n	4129d2 <__swsetup_r+0xa2>
  4129c8:	4628      	mov	r0, r5
  4129ca:	f7fa fa6b 	bl	40cea4 <_free_r>
  4129ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4129d2:	2300      	movs	r3, #0
  4129d4:	6323      	str	r3, [r4, #48]	; 0x30
  4129d6:	2300      	movs	r3, #0
  4129d8:	6920      	ldr	r0, [r4, #16]
  4129da:	6063      	str	r3, [r4, #4]
  4129dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4129e0:	6020      	str	r0, [r4, #0]
  4129e2:	e7c5      	b.n	412970 <__swsetup_r+0x40>
  4129e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4129e8:	2309      	movs	r3, #9
  4129ea:	602b      	str	r3, [r5, #0]
  4129ec:	f04f 30ff 	mov.w	r0, #4294967295
  4129f0:	81a2      	strh	r2, [r4, #12]
  4129f2:	bd38      	pop	{r3, r4, r5, pc}
  4129f4:	20000298 	.word	0x20000298

004129f8 <register_fini>:
  4129f8:	4b02      	ldr	r3, [pc, #8]	; (412a04 <register_fini+0xc>)
  4129fa:	b113      	cbz	r3, 412a02 <register_fini+0xa>
  4129fc:	4802      	ldr	r0, [pc, #8]	; (412a08 <register_fini+0x10>)
  4129fe:	f000 b805 	b.w	412a0c <atexit>
  412a02:	4770      	bx	lr
  412a04:	00000000 	.word	0x00000000
  412a08:	004139bd 	.word	0x004139bd

00412a0c <atexit>:
  412a0c:	2300      	movs	r3, #0
  412a0e:	4601      	mov	r1, r0
  412a10:	461a      	mov	r2, r3
  412a12:	4618      	mov	r0, r3
  412a14:	f002 be40 	b.w	415698 <__register_exitproc>

00412a18 <_close_r>:
  412a18:	b538      	push	{r3, r4, r5, lr}
  412a1a:	4c07      	ldr	r4, [pc, #28]	; (412a38 <_close_r+0x20>)
  412a1c:	2300      	movs	r3, #0
  412a1e:	4605      	mov	r5, r0
  412a20:	4608      	mov	r0, r1
  412a22:	6023      	str	r3, [r4, #0]
  412a24:	f7f4 f808 	bl	406a38 <_close>
  412a28:	1c43      	adds	r3, r0, #1
  412a2a:	d000      	beq.n	412a2e <_close_r+0x16>
  412a2c:	bd38      	pop	{r3, r4, r5, pc}
  412a2e:	6823      	ldr	r3, [r4, #0]
  412a30:	2b00      	cmp	r3, #0
  412a32:	d0fb      	beq.n	412a2c <_close_r+0x14>
  412a34:	602b      	str	r3, [r5, #0]
  412a36:	bd38      	pop	{r3, r4, r5, pc}
  412a38:	20003074 	.word	0x20003074

00412a3c <quorem>:
  412a3c:	6902      	ldr	r2, [r0, #16]
  412a3e:	690b      	ldr	r3, [r1, #16]
  412a40:	4293      	cmp	r3, r2
  412a42:	f300 808d 	bgt.w	412b60 <quorem+0x124>
  412a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412a4a:	f103 38ff 	add.w	r8, r3, #4294967295
  412a4e:	f101 0714 	add.w	r7, r1, #20
  412a52:	f100 0b14 	add.w	fp, r0, #20
  412a56:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  412a5a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  412a5e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  412a62:	b083      	sub	sp, #12
  412a64:	3201      	adds	r2, #1
  412a66:	fbb3 f9f2 	udiv	r9, r3, r2
  412a6a:	eb0b 0304 	add.w	r3, fp, r4
  412a6e:	9400      	str	r4, [sp, #0]
  412a70:	eb07 0a04 	add.w	sl, r7, r4
  412a74:	9301      	str	r3, [sp, #4]
  412a76:	f1b9 0f00 	cmp.w	r9, #0
  412a7a:	d039      	beq.n	412af0 <quorem+0xb4>
  412a7c:	2500      	movs	r5, #0
  412a7e:	462e      	mov	r6, r5
  412a80:	46bc      	mov	ip, r7
  412a82:	46de      	mov	lr, fp
  412a84:	f85c 4b04 	ldr.w	r4, [ip], #4
  412a88:	f8de 3000 	ldr.w	r3, [lr]
  412a8c:	b2a2      	uxth	r2, r4
  412a8e:	fb09 5502 	mla	r5, r9, r2, r5
  412a92:	0c22      	lsrs	r2, r4, #16
  412a94:	0c2c      	lsrs	r4, r5, #16
  412a96:	fb09 4202 	mla	r2, r9, r2, r4
  412a9a:	b2ad      	uxth	r5, r5
  412a9c:	1b75      	subs	r5, r6, r5
  412a9e:	b296      	uxth	r6, r2
  412aa0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  412aa4:	fa15 f383 	uxtah	r3, r5, r3
  412aa8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  412aac:	b29b      	uxth	r3, r3
  412aae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  412ab2:	45e2      	cmp	sl, ip
  412ab4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  412ab8:	f84e 3b04 	str.w	r3, [lr], #4
  412abc:	ea4f 4626 	mov.w	r6, r6, asr #16
  412ac0:	d2e0      	bcs.n	412a84 <quorem+0x48>
  412ac2:	9b00      	ldr	r3, [sp, #0]
  412ac4:	f85b 3003 	ldr.w	r3, [fp, r3]
  412ac8:	b993      	cbnz	r3, 412af0 <quorem+0xb4>
  412aca:	9c01      	ldr	r4, [sp, #4]
  412acc:	1f23      	subs	r3, r4, #4
  412ace:	459b      	cmp	fp, r3
  412ad0:	d20c      	bcs.n	412aec <quorem+0xb0>
  412ad2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412ad6:	b94b      	cbnz	r3, 412aec <quorem+0xb0>
  412ad8:	f1a4 0308 	sub.w	r3, r4, #8
  412adc:	e002      	b.n	412ae4 <quorem+0xa8>
  412ade:	681a      	ldr	r2, [r3, #0]
  412ae0:	3b04      	subs	r3, #4
  412ae2:	b91a      	cbnz	r2, 412aec <quorem+0xb0>
  412ae4:	459b      	cmp	fp, r3
  412ae6:	f108 38ff 	add.w	r8, r8, #4294967295
  412aea:	d3f8      	bcc.n	412ade <quorem+0xa2>
  412aec:	f8c0 8010 	str.w	r8, [r0, #16]
  412af0:	4604      	mov	r4, r0
  412af2:	f001 fe73 	bl	4147dc <__mcmp>
  412af6:	2800      	cmp	r0, #0
  412af8:	db2e      	blt.n	412b58 <quorem+0x11c>
  412afa:	f109 0901 	add.w	r9, r9, #1
  412afe:	465d      	mov	r5, fp
  412b00:	2300      	movs	r3, #0
  412b02:	f857 1b04 	ldr.w	r1, [r7], #4
  412b06:	6828      	ldr	r0, [r5, #0]
  412b08:	b28a      	uxth	r2, r1
  412b0a:	1a9a      	subs	r2, r3, r2
  412b0c:	0c0b      	lsrs	r3, r1, #16
  412b0e:	fa12 f280 	uxtah	r2, r2, r0
  412b12:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  412b16:	eb03 4322 	add.w	r3, r3, r2, asr #16
  412b1a:	b292      	uxth	r2, r2
  412b1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  412b20:	45ba      	cmp	sl, r7
  412b22:	f845 2b04 	str.w	r2, [r5], #4
  412b26:	ea4f 4323 	mov.w	r3, r3, asr #16
  412b2a:	d2ea      	bcs.n	412b02 <quorem+0xc6>
  412b2c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  412b30:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  412b34:	b982      	cbnz	r2, 412b58 <quorem+0x11c>
  412b36:	1f1a      	subs	r2, r3, #4
  412b38:	4593      	cmp	fp, r2
  412b3a:	d20b      	bcs.n	412b54 <quorem+0x118>
  412b3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  412b40:	b942      	cbnz	r2, 412b54 <quorem+0x118>
  412b42:	3b08      	subs	r3, #8
  412b44:	e002      	b.n	412b4c <quorem+0x110>
  412b46:	681a      	ldr	r2, [r3, #0]
  412b48:	3b04      	subs	r3, #4
  412b4a:	b91a      	cbnz	r2, 412b54 <quorem+0x118>
  412b4c:	459b      	cmp	fp, r3
  412b4e:	f108 38ff 	add.w	r8, r8, #4294967295
  412b52:	d3f8      	bcc.n	412b46 <quorem+0x10a>
  412b54:	f8c4 8010 	str.w	r8, [r4, #16]
  412b58:	4648      	mov	r0, r9
  412b5a:	b003      	add	sp, #12
  412b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412b60:	2000      	movs	r0, #0
  412b62:	4770      	bx	lr
  412b64:	0000      	movs	r0, r0
	...

00412b68 <_dtoa_r>:
  412b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412b6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  412b6e:	b09b      	sub	sp, #108	; 0x6c
  412b70:	4604      	mov	r4, r0
  412b72:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  412b74:	4692      	mov	sl, r2
  412b76:	469b      	mov	fp, r3
  412b78:	b141      	cbz	r1, 412b8c <_dtoa_r+0x24>
  412b7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  412b7c:	604a      	str	r2, [r1, #4]
  412b7e:	2301      	movs	r3, #1
  412b80:	4093      	lsls	r3, r2
  412b82:	608b      	str	r3, [r1, #8]
  412b84:	f001 fc04 	bl	414390 <_Bfree>
  412b88:	2300      	movs	r3, #0
  412b8a:	6423      	str	r3, [r4, #64]	; 0x40
  412b8c:	f1bb 0f00 	cmp.w	fp, #0
  412b90:	465d      	mov	r5, fp
  412b92:	db35      	blt.n	412c00 <_dtoa_r+0x98>
  412b94:	2300      	movs	r3, #0
  412b96:	6033      	str	r3, [r6, #0]
  412b98:	4b9d      	ldr	r3, [pc, #628]	; (412e10 <_dtoa_r+0x2a8>)
  412b9a:	43ab      	bics	r3, r5
  412b9c:	d015      	beq.n	412bca <_dtoa_r+0x62>
  412b9e:	4650      	mov	r0, sl
  412ba0:	4659      	mov	r1, fp
  412ba2:	2200      	movs	r2, #0
  412ba4:	2300      	movs	r3, #0
  412ba6:	f7f9 fd99 	bl	40c6dc <__aeabi_dcmpeq>
  412baa:	4680      	mov	r8, r0
  412bac:	2800      	cmp	r0, #0
  412bae:	d02d      	beq.n	412c0c <_dtoa_r+0xa4>
  412bb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  412bb2:	2301      	movs	r3, #1
  412bb4:	6013      	str	r3, [r2, #0]
  412bb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  412bb8:	2b00      	cmp	r3, #0
  412bba:	f000 80bd 	beq.w	412d38 <_dtoa_r+0x1d0>
  412bbe:	4895      	ldr	r0, [pc, #596]	; (412e14 <_dtoa_r+0x2ac>)
  412bc0:	6018      	str	r0, [r3, #0]
  412bc2:	3801      	subs	r0, #1
  412bc4:	b01b      	add	sp, #108	; 0x6c
  412bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412bca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  412bcc:	f242 730f 	movw	r3, #9999	; 0x270f
  412bd0:	6013      	str	r3, [r2, #0]
  412bd2:	f1ba 0f00 	cmp.w	sl, #0
  412bd6:	d10d      	bne.n	412bf4 <_dtoa_r+0x8c>
  412bd8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  412bdc:	b955      	cbnz	r5, 412bf4 <_dtoa_r+0x8c>
  412bde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  412be0:	488d      	ldr	r0, [pc, #564]	; (412e18 <_dtoa_r+0x2b0>)
  412be2:	2b00      	cmp	r3, #0
  412be4:	d0ee      	beq.n	412bc4 <_dtoa_r+0x5c>
  412be6:	f100 0308 	add.w	r3, r0, #8
  412bea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  412bec:	6013      	str	r3, [r2, #0]
  412bee:	b01b      	add	sp, #108	; 0x6c
  412bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412bf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  412bf6:	4889      	ldr	r0, [pc, #548]	; (412e1c <_dtoa_r+0x2b4>)
  412bf8:	2b00      	cmp	r3, #0
  412bfa:	d0e3      	beq.n	412bc4 <_dtoa_r+0x5c>
  412bfc:	1cc3      	adds	r3, r0, #3
  412bfe:	e7f4      	b.n	412bea <_dtoa_r+0x82>
  412c00:	2301      	movs	r3, #1
  412c02:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  412c06:	6033      	str	r3, [r6, #0]
  412c08:	46ab      	mov	fp, r5
  412c0a:	e7c5      	b.n	412b98 <_dtoa_r+0x30>
  412c0c:	aa18      	add	r2, sp, #96	; 0x60
  412c0e:	ab19      	add	r3, sp, #100	; 0x64
  412c10:	9201      	str	r2, [sp, #4]
  412c12:	9300      	str	r3, [sp, #0]
  412c14:	4652      	mov	r2, sl
  412c16:	465b      	mov	r3, fp
  412c18:	4620      	mov	r0, r4
  412c1a:	f001 ff09 	bl	414a30 <__d2b>
  412c1e:	0d2b      	lsrs	r3, r5, #20
  412c20:	4681      	mov	r9, r0
  412c22:	d071      	beq.n	412d08 <_dtoa_r+0x1a0>
  412c24:	f3cb 0213 	ubfx	r2, fp, #0, #20
  412c28:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  412c2c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  412c2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  412c32:	4650      	mov	r0, sl
  412c34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  412c38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  412c3c:	2200      	movs	r2, #0
  412c3e:	4b78      	ldr	r3, [pc, #480]	; (412e20 <_dtoa_r+0x2b8>)
  412c40:	f7f9 fb42 	bl	40c2c8 <__aeabi_dsub>
  412c44:	a36c      	add	r3, pc, #432	; (adr r3, 412df8 <_dtoa_r+0x290>)
  412c46:	e9d3 2300 	ldrd	r2, r3, [r3]
  412c4a:	f002 fdb7 	bl	4157bc <__aeabi_dmul>
  412c4e:	a36c      	add	r3, pc, #432	; (adr r3, 412e00 <_dtoa_r+0x298>)
  412c50:	e9d3 2300 	ldrd	r2, r3, [r3]
  412c54:	f7f9 fb3a 	bl	40c2cc <__adddf3>
  412c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
  412c5c:	4630      	mov	r0, r6
  412c5e:	f7f9 fc81 	bl	40c564 <__aeabi_i2d>
  412c62:	a369      	add	r3, pc, #420	; (adr r3, 412e08 <_dtoa_r+0x2a0>)
  412c64:	e9d3 2300 	ldrd	r2, r3, [r3]
  412c68:	f002 fda8 	bl	4157bc <__aeabi_dmul>
  412c6c:	4602      	mov	r2, r0
  412c6e:	460b      	mov	r3, r1
  412c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  412c74:	f7f9 fb2a 	bl	40c2cc <__adddf3>
  412c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
  412c7c:	f7f9 fd60 	bl	40c740 <__aeabi_d2iz>
  412c80:	2200      	movs	r2, #0
  412c82:	9002      	str	r0, [sp, #8]
  412c84:	2300      	movs	r3, #0
  412c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  412c8a:	f7f9 fd31 	bl	40c6f0 <__aeabi_dcmplt>
  412c8e:	2800      	cmp	r0, #0
  412c90:	f040 8173 	bne.w	412f7a <_dtoa_r+0x412>
  412c94:	9d02      	ldr	r5, [sp, #8]
  412c96:	2d16      	cmp	r5, #22
  412c98:	f200 815d 	bhi.w	412f56 <_dtoa_r+0x3ee>
  412c9c:	4b61      	ldr	r3, [pc, #388]	; (412e24 <_dtoa_r+0x2bc>)
  412c9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  412ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
  412ca6:	4652      	mov	r2, sl
  412ca8:	465b      	mov	r3, fp
  412caa:	f7f9 fd3f 	bl	40c72c <__aeabi_dcmpgt>
  412cae:	2800      	cmp	r0, #0
  412cb0:	f000 81c5 	beq.w	41303e <_dtoa_r+0x4d6>
  412cb4:	1e6b      	subs	r3, r5, #1
  412cb6:	9302      	str	r3, [sp, #8]
  412cb8:	2300      	movs	r3, #0
  412cba:	930e      	str	r3, [sp, #56]	; 0x38
  412cbc:	1bbf      	subs	r7, r7, r6
  412cbe:	1e7b      	subs	r3, r7, #1
  412cc0:	9306      	str	r3, [sp, #24]
  412cc2:	f100 8154 	bmi.w	412f6e <_dtoa_r+0x406>
  412cc6:	2300      	movs	r3, #0
  412cc8:	9308      	str	r3, [sp, #32]
  412cca:	9b02      	ldr	r3, [sp, #8]
  412ccc:	2b00      	cmp	r3, #0
  412cce:	f2c0 8145 	blt.w	412f5c <_dtoa_r+0x3f4>
  412cd2:	9a06      	ldr	r2, [sp, #24]
  412cd4:	930d      	str	r3, [sp, #52]	; 0x34
  412cd6:	4611      	mov	r1, r2
  412cd8:	4419      	add	r1, r3
  412cda:	2300      	movs	r3, #0
  412cdc:	9106      	str	r1, [sp, #24]
  412cde:	930c      	str	r3, [sp, #48]	; 0x30
  412ce0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  412ce2:	2b09      	cmp	r3, #9
  412ce4:	d82a      	bhi.n	412d3c <_dtoa_r+0x1d4>
  412ce6:	2b05      	cmp	r3, #5
  412ce8:	f340 865b 	ble.w	4139a2 <_dtoa_r+0xe3a>
  412cec:	3b04      	subs	r3, #4
  412cee:	9324      	str	r3, [sp, #144]	; 0x90
  412cf0:	2500      	movs	r5, #0
  412cf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  412cf4:	3b02      	subs	r3, #2
  412cf6:	2b03      	cmp	r3, #3
  412cf8:	f200 8642 	bhi.w	413980 <_dtoa_r+0xe18>
  412cfc:	e8df f013 	tbh	[pc, r3, lsl #1]
  412d00:	02c903d4 	.word	0x02c903d4
  412d04:	046103df 	.word	0x046103df
  412d08:	9f18      	ldr	r7, [sp, #96]	; 0x60
  412d0a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  412d0c:	443e      	add	r6, r7
  412d0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  412d12:	2b20      	cmp	r3, #32
  412d14:	f340 818e 	ble.w	413034 <_dtoa_r+0x4cc>
  412d18:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  412d1c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  412d20:	409d      	lsls	r5, r3
  412d22:	fa2a f000 	lsr.w	r0, sl, r0
  412d26:	4328      	orrs	r0, r5
  412d28:	f7f9 fc0c 	bl	40c544 <__aeabi_ui2d>
  412d2c:	2301      	movs	r3, #1
  412d2e:	3e01      	subs	r6, #1
  412d30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  412d34:	9314      	str	r3, [sp, #80]	; 0x50
  412d36:	e781      	b.n	412c3c <_dtoa_r+0xd4>
  412d38:	483b      	ldr	r0, [pc, #236]	; (412e28 <_dtoa_r+0x2c0>)
  412d3a:	e743      	b.n	412bc4 <_dtoa_r+0x5c>
  412d3c:	2100      	movs	r1, #0
  412d3e:	6461      	str	r1, [r4, #68]	; 0x44
  412d40:	4620      	mov	r0, r4
  412d42:	9125      	str	r1, [sp, #148]	; 0x94
  412d44:	f001 fafe 	bl	414344 <_Balloc>
  412d48:	f04f 33ff 	mov.w	r3, #4294967295
  412d4c:	930a      	str	r3, [sp, #40]	; 0x28
  412d4e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  412d50:	930f      	str	r3, [sp, #60]	; 0x3c
  412d52:	2301      	movs	r3, #1
  412d54:	9004      	str	r0, [sp, #16]
  412d56:	6420      	str	r0, [r4, #64]	; 0x40
  412d58:	9224      	str	r2, [sp, #144]	; 0x90
  412d5a:	930b      	str	r3, [sp, #44]	; 0x2c
  412d5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  412d5e:	2b00      	cmp	r3, #0
  412d60:	f2c0 80d9 	blt.w	412f16 <_dtoa_r+0x3ae>
  412d64:	9a02      	ldr	r2, [sp, #8]
  412d66:	2a0e      	cmp	r2, #14
  412d68:	f300 80d5 	bgt.w	412f16 <_dtoa_r+0x3ae>
  412d6c:	4b2d      	ldr	r3, [pc, #180]	; (412e24 <_dtoa_r+0x2bc>)
  412d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  412d72:	e9d3 2300 	ldrd	r2, r3, [r3]
  412d76:	e9cd 2308 	strd	r2, r3, [sp, #32]
  412d7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  412d7c:	2b00      	cmp	r3, #0
  412d7e:	f2c0 83ba 	blt.w	4134f6 <_dtoa_r+0x98e>
  412d82:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  412d86:	4650      	mov	r0, sl
  412d88:	462a      	mov	r2, r5
  412d8a:	4633      	mov	r3, r6
  412d8c:	4659      	mov	r1, fp
  412d8e:	f002 fe3f 	bl	415a10 <__aeabi_ddiv>
  412d92:	f7f9 fcd5 	bl	40c740 <__aeabi_d2iz>
  412d96:	4680      	mov	r8, r0
  412d98:	f7f9 fbe4 	bl	40c564 <__aeabi_i2d>
  412d9c:	462a      	mov	r2, r5
  412d9e:	4633      	mov	r3, r6
  412da0:	f002 fd0c 	bl	4157bc <__aeabi_dmul>
  412da4:	460b      	mov	r3, r1
  412da6:	4602      	mov	r2, r0
  412da8:	4659      	mov	r1, fp
  412daa:	4650      	mov	r0, sl
  412dac:	f7f9 fa8c 	bl	40c2c8 <__aeabi_dsub>
  412db0:	9d04      	ldr	r5, [sp, #16]
  412db2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  412db6:	702b      	strb	r3, [r5, #0]
  412db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412dba:	2b01      	cmp	r3, #1
  412dbc:	4606      	mov	r6, r0
  412dbe:	460f      	mov	r7, r1
  412dc0:	f105 0501 	add.w	r5, r5, #1
  412dc4:	d068      	beq.n	412e98 <_dtoa_r+0x330>
  412dc6:	2200      	movs	r2, #0
  412dc8:	4b18      	ldr	r3, [pc, #96]	; (412e2c <_dtoa_r+0x2c4>)
  412dca:	f002 fcf7 	bl	4157bc <__aeabi_dmul>
  412dce:	2200      	movs	r2, #0
  412dd0:	2300      	movs	r3, #0
  412dd2:	4606      	mov	r6, r0
  412dd4:	460f      	mov	r7, r1
  412dd6:	f7f9 fc81 	bl	40c6dc <__aeabi_dcmpeq>
  412dda:	2800      	cmp	r0, #0
  412ddc:	f040 8088 	bne.w	412ef0 <_dtoa_r+0x388>
  412de0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  412de4:	f04f 0a00 	mov.w	sl, #0
  412de8:	f8df b040 	ldr.w	fp, [pc, #64]	; 412e2c <_dtoa_r+0x2c4>
  412dec:	940c      	str	r4, [sp, #48]	; 0x30
  412dee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  412df2:	e028      	b.n	412e46 <_dtoa_r+0x2de>
  412df4:	f3af 8000 	nop.w
  412df8:	636f4361 	.word	0x636f4361
  412dfc:	3fd287a7 	.word	0x3fd287a7
  412e00:	8b60c8b3 	.word	0x8b60c8b3
  412e04:	3fc68a28 	.word	0x3fc68a28
  412e08:	509f79fb 	.word	0x509f79fb
  412e0c:	3fd34413 	.word	0x3fd34413
  412e10:	7ff00000 	.word	0x7ff00000
  412e14:	00417519 	.word	0x00417519
  412e18:	0041768c 	.word	0x0041768c
  412e1c:	00417698 	.word	0x00417698
  412e20:	3ff80000 	.word	0x3ff80000
  412e24:	004177c8 	.word	0x004177c8
  412e28:	00417518 	.word	0x00417518
  412e2c:	40240000 	.word	0x40240000
  412e30:	f002 fcc4 	bl	4157bc <__aeabi_dmul>
  412e34:	2200      	movs	r2, #0
  412e36:	2300      	movs	r3, #0
  412e38:	4606      	mov	r6, r0
  412e3a:	460f      	mov	r7, r1
  412e3c:	f7f9 fc4e 	bl	40c6dc <__aeabi_dcmpeq>
  412e40:	2800      	cmp	r0, #0
  412e42:	f040 83c1 	bne.w	4135c8 <_dtoa_r+0xa60>
  412e46:	4642      	mov	r2, r8
  412e48:	464b      	mov	r3, r9
  412e4a:	4630      	mov	r0, r6
  412e4c:	4639      	mov	r1, r7
  412e4e:	f002 fddf 	bl	415a10 <__aeabi_ddiv>
  412e52:	f7f9 fc75 	bl	40c740 <__aeabi_d2iz>
  412e56:	4604      	mov	r4, r0
  412e58:	f7f9 fb84 	bl	40c564 <__aeabi_i2d>
  412e5c:	4642      	mov	r2, r8
  412e5e:	464b      	mov	r3, r9
  412e60:	f002 fcac 	bl	4157bc <__aeabi_dmul>
  412e64:	4602      	mov	r2, r0
  412e66:	460b      	mov	r3, r1
  412e68:	4630      	mov	r0, r6
  412e6a:	4639      	mov	r1, r7
  412e6c:	f7f9 fa2c 	bl	40c2c8 <__aeabi_dsub>
  412e70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  412e74:	9e04      	ldr	r6, [sp, #16]
  412e76:	f805 eb01 	strb.w	lr, [r5], #1
  412e7a:	eba5 0e06 	sub.w	lr, r5, r6
  412e7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  412e80:	45b6      	cmp	lr, r6
  412e82:	e9cd 0106 	strd	r0, r1, [sp, #24]
  412e86:	4652      	mov	r2, sl
  412e88:	465b      	mov	r3, fp
  412e8a:	d1d1      	bne.n	412e30 <_dtoa_r+0x2c8>
  412e8c:	46a0      	mov	r8, r4
  412e8e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  412e92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  412e94:	4606      	mov	r6, r0
  412e96:	460f      	mov	r7, r1
  412e98:	4632      	mov	r2, r6
  412e9a:	463b      	mov	r3, r7
  412e9c:	4630      	mov	r0, r6
  412e9e:	4639      	mov	r1, r7
  412ea0:	f7f9 fa14 	bl	40c2cc <__adddf3>
  412ea4:	4606      	mov	r6, r0
  412ea6:	460f      	mov	r7, r1
  412ea8:	4602      	mov	r2, r0
  412eaa:	460b      	mov	r3, r1
  412eac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  412eb0:	f7f9 fc1e 	bl	40c6f0 <__aeabi_dcmplt>
  412eb4:	b948      	cbnz	r0, 412eca <_dtoa_r+0x362>
  412eb6:	4632      	mov	r2, r6
  412eb8:	463b      	mov	r3, r7
  412eba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  412ebe:	f7f9 fc0d 	bl	40c6dc <__aeabi_dcmpeq>
  412ec2:	b1a8      	cbz	r0, 412ef0 <_dtoa_r+0x388>
  412ec4:	f018 0f01 	tst.w	r8, #1
  412ec8:	d012      	beq.n	412ef0 <_dtoa_r+0x388>
  412eca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  412ece:	9a04      	ldr	r2, [sp, #16]
  412ed0:	1e6b      	subs	r3, r5, #1
  412ed2:	e004      	b.n	412ede <_dtoa_r+0x376>
  412ed4:	429a      	cmp	r2, r3
  412ed6:	f000 8401 	beq.w	4136dc <_dtoa_r+0xb74>
  412eda:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  412ede:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  412ee2:	f103 0501 	add.w	r5, r3, #1
  412ee6:	d0f5      	beq.n	412ed4 <_dtoa_r+0x36c>
  412ee8:	f108 0801 	add.w	r8, r8, #1
  412eec:	f883 8000 	strb.w	r8, [r3]
  412ef0:	4649      	mov	r1, r9
  412ef2:	4620      	mov	r0, r4
  412ef4:	f001 fa4c 	bl	414390 <_Bfree>
  412ef8:	2200      	movs	r2, #0
  412efa:	9b02      	ldr	r3, [sp, #8]
  412efc:	702a      	strb	r2, [r5, #0]
  412efe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  412f00:	3301      	adds	r3, #1
  412f02:	6013      	str	r3, [r2, #0]
  412f04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  412f06:	2b00      	cmp	r3, #0
  412f08:	f000 839e 	beq.w	413648 <_dtoa_r+0xae0>
  412f0c:	9804      	ldr	r0, [sp, #16]
  412f0e:	601d      	str	r5, [r3, #0]
  412f10:	b01b      	add	sp, #108	; 0x6c
  412f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412f16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  412f18:	2a00      	cmp	r2, #0
  412f1a:	d03e      	beq.n	412f9a <_dtoa_r+0x432>
  412f1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  412f1e:	2a01      	cmp	r2, #1
  412f20:	f340 8311 	ble.w	413546 <_dtoa_r+0x9de>
  412f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  412f28:	1e5f      	subs	r7, r3, #1
  412f2a:	42ba      	cmp	r2, r7
  412f2c:	f2c0 838f 	blt.w	41364e <_dtoa_r+0xae6>
  412f30:	1bd7      	subs	r7, r2, r7
  412f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412f34:	2b00      	cmp	r3, #0
  412f36:	f2c0 848b 	blt.w	413850 <_dtoa_r+0xce8>
  412f3a:	9d08      	ldr	r5, [sp, #32]
  412f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412f3e:	9a08      	ldr	r2, [sp, #32]
  412f40:	441a      	add	r2, r3
  412f42:	9208      	str	r2, [sp, #32]
  412f44:	9a06      	ldr	r2, [sp, #24]
  412f46:	2101      	movs	r1, #1
  412f48:	441a      	add	r2, r3
  412f4a:	4620      	mov	r0, r4
  412f4c:	9206      	str	r2, [sp, #24]
  412f4e:	f001 fb07 	bl	414560 <__i2b>
  412f52:	4606      	mov	r6, r0
  412f54:	e024      	b.n	412fa0 <_dtoa_r+0x438>
  412f56:	2301      	movs	r3, #1
  412f58:	930e      	str	r3, [sp, #56]	; 0x38
  412f5a:	e6af      	b.n	412cbc <_dtoa_r+0x154>
  412f5c:	9a08      	ldr	r2, [sp, #32]
  412f5e:	9b02      	ldr	r3, [sp, #8]
  412f60:	1ad2      	subs	r2, r2, r3
  412f62:	425b      	negs	r3, r3
  412f64:	930c      	str	r3, [sp, #48]	; 0x30
  412f66:	2300      	movs	r3, #0
  412f68:	9208      	str	r2, [sp, #32]
  412f6a:	930d      	str	r3, [sp, #52]	; 0x34
  412f6c:	e6b8      	b.n	412ce0 <_dtoa_r+0x178>
  412f6e:	f1c7 0301 	rsb	r3, r7, #1
  412f72:	9308      	str	r3, [sp, #32]
  412f74:	2300      	movs	r3, #0
  412f76:	9306      	str	r3, [sp, #24]
  412f78:	e6a7      	b.n	412cca <_dtoa_r+0x162>
  412f7a:	9d02      	ldr	r5, [sp, #8]
  412f7c:	4628      	mov	r0, r5
  412f7e:	f7f9 faf1 	bl	40c564 <__aeabi_i2d>
  412f82:	4602      	mov	r2, r0
  412f84:	460b      	mov	r3, r1
  412f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  412f8a:	f7f9 fba7 	bl	40c6dc <__aeabi_dcmpeq>
  412f8e:	2800      	cmp	r0, #0
  412f90:	f47f ae80 	bne.w	412c94 <_dtoa_r+0x12c>
  412f94:	1e6b      	subs	r3, r5, #1
  412f96:	9302      	str	r3, [sp, #8]
  412f98:	e67c      	b.n	412c94 <_dtoa_r+0x12c>
  412f9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  412f9c:	9d08      	ldr	r5, [sp, #32]
  412f9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  412fa0:	2d00      	cmp	r5, #0
  412fa2:	dd0c      	ble.n	412fbe <_dtoa_r+0x456>
  412fa4:	9906      	ldr	r1, [sp, #24]
  412fa6:	2900      	cmp	r1, #0
  412fa8:	460b      	mov	r3, r1
  412faa:	dd08      	ble.n	412fbe <_dtoa_r+0x456>
  412fac:	42a9      	cmp	r1, r5
  412fae:	9a08      	ldr	r2, [sp, #32]
  412fb0:	bfa8      	it	ge
  412fb2:	462b      	movge	r3, r5
  412fb4:	1ad2      	subs	r2, r2, r3
  412fb6:	1aed      	subs	r5, r5, r3
  412fb8:	1acb      	subs	r3, r1, r3
  412fba:	9208      	str	r2, [sp, #32]
  412fbc:	9306      	str	r3, [sp, #24]
  412fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  412fc0:	b1d3      	cbz	r3, 412ff8 <_dtoa_r+0x490>
  412fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  412fc4:	2b00      	cmp	r3, #0
  412fc6:	f000 82b7 	beq.w	413538 <_dtoa_r+0x9d0>
  412fca:	2f00      	cmp	r7, #0
  412fcc:	dd10      	ble.n	412ff0 <_dtoa_r+0x488>
  412fce:	4631      	mov	r1, r6
  412fd0:	463a      	mov	r2, r7
  412fd2:	4620      	mov	r0, r4
  412fd4:	f001 fb60 	bl	414698 <__pow5mult>
  412fd8:	464a      	mov	r2, r9
  412fda:	4601      	mov	r1, r0
  412fdc:	4606      	mov	r6, r0
  412fde:	4620      	mov	r0, r4
  412fe0:	f001 fac8 	bl	414574 <__multiply>
  412fe4:	4649      	mov	r1, r9
  412fe6:	4680      	mov	r8, r0
  412fe8:	4620      	mov	r0, r4
  412fea:	f001 f9d1 	bl	414390 <_Bfree>
  412fee:	46c1      	mov	r9, r8
  412ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  412ff2:	1bda      	subs	r2, r3, r7
  412ff4:	f040 82a1 	bne.w	41353a <_dtoa_r+0x9d2>
  412ff8:	2101      	movs	r1, #1
  412ffa:	4620      	mov	r0, r4
  412ffc:	f001 fab0 	bl	414560 <__i2b>
  413000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  413002:	2b00      	cmp	r3, #0
  413004:	4680      	mov	r8, r0
  413006:	dd1c      	ble.n	413042 <_dtoa_r+0x4da>
  413008:	4601      	mov	r1, r0
  41300a:	461a      	mov	r2, r3
  41300c:	4620      	mov	r0, r4
  41300e:	f001 fb43 	bl	414698 <__pow5mult>
  413012:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413014:	2b01      	cmp	r3, #1
  413016:	4680      	mov	r8, r0
  413018:	f340 8254 	ble.w	4134c4 <_dtoa_r+0x95c>
  41301c:	2300      	movs	r3, #0
  41301e:	930c      	str	r3, [sp, #48]	; 0x30
  413020:	f8d8 3010 	ldr.w	r3, [r8, #16]
  413024:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  413028:	6918      	ldr	r0, [r3, #16]
  41302a:	f001 fa49 	bl	4144c0 <__hi0bits>
  41302e:	f1c0 0020 	rsb	r0, r0, #32
  413032:	e010      	b.n	413056 <_dtoa_r+0x4ee>
  413034:	f1c3 0520 	rsb	r5, r3, #32
  413038:	fa0a f005 	lsl.w	r0, sl, r5
  41303c:	e674      	b.n	412d28 <_dtoa_r+0x1c0>
  41303e:	900e      	str	r0, [sp, #56]	; 0x38
  413040:	e63c      	b.n	412cbc <_dtoa_r+0x154>
  413042:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413044:	2b01      	cmp	r3, #1
  413046:	f340 8287 	ble.w	413558 <_dtoa_r+0x9f0>
  41304a:	2300      	movs	r3, #0
  41304c:	930c      	str	r3, [sp, #48]	; 0x30
  41304e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  413050:	2001      	movs	r0, #1
  413052:	2b00      	cmp	r3, #0
  413054:	d1e4      	bne.n	413020 <_dtoa_r+0x4b8>
  413056:	9a06      	ldr	r2, [sp, #24]
  413058:	4410      	add	r0, r2
  41305a:	f010 001f 	ands.w	r0, r0, #31
  41305e:	f000 80a1 	beq.w	4131a4 <_dtoa_r+0x63c>
  413062:	f1c0 0320 	rsb	r3, r0, #32
  413066:	2b04      	cmp	r3, #4
  413068:	f340 849e 	ble.w	4139a8 <_dtoa_r+0xe40>
  41306c:	9b08      	ldr	r3, [sp, #32]
  41306e:	f1c0 001c 	rsb	r0, r0, #28
  413072:	4403      	add	r3, r0
  413074:	9308      	str	r3, [sp, #32]
  413076:	4613      	mov	r3, r2
  413078:	4403      	add	r3, r0
  41307a:	4405      	add	r5, r0
  41307c:	9306      	str	r3, [sp, #24]
  41307e:	9b08      	ldr	r3, [sp, #32]
  413080:	2b00      	cmp	r3, #0
  413082:	dd05      	ble.n	413090 <_dtoa_r+0x528>
  413084:	4649      	mov	r1, r9
  413086:	461a      	mov	r2, r3
  413088:	4620      	mov	r0, r4
  41308a:	f001 fb55 	bl	414738 <__lshift>
  41308e:	4681      	mov	r9, r0
  413090:	9b06      	ldr	r3, [sp, #24]
  413092:	2b00      	cmp	r3, #0
  413094:	dd05      	ble.n	4130a2 <_dtoa_r+0x53a>
  413096:	4641      	mov	r1, r8
  413098:	461a      	mov	r2, r3
  41309a:	4620      	mov	r0, r4
  41309c:	f001 fb4c 	bl	414738 <__lshift>
  4130a0:	4680      	mov	r8, r0
  4130a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4130a4:	2b00      	cmp	r3, #0
  4130a6:	f040 8086 	bne.w	4131b6 <_dtoa_r+0x64e>
  4130aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4130ac:	2b00      	cmp	r3, #0
  4130ae:	f340 8266 	ble.w	41357e <_dtoa_r+0xa16>
  4130b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4130b4:	2b00      	cmp	r3, #0
  4130b6:	f000 8098 	beq.w	4131ea <_dtoa_r+0x682>
  4130ba:	2d00      	cmp	r5, #0
  4130bc:	dd05      	ble.n	4130ca <_dtoa_r+0x562>
  4130be:	4631      	mov	r1, r6
  4130c0:	462a      	mov	r2, r5
  4130c2:	4620      	mov	r0, r4
  4130c4:	f001 fb38 	bl	414738 <__lshift>
  4130c8:	4606      	mov	r6, r0
  4130ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4130cc:	2b00      	cmp	r3, #0
  4130ce:	f040 8337 	bne.w	413740 <_dtoa_r+0xbd8>
  4130d2:	9606      	str	r6, [sp, #24]
  4130d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4130d6:	9a04      	ldr	r2, [sp, #16]
  4130d8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4130dc:	3b01      	subs	r3, #1
  4130de:	18d3      	adds	r3, r2, r3
  4130e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4130e2:	f00a 0301 	and.w	r3, sl, #1
  4130e6:	930c      	str	r3, [sp, #48]	; 0x30
  4130e8:	4617      	mov	r7, r2
  4130ea:	46c2      	mov	sl, r8
  4130ec:	4651      	mov	r1, sl
  4130ee:	4648      	mov	r0, r9
  4130f0:	f7ff fca4 	bl	412a3c <quorem>
  4130f4:	4631      	mov	r1, r6
  4130f6:	4605      	mov	r5, r0
  4130f8:	4648      	mov	r0, r9
  4130fa:	f001 fb6f 	bl	4147dc <__mcmp>
  4130fe:	465a      	mov	r2, fp
  413100:	900a      	str	r0, [sp, #40]	; 0x28
  413102:	4651      	mov	r1, sl
  413104:	4620      	mov	r0, r4
  413106:	f001 fb85 	bl	414814 <__mdiff>
  41310a:	68c2      	ldr	r2, [r0, #12]
  41310c:	4680      	mov	r8, r0
  41310e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  413112:	2a00      	cmp	r2, #0
  413114:	f040 822b 	bne.w	41356e <_dtoa_r+0xa06>
  413118:	4601      	mov	r1, r0
  41311a:	4648      	mov	r0, r9
  41311c:	9308      	str	r3, [sp, #32]
  41311e:	f001 fb5d 	bl	4147dc <__mcmp>
  413122:	4641      	mov	r1, r8
  413124:	9006      	str	r0, [sp, #24]
  413126:	4620      	mov	r0, r4
  413128:	f001 f932 	bl	414390 <_Bfree>
  41312c:	9a06      	ldr	r2, [sp, #24]
  41312e:	9b08      	ldr	r3, [sp, #32]
  413130:	b932      	cbnz	r2, 413140 <_dtoa_r+0x5d8>
  413132:	9924      	ldr	r1, [sp, #144]	; 0x90
  413134:	b921      	cbnz	r1, 413140 <_dtoa_r+0x5d8>
  413136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  413138:	2a00      	cmp	r2, #0
  41313a:	f000 83ef 	beq.w	41391c <_dtoa_r+0xdb4>
  41313e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  413140:	990a      	ldr	r1, [sp, #40]	; 0x28
  413142:	2900      	cmp	r1, #0
  413144:	f2c0 829f 	blt.w	413686 <_dtoa_r+0xb1e>
  413148:	d105      	bne.n	413156 <_dtoa_r+0x5ee>
  41314a:	9924      	ldr	r1, [sp, #144]	; 0x90
  41314c:	b919      	cbnz	r1, 413156 <_dtoa_r+0x5ee>
  41314e:	990c      	ldr	r1, [sp, #48]	; 0x30
  413150:	2900      	cmp	r1, #0
  413152:	f000 8298 	beq.w	413686 <_dtoa_r+0xb1e>
  413156:	2a00      	cmp	r2, #0
  413158:	f300 8306 	bgt.w	413768 <_dtoa_r+0xc00>
  41315c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41315e:	703b      	strb	r3, [r7, #0]
  413160:	f107 0801 	add.w	r8, r7, #1
  413164:	4297      	cmp	r7, r2
  413166:	4645      	mov	r5, r8
  413168:	f000 830c 	beq.w	413784 <_dtoa_r+0xc1c>
  41316c:	4649      	mov	r1, r9
  41316e:	2300      	movs	r3, #0
  413170:	220a      	movs	r2, #10
  413172:	4620      	mov	r0, r4
  413174:	f001 f916 	bl	4143a4 <__multadd>
  413178:	455e      	cmp	r6, fp
  41317a:	4681      	mov	r9, r0
  41317c:	4631      	mov	r1, r6
  41317e:	f04f 0300 	mov.w	r3, #0
  413182:	f04f 020a 	mov.w	r2, #10
  413186:	4620      	mov	r0, r4
  413188:	f000 81eb 	beq.w	413562 <_dtoa_r+0x9fa>
  41318c:	f001 f90a 	bl	4143a4 <__multadd>
  413190:	4659      	mov	r1, fp
  413192:	4606      	mov	r6, r0
  413194:	2300      	movs	r3, #0
  413196:	220a      	movs	r2, #10
  413198:	4620      	mov	r0, r4
  41319a:	f001 f903 	bl	4143a4 <__multadd>
  41319e:	4647      	mov	r7, r8
  4131a0:	4683      	mov	fp, r0
  4131a2:	e7a3      	b.n	4130ec <_dtoa_r+0x584>
  4131a4:	201c      	movs	r0, #28
  4131a6:	9b08      	ldr	r3, [sp, #32]
  4131a8:	4403      	add	r3, r0
  4131aa:	9308      	str	r3, [sp, #32]
  4131ac:	9b06      	ldr	r3, [sp, #24]
  4131ae:	4403      	add	r3, r0
  4131b0:	4405      	add	r5, r0
  4131b2:	9306      	str	r3, [sp, #24]
  4131b4:	e763      	b.n	41307e <_dtoa_r+0x516>
  4131b6:	4641      	mov	r1, r8
  4131b8:	4648      	mov	r0, r9
  4131ba:	f001 fb0f 	bl	4147dc <__mcmp>
  4131be:	2800      	cmp	r0, #0
  4131c0:	f6bf af73 	bge.w	4130aa <_dtoa_r+0x542>
  4131c4:	9f02      	ldr	r7, [sp, #8]
  4131c6:	4649      	mov	r1, r9
  4131c8:	2300      	movs	r3, #0
  4131ca:	220a      	movs	r2, #10
  4131cc:	4620      	mov	r0, r4
  4131ce:	3f01      	subs	r7, #1
  4131d0:	9702      	str	r7, [sp, #8]
  4131d2:	f001 f8e7 	bl	4143a4 <__multadd>
  4131d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4131d8:	4681      	mov	r9, r0
  4131da:	2b00      	cmp	r3, #0
  4131dc:	f040 83b6 	bne.w	41394c <_dtoa_r+0xde4>
  4131e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4131e2:	2b00      	cmp	r3, #0
  4131e4:	f340 83bf 	ble.w	413966 <_dtoa_r+0xdfe>
  4131e8:	930a      	str	r3, [sp, #40]	; 0x28
  4131ea:	f8dd b010 	ldr.w	fp, [sp, #16]
  4131ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4131f0:	465d      	mov	r5, fp
  4131f2:	e002      	b.n	4131fa <_dtoa_r+0x692>
  4131f4:	f001 f8d6 	bl	4143a4 <__multadd>
  4131f8:	4681      	mov	r9, r0
  4131fa:	4641      	mov	r1, r8
  4131fc:	4648      	mov	r0, r9
  4131fe:	f7ff fc1d 	bl	412a3c <quorem>
  413202:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  413206:	f805 ab01 	strb.w	sl, [r5], #1
  41320a:	eba5 030b 	sub.w	r3, r5, fp
  41320e:	42bb      	cmp	r3, r7
  413210:	f04f 020a 	mov.w	r2, #10
  413214:	f04f 0300 	mov.w	r3, #0
  413218:	4649      	mov	r1, r9
  41321a:	4620      	mov	r0, r4
  41321c:	dbea      	blt.n	4131f4 <_dtoa_r+0x68c>
  41321e:	9b04      	ldr	r3, [sp, #16]
  413220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413222:	2a01      	cmp	r2, #1
  413224:	bfac      	ite	ge
  413226:	189b      	addge	r3, r3, r2
  413228:	3301      	addlt	r3, #1
  41322a:	461d      	mov	r5, r3
  41322c:	f04f 0b00 	mov.w	fp, #0
  413230:	4649      	mov	r1, r9
  413232:	2201      	movs	r2, #1
  413234:	4620      	mov	r0, r4
  413236:	f001 fa7f 	bl	414738 <__lshift>
  41323a:	4641      	mov	r1, r8
  41323c:	4681      	mov	r9, r0
  41323e:	f001 facd 	bl	4147dc <__mcmp>
  413242:	2800      	cmp	r0, #0
  413244:	f340 823d 	ble.w	4136c2 <_dtoa_r+0xb5a>
  413248:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  41324c:	9904      	ldr	r1, [sp, #16]
  41324e:	1e6b      	subs	r3, r5, #1
  413250:	e004      	b.n	41325c <_dtoa_r+0x6f4>
  413252:	428b      	cmp	r3, r1
  413254:	f000 81ae 	beq.w	4135b4 <_dtoa_r+0xa4c>
  413258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  41325c:	2a39      	cmp	r2, #57	; 0x39
  41325e:	f103 0501 	add.w	r5, r3, #1
  413262:	d0f6      	beq.n	413252 <_dtoa_r+0x6ea>
  413264:	3201      	adds	r2, #1
  413266:	701a      	strb	r2, [r3, #0]
  413268:	4641      	mov	r1, r8
  41326a:	4620      	mov	r0, r4
  41326c:	f001 f890 	bl	414390 <_Bfree>
  413270:	2e00      	cmp	r6, #0
  413272:	f43f ae3d 	beq.w	412ef0 <_dtoa_r+0x388>
  413276:	f1bb 0f00 	cmp.w	fp, #0
  41327a:	d005      	beq.n	413288 <_dtoa_r+0x720>
  41327c:	45b3      	cmp	fp, r6
  41327e:	d003      	beq.n	413288 <_dtoa_r+0x720>
  413280:	4659      	mov	r1, fp
  413282:	4620      	mov	r0, r4
  413284:	f001 f884 	bl	414390 <_Bfree>
  413288:	4631      	mov	r1, r6
  41328a:	4620      	mov	r0, r4
  41328c:	f001 f880 	bl	414390 <_Bfree>
  413290:	e62e      	b.n	412ef0 <_dtoa_r+0x388>
  413292:	2300      	movs	r3, #0
  413294:	930b      	str	r3, [sp, #44]	; 0x2c
  413296:	9b02      	ldr	r3, [sp, #8]
  413298:	9a25      	ldr	r2, [sp, #148]	; 0x94
  41329a:	4413      	add	r3, r2
  41329c:	930f      	str	r3, [sp, #60]	; 0x3c
  41329e:	3301      	adds	r3, #1
  4132a0:	2b01      	cmp	r3, #1
  4132a2:	461f      	mov	r7, r3
  4132a4:	461e      	mov	r6, r3
  4132a6:	930a      	str	r3, [sp, #40]	; 0x28
  4132a8:	bfb8      	it	lt
  4132aa:	2701      	movlt	r7, #1
  4132ac:	2100      	movs	r1, #0
  4132ae:	2f17      	cmp	r7, #23
  4132b0:	6461      	str	r1, [r4, #68]	; 0x44
  4132b2:	d90a      	bls.n	4132ca <_dtoa_r+0x762>
  4132b4:	2201      	movs	r2, #1
  4132b6:	2304      	movs	r3, #4
  4132b8:	005b      	lsls	r3, r3, #1
  4132ba:	f103 0014 	add.w	r0, r3, #20
  4132be:	4287      	cmp	r7, r0
  4132c0:	4611      	mov	r1, r2
  4132c2:	f102 0201 	add.w	r2, r2, #1
  4132c6:	d2f7      	bcs.n	4132b8 <_dtoa_r+0x750>
  4132c8:	6461      	str	r1, [r4, #68]	; 0x44
  4132ca:	4620      	mov	r0, r4
  4132cc:	f001 f83a 	bl	414344 <_Balloc>
  4132d0:	2e0e      	cmp	r6, #14
  4132d2:	9004      	str	r0, [sp, #16]
  4132d4:	6420      	str	r0, [r4, #64]	; 0x40
  4132d6:	f63f ad41 	bhi.w	412d5c <_dtoa_r+0x1f4>
  4132da:	2d00      	cmp	r5, #0
  4132dc:	f43f ad3e 	beq.w	412d5c <_dtoa_r+0x1f4>
  4132e0:	9902      	ldr	r1, [sp, #8]
  4132e2:	2900      	cmp	r1, #0
  4132e4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4132e8:	f340 8202 	ble.w	4136f0 <_dtoa_r+0xb88>
  4132ec:	4bb8      	ldr	r3, [pc, #736]	; (4135d0 <_dtoa_r+0xa68>)
  4132ee:	f001 020f 	and.w	r2, r1, #15
  4132f2:	110d      	asrs	r5, r1, #4
  4132f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4132f8:	06e9      	lsls	r1, r5, #27
  4132fa:	e9d3 6700 	ldrd	r6, r7, [r3]
  4132fe:	f140 81ae 	bpl.w	41365e <_dtoa_r+0xaf6>
  413302:	4bb4      	ldr	r3, [pc, #720]	; (4135d4 <_dtoa_r+0xa6c>)
  413304:	4650      	mov	r0, sl
  413306:	4659      	mov	r1, fp
  413308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  41330c:	f002 fb80 	bl	415a10 <__aeabi_ddiv>
  413310:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  413314:	f005 050f 	and.w	r5, r5, #15
  413318:	f04f 0a03 	mov.w	sl, #3
  41331c:	b18d      	cbz	r5, 413342 <_dtoa_r+0x7da>
  41331e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4135d4 <_dtoa_r+0xa6c>
  413322:	07ea      	lsls	r2, r5, #31
  413324:	d509      	bpl.n	41333a <_dtoa_r+0x7d2>
  413326:	4630      	mov	r0, r6
  413328:	4639      	mov	r1, r7
  41332a:	e9d8 2300 	ldrd	r2, r3, [r8]
  41332e:	f002 fa45 	bl	4157bc <__aeabi_dmul>
  413332:	f10a 0a01 	add.w	sl, sl, #1
  413336:	4606      	mov	r6, r0
  413338:	460f      	mov	r7, r1
  41333a:	106d      	asrs	r5, r5, #1
  41333c:	f108 0808 	add.w	r8, r8, #8
  413340:	d1ef      	bne.n	413322 <_dtoa_r+0x7ba>
  413342:	463b      	mov	r3, r7
  413344:	4632      	mov	r2, r6
  413346:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  41334a:	f002 fb61 	bl	415a10 <__aeabi_ddiv>
  41334e:	4607      	mov	r7, r0
  413350:	4688      	mov	r8, r1
  413352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  413354:	b143      	cbz	r3, 413368 <_dtoa_r+0x800>
  413356:	2200      	movs	r2, #0
  413358:	4b9f      	ldr	r3, [pc, #636]	; (4135d8 <_dtoa_r+0xa70>)
  41335a:	4638      	mov	r0, r7
  41335c:	4641      	mov	r1, r8
  41335e:	f7f9 f9c7 	bl	40c6f0 <__aeabi_dcmplt>
  413362:	2800      	cmp	r0, #0
  413364:	f040 8286 	bne.w	413874 <_dtoa_r+0xd0c>
  413368:	4650      	mov	r0, sl
  41336a:	f7f9 f8fb 	bl	40c564 <__aeabi_i2d>
  41336e:	463a      	mov	r2, r7
  413370:	4643      	mov	r3, r8
  413372:	f002 fa23 	bl	4157bc <__aeabi_dmul>
  413376:	4b99      	ldr	r3, [pc, #612]	; (4135dc <_dtoa_r+0xa74>)
  413378:	2200      	movs	r2, #0
  41337a:	f7f8 ffa7 	bl	40c2cc <__adddf3>
  41337e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413380:	4605      	mov	r5, r0
  413382:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  413386:	2b00      	cmp	r3, #0
  413388:	f000 813e 	beq.w	413608 <_dtoa_r+0xaa0>
  41338c:	9b02      	ldr	r3, [sp, #8]
  41338e:	9315      	str	r3, [sp, #84]	; 0x54
  413390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413392:	9312      	str	r3, [sp, #72]	; 0x48
  413394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  413396:	2b00      	cmp	r3, #0
  413398:	f000 81fa 	beq.w	413790 <_dtoa_r+0xc28>
  41339c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  41339e:	4b8c      	ldr	r3, [pc, #560]	; (4135d0 <_dtoa_r+0xa68>)
  4133a0:	498f      	ldr	r1, [pc, #572]	; (4135e0 <_dtoa_r+0xa78>)
  4133a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4133a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4133aa:	2000      	movs	r0, #0
  4133ac:	f002 fb30 	bl	415a10 <__aeabi_ddiv>
  4133b0:	462a      	mov	r2, r5
  4133b2:	4633      	mov	r3, r6
  4133b4:	f7f8 ff88 	bl	40c2c8 <__aeabi_dsub>
  4133b8:	4682      	mov	sl, r0
  4133ba:	468b      	mov	fp, r1
  4133bc:	4638      	mov	r0, r7
  4133be:	4641      	mov	r1, r8
  4133c0:	f7f9 f9be 	bl	40c740 <__aeabi_d2iz>
  4133c4:	4605      	mov	r5, r0
  4133c6:	f7f9 f8cd 	bl	40c564 <__aeabi_i2d>
  4133ca:	4602      	mov	r2, r0
  4133cc:	460b      	mov	r3, r1
  4133ce:	4638      	mov	r0, r7
  4133d0:	4641      	mov	r1, r8
  4133d2:	f7f8 ff79 	bl	40c2c8 <__aeabi_dsub>
  4133d6:	3530      	adds	r5, #48	; 0x30
  4133d8:	fa5f f885 	uxtb.w	r8, r5
  4133dc:	9d04      	ldr	r5, [sp, #16]
  4133de:	4606      	mov	r6, r0
  4133e0:	460f      	mov	r7, r1
  4133e2:	f885 8000 	strb.w	r8, [r5]
  4133e6:	4602      	mov	r2, r0
  4133e8:	460b      	mov	r3, r1
  4133ea:	4650      	mov	r0, sl
  4133ec:	4659      	mov	r1, fp
  4133ee:	3501      	adds	r5, #1
  4133f0:	f7f9 f99c 	bl	40c72c <__aeabi_dcmpgt>
  4133f4:	2800      	cmp	r0, #0
  4133f6:	d154      	bne.n	4134a2 <_dtoa_r+0x93a>
  4133f8:	4632      	mov	r2, r6
  4133fa:	463b      	mov	r3, r7
  4133fc:	2000      	movs	r0, #0
  4133fe:	4976      	ldr	r1, [pc, #472]	; (4135d8 <_dtoa_r+0xa70>)
  413400:	f7f8 ff62 	bl	40c2c8 <__aeabi_dsub>
  413404:	4602      	mov	r2, r0
  413406:	460b      	mov	r3, r1
  413408:	4650      	mov	r0, sl
  41340a:	4659      	mov	r1, fp
  41340c:	f7f9 f98e 	bl	40c72c <__aeabi_dcmpgt>
  413410:	2800      	cmp	r0, #0
  413412:	f040 8270 	bne.w	4138f6 <_dtoa_r+0xd8e>
  413416:	9a12      	ldr	r2, [sp, #72]	; 0x48
  413418:	2a01      	cmp	r2, #1
  41341a:	f000 8111 	beq.w	413640 <_dtoa_r+0xad8>
  41341e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  413420:	9a04      	ldr	r2, [sp, #16]
  413422:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  413426:	4413      	add	r3, r2
  413428:	4699      	mov	r9, r3
  41342a:	e00d      	b.n	413448 <_dtoa_r+0x8e0>
  41342c:	2000      	movs	r0, #0
  41342e:	496a      	ldr	r1, [pc, #424]	; (4135d8 <_dtoa_r+0xa70>)
  413430:	f7f8 ff4a 	bl	40c2c8 <__aeabi_dsub>
  413434:	4652      	mov	r2, sl
  413436:	465b      	mov	r3, fp
  413438:	f7f9 f95a 	bl	40c6f0 <__aeabi_dcmplt>
  41343c:	2800      	cmp	r0, #0
  41343e:	f040 8258 	bne.w	4138f2 <_dtoa_r+0xd8a>
  413442:	454d      	cmp	r5, r9
  413444:	f000 80fa 	beq.w	41363c <_dtoa_r+0xad4>
  413448:	4650      	mov	r0, sl
  41344a:	4659      	mov	r1, fp
  41344c:	2200      	movs	r2, #0
  41344e:	4b65      	ldr	r3, [pc, #404]	; (4135e4 <_dtoa_r+0xa7c>)
  413450:	f002 f9b4 	bl	4157bc <__aeabi_dmul>
  413454:	2200      	movs	r2, #0
  413456:	4b63      	ldr	r3, [pc, #396]	; (4135e4 <_dtoa_r+0xa7c>)
  413458:	4682      	mov	sl, r0
  41345a:	468b      	mov	fp, r1
  41345c:	4630      	mov	r0, r6
  41345e:	4639      	mov	r1, r7
  413460:	f002 f9ac 	bl	4157bc <__aeabi_dmul>
  413464:	460f      	mov	r7, r1
  413466:	4606      	mov	r6, r0
  413468:	f7f9 f96a 	bl	40c740 <__aeabi_d2iz>
  41346c:	4680      	mov	r8, r0
  41346e:	f7f9 f879 	bl	40c564 <__aeabi_i2d>
  413472:	4602      	mov	r2, r0
  413474:	460b      	mov	r3, r1
  413476:	4630      	mov	r0, r6
  413478:	4639      	mov	r1, r7
  41347a:	f7f8 ff25 	bl	40c2c8 <__aeabi_dsub>
  41347e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  413482:	fa5f f888 	uxtb.w	r8, r8
  413486:	4652      	mov	r2, sl
  413488:	465b      	mov	r3, fp
  41348a:	f805 8b01 	strb.w	r8, [r5], #1
  41348e:	4606      	mov	r6, r0
  413490:	460f      	mov	r7, r1
  413492:	f7f9 f92d 	bl	40c6f0 <__aeabi_dcmplt>
  413496:	4632      	mov	r2, r6
  413498:	463b      	mov	r3, r7
  41349a:	2800      	cmp	r0, #0
  41349c:	d0c6      	beq.n	41342c <_dtoa_r+0x8c4>
  41349e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4134a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4134a4:	9302      	str	r3, [sp, #8]
  4134a6:	e523      	b.n	412ef0 <_dtoa_r+0x388>
  4134a8:	2300      	movs	r3, #0
  4134aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4134ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4134ae:	2b00      	cmp	r3, #0
  4134b0:	f340 80dc 	ble.w	41366c <_dtoa_r+0xb04>
  4134b4:	461f      	mov	r7, r3
  4134b6:	461e      	mov	r6, r3
  4134b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4134ba:	930a      	str	r3, [sp, #40]	; 0x28
  4134bc:	e6f6      	b.n	4132ac <_dtoa_r+0x744>
  4134be:	2301      	movs	r3, #1
  4134c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4134c2:	e7f3      	b.n	4134ac <_dtoa_r+0x944>
  4134c4:	f1ba 0f00 	cmp.w	sl, #0
  4134c8:	f47f ada8 	bne.w	41301c <_dtoa_r+0x4b4>
  4134cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4134d0:	2b00      	cmp	r3, #0
  4134d2:	f47f adba 	bne.w	41304a <_dtoa_r+0x4e2>
  4134d6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4134da:	0d3f      	lsrs	r7, r7, #20
  4134dc:	053f      	lsls	r7, r7, #20
  4134de:	2f00      	cmp	r7, #0
  4134e0:	f000 820d 	beq.w	4138fe <_dtoa_r+0xd96>
  4134e4:	9b08      	ldr	r3, [sp, #32]
  4134e6:	3301      	adds	r3, #1
  4134e8:	9308      	str	r3, [sp, #32]
  4134ea:	9b06      	ldr	r3, [sp, #24]
  4134ec:	3301      	adds	r3, #1
  4134ee:	9306      	str	r3, [sp, #24]
  4134f0:	2301      	movs	r3, #1
  4134f2:	930c      	str	r3, [sp, #48]	; 0x30
  4134f4:	e5ab      	b.n	41304e <_dtoa_r+0x4e6>
  4134f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4134f8:	2b00      	cmp	r3, #0
  4134fa:	f73f ac42 	bgt.w	412d82 <_dtoa_r+0x21a>
  4134fe:	f040 8221 	bne.w	413944 <_dtoa_r+0xddc>
  413502:	2200      	movs	r2, #0
  413504:	4b38      	ldr	r3, [pc, #224]	; (4135e8 <_dtoa_r+0xa80>)
  413506:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  41350a:	f002 f957 	bl	4157bc <__aeabi_dmul>
  41350e:	4652      	mov	r2, sl
  413510:	465b      	mov	r3, fp
  413512:	f7f9 f901 	bl	40c718 <__aeabi_dcmpge>
  413516:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  41351a:	4646      	mov	r6, r8
  41351c:	2800      	cmp	r0, #0
  41351e:	d041      	beq.n	4135a4 <_dtoa_r+0xa3c>
  413520:	9b25      	ldr	r3, [sp, #148]	; 0x94
  413522:	9d04      	ldr	r5, [sp, #16]
  413524:	43db      	mvns	r3, r3
  413526:	9302      	str	r3, [sp, #8]
  413528:	4641      	mov	r1, r8
  41352a:	4620      	mov	r0, r4
  41352c:	f000 ff30 	bl	414390 <_Bfree>
  413530:	2e00      	cmp	r6, #0
  413532:	f43f acdd 	beq.w	412ef0 <_dtoa_r+0x388>
  413536:	e6a7      	b.n	413288 <_dtoa_r+0x720>
  413538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41353a:	4649      	mov	r1, r9
  41353c:	4620      	mov	r0, r4
  41353e:	f001 f8ab 	bl	414698 <__pow5mult>
  413542:	4681      	mov	r9, r0
  413544:	e558      	b.n	412ff8 <_dtoa_r+0x490>
  413546:	9a14      	ldr	r2, [sp, #80]	; 0x50
  413548:	2a00      	cmp	r2, #0
  41354a:	f000 8187 	beq.w	41385c <_dtoa_r+0xcf4>
  41354e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  413552:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  413554:	9d08      	ldr	r5, [sp, #32]
  413556:	e4f2      	b.n	412f3e <_dtoa_r+0x3d6>
  413558:	f1ba 0f00 	cmp.w	sl, #0
  41355c:	f47f ad75 	bne.w	41304a <_dtoa_r+0x4e2>
  413560:	e7b4      	b.n	4134cc <_dtoa_r+0x964>
  413562:	f000 ff1f 	bl	4143a4 <__multadd>
  413566:	4647      	mov	r7, r8
  413568:	4606      	mov	r6, r0
  41356a:	4683      	mov	fp, r0
  41356c:	e5be      	b.n	4130ec <_dtoa_r+0x584>
  41356e:	4601      	mov	r1, r0
  413570:	4620      	mov	r0, r4
  413572:	9306      	str	r3, [sp, #24]
  413574:	f000 ff0c 	bl	414390 <_Bfree>
  413578:	2201      	movs	r2, #1
  41357a:	9b06      	ldr	r3, [sp, #24]
  41357c:	e5e0      	b.n	413140 <_dtoa_r+0x5d8>
  41357e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413580:	2b02      	cmp	r3, #2
  413582:	f77f ad96 	ble.w	4130b2 <_dtoa_r+0x54a>
  413586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413588:	2b00      	cmp	r3, #0
  41358a:	d1c9      	bne.n	413520 <_dtoa_r+0x9b8>
  41358c:	4641      	mov	r1, r8
  41358e:	2205      	movs	r2, #5
  413590:	4620      	mov	r0, r4
  413592:	f000 ff07 	bl	4143a4 <__multadd>
  413596:	4601      	mov	r1, r0
  413598:	4680      	mov	r8, r0
  41359a:	4648      	mov	r0, r9
  41359c:	f001 f91e 	bl	4147dc <__mcmp>
  4135a0:	2800      	cmp	r0, #0
  4135a2:	ddbd      	ble.n	413520 <_dtoa_r+0x9b8>
  4135a4:	9a02      	ldr	r2, [sp, #8]
  4135a6:	9904      	ldr	r1, [sp, #16]
  4135a8:	2331      	movs	r3, #49	; 0x31
  4135aa:	3201      	adds	r2, #1
  4135ac:	9202      	str	r2, [sp, #8]
  4135ae:	700b      	strb	r3, [r1, #0]
  4135b0:	1c4d      	adds	r5, r1, #1
  4135b2:	e7b9      	b.n	413528 <_dtoa_r+0x9c0>
  4135b4:	9a02      	ldr	r2, [sp, #8]
  4135b6:	3201      	adds	r2, #1
  4135b8:	9202      	str	r2, [sp, #8]
  4135ba:	9a04      	ldr	r2, [sp, #16]
  4135bc:	2331      	movs	r3, #49	; 0x31
  4135be:	7013      	strb	r3, [r2, #0]
  4135c0:	e652      	b.n	413268 <_dtoa_r+0x700>
  4135c2:	2301      	movs	r3, #1
  4135c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4135c6:	e666      	b.n	413296 <_dtoa_r+0x72e>
  4135c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4135cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4135ce:	e48f      	b.n	412ef0 <_dtoa_r+0x388>
  4135d0:	004177c8 	.word	0x004177c8
  4135d4:	004177a0 	.word	0x004177a0
  4135d8:	3ff00000 	.word	0x3ff00000
  4135dc:	401c0000 	.word	0x401c0000
  4135e0:	3fe00000 	.word	0x3fe00000
  4135e4:	40240000 	.word	0x40240000
  4135e8:	40140000 	.word	0x40140000
  4135ec:	4650      	mov	r0, sl
  4135ee:	f7f8 ffb9 	bl	40c564 <__aeabi_i2d>
  4135f2:	463a      	mov	r2, r7
  4135f4:	4643      	mov	r3, r8
  4135f6:	f002 f8e1 	bl	4157bc <__aeabi_dmul>
  4135fa:	2200      	movs	r2, #0
  4135fc:	4bc1      	ldr	r3, [pc, #772]	; (413904 <_dtoa_r+0xd9c>)
  4135fe:	f7f8 fe65 	bl	40c2cc <__adddf3>
  413602:	4605      	mov	r5, r0
  413604:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  413608:	4641      	mov	r1, r8
  41360a:	2200      	movs	r2, #0
  41360c:	4bbe      	ldr	r3, [pc, #760]	; (413908 <_dtoa_r+0xda0>)
  41360e:	4638      	mov	r0, r7
  413610:	f7f8 fe5a 	bl	40c2c8 <__aeabi_dsub>
  413614:	462a      	mov	r2, r5
  413616:	4633      	mov	r3, r6
  413618:	4682      	mov	sl, r0
  41361a:	468b      	mov	fp, r1
  41361c:	f7f9 f886 	bl	40c72c <__aeabi_dcmpgt>
  413620:	4680      	mov	r8, r0
  413622:	2800      	cmp	r0, #0
  413624:	f040 8110 	bne.w	413848 <_dtoa_r+0xce0>
  413628:	462a      	mov	r2, r5
  41362a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  41362e:	4650      	mov	r0, sl
  413630:	4659      	mov	r1, fp
  413632:	f7f9 f85d 	bl	40c6f0 <__aeabi_dcmplt>
  413636:	b118      	cbz	r0, 413640 <_dtoa_r+0xad8>
  413638:	4646      	mov	r6, r8
  41363a:	e771      	b.n	413520 <_dtoa_r+0x9b8>
  41363c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  413640:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  413644:	f7ff bb8a 	b.w	412d5c <_dtoa_r+0x1f4>
  413648:	9804      	ldr	r0, [sp, #16]
  41364a:	f7ff babb 	b.w	412bc4 <_dtoa_r+0x5c>
  41364e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  413650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  413652:	970c      	str	r7, [sp, #48]	; 0x30
  413654:	1afb      	subs	r3, r7, r3
  413656:	441a      	add	r2, r3
  413658:	920d      	str	r2, [sp, #52]	; 0x34
  41365a:	2700      	movs	r7, #0
  41365c:	e469      	b.n	412f32 <_dtoa_r+0x3ca>
  41365e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  413662:	f04f 0a02 	mov.w	sl, #2
  413666:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  41366a:	e657      	b.n	41331c <_dtoa_r+0x7b4>
  41366c:	2100      	movs	r1, #0
  41366e:	2301      	movs	r3, #1
  413670:	6461      	str	r1, [r4, #68]	; 0x44
  413672:	4620      	mov	r0, r4
  413674:	9325      	str	r3, [sp, #148]	; 0x94
  413676:	f000 fe65 	bl	414344 <_Balloc>
  41367a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  41367c:	9004      	str	r0, [sp, #16]
  41367e:	6420      	str	r0, [r4, #64]	; 0x40
  413680:	930a      	str	r3, [sp, #40]	; 0x28
  413682:	930f      	str	r3, [sp, #60]	; 0x3c
  413684:	e629      	b.n	4132da <_dtoa_r+0x772>
  413686:	2a00      	cmp	r2, #0
  413688:	46d0      	mov	r8, sl
  41368a:	f8cd b018 	str.w	fp, [sp, #24]
  41368e:	469a      	mov	sl, r3
  413690:	dd11      	ble.n	4136b6 <_dtoa_r+0xb4e>
  413692:	4649      	mov	r1, r9
  413694:	2201      	movs	r2, #1
  413696:	4620      	mov	r0, r4
  413698:	f001 f84e 	bl	414738 <__lshift>
  41369c:	4641      	mov	r1, r8
  41369e:	4681      	mov	r9, r0
  4136a0:	f001 f89c 	bl	4147dc <__mcmp>
  4136a4:	2800      	cmp	r0, #0
  4136a6:	f340 8146 	ble.w	413936 <_dtoa_r+0xdce>
  4136aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4136ae:	f000 8106 	beq.w	4138be <_dtoa_r+0xd56>
  4136b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4136b6:	46b3      	mov	fp, r6
  4136b8:	f887 a000 	strb.w	sl, [r7]
  4136bc:	1c7d      	adds	r5, r7, #1
  4136be:	9e06      	ldr	r6, [sp, #24]
  4136c0:	e5d2      	b.n	413268 <_dtoa_r+0x700>
  4136c2:	d104      	bne.n	4136ce <_dtoa_r+0xb66>
  4136c4:	f01a 0f01 	tst.w	sl, #1
  4136c8:	d001      	beq.n	4136ce <_dtoa_r+0xb66>
  4136ca:	e5bd      	b.n	413248 <_dtoa_r+0x6e0>
  4136cc:	4615      	mov	r5, r2
  4136ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4136d2:	2b30      	cmp	r3, #48	; 0x30
  4136d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4136d8:	d0f8      	beq.n	4136cc <_dtoa_r+0xb64>
  4136da:	e5c5      	b.n	413268 <_dtoa_r+0x700>
  4136dc:	9904      	ldr	r1, [sp, #16]
  4136de:	2230      	movs	r2, #48	; 0x30
  4136e0:	700a      	strb	r2, [r1, #0]
  4136e2:	9a02      	ldr	r2, [sp, #8]
  4136e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4136e8:	3201      	adds	r2, #1
  4136ea:	9202      	str	r2, [sp, #8]
  4136ec:	f7ff bbfc 	b.w	412ee8 <_dtoa_r+0x380>
  4136f0:	f000 80bb 	beq.w	41386a <_dtoa_r+0xd02>
  4136f4:	9b02      	ldr	r3, [sp, #8]
  4136f6:	425d      	negs	r5, r3
  4136f8:	4b84      	ldr	r3, [pc, #528]	; (41390c <_dtoa_r+0xda4>)
  4136fa:	f005 020f 	and.w	r2, r5, #15
  4136fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  413702:	e9d3 2300 	ldrd	r2, r3, [r3]
  413706:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  41370a:	f002 f857 	bl	4157bc <__aeabi_dmul>
  41370e:	112d      	asrs	r5, r5, #4
  413710:	4607      	mov	r7, r0
  413712:	4688      	mov	r8, r1
  413714:	f000 812c 	beq.w	413970 <_dtoa_r+0xe08>
  413718:	4e7d      	ldr	r6, [pc, #500]	; (413910 <_dtoa_r+0xda8>)
  41371a:	f04f 0a02 	mov.w	sl, #2
  41371e:	07eb      	lsls	r3, r5, #31
  413720:	d509      	bpl.n	413736 <_dtoa_r+0xbce>
  413722:	4638      	mov	r0, r7
  413724:	4641      	mov	r1, r8
  413726:	e9d6 2300 	ldrd	r2, r3, [r6]
  41372a:	f002 f847 	bl	4157bc <__aeabi_dmul>
  41372e:	f10a 0a01 	add.w	sl, sl, #1
  413732:	4607      	mov	r7, r0
  413734:	4688      	mov	r8, r1
  413736:	106d      	asrs	r5, r5, #1
  413738:	f106 0608 	add.w	r6, r6, #8
  41373c:	d1ef      	bne.n	41371e <_dtoa_r+0xbb6>
  41373e:	e608      	b.n	413352 <_dtoa_r+0x7ea>
  413740:	6871      	ldr	r1, [r6, #4]
  413742:	4620      	mov	r0, r4
  413744:	f000 fdfe 	bl	414344 <_Balloc>
  413748:	6933      	ldr	r3, [r6, #16]
  41374a:	3302      	adds	r3, #2
  41374c:	009a      	lsls	r2, r3, #2
  41374e:	4605      	mov	r5, r0
  413750:	f106 010c 	add.w	r1, r6, #12
  413754:	300c      	adds	r0, #12
  413756:	f7fa fa73 	bl	40dc40 <memcpy>
  41375a:	4629      	mov	r1, r5
  41375c:	2201      	movs	r2, #1
  41375e:	4620      	mov	r0, r4
  413760:	f000 ffea 	bl	414738 <__lshift>
  413764:	9006      	str	r0, [sp, #24]
  413766:	e4b5      	b.n	4130d4 <_dtoa_r+0x56c>
  413768:	2b39      	cmp	r3, #57	; 0x39
  41376a:	f8cd b018 	str.w	fp, [sp, #24]
  41376e:	46d0      	mov	r8, sl
  413770:	f000 80a5 	beq.w	4138be <_dtoa_r+0xd56>
  413774:	f103 0a01 	add.w	sl, r3, #1
  413778:	46b3      	mov	fp, r6
  41377a:	f887 a000 	strb.w	sl, [r7]
  41377e:	1c7d      	adds	r5, r7, #1
  413780:	9e06      	ldr	r6, [sp, #24]
  413782:	e571      	b.n	413268 <_dtoa_r+0x700>
  413784:	465a      	mov	r2, fp
  413786:	46d0      	mov	r8, sl
  413788:	46b3      	mov	fp, r6
  41378a:	469a      	mov	sl, r3
  41378c:	4616      	mov	r6, r2
  41378e:	e54f      	b.n	413230 <_dtoa_r+0x6c8>
  413790:	9b12      	ldr	r3, [sp, #72]	; 0x48
  413792:	495e      	ldr	r1, [pc, #376]	; (41390c <_dtoa_r+0xda4>)
  413794:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  413798:	462a      	mov	r2, r5
  41379a:	4633      	mov	r3, r6
  41379c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4137a0:	f002 f80c 	bl	4157bc <__aeabi_dmul>
  4137a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4137a8:	4638      	mov	r0, r7
  4137aa:	4641      	mov	r1, r8
  4137ac:	f7f8 ffc8 	bl	40c740 <__aeabi_d2iz>
  4137b0:	4605      	mov	r5, r0
  4137b2:	f7f8 fed7 	bl	40c564 <__aeabi_i2d>
  4137b6:	460b      	mov	r3, r1
  4137b8:	4602      	mov	r2, r0
  4137ba:	4641      	mov	r1, r8
  4137bc:	4638      	mov	r0, r7
  4137be:	f7f8 fd83 	bl	40c2c8 <__aeabi_dsub>
  4137c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4137c4:	460f      	mov	r7, r1
  4137c6:	9904      	ldr	r1, [sp, #16]
  4137c8:	3530      	adds	r5, #48	; 0x30
  4137ca:	2b01      	cmp	r3, #1
  4137cc:	700d      	strb	r5, [r1, #0]
  4137ce:	4606      	mov	r6, r0
  4137d0:	f101 0501 	add.w	r5, r1, #1
  4137d4:	d026      	beq.n	413824 <_dtoa_r+0xcbc>
  4137d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4137d8:	9a04      	ldr	r2, [sp, #16]
  4137da:	f8df b13c 	ldr.w	fp, [pc, #316]	; 413918 <_dtoa_r+0xdb0>
  4137de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4137e2:	4413      	add	r3, r2
  4137e4:	f04f 0a00 	mov.w	sl, #0
  4137e8:	4699      	mov	r9, r3
  4137ea:	4652      	mov	r2, sl
  4137ec:	465b      	mov	r3, fp
  4137ee:	4630      	mov	r0, r6
  4137f0:	4639      	mov	r1, r7
  4137f2:	f001 ffe3 	bl	4157bc <__aeabi_dmul>
  4137f6:	460f      	mov	r7, r1
  4137f8:	4606      	mov	r6, r0
  4137fa:	f7f8 ffa1 	bl	40c740 <__aeabi_d2iz>
  4137fe:	4680      	mov	r8, r0
  413800:	f7f8 feb0 	bl	40c564 <__aeabi_i2d>
  413804:	f108 0830 	add.w	r8, r8, #48	; 0x30
  413808:	4602      	mov	r2, r0
  41380a:	460b      	mov	r3, r1
  41380c:	4630      	mov	r0, r6
  41380e:	4639      	mov	r1, r7
  413810:	f7f8 fd5a 	bl	40c2c8 <__aeabi_dsub>
  413814:	f805 8b01 	strb.w	r8, [r5], #1
  413818:	454d      	cmp	r5, r9
  41381a:	4606      	mov	r6, r0
  41381c:	460f      	mov	r7, r1
  41381e:	d1e4      	bne.n	4137ea <_dtoa_r+0xc82>
  413820:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  413824:	4b3b      	ldr	r3, [pc, #236]	; (413914 <_dtoa_r+0xdac>)
  413826:	2200      	movs	r2, #0
  413828:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  41382c:	f7f8 fd4e 	bl	40c2cc <__adddf3>
  413830:	4632      	mov	r2, r6
  413832:	463b      	mov	r3, r7
  413834:	f7f8 ff5c 	bl	40c6f0 <__aeabi_dcmplt>
  413838:	2800      	cmp	r0, #0
  41383a:	d046      	beq.n	4138ca <_dtoa_r+0xd62>
  41383c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41383e:	9302      	str	r3, [sp, #8]
  413840:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  413844:	f7ff bb43 	b.w	412ece <_dtoa_r+0x366>
  413848:	f04f 0800 	mov.w	r8, #0
  41384c:	4646      	mov	r6, r8
  41384e:	e6a9      	b.n	4135a4 <_dtoa_r+0xa3c>
  413850:	9b08      	ldr	r3, [sp, #32]
  413852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413854:	1a9d      	subs	r5, r3, r2
  413856:	2300      	movs	r3, #0
  413858:	f7ff bb71 	b.w	412f3e <_dtoa_r+0x3d6>
  41385c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41385e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  413860:	9d08      	ldr	r5, [sp, #32]
  413862:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  413866:	f7ff bb6a 	b.w	412f3e <_dtoa_r+0x3d6>
  41386a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  41386e:	f04f 0a02 	mov.w	sl, #2
  413872:	e56e      	b.n	413352 <_dtoa_r+0x7ea>
  413874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413876:	2b00      	cmp	r3, #0
  413878:	f43f aeb8 	beq.w	4135ec <_dtoa_r+0xa84>
  41387c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41387e:	2b00      	cmp	r3, #0
  413880:	f77f aede 	ble.w	413640 <_dtoa_r+0xad8>
  413884:	2200      	movs	r2, #0
  413886:	4b24      	ldr	r3, [pc, #144]	; (413918 <_dtoa_r+0xdb0>)
  413888:	4638      	mov	r0, r7
  41388a:	4641      	mov	r1, r8
  41388c:	f001 ff96 	bl	4157bc <__aeabi_dmul>
  413890:	4607      	mov	r7, r0
  413892:	4688      	mov	r8, r1
  413894:	f10a 0001 	add.w	r0, sl, #1
  413898:	f7f8 fe64 	bl	40c564 <__aeabi_i2d>
  41389c:	463a      	mov	r2, r7
  41389e:	4643      	mov	r3, r8
  4138a0:	f001 ff8c 	bl	4157bc <__aeabi_dmul>
  4138a4:	2200      	movs	r2, #0
  4138a6:	4b17      	ldr	r3, [pc, #92]	; (413904 <_dtoa_r+0xd9c>)
  4138a8:	f7f8 fd10 	bl	40c2cc <__adddf3>
  4138ac:	9a02      	ldr	r2, [sp, #8]
  4138ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4138b0:	9312      	str	r3, [sp, #72]	; 0x48
  4138b2:	3a01      	subs	r2, #1
  4138b4:	4605      	mov	r5, r0
  4138b6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4138ba:	9215      	str	r2, [sp, #84]	; 0x54
  4138bc:	e56a      	b.n	413394 <_dtoa_r+0x82c>
  4138be:	2239      	movs	r2, #57	; 0x39
  4138c0:	46b3      	mov	fp, r6
  4138c2:	703a      	strb	r2, [r7, #0]
  4138c4:	9e06      	ldr	r6, [sp, #24]
  4138c6:	1c7d      	adds	r5, r7, #1
  4138c8:	e4c0      	b.n	41324c <_dtoa_r+0x6e4>
  4138ca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4138ce:	2000      	movs	r0, #0
  4138d0:	4910      	ldr	r1, [pc, #64]	; (413914 <_dtoa_r+0xdac>)
  4138d2:	f7f8 fcf9 	bl	40c2c8 <__aeabi_dsub>
  4138d6:	4632      	mov	r2, r6
  4138d8:	463b      	mov	r3, r7
  4138da:	f7f8 ff27 	bl	40c72c <__aeabi_dcmpgt>
  4138de:	b908      	cbnz	r0, 4138e4 <_dtoa_r+0xd7c>
  4138e0:	e6ae      	b.n	413640 <_dtoa_r+0xad8>
  4138e2:	4615      	mov	r5, r2
  4138e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4138e8:	2b30      	cmp	r3, #48	; 0x30
  4138ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4138ee:	d0f8      	beq.n	4138e2 <_dtoa_r+0xd7a>
  4138f0:	e5d7      	b.n	4134a2 <_dtoa_r+0x93a>
  4138f2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4138f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4138f8:	9302      	str	r3, [sp, #8]
  4138fa:	f7ff bae8 	b.w	412ece <_dtoa_r+0x366>
  4138fe:	970c      	str	r7, [sp, #48]	; 0x30
  413900:	f7ff bba5 	b.w	41304e <_dtoa_r+0x4e6>
  413904:	401c0000 	.word	0x401c0000
  413908:	40140000 	.word	0x40140000
  41390c:	004177c8 	.word	0x004177c8
  413910:	004177a0 	.word	0x004177a0
  413914:	3fe00000 	.word	0x3fe00000
  413918:	40240000 	.word	0x40240000
  41391c:	2b39      	cmp	r3, #57	; 0x39
  41391e:	f8cd b018 	str.w	fp, [sp, #24]
  413922:	46d0      	mov	r8, sl
  413924:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  413928:	469a      	mov	sl, r3
  41392a:	d0c8      	beq.n	4138be <_dtoa_r+0xd56>
  41392c:	f1bb 0f00 	cmp.w	fp, #0
  413930:	f73f aebf 	bgt.w	4136b2 <_dtoa_r+0xb4a>
  413934:	e6bf      	b.n	4136b6 <_dtoa_r+0xb4e>
  413936:	f47f aebe 	bne.w	4136b6 <_dtoa_r+0xb4e>
  41393a:	f01a 0f01 	tst.w	sl, #1
  41393e:	f43f aeba 	beq.w	4136b6 <_dtoa_r+0xb4e>
  413942:	e6b2      	b.n	4136aa <_dtoa_r+0xb42>
  413944:	f04f 0800 	mov.w	r8, #0
  413948:	4646      	mov	r6, r8
  41394a:	e5e9      	b.n	413520 <_dtoa_r+0x9b8>
  41394c:	4631      	mov	r1, r6
  41394e:	2300      	movs	r3, #0
  413950:	220a      	movs	r2, #10
  413952:	4620      	mov	r0, r4
  413954:	f000 fd26 	bl	4143a4 <__multadd>
  413958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41395a:	2b00      	cmp	r3, #0
  41395c:	4606      	mov	r6, r0
  41395e:	dd0a      	ble.n	413976 <_dtoa_r+0xe0e>
  413960:	930a      	str	r3, [sp, #40]	; 0x28
  413962:	f7ff bbaa 	b.w	4130ba <_dtoa_r+0x552>
  413966:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413968:	2b02      	cmp	r3, #2
  41396a:	dc23      	bgt.n	4139b4 <_dtoa_r+0xe4c>
  41396c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41396e:	e43b      	b.n	4131e8 <_dtoa_r+0x680>
  413970:	f04f 0a02 	mov.w	sl, #2
  413974:	e4ed      	b.n	413352 <_dtoa_r+0x7ea>
  413976:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413978:	2b02      	cmp	r3, #2
  41397a:	dc1b      	bgt.n	4139b4 <_dtoa_r+0xe4c>
  41397c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41397e:	e7ef      	b.n	413960 <_dtoa_r+0xdf8>
  413980:	2500      	movs	r5, #0
  413982:	6465      	str	r5, [r4, #68]	; 0x44
  413984:	4629      	mov	r1, r5
  413986:	4620      	mov	r0, r4
  413988:	f000 fcdc 	bl	414344 <_Balloc>
  41398c:	f04f 33ff 	mov.w	r3, #4294967295
  413990:	930a      	str	r3, [sp, #40]	; 0x28
  413992:	930f      	str	r3, [sp, #60]	; 0x3c
  413994:	2301      	movs	r3, #1
  413996:	9004      	str	r0, [sp, #16]
  413998:	9525      	str	r5, [sp, #148]	; 0x94
  41399a:	6420      	str	r0, [r4, #64]	; 0x40
  41399c:	930b      	str	r3, [sp, #44]	; 0x2c
  41399e:	f7ff b9dd 	b.w	412d5c <_dtoa_r+0x1f4>
  4139a2:	2501      	movs	r5, #1
  4139a4:	f7ff b9a5 	b.w	412cf2 <_dtoa_r+0x18a>
  4139a8:	f43f ab69 	beq.w	41307e <_dtoa_r+0x516>
  4139ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4139b0:	f7ff bbf9 	b.w	4131a6 <_dtoa_r+0x63e>
  4139b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4139b6:	930a      	str	r3, [sp, #40]	; 0x28
  4139b8:	e5e5      	b.n	413586 <_dtoa_r+0xa1e>
  4139ba:	bf00      	nop

004139bc <__libc_fini_array>:
  4139bc:	b538      	push	{r3, r4, r5, lr}
  4139be:	4c0a      	ldr	r4, [pc, #40]	; (4139e8 <__libc_fini_array+0x2c>)
  4139c0:	4d0a      	ldr	r5, [pc, #40]	; (4139ec <__libc_fini_array+0x30>)
  4139c2:	1b64      	subs	r4, r4, r5
  4139c4:	10a4      	asrs	r4, r4, #2
  4139c6:	d00a      	beq.n	4139de <__libc_fini_array+0x22>
  4139c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4139cc:	3b01      	subs	r3, #1
  4139ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4139d2:	3c01      	subs	r4, #1
  4139d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4139d8:	4798      	blx	r3
  4139da:	2c00      	cmp	r4, #0
  4139dc:	d1f9      	bne.n	4139d2 <__libc_fini_array+0x16>
  4139de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4139e2:	f003 bf65 	b.w	4178b0 <_fini>
  4139e6:	bf00      	nop
  4139e8:	004178c0 	.word	0x004178c0
  4139ec:	004178bc 	.word	0x004178bc

004139f0 <__fputwc>:
  4139f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4139f4:	b082      	sub	sp, #8
  4139f6:	4680      	mov	r8, r0
  4139f8:	4689      	mov	r9, r1
  4139fa:	4614      	mov	r4, r2
  4139fc:	f7f9 fd2a 	bl	40d454 <__locale_mb_cur_max>
  413a00:	2801      	cmp	r0, #1
  413a02:	d036      	beq.n	413a72 <__fputwc+0x82>
  413a04:	464a      	mov	r2, r9
  413a06:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  413a0a:	a901      	add	r1, sp, #4
  413a0c:	4640      	mov	r0, r8
  413a0e:	f001 fe19 	bl	415644 <_wcrtomb_r>
  413a12:	1c42      	adds	r2, r0, #1
  413a14:	4606      	mov	r6, r0
  413a16:	d025      	beq.n	413a64 <__fputwc+0x74>
  413a18:	b3a8      	cbz	r0, 413a86 <__fputwc+0x96>
  413a1a:	f89d e004 	ldrb.w	lr, [sp, #4]
  413a1e:	2500      	movs	r5, #0
  413a20:	f10d 0a04 	add.w	sl, sp, #4
  413a24:	e009      	b.n	413a3a <__fputwc+0x4a>
  413a26:	6823      	ldr	r3, [r4, #0]
  413a28:	1c5a      	adds	r2, r3, #1
  413a2a:	6022      	str	r2, [r4, #0]
  413a2c:	f883 e000 	strb.w	lr, [r3]
  413a30:	3501      	adds	r5, #1
  413a32:	42b5      	cmp	r5, r6
  413a34:	d227      	bcs.n	413a86 <__fputwc+0x96>
  413a36:	f815 e00a 	ldrb.w	lr, [r5, sl]
  413a3a:	68a3      	ldr	r3, [r4, #8]
  413a3c:	3b01      	subs	r3, #1
  413a3e:	2b00      	cmp	r3, #0
  413a40:	60a3      	str	r3, [r4, #8]
  413a42:	daf0      	bge.n	413a26 <__fputwc+0x36>
  413a44:	69a7      	ldr	r7, [r4, #24]
  413a46:	42bb      	cmp	r3, r7
  413a48:	4671      	mov	r1, lr
  413a4a:	4622      	mov	r2, r4
  413a4c:	4640      	mov	r0, r8
  413a4e:	db02      	blt.n	413a56 <__fputwc+0x66>
  413a50:	f1be 0f0a 	cmp.w	lr, #10
  413a54:	d1e7      	bne.n	413a26 <__fputwc+0x36>
  413a56:	f001 fd9d 	bl	415594 <__swbuf_r>
  413a5a:	1c43      	adds	r3, r0, #1
  413a5c:	d1e8      	bne.n	413a30 <__fputwc+0x40>
  413a5e:	b002      	add	sp, #8
  413a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413a64:	89a3      	ldrh	r3, [r4, #12]
  413a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  413a6a:	81a3      	strh	r3, [r4, #12]
  413a6c:	b002      	add	sp, #8
  413a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413a72:	f109 33ff 	add.w	r3, r9, #4294967295
  413a76:	2bfe      	cmp	r3, #254	; 0xfe
  413a78:	d8c4      	bhi.n	413a04 <__fputwc+0x14>
  413a7a:	fa5f fe89 	uxtb.w	lr, r9
  413a7e:	4606      	mov	r6, r0
  413a80:	f88d e004 	strb.w	lr, [sp, #4]
  413a84:	e7cb      	b.n	413a1e <__fputwc+0x2e>
  413a86:	4648      	mov	r0, r9
  413a88:	b002      	add	sp, #8
  413a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413a8e:	bf00      	nop

00413a90 <_fputwc_r>:
  413a90:	b530      	push	{r4, r5, lr}
  413a92:	6e53      	ldr	r3, [r2, #100]	; 0x64
  413a94:	f013 0f01 	tst.w	r3, #1
  413a98:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  413a9c:	4614      	mov	r4, r2
  413a9e:	b083      	sub	sp, #12
  413aa0:	4605      	mov	r5, r0
  413aa2:	b29a      	uxth	r2, r3
  413aa4:	d101      	bne.n	413aaa <_fputwc_r+0x1a>
  413aa6:	0590      	lsls	r0, r2, #22
  413aa8:	d51c      	bpl.n	413ae4 <_fputwc_r+0x54>
  413aaa:	0490      	lsls	r0, r2, #18
  413aac:	d406      	bmi.n	413abc <_fputwc_r+0x2c>
  413aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
  413ab0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  413ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  413ab8:	81a3      	strh	r3, [r4, #12]
  413aba:	6662      	str	r2, [r4, #100]	; 0x64
  413abc:	4628      	mov	r0, r5
  413abe:	4622      	mov	r2, r4
  413ac0:	f7ff ff96 	bl	4139f0 <__fputwc>
  413ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  413ac6:	07da      	lsls	r2, r3, #31
  413ac8:	4605      	mov	r5, r0
  413aca:	d402      	bmi.n	413ad2 <_fputwc_r+0x42>
  413acc:	89a3      	ldrh	r3, [r4, #12]
  413ace:	059b      	lsls	r3, r3, #22
  413ad0:	d502      	bpl.n	413ad8 <_fputwc_r+0x48>
  413ad2:	4628      	mov	r0, r5
  413ad4:	b003      	add	sp, #12
  413ad6:	bd30      	pop	{r4, r5, pc}
  413ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  413ada:	f7f9 fce1 	bl	40d4a0 <__retarget_lock_release_recursive>
  413ade:	4628      	mov	r0, r5
  413ae0:	b003      	add	sp, #12
  413ae2:	bd30      	pop	{r4, r5, pc}
  413ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  413ae6:	9101      	str	r1, [sp, #4]
  413ae8:	f7f9 fcd8 	bl	40d49c <__retarget_lock_acquire_recursive>
  413aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  413af0:	9901      	ldr	r1, [sp, #4]
  413af2:	b29a      	uxth	r2, r3
  413af4:	e7d9      	b.n	413aaa <_fputwc_r+0x1a>
  413af6:	bf00      	nop

00413af8 <rshift>:
  413af8:	b5f0      	push	{r4, r5, r6, r7, lr}
  413afa:	6905      	ldr	r5, [r0, #16]
  413afc:	114b      	asrs	r3, r1, #5
  413afe:	42ab      	cmp	r3, r5
  413b00:	da2a      	bge.n	413b58 <rshift+0x60>
  413b02:	f100 0714 	add.w	r7, r0, #20
  413b06:	f011 011f 	ands.w	r1, r1, #31
  413b0a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
  413b0e:	eb07 0683 	add.w	r6, r7, r3, lsl #2
  413b12:	d026      	beq.n	413b62 <rshift+0x6a>
  413b14:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
  413b18:	1d34      	adds	r4, r6, #4
  413b1a:	42a5      	cmp	r5, r4
  413b1c:	fa22 f201 	lsr.w	r2, r2, r1
  413b20:	f1c1 0c20 	rsb	ip, r1, #32
  413b24:	d932      	bls.n	413b8c <rshift+0x94>
  413b26:	46be      	mov	lr, r7
  413b28:	6823      	ldr	r3, [r4, #0]
  413b2a:	fa03 f30c 	lsl.w	r3, r3, ip
  413b2e:	4313      	orrs	r3, r2
  413b30:	f84e 3b04 	str.w	r3, [lr], #4
  413b34:	f854 2b04 	ldr.w	r2, [r4], #4
  413b38:	42a5      	cmp	r5, r4
  413b3a:	fa22 f201 	lsr.w	r2, r2, r1
  413b3e:	d8f3      	bhi.n	413b28 <rshift+0x30>
  413b40:	1bab      	subs	r3, r5, r6
  413b42:	3b05      	subs	r3, #5
  413b44:	f023 0303 	bic.w	r3, r3, #3
  413b48:	3304      	adds	r3, #4
  413b4a:	443b      	add	r3, r7
  413b4c:	601a      	str	r2, [r3, #0]
  413b4e:	b102      	cbz	r2, 413b52 <rshift+0x5a>
  413b50:	3304      	adds	r3, #4
  413b52:	1bdb      	subs	r3, r3, r7
  413b54:	109b      	asrs	r3, r3, #2
  413b56:	e015      	b.n	413b84 <rshift+0x8c>
  413b58:	2300      	movs	r3, #0
  413b5a:	6103      	str	r3, [r0, #16]
  413b5c:	2300      	movs	r3, #0
  413b5e:	6143      	str	r3, [r0, #20]
  413b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  413b62:	42b5      	cmp	r5, r6
  413b64:	d9f8      	bls.n	413b58 <rshift+0x60>
  413b66:	f100 0210 	add.w	r2, r0, #16
  413b6a:	4633      	mov	r3, r6
  413b6c:	f853 1b04 	ldr.w	r1, [r3], #4
  413b70:	f842 1f04 	str.w	r1, [r2, #4]!
  413b74:	429d      	cmp	r5, r3
  413b76:	d8f9      	bhi.n	413b6c <rshift+0x74>
  413b78:	43f3      	mvns	r3, r6
  413b7a:	442b      	add	r3, r5
  413b7c:	f023 0303 	bic.w	r3, r3, #3
  413b80:	3304      	adds	r3, #4
  413b82:	109b      	asrs	r3, r3, #2
  413b84:	6103      	str	r3, [r0, #16]
  413b86:	2b00      	cmp	r3, #0
  413b88:	d0e8      	beq.n	413b5c <rshift+0x64>
  413b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  413b8c:	463b      	mov	r3, r7
  413b8e:	e7dd      	b.n	413b4c <rshift+0x54>

00413b90 <__gethex>:
  413b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413b94:	b08b      	sub	sp, #44	; 0x2c
  413b96:	4689      	mov	r9, r1
  413b98:	9005      	str	r0, [sp, #20]
  413b9a:	9816      	ldr	r0, [sp, #88]	; 0x58
  413b9c:	9203      	str	r2, [sp, #12]
  413b9e:	9308      	str	r3, [sp, #32]
  413ba0:	f000 fb7c 	bl	41429c <__localeconv_l>
  413ba4:	6803      	ldr	r3, [r0, #0]
  413ba6:	9302      	str	r3, [sp, #8]
  413ba8:	4618      	mov	r0, r3
  413baa:	461c      	mov	r4, r3
  413bac:	f7fa fe08 	bl	40e7c0 <strlen>
  413bb0:	f8d9 3000 	ldr.w	r3, [r9]
  413bb4:	9000      	str	r0, [sp, #0]
  413bb6:	789a      	ldrb	r2, [r3, #2]
  413bb8:	1821      	adds	r1, r4, r0
  413bba:	2a30      	cmp	r2, #48	; 0x30
  413bbc:	f811 bc01 	ldrb.w	fp, [r1, #-1]
  413bc0:	f040 81ab 	bne.w	413f1a <__gethex+0x38a>
  413bc4:	3303      	adds	r3, #3
  413bc6:	f04f 0800 	mov.w	r8, #0
  413bca:	461c      	mov	r4, r3
  413bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
  413bd0:	2a30      	cmp	r2, #48	; 0x30
  413bd2:	f108 0801 	add.w	r8, r8, #1
  413bd6:	d0f8      	beq.n	413bca <__gethex+0x3a>
  413bd8:	4eb3      	ldr	r6, [pc, #716]	; (413ea8 <__gethex+0x318>)
  413bda:	5cb3      	ldrb	r3, [r6, r2]
  413bdc:	2b00      	cmp	r3, #0
  413bde:	f000 80ed 	beq.w	413dbc <__gethex+0x22c>
  413be2:	7823      	ldrb	r3, [r4, #0]
  413be4:	f04f 0a00 	mov.w	sl, #0
  413be8:	5cf3      	ldrb	r3, [r6, r3]
  413bea:	4655      	mov	r5, sl
  413bec:	4627      	mov	r7, r4
  413bee:	b123      	cbz	r3, 413bfa <__gethex+0x6a>
  413bf0:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  413bf4:	5cf3      	ldrb	r3, [r6, r3]
  413bf6:	2b00      	cmp	r3, #0
  413bf8:	d1fa      	bne.n	413bf0 <__gethex+0x60>
  413bfa:	9a00      	ldr	r2, [sp, #0]
  413bfc:	9902      	ldr	r1, [sp, #8]
  413bfe:	4638      	mov	r0, r7
  413c00:	f7fa fe4c 	bl	40e89c <strncmp>
  413c04:	2800      	cmp	r0, #0
  413c06:	f000 8091 	beq.w	413d2c <__gethex+0x19c>
  413c0a:	783b      	ldrb	r3, [r7, #0]
  413c0c:	2d00      	cmp	r5, #0
  413c0e:	f000 8173 	beq.w	413ef8 <__gethex+0x368>
  413c12:	1bed      	subs	r5, r5, r7
  413c14:	00aa      	lsls	r2, r5, #2
  413c16:	9201      	str	r2, [sp, #4]
  413c18:	2b50      	cmp	r3, #80	; 0x50
  413c1a:	f000 8090 	beq.w	413d3e <__gethex+0x1ae>
  413c1e:	2b70      	cmp	r3, #112	; 0x70
  413c20:	f000 808d 	beq.w	413d3e <__gethex+0x1ae>
  413c24:	463d      	mov	r5, r7
  413c26:	f8c9 7000 	str.w	r7, [r9]
  413c2a:	f1ba 0f00 	cmp.w	sl, #0
  413c2e:	f040 80b5 	bne.w	413d9c <__gethex+0x20c>
  413c32:	1b2b      	subs	r3, r5, r4
  413c34:	3b01      	subs	r3, #1
  413c36:	2b07      	cmp	r3, #7
  413c38:	4651      	mov	r1, sl
  413c3a:	dd04      	ble.n	413c46 <__gethex+0xb6>
  413c3c:	105b      	asrs	r3, r3, #1
  413c3e:	2b07      	cmp	r3, #7
  413c40:	f101 0101 	add.w	r1, r1, #1
  413c44:	dcfa      	bgt.n	413c3c <__gethex+0xac>
  413c46:	9805      	ldr	r0, [sp, #20]
  413c48:	f000 fb7c 	bl	414344 <_Balloc>
  413c4c:	4603      	mov	r3, r0
  413c4e:	3314      	adds	r3, #20
  413c50:	42ac      	cmp	r4, r5
  413c52:	9004      	str	r0, [sp, #16]
  413c54:	9307      	str	r3, [sp, #28]
  413c56:	f080 81d1 	bcs.w	413ffc <__gethex+0x46c>
  413c5a:	4699      	mov	r9, r3
  413c5c:	9b00      	ldr	r3, [sp, #0]
  413c5e:	2700      	movs	r7, #0
  413c60:	f1c3 0301 	rsb	r3, r3, #1
  413c64:	46b8      	mov	r8, r7
  413c66:	9306      	str	r3, [sp, #24]
  413c68:	e00f      	b.n	413c8a <__gethex+0xfa>
  413c6a:	2f20      	cmp	r7, #32
  413c6c:	f000 809f 	beq.w	413dae <__gethex+0x21e>
  413c70:	463a      	mov	r2, r7
  413c72:	3704      	adds	r7, #4
  413c74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  413c78:	5cf3      	ldrb	r3, [r6, r3]
  413c7a:	4655      	mov	r5, sl
  413c7c:	f003 030f 	and.w	r3, r3, #15
  413c80:	4093      	lsls	r3, r2
  413c82:	42a5      	cmp	r5, r4
  413c84:	ea48 0803 	orr.w	r8, r8, r3
  413c88:	d915      	bls.n	413cb6 <__gethex+0x126>
  413c8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  413c8e:	455b      	cmp	r3, fp
  413c90:	f105 3aff 	add.w	sl, r5, #4294967295
  413c94:	d1e9      	bne.n	413c6a <__gethex+0xda>
  413c96:	9b06      	ldr	r3, [sp, #24]
  413c98:	4453      	add	r3, sl
  413c9a:	42a3      	cmp	r3, r4
  413c9c:	d3e5      	bcc.n	413c6a <__gethex+0xda>
  413c9e:	4618      	mov	r0, r3
  413ca0:	9a00      	ldr	r2, [sp, #0]
  413ca2:	9902      	ldr	r1, [sp, #8]
  413ca4:	9309      	str	r3, [sp, #36]	; 0x24
  413ca6:	f7fa fdf9 	bl	40e89c <strncmp>
  413caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413cac:	2800      	cmp	r0, #0
  413cae:	d1dc      	bne.n	413c6a <__gethex+0xda>
  413cb0:	461d      	mov	r5, r3
  413cb2:	42a5      	cmp	r5, r4
  413cb4:	d8e9      	bhi.n	413c8a <__gethex+0xfa>
  413cb6:	f849 8b04 	str.w	r8, [r9], #4
  413cba:	9b07      	ldr	r3, [sp, #28]
  413cbc:	9a04      	ldr	r2, [sp, #16]
  413cbe:	eba9 0903 	sub.w	r9, r9, r3
  413cc2:	ea4f 03a9 	mov.w	r3, r9, asr #2
  413cc6:	6113      	str	r3, [r2, #16]
  413cc8:	4640      	mov	r0, r8
  413cca:	ea4f 1943 	mov.w	r9, r3, lsl #5
  413cce:	f000 fbf7 	bl	4144c0 <__hi0bits>
  413cd2:	9b03      	ldr	r3, [sp, #12]
  413cd4:	681d      	ldr	r5, [r3, #0]
  413cd6:	eba9 0000 	sub.w	r0, r9, r0
  413cda:	42a8      	cmp	r0, r5
  413cdc:	f300 80e6 	bgt.w	413eac <__gethex+0x31c>
  413ce0:	f2c0 810c 	blt.w	413efc <__gethex+0x36c>
  413ce4:	2600      	movs	r6, #0
  413ce6:	9b03      	ldr	r3, [sp, #12]
  413ce8:	9a01      	ldr	r2, [sp, #4]
  413cea:	689b      	ldr	r3, [r3, #8]
  413cec:	429a      	cmp	r2, r3
  413cee:	f300 8098 	bgt.w	413e22 <__gethex+0x292>
  413cf2:	9803      	ldr	r0, [sp, #12]
  413cf4:	9901      	ldr	r1, [sp, #4]
  413cf6:	6843      	ldr	r3, [r0, #4]
  413cf8:	4299      	cmp	r1, r3
  413cfa:	f280 80b7 	bge.w	413e6c <__gethex+0x2dc>
  413cfe:	1a5c      	subs	r4, r3, r1
  413d00:	42a5      	cmp	r5, r4
  413d02:	f300 810e 	bgt.w	413f22 <__gethex+0x392>
  413d06:	68c2      	ldr	r2, [r0, #12]
  413d08:	2a02      	cmp	r2, #2
  413d0a:	f000 817e 	beq.w	41400a <__gethex+0x47a>
  413d0e:	2a03      	cmp	r2, #3
  413d10:	f000 815b 	beq.w	413fca <__gethex+0x43a>
  413d14:	2a01      	cmp	r2, #1
  413d16:	f000 817c 	beq.w	414012 <__gethex+0x482>
  413d1a:	9904      	ldr	r1, [sp, #16]
  413d1c:	9805      	ldr	r0, [sp, #20]
  413d1e:	f000 fb37 	bl	414390 <_Bfree>
  413d22:	9a14      	ldr	r2, [sp, #80]	; 0x50
  413d24:	2300      	movs	r3, #0
  413d26:	6013      	str	r3, [r2, #0]
  413d28:	2450      	movs	r4, #80	; 0x50
  413d2a:	e03c      	b.n	413da6 <__gethex+0x216>
  413d2c:	2d00      	cmp	r5, #0
  413d2e:	f000 8118 	beq.w	413f62 <__gethex+0x3d2>
  413d32:	783b      	ldrb	r3, [r7, #0]
  413d34:	e76d      	b.n	413c12 <__gethex+0x82>
  413d36:	2300      	movs	r3, #0
  413d38:	9301      	str	r3, [sp, #4]
  413d3a:	f04f 0a01 	mov.w	sl, #1
  413d3e:	787b      	ldrb	r3, [r7, #1]
  413d40:	2b2b      	cmp	r3, #43	; 0x2b
  413d42:	f000 80ae 	beq.w	413ea2 <__gethex+0x312>
  413d46:	2b2d      	cmp	r3, #45	; 0x2d
  413d48:	d077      	beq.n	413e3a <__gethex+0x2aa>
  413d4a:	1c79      	adds	r1, r7, #1
  413d4c:	2500      	movs	r5, #0
  413d4e:	5cf3      	ldrb	r3, [r6, r3]
  413d50:	1e5a      	subs	r2, r3, #1
  413d52:	2a18      	cmp	r2, #24
  413d54:	f63f af66 	bhi.w	413c24 <__gethex+0x94>
  413d58:	784a      	ldrb	r2, [r1, #1]
  413d5a:	5cb2      	ldrb	r2, [r6, r2]
  413d5c:	1e50      	subs	r0, r2, #1
  413d5e:	2818      	cmp	r0, #24
  413d60:	f1a3 0310 	sub.w	r3, r3, #16
  413d64:	f101 0101 	add.w	r1, r1, #1
  413d68:	d80b      	bhi.n	413d82 <__gethex+0x1f2>
  413d6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  413d6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  413d72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  413d76:	5c32      	ldrb	r2, [r6, r0]
  413d78:	1e50      	subs	r0, r2, #1
  413d7a:	2818      	cmp	r0, #24
  413d7c:	f1a3 0310 	sub.w	r3, r3, #16
  413d80:	d9f3      	bls.n	413d6a <__gethex+0x1da>
  413d82:	b105      	cbz	r5, 413d86 <__gethex+0x1f6>
  413d84:	425b      	negs	r3, r3
  413d86:	9a01      	ldr	r2, [sp, #4]
  413d88:	463d      	mov	r5, r7
  413d8a:	441a      	add	r2, r3
  413d8c:	460f      	mov	r7, r1
  413d8e:	9201      	str	r2, [sp, #4]
  413d90:	f8c9 7000 	str.w	r7, [r9]
  413d94:	f1ba 0f00 	cmp.w	sl, #0
  413d98:	f43f af4b 	beq.w	413c32 <__gethex+0xa2>
  413d9c:	f1b8 0f00 	cmp.w	r8, #0
  413da0:	bf0c      	ite	eq
  413da2:	2406      	moveq	r4, #6
  413da4:	2400      	movne	r4, #0
  413da6:	4620      	mov	r0, r4
  413da8:	b00b      	add	sp, #44	; 0x2c
  413daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413dae:	2200      	movs	r2, #0
  413db0:	2704      	movs	r7, #4
  413db2:	f8c9 8000 	str.w	r8, [r9]
  413db6:	44b9      	add	r9, r7
  413db8:	4690      	mov	r8, r2
  413dba:	e75b      	b.n	413c74 <__gethex+0xe4>
  413dbc:	9d00      	ldr	r5, [sp, #0]
  413dbe:	9902      	ldr	r1, [sp, #8]
  413dc0:	462a      	mov	r2, r5
  413dc2:	4620      	mov	r0, r4
  413dc4:	f7fa fd6a 	bl	40e89c <strncmp>
  413dc8:	2800      	cmp	r0, #0
  413dca:	d03a      	beq.n	413e42 <__gethex+0x2b2>
  413dcc:	7822      	ldrb	r2, [r4, #0]
  413dce:	4627      	mov	r7, r4
  413dd0:	2a50      	cmp	r2, #80	; 0x50
  413dd2:	d0b0      	beq.n	413d36 <__gethex+0x1a6>
  413dd4:	2a70      	cmp	r2, #112	; 0x70
  413dd6:	d0ae      	beq.n	413d36 <__gethex+0x1a6>
  413dd8:	f8c9 7000 	str.w	r7, [r9]
  413ddc:	e7de      	b.n	413d9c <__gethex+0x20c>
  413dde:	9b04      	ldr	r3, [sp, #16]
  413de0:	689b      	ldr	r3, [r3, #8]
  413de2:	429e      	cmp	r6, r3
  413de4:	f280 8136 	bge.w	414054 <__gethex+0x4c4>
  413de8:	9b07      	ldr	r3, [sp, #28]
  413dea:	4632      	mov	r2, r6
  413dec:	9804      	ldr	r0, [sp, #16]
  413dee:	eb00 0182 	add.w	r1, r0, r2, lsl #2
  413df2:	f04f 0e01 	mov.w	lr, #1
  413df6:	3201      	adds	r2, #1
  413df8:	2c02      	cmp	r4, #2
  413dfa:	6102      	str	r2, [r0, #16]
  413dfc:	f8c1 e014 	str.w	lr, [r1, #20]
  413e00:	f000 8116 	beq.w	414030 <__gethex+0x4a0>
  413e04:	4296      	cmp	r6, r2
  413e06:	f280 8141 	bge.w	41408c <__gethex+0x4fc>
  413e0a:	2101      	movs	r1, #1
  413e0c:	9804      	ldr	r0, [sp, #16]
  413e0e:	f7ff fe73 	bl	413af8 <rshift>
  413e12:	9b03      	ldr	r3, [sp, #12]
  413e14:	9a01      	ldr	r2, [sp, #4]
  413e16:	689b      	ldr	r3, [r3, #8]
  413e18:	3201      	adds	r2, #1
  413e1a:	429a      	cmp	r2, r3
  413e1c:	9201      	str	r2, [sp, #4]
  413e1e:	f340 80d0 	ble.w	413fc2 <__gethex+0x432>
  413e22:	9805      	ldr	r0, [sp, #20]
  413e24:	9904      	ldr	r1, [sp, #16]
  413e26:	f000 fab3 	bl	414390 <_Bfree>
  413e2a:	24a3      	movs	r4, #163	; 0xa3
  413e2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  413e2e:	2300      	movs	r3, #0
  413e30:	4620      	mov	r0, r4
  413e32:	6013      	str	r3, [r2, #0]
  413e34:	b00b      	add	sp, #44	; 0x2c
  413e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413e3a:	2501      	movs	r5, #1
  413e3c:	78bb      	ldrb	r3, [r7, #2]
  413e3e:	1cb9      	adds	r1, r7, #2
  413e40:	e785      	b.n	413d4e <__gethex+0x1be>
  413e42:	5d62      	ldrb	r2, [r4, r5]
  413e44:	5cb3      	ldrb	r3, [r6, r2]
  413e46:	1967      	adds	r7, r4, r5
  413e48:	2b00      	cmp	r3, #0
  413e4a:	d0c1      	beq.n	413dd0 <__gethex+0x240>
  413e4c:	2a30      	cmp	r2, #48	; 0x30
  413e4e:	463c      	mov	r4, r7
  413e50:	d104      	bne.n	413e5c <__gethex+0x2cc>
  413e52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  413e56:	2b30      	cmp	r3, #48	; 0x30
  413e58:	d0fb      	beq.n	413e52 <__gethex+0x2c2>
  413e5a:	5cf3      	ldrb	r3, [r6, r3]
  413e5c:	fab3 fa83 	clz	sl, r3
  413e60:	463d      	mov	r5, r7
  413e62:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  413e66:	f04f 0801 	mov.w	r8, #1
  413e6a:	e6bf      	b.n	413bec <__gethex+0x5c>
  413e6c:	2401      	movs	r4, #1
  413e6e:	b166      	cbz	r6, 413e8a <__gethex+0x2fa>
  413e70:	9b03      	ldr	r3, [sp, #12]
  413e72:	68db      	ldr	r3, [r3, #12]
  413e74:	2b02      	cmp	r3, #2
  413e76:	f000 8082 	beq.w	413f7e <__gethex+0x3ee>
  413e7a:	2b03      	cmp	r3, #3
  413e7c:	f000 8083 	beq.w	413f86 <__gethex+0x3f6>
  413e80:	2b01      	cmp	r3, #1
  413e82:	f000 80b2 	beq.w	413fea <__gethex+0x45a>
  413e86:	f044 0410 	orr.w	r4, r4, #16
  413e8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  413e8c:	461a      	mov	r2, r3
  413e8e:	9b04      	ldr	r3, [sp, #16]
  413e90:	6013      	str	r3, [r2, #0]
  413e92:	9b08      	ldr	r3, [sp, #32]
  413e94:	461a      	mov	r2, r3
  413e96:	9b01      	ldr	r3, [sp, #4]
  413e98:	6013      	str	r3, [r2, #0]
  413e9a:	4620      	mov	r0, r4
  413e9c:	b00b      	add	sp, #44	; 0x2c
  413e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413ea2:	2500      	movs	r5, #0
  413ea4:	e7ca      	b.n	413e3c <__gethex+0x2ac>
  413ea6:	bf00      	nop
  413ea8:	0041769c 	.word	0x0041769c
  413eac:	1b44      	subs	r4, r0, r5
  413eae:	4621      	mov	r1, r4
  413eb0:	9804      	ldr	r0, [sp, #16]
  413eb2:	f000 fe69 	bl	414b88 <__any_on>
  413eb6:	4606      	mov	r6, r0
  413eb8:	b1b0      	cbz	r0, 413ee8 <__gethex+0x358>
  413eba:	1e62      	subs	r2, r4, #1
  413ebc:	1151      	asrs	r1, r2, #5
  413ebe:	9807      	ldr	r0, [sp, #28]
  413ec0:	f002 031f 	and.w	r3, r2, #31
  413ec4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  413ec8:	2601      	movs	r6, #1
  413eca:	fa06 f303 	lsl.w	r3, r6, r3
  413ece:	420b      	tst	r3, r1
  413ed0:	d00a      	beq.n	413ee8 <__gethex+0x358>
  413ed2:	42b2      	cmp	r2, r6
  413ed4:	f340 8097 	ble.w	414006 <__gethex+0x476>
  413ed8:	1ea1      	subs	r1, r4, #2
  413eda:	9804      	ldr	r0, [sp, #16]
  413edc:	f000 fe54 	bl	414b88 <__any_on>
  413ee0:	2800      	cmp	r0, #0
  413ee2:	f000 8090 	beq.w	414006 <__gethex+0x476>
  413ee6:	2603      	movs	r6, #3
  413ee8:	9b01      	ldr	r3, [sp, #4]
  413eea:	9804      	ldr	r0, [sp, #16]
  413eec:	4423      	add	r3, r4
  413eee:	4621      	mov	r1, r4
  413ef0:	9301      	str	r3, [sp, #4]
  413ef2:	f7ff fe01 	bl	413af8 <rshift>
  413ef6:	e6f6      	b.n	413ce6 <__gethex+0x156>
  413ef8:	9501      	str	r5, [sp, #4]
  413efa:	e68d      	b.n	413c18 <__gethex+0x88>
  413efc:	1a2c      	subs	r4, r5, r0
  413efe:	9904      	ldr	r1, [sp, #16]
  413f00:	9805      	ldr	r0, [sp, #20]
  413f02:	4622      	mov	r2, r4
  413f04:	f000 fc18 	bl	414738 <__lshift>
  413f08:	9b01      	ldr	r3, [sp, #4]
  413f0a:	9004      	str	r0, [sp, #16]
  413f0c:	1b1b      	subs	r3, r3, r4
  413f0e:	9301      	str	r3, [sp, #4]
  413f10:	4603      	mov	r3, r0
  413f12:	3314      	adds	r3, #20
  413f14:	9307      	str	r3, [sp, #28]
  413f16:	2600      	movs	r6, #0
  413f18:	e6e5      	b.n	413ce6 <__gethex+0x156>
  413f1a:	1c9c      	adds	r4, r3, #2
  413f1c:	f04f 0800 	mov.w	r8, #0
  413f20:	e65a      	b.n	413bd8 <__gethex+0x48>
  413f22:	1e67      	subs	r7, r4, #1
  413f24:	2e00      	cmp	r6, #0
  413f26:	d14e      	bne.n	413fc6 <__gethex+0x436>
  413f28:	b127      	cbz	r7, 413f34 <__gethex+0x3a4>
  413f2a:	4639      	mov	r1, r7
  413f2c:	9804      	ldr	r0, [sp, #16]
  413f2e:	f000 fe2b 	bl	414b88 <__any_on>
  413f32:	4606      	mov	r6, r0
  413f34:	117b      	asrs	r3, r7, #5
  413f36:	9a07      	ldr	r2, [sp, #28]
  413f38:	9804      	ldr	r0, [sp, #16]
  413f3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  413f3e:	f007 071f 	and.w	r7, r7, #31
  413f42:	2301      	movs	r3, #1
  413f44:	fa03 f707 	lsl.w	r7, r3, r7
  413f48:	4217      	tst	r7, r2
  413f4a:	4621      	mov	r1, r4
  413f4c:	bf18      	it	ne
  413f4e:	f046 0602 	orrne.w	r6, r6, #2
  413f52:	f7ff fdd1 	bl	413af8 <rshift>
  413f56:	9b03      	ldr	r3, [sp, #12]
  413f58:	685b      	ldr	r3, [r3, #4]
  413f5a:	9301      	str	r3, [sp, #4]
  413f5c:	1b2d      	subs	r5, r5, r4
  413f5e:	2402      	movs	r4, #2
  413f60:	e785      	b.n	413e6e <__gethex+0x2de>
  413f62:	9900      	ldr	r1, [sp, #0]
  413f64:	5c7b      	ldrb	r3, [r7, r1]
  413f66:	5cf2      	ldrb	r2, [r6, r3]
  413f68:	187d      	adds	r5, r7, r1
  413f6a:	462f      	mov	r7, r5
  413f6c:	2a00      	cmp	r2, #0
  413f6e:	f43f ae50 	beq.w	413c12 <__gethex+0x82>
  413f72:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  413f76:	5cf2      	ldrb	r2, [r6, r3]
  413f78:	2a00      	cmp	r2, #0
  413f7a:	d1fa      	bne.n	413f72 <__gethex+0x3e2>
  413f7c:	e649      	b.n	413c12 <__gethex+0x82>
  413f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  413f80:	f1c3 0301 	rsb	r3, r3, #1
  413f84:	9315      	str	r3, [sp, #84]	; 0x54
  413f86:	9b15      	ldr	r3, [sp, #84]	; 0x54
  413f88:	2b00      	cmp	r3, #0
  413f8a:	f43f af7c 	beq.w	413e86 <__gethex+0x2f6>
  413f8e:	9b04      	ldr	r3, [sp, #16]
  413f90:	9a07      	ldr	r2, [sp, #28]
  413f92:	691e      	ldr	r6, [r3, #16]
  413f94:	00b7      	lsls	r7, r6, #2
  413f96:	4613      	mov	r3, r2
  413f98:	eb02 0e07 	add.w	lr, r2, r7
  413f9c:	4611      	mov	r1, r2
  413f9e:	2000      	movs	r0, #0
  413fa0:	e004      	b.n	413fac <__gethex+0x41c>
  413fa2:	f843 0b04 	str.w	r0, [r3], #4
  413fa6:	459e      	cmp	lr, r3
  413fa8:	f67f af19 	bls.w	413dde <__gethex+0x24e>
  413fac:	681a      	ldr	r2, [r3, #0]
  413fae:	f1b2 3fff 	cmp.w	r2, #4294967295
  413fb2:	d0f6      	beq.n	413fa2 <__gethex+0x412>
  413fb4:	3201      	adds	r2, #1
  413fb6:	2c02      	cmp	r4, #2
  413fb8:	601a      	str	r2, [r3, #0]
  413fba:	d03a      	beq.n	414032 <__gethex+0x4a2>
  413fbc:	f015 051f 	ands.w	r5, r5, #31
  413fc0:	d13e      	bne.n	414040 <__gethex+0x4b0>
  413fc2:	2421      	movs	r4, #33	; 0x21
  413fc4:	e761      	b.n	413e8a <__gethex+0x2fa>
  413fc6:	2601      	movs	r6, #1
  413fc8:	e7b4      	b.n	413f34 <__gethex+0x3a4>
  413fca:	9a15      	ldr	r2, [sp, #84]	; 0x54
  413fcc:	2a00      	cmp	r2, #0
  413fce:	f43f aea4 	beq.w	413d1a <__gethex+0x18a>
  413fd2:	9908      	ldr	r1, [sp, #32]
  413fd4:	600b      	str	r3, [r1, #0]
  413fd6:	9b07      	ldr	r3, [sp, #28]
  413fd8:	9904      	ldr	r1, [sp, #16]
  413fda:	2201      	movs	r2, #1
  413fdc:	610a      	str	r2, [r1, #16]
  413fde:	601a      	str	r2, [r3, #0]
  413fe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  413fe2:	461a      	mov	r2, r3
  413fe4:	2462      	movs	r4, #98	; 0x62
  413fe6:	6011      	str	r1, [r2, #0]
  413fe8:	e6dd      	b.n	413da6 <__gethex+0x216>
  413fea:	07b2      	lsls	r2, r6, #30
  413fec:	f57f af4b 	bpl.w	413e86 <__gethex+0x2f6>
  413ff0:	9b07      	ldr	r3, [sp, #28]
  413ff2:	681b      	ldr	r3, [r3, #0]
  413ff4:	431e      	orrs	r6, r3
  413ff6:	07f3      	lsls	r3, r6, #31
  413ff8:	d4c9      	bmi.n	413f8e <__gethex+0x3fe>
  413ffa:	e744      	b.n	413e86 <__gethex+0x2f6>
  413ffc:	f8dd 901c 	ldr.w	r9, [sp, #28]
  414000:	f04f 0800 	mov.w	r8, #0
  414004:	e657      	b.n	413cb6 <__gethex+0x126>
  414006:	2602      	movs	r6, #2
  414008:	e76e      	b.n	413ee8 <__gethex+0x358>
  41400a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  41400c:	2a00      	cmp	r2, #0
  41400e:	d0e0      	beq.n	413fd2 <__gethex+0x442>
  414010:	e683      	b.n	413d1a <__gethex+0x18a>
  414012:	42a5      	cmp	r5, r4
  414014:	f47f ae81 	bne.w	413d1a <__gethex+0x18a>
  414018:	2d01      	cmp	r5, #1
  41401a:	ddda      	ble.n	413fd2 <__gethex+0x442>
  41401c:	1e69      	subs	r1, r5, #1
  41401e:	9804      	ldr	r0, [sp, #16]
  414020:	f000 fdb2 	bl	414b88 <__any_on>
  414024:	2800      	cmp	r0, #0
  414026:	f43f ae78 	beq.w	413d1a <__gethex+0x18a>
  41402a:	9b03      	ldr	r3, [sp, #12]
  41402c:	685b      	ldr	r3, [r3, #4]
  41402e:	e7d0      	b.n	413fd2 <__gethex+0x442>
  414030:	4619      	mov	r1, r3
  414032:	9b03      	ldr	r3, [sp, #12]
  414034:	681b      	ldr	r3, [r3, #0]
  414036:	3b01      	subs	r3, #1
  414038:	429d      	cmp	r5, r3
  41403a:	d029      	beq.n	414090 <__gethex+0x500>
  41403c:	2422      	movs	r4, #34	; 0x22
  41403e:	e724      	b.n	413e8a <__gethex+0x2fa>
  414040:	19cb      	adds	r3, r1, r7
  414042:	f1c5 0520 	rsb	r5, r5, #32
  414046:	f853 0c04 	ldr.w	r0, [r3, #-4]
  41404a:	f000 fa39 	bl	4144c0 <__hi0bits>
  41404e:	42a8      	cmp	r0, r5
  414050:	dab7      	bge.n	413fc2 <__gethex+0x432>
  414052:	e6da      	b.n	413e0a <__gethex+0x27a>
  414054:	9b04      	ldr	r3, [sp, #16]
  414056:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41405a:	6859      	ldr	r1, [r3, #4]
  41405c:	4648      	mov	r0, r9
  41405e:	3101      	adds	r1, #1
  414060:	f000 f970 	bl	414344 <_Balloc>
  414064:	9904      	ldr	r1, [sp, #16]
  414066:	690b      	ldr	r3, [r1, #16]
  414068:	3302      	adds	r3, #2
  41406a:	4680      	mov	r8, r0
  41406c:	009a      	lsls	r2, r3, #2
  41406e:	310c      	adds	r1, #12
  414070:	300c      	adds	r0, #12
  414072:	f7f9 fde5 	bl	40dc40 <memcpy>
  414076:	9904      	ldr	r1, [sp, #16]
  414078:	4648      	mov	r0, r9
  41407a:	f000 f989 	bl	414390 <_Bfree>
  41407e:	f8cd 8010 	str.w	r8, [sp, #16]
  414082:	f108 0314 	add.w	r3, r8, #20
  414086:	f8d8 2010 	ldr.w	r2, [r8, #16]
  41408a:	e6af      	b.n	413dec <__gethex+0x25c>
  41408c:	4619      	mov	r1, r3
  41408e:	e795      	b.n	413fbc <__gethex+0x42c>
  414090:	116b      	asrs	r3, r5, #5
  414092:	f005 051f 	and.w	r5, r5, #31
  414096:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  41409a:	2301      	movs	r3, #1
  41409c:	40ab      	lsls	r3, r5
  41409e:	4213      	tst	r3, r2
  4140a0:	bf14      	ite	ne
  4140a2:	2421      	movne	r4, #33	; 0x21
  4140a4:	2422      	moveq	r4, #34	; 0x22
  4140a6:	e6f0      	b.n	413e8a <__gethex+0x2fa>

004140a8 <__match>:
  4140a8:	b430      	push	{r4, r5}
  4140aa:	6804      	ldr	r4, [r0, #0]
  4140ac:	e008      	b.n	4140c0 <__match+0x18>
  4140ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4140b2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  4140b6:	2d19      	cmp	r5, #25
  4140b8:	bf98      	it	ls
  4140ba:	3320      	addls	r3, #32
  4140bc:	4293      	cmp	r3, r2
  4140be:	d108      	bne.n	4140d2 <__match+0x2a>
  4140c0:	f811 2b01 	ldrb.w	r2, [r1], #1
  4140c4:	2a00      	cmp	r2, #0
  4140c6:	d1f2      	bne.n	4140ae <__match+0x6>
  4140c8:	3401      	adds	r4, #1
  4140ca:	6004      	str	r4, [r0, #0]
  4140cc:	2001      	movs	r0, #1
  4140ce:	bc30      	pop	{r4, r5}
  4140d0:	4770      	bx	lr
  4140d2:	2000      	movs	r0, #0
  4140d4:	bc30      	pop	{r4, r5}
  4140d6:	4770      	bx	lr

004140d8 <__hexnan>:
  4140d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4140dc:	680b      	ldr	r3, [r1, #0]
  4140de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 414258 <__hexnan+0x180>
  4140e2:	b085      	sub	sp, #20
  4140e4:	1159      	asrs	r1, r3, #5
  4140e6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  4140ea:	f013 031f 	ands.w	r3, r3, #31
  4140ee:	9101      	str	r1, [sp, #4]
  4140f0:	bf1c      	itt	ne
  4140f2:	3104      	addne	r1, #4
  4140f4:	9101      	strne	r1, [sp, #4]
  4140f6:	9c01      	ldr	r4, [sp, #4]
  4140f8:	9002      	str	r0, [sp, #8]
  4140fa:	9303      	str	r3, [sp, #12]
  4140fc:	2300      	movs	r3, #0
  4140fe:	f844 3c04 	str.w	r3, [r4, #-4]
  414102:	4619      	mov	r1, r3
  414104:	469a      	mov	sl, r3
  414106:	469e      	mov	lr, r3
  414108:	9b02      	ldr	r3, [sp, #8]
  41410a:	681d      	ldr	r5, [r3, #0]
  41410c:	786b      	ldrb	r3, [r5, #1]
  41410e:	f1a4 0c04 	sub.w	ip, r4, #4
  414112:	46e0      	mov	r8, ip
  414114:	4660      	mov	r0, ip
  414116:	1c6e      	adds	r6, r5, #1
  414118:	b32b      	cbz	r3, 414166 <__hexnan+0x8e>
  41411a:	f819 4003 	ldrb.w	r4, [r9, r3]
  41411e:	2c00      	cmp	r4, #0
  414120:	d144      	bne.n	4141ac <__hexnan+0xd4>
  414122:	2b20      	cmp	r3, #32
  414124:	d860      	bhi.n	4141e8 <__hexnan+0x110>
  414126:	45d6      	cmp	lr, sl
  414128:	dd18      	ble.n	41415c <__hexnan+0x84>
  41412a:	4540      	cmp	r0, r8
  41412c:	d213      	bcs.n	414156 <__hexnan+0x7e>
  41412e:	2907      	cmp	r1, #7
  414130:	dc11      	bgt.n	414156 <__hexnan+0x7e>
  414132:	f1c1 0108 	rsb	r1, r1, #8
  414136:	0089      	lsls	r1, r1, #2
  414138:	6805      	ldr	r5, [r0, #0]
  41413a:	f1c1 0b20 	rsb	fp, r1, #32
  41413e:	4603      	mov	r3, r0
  414140:	685f      	ldr	r7, [r3, #4]
  414142:	fa07 f40b 	lsl.w	r4, r7, fp
  414146:	432c      	orrs	r4, r5
  414148:	fa27 f501 	lsr.w	r5, r7, r1
  41414c:	601c      	str	r4, [r3, #0]
  41414e:	f843 5f04 	str.w	r5, [r3, #4]!
  414152:	4598      	cmp	r8, r3
  414154:	d8f4      	bhi.n	414140 <__hexnan+0x68>
  414156:	4290      	cmp	r0, r2
  414158:	d83c      	bhi.n	4141d4 <__hexnan+0xfc>
  41415a:	2108      	movs	r1, #8
  41415c:	4635      	mov	r5, r6
  41415e:	786b      	ldrb	r3, [r5, #1]
  414160:	1c6e      	adds	r6, r5, #1
  414162:	2b00      	cmp	r3, #0
  414164:	d1d9      	bne.n	41411a <__hexnan+0x42>
  414166:	f1be 0f00 	cmp.w	lr, #0
  41416a:	d03f      	beq.n	4141ec <__hexnan+0x114>
  41416c:	4540      	cmp	r0, r8
  41416e:	d201      	bcs.n	414174 <__hexnan+0x9c>
  414170:	2907      	cmp	r1, #7
  414172:	dd5d      	ble.n	414230 <__hexnan+0x158>
  414174:	4290      	cmp	r0, r2
  414176:	d93d      	bls.n	4141f4 <__hexnan+0x11c>
  414178:	4613      	mov	r3, r2
  41417a:	f850 1b04 	ldr.w	r1, [r0], #4
  41417e:	f843 1b04 	str.w	r1, [r3], #4
  414182:	4584      	cmp	ip, r0
  414184:	d2f9      	bcs.n	41417a <__hexnan+0xa2>
  414186:	2100      	movs	r1, #0
  414188:	f843 1b04 	str.w	r1, [r3], #4
  41418c:	459c      	cmp	ip, r3
  41418e:	d2fb      	bcs.n	414188 <__hexnan+0xb0>
  414190:	9b01      	ldr	r3, [sp, #4]
  414192:	f853 3c04 	ldr.w	r3, [r3, #-4]
  414196:	b92b      	cbnz	r3, 4141a4 <__hexnan+0xcc>
  414198:	4562      	cmp	r2, ip
  41419a:	d03c      	beq.n	414216 <__hexnan+0x13e>
  41419c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  4141a0:	2b00      	cmp	r3, #0
  4141a2:	d0f9      	beq.n	414198 <__hexnan+0xc0>
  4141a4:	2005      	movs	r0, #5
  4141a6:	b005      	add	sp, #20
  4141a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4141ac:	3101      	adds	r1, #1
  4141ae:	2908      	cmp	r1, #8
  4141b0:	f10e 0e01 	add.w	lr, lr, #1
  4141b4:	dd06      	ble.n	4141c4 <__hexnan+0xec>
  4141b6:	4290      	cmp	r0, r2
  4141b8:	d9d0      	bls.n	41415c <__hexnan+0x84>
  4141ba:	2300      	movs	r3, #0
  4141bc:	f840 3c04 	str.w	r3, [r0, #-4]
  4141c0:	2101      	movs	r1, #1
  4141c2:	3804      	subs	r0, #4
  4141c4:	6803      	ldr	r3, [r0, #0]
  4141c6:	f004 040f 	and.w	r4, r4, #15
  4141ca:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  4141ce:	6004      	str	r4, [r0, #0]
  4141d0:	4635      	mov	r5, r6
  4141d2:	e7c4      	b.n	41415e <__hexnan+0x86>
  4141d4:	2300      	movs	r3, #0
  4141d6:	f1a0 0804 	sub.w	r8, r0, #4
  4141da:	f840 3c04 	str.w	r3, [r0, #-4]
  4141de:	46f2      	mov	sl, lr
  4141e0:	4640      	mov	r0, r8
  4141e2:	4619      	mov	r1, r3
  4141e4:	4635      	mov	r5, r6
  4141e6:	e7ba      	b.n	41415e <__hexnan+0x86>
  4141e8:	2b29      	cmp	r3, #41	; 0x29
  4141ea:	d01a      	beq.n	414222 <__hexnan+0x14a>
  4141ec:	2004      	movs	r0, #4
  4141ee:	b005      	add	sp, #20
  4141f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4141f4:	9b03      	ldr	r3, [sp, #12]
  4141f6:	2b00      	cmp	r3, #0
  4141f8:	d0ca      	beq.n	414190 <__hexnan+0xb8>
  4141fa:	9c01      	ldr	r4, [sp, #4]
  4141fc:	9b03      	ldr	r3, [sp, #12]
  4141fe:	f854 0c04 	ldr.w	r0, [r4, #-4]
  414202:	f1c3 0320 	rsb	r3, r3, #32
  414206:	f04f 31ff 	mov.w	r1, #4294967295
  41420a:	fa21 f303 	lsr.w	r3, r1, r3
  41420e:	4003      	ands	r3, r0
  414210:	f844 3c04 	str.w	r3, [r4, #-4]
  414214:	e7bf      	b.n	414196 <__hexnan+0xbe>
  414216:	2301      	movs	r3, #1
  414218:	2005      	movs	r0, #5
  41421a:	6013      	str	r3, [r2, #0]
  41421c:	b005      	add	sp, #20
  41421e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414222:	9b02      	ldr	r3, [sp, #8]
  414224:	3502      	adds	r5, #2
  414226:	601d      	str	r5, [r3, #0]
  414228:	f1be 0f00 	cmp.w	lr, #0
  41422c:	d19e      	bne.n	41416c <__hexnan+0x94>
  41422e:	e7dd      	b.n	4141ec <__hexnan+0x114>
  414230:	f1c1 0308 	rsb	r3, r1, #8
  414234:	009b      	lsls	r3, r3, #2
  414236:	6805      	ldr	r5, [r0, #0]
  414238:	f1c3 0720 	rsb	r7, r3, #32
  41423c:	4601      	mov	r1, r0
  41423e:	684e      	ldr	r6, [r1, #4]
  414240:	fa06 f407 	lsl.w	r4, r6, r7
  414244:	432c      	orrs	r4, r5
  414246:	fa26 f503 	lsr.w	r5, r6, r3
  41424a:	600c      	str	r4, [r1, #0]
  41424c:	f841 5f04 	str.w	r5, [r1, #4]!
  414250:	4588      	cmp	r8, r1
  414252:	d8f4      	bhi.n	41423e <__hexnan+0x166>
  414254:	e78e      	b.n	414174 <__hexnan+0x9c>
  414256:	bf00      	nop
  414258:	0041769c 	.word	0x0041769c

0041425c <_isatty_r>:
  41425c:	b538      	push	{r3, r4, r5, lr}
  41425e:	4c07      	ldr	r4, [pc, #28]	; (41427c <_isatty_r+0x20>)
  414260:	2300      	movs	r3, #0
  414262:	4605      	mov	r5, r0
  414264:	4608      	mov	r0, r1
  414266:	6023      	str	r3, [r4, #0]
  414268:	f7f2 fbee 	bl	406a48 <_isatty>
  41426c:	1c43      	adds	r3, r0, #1
  41426e:	d000      	beq.n	414272 <_isatty_r+0x16>
  414270:	bd38      	pop	{r3, r4, r5, pc}
  414272:	6823      	ldr	r3, [r4, #0]
  414274:	2b00      	cmp	r3, #0
  414276:	d0fb      	beq.n	414270 <_isatty_r+0x14>
  414278:	602b      	str	r3, [r5, #0]
  41427a:	bd38      	pop	{r3, r4, r5, pc}
  41427c:	20003074 	.word	0x20003074

00414280 <iswspace>:
  414280:	28ff      	cmp	r0, #255	; 0xff
  414282:	d901      	bls.n	414288 <iswspace+0x8>
  414284:	2000      	movs	r0, #0
  414286:	4770      	bx	lr
  414288:	b510      	push	{r4, lr}
  41428a:	4604      	mov	r4, r0
  41428c:	f7f9 f8f4 	bl	40d478 <__locale_ctype_ptr>
  414290:	4420      	add	r0, r4
  414292:	7840      	ldrb	r0, [r0, #1]
  414294:	f000 0008 	and.w	r0, r0, #8
  414298:	bd10      	pop	{r4, pc}
  41429a:	bf00      	nop

0041429c <__localeconv_l>:
  41429c:	30f0      	adds	r0, #240	; 0xf0
  41429e:	4770      	bx	lr

004142a0 <_localeconv_r>:
  4142a0:	4a04      	ldr	r2, [pc, #16]	; (4142b4 <_localeconv_r+0x14>)
  4142a2:	4b05      	ldr	r3, [pc, #20]	; (4142b8 <_localeconv_r+0x18>)
  4142a4:	6812      	ldr	r2, [r2, #0]
  4142a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4142a8:	2800      	cmp	r0, #0
  4142aa:	bf08      	it	eq
  4142ac:	4618      	moveq	r0, r3
  4142ae:	30f0      	adds	r0, #240	; 0xf0
  4142b0:	4770      	bx	lr
  4142b2:	bf00      	nop
  4142b4:	20000298 	.word	0x20000298
  4142b8:	200006c8 	.word	0x200006c8

004142bc <_lseek_r>:
  4142bc:	b570      	push	{r4, r5, r6, lr}
  4142be:	460d      	mov	r5, r1
  4142c0:	4c08      	ldr	r4, [pc, #32]	; (4142e4 <_lseek_r+0x28>)
  4142c2:	4611      	mov	r1, r2
  4142c4:	4606      	mov	r6, r0
  4142c6:	461a      	mov	r2, r3
  4142c8:	4628      	mov	r0, r5
  4142ca:	2300      	movs	r3, #0
  4142cc:	6023      	str	r3, [r4, #0]
  4142ce:	f7f2 fbbd 	bl	406a4c <_lseek>
  4142d2:	1c43      	adds	r3, r0, #1
  4142d4:	d000      	beq.n	4142d8 <_lseek_r+0x1c>
  4142d6:	bd70      	pop	{r4, r5, r6, pc}
  4142d8:	6823      	ldr	r3, [r4, #0]
  4142da:	2b00      	cmp	r3, #0
  4142dc:	d0fb      	beq.n	4142d6 <_lseek_r+0x1a>
  4142de:	6033      	str	r3, [r6, #0]
  4142e0:	bd70      	pop	{r4, r5, r6, pc}
  4142e2:	bf00      	nop
  4142e4:	20003074 	.word	0x20003074

004142e8 <_mbrtowc_r>:
  4142e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4142ea:	b083      	sub	sp, #12
  4142ec:	4607      	mov	r7, r0
  4142ee:	9d08      	ldr	r5, [sp, #32]
  4142f0:	b192      	cbz	r2, 414318 <_mbrtowc_r+0x30>
  4142f2:	4c11      	ldr	r4, [pc, #68]	; (414338 <_mbrtowc_r+0x50>)
  4142f4:	4e11      	ldr	r6, [pc, #68]	; (41433c <_mbrtowc_r+0x54>)
  4142f6:	6824      	ldr	r4, [r4, #0]
  4142f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4142fa:	9500      	str	r5, [sp, #0]
  4142fc:	2c00      	cmp	r4, #0
  4142fe:	bf08      	it	eq
  414300:	4634      	moveq	r4, r6
  414302:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
  414306:	47a0      	blx	r4
  414308:	1c43      	adds	r3, r0, #1
  41430a:	d103      	bne.n	414314 <_mbrtowc_r+0x2c>
  41430c:	2200      	movs	r2, #0
  41430e:	238a      	movs	r3, #138	; 0x8a
  414310:	602a      	str	r2, [r5, #0]
  414312:	603b      	str	r3, [r7, #0]
  414314:	b003      	add	sp, #12
  414316:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414318:	4b07      	ldr	r3, [pc, #28]	; (414338 <_mbrtowc_r+0x50>)
  41431a:	4908      	ldr	r1, [pc, #32]	; (41433c <_mbrtowc_r+0x54>)
  41431c:	681b      	ldr	r3, [r3, #0]
  41431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  414320:	9500      	str	r5, [sp, #0]
  414322:	2b00      	cmp	r3, #0
  414324:	bf08      	it	eq
  414326:	460b      	moveq	r3, r1
  414328:	4614      	mov	r4, r2
  41432a:	4621      	mov	r1, r4
  41432c:	4a04      	ldr	r2, [pc, #16]	; (414340 <_mbrtowc_r+0x58>)
  41432e:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
  414332:	2301      	movs	r3, #1
  414334:	47a0      	blx	r4
  414336:	e7e7      	b.n	414308 <_mbrtowc_r+0x20>
  414338:	20000298 	.word	0x20000298
  41433c:	200006c8 	.word	0x200006c8
  414340:	004171cc 	.word	0x004171cc

00414344 <_Balloc>:
  414344:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  414346:	b570      	push	{r4, r5, r6, lr}
  414348:	4605      	mov	r5, r0
  41434a:	460c      	mov	r4, r1
  41434c:	b14b      	cbz	r3, 414362 <_Balloc+0x1e>
  41434e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  414352:	b180      	cbz	r0, 414376 <_Balloc+0x32>
  414354:	6802      	ldr	r2, [r0, #0]
  414356:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  41435a:	2300      	movs	r3, #0
  41435c:	6103      	str	r3, [r0, #16]
  41435e:	60c3      	str	r3, [r0, #12]
  414360:	bd70      	pop	{r4, r5, r6, pc}
  414362:	2221      	movs	r2, #33	; 0x21
  414364:	2104      	movs	r1, #4
  414366:	f001 f9f9 	bl	41575c <_calloc_r>
  41436a:	64e8      	str	r0, [r5, #76]	; 0x4c
  41436c:	4603      	mov	r3, r0
  41436e:	2800      	cmp	r0, #0
  414370:	d1ed      	bne.n	41434e <_Balloc+0xa>
  414372:	2000      	movs	r0, #0
  414374:	bd70      	pop	{r4, r5, r6, pc}
  414376:	2101      	movs	r1, #1
  414378:	fa01 f604 	lsl.w	r6, r1, r4
  41437c:	1d72      	adds	r2, r6, #5
  41437e:	4628      	mov	r0, r5
  414380:	0092      	lsls	r2, r2, #2
  414382:	f001 f9eb 	bl	41575c <_calloc_r>
  414386:	2800      	cmp	r0, #0
  414388:	d0f3      	beq.n	414372 <_Balloc+0x2e>
  41438a:	6044      	str	r4, [r0, #4]
  41438c:	6086      	str	r6, [r0, #8]
  41438e:	e7e4      	b.n	41435a <_Balloc+0x16>

00414390 <_Bfree>:
  414390:	b131      	cbz	r1, 4143a0 <_Bfree+0x10>
  414392:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  414394:	684a      	ldr	r2, [r1, #4]
  414396:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  41439a:	6008      	str	r0, [r1, #0]
  41439c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4143a0:	4770      	bx	lr
  4143a2:	bf00      	nop

004143a4 <__multadd>:
  4143a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4143a6:	690c      	ldr	r4, [r1, #16]
  4143a8:	b083      	sub	sp, #12
  4143aa:	460d      	mov	r5, r1
  4143ac:	4606      	mov	r6, r0
  4143ae:	f101 0e14 	add.w	lr, r1, #20
  4143b2:	2700      	movs	r7, #0
  4143b4:	f8de 0000 	ldr.w	r0, [lr]
  4143b8:	b281      	uxth	r1, r0
  4143ba:	fb02 3301 	mla	r3, r2, r1, r3
  4143be:	0c01      	lsrs	r1, r0, #16
  4143c0:	0c18      	lsrs	r0, r3, #16
  4143c2:	fb02 0101 	mla	r1, r2, r1, r0
  4143c6:	b29b      	uxth	r3, r3
  4143c8:	3701      	adds	r7, #1
  4143ca:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4143ce:	42bc      	cmp	r4, r7
  4143d0:	f84e 3b04 	str.w	r3, [lr], #4
  4143d4:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4143d8:	dcec      	bgt.n	4143b4 <__multadd+0x10>
  4143da:	b13b      	cbz	r3, 4143ec <__multadd+0x48>
  4143dc:	68aa      	ldr	r2, [r5, #8]
  4143de:	4294      	cmp	r4, r2
  4143e0:	da07      	bge.n	4143f2 <__multadd+0x4e>
  4143e2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4143e6:	3401      	adds	r4, #1
  4143e8:	6153      	str	r3, [r2, #20]
  4143ea:	612c      	str	r4, [r5, #16]
  4143ec:	4628      	mov	r0, r5
  4143ee:	b003      	add	sp, #12
  4143f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4143f2:	6869      	ldr	r1, [r5, #4]
  4143f4:	9301      	str	r3, [sp, #4]
  4143f6:	3101      	adds	r1, #1
  4143f8:	4630      	mov	r0, r6
  4143fa:	f7ff ffa3 	bl	414344 <_Balloc>
  4143fe:	692a      	ldr	r2, [r5, #16]
  414400:	3202      	adds	r2, #2
  414402:	f105 010c 	add.w	r1, r5, #12
  414406:	4607      	mov	r7, r0
  414408:	0092      	lsls	r2, r2, #2
  41440a:	300c      	adds	r0, #12
  41440c:	f7f9 fc18 	bl	40dc40 <memcpy>
  414410:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  414412:	6869      	ldr	r1, [r5, #4]
  414414:	9b01      	ldr	r3, [sp, #4]
  414416:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41441a:	6028      	str	r0, [r5, #0]
  41441c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  414420:	463d      	mov	r5, r7
  414422:	e7de      	b.n	4143e2 <__multadd+0x3e>

00414424 <__s2b>:
  414424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  414428:	4c24      	ldr	r4, [pc, #144]	; (4144bc <__s2b+0x98>)
  41442a:	9e08      	ldr	r6, [sp, #32]
  41442c:	461f      	mov	r7, r3
  41442e:	3308      	adds	r3, #8
  414430:	fb84 4e03 	smull	r4, lr, r4, r3
  414434:	17db      	asrs	r3, r3, #31
  414436:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
  41443a:	f1be 0f01 	cmp.w	lr, #1
  41443e:	4605      	mov	r5, r0
  414440:	460c      	mov	r4, r1
  414442:	4690      	mov	r8, r2
  414444:	dd35      	ble.n	4144b2 <__s2b+0x8e>
  414446:	2301      	movs	r3, #1
  414448:	2100      	movs	r1, #0
  41444a:	005b      	lsls	r3, r3, #1
  41444c:	459e      	cmp	lr, r3
  41444e:	f101 0101 	add.w	r1, r1, #1
  414452:	dcfa      	bgt.n	41444a <__s2b+0x26>
  414454:	4628      	mov	r0, r5
  414456:	f7ff ff75 	bl	414344 <_Balloc>
  41445a:	2301      	movs	r3, #1
  41445c:	f1b8 0f09 	cmp.w	r8, #9
  414460:	6146      	str	r6, [r0, #20]
  414462:	6103      	str	r3, [r0, #16]
  414464:	dd21      	ble.n	4144aa <__s2b+0x86>
  414466:	f104 0909 	add.w	r9, r4, #9
  41446a:	464e      	mov	r6, r9
  41446c:	4444      	add	r4, r8
  41446e:	f816 3b01 	ldrb.w	r3, [r6], #1
  414472:	4601      	mov	r1, r0
  414474:	3b30      	subs	r3, #48	; 0x30
  414476:	220a      	movs	r2, #10
  414478:	4628      	mov	r0, r5
  41447a:	f7ff ff93 	bl	4143a4 <__multadd>
  41447e:	42a6      	cmp	r6, r4
  414480:	d1f5      	bne.n	41446e <__s2b+0x4a>
  414482:	f1a8 0408 	sub.w	r4, r8, #8
  414486:	444c      	add	r4, r9
  414488:	4547      	cmp	r7, r8
  41448a:	dd14      	ble.n	4144b6 <__s2b+0x92>
  41448c:	eba7 0708 	sub.w	r7, r7, r8
  414490:	4427      	add	r7, r4
  414492:	f814 3b01 	ldrb.w	r3, [r4], #1
  414496:	4601      	mov	r1, r0
  414498:	3b30      	subs	r3, #48	; 0x30
  41449a:	220a      	movs	r2, #10
  41449c:	4628      	mov	r0, r5
  41449e:	f7ff ff81 	bl	4143a4 <__multadd>
  4144a2:	42a7      	cmp	r7, r4
  4144a4:	d1f5      	bne.n	414492 <__s2b+0x6e>
  4144a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4144aa:	340a      	adds	r4, #10
  4144ac:	f04f 0809 	mov.w	r8, #9
  4144b0:	e7ea      	b.n	414488 <__s2b+0x64>
  4144b2:	2100      	movs	r1, #0
  4144b4:	e7ce      	b.n	414454 <__s2b+0x30>
  4144b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4144ba:	bf00      	nop
  4144bc:	38e38e39 	.word	0x38e38e39

004144c0 <__hi0bits>:
  4144c0:	0c02      	lsrs	r2, r0, #16
  4144c2:	0412      	lsls	r2, r2, #16
  4144c4:	4603      	mov	r3, r0
  4144c6:	b9b2      	cbnz	r2, 4144f6 <__hi0bits+0x36>
  4144c8:	0403      	lsls	r3, r0, #16
  4144ca:	2010      	movs	r0, #16
  4144cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4144d0:	bf04      	itt	eq
  4144d2:	021b      	lsleq	r3, r3, #8
  4144d4:	3008      	addeq	r0, #8
  4144d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4144da:	bf04      	itt	eq
  4144dc:	011b      	lsleq	r3, r3, #4
  4144de:	3004      	addeq	r0, #4
  4144e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4144e4:	bf04      	itt	eq
  4144e6:	009b      	lsleq	r3, r3, #2
  4144e8:	3002      	addeq	r0, #2
  4144ea:	2b00      	cmp	r3, #0
  4144ec:	db02      	blt.n	4144f4 <__hi0bits+0x34>
  4144ee:	005b      	lsls	r3, r3, #1
  4144f0:	d403      	bmi.n	4144fa <__hi0bits+0x3a>
  4144f2:	2020      	movs	r0, #32
  4144f4:	4770      	bx	lr
  4144f6:	2000      	movs	r0, #0
  4144f8:	e7e8      	b.n	4144cc <__hi0bits+0xc>
  4144fa:	3001      	adds	r0, #1
  4144fc:	4770      	bx	lr
  4144fe:	bf00      	nop

00414500 <__lo0bits>:
  414500:	6803      	ldr	r3, [r0, #0]
  414502:	f013 0207 	ands.w	r2, r3, #7
  414506:	4601      	mov	r1, r0
  414508:	d007      	beq.n	41451a <__lo0bits+0x1a>
  41450a:	07da      	lsls	r2, r3, #31
  41450c:	d421      	bmi.n	414552 <__lo0bits+0x52>
  41450e:	0798      	lsls	r0, r3, #30
  414510:	d421      	bmi.n	414556 <__lo0bits+0x56>
  414512:	089b      	lsrs	r3, r3, #2
  414514:	600b      	str	r3, [r1, #0]
  414516:	2002      	movs	r0, #2
  414518:	4770      	bx	lr
  41451a:	b298      	uxth	r0, r3
  41451c:	b198      	cbz	r0, 414546 <__lo0bits+0x46>
  41451e:	4610      	mov	r0, r2
  414520:	f013 0fff 	tst.w	r3, #255	; 0xff
  414524:	bf04      	itt	eq
  414526:	0a1b      	lsreq	r3, r3, #8
  414528:	3008      	addeq	r0, #8
  41452a:	071a      	lsls	r2, r3, #28
  41452c:	bf04      	itt	eq
  41452e:	091b      	lsreq	r3, r3, #4
  414530:	3004      	addeq	r0, #4
  414532:	079a      	lsls	r2, r3, #30
  414534:	bf04      	itt	eq
  414536:	089b      	lsreq	r3, r3, #2
  414538:	3002      	addeq	r0, #2
  41453a:	07da      	lsls	r2, r3, #31
  41453c:	d407      	bmi.n	41454e <__lo0bits+0x4e>
  41453e:	085b      	lsrs	r3, r3, #1
  414540:	d104      	bne.n	41454c <__lo0bits+0x4c>
  414542:	2020      	movs	r0, #32
  414544:	4770      	bx	lr
  414546:	0c1b      	lsrs	r3, r3, #16
  414548:	2010      	movs	r0, #16
  41454a:	e7e9      	b.n	414520 <__lo0bits+0x20>
  41454c:	3001      	adds	r0, #1
  41454e:	600b      	str	r3, [r1, #0]
  414550:	4770      	bx	lr
  414552:	2000      	movs	r0, #0
  414554:	4770      	bx	lr
  414556:	085b      	lsrs	r3, r3, #1
  414558:	600b      	str	r3, [r1, #0]
  41455a:	2001      	movs	r0, #1
  41455c:	4770      	bx	lr
  41455e:	bf00      	nop

00414560 <__i2b>:
  414560:	b510      	push	{r4, lr}
  414562:	460c      	mov	r4, r1
  414564:	2101      	movs	r1, #1
  414566:	f7ff feed 	bl	414344 <_Balloc>
  41456a:	2201      	movs	r2, #1
  41456c:	6144      	str	r4, [r0, #20]
  41456e:	6102      	str	r2, [r0, #16]
  414570:	bd10      	pop	{r4, pc}
  414572:	bf00      	nop

00414574 <__multiply>:
  414574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414578:	690c      	ldr	r4, [r1, #16]
  41457a:	6915      	ldr	r5, [r2, #16]
  41457c:	42ac      	cmp	r4, r5
  41457e:	b083      	sub	sp, #12
  414580:	468b      	mov	fp, r1
  414582:	4616      	mov	r6, r2
  414584:	da04      	bge.n	414590 <__multiply+0x1c>
  414586:	4622      	mov	r2, r4
  414588:	46b3      	mov	fp, r6
  41458a:	462c      	mov	r4, r5
  41458c:	460e      	mov	r6, r1
  41458e:	4615      	mov	r5, r2
  414590:	f8db 3008 	ldr.w	r3, [fp, #8]
  414594:	f8db 1004 	ldr.w	r1, [fp, #4]
  414598:	eb04 0805 	add.w	r8, r4, r5
  41459c:	4598      	cmp	r8, r3
  41459e:	bfc8      	it	gt
  4145a0:	3101      	addgt	r1, #1
  4145a2:	f7ff fecf 	bl	414344 <_Balloc>
  4145a6:	f100 0914 	add.w	r9, r0, #20
  4145aa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4145ae:	45d1      	cmp	r9, sl
  4145b0:	9000      	str	r0, [sp, #0]
  4145b2:	d205      	bcs.n	4145c0 <__multiply+0x4c>
  4145b4:	464b      	mov	r3, r9
  4145b6:	2100      	movs	r1, #0
  4145b8:	f843 1b04 	str.w	r1, [r3], #4
  4145bc:	459a      	cmp	sl, r3
  4145be:	d8fb      	bhi.n	4145b8 <__multiply+0x44>
  4145c0:	f106 0c14 	add.w	ip, r6, #20
  4145c4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4145c8:	f10b 0b14 	add.w	fp, fp, #20
  4145cc:	459c      	cmp	ip, r3
  4145ce:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4145d2:	d24c      	bcs.n	41466e <__multiply+0xfa>
  4145d4:	f8cd a004 	str.w	sl, [sp, #4]
  4145d8:	469a      	mov	sl, r3
  4145da:	f8dc 5000 	ldr.w	r5, [ip]
  4145de:	b2af      	uxth	r7, r5
  4145e0:	b1ef      	cbz	r7, 41461e <__multiply+0xaa>
  4145e2:	2100      	movs	r1, #0
  4145e4:	464d      	mov	r5, r9
  4145e6:	465e      	mov	r6, fp
  4145e8:	460c      	mov	r4, r1
  4145ea:	f856 2b04 	ldr.w	r2, [r6], #4
  4145ee:	6828      	ldr	r0, [r5, #0]
  4145f0:	b293      	uxth	r3, r2
  4145f2:	b281      	uxth	r1, r0
  4145f4:	fb07 1303 	mla	r3, r7, r3, r1
  4145f8:	0c12      	lsrs	r2, r2, #16
  4145fa:	0c01      	lsrs	r1, r0, #16
  4145fc:	4423      	add	r3, r4
  4145fe:	fb07 1102 	mla	r1, r7, r2, r1
  414602:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  414606:	b29b      	uxth	r3, r3
  414608:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  41460c:	45b6      	cmp	lr, r6
  41460e:	f845 3b04 	str.w	r3, [r5], #4
  414612:	ea4f 4411 	mov.w	r4, r1, lsr #16
  414616:	d8e8      	bhi.n	4145ea <__multiply+0x76>
  414618:	602c      	str	r4, [r5, #0]
  41461a:	f8dc 5000 	ldr.w	r5, [ip]
  41461e:	0c2d      	lsrs	r5, r5, #16
  414620:	d01d      	beq.n	41465e <__multiply+0xea>
  414622:	f8d9 3000 	ldr.w	r3, [r9]
  414626:	4648      	mov	r0, r9
  414628:	461c      	mov	r4, r3
  41462a:	4659      	mov	r1, fp
  41462c:	2200      	movs	r2, #0
  41462e:	880e      	ldrh	r6, [r1, #0]
  414630:	0c24      	lsrs	r4, r4, #16
  414632:	fb05 4406 	mla	r4, r5, r6, r4
  414636:	4422      	add	r2, r4
  414638:	b29b      	uxth	r3, r3
  41463a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  41463e:	f840 3b04 	str.w	r3, [r0], #4
  414642:	f851 3b04 	ldr.w	r3, [r1], #4
  414646:	6804      	ldr	r4, [r0, #0]
  414648:	0c1b      	lsrs	r3, r3, #16
  41464a:	b2a6      	uxth	r6, r4
  41464c:	fb05 6303 	mla	r3, r5, r3, r6
  414650:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  414654:	458e      	cmp	lr, r1
  414656:	ea4f 4213 	mov.w	r2, r3, lsr #16
  41465a:	d8e8      	bhi.n	41462e <__multiply+0xba>
  41465c:	6003      	str	r3, [r0, #0]
  41465e:	f10c 0c04 	add.w	ip, ip, #4
  414662:	45e2      	cmp	sl, ip
  414664:	f109 0904 	add.w	r9, r9, #4
  414668:	d8b7      	bhi.n	4145da <__multiply+0x66>
  41466a:	f8dd a004 	ldr.w	sl, [sp, #4]
  41466e:	f1b8 0f00 	cmp.w	r8, #0
  414672:	dd0b      	ble.n	41468c <__multiply+0x118>
  414674:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  414678:	f1aa 0a04 	sub.w	sl, sl, #4
  41467c:	b11b      	cbz	r3, 414686 <__multiply+0x112>
  41467e:	e005      	b.n	41468c <__multiply+0x118>
  414680:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  414684:	b913      	cbnz	r3, 41468c <__multiply+0x118>
  414686:	f1b8 0801 	subs.w	r8, r8, #1
  41468a:	d1f9      	bne.n	414680 <__multiply+0x10c>
  41468c:	9800      	ldr	r0, [sp, #0]
  41468e:	f8c0 8010 	str.w	r8, [r0, #16]
  414692:	b003      	add	sp, #12
  414694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00414698 <__pow5mult>:
  414698:	f012 0303 	ands.w	r3, r2, #3
  41469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4146a0:	4614      	mov	r4, r2
  4146a2:	4607      	mov	r7, r0
  4146a4:	d12e      	bne.n	414704 <__pow5mult+0x6c>
  4146a6:	460d      	mov	r5, r1
  4146a8:	10a4      	asrs	r4, r4, #2
  4146aa:	d01c      	beq.n	4146e6 <__pow5mult+0x4e>
  4146ac:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4146ae:	b396      	cbz	r6, 414716 <__pow5mult+0x7e>
  4146b0:	07e3      	lsls	r3, r4, #31
  4146b2:	f04f 0800 	mov.w	r8, #0
  4146b6:	d406      	bmi.n	4146c6 <__pow5mult+0x2e>
  4146b8:	1064      	asrs	r4, r4, #1
  4146ba:	d014      	beq.n	4146e6 <__pow5mult+0x4e>
  4146bc:	6830      	ldr	r0, [r6, #0]
  4146be:	b1a8      	cbz	r0, 4146ec <__pow5mult+0x54>
  4146c0:	4606      	mov	r6, r0
  4146c2:	07e3      	lsls	r3, r4, #31
  4146c4:	d5f8      	bpl.n	4146b8 <__pow5mult+0x20>
  4146c6:	4632      	mov	r2, r6
  4146c8:	4629      	mov	r1, r5
  4146ca:	4638      	mov	r0, r7
  4146cc:	f7ff ff52 	bl	414574 <__multiply>
  4146d0:	b1b5      	cbz	r5, 414700 <__pow5mult+0x68>
  4146d2:	686a      	ldr	r2, [r5, #4]
  4146d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4146d6:	1064      	asrs	r4, r4, #1
  4146d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4146dc:	6029      	str	r1, [r5, #0]
  4146de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4146e2:	4605      	mov	r5, r0
  4146e4:	d1ea      	bne.n	4146bc <__pow5mult+0x24>
  4146e6:	4628      	mov	r0, r5
  4146e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4146ec:	4632      	mov	r2, r6
  4146ee:	4631      	mov	r1, r6
  4146f0:	4638      	mov	r0, r7
  4146f2:	f7ff ff3f 	bl	414574 <__multiply>
  4146f6:	6030      	str	r0, [r6, #0]
  4146f8:	f8c0 8000 	str.w	r8, [r0]
  4146fc:	4606      	mov	r6, r0
  4146fe:	e7e0      	b.n	4146c2 <__pow5mult+0x2a>
  414700:	4605      	mov	r5, r0
  414702:	e7d9      	b.n	4146b8 <__pow5mult+0x20>
  414704:	1e5a      	subs	r2, r3, #1
  414706:	4d0b      	ldr	r5, [pc, #44]	; (414734 <__pow5mult+0x9c>)
  414708:	2300      	movs	r3, #0
  41470a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  41470e:	f7ff fe49 	bl	4143a4 <__multadd>
  414712:	4605      	mov	r5, r0
  414714:	e7c8      	b.n	4146a8 <__pow5mult+0x10>
  414716:	2101      	movs	r1, #1
  414718:	4638      	mov	r0, r7
  41471a:	f7ff fe13 	bl	414344 <_Balloc>
  41471e:	f240 2171 	movw	r1, #625	; 0x271
  414722:	2201      	movs	r2, #1
  414724:	2300      	movs	r3, #0
  414726:	6141      	str	r1, [r0, #20]
  414728:	6102      	str	r2, [r0, #16]
  41472a:	4606      	mov	r6, r0
  41472c:	64b8      	str	r0, [r7, #72]	; 0x48
  41472e:	6003      	str	r3, [r0, #0]
  414730:	e7be      	b.n	4146b0 <__pow5mult+0x18>
  414732:	bf00      	nop
  414734:	00417890 	.word	0x00417890

00414738 <__lshift>:
  414738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41473c:	4691      	mov	r9, r2
  41473e:	690a      	ldr	r2, [r1, #16]
  414740:	688b      	ldr	r3, [r1, #8]
  414742:	ea4f 1469 	mov.w	r4, r9, asr #5
  414746:	eb04 0802 	add.w	r8, r4, r2
  41474a:	f108 0501 	add.w	r5, r8, #1
  41474e:	429d      	cmp	r5, r3
  414750:	460e      	mov	r6, r1
  414752:	4607      	mov	r7, r0
  414754:	6849      	ldr	r1, [r1, #4]
  414756:	dd04      	ble.n	414762 <__lshift+0x2a>
  414758:	005b      	lsls	r3, r3, #1
  41475a:	429d      	cmp	r5, r3
  41475c:	f101 0101 	add.w	r1, r1, #1
  414760:	dcfa      	bgt.n	414758 <__lshift+0x20>
  414762:	4638      	mov	r0, r7
  414764:	f7ff fdee 	bl	414344 <_Balloc>
  414768:	2c00      	cmp	r4, #0
  41476a:	f100 0314 	add.w	r3, r0, #20
  41476e:	dd06      	ble.n	41477e <__lshift+0x46>
  414770:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  414774:	2100      	movs	r1, #0
  414776:	f843 1b04 	str.w	r1, [r3], #4
  41477a:	429a      	cmp	r2, r3
  41477c:	d1fb      	bne.n	414776 <__lshift+0x3e>
  41477e:	6934      	ldr	r4, [r6, #16]
  414780:	f106 0114 	add.w	r1, r6, #20
  414784:	f019 091f 	ands.w	r9, r9, #31
  414788:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  41478c:	d01d      	beq.n	4147ca <__lshift+0x92>
  41478e:	f1c9 0c20 	rsb	ip, r9, #32
  414792:	2200      	movs	r2, #0
  414794:	680c      	ldr	r4, [r1, #0]
  414796:	fa04 f409 	lsl.w	r4, r4, r9
  41479a:	4314      	orrs	r4, r2
  41479c:	f843 4b04 	str.w	r4, [r3], #4
  4147a0:	f851 2b04 	ldr.w	r2, [r1], #4
  4147a4:	458e      	cmp	lr, r1
  4147a6:	fa22 f20c 	lsr.w	r2, r2, ip
  4147aa:	d8f3      	bhi.n	414794 <__lshift+0x5c>
  4147ac:	601a      	str	r2, [r3, #0]
  4147ae:	b10a      	cbz	r2, 4147b4 <__lshift+0x7c>
  4147b0:	f108 0502 	add.w	r5, r8, #2
  4147b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4147b6:	6872      	ldr	r2, [r6, #4]
  4147b8:	3d01      	subs	r5, #1
  4147ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4147be:	6105      	str	r5, [r0, #16]
  4147c0:	6031      	str	r1, [r6, #0]
  4147c2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4147c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4147ca:	3b04      	subs	r3, #4
  4147cc:	f851 2b04 	ldr.w	r2, [r1], #4
  4147d0:	f843 2f04 	str.w	r2, [r3, #4]!
  4147d4:	458e      	cmp	lr, r1
  4147d6:	d8f9      	bhi.n	4147cc <__lshift+0x94>
  4147d8:	e7ec      	b.n	4147b4 <__lshift+0x7c>
  4147da:	bf00      	nop

004147dc <__mcmp>:
  4147dc:	b430      	push	{r4, r5}
  4147de:	690b      	ldr	r3, [r1, #16]
  4147e0:	4605      	mov	r5, r0
  4147e2:	6900      	ldr	r0, [r0, #16]
  4147e4:	1ac0      	subs	r0, r0, r3
  4147e6:	d10f      	bne.n	414808 <__mcmp+0x2c>
  4147e8:	009b      	lsls	r3, r3, #2
  4147ea:	3514      	adds	r5, #20
  4147ec:	3114      	adds	r1, #20
  4147ee:	4419      	add	r1, r3
  4147f0:	442b      	add	r3, r5
  4147f2:	e001      	b.n	4147f8 <__mcmp+0x1c>
  4147f4:	429d      	cmp	r5, r3
  4147f6:	d207      	bcs.n	414808 <__mcmp+0x2c>
  4147f8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4147fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  414800:	4294      	cmp	r4, r2
  414802:	d0f7      	beq.n	4147f4 <__mcmp+0x18>
  414804:	d302      	bcc.n	41480c <__mcmp+0x30>
  414806:	2001      	movs	r0, #1
  414808:	bc30      	pop	{r4, r5}
  41480a:	4770      	bx	lr
  41480c:	f04f 30ff 	mov.w	r0, #4294967295
  414810:	e7fa      	b.n	414808 <__mcmp+0x2c>
  414812:	bf00      	nop

00414814 <__mdiff>:
  414814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414818:	690f      	ldr	r7, [r1, #16]
  41481a:	460e      	mov	r6, r1
  41481c:	6911      	ldr	r1, [r2, #16]
  41481e:	1a7f      	subs	r7, r7, r1
  414820:	2f00      	cmp	r7, #0
  414822:	4690      	mov	r8, r2
  414824:	d117      	bne.n	414856 <__mdiff+0x42>
  414826:	0089      	lsls	r1, r1, #2
  414828:	f106 0514 	add.w	r5, r6, #20
  41482c:	f102 0e14 	add.w	lr, r2, #20
  414830:	186b      	adds	r3, r5, r1
  414832:	4471      	add	r1, lr
  414834:	e001      	b.n	41483a <__mdiff+0x26>
  414836:	429d      	cmp	r5, r3
  414838:	d25c      	bcs.n	4148f4 <__mdiff+0xe0>
  41483a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41483e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  414842:	42a2      	cmp	r2, r4
  414844:	d0f7      	beq.n	414836 <__mdiff+0x22>
  414846:	d25e      	bcs.n	414906 <__mdiff+0xf2>
  414848:	4633      	mov	r3, r6
  41484a:	462c      	mov	r4, r5
  41484c:	4646      	mov	r6, r8
  41484e:	4675      	mov	r5, lr
  414850:	4698      	mov	r8, r3
  414852:	2701      	movs	r7, #1
  414854:	e005      	b.n	414862 <__mdiff+0x4e>
  414856:	db58      	blt.n	41490a <__mdiff+0xf6>
  414858:	f106 0514 	add.w	r5, r6, #20
  41485c:	f108 0414 	add.w	r4, r8, #20
  414860:	2700      	movs	r7, #0
  414862:	6871      	ldr	r1, [r6, #4]
  414864:	f7ff fd6e 	bl	414344 <_Balloc>
  414868:	f8d8 3010 	ldr.w	r3, [r8, #16]
  41486c:	6936      	ldr	r6, [r6, #16]
  41486e:	60c7      	str	r7, [r0, #12]
  414870:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  414874:	46a6      	mov	lr, r4
  414876:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  41487a:	f100 0414 	add.w	r4, r0, #20
  41487e:	2300      	movs	r3, #0
  414880:	f85e 1b04 	ldr.w	r1, [lr], #4
  414884:	f855 8b04 	ldr.w	r8, [r5], #4
  414888:	b28a      	uxth	r2, r1
  41488a:	fa13 f388 	uxtah	r3, r3, r8
  41488e:	0c09      	lsrs	r1, r1, #16
  414890:	1a9a      	subs	r2, r3, r2
  414892:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  414896:	eb03 4322 	add.w	r3, r3, r2, asr #16
  41489a:	b292      	uxth	r2, r2
  41489c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4148a0:	45f4      	cmp	ip, lr
  4148a2:	f844 2b04 	str.w	r2, [r4], #4
  4148a6:	ea4f 4323 	mov.w	r3, r3, asr #16
  4148aa:	d8e9      	bhi.n	414880 <__mdiff+0x6c>
  4148ac:	42af      	cmp	r7, r5
  4148ae:	d917      	bls.n	4148e0 <__mdiff+0xcc>
  4148b0:	46a4      	mov	ip, r4
  4148b2:	46ae      	mov	lr, r5
  4148b4:	f85e 2b04 	ldr.w	r2, [lr], #4
  4148b8:	fa13 f382 	uxtah	r3, r3, r2
  4148bc:	1419      	asrs	r1, r3, #16
  4148be:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4148c2:	b29b      	uxth	r3, r3
  4148c4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4148c8:	4577      	cmp	r7, lr
  4148ca:	f84c 2b04 	str.w	r2, [ip], #4
  4148ce:	ea4f 4321 	mov.w	r3, r1, asr #16
  4148d2:	d8ef      	bhi.n	4148b4 <__mdiff+0xa0>
  4148d4:	43ed      	mvns	r5, r5
  4148d6:	442f      	add	r7, r5
  4148d8:	f027 0703 	bic.w	r7, r7, #3
  4148dc:	3704      	adds	r7, #4
  4148de:	443c      	add	r4, r7
  4148e0:	3c04      	subs	r4, #4
  4148e2:	b922      	cbnz	r2, 4148ee <__mdiff+0xda>
  4148e4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4148e8:	3e01      	subs	r6, #1
  4148ea:	2b00      	cmp	r3, #0
  4148ec:	d0fa      	beq.n	4148e4 <__mdiff+0xd0>
  4148ee:	6106      	str	r6, [r0, #16]
  4148f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4148f4:	2100      	movs	r1, #0
  4148f6:	f7ff fd25 	bl	414344 <_Balloc>
  4148fa:	2201      	movs	r2, #1
  4148fc:	2300      	movs	r3, #0
  4148fe:	6102      	str	r2, [r0, #16]
  414900:	6143      	str	r3, [r0, #20]
  414902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414906:	4674      	mov	r4, lr
  414908:	e7ab      	b.n	414862 <__mdiff+0x4e>
  41490a:	4633      	mov	r3, r6
  41490c:	f106 0414 	add.w	r4, r6, #20
  414910:	f102 0514 	add.w	r5, r2, #20
  414914:	4616      	mov	r6, r2
  414916:	2701      	movs	r7, #1
  414918:	4698      	mov	r8, r3
  41491a:	e7a2      	b.n	414862 <__mdiff+0x4e>

0041491c <__ulp>:
  41491c:	4b0f      	ldr	r3, [pc, #60]	; (41495c <__ulp+0x40>)
  41491e:	400b      	ands	r3, r1
  414920:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  414924:	2b00      	cmp	r3, #0
  414926:	dd02      	ble.n	41492e <__ulp+0x12>
  414928:	2000      	movs	r0, #0
  41492a:	4619      	mov	r1, r3
  41492c:	4770      	bx	lr
  41492e:	425b      	negs	r3, r3
  414930:	151b      	asrs	r3, r3, #20
  414932:	2b13      	cmp	r3, #19
  414934:	dd0b      	ble.n	41494e <__ulp+0x32>
  414936:	3b14      	subs	r3, #20
  414938:	2b1e      	cmp	r3, #30
  41493a:	bfdd      	ittte	le
  41493c:	f1c3 031f 	rsble	r3, r3, #31
  414940:	2201      	movle	r2, #1
  414942:	fa02 f303 	lslle.w	r3, r2, r3
  414946:	2301      	movgt	r3, #1
  414948:	2100      	movs	r1, #0
  41494a:	4618      	mov	r0, r3
  41494c:	4770      	bx	lr
  41494e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  414952:	2000      	movs	r0, #0
  414954:	fa42 f103 	asr.w	r1, r2, r3
  414958:	4770      	bx	lr
  41495a:	bf00      	nop
  41495c:	7ff00000 	.word	0x7ff00000

00414960 <__b2d>:
  414960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414964:	6906      	ldr	r6, [r0, #16]
  414966:	f100 0814 	add.w	r8, r0, #20
  41496a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
  41496e:	f856 7c04 	ldr.w	r7, [r6, #-4]
  414972:	4638      	mov	r0, r7
  414974:	f7ff fda4 	bl	4144c0 <__hi0bits>
  414978:	f1c0 0320 	rsb	r3, r0, #32
  41497c:	280a      	cmp	r0, #10
  41497e:	600b      	str	r3, [r1, #0]
  414980:	f1a6 0304 	sub.w	r3, r6, #4
  414984:	dc18      	bgt.n	4149b8 <__b2d+0x58>
  414986:	f1c0 010b 	rsb	r1, r0, #11
  41498a:	fa27 f201 	lsr.w	r2, r7, r1
  41498e:	4598      	cmp	r8, r3
  414990:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
  414994:	bf38      	it	cc
  414996:	f856 2c08 	ldrcc.w	r2, [r6, #-8]
  41499a:	f100 0315 	add.w	r3, r0, #21
  41499e:	bf34      	ite	cc
  4149a0:	40ca      	lsrcc	r2, r1
  4149a2:	2200      	movcs	r2, #0
  4149a4:	fa07 f303 	lsl.w	r3, r7, r3
  4149a8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  4149ac:	ea43 0402 	orr.w	r4, r3, r2
  4149b0:	4620      	mov	r0, r4
  4149b2:	4629      	mov	r1, r5
  4149b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4149b8:	4598      	cmp	r8, r3
  4149ba:	d21f      	bcs.n	4149fc <__b2d+0x9c>
  4149bc:	f1b0 020b 	subs.w	r2, r0, #11
  4149c0:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4149c4:	d01d      	beq.n	414a02 <__b2d+0xa2>
  4149c6:	4097      	lsls	r7, r2
  4149c8:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
  4149cc:	f1c2 0020 	rsb	r0, r2, #32
  4149d0:	f1a6 0108 	sub.w	r1, r6, #8
  4149d4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
  4149d8:	fa23 fe00 	lsr.w	lr, r3, r0
  4149dc:	4588      	cmp	r8, r1
  4149de:	ea47 050e 	orr.w	r5, r7, lr
  4149e2:	d220      	bcs.n	414a26 <__b2d+0xc6>
  4149e4:	f856 1c0c 	ldr.w	r1, [r6, #-12]
  4149e8:	fa03 f202 	lsl.w	r2, r3, r2
  4149ec:	fa21 f000 	lsr.w	r0, r1, r0
  4149f0:	4302      	orrs	r2, r0
  4149f2:	4614      	mov	r4, r2
  4149f4:	4620      	mov	r0, r4
  4149f6:	4629      	mov	r1, r5
  4149f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4149fc:	380b      	subs	r0, #11
  4149fe:	d109      	bne.n	414a14 <__b2d+0xb4>
  414a00:	4603      	mov	r3, r0
  414a02:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
  414a06:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  414a0a:	461c      	mov	r4, r3
  414a0c:	4620      	mov	r0, r4
  414a0e:	4629      	mov	r1, r5
  414a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414a14:	fa07 f000 	lsl.w	r0, r7, r0
  414a18:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
  414a1c:	2200      	movs	r2, #0
  414a1e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  414a22:	4614      	mov	r4, r2
  414a24:	e7e6      	b.n	4149f4 <__b2d+0x94>
  414a26:	fa03 f202 	lsl.w	r2, r3, r2
  414a2a:	4614      	mov	r4, r2
  414a2c:	e7e2      	b.n	4149f4 <__b2d+0x94>
  414a2e:	bf00      	nop

00414a30 <__d2b>:
  414a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414a34:	b082      	sub	sp, #8
  414a36:	2101      	movs	r1, #1
  414a38:	461c      	mov	r4, r3
  414a3a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  414a3e:	4615      	mov	r5, r2
  414a40:	9e08      	ldr	r6, [sp, #32]
  414a42:	f7ff fc7f 	bl	414344 <_Balloc>
  414a46:	f3c4 0413 	ubfx	r4, r4, #0, #20
  414a4a:	4680      	mov	r8, r0
  414a4c:	b10f      	cbz	r7, 414a52 <__d2b+0x22>
  414a4e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  414a52:	9401      	str	r4, [sp, #4]
  414a54:	b31d      	cbz	r5, 414a9e <__d2b+0x6e>
  414a56:	a802      	add	r0, sp, #8
  414a58:	f840 5d08 	str.w	r5, [r0, #-8]!
  414a5c:	f7ff fd50 	bl	414500 <__lo0bits>
  414a60:	2800      	cmp	r0, #0
  414a62:	d134      	bne.n	414ace <__d2b+0x9e>
  414a64:	e89d 000c 	ldmia.w	sp, {r2, r3}
  414a68:	f8c8 2014 	str.w	r2, [r8, #20]
  414a6c:	2b00      	cmp	r3, #0
  414a6e:	bf0c      	ite	eq
  414a70:	2101      	moveq	r1, #1
  414a72:	2102      	movne	r1, #2
  414a74:	f8c8 3018 	str.w	r3, [r8, #24]
  414a78:	f8c8 1010 	str.w	r1, [r8, #16]
  414a7c:	b9df      	cbnz	r7, 414ab6 <__d2b+0x86>
  414a7e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  414a82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  414a86:	6030      	str	r0, [r6, #0]
  414a88:	6918      	ldr	r0, [r3, #16]
  414a8a:	f7ff fd19 	bl	4144c0 <__hi0bits>
  414a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  414a90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  414a94:	6018      	str	r0, [r3, #0]
  414a96:	4640      	mov	r0, r8
  414a98:	b002      	add	sp, #8
  414a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414a9e:	a801      	add	r0, sp, #4
  414aa0:	f7ff fd2e 	bl	414500 <__lo0bits>
  414aa4:	9b01      	ldr	r3, [sp, #4]
  414aa6:	f8c8 3014 	str.w	r3, [r8, #20]
  414aaa:	2101      	movs	r1, #1
  414aac:	3020      	adds	r0, #32
  414aae:	f8c8 1010 	str.w	r1, [r8, #16]
  414ab2:	2f00      	cmp	r7, #0
  414ab4:	d0e3      	beq.n	414a7e <__d2b+0x4e>
  414ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  414ab8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  414abc:	4407      	add	r7, r0
  414abe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  414ac2:	6037      	str	r7, [r6, #0]
  414ac4:	6018      	str	r0, [r3, #0]
  414ac6:	4640      	mov	r0, r8
  414ac8:	b002      	add	sp, #8
  414aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414ace:	e89d 000a 	ldmia.w	sp, {r1, r3}
  414ad2:	f1c0 0220 	rsb	r2, r0, #32
  414ad6:	fa03 f202 	lsl.w	r2, r3, r2
  414ada:	430a      	orrs	r2, r1
  414adc:	40c3      	lsrs	r3, r0
  414ade:	9301      	str	r3, [sp, #4]
  414ae0:	f8c8 2014 	str.w	r2, [r8, #20]
  414ae4:	e7c2      	b.n	414a6c <__d2b+0x3c>
  414ae6:	bf00      	nop

00414ae8 <__ratio>:
  414ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  414aec:	b083      	sub	sp, #12
  414aee:	460f      	mov	r7, r1
  414af0:	4669      	mov	r1, sp
  414af2:	4606      	mov	r6, r0
  414af4:	f7ff ff34 	bl	414960 <__b2d>
  414af8:	4604      	mov	r4, r0
  414afa:	460d      	mov	r5, r1
  414afc:	4638      	mov	r0, r7
  414afe:	a901      	add	r1, sp, #4
  414b00:	f7ff ff2e 	bl	414960 <__b2d>
  414b04:	4689      	mov	r9, r1
  414b06:	e89d 000a 	ldmia.w	sp, {r1, r3}
  414b0a:	6936      	ldr	r6, [r6, #16]
  414b0c:	693a      	ldr	r2, [r7, #16]
  414b0e:	1acb      	subs	r3, r1, r3
  414b10:	1ab6      	subs	r6, r6, r2
  414b12:	eb03 1346 	add.w	r3, r3, r6, lsl #5
  414b16:	2b00      	cmp	r3, #0
  414b18:	4680      	mov	r8, r0
  414b1a:	dd0b      	ble.n	414b34 <__ratio+0x4c>
  414b1c:	eb05 5703 	add.w	r7, r5, r3, lsl #20
  414b20:	463d      	mov	r5, r7
  414b22:	4642      	mov	r2, r8
  414b24:	464b      	mov	r3, r9
  414b26:	4620      	mov	r0, r4
  414b28:	4629      	mov	r1, r5
  414b2a:	f000 ff71 	bl	415a10 <__aeabi_ddiv>
  414b2e:	b003      	add	sp, #12
  414b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  414b34:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
  414b38:	eb09 5103 	add.w	r1, r9, r3, lsl #20
  414b3c:	4689      	mov	r9, r1
  414b3e:	e7f0      	b.n	414b22 <__ratio+0x3a>

00414b40 <__copybits>:
  414b40:	b470      	push	{r4, r5, r6}
  414b42:	6914      	ldr	r4, [r2, #16]
  414b44:	1e4e      	subs	r6, r1, #1
  414b46:	f102 0314 	add.w	r3, r2, #20
  414b4a:	1176      	asrs	r6, r6, #5
  414b4c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
  414b50:	3601      	adds	r6, #1
  414b52:	428b      	cmp	r3, r1
  414b54:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  414b58:	d20c      	bcs.n	414b74 <__copybits+0x34>
  414b5a:	1f04      	subs	r4, r0, #4
  414b5c:	f853 5b04 	ldr.w	r5, [r3], #4
  414b60:	f844 5f04 	str.w	r5, [r4, #4]!
  414b64:	4299      	cmp	r1, r3
  414b66:	d8f9      	bhi.n	414b5c <__copybits+0x1c>
  414b68:	1a8b      	subs	r3, r1, r2
  414b6a:	3b15      	subs	r3, #21
  414b6c:	f023 0303 	bic.w	r3, r3, #3
  414b70:	3304      	adds	r3, #4
  414b72:	4418      	add	r0, r3
  414b74:	4286      	cmp	r6, r0
  414b76:	d904      	bls.n	414b82 <__copybits+0x42>
  414b78:	2300      	movs	r3, #0
  414b7a:	f840 3b04 	str.w	r3, [r0], #4
  414b7e:	4286      	cmp	r6, r0
  414b80:	d8fb      	bhi.n	414b7a <__copybits+0x3a>
  414b82:	bc70      	pop	{r4, r5, r6}
  414b84:	4770      	bx	lr
  414b86:	bf00      	nop

00414b88 <__any_on>:
  414b88:	6903      	ldr	r3, [r0, #16]
  414b8a:	114a      	asrs	r2, r1, #5
  414b8c:	4293      	cmp	r3, r2
  414b8e:	b410      	push	{r4}
  414b90:	f100 0414 	add.w	r4, r0, #20
  414b94:	da0f      	bge.n	414bb6 <__any_on+0x2e>
  414b96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  414b9a:	429c      	cmp	r4, r3
  414b9c:	d21f      	bcs.n	414bde <__any_on+0x56>
  414b9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
  414ba2:	3b04      	subs	r3, #4
  414ba4:	b118      	cbz	r0, 414bae <__any_on+0x26>
  414ba6:	e014      	b.n	414bd2 <__any_on+0x4a>
  414ba8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  414bac:	b98a      	cbnz	r2, 414bd2 <__any_on+0x4a>
  414bae:	429c      	cmp	r4, r3
  414bb0:	d3fa      	bcc.n	414ba8 <__any_on+0x20>
  414bb2:	bc10      	pop	{r4}
  414bb4:	4770      	bx	lr
  414bb6:	dd0f      	ble.n	414bd8 <__any_on+0x50>
  414bb8:	f011 011f 	ands.w	r1, r1, #31
  414bbc:	d00c      	beq.n	414bd8 <__any_on+0x50>
  414bbe:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  414bc2:	fa20 f301 	lsr.w	r3, r0, r1
  414bc6:	fa03 f101 	lsl.w	r1, r3, r1
  414bca:	4288      	cmp	r0, r1
  414bcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  414bd0:	d0e3      	beq.n	414b9a <__any_on+0x12>
  414bd2:	2001      	movs	r0, #1
  414bd4:	bc10      	pop	{r4}
  414bd6:	4770      	bx	lr
  414bd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  414bdc:	e7dd      	b.n	414b9a <__any_on+0x12>
  414bde:	2000      	movs	r0, #0
  414be0:	e7e7      	b.n	414bb2 <__any_on+0x2a>
  414be2:	bf00      	nop

00414be4 <_read_r>:
  414be4:	b570      	push	{r4, r5, r6, lr}
  414be6:	460d      	mov	r5, r1
  414be8:	4c08      	ldr	r4, [pc, #32]	; (414c0c <_read_r+0x28>)
  414bea:	4611      	mov	r1, r2
  414bec:	4606      	mov	r6, r0
  414bee:	461a      	mov	r2, r3
  414bf0:	4628      	mov	r0, r5
  414bf2:	2300      	movs	r3, #0
  414bf4:	6023      	str	r3, [r4, #0]
  414bf6:	f7ef f999 	bl	403f2c <_read>
  414bfa:	1c43      	adds	r3, r0, #1
  414bfc:	d000      	beq.n	414c00 <_read_r+0x1c>
  414bfe:	bd70      	pop	{r4, r5, r6, pc}
  414c00:	6823      	ldr	r3, [r4, #0]
  414c02:	2b00      	cmp	r3, #0
  414c04:	d0fb      	beq.n	414bfe <_read_r+0x1a>
  414c06:	6033      	str	r3, [r6, #0]
  414c08:	bd70      	pop	{r4, r5, r6, pc}
  414c0a:	bf00      	nop
  414c0c:	20003074 	.word	0x20003074

00414c10 <__sccl>:
  414c10:	b470      	push	{r4, r5, r6}
  414c12:	780c      	ldrb	r4, [r1, #0]
  414c14:	2c5e      	cmp	r4, #94	; 0x5e
  414c16:	d02f      	beq.n	414c78 <__sccl+0x68>
  414c18:	2200      	movs	r2, #0
  414c1a:	1c4d      	adds	r5, r1, #1
  414c1c:	4616      	mov	r6, r2
  414c1e:	1e43      	subs	r3, r0, #1
  414c20:	f100 01ff 	add.w	r1, r0, #255	; 0xff
  414c24:	f803 2f01 	strb.w	r2, [r3, #1]!
  414c28:	428b      	cmp	r3, r1
  414c2a:	d1fb      	bne.n	414c24 <__sccl+0x14>
  414c2c:	b174      	cbz	r4, 414c4c <__sccl+0x3c>
  414c2e:	f086 0201 	eor.w	r2, r6, #1
  414c32:	5502      	strb	r2, [r0, r4]
  414c34:	1c6e      	adds	r6, r5, #1
  414c36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  414c3a:	2b2d      	cmp	r3, #45	; 0x2d
  414c3c:	4631      	mov	r1, r6
  414c3e:	d00d      	beq.n	414c5c <__sccl+0x4c>
  414c40:	2b5d      	cmp	r3, #93	; 0x5d
  414c42:	d004      	beq.n	414c4e <__sccl+0x3e>
  414c44:	b133      	cbz	r3, 414c54 <__sccl+0x44>
  414c46:	461c      	mov	r4, r3
  414c48:	4635      	mov	r5, r6
  414c4a:	e7f2      	b.n	414c32 <__sccl+0x22>
  414c4c:	1e69      	subs	r1, r5, #1
  414c4e:	4608      	mov	r0, r1
  414c50:	bc70      	pop	{r4, r5, r6}
  414c52:	4770      	bx	lr
  414c54:	4629      	mov	r1, r5
  414c56:	4608      	mov	r0, r1
  414c58:	bc70      	pop	{r4, r5, r6}
  414c5a:	4770      	bx	lr
  414c5c:	7869      	ldrb	r1, [r5, #1]
  414c5e:	295d      	cmp	r1, #93	; 0x5d
  414c60:	d0f1      	beq.n	414c46 <__sccl+0x36>
  414c62:	428c      	cmp	r4, r1
  414c64:	dcef      	bgt.n	414c46 <__sccl+0x36>
  414c66:	3502      	adds	r5, #2
  414c68:	1903      	adds	r3, r0, r4
  414c6a:	3401      	adds	r4, #1
  414c6c:	42a1      	cmp	r1, r4
  414c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
  414c72:	dcfa      	bgt.n	414c6a <__sccl+0x5a>
  414c74:	3602      	adds	r6, #2
  414c76:	e7de      	b.n	414c36 <__sccl+0x26>
  414c78:	2201      	movs	r2, #1
  414c7a:	784c      	ldrb	r4, [r1, #1]
  414c7c:	4616      	mov	r6, r2
  414c7e:	1c8d      	adds	r5, r1, #2
  414c80:	e7cd      	b.n	414c1e <__sccl+0xe>
  414c82:	bf00      	nop

00414c84 <nanf>:
  414c84:	4800      	ldr	r0, [pc, #0]	; (414c88 <nanf+0x4>)
  414c86:	4770      	bx	lr
  414c88:	7fc00000 	.word	0x7fc00000

00414c8c <_strtol_l.isra.0>:
  414c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414c90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  414c94:	460f      	mov	r7, r1
  414c96:	4680      	mov	r8, r0
  414c98:	4616      	mov	r6, r2
  414c9a:	461d      	mov	r5, r3
  414c9c:	468a      	mov	sl, r1
  414c9e:	e000      	b.n	414ca2 <_strtol_l.isra.0+0x16>
  414ca0:	46a2      	mov	sl, r4
  414ca2:	4654      	mov	r4, sl
  414ca4:	4648      	mov	r0, r9
  414ca6:	f814 bb01 	ldrb.w	fp, [r4], #1
  414caa:	f7f8 fbe1 	bl	40d470 <__locale_ctype_ptr_l>
  414cae:	4458      	add	r0, fp
  414cb0:	7842      	ldrb	r2, [r0, #1]
  414cb2:	f012 0208 	ands.w	r2, r2, #8
  414cb6:	d1f3      	bne.n	414ca0 <_strtol_l.isra.0+0x14>
  414cb8:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  414cbc:	d04f      	beq.n	414d5e <_strtol_l.isra.0+0xd2>
  414cbe:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  414cc2:	bf04      	itt	eq
  414cc4:	f894 b000 	ldrbeq.w	fp, [r4]
  414cc8:	f10a 0402 	addeq.w	r4, sl, #2
  414ccc:	b11d      	cbz	r5, 414cd6 <_strtol_l.isra.0+0x4a>
  414cce:	2d10      	cmp	r5, #16
  414cd0:	d056      	beq.n	414d80 <_strtol_l.isra.0+0xf4>
  414cd2:	46ac      	mov	ip, r5
  414cd4:	e004      	b.n	414ce0 <_strtol_l.isra.0+0x54>
  414cd6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  414cda:	d060      	beq.n	414d9e <_strtol_l.isra.0+0x112>
  414cdc:	250a      	movs	r5, #10
  414cde:	46ac      	mov	ip, r5
  414ce0:	2a00      	cmp	r2, #0
  414ce2:	bf0c      	ite	eq
  414ce4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  414ce8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  414cec:	2100      	movs	r1, #0
  414cee:	fbb9 fefc 	udiv	lr, r9, ip
  414cf2:	4608      	mov	r0, r1
  414cf4:	fb0c 9a1e 	mls	sl, ip, lr, r9
  414cf8:	e005      	b.n	414d06 <_strtol_l.isra.0+0x7a>
  414cfa:	d029      	beq.n	414d50 <_strtol_l.isra.0+0xc4>
  414cfc:	fb0c 3000 	mla	r0, ip, r0, r3
  414d00:	2101      	movs	r1, #1
  414d02:	f814 bb01 	ldrb.w	fp, [r4], #1
  414d06:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  414d0a:	2b09      	cmp	r3, #9
  414d0c:	d905      	bls.n	414d1a <_strtol_l.isra.0+0x8e>
  414d0e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  414d12:	2b19      	cmp	r3, #25
  414d14:	d80b      	bhi.n	414d2e <_strtol_l.isra.0+0xa2>
  414d16:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  414d1a:	429d      	cmp	r5, r3
  414d1c:	dd0f      	ble.n	414d3e <_strtol_l.isra.0+0xb2>
  414d1e:	f1b1 3fff 	cmp.w	r1, #4294967295
  414d22:	d0ee      	beq.n	414d02 <_strtol_l.isra.0+0x76>
  414d24:	4586      	cmp	lr, r0
  414d26:	d2e8      	bcs.n	414cfa <_strtol_l.isra.0+0x6e>
  414d28:	f04f 31ff 	mov.w	r1, #4294967295
  414d2c:	e7e9      	b.n	414d02 <_strtol_l.isra.0+0x76>
  414d2e:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  414d32:	2b19      	cmp	r3, #25
  414d34:	d803      	bhi.n	414d3e <_strtol_l.isra.0+0xb2>
  414d36:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  414d3a:	429d      	cmp	r5, r3
  414d3c:	dcef      	bgt.n	414d1e <_strtol_l.isra.0+0x92>
  414d3e:	1c4b      	adds	r3, r1, #1
  414d40:	d013      	beq.n	414d6a <_strtol_l.isra.0+0xde>
  414d42:	b102      	cbz	r2, 414d46 <_strtol_l.isra.0+0xba>
  414d44:	4240      	negs	r0, r0
  414d46:	b146      	cbz	r6, 414d5a <_strtol_l.isra.0+0xce>
  414d48:	b9c1      	cbnz	r1, 414d7c <_strtol_l.isra.0+0xf0>
  414d4a:	6037      	str	r7, [r6, #0]
  414d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414d50:	459a      	cmp	sl, r3
  414d52:	dad3      	bge.n	414cfc <_strtol_l.isra.0+0x70>
  414d54:	f04f 31ff 	mov.w	r1, #4294967295
  414d58:	e7d3      	b.n	414d02 <_strtol_l.isra.0+0x76>
  414d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414d5e:	f894 b000 	ldrb.w	fp, [r4]
  414d62:	2201      	movs	r2, #1
  414d64:	f10a 0402 	add.w	r4, sl, #2
  414d68:	e7b0      	b.n	414ccc <_strtol_l.isra.0+0x40>
  414d6a:	2322      	movs	r3, #34	; 0x22
  414d6c:	f8c8 3000 	str.w	r3, [r8]
  414d70:	b1ee      	cbz	r6, 414dae <_strtol_l.isra.0+0x122>
  414d72:	1e67      	subs	r7, r4, #1
  414d74:	4648      	mov	r0, r9
  414d76:	6037      	str	r7, [r6, #0]
  414d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414d7c:	4681      	mov	r9, r0
  414d7e:	e7f8      	b.n	414d72 <_strtol_l.isra.0+0xe6>
  414d80:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  414d84:	d1a5      	bne.n	414cd2 <_strtol_l.isra.0+0x46>
  414d86:	7823      	ldrb	r3, [r4, #0]
  414d88:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  414d8c:	2b58      	cmp	r3, #88	; 0x58
  414d8e:	d1a0      	bne.n	414cd2 <_strtol_l.isra.0+0x46>
  414d90:	f04f 0c10 	mov.w	ip, #16
  414d94:	f894 b001 	ldrb.w	fp, [r4, #1]
  414d98:	4665      	mov	r5, ip
  414d9a:	3402      	adds	r4, #2
  414d9c:	e7a0      	b.n	414ce0 <_strtol_l.isra.0+0x54>
  414d9e:	7823      	ldrb	r3, [r4, #0]
  414da0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  414da4:	2b58      	cmp	r3, #88	; 0x58
  414da6:	d0f3      	beq.n	414d90 <_strtol_l.isra.0+0x104>
  414da8:	2508      	movs	r5, #8
  414daa:	46ac      	mov	ip, r5
  414dac:	e798      	b.n	414ce0 <_strtol_l.isra.0+0x54>
  414dae:	4648      	mov	r0, r9
  414db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00414db4 <_strtol_r>:
  414db4:	b530      	push	{r4, r5, lr}
  414db6:	4c06      	ldr	r4, [pc, #24]	; (414dd0 <_strtol_r+0x1c>)
  414db8:	4d06      	ldr	r5, [pc, #24]	; (414dd4 <_strtol_r+0x20>)
  414dba:	6824      	ldr	r4, [r4, #0]
  414dbc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  414dbe:	b083      	sub	sp, #12
  414dc0:	2c00      	cmp	r4, #0
  414dc2:	bf08      	it	eq
  414dc4:	462c      	moveq	r4, r5
  414dc6:	9400      	str	r4, [sp, #0]
  414dc8:	f7ff ff60 	bl	414c8c <_strtol_l.isra.0>
  414dcc:	b003      	add	sp, #12
  414dce:	bd30      	pop	{r4, r5, pc}
  414dd0:	20000298 	.word	0x20000298
  414dd4:	200006c8 	.word	0x200006c8

00414dd8 <_strtoll_l.isra.0>:
  414dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414ddc:	b085      	sub	sp, #20
  414dde:	461e      	mov	r6, r3
  414de0:	9102      	str	r1, [sp, #8]
  414de2:	9003      	str	r0, [sp, #12]
  414de4:	9200      	str	r2, [sp, #0]
  414de6:	4688      	mov	r8, r1
  414de8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  414dea:	e000      	b.n	414dee <_strtoll_l.isra.0+0x16>
  414dec:	46a8      	mov	r8, r5
  414dee:	4645      	mov	r5, r8
  414df0:	4638      	mov	r0, r7
  414df2:	f815 4b01 	ldrb.w	r4, [r5], #1
  414df6:	f7f8 fb3b 	bl	40d470 <__locale_ctype_ptr_l>
  414dfa:	4420      	add	r0, r4
  414dfc:	7843      	ldrb	r3, [r0, #1]
  414dfe:	f013 0308 	ands.w	r3, r3, #8
  414e02:	d1f3      	bne.n	414dec <_strtoll_l.isra.0+0x14>
  414e04:	2c2d      	cmp	r4, #45	; 0x2d
  414e06:	f000 8081 	beq.w	414f0c <_strtoll_l.isra.0+0x134>
  414e0a:	2c2b      	cmp	r4, #43	; 0x2b
  414e0c:	bf03      	ittte	eq
  414e0e:	782c      	ldrbeq	r4, [r5, #0]
  414e10:	9301      	streq	r3, [sp, #4]
  414e12:	f108 0502 	addeq.w	r5, r8, #2
  414e16:	9301      	strne	r3, [sp, #4]
  414e18:	b166      	cbz	r6, 414e34 <_strtoll_l.isra.0+0x5c>
  414e1a:	2e10      	cmp	r6, #16
  414e1c:	f000 8088 	beq.w	414f30 <_strtoll_l.isra.0+0x158>
  414e20:	9b01      	ldr	r3, [sp, #4]
  414e22:	46b0      	mov	r8, r6
  414e24:	ea4f 79e6 	mov.w	r9, r6, asr #31
  414e28:	b97b      	cbnz	r3, 414e4a <_strtoll_l.isra.0+0x72>
  414e2a:	f04f 3aff 	mov.w	sl, #4294967295
  414e2e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  414e32:	e00e      	b.n	414e52 <_strtoll_l.isra.0+0x7a>
  414e34:	2c30      	cmp	r4, #48	; 0x30
  414e36:	f000 808a 	beq.w	414f4e <_strtoll_l.isra.0+0x176>
  414e3a:	f04f 080a 	mov.w	r8, #10
  414e3e:	f04f 0900 	mov.w	r9, #0
  414e42:	260a      	movs	r6, #10
  414e44:	9b01      	ldr	r3, [sp, #4]
  414e46:	2b00      	cmp	r3, #0
  414e48:	d0ef      	beq.n	414e2a <_strtoll_l.isra.0+0x52>
  414e4a:	f04f 0a00 	mov.w	sl, #0
  414e4e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  414e52:	4642      	mov	r2, r8
  414e54:	464b      	mov	r3, r9
  414e56:	4650      	mov	r0, sl
  414e58:	4639      	mov	r1, r7
  414e5a:	f7f7 fcb9 	bl	40c7d0 <__aeabi_uldivmod>
  414e5e:	464b      	mov	r3, r9
  414e60:	4693      	mov	fp, r2
  414e62:	4650      	mov	r0, sl
  414e64:	4642      	mov	r2, r8
  414e66:	4639      	mov	r1, r7
  414e68:	f7f7 fcb2 	bl	40c7d0 <__aeabi_uldivmod>
  414e6c:	f04f 0e00 	mov.w	lr, #0
  414e70:	2200      	movs	r2, #0
  414e72:	2300      	movs	r3, #0
  414e74:	e00f      	b.n	414e96 <_strtoll_l.isra.0+0xbe>
  414e76:	d044      	beq.n	414f02 <_strtoll_l.isra.0+0x12a>
  414e78:	fb02 f409 	mul.w	r4, r2, r9
  414e7c:	fb08 4403 	mla	r4, r8, r3, r4
  414e80:	fba2 2308 	umull	r2, r3, r2, r8
  414e84:	4423      	add	r3, r4
  414e86:	eb12 020c 	adds.w	r2, r2, ip
  414e8a:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
  414e8e:	f04f 0e01 	mov.w	lr, #1
  414e92:	f815 4b01 	ldrb.w	r4, [r5], #1
  414e96:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  414e9a:	f1bc 0f09 	cmp.w	ip, #9
  414e9e:	d906      	bls.n	414eae <_strtoll_l.isra.0+0xd6>
  414ea0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
  414ea4:	f1bc 0f19 	cmp.w	ip, #25
  414ea8:	d80d      	bhi.n	414ec6 <_strtoll_l.isra.0+0xee>
  414eaa:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
  414eae:	4566      	cmp	r6, ip
  414eb0:	dd12      	ble.n	414ed8 <_strtoll_l.isra.0+0x100>
  414eb2:	f1be 3fff 	cmp.w	lr, #4294967295
  414eb6:	d0ec      	beq.n	414e92 <_strtoll_l.isra.0+0xba>
  414eb8:	4299      	cmp	r1, r3
  414eba:	bf08      	it	eq
  414ebc:	4290      	cmpeq	r0, r2
  414ebe:	d2da      	bcs.n	414e76 <_strtoll_l.isra.0+0x9e>
  414ec0:	f04f 3eff 	mov.w	lr, #4294967295
  414ec4:	e7e5      	b.n	414e92 <_strtoll_l.isra.0+0xba>
  414ec6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
  414eca:	f1bc 0f19 	cmp.w	ip, #25
  414ece:	d803      	bhi.n	414ed8 <_strtoll_l.isra.0+0x100>
  414ed0:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
  414ed4:	4566      	cmp	r6, ip
  414ed6:	dcec      	bgt.n	414eb2 <_strtoll_l.isra.0+0xda>
  414ed8:	f1be 3fff 	cmp.w	lr, #4294967295
  414edc:	d01c      	beq.n	414f18 <_strtoll_l.isra.0+0x140>
  414ede:	9901      	ldr	r1, [sp, #4]
  414ee0:	b111      	cbz	r1, 414ee8 <_strtoll_l.isra.0+0x110>
  414ee2:	4252      	negs	r2, r2
  414ee4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  414ee8:	9900      	ldr	r1, [sp, #0]
  414eea:	b129      	cbz	r1, 414ef8 <_strtoll_l.isra.0+0x120>
  414eec:	f1be 0f00 	cmp.w	lr, #0
  414ef0:	d11b      	bne.n	414f2a <_strtoll_l.isra.0+0x152>
  414ef2:	9d02      	ldr	r5, [sp, #8]
  414ef4:	9900      	ldr	r1, [sp, #0]
  414ef6:	600d      	str	r5, [r1, #0]
  414ef8:	4610      	mov	r0, r2
  414efa:	4619      	mov	r1, r3
  414efc:	b005      	add	sp, #20
  414efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414f02:	45e3      	cmp	fp, ip
  414f04:	dab8      	bge.n	414e78 <_strtoll_l.isra.0+0xa0>
  414f06:	f04f 3eff 	mov.w	lr, #4294967295
  414f0a:	e7c2      	b.n	414e92 <_strtoll_l.isra.0+0xba>
  414f0c:	2301      	movs	r3, #1
  414f0e:	782c      	ldrb	r4, [r5, #0]
  414f10:	9301      	str	r3, [sp, #4]
  414f12:	f108 0502 	add.w	r5, r8, #2
  414f16:	e77f      	b.n	414e18 <_strtoll_l.isra.0+0x40>
  414f18:	9a03      	ldr	r2, [sp, #12]
  414f1a:	2322      	movs	r3, #34	; 0x22
  414f1c:	6013      	str	r3, [r2, #0]
  414f1e:	9b00      	ldr	r3, [sp, #0]
  414f20:	b32b      	cbz	r3, 414f6e <_strtoll_l.isra.0+0x196>
  414f22:	4652      	mov	r2, sl
  414f24:	463b      	mov	r3, r7
  414f26:	3d01      	subs	r5, #1
  414f28:	e7e4      	b.n	414ef4 <_strtoll_l.isra.0+0x11c>
  414f2a:	4692      	mov	sl, r2
  414f2c:	461f      	mov	r7, r3
  414f2e:	e7f8      	b.n	414f22 <_strtoll_l.isra.0+0x14a>
  414f30:	2c30      	cmp	r4, #48	; 0x30
  414f32:	d117      	bne.n	414f64 <_strtoll_l.isra.0+0x18c>
  414f34:	782b      	ldrb	r3, [r5, #0]
  414f36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  414f3a:	2b58      	cmp	r3, #88	; 0x58
  414f3c:	d112      	bne.n	414f64 <_strtoll_l.isra.0+0x18c>
  414f3e:	786c      	ldrb	r4, [r5, #1]
  414f40:	f04f 0810 	mov.w	r8, #16
  414f44:	f04f 0900 	mov.w	r9, #0
  414f48:	3502      	adds	r5, #2
  414f4a:	2610      	movs	r6, #16
  414f4c:	e77a      	b.n	414e44 <_strtoll_l.isra.0+0x6c>
  414f4e:	782b      	ldrb	r3, [r5, #0]
  414f50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  414f54:	2b58      	cmp	r3, #88	; 0x58
  414f56:	d0f2      	beq.n	414f3e <_strtoll_l.isra.0+0x166>
  414f58:	f04f 0808 	mov.w	r8, #8
  414f5c:	f04f 0900 	mov.w	r9, #0
  414f60:	2608      	movs	r6, #8
  414f62:	e76f      	b.n	414e44 <_strtoll_l.isra.0+0x6c>
  414f64:	f04f 0810 	mov.w	r8, #16
  414f68:	f04f 0900 	mov.w	r9, #0
  414f6c:	e76a      	b.n	414e44 <_strtoll_l.isra.0+0x6c>
  414f6e:	4652      	mov	r2, sl
  414f70:	463b      	mov	r3, r7
  414f72:	e7c1      	b.n	414ef8 <_strtoll_l.isra.0+0x120>

00414f74 <_strtoll_r>:
  414f74:	b530      	push	{r4, r5, lr}
  414f76:	4c06      	ldr	r4, [pc, #24]	; (414f90 <_strtoll_r+0x1c>)
  414f78:	4d06      	ldr	r5, [pc, #24]	; (414f94 <_strtoll_r+0x20>)
  414f7a:	6824      	ldr	r4, [r4, #0]
  414f7c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  414f7e:	b083      	sub	sp, #12
  414f80:	2c00      	cmp	r4, #0
  414f82:	bf08      	it	eq
  414f84:	462c      	moveq	r4, r5
  414f86:	9400      	str	r4, [sp, #0]
  414f88:	f7ff ff26 	bl	414dd8 <_strtoll_l.isra.0>
  414f8c:	b003      	add	sp, #12
  414f8e:	bd30      	pop	{r4, r5, pc}
  414f90:	20000298 	.word	0x20000298
  414f94:	200006c8 	.word	0x200006c8

00414f98 <_strtoul_l.isra.0>:
  414f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414f9c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  414fa0:	460e      	mov	r6, r1
  414fa2:	4607      	mov	r7, r0
  414fa4:	4615      	mov	r5, r2
  414fa6:	4698      	mov	r8, r3
  414fa8:	468a      	mov	sl, r1
  414faa:	e000      	b.n	414fae <_strtoul_l.isra.0+0x16>
  414fac:	46a2      	mov	sl, r4
  414fae:	4654      	mov	r4, sl
  414fb0:	4648      	mov	r0, r9
  414fb2:	f814 bb01 	ldrb.w	fp, [r4], #1
  414fb6:	f7f8 fa5b 	bl	40d470 <__locale_ctype_ptr_l>
  414fba:	4458      	add	r0, fp
  414fbc:	7840      	ldrb	r0, [r0, #1]
  414fbe:	f010 0008 	ands.w	r0, r0, #8
  414fc2:	d1f3      	bne.n	414fac <_strtoul_l.isra.0+0x14>
  414fc4:	4659      	mov	r1, fp
  414fc6:	292d      	cmp	r1, #45	; 0x2d
  414fc8:	d059      	beq.n	41507e <_strtoul_l.isra.0+0xe6>
  414fca:	292b      	cmp	r1, #43	; 0x2b
  414fcc:	bf04      	itt	eq
  414fce:	7821      	ldrbeq	r1, [r4, #0]
  414fd0:	f10a 0402 	addeq.w	r4, sl, #2
  414fd4:	f1b8 0f00 	cmp.w	r8, #0
  414fd8:	d00c      	beq.n	414ff4 <_strtoul_l.isra.0+0x5c>
  414fda:	f1b8 0f10 	cmp.w	r8, #16
  414fde:	d053      	beq.n	415088 <_strtoul_l.isra.0+0xf0>
  414fe0:	f04f 3cff 	mov.w	ip, #4294967295
  414fe4:	fbbc fcf8 	udiv	ip, ip, r8
  414fe8:	fb08 fa0c 	mul.w	sl, r8, ip
  414fec:	ea6f 0a0a 	mvn.w	sl, sl
  414ff0:	46c1      	mov	r9, r8
  414ff2:	e008      	b.n	415006 <_strtoul_l.isra.0+0x6e>
  414ff4:	2930      	cmp	r1, #48	; 0x30
  414ff6:	d058      	beq.n	4150aa <_strtoul_l.isra.0+0x112>
  414ff8:	f04f 080a 	mov.w	r8, #10
  414ffc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 4150dc <_strtoul_l.isra.0+0x144>
  415000:	46c1      	mov	r9, r8
  415002:	f04f 0a05 	mov.w	sl, #5
  415006:	2300      	movs	r3, #0
  415008:	469e      	mov	lr, r3
  41500a:	e005      	b.n	415018 <_strtoul_l.isra.0+0x80>
  41500c:	d02a      	beq.n	415064 <_strtoul_l.isra.0+0xcc>
  41500e:	fb09 2e0e 	mla	lr, r9, lr, r2
  415012:	2301      	movs	r3, #1
  415014:	f814 1b01 	ldrb.w	r1, [r4], #1
  415018:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
  41501c:	2a09      	cmp	r2, #9
  41501e:	d905      	bls.n	41502c <_strtoul_l.isra.0+0x94>
  415020:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
  415024:	2a19      	cmp	r2, #25
  415026:	d80a      	bhi.n	41503e <_strtoul_l.isra.0+0xa6>
  415028:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
  41502c:	4590      	cmp	r8, r2
  41502e:	dd0e      	ble.n	41504e <_strtoul_l.isra.0+0xb6>
  415030:	2b00      	cmp	r3, #0
  415032:	db01      	blt.n	415038 <_strtoul_l.isra.0+0xa0>
  415034:	45e6      	cmp	lr, ip
  415036:	d9e9      	bls.n	41500c <_strtoul_l.isra.0+0x74>
  415038:	f04f 33ff 	mov.w	r3, #4294967295
  41503c:	e7ea      	b.n	415014 <_strtoul_l.isra.0+0x7c>
  41503e:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
  415042:	2a19      	cmp	r2, #25
  415044:	d803      	bhi.n	41504e <_strtoul_l.isra.0+0xb6>
  415046:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
  41504a:	4590      	cmp	r8, r2
  41504c:	dcf0      	bgt.n	415030 <_strtoul_l.isra.0+0x98>
  41504e:	2b00      	cmp	r3, #0
  415050:	db0d      	blt.n	41506e <_strtoul_l.isra.0+0xd6>
  415052:	b108      	cbz	r0, 415058 <_strtoul_l.isra.0+0xc0>
  415054:	f1ce 0e00 	rsb	lr, lr, #0
  415058:	b10d      	cbz	r5, 41505e <_strtoul_l.isra.0+0xc6>
  41505a:	b973      	cbnz	r3, 41507a <_strtoul_l.isra.0+0xe2>
  41505c:	602e      	str	r6, [r5, #0]
  41505e:	4670      	mov	r0, lr
  415060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415064:	4552      	cmp	r2, sl
  415066:	ddd2      	ble.n	41500e <_strtoul_l.isra.0+0x76>
  415068:	f04f 33ff 	mov.w	r3, #4294967295
  41506c:	e7d2      	b.n	415014 <_strtoul_l.isra.0+0x7c>
  41506e:	2322      	movs	r3, #34	; 0x22
  415070:	603b      	str	r3, [r7, #0]
  415072:	f04f 3eff 	mov.w	lr, #4294967295
  415076:	2d00      	cmp	r5, #0
  415078:	d0f1      	beq.n	41505e <_strtoul_l.isra.0+0xc6>
  41507a:	1e66      	subs	r6, r4, #1
  41507c:	e7ee      	b.n	41505c <_strtoul_l.isra.0+0xc4>
  41507e:	7821      	ldrb	r1, [r4, #0]
  415080:	2001      	movs	r0, #1
  415082:	f10a 0402 	add.w	r4, sl, #2
  415086:	e7a5      	b.n	414fd4 <_strtoul_l.isra.0+0x3c>
  415088:	2930      	cmp	r1, #48	; 0x30
  41508a:	d11b      	bne.n	4150c4 <_strtoul_l.isra.0+0x12c>
  41508c:	7823      	ldrb	r3, [r4, #0]
  41508e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  415092:	2b58      	cmp	r3, #88	; 0x58
  415094:	d11c      	bne.n	4150d0 <_strtoul_l.isra.0+0x138>
  415096:	f04f 0910 	mov.w	r9, #16
  41509a:	7861      	ldrb	r1, [r4, #1]
  41509c:	46c8      	mov	r8, r9
  41509e:	f04f 0a0f 	mov.w	sl, #15
  4150a2:	3402      	adds	r4, #2
  4150a4:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  4150a8:	e7ad      	b.n	415006 <_strtoul_l.isra.0+0x6e>
  4150aa:	7823      	ldrb	r3, [r4, #0]
  4150ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4150b0:	2b58      	cmp	r3, #88	; 0x58
  4150b2:	d0f0      	beq.n	415096 <_strtoul_l.isra.0+0xfe>
  4150b4:	f04f 0808 	mov.w	r8, #8
  4150b8:	46c1      	mov	r9, r8
  4150ba:	f04f 0a07 	mov.w	sl, #7
  4150be:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
  4150c2:	e7a0      	b.n	415006 <_strtoul_l.isra.0+0x6e>
  4150c4:	f04f 0a0f 	mov.w	sl, #15
  4150c8:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  4150cc:	46c1      	mov	r9, r8
  4150ce:	e79a      	b.n	415006 <_strtoul_l.isra.0+0x6e>
  4150d0:	46c1      	mov	r9, r8
  4150d2:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  4150d6:	f04f 0a0f 	mov.w	sl, #15
  4150da:	e794      	b.n	415006 <_strtoul_l.isra.0+0x6e>
  4150dc:	19999999 	.word	0x19999999

004150e0 <_strtoul_r>:
  4150e0:	b530      	push	{r4, r5, lr}
  4150e2:	4c06      	ldr	r4, [pc, #24]	; (4150fc <_strtoul_r+0x1c>)
  4150e4:	4d06      	ldr	r5, [pc, #24]	; (415100 <_strtoul_r+0x20>)
  4150e6:	6824      	ldr	r4, [r4, #0]
  4150e8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4150ea:	b083      	sub	sp, #12
  4150ec:	2c00      	cmp	r4, #0
  4150ee:	bf08      	it	eq
  4150f0:	462c      	moveq	r4, r5
  4150f2:	9400      	str	r4, [sp, #0]
  4150f4:	f7ff ff50 	bl	414f98 <_strtoul_l.isra.0>
  4150f8:	b003      	add	sp, #12
  4150fa:	bd30      	pop	{r4, r5, pc}
  4150fc:	20000298 	.word	0x20000298
  415100:	200006c8 	.word	0x200006c8

00415104 <_strtoull_l.isra.0>:
  415104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  415108:	b085      	sub	sp, #20
  41510a:	4693      	mov	fp, r2
  41510c:	9102      	str	r1, [sp, #8]
  41510e:	9003      	str	r0, [sp, #12]
  415110:	469a      	mov	sl, r3
  415112:	460f      	mov	r7, r1
  415114:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  415116:	e000      	b.n	41511a <_strtoull_l.isra.0+0x16>
  415118:	462f      	mov	r7, r5
  41511a:	463d      	mov	r5, r7
  41511c:	4630      	mov	r0, r6
  41511e:	f815 4b01 	ldrb.w	r4, [r5], #1
  415122:	f7f8 f9a5 	bl	40d470 <__locale_ctype_ptr_l>
  415126:	4420      	add	r0, r4
  415128:	7843      	ldrb	r3, [r0, #1]
  41512a:	f013 0308 	ands.w	r3, r3, #8
  41512e:	d1f3      	bne.n	415118 <_strtoull_l.isra.0+0x14>
  415130:	2c2d      	cmp	r4, #45	; 0x2d
  415132:	f000 8089 	beq.w	415248 <_strtoull_l.isra.0+0x144>
  415136:	2c2b      	cmp	r4, #43	; 0x2b
  415138:	bf03      	ittte	eq
  41513a:	782c      	ldrbeq	r4, [r5, #0]
  41513c:	9301      	streq	r3, [sp, #4]
  41513e:	1cbd      	addeq	r5, r7, #2
  415140:	9301      	strne	r3, [sp, #4]
  415142:	f1ba 0f00 	cmp.w	sl, #0
  415146:	d019      	beq.n	41517c <_strtoull_l.isra.0+0x78>
  415148:	f1ba 0f10 	cmp.w	sl, #16
  41514c:	f000 8081 	beq.w	415252 <_strtoull_l.isra.0+0x14e>
  415150:	46d0      	mov	r8, sl
  415152:	ea4f 79ea 	mov.w	r9, sl, asr #31
  415156:	4642      	mov	r2, r8
  415158:	464b      	mov	r3, r9
  41515a:	f04f 30ff 	mov.w	r0, #4294967295
  41515e:	f04f 31ff 	mov.w	r1, #4294967295
  415162:	f7f7 fb35 	bl	40c7d0 <__aeabi_uldivmod>
  415166:	4642      	mov	r2, r8
  415168:	4606      	mov	r6, r0
  41516a:	460f      	mov	r7, r1
  41516c:	464b      	mov	r3, r9
  41516e:	f04f 30ff 	mov.w	r0, #4294967295
  415172:	f04f 31ff 	mov.w	r1, #4294967295
  415176:	f7f7 fb2b 	bl	40c7d0 <__aeabi_uldivmod>
  41517a:	e00b      	b.n	415194 <_strtoull_l.isra.0+0x90>
  41517c:	2c30      	cmp	r4, #48	; 0x30
  41517e:	d07d      	beq.n	41527c <_strtoull_l.isra.0+0x178>
  415180:	4f4e      	ldr	r7, [pc, #312]	; (4152bc <_strtoull_l.isra.0+0x1b8>)
  415182:	2205      	movs	r2, #5
  415184:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
  415188:	f04f 080a 	mov.w	r8, #10
  41518c:	f04f 0900 	mov.w	r9, #0
  415190:	f04f 0a0a 	mov.w	sl, #10
  415194:	f04f 0e00 	mov.w	lr, #0
  415198:	2000      	movs	r0, #0
  41519a:	2100      	movs	r1, #0
  41519c:	e011      	b.n	4151c2 <_strtoull_l.isra.0+0xbe>
  41519e:	42b9      	cmp	r1, r7
  4151a0:	bf08      	it	eq
  4151a2:	42b0      	cmpeq	r0, r6
  4151a4:	d03f      	beq.n	415226 <_strtoull_l.isra.0+0x122>
  4151a6:	fb00 f409 	mul.w	r4, r0, r9
  4151aa:	fb08 4401 	mla	r4, r8, r1, r4
  4151ae:	fba0 0108 	umull	r0, r1, r0, r8
  4151b2:	4421      	add	r1, r4
  4151b4:	18c0      	adds	r0, r0, r3
  4151b6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
  4151ba:	f04f 0e01 	mov.w	lr, #1
  4151be:	f815 4b01 	ldrb.w	r4, [r5], #1
  4151c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  4151c6:	2b09      	cmp	r3, #9
  4151c8:	d905      	bls.n	4151d6 <_strtoull_l.isra.0+0xd2>
  4151ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  4151ce:	2b19      	cmp	r3, #25
  4151d0:	d80d      	bhi.n	4151ee <_strtoull_l.isra.0+0xea>
  4151d2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
  4151d6:	459a      	cmp	sl, r3
  4151d8:	dd11      	ble.n	4151fe <_strtoull_l.isra.0+0xfa>
  4151da:	f1be 0f00 	cmp.w	lr, #0
  4151de:	db03      	blt.n	4151e8 <_strtoull_l.isra.0+0xe4>
  4151e0:	428f      	cmp	r7, r1
  4151e2:	bf08      	it	eq
  4151e4:	4286      	cmpeq	r6, r0
  4151e6:	d2da      	bcs.n	41519e <_strtoull_l.isra.0+0x9a>
  4151e8:	f04f 3eff 	mov.w	lr, #4294967295
  4151ec:	e7e7      	b.n	4151be <_strtoull_l.isra.0+0xba>
  4151ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
  4151f2:	2b19      	cmp	r3, #25
  4151f4:	d803      	bhi.n	4151fe <_strtoull_l.isra.0+0xfa>
  4151f6:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
  4151fa:	459a      	cmp	sl, r3
  4151fc:	dced      	bgt.n	4151da <_strtoull_l.isra.0+0xd6>
  4151fe:	f1be 0f00 	cmp.w	lr, #0
  415202:	db15      	blt.n	415230 <_strtoull_l.isra.0+0x12c>
  415204:	9b01      	ldr	r3, [sp, #4]
  415206:	b113      	cbz	r3, 41520e <_strtoull_l.isra.0+0x10a>
  415208:	4240      	negs	r0, r0
  41520a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41520e:	f1bb 0f00 	cmp.w	fp, #0
  415212:	d005      	beq.n	415220 <_strtoull_l.isra.0+0x11c>
  415214:	f1be 0f00 	cmp.w	lr, #0
  415218:	d114      	bne.n	415244 <_strtoull_l.isra.0+0x140>
  41521a:	9d02      	ldr	r5, [sp, #8]
  41521c:	f8cb 5000 	str.w	r5, [fp]
  415220:	b005      	add	sp, #20
  415222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415226:	4293      	cmp	r3, r2
  415228:	ddbd      	ble.n	4151a6 <_strtoull_l.isra.0+0xa2>
  41522a:	f04f 3eff 	mov.w	lr, #4294967295
  41522e:	e7c6      	b.n	4151be <_strtoull_l.isra.0+0xba>
  415230:	9a03      	ldr	r2, [sp, #12]
  415232:	2322      	movs	r3, #34	; 0x22
  415234:	6013      	str	r3, [r2, #0]
  415236:	f04f 30ff 	mov.w	r0, #4294967295
  41523a:	f04f 31ff 	mov.w	r1, #4294967295
  41523e:	f1bb 0f00 	cmp.w	fp, #0
  415242:	d0ed      	beq.n	415220 <_strtoull_l.isra.0+0x11c>
  415244:	3d01      	subs	r5, #1
  415246:	e7e9      	b.n	41521c <_strtoull_l.isra.0+0x118>
  415248:	2301      	movs	r3, #1
  41524a:	782c      	ldrb	r4, [r5, #0]
  41524c:	9301      	str	r3, [sp, #4]
  41524e:	1cbd      	adds	r5, r7, #2
  415250:	e777      	b.n	415142 <_strtoull_l.isra.0+0x3e>
  415252:	2c30      	cmp	r4, #48	; 0x30
  415254:	d123      	bne.n	41529e <_strtoull_l.isra.0+0x19a>
  415256:	782b      	ldrb	r3, [r5, #0]
  415258:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  41525c:	2b58      	cmp	r3, #88	; 0x58
  41525e:	d128      	bne.n	4152b2 <_strtoull_l.isra.0+0x1ae>
  415260:	786c      	ldrb	r4, [r5, #1]
  415262:	220f      	movs	r2, #15
  415264:	3502      	adds	r5, #2
  415266:	f04f 36ff 	mov.w	r6, #4294967295
  41526a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  41526e:	f04f 0810 	mov.w	r8, #16
  415272:	f04f 0900 	mov.w	r9, #0
  415276:	f04f 0a10 	mov.w	sl, #16
  41527a:	e78b      	b.n	415194 <_strtoull_l.isra.0+0x90>
  41527c:	782b      	ldrb	r3, [r5, #0]
  41527e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  415282:	2b58      	cmp	r3, #88	; 0x58
  415284:	d0ec      	beq.n	415260 <_strtoull_l.isra.0+0x15c>
  415286:	2207      	movs	r2, #7
  415288:	f04f 36ff 	mov.w	r6, #4294967295
  41528c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
  415290:	f04f 0808 	mov.w	r8, #8
  415294:	f04f 0900 	mov.w	r9, #0
  415298:	f04f 0a08 	mov.w	sl, #8
  41529c:	e77a      	b.n	415194 <_strtoull_l.isra.0+0x90>
  41529e:	220f      	movs	r2, #15
  4152a0:	f04f 36ff 	mov.w	r6, #4294967295
  4152a4:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  4152a8:	f04f 0810 	mov.w	r8, #16
  4152ac:	f04f 0900 	mov.w	r9, #0
  4152b0:	e770      	b.n	415194 <_strtoull_l.isra.0+0x90>
  4152b2:	f04f 0810 	mov.w	r8, #16
  4152b6:	f04f 0900 	mov.w	r9, #0
  4152ba:	e74c      	b.n	415156 <_strtoull_l.isra.0+0x52>
  4152bc:	19999999 	.word	0x19999999

004152c0 <_strtoull_r>:
  4152c0:	b530      	push	{r4, r5, lr}
  4152c2:	4c06      	ldr	r4, [pc, #24]	; (4152dc <_strtoull_r+0x1c>)
  4152c4:	4d06      	ldr	r5, [pc, #24]	; (4152e0 <_strtoull_r+0x20>)
  4152c6:	6824      	ldr	r4, [r4, #0]
  4152c8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4152ca:	b083      	sub	sp, #12
  4152cc:	2c00      	cmp	r4, #0
  4152ce:	bf08      	it	eq
  4152d0:	462c      	moveq	r4, r5
  4152d2:	9400      	str	r4, [sp, #0]
  4152d4:	f7ff ff16 	bl	415104 <_strtoull_l.isra.0>
  4152d8:	b003      	add	sp, #12
  4152da:	bd30      	pop	{r4, r5, pc}
  4152dc:	20000298 	.word	0x20000298
  4152e0:	200006c8 	.word	0x200006c8

004152e4 <__ssprint_r>:
  4152e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4152e8:	6893      	ldr	r3, [r2, #8]
  4152ea:	b083      	sub	sp, #12
  4152ec:	4690      	mov	r8, r2
  4152ee:	2b00      	cmp	r3, #0
  4152f0:	d070      	beq.n	4153d4 <__ssprint_r+0xf0>
  4152f2:	4682      	mov	sl, r0
  4152f4:	460c      	mov	r4, r1
  4152f6:	6817      	ldr	r7, [r2, #0]
  4152f8:	688d      	ldr	r5, [r1, #8]
  4152fa:	6808      	ldr	r0, [r1, #0]
  4152fc:	e042      	b.n	415384 <__ssprint_r+0xa0>
  4152fe:	89a3      	ldrh	r3, [r4, #12]
  415300:	f413 6f90 	tst.w	r3, #1152	; 0x480
  415304:	d02e      	beq.n	415364 <__ssprint_r+0x80>
  415306:	6965      	ldr	r5, [r4, #20]
  415308:	6921      	ldr	r1, [r4, #16]
  41530a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  41530e:	eba0 0b01 	sub.w	fp, r0, r1
  415312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  415316:	f10b 0001 	add.w	r0, fp, #1
  41531a:	106d      	asrs	r5, r5, #1
  41531c:	4430      	add	r0, r6
  41531e:	42a8      	cmp	r0, r5
  415320:	462a      	mov	r2, r5
  415322:	bf84      	itt	hi
  415324:	4605      	movhi	r5, r0
  415326:	462a      	movhi	r2, r5
  415328:	055b      	lsls	r3, r3, #21
  41532a:	d538      	bpl.n	41539e <__ssprint_r+0xba>
  41532c:	4611      	mov	r1, r2
  41532e:	4650      	mov	r0, sl
  415330:	f7f8 f940 	bl	40d5b4 <_malloc_r>
  415334:	2800      	cmp	r0, #0
  415336:	d03c      	beq.n	4153b2 <__ssprint_r+0xce>
  415338:	465a      	mov	r2, fp
  41533a:	6921      	ldr	r1, [r4, #16]
  41533c:	9001      	str	r0, [sp, #4]
  41533e:	f7f8 fc7f 	bl	40dc40 <memcpy>
  415342:	89a2      	ldrh	r2, [r4, #12]
  415344:	9b01      	ldr	r3, [sp, #4]
  415346:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  41534a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  41534e:	81a2      	strh	r2, [r4, #12]
  415350:	eba5 020b 	sub.w	r2, r5, fp
  415354:	eb03 000b 	add.w	r0, r3, fp
  415358:	6165      	str	r5, [r4, #20]
  41535a:	6123      	str	r3, [r4, #16]
  41535c:	6020      	str	r0, [r4, #0]
  41535e:	60a2      	str	r2, [r4, #8]
  415360:	4635      	mov	r5, r6
  415362:	46b3      	mov	fp, r6
  415364:	465a      	mov	r2, fp
  415366:	4649      	mov	r1, r9
  415368:	f7f8 fd04 	bl	40dd74 <memmove>
  41536c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  415370:	68a2      	ldr	r2, [r4, #8]
  415372:	6820      	ldr	r0, [r4, #0]
  415374:	1b55      	subs	r5, r2, r5
  415376:	4458      	add	r0, fp
  415378:	1b9e      	subs	r6, r3, r6
  41537a:	60a5      	str	r5, [r4, #8]
  41537c:	6020      	str	r0, [r4, #0]
  41537e:	f8c8 6008 	str.w	r6, [r8, #8]
  415382:	b33e      	cbz	r6, 4153d4 <__ssprint_r+0xf0>
  415384:	687e      	ldr	r6, [r7, #4]
  415386:	463b      	mov	r3, r7
  415388:	3708      	adds	r7, #8
  41538a:	2e00      	cmp	r6, #0
  41538c:	d0fa      	beq.n	415384 <__ssprint_r+0xa0>
  41538e:	42ae      	cmp	r6, r5
  415390:	f8d3 9000 	ldr.w	r9, [r3]
  415394:	46ab      	mov	fp, r5
  415396:	d2b2      	bcs.n	4152fe <__ssprint_r+0x1a>
  415398:	4635      	mov	r5, r6
  41539a:	46b3      	mov	fp, r6
  41539c:	e7e2      	b.n	415364 <__ssprint_r+0x80>
  41539e:	4650      	mov	r0, sl
  4153a0:	f7f8 fda6 	bl	40def0 <_realloc_r>
  4153a4:	4603      	mov	r3, r0
  4153a6:	2800      	cmp	r0, #0
  4153a8:	d1d2      	bne.n	415350 <__ssprint_r+0x6c>
  4153aa:	6921      	ldr	r1, [r4, #16]
  4153ac:	4650      	mov	r0, sl
  4153ae:	f7f7 fd79 	bl	40cea4 <_free_r>
  4153b2:	230c      	movs	r3, #12
  4153b4:	f8ca 3000 	str.w	r3, [sl]
  4153b8:	89a3      	ldrh	r3, [r4, #12]
  4153ba:	2200      	movs	r2, #0
  4153bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4153c0:	f04f 30ff 	mov.w	r0, #4294967295
  4153c4:	81a3      	strh	r3, [r4, #12]
  4153c6:	f8c8 2008 	str.w	r2, [r8, #8]
  4153ca:	f8c8 2004 	str.w	r2, [r8, #4]
  4153ce:	b003      	add	sp, #12
  4153d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4153d4:	2000      	movs	r0, #0
  4153d6:	f8c8 0004 	str.w	r0, [r8, #4]
  4153da:	b003      	add	sp, #12
  4153dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004153e0 <_sungetc_r>:
  4153e0:	b538      	push	{r3, r4, r5, lr}
  4153e2:	1c4b      	adds	r3, r1, #1
  4153e4:	d01a      	beq.n	41541c <_sungetc_r+0x3c>
  4153e6:	8993      	ldrh	r3, [r2, #12]
  4153e8:	6b14      	ldr	r4, [r2, #48]	; 0x30
  4153ea:	f023 0320 	bic.w	r3, r3, #32
  4153ee:	b2cd      	uxtb	r5, r1
  4153f0:	8193      	strh	r3, [r2, #12]
  4153f2:	b1b4      	cbz	r4, 415422 <_sungetc_r+0x42>
  4153f4:	4614      	mov	r4, r2
  4153f6:	6852      	ldr	r2, [r2, #4]
  4153f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4153fa:	429a      	cmp	r2, r3
  4153fc:	da09      	bge.n	415412 <_sungetc_r+0x32>
  4153fe:	6823      	ldr	r3, [r4, #0]
  415400:	1e5a      	subs	r2, r3, #1
  415402:	6022      	str	r2, [r4, #0]
  415404:	f803 5c01 	strb.w	r5, [r3, #-1]
  415408:	6863      	ldr	r3, [r4, #4]
  41540a:	3301      	adds	r3, #1
  41540c:	6063      	str	r3, [r4, #4]
  41540e:	4628      	mov	r0, r5
  415410:	bd38      	pop	{r3, r4, r5, pc}
  415412:	4621      	mov	r1, r4
  415414:	f000 f882 	bl	41551c <__submore>
  415418:	2800      	cmp	r0, #0
  41541a:	d0f0      	beq.n	4153fe <_sungetc_r+0x1e>
  41541c:	f04f 35ff 	mov.w	r5, #4294967295
  415420:	e7f5      	b.n	41540e <_sungetc_r+0x2e>
  415422:	6911      	ldr	r1, [r2, #16]
  415424:	6813      	ldr	r3, [r2, #0]
  415426:	b129      	cbz	r1, 415434 <_sungetc_r+0x54>
  415428:	4299      	cmp	r1, r3
  41542a:	d203      	bcs.n	415434 <_sungetc_r+0x54>
  41542c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  415430:	428d      	cmp	r5, r1
  415432:	d00f      	beq.n	415454 <_sungetc_r+0x74>
  415434:	6393      	str	r3, [r2, #56]	; 0x38
  415436:	4613      	mov	r3, r2
  415438:	6854      	ldr	r4, [r2, #4]
  41543a:	63d4      	str	r4, [r2, #60]	; 0x3c
  41543c:	f102 0040 	add.w	r0, r2, #64	; 0x40
  415440:	2103      	movs	r1, #3
  415442:	6310      	str	r0, [r2, #48]	; 0x30
  415444:	6351      	str	r1, [r2, #52]	; 0x34
  415446:	f803 5f42 	strb.w	r5, [r3, #66]!
  41544a:	2101      	movs	r1, #1
  41544c:	6013      	str	r3, [r2, #0]
  41544e:	6051      	str	r1, [r2, #4]
  415450:	4628      	mov	r0, r5
  415452:	bd38      	pop	{r3, r4, r5, pc}
  415454:	6851      	ldr	r1, [r2, #4]
  415456:	3b01      	subs	r3, #1
  415458:	3101      	adds	r1, #1
  41545a:	6013      	str	r3, [r2, #0]
  41545c:	6051      	str	r1, [r2, #4]
  41545e:	e7d6      	b.n	41540e <_sungetc_r+0x2e>

00415460 <__ssrefill_r>:
  415460:	b510      	push	{r4, lr}
  415462:	460c      	mov	r4, r1
  415464:	6b09      	ldr	r1, [r1, #48]	; 0x30
  415466:	b169      	cbz	r1, 415484 <__ssrefill_r+0x24>
  415468:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41546c:	4299      	cmp	r1, r3
  41546e:	d001      	beq.n	415474 <__ssrefill_r+0x14>
  415470:	f7f7 fd18 	bl	40cea4 <_free_r>
  415474:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  415476:	6063      	str	r3, [r4, #4]
  415478:	2000      	movs	r0, #0
  41547a:	6320      	str	r0, [r4, #48]	; 0x30
  41547c:	b113      	cbz	r3, 415484 <__ssrefill_r+0x24>
  41547e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  415480:	6023      	str	r3, [r4, #0]
  415482:	bd10      	pop	{r4, pc}
  415484:	89a3      	ldrh	r3, [r4, #12]
  415486:	6922      	ldr	r2, [r4, #16]
  415488:	6022      	str	r2, [r4, #0]
  41548a:	f043 0320 	orr.w	r3, r3, #32
  41548e:	2200      	movs	r2, #0
  415490:	81a3      	strh	r3, [r4, #12]
  415492:	6062      	str	r2, [r4, #4]
  415494:	f04f 30ff 	mov.w	r0, #4294967295
  415498:	bd10      	pop	{r4, pc}
  41549a:	bf00      	nop

0041549c <_sfread_r>:
  41549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4154a0:	b083      	sub	sp, #12
  4154a2:	fb02 f903 	mul.w	r9, r2, r3
  4154a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4154a8:	f1b9 0f00 	cmp.w	r9, #0
  4154ac:	d028      	beq.n	415500 <_sfread_r+0x64>
  4154ae:	4607      	mov	r7, r0
  4154b0:	469a      	mov	sl, r3
  4154b2:	9201      	str	r2, [sp, #4]
  4154b4:	460d      	mov	r5, r1
  4154b6:	464e      	mov	r6, r9
  4154b8:	f04f 0800 	mov.w	r8, #0
  4154bc:	e00f      	b.n	4154de <_sfread_r+0x42>
  4154be:	6821      	ldr	r1, [r4, #0]
  4154c0:	f7f8 fbbe 	bl	40dc40 <memcpy>
  4154c4:	6822      	ldr	r2, [r4, #0]
  4154c6:	f8c4 8004 	str.w	r8, [r4, #4]
  4154ca:	445a      	add	r2, fp
  4154cc:	6022      	str	r2, [r4, #0]
  4154ce:	4621      	mov	r1, r4
  4154d0:	4638      	mov	r0, r7
  4154d2:	445d      	add	r5, fp
  4154d4:	eba6 060b 	sub.w	r6, r6, fp
  4154d8:	f7ff ffc2 	bl	415460 <__ssrefill_r>
  4154dc:	b9a0      	cbnz	r0, 415508 <_sfread_r+0x6c>
  4154de:	f8d4 b004 	ldr.w	fp, [r4, #4]
  4154e2:	455e      	cmp	r6, fp
  4154e4:	4628      	mov	r0, r5
  4154e6:	465a      	mov	r2, fp
  4154e8:	d8e9      	bhi.n	4154be <_sfread_r+0x22>
  4154ea:	4632      	mov	r2, r6
  4154ec:	6821      	ldr	r1, [r4, #0]
  4154ee:	f7f8 fba7 	bl	40dc40 <memcpy>
  4154f2:	6862      	ldr	r2, [r4, #4]
  4154f4:	6823      	ldr	r3, [r4, #0]
  4154f6:	1b92      	subs	r2, r2, r6
  4154f8:	441e      	add	r6, r3
  4154fa:	46d1      	mov	r9, sl
  4154fc:	6062      	str	r2, [r4, #4]
  4154fe:	6026      	str	r6, [r4, #0]
  415500:	4648      	mov	r0, r9
  415502:	b003      	add	sp, #12
  415504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415508:	9b01      	ldr	r3, [sp, #4]
  41550a:	eba9 0906 	sub.w	r9, r9, r6
  41550e:	fbb9 f9f3 	udiv	r9, r9, r3
  415512:	4648      	mov	r0, r9
  415514:	b003      	add	sp, #12
  415516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41551a:	bf00      	nop

0041551c <__submore>:
  41551c:	f101 0340 	add.w	r3, r1, #64	; 0x40
  415520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415524:	460c      	mov	r4, r1
  415526:	6b09      	ldr	r1, [r1, #48]	; 0x30
  415528:	4299      	cmp	r1, r3
  41552a:	d014      	beq.n	415556 <__submore+0x3a>
  41552c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  41552e:	0077      	lsls	r7, r6, #1
  415530:	463a      	mov	r2, r7
  415532:	f7f8 fcdd 	bl	40def0 <_realloc_r>
  415536:	4605      	mov	r5, r0
  415538:	b340      	cbz	r0, 41558c <__submore+0x70>
  41553a:	eb00 0806 	add.w	r8, r0, r6
  41553e:	4632      	mov	r2, r6
  415540:	4640      	mov	r0, r8
  415542:	4629      	mov	r1, r5
  415544:	f7f8 fb7c 	bl	40dc40 <memcpy>
  415548:	f8c4 8000 	str.w	r8, [r4]
  41554c:	6325      	str	r5, [r4, #48]	; 0x30
  41554e:	6367      	str	r7, [r4, #52]	; 0x34
  415550:	2000      	movs	r0, #0
  415552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415556:	f44f 6180 	mov.w	r1, #1024	; 0x400
  41555a:	f7f8 f82b 	bl	40d5b4 <_malloc_r>
  41555e:	b1a8      	cbz	r0, 41558c <__submore+0x70>
  415560:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  415564:	6320      	str	r0, [r4, #48]	; 0x30
  415566:	f44f 6280 	mov.w	r2, #1024	; 0x400
  41556a:	6362      	str	r2, [r4, #52]	; 0x34
  41556c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  415570:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  415574:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  415578:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  41557c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  415580:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  415584:	6020      	str	r0, [r4, #0]
  415586:	2000      	movs	r0, #0
  415588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41558c:	f04f 30ff 	mov.w	r0, #4294967295
  415590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00415594 <__swbuf_r>:
  415594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  415596:	460d      	mov	r5, r1
  415598:	4614      	mov	r4, r2
  41559a:	4606      	mov	r6, r0
  41559c:	b110      	cbz	r0, 4155a4 <__swbuf_r+0x10>
  41559e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4155a0:	2b00      	cmp	r3, #0
  4155a2:	d04b      	beq.n	41563c <__swbuf_r+0xa8>
  4155a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4155a8:	69a3      	ldr	r3, [r4, #24]
  4155aa:	60a3      	str	r3, [r4, #8]
  4155ac:	b291      	uxth	r1, r2
  4155ae:	0708      	lsls	r0, r1, #28
  4155b0:	d539      	bpl.n	415626 <__swbuf_r+0x92>
  4155b2:	6923      	ldr	r3, [r4, #16]
  4155b4:	2b00      	cmp	r3, #0
  4155b6:	d036      	beq.n	415626 <__swbuf_r+0x92>
  4155b8:	b2ed      	uxtb	r5, r5
  4155ba:	0489      	lsls	r1, r1, #18
  4155bc:	462f      	mov	r7, r5
  4155be:	d515      	bpl.n	4155ec <__swbuf_r+0x58>
  4155c0:	6822      	ldr	r2, [r4, #0]
  4155c2:	6961      	ldr	r1, [r4, #20]
  4155c4:	1ad3      	subs	r3, r2, r3
  4155c6:	428b      	cmp	r3, r1
  4155c8:	da1c      	bge.n	415604 <__swbuf_r+0x70>
  4155ca:	3301      	adds	r3, #1
  4155cc:	68a1      	ldr	r1, [r4, #8]
  4155ce:	1c50      	adds	r0, r2, #1
  4155d0:	3901      	subs	r1, #1
  4155d2:	60a1      	str	r1, [r4, #8]
  4155d4:	6020      	str	r0, [r4, #0]
  4155d6:	7015      	strb	r5, [r2, #0]
  4155d8:	6962      	ldr	r2, [r4, #20]
  4155da:	429a      	cmp	r2, r3
  4155dc:	d01a      	beq.n	415614 <__swbuf_r+0x80>
  4155de:	89a3      	ldrh	r3, [r4, #12]
  4155e0:	07db      	lsls	r3, r3, #31
  4155e2:	d501      	bpl.n	4155e8 <__swbuf_r+0x54>
  4155e4:	2d0a      	cmp	r5, #10
  4155e6:	d015      	beq.n	415614 <__swbuf_r+0x80>
  4155e8:	4638      	mov	r0, r7
  4155ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4155ec:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4155ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4155f2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4155f6:	81a2      	strh	r2, [r4, #12]
  4155f8:	6822      	ldr	r2, [r4, #0]
  4155fa:	6661      	str	r1, [r4, #100]	; 0x64
  4155fc:	6961      	ldr	r1, [r4, #20]
  4155fe:	1ad3      	subs	r3, r2, r3
  415600:	428b      	cmp	r3, r1
  415602:	dbe2      	blt.n	4155ca <__swbuf_r+0x36>
  415604:	4621      	mov	r1, r4
  415606:	4630      	mov	r0, r6
  415608:	f7f7 fb6c 	bl	40cce4 <_fflush_r>
  41560c:	b940      	cbnz	r0, 415620 <__swbuf_r+0x8c>
  41560e:	6822      	ldr	r2, [r4, #0]
  415610:	2301      	movs	r3, #1
  415612:	e7db      	b.n	4155cc <__swbuf_r+0x38>
  415614:	4621      	mov	r1, r4
  415616:	4630      	mov	r0, r6
  415618:	f7f7 fb64 	bl	40cce4 <_fflush_r>
  41561c:	2800      	cmp	r0, #0
  41561e:	d0e3      	beq.n	4155e8 <__swbuf_r+0x54>
  415620:	f04f 37ff 	mov.w	r7, #4294967295
  415624:	e7e0      	b.n	4155e8 <__swbuf_r+0x54>
  415626:	4621      	mov	r1, r4
  415628:	4630      	mov	r0, r6
  41562a:	f7fd f981 	bl	412930 <__swsetup_r>
  41562e:	2800      	cmp	r0, #0
  415630:	d1f6      	bne.n	415620 <__swbuf_r+0x8c>
  415632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  415636:	6923      	ldr	r3, [r4, #16]
  415638:	b291      	uxth	r1, r2
  41563a:	e7bd      	b.n	4155b8 <__swbuf_r+0x24>
  41563c:	f7f7 fbaa 	bl	40cd94 <__sinit>
  415640:	e7b0      	b.n	4155a4 <__swbuf_r+0x10>
  415642:	bf00      	nop

00415644 <_wcrtomb_r>:
  415644:	b5f0      	push	{r4, r5, r6, r7, lr}
  415646:	4606      	mov	r6, r0
  415648:	b085      	sub	sp, #20
  41564a:	461f      	mov	r7, r3
  41564c:	b189      	cbz	r1, 415672 <_wcrtomb_r+0x2e>
  41564e:	4c10      	ldr	r4, [pc, #64]	; (415690 <_wcrtomb_r+0x4c>)
  415650:	4d10      	ldr	r5, [pc, #64]	; (415694 <_wcrtomb_r+0x50>)
  415652:	6824      	ldr	r4, [r4, #0]
  415654:	6b64      	ldr	r4, [r4, #52]	; 0x34
  415656:	2c00      	cmp	r4, #0
  415658:	bf08      	it	eq
  41565a:	462c      	moveq	r4, r5
  41565c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  415660:	47a0      	blx	r4
  415662:	1c43      	adds	r3, r0, #1
  415664:	d103      	bne.n	41566e <_wcrtomb_r+0x2a>
  415666:	2200      	movs	r2, #0
  415668:	238a      	movs	r3, #138	; 0x8a
  41566a:	603a      	str	r2, [r7, #0]
  41566c:	6033      	str	r3, [r6, #0]
  41566e:	b005      	add	sp, #20
  415670:	bdf0      	pop	{r4, r5, r6, r7, pc}
  415672:	460c      	mov	r4, r1
  415674:	4906      	ldr	r1, [pc, #24]	; (415690 <_wcrtomb_r+0x4c>)
  415676:	4a07      	ldr	r2, [pc, #28]	; (415694 <_wcrtomb_r+0x50>)
  415678:	6809      	ldr	r1, [r1, #0]
  41567a:	6b49      	ldr	r1, [r1, #52]	; 0x34
  41567c:	2900      	cmp	r1, #0
  41567e:	bf08      	it	eq
  415680:	4611      	moveq	r1, r2
  415682:	4622      	mov	r2, r4
  415684:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  415688:	a901      	add	r1, sp, #4
  41568a:	47a0      	blx	r4
  41568c:	e7e9      	b.n	415662 <_wcrtomb_r+0x1e>
  41568e:	bf00      	nop
  415690:	20000298 	.word	0x20000298
  415694:	200006c8 	.word	0x200006c8

00415698 <__register_exitproc>:
  415698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41569c:	4d2c      	ldr	r5, [pc, #176]	; (415750 <__register_exitproc+0xb8>)
  41569e:	4606      	mov	r6, r0
  4156a0:	6828      	ldr	r0, [r5, #0]
  4156a2:	4698      	mov	r8, r3
  4156a4:	460f      	mov	r7, r1
  4156a6:	4691      	mov	r9, r2
  4156a8:	f7f7 fef8 	bl	40d49c <__retarget_lock_acquire_recursive>
  4156ac:	4b29      	ldr	r3, [pc, #164]	; (415754 <__register_exitproc+0xbc>)
  4156ae:	681c      	ldr	r4, [r3, #0]
  4156b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4156b4:	2b00      	cmp	r3, #0
  4156b6:	d03e      	beq.n	415736 <__register_exitproc+0x9e>
  4156b8:	685a      	ldr	r2, [r3, #4]
  4156ba:	2a1f      	cmp	r2, #31
  4156bc:	dc1c      	bgt.n	4156f8 <__register_exitproc+0x60>
  4156be:	f102 0e01 	add.w	lr, r2, #1
  4156c2:	b176      	cbz	r6, 4156e2 <__register_exitproc+0x4a>
  4156c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4156c8:	2401      	movs	r4, #1
  4156ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4156ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4156d2:	4094      	lsls	r4, r2
  4156d4:	4320      	orrs	r0, r4
  4156d6:	2e02      	cmp	r6, #2
  4156d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4156dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4156e0:	d023      	beq.n	41572a <__register_exitproc+0x92>
  4156e2:	3202      	adds	r2, #2
  4156e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4156e8:	6828      	ldr	r0, [r5, #0]
  4156ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4156ee:	f7f7 fed7 	bl	40d4a0 <__retarget_lock_release_recursive>
  4156f2:	2000      	movs	r0, #0
  4156f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4156f8:	4b17      	ldr	r3, [pc, #92]	; (415758 <__register_exitproc+0xc0>)
  4156fa:	b30b      	cbz	r3, 415740 <__register_exitproc+0xa8>
  4156fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  415700:	f7f7 ff48 	bl	40d594 <malloc>
  415704:	4603      	mov	r3, r0
  415706:	b1d8      	cbz	r0, 415740 <__register_exitproc+0xa8>
  415708:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  41570c:	6002      	str	r2, [r0, #0]
  41570e:	2100      	movs	r1, #0
  415710:	6041      	str	r1, [r0, #4]
  415712:	460a      	mov	r2, r1
  415714:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  415718:	f04f 0e01 	mov.w	lr, #1
  41571c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  415720:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  415724:	2e00      	cmp	r6, #0
  415726:	d0dc      	beq.n	4156e2 <__register_exitproc+0x4a>
  415728:	e7cc      	b.n	4156c4 <__register_exitproc+0x2c>
  41572a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  41572e:	430c      	orrs	r4, r1
  415730:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  415734:	e7d5      	b.n	4156e2 <__register_exitproc+0x4a>
  415736:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  41573a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  41573e:	e7bb      	b.n	4156b8 <__register_exitproc+0x20>
  415740:	6828      	ldr	r0, [r5, #0]
  415742:	f7f7 fead 	bl	40d4a0 <__retarget_lock_release_recursive>
  415746:	f04f 30ff 	mov.w	r0, #4294967295
  41574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41574e:	bf00      	nop
  415750:	20000c44 	.word	0x20000c44
  415754:	00417464 	.word	0x00417464
  415758:	0040d595 	.word	0x0040d595

0041575c <_calloc_r>:
  41575c:	b510      	push	{r4, lr}
  41575e:	fb02 f101 	mul.w	r1, r2, r1
  415762:	f7f7 ff27 	bl	40d5b4 <_malloc_r>
  415766:	4604      	mov	r4, r0
  415768:	b1d8      	cbz	r0, 4157a2 <_calloc_r+0x46>
  41576a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  41576e:	f022 0203 	bic.w	r2, r2, #3
  415772:	3a04      	subs	r2, #4
  415774:	2a24      	cmp	r2, #36	; 0x24
  415776:	d818      	bhi.n	4157aa <_calloc_r+0x4e>
  415778:	2a13      	cmp	r2, #19
  41577a:	d914      	bls.n	4157a6 <_calloc_r+0x4a>
  41577c:	2300      	movs	r3, #0
  41577e:	2a1b      	cmp	r2, #27
  415780:	6003      	str	r3, [r0, #0]
  415782:	6043      	str	r3, [r0, #4]
  415784:	d916      	bls.n	4157b4 <_calloc_r+0x58>
  415786:	2a24      	cmp	r2, #36	; 0x24
  415788:	6083      	str	r3, [r0, #8]
  41578a:	60c3      	str	r3, [r0, #12]
  41578c:	bf11      	iteee	ne
  41578e:	f100 0210 	addne.w	r2, r0, #16
  415792:	6103      	streq	r3, [r0, #16]
  415794:	6143      	streq	r3, [r0, #20]
  415796:	f100 0218 	addeq.w	r2, r0, #24
  41579a:	2300      	movs	r3, #0
  41579c:	6013      	str	r3, [r2, #0]
  41579e:	6053      	str	r3, [r2, #4]
  4157a0:	6093      	str	r3, [r2, #8]
  4157a2:	4620      	mov	r0, r4
  4157a4:	bd10      	pop	{r4, pc}
  4157a6:	4602      	mov	r2, r0
  4157a8:	e7f7      	b.n	41579a <_calloc_r+0x3e>
  4157aa:	2100      	movs	r1, #0
  4157ac:	f7f8 fb46 	bl	40de3c <memset>
  4157b0:	4620      	mov	r0, r4
  4157b2:	bd10      	pop	{r4, pc}
  4157b4:	f100 0208 	add.w	r2, r0, #8
  4157b8:	e7ef      	b.n	41579a <_calloc_r+0x3e>
  4157ba:	bf00      	nop

004157bc <__aeabi_dmul>:
  4157bc:	b570      	push	{r4, r5, r6, lr}
  4157be:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4157c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4157c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4157ca:	bf1d      	ittte	ne
  4157cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4157d0:	ea94 0f0c 	teqne	r4, ip
  4157d4:	ea95 0f0c 	teqne	r5, ip
  4157d8:	f000 f8de 	bleq	415998 <__aeabi_dmul+0x1dc>
  4157dc:	442c      	add	r4, r5
  4157de:	ea81 0603 	eor.w	r6, r1, r3
  4157e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4157e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4157ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4157ee:	bf18      	it	ne
  4157f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4157f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4157f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4157fc:	d038      	beq.n	415870 <__aeabi_dmul+0xb4>
  4157fe:	fba0 ce02 	umull	ip, lr, r0, r2
  415802:	f04f 0500 	mov.w	r5, #0
  415806:	fbe1 e502 	umlal	lr, r5, r1, r2
  41580a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  41580e:	fbe0 e503 	umlal	lr, r5, r0, r3
  415812:	f04f 0600 	mov.w	r6, #0
  415816:	fbe1 5603 	umlal	r5, r6, r1, r3
  41581a:	f09c 0f00 	teq	ip, #0
  41581e:	bf18      	it	ne
  415820:	f04e 0e01 	orrne.w	lr, lr, #1
  415824:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  415828:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  41582c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  415830:	d204      	bcs.n	41583c <__aeabi_dmul+0x80>
  415832:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  415836:	416d      	adcs	r5, r5
  415838:	eb46 0606 	adc.w	r6, r6, r6
  41583c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  415840:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  415844:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  415848:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  41584c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  415850:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  415854:	bf88      	it	hi
  415856:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41585a:	d81e      	bhi.n	41589a <__aeabi_dmul+0xde>
  41585c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  415860:	bf08      	it	eq
  415862:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  415866:	f150 0000 	adcs.w	r0, r0, #0
  41586a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41586e:	bd70      	pop	{r4, r5, r6, pc}
  415870:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  415874:	ea46 0101 	orr.w	r1, r6, r1
  415878:	ea40 0002 	orr.w	r0, r0, r2
  41587c:	ea81 0103 	eor.w	r1, r1, r3
  415880:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  415884:	bfc2      	ittt	gt
  415886:	ebd4 050c 	rsbsgt	r5, r4, ip
  41588a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41588e:	bd70      	popgt	{r4, r5, r6, pc}
  415890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415894:	f04f 0e00 	mov.w	lr, #0
  415898:	3c01      	subs	r4, #1
  41589a:	f300 80ab 	bgt.w	4159f4 <__aeabi_dmul+0x238>
  41589e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4158a2:	bfde      	ittt	le
  4158a4:	2000      	movle	r0, #0
  4158a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4158aa:	bd70      	pople	{r4, r5, r6, pc}
  4158ac:	f1c4 0400 	rsb	r4, r4, #0
  4158b0:	3c20      	subs	r4, #32
  4158b2:	da35      	bge.n	415920 <__aeabi_dmul+0x164>
  4158b4:	340c      	adds	r4, #12
  4158b6:	dc1b      	bgt.n	4158f0 <__aeabi_dmul+0x134>
  4158b8:	f104 0414 	add.w	r4, r4, #20
  4158bc:	f1c4 0520 	rsb	r5, r4, #32
  4158c0:	fa00 f305 	lsl.w	r3, r0, r5
  4158c4:	fa20 f004 	lsr.w	r0, r0, r4
  4158c8:	fa01 f205 	lsl.w	r2, r1, r5
  4158cc:	ea40 0002 	orr.w	r0, r0, r2
  4158d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4158d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4158d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4158dc:	fa21 f604 	lsr.w	r6, r1, r4
  4158e0:	eb42 0106 	adc.w	r1, r2, r6
  4158e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4158e8:	bf08      	it	eq
  4158ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4158ee:	bd70      	pop	{r4, r5, r6, pc}
  4158f0:	f1c4 040c 	rsb	r4, r4, #12
  4158f4:	f1c4 0520 	rsb	r5, r4, #32
  4158f8:	fa00 f304 	lsl.w	r3, r0, r4
  4158fc:	fa20 f005 	lsr.w	r0, r0, r5
  415900:	fa01 f204 	lsl.w	r2, r1, r4
  415904:	ea40 0002 	orr.w	r0, r0, r2
  415908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41590c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  415910:	f141 0100 	adc.w	r1, r1, #0
  415914:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  415918:	bf08      	it	eq
  41591a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41591e:	bd70      	pop	{r4, r5, r6, pc}
  415920:	f1c4 0520 	rsb	r5, r4, #32
  415924:	fa00 f205 	lsl.w	r2, r0, r5
  415928:	ea4e 0e02 	orr.w	lr, lr, r2
  41592c:	fa20 f304 	lsr.w	r3, r0, r4
  415930:	fa01 f205 	lsl.w	r2, r1, r5
  415934:	ea43 0302 	orr.w	r3, r3, r2
  415938:	fa21 f004 	lsr.w	r0, r1, r4
  41593c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415940:	fa21 f204 	lsr.w	r2, r1, r4
  415944:	ea20 0002 	bic.w	r0, r0, r2
  415948:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  41594c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  415950:	bf08      	it	eq
  415952:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  415956:	bd70      	pop	{r4, r5, r6, pc}
  415958:	f094 0f00 	teq	r4, #0
  41595c:	d10f      	bne.n	41597e <__aeabi_dmul+0x1c2>
  41595e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  415962:	0040      	lsls	r0, r0, #1
  415964:	eb41 0101 	adc.w	r1, r1, r1
  415968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41596c:	bf08      	it	eq
  41596e:	3c01      	subeq	r4, #1
  415970:	d0f7      	beq.n	415962 <__aeabi_dmul+0x1a6>
  415972:	ea41 0106 	orr.w	r1, r1, r6
  415976:	f095 0f00 	teq	r5, #0
  41597a:	bf18      	it	ne
  41597c:	4770      	bxne	lr
  41597e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  415982:	0052      	lsls	r2, r2, #1
  415984:	eb43 0303 	adc.w	r3, r3, r3
  415988:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  41598c:	bf08      	it	eq
  41598e:	3d01      	subeq	r5, #1
  415990:	d0f7      	beq.n	415982 <__aeabi_dmul+0x1c6>
  415992:	ea43 0306 	orr.w	r3, r3, r6
  415996:	4770      	bx	lr
  415998:	ea94 0f0c 	teq	r4, ip
  41599c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4159a0:	bf18      	it	ne
  4159a2:	ea95 0f0c 	teqne	r5, ip
  4159a6:	d00c      	beq.n	4159c2 <__aeabi_dmul+0x206>
  4159a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4159ac:	bf18      	it	ne
  4159ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4159b2:	d1d1      	bne.n	415958 <__aeabi_dmul+0x19c>
  4159b4:	ea81 0103 	eor.w	r1, r1, r3
  4159b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4159bc:	f04f 0000 	mov.w	r0, #0
  4159c0:	bd70      	pop	{r4, r5, r6, pc}
  4159c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4159c6:	bf06      	itte	eq
  4159c8:	4610      	moveq	r0, r2
  4159ca:	4619      	moveq	r1, r3
  4159cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4159d0:	d019      	beq.n	415a06 <__aeabi_dmul+0x24a>
  4159d2:	ea94 0f0c 	teq	r4, ip
  4159d6:	d102      	bne.n	4159de <__aeabi_dmul+0x222>
  4159d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4159dc:	d113      	bne.n	415a06 <__aeabi_dmul+0x24a>
  4159de:	ea95 0f0c 	teq	r5, ip
  4159e2:	d105      	bne.n	4159f0 <__aeabi_dmul+0x234>
  4159e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4159e8:	bf1c      	itt	ne
  4159ea:	4610      	movne	r0, r2
  4159ec:	4619      	movne	r1, r3
  4159ee:	d10a      	bne.n	415a06 <__aeabi_dmul+0x24a>
  4159f0:	ea81 0103 	eor.w	r1, r1, r3
  4159f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4159f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4159fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  415a00:	f04f 0000 	mov.w	r0, #0
  415a04:	bd70      	pop	{r4, r5, r6, pc}
  415a06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  415a0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  415a0e:	bd70      	pop	{r4, r5, r6, pc}

00415a10 <__aeabi_ddiv>:
  415a10:	b570      	push	{r4, r5, r6, lr}
  415a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
  415a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  415a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  415a1e:	bf1d      	ittte	ne
  415a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  415a24:	ea94 0f0c 	teqne	r4, ip
  415a28:	ea95 0f0c 	teqne	r5, ip
  415a2c:	f000 f8a7 	bleq	415b7e <__aeabi_ddiv+0x16e>
  415a30:	eba4 0405 	sub.w	r4, r4, r5
  415a34:	ea81 0e03 	eor.w	lr, r1, r3
  415a38:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  415a3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  415a40:	f000 8088 	beq.w	415b54 <__aeabi_ddiv+0x144>
  415a44:	ea4f 3303 	mov.w	r3, r3, lsl #12
  415a48:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  415a4c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  415a50:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  415a54:	ea4f 2202 	mov.w	r2, r2, lsl #8
  415a58:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  415a5c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  415a60:	ea4f 2600 	mov.w	r6, r0, lsl #8
  415a64:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  415a68:	429d      	cmp	r5, r3
  415a6a:	bf08      	it	eq
  415a6c:	4296      	cmpeq	r6, r2
  415a6e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  415a72:	f504 7440 	add.w	r4, r4, #768	; 0x300
  415a76:	d202      	bcs.n	415a7e <__aeabi_ddiv+0x6e>
  415a78:	085b      	lsrs	r3, r3, #1
  415a7a:	ea4f 0232 	mov.w	r2, r2, rrx
  415a7e:	1ab6      	subs	r6, r6, r2
  415a80:	eb65 0503 	sbc.w	r5, r5, r3
  415a84:	085b      	lsrs	r3, r3, #1
  415a86:	ea4f 0232 	mov.w	r2, r2, rrx
  415a8a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  415a8e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  415a92:	ebb6 0e02 	subs.w	lr, r6, r2
  415a96:	eb75 0e03 	sbcs.w	lr, r5, r3
  415a9a:	bf22      	ittt	cs
  415a9c:	1ab6      	subcs	r6, r6, r2
  415a9e:	4675      	movcs	r5, lr
  415aa0:	ea40 000c 	orrcs.w	r0, r0, ip
  415aa4:	085b      	lsrs	r3, r3, #1
  415aa6:	ea4f 0232 	mov.w	r2, r2, rrx
  415aaa:	ebb6 0e02 	subs.w	lr, r6, r2
  415aae:	eb75 0e03 	sbcs.w	lr, r5, r3
  415ab2:	bf22      	ittt	cs
  415ab4:	1ab6      	subcs	r6, r6, r2
  415ab6:	4675      	movcs	r5, lr
  415ab8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  415abc:	085b      	lsrs	r3, r3, #1
  415abe:	ea4f 0232 	mov.w	r2, r2, rrx
  415ac2:	ebb6 0e02 	subs.w	lr, r6, r2
  415ac6:	eb75 0e03 	sbcs.w	lr, r5, r3
  415aca:	bf22      	ittt	cs
  415acc:	1ab6      	subcs	r6, r6, r2
  415ace:	4675      	movcs	r5, lr
  415ad0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  415ad4:	085b      	lsrs	r3, r3, #1
  415ad6:	ea4f 0232 	mov.w	r2, r2, rrx
  415ada:	ebb6 0e02 	subs.w	lr, r6, r2
  415ade:	eb75 0e03 	sbcs.w	lr, r5, r3
  415ae2:	bf22      	ittt	cs
  415ae4:	1ab6      	subcs	r6, r6, r2
  415ae6:	4675      	movcs	r5, lr
  415ae8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  415aec:	ea55 0e06 	orrs.w	lr, r5, r6
  415af0:	d018      	beq.n	415b24 <__aeabi_ddiv+0x114>
  415af2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  415af6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  415afa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  415afe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  415b02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  415b06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  415b0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  415b0e:	d1c0      	bne.n	415a92 <__aeabi_ddiv+0x82>
  415b10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415b14:	d10b      	bne.n	415b2e <__aeabi_ddiv+0x11e>
  415b16:	ea41 0100 	orr.w	r1, r1, r0
  415b1a:	f04f 0000 	mov.w	r0, #0
  415b1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  415b22:	e7b6      	b.n	415a92 <__aeabi_ddiv+0x82>
  415b24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415b28:	bf04      	itt	eq
  415b2a:	4301      	orreq	r1, r0
  415b2c:	2000      	moveq	r0, #0
  415b2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  415b32:	bf88      	it	hi
  415b34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  415b38:	f63f aeaf 	bhi.w	41589a <__aeabi_dmul+0xde>
  415b3c:	ebb5 0c03 	subs.w	ip, r5, r3
  415b40:	bf04      	itt	eq
  415b42:	ebb6 0c02 	subseq.w	ip, r6, r2
  415b46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  415b4a:	f150 0000 	adcs.w	r0, r0, #0
  415b4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  415b52:	bd70      	pop	{r4, r5, r6, pc}
  415b54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  415b58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  415b5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  415b60:	bfc2      	ittt	gt
  415b62:	ebd4 050c 	rsbsgt	r5, r4, ip
  415b66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  415b6a:	bd70      	popgt	{r4, r5, r6, pc}
  415b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415b70:	f04f 0e00 	mov.w	lr, #0
  415b74:	3c01      	subs	r4, #1
  415b76:	e690      	b.n	41589a <__aeabi_dmul+0xde>
  415b78:	ea45 0e06 	orr.w	lr, r5, r6
  415b7c:	e68d      	b.n	41589a <__aeabi_dmul+0xde>
  415b7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  415b82:	ea94 0f0c 	teq	r4, ip
  415b86:	bf08      	it	eq
  415b88:	ea95 0f0c 	teqeq	r5, ip
  415b8c:	f43f af3b 	beq.w	415a06 <__aeabi_dmul+0x24a>
  415b90:	ea94 0f0c 	teq	r4, ip
  415b94:	d10a      	bne.n	415bac <__aeabi_ddiv+0x19c>
  415b96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  415b9a:	f47f af34 	bne.w	415a06 <__aeabi_dmul+0x24a>
  415b9e:	ea95 0f0c 	teq	r5, ip
  415ba2:	f47f af25 	bne.w	4159f0 <__aeabi_dmul+0x234>
  415ba6:	4610      	mov	r0, r2
  415ba8:	4619      	mov	r1, r3
  415baa:	e72c      	b.n	415a06 <__aeabi_dmul+0x24a>
  415bac:	ea95 0f0c 	teq	r5, ip
  415bb0:	d106      	bne.n	415bc0 <__aeabi_ddiv+0x1b0>
  415bb2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  415bb6:	f43f aefd 	beq.w	4159b4 <__aeabi_dmul+0x1f8>
  415bba:	4610      	mov	r0, r2
  415bbc:	4619      	mov	r1, r3
  415bbe:	e722      	b.n	415a06 <__aeabi_dmul+0x24a>
  415bc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  415bc4:	bf18      	it	ne
  415bc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  415bca:	f47f aec5 	bne.w	415958 <__aeabi_dmul+0x19c>
  415bce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  415bd2:	f47f af0d 	bne.w	4159f0 <__aeabi_dmul+0x234>
  415bd6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  415bda:	f47f aeeb 	bne.w	4159b4 <__aeabi_dmul+0x1f8>
  415bde:	e712      	b.n	415a06 <__aeabi_dmul+0x24a>

00415be0 <__aeabi_dcmpun>:
  415be0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  415be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415be8:	d102      	bne.n	415bf0 <__aeabi_dcmpun+0x10>
  415bea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  415bee:	d10a      	bne.n	415c06 <__aeabi_dcmpun+0x26>
  415bf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  415bf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415bf8:	d102      	bne.n	415c00 <__aeabi_dcmpun+0x20>
  415bfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  415bfe:	d102      	bne.n	415c06 <__aeabi_dcmpun+0x26>
  415c00:	f04f 0000 	mov.w	r0, #0
  415c04:	4770      	bx	lr
  415c06:	f04f 0001 	mov.w	r0, #1
  415c0a:	4770      	bx	lr

00415c0c <__aeabi_d2f>:
  415c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  415c10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  415c14:	bf24      	itt	cs
  415c16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  415c1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  415c1e:	d90d      	bls.n	415c3c <__aeabi_d2f+0x30>
  415c20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  415c24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  415c28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  415c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  415c30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  415c34:	bf08      	it	eq
  415c36:	f020 0001 	biceq.w	r0, r0, #1
  415c3a:	4770      	bx	lr
  415c3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  415c40:	d121      	bne.n	415c86 <__aeabi_d2f+0x7a>
  415c42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  415c46:	bfbc      	itt	lt
  415c48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  415c4c:	4770      	bxlt	lr
  415c4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415c52:	ea4f 5252 	mov.w	r2, r2, lsr #21
  415c56:	f1c2 0218 	rsb	r2, r2, #24
  415c5a:	f1c2 0c20 	rsb	ip, r2, #32
  415c5e:	fa10 f30c 	lsls.w	r3, r0, ip
  415c62:	fa20 f002 	lsr.w	r0, r0, r2
  415c66:	bf18      	it	ne
  415c68:	f040 0001 	orrne.w	r0, r0, #1
  415c6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  415c70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  415c74:	fa03 fc0c 	lsl.w	ip, r3, ip
  415c78:	ea40 000c 	orr.w	r0, r0, ip
  415c7c:	fa23 f302 	lsr.w	r3, r3, r2
  415c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
  415c84:	e7cc      	b.n	415c20 <__aeabi_d2f+0x14>
  415c86:	ea7f 5362 	mvns.w	r3, r2, asr #21
  415c8a:	d107      	bne.n	415c9c <__aeabi_d2f+0x90>
  415c8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  415c90:	bf1e      	ittt	ne
  415c92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  415c96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  415c9a:	4770      	bxne	lr
  415c9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  415ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  415ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  415ca8:	4770      	bx	lr
  415caa:	bf00      	nop

00415cac <__FUNCTION__.11737>:
  415cac:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  415cbc:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  415ccc:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  415cdc:	204c 6f63 6d6d 6e61 2164 000a 000d 0000     L command!......

00415cec <__FUNCTION__.9327>:
  415cec:	6968 5f66 6573 646e 0000 0000               hif_send....

00415cf8 <__FUNCTION__.9337>:
  415cf8:	6968 5f66 7369 0072                         hif_isr.

00415d00 <__FUNCTION__.9343>:
  415d00:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00415d10 <__FUNCTION__.9355>:
  415d10:	6968 5f66 6572 6563 7669 0065               hif_receive.

00415d1c <__FUNCTION__.9371>:
  415d1c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
  415d2c:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
  415d3c:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
  415d4c:	6961 0a6c 0000 0000 6828 6669 2029 6461     ail.....(hif) ad
  415d5c:	7264 7365 2073 7562 2073 6166 6c69 000a     dress bus fail..
  415d6c:	6828 6669 2029 6f43 7272 7075 6574 2064     (hif) Corrupted 
  415d7c:	6170 6b63 7465 5320 7a69 2065 203d 7525     packet Size = %u
  415d8c:	3c20 204c 203d 7525 202c 2047 203d 7525      <L = %u, G = %u
  415d9c:	202c 504f 3d20 2520 3230 3e58 000a 0000     , OP = %02X>....
  415dac:	4957 4946 6320 6c61 626c 6361 206b 7369     WIFI callback is
  415dbc:	6e20 746f 7220 6765 7369 6574 6572 0a64      not registered.
  415dcc:	0000 0000 6353 6b6f 7465 6320 6c61 626c     ....Scoket callb
  415ddc:	6361 206b 7369 6e20 746f 7220 6765 7369     ack is not regis
  415dec:	6574 6572 0a64 0000 744f 2061 6163 6c6c     tered...Ota call
  415dfc:	6162 6b63 6920 2073 6f6e 2074 6572 6967     back is not regi
  415e0c:	7473 7265 6465 000a 7243 7079 6f74 6320     stered..Crypto c
  415e1c:	6c61 626c 6361 206b 7369 6e20 746f 7220     allback is not r
  415e2c:	6765 7369 6574 6572 0a64 0000 6953 6d67     egistered...Sigm
  415e3c:	2061 6163 6c6c 6162 6b63 6920 2073 6f6e     a callback is no
  415e4c:	2074 6572 6967 7473 7265 6465 000a 0000     t registered....
  415e5c:	6828 6669 2029 6e69 6176 696c 2064 7267     (hif) invalid gr
  415e6c:	756f 2070 4449 000a 6828 6669 2029 6f68     oup ID..(hif) ho
  415e7c:	7473 6120 7070 6420 6469 276e 2074 6573     st app didn't se
  415e8c:	2074 5852 4420 6e6f 2065 253c 3e75 253c     t RX Done <%u><%
  415e9c:	3e58 000a 6828 6669 2029 7257 6e6f 2067     X>..(hif) Wrong 
  415eac:	6953 657a 000a 0000 6828 6669 2029 6146     Size....(hif) Fa
  415ebc:	736c 2065 6e69 6574 7272 7075 2074 6c25     lse interrupt %l
  415ecc:	0078 0000 6828 6669 2029 6146 6c69 7420     x...(hif) Fail t
  415edc:	206f 6552 6461 6920 746e 7265 7572 7470     o Read interrupt
  415eec:	7220 6765 000a 0000 4828 4649 2029 6146      reg....(HIF) Fa
  415efc:	6c69 7420 206f 6168 646e 656c 6920 746e     il to handle int
  415f0c:	7265 7572 7470 2520 2064 7274 2079 6741     errupt %d try Ag
  415f1c:	6961 2e6e 0a2e 0000 6820 6669 725f 6365     ain..... hif_rec
  415f2c:	6965 6576 203a 6e49 6176 696c 2064 7261     eive: Invalid ar
  415f3c:	7567 656d 746e 000a 5041 2050 6552 7571     gument..APP Requ
  415f4c:	7365 6574 2064 6953 657a 6920 2073 616c     ested Size is la
  415f5c:	6772 7265 7420 6168 206e 6874 2065 6572     rger than the re
  415f6c:	6963 6576 2064 7562 6666 7265 7320 7a69     cived buffer siz
  415f7c:	2065 253c 3e75 253c 756c 0a3e 0000 0000     e <%u><%lu>.....
  415f8c:	5041 2050 6552 7571 7365 6574 2064 6441     APP Requested Ad
  415f9c:	7264 7365 2073 6562 6f79 646e 7420 6568     dress beyond the
  415fac:	7220 6365 7669 6465 6220 6675 6566 2072      recived buffer 
  415fbc:	6461 7264 7365 2073 6e61 2064 656c 676e     address and leng
  415fcc:	6874 000a 5247 2070 203f 6425 000a 0000     th..GRp ? %d....
  415fdc:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
  415fec:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
  415ffc:	4828 4649 4629 6961 206c 6f74 7720 6b61     (HIF)Fail to wak
  41600c:	7075 7420 6568 6320 6968 0a70 0000 0000     up the chip.....

0041601c <__FUNCTION__.9342>:
  41601c:	326d 5f6d 7373 5f6c 6263 0000               m2m_ssl_cb..

00416028 <__FUNCTION__.9388>:
  416028:	326d 5f6d 7373 5f6c 6e69 7469 0000 0000     m2m_ssl_init....
  416038:	7245 6f72 2072 6572 6563 7669 6e69 2067     Error receiving 
  416048:	5353 204c 7266 6d6f 7420 6568 4820 4649     SSL from the HIF
  416058:	000a 0000 6968 5f66 6572 6967 7473 7265     ....hif_register
  416068:	635f 2862 2029 6166 6c69 6465 7720 7469     _cb() failed wit
  416078:	2068 6572 3d74 6425 0000 0000               h ret=%d....

00416084 <__FUNCTION__.9306>:
  416084:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00416090 <__FUNCTION__.9335>:
  416090:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

004160a0 <__FUNCTION__.9363>:
  4160a0:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  4160b0:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
  4160c0:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
  4160d0:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
  4160e0:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
  4160f0:	746f 7620 6c61 6469 000a 0000 6e49 6176     ot valid....Inva
  416100:	696c 2064 654b 0a79 0000 0000 5353 4449     lid Key.....SSID
  416110:	4c20 4e45 4920 564e 4c41 4449 000a 0000      LEN INVALID....
  416120:	4843 4920 564e 4c41 4449 000a 6e49 6176     CH INVALID..Inva
  416130:	696c 2064 6557 2070 656b 2079 6e69 6564     lid Wep key inde
  416140:	2078 6425 000a 0000 6e49 6176 696c 2064     x %d....Invalid 
  416150:	6557 2070 656b 2079 656c 676e 6874 2520     Wep key length %
  416160:	0a64 0000 6e49 6f63 7272 6365 2074 5350     d...Incorrect PS
  416170:	204b 656b 2079 656c 676e 6874 000a 0000     K key length....
  416180:	6e75 6564 6966 656e 2064 6573 2063 7974     undefined sec ty
  416190:	6570 000a 6946 6d72 6177 6572 7620 7265     pe..Firmware ver
  4161a0:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
  4161b0:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
  4161c0:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
  4161d0:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
  4161e0:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
  4161f0:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
  416200:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
  416210:	000a 0000 3531 303a 3a33 3334 0000 0000     ....15:03:43....
  416220:	6f4e 2076 3232 3220 3130 0037 7244 7669     Nov 22 2017.Driv
  416230:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
  416240:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
  416250:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...

00416260 <__FUNCTION__.9169>:
  416260:	6863 7069 775f 6b61 0065 0000               chip_wake...

0041626c <__FUNCTION__.9218>:
  41626c:	6863 7069 645f 6965 696e 0074               chip_deinit.

00416278 <__FUNCTION__.9247>:
  416278:	7570 6c6c 7075 635f 7274 006c 6166 6c69     pullup_ctrl.fail
  416288:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  416298:	7a69 0a65 0000 0000 7542 2073 7265 6f72     ize.....Bus erro
  4162a8:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
  4162b8:	6146 6c69 6465 7420 206f 6177 756b 2070     Failed to wakup 
  4162c8:	6874 2065 6863 7069 000a 0000 705b 6c75     the chip....[pul
  4162d8:	756c 5f70 7463 6c72 3a5d 6620 6961 656c     lup_ctrl]: faile
  4162e8:	2064 6f74 7220 6165 0a64 0000 705b 6c75     d to read...[pul
  4162f8:	756c 5f70 7463 6c72 3a5d 6620 6961 656c     lup_ctrl]: faile
  416308:	2064 6f74 7720 6972 6574 000a 7244 7669     d to write..Driv
  416318:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
  416328:	786c 000a                                   lx..

0041632c <__FUNCTION__.9216>:
  41632c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00416338 <__FUNCTION__.9223>:
  416338:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
  416348:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
  416358:	645f 6965 696e 2074 6166 6c69 000a 0000     _deinit fail....
  416368:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
  416378:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
  416388:	6c69 000a 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
  416398:	6166 6c69 6920 696e 2074 7562 0a73 0000     fail init bus...
  4163a8:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
  4163b8:	6920 746e 7265 7572 7470 2e73 0a2e 0000      interrupts.....
  4163c8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  4163d8:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  4163e8:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

004163f4 <__FUNCTION__.8522>:
  4163f4:	7073 5f69 6d63 0064                         spi_cmd.

004163fc <__FUNCTION__.8529>:
  4163fc:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0041640c <__FUNCTION__.8538>:
  41640c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00416418 <__FUNCTION__.8554>:
  416418:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00416428 <__FUNCTION__.8569>:
  416428:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00416438 <__FUNCTION__.8581>:
  416438:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00416448 <__FUNCTION__.8592>:
  416448:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00416458 <__FUNCTION__.8604>:
  416458:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00416468 <__FUNCTION__.8617>:
  416468:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00416474 <__FUNCTION__.8638>:
  416474:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00416480 <crc7_syndrome_table>:
  416480:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  416490:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  4164a0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  4164b0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  4164c0:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  4164d0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  4164e0:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  4164f0:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  416500:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  416510:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  416520:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  416530:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  416540:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  416550:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  416560:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  416570:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
  416580:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  416590:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  4165a0:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  4165b0:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  4165c0:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  4165d0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4165e0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  4165f0:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  416600:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  416610:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  416620:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  416630:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  416640:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  416650:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  416660:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  416670:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  416680:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  416690:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  4166a0:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  4166b0:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  4166c0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  4166d0:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  4166e0:	7220 6165 2e64 2e2e 000a 0000 6552 6573      read.......Rese
  4166f0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
  416700:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
  416710:	3a5d 4620 6961 656c 2064 6d63 2c64 7720     ]: Failed cmd, w
  416720:	6972 6574 6220 6f6c 6b63 2820 3025 7838     rite block (%08x
  416730:	2e29 2e2e 000a 0000 6e5b 696d 7320 6970     ).......[nmi spi
  416740:	5d20 203a 6146 6c69 6465 6320 646d 7220      ]: Failed cmd r
  416750:	7365 6f70 736e 2c65 7720 6972 6574 6220     esponse, write b
  416760:	6f6c 6b63 2820 3025 7838 2e29 2e2e 000a     lock (%08x).....
  416770:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  416780:	2064 6164 6174 6220 6f6c 6b63 6320 646d     d data block cmd
  416790:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  4167a0:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  4167b0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  4167c0:	6f6c 6b63 7720 6972 6574 202c 7562 2073     lock write, bus 
  4167d0:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  4167e0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  4167f0:	6174 6220 6f6c 6b63 6320 6372 7720 6972     ta block crc wri
  416800:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
  416810:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  416820:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
  416830:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  416840:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  416850:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
  416860:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
  416870:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  416880:	7720 6972 6574 2e2e 0a2e 0000 6e5b 696d      write......[nmi
  416890:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  4168a0:	2064 7277 7469 2c65 6220 7375 6520 7272     d write, bus err
  4168b0:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
  4168c0:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
  4168d0:	7073 6e6f 6573 7220 6165 2c64 6220 7375     sponse read, bus
  4168e0:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  4168f0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  416900:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
  416910:	202c 7562 2073 7265 6f72 2e72 2e2e 000a     , bus error.....
  416920:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  416930:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  416940:	6572 6461 2e2e 282e 3025 7832 0a29 0000     read...(%02x)...
  416950:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  416960:	2064 6164 6174 6220 6f6c 6b63 7220 6165     d data block rea
  416970:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
  416980:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  416990:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  4169a0:	6320 6372 7220 6165 2c64 6220 7375 6520      crc read, bus e
  4169b0:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
  4169c0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  4169d0:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
  4169e0:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
  4169f0:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
  416a00:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
  416a10:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  416a20:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  416a30:	6174 7220 6165 2e64 2e2e 000a 6552 6573     ta read.....Rese
  416a40:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
  416a50:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
  416a60:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
  416a70:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  416a80:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  416a90:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
  416aa0:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
  416ab0:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
  416ac0:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
  416ad0:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
  416ae0:	2074 253c 3e64 000a                         t <%d>..

00416ae8 <__FUNCTION__.9483>:
  416ae8:	7373 536c 7465 6f53 6b63 704f 0074 0000     sslSetSockOpt...
  416af8:	6f53 6b63 7420 206f 6564 656c 6574 3c20     Sock to delete <
  416b08:	6425 0a3e 0000 0000 4e53 2049 7845 6563     %d>.....SNI Exce
  416b18:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
  416b28:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
  416b38:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
  416b48:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
  416b58:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
  416b68:	206e 4449 3d20 2520 0d64 000a 0004 4003     n ID = %d......@

00416b78 <device_execution_time_108>:
  416b78:	0028 000d 0024 0014 001c 0032 0015 000b     (...$.....2.....
  416b88:	0040 0073 0011 0017 0030 0002 0017 0020     @.s.....0..... .
  416b98:	0008 000e 0016 001d 0001 0003 0046 0030     ............F.0.
  416ba8:	001b 0017 0002 0005 0047 0009 0041 003c     ........G...A.<.
  416bb8:	0020 000a 0045 0048 0012 001a                ...E.H.....

00416bc4 <device_execution_time_204>:
  416bc4:	0028 0026 001c 003e 0015 002b 0011 0045     (.&...>...+...E.
  416bd4:	0030 0002 0017 0018 0008 0023 0016 003c     0.........#...<.
  416be4:	0001 0002 001b 0032 0002 0005 0047 0016     ......2.....G...
  416bf4:	0020 000c 0012 002a                          .....*.

00416bfc <device_execution_time_508>:
  416bfc:	0028 000d 0024 0014 001c 0032 0043 003a     (...$.....2.C.:.
  416c0c:	0015 000b 0040 0073 0011 0017 0030 0002     ....@.s.....0...
  416c1c:	0017 0020 0008 000e 0016 001d 0001 0003     .. .............
  416c2c:	0046 0030 001b 0017 0002 0005 0047 0009     F.0.........G...
  416c3c:	0041 003c 0020 000a 0045 0048 0012 001a     A.<. ...E.H.....

00416c4c <device_execution_time_608_m0>:
  416c4c:	0051 001b 0028 0028 0024 0019 001c 0032     Q...(.(.$.....2.
  416c5c:	0043 003c 0015 0019 0040 0073 0030 0005     C.<.....@.s.0...
  416c6c:	0056 00a5 0017 0023 0008 0037 0016 0014     V.....#...7.....
  416c7c:	0046 0032 001b 0017 0002 0005 0080 0050     F.2...........P.
  416c8c:	0077 00fa 0047 0024 0041 0073 0020 000a     w...G.$.A.s. ...
  416c9c:	0045 0069 0012 002d                         E.i...-.

00416ca4 <device_execution_time_608_m1>:
  416ca4:	0051 001b 0028 0028 0024 0019 001c 0032     Q...(.(.$.....2.
  416cb4:	0043 008c 0015 0023 0040 00d7 0030 0005     C.....#.@...0...
  416cc4:	0056 00a5 0017 0023 0008 0037 0016 0014     V.....#...7.....
  416cd4:	0046 0032 001b 0017 0002 0005 0080 0097     F.2.............
  416ce4:	0077 024e 0047 002a 0041 00dc 0020 000a     w.N.G.*.A... ...
  416cf4:	0045 0127 0012 002d                         E.'...-.

00416cfc <device_execution_time_608_m2>:
  416cfc:	0051 001b 0028 0028 0024 0019 001c 0032     Q...(.(.$.....2.
  416d0c:	0043 01c7 0015 0023 0040 0276 0030 0005     C.....#.@.v.0...
  416d1c:	0056 00a5 0017 0023 0008 0037 0016 0014     V.....#...7.....
  416d2c:	0046 0032 001b 0017 0002 0005 0080 01c3     F.2.............
  416d3c:	0077 0898 0047 004b 0041 0299 0020 000a     w...G.K.A... ...
  416d4c:	0045 043d 0012 002d 203a 654c 676e 6874     E.=...-.: Length
  416d5c:	6f20 2066 6e65 6f63 6564 2064 7562 6666      of encoded buff
  416d6c:	7265 7420 6f6f 7320 616d 6c6c 2d20 202d     er too small -- 
  416d7c:	7453 7461 7375 203a 3025 5832 0a0d 0000     Status: %02X....
  416d8c:	203a 754e 6c6c 6920 706e 7475 7020 7261     : Null input par
  416d9c:	6d61 7465 7265 2d20 202d 7453 7461 7375     ameter -- Status
  416dac:	203a 3025 5832 0a0d 0000 0000               : %02X......

00416db8 <k.5694>:
  416db8:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
  416dc8:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
  416dd8:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
  416de8:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
  416df8:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
  416e08:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
  416e18:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
  416e28:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
  416e38:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
  416e48:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
  416e58:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
  416e68:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
  416e78:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
  416e88:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
  416e98:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
  416ea8:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
  416eb8:	1104 4333 0080 0110 0200 0800 0200 0900     ..3C............
  416ec8:	0400 0005 2522 2273 253a 0064 2522 2273     ...."%s":%d."%s"
  416ed8:	223a 7325 0022 0000                         :"%s"...

00416ee0 <g_jwt_header>:
  416ee0:	227b 6c61 2267 223a 5345 3532 2236 222c     {"alg":"ES256","
  416ef0:	7974 2270 223a 574a 2254 007d 514d 4354     typ":"JWT"}.MQTC
  416f00:	0000 0000 0004 0000 0000 0000 0000 0000     ................
  416f10:	0000 0000 003c 0001 514d 5754 0000 0000     ....<...MQTW....
	...
  416f54:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
  416f64:	3425 0078 005b 0000 002c 0000 005d 0000     %4x.[...,...]...
  416f74:	007b 0000 003a 0000 0020 0000 007d 0000     {...:... ...}...
  416f84:	7274 6575 0000 0000 6166 736c 0065 0000     true....false...
  416f94:	6425 0000 6625 0000 756e 6c6c 0000 0000     %d..%f..null....
  416fa4:	302d 0000 5878 0000 7453 7261 6974 676e     -0..xX..Starting
  416fb4:	4520 6178 706d 656c 2e2e 0d2e 000a 0000      Example........
  416fc4:	4957 4946 535f 4154 4554 495f 494e 0054     WIFI_STATE_INIT.
  416fd4:	4957 4946 535f 4154 4554 545f 534c 495f     WIFI_STATE_TLS_I
  416fe4:	494e 0054 4957 4946 535f 4154 4554 435f     NIT.WIFI_STATE_C
  416ff4:	4e4f 454e 5443 0000 4957 4946 535f 4154     ONNECT..WIFI_STA
  417004:	4554 575f 4941 0054 4957 4946 535f 4154     TE_WAIT.WIFI_STA
  417014:	4554 525f 4145 5944 0000 0000 4957 4946     TE_READY....WIFI
  417024:	535f 4154 4554 545f 4d49 4f45 5455 0000     _STATE_TIMEOUT..
  417034:	4957 4946 535f 4154 4554 455f 5252 524f     WIFI_STATE_ERROR
  417044:	0000 0000                                   ....

00417048 <wifi_app_cb_list>:
  417048:	002c 0000 a88d 0040 0032 0000 a729 0040     ,.....@.2...).@.
  417058:	001b 0000 a83d 0040                         ....=.@.

00417060 <diode_sensors>:
  417060:	0029 0110 2324 2a2b 6166 2d6e 7073 6565     )...$#+*fan-spee
  417070:	0064 0000 7564 6172 6974 6e6f 0000 0000     d...duration....
  417080:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
  417098:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
  4170d8:	6166 2d6e 7073 6565 2d64 616d 0070 0000     fan-speed-map...
  4170e8:	766f 7265 6972 6564 0000 0000 7075 6164     override....upda
  4170f8:	6574 722d 7461 0065 6146 6c69 6465 7420     te-rate.Failed t
  417108:	206f 6567 2074 6f74 6970 2063 7473 6972     o get topic stri
  417118:	676e 0000 207b 7422 6d69 7365 6174 706d     ng..{ "timestamp
  417128:	3a22 2520 2c75 2220 6574 706d 7265 7461     ": %u, "temperat
  417138:	7275 2265 203a 6425 252e 3230 2c64 2220     ure": %d.%02d, "
  417148:	6166 2d6e 7073 6565 2264 203a 6425 7d20     fan-speed": %d }
  417158:	0000 0000 7550 6c62 7369 6968 676e 4d20     ....Publishing M
  417168:	5451 2054 654d 7373 6761 2065 7325 0a0d     QTT Message %s..
  417178:	0000 0000 6146 6c69 6465 7420 206f 7570     ....Failed to pu
  417188:	6c62 7369 2068 6874 2065 514d 5454 6d20     blish the MQTT m
  417198:	7365 6173 6567 203a 6425 0a0d 0000 0000     essage: %d......
  4171a8:	514d 5454 4320 696c 6e65 2074 6146 6c69     MQTT Client Fail
  4171b8:	6465 7420 206f 6f43 6e6e 6365 2074 2528     ed to Connect (%
  4171c8:	2964 0a0d 0000 0000 6146 6c69 6465 7420     d)......Failed t
  4171d8:	206f 6f6c 6461 7420 6568 7320 6275 6373     o load the subsc
  4171e8:	6972 7470 6f69 206e 6f74 6970 2063 616e     ription topic na
  4171f8:	656d 0000 514d 5454 5320 6275 6373 6972     me..MQTT Subscri
  417208:	7470 6f69 206e 6146 6c69 6465 2820 6425     ption Failed (%d
  417218:	0d29 000a 4c43 4549 544e 535f 4154 4554     )...CLIENT_STATE
  417228:	495f 494e 0054 0000 4c43 4549 544e 535f     _INIT...CLIENT_S
  417238:	4154 4554 475f 5445 545f 4d49 0045 0000     TATE_GET_TIME...
  417248:	4c43 4549 544e 535f 4154 4554 435f 4e4f     CLIENT_STATE_CON
  417258:	454e 5443 0000 0000 4c43 4549 544e 535f     NECT....CLIENT_S
  417268:	4154 4554 525f 4e55 0000 0000 4c43 4549     TATE_RUN....CLIE
  417278:	544e 535f 4154 4554 455f 5252 524f 0000     NT_STATE_ERROR..

00417288 <config_gcp_host_name>:
  417288:	716d 7474 672e 6f6f 6c67 6165 6970 2e73     mqtt.googleapis.
  417298:	6f63 006d                                   com.

0041729c <config_gcp_project_id>:
  41729c:	7270 2d6f 7263 6565 2d6b 3731 3833 3731     pro-creek-173817
  4172ac:	0000 0000                                   ....

004172b0 <config_gcp_region_id>:
  4172b0:	7375 632d 6e65 7274 6c61 0031               us-central1.

004172bc <config_gcp_registry_id>:
  4172bc:	6f69 7374 6377 3032 3731 0000               iotswc2017..

004172c8 <config_gcp_thing_id>:
  4172c8:	6f69 7374 6377 645f 6d65 5f6f 0033 0000     iotswc_demo_3...
  4172d8:	7270 6a6f 6365 7374 252f 2f73 6f6c 6163     projects/%s/loca
  4172e8:	6974 6e6f 2f73 7325 722f 6765 7369 7274     tions/%s/registr
  4172f8:	6569 2f73 7325 642f 7665 6369 7365 252f     ies/%s/devices/%
  417308:	0073 0000 6169 0074 7865 0070 7561 0064     s...iat.exp.aud.
  417318:	642f 7665 6369 7365 252f 2f73 7665 6e65     /devices/%s/even
  417328:	7374 0000 642f 7665 6369 7365 252f 2f73     ts../devices/%s/
  417338:	6f63 666e 6769 0000 6e75 7375 6465 0000     config..unused..
  417348:	7325 0000 7355 5765 7469 5068 6572 6143     %s..UseWithPreCa
  417358:	7475 6f69 216e 0021 434d 5048 7547 7365     ution!!.MCHPGues
  417368:	0074 0000 2d2d 2d2d 422d 4745 4e49 5020     t...-----BEGIN P
  417378:	4255 494c 2043 454b 2d59 2d2d 2d2d 0a0d     UBLIC KEY-----..
  417388:	7325 0a0d 2d2d 2d2d 452d 444e 5020 4255     %s..-----END PUB
  417398:	494c 2043 454b 2d59 2d2d 2d2d 0a0d 0000     LIC KEY-----....

004173a8 <public_key_x509_header>:
  4173a8:	5930 1330 0706 862a ce48 023d 0601 2a08     0Y0...*.H.=....*
  4173b8:	4886 3dce 0103 0307 0042 0004 7440 0041     .H.=....B...@tA.
  4173c8:	744c 0041 7454 0041 745c 0041               LtA.TtA.\tA.

004173d4 <VersionAes132>:
  4173d4:	0101 0000                                   ....

004173d8 <VersionEcc508>:
  4173d8:	0101 0000                                   ....

004173dc <VersionKit>:
  4173dc:	0001 0005                                   ....

004173e0 <VersionSha204>:
  4173e0:	0301 0000 694b 2074 5852 203a 6425 202c     ....Kit RX: %d, 
  4173f0:	7325 0a0d 0000 0000 694b 2074 5854 203a     %s......Kit TX: 
  417400:	6425 202c 7325 0a0d 0000 0000 6e75 6e6b     %d, %s......unkn
  417410:	776f 5f6e 6564 6976 6563 0000 5441 3838     own_device..AT88
  417420:	4b43 3935 2030 0000 4853 3241 3430 0020     CK590 ..SHA204 .
  417430:	4541 3153 3233 0020 4345 3143 3830 0020     AES132 .ECC108 .
  417440:	6f6e 645f 7665 6369 2065 0000 5053 2049     no_device ..SPI 
  417450:	0000 0000 5754 2049 0000 0000 5753 2049     ....TWI ....SWI 
  417460:	0000 0000                                   ....

00417464 <_global_impure_ptr>:
  417464:	02a0 2000 0043 0000 4f50 4953 0058 0000     ... C...POSIX...
  417474:	002e 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  417484:	6e61 0000                                   an..

00417488 <fpi.6141>:
  417488:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  417498:	0000 0000                                   ....

0041749c <fpinan.6177>:
  41749c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
  4174ac:	0000 0000                                   ....

004174b0 <tinytens>:
  4174b0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  4174c0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  4174d0:	6f43 64ac 0628 1168 4e49 0046 6e69 0066     Co.d(.h.INF.inf.
  4174e0:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
  4174f0:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
  417500:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
  417510:	6e28 6c75 296c 0000 0030 0000               (null)..0...

0041751c <blanks.7223>:
  41751c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0041752c <zeroes.7224>:
  41752c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  41753c:	2565 646c 0000 0000                         e%ld....

00417544 <basefix.7294>:
  417544:	000a 0001 0002 0003 0004 0005 0006 0007     ................
  417554:	0008 0009 000a 000b 000c 000d 000e 000f     ................
  417564:	0010 0000                                   ....

00417568 <blanks.7217>:
  417568:	2020 2020 2020 2020 2020 2020 2020 2020                     

00417578 <zeroes.7218>:
  417578:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00417588 <_ctype_>:
  417588:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  417598:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4175a8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4175b8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4175c8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4175d8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4175e8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4175f8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  417608:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  41768c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0041769c <__hexdig>:
	...
  4176cc:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  4176dc:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  4176fc:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...

004177a0 <__mprec_bigtens>:
  4177a0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4177b0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4177c0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004177c8 <__mprec_tens>:
  4177c8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4177d8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4177e8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4177f8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  417808:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  417818:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  417828:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  417838:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  417848:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  417858:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  417868:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  417878:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  417888:	9db4 79d9 7843 44ea                         ...yCx.D

00417890 <p05.6055>:
  417890:	0005 0000 0019 0000 007d 0000               ........}...

0041789c <_init>:
  41789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41789e:	bf00      	nop
  4178a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4178a2:	bc08      	pop	{r3}
  4178a4:	469e      	mov	lr, r3
  4178a6:	4770      	bx	lr

004178a8 <__init_array_start>:
  4178a8:	004129f9 	.word	0x004129f9

004178ac <__frame_dummy_init_array_entry>:
  4178ac:	0040016d                                m.@.

004178b0 <_fini>:
  4178b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4178b2:	bf00      	nop
  4178b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4178b6:	bc08      	pop	{r3}
  4178b8:	469e      	mov	lr, r3
  4178ba:	4770      	bx	lr

004178bc <__fini_array_start>:
  4178bc:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000c:	b430      	push	{r4, r5}
2000000e:	b082      	sub	sp, #8
20000010:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000012:	b35b      	cbz	r3, 2000006c <efc_perform_read_sequence+0x60>
20000014:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000016:	6803      	ldr	r3, [r0, #0]
20000018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000001c:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000001e:	b2c9      	uxtb	r1, r1
20000020:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000024:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000026:	6883      	ldr	r3, [r0, #8]
20000028:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000002a:	9b01      	ldr	r3, [sp, #4]
2000002c:	f013 0f01 	tst.w	r3, #1
20000030:	d1f9      	bne.n	20000026 <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000032:	b14d      	cbz	r5, 20000048 <efc_perform_read_sequence+0x3c>
20000034:	4621      	mov	r1, r4
20000036:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000003a:	4c0d      	ldr	r4, [pc, #52]	; (20000070 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000003c:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000040:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000044:	4299      	cmp	r1, r3
20000046:	d1f9      	bne.n	2000003c <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000048:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000004a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000004e:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000050:	6883      	ldr	r3, [r0, #8]
20000052:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000054:	9b01      	ldr	r3, [sp, #4]
20000056:	f013 0f01 	tst.w	r3, #1
2000005a:	d0f9      	beq.n	20000050 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000005c:	6803      	ldr	r3, [r0, #0]
2000005e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000062:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000064:	2000      	movs	r0, #0
}
20000066:	b002      	add	sp, #8
20000068:	bc30      	pop	{r4, r5}
2000006a:	4770      	bx	lr
		return EFC_RC_INVALID;
2000006c:	2002      	movs	r0, #2
2000006e:	e7fa      	b.n	20000066 <efc_perform_read_sequence+0x5a>
20000070:	003ffffc 	.word	0x003ffffc

20000074 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000074:	6001      	str	r1, [r0, #0]
20000076:	4770      	bx	lr

20000078 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000078:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000007a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2000007c:	6883      	ldr	r3, [r0, #8]
2000007e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	9b01      	ldr	r3, [sp, #4]
20000082:	f013 0f01 	tst.w	r3, #1
20000086:	d0f9      	beq.n	2000007c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000088:	9801      	ldr	r0, [sp, #4]
}
2000008a:	f000 000e 	and.w	r0, r0, #14
2000008e:	b002      	add	sp, #8
20000090:	4770      	bx	lr
20000092:	bf00      	nop

20000094 <egstrNmBusCapabilities>:
20000094:	1000 0000                                   ....

20000098 <udi_api_hid_generic>:
20000098:	3625 0040 3685 0040 3691 0040 35ad 0040     %6@..6@..6@..5@.
200000a8:	0000 0000                                   ....

200000ac <udi_hid_generic_report_desc>:
200000ac:	ff06 09ff a101 0901 0902 1503 2600 00ff     .............&..
200000bc:	0875 4095 0281 0409 0509 0015 ff26 7500     u..@........&..u
200000cc:	9508 9140 0902 0906 1507 2600 00ff 0875     ..@........&..u.
200000dc:	0495 02b1 00c0 0000                         ........

200000e4 <udc_config>:
200000e4:	0124 2000 00f0 2000 0000 0000               $.. ... ....

200000f0 <udc_config_fshs>:
200000f0:	00f8 2000 0138 2000                         ... 8.. 

200000f8 <udc_desc>:
200000f8:	0209 0029 0101 a000 0932 0004 0200 0003     ..).....2.......
20000108:	0000 2109 0111 0100 3522 0700 8105 4003     ...!...."5.....@
20000118:	0400 0507 0302 0040 0004 0000               ......@.....

20000124 <udc_device_desc>:
20000124:	0112 0200 0000 0800 03eb 2312 0100 0201     ...........#....
20000134:	0100 0000                                   ....

20000138 <udi_apis>:
20000138:	0098 2000                                   ... 

2000013c <udc_string_desc>:
2000013c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000170 <udc_string_desc_languageid>:
20000170:	0304 0409                                   ....

20000174 <udc_string_manufacturer_name>:
20000174:	694d 7263 636f 6968 2070 6554 6863 6f6e     Microchip Techno
20000184:	6f6c 7967 4920 636e 002e 0000               logy Inc....

20000190 <udc_string_product_name>:
20000190:	4347 2050 6f49 2054 6f43 6572 4520 6178     GCP IoT Core Exa
200001a0:	706d 656c 0100                                   mple.

200001a5 <g_interrupt_enabled>:
200001a5:	0001 0000                                        ...

200001a8 <SystemCoreClock>:
200001a8:	1200 007a                                   ..z.

200001ac <cfg_ateccx08a_i2c_default>:
200001ac:	0200 0000 02c0 0000 1a80 0006 0000 0000     ................
	...
200001d0:	05dc 0000 0014 0000 0000 0000               ............

200001dc <atcab_b64rules_default>:
200001dc:	2f2b 403d                                   +/=@

200001e0 <atcab_b64rules_urlsafe>:
200001e0:	5f2d 0000                                   -_..

200001e4 <parson_free>:
200001e4:	d5a5 0040                                   ..@.

200001e8 <parson_malloc>:
200001e8:	d595 0040                                   ..@.

200001ec <g_wifi_states>:
200001ec:	0000 0000 6fc4 0041 a8c1 0040 0001 0000     .....oA...@.....
200001fc:	6fd4 0041 a801 0040 0002 0000 6fe8 0041     .oA...@......oA.
2000020c:	a775 0040 0003 0000 6ffc 0041 a73d 0040     u.@......oA.=.@.
2000021c:	0004 0000 700c 0041 a64d 0040 0005 0000     .....pA.M.@.....
2000022c:	7020 0041 a64f 0040 0006 0000 7034 0041      pA.O.@.....4pA.
2000023c:	a759 0040                                   Y.@.

20000240 <g_temp_speed_map>:
20000240:	0000 0000 5dc0 03e8 5fb4 05dc 61a8 07d0     .....]..._...a..
20000250:	639c 09c4 6590 0bb8 6978 0fa0               .c...e..xi..

2000025c <g_client_states>:
2000025c:	0000 0000 721c 0041 b24d 0040 0001 0000     .....rA.M.@.....
2000026c:	7230 0041 b2ed 0040 0002 0000 7248 0041     0rA...@.....HrA.
2000027c:	b319 0040 0003 0000 7260 0041 b29d 0040     ..@.....`rA...@.
2000028c:	0004 0000 7274 0041 b0e3 0040               ....trA...@.

20000298 <_impure_ptr>:
20000298:	02a0 2000 0000 0000                         ... ....

200002a0 <impure_data>:
200002a0:	0000 0000 058c 2000 05f4 2000 065c 2000     ....... ... \.. 
	...
20000348:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000358:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200006c8 <__global_locale>:
200006c8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200006e8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000708:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000728:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000748:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000768:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000788:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200007a8:	28e9 0041 db15 0040 0000 0000 7588 0041     .(A...@......uA.
200007b8:	7474 0041 71cc 0041 71cc 0041 71cc 0041     ttA..qA..qA..qA.
200007c8:	71cc 0041 71cc 0041 71cc 0041 71cc 0041     .qA..qA..qA..qA.
200007d8:	71cc 0041 71cc 0041 ffff ffff ffff ffff     .qA..qA.........
200007e8:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000810:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000834 <__malloc_av_>:
	...
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 
2000085c:	0854 2000 0854 2000 085c 2000 085c 2000     T.. T.. \.. \.. 
2000086c:	0864 2000 0864 2000 086c 2000 086c 2000     d.. d.. l.. l.. 
2000087c:	0874 2000 0874 2000 087c 2000 087c 2000     t.. t.. |.. |.. 
2000088c:	0884 2000 0884 2000 088c 2000 088c 2000     ... ... ... ... 
2000089c:	0894 2000 0894 2000 089c 2000 089c 2000     ... ... ... ... 
200008ac:	08a4 2000 08a4 2000 08ac 2000 08ac 2000     ... ... ... ... 
200008bc:	08b4 2000 08b4 2000 08bc 2000 08bc 2000     ... ... ... ... 
200008cc:	08c4 2000 08c4 2000 08cc 2000 08cc 2000     ... ... ... ... 
200008dc:	08d4 2000 08d4 2000 08dc 2000 08dc 2000     ... ... ... ... 
200008ec:	08e4 2000 08e4 2000 08ec 2000 08ec 2000     ... ... ... ... 
200008fc:	08f4 2000 08f4 2000 08fc 2000 08fc 2000     ... ... ... ... 
2000090c:	0904 2000 0904 2000 090c 2000 090c 2000     ... ... ... ... 
2000091c:	0914 2000 0914 2000 091c 2000 091c 2000     ... ... ... ... 
2000092c:	0924 2000 0924 2000 092c 2000 092c 2000     $.. $.. ,.. ,.. 
2000093c:	0934 2000 0934 2000 093c 2000 093c 2000     4.. 4.. <.. <.. 
2000094c:	0944 2000 0944 2000 094c 2000 094c 2000     D.. D.. L.. L.. 
2000095c:	0954 2000 0954 2000 095c 2000 095c 2000     T.. T.. \.. \.. 
2000096c:	0964 2000 0964 2000 096c 2000 096c 2000     d.. d.. l.. l.. 
2000097c:	0974 2000 0974 2000 097c 2000 097c 2000     t.. t.. |.. |.. 
2000098c:	0984 2000 0984 2000 098c 2000 098c 2000     ... ... ... ... 
2000099c:	0994 2000 0994 2000 099c 2000 099c 2000     ... ... ... ... 
200009ac:	09a4 2000 09a4 2000 09ac 2000 09ac 2000     ... ... ... ... 
200009bc:	09b4 2000 09b4 2000 09bc 2000 09bc 2000     ... ... ... ... 
200009cc:	09c4 2000 09c4 2000 09cc 2000 09cc 2000     ... ... ... ... 
200009dc:	09d4 2000 09d4 2000 09dc 2000 09dc 2000     ... ... ... ... 
200009ec:	09e4 2000 09e4 2000 09ec 2000 09ec 2000     ... ... ... ... 
200009fc:	09f4 2000 09f4 2000 09fc 2000 09fc 2000     ... ... ... ... 
20000a0c:	0a04 2000 0a04 2000 0a0c 2000 0a0c 2000     ... ... ... ... 
20000a1c:	0a14 2000 0a14 2000 0a1c 2000 0a1c 2000     ... ... ... ... 
20000a2c:	0a24 2000 0a24 2000 0a2c 2000 0a2c 2000     $.. $.. ,.. ,.. 
20000a3c:	0a34 2000 0a34 2000 0a3c 2000 0a3c 2000     4.. 4.. <.. <.. 
20000a4c:	0a44 2000 0a44 2000 0a4c 2000 0a4c 2000     D.. D.. L.. L.. 
20000a5c:	0a54 2000 0a54 2000 0a5c 2000 0a5c 2000     T.. T.. \.. \.. 
20000a6c:	0a64 2000 0a64 2000 0a6c 2000 0a6c 2000     d.. d.. l.. l.. 
20000a7c:	0a74 2000 0a74 2000 0a7c 2000 0a7c 2000     t.. t.. |.. |.. 
20000a8c:	0a84 2000 0a84 2000 0a8c 2000 0a8c 2000     ... ... ... ... 
20000a9c:	0a94 2000 0a94 2000 0a9c 2000 0a9c 2000     ... ... ... ... 
20000aac:	0aa4 2000 0aa4 2000 0aac 2000 0aac 2000     ... ... ... ... 
20000abc:	0ab4 2000 0ab4 2000 0abc 2000 0abc 2000     ... ... ... ... 
20000acc:	0ac4 2000 0ac4 2000 0acc 2000 0acc 2000     ... ... ... ... 
20000adc:	0ad4 2000 0ad4 2000 0adc 2000 0adc 2000     ... ... ... ... 
20000aec:	0ae4 2000 0ae4 2000 0aec 2000 0aec 2000     ... ... ... ... 
20000afc:	0af4 2000 0af4 2000 0afc 2000 0afc 2000     ... ... ... ... 
20000b0c:	0b04 2000 0b04 2000 0b0c 2000 0b0c 2000     ... ... ... ... 
20000b1c:	0b14 2000 0b14 2000 0b1c 2000 0b1c 2000     ... ... ... ... 
20000b2c:	0b24 2000 0b24 2000 0b2c 2000 0b2c 2000     $.. $.. ,.. ,.. 
20000b3c:	0b34 2000 0b34 2000 0b3c 2000 0b3c 2000     4.. 4.. <.. <.. 
20000b4c:	0b44 2000 0b44 2000 0b4c 2000 0b4c 2000     D.. D.. L.. L.. 
20000b5c:	0b54 2000 0b54 2000 0b5c 2000 0b5c 2000     T.. T.. \.. \.. 
20000b6c:	0b64 2000 0b64 2000 0b6c 2000 0b6c 2000     d.. d.. l.. l.. 
20000b7c:	0b74 2000 0b74 2000 0b7c 2000 0b7c 2000     t.. t.. |.. |.. 
20000b8c:	0b84 2000 0b84 2000 0b8c 2000 0b8c 2000     ... ... ... ... 
20000b9c:	0b94 2000 0b94 2000 0b9c 2000 0b9c 2000     ... ... ... ... 
20000bac:	0ba4 2000 0ba4 2000 0bac 2000 0bac 2000     ... ... ... ... 
20000bbc:	0bb4 2000 0bb4 2000 0bbc 2000 0bbc 2000     ... ... ... ... 
20000bcc:	0bc4 2000 0bc4 2000 0bcc 2000 0bcc 2000     ... ... ... ... 
20000bdc:	0bd4 2000 0bd4 2000 0bdc 2000 0bdc 2000     ... ... ... ... 
20000bec:	0be4 2000 0be4 2000 0bec 2000 0bec 2000     ... ... ... ... 
20000bfc:	0bf4 2000 0bf4 2000 0bfc 2000 0bfc 2000     ... ... ... ... 
20000c0c:	0c04 2000 0c04 2000 0c0c 2000 0c0c 2000     ... ... ... ... 
20000c1c:	0c14 2000 0c14 2000 0c1c 2000 0c1c 2000     ... ... ... ... 
20000c2c:	0c24 2000 0c24 2000 0c2c 2000 0c2c 2000     $.. $.. ,.. ,.. 

20000c3c <__malloc_sbrk_base>:
20000c3c:	ffff ffff                                   ....

20000c40 <__malloc_trim_threshold>:
20000c40:	0000 0002                                   ....

20000c44 <__atexit_recursive_mutex>:
20000c44:	3050 2000                                   P0. 
